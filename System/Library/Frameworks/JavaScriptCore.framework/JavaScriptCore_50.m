void JSC::VM::performOpportunisticallyScheduledTasks(JSC::VM *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  WTF::ApproximateTime *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  double v23;
  uint32x4_t v24;
  unint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  __int16 v41;
  uint64_t v42;

  v12 = JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v40, a1, a3, a4, a5, a6, a7, a8, a9);
  v20 = *(_QWORD *)(*((_QWORD *)a1 + 5236) + 72);
  if (v20 && *(_DWORD *)(v20 - 12))
    goto LABEL_22;
  v21 = *((_BYTE *)a1 + 345);
  *((_BYTE *)a1 + 345) = 1;
  v22 = WTF::ApproximateTime::now(v12);
  if ((a2 & 1) == 0)
  {
    v23 = a9 - v22;
    if (v22 - *((double *)a1 + 159) > 0.03
      && *((_BYTE *)a1 + 344)
      && (v25 = *((_QWORD *)a1 + 39)) != 0
      && (*(double *)v24.i64 = *((double *)a1 + 96) * (double)*((unint64_t *)a1 + 40) / (double)v25 + 0.002,
          *(double *)v24.i64 < v23))
    {
      v26 = (char *)a1 + 344;
      if (HIBYTE(word_1ECF4C5CC) && *((_BYTE *)a1 + 753))
      {
        v41 = 257;
        v42 = 0;
        v27 = JSC::Heap::requestCollection((uint64_t)a1 + 192, (uint64_t)&v41, v14, v15, v16, v17, v18, v19);
        JSC::Heap::waitForCollection((JSC::VM *)((char *)a1 + 192), v27, v28, v29, v30, v31, v32, v33);
      }
    }
    else
    {
      v34 = *((double *)a1 + 157);
      if (v34 < *((double *)a1 + 158))
        v34 = *((double *)a1 + 158);
      v35 = v22 - v34;
      v24.i64[0] = 0x3F847AE147AE147BLL;
      if (v35 <= 0.01)
        goto LABEL_18;
      v36 = *((_QWORD *)a1 + 34);
      if (!v36)
        goto LABEL_18;
      v37 = *((_QWORD *)a1 + 28);
      if (!v37)
        goto LABEL_18;
      v24.i64[0] = 0x3F50624DD2F1A9FCLL;
      if (*((double *)a1 + 97) * (double)v36 / (double)v37 + 0.001 >= v23)
        goto LABEL_18;
      v41 = 256;
      v42 = 0;
      JSC::Heap::collectSync((uint64_t)a1 + 192, &v41, v14, v15, v16, v17, v18, v19);
      v26 = (char *)a1 + 344;
    }
    *v26 = 0;
  }
LABEL_18:
  v38 = *((_QWORD *)a1 + 105);
  if (*(_QWORD *)(v38 + 40) || (v39 = *((_QWORD *)a1 + 62), (*(_QWORD *)(v38 + 40) = v39) != 0))
    JSC::IncrementalSweeper::doSweep(v38, (uint64_t)a1, 1, v15, v16, v17, v18, v19, a9, v23, v24);
  *((_BYTE *)a1 + 345) = v21;
LABEL_22:
  JSC::JSLockHolder::~JSLockHolder(&v40, v13, v14, v15, v16, v17, v18, v19);
}

_WORD *JSC::VM::invalidateStructureChainIntegrity(uint64_t a1)
{
  _WORD *result;
  BOOL v2;
  int v3;

  result = *(_WORD **)(a1 + 93080);
  if (result)
    v2 = (result & 1) == 0;
  else
    v2 = 0;
  if (v2)
  {
    v3 = (unsigned __int16)result[66560]++ + 1;
    if ((v3 & 0x10000) != 0)
      return JSC::MegamorphicCache::clearEntries(result);
  }
  return result;
}

void JSC::VM::registerWasmInstance(JSC::VM *this, WTF::ThreadSafeWeakPtrControlBlock **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::ThreadSafeWeakHashSet<JSC::Wasm::Instance>::add<JSC::Wasm::Instance,(void *)0>((uint64_t)this + 93480, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::ThreadSafeWeakHashSet<JSC::Wasm::Instance>::add<JSC::Wasm::Instance,(void *)0>(uint64_t a1, WTF::ThreadSafeWeakPtrControlBlock **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  int v30;
  _BYTE v31[24];
  WTF::ThreadSafeWeakPtrControlBlock **v32;
  WTF::ThreadSafeWeakPtrControlBlock *v33;

  if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(*a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    return;
  }
  v17 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v17))
    goto LABEL_4;
LABEL_5:
  v33 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*a2, v10, v11, v12, v13, v14, v15, v16);
  if (v33)
  {
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v27;
    if (v27 > v26)
    {
      _ZN3WTF9HashTableIPKN3JSC4Wasm8InstanceENS_12KeyValuePairIS5_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS8_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISD_EENS_11DefaultHashIS5_EENS_7HashMapIS5_SC_SH_NS_10HashTraitsIS5_EENSJ_ISC_EENS_15HashTableTraitsEE18KeyValuePairTraitsESK_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS3_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKST_((uint64_t *)a1, v19, v20, v21, v22, v23, v24, v25);
      v28 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      if (*(_QWORD *)a1)
      {
        v28 = *(_DWORD *)(*(_QWORD *)a1 - 12);
        if (v28 > 0x7FFFFFFE)
          v28 = 0x7FFFFFFF;
      }
      *(_DWORD *)(a1 + 12) = 2 * v28;
    }
    v32 = a2;
    WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::add<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>((uint64_t)v31, (uint64_t *)a1, (uint64_t *)&v32, (uint64_t *)&v33, v22, v23, v24, v25);
    if (v33)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v33, v29, v20, v21, v22, v23, v24, v25);
  }
  v30 = __ldxr(v17);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v17))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 16), 0, v20, v21, v22, v23, v24, v25);
}

_QWORD *JSC::VM::DrainMicrotaskDelayScope::DrainMicrotaskDelayScope(_QWORD *this, JSC::VM *a2)
{
  unsigned int v2;

  do
    v2 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v2 + 1, (unsigned int *)a2));
  *this = a2;
  ++*((_QWORD *)a2 + 11675);
  return this;
}

{
  unsigned int v2;

  do
    v2 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v2 + 1, (unsigned int *)a2));
  *this = a2;
  ++*((_QWORD *)a2 + 11675);
  return this;
}

uint64_t JSC::VM::DrainMicrotaskDelayScope::increment(uint64_t this)
{
  if (*(_QWORD *)this)
    ++*(_QWORD *)(*(_QWORD *)this + 93400);
  return this;
}

void JSC::VM::DrainMicrotaskDelayScope::~DrainMicrotaskDelayScope(JSC::VM **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;

  v10 = *this;
  if (!*this)
  {
    *this = 0;
    return;
  }
  v11 = *((_QWORD *)v10 + 11675) - 1;
  *((_QWORD *)v10 + 11675) = v11;
  if (v11)
  {
    *this = 0;
  }
  else
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v36, v10, a3, a4, a5, a6, a7, a8, a9);
    JSC::VM::drainMicrotasks(*this, v12, v13, v14, v15, v16, v17, v18);
    JSC::JSLockHolder::~JSLockHolder(&v36, v19, v20, v21, v22, v23, v24, v25);
    v10 = *this;
    *this = 0;
    if (!v10)
      return;
  }
  do
  {
    v26 = __ldaxr((unsigned int *)v10);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, (unsigned int *)v10));
  if (!v27)
  {
    atomic_store(1u, (unsigned int *)v10);
    JSC::VM::~VM(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  }
}

{
  JSC::VM *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;

  v10 = *this;
  if (!*this)
  {
    *this = 0;
    return;
  }
  v11 = *((_QWORD *)v10 + 11675) - 1;
  *((_QWORD *)v10 + 11675) = v11;
  if (v11)
  {
    *this = 0;
  }
  else
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v36, v10, a3, a4, a5, a6, a7, a8, a9);
    JSC::VM::drainMicrotasks(*this, v12, v13, v14, v15, v16, v17, v18);
    JSC::JSLockHolder::~JSLockHolder(&v36, v19, v20, v21, v22, v23, v24, v25);
    v10 = *this;
    *this = 0;
    if (!v10)
      return;
  }
  do
  {
    v26 = __ldaxr((unsigned int *)v10);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, (unsigned int *)v10));
  if (!v27)
  {
    atomic_store(1u, (unsigned int *)v10);
    JSC::VM::~VM(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  }
}

void JSC::VM::DrainMicrotaskDelayScope::decrement(JSC::VM **this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::VM *v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;

  v9 = *this;
  if (*this)
  {
    v10 = *((_QWORD *)v9 + 11675) - 1;
    *((_QWORD *)v9 + 11675) = v10;
    if (!v10)
    {
      JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v26, v9, a4, a5, a6, a7, a8, a9, a2);
      JSC::VM::drainMicrotasks(*this, v12, v13, v14, v15, v16, v17, v18);
      JSC::JSLockHolder::~JSLockHolder(&v26, v19, v20, v21, v22, v23, v24, v25);
    }
  }
}

_QWORD *JSC::VM::DrainMicrotaskDelayScope::DrainMicrotaskDelayScope(_QWORD *this, const JSC::VM::DrainMicrotaskDelayScope *a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    do
      v3 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v3 + 1, (unsigned int *)v2));
    ++*(_QWORD *)(v2 + 93400);
  }
  *this = v2;
  return this;
}

{
  uint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    do
      v3 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v3 + 1, (unsigned int *)v2));
    ++*(_QWORD *)(v2 + 93400);
  }
  *this = v2;
  return this;
}

JSC::VM **JSC::VM::DrainMicrotaskDelayScope::operator=(JSC::VM **a1, JSC::VM **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::VM *v27;
  unsigned int v28;
  JSC::VM *v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;

  if (a1 != a2)
  {
    v11 = *a1;
    if (*a1)
    {
      v12 = *((_QWORD *)v11 + 11675) - 1;
      *((_QWORD *)v11 + 11675) = v12;
      if (!v12)
      {
        JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, v11, a3, a4, a5, a6, a7, a8, a9);
        JSC::VM::drainMicrotasks(*a1, v13, v14, v15, v16, v17, v18, v19);
        JSC::JSLockHolder::~JSLockHolder(&v41, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    v27 = *a2;
    if (*a2)
    {
      do
        v28 = __ldaxr((unsigned int *)v27);
      while (__stlxr(v28 + 1, (unsigned int *)v27));
    }
    v29 = *a1;
    *a1 = v27;
    if (v29)
    {
      do
      {
        v30 = __ldaxr((unsigned int *)v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, (unsigned int *)v29));
      if (!v31)
      {
        atomic_store(1u, (unsigned int *)v29);
        JSC::VM::~VM(v29, (uint64_t)v11, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      v27 = *a1;
    }
    if (v27)
      ++*((_QWORD *)v27 + 11675);
  }
  return a1;
}

{
  JSC::VM *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::VM *v27;
  JSC::VM *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;

  v11 = *a1;
  if (*a1)
  {
    v12 = *((_QWORD *)v11 + 11675) - 1;
    *((_QWORD *)v11 + 11675) = v12;
    if (!v12)
    {
      JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v40, v11, a3, a4, a5, a6, a7, a8, a9);
      JSC::VM::drainMicrotasks(*a1, v13, v14, v15, v16, v17, v18, v19);
      JSC::JSLockHolder::~JSLockHolder(&v40, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  v27 = *a2;
  *a2 = 0;
  v28 = *a1;
  *a1 = v27;
  if (v28)
  {
    do
    {
      v29 = __ldaxr((unsigned int *)v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, (unsigned int *)v28));
    if (!v30)
    {
      atomic_store(1u, (unsigned int *)v28);
      JSC::VM::~VM(v28, (uint64_t)v11, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    v27 = *a1;
  }
  if (v27)
    ++*((_QWORD *)v27 + 11675);
  return a1;
}

void JSC::VMEntryScope::setUpSlow(JSC::VMEntryScope *this, WTF::Thread *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VMEntryScope *v8;
  JSC::VMEntryScope *v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;

  v8 = this;
  *(_QWORD *)(*(_QWORD *)this + 90568) = this;
  v9 = *(JSC::VMEntryScope **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9)
  {
    this = (JSC::VMEntryScope *)WTF::Thread::initializeCurrentTLS(this);
    v9 = this;
  }
  if ((*((_BYTE *)v9 + 5) & 0x20) == 0)
  {
    *((_BYTE *)v9 + 5) |= 0x20u;
    if (BYTE2(dword_1ECF4C6C3))
      JSC::Wasm::startTrackingCurrentThread(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    WTF::registerThreadForMachExceptionHandling(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(JSC::VM **)v8;
  if (*(_BYTE *)(*(_QWORD *)v8 + 56))
    goto LABEL_11;
  v11 = *((_QWORD *)v10 + 11624);
  v12 = atomic_load(&JSC::lastTimeZoneID);
  if (v11 != v12)
  {
    v10 = *(JSC::VM **)v8;
LABEL_11:
    JSC::VM::executeEntryScopeServicesOnEntry(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::VMEntryScope::tearDownSlow(JSC::VMEntryScope *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)this;
  *(_QWORD *)(v8 + 90568) = 0;
  if (*(_BYTE *)(v8 + 56))
    JSC::VM::executeEntryScopeServicesOnExit((JSC::VM *)v8, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::VMTraps::invalidateCodeBlocksOnStack(JSC::VMTraps *this, JSC::CallFrame *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned __int8 *v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = (unsigned __int8 *)(*((_QWORD *)this + 82) + 16);
  if (__ldaxr(v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_4:
  if (*((_BYTE *)this + 20))
  {
    *((_BYTE *)this + 20) = 0;
    v16 = *((_QWORD *)this - 2);
    if (v16)
    {
      for (; a2; a2 = (JSC::CallFrame *)JSC::CallFrame::callerFrame((uint64_t *)a2, &v16))
      {
        if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) != 3)
        {
          v14 = *((_QWORD *)a2 + 2);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 120);
            if (v15)
            {
              if ((*(_BYTE *)(v15 + 12) & 0xFE) == 4)
                JSC::CodeBlock::jettison(v14, 0xAu, 0, 0, a9, a5, a6, a7, a8);
            }
          }
        }
      }
    }
  }
  v13 = __ldxr(v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v11))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::VMTraps::SignalSender::initializeSignals(JSC::VMTraps::SignalSender *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&JSC::VMTraps::SignalSender::initializeSignals(void)::once);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&JSC::VMTraps::SignalSender::initializeSignals(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::VMTraps::SignalSender::initializeSignals(void)::{lambda(void)#1} &&>>);
  }
}

void JSC::VMTraps::fireTrap(JSC::VMTraps *this, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned __int8 *v10;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  int v37;
  unsigned __int8 *v38;
  char v39;
  _QWORD v40[2];
  char v41;
  _QWORD v42[3];

  v8 = (int)a2;
  v10 = (unsigned __int8 *)(*(_QWORD *)this + 4);
  if (__ldaxr(v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_4:
  v12 = (unsigned int *)((char *)this + 16);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 | v8, v12));
  *((_BYTE *)this + 20) = 1;
  v14 = __ldxr(v10);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v10))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  if (byte_1ECF4C6B4)
    return;
  v15 = (unsigned __int8 *)(*(_QWORD *)this + 4);
  v38 = v15;
  v39 = 1;
  if (__ldaxr(v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_15;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v15);
LABEL_15:
  if (!*((_QWORD *)this + 4))
  {
    v17 = WTF::fastMalloc((WTF *)0x38);
    JSC::VMTraps::SignalSender::SignalSender(v17, &v38, (uint64_t)this - 64, v18, v19, v20, v21, v22);
    v23 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v17;
    if (v23)
    {
      v24 = v23 + 2;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v23 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
      }
    }
  }
  v27 = *((_QWORD *)this + 1);
  v28 = (unsigned __int8 *)(v27 + 4);
  v29 = atomic_load((unsigned __int8 *)(v27 + 4));
  if ((v29 & 1) != 0)
  {
    atomic_store(0, v28);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v28, a2, a3, a4, a5, a6, a7, a8);
  }
  v30 = *(unsigned int *)(v27 + 20);
  if ((_DWORD)v30)
  {
    v31 = *(uint64_t **)(v27 + 8);
    v32 = 8 * v30;
    do
    {
      v33 = *v31;
      if (*(_BYTE *)(*v31 + 43))
      {
        if (*(_BYTE *)(v33 + 42))
        {
          *(_BYTE *)(v33 + 42) = 0;
          v34 = (unsigned __int8 *)(v33 + 44);
          v35 = atomic_load(v34);
          if ((v35 & 1) != 0)
          {
            v41 = 0;
            v40[0] = v34;
            v40[1] = &v41;
            v42[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
            v42[1] = v42;
            v42[2] = v40;
            WTF::ParkingLot::unparkOneImpl((uint64_t)v34, (unint64_t)v42, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      else
      {
        WTF::AutomaticThread::start(v33);
      }
      ++v31;
      v32 -= 8;
    }
    while (v32);
  }
  if (v39)
  {
    v36 = v38;
    v37 = __ldxr(v38);
    if (v37 == 1)
    {
      if (!__stlxr(0, v38))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v36, 0, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::dataLog<char [4],WTF::RawPointer,char [9],int,char [34]>(const void **a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "VM ");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " on pid ");
  WTF::PrintStream::printf(v6, "%d", *a2);
  WTF::PrintStream::printf(v6, "%s", " received NeedDebuggerBreak trap\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t JSC::VMTraps::deferTerminationSlow(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(result - 48);
  if (v1 && *(_QWORD *)(result - 40) == v1)
  {
    *(_QWORD *)(result - 48) = 0;
    v2 = (unsigned int *)(result + 16);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 & 0xFFFFFFEF, v2));
    *(_BYTE *)(result + 22) = 1;
  }
  return result;
}

_BYTE *JSC::VMTraps::undoDeferTerminationSlow(_BYTE *result, int a2)
{
  unsigned int *v2;
  unsigned int v3;
  _BYTE *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (a2 == 1 || result[22])
  {
    v4 = result - 64;
    v5 = *((_QWORD *)result - 5);
    *((_QWORD *)v4 + 2) = v5;
    *((_QWORD *)v4 + 4) = v5;
    if (v5)
    {
      v6 = (unsigned int *)(result + 16);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 | 0x10, v6));
    }
    if (result[93379])
      result[93378] = 1;
    result[22] = 0;
  }
  else if (!a2)
  {
    v2 = (unsigned int *)(result + 16);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 | 2, v2));
  }
  return result;
}

uint64_t JSC::VarOffset::dump(JSC::VarOffset *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v3;
  WTF::PrintStream *v4;
  int v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  const char *v8;
  int v9;
  unsigned int v11;

  switch(*(_BYTE *)this)
  {
    case 0:
      v3 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v3, "%s", "invalid");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 1:
      v5 = *((_DWORD *)this + 1);
      v6 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      if (v5 == -1)
        goto LABEL_9;
      v8 = "scope";
      goto LABEL_8;
    case 2:
      v11 = *((_DWORD *)this + 1);
      v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      JSC::VirtualRegister::dump(&v11, v4);
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 3:
      v9 = *((_DWORD *)this + 1);
      v6 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      if (v9 == -1)
      {
LABEL_9:
        WTF::PrintStream::printf(v7, "%s");
      }
      else
      {
        v8 = "capturedArgument";
LABEL_8:
        WTF::PrintStream::printf(v7, "%s", v8);
        WTF::PrintStream::printf(v7, "%u");
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    default:
      __break(0xC471u);
      JUMPOUT(0x198C38598);
  }
}

void JSC::BytecodeIntrinsicRegistry::~BytecodeIntrinsicRegistry(JSC::BytecodeIntrinsicRegistry *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t StatusReg;
  unint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;

  v8 = *((_QWORD *)this + 64);
  if (v8)
  {
    v9 = (uint64_t *)(v8 - 16);
    v10 = *(_QWORD *)(((v8 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v11 = *(uint64_t **)(v8 - 8);
    if (v11)
    {
      v12 = *v9;
      *v11 = *v9;
      *(_QWORD *)(v12 + 8) = v11;
      *v9 = 0;
      v9[1] = 0;
    }
    *v9 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;
    *((_QWORD *)this + 64) = 0;
  }
  v13 = *((_QWORD *)this + 63);
  if (v13)
  {
    v14 = (uint64_t *)(v13 - 16);
    v15 = *(_QWORD *)(((v13 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v16 = *(uint64_t **)(v13 - 8);
    if (v16)
    {
      v17 = *v14;
      *v16 = *v14;
      *(_QWORD *)(v17 + 8) = v16;
      *v14 = 0;
      v14[1] = 0;
    }
    *v14 = *(_QWORD *)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;
    *((_QWORD *)this + 63) = 0;
  }
  v18 = *((_QWORD *)this + 62);
  if (v18)
  {
    v19 = (uint64_t *)(v18 - 16);
    v20 = *(_QWORD *)(((v18 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v21 = *(uint64_t **)(v18 - 8);
    if (v21)
    {
      v22 = *v19;
      *v21 = *v19;
      *(_QWORD *)(v22 + 8) = v21;
      *v19 = 0;
      v19[1] = 0;
    }
    *v19 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;
    *((_QWORD *)this + 62) = 0;
  }
  v23 = *((_QWORD *)this + 61);
  if (v23)
  {
    v24 = (uint64_t *)(v23 - 16);
    v25 = *(_QWORD *)(((v23 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v26 = *(uint64_t **)(v23 - 8);
    if (v26)
    {
      v27 = *v24;
      *v26 = *v24;
      *(_QWORD *)(v27 + 8) = v26;
      *v24 = 0;
      v24[1] = 0;
    }
    *v24 = *(_QWORD *)(v25 + 40);
    *(_QWORD *)(v25 + 40) = v24;
    *((_QWORD *)this + 61) = 0;
  }
  v28 = *((_QWORD *)this + 60);
  if (v28)
  {
    v29 = (uint64_t *)(v28 - 16);
    v30 = *(_QWORD *)(((v28 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v31 = *(uint64_t **)(v28 - 8);
    if (v31)
    {
      v32 = *v29;
      *v31 = *v29;
      *(_QWORD *)(v32 + 8) = v31;
      *v29 = 0;
      v29[1] = 0;
    }
    *v29 = *(_QWORD *)(v30 + 40);
    *(_QWORD *)(v30 + 40) = v29;
    *((_QWORD *)this + 60) = 0;
  }
  v33 = *((_QWORD *)this + 59);
  if (v33)
  {
    v34 = (uint64_t *)(v33 - 16);
    v35 = *(_QWORD *)(((v33 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v36 = *(uint64_t **)(v33 - 8);
    if (v36)
    {
      v37 = *v34;
      *v36 = *v34;
      *(_QWORD *)(v37 + 8) = v36;
      *v34 = 0;
      v34[1] = 0;
    }
    *v34 = *(_QWORD *)(v35 + 40);
    *(_QWORD *)(v35 + 40) = v34;
    *((_QWORD *)this + 59) = 0;
  }
  v38 = *((_QWORD *)this + 58);
  if (v38)
  {
    v39 = (uint64_t *)(v38 - 16);
    v40 = *(_QWORD *)(((v38 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v41 = *(uint64_t **)(v38 - 8);
    if (v41)
    {
      v42 = *v39;
      *v41 = *v39;
      *(_QWORD *)(v42 + 8) = v41;
      *v39 = 0;
      v39[1] = 0;
    }
    *v39 = *(_QWORD *)(v40 + 40);
    *(_QWORD *)(v40 + 40) = v39;
    *((_QWORD *)this + 58) = 0;
  }
  v43 = *((_QWORD *)this + 57);
  if (v43)
  {
    v44 = (uint64_t *)(v43 - 16);
    v45 = *(_QWORD *)(((v43 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v46 = *(uint64_t **)(v43 - 8);
    if (v46)
    {
      v47 = *v44;
      *v46 = *v44;
      *(_QWORD *)(v47 + 8) = v46;
      *v44 = 0;
      v44[1] = 0;
    }
    *v44 = *(_QWORD *)(v45 + 40);
    *(_QWORD *)(v45 + 40) = v44;
    *((_QWORD *)this + 57) = 0;
  }
  v48 = *((_QWORD *)this + 56);
  if (v48)
  {
    v49 = (uint64_t *)(v48 - 16);
    v50 = *(_QWORD *)(((v48 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v51 = *(uint64_t **)(v48 - 8);
    if (v51)
    {
      v52 = *v49;
      *v51 = *v49;
      *(_QWORD *)(v52 + 8) = v51;
      *v49 = 0;
      v49[1] = 0;
    }
    *v49 = *(_QWORD *)(v50 + 40);
    *(_QWORD *)(v50 + 40) = v49;
    *((_QWORD *)this + 56) = 0;
  }
  v53 = *((_QWORD *)this + 55);
  if (v53)
  {
    v54 = (uint64_t *)(v53 - 16);
    v55 = *(_QWORD *)(((v53 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v56 = *(uint64_t **)(v53 - 8);
    if (v56)
    {
      v57 = *v54;
      *v56 = *v54;
      *(_QWORD *)(v57 + 8) = v56;
      *v54 = 0;
      v54[1] = 0;
    }
    *v54 = *(_QWORD *)(v55 + 40);
    *(_QWORD *)(v55 + 40) = v54;
    *((_QWORD *)this + 55) = 0;
  }
  v58 = *((_QWORD *)this + 54);
  if (v58)
  {
    v59 = (uint64_t *)(v58 - 16);
    v60 = *(_QWORD *)(((v58 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v61 = *(uint64_t **)(v58 - 8);
    if (v61)
    {
      v62 = *v59;
      *v61 = *v59;
      *(_QWORD *)(v62 + 8) = v61;
      *v59 = 0;
      v59[1] = 0;
    }
    *v59 = *(_QWORD *)(v60 + 40);
    *(_QWORD *)(v60 + 40) = v59;
    *((_QWORD *)this + 54) = 0;
  }
  v63 = *((_QWORD *)this + 53);
  if (v63)
  {
    v64 = (uint64_t *)(v63 - 16);
    v65 = *(_QWORD *)(((v63 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v66 = *(uint64_t **)(v63 - 8);
    if (v66)
    {
      v67 = *v64;
      *v66 = *v64;
      *(_QWORD *)(v67 + 8) = v66;
      *v64 = 0;
      v64[1] = 0;
    }
    *v64 = *(_QWORD *)(v65 + 40);
    *(_QWORD *)(v65 + 40) = v64;
    *((_QWORD *)this + 53) = 0;
  }
  v68 = *((_QWORD *)this + 52);
  if (v68)
  {
    v69 = (uint64_t *)(v68 - 16);
    v70 = *(_QWORD *)(((v68 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v71 = *(uint64_t **)(v68 - 8);
    if (v71)
    {
      v72 = *v69;
      *v71 = *v69;
      *(_QWORD *)(v72 + 8) = v71;
      *v69 = 0;
      v69[1] = 0;
    }
    *v69 = *(_QWORD *)(v70 + 40);
    *(_QWORD *)(v70 + 40) = v69;
    *((_QWORD *)this + 52) = 0;
  }
  v73 = *((_QWORD *)this + 51);
  if (v73)
  {
    v74 = (uint64_t *)(v73 - 16);
    v75 = *(_QWORD *)(((v73 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v76 = *(uint64_t **)(v73 - 8);
    if (v76)
    {
      v77 = *v74;
      *v76 = *v74;
      *(_QWORD *)(v77 + 8) = v76;
      *v74 = 0;
      v74[1] = 0;
    }
    *v74 = *(_QWORD *)(v75 + 40);
    *(_QWORD *)(v75 + 40) = v74;
    *((_QWORD *)this + 51) = 0;
  }
  v78 = *((_QWORD *)this + 50);
  if (v78)
  {
    v79 = (uint64_t *)(v78 - 16);
    v80 = *(_QWORD *)(((v78 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v81 = *(uint64_t **)(v78 - 8);
    if (v81)
    {
      v82 = *v79;
      *v81 = *v79;
      *(_QWORD *)(v82 + 8) = v81;
      *v79 = 0;
      v79[1] = 0;
    }
    *v79 = *(_QWORD *)(v80 + 40);
    *(_QWORD *)(v80 + 40) = v79;
    *((_QWORD *)this + 50) = 0;
  }
  v83 = *((_QWORD *)this + 49);
  if (v83)
  {
    v84 = (uint64_t *)(v83 - 16);
    v85 = *(_QWORD *)(((v83 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v86 = *(uint64_t **)(v83 - 8);
    if (v86)
    {
      v87 = *v84;
      *v86 = *v84;
      *(_QWORD *)(v87 + 8) = v86;
      *v84 = 0;
      v84[1] = 0;
    }
    *v84 = *(_QWORD *)(v85 + 40);
    *(_QWORD *)(v85 + 40) = v84;
    *((_QWORD *)this + 49) = 0;
  }
  v88 = *((_QWORD *)this + 48);
  if (v88)
  {
    v89 = (uint64_t *)(v88 - 16);
    v90 = *(_QWORD *)(((v88 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v91 = *(uint64_t **)(v88 - 8);
    if (v91)
    {
      v92 = *v89;
      *v91 = *v89;
      *(_QWORD *)(v92 + 8) = v91;
      *v89 = 0;
      v89[1] = 0;
    }
    *v89 = *(_QWORD *)(v90 + 40);
    *(_QWORD *)(v90 + 40) = v89;
    *((_QWORD *)this + 48) = 0;
  }
  v93 = *((_QWORD *)this + 47);
  if (v93)
  {
    v94 = (uint64_t *)(v93 - 16);
    v95 = *(_QWORD *)(((v93 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v96 = *(uint64_t **)(v93 - 8);
    if (v96)
    {
      v97 = *v94;
      *v96 = *v94;
      *(_QWORD *)(v97 + 8) = v96;
      *v94 = 0;
      v94[1] = 0;
    }
    *v94 = *(_QWORD *)(v95 + 40);
    *(_QWORD *)(v95 + 40) = v94;
    *((_QWORD *)this + 47) = 0;
  }
  v98 = *((_QWORD *)this + 46);
  if (v98)
  {
    v99 = (uint64_t *)(v98 - 16);
    v100 = *(_QWORD *)(((v98 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v101 = *(uint64_t **)(v98 - 8);
    if (v101)
    {
      v102 = *v99;
      *v101 = *v99;
      *(_QWORD *)(v102 + 8) = v101;
      *v99 = 0;
      v99[1] = 0;
    }
    *v99 = *(_QWORD *)(v100 + 40);
    *(_QWORD *)(v100 + 40) = v99;
    *((_QWORD *)this + 46) = 0;
  }
  v103 = *((_QWORD *)this + 45);
  if (v103)
  {
    v104 = (uint64_t *)(v103 - 16);
    v105 = *(_QWORD *)(((v103 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v106 = *(uint64_t **)(v103 - 8);
    if (v106)
    {
      v107 = *v104;
      *v106 = *v104;
      *(_QWORD *)(v107 + 8) = v106;
      *v104 = 0;
      v104[1] = 0;
    }
    *v104 = *(_QWORD *)(v105 + 40);
    *(_QWORD *)(v105 + 40) = v104;
    *((_QWORD *)this + 45) = 0;
  }
  v108 = *((_QWORD *)this + 44);
  if (v108)
  {
    v109 = (uint64_t *)(v108 - 16);
    v110 = *(_QWORD *)(((v108 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v111 = *(uint64_t **)(v108 - 8);
    if (v111)
    {
      v112 = *v109;
      *v111 = *v109;
      *(_QWORD *)(v112 + 8) = v111;
      *v109 = 0;
      v109[1] = 0;
    }
    *v109 = *(_QWORD *)(v110 + 40);
    *(_QWORD *)(v110 + 40) = v109;
    *((_QWORD *)this + 44) = 0;
  }
  v113 = *((_QWORD *)this + 43);
  if (v113)
  {
    v114 = (uint64_t *)(v113 - 16);
    v115 = *(_QWORD *)(((v113 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v116 = *(uint64_t **)(v113 - 8);
    if (v116)
    {
      v117 = *v114;
      *v116 = *v114;
      *(_QWORD *)(v117 + 8) = v116;
      *v114 = 0;
      v114[1] = 0;
    }
    *v114 = *(_QWORD *)(v115 + 40);
    *(_QWORD *)(v115 + 40) = v114;
    *((_QWORD *)this + 43) = 0;
  }
  v118 = *((_QWORD *)this + 42);
  if (v118)
  {
    v119 = (uint64_t *)(v118 - 16);
    v120 = *(_QWORD *)(((v118 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v121 = *(uint64_t **)(v118 - 8);
    if (v121)
    {
      v122 = *v119;
      *v121 = *v119;
      *(_QWORD *)(v122 + 8) = v121;
      *v119 = 0;
      v119[1] = 0;
    }
    *v119 = *(_QWORD *)(v120 + 40);
    *(_QWORD *)(v120 + 40) = v119;
    *((_QWORD *)this + 42) = 0;
  }
  v123 = *((_QWORD *)this + 41);
  if (v123)
  {
    v124 = (uint64_t *)(v123 - 16);
    v125 = *(_QWORD *)(((v123 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v126 = *(uint64_t **)(v123 - 8);
    if (v126)
    {
      v127 = *v124;
      *v126 = *v124;
      *(_QWORD *)(v127 + 8) = v126;
      *v124 = 0;
      v124[1] = 0;
    }
    *v124 = *(_QWORD *)(v125 + 40);
    *(_QWORD *)(v125 + 40) = v124;
    *((_QWORD *)this + 41) = 0;
  }
  v128 = *((_QWORD *)this + 40);
  if (v128)
  {
    v129 = (uint64_t *)(v128 - 16);
    v130 = *(_QWORD *)(((v128 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v131 = *(uint64_t **)(v128 - 8);
    if (v131)
    {
      v132 = *v129;
      *v131 = *v129;
      *(_QWORD *)(v132 + 8) = v131;
      *v129 = 0;
      v129[1] = 0;
    }
    *v129 = *(_QWORD *)(v130 + 40);
    *(_QWORD *)(v130 + 40) = v129;
    *((_QWORD *)this + 40) = 0;
  }
  v133 = *((_QWORD *)this + 39);
  if (v133)
  {
    v134 = (uint64_t *)(v133 - 16);
    v135 = *(_QWORD *)(((v133 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v136 = *(uint64_t **)(v133 - 8);
    if (v136)
    {
      v137 = *v134;
      *v136 = *v134;
      *(_QWORD *)(v137 + 8) = v136;
      *v134 = 0;
      v134[1] = 0;
    }
    *v134 = *(_QWORD *)(v135 + 40);
    *(_QWORD *)(v135 + 40) = v134;
    *((_QWORD *)this + 39) = 0;
  }
  v138 = *((_QWORD *)this + 38);
  if (v138)
  {
    v139 = (uint64_t *)(v138 - 16);
    v140 = *(_QWORD *)(((v138 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v141 = *(uint64_t **)(v138 - 8);
    if (v141)
    {
      v142 = *v139;
      *v141 = *v139;
      *(_QWORD *)(v142 + 8) = v141;
      *v139 = 0;
      v139[1] = 0;
    }
    *v139 = *(_QWORD *)(v140 + 40);
    *(_QWORD *)(v140 + 40) = v139;
    *((_QWORD *)this + 38) = 0;
  }
  v143 = *((_QWORD *)this + 37);
  if (v143)
  {
    v144 = (uint64_t *)(v143 - 16);
    v145 = *(_QWORD *)(((v143 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v146 = *(uint64_t **)(v143 - 8);
    if (v146)
    {
      v147 = *v144;
      *v146 = *v144;
      *(_QWORD *)(v147 + 8) = v146;
      *v144 = 0;
      v144[1] = 0;
    }
    *v144 = *(_QWORD *)(v145 + 40);
    *(_QWORD *)(v145 + 40) = v144;
    *((_QWORD *)this + 37) = 0;
  }
  v148 = *((_QWORD *)this + 36);
  if (v148)
  {
    v149 = (uint64_t *)(v148 - 16);
    v150 = *(_QWORD *)(((v148 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v151 = *(uint64_t **)(v148 - 8);
    if (v151)
    {
      v152 = *v149;
      *v151 = *v149;
      *(_QWORD *)(v152 + 8) = v151;
      *v149 = 0;
      v149[1] = 0;
    }
    *v149 = *(_QWORD *)(v150 + 40);
    *(_QWORD *)(v150 + 40) = v149;
    *((_QWORD *)this + 36) = 0;
  }
  v153 = *((_QWORD *)this + 35);
  if (v153)
  {
    v154 = (uint64_t *)(v153 - 16);
    v155 = *(_QWORD *)(((v153 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v156 = *(uint64_t **)(v153 - 8);
    if (v156)
    {
      v157 = *v154;
      *v156 = *v154;
      *(_QWORD *)(v157 + 8) = v156;
      *v154 = 0;
      v154[1] = 0;
    }
    *v154 = *(_QWORD *)(v155 + 40);
    *(_QWORD *)(v155 + 40) = v154;
    *((_QWORD *)this + 35) = 0;
  }
  v158 = *((_QWORD *)this + 34);
  if (v158)
  {
    v159 = (uint64_t *)(v158 - 16);
    v160 = *(_QWORD *)(((v158 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v161 = *(uint64_t **)(v158 - 8);
    if (v161)
    {
      v162 = *v159;
      *v161 = *v159;
      *(_QWORD *)(v162 + 8) = v161;
      *v159 = 0;
      v159[1] = 0;
    }
    *v159 = *(_QWORD *)(v160 + 40);
    *(_QWORD *)(v160 + 40) = v159;
    *((_QWORD *)this + 34) = 0;
  }
  v163 = *((_QWORD *)this + 33);
  if (v163)
  {
    v164 = (uint64_t *)(v163 - 16);
    v165 = *(_QWORD *)(((v163 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v166 = *(uint64_t **)(v163 - 8);
    if (v166)
    {
      v167 = *v164;
      *v166 = *v164;
      *(_QWORD *)(v167 + 8) = v166;
      *v164 = 0;
      v164[1] = 0;
    }
    *v164 = *(_QWORD *)(v165 + 40);
    *(_QWORD *)(v165 + 40) = v164;
    *((_QWORD *)this + 33) = 0;
  }
  v168 = *((_QWORD *)this + 32);
  if (v168)
  {
    v169 = (uint64_t *)(v168 - 16);
    v170 = *(_QWORD *)(((v168 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v171 = *(uint64_t **)(v168 - 8);
    if (v171)
    {
      v172 = *v169;
      *v171 = *v169;
      *(_QWORD *)(v172 + 8) = v171;
      *v169 = 0;
      v169[1] = 0;
    }
    *v169 = *(_QWORD *)(v170 + 40);
    *(_QWORD *)(v170 + 40) = v169;
    *((_QWORD *)this + 32) = 0;
  }
  v173 = *((_QWORD *)this + 31);
  if (v173)
  {
    v174 = (uint64_t *)(v173 - 16);
    v175 = *(_QWORD *)(((v173 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v176 = *(uint64_t **)(v173 - 8);
    if (v176)
    {
      v177 = *v174;
      *v176 = *v174;
      *(_QWORD *)(v177 + 8) = v176;
      *v174 = 0;
      v174[1] = 0;
    }
    *v174 = *(_QWORD *)(v175 + 40);
    *(_QWORD *)(v175 + 40) = v174;
    *((_QWORD *)this + 31) = 0;
  }
  v178 = *((_QWORD *)this + 30);
  if (v178)
  {
    v179 = (uint64_t *)(v178 - 16);
    v180 = *(_QWORD *)(((v178 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v181 = *(uint64_t **)(v178 - 8);
    if (v181)
    {
      v182 = *v179;
      *v181 = *v179;
      *(_QWORD *)(v182 + 8) = v181;
      *v179 = 0;
      v179[1] = 0;
    }
    *v179 = *(_QWORD *)(v180 + 40);
    *(_QWORD *)(v180 + 40) = v179;
    *((_QWORD *)this + 30) = 0;
  }
  v183 = *((_QWORD *)this + 29);
  if (v183)
  {
    v184 = (uint64_t *)(v183 - 16);
    v185 = *(_QWORD *)(((v183 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v186 = *(uint64_t **)(v183 - 8);
    if (v186)
    {
      v187 = *v184;
      *v186 = *v184;
      *(_QWORD *)(v187 + 8) = v186;
      *v184 = 0;
      v184[1] = 0;
    }
    *v184 = *(_QWORD *)(v185 + 40);
    *(_QWORD *)(v185 + 40) = v184;
    *((_QWORD *)this + 29) = 0;
  }
  v188 = *((_QWORD *)this + 28);
  if (v188)
  {
    v189 = (uint64_t *)(v188 - 16);
    v190 = *(_QWORD *)(((v188 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v191 = *(uint64_t **)(v188 - 8);
    if (v191)
    {
      v192 = *v189;
      *v191 = *v189;
      *(_QWORD *)(v192 + 8) = v191;
      *v189 = 0;
      v189[1] = 0;
    }
    *v189 = *(_QWORD *)(v190 + 40);
    *(_QWORD *)(v190 + 40) = v189;
    *((_QWORD *)this + 28) = 0;
  }
  v193 = *((_QWORD *)this + 27);
  if (v193)
  {
    v194 = (uint64_t *)(v193 - 16);
    v195 = *(_QWORD *)(((v193 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v196 = *(uint64_t **)(v193 - 8);
    if (v196)
    {
      v197 = *v194;
      *v196 = *v194;
      *(_QWORD *)(v197 + 8) = v196;
      *v194 = 0;
      v194[1] = 0;
    }
    *v194 = *(_QWORD *)(v195 + 40);
    *(_QWORD *)(v195 + 40) = v194;
    *((_QWORD *)this + 27) = 0;
  }
  v198 = *((_QWORD *)this + 26);
  if (v198)
  {
    v199 = (uint64_t *)(v198 - 16);
    v200 = *(_QWORD *)(((v198 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v201 = *(uint64_t **)(v198 - 8);
    if (v201)
    {
      v202 = *v199;
      *v201 = *v199;
      *(_QWORD *)(v202 + 8) = v201;
      *v199 = 0;
      v199[1] = 0;
    }
    *v199 = *(_QWORD *)(v200 + 40);
    *(_QWORD *)(v200 + 40) = v199;
    *((_QWORD *)this + 26) = 0;
  }
  v203 = *((_QWORD *)this + 25);
  if (v203)
  {
    v204 = (uint64_t *)(v203 - 16);
    v205 = *(_QWORD *)(((v203 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v206 = *(uint64_t **)(v203 - 8);
    if (v206)
    {
      v207 = *v204;
      *v206 = *v204;
      *(_QWORD *)(v207 + 8) = v206;
      *v204 = 0;
      v204[1] = 0;
    }
    *v204 = *(_QWORD *)(v205 + 40);
    *(_QWORD *)(v205 + 40) = v204;
    *((_QWORD *)this + 25) = 0;
  }
  v208 = *((_QWORD *)this + 24);
  if (v208)
  {
    v209 = (uint64_t *)(v208 - 16);
    v210 = *(_QWORD *)(((v208 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v211 = *(uint64_t **)(v208 - 8);
    if (v211)
    {
      v212 = *v209;
      *v211 = *v209;
      *(_QWORD *)(v212 + 8) = v211;
      *v209 = 0;
      v209[1] = 0;
    }
    *v209 = *(_QWORD *)(v210 + 40);
    *(_QWORD *)(v210 + 40) = v209;
    *((_QWORD *)this + 24) = 0;
  }
  v213 = *((_QWORD *)this + 23);
  if (v213)
  {
    v214 = (uint64_t *)(v213 - 16);
    v215 = *(_QWORD *)(((v213 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v216 = *(uint64_t **)(v213 - 8);
    if (v216)
    {
      v217 = *v214;
      *v216 = *v214;
      *(_QWORD *)(v217 + 8) = v216;
      *v214 = 0;
      v214[1] = 0;
    }
    *v214 = *(_QWORD *)(v215 + 40);
    *(_QWORD *)(v215 + 40) = v214;
    *((_QWORD *)this + 23) = 0;
  }
  v218 = *((_QWORD *)this + 22);
  if (v218)
  {
    v219 = (uint64_t *)(v218 - 16);
    v220 = *(_QWORD *)(((v218 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v221 = *(uint64_t **)(v218 - 8);
    if (v221)
    {
      v222 = *v219;
      *v221 = *v219;
      *(_QWORD *)(v222 + 8) = v221;
      *v219 = 0;
      v219[1] = 0;
    }
    *v219 = *(_QWORD *)(v220 + 40);
    *(_QWORD *)(v220 + 40) = v219;
    *((_QWORD *)this + 22) = 0;
  }
  v223 = *((_QWORD *)this + 21);
  if (v223)
  {
    v224 = (uint64_t *)(v223 - 16);
    v225 = *(_QWORD *)(((v223 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v226 = *(uint64_t **)(v223 - 8);
    if (v226)
    {
      v227 = *v224;
      *v226 = *v224;
      *(_QWORD *)(v227 + 8) = v226;
      *v224 = 0;
      v224[1] = 0;
    }
    *v224 = *(_QWORD *)(v225 + 40);
    *(_QWORD *)(v225 + 40) = v224;
    *((_QWORD *)this + 21) = 0;
  }
  v228 = *((_QWORD *)this + 20);
  if (v228)
  {
    v229 = (uint64_t *)(v228 - 16);
    v230 = *(_QWORD *)(((v228 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v231 = *(uint64_t **)(v228 - 8);
    if (v231)
    {
      v232 = *v229;
      *v231 = *v229;
      *(_QWORD *)(v232 + 8) = v231;
      *v229 = 0;
      v229[1] = 0;
    }
    *v229 = *(_QWORD *)(v230 + 40);
    *(_QWORD *)(v230 + 40) = v229;
    *((_QWORD *)this + 20) = 0;
  }
  v233 = *((_QWORD *)this + 19);
  if (v233)
  {
    v234 = (uint64_t *)(v233 - 16);
    v235 = *(_QWORD *)(((v233 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v236 = *(uint64_t **)(v233 - 8);
    if (v236)
    {
      v237 = *v234;
      *v236 = *v234;
      *(_QWORD *)(v237 + 8) = v236;
      *v234 = 0;
      v234[1] = 0;
    }
    *v234 = *(_QWORD *)(v235 + 40);
    *(_QWORD *)(v235 + 40) = v234;
    *((_QWORD *)this + 19) = 0;
  }
  v238 = *((_QWORD *)this + 18);
  if (v238)
  {
    v239 = (uint64_t *)(v238 - 16);
    v240 = *(_QWORD *)(((v238 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v241 = *(uint64_t **)(v238 - 8);
    if (v241)
    {
      v242 = *v239;
      *v241 = *v239;
      *(_QWORD *)(v242 + 8) = v241;
      *v239 = 0;
      v239[1] = 0;
    }
    *v239 = *(_QWORD *)(v240 + 40);
    *(_QWORD *)(v240 + 40) = v239;
    *((_QWORD *)this + 18) = 0;
  }
  v243 = *((_QWORD *)this + 17);
  if (v243)
  {
    v244 = (uint64_t *)(v243 - 16);
    v245 = *(_QWORD *)(((v243 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v246 = *(uint64_t **)(v243 - 8);
    if (v246)
    {
      v247 = *v244;
      *v246 = *v244;
      *(_QWORD *)(v247 + 8) = v246;
      *v244 = 0;
      v244[1] = 0;
    }
    *v244 = *(_QWORD *)(v245 + 40);
    *(_QWORD *)(v245 + 40) = v244;
    *((_QWORD *)this + 17) = 0;
  }
  v248 = *((_QWORD *)this + 16);
  if (v248)
  {
    v249 = (uint64_t *)(v248 - 16);
    v250 = *(_QWORD *)(((v248 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v251 = *(uint64_t **)(v248 - 8);
    if (v251)
    {
      v252 = *v249;
      *v251 = *v249;
      *(_QWORD *)(v252 + 8) = v251;
      *v249 = 0;
      v249[1] = 0;
    }
    *v249 = *(_QWORD *)(v250 + 40);
    *(_QWORD *)(v250 + 40) = v249;
    *((_QWORD *)this + 16) = 0;
  }
  v253 = *((_QWORD *)this + 15);
  if (v253)
  {
    v254 = (uint64_t *)(v253 - 16);
    v255 = *(_QWORD *)(((v253 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v256 = *(uint64_t **)(v253 - 8);
    if (v256)
    {
      v257 = *v254;
      *v256 = *v254;
      *(_QWORD *)(v257 + 8) = v256;
      *v254 = 0;
      v254[1] = 0;
    }
    *v254 = *(_QWORD *)(v255 + 40);
    *(_QWORD *)(v255 + 40) = v254;
    *((_QWORD *)this + 15) = 0;
  }
  v258 = *((_QWORD *)this + 14);
  if (v258)
  {
    v259 = (uint64_t *)(v258 - 16);
    v260 = *(_QWORD *)(((v258 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v261 = *(uint64_t **)(v258 - 8);
    if (v261)
    {
      v262 = *v259;
      *v261 = *v259;
      *(_QWORD *)(v262 + 8) = v261;
      *v259 = 0;
      v259[1] = 0;
    }
    *v259 = *(_QWORD *)(v260 + 40);
    *(_QWORD *)(v260 + 40) = v259;
    *((_QWORD *)this + 14) = 0;
  }
  v263 = *((_QWORD *)this + 13);
  if (v263)
  {
    v264 = (uint64_t *)(v263 - 16);
    v265 = *(_QWORD *)(((v263 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v266 = *(uint64_t **)(v263 - 8);
    if (v266)
    {
      v267 = *v264;
      *v266 = *v264;
      *(_QWORD *)(v267 + 8) = v266;
      *v264 = 0;
      v264[1] = 0;
    }
    *v264 = *(_QWORD *)(v265 + 40);
    *(_QWORD *)(v265 + 40) = v264;
    *((_QWORD *)this + 13) = 0;
  }
  v268 = *((_QWORD *)this + 12);
  if (v268)
  {
    v269 = (uint64_t *)(v268 - 16);
    v270 = *(_QWORD *)(((v268 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v271 = *(uint64_t **)(v268 - 8);
    if (v271)
    {
      v272 = *v269;
      *v271 = *v269;
      *(_QWORD *)(v272 + 8) = v271;
      *v269 = 0;
      v269[1] = 0;
    }
    *v269 = *(_QWORD *)(v270 + 40);
    *(_QWORD *)(v270 + 40) = v269;
    *((_QWORD *)this + 12) = 0;
  }
  v273 = *((_QWORD *)this + 11);
  if (v273)
  {
    v274 = (uint64_t *)(v273 - 16);
    v275 = *(_QWORD *)(((v273 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v276 = *(uint64_t **)(v273 - 8);
    if (v276)
    {
      v277 = *v274;
      *v276 = *v274;
      *(_QWORD *)(v277 + 8) = v276;
      *v274 = 0;
      v274[1] = 0;
    }
    *v274 = *(_QWORD *)(v275 + 40);
    *(_QWORD *)(v275 + 40) = v274;
    *((_QWORD *)this + 11) = 0;
  }
  v278 = *((_QWORD *)this + 10);
  if (v278)
  {
    v279 = (uint64_t *)(v278 - 16);
    v280 = *(_QWORD *)(((v278 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v281 = *(uint64_t **)(v278 - 8);
    if (v281)
    {
      v282 = *v279;
      *v281 = *v279;
      *(_QWORD *)(v282 + 8) = v281;
      *v279 = 0;
      v279[1] = 0;
    }
    *v279 = *(_QWORD *)(v280 + 40);
    *(_QWORD *)(v280 + 40) = v279;
    *((_QWORD *)this + 10) = 0;
  }
  v283 = *((_QWORD *)this + 9);
  if (v283)
  {
    v284 = (uint64_t *)(v283 - 16);
    v285 = *(_QWORD *)(((v283 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v286 = *(uint64_t **)(v283 - 8);
    if (v286)
    {
      v287 = *v284;
      *v286 = *v284;
      *(_QWORD *)(v287 + 8) = v286;
      *v284 = 0;
      v284[1] = 0;
    }
    *v284 = *(_QWORD *)(v285 + 40);
    *(_QWORD *)(v285 + 40) = v284;
    *((_QWORD *)this + 9) = 0;
  }
  v288 = *((_QWORD *)this + 8);
  if (v288)
  {
    v289 = (uint64_t *)(v288 - 16);
    v290 = *(_QWORD *)(((v288 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v291 = *(uint64_t **)(v288 - 8);
    if (v291)
    {
      v292 = *v289;
      *v291 = *v289;
      *(_QWORD *)(v292 + 8) = v291;
      *v289 = 0;
      v289[1] = 0;
    }
    *v289 = *(_QWORD *)(v290 + 40);
    *(_QWORD *)(v290 + 40) = v289;
    *((_QWORD *)this + 8) = 0;
  }
  v293 = *((_QWORD *)this + 7);
  if (v293)
  {
    v294 = (uint64_t *)(v293 - 16);
    v295 = *(_QWORD *)(((v293 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v296 = *(uint64_t **)(v293 - 8);
    if (v296)
    {
      v297 = *v294;
      *v296 = *v294;
      *(_QWORD *)(v297 + 8) = v296;
      *v294 = 0;
      v294[1] = 0;
    }
    *v294 = *(_QWORD *)(v295 + 40);
    *(_QWORD *)(v295 + 40) = v294;
    *((_QWORD *)this + 7) = 0;
  }
  v298 = *((_QWORD *)this + 6);
  if (v298)
  {
    v299 = (uint64_t *)(v298 - 16);
    v300 = *(_QWORD *)(((v298 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v301 = *(uint64_t **)(v298 - 8);
    if (v301)
    {
      v302 = *v299;
      *v301 = *v299;
      *(_QWORD *)(v302 + 8) = v301;
      *v299 = 0;
      v299[1] = 0;
    }
    *v299 = *(_QWORD *)(v300 + 40);
    *(_QWORD *)(v300 + 40) = v299;
    *((_QWORD *)this + 6) = 0;
  }
  v303 = *((_QWORD *)this + 5);
  if (v303)
  {
    v304 = (uint64_t *)(v303 - 16);
    v305 = *(_QWORD *)(((v303 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v306 = *(uint64_t **)(v303 - 8);
    if (v306)
    {
      v307 = *v304;
      *v306 = *v304;
      *(_QWORD *)(v307 + 8) = v306;
      *v304 = 0;
      v304[1] = 0;
    }
    *v304 = *(_QWORD *)(v305 + 40);
    *(_QWORD *)(v305 + 40) = v304;
    *((_QWORD *)this + 5) = 0;
  }
  v308 = *((_QWORD *)this + 4);
  if (v308)
  {
    v309 = (uint64_t *)(v308 - 16);
    v310 = *(_QWORD *)(((v308 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v311 = *(uint64_t **)(v308 - 8);
    if (v311)
    {
      v312 = *v309;
      *v311 = *v309;
      *(_QWORD *)(v312 + 8) = v311;
      *v309 = 0;
      v309[1] = 0;
    }
    *v309 = *(_QWORD *)(v310 + 40);
    *(_QWORD *)(v310 + 40) = v309;
    *((_QWORD *)this + 4) = 0;
  }
  v313 = *((_QWORD *)this + 1);
  if (v313)
  {
    v314 = *((unsigned int *)this + 4);
    if ((_DWORD)v314)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v316 = (unint64_t *)v313;
      do
      {
        v317 = *v316;
        *v316 = 0;
        if (v317)
        {
          if (*(_DWORD *)v317 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v317, a2, a3, a4, a5, a6, a7, a8);
            v318 = *(_QWORD *)(StatusReg + 752);
            if (v318)
            {
              if (!(v317 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v317 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v317)) & 1) != 0)
              {
LABEL_256:
                v319 = *(unsigned int *)(v318 + 8000);
                if (v319 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v318, v317, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v318 + 8 * v319) = v317 | 0x5000000000000;
                  *(_DWORD *)(v318 + 8000) = v319 + 1;
                }
                goto LABEL_251;
              }
              if (v317 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v317 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v317 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v317) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_256;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v318, v317, 1, a4, a5, a6, a7, a8);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v317, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
          else
          {
            *(_DWORD *)v317 -= 2;
          }
        }
LABEL_251:
        v316 += 4;
        --v314;
      }
      while (v314);
    }
    WTF::fastFree(v313, a2, a3, a4, a5, a6, a7, a8);
  }
}

void std::default_delete<JSC::FTL::Thunks>::operator()[abi:sn180100](WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = *((_QWORD *)this + 2);
  if (v9)
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        if ((*(_QWORD *)(v10 + 40 * i + 8) & 0x300) != 0x100)
        {
          v13 = v10 + 40 * i;
          v14 = *(unsigned int **)(v13 + 32);
          *(_QWORD *)(v13 + 32) = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
            }
          }
        }
      }
    }
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::SharedJITStubSet::~SharedJITStubSet(JSC::SharedJITStubSet *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t i;
  JSC::InlineCacheHandler *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::InlineCacheHandler *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::JITStubRoutine **v46;
  JSC::JITStubRoutine *v47;
  int v48;

  for (i = 512; i != 264; i -= 8)
  {
    v11 = *(JSC::InlineCacheHandler **)((char *)this + i);
    *(_QWORD *)((char *)this + i) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        JSC::InlineCacheHandler::~InlineCacheHandler(v11, a2, a3, a4, a5, a6, a7, a8, a9);
        WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
  }
  do
  {
    v28 = *(JSC::InlineCacheHandler **)((char *)this + i);
    *(_QWORD *)((char *)this + i) = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 1)
      {
        JSC::InlineCacheHandler::~InlineCacheHandler(v28, a2, a3, a4, a5, a6, a7, a8, a9);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        --*(_DWORD *)v28;
      }
    }
    i -= 8;
  }
  while (i != 16);
  v29 = *((_QWORD *)this + 2);
  if (v29)
  {
    v30 = *(unsigned int *)(v29 - 4);
    if ((_DWORD)v30)
    {
      for (j = 0; j != v30; ++j)
      {
        if (*(_BYTE *)(v29 + 32 * j) != 126)
        {
          v32 = v29 + 32 * j;
          v33 = *(unsigned int **)(v32 + 24);
          *(_QWORD *)(v32 + 24) = 0;
          if (v33)
          {
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              atomic_store(1u, v33);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v33, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
            }
          }
        }
      }
    }
    WTF::fastFree(v29 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v44 = *((_QWORD *)this + 1);
  if (v44)
  {
    v45 = *(unsigned int *)(v44 - 4);
    if ((_DWORD)v45)
    {
      v46 = (JSC::JITStubRoutine **)(v44 + 8);
      do
      {
        if (*((_BYTE *)v46 - 8) != 126)
        {
          v47 = *v46;
          *v46 = 0;
          if (v47)
          {
            v48 = *((_DWORD *)v47 + 4) - 1;
            *((_DWORD *)v47 + 4) = v48;
            if (!v48)
              JSC::JITStubRoutine::observeZeroRefCount(v47, a2, a3, a4, a5, a6, a7, a8, a9);
          }
        }
        v46 += 2;
        --v45;
      }
      while (v45);
    }
    WTF::fastFree(v44 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*(_QWORD *)this)
    WTF::fastFree(*(_QWORD *)this - 16, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::TypeProfiler::~TypeProfiler(JSC::TypeProfiler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v9 = (_QWORD *)*((_QWORD *)this + 4);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)v9[6];
      v11 = (WTF *)v9[2];
      v9[2] = 0;
      if (v11)
        WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v11, a2, a3, a4, a5, a6, a7, a8);
      v12 = (WTF *)v9[1];
      v9[1] = 0;
      if (v12)
        WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
      v9 = v10;
    }
    while (v10);
  }
  *((_QWORD *)this + 4) = 0;
  v13 = *((_QWORD *)this + 2);
  if (v13)
    WTF::fastFree(v13 - 16, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 1);
  if (v14)
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v16 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v16)
    {
      v17 = v15 + 8;
      do
      {
        if (*(_DWORD *)(v17 - 8) != -1)
        {
          v18 = *(_QWORD *)v17;
          if (*(_QWORD *)v17)
          {
            *(_QWORD *)v17 = 0;
            *(_DWORD *)(v17 + 8) = 0;
            WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v17 += 24;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree(v15 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>::~KeyValuePair(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t *i;
  uint64_t *v24;
  uint64_t v25;

  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v22 = (uint64_t **)(v9 + 8);
      for (i = *(uint64_t **)(v9 + 8); i != (uint64_t *)v22; i = *v22)
      {
        v25 = *i;
        v24 = (uint64_t *)i[1];
        *v24 = *i;
        *(_QWORD *)(v25 + 8) = v24;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return a1;
}

void WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::deallocateTable(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    v10 = a1;
    do
    {
      if (*(_QWORD *)v10 != -1)
      {
        v11 = *(_QWORD *)(v10 + 40);
        if (v11)
        {
          v14 = (uint64_t *)(v11 - 16);
          v15 = *(_QWORD *)(((v11 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v16 = *(uint64_t **)(v11 - 8);
          if (v16)
          {
            v17 = *v14;
            *v16 = *v14;
            *(_QWORD *)(v17 + 8) = v16;
            *v14 = 0;
            v14[1] = 0;
          }
          *v14 = *(_QWORD *)(v15 + 40);
          *(_QWORD *)(v15 + 40) = v14;
          *(_QWORD *)(v10 + 40) = 0;
        }
        v12 = *(WTF::StringImpl **)(v10 + 16);
        *(_QWORD *)(v10 + 16) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
          }
          else
          {
            *(_DWORD *)v12 -= 2;
          }
        }
        v13 = *(_DWORD **)v10;
        *(_QWORD *)v10 = 0;
        if (v13)
        {
          if (v13[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          else
            --v13[2];
        }
      }
      v10 += 56;
      --v9;
    }
    while (v9);
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::jitCodeForCallTrampoline(void)::$_0 &&>>()
{
  uint64_t result;
  uint64_t v1;

  result = WTF::fastMalloc((WTF *)0x20);
  v1 = qword_1ECF53228;
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = 1;
  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E3595B48;
  *(_BYTE *)(result + 14) = 0;
  JSC::jitCodeForCallTrampoline(void)::result = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::jitCodeForConstructTrampoline(void)::$_0 &&>>()
{
  uint64_t result;
  uint64_t v1;

  result = WTF::fastMalloc((WTF *)0x20);
  v1 = qword_1ECF53230;
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = 1;
  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E3595B48;
  *(_BYTE *)(result + 14) = 0;
  JSC::jitCodeForConstructTrampoline(void)::result = result;
  return result;
}

uint64_t WTF::dataLog<char [27],WTF::RawPointer,char [28],WTF::RawPointer,char [20],WTF::RawPointer,char [19],WTF::RawPointer,char [3],WTF::RawPointer,char [2],char [2]>(const char *a1, const void **a2, const char *a3, const void **a4, const char *a5, const void **a6, const char *a7, const void **a8, const char *a9, const void **a10, const char *a11, const char *a12)
{
  unint64_t v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  char v24;
  char **v25;
  char *v26;

  v19 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v19 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v20 = WTF::s_file;
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v21, "%s", a1);
  WTF::PrintStream::printf(v21, "%p", *a2);
  WTF::PrintStream::printf(v21, "%s", a3);
  WTF::PrintStream::printf(v21, "%p", *a4);
  WTF::PrintStream::printf(v21, "%s", a5);
  WTF::PrintStream::printf(v21, "%p", *a6);
  WTF::PrintStream::printf(v21, "%s", a7);
  WTF::PrintStream::printf(v21, "%p", *a8);
  WTF::PrintStream::printf(v21, "%s", a9);
  WTF::PrintStream::printf(v21, "%p", *a10);
  WTF::PrintStream::printf(v21, "%s", a11);
  WTF::PrintStream::printf(v21, "%s", a12);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
}

uint64_t JSC::VMTraps::SignalSender::initializeSignals(void)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E35B2DB8;
  v2 = v0;
  WTF::addSignalHandler(4, (uint64_t *)&v2);
  result = (uint64_t)v2;
  v2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSC::VMTraps::SignalSender::initializeSignals(void)::{lambda(void)#1}::operator() const(void)::{lambda(WTF::Signal,WTF::SigInfo &,__darwin_arm_thread_state64 &)#1},WTF::SignalAction,WTF::Signal,WTF::SigInfo &,__darwin_arm_thread_state64 &>::call(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG *v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD v29[2];
  char v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  void (**v33)(uint64_t, uint64_t);
  _QWORD *v34;

  if ((_DWORD)a2 != 4)
  {
    __break(0xC471u);
    JUMPOUT(0x198C39E90);
  }
  v8 = *(JSC::DFG **)(a4 + 256);
  if (qword_1ECF4C1F8 > (unint64_t)v8 || qword_1ECF4C200 <= (unint64_t)v8)
    return 1;
  v10 = JSC::DFG::codeBlockForVMTrapPC(v8, a2, a3, a4, a5, a6, a7, a8);
  v31 = v10;
  if (!v10)
    return 1;
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (unsigned __int8 *)(*(_QWORD *)(v11 + 720) + 16);
  if (__ldaxr(v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_13;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v12);
LABEL_13:
  v30 = 0;
  v29[0] = &v31;
  v29[1] = &v30;
  v32 = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::VMTraps::SignalSender::initializeSignals(void)::{lambda(void)#1}::operator() const(void)::{lambda(WTF::Signal,WTF::SigInfo &,__darwin_arm_thread_state64 &)#1}::operator() const(WTF::Signal,WTF::SigInfo &,__darwin_arm_thread_state64 &)::{lambda(JSC::CodeBlock *)#1}>::implFunction;
  v33 = &v32;
  v34 = v29;
  v15 = **(uint64_t ***)(v11 + 720);
  if (v15)
  {
    v16 = *((unsigned int *)v15 - 1);
    v17 = &v15[v16];
    if (*((_DWORD *)v15 - 3))
    {
      v18 = v15;
      if ((_DWORD)v16)
      {
        v19 = 8 * v16;
        v18 = v15;
        while ((unint64_t)(*v18 + 1) <= 1)
        {
          ++v18;
          v19 -= 8;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_20;
          }
        }
      }
      goto LABEL_20;
    }
    v18 = &v15[v16];
  }
  else
  {
    v18 = 0;
    v16 = 0;
  }
  v17 = &v15[v16];
  if (!v15)
  {
    v20 = 0;
    goto LABEL_21;
  }
LABEL_20:
  v20 = &v15[*((unsigned int *)v15 - 1)];
LABEL_21:
  if (v20 == v18)
    goto LABEL_39;
  do
  {
    v21 = v18 + 1;
    v32((uint64_t)v33, *v18);
    v18 = v17;
    if (v21 != v17)
    {
      v18 = v21;
      while ((unint64_t)(*v18 + 1) <= 1)
      {
        if (++v18 == v17)
        {
          v18 = v17;
          break;
        }
      }
    }
  }
  while (v18 != v20);
  if (!v30)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198C39EB0);
  }
  v28 = __ldxr(v12);
  if (v28 == 1)
  {
    if (!__stlxr(0, v12))
      return 0;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v22, v23, v24, v25, v26, v27);
  return 0;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::VMTraps::SignalSender::initializeSignals(void)::{lambda(void)#1}::operator() const(void)::{lambda(WTF::Signal,WTF::SigInfo &,__darwin_arm_thread_state64 &)#1}::operator() const(WTF::Signal,WTF::SigInfo &,__darwin_arm_thread_state64 &)::{lambda(JSC::CodeBlock *)#1}>::implFunction(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;

  v3 = *(unsigned __int8 **)(a2 + 120);
  if (v3)
  {
    v4 = v3[12];
    if ((v4 & 0xFE) == 4)
    {
      v6 = *(_QWORD *)(a1 + 16);
      if (v4 == 4)
      {
        v7 = v3 + 248;
      }
      else
      {
        if (v4 != 5)
          return;
        v7 = v3 + 232;
      }
      if (!*v7)
      {
        v8 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 72))(v3);
        if (*(_BYTE *)(v8 + 209))
        {
          if (*(_BYTE *)(v8 + 210))
          {
            if (**(_QWORD **)v6 == a2)
              **(_BYTE **)(v6 + 8) = 1;
            JSC::CodeBlock::jettison(a2, 0xAu, 0, 0, v13, v9, v10, v11, v12);
          }
        }
      }
    }
  }
}

uint64_t JSC::VMTraps::SignalSender::SignalSender(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v24;
  uint64_t v25;

  v10 = *(unsigned int **)(a3 + 64);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(_QWORD *)(a3 + 72);
    do
      v13 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v13 + 1, (unsigned int *)v12));
    do
      v14 = __ldaxr(v10);
    while (__stlxr(v14 + 1, v10));
    *(_DWORD *)(a1 + 8) = 1;
    *(_QWORD *)a1 = off_1E3571898;
    do
      v15 = __ldaxr(v10);
    while (__stlxr(v15 + 1, v10));
  }
  else
  {
    v12 = *(_QWORD *)(a3 + 72);
    do
      v24 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v24 + 1, (unsigned int *)v12));
    *(_DWORD *)(a1 + 8) = 1;
    *(_QWORD *)a1 = off_1E3571898;
  }
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = 0x4024000000000000;
  *(_WORD *)(a1 + 40) = 256;
  *(_DWORD *)(a1 + 42) = 0;
  v25 = a1;
  v16 = (_QWORD *)(v12 + 8);
  v17 = *(unsigned int *)(v12 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(v12 + 16))
  {
    v18 = (_QWORD *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v25);
    v17 = *(unsigned int *)(v12 + 20);
    *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v17) = *v18;
  }
  else
  {
    *(_QWORD *)(*v16 + 8 * v17) = a1;
  }
  *(_DWORD *)(v12 + 20) = v17 + 1;
  if (v10)
  {
    do
    {
      v19 = __ldaxr(v10);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v10));
    if (!v20)
    {
      atomic_store(1u, v10);
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    }
    do
    {
      v21 = __ldaxr(v10);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v10));
    if (!v22)
    {
      atomic_store(1u, v10);
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_QWORD *)a1 = off_1E35B2DE0;
  *(_QWORD *)(a1 + 48) = a3;
  WTF::activateSignalHandlersFor(4);
  return a1;
}

void JSC::VMTraps::SignalSender::~SignalSender(JSC::VMTraps::SignalSender *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::AutomaticThread::~AutomaticThread(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

const char *JSC::VMTraps::SignalSender::name(JSC::VMTraps::SignalSender *this)
{
  return "JSC VMTraps Signal Sender Thread";
}

uint64_t JSC::VMTraps::SignalSender::poll(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v8 + 85))
    return 1;
  v9 = *(_DWORD *)(v8 + 80);
  if ((v9 & 0x2F) == 0 || (v9 & 0x20) != 0)
    return 2;
  if (*(_QWORD *)(v8 + 90568))
    return 0;
  v11 = *(_QWORD *)(v8 + 112);
  if (!*(_BYTE *)(v11 + 6))
    return 2;
  result = *(_QWORD *)(v11 + 8);
  if (result)
  {
    do
      v12 = __ldaxr((unsigned int *)result);
    while (__stlxr(v12 + 1, (unsigned int *)result));
    do
      v13 = __ldaxr((unsigned int *)result);
    while (__stlxr(v13 - 1, (unsigned int *)result));
    if (v13 == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      WTF::Thread::~Thread((WTF::Thread *)result, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    return 0;
  }
  return result;
}

uint64_t JSC::VMTraps::SignalSender::work(JSC::VMTraps::SignalSender *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t StatusReg;
  unsigned int v14;
  int v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  WTF::Thread *v41;
  char v42;
  double v43;
  double *v44;
  _QWORD *v45;
  char v46;

  v9 = *((_QWORD *)this + 6);
  v10 = *(_QWORD *)(v9 + 112);
  if (*(_BYTE *)(v10 + 6))
  {
    v11 = *(unsigned int **)(v10 + 8);
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    v41 = (WTF::Thread *)v11;
    v42 = 1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v14 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr((unsigned int *)&pas_thread_suspend_lock))
    {
      if (!__stxr(v14, (unsigned int *)&pas_thread_suspend_lock))
        goto LABEL_10;
    }
    __clrex();
    os_unfair_lock_lock((os_unfair_lock_t)&pas_thread_suspend_lock);
LABEL_10:
    v40[0] = v9;
    v40[1] = &v41;
    v43 = COERCE_DOUBLE(WTF::ScopedLambdaRefFunctor<void ()(__darwin_arm_thread_state64 &),JSC::VMTraps::SignalSender::work(void)::{lambda(__darwin_arm_thread_state64 &)#1}>::implFunction);
    v44 = &v43;
    v45 = v40;
    WTF::sendMessageScoped((uint64_t)&v46, (uint64_t)v11, (uint64_t)&v43);
    v16 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v17 = __ldxr((unsigned int *)&pas_thread_suspend_lock);
      if (v17 != v16)
        break;
      if (!__stlxr(0, (unsigned int *)&pas_thread_suspend_lock))
        goto LABEL_15;
    }
    __clrex();
    os_unfair_lock_unlock((os_unfair_lock_t)&pas_thread_suspend_lock);
LABEL_15:
    v9 = *((_QWORD *)this + 6);
  }
  else
  {
    LOBYTE(v41) = 0;
    v42 = 0;
  }
  v18 = (unsigned __int8 *)(*(_QWORD *)(v9 + 64) + 4);
  if (__ldaxr(v18))
  {
    __clrex();
LABEL_18:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v18);
    goto LABEL_19;
  }
  if (__stxr(1u, v18))
    goto LABEL_18;
LABEL_19:
  v20 = *((_QWORD *)this + 6);
  v21 = *(unsigned __int8 *)(v20 + 85);
  if (!*(_BYTE *)(v20 + 85))
  {
    v22 = *(_QWORD *)(v20 + 72);
    v23 = (unsigned __int8 *)(*(_QWORD *)(v20 + 64) + 4);
    v24 = mach_absolute_time();
    v26 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v26 != -1)
    {
      v43 = COERCE_DOUBLE(&v46);
      v40[0] = &v43;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v25) = dword_1ECF4400C;
    v43 = (double)(v24 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v25 * 1000000000.0) + 0.001;
    LODWORD(v44) = 1;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v22 + 4, v23, (WTF::TimeWithDynamicClockType *)&v43);
  }
  v27 = __ldxr(v18);
  if (v27 == 1)
  {
    if (!__stlxr(0, v18))
      goto LABEL_28;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v18, 0, a3, a4, a5, a6, a7, a8);
LABEL_28:
  if (v42)
  {
    v28 = (unsigned int *)v41;
    v41 = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::Thread::~Thread((WTF::Thread *)v28, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
    }
  }
  return v21;
}

void WTF::ScopedLambdaRefFunctor<void ()(__darwin_arm_thread_state64 &),JSC::VMTraps::SignalSender::work(void)::{lambda(__darwin_arm_thread_state64 &)#1}>::implFunction(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  JSC::CodeBlock *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  unint64_t v45;
  unsigned __int8 *v46;
  char v47;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = *(_QWORD *)(*v8 + 112);
  if (*(_BYTE *)(v9 + 6))
  {
    v10 = a2[32];
    v11 = a2[29];
    v12 = *(_QWORD *)(v9 + 8);
    if (v12)
    {
      do
        v13 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v13 + 1, (unsigned int *)v12));
    }
    v14 = v8[1];
    if (*(_BYTE *)(v14 + 8) && v12 == *(_QWORD *)v14)
    {
      v15 = *v8;
      v16 = *(_QWORD *)(v12 + 16);
      v17 = *(_QWORD *)(v12 + 24);
      if (qword_1ECF4C1F8 <= v10 && qword_1ECF4C200 > v10)
        goto LABEL_18;
      if ((unint64_t)llintPCRangeStart >= (unint64_t)llintPCRangeEnd)
      {
        __break(0xC471u);
        JUMPOUT(0x198C3A5E0);
      }
      if (v10 >= (unint64_t)llintPCRangeStart && v10 <= (unint64_t)llintPCRangeEnd)
      {
LABEL_18:
        v21 = (unsigned __int8 *)(*(_QWORD *)(v15 + 720) + 16);
        while (1)
        {
          v22 = *v21;
          if ((v22 & 1) != 0)
            break;
          v23 = __ldaxr(v21);
          if (v23 == v22)
          {
            if (!__stxr(v22 | 1, v21))
            {
              v46 = v21;
              v47 = 1;
              v24 = v15;
              v25 = *(_QWORD *)(v15 + 48);
              v45 = v25;
              if (v25 && v11)
              {
                v26 = (uint64_t *)v17;
                while (v11 < v25)
                {
                  v27 = (uint64_t *)v11;
                  if ((unint64_t)v26 >= v11 || v11 > v16 || v11 <= v17)
                    break;
                  v28 = *(JSC::CodeBlock **)(v11 + 16);
                  if (v28
                    && (JSC::CodeBlockSet::contains(*(unsigned __int8 **)(v24 + 720), (uint64_t)&v46, *(_QWORD *)(v11 + 16)) & 1) != 0)
                  {
                    if (JSC::CodeBlock::canInstallVMTrapBreakpoints(v28))
                    {
                      v37 = (unsigned __int8 *)(*(_QWORD *)(v24 + 64) + 4);
                      while (1)
                      {
                        v38 = *v37;
                        if ((v38 & 1) != 0)
                          break;
                        v41 = __ldaxr(v37);
                        if (v41 == v38)
                        {
                          if (!__stxr(v38 | 1, v37))
                          {
                            v42 = (unsigned __int8 *)(*(_QWORD *)(v24 + 64) + 4);
                            v43 = *(_DWORD *)(v24 + 80);
                            if ((v43 & 0x2F) != 0
                              && (v43 & 0x20) == 0
                              && (JSC::CodeBlock::hasInstalledVMTrapsBreakpoints(v28) & 1) == 0)
                            {
                              JSC::CodeBlock::installVMTrapBreakpoints(v28);
                            }
                            v44 = __ldxr(v42);
                            if (v44 == 1)
                            {
                              if (!__stlxr(0, v42))
                                goto LABEL_40;
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v42, 0, a3, a4, a5, a6, a7, a8);
                            goto LABEL_40;
                          }
                        }
                        else
                        {
                          __clrex();
                        }
                      }
                    }
                    break;
                  }
                  v11 = JSC::CallFrame::callerFrame(v27, &v45);
                  if (v11)
                  {
                    v25 = v45;
                    v26 = v27;
                    if (v45)
                      continue;
                  }
                  break;
                }
              }
LABEL_40:
              if (v47)
              {
                v39 = v46;
                v40 = __ldxr(v46);
                if (v40 == 1)
                {
                  if (!__stlxr(0, v46))
                    goto LABEL_13;
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v39, 0, a3, a4, a5, a6, a7, a8);
              }
              goto LABEL_13;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
    }
    else if (!v12)
    {
      return;
    }
    do
    {
LABEL_13:
      v19 = __ldaxr((unsigned int *)v12);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v12));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v12);
      WTF::Thread::~Thread((WTF::Thread *)v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
  }
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *result;
  _WORD *v19;
  uint64_t v20;
  __int16 v21;
  int8x16_t *v22;
  uint64_t v23;
  _WORD *v24;
  uint64_t v25;
  char v26;
  _BYTE *v27;
  size_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int16 v40;
  uint64_t v41;
  unsigned __int128 *v42;
  unsigned __int128 *v43;
  unsigned __int128 v44;
  char v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;

  v10 = *(_DWORD *)(a1 + 16);
  v11 = *a2;
  if (*a2)
  {
    v12 = *(_DWORD *)(v11 + 4);
    v13 = __CFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      v14 = -1;
  }
  else
  {
    v14 = 1;
  }
  v13 = __CFADD__(v14, v10);
  v15 = v14 + v10;
  if (v13)
    v16 = 0xFFFFFFFFLL;
  else
    v16 = v15;
  v17 = *(_QWORD *)(a1 + 8);
  if ((v17 || (v17 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v17 + 16) & 4) == 0 || v11 && (*(_BYTE *)(v11 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v19 = result;
      v20 = *a2;
      v21 = *a3;
      if (v20)
      {
        v22 = *(int8x16_t **)(v20 + 8);
        v23 = *(unsigned int *)(v20 + 4);
        if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        {
          v29 = (char *)&result[v23];
          if (v23 >= 0x40)
          {
            v30 = (char *)&result[v23 & 0xFFFFFFC0];
            v32 = 0uLL;
            v33 = (char *)result;
            do
            {
              v46.val[0] = *v22;
              v34 = v22[1];
              v47.val[0] = v22[2];
              v35 = v22[3];
              v22 += 4;
              v36 = v35;
              v47.val[1] = 0uLL;
              v48.val[0] = v34;
              v46.val[1] = 0uLL;
              v37 = v33;
              vst2q_s8(v37, v46);
              v37 += 32;
              v48.val[1] = 0uLL;
              vst2q_s8(v37, v48);
              v38 = v33 + 64;
              vst2q_s8(v38, v47);
              v39 = v33 + 96;
              vst2q_s8(v39, *(int8x16x2_t *)(&v32 - 1));
              v33 += 128;
            }
            while (v33 != v30);
          }
          else
          {
            v30 = (char *)result;
          }
          while (v30 != v29)
          {
            v40 = v22->u8[0];
            v22 = (int8x16_t *)((char *)v22 + 1);
            *(_WORD *)v30 = v40;
            v30 += 2;
          }
        }
        else if ((_DWORD)v23 == 1)
        {
          *result = v22->i16[0];
        }
        else if ((_DWORD)v23)
        {
          result = memcpy(result, v22, 2 * v23);
        }
        v41 = *(unsigned int *)(v20 + 4);
      }
      else
      {
        v41 = 0;
      }
      v19[v41] = v21;
    }
  }
  else
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v24 = result;
      v25 = *a2;
      v26 = *a3;
      if (v25)
      {
        v27 = *(_BYTE **)(v25 + 8);
        v28 = *(unsigned int *)(v25 + 4);
        if ((*(_BYTE *)(v25 + 16) & 4) != 0)
        {
          if ((_DWORD)v28 == 1)
          {
            *(_BYTE *)result = *v27;
          }
          else if ((_DWORD)v28)
          {
            result = memcpy(result, v27, v28);
          }
        }
        else
        {
          if (v28 < 0x10)
          {
            v42 = (unsigned __int128 *)result;
          }
          else
          {
            v42 = (unsigned __int128 *)((char *)result + (v28 & 0xFFFFFFF0));
            v43 = (unsigned __int128 *)result;
            do
            {
              v44 = (unsigned __int128)vld2q_s8(v27);
              v27 += 32;
              *v43++ = v44;
            }
            while (v43 != v42);
          }
          while (v42 != (unsigned __int128 *)((char *)result + v28))
          {
            v45 = *v27;
            v27 += 2;
            *(_BYTE *)v42 = v45;
            v42 = (unsigned __int128 *)((char *)v42 + 1);
          }
        }
        v31 = *(unsigned int *)(v25 + 4);
      }
      else
      {
        v31 = 0;
      }
      *((_BYTE *)v24 + v31) = v26;
    }
  }
  return result;
}

char *std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::VM::canUseAssembler(void)::$_0 &&>>(JSC *a1)
{
  char *result;

  result = JSC::enableAssembler(a1);
  JSC::VM::canUseAssembler(void)::enabled = (char)result;
  return result;
}

char *JSC::enableAssembler(JSC *this)
{
  char *result;
  JSC::ExecutableAllocator *v2;
  JSC::ExecutableAllocator *v3;

  if (!BYTE1(dword_1ECF4C240))
    return 0;
  result = getenv("JavaScriptCoreUseJIT");
  if (!result || (result = (char *)atoi(result), (_DWORD)result))
  {
    v2 = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::initializeUnderlyingAllocator((JSC::ExecutableAllocator *)result);
    v3 = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::singleton(v2);
    result = (char *)JSC::ExecutableAllocator::isValid(v3);
    if ((result & 1) != 0)
      return (char *)1;
    if (HIBYTE(word_1ECF4C254))
    {
      __break(0xC471u);
      return result;
    }
    return 0;
  }
  return result;
}

void JSC::WeakGCMap<WTF::SymbolImpl *,JSC::Symbol,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>>::~WeakGCMap(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = v16 + 8;
      do
      {
        if (*(_QWORD *)(v18 - 8) != -1 && *(_QWORD *)v18)
        {
          *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
          *(_QWORD *)v18 = 0;
        }
        v18 += 16;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t *JSC::WeakGCMap<WTF::SymbolImpl *,JSC::Symbol,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>>::pruneStaleEntries(uint64_t a1)
{
  uint64_t *result;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;

  v3 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v2 = v3;
  if (!v3)
    return result;
  v4 = *(_DWORD *)(v2 - 4);
  if (!v4)
    return result;
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    v7 = v6;
    v8 = (_QWORD *)(v2 + 16 * v6);
    if ((unint64_t)(*v8 + 1) < 2)
      goto LABEL_5;
    v9 = v2 + 16 * v6;
    v12 = *(_QWORD **)(v9 + 8);
    v10 = (_QWORD *)(v9 + 8);
    v11 = v12;
    if (!v12)
    {
      *v8 = -1;
      goto LABEL_11;
    }
    if (!*v11 || (v11[1] & 3) != 0)
    {
      *v8 = -1;
      v11[1] = 3;
      *v10 = 0;
LABEL_11:
      ++v5;
    }
LABEL_5:
    --v6;
  }
  while (v7);
  v13 = *result;
  if (v5)
  {
    *(_DWORD *)(v13 - 16) += v5;
    v17 = *result;
    if (*result)
      v18 = *(_DWORD *)(v17 - 12);
    else
      v18 = 0;
    *(_DWORD *)(v17 - 12) = v18 - v5;
    v13 = *result;
  }
  if (v13)
  {
    v14 = *(_DWORD *)(v13 - 4);
    v15 = 6 * *(_DWORD *)(v13 - 12);
    if (v14 >= 9 && v15 < v14)
      return WTF::HashTable<WTF::SymbolImpl *,WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashMap<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::HashTraits<JSC::Weak<JSC::Symbol>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SymbolImpl *>>::shrinkToBestSize(result);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::SymbolImpl *,WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashMap<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::HashTraits<JSC::Weak<JSC::Symbol>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SymbolImpl *>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<WTF::SymbolImpl *,WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashMap<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::HashTraits<JSC::Weak<JSC::Symbol>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SymbolImpl *>>::computeBestTableSize(v2);
  return WTF::HashTable<WTF::SymbolImpl *,WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashMap<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::HashTraits<JSC::Weak<JSC::Symbol>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SymbolImpl *>>::rehash(a1, v3, 0, v4, v5, v6, v7, v8);
}

uint64_t WTF::HashTable<WTF::SymbolImpl *,WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>>>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashMap<WTF::SymbolImpl *,JSC::Weak<JSC::Symbol>,WTF::PtrHash<WTF::SymbolImpl *>,WTF::HashTraits<WTF::SymbolImpl *>,WTF::HashTraits<JSC::Weak<JSC::Symbol>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SymbolImpl *>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_10;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_3:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_4;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_3;
LABEL_10:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_4:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

uint64_t WTF::LazyUniqueRef<JSC::VM,JSC::HasOwnPropertyCache>::callFunc<JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_0>(uint64_t a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t StatusReg;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  void *v31;

  *a2 |= 2uLL;
  v3 = (void *)WTF::fastMalloc((WTF *)0x8000);
  bzero(v3, 0x8000uLL);
  v31 = v3;
  WTF::LazyUniqueRef<JSC::VM,JSC::HasOwnPropertyCache>::set(a2, (WTF::AtomStringImpl *)&v31, v4, v5, v6, v7, v8, v9);
  v17 = (char *)v31;
  if (v31)
  {
    v18 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v20 = *(_QWORD *)&v17[v18];
      *(_QWORD *)&v17[v18] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v10, v11, v12, v13, v14, v15, v16);
          v21 = *(_QWORD *)(StatusReg + 752);
          if (v21)
          {
            if (!(v20 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v20 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v20)) & 1) != 0)
            {
LABEL_11:
              v22 = *(unsigned int *)(v21 + 8000);
              if (v22 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v21, v20, (os_unfair_lock_s *)5, v12, v13, v14, v15, v16);
              }
              else
              {
                *(_QWORD *)(v21 + 8 * v22) = v20 | 0x5000000000000;
                *(_DWORD *)(v21 + 8000) = v22 + 1;
              }
              goto LABEL_6;
            }
            if (v20 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v20 >> 24)
            {
              v12 = 0;
            }
            else
            {
              v12 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v20 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v20) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v12 == 1)
                goto LABEL_11;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v21, v20, 1, v12, v13, v14, v15, v16);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v20, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
LABEL_6:
      v18 += 16;
      if (v18 == 0x8000)
      {
        bzero(v17, 0x8000uLL);
        WTF::fastFree((unint64_t)v17, v23, v24, v25, v26, v27, v28, v29);
        break;
      }
    }
  }
  result = *a2;
  if ((*a2 & 1) != 0 || (result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C3AD50);
  }
  return result;
}

void **WTF::LazyUniqueRef<JSC::VM,JSC::HasOwnPropertyCache>::set(_QWORD *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  void *v18;

  v8 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v17 = 0;
  v18 = 0;
  *a1 = v8;
  WTF::UniqueRef<JSC::HasOwnPropertyCache>::~UniqueRef(&v17, a2, a3, a4, a5, a6, a7, a8);
  return WTF::UniqueRef<JSC::HasOwnPropertyCache>::~UniqueRef(&v18, v9, v10, v11, v12, v13, v14, v15);
}

void **WTF::UniqueRef<JSC::HasOwnPropertyCache>::~UniqueRef(void **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  unint64_t StatusReg;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = (char *)*a1;
  *a1 = 0;
  if (v9)
  {
    v10 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v12 = *(_QWORD *)&v9[v10];
      *(_QWORD *)&v9[v10] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, a2, a3, a4, a5, a6, a7, a8);
          v13 = *(_QWORD *)(StatusReg + 752);
          if (v13)
          {
            if (!(v12 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v12 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v12)) & 1) != 0)
            {
LABEL_11:
              v14 = *(unsigned int *)(v13 + 8000);
              if (v14 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v13, v12, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v13 + 8 * v14) = v12 | 0x5000000000000;
                *(_DWORD *)(v13 + 8000) = v14 + 1;
              }
              goto LABEL_6;
            }
            if (v12 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v12 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v12 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v12) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_11;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v13, v12, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v12, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
LABEL_6:
      v10 += 16;
      if (v10 == 0x8000)
      {
        bzero(v9, 0x8000uLL);
        WTF::fastFree((unint64_t)v9, v15, v16, v17, v18, v19, v20, v21);
        return a1;
      }
    }
  }
  return a1;
}

uint64_t WTF::LazyUniqueRef<JSC::VM,JSC::MegamorphicCache>::callFunc<JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_1>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;

  v3 = 110592;
  *a2 |= 2uLL;
  v4 = WTF::fastMalloc((WTF *)0x20808);
  bzero((void *)v4, 0x20808uLL);
  for (i = 61440; i != 110592; i += 24)
  {
    v6 = (_QWORD *)(v4 + i);
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)((char *)v6 + 13) = 0;
  }
  bzero((void *)(v4 + 110592), 0x3000uLL);
  do
  {
    v7 = (_QWORD *)(v4 + v3);
    *v7 = 0;
    v7[1] = 0;
    *(_QWORD *)((char *)v7 + 13) = 0;
    v3 += 24;
  }
  while (v3 != 122880);
  bzero((void *)(v4 + 122880), 0x2800uLL);
  *(_WORD *)(v4 + 133120) = 1;
  *a2 = v4;
  if ((v4 & 1) != 0 || (v4 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C3B008);
  }
  return v4;
}

uint64_t WTF::LazyUniqueRef<JSC::VM,JSC::ShadowChicken>::callFunc<JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_2>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *a2 |= 2uLL;
  v3 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v3 = 0;
  v4 = dword_1ECF4C27C;
  *(_DWORD *)(v3 + 8) = dword_1ECF4C27C;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  v12 = WTF::fastZeroedMalloc(56 * (v4 + 1), v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)v3 = v12;
  v13 = v12 + 56 * *(unsigned int *)(v3 + 8);
  *(_QWORD *)(v3 + 16) = v12;
  *(_QWORD *)(v3 + 24) = v13;
  *a2 = v3;
  if ((v3 & 1) != 0 || (v3 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C3B0D0);
  }
  return v3;
}

uint64_t WTF::LazyUniqueRef<JSC::VM,JSC::HeapProfiler>::callFunc<JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_3>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  *a2 |= 2uLL;
  result = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)result = a1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *a2 = result;
  if ((result & 1) != 0 || (result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C3B158);
  }
  return result;
}

uint64_t WTF::LazyUniqueRef<JSC::VM,WTF::AdaptiveStringSearcherTables>::callFunc<JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_4>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  *a2 |= 2uLL;
  v3 = WTF::fastMalloc((WTF *)0xBD4);
  bzero((void *)v3, 0xBD4uLL);
  *a2 = v3;
  if ((v3 & 1) != 0 || (v3 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C3B1E4);
  }
  return v3;
}

int64x2_t *WTF::LazyRef<JSC::VM,JSC::Watchdog>::callFunc<JSC::VM::(JSC::VM::VMType,JSC::HeapType,WTF::RunLoop *,BOOL *)::$_5>(uint64_t a1, _QWORD *a2)
{
  int64x2_t *v4;
  int64x2_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  *a2 |= 2uLL;
  v4 = (int64x2_t *)WTF::fastMalloc((WTF *)0x48);
  result = JSC::Watchdog::Watchdog(v4, (JSC::VM *)a1);
  *a2 = result;
  if (!*(_QWORD *)(a1 + 24))
  {
    JSC::terminationErrorString += 2;
    v29 = (WTF::StringImpl *)&JSC::terminationErrorString;
    v19 = (JSC::VM *)JSC::jsNontrivialString(a1, (JSC::VM *)&v29, v6, v7, v8, v9, v10, v11);
    v20 = v29;
    v29 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
    *(_QWORD *)(a1 + 24) = JSC::Exception::create(a1, v19, 1, v14, v15, v16, v17, v18);
    result = (int64x2_t *)*a2;
  }
  *(_BYTE *)(a1 + 56) |= 4u;
  if ((result & 1) != 0 || (result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C3B2FCLL);
  }
  return result;
}

void WTF::Detail::CallableWrapper<JSC::VM::deleteAllLinkedCode(JSC::DeleteAllCodeEffort)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap::deleteAllCodeBlocks(*(_QWORD *)(a1 + 8) + 192, *(unsigned int *)(a1 + 16), a3, a4, a5, a6, a7, a8);
}

double WTF::Detail::CallableWrapper<JSC::VM::deleteAllCode(JSC::DeleteAllCodeEffort)::$_0,void>::call(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::Heap *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;

  v9 = *(_QWORD **)(a1 + 8);
  v10 = (uint64_t *)v9[11642];
  v10[1] = 0;
  v10[6] = 0;
  v11 = *v10;
  if (*v10)
  {
    *v10 = 0;
    WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::deallocateTable(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  bzero((void *)(v9[11644] + 16), 0x7C0uLL);
  v19 = v9[11629];
  *(_OWORD *)(v19 + 40) = 0u;
  v20 = (_OWORD *)(v19 + 40);
  *((_DWORD *)v20 - 2) = 0;
  v20[1] = 0u;
  v20[2] = 0u;
  v20[3] = 0u;
  v20[4] = 0u;
  v20[5] = 0u;
  v20[6] = 0u;
  v20[7] = 0u;
  v20[8] = 0u;
  v20[9] = 0u;
  v20[10] = 0u;
  v20[11] = 0u;
  v20[12] = 0u;
  v20[13] = 0u;
  v20[14] = 0u;
  v20[15] = 0u;
  v20[16] = 0u;
  v20[17] = 0u;
  v20[18] = 0u;
  v20[19] = 0u;
  v20[20] = 0u;
  v20[21] = 0u;
  v20[22] = 0u;
  v20[23] = 0u;
  v20[24] = 0u;
  v20[25] = 0u;
  v20[26] = 0u;
  v20[27] = 0u;
  v20[28] = 0u;
  v20[29] = 0u;
  v20[30] = 0u;
  v20[31] = 0u;
  if (*((_DWORD *)v20 - 5))
  {
    v21 = *((_QWORD *)v20 - 4);
    v22 = *((unsigned int *)v20 - 6);
    if ((_DWORD)v22)
    {
      v23 = 16 * v22;
      v24 = v21;
      while (!*(_WORD *)v24
           && ((*(unsigned int *)(v24 + 2) | ((unint64_t)*(unsigned __int8 *)(v24 + 6) << 32)) & 0xFFFFFFFFFFLL) == 0)
      {
        v24 += 16;
        v23 -= 16;
        if (!v23)
          goto LABEL_12;
      }
    }
    else
    {
      v24 = v21;
    }
    v34 = v21 + 16 * v22;
LABEL_15:
    if (v24 != v34)
    {
      v35 = *(_QWORD *)(v24 + 8);
      if (v35 && (*(_BYTE *)(v35 + 8) & 3) == 0 && *(_QWORD *)v35)
        JSC::RegExp::deleteCode(*(JSC::RegExp **)v35, v12, v13, v14, v15, v16, v17, v18);
      while (1)
      {
        v24 += 16;
        if (v24 == v34)
          break;
        if (*(_WORD *)v24)
          v36 = 0;
        else
          v36 = ((*(unsigned int *)(v24 + 2) | ((unint64_t)*(unsigned __int8 *)(v24 + 6) << 32)) & 0xFFFFFFFFFFLL) == 0;
        if (!v36)
          goto LABEL_15;
      }
    }
  }
LABEL_12:
  v26 = (JSC::Heap *)(v9 + 24);
  JSC::Heap::deleteAllCodeBlocks((uint64_t)v26, *(unsigned int *)(a1 + 16), v13, v14, v15, v16, v17, v18);
  JSC::Heap::deleteAllUnlinkedCodeBlocks((uint64_t)v26, *(unsigned int *)(a1 + 16), v27, v28, v29, v30, v31, v32);
  return JSC::Heap::reportAbandonedObjectGraph(v26);
}

malloc_zone_t **WTF::Detail::CallableWrapper<JSC::VM::shrinkFootprintWhenIdle(void)::$_0,void>::call(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  bmalloc::api *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  __int16 v26;
  bmalloc::api *v27;

  v8 = *(_QWORD *)(a1 + 8);
  JSC::sanitizeStackForVM((JSC *)v8, a2, a3, a4, a5, a6, a7, a8);
  JSC::VM::deleteAllCode(v8, 1);
  v26 = 257;
  v27 = 0;
  JSC::Heap::collectNow((JSC::Heap *)(v8 + 192), (void *)1, (uint64_t)&v26, v9, v10, v11, v12, v13);
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    v22 = (unsigned int *)((char *)v21 + 8);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v21 + 2);
      v21 = (bmalloc::api *)(*(uint64_t (**)(bmalloc::api *))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  return bmalloc::api::scavenge(v21, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t WTF::HashTable<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::KeyValuePair<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>>,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashMap<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  JSC::SourceProviderCache *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  JSC::SourceProviderCache *v40;
  _DWORD *v41;
  JSC::SourceProviderCache *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = v11 + 16 * v22;
      v25 = *(_DWORD **)v24;
      if (!*(_QWORD *)v24)
      {
        v42 = *(JSC::SourceProviderCache **)(v24 + 8);
        *(_QWORD *)(v24 + 8) = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 1)
          {
            JSC::SourceProviderCache::~SourceProviderCache(v42, v15, v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
            v25 = *(_DWORD **)v24;
          }
          else
          {
            --*(_DWORD *)v42;
          }
        }
        *(_QWORD *)v24 = 0;
        if (v25)
        {
          if (v25[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
          else
            --v25[2];
        }
        goto LABEL_23;
      }
      if (v25 != (_DWORD *)-1)
        break;
LABEL_23:
      if (++v22 == v12)
        goto LABEL_37;
    }
    v26 = *a1;
    if (*a1)
      v27 = *(_DWORD *)(v26 - 8);
    else
      v27 = 0;
    v28 = ((unint64_t)v25 + ~((_QWORD)v25 << 32)) ^ (((unint64_t)v25 + ~((_QWORD)v25 << 32)) >> 22);
    v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
    v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
    v31 = v27 & ((v30 >> 31) ^ v30);
    v32 = 1;
    do
    {
      v33 = v31;
      v34 = *(_QWORD *)(v26 + 16 * v31);
      v31 = (v31 + v32++) & v27;
    }
    while (v34);
    v35 = v26 + 16 * v33;
    v36 = *(JSC::SourceProviderCache **)(v35 + 8);
    *(_QWORD *)(v35 + 8) = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
      {
        JSC::SourceProviderCache::~SourceProviderCache(v36, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
        v51 = *(_DWORD **)v35;
        *(_QWORD *)v35 = 0;
        if (v51)
        {
          if (v51[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
          else
            --v51[2];
        }
        goto LABEL_15;
      }
      --*(_DWORD *)v36;
    }
    *(_QWORD *)v35 = 0;
LABEL_15:
    v37 = *(_DWORD **)v24;
    *(_QWORD *)v24 = 0;
    *(_QWORD *)v35 = v37;
    v38 = v11 + 16 * v22;
    v39 = *(_QWORD *)(v38 + 8);
    *(_QWORD *)(v38 + 8) = 0;
    *(_QWORD *)(v35 + 8) = v39;
    v40 = *(JSC::SourceProviderCache **)(v38 + 8);
    *(_QWORD *)(v38 + 8) = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
      {
        JSC::SourceProviderCache::~SourceProviderCache(v40, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      }
      else
      {
        --*(_DWORD *)v40;
      }
    }
    v41 = *(_DWORD **)v24;
    *(_QWORD *)v24 = 0;
    if (v41)
    {
      if (v41[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
      else
        --v41[2];
    }
    if (v24 == a3)
      v23 = v35;
    goto LABEL_23;
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_37:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

void WTF::HashTable<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::KeyValuePair<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>>,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashMap<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProviderCache,WTF::RawPtrTraits<JSC::SourceProviderCache>,WTF::DefaultRefDerefTraits<JSC::SourceProviderCache>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>>::clear(uint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  JSC::SourceProviderCache *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *a1;
  if (*a1)
  {
    *a1 = 0;
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = v8;
      do
      {
        v11 = *(_DWORD **)v10;
        if (*(_QWORD *)v10 != -1)
        {
          v12 = *(JSC::SourceProviderCache **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1)
            {
              JSC::SourceProviderCache::~SourceProviderCache(v12, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
              v11 = *(_DWORD **)v10;
            }
            else
            {
              --*(_DWORD *)v12;
            }
          }
          *(_QWORD *)v10 = 0;
          if (v11)
          {
            if (v11[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
            else
              --v11[2];
          }
        }
        v10 += 16;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree(v8 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::Instance *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v10 = *(_QWORD *)a1;
  v9 = *(JSC::Wasm::Instance **)(a1 + 8);
  if (v9)
  {
    JSC::Wasm::Instance::~Instance(v9);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  if (*(_BYTE *)(a1 + 16))
    v19 = v10 == 0;
  else
    v19 = 1;
  if (!v19)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t _ZN3WTF9HashTableIPKN3JSC4Wasm8InstanceENS_12KeyValuePairIS5_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS8_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISD_EENS_11DefaultHashIS5_EENS_7HashMapIS5_SC_SH_NS_10HashTraitsIS5_EENSJ_ISC_EENS_15HashTableTraitsEE18KeyValuePairTraitsESK_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS3_E6valuesEvEUlRT_E0_EEbRKST_(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::ThreadSafeWeakPtrControlBlock **v17;
  WTF::ThreadSafeWeakPtrControlBlock *v18;
  WTF::ThreadSafeWeakPtrControlBlock *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;

  v8 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v8 - 4);
    if (v10)
    {
      v12 = 0;
      v13 = v10 - 1;
      do
      {
        v14 = v13;
        v15 = (_QWORD *)(v8 + 16 * v13);
        if ((unint64_t)(*v15 + 1) >= 2)
        {
          v16 = v8 + 16 * v13;
          v18 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v16 + 8);
          v17 = (WTF::ThreadSafeWeakPtrControlBlock **)(v16 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v18, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            *v15 = -1;
            v19 = *v17;
            *v17 = 0;
            if (v19)
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v19, a2, a3, a4, a5, a6, a7, a8);
            ++v12;
          }
        }
        --v13;
      }
      while (v14);
      v20 = *a1;
      v8 = v12 != 0;
      if (v12)
      {
        *(_DWORD *)(v20 - 16) += v12;
        v21 = *a1;
        if (*a1)
          v22 = *(_DWORD *)(v21 - 12);
        else
          v22 = 0;
        *(_DWORD *)(v21 - 12) = v22 - v12;
        v20 = *a1;
      }
      if (v20)
      {
        v23 = *(_DWORD *)(v20 - 4);
        if (6 * *(_DWORD *)(v20 - 12) < v23 && v23 >= 9)
          WTF::HashTable<JSC::Wasm::Instance const*,WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::Instance const*>>::shrinkToBestSize(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

_QWORD *WTF::HashTable<JSC::Wasm::Instance const*,WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::Instance const*>>::shrinkToBestSize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;

  if (*a1)
    v8 = *(_DWORD *)(*a1 - 12);
  else
    v8 = 0;
  v9 = (v8 - 1) | ((v8 - 1) >> 1) | (((v8 - 1) | ((v8 - 1) >> 1)) >> 2);
  v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
  v11 = (v10 | HIWORD(v10)) + 1;
  if (v11 > 0x400)
  {
    if (v11 > 2 * (unint64_t)v8)
      goto LABEL_8;
  }
  else if (3 * v11 > 4 * (unint64_t)v8)
  {
LABEL_6:
    v12 = (double)v8;
    v13 = (double)v11;
    v14 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v11) = 2 * v11;
  if (v11 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v12 = (double)v8;
  v13 = (double)v11;
  v14 = 0.416666667;
LABEL_9:
  if (v13 * v14 <= v12)
    LODWORD(v11) = 2 * v11;
  if (v11 <= 8)
    v15 = 8;
  else
    v15 = v11;
  return WTF::HashTable<JSC::Wasm::Instance const*,WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::Instance const*>>::rehash(a1, v15, 0, a4, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<JSC::Wasm::Instance const*,WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::Instance const*>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;
  uint64_t v24;
  _QWORD *v25;
  WTF::ThreadSafeWeakPtrControlBlock *v26;
  _QWORD *v27;
  WTF::ThreadSafeWeakPtrControlBlock *v28;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if (v12)
  {
    v24 = v12;
    v25 = (_QWORD *)v11;
    do
    {
      if (*v25 != -1)
      {
        if (*v25)
        {
          v27 = WTF::HashTable<JSC::Wasm::Instance const*,WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::Instance const*>>::reinsert(*a1, v25, v16, v17, v18, v19, v20, v21);
          v28 = (WTF::ThreadSafeWeakPtrControlBlock *)v25[1];
          v25[1] = 0;
          if (v28)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v28, v15, v16, v17, v18, v19, v20, v21);
          if (v25 == (_QWORD *)a3)
            v22 = v27;
        }
        else
        {
          v26 = (WTF::ThreadSafeWeakPtrControlBlock *)v25[1];
          v25[1] = 0;
          if (v26)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v26, v15, v16, v17, v18, v19, v20, v21);
        }
      }
      v25 += 2;
      --v24;
    }
    while (v24);
  }
  else
  {
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v22;
}

_QWORD *WTF::HashTable<JSC::Wasm::Instance const*,WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::Instance const*>>::reinsert(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  WTF::ThreadSafeWeakPtrControlBlock *v18;
  uint64_t v19;

  if (a1)
    v9 = *(_DWORD *)(a1 - 8);
  else
    v9 = 0;
  v10 = ~(*a2 << 32) + *a2;
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = v9 & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27)));
  v14 = 1;
  do
  {
    v15 = v13;
    v16 = *(_QWORD *)(a1 + 16 * v13);
    v13 = (v13 + v14++) & v9;
  }
  while (v16);
  v17 = (_QWORD *)(a1 + 16 * v15);
  v18 = (WTF::ThreadSafeWeakPtrControlBlock *)v17[1];
  v17[1] = 0;
  if (v18)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, a2, a3, a4, a5, a6, a7, a8);
  *v17 = *a2;
  v19 = a2[1];
  a2[1] = 0;
  v17[1] = v19;
  return v17;
}

uint64_t WTF::Vector<std::unique_ptr<JSC::CheckpointOSRExitSideState>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::CheckpointOSRExitSideState>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::CheckpointOSRExitSideState>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

void WTF::Vector<std::unique_ptr<JSC::CheckpointOSRExitSideState>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  v8 = (int)a2;
  v10 = *(unsigned int *)(a1 + 12);
  if ((void *)v10 != a2)
  {
    v11 = (unint64_t *)(*(_QWORD *)a1 + 8 * (_QWORD)a2);
    v12 = 8 * v10 - 8 * (_QWORD)a2;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  uint64_t **v64;
  uint64_t *i;
  uint64_t **v66;
  uint64_t *j;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (WTF::StringImpl **)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24)
      {
        if (v25 != (WTF::StringImpl *)-1)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = ((unint64_t)v25 + ~((_QWORD)v25 << 32)) ^ (((unint64_t)v25 + ~((_QWORD)v25 << 32)) >> 22);
          v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
          v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
          v31 = v27 & ((v30 >> 31) ^ v30);
          v32 = 1;
          do
          {
            v33 = v31;
            v34 = *(_QWORD *)(v26 + 16 * v31);
            v31 = (v31 + v32++) & v27;
          }
          while (v34);
          v35 = v26 + 16 * v33;
          v36 = *(_QWORD *)(v35 + 8);
          *(_QWORD *)(v35 + 8) = 0;
          if (v36)
          {
            do
            {
              v37 = __ldaxr((unsigned int *)v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, (unsigned int *)v36));
            if (!v38)
            {
              atomic_store(1u, (unsigned int *)v36);
              v64 = (uint64_t **)(v36 + 8);
              for (i = *(uint64_t **)(v36 + 8); i != (uint64_t *)v64; i = *v64)
              {
                v69 = *i;
                v68 = (uint64_t *)i[1];
                *v68 = *i;
                *(_QWORD *)(v69 + 8) = v68;
                *i = 0;
                i[1] = 0;
              }
              WTF::fastFree(v36, v15, v16, v17, v18, v19, v20, v21);
            }
          }
          v39 = *(WTF::StringImpl **)v35;
          *(_QWORD *)v35 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
            {
              WTF::StringImpl::~StringImpl(v39, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              *(_DWORD *)v39 -= 2;
            }
          }
          v40 = *v24;
          *v24 = 0;
          *(_QWORD *)v35 = v40;
          v41 = v11 + 16 * v22;
          v42 = *(_QWORD *)(v41 + 8);
          *(_QWORD *)(v41 + 8) = 0;
          *(_QWORD *)(v35 + 8) = v42;
          v43 = *(_QWORD *)(v41 + 8);
          *(_QWORD *)(v41 + 8) = 0;
          if (v43)
          {
            do
            {
              v44 = __ldaxr((unsigned int *)v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, (unsigned int *)v43));
            if (!v45)
            {
              atomic_store(1u, (unsigned int *)v43);
              v66 = (uint64_t **)(v43 + 8);
              for (j = *(uint64_t **)(v43 + 8); j != (uint64_t *)v66; j = *v66)
              {
                v71 = *j;
                v70 = (uint64_t *)j[1];
                *v70 = *j;
                *(_QWORD *)(v71 + 8) = v70;
                *j = 0;
                j[1] = 0;
              }
              WTF::fastFree(v43, v15, v16, v17, v18, v19, v20, v21);
            }
          }
          v46 = *v24;
          *v24 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
            {
              WTF::StringImpl::~StringImpl(v46, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
            }
            else
            {
              *(_DWORD *)v46 -= 2;
            }
          }
          if (v24 == (WTF::StringImpl **)a3)
            v23 = v35;
        }
      }
      else
      {
        WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>::~KeyValuePair(v11 + 16 * v22, v15, v16, v17, v18, v19, v20, v21);
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

uint64_t WTF::Vector<JSC::Strong<JSC::JSPromise,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::VM &,JSC::JSPromise*&>(uint64_t result, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v10 = result;
  v11 = *(unsigned int *)(result + 8);
  v12 = *(unsigned int *)(result + 12);
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  if (v15 > v11)
  {
    if (v15 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v16 = *(const void **)result;
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(v10 + 8) = v15;
    *(_QWORD *)v10 = v17;
    memcpy(v17, v16, 8 * v12);
    if (v16)
    {
      if (*(const void **)v10 == v16)
      {
        *(_QWORD *)v10 = 0;
        *(_DWORD *)(v10 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  v18 = *(unsigned int *)(v10 + 12);
  v19 = *(_QWORD *)v10;
  v20 = *a3;
  v21 = a2[89];
  if (!v21)
  {
    v27 = *(_QWORD *)v10;
    JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 84), (uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8);
    v19 = v27;
    v21 = a2[89];
  }
  a2[89] = *(_QWORD *)v21;
  *(_QWORD *)(v21 + 16) = 0;
  v22 = (_QWORD *)(v21 + 16);
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v19 + 8 * v18) = v21 + 16;
  if ((v20 != 0) != (*(_QWORD *)(v21 + 16) != 0))
  {
    if (v20)
    {
      v23 = *(unint64_t **)((v21 & 0xFFFFFFFFFFFFF000) + 0x10);
      v24 = v23[3];
      v23 += 3;
      *(_QWORD *)v21 = v24;
      *(_QWORD *)(v21 + 8) = v23;
      *v23 = v21;
      *(_QWORD *)(v24 + 8) = v21;
    }
    else
    {
      v26 = *(_QWORD *)v21;
      v25 = *(_QWORD **)(v21 + 8);
      *v25 = *(_QWORD *)v21;
      *(_QWORD *)(v26 + 8) = v25;
      *(_QWORD *)v21 = 0;
      *(_QWORD *)(v21 + 8) = 0;
      v22 = *(_QWORD **)(v19 + 8 * v18);
    }
  }
  *v22 = v20;
  ++*(_DWORD *)(v10 + 12);
  return 1;
}

uint64_t *WTF::HashTable<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashMap<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,std::pair<unsigned int,std::unique_ptr<unsigned long>>,WTF::DefaultHash<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>,WTF::HashTraits<std::pair<unsigned int,std::unique_ptr<unsigned long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BaseInstruction<JSC::JSOpcodeTraits> const*>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *result;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v20 = 0;
    v21 = 0;
    v22 = v10;
    do
    {
      v23 = (uint64_t *)(v9 + 24 * v20);
      v24 = *v23;
      if (*v23 != -1)
      {
        if (v24)
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
          v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
          v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
          v32 = v28 & ((v31 >> 31) ^ v31);
          v33 = 1;
          do
          {
            v34 = v32;
            v35 = (uint64_t *)(v27 + 24 * v32);
            v32 = (v32 + v33++) & v28;
          }
          while (*v35);
          v36 = v34;
          v37 = v27 + 24 * v34;
          v40 = *(_QWORD *)(v37 + 16);
          v39 = (_QWORD *)(v37 + 16);
          v38 = v40;
          *v39 = 0;
          if (v40)
            MEMORY[0x19AEBAEF0](v38, 0x1000C4000313F17);
          *v35 = *v23;
          v41 = v9 + 24 * v20;
          *(_DWORD *)(v27 + 24 * v36 + 8) = *(_DWORD *)(v41 + 8);
          v42 = *(_QWORD *)(v41 + 16);
          *(_QWORD *)(v41 + 16) = 0;
          *v39 = v42;
          v43 = *(_QWORD *)(v41 + 16);
          *(_QWORD *)(v41 + 16) = 0;
          if (v43)
            MEMORY[0x19AEBAEF0](v43, 0x1000C4000313F17);
          if (v23 == (uint64_t *)a3)
            v21 = v35;
        }
        else
        {
          v25 = v9 + 24 * v20;
          v26 = *(_QWORD *)(v25 + 16);
          *(_QWORD *)(v25 + 16) = 0;
          if (v26)
            MEMORY[0x19AEBAEF0](v26, 0x1000C4000313F17);
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  else
  {
    v21 = 0;
    result = 0;
    if (!v9)
      return result;
  }
  WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
  return v21;
}

void WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::add<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::ThreadSafeWeakPtrControlBlock *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::Wasm::Instance const*,WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::Instance const*>>::expand(a2, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v21 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a3) & v13;
  v22 = (uint64_t *)(v12 + 16 * v21);
  v23 = *v22;
  v24 = *a3;
  if (*v22)
  {
    v35 = 0;
    v36 = 1;
    do
    {
      if (v23 == v24)
      {
        v37 = *a2;
        if (*a2)
          v38 = *(unsigned int *)(v37 - 4);
        else
          v38 = 0;
        v34 = 0;
        v33 = v37 + 16 * v38;
        goto LABEL_13;
      }
      if (v23 == -1)
        v35 = v22;
      v21 = (v21 + v36) & v13;
      v22 = (uint64_t *)(v12 + 16 * v21);
      v23 = *v22;
      ++v36;
    }
    while (*v22);
    if (v35)
    {
      *v35 = 0;
      v35[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v24 = *a3;
      v22 = v35;
    }
  }
  *v22 = v24;
  v25 = *a4;
  *a4 = 0;
  v26 = (WTF::ThreadSafeWeakPtrControlBlock *)v22[1];
  v22[1] = v25;
  if (v26)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v26, v14, v15, v16, v17, v18, v19, v20);
  v27 = *a2;
  if (*a2)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *a2;
  if (*a2)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31)
      goto LABEL_12;
LABEL_27:
    v22 = WTF::HashTable<JSC::Wasm::Instance const*,WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::Instance const*>>::expand(a2, (uint64_t)v22, v15, v16, v17, v18, v19, v20);
    v29 = *a2;
    if (*a2)
      v32 = *(unsigned int *)(v29 - 4);
    else
      v32 = 0;
    goto LABEL_12;
  }
  if (3 * v32 <= 4 * v31)
    goto LABEL_27;
LABEL_12:
  v33 = v29 + 16 * v32;
  v34 = 1;
LABEL_13:
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v33;
  *(_BYTE *)(a1 + 16) = v34;
}

void _ZN3WTF9HashTableIPKN3JSC4Wasm8InstanceENS_12KeyValuePairIS5_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS8_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISD_EENS_11DefaultHashIS5_EENS_7HashMapIS5_SC_SH_NS_10HashTraitsIS5_EENSJ_ISC_EENS_15HashTableTraitsEE18KeyValuePairTraitsESK_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS3_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKST_(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  WTF::ThreadSafeWeakPtrControlBlock **v16;
  WTF::ThreadSafeWeakPtrControlBlock *v17;
  WTF::ThreadSafeWeakPtrControlBlock *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;

  v8 = *a1;
  if (*a1)
  {
    v9 = *(_DWORD *)(v8 - 4);
    if (v9)
    {
      v11 = 0;
      v12 = v9 - 1;
      do
      {
        v13 = v12;
        v14 = (_QWORD *)(v8 + 16 * v12);
        if ((unint64_t)(*v14 + 1) >= 2)
        {
          v15 = v8 + 16 * v12;
          v17 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v15 + 8);
          v16 = (WTF::ThreadSafeWeakPtrControlBlock **)(v15 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v17, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            *v14 = -1;
            v18 = *v16;
            *v16 = 0;
            if (v18)
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, a2, a3, a4, a5, a6, a7, a8);
            ++v11;
          }
        }
        --v12;
      }
      while (v13);
      v19 = *a1;
      if (v11)
      {
        *(_DWORD *)(v19 - 16) += v11;
        v20 = *a1;
        if (*a1)
          v21 = *(_DWORD *)(v20 - 12);
        else
          v21 = 0;
        *(_DWORD *)(v20 - 12) = v21 - v11;
        v19 = *a1;
      }
      if (v19)
      {
        v22 = *(_DWORD *)(v19 - 4);
        if (6 * *(_DWORD *)(v19 - 12) < v22 && v22 >= 9)
          WTF::HashTable<JSC::Wasm::Instance const*,WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::Instance const*>>::shrinkToBestSize(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
}

_QWORD *WTF::HashTable<JSC::Wasm::Instance const*,WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::Instance const*>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  int v11;

  v9 = *a1;
  if (*a1 && (v11 = *(_DWORD *)(v9 - 4)) != 0)
    v10 = (v11 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v11)));
  else
    v10 = 8;
  return WTF::HashTable<JSC::Wasm::Instance const*,WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashMap<JSC::Wasm::Instance const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::Wasm::Instance const*>,WTF::HashTraits<JSC::Wasm::Instance const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Wasm::Instance const*>>::rehash(a1, v10, a2, a4, a5, a6, a7, a8);
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::VMTraps::handleTraps(unsigned int)::$_0>::implFunction(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v2 = *(unsigned __int8 **)(a2 + 120);
  if (v2)
  {
    v3 = v2[12];
    if ((v3 & 0xFE) == 4)
    {
      if (v3 == 4)
      {
        v5 = v2 + 248;
      }
      else
      {
        if (v3 != 5)
          return;
        v5 = v2 + 232;
      }
      if (!*v5)
      {
        v6 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v2 + 72))(v2);
        if (*(_BYTE *)(v6 + 209))
        {
          if (*(_BYTE *)(v6 + 210))
            JSC::CodeBlock::jettison(a2, 0xAu, 0, 0, v11, v7, v8, v9, v10);
        }
      }
    }
  }
}

uint64_t *JSC::WaiterListManager::singleton(JSC::WaiterListManager *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  return &JSC::WaiterListManager::singleton(void)::manager;
}

unint64_t JSC::WaiterListManager::waitAsyncImpl<int>(char *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  unint64_t *v19;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  __n128 v31;
  unsigned __int8 *v32;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::ThreadSafeWeakPtrControlBlock *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::ThreadSafeWeakPtrControlBlock *v49;
  WTF::RunLoop *v50;
  void *v51;
  WTF *v52;
  unint64_t *v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  double v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t v88;
  unint64_t v89;
  WTF *v90;
  WTF *v91;
  unint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  WTF::ThreadSafeWeakPtrControlBlock *v96;
  uint64_t v97;
  __CFRunLoopTimer *v98;
  const void *v99;
  const void *v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __CFRunLoopTimer *v112;
  const void *v113;
  const void *v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF *v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  int v140;
  uint64_t v141;

  v10 = a5;
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(v15 + 15056);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 + 60);
    SlowCase = *(_QWORD *)(v16 + 24);
    if (SlowCase < *(_QWORD *)(v16 + 32))
    {
LABEL_3:
      *(_QWORD *)(v16 + 24) = SlowCase + v17;
      goto LABEL_4;
    }
    SlowCase = *(_QWORD *)(v16 + 40);
    if ((SlowCase & 1) == 0)
    {
      v89 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v16 + 32) = SlowCase + HIDWORD(v89);
      *(_QWORD *)(v16 + 40) = SlowCase + (int)v89;
      goto LABEL_3;
    }
    JSC::sanitizeStackForVM(*(JSC **)(a2 + 56), (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, v15 + 192, v17, 0, 0, v108, v109, v110);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v15 + 14936, *(JSC **)(a2 + 56), 0x40uLL, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x198C3CDFCLL);
    }
  }
LABEL_4:
  v19 = (unint64_t *)(a3 + 38992);
  *(_DWORD *)SlowCase = 0;
  *(_DWORD *)SlowCase = *(_DWORD *)(a2 + 848);
  *(_DWORD *)(SlowCase + 4) = 16783360;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_QWORD *)(SlowCase + 56) = 0;
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  JSC::WaiterListManager::findOrCreateList((JSC::WaiterListManager *)&v136, a1, (uint64_t)a4, (uint64_t)a4, a5, a6, a7, a8);
  v27 = *(_DWORD *)(a2 + 1164);
  if (v27)
    v28 = 16 * (v27 & 0xFFFFFFFE);
  else
    v28 = 0;
  v29 = *v19;
  if (*v19 < *(_QWORD *)(a3 + 39000))
    goto LABEL_10;
  v29 = *(_QWORD *)(a3 + 39008);
  if ((v29 & 1) == 0)
  {
    v88 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(a3 + 39016);
    *(_QWORD *)(a3 + 39000) = v29 + HIDWORD(v88);
    *(_QWORD *)(a3 + 39008) = v29 + (int)v88;
LABEL_10:
    *v19 = v29 + 32;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)a3, v20, v21, v22, v23, v24, v25, v26);
  v29 = JSC::LocalAllocator::allocateSlowCase(a3 + 38968, a3 + 192, 32, 0, 0, v105, v106, v107);
LABEL_11:
  *(_DWORD *)v29 = 0;
  v30 = *(_DWORD *)(v28 + 8);
  *(_DWORD *)v29 = v28 >> 4;
  *(_DWORD *)(v29 + 4) = v30;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  if (*(_BYTE *)(a3 + 755))
    __dmb(0xAu);
  v31.n128_u64[1] = 10;
  *(_OWORD *)(v29 + 16) = xmmword_19914EFB0;
  v32 = (unsigned __int8 *)v136 + 4;
  if (__ldaxr((unsigned __int8 *)v136 + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v32))
  {
    goto LABEL_17;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v32);
LABEL_17:
  v34 = atomic_load(a4);
  if (v34 != v10)
  {
    v29 = *(_QWORD *)(a3 + 42184);
LABEL_46:
    v71 = 6;
    goto LABEL_47;
  }
  if (a9 == 0.0)
  {
    v29 = *(_QWORD *)(a3 + 42192);
    goto LABEL_46;
  }
  v35 = WTF::fastMalloc((WTF *)0x40);
  v36 = v35;
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_DWORD *)(v35 + 16) = 1;
  v37 = (unsigned int *)(v35 + 16);
  if ((v29 & 8) != 0)
    v38 = (uint64_t *)(v29 - 16);
  else
    v38 = (uint64_t *)(v29 & 0xFFFFFFFFFFFFC000 | 8);
  v39 = *v38;
  *(_QWORD *)(v35 + 24) = *v38;
  v40 = *(_QWORD *)(v39 + 41888);
  v137 = 0;
  v138 = 0;
  v41 = (WTF::ThreadSafeWeakPtrControlBlock *)JSC::DeferredWorkTimer::addPendingWork(v40, v39, (_DWORD *)v29, (uint64_t)&v137);
  v49 = v41;
  if (v41)
  {
    v41 = *(WTF::ThreadSafeWeakPtrControlBlock **)v41;
    if (*(_QWORD *)v49)
      v41 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v41, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
  }
  *(_QWORD *)(v36 + 32) = v41;
  *(_QWORD *)(v36 + 40) = v49;
  v50 = (WTF::RunLoop *)WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v137, v42, v43, v44, v45, v46, v47, v48);
  *(_QWORD *)(v36 + 48) = 0;
  *(_WORD *)(v36 + 56) = 256;
  v52 = v136;
  v53 = (unint64_t *)*((_QWORD *)v136 + 3);
  *(_QWORD *)v36 = (char *)v136 + 16;
  *(_QWORD *)(v36 + 8) = v53;
  *v53 = v36;
  *((_QWORD *)v52 + 3) = v36;
  do
    v54 = __ldaxr(v37);
  while (__stlxr(v54 + 1, v37));
  ++*((_DWORD *)v52 + 2);
  v31.n128_u64[0] = 0x7FF0000000000000;
  if (a9 != INFINITY)
  {
    v135 = WTF::RunLoop::current(v50);
    do
      v55 = __ldaxr(v37);
    while (__stlxr(v55 + 1, v37));
    v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v56 = &off_1E35B2F00;
    v56[1] = a1;
    v56[2] = a4;
    v56[3] = v36;
    v57 = WTF::fastMalloc((WTF *)0x28);
    v58 = v57;
    *(_QWORD *)v57 = off_1E3572150;
    v59 = (unsigned int *)(v135 + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
    *(_DWORD *)(v57 + 24) = 1;
    v61 = (unsigned int *)(v57 + 24);
    *(_QWORD *)(v57 + 8) = v135;
    *(_QWORD *)(v57 + 16) = 0;
    *(_QWORD *)v57 = off_1E3572098;
    *(_QWORD *)(v57 + 32) = 0;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 + 1, v61));
    v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v63 = &off_1E35720E8;
    v63[1] = v58;
    v63[2] = v56;
    v64 = *(_QWORD *)(v58 + 32);
    *(_QWORD *)(v58 + 32) = v63;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    v65 = 0.0;
    if (a9 >= 0.0)
      v65 = a9;
    v31.n128_f64[0] = WTF::RunLoop::TimerBase::start(v58, 0, v65);
    v66 = *(_QWORD *)(v36 + 48);
    *(_QWORD *)(v36 + 48) = v58;
    if (v66)
    {
      v67 = (unsigned int *)(v66 + 24);
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        atomic_store(1u, (unsigned int *)(v66 + 24));
        v97 = *(_QWORD *)(v66 + 32);
        *(_QWORD *)(v66 + 32) = 0;
        if (v97)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v97 + 8))(v97, v31);
        *(_QWORD *)v66 = off_1E3572150;
        v98 = *(__CFRunLoopTimer **)(v66 + 16);
        if (v98 && (CFRunLoopTimerInvalidate(v98), v99 = *(const void **)(v66 + 16), *(_QWORD *)(v66 + 16) = 0, v99))
        {
          CFRelease(v99);
          v100 = *(const void **)(v66 + 16);
          *(_QWORD *)(v66 + 16) = 0;
          if (v100)
            CFRelease(v100);
        }
        else
        {
          *(_QWORD *)(v66 + 16) = 0;
        }
        v101 = *(_QWORD *)(v66 + 8);
        *(_QWORD *)(v66 + 8) = 0;
        if (v101)
        {
          v102 = (unsigned int *)(v101 + 8);
          do
          {
            v103 = __ldaxr(v102);
            v104 = v103 - 1;
          }
          while (__stlxr(v104, v102));
          if (!v104)
          {
            atomic_store(1u, (unsigned int *)(v101 + 8));
            WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v101);
            WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
          }
        }
        WTF::fastFree(v66, v51, v21, v22, v23, v24, v25, v26);
      }
    }
  }
  do
    v70 = __ldaxr(v37);
  while (__stlxr(v70 - 1, v37));
  if (v70 == 1)
  {
    atomic_store(1u, (unsigned int *)(v36 + 16));
    v92 = *(_QWORD *)(v36 + 48);
    *(_QWORD *)(v36 + 48) = 0;
    if (v92)
    {
      v93 = (unsigned int *)(v92 + 24);
      do
      {
        v94 = __ldaxr(v93);
        v95 = v94 - 1;
      }
      while (__stlxr(v95, v93));
      if (!v95)
      {
        atomic_store(1u, (unsigned int *)(v92 + 24));
        v111 = *(_QWORD *)(v92 + 32);
        *(_QWORD *)(v92 + 32) = 0;
        if (v111)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v111 + 8))(v111, v31);
        *(_QWORD *)v92 = off_1E3572150;
        v112 = *(__CFRunLoopTimer **)(v92 + 16);
        if (v112
          && (CFRunLoopTimerInvalidate(v112), v113 = *(const void **)(v92 + 16), *(_QWORD *)(v92 + 16) = 0, v113))
        {
          CFRelease(v113);
          v114 = *(const void **)(v92 + 16);
          *(_QWORD *)(v92 + 16) = 0;
          if (v114)
            CFRelease(v114);
        }
        else
        {
          *(_QWORD *)(v92 + 16) = 0;
        }
        v115 = *(_QWORD *)(v92 + 8);
        *(_QWORD *)(v92 + 8) = 0;
        if (v115)
        {
          v116 = (unsigned int *)(v115 + 8);
          do
          {
            v117 = __ldaxr(v116);
            v118 = v117 - 1;
          }
          while (__stlxr(v118, v116));
          if (!v118)
          {
            atomic_store(1u, (unsigned int *)(v115 + 8));
            WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v115);
            WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
          }
        }
        WTF::fastFree(v92, v51, v21, v22, v23, v24, v25, v26);
      }
    }
    v96 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v36 + 32);
    *(_QWORD *)(v36 + 32) = 0;
    if (v96)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v96, v51, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v36, v51, v21, v22, v23, v24, v25, v26);
  }
  v71 = 7;
LABEL_47:
  v72 = __ldxr(v32);
  if (v72 == 1)
  {
    if (!__stlxr(0, v32))
      goto LABEL_52;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v32, 0, v21, v22, v23, v24, v25, v26);
LABEL_52:
  v73 = *(_QWORD *)(*(_QWORD *)(a3 + 41952) + 896);
  v137 = 0;
  v138 = SlowCase;
  v139 = -1;
  v31.n128_u64[0] = 0x100000001000000;
  v140 = 0x1000000;
  v141 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, a3, v73, v71, 0, (uint64_t)&v137, v25, v26, v31);
  v74 = *(_QWORD *)(*(_QWORD *)(a3 + 41952) + 2608);
  v137 = 0;
  v138 = SlowCase;
  v139 = -1;
  v75.n128_u64[0] = 0x100000001000000;
  v140 = 0x1000000;
  v141 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, a3, v74, v29, 0, (uint64_t)&v137, v76, v77, v75);
  v84 = v136;
  v136 = 0;
  if (v84)
  {
    do
    {
      v85 = __ldaxr((unsigned int *)v84);
      v86 = v85 - 1;
    }
    while (__stlxr(v86, (unsigned int *)v84));
    if (!v86)
    {
      atomic_store(1u, (unsigned int *)v84);
      v90 = (WTF *)*((_QWORD *)v84 + 2);
      if (v90 != (WTF *)((char *)v84 + 16))
      {
        do
        {
          v91 = *(WTF **)v90;
          JSC::WaiterList::removeWithUpdate((uint64_t)v84, v90, v78, v79, v80, v81, v82, v83);
          v90 = v91;
        }
        while (v91 != (WTF *)((char *)v84 + 16));
      }
      WTF::fastFree((unint64_t)v84, v90, v78, v79, v80, v81, v82, v83);
    }
  }
  return SlowCase;
}

unint64_t JSC::WaiterListManager::waitAsyncImpl<long long>(char *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  unint64_t *v19;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  __n128 v31;
  unsigned __int8 *v32;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::ThreadSafeWeakPtrControlBlock *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::ThreadSafeWeakPtrControlBlock *v49;
  WTF::RunLoop *v50;
  void *v51;
  WTF *v52;
  unint64_t *v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  double v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t v88;
  unint64_t v89;
  WTF *v90;
  WTF *v91;
  unint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  WTF::ThreadSafeWeakPtrControlBlock *v96;
  uint64_t v97;
  __CFRunLoopTimer *v98;
  const void *v99;
  const void *v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __CFRunLoopTimer *v112;
  const void *v113;
  const void *v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF *v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  int v140;
  uint64_t v141;

  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(v15 + 15056);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 + 60);
    SlowCase = *(_QWORD *)(v16 + 24);
    if (SlowCase < *(_QWORD *)(v16 + 32))
    {
LABEL_3:
      *(_QWORD *)(v16 + 24) = SlowCase + v17;
      goto LABEL_4;
    }
    SlowCase = *(_QWORD *)(v16 + 40);
    if ((SlowCase & 1) == 0)
    {
      v89 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v16 + 32) = SlowCase + HIDWORD(v89);
      *(_QWORD *)(v16 + 40) = SlowCase + (int)v89;
      goto LABEL_3;
    }
    JSC::sanitizeStackForVM(*(JSC **)(a2 + 56), (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, v15 + 192, v17, 0, 0, v108, v109, v110);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v15 + 14936, *(JSC **)(a2 + 56), 0x40uLL, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x198C3D50CLL);
    }
  }
LABEL_4:
  v19 = (unint64_t *)(a3 + 38992);
  *(_DWORD *)SlowCase = 0;
  *(_DWORD *)SlowCase = *(_DWORD *)(a2 + 848);
  *(_DWORD *)(SlowCase + 4) = 16783360;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_QWORD *)(SlowCase + 56) = 0;
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  JSC::WaiterListManager::findOrCreateList((JSC::WaiterListManager *)&v136, a1, (uint64_t)a4, (uint64_t)a4, a5, a6, a7, a8);
  v27 = *(_DWORD *)(a2 + 1164);
  if (v27)
    v28 = 16 * (v27 & 0xFFFFFFFE);
  else
    v28 = 0;
  v29 = *v19;
  if (*v19 < *(_QWORD *)(a3 + 39000))
    goto LABEL_10;
  v29 = *(_QWORD *)(a3 + 39008);
  if ((v29 & 1) == 0)
  {
    v88 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(a3 + 39016);
    *(_QWORD *)(a3 + 39000) = v29 + HIDWORD(v88);
    *(_QWORD *)(a3 + 39008) = v29 + (int)v88;
LABEL_10:
    *v19 = v29 + 32;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)a3, v20, v21, v22, v23, v24, v25, v26);
  v29 = JSC::LocalAllocator::allocateSlowCase(a3 + 38968, a3 + 192, 32, 0, 0, v105, v106, v107);
LABEL_11:
  *(_DWORD *)v29 = 0;
  v30 = *(_DWORD *)(v28 + 8);
  *(_DWORD *)v29 = v28 >> 4;
  *(_DWORD *)(v29 + 4) = v30;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  if (*(_BYTE *)(a3 + 755))
    __dmb(0xAu);
  v31.n128_u64[1] = 10;
  *(_OWORD *)(v29 + 16) = xmmword_19914EFB0;
  v32 = (unsigned __int8 *)v136 + 4;
  if (__ldaxr((unsigned __int8 *)v136 + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v32))
  {
    goto LABEL_17;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v32);
LABEL_17:
  v34 = atomic_load(a4);
  if (v34 != a5)
  {
    v29 = *(_QWORD *)(a3 + 42184);
LABEL_46:
    v71 = 6;
    goto LABEL_47;
  }
  if (a9 == 0.0)
  {
    v29 = *(_QWORD *)(a3 + 42192);
    goto LABEL_46;
  }
  v35 = WTF::fastMalloc((WTF *)0x40);
  v36 = v35;
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_DWORD *)(v35 + 16) = 1;
  v37 = (unsigned int *)(v35 + 16);
  if ((v29 & 8) != 0)
    v38 = (uint64_t *)(v29 - 16);
  else
    v38 = (uint64_t *)(v29 & 0xFFFFFFFFFFFFC000 | 8);
  v39 = *v38;
  *(_QWORD *)(v35 + 24) = *v38;
  v40 = *(_QWORD *)(v39 + 41888);
  v137 = 0;
  v138 = 0;
  v41 = (WTF::ThreadSafeWeakPtrControlBlock *)JSC::DeferredWorkTimer::addPendingWork(v40, v39, (_DWORD *)v29, (uint64_t)&v137);
  v49 = v41;
  if (v41)
  {
    v41 = *(WTF::ThreadSafeWeakPtrControlBlock **)v41;
    if (*(_QWORD *)v49)
      v41 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v41, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
  }
  *(_QWORD *)(v36 + 32) = v41;
  *(_QWORD *)(v36 + 40) = v49;
  v50 = (WTF::RunLoop *)WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v137, v42, v43, v44, v45, v46, v47, v48);
  *(_QWORD *)(v36 + 48) = 0;
  *(_WORD *)(v36 + 56) = 256;
  v52 = v136;
  v53 = (unint64_t *)*((_QWORD *)v136 + 3);
  *(_QWORD *)v36 = (char *)v136 + 16;
  *(_QWORD *)(v36 + 8) = v53;
  *v53 = v36;
  *((_QWORD *)v52 + 3) = v36;
  do
    v54 = __ldaxr(v37);
  while (__stlxr(v54 + 1, v37));
  ++*((_DWORD *)v52 + 2);
  v31.n128_u64[0] = 0x7FF0000000000000;
  if (a9 != INFINITY)
  {
    v135 = WTF::RunLoop::current(v50);
    do
      v55 = __ldaxr(v37);
    while (__stlxr(v55 + 1, v37));
    v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v56 = &off_1E35B2F28;
    v56[1] = a1;
    v56[2] = a4;
    v56[3] = v36;
    v57 = WTF::fastMalloc((WTF *)0x28);
    v58 = v57;
    *(_QWORD *)v57 = off_1E3572150;
    v59 = (unsigned int *)(v135 + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
    *(_DWORD *)(v57 + 24) = 1;
    v61 = (unsigned int *)(v57 + 24);
    *(_QWORD *)(v57 + 8) = v135;
    *(_QWORD *)(v57 + 16) = 0;
    *(_QWORD *)v57 = off_1E3572098;
    *(_QWORD *)(v57 + 32) = 0;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 + 1, v61));
    v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v63 = &off_1E35720E8;
    v63[1] = v58;
    v63[2] = v56;
    v64 = *(_QWORD *)(v58 + 32);
    *(_QWORD *)(v58 + 32) = v63;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    v65 = 0.0;
    if (a9 >= 0.0)
      v65 = a9;
    v31.n128_f64[0] = WTF::RunLoop::TimerBase::start(v58, 0, v65);
    v66 = *(_QWORD *)(v36 + 48);
    *(_QWORD *)(v36 + 48) = v58;
    if (v66)
    {
      v67 = (unsigned int *)(v66 + 24);
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        atomic_store(1u, (unsigned int *)(v66 + 24));
        v97 = *(_QWORD *)(v66 + 32);
        *(_QWORD *)(v66 + 32) = 0;
        if (v97)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v97 + 8))(v97, v31);
        *(_QWORD *)v66 = off_1E3572150;
        v98 = *(__CFRunLoopTimer **)(v66 + 16);
        if (v98 && (CFRunLoopTimerInvalidate(v98), v99 = *(const void **)(v66 + 16), *(_QWORD *)(v66 + 16) = 0, v99))
        {
          CFRelease(v99);
          v100 = *(const void **)(v66 + 16);
          *(_QWORD *)(v66 + 16) = 0;
          if (v100)
            CFRelease(v100);
        }
        else
        {
          *(_QWORD *)(v66 + 16) = 0;
        }
        v101 = *(_QWORD *)(v66 + 8);
        *(_QWORD *)(v66 + 8) = 0;
        if (v101)
        {
          v102 = (unsigned int *)(v101 + 8);
          do
          {
            v103 = __ldaxr(v102);
            v104 = v103 - 1;
          }
          while (__stlxr(v104, v102));
          if (!v104)
          {
            atomic_store(1u, (unsigned int *)(v101 + 8));
            WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v101);
            WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
          }
        }
        WTF::fastFree(v66, v51, v21, v22, v23, v24, v25, v26);
      }
    }
  }
  do
    v70 = __ldaxr(v37);
  while (__stlxr(v70 - 1, v37));
  if (v70 == 1)
  {
    atomic_store(1u, (unsigned int *)(v36 + 16));
    v92 = *(_QWORD *)(v36 + 48);
    *(_QWORD *)(v36 + 48) = 0;
    if (v92)
    {
      v93 = (unsigned int *)(v92 + 24);
      do
      {
        v94 = __ldaxr(v93);
        v95 = v94 - 1;
      }
      while (__stlxr(v95, v93));
      if (!v95)
      {
        atomic_store(1u, (unsigned int *)(v92 + 24));
        v111 = *(_QWORD *)(v92 + 32);
        *(_QWORD *)(v92 + 32) = 0;
        if (v111)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v111 + 8))(v111, v31);
        *(_QWORD *)v92 = off_1E3572150;
        v112 = *(__CFRunLoopTimer **)(v92 + 16);
        if (v112
          && (CFRunLoopTimerInvalidate(v112), v113 = *(const void **)(v92 + 16), *(_QWORD *)(v92 + 16) = 0, v113))
        {
          CFRelease(v113);
          v114 = *(const void **)(v92 + 16);
          *(_QWORD *)(v92 + 16) = 0;
          if (v114)
            CFRelease(v114);
        }
        else
        {
          *(_QWORD *)(v92 + 16) = 0;
        }
        v115 = *(_QWORD *)(v92 + 8);
        *(_QWORD *)(v92 + 8) = 0;
        if (v115)
        {
          v116 = (unsigned int *)(v115 + 8);
          do
          {
            v117 = __ldaxr(v116);
            v118 = v117 - 1;
          }
          while (__stlxr(v118, v116));
          if (!v118)
          {
            atomic_store(1u, (unsigned int *)(v115 + 8));
            WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v115);
            WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
          }
        }
        WTF::fastFree(v92, v51, v21, v22, v23, v24, v25, v26);
      }
    }
    v96 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v36 + 32);
    *(_QWORD *)(v36 + 32) = 0;
    if (v96)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v96, v51, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v36, v51, v21, v22, v23, v24, v25, v26);
  }
  v71 = 7;
LABEL_47:
  v72 = __ldxr(v32);
  if (v72 == 1)
  {
    if (!__stlxr(0, v32))
      goto LABEL_52;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v32, 0, v21, v22, v23, v24, v25, v26);
LABEL_52:
  v73 = *(_QWORD *)(*(_QWORD *)(a3 + 41952) + 896);
  v137 = 0;
  v138 = SlowCase;
  v139 = -1;
  v31.n128_u64[0] = 0x100000001000000;
  v140 = 0x1000000;
  v141 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, a3, v73, v71, 0, (uint64_t)&v137, v25, v26, v31);
  v74 = *(_QWORD *)(*(_QWORD *)(a3 + 41952) + 2608);
  v137 = 0;
  v138 = SlowCase;
  v139 = -1;
  v75.n128_u64[0] = 0x100000001000000;
  v140 = 0x1000000;
  v141 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, a3, v74, v29, 0, (uint64_t)&v137, v76, v77, v75);
  v84 = v136;
  v136 = 0;
  if (v84)
  {
    do
    {
      v85 = __ldaxr((unsigned int *)v84);
      v86 = v85 - 1;
    }
    while (__stlxr(v86, (unsigned int *)v84));
    if (!v86)
    {
      atomic_store(1u, (unsigned int *)v84);
      v90 = (WTF *)*((_QWORD *)v84 + 2);
      if (v90 != (WTF *)((char *)v84 + 16))
      {
        do
        {
          v91 = *(WTF **)v90;
          JSC::WaiterList::removeWithUpdate((uint64_t)v84, v90, v78, v79, v80, v81, v82, v83);
          v90 = v91;
        }
        while (v91 != (WTF *)((char *)v84 + 16));
      }
      WTF::fastFree((unint64_t)v84, v90, v78, v79, v80, v81, v82, v83);
    }
  }
  return SlowCase;
}

uint64_t JSC::WaiterListManager::waitSyncImpl<int>(char *a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v10;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned int v27;
  WTF *v28;
  unint64_t *v29;
  unsigned int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  double *v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  WTF::ThreadSafeWeakPtrControlBlock *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  __CFRunLoopTimer *v52;
  const void *v53;
  const void *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  int v68;
  double v69;
  WTF *v70;
  char v71;
  double **v72;

  v10 = a4;
  *(_QWORD *)(*(_QWORD *)(a2 + 93456) + 24) = a2;
  v12 = *(_QWORD *)(a2 + 93456);
  v13 = (unsigned int *)(v12 + 16);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  JSC::WaiterListManager::findOrCreateList((JSC::WaiterListManager *)&v70, a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (fabs(a9) != INFINITY)
  {
    v22 = mach_absolute_time();
    v24 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v24 != -1)
    {
      v67 = &v69;
      v72 = &v67;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v72, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v23) = dword_1ECF4400C;
    a9 = a9 + (double)(v22 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v23 * 1000000000.0);
  }
  v69 = a9;
  v25 = (unsigned __int8 *)v70 + 4;
  if (__ldaxr((unsigned __int8 *)v70 + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v25))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v25);
LABEL_11:
  v27 = atomic_load(a3);
  if (v27 == v10)
  {
    v28 = v70;
    v29 = (unint64_t *)*((_QWORD *)v70 + 3);
    *(_QWORD *)v12 = (char *)v70 + 16;
    *(_QWORD *)(v12 + 8) = v29;
    *v29 = v12;
    *((_QWORD *)v28 + 3) = v12;
    do
      v30 = __ldaxr(v13);
    while (__stlxr(v30 + 1, v13));
    ++*((_DWORD *)v28 + 2);
    if (!*(_QWORD *)(v12 + 24))
      goto LABEL_26;
    v31 = (unsigned __int8 *)v70 + 4;
    while (1)
    {
      v32 = mach_absolute_time();
      v34 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v34 != -1)
      {
        v67 = (double *)&v71;
        v72 = &v67;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v72, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v33) = dword_1ECF4400C;
      if ((double)(v32 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v33 * 1000000000.0) >= v69)
        break;
      WTF::MonotonicTime::approximateWallTime(&v69);
      v67 = v35;
      v68 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v12 + 56, v31, (WTF::TimeWithDynamicClockType *)&v67);
      if (!*(_QWORD *)(v12 + 24))
        goto LABEL_26;
    }
    if (*(_QWORD *)(v12 + 24))
    {
      if (*(_QWORD *)(v12 + 8))
        JSC::WaiterList::removeWithUpdate((uint64_t)v70, (WTF *)v12, v16, v17, v18, v19, v20, v21);
      v36 = 2;
    }
    else
    {
LABEL_26:
      v36 = 0;
    }
  }
  else
  {
    v36 = 1;
  }
  v37 = __ldxr(v25);
  if (v37 == 1)
  {
    if (!__stlxr(0, v25))
      goto LABEL_32;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25, 0, v16, v17, v18, v19, v20, v21);
LABEL_32:
  v38 = v70;
  v70 = 0;
  if (!v38)
    goto LABEL_35;
  do
  {
    v39 = __ldaxr((unsigned int *)v38);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, (unsigned int *)v38));
  if (v40)
  {
LABEL_35:
    if (!v12)
      return v36;
    goto LABEL_36;
  }
  atomic_store(1u, (unsigned int *)v38);
  v49 = (WTF *)*((_QWORD *)v38 + 2);
  if (v49 != (WTF *)((char *)v38 + 16))
  {
    do
    {
      v50 = *(WTF **)v49;
      JSC::WaiterList::removeWithUpdate((uint64_t)v38, v49, v16, v17, v18, v19, v20, v21);
      v49 = v50;
    }
    while (v50 != (WTF *)((char *)v38 + 16));
  }
  WTF::fastFree((unint64_t)v38, v49, v16, v17, v18, v19, v20, v21);
  if (v12)
  {
    do
    {
LABEL_36:
      v41 = __ldaxr(v13);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v13));
    if (!v42)
    {
      atomic_store(1u, (unsigned int *)(v12 + 16));
      v44 = *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v12 + 48) = 0;
      if (v44)
      {
        v45 = (unsigned int *)(v44 + 24);
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          atomic_store(1u, (unsigned int *)(v44 + 24));
          v51 = *(_QWORD *)(v44 + 32);
          *(_QWORD *)(v44 + 32) = 0;
          if (v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
          *(_QWORD *)v44 = off_1E3572150;
          v52 = *(__CFRunLoopTimer **)(v44 + 16);
          if (v52
            && (CFRunLoopTimerInvalidate(v52), v53 = *(const void **)(v44 + 16), *(_QWORD *)(v44 + 16) = 0, v53))
          {
            CFRelease(v53);
            v54 = *(const void **)(v44 + 16);
            *(_QWORD *)(v44 + 16) = 0;
            if (v54)
              CFRelease(v54);
          }
          else
          {
            *(_QWORD *)(v44 + 16) = 0;
          }
          v55 = *(_QWORD *)(v44 + 8);
          *(_QWORD *)(v44 + 8) = 0;
          if (v55)
          {
            v56 = (unsigned int *)(v55 + 8);
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
            {
              atomic_store(1u, (unsigned int *)(v55 + 8));
              WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v55);
              WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
            }
          }
          WTF::fastFree(v44, v15, v16, v17, v18, v19, v20, v21);
        }
      }
      v48 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v12 + 32);
      *(_QWORD *)(v12 + 32) = 0;
      if (v48)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v48, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v12, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  return v36;
}

uint64_t JSC::WaiterListManager::waitSyncImpl<long long>(char *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v27;
  WTF *v28;
  unint64_t *v29;
  unsigned int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  double *v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  WTF::ThreadSafeWeakPtrControlBlock *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  __CFRunLoopTimer *v52;
  const void *v53;
  const void *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  int v68;
  double v69;
  WTF *v70;
  char v71;
  double **v72;

  *(_QWORD *)(*(_QWORD *)(a2 + 93456) + 24) = a2;
  v12 = *(_QWORD *)(a2 + 93456);
  v13 = (unsigned int *)(v12 + 16);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  JSC::WaiterListManager::findOrCreateList((JSC::WaiterListManager *)&v70, a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (fabs(a9) != INFINITY)
  {
    v22 = mach_absolute_time();
    v24 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v24 != -1)
    {
      v67 = &v69;
      v72 = &v67;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v72, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v23) = dword_1ECF4400C;
    a9 = a9 + (double)(v22 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v23 * 1000000000.0);
  }
  v69 = a9;
  v25 = (unsigned __int8 *)v70 + 4;
  if (__ldaxr((unsigned __int8 *)v70 + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v25))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v25);
LABEL_11:
  v27 = atomic_load(a3);
  if (v27 == a4)
  {
    v28 = v70;
    v29 = (unint64_t *)*((_QWORD *)v70 + 3);
    *(_QWORD *)v12 = (char *)v70 + 16;
    *(_QWORD *)(v12 + 8) = v29;
    *v29 = v12;
    *((_QWORD *)v28 + 3) = v12;
    do
      v30 = __ldaxr(v13);
    while (__stlxr(v30 + 1, v13));
    ++*((_DWORD *)v28 + 2);
    if (!*(_QWORD *)(v12 + 24))
      goto LABEL_26;
    v31 = (unsigned __int8 *)v70 + 4;
    while (1)
    {
      v32 = mach_absolute_time();
      v34 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v34 != -1)
      {
        v67 = (double *)&v71;
        v72 = &v67;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v72, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v33) = dword_1ECF4400C;
      if ((double)(v32 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v33 * 1000000000.0) >= v69)
        break;
      WTF::MonotonicTime::approximateWallTime(&v69);
      v67 = v35;
      v68 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v12 + 56, v31, (WTF::TimeWithDynamicClockType *)&v67);
      if (!*(_QWORD *)(v12 + 24))
        goto LABEL_26;
    }
    if (*(_QWORD *)(v12 + 24))
    {
      if (*(_QWORD *)(v12 + 8))
        JSC::WaiterList::removeWithUpdate((uint64_t)v70, (WTF *)v12, v16, v17, v18, v19, v20, v21);
      v36 = 2;
    }
    else
    {
LABEL_26:
      v36 = 0;
    }
  }
  else
  {
    v36 = 1;
  }
  v37 = __ldxr(v25);
  if (v37 == 1)
  {
    if (!__stlxr(0, v25))
      goto LABEL_32;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25, 0, v16, v17, v18, v19, v20, v21);
LABEL_32:
  v38 = v70;
  v70 = 0;
  if (!v38)
    goto LABEL_35;
  do
  {
    v39 = __ldaxr((unsigned int *)v38);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, (unsigned int *)v38));
  if (v40)
  {
LABEL_35:
    if (!v12)
      return v36;
    goto LABEL_36;
  }
  atomic_store(1u, (unsigned int *)v38);
  v49 = (WTF *)*((_QWORD *)v38 + 2);
  if (v49 != (WTF *)((char *)v38 + 16))
  {
    do
    {
      v50 = *(WTF **)v49;
      JSC::WaiterList::removeWithUpdate((uint64_t)v38, v49, v16, v17, v18, v19, v20, v21);
      v49 = v50;
    }
    while (v50 != (WTF *)((char *)v38 + 16));
  }
  WTF::fastFree((unint64_t)v38, v49, v16, v17, v18, v19, v20, v21);
  if (v12)
  {
    do
    {
LABEL_36:
      v41 = __ldaxr(v13);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v13));
    if (!v42)
    {
      atomic_store(1u, (unsigned int *)(v12 + 16));
      v44 = *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v12 + 48) = 0;
      if (v44)
      {
        v45 = (unsigned int *)(v44 + 24);
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          atomic_store(1u, (unsigned int *)(v44 + 24));
          v51 = *(_QWORD *)(v44 + 32);
          *(_QWORD *)(v44 + 32) = 0;
          if (v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
          *(_QWORD *)v44 = off_1E3572150;
          v52 = *(__CFRunLoopTimer **)(v44 + 16);
          if (v52
            && (CFRunLoopTimerInvalidate(v52), v53 = *(const void **)(v44 + 16), *(_QWORD *)(v44 + 16) = 0, v53))
          {
            CFRelease(v53);
            v54 = *(const void **)(v44 + 16);
            *(_QWORD *)(v44 + 16) = 0;
            if (v54)
              CFRelease(v54);
          }
          else
          {
            *(_QWORD *)(v44 + 16) = 0;
          }
          v55 = *(_QWORD *)(v44 + 8);
          *(_QWORD *)(v44 + 8) = 0;
          if (v55)
          {
            v56 = (unsigned int *)(v55 + 8);
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
            {
              atomic_store(1u, (unsigned int *)(v55 + 8));
              WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v55);
              WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
            }
          }
          WTF::fastFree(v44, v15, v16, v17, v18, v19, v20, v21);
        }
      }
      v48 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v12 + 32);
      *(_QWORD *)(v12 + 32) = 0;
      if (v48)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v48, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v12, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  return v36;
}

void JSC::WaiterListManager::timeoutAsyncWaiter(JSC::WaiterListManager *a1, void *a2, WTF **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v17;
  void *v18;
  uint64_t *v19;
  WTF *v20;
  uint64_t (*v21)(uint64_t, __int16);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 v31;
  int v32;
  WTF *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  uint64_t (*v52)(uint64_t, __int16);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  char v64;
  unsigned __int8 *v65;
  WTF **v66;
  uint64_t (*v67)(uint64_t, __int16);
  uint64_t (**v68)(uint64_t, __int16);
  unsigned __int8 **v69;

  JSC::WaiterListManager::findList(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, (unsigned int **)&v63);
  if (!v63)
    goto LABEL_29;
  v15 = (unsigned __int8 *)v63 + 4;
  if (__ldaxr((unsigned __int8 *)v63 + 4))
  {
    __clrex();
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v15);
    goto LABEL_6;
  }
  if (__stxr(1u, v15))
    goto LABEL_5;
LABEL_6:
  v17 = *((_QWORD *)*a3 + 4);
  if (v17
    && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<JSC::DeferredWorkTimer::TicketData>(v17, *((_QWORD *)*a3 + 5), v9, v10, v11, v12, v13, v14, &v67), v19 = (uint64_t *)v67, v67 = 0, v19))
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v19, v18, v9, v10, v11, v12, v13, v14);
    v20 = *a3;
    if (*((_QWORD *)*a3 + 1))
    {
      JSC::WaiterList::removeWithUpdate((uint64_t)v63, *a3, v9, v10, v11, v12, v13, v14);
      v20 = *a3;
    }
    if (*((_BYTE *)v20 + 57))
    {
      v21 = (uint64_t (*)(uint64_t, __int16))WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v21 = off_1E35B2F50;
      *((_BYTE *)v21 + 8) = 1;
      v67 = v21;
      JSC::Waiter::scheduleWorkAndClear(v20, (uint64_t *)&v67, v22, v23, v24, v25, v26, v27);
      if (v67)
        (*(void (**)(uint64_t (*)(uint64_t, __int16)))(*(_QWORD *)v67 + 8))(v67);
    }
    else
    {
      *((_QWORD *)v20 + 3) = 0;
      v30 = (unsigned __int8 *)*a3 + 56;
      v31 = atomic_load(v30);
      if ((v31 & 1) != 0)
      {
        v64 = 0;
        v65 = v30;
        v66 = (WTF **)&v64;
        v67 = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
        v68 = &v67;
        v69 = &v65;
        WTF::ParkingLot::unparkOneImpl((uint64_t)v30, (unint64_t)&v67, v9, v10, v11, v12, v13, v14);
      }
    }
    v32 = __ldxr(v15);
    if (v32 == 1)
    {
      v29 = 0;
      if (!__stlxr(0, v15))
        goto LABEL_25;
      goto LABEL_24;
    }
    v29 = 0;
  }
  else
  {
    v28 = __ldxr(v15);
    if (v28 == 1)
    {
      v29 = 1;
      if (!__stlxr(0, v15))
        goto LABEL_25;
      goto LABEL_24;
    }
    v29 = 1;
  }
  __clrex();
LABEL_24:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v15, 0, v9, v10, v11, v12, v13, v14);
LABEL_25:
  v33 = v63;
  v63 = 0;
  if (!v33)
    goto LABEL_28;
  do
  {
    v34 = __ldaxr((unsigned int *)v33);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, (unsigned int *)v33));
  if (v35)
  {
LABEL_28:
    if (!v29)
      return;
    goto LABEL_29;
  }
  atomic_store(1u, (unsigned int *)v33);
  v61 = (WTF *)*((_QWORD *)v33 + 2);
  if (v61 != (WTF *)((char *)v33 + 16))
  {
    do
    {
      v62 = *(WTF **)v61;
      JSC::WaiterList::removeWithUpdate((uint64_t)v33, v61, v9, v10, v11, v12, v13, v14);
      v61 = v62;
    }
    while (v62 != (WTF *)((char *)v33 + 16));
  }
  WTF::fastFree((unint64_t)v33, v61, v9, v10, v11, v12, v13, v14);
  if (v29)
  {
LABEL_29:
    v36 = *((_QWORD *)*a3 + 4);
    if (v36)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<JSC::DeferredWorkTimer::TicketData>(v36, *((_QWORD *)*a3 + 5), v9, v10, v11, v12, v13, v14, &v67);
      v44 = (uint64_t *)v67;
      v67 = 0;
      if (v44)
      {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v44, v37, v38, v39, v40, v41, v42, v43);
        v51 = *a3;
        if (*((_BYTE *)*a3 + 57))
        {
          v52 = (uint64_t (*)(uint64_t, __int16))WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v52 = off_1E35B2F50;
          *((_BYTE *)v52 + 8) = 1;
          v67 = v52;
          JSC::Waiter::scheduleWorkAndClear(v51, (uint64_t *)&v67, v53, v54, v55, v56, v57, v58);
          if (v67)
            (*(void (**)(uint64_t (*)(uint64_t, __int16)))(*(_QWORD *)v67 + 8))(v67);
        }
        else
        {
          *((_QWORD *)v51 + 3) = 0;
          v59 = (unsigned __int8 *)*a3 + 56;
          v60 = atomic_load(v59);
          if ((v60 & 1) != 0)
          {
            LOBYTE(v63) = 0;
            v65 = v59;
            v66 = &v63;
            v67 = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
            v68 = &v67;
            v69 = &v65;
            WTF::ParkingLot::unparkOneImpl((uint64_t)v59, (unint64_t)&v67, v45, v46, v47, v48, v49, v50);
          }
        }
      }
    }
  }
}

void JSC::WaiterListManager::findList(JSC::WaiterListManager *this@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int **a9@<X8>)
{
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  unsigned int v21;
  int v22;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
LABEL_5:
  v13 = (unsigned int *)*((_QWORD *)this + 1);
  if (v13)
  {
    v14 = *(v13 - 2);
    v15 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = *(void **)&v13[4 * v18];
    if (v19 != a2)
    {
      v20 = 1;
      while (v19)
      {
        v18 = ((_DWORD)v18 + v20) & v14;
        v19 = *(void **)&v13[4 * v18];
        ++v20;
        if (v19 == a2)
          goto LABEL_12;
      }
      v18 = *(v13 - 1);
    }
LABEL_12:
    if (v18 == *(v13 - 1))
    {
      v13 = 0;
    }
    else
    {
      v13 = *(unsigned int **)&v13[4 * v18 + 2];
      do
        v21 = __ldaxr(v13);
      while (__stlxr(v21 + 1, v13));
    }
  }
  *a9 = v13;
  v22 = __ldxr((unsigned __int8 *)this);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::WaiterListManager::notifyWaiter(JSC::WaiterListManager *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v17;
  WTF *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WTF::ThreadSafeWeakPtrControlBlock *v37;
  uint64_t v38;
  __CFRunLoopTimer *v39;
  const void *v40;
  const void *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  WTF *v55;
  unsigned int v56;
  unsigned int v57;
  WTF *v59;
  WTF *v60;
  WTF *v61;
  WTF *v62;
  _QWORD v63[2];
  char v64;
  uint64_t v65[3];

  JSC::WaiterListManager::findList(this, a2, a3, a4, a5, a6, a7, a8, (unsigned int **)&v62);
  if (!v62)
    return 0;
  v15 = (unsigned __int8 *)v62 + 4;
  if (__ldaxr((unsigned __int8 *)v62 + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v15);
LABEL_7:
  v17 = 0;
  if ((_DWORD)a3)
  {
    while (1)
    {
      v18 = v62;
      if (!*((_DWORD *)v62 + 2))
        break;
      v19 = *((_QWORD *)v62 + 2);
      v20 = (unsigned int *)(v19 + 16);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
      JSC::WaiterList::removeWithUpdate((uint64_t)v18, (WTF *)v19, v9, v10, v11, v12, v13, v14);
      if (*(_BYTE *)(v19 + 57))
      {
        v23 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v23 = off_1E35B2F50;
        *(_BYTE *)(v23 + 8) = 0;
        v65[0] = v23;
        JSC::Waiter::scheduleWorkAndClear((_QWORD *)v19, v65, v24, v25, v26, v27, v28, v29);
        if (v65[0])
          (*(void (**)(uint64_t))(*(_QWORD *)v65[0] + 8))(v65[0]);
      }
      else
      {
        *(_QWORD *)(v19 + 24) = 0;
        v30 = atomic_load((unsigned __int8 *)(v19 + 56));
        if ((v30 & 1) != 0)
        {
          v64 = 0;
          v63[0] = v19 + 56;
          v63[1] = &v64;
          v65[0] = (uint64_t)WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
          v65[1] = (uint64_t)v65;
          v65[2] = (uint64_t)v63;
          WTF::ParkingLot::unparkOneImpl(v19 + 56, (unint64_t)v65, v9, v10, v11, v12, v13, v14);
        }
      }
      do
      {
        v31 = __ldaxr(v20);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v20));
      if (!v32)
      {
        atomic_store(1u, (unsigned int *)(v19 + 16));
        v33 = *(_QWORD *)(v19 + 48);
        *(_QWORD *)(v19 + 48) = 0;
        if (v33)
        {
          v34 = (unsigned int *)(v33 + 24);
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, (unsigned int *)(v33 + 24));
            v38 = *(_QWORD *)(v33 + 32);
            v61 = (WTF *)v33;
            *(_QWORD *)(v33 + 32) = 0;
            if (v38)
              (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
            *(_QWORD *)v61 = off_1E3572150;
            v39 = (__CFRunLoopTimer *)*((_QWORD *)v61 + 2);
            if (v39
              && (CFRunLoopTimerInvalidate(v39),
                  v40 = (const void *)*((_QWORD *)v61 + 2),
                  *((_QWORD *)v61 + 2) = 0,
                  v40))
            {
              CFRelease(v40);
              v41 = (const void *)*((_QWORD *)v61 + 2);
              *((_QWORD *)v61 + 2) = 0;
              if (v41)
                CFRelease(v41);
            }
            else
            {
              *((_QWORD *)v61 + 2) = 0;
            }
            v42 = *((_QWORD *)v61 + 1);
            *((_QWORD *)v61 + 1) = 0;
            if (v42)
            {
              v43 = (unsigned int *)(v42 + 8);
              do
              {
                v44 = __ldaxr(v43);
                v45 = v44 - 1;
              }
              while (__stlxr(v45, v43));
              if (!v45)
              {
                atomic_store(1u, (unsigned int *)(v42 + 8));
                WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v42);
                WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
              }
            }
            WTF::fastFree((unint64_t)v61, v22, v9, v10, v11, v12, v13, v14);
          }
        }
        v37 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v19 + 32);
        *(_QWORD *)(v19 + 32) = 0;
        if (v37)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v37, v22, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v19, v22, v9, v10, v11, v12, v13, v14);
      }
      v17 = (v17 + 1);
      if ((_DWORD)v17 == (_DWORD)a3)
      {
        v17 = a3;
        break;
      }
    }
  }
  v54 = __ldxr(v15);
  if (v54 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v15, 0, v9, v10, v11, v12, v13, v14);
LABEL_45:
  v55 = v62;
  v62 = 0;
  if (v55)
  {
    do
    {
      v56 = __ldaxr((unsigned int *)v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, (unsigned int *)v55));
    if (!v57)
    {
      atomic_store(1u, (unsigned int *)v55);
      v59 = (WTF *)*((_QWORD *)v55 + 2);
      if (v59 != (WTF *)((char *)v55 + 16))
      {
        do
        {
          v60 = *(WTF **)v59;
          JSC::WaiterList::removeWithUpdate((uint64_t)v55, v59, v9, v10, v11, v12, v13, v14);
          v59 = v60;
        }
        while (v60 != (WTF *)((char *)v55 + 16));
      }
      WTF::fastFree((unint64_t)v55, v59, v9, v10, v11, v12, v13, v14);
    }
  }
  return v17;
}

void JSC::Waiter::scheduleWorkAndClear(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  __CFRunLoopTimer *v14;
  const void *v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  __CFRunLoopTimer *v21;
  const void *v22;
  const void *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;

  v9 = a1[4];
  if (v9)
  {
    v10 = a2;
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<JSC::DeferredWorkTimer::TicketData>(v9, a1[5], a3, a4, a5, a6, a7, a8, &v36);
    a2 = v36;
    if (v36)
    {
      JSC::DeferredWorkTimer::scheduleWorkSoon(*(_BYTE **)(a1[3] + 41888), (uint64_t)v36, v10);
      v11 = (WTF::ThreadSafeWeakPtrControlBlock *)a1[4];
      a1[4] = 0;
      if (v11)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, a2, a3, a4, a5, a6, a7, a8);
      a1[5] = 0;
      v12 = v36;
      v36 = 0;
      if (v12)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = a1[6];
  if (v13)
  {
    v14 = *(__CFRunLoopTimer **)(v13 + 16);
    if (v14)
    {
      CFRunLoopTimerInvalidate(v14);
      v15 = *(const void **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v15)
        CFRelease(v15);
    }
    v16 = a1[6];
    a1[6] = 0;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 24);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, (unsigned int *)(v16 + 24));
        v20 = *(_QWORD *)(v16 + 32);
        *(_QWORD *)(v16 + 32) = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        *(_QWORD *)v16 = off_1E3572150;
        v21 = *(__CFRunLoopTimer **)(v16 + 16);
        if (v21 && (CFRunLoopTimerInvalidate(v21), v22 = *(const void **)(v16 + 16), *(_QWORD *)(v16 + 16) = 0, v22))
        {
          CFRelease(v22);
          v23 = *(const void **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v23)
            CFRelease(v23);
        }
        else
        {
          *(_QWORD *)(v16 + 16) = 0;
        }
        v24 = *(_QWORD *)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        if (v24)
        {
          v25 = (unsigned int *)(v24 + 8);
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            atomic_store(1u, (unsigned int *)(v24 + 8));
            WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v24);
            WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
          }
        }
        WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
}

uint64_t JSC::WaiterListManager::waiterListSize(JSC::WaiterListManager *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v16;
  int v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v22;
  WTF *v23;
  WTF *v24;

  JSC::WaiterListManager::findList(this, a2, a3, a4, a5, a6, a7, a8, (unsigned int **)&v24);
  if (!v24)
    return 0;
  v14 = (unsigned __int8 *)v24 + 4;
  if (__ldaxr((unsigned __int8 *)v24 + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v14);
LABEL_7:
  v16 = *((_DWORD *)v24 + 2);
  v17 = __ldxr(v14);
  if (v17 == 1)
  {
    if (!__stlxr(0, v14))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, v8, v9, v10, v11, v12, v13);
LABEL_12:
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v18));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v18);
      v22 = (WTF *)*((_QWORD *)v18 + 2);
      if (v22 != (WTF *)((char *)v18 + 16))
      {
        do
        {
          v23 = *(WTF **)v22;
          JSC::WaiterList::removeWithUpdate((uint64_t)v18, v22, v8, v9, v10, v11, v12, v13);
          v22 = v23;
        }
        while (v23 != (WTF *)((char *)v18 + 16));
      }
      WTF::fastFree((unint64_t)v18, v22, v8, v9, v10, v11, v12, v13);
    }
  }
  return v16;
}

unint64_t *WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>::~Ref(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v13;
  WTF *v14;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(WTF **)(v9 + 16);
      if (v13 != (WTF *)(v9 + 16))
      {
        do
        {
          v14 = *(WTF **)v13;
          JSC::WaiterList::removeWithUpdate(v9, v13, a3, a4, a5, a6, a7, a8);
          v13 = v14;
        }
        while (v14 != (WTF *)(v9 + 16));
      }
      WTF::fastFree(v9, v13, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void JSC::Waiter::cancelAndClear(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::DeferredWorkTimer::TicketData *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  JSC::DeferredWorkTimer::TicketData *v25;
  _QWORD *v26;
  WTF::ThreadSafeWeakPtrControlBlock *v27;
  uint64_t *v28;
  uint64_t v29;
  __CFRunLoopTimer *v30;
  const void *v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  __CFRunLoopTimer *v37;
  const void *v38;
  const void *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  JSC::DeferredWorkTimer::TicketData *v53;

  v9 = a1[4];
  if (v9)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<JSC::DeferredWorkTimer::TicketData>(v9, a1[5], a3, a4, a5, a6, a7, a8, &v53);
    v10 = v53;
    if (v53)
    {
      if ((JSC::DeferredWorkTimer::TicketData::isCancelled(v53) & 1) == 0)
      {
        v18 = *((_QWORD *)v10 + 2);
        if (v18)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *((_QWORD *)v10 + 2) = 0;
        }
        v19 = (unsigned int *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v19)
        {
          v20 = v19 + 2;
          v21 = *v19;
          if ((_DWORD)v21)
          {
            v22 = 8 * v21;
            do
            {
              if (*(_QWORD *)v20)
              {
                *(_QWORD *)(*(_QWORD *)v20 + 8) = 3;
                *(_QWORD *)v20 = 0;
              }
              v20 += 2;
              v22 -= 8;
            }
            while (v22);
          }
          WTF::fastFree((unint64_t)v19, v11, v12, v13, v14, v15, v16, v17);
        }
        v23 = *((_QWORD *)v10 + 3);
        if (v23)
        {
          *(_QWORD *)(v23 + 8) = 3;
          *((_QWORD *)v10 + 3) = 0;
        }
      }
      v24 = *(_BYTE **)(a1[3] + 41888);
      v25 = v53;
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v26 = off_1E35B2F78;
      v52 = v26;
      JSC::DeferredWorkTimer::scheduleWorkSoon(v24, (uint64_t)v25, (uint64_t *)&v52);
      if (v52)
        (*(void (**)(_QWORD *))(*v52 + 8))(v52);
      v27 = (WTF::ThreadSafeWeakPtrControlBlock *)a1[4];
      a1[4] = 0;
      if (v27)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v27, a2, a3, a4, a5, a6, a7, a8);
      a1[5] = 0;
      v28 = (uint64_t *)v53;
      v53 = 0;
      if (v28)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v28, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v29 = a1[6];
  if (v29)
  {
    v30 = *(__CFRunLoopTimer **)(v29 + 16);
    if (v30)
    {
      CFRunLoopTimerInvalidate(v30);
      v31 = *(const void **)(v29 + 16);
      *(_QWORD *)(v29 + 16) = 0;
      if (v31)
        CFRelease(v31);
    }
    v32 = a1[6];
    a1[6] = 0;
    if (v32)
    {
      v33 = (unsigned int *)(v32 + 24);
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, (unsigned int *)(v32 + 24));
        v36 = *(_QWORD *)(v32 + 32);
        *(_QWORD *)(v32 + 32) = 0;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        *(_QWORD *)v32 = off_1E3572150;
        v37 = *(__CFRunLoopTimer **)(v32 + 16);
        if (v37 && (CFRunLoopTimerInvalidate(v37), v38 = *(const void **)(v32 + 16), *(_QWORD *)(v32 + 16) = 0, v38))
        {
          CFRelease(v38);
          v39 = *(const void **)(v32 + 16);
          *(_QWORD *)(v32 + 16) = 0;
          if (v39)
            CFRelease(v39);
        }
        else
        {
          *(_QWORD *)(v32 + 16) = 0;
        }
        v40 = *(_QWORD *)(v32 + 8);
        *(_QWORD *)(v32 + 8) = 0;
        if (v40)
        {
          v41 = (unsigned int *)(v40 + 8);
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            atomic_store(1u, (unsigned int *)(v40 + 8));
            WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v40);
            WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
          }
        }
        WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
}

void JSC::WaiterListManager::unregister(JSC::WaiterListManager *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31[3];
  unsigned __int8 *v32;
  char v33;
  uint64_t v34;
  JSC::VM *v35;

  v35 = a2;
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_3;
LABEL_4:
  v10 = *((_QWORD *)this + 1);
  if (!v10)
  {
    v11 = 0;
    v12 = 0;
LABEL_6:
    v13 = (_QWORD *)(v10 + 16 * v12);
    goto LABEL_7;
  }
  v12 = *(unsigned int *)(v10 - 4);
  v13 = (_QWORD *)(v10 + 16 * v12);
  if (!*(_DWORD *)(v10 - 12))
  {
    v11 = (_QWORD *)(v10 + 16 * v12);
    goto LABEL_6;
  }
  v11 = (_QWORD *)*((_QWORD *)this + 1);
  if ((_DWORD)v12)
  {
    v30 = 16 * v12;
    v11 = (_QWORD *)*((_QWORD *)this + 1);
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      v11 += 2;
      v30 -= 16;
      if (!v30)
      {
        v11 = v13;
        break;
      }
    }
  }
LABEL_7:
  if (v10)
    v14 = (_QWORD *)(v10 + 16 * *(unsigned int *)(v10 - 4));
  else
    v14 = 0;
  if (v14 != v11)
  {
    while (1)
    {
      v16 = v11[1];
      do
        v17 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v17 + 1, (unsigned int *)v16));
      v34 = v16;
      v18 = (unsigned __int8 *)(v16 + 4);
      v32 = (unsigned __int8 *)(v16 + 4);
      v33 = 1;
      if (__ldaxr((unsigned __int8 *)(v16 + 4)))
        break;
      if (__stxr(1u, v18))
        goto LABEL_22;
LABEL_23:
      v31[0] = &v35;
      v31[1] = v11;
      v31[2] = &v32;
      JSC::WaiterList::removeIf<JSC::WaiterListManager::unregister(JSC::VM *)::$_0>(v34, v31, a3, a4, a5, a6, a7, a8);
      if (v33)
      {
        v27 = v32;
        v28 = __ldxr(v32);
        if (v28 == 1)
        {
          if (!__stlxr(0, v32))
            goto LABEL_29;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v27, 0, v21, v22, v23, v24, v25, v26);
      }
LABEL_29:
      WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>::~Ref((unint64_t *)&v34, v20, v21, v22, v23, v24, v25, v26);
      v29 = v11 + 2;
      v11 = v13;
      if (v29 != v13)
      {
        v11 = v29;
        while ((unint64_t)(*v11 + 1) <= 1)
        {
          v11 += 2;
          if (v11 == v13)
          {
            v11 = v13;
            break;
          }
        }
      }
      if (v11 == v14)
        goto LABEL_10;
    }
    __clrex();
LABEL_22:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v18);
    goto LABEL_23;
  }
LABEL_10:
  v15 = __ldxr((unsigned __int8 *)this);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::WaiterList::removeIf<JSC::WaiterListManager::unregister(JSC::VM *)::$_0>(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;
  uint64_t v9;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = a1 + 16;
  v8 = *(WTF **)(a1 + 16);
  if (v8 != (WTF *)(a1 + 16))
  {
    do
    {
      v12 = *(WTF **)v8;
      if (*((_QWORD *)v8 + 3) == **a2)
      {
        JSC::Waiter::cancelAndClear(v8, a2, a3, a4, a5, a6, a7, a8);
        JSC::WaiterList::removeWithUpdate(a1, v8, v13, v14, v15, v16, v17, v18);
      }
      v8 = v12;
    }
    while (v12 != (WTF *)v9);
  }
}

void JSC::WaiterListManager::unregister(JSC::WaiterListManager *this, JSC::JSGlobalObject *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  _QWORD v29[3];
  unsigned __int8 *v30;
  char v31;
  uint64_t v32;
  JSC::JSGlobalObject *v33;

  v33 = a2;
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_3;
LABEL_4:
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v5 = WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::begin(v4);
  v12 = v5;
  v14 = v13;
  if (v4)
    v4 += 2 * *((unsigned int *)v4 - 1);
  if (v4 != v5)
  {
    while (1)
    {
      v16 = v12[1];
      do
        v17 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v17 + 1, (unsigned int *)v16));
      v32 = v16;
      v18 = (unsigned __int8 *)(v16 + 4);
      v30 = (unsigned __int8 *)(v16 + 4);
      v31 = 1;
      if (__ldaxr((unsigned __int8 *)(v16 + 4)))
        break;
      if (__stxr(1u, v18))
        goto LABEL_19;
LABEL_20:
      v29[0] = &v30;
      v29[1] = &v33;
      v29[2] = v12;
      JSC::WaiterList::removeIf<JSC::WaiterListManager::unregister(JSC::JSGlobalObject *)::$_0>(v32, (uint64_t)v29, v6, v7, v8, v9, v10, v11);
      if (!v31)
        goto LABEL_26;
      v27 = v30;
      v28 = __ldxr(v30);
      if (v28 != 1)
      {
        __clrex();
LABEL_25:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v27, 0, v21, v22, v23, v24, v25, v26);
        goto LABEL_26;
      }
      if (__stlxr(0, v30))
        goto LABEL_25;
LABEL_26:
      WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>::~Ref((unint64_t *)&v32, v20, v21, v22, v23, v24, v25, v26);
      while (1)
      {
        v12 += 2;
        if (v12 == v14)
          break;
        if ((unint64_t)(*v12 + 1) > 1)
          goto LABEL_31;
      }
      v12 = v14;
LABEL_31:
      if (v12 == v4)
        goto LABEL_7;
    }
    __clrex();
LABEL_19:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v18);
    goto LABEL_20;
  }
LABEL_7:
  v15 = __ldxr((unsigned __int8 *)this);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, v6, v7, v8, v9, v10, v11);
}

void JSC::WaiterList::removeIf<JSC::WaiterListManager::unregister(JSC::JSGlobalObject *)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v12;
  uint64_t v13;
  char isCancelled;
  void *v15;
  uint64_t *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  JSC::DeferredWorkTimer::TicketData *v26;

  v9 = a1 + 16;
  v8 = *(uint64_t **)(a1 + 16);
  if (v8 != (uint64_t *)(a1 + 16))
  {
    do
    {
      v12 = (uint64_t *)*v8;
      if (!*((_BYTE *)v8 + 57))
        goto LABEL_14;
      v13 = v8[4];
      if (!v13)
        goto LABEL_14;
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<JSC::DeferredWorkTimer::TicketData>(v13, v8[5], a3, a4, a5, a6, a7, a8, &v26);
      if (!v26)
        goto LABEL_14;
      isCancelled = JSC::DeferredWorkTimer::TicketData::isCancelled(v26);
      v16 = (uint64_t *)v26;
      if ((isCancelled & 1) != 0)
      {
        v26 = 0;
        if (!v16)
          goto LABEL_14;
      }
      else
      {
        v17 = (uint64_t *)*((_QWORD *)v26 + 3);
        if (v17)
        {
          if ((v17[1] & 3) != 0)
            v17 = 0;
          else
            v17 = (uint64_t *)*v17;
        }
        if (v17 == **(uint64_t ***)(a2 + 8))
        {
          JSC::Waiter::cancelAndClear(v8, v15, a3, a4, a5, a6, a7, a8);
          v25 = (uint64_t *)v26;
          v26 = 0;
          if (v25)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v25, v18, v19, v20, v21, v22, v23, v24);
          JSC::WaiterList::removeWithUpdate(a1, (WTF *)v8, v19, v20, v21, v22, v23, v24);
          goto LABEL_14;
        }
        v26 = 0;
      }
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v16, v15, a3, a4, a5, a6, a7, a8);
LABEL_14:
      v8 = v12;
    }
    while (v12 != (uint64_t *)v9);
  }
}

void JSC::WaiterListManager::unregister(JSC::WaiterListManager *this, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  WTF *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF::ThreadSafeWeakPtrControlBlock *v35;
  uint64_t v36;
  __CFRunLoopTimer *v37;
  const void *v38;
  const void *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unint64_t *v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  int v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  double v82;
  double v83;
  double v84;
  unint64_t v85;
  WTF *v86;
  unsigned __int8 *v87;
  int v88;
  unsigned __int8 *v89;
  unint64_t *v90;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
LABEL_5:
  v12 = (uint64_t *)((char *)this + 8);
  v13 = *((_QWORD *)this + 1);
  if (!v13)
    goto LABEL_6;
  v15 = *(_DWORD *)(v13 - 4);
  if (!v15)
    goto LABEL_6;
  v16 = 0;
  v17 = &a2[a3];
  v87 = &a2[a3];
  do
  {
    v18 = --v15;
    v19 = (unint64_t *)(v13 + 16 * v15);
    v20 = *v19;
    if (*v19 + 1 < 2 || v20 < (unint64_t)a2 || v20 >= (unint64_t)v17)
      continue;
    v23 = v13 + 16 * v15;
    v26 = *(_QWORD *)(v23 + 8);
    v24 = (unint64_t *)(v23 + 8);
    v25 = v26;
    do
      v27 = __ldaxr((unsigned int *)v25);
    while (__stlxr(v27 + 1, (unsigned int *)v25));
    v28 = __ldaxr((unsigned __int8 *)(v25 + 4));
    v90 = v24;
    v88 = v16;
    if (v28)
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)(v25 + 4)))
    {
      goto LABEL_28;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v25 + 4);
LABEL_28:
    v89 = (unsigned __int8 *)(v25 + 4);
    v30 = (WTF *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 16);
    if (v29 != v25 + 16)
    {
      do
      {
        v52 = *(_QWORD *)v29;
        v53 = *(_QWORD *)v29;
        if (!*(_QWORD *)(v29 + 48))
        {
          JSC::Waiter::cancelAndClear((_QWORD *)v29, a2, a3, a4, a5, a6, a7, a8);
          v53 = *(_QWORD *)v29;
        }
        v54 = *(unint64_t **)(v29 + 8);
        *v54 = v53;
        *(_QWORD *)(v53 + 8) = v54;
        *(_QWORD *)v29 = 0;
        *(_QWORD *)(v29 + 8) = 0;
        v55 = (unsigned int *)(v29 + 16);
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          v86 = v30;
          atomic_store(1u, (unsigned int *)(v29 + 16));
          v31 = *(_QWORD *)(v29 + 48);
          *(_QWORD *)(v29 + 48) = 0;
          if (v31)
          {
            v32 = (unsigned int *)(v31 + 24);
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              atomic_store(1u, (unsigned int *)(v31 + 24));
              v36 = *(_QWORD *)(v31 + 32);
              *(_QWORD *)(v31 + 32) = 0;
              if (v36)
                (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
              *(_QWORD *)v31 = off_1E3572150;
              v37 = *(__CFRunLoopTimer **)(v31 + 16);
              if (v37
                && (CFRunLoopTimerInvalidate(v37), v38 = *(const void **)(v31 + 16), *(_QWORD *)(v31 + 16) = 0, v38))
              {
                CFRelease(v38);
                v39 = *(const void **)(v31 + 16);
                *(_QWORD *)(v31 + 16) = 0;
                if (v39)
                  CFRelease(v39);
              }
              else
              {
                *(_QWORD *)(v31 + 16) = 0;
              }
              v40 = *(_QWORD *)(v31 + 8);
              *(_QWORD *)(v31 + 8) = 0;
              if (v40)
              {
                v41 = (unsigned int *)(v40 + 8);
                do
                {
                  v42 = __ldaxr(v41);
                  v43 = v42 - 1;
                }
                while (__stlxr(v43, v41));
                if (!v43)
                {
                  atomic_store(1u, (unsigned int *)(v40 + 8));
                  WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v40);
                  WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
                }
              }
              WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
            }
          }
          v35 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v29 + 32);
          *(_QWORD *)(v29 + 32) = 0;
          if (v35)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v35, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
          v30 = v86;
        }
        --*(_DWORD *)(v25 + 8);
        v29 = v52;
      }
      while ((WTF *)v52 != v30);
    }
    v58 = __ldxr(v89);
    if (v58 == 1)
    {
      v17 = v87;
      if (!__stlxr(0, v89))
        goto LABEL_61;
    }
    else
    {
      __clrex();
      v17 = v87;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v89, 0, a3, a4, a5, a6, a7, a8);
    do
    {
LABEL_61:
      v59 = __ldaxr((unsigned int *)v25);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, (unsigned int *)v25));
    v61 = v88;
    v62 = v90;
    v18 = v15;
    if (!v60)
    {
      atomic_store(1u, (unsigned int *)v25);
      v66 = *(WTF **)(v25 + 16);
      if (v66 != v30)
      {
        v67 = v30;
        do
        {
          v68 = *(WTF **)v66;
          JSC::WaiterList::removeWithUpdate(v25, v66, a3, a4, a5, a6, a7, a8);
          v66 = v68;
        }
        while (v68 != v67);
      }
      WTF::fastFree(v25, v66, a3, a4, a5, a6, a7, a8);
      v61 = v88;
      v62 = v90;
      v18 = v15;
      v19 = (unint64_t *)(v13 + 16 * v15);
    }
    *v19 = -1;
    v63 = *v62;
    *v62 = 0;
    if (v63)
    {
      do
      {
        v64 = __ldaxr((unsigned int *)v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, (unsigned int *)v63));
      if (!v65)
      {
        v69 = v61;
        atomic_store(1u, (unsigned int *)v63);
        v70 = *(WTF **)(v63 + 16);
        if (v70 != (WTF *)(v63 + 16))
        {
          do
          {
            v71 = *(WTF **)v70;
            JSC::WaiterList::removeWithUpdate(v63, v70, a3, a4, a5, a6, a7, a8);
            v70 = v71;
          }
          while (v71 != (WTF *)(v63 + 16));
        }
        WTF::fastFree(v63, v70, a3, a4, a5, a6, a7, a8);
        v61 = v69;
        v18 = v15;
      }
    }
    v16 = v61 + 1;
  }
  while (v18);
  v72 = *v12;
  if (v16)
  {
    v73 = v16;
    *(_DWORD *)(v72 - 16) += v16;
    v74 = *v12;
    if (*v12)
      v75 = *(_DWORD *)(v74 - 12);
    else
      v75 = 0;
    *(_DWORD *)(v74 - 12) = v75 - v73;
    v72 = *v12;
  }
  if (v72)
  {
    v76 = *(_DWORD *)(v72 - 4);
    v77 = *(unsigned int *)(v72 - 12);
    if (v76 >= 9 && 6 * (int)v77 < v76)
    {
      v79 = (v77 - 1) | ((v77 - 1) >> 1) | ((((_DWORD)v77 - 1) | ((v77 - 1) >> 1)) >> 2);
      v80 = v79 | (v79 >> 4) | ((v79 | (v79 >> 4)) >> 8);
      v81 = (v80 | HIWORD(v80)) + 1;
      if (v81 > 0x400)
      {
        if (v81 <= 2 * v77)
        {
LABEL_85:
          LODWORD(v81) = 2 * v81;
          if (v81 <= 0x400)
            goto LABEL_86;
        }
        v82 = (double)v77;
        v83 = (double)v81;
        v84 = 0.416666667;
      }
      else
      {
        if (3 * v81 <= 4 * v77)
          goto LABEL_85;
LABEL_86:
        v82 = (double)v77;
        v83 = (double)v81;
        v84 = 0.604166667;
      }
      if (v83 * v84 <= v82)
        LODWORD(v81) = 2 * v81;
      if (v81 <= 8)
        v85 = 8;
      else
        v85 = v81;
      WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash((uint64_t *)this + 1, v85, 0, a4, a5, a6, a7, a8);
    }
  }
LABEL_6:
  v14 = __ldxr((unsigned __int8 *)this);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::WaiterListManager::findOrCreateList(JSC::WaiterListManager *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  _QWORD *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  WTF *v37;
  WTF *v38;

  if (__ldaxr((unsigned __int8 *)a2))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)a2))
    goto LABEL_4;
LABEL_5:
  v13 = (uint64_t *)(a2 + 8);
  v12 = *((_QWORD *)a2 + 1);
  if (v12
    || (WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash((uint64_t *)a2 + 1, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *v13) != 0))
  {
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v12 + 16 * v18);
  v20 = *v19;
  if (!*v19)
  {
LABEL_16:
    *v19 = a3;
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v23 = 0;
    v23[1] = 0;
    *(_DWORD *)v23 = 1;
    v23[2] = v23 + 2;
    v23[3] = v23 + 2;
    v24 = v19[1];
    v19[1] = (uint64_t)v23;
    if (v24)
    {
      do
      {
        v25 = __ldaxr((unsigned int *)v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v24));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)v24);
        v37 = *(WTF **)(v24 + 16);
        if (v37 != (WTF *)(v24 + 16))
        {
          do
          {
            v38 = *(WTF **)v37;
            JSC::WaiterList::removeWithUpdate(v24, v37, a3, a4, a5, a6, a7, a8);
            v37 = v38;
          }
          while (v38 != (WTF *)(v24 + 16));
        }
        WTF::fastFree(v24, v37, a3, a4, a5, a6, a7, a8);
      }
    }
    v27 = *v13;
    if (*v13)
      v28 = *(_DWORD *)(v27 - 12) + 1;
    else
      v28 = 1;
    *(_DWORD *)(v27 - 12) = v28;
    v29 = *v13;
    if (*v13)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    v31 = (*(_DWORD *)(v29 - 16) + v30);
    v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 > 2 * v31)
        goto LABEL_30;
    }
    else
    {
      if (3 * v32 > 4 * v31)
        goto LABEL_30;
      if (!(_DWORD)v32)
      {
        v33 = 8;
        goto LABEL_29;
      }
    }
    v33 = ((_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32)));
LABEL_29:
    v19 = WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash((uint64_t *)a2 + 1, v33, (uint64_t)v19, a4, a5, a6, a7, a8);
    goto LABEL_30;
  }
  v21 = 0;
  v22 = 1;
  while (v20 != a3)
  {
    if (v20 == -1)
      v21 = v19;
    v18 = (v18 + v22) & v14;
    v19 = (uint64_t *)(v12 + 16 * v18);
    v20 = *v19;
    ++v22;
    if (!*v19)
    {
      if (v21)
      {
        *v21 = 0;
        v21[1] = 0;
        --*(_DWORD *)(*v13 - 16);
        v19 = v21;
      }
      goto LABEL_16;
    }
  }
LABEL_30:
  v34 = (unsigned int *)v19[1];
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 + 1, v34));
  *(_QWORD *)this = v34;
  v36 = __ldxr((unsigned __int8 *)a2);
  if (v36 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)a2))
LABEL_36:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2, 0, a3, a4, a5, a6, a7, a8);
}

int64x2_t *JSC::Watchdog::Watchdog(int64x2_t *this, JSC::VM *a2)
{
  uint64_t v3;
  int v4;
  dispatch_qos_class_t v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  unsigned int v9;
  void *v10;

  this->i32[0] = 1;
  this->i16[2] = 0;
  this->i64[1] = (uint64_t)a2;
  this[1] = vdupq_n_s64(0x7FF0000000000000uLL);
  this[2].i64[0] = 0x7FF0000000000000;
  this[2].i64[1] = 0;
  this[3].i64[0] = 0;
  this[3].i64[1] = 0;
  v3 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = off_1E35726F8;
  *(_QWORD *)(v3 + 16) = 0;
  *(_DWORD *)(v3 + 24) = 0;
  if (WTF::globalMaxQOSclass >= 0x11)
    v4 = 17;
  else
    v4 = WTF::globalMaxQOSclass;
  if (WTF::globalMaxQOSclass)
    v5 = v4;
  else
    v5 = QOS_CLASS_UTILITY;
  v6 = dispatch_queue_attr_make_with_qos_class(0, v5, 0);
  v7 = dispatch_queue_create("jsc.watchdog.queue", v6);
  v8 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  if (v8)
  {
    os_release(v8);
    v7 = *(NSObject **)(v3 + 16);
  }
  dispatch_set_context(v7, (void *)v3);
  do
  {
    v9 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
    v10 = (void *)(v9 + 1);
  }
  while (__stlxr(v10, (unsigned int *)&WTF::ThreadLike::s_uid));
  *(_DWORD *)(v3 + 24) = (_DWORD)v10;
  dispatch_queue_set_specific(*(dispatch_queue_t *)(v3 + 16), &WTF::ThreadLike::s_uid, v10, 0);
  *(_QWORD *)v3 = off_1E3572728;
  *(_QWORD *)(v3 + 32) = &unk_1E3572778;
  this[4].i64[0] = v3;
  return this;
}

void JSC::Watchdog::setTimeLimit(unint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;

  *(double *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  if (*(_BYTE *)(a1 + 4))
    v5 = a2 == INFINITY;
  else
    v5 = 1;
  if (!v5)
    JSC::Watchdog::startTimer(a1, a2);
}

void JSC::Watchdog::startTimer(unint64_t a1, double a2)
{
  double v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  char **v28;
  char *v29;

  WTF::CPUTime::forCurrentThread((WTF::CPUTime *)a1);
  *(double *)(a1 + 24) = a2 + v4;
  v5 = mach_absolute_time();
  v7 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v7 != -1)
  {
    v29 = &v27;
    v28 = &v29;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v6) = dword_1ECF4400C;
  v8 = (double)(v5 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v6 * 1000000000.0);
  v9 = a2 + v8;
  v10 = *(double *)(a1 + 32);
  if (v8 >= v10 || v10 > v9)
  {
    *(double *)(a1 + 32) = v9;
    do
      v12 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v12 + 1, (unsigned int *)a1));
    v13 = *(_QWORD *)(a1 + 64);
    do
      v14 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v14 + 1, (unsigned int *)a1));
    v15 = (char *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v15 = &off_1E35B2FA0;
    *((_QWORD *)v15 + 1) = a1;
    *((_QWORD *)v15 + 2) = a1;
    v29 = v15;
    (*(void (**)(uint64_t, char **, double))(*(_QWORD *)v13 + 16))(v13, &v29, a2);
    v23 = v29;
    v29 = 0;
    if (v23)
      (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
    do
    {
      v24 = __ldaxr((unsigned int *)a1);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)a1));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)a1);
      v26 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 56))(v26);
      WTF::fastFree(a1, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

double JSC::Watchdog::shouldTerminate(JSC::Watchdog *this, JSC::JSGlobalObject *a2)
{
  WTF::CPUTime *v4;
  unint64_t v5;
  WTF::CPUTime *v6;
  unint64_t v7;
  double result;
  double v9;
  uint64_t (*v10)(JSC::JSGlobalObject *, _QWORD, _QWORD);
  char v11;
  char **v12;
  char *v13;

  v4 = (WTF::CPUTime *)mach_absolute_time();
  v6 = v4;
  v7 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v7 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v5) = dword_1ECF4400C;
  result = (double)((unint64_t)v6 * WTF::machTimebaseInfo(void)::timebaseInfo)
         / ((double)v5
          * 1000000000.0)
         + 0.0;
  if (result >= *((double *)this + 4))
  {
    *((_QWORD *)this + 4) = 0x7FF0000000000000;
    WTF::CPUTime::forCurrentThread(v4);
    v9 = *((double *)this + 3);
    if (result < v9)
    {
      result = v9 - result;
LABEL_6:
      JSC::Watchdog::startTimer((unint64_t)this, result);
      return result;
    }
    v10 = (uint64_t (*)(JSC::JSGlobalObject *, _QWORD, _QWORD))*((_QWORD *)this + 5);
    if (v10)
    {
      if ((v10(a2, *((_QWORD *)this + 6), *((_QWORD *)this + 7)) & 1) == 0)
      {
        result = *((double *)this + 2);
        if (result != INFINITY && *((double *)this + 3) == INFINITY)
          goto LABEL_6;
      }
    }
  }
  return result;
}

void JSC::Watchdog::enteredVM(JSC::Watchdog *this)
{
  double v1;

  *((_BYTE *)this + 4) = 1;
  v1 = *((double *)this + 2);
  if (v1 != INFINITY)
    JSC::Watchdog::startTimer((unint64_t)this, v1);
}

uint64_t JSC::Watchdog::exitedVM(uint64_t this)
{
  *(_QWORD *)(this + 24) = 0x7FF0000000000000;
  *(_BYTE *)(this + 4) = 0;
  return this;
}

void JSC::Watchdog::willDestroyVM(JSC::Watchdog *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v11;

  v9 = (unsigned __int8 *)this + 5;
  if (__ldaxr((unsigned __int8 *)this + 5))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 5);
LABEL_5:
  *((_QWORD *)this + 1) = 0;
  v11 = __ldxr(v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v9))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::WeakMapConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x700000002;
  *(_QWORD *)(v6 + 8) = "WeakMap";
  *(_DWORD *)(v6 + 16) = 4;
  v27 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, 0, (JSC::VM *)&v27, 1, v7, v8, v9);
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v14, v15, v16, v17);
}

JSC::Exception *JSC::callWeakMap(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"WeakMap", 8);
}

unint64_t JSC::constructWeakMap(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::JSObject *v10;
  uint64_t v11;
  JSC::Heap *v12;
  unint64_t SlowCase;
  int v14;
  _OWORD *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  BOOL v53;
  uint64_t (*v54)(_BYTE **);
  uint64_t *v55;
  JSC::JSObject *v56;
  unint64_t v57;
  JSC::Heap *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  JSC::JSGlobalObject **v64;
  unint64_t *v65;
  char *v66;
  BOOL v67;
  char v68[8];
  uint64_t (*v69)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *);
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  JSC::VM *v73;
  JSC::JSGlobalObject *v74;

  v9 = *(_QWORD *)(this + 56);
  v73 = (JSC::VM *)v9;
  v74 = (JSC::JSGlobalObject *)this;
  v72 = *((_QWORD *)a2 + 5);
  if (v72 != *((_QWORD *)a2 + 3))
  {
    v63 = (_BYTE *)v9;
    v64 = &v74;
    v65 = (unint64_t *)&v72;
    v56 = JSC::constructWeakMap(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1::operator()((uint64_t *)&v63, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_27:
    v10 = v56;
    goto LABEL_3;
  }
  v10 = *(JSC::JSObject **)(this + 1568);
  if ((v10 & 1) != 0)
  {
    v54 = *(uint64_t (**)(_BYTE **))((unint64_t)v10 & 0xFFFFFFFFFFFFFFFCLL);
    v55 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v55 = (uint64_t *)(this - 16);
    v63 = (_BYTE *)*v55;
    v64 = (JSC::JSGlobalObject **)this;
    v65 = (unint64_t *)(this + 1568);
    v56 = (JSC::JSObject *)v54(&v63);
    goto LABEL_27;
  }
LABEL_3:
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v11 = v9 + 40936;
  v12 = *(JSC::Heap **)(v9 + 40936);
  if (!v12)
    v12 = JSC::GCClient::Heap::weakMapSpaceSlow((JSC::Heap **)(v9 + 37552));
  SlowCase = *((_QWORD *)v12 + 3);
  if (SlowCase < *((_QWORD *)v12 + 4))
    goto LABEL_7;
  SlowCase = *((_QWORD *)v12 + 5);
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v12 + 6);
    *((_QWORD *)v12 + 4) = SlowCase + HIDWORD(v57);
    *((_QWORD *)v12 + 5) = SlowCase + (int)v57;
LABEL_7:
    *((_QWORD *)v12 + 3) = SlowCase + 48;
    goto LABEL_8;
  }
  v58 = v12;
  JSC::sanitizeStackForVM((JSC *)v9, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v59 = (uint64_t)v58;
  v11 = v9 + 40936;
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v59, v9 + 192, 48, 0, 0, v60, v61, v62);
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  v14 = *((_DWORD *)v10 + 2);
  *(_DWORD *)SlowCase = (unint64_t)v10 >> 4;
  *(_DWORD *)(SlowCase + 4) = v14;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_DWORD *)(SlowCase + 32) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  v15 = (_OWORD *)WTF::fastMalloc((WTF *)0x40);
  *v15 = 0u;
  v15[1] = 0u;
  v15[2] = 0u;
  v15[3] = 0u;
  v16 = *(_QWORD *)(SlowCase + 16);
  *(_QWORD *)(SlowCase + 16) = v15;
  WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
  WTF::fastFree(0, v24, v25, v26, v27, v28, v29, v30);
  *(_DWORD *)(SlowCase + 24) = 4;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  v71 = SlowCase;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v36 = *((_QWORD *)a2 + 6);
    if ((v36 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      v45 = JSC::JSObject::get((unsigned int *)SlowCase, (uint64_t)v74, *(_QWORD *)(*(_QWORD *)(v11 + 1016) + 2296), v31, v32, v33, v34, v35);
      v70 = v45;
      if (*(_DWORD *)(v9 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v38, v39, v40, v41, v42, v43, v44))
      {
        return 0;
      }
      JSC::getCallData(v45, (uint64_t)v68);
      if (v68[0])
      {
        v53 = v68[0] == 1 && v69 == JSC::protoFuncWeakMapSet;
        v67 = v53;
        v63 = &v67;
        v64 = (JSC::JSGlobalObject **)&v70;
        v65 = &v71;
        v66 = v68;
        JSC::forEachInIterable<JSC::constructWeakMap(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0>(v74, v36, (uint64_t)&v63, v46, v47, v48, v49, v50, v51);
        return v71;
      }
      else
      {
        return JSC::throwTypeError((unint64_t)v74, &v73, (uint64_t)"'set' property of a WeakMap should be callable.", 48);
      }
    }
  }
  return SlowCase;
}

uint64_t JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    v5 = (_QWORD *)(*(_QWORD *)(result + 16) + 8);
    do
    {
      v6 = *(v5 - 1);
      if (v6 != -3 && v6 != 0)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        if ((_DWORD)result)
        {
          if ((*v5 & 0xFFFE000000000002) == 0)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        }
      }
      ++v4;
      v5 += 2;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int v16;

  if (*(_DWORD *)(a1 + 24))
  {
    v10 = 0;
    v11 = (unint64_t *)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v12 = *(v11 - 1);
      if (v12)
        v13 = v12 == -3;
      else
        v13 = 1;
      if (v13)
        goto LABEL_3;
      if ((v12 & 8) != 0)
      {
        if ((*(_BYTE *)(v12 - 79) & 1) == 0)
          goto LABEL_3;
      }
      else if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(*(_QWORD *)(a2 + 80) + 240)
             || ((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) == 0)
      {
        goto LABEL_3;
      }
      v14 = *v11;
      if ((*v11 & 0xFFFE000000000002) != 0 || v14 == 0)
        goto LABEL_3;
      if ((v14 & 8) != 0)
      {
        if ((*(_BYTE *)(v14 - 79) & 1) == 0)
          goto LABEL_25;
      }
      else
      {
        v16 = *(_DWORD *)(a2 + 132);
        if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != v16)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000), v16, a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 8 * ((v14 >> 10) & 0xF) + 0x28) >> (v14 >> 4)) & 1) == 0)
        {
LABEL_25:
          JSC::SlotVisitor::appendSlow(a2, v14, 0, a4, a5, a6, a7, a8);
          goto LABEL_3;
        }
      }
      if (*(_QWORD *)(a2 + 168))
        goto LABEL_25;
LABEL_3:
      ++v10;
      v11 += 2;
    }
    while (v10 < *(unsigned int *)(a1 + 24));
  }
}

void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::destroy(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::fastFree(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::visitChildren(JSC::JSObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 16 * *((unsigned int *)this + 6));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::visitChildren(unsigned int *a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  JSC::JSObject::visitChildren((JSC::JSObject *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a2 + 184))
  {
    v10 = a1[6];
    *(_QWORD *)(a2 + 144) += 16 * v10;
    v11 = *(_QWORD *)(a2 + 160);
    v12 = __CFADD__(v11, 16 * v10);
    v13 = v11 + 16 * v10;
    if (v12)
      *(_BYTE *)(a2 + 152) = 1;
    else
      *(_QWORD *)(a2 + 160) = v13;
  }
}

uint64_t JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::estimatedSize(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 8))
  {
    v1 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v1 == 65534)
      goto LABEL_7;
    if (v1 == 0xFFFF)
      v1 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v2 = __OFSUB__(v1, 63);
    v3 = v1 - 63;
    if ((v3 < 0) ^ v2 | (v3 == 0))
LABEL_7:
      v3 = 0;
    v4 = v3 + 24;
    if ((a1 & 8) == 0)
      goto LABEL_9;
LABEL_11:
    v5 = *(_QWORD *)(a1 - 88);
    return v4 + v5 + 16 * *(unsigned int *)(a1 + 24);
  }
  v4 = 24;
  if ((a1 & 8) != 0)
    goto LABEL_11;
LABEL_9:
  v5 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v4 + v5 + 16 * *(unsigned int *)(a1 + 24);
}

void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::destroy(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::fastFree(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::visitChildren(JSC::JSObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 8 * *((unsigned int *)this + 6));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::visitChildren(unsigned int *a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  JSC::JSObject::visitChildren((JSC::JSObject *)a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a2 + 184))
  {
    v10 = a1[6];
    *(_QWORD *)(a2 + 144) += 8 * v10;
    v11 = *(_QWORD *)(a2 + 160);
    v12 = __CFADD__(v11, 8 * v10);
    v13 = v11 + 8 * v10;
    if (v12)
      *(_BYTE *)(a2 + 152) = 1;
    else
      *(_QWORD *)(a2 + 160) = v13;
  }
}

uint64_t JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::estimatedSize(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 8))
  {
    v1 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v1 == 65534)
      goto LABEL_7;
    if (v1 == 0xFFFF)
      v1 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v2 = __OFSUB__(v1, 63);
    v3 = v1 - 63;
    if ((v3 < 0) ^ v2 | (v3 == 0))
LABEL_7:
      v3 = 0;
    v4 = v3 + 24;
    if ((a1 & 8) == 0)
      goto LABEL_9;
LABEL_11:
    v5 = *(_QWORD *)(a1 - 88);
    return v4 + v5 + 8 * *(unsigned int *)(a1 + 24);
  }
  v4 = 24;
  if ((a1 & 8) != 0)
    goto LABEL_11;
LABEL_9:
  v5 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v4 + v5 + 8 * *(unsigned int *)(a1 + 24);
}

uint64_t JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::WeakMapImpl(uint64_t a1, unint64_t a2)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)a1 = a2 >> 4;
  *(_DWORD *)(a1 + 4) = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::makeAndSetNewBuffer(a1, 4u);
  return a1;
}

uint64_t *JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::takeSnapshot(uint64_t *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  JSC::MarkedVectorBase *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  JSC::MarkedVectorBase *v27;

  v8 = *((unsigned int *)result + 6);
  if ((_DWORD)v8)
  {
    v10 = result;
    v11 = 0;
    v12 = 0;
    v13 = result[2];
    v14 = (JSC::MarkedVectorBase *)(a2 + 8);
    v15 = a2 + 32;
    v16 = a3 - 1;
    while (1)
    {
      v17 = *(_QWORD *)(v13 + 8 * v12);
      if (v17 != -3 && v17 != 0)
        break;
LABEL_16:
      if (++v12 >= v8)
        return result;
    }
    v19 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v19 == *(_DWORD *)(a2 + 12))
    {
      if (!(v19 >> 30))
      {
        result = (uint64_t *)JSC::MarkedVectorBase::expandCapacity(v14, 2 * (int)v19);
        if (!(_DWORD)result)
        {
          LODWORD(v19) = *(_DWORD *)v14;
          goto LABEL_22;
        }
      }
      *(_BYTE *)a2 = 1;
    }
    else
    {
      v20 = *(_QWORD *)(a2 + 16);
      if (v20 != v15 && v20 != 0)
      {
LABEL_22:
        *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v19) = v17;
        *(_DWORD *)(a2 + 8) = v19 + 1;
        if ((v17 & 0xFFFE000000000002) == 0 && *(_QWORD *)(a2 + 24) == 0 && v17 != 0)
        {
          v24 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 8);
          if ((v17 & 8) != 0)
            v24 = (_QWORD *)(v17 - 16);
          v25 = (uint64_t *)(*v24 + 560);
          *(_QWORD *)(a2 + 24) = v25;
          v27 = v14;
          result = WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v25, (uint64_t *)&v27, a4, a5, a6, a7, a8, (uint64_t)&v26);
        }
        goto LABEL_14;
      }
      *(_QWORD *)(v20 + 8 * v19) = v17;
      *(_DWORD *)v14 = v19 + 1;
    }
LABEL_14:
    if (v16 < ++v11)
      return result;
    v8 = *((unsigned int *)v10 + 6);
    goto LABEL_16;
  }
  return result;
}

uint64_t *JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::takeSnapshot(uint64_t *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  JSC::MarkedVectorBase *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *i;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t *v29;
  _BYTE v30[24];
  JSC::MarkedVectorBase *v31;

  v8 = *((unsigned int *)result + 6);
  if ((_DWORD)v8)
  {
    v10 = result;
    v11 = 0;
    v12 = 0;
    v13 = (JSC::MarkedVectorBase *)(a2 + 8);
    v14 = a2 + 32;
    v15 = a3 - 1;
    for (i = (uint64_t *)(result[2] + 8); ; i += 2)
    {
      v17 = *(i - 1);
      if (v17 != -3 && v17 != 0)
        break;
LABEL_20:
      if (++v12 >= v8)
        return result;
    }
    v19 = *i;
    v20 = *(unsigned int *)(a2 + 8);
    v21 = *(_DWORD *)(a2 + 12);
    if ((_DWORD)v20 == v21)
    {
      if (v20 >> 30
        || (result = (uint64_t *)JSC::MarkedVectorBase::expandCapacity(v13, 2 * (int)v20), (_DWORD)result))
      {
        *(_BYTE *)a2 = 1;
LABEL_31:
        v24 = *(_DWORD *)(a2 + 8);
        v21 = *(_DWORD *)(a2 + 12);
LABEL_14:
        if (v24 == v21)
        {
          if (v21 >> 30 || (result = (uint64_t *)JSC::MarkedVectorBase::expandCapacity(v13, 2 * v21), (_DWORD)result))
          {
            *(_BYTE *)a2 = 1;
            goto LABEL_18;
          }
          v24 = *(_DWORD *)v13;
        }
        else
        {
          v25 = *(_QWORD *)(a2 + 16);
          if (v25 == v14 || !v25)
          {
            *(_QWORD *)(v25 + 8 * v24) = v19;
            *(_DWORD *)v13 = v24 + 1;
LABEL_18:
            if (v15 < ++v11)
              return result;
            v8 = *((unsigned int *)v10 + 6);
            goto LABEL_20;
          }
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v24) = v19;
        *(_DWORD *)(a2 + 8) = v24 + 1;
        if (!*(_QWORD *)(a2 + 24) && (v19 & 0xFFFE000000000002) == 0 && v19)
        {
          v28 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 8);
          if ((v19 & 8) != 0)
            v28 = (_QWORD *)(v19 - 16);
          v29 = (uint64_t *)(*v28 + 560);
          *(_QWORD *)(a2 + 24) = v29;
          v31 = v13;
          result = WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v29, (uint64_t *)&v31, a4, a5, a6, a7, a8, (uint64_t)v30);
        }
        goto LABEL_18;
      }
      LODWORD(v20) = *(_DWORD *)v13;
    }
    else
    {
      v22 = *(_QWORD *)(a2 + 16);
      if (v22 == v14 || v22 == 0)
      {
        *(_QWORD *)(v22 + 8 * v20) = v17;
        v24 = v20 + 1;
        *(_DWORD *)v13 = v24;
        goto LABEL_14;
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v20) = v17;
    *(_DWORD *)(a2 + 8) = v20 + 1;
    if ((v17 & 0xFFFE000000000002) == 0 && !*(_QWORD *)(a2 + 24) && v17)
    {
      v26 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v17 & 8) != 0)
        v26 = (_QWORD *)(v17 - 16);
      v27 = (uint64_t *)(*v26 + 560);
      *(_QWORD *)(a2 + 24) = v27;
      v31 = v13;
      result = WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v27, (uint64_t *)&v31, a4, a5, a6, a7, a8, (uint64_t)v30);
    }
    goto LABEL_31;
  }
  return result;
}

void JSC::WeakMapPrototype::finishCreation(JSC::WeakMapPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  char *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  WTF::StringImpl *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  WTF::StringImpl *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  WTF::StringImpl *v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::AtomStringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  WTF::StringImpl *v83;
  WTF::AtomStringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  WTF::AtomStringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v6 = (char *)a2 + 41952;
  v7 = *((_QWORD *)a2 + 5244);
  v8 = *(WTF::StringImpl **)(v7 + 200);
  if (!v8)
  {
    v184 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v184, 1, (uint64_t)JSC::protoFuncWeakMapDelete, 0, 0, 4u);
    goto LABEL_12;
  }
  v9 = *(_DWORD *)v8 + 2;
  *(_DWORD *)v8 = v9;
  v184 = v8;
  if ((*((_BYTE *)v8 + 16) & 0x20) != 0)
  {
    v10 = *(WTF::StringImpl **)(v7 + 872);
    if (!v10)
      goto LABEL_7;
    v9 = *(_DWORD *)v10;
  }
  else
  {
    v10 = v8;
  }
  *(_DWORD *)v10 = v9 + 2;
LABEL_7:
  v185 = v10;
  v18 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v185, (uint64_t)JSC::protoFuncWeakMapDelete, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v20 = v185;
  v185 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v8, v18, 4, v15, v16, v17, v19);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl(v8, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
LABEL_12:
  v28 = *(_QWORD *)v6;
  v29 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 1376);
  if (!v29)
  {
    v185 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v185, 1, (uint64_t)JSC::protoFuncWeakMapGet, 0, 129, 4u);
    goto LABEL_21;
  }
  v30 = *(_DWORD *)v29 + 2;
  *(_DWORD *)v29 = v30;
  if ((*((_BYTE *)v29 + 16) & 0x20) != 0)
  {
    v31 = *(WTF::StringImpl **)(v28 + 872);
    if (!v31)
      goto LABEL_16;
    v30 = *(_DWORD *)v31;
  }
  else
  {
    v31 = v29;
  }
  *(_DWORD *)v31 = v30 + 2;
LABEL_16:
  v185 = v31;
  v39 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v185, (uint64_t)JSC::protoFuncWeakMapGet, 0, 129, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v41 = v185;
  v185 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v29, v39, 4, v36, v37, v38, v40);
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::~StringImpl(v29, v42, v43, v44, v45, v46, v47, v48);
    WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
  }
  else
  {
    *(_DWORD *)v29 -= 2;
  }
LABEL_21:
  v49 = *(_QWORD *)v6;
  v50 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 1440);
  if (!v50)
  {
    v185 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v185, 1, (uint64_t)JSC::protoFuncWeakMapHas, 0, 130, 4u);
    goto LABEL_30;
  }
  v51 = *(_DWORD *)v50 + 2;
  *(_DWORD *)v50 = v51;
  if ((*((_BYTE *)v50 + 16) & 0x20) != 0)
  {
    v52 = *(WTF::StringImpl **)(v49 + 872);
    if (!v52)
      goto LABEL_25;
    v51 = *(_DWORD *)v52;
  }
  else
  {
    v52 = v50;
  }
  *(_DWORD *)v52 = v51 + 2;
LABEL_25:
  v185 = v52;
  v60 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v185, (uint64_t)JSC::protoFuncWeakMapHas, 0, 130, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v62 = v185;
  v185 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v50, v60, 4, v57, v58, v59, v61);
  if (*(_DWORD *)v50 == 2)
  {
    WTF::StringImpl::~StringImpl(v50, v63, v64, v65, v66, v67, v68, v69);
    WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
  }
  else
  {
    *(_DWORD *)v50 -= 2;
  }
LABEL_30:
  v70 = *(_QWORD *)v6;
  v71 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2296);
  if (!v71)
  {
    v185 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v185, 2, (uint64_t)JSC::protoFuncWeakMapSet, 0, 131, 4u);
    goto LABEL_39;
  }
  v72 = *(_DWORD *)v71 + 2;
  *(_DWORD *)v71 = v72;
  if ((*((_BYTE *)v71 + 16) & 0x20) != 0)
  {
    v73 = *(WTF::StringImpl **)(v70 + 872);
    if (!v73)
      goto LABEL_34;
    v72 = *(_DWORD *)v73;
  }
  else
  {
    v73 = v71;
  }
  *(_DWORD *)v73 = v72 + 2;
LABEL_34:
  v185 = v73;
  v81 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 2, &v185, (uint64_t)JSC::protoFuncWeakMapSet, 0, 131, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v83 = v185;
  v185 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v74, v75, v76, v77, v78, v79, v80);
      WTF::fastFree(v176, v177, v178, v179, v180, v181, v182, v183);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v71, v81, 4, v78, v79, v80, v82);
  if (*(_DWORD *)v71 == 2)
  {
    WTF::StringImpl::~StringImpl(v71, v84, v85, v86, v87, v88, v89, v90);
    WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
  }
  else
  {
    *(_DWORD *)v71 -= 2;
  }
LABEL_39:
  v91 = *(_QWORD *)(*(_QWORD *)v6 + 2776);
  v92 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v92 = 0x700000002;
  *(_QWORD *)(v92 + 8) = "WeakMap";
  *(_DWORD *)(v92 + 16) = 4;
  v185 = (WTF::StringImpl *)v92;
  v99 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v185, v93, v94, v95, v96, v97, v98);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v91, v99, 6, v100, v101, v102, v103);
  v111 = v185;
  v185 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, v104, v105, v106, v107, v108, v109, v110);
      WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
    }
    else
    {
      *(_DWORD *)v111 -= 2;
    }
  }
}

uint64_t JSC::protoFuncWeakMapDelete(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  unsigned int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  JSC::VM *v23;

  v4 = *((_QWORD *)a2 + 5);
  v23 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0 || (v5 = *(unsigned __int8 *)(v4 + 5), v5 < 0x17))
  {
    v6 = "Called WeakMap function on non-object";
    v7 = 38;
LABEL_19:
    JSC::throwTypeError((unint64_t)this, &v23, (uint64_t)v6, v7);
    return 10;
  }
  v6 = "Called WeakMap function on a non-WeakMap object";
  v7 = 48;
  if (!v4 || v5 != 71)
    goto LABEL_19;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v8 = *((_QWORD *)a2 + 6);
    if ((v8 & 0xFFFE000000000002) == 0)
    {
      v9 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = (v11 >> 31) ^ v11;
      v13 = *(_DWORD *)(v4 + 24);
      v14 = (v13 - 1) & v12;
      v15 = *(_QWORD *)(v4 + 16);
      while (1)
      {
        v16 = *(_QWORD *)(v15 + 16 * v14);
        if (!v16)
          break;
        if (v16 != -3 && v16 == v8)
        {
          v18 = (_QWORD *)(v15 + 16 * v14);
          *v18 = -3;
          v18[1] = 0;
          v19 = *(_DWORD *)(v4 + 28);
          ++*(_DWORD *)(v4 + 32);
          if (!v19)
          {
            result = 249;
            __break(0xC471u);
            return result;
          }
          v20 = v19 - 1;
          *(_DWORD *)(v4 + 28) = v19 - 1;
          v21 = 7;
          if (v13 >= 5 && 8 * v20 <= v13)
          {
            JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::rehash(v4, 0);
            return 7;
          }
          return v21;
        }
        v14 = (v14 + 1) & (v13 - 1);
      }
    }
  }
  return 6;
}

uint64_t JSC::protoFuncWeakMapGet(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unsigned int v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  JSC::VM *v17;

  v3 = *((_QWORD *)a2 + 5);
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0 || (v4 = *(unsigned __int8 *)(v3 + 5), v4 < 0x17))
  {
    v5 = "Called WeakMap function on non-object";
    v6 = 38;
LABEL_17:
    JSC::throwTypeError((unint64_t)this, &v17, (uint64_t)v5, v6);
    return 10;
  }
  v5 = "Called WeakMap function on a non-WeakMap object";
  v6 = 48;
  if (!v3 || v4 != 71)
    goto LABEL_17;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v7 = *((_QWORD *)a2 + 6);
    if ((v7 & 0xFFFE000000000002) == 0)
    {
      v8 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      LODWORD(v9) = (v10 >> 31) ^ v10;
      v11 = *(_DWORD *)(v3 + 24) - 1;
      v12 = v11 & v9;
      v13 = *(_QWORD *)(v3 + 16);
      while (1)
      {
        v14 = *(_QWORD *)(v13 + 16 * v12);
        if (!v14)
          break;
        if (v14 != -3 && v14 == v7)
          return *(_QWORD *)(v13 + 16 * v12 + 8);
        v12 = (v12 + 1) & v11;
      }
    }
  }
  return 10;
}

uint64_t JSC::protoFuncWeakMapHas(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unsigned int v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  JSC::VM *v17;

  v3 = *((_QWORD *)a2 + 5);
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0 || (v4 = *(unsigned __int8 *)(v3 + 5), v4 < 0x17))
  {
    v5 = "Called WeakMap function on non-object";
    v6 = 38;
LABEL_17:
    JSC::throwTypeError((unint64_t)this, &v17, (uint64_t)v5, v6);
    return 10;
  }
  v5 = "Called WeakMap function on a non-WeakMap object";
  v6 = 48;
  if (!v3 || v4 != 71)
    goto LABEL_17;
  if (*((_DWORD *)a2 + 8) == 1)
    return 6;
  v7 = *((_QWORD *)a2 + 6);
  if ((v7 & 0xFFFE000000000002) != 0)
    return 6;
  v8 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  LODWORD(v9) = (v10 >> 31) ^ v10;
  v11 = *(_DWORD *)(v3 + 24) - 1;
  v12 = v11 & v9;
  v13 = *(_QWORD *)(v3 + 16);
  result = 6;
  while (1)
  {
    v15 = *(_QWORD *)(v13 + 16 * v12);
    if (!v15)
      break;
    if (v15 != -3 && v15 == v7)
      return 7;
    v12 = (v12 + 1) & v11;
  }
  return result;
}

uint64_t JSC::protoFuncWeakMapSet(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  unint64_t v4;
  unsigned int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v26;
  JSC::VM *v27;
  uint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  JSC::VM *v33;
  JSC::VM *v34;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v3;
  v34 = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0 || (v5 = *(unsigned __int8 *)(v4 + 5), v5 < 0x17))
  {
    v6 = "Called WeakMap function on non-object";
    v7 = 38;
LABEL_25:
    JSC::throwTypeError((unint64_t)this, &v34, (uint64_t)v6, v7);
    return 10;
  }
  v6 = "Called WeakMap function on a non-WeakMap object";
  v7 = 48;
  if (!v4 || v5 != 71)
    goto LABEL_25;
  v9 = *((int *)a2 + 8);
  v10 = v9 - 1;
  if (v9 == 1)
    return JSC::throwTypeError((unint64_t)this, &v33, (uint64_t)"WeakMap keys must be objects or non-registered symbols", 55);
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError((unint64_t)this, &v33, (uint64_t)"WeakMap keys must be objects or non-registered symbols", 55);
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 <= 0x16 && (v12 != 4 || (*(_BYTE *)(*(_QWORD *)(v11 + 8) + 36) & 2) != 0))
    return JSC::throwTypeError((unint64_t)this, &v33, (uint64_t)"WeakMap keys must be objects or non-registered symbols", 55);
  if (v10 < 2)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 7);
  v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  LODWORD(v15) = (v16 >> 31) ^ v16;
  v17 = *(_DWORD *)(v4 + 24) - 1;
  v18 = v17 & v15;
  v19 = *(_QWORD *)(v4 + 16);
  while (1)
  {
    v20 = v18;
    v21 = *(_QWORD *)(v19 + 16 * v18);
    if (!v21)
      break;
    if (v21 != -3 && v21 == v11)
    {
      *(_QWORD *)(v19 + 16 * v20 + 8) = v13;
      if (v13
        && (v13 & 0xFFFE000000000002) == 0
        && *((_DWORD *)v3 + 190) >= *(unsigned __int8 *)(v4 + 7))
      {
        v30 = v4;
        JSC::Heap::writeBarrierSlowPath((uint64_t)v3 + 192, v4);
        v4 = v30;
      }
      goto LABEL_21;
    }
    v18 = (v20 + 1) & v17;
  }
  v23 = (_QWORD *)(v19 + 16 * v20);
  *v23 = v11;
  v24 = (uint64_t)v3 + 192;
  if (v11 && *((_DWORD *)v3 + 190) >= *(unsigned __int8 *)(v4 + 7))
  {
    v29 = (_DWORD *)((char *)v3 + 192);
    v31 = v4;
    v27 = v3;
    v28 = v13;
    v26 = (_QWORD *)(v19 + 16 * v20);
    JSC::Heap::writeBarrierSlowPath(v24, v4);
    v23 = v26;
    v3 = v27;
    v13 = v28;
    v24 = (uint64_t)v29;
    v4 = v31;
  }
  v23[1] = v13;
  if (v13 && (v13 & 0xFFFE000000000002) == 0 && *((_DWORD *)v3 + 190) >= *(unsigned __int8 *)(v4 + 7))
  {
    v32 = v4;
    JSC::Heap::writeBarrierSlowPath(v24, v4);
    v4 = v32;
  }
  ++*(_DWORD *)(v4 + 28);
LABEL_21:
  if (*(_DWORD *)(v4 + 24) <= (2 * (*(_DWORD *)(v4 + 32) + *(_DWORD *)(v4 + 28))))
    JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::rehash(v4, 0);
  return *((_QWORD *)a2 + 5);
}

JSC::Exception *JSC::callWeakRef(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"WeakRef", 8);
}

unint64_t JSC::constructWeakRef(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  JSC::Heap *v13;
  uint64_t v14;
  unint64_t SlowCase;
  int v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];
  uint64_t v24;
  JSC::VM *v25;
  JSC *v26;

  v8 = *((_QWORD *)this + 7);
  v25 = (JSC::VM *)v8;
  v26 = this;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v25, (uint64_t)"First argument to WeakRef should be an object or a non-registered symbol", 73);
  v9 = *((_QWORD *)a2 + 6);
  if ((v9 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError((unint64_t)this, &v25, (uint64_t)"First argument to WeakRef should be an object or a non-registered symbol", 73);
  v10 = *(unsigned __int8 *)(v9 + 5);
  if (v10 <= 0x16 && (v10 != 4 || (*(_BYTE *)(*(_QWORD *)(v9 + 8) + 36) & 2) != 0))
    return JSC::throwTypeError((unint64_t)this, &v25, (uint64_t)"First argument to WeakRef should be an object or a non-registered symbol", 73);
  v24 = *((_QWORD *)a2 + 5);
  if (v24 == *((_QWORD *)a2 + 3))
  {
    v11 = *((_DWORD *)this + 294);
    if (v11)
      v12 = 16 * (v11 & 0xFFFFFFFE);
    else
      v12 = 0;
  }
  else
  {
    v23[0] = v8;
    v23[1] = (uint64_t)&v26;
    v23[2] = (uint64_t)&v24;
    v12 = (unint64_t)JSC::constructWeakRef(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(v23, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  if (*(_DWORD *)(v8 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v13 = *(JSC::Heap **)(v8 + 40928);
  if (!v13)
    v13 = JSC::GCClient::Heap::weakObjectRefSpaceSlow((JSC::Heap **)(v8 + 37552));
  v14 = v8 + 192;
  SlowCase = *((_QWORD *)v13 + 3);
  if (SlowCase >= *((_QWORD *)v13 + 4))
  {
    SlowCase = *((_QWORD *)v13 + 5);
    if ((SlowCase & 1) != 0)
    {
      v19 = (uint64_t)v13;
      JSC::sanitizeStackForVM((JSC *)v8, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v19, v8 + 192, 32, 0, 0, v20, v21, v22);
      v14 = v8 + 192;
      goto LABEL_13;
    }
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v13 + 6);
    *((_QWORD *)v13 + 4) = SlowCase + HIDWORD(v18);
    *((_QWORD *)v13 + 5) = SlowCase + (int)v18;
  }
  *((_QWORD *)v13 + 3) = SlowCase + 32;
LABEL_13:
  *(_DWORD *)SlowCase = 0;
  v16 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)SlowCase = v12 >> 4;
  *(_DWORD *)(SlowCase + 4) = v16;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = *(_QWORD *)(v8 + 93432);
  *(_QWORD *)(SlowCase + 24) = v9;
  if (*(_DWORD *)(v8 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v14, SlowCase);
  if (*(_BYTE *)(v8 + 755))
    __dmb(0xAu);
  return SlowCase;
}

void JSC::WeakObjectRefPrototype::finishCreation(JSC::WeakObjectRefPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  char *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v5 = (char *)a2 + 41952;
  v6 = *((_QWORD *)a2 + 5244);
  v7 = *(WTF::StringImpl **)(v6 + 1152);
  if (!v7)
  {
    v72 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v72, 0, (uint64_t)JSC::protoFuncWeakRefDeref, 0, 0, 4u);
    goto LABEL_12;
  }
  v8 = *(_DWORD *)v7 + 2;
  *(_DWORD *)v7 = v8;
  if ((*((_BYTE *)v7 + 16) & 0x20) != 0)
  {
    v9 = *(WTF::StringImpl **)(v6 + 872);
    if (!v9)
      goto LABEL_7;
    v8 = *(_DWORD *)v9;
  }
  else
  {
    v9 = v7;
  }
  *(_DWORD *)v9 = v8 + 2;
LABEL_7:
  v72 = v9;
  v17 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v72, (uint64_t)JSC::protoFuncWeakRefDeref, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v19 = v72;
  v72 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v7, v17, 4, v14, v15, v16, v18);
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl(v7, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
LABEL_12:
  v27 = *(_QWORD *)(*(_QWORD *)v5 + 2776);
  v28 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v28 = 0x700000002;
  *(_QWORD *)(v28 + 8) = "WeakRef";
  *(_DWORD *)(v28 + 16) = 4;
  v72 = (WTF::StringImpl *)v28;
  v35 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v72, v29, v30, v31, v32, v33, v34);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v27, v35, 6, v36, v37, v38, v39);
  v47 = v72;
  v72 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
}

uint64_t JSC::protoFuncWeakRefDeref(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  JSC::VM *v9;

  v3 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  v9 = (JSC::VM *)v3;
  if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) < 0x17u)
  {
    v7 = "Called WeakRef function on non-object";
    v8 = 38;
LABEL_8:
    JSC::throwTypeError((unint64_t)this, &v9, (uint64_t)v7, v8);
    return 10;
  }
  if (&JSC::JSWeakObjectRef::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
  {
    v7 = "Called WeakRef function on a non-WeakRef object";
    v8 = 48;
    goto LABEL_8;
  }
  result = *(_QWORD *)(v4 + 24);
  if (!result)
    return 10;
  v6 = *(_QWORD *)(v3 + 93432);
  if (v6 != *(_QWORD *)(v4 + 16))
  {
    *(_QWORD *)(v4 + 16) = v6;
    if (*(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(v4 + 7))
    {
      JSC::Heap::writeBarrierSlowPath(v3 + 192, v4);
      result = *(_QWORD *)(v4 + 24);
      if (!result)
        return 10;
    }
  }
  return result;
}

void JSC::WeakSetConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x700000002;
  *(_QWORD *)(v6 + 8) = "WeakSet";
  *(_DWORD *)(v6 + 16) = 4;
  v27 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, 0, (JSC::VM *)&v27, 1, v7, v8, v9);
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v14, v15, v16, v17);
}

JSC::Exception *JSC::callWeakSet(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"WeakSet", 8);
}

unsigned int *JSC::constructWeakSet(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Structure *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  unsigned int *result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  BOOL v41;
  _BYTE *v42;
  JSC::JSGlobalObject **v43;
  JSC::VM **v44;
  unsigned int **v45;
  uint64_t v46;
  _BYTE *v47;
  BOOL v48;
  _BYTE v49[8];
  uint64_t (*v50)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *);
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  JSC::VM *v54;
  JSC::JSGlobalObject *v55;

  v9 = *((_QWORD *)this + 7);
  v54 = (JSC::VM *)v9;
  v55 = this;
  v53 = *((_QWORD *)a2 + 5);
  if (v53 == *((_QWORD *)a2 + 3))
  {
    v10 = JSC::LazyClassStructure::get((JSC *)((char *)this + 1584), (unint64_t)this);
  }
  else
  {
    v42 = (_BYTE *)v9;
    v43 = &v55;
    v44 = (JSC::VM **)&v53;
    v10 = (uint64_t)JSC::constructWeakSet(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1::operator()((uint64_t *)&v42, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v18 = (JSC::VM *)v10;
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v11, (uint64_t)v12, v13, v14, v15, v16, v17))
  {
    return 0;
  }
  result = (unsigned int *)JSC::JSWeakSet::create((JSC::JSWeakSet *)v9, v18, v12, v13, v14, v15, v16, v17);
  v52 = result;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v25 = *((_QWORD *)a2 + 6);
    if ((v25 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      v33 = JSC::JSObject::get(result, (uint64_t)v55, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 848), v20, v21, v22, v23, v24);
      v51 = v33;
      if (*(_DWORD *)(v9 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v26, v27, v28, v29, v30, v31, v32))
      {
        return 0;
      }
      JSC::getCallData(v33, (uint64_t)v49);
      if (v49[0])
      {
        v41 = v49[0] == 1 && v50 == JSC::protoFuncWeakSetAdd;
        v48 = v41;
        v42 = &v48;
        v43 = (JSC::JSGlobalObject **)&v51;
        v44 = &v54;
        v45 = &v52;
        v46 = v9;
        v47 = v49;
        JSC::forEachInIterable<JSC::constructWeakSet(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0>(v55, v25, (uint64_t)&v42, v34, v35, v36, v37, v38, v39);
        return v52;
      }
      else
      {
        return (unsigned int *)JSC::throwTypeError((unint64_t)v55, &v54, (uint64_t)"'add' property of a WeakSet should be callable.", 48);
      }
    }
  }
  return result;
}

void JSC::WaiterList::removeWithUpdate(uint64_t a1, WTF *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::ThreadSafeWeakPtrControlBlock *v19;
  uint64_t v20;
  __CFRunLoopTimer *v21;
  const void *v22;
  const void *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;

  v11 = *(_QWORD *)this;
  v10 = (_QWORD *)*((_QWORD *)this + 1);
  *v10 = *(_QWORD *)this;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v12 = (unsigned int *)((char *)this + 16);
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, (unsigned int *)this + 4);
    v15 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v15)
    {
      v16 = (unsigned int *)(v15 + 24);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)(v15 + 24));
        v20 = *(_QWORD *)(v15 + 32);
        v36 = (WTF *)v15;
        *(_QWORD *)(v15 + 32) = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        *(_QWORD *)v36 = off_1E3572150;
        v21 = (__CFRunLoopTimer *)*((_QWORD *)v36 + 2);
        if (v21
          && (CFRunLoopTimerInvalidate(v21), v22 = (const void *)*((_QWORD *)v36 + 2), *((_QWORD *)v36 + 2) = 0, v22))
        {
          CFRelease(v22);
          v23 = (const void *)*((_QWORD *)v36 + 2);
          *((_QWORD *)v36 + 2) = 0;
          if (v23)
            CFRelease(v23);
        }
        else
        {
          *((_QWORD *)v36 + 2) = 0;
        }
        v24 = *((_QWORD *)v36 + 1);
        *((_QWORD *)v36 + 1) = 0;
        if (v24)
        {
          v25 = (unsigned int *)(v24 + 8);
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            atomic_store(1u, (unsigned int *)(v24 + 8));
            WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v24);
            WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
          }
        }
        WTF::fastFree((unint64_t)v36, this, a3, a4, a5, a6, a7, a8);
      }
    }
    v19 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v19)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v19, this, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)this, this, a3, a4, a5, a6, a7, a8);
  }
  --*(_DWORD *)(a1 + 8);
}

JSC::JSObject *JSC::constructWeakMap(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[196];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 196);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

void JSC::forEachInIterable<JSC::constructWeakMap(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0>(JSC::JSGlobalObject *a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t i;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Index;
  int v28;
  int v29;
  JSC::VM *v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  _BOOL4 v67;

  v12 = *((_QWORD *)a1 + 7);
  if ((this & 0xFFFE000000000002) != 0
    || *(_BYTE *)(this + 5) != 36
    || ((v13 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8), (v13 & 0x10) != 0)
      ? (v14 = ((v13 & 0xE) + 10) >> 1)
      : (v14 = (v13 >> 1) & 7),
        (v15 = *((_DWORD *)a1 + v14 + 213)) != 0 ? (v16 = 16 * (v15 & 0xFFFFFFFE)) : (v16 = 0),
        v16 != 16 * (*(_DWORD *)this & 0xFFFFFFFE)
     || ((v17 = *((_QWORD *)a1 + 277), (v17 & 1) != 0)
       ? (v18 = (v17 >> 1) & 3)
       : (v18 = *(unsigned __int8 *)(v17 + 4)),
         v18 == 2)))
  {
    v38 = JSC::iteratorForIterable((JSC::VM **)a1, this, a3, a4, a5, a6, a7, a8, a9);
    v44 = v43;
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_53;
    v66 = *(_DWORD *)(v12 + 80);
    if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v41, v42, v34, v35, v36, v37);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_53:
      while (1)
      {
        v45 = *((_QWORD *)a1 + 7);
        v52 = JSC::iteratorNext(a1, v38, v44, 0, v34, v35, v36, v37);
        if (*(_DWORD *)(v45 + 80))
        {
          v63 = *(_DWORD *)(v45 + 80);
          if ((v63 & 0x27) != 0 && (v63 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v45 + 64), 7u, v46, v47, v48, v49, v50, v51);
          if (*(_QWORD *)(v45 + 16))
            goto LABEL_51;
        }
        v54 = JSC::iteratorComplete(a1, v52, v46, v47, v48, v49, v50, v51, v53);
        if (!*(_DWORD *)(v45 + 80))
          goto LABEL_38;
        v67 = v54;
        v64 = *(_DWORD *)(v45 + 80);
        if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v45 + 64), 7u, v46, v47, v48, v49, v50, v51);
        v54 = v67;
        if (*(_QWORD *)(v45 + 16))
LABEL_51:
          v55 = 0;
        else
LABEL_38:
          v55 = v54 ? 6 : v52;
        if (*(_QWORD *)(v12 + 16) || v55 == 6)
          break;
        v62 = JSC::iteratorValue(a1, v55, v46, v47, v48, v49, v50, v51, v53);
        if (*(_DWORD *)(v12 + 80))
        {
          v65 = *(_DWORD *)(v12 + 80);
          if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v56, v57, v58, v59, v60, v61);
          if (*(_QWORD *)(v12 + 16))
            break;
        }
        JSC::constructWeakMap(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(a3, v12, a1, v62, v58, v59, v60, v61);
        if (*(_QWORD *)(v12 + 16))
        {
LABEL_34:
          JSC::iteratorClose(a1, v38, v32, v33, v34, v35, v36, v37, v39);
          return;
        }
      }
    }
  }
  else
  {
    for (i = 0; ; ++i)
    {
      v20 = (*(_BYTE *)(this + 4) & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(this + 8) - 8) : 0;
      if (i >= v20)
        break;
      Index = JSC::JSObject::getIndex((JSC::JSObject *)this, a1, i, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v12 + 80))
      {
        v28 = *(_DWORD *)(v12 + 80);
        if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v21, v22, v23, v24, v25, v26);
        if (*(_QWORD *)(v12 + 16))
          break;
      }
      JSC::constructWeakMap(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(a3, v12, a1, Index, v23, v24, v25, v26);
      if (*(_QWORD *)(v12 + 16))
      {
        v29 = *((_DWORD *)a1 + 250);
        if (v29)
          v30 = (JSC::VM *)(16 * (v29 & 0xFFFFFFFE));
        else
          v30 = 0;
        v31 = JSC::JSArrayIterator::create(v12, v30, this, 0xFFFE000000000001, a5, a6, a7, a8);
        v38 = (uint64_t)v31;
        *(double *)v39.i64 = (double)(i + 1);
        if ((int)i + 1 < 0)
          v40 = COERCE__INT64((double)(i + 1)) + 0x2000000000000;
        else
          v40 = (i + 1) | 0xFFFE000000000000;
        *((_QWORD *)v31 + 2) = v40;
        goto LABEL_34;
      }
    }
  }
}

void JSC::constructWeakMap(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(uint64_t a1, uint64_t a2, JSC::JSGlobalObject *a3, uint64_t this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Index;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  char v59;
  _QWORD v60[3];
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  JSC::VM *v66;

  v66 = (JSC::VM *)a2;
  if ((this & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(this + 5) <= 0x16u)
  {
    JSC::throwTypeError(a3, &v66);
  }
  else
  {
    Index = JSC::JSObject::getIndex((JSC::JSObject *)this, a3, 0, this, a5, a6, a7, a8);
    if (!*(_DWORD *)(a2 + 80))
      goto LABEL_49;
    v50 = *(_DWORD *)(a2 + 80);
    if ((v50 & 0x27) != 0 && (v50 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (!*(_QWORD *)(a2 + 16))
    {
LABEL_49:
      v19 = JSC::JSObject::getIndex((JSC::JSObject *)this, a3, 1uLL, v13, v14, v15, v16, v17);
      if (!*(_DWORD *)(a2 + 80))
        goto LABEL_50;
      v51 = *(_DWORD *)(a2 + 80);
      if ((v51 & 0x27) != 0 && (v51 & 0x20) == 0)
      {
        v56 = v19;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v20, v21, v22, v23, v24, v25);
        v19 = v56;
      }
      if (!*(_QWORD *)(a2 + 16))
      {
LABEL_50:
        if (**(_BYTE **)a1)
        {
          if ((Index & 0xFFFE000000000002) != 0
            || (v26 = *(unsigned __int8 *)(Index + 5), v26 <= 0x16)
            && (v26 != 4 || (*(_BYTE *)(*(_QWORD *)(Index + 8) + 36) & 2) != 0))
          {
            JSC::throwTypeError(*(_QWORD *)(16 * (***(_DWORD ***)(a1 + 8) & 0xFFFFFFFE) + 0x28), &v66, (uint64_t)"WeakMap keys must be objects or non-registered symbols", 55);
          }
          else
          {
            v27 = **(_QWORD **)(a1 + 16);
            v28 = (Index + ~(Index << 32)) ^ ((unint64_t)(Index + ~(Index << 32)) >> 22);
            v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
            v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
            LODWORD(v29) = (v30 >> 31) ^ v30;
            v31 = *(_DWORD *)(v27 + 24) - 1;
            v32 = v31 & v29;
            v33 = *(_QWORD *)(v27 + 16);
            while (1)
            {
              v34 = v32;
              v35 = *(_QWORD *)(v33 + 16 * v32);
              if (!v35)
                break;
              if (v35 != -3 && v35 == Index)
              {
                *(_QWORD *)(v33 + 16 * v34 + 8) = v19;
                if ((v19 & 0xFFFE000000000002) == 0
                  && v19
                  && v27
                  && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(v27 + 7))
                {
                  v48 = a2 + 192;
                  v49 = v27;
                  JSC::Heap::writeBarrierSlowPath(v48, v27);
                  v27 = v49;
                }
                goto LABEL_22;
              }
              v32 = (v34 + 1) & v31;
            }
            v37 = (uint64_t *)(v33 + 16 * v34);
            *v37 = Index;
            if (Index && v27 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(v27 + 7))
            {
              v52 = v19;
              v53 = v27;
              JSC::Heap::writeBarrierSlowPath(a2 + 192, v27);
              v27 = v53;
              v19 = v52;
            }
            v37[1] = v19;
            if (v19
              && (v19 & 0xFFFE000000000002) == 0
              && v27
              && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(v27 + 7))
            {
              v54 = a2 + 192;
              v55 = v27;
              JSC::Heap::writeBarrierSlowPath(v54, v27);
              v27 = v55;
            }
            ++*(_DWORD *)(v27 + 28);
LABEL_22:
            if (*(_DWORD *)(v27 + 24) <= (2 * (*(_DWORD *)(v27 + 32) + *(_DWORD *)(v27 + 28))))
              JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::rehash(v27, 0);
          }
        }
        else
        {
          v59 = 0;
          v60[1] = &v61;
          v60[2] = 0;
          v65 = 0;
          v63 = 0u;
          v64 = 0u;
          v61 = Index;
          v62 = (unint64_t)v19;
          v60[0] = 0x800000002;
          v38 = **(_QWORD **)(a1 + 16);
          v39 = *(unsigned __int8 **)(a1 + 24);
          v40 = **(_QWORD **)(a1 + 8);
          v57 = &v61;
          v58 = 2;
          JSC::call((uint64_t *)a3, v40, v39, v38, (uint64_t)&v57, v23, v24, v25);
          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v60, v41, v42, v43, v44, v45, v46, v47);
        }
      }
    }
  }
}

JSC::JSObject *JSC::constructWeakRef(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSGlobalObject **v13;
  JSC::InternalFunction *v14;
  int v15;
  JSC::JSObject *v16;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  JSC::VM *v26;

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v26 = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v12 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v24 = v8;
    v20 = v9;
    v22 = a1;
    v19 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v9 = v20;
    v10 = *(_QWORD *)(v19 + 16);
    a1 = v22;
    v8 = v24;
  }
  JSC::throwTypeError(v20, &v26, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v12 = 0;
  a1 = v22;
  v8 = v24;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v21 = v12;
      v23 = a1;
      v25 = v8;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v12 = v21;
      a1 = v23;
      v8 = v25;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v13 = (JSC::JSGlobalObject **)a1[2];
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(_DWORD *)(v12 + 1176);
  if (v15)
    v16 = (JSC::JSObject *)(16 * (v15 & 0xFFFFFFFE));
  else
    v16 = 0;
  return JSC::InternalFunction::createSubclassStructure(v14, *v13, v16, a4, a5, a6, a7, a8);
}

JSC::JSObject *JSC::constructWeakSet(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[198];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 198);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSWeakSet::create(JSC::JSWeakSet *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t result;

  v10 = JSC::allocateCell<JSC::JSWeakSet>(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::WeakMapImpl(v10, (unint64_t)a2);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

void JSC::forEachInIterable<JSC::constructWeakSet(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0>(JSC::JSGlobalObject *a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t i;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Index;
  int v28;
  int v29;
  JSC::VM *v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  _BOOL4 v67;

  v12 = *((_QWORD *)a1 + 7);
  if ((this & 0xFFFE000000000002) != 0
    || *(_BYTE *)(this + 5) != 36
    || ((v13 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8), (v13 & 0x10) != 0)
      ? (v14 = ((v13 & 0xE) + 10) >> 1)
      : (v14 = (v13 >> 1) & 7),
        (v15 = *((_DWORD *)a1 + v14 + 213)) != 0 ? (v16 = 16 * (v15 & 0xFFFFFFFE)) : (v16 = 0),
        v16 != 16 * (*(_DWORD *)this & 0xFFFFFFFE)
     || ((v17 = *((_QWORD *)a1 + 277), (v17 & 1) != 0)
       ? (v18 = (v17 >> 1) & 3)
       : (v18 = *(unsigned __int8 *)(v17 + 4)),
         v18 == 2)))
  {
    v38 = JSC::iteratorForIterable((JSC::VM **)a1, this, a3, a4, a5, a6, a7, a8, a9);
    v44 = v43;
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_53;
    v66 = *(_DWORD *)(v12 + 80);
    if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v41, v42, v34, v35, v36, v37);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_53:
      while (1)
      {
        v45 = *((_QWORD *)a1 + 7);
        v52 = JSC::iteratorNext(a1, v38, v44, 0, v34, v35, v36, v37);
        if (*(_DWORD *)(v45 + 80))
        {
          v63 = *(_DWORD *)(v45 + 80);
          if ((v63 & 0x27) != 0 && (v63 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v45 + 64), 7u, v46, v47, v48, v49, v50, v51);
          if (*(_QWORD *)(v45 + 16))
            goto LABEL_51;
        }
        v54 = JSC::iteratorComplete(a1, v52, v46, v47, v48, v49, v50, v51, v53);
        if (!*(_DWORD *)(v45 + 80))
          goto LABEL_38;
        v67 = v54;
        v64 = *(_DWORD *)(v45 + 80);
        if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v45 + 64), 7u, v46, v47, v48, v49, v50, v51);
        v54 = v67;
        if (*(_QWORD *)(v45 + 16))
LABEL_51:
          v55 = 0;
        else
LABEL_38:
          v55 = v54 ? 6 : v52;
        if (*(_QWORD *)(v12 + 16) || v55 == 6)
          break;
        v62 = JSC::iteratorValue(a1, v55, v46, v47, v48, v49, v50, v51, v53);
        if (*(_DWORD *)(v12 + 80))
        {
          v65 = *(_DWORD *)(v12 + 80);
          if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v56, v57, v58, v59, v60, v61);
          if (*(_QWORD *)(v12 + 16))
            break;
        }
        JSC::constructWeakSet(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(a3, (uint64_t *)a1, v62, v57, v58, v59, v60, v61);
        if (*(_QWORD *)(v12 + 16))
        {
LABEL_34:
          JSC::iteratorClose(a1, v38, v32, v33, v34, v35, v36, v37, v39);
          return;
        }
      }
    }
  }
  else
  {
    for (i = 0; ; ++i)
    {
      v20 = (*(_BYTE *)(this + 4) & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(this + 8) - 8) : 0;
      if (i >= v20)
        break;
      Index = JSC::JSObject::getIndex((JSC::JSObject *)this, a1, i, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v12 + 80))
      {
        v28 = *(_DWORD *)(v12 + 80);
        if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v21, v22, v23, v24, v25, v26);
        if (*(_QWORD *)(v12 + 16))
          break;
      }
      JSC::constructWeakSet(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(a3, (uint64_t *)a1, Index, v22, v23, v24, v25, v26);
      if (*(_QWORD *)(v12 + 16))
      {
        v29 = *((_DWORD *)a1 + 250);
        if (v29)
          v30 = (JSC::VM *)(16 * (v29 & 0xFFFFFFFE));
        else
          v30 = 0;
        v31 = JSC::JSArrayIterator::create(v12, v30, this, 0xFFFE000000000001, a5, a6, a7, a8);
        v38 = (uint64_t)v31;
        *(double *)v39.i64 = (double)(i + 1);
        if ((int)i + 1 < 0)
          v40 = COERCE__INT64((double)(i + 1)) + 0x2000000000000;
        else
          v40 = (i + 1) | 0xFFFE000000000000;
        *((_QWORD *)v31 + 2) = v40;
        goto LABEL_34;
      }
    }
  }
}

unint64_t JSC::allocateCell<JSC::JSWeakSet>(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v9;
  unint64_t SlowCase;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = (JSC::Heap *)*((_QWORD *)this + 5118);
  if (!v9)
    v9 = JSC::GCClient::Heap::weakSetSpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = *((_QWORD *)v9 + 3);
  if (SlowCase >= *((_QWORD *)v9 + 4))
  {
    SlowCase = *((_QWORD *)v9 + 5);
    if ((SlowCase & 1) != 0)
    {
      v13 = (uint64_t)v9;
      JSC::sanitizeStackForVM(this, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v13, (uint64_t)this + 192, 48, 0, 0, v14, v15, v16);
      goto LABEL_5;
    }
    v12 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 4) = SlowCase + HIDWORD(v12);
    *((_QWORD *)v9 + 5) = SlowCase + (int)v12;
  }
  *((_QWORD *)v9 + 3) = SlowCase + 48;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

void JSC::constructWeakSet(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  int v33;
  char v34;
  _QWORD v35[3];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  if (**(_BYTE **)a1)
  {
    if ((a3 & 0xFFFE000000000002) != 0
      || (v8 = *(unsigned __int8 *)(a3 + 5), v8 <= 0x16)
      && (v8 != 4 || (*(_BYTE *)(*(_QWORD *)(a3 + 8) + 36) & 2) != 0))
    {
      JSC::throwTypeError(*(_QWORD *)(16 * (***(_DWORD ***)(a1 + 8) & 0xFFFFFFFE) + 0x28), *(JSC::VM ***)(a1 + 16), (uint64_t)"WeakSet values must be objects or non-registered symbols", 57);
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = **(_QWORD **)(a1 + 24);
      v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = (v13 >> 31) ^ v13;
      v15 = *(_DWORD *)(v10 + 24);
      v16 = (v15 - 1) & v14;
      v17 = *(_QWORD *)(v10 + 16);
      while (1)
      {
        v18 = *(_QWORD *)(v17 + 8 * v16);
        if (!v18)
          break;
        if (v18 != -3 && v18 == a3)
        {
          v20 = *(_DWORD *)(v10 + 28);
          goto LABEL_14;
        }
        v16 = (v16 + 1) & (v15 - 1);
      }
      *(_QWORD *)(v17 + 8 * v16) = a3;
      if (a3 && v10 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v10 + 7))
      {
        v31 = v10;
        JSC::Heap::writeBarrierSlowPath(v9 + 192, v10);
        v10 = v31;
        v15 = *(_DWORD *)(v31 + 24);
      }
      v20 = *(_DWORD *)(v10 + 28) + 1;
      *(_DWORD *)(v10 + 28) = v20;
LABEL_14:
      if (v15 <= 2 * (*(_DWORD *)(v10 + 32) + v20))
        JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::rehash(v10, 0);
    }
  }
  else
  {
    v34 = 0;
    v35[1] = &v36;
    v35[2] = 0;
    v40 = 0;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v36 = a3;
    v35[0] = 0x800000001;
    v21 = **(_QWORD **)(a1 + 8);
    v22 = *(unsigned __int8 **)(a1 + 40);
    v23 = **(_QWORD **)(a1 + 24);
    v32 = &v36;
    v33 = 1;
    JSC::call(a2, v21, v22, v23, (uint64_t)&v32, a6, a7, a8);
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v35, v24, v25, v26, v27, v28, v29, v30);
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>()
{
  JSC::WaiterListManager::singleton(void)::manager = 0;
  unk_1EE343070 = 0;
}

_QWORD *WTF::Detail::CallableWrapper<JSC::JSValue JSC::WaiterListManager::waitAsyncImpl<int>(JSC::JSGlobalObject *,JSC::VM &,int *,int,WTF::Seconds)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::ThreadSafeWeakPtrControlBlock *v18;
  uint64_t v19;
  __CFRunLoopTimer *v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;

  *a1 = &off_1E35B2F00;
  v9 = a1[3];
  a1[3] = 0;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 16);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)(v9 + 16));
      v14 = *(_QWORD *)(v9 + 48);
      *(_QWORD *)(v9 + 48) = 0;
      if (v14)
      {
        v15 = (unsigned int *)(v14 + 24);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, (unsigned int *)(v14 + 24));
          v19 = *(_QWORD *)(v14 + 32);
          v35 = (WTF *)v14;
          *(_QWORD *)(v14 + 32) = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          *(_QWORD *)v35 = off_1E3572150;
          v20 = (__CFRunLoopTimer *)*((_QWORD *)v35 + 2);
          if (v20
            && (CFRunLoopTimerInvalidate(v20), v21 = (const void *)*((_QWORD *)v35 + 2), *((_QWORD *)v35 + 2) = 0, v21))
          {
            CFRelease(v21);
            v22 = (const void *)*((_QWORD *)v35 + 2);
            *((_QWORD *)v35 + 2) = 0;
            if (v22)
              CFRelease(v22);
          }
          else
          {
            *((_QWORD *)v35 + 2) = 0;
          }
          v23 = *((_QWORD *)v35 + 1);
          *((_QWORD *)v35 + 1) = 0;
          if (v23)
          {
            v24 = (unsigned int *)(v23 + 8);
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, (unsigned int *)(v23 + 8));
              WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v23);
              WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
            }
          }
          WTF::fastFree((unint64_t)v35, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v18 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v9 + 32);
      *(_QWORD *)(v9 + 32) = 0;
      if (v18)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::JSValue JSC::WaiterListManager::waitAsyncImpl<int>(JSC::JSGlobalObject *,JSC::VM &,int *,int,WTF::Seconds)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::ThreadSafeWeakPtrControlBlock *v17;
  uint64_t v18;
  __CFRunLoopTimer *v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;

  *(_QWORD *)this = &off_1E35B2F00;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 16);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)(v9 + 16));
      v13 = *(_QWORD *)(v9 + 48);
      *(_QWORD *)(v9 + 48) = 0;
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 24);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)(v13 + 24));
          v18 = *(_QWORD *)(v13 + 32);
          v34 = (WTF *)v13;
          *(_QWORD *)(v13 + 32) = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          *(_QWORD *)v34 = off_1E3572150;
          v19 = (__CFRunLoopTimer *)*((_QWORD *)v34 + 2);
          if (v19
            && (CFRunLoopTimerInvalidate(v19), v20 = (const void *)*((_QWORD *)v34 + 2), *((_QWORD *)v34 + 2) = 0, v20))
          {
            CFRelease(v20);
            v21 = (const void *)*((_QWORD *)v34 + 2);
            *((_QWORD *)v34 + 2) = 0;
            if (v21)
              CFRelease(v21);
          }
          else
          {
            *((_QWORD *)v34 + 2) = 0;
          }
          v22 = *((_QWORD *)v34 + 1);
          *((_QWORD *)v34 + 1) = 0;
          if (v22)
          {
            v23 = (unsigned int *)(v22 + 8);
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, (unsigned int *)(v22 + 8));
              WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v22);
              WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
            }
          }
          WTF::fastFree((unint64_t)v34, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v17 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v9 + 32);
      *(_QWORD *)(v9 + 32) = 0;
      if (v17)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v17, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<JSC::JSValue JSC::WaiterListManager::waitAsyncImpl<int>(JSC::JSGlobalObject *,JSC::VM &,int *,int,WTF::Seconds)::{lambda(void)#1},void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::WaiterListManager::timeoutAsyncWaiter(*(JSC::WaiterListManager **)(a1 + 8), *(void **)(a1 + 16), (WTF **)(a1 + 24), a4, a5, a6, a7, a8);
}

_QWORD *WTF::Detail::CallableWrapper<JSC::JSValue JSC::WaiterListManager::waitAsyncImpl<long long>(JSC::JSGlobalObject *,JSC::VM &,long long *,long long,WTF::Seconds)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::ThreadSafeWeakPtrControlBlock *v18;
  uint64_t v19;
  __CFRunLoopTimer *v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;

  *a1 = &off_1E35B2F28;
  v9 = a1[3];
  a1[3] = 0;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 16);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)(v9 + 16));
      v14 = *(_QWORD *)(v9 + 48);
      *(_QWORD *)(v9 + 48) = 0;
      if (v14)
      {
        v15 = (unsigned int *)(v14 + 24);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, (unsigned int *)(v14 + 24));
          v19 = *(_QWORD *)(v14 + 32);
          v35 = (WTF *)v14;
          *(_QWORD *)(v14 + 32) = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          *(_QWORD *)v35 = off_1E3572150;
          v20 = (__CFRunLoopTimer *)*((_QWORD *)v35 + 2);
          if (v20
            && (CFRunLoopTimerInvalidate(v20), v21 = (const void *)*((_QWORD *)v35 + 2), *((_QWORD *)v35 + 2) = 0, v21))
          {
            CFRelease(v21);
            v22 = (const void *)*((_QWORD *)v35 + 2);
            *((_QWORD *)v35 + 2) = 0;
            if (v22)
              CFRelease(v22);
          }
          else
          {
            *((_QWORD *)v35 + 2) = 0;
          }
          v23 = *((_QWORD *)v35 + 1);
          *((_QWORD *)v35 + 1) = 0;
          if (v23)
          {
            v24 = (unsigned int *)(v23 + 8);
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, (unsigned int *)(v23 + 8));
              WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v23);
              WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
            }
          }
          WTF::fastFree((unint64_t)v35, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v18 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v9 + 32);
      *(_QWORD *)(v9 + 32) = 0;
      if (v18)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::JSValue JSC::WaiterListManager::waitAsyncImpl<long long>(JSC::JSGlobalObject *,JSC::VM &,long long *,long long,WTF::Seconds)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::ThreadSafeWeakPtrControlBlock *v17;
  uint64_t v18;
  __CFRunLoopTimer *v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;

  *(_QWORD *)this = &off_1E35B2F28;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 16);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)(v9 + 16));
      v13 = *(_QWORD *)(v9 + 48);
      *(_QWORD *)(v9 + 48) = 0;
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 24);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)(v13 + 24));
          v18 = *(_QWORD *)(v13 + 32);
          v34 = (WTF *)v13;
          *(_QWORD *)(v13 + 32) = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          *(_QWORD *)v34 = off_1E3572150;
          v19 = (__CFRunLoopTimer *)*((_QWORD *)v34 + 2);
          if (v19
            && (CFRunLoopTimerInvalidate(v19), v20 = (const void *)*((_QWORD *)v34 + 2), *((_QWORD *)v34 + 2) = 0, v20))
          {
            CFRelease(v20);
            v21 = (const void *)*((_QWORD *)v34 + 2);
            *((_QWORD *)v34 + 2) = 0;
            if (v21)
              CFRelease(v21);
          }
          else
          {
            *((_QWORD *)v34 + 2) = 0;
          }
          v22 = *((_QWORD *)v34 + 1);
          *((_QWORD *)v34 + 1) = 0;
          if (v22)
          {
            v23 = (unsigned int *)(v22 + 8);
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, (unsigned int *)(v22 + 8));
              WTF::RunLoop::~RunLoop((CFRunLoopSourceRef *)v22);
              WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
            }
          }
          WTF::fastFree((unint64_t)v34, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v17 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v9 + 32);
      *(_QWORD *)(v9 + 32) = 0;
      if (v17)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v17, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<JSC::JSValue JSC::WaiterListManager::waitAsyncImpl<long long>(JSC::JSGlobalObject *,JSC::VM &,long long *,long long,WTF::Seconds)::{lambda(void)#1},void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::WaiterListManager::timeoutAsyncWaiter(*(JSC::WaiterListManager **)(a1 + 8), *(void **)(a1 + 16), (WTF **)(a1 + 24), a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<JSC::WaiterListManager::notifyWaiterImpl(WTF::AbstractLocker const&,WTF::Ref<JSC::Waiter,WTF::RawPtrTraits<JSC::Waiter>,WTF::DefaultRefDerefTraits<JSC::Waiter>> &&,JSC::WaiterListManager::ResolveResult)::$_0,void,JSC::DeferredWorkTimer::TicketData *>::call(uint64_t a1, JSC::DeferredWorkTimer::TicketData *this)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;

  v3 = JSC::DeferredWorkTimer::TicketData::target(this);
  v9 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
  if ((v3 & 8) != 0)
    v9 = (uint64_t *)(v3 - 16);
  v10 = *v9;
  v11 = (unint64_t *)(v10 + 42192);
  v12 = (unint64_t *)(v10 + 42200);
  if (*(_BYTE *)(a1 + 8))
    v12 = v11;
  JSC::JSPromise::resolve(v3, *(uint64_t **)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28), *v12, v4, v5, v6, v7, v8);
}

uint64_t *WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::Ref<JSC::WaiterList,WTF::RawPtrTraits<JSC::WaiterList>,WTF::DefaultRefDerefTraits<JSC::WaiterList>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  WTF *v54;
  WTF *v55;
  uint64_t *v57;
  uint64_t *v58;
  WTF *v59;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v10 - 4);
    v13 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    v24 = v12;
    v25 = (uint64_t *)a3;
    do
    {
      v26 = (uint64_t *)(v10 + 16 * v22);
      v27 = *v26;
      if (*v26 != -1)
      {
        if (v27)
        {
          v35 = *a1;
          if (*a1)
            v36 = *(_DWORD *)(v35 - 8);
          else
            v36 = 0;
          v37 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
          v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
          v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
          v40 = v36 & ((v39 >> 31) ^ v39);
          v41 = 1;
          do
          {
            v42 = v40;
            v43 = *(_QWORD *)(v35 + 16 * v40);
            v40 = (v40 + v41++) & v36;
          }
          while (v43);
          v44 = (uint64_t *)(v35 + 16 * v42);
          v45 = v44[1];
          v44[1] = 0;
          if (v45)
          {
            do
            {
              v46 = __ldaxr((unsigned int *)v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, (unsigned int *)v45));
            if (!v47)
            {
              v57 = v25;
              atomic_store(1u, (unsigned int *)v45);
              v53 = *(WTF **)(v45 + 16);
              if (v53 != (WTF *)(v45 + 16))
              {
                do
                {
                  v59 = *(WTF **)v53;
                  JSC::WaiterList::removeWithUpdate(v45, v53, v16, v17, v18, v19, v20, v21);
                  v53 = v59;
                }
                while (v59 != (WTF *)(v45 + 16));
              }
              WTF::fastFree(v45, v53, v16, v17, v18, v19, v20, v21);
              v25 = v57;
            }
          }
          *v44 = *v26;
          v48 = v10 + 16 * v22;
          v49 = *(_QWORD *)(v48 + 8);
          *(_QWORD *)(v48 + 8) = 0;
          v44[1] = v49;
          v50 = *(_QWORD *)(v48 + 8);
          *(_QWORD *)(v48 + 8) = 0;
          if (v50)
          {
            do
            {
              v51 = __ldaxr((unsigned int *)v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, (unsigned int *)v50));
            if (!v52)
            {
              v58 = v25;
              atomic_store(1u, (unsigned int *)v50);
              v54 = *(WTF **)(v50 + 16);
              if (v54 != (WTF *)(v50 + 16))
              {
                do
                {
                  v55 = *(WTF **)v54;
                  JSC::WaiterList::removeWithUpdate(v50, v54, v16, v17, v18, v19, v20, v21);
                  v54 = v55;
                }
                while (v55 != (WTF *)(v50 + 16));
              }
              WTF::fastFree(v50, v54, v16, v17, v18, v19, v20, v21);
              v25 = v58;
            }
          }
          if (v26 == v25)
            v23 = v44;
        }
        else
        {
          v28 = v10 + 16 * v22;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr((unsigned int *)v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, (unsigned int *)v29));
            if (!v31)
            {
              v32 = v25;
              atomic_store(1u, (unsigned int *)v29);
              v33 = *(WTF **)(v29 + 16);
              if (v33 != (WTF *)(v29 + 16))
              {
                do
                {
                  v34 = *(WTF **)v33;
                  JSC::WaiterList::removeWithUpdate(v29, v33, v16, v17, v18, v19, v20, v21);
                  v33 = v34;
                }
                while (v34 != (WTF *)(v29 + 16));
              }
              WTF::fastFree(v29, v33, v16, v17, v18, v19, v20, v21);
              v25 = v32;
            }
          }
        }
      }
      ++v22;
    }
    while (v22 != v24);
  }
  else
  {
    v23 = 0;
  }
  if (v10)
    WTF::fastFree(v10 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

_QWORD *WTF::Detail::CallableWrapper<JSC::Watchdog::startTimer(WTF::Seconds)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;

  *a1 = &off_1E35B2FA0;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 64);
      *(_QWORD *)(v9 + 64) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::Watchdog::startTimer(WTF::Seconds)::$_0,void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E35B2FA0;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v12 = *(_QWORD *)(v9 + 64);
      *(_QWORD *)(v9 + 64) = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<JSC::Watchdog::startTimer(WTF::Seconds)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  int v12;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = (unsigned __int8 *)(v8 + 5);
  if (__ldaxr((unsigned __int8 *)(v8 + 5)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 5);
LABEL_5:
  v11 = *(_QWORD *)(v8 + 8);
  if (v11)
    JSC::VMTraps::fireTrap((JSC::VMTraps *)(v11 + 64), (const void *)4, a3, a4, a5, a6, a7, a8);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v9))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 5), 0, a3, a4, a5, a6, a7, a8);
}

void JSC::WeakSetPrototype::finishCreation(JSC::WeakSetPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  char *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  WTF::StringImpl *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  WTF::StringImpl *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  WTF::StringImpl *v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v6 = (char *)a2 + 41952;
  v7 = *((_QWORD *)a2 + 5244);
  v8 = *(WTF::StringImpl **)(v7 + 200);
  if (!v8)
  {
    v147 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v147, 1, (uint64_t)JSC::protoFuncWeakSetDelete, 0, 0, 4u);
    goto LABEL_12;
  }
  v9 = *(_DWORD *)v8 + 2;
  *(_DWORD *)v8 = v9;
  if ((*((_BYTE *)v8 + 16) & 0x20) != 0)
  {
    v10 = *(WTF::StringImpl **)(v7 + 872);
    if (!v10)
      goto LABEL_7;
    v9 = *(_DWORD *)v10;
  }
  else
  {
    v10 = v8;
  }
  *(_DWORD *)v10 = v9 + 2;
LABEL_7:
  v147 = v10;
  v18 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v147, (uint64_t)JSC::protoFuncWeakSetDelete, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v20 = v147;
  v147 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v8, v18, 4, v15, v16, v17, v19);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl(v8, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
LABEL_12:
  v28 = *(_QWORD *)v6;
  v29 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 1440);
  if (!v29)
  {
    v147 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v147, 1, (uint64_t)JSC::protoFuncWeakSetHas, 0, 132, 4u);
    goto LABEL_21;
  }
  v30 = *(_DWORD *)v29 + 2;
  *(_DWORD *)v29 = v30;
  if ((*((_BYTE *)v29 + 16) & 0x20) != 0)
  {
    v31 = *(WTF::StringImpl **)(v28 + 872);
    if (!v31)
      goto LABEL_16;
    v30 = *(_DWORD *)v31;
  }
  else
  {
    v31 = v29;
  }
  *(_DWORD *)v31 = v30 + 2;
LABEL_16:
  v147 = v31;
  v39 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v147, (uint64_t)JSC::protoFuncWeakSetHas, 0, 132, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v41 = v147;
  v147 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v29, v39, 4, v36, v37, v38, v40);
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::~StringImpl(v29, v42, v43, v44, v45, v46, v47, v48);
    WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
  }
  else
  {
    *(_DWORD *)v29 -= 2;
  }
LABEL_21:
  v49 = *(_QWORD *)v6;
  v50 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 848);
  if (!v50)
  {
    v147 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v147, 1, (uint64_t)JSC::protoFuncWeakSetAdd, 0, 133, 4u);
    goto LABEL_30;
  }
  v51 = *(_DWORD *)v50 + 2;
  *(_DWORD *)v50 = v51;
  if ((*((_BYTE *)v50 + 16) & 0x20) != 0)
  {
    v52 = *(WTF::StringImpl **)(v49 + 872);
    if (!v52)
      goto LABEL_25;
    v51 = *(_DWORD *)v52;
  }
  else
  {
    v52 = v50;
  }
  *(_DWORD *)v52 = v51 + 2;
LABEL_25:
  v147 = v52;
  v60 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v147, (uint64_t)JSC::protoFuncWeakSetAdd, 0, 133, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v62 = v147;
  v147 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v50, v60, 4, v57, v58, v59, v61);
  if (*(_DWORD *)v50 == 2)
  {
    WTF::StringImpl::~StringImpl(v50, v63, v64, v65, v66, v67, v68, v69);
    WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
  }
  else
  {
    *(_DWORD *)v50 -= 2;
  }
LABEL_30:
  v70 = *(_QWORD *)(*(_QWORD *)v6 + 2776);
  v71 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v71 = 0x700000002;
  *(_QWORD *)(v71 + 8) = "WeakSet";
  *(_DWORD *)(v71 + 16) = 4;
  v147 = (WTF::StringImpl *)v71;
  v78 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v147, v72, v73, v74, v75, v76, v77);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v70, v78, 6, v79, v80, v81, v82);
  v90 = v147;
  v147 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v83, v84, v85, v86, v87, v88, v89);
      WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
}

uint64_t JSC::protoFuncWeakSetDelete(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  unsigned int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  int v19;
  uint64_t result;
  JSC::VM *v21;

  v4 = *((_QWORD *)a2 + 5);
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0 || (v5 = *(unsigned __int8 *)(v4 + 5), v5 < 0x17))
  {
    v6 = "Called WeakSet function on non-object";
    v7 = 38;
LABEL_19:
    JSC::throwTypeError((unint64_t)this, &v21, (uint64_t)v6, v7);
    return 10;
  }
  v6 = "Called WeakSet function on a non-WeakSet object";
  v7 = 48;
  if (!v4 || v5 != 72)
    goto LABEL_19;
  if (*((_DWORD *)a2 + 8) == 1)
    return 6;
  v8 = *((_QWORD *)a2 + 6);
  if ((v8 & 0xFFFE000000000002) != 0)
    return 6;
  v9 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = *(_DWORD *)(v4 + 24);
  v13 = (v12 - 1) & ((v11 >> 31) ^ v11);
  v14 = *(_QWORD *)(v4 + 16);
  v15 = 6;
  while (1)
  {
    v16 = *(_QWORD *)(v14 + 8 * v13);
    if (!v16)
      break;
    if (v16 != -3 && v16 == v8)
    {
      *(_QWORD *)(v14 + 8 * v13) = -3;
      v18 = *(_DWORD *)(v4 + 28);
      ++*(_DWORD *)(v4 + 32);
      if (!v18)
      {
        result = 249;
        __break(0xC471u);
        return result;
      }
      v19 = v18 - 1;
      *(_DWORD *)(v4 + 28) = v18 - 1;
      v15 = 7;
      if (v12 >= 5 && 8 * v19 <= v12)
      {
        JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::rehash(v4, 0);
        return 7;
      }
      return v15;
    }
    v13 = (v13 + 1) & (v12 - 1);
  }
  return v15;
}

uint64_t JSC::protoFuncWeakSetHas(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unsigned int v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  JSC::VM *v17;

  v3 = *((_QWORD *)a2 + 5);
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0 || (v4 = *(unsigned __int8 *)(v3 + 5), v4 < 0x17))
  {
    v5 = "Called WeakSet function on non-object";
    v6 = 38;
LABEL_17:
    JSC::throwTypeError((unint64_t)this, &v17, (uint64_t)v5, v6);
    return 10;
  }
  v5 = "Called WeakSet function on a non-WeakSet object";
  v6 = 48;
  if (!v3 || v4 != 72)
    goto LABEL_17;
  if (*((_DWORD *)a2 + 8) == 1)
    return 6;
  v7 = *((_QWORD *)a2 + 6);
  if ((v7 & 0xFFFE000000000002) != 0)
    return 6;
  v8 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  LODWORD(v9) = (v10 >> 31) ^ v10;
  v11 = *(_DWORD *)(v3 + 24) - 1;
  v12 = v11 & v9;
  v13 = *(_QWORD *)(v3 + 16);
  result = 6;
  while (1)
  {
    v15 = *(_QWORD *)(v13 + 8 * v12);
    if (!v15)
      break;
    if (v15 != -3 && v15 == v7)
      return 7;
    v12 = (v12 + 1) & v11;
  }
  return result;
}

uint64_t JSC::protoFuncWeakSetAdd(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  unint64_t v4;
  unsigned int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v22;
  JSC::VM *v23;
  JSC::VM *v24;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v3;
  v24 = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0 || (v5 = *(unsigned __int8 *)(v4 + 5), v5 < 0x17))
  {
    v6 = "Called WeakSet function on non-object";
    v7 = 38;
LABEL_16:
    JSC::throwTypeError((unint64_t)this, &v24, (uint64_t)v6, v7);
    return 10;
  }
  v6 = "Called WeakSet function on a non-WeakSet object";
  v7 = 48;
  if (!v4 || v5 != 72)
    goto LABEL_16;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v23, (uint64_t)"WeakSet values must be objects or non-registered symbols", 57);
  v9 = *((_QWORD *)a2 + 6);
  if ((v9 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError((unint64_t)this, &v23, (uint64_t)"WeakSet values must be objects or non-registered symbols", 57);
  v10 = *(unsigned __int8 *)(v9 + 5);
  if (v10 <= 0x16 && (v10 != 4 || (*(_BYTE *)(*(_QWORD *)(v9 + 8) + 36) & 2) != 0))
    return JSC::throwTypeError((unint64_t)this, &v23, (uint64_t)"WeakSet values must be objects or non-registered symbols", 57);
  v11 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  v15 = *(_DWORD *)(v4 + 24);
  v16 = (v15 - 1) & v14;
  v17 = *(_QWORD *)(v4 + 16);
  while (1)
  {
    v18 = *(_QWORD *)(v17 + 8 * v16);
    if (!v18)
      break;
    if (v18 != -3 && v18 == v9)
    {
      v19 = *(_DWORD *)(v4 + 28);
      goto LABEL_12;
    }
    v16 = (v16 + 1) & (v15 - 1);
  }
  *(_QWORD *)(v17 + 8 * v16) = v9;
  if (v9 && *((_DWORD *)v3 + 190) >= *(unsigned __int8 *)(v4 + 7))
  {
    v22 = v4;
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3 + 192, v4);
    v4 = v22;
    v15 = *(_DWORD *)(v22 + 24);
  }
  v19 = *(_DWORD *)(v4 + 28) + 1;
  *(_DWORD *)(v4 + 28) = v19;
LABEL_12:
  if (v15 <= 2 * (*(_DWORD *)(v4 + 32) + v19))
    JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::rehash(v4, 0);
  return *((_QWORD *)a2 + 5);
}

uint64_t JSC::WideningNumberPredictionFuzzerAgent::WideningNumberPredictionFuzzerAgent(uint64_t this, JSC::VM *a2)
{
  unint64_t v2;

  LODWORD(v2) = qword_1ECF4C664;
  *(_DWORD *)(this + 8) = qword_1ECF4C664;
  if ((_DWORD)v2)
    v2 = v2;
  else
    v2 = 1;
  *(_QWORD *)(this + 16) = v2;
  *(_QWORD *)(this + 24) = ((v2 >> 26) | (v2 << 23)) ^ ((v2 ^ (v2 << 23)) >> 17);
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)this = off_1E35B35D0;
  return this;
}

void JSC::WideningNumberPredictionFuzzerAgent::getPrediction(JSC::WideningNumberPredictionFuzzerAgent *this, JSC::CodeBlock *a2, const JSC::CodeOrigin *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v12;
  void *v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  WTF *v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  int v46;
  uint64_t v47;
  WTF::PrintStream *v48;
  WTF::PrintStream *v49;
  int v50;
  WTF *v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;

  v12 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 32);
    goto LABEL_5;
  }
  if (__stxr(1u, v12))
    goto LABEL_4;
LABEL_5:
  if (!a4 || (a4 & 0xFFFFFF8CFFFFFFFFLL) != 0 || a4 == 0x7300000000)
    goto LABEL_46;
  v53 = 0;
  v54 = 0;
  {
    v47 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v47 = constinit;
    *(_OWORD *)(v47 + 16) = unk_199159048;
    *(_QWORD *)(v47 + 32) = 0x4000000000;
    JSC::NumberPredictionFuzzerAgent::bytecodeNumberTypes(void)::s_bytecodeNumberTypes = v47;
    JSC::NumberPredictionFuzzerAgent::bytecodeNumberTypes(void)::s_bytecodeNumberTypes = 1;
LABEL_12:
    v14 = (void *)WTF::fastMalloc((WTF *)0x28);
    v15 = (unint64_t)v14;
    if (JSC::NumberPredictionFuzzerAgent::bytecodeNumberTypes(void)::s_bytecodeNumberTypes)
      v16 = 40;
    else
      v16 = 0;
    memcpy(v14, (const void *)JSC::NumberPredictionFuzzerAgent::bytecodeNumberTypes(void)::s_bytecodeNumberTypes, v16);
    for (i = 0; i != 40; i += 8)
    {
      v25 = *(WTF **)(v15 + i);
      v52 = v25;
      if (((unint64_t)v25 & a4) == 0)
      {
        v26 = HIDWORD(v54);
        if (HIDWORD(v54) == (_DWORD)v54)
        {
          WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long long &>((uint64_t)&v53, (unint64_t)&v52);
        }
        else
        {
          *((_QWORD *)v53 + HIDWORD(v54)) = v25;
          HIDWORD(v54) = v26 + 1;
        }
      }
    }
    WTF::fastFree(v15, v17, v18, v19, v20, v21, v22, v23);
    goto LABEL_22;
  }
  if (JSC::NumberPredictionFuzzerAgent::bytecodeNumberTypes(void)::s_bytecodeNumberTypes == 1)
    goto LABEL_12;
LABEL_22:
  v27 = HIDWORD(v54);
  v28 = (HIDWORD(v54) + 1);
  if (v28 >= 2)
  {
    v29 = *((_QWORD *)this + 2);
    v30 = *((_QWORD *)this + 3);
    do
    {
      v31 = v29 ^ (v29 << 23);
      v29 = v30;
      v30 ^= (v30 >> 26) ^ (v31 >> 17) ^ v31;
      v32 = v30 + v29;
    }
    while (0x100000000 / v28 * v28 <= (v30 + v29));
    *((_QWORD *)this + 2) = v29;
    *((_QWORD *)this + 3) = v30;
    v33 = v32 % v28;
    if (v32 % v28)
    {
      v34 = 0;
      v35 = a4;
      do
      {
        v36 = v27;
        if (v27 >= 2)
        {
          v38 = 0x100000000uLL / v27 * v27;
          v39 = *((_QWORD *)this + 2);
          v40 = *((_QWORD *)this + 3);
          do
          {
            v41 = v39 ^ (v39 << 23);
            v39 = v40;
            v40 ^= (v40 >> 26) ^ (v41 >> 17) ^ v41;
          }
          while (v38 <= (v40 + v39));
          *((_QWORD *)this + 2) = v39;
          *((_QWORD *)this + 3) = v40;
          v37 = ((int)v40 + (int)v39) % v36;
        }
        else
        {
          v37 = 0;
        }
        if (v36 <= v37)
        {
          __break(0xC471u);
          return;
        }
        v35 |= *((_QWORD *)v53 + v37);
        memmove((char *)v53 + 8 * v37, (char *)v53 + 8 * v37 + 8, 8 * v36 - (8 * v37 + 8));
        v27 = --HIDWORD(v54);
        ++v34;
      }
      while (v34 < v33);
      if (BYTE4(qword_1ECF4C664))
      {
        JSC::CodeBlock::inferredName(a2);
        JSC::CodeBlock::hashAsStringIfPossible(a2, (uint64_t *)&v51);
        v42 = *(_QWORD *)a3;
        if ((*(_QWORD *)a3 & 2) != 0)
        {
          LODWORD(v42) = -1;
        }
        else if ((v42 & 1) != 0)
        {
          LODWORD(v42) = *(_DWORD *)((v42 & 0xFFFFFFFF8) + 8);
        }
        else
        {
          v42 >>= 36;
        }
        v50 = v42;
        v48 = (WTF::PrintStream *)v35;
        v49 = (WTF::PrintStream *)a4;
        WTF::dataLog<char [58],WTF::CString,char [2],WTF::CString,char [18],JSC::BytecodeIndex,char [13],JSC::SpeculationDump,char [14],JSC::SpeculationDump,char [2],char [2]>(&v52, &v51, (JSC::BytecodeIndex *)&v50, &v49, &v48);
        v43 = v51;
        v51 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            WTF::fastFree((unint64_t)v43, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            --*(_DWORD *)v43;
        }
        v44 = v52;
        v52 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 1)
            WTF::fastFree((unint64_t)v44, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            --*(_DWORD *)v44;
        }
      }
    }
  }
  v45 = v53;
  if (v53)
  {
    v53 = 0;
    LODWORD(v54) = 0;
    WTF::fastFree((unint64_t)v45, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_46:
  v46 = __ldxr(v12);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_50;
  }
  if (__stlxr(0, v12))
LABEL_50:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::dataLog<char [58],WTF::CString,char [2],WTF::CString,char [18],JSC::BytecodeIndex,char [13],JSC::SpeculationDump,char [14],JSC::SpeculationDump,char [2],char [2]>(_QWORD *a1, _QWORD *a2, JSC::BytecodeIndex *a3, WTF::PrintStream **a4, WTF::PrintStream **a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  const char *v13;
  const char *v14;
  char v16;
  char **v17;
  char *v18;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", "WideningNumberPredictionFuzzerAgent::getPrediction name:(");
  if (*a1)
    v13 = (const char *)(*a1 + 16);
  else
    v13 = 0;
  WTF::PrintStream::printf(v12, "%s", v13);
  WTF::PrintStream::printf(v12, "%s", "#");
  if (*a2)
    v14 = (const char *)(*a2 + 16);
  else
    v14 = 0;
  WTF::PrintStream::printf(v12, "%s", v14);
  WTF::PrintStream::printf(v12, "%s", "),bytecodeIndex:(");
  JSC::BytecodeIndex::dump(a3, v12);
  WTF::PrintStream::printf(v12, "%s", "),original:(");
  JSC::dumpSpeculation(v12, *a4);
  WTF::PrintStream::printf(v12, "%s", "),generated:(");
  JSC::dumpSpeculation(v12, *a5);
  WTF::PrintStream::printf(v12, "%s", ")");
  WTF::PrintStream::printf(v12, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

void JSC::CellList::find(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  void *v39;
  int v40;

  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    if (!*(_BYTE *)(a1 + 32))
    {
      v12 = (uint64_t *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 40);
      if (!v11
        || (*(_QWORD *)(a1 + 40) = 0,
            WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8),
            (v8 = *(_QWORD *)(a1 + 8)) != 0))
      {
        v13 = 0;
        while (1)
        {
          if (v13 >> 6 >= *(unsigned int *)(a1 + 28))
          {
            __break(0xC471u);
            return;
          }
          v14 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (v13 >> 6)) + 40 * (v13 & 0x3F));
          v15 = *v14;
          v16 = *(_QWORD *)(a1 + 40);
          if (v16
            || (WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,void *>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,void *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash((uint64_t *)(a1 + 40), 8uLL, 0, a4, a5, a6, a7, a8), (v16 = *v12) != 0))
          {
            v17 = *(_DWORD *)(v16 - 8);
          }
          else
          {
            v17 = 0;
          }
          v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = (_QWORD *)(v16 + 16 * v21);
          v23 = *v22;
          if (*v22)
          {
            v24 = 0;
            v25 = 1;
            while (v23 != v15)
            {
              if (v23 == -1)
                v24 = v22;
              v21 = (v21 + v25) & v17;
              v22 = (_QWORD *)(v16 + 16 * v21);
              v23 = *v22;
              ++v25;
              if (!*v22)
              {
                if (v24)
                {
                  *v24 = 0;
                  v24[1] = 0;
                  --*(_DWORD *)(*v12 - 16);
                  v22 = v24;
                }
                goto LABEL_18;
              }
            }
            goto LABEL_31;
          }
LABEL_18:
          *v22 = v15;
          v22[1] = v14;
          v26 = *v12;
          v27 = *v12 ? *(_DWORD *)(v26 - 12) + 1 : 1;
          *(_DWORD *)(v26 - 12) = v27;
          v28 = *v12;
          v29 = *v12 ? *(_DWORD *)(v28 - 12) : 0;
          v30 = (*(_DWORD *)(v28 - 16) + v29);
          v31 = *(unsigned int *)(v28 - 4);
          if (v31 > 0x400)
            break;
          if (3 * v31 <= 4 * v30)
          {
            if ((_DWORD)v31)
              goto LABEL_27;
            v32 = 8;
            goto LABEL_30;
          }
LABEL_31:
          if (++v13 == v8)
            goto LABEL_35;
        }
        if (v31 > 2 * v30)
          goto LABEL_31;
LABEL_27:
        v32 = ((_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31)));
LABEL_30:
        WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,void *>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,void *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash((uint64_t *)(a1 + 40), v32, (uint64_t)v22, a4, a5, a6, a7, a8);
        goto LABEL_31;
      }
LABEL_35:
      *(_BYTE *)(a1 + 32) = 1;
    }
    v33 = *(_QWORD *)(a1 + 40);
    if (v33)
    {
      v34 = *(_DWORD *)(v33 - 8);
      v35 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
      v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
      v38 = v34 & ((v37 >> 31) ^ v37);
      v39 = *(void **)(v33 + 16 * v38);
      if (v39 != a2)
      {
        v40 = 1;
        do
        {
          if (!v39)
            break;
          v38 = (v38 + v40) & v34;
          v39 = *(void **)(v33 + 16 * v38);
          ++v40;
        }
        while (v39 != a2);
      }
    }
  }
}

void WTF::SegmentedVector<JSC::CellProfile,64ul>::clear(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v9 = *a1;
  if (!*a1)
  {
LABEL_7:
    if (*((_DWORD *)a1 + 5))
    {
      v13 = 0;
      do
      {
        WTF::fastFree(*(_QWORD *)(a1[1] + 8 * v13++), a2, a3, a4, a5, a6, a7, a8);
        v14 = *((unsigned int *)a1 + 5);
      }
      while (v13 < v14);
      if (!*((_DWORD *)a1 + 4))
        goto LABEL_16;
      if ((_DWORD)v14)
        *((_DWORD *)a1 + 5) = 0;
    }
    else if (!*((_DWORD *)a1 + 4))
    {
LABEL_16:
      *a1 = 0;
      return;
    }
    v15 = a1[1];
    if (v15)
    {
      a1[1] = 0;
      *((_DWORD *)a1 + 4) = 0;
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_16;
  }
  v10 = 0;
  while (v10 >> 6 < *((unsigned int *)a1 + 5))
  {
    v11 = *(_QWORD *)(a1[1] + 8 * (v10 >> 6)) + 40 * (v10 & 0x3F);
    v12 = *(_QWORD *)(v11 + 32);
    *(_QWORD *)(v11 + 32) = 0;
    if (v12)
    {
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      v9 = *a1;
    }
    if (++v10 >= v9)
      goto LABEL_7;
  }
  __break(0xC471u);
}

double *JSC::CompilerTimingScope::CompilerTimingScope(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  char **v11;
  char *v12;

  *(_QWORD *)a1 = a2;
  *((_QWORD *)a1 + 1) = a3;
  *((_QWORD *)a1 + 2) = a4;
  *((_QWORD *)a1 + 3) = a5;
  a1[4] = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v7 = mach_absolute_time();
    v9 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v9 != -1)
    {
      v12 = &v10;
      v11 = &v12;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v8) = dword_1ECF4400C;
    a1[4] = (double)(v7 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v8 * 1000000000.0);
  }
  return a1;
}

void JSC::CompilerTimingScope::~CompilerTimingScope(JSC::CompilerTimingScope *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t i;
  const char *v15;
  const char *v16;
  unsigned __int8 *v17;
  int v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  double v29;
  int v30;
  unint64_t v31;
  void *v32;
  unint64_t v34;
  double v35;
  __int128 v36;
  __int128 v37;
  char v38;
  double v39;

  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v8 = mach_absolute_time();
    v10 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v10 != -1)
    {
      *(_QWORD *)&v36 = &v38;
      v39 = COERCE_DOUBLE(&v36);
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v39, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    v11 = (double)(v8 * WTF::machTimebaseInfo(void)::timebaseInfo);
    LODWORD(v9) = dword_1ECF4400C;
    v12 = (double)v9 * 1000000000.0;
    v13 = *((double *)this + 4);
    {
      v31 = WTF::fastMalloc((WTF *)0x18);
      i = v31;
      *(_QWORD *)v31 = 0;
      *(_QWORD *)(v31 + 8) = 0;
      *(_BYTE *)(v31 + 16) = 0;
      {
        __clrex();
      }
      {
        break;
      }
      v34 = *(_QWORD *)v31;
      if (*(_QWORD *)i)
      {
        *(_QWORD *)i = 0;
        *(_DWORD *)(i + 8) = 0;
        WTF::fastFree(v34, v32, v2, v3, v4, v5, v6, v7);
      }
      WTF::fastFree(i, v32, v2, v3, v4, v5, v6, v7);
    }
    v15 = *(const char **)this;
    v16 = (const char *)*((_QWORD *)this + 2);
    v17 = (unsigned __int8 *)(i + 16);
    v18 = __ldaxr((unsigned __int8 *)(i + 16));
    v19 = v11 / v12;
    if (v18)
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
LABEL_9:
      v20 = v19 - v13;
      v21 = *(_QWORD *)i;
      v22 = *(unsigned int *)(i + 12);
      if ((_DWORD)v22)
      {
        v23 = (double *)(v21 + 24);
        v24 = 32 * v22;
        while (strcmp(*((const char **)v23 - 3), v15) || strcmp(*((const char **)v23 - 2), v16))
        {
          v23 += 4;
          v24 -= 32;
          if (!v24)
            goto LABEL_14;
        }
        v29 = v20 + *(v23 - 1);
        v35 = *v23;
        if (*v23 < v20)
          v35 = v20;
        *(v23 - 1) = v29;
        *v23 = v35;
      }
      else
      {
LABEL_14:
        *(_QWORD *)&v36 = v15;
        *((_QWORD *)&v36 + 1) = v16;
        *(double *)&v37 = v20;
        *((double *)&v37 + 1) = v20;
        if ((_DWORD)v22 == *(_DWORD *)(i + 8))
        {
          v25 = (__int128 *)WTF::Vector<WTF::Dominators<JSC::B3::CFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(i, v22 + 1, (unint64_t)&v36);
          v26 = (_OWORD *)(*(_QWORD *)i + 32 * *(unsigned int *)(i + 12));
          v27 = *v25;
          v28 = v25[1];
        }
        else
        {
          v27 = v36;
          v28 = v37;
          v26 = (_OWORD *)(v21 + 32 * v22);
        }
        *v26 = v27;
        v26[1] = v28;
        ++*(_DWORD *)(i + 12);
        v29 = v20;
      }
      v30 = __ldxr(v17);
      if (v30 == 1)
      {
        if (!__stlxr(0, v17))
        {
LABEL_23:
          if (byte_1ECF4C67A)
          {
            *(double *)&v36 = v20 * 1000.0;
            v39 = v29 * 1000.0;
            WTF::dataLog<char [2],WTF::ASCIILiteral,char [3],WTF::ASCIILiteral,char [8],double,char [5],char [9],double,char [7]>((uint64_t)this, (uint64_t)this + 16, (double *)&v36, &v39);
          }
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(i + 16), 0, v2, v3, v4, v5, v6, v7);
      goto LABEL_23;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(i + 16);
    goto LABEL_9;
  }
}

uint64_t WTF::dataLog<char [2],WTF::ASCIILiteral,char [3],WTF::ASCIILiteral,char [8],double,char [5],char [9],double,char [7]>(uint64_t a1, uint64_t a2, double *a3, double *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  WTF::PrintStream *v19;
  float v20;
  unsigned int v21;
  uint64_t v22;
  char v24;
  char **v25;
  char *v26;
  int v27;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", "[");
  v11 = *(char **)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
  if (v11)
  {
    v15 = v12 - 1;
    if (!v12)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(v11, v15, (uint64_t)&v26, v14);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v26 = (char *)v16;
    v27 = 0;
  }
  WTF::printExpectedCStringHelper(v13, "StringView", &v26);
  if (v27 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v27])(&v25, &v26);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  WTF::PrintStream::printf(v10, "%s", "] ");
  v17 = *(char **)a2;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
  if (v17)
  {
    v21 = v18 - 1;
    if (!v18)
      v21 = 0;
    WTF::StringImpl::utf8ForCharacters(v17, v21, (uint64_t)&v26, v20);
  }
  else
  {
    v22 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 8) = 0;
    *(_BYTE *)(v22 + 16) = 0;
    v26 = (char *)v22;
    v27 = 0;
  }
  WTF::printExpectedCStringHelper(v19, "StringView", &v26);
  if (v27 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v27])(&v25, &v26);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  WTF::PrintStream::printf(v10, "%s", " took: ");
  WTF::PrintStream::printf(v10, "%lf", *a3);
  WTF::PrintStream::printf(v10, "%s", " ms ");
  WTF::PrintStream::printf(v10, "%s", "(total: ");
  WTF::PrintStream::printf(v10, "%lf", *a4);
  WTF::PrintStream::printf(v10, "%s", " ms).\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

void JSC::logTotalPhaseTimes(JSC *this)
{
  unint64_t i;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16[2];
  double v17[2];

  {
    v2 = WTF::fastMalloc((WTF *)0x18);
    i = v2;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_BYTE *)(v2 + 16) = 0;
    {
      __clrex();
    }
    {
      break;
    }
    v11 = *(_QWORD *)v2;
    if (*(_QWORD *)i)
    {
      *(_QWORD *)i = 0;
      *(_DWORD *)(i + 8) = 0;
      WTF::fastFree(v11, v3, v4, v5, v6, v7, v8, v9);
    }
    WTF::fastFree(i, v3, v4, v5, v6, v7, v8, v9);
  }
  v12 = *(unsigned int *)(i + 12);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)i;
    v14 = 32 * v12;
    do
    {
      v15 = *(double *)(v13 + 24);
      v17[0] = *(double *)(v13 + 16) * 1000.0;
      *(_QWORD *)&v17[1] = 0x300000008;
      v16[0] = v15 * 1000.0;
      *(_QWORD *)&v16[1] = 0x300000007;
      WTF::dataLog<char [11],WTF::FixedWidthDouble,char [10],WTF::FixedWidthDouble,char [3],char const*,char [3],char const*,char [2]>((uint64_t)v17, (uint64_t)v16, (const char **)v13, (const char **)(v13 + 8));
      v13 += 32;
      v14 -= 32;
    }
    while (v14);
  }
}

JSC::FunctionAllowlist *JSC::FunctionAllowlist::FunctionAllowlist(JSC::FunctionAllowlist *this, const char *__filename)
{
  FILE *v5;
  FILE *v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  const char *v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  const char *v57;
  uint64_t v58;
  WTF::StringImpl *v59[3];
  WTF::StringImpl *v60;
  char v61[8];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  if (!__filename)
    return this;
  v5 = fopen(__filename, "r");
  if (v5)
  {
    v6 = v5;
    *((_BYTE *)this + 8) = 1;
    v7 = fgets(v61, 1024, v5);
    if (v7)
    {
      v8 = v7;
      do
      {
        if (strncmp(v8, "//", 2uLL))
        {
          v9 = strlen(v8);
          v10 = v9;
          if (v8[v9 - 1] == 10)
          {
            v8[v9 - 1] = 0;
            v10 = v9 - 1;
          }
          if (v10)
          {
            WTF::String::String((uint64_t *)&v60, v8, v10);
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t)v59, (uint64_t *)this, &v60, v11, v12, v13, v14, v15);
            v23 = v60;
            v60 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
              {
                WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
                WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
              }
              else
              {
                *(_DWORD *)v23 -= 2;
              }
            }
          }
        }
        v8 = fgets(v61, 1024, v6);
      }
      while (v8);
    }
    if (fclose(v6))
    {
      v32 = __error();
      WTF::safeStrerror((WTF *)*v32, (uint64_t *)v59);
      v34 = v59[0] ? (char *)v59[0] + 16 : 0;
      WTF::dataLogF((WTF *)"Failed to close file %s: %s\n", v33, __filename, v34);
      v42 = v59[0];
      v59[0] = 0;
      if (v42)
        goto LABEL_21;
    }
  }
  else
  {
    if (*__error() == 2)
    {
      *((_BYTE *)this + 8) = 1;
      WTF::String::String((size_t)v59, __filename);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t)v61, (uint64_t *)this, v59, v44, v45, v46, v47, v48);
      v42 = v59[0];
      v59[0] = 0;
      if (!v42)
        return this;
      v43 = *(_DWORD *)v42 - 2;
      if (*(_DWORD *)v42 != 2)
        goto LABEL_22;
      WTF::StringImpl::~StringImpl(v42, v49, v50, v51, v52, v53, v54, v55);
      goto LABEL_27;
    }
    v56 = __error();
    WTF::safeStrerror((WTF *)*v56, (uint64_t *)v61);
    if (*(_QWORD *)v61)
      v58 = *(_QWORD *)v61 + 16;
    else
      v58 = 0;
    WTF::dataLogF((WTF *)"Failed to open file %s. Did you add the file-read-data entitlement to WebProcess.sb? Error code: %s\n", v57, __filename, v58);
    v42 = *(WTF::StringImpl **)v61;
    *(_QWORD *)v61 = 0;
    if (v42)
    {
LABEL_21:
      v43 = *(_DWORD *)v42 - 1;
      if (*(_DWORD *)v42 != 1)
      {
LABEL_22:
        *(_DWORD *)v42 = v43;
        return this;
      }
LABEL_27:
      WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  return this;
}

uint64_t JSC::FunctionAllowlist::contains(JSC::FunctionAllowlist *this, JSC::CodeBlock *a2)
{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int i;
  int v19;
  WTF *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int j;
  int v39;
  WTF *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  BOOL v45;
  int v46;
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  _WORD *v56;
  unsigned __int128 *v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int k;
  int v63;
  WTF *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  char *v67;
  char *v68;
  unsigned __int128 *v69;
  unsigned __int128 *v70;
  __int128 v71;
  int8x16_t v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  char *v76;
  char *v77;
  __int16 v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  char *v120;
  int8x16_t v121;
  __int128 v122;
  __int128 v123;
  char *v124;
  char *v125;
  char *v126;
  __int16 v127;
  _BYTE *v128;
  uint64_t v129;
  unsigned __int128 *v130;
  unsigned __int128 *v131;
  unsigned __int128 v132;
  unsigned __int128 *v133;
  unsigned __int128 *v134;
  unsigned __int128 v135;
  char v136;
  char v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  int8x16x2_t v141;
  int8x16x2_t v142;
  int8x16x2_t v143;
  int8x16x2_t v144;
  int8x16x2_t v145;
  int8x16x2_t v146;

  if (!*((_BYTE *)this + 8))
    return 1;
  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this - 12))
    return 0;
  JSC::CodeBlock::inferredName(a2);
  if (v140)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v140 + 16, *((_QWORD *)v140 + 1), (uint64_t *)&v139);
    v13 = v140;
    v140 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree((unint64_t)v13, v7, v6, v8, v9, v10, v11, v12);
      else
        --*(_DWORD *)v13;
    }
  }
  else
  {
    v139 = 0;
  }
  v14 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = *((_DWORD *)v139 + 4);
    if (v16 < 0x100)
      v17 = WTF::StringImpl::hashSlowCase(v139);
    else
      v17 = v16 >> 8;
    for (i = 0; ; v17 = i + v19)
    {
      v19 = v17 & v15;
      v20 = *(WTF **)(v14 + 8 * (v17 & v15));
      if (!v20)
        goto LABEL_18;
      if (v20 != (WTF *)-1 && WTF::equal(v20, v139, (const WTF::StringImpl *)v6))
        break;
      ++i;
    }
    v3 = 1;
    goto LABEL_83;
  }
LABEL_18:
  JSC::CodeBlock::hashAsStringIfPossible(a2, (uint64_t *)&v140);
  if (v140)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v140 + 16, *((_QWORD *)v140 + 1), (uint64_t *)&v138);
    v33 = v140;
    v140 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree((unint64_t)v33, v27, v6, v28, v29, v30, v31, v32);
      else
        --*(_DWORD *)v33;
    }
  }
  else
  {
    v138 = 0;
  }
  v34 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v35 = *(_DWORD *)(v34 - 8);
    v36 = *((_DWORD *)v138 + 4);
    if (v36 < 0x100)
      v37 = WTF::StringImpl::hashSlowCase(v138);
    else
      v37 = v36 >> 8;
    for (j = 0; ; v37 = j + v39)
    {
      v39 = v37 & v35;
      v40 = *(WTF **)(v34 + 8 * (v37 & v35));
      if (!v40)
        goto LABEL_30;
      if (v40 != (WTF *)-1 && WTF::equal(v40, v138, (const WTF::StringImpl *)v6))
        break;
      ++j;
    }
    v3 = 1;
    goto LABEL_80;
  }
LABEL_30:
  v41 = v139;
  if (v139)
    *(_DWORD *)v139 += 2;
  v42 = v138;
  if (v138)
    *(_DWORD *)v138 += 2;
  if (v41)
    v43 = *((_DWORD *)v41 + 1);
  else
    v43 = 0;
  if (v42)
  {
    v44 = *((_DWORD *)v42 + 1);
    if (v44 < 0)
      goto LABEL_141;
  }
  else
  {
    v44 = 0;
  }
  v45 = __OFADD__(v44, 1);
  v46 = v44 + 1;
  v47 = v45;
  if (v43 < 0 || (v47 & 1) != 0 || (v48 = (v43 + v46), __OFADD__(v43, v46)))
  {
LABEL_141:
    __break(0xC471u);
    JUMPOUT(0x198C4556CLL);
  }
  if (!v41)
  {
    if (!v42)
    {
      v50 = 0;
      v51 = 0;
      goto LABEL_120;
    }
    goto LABEL_47;
  }
  v49 = *((_DWORD *)v41 + 4);
  if (v42 && (v49 & 4) != 0)
  {
LABEL_47:
    LOBYTE(v49) = *((_BYTE *)v42 + 16);
    v50 = (uint64_t)v41;
    goto LABEL_48;
  }
  v50 = 1;
LABEL_48:
  v51 = v42;
  if ((v49 & 4) != 0)
  {
LABEL_120:
    if ((v48 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v48 + 20), &v140);
      v52 = v140;
      if (v140)
      {
        v128 = (char *)v140 + 20;
        *(_DWORD *)v140 = 2;
        *((_DWORD *)v52 + 1) = v48;
        *((_QWORD *)v52 + 1) = (char *)v52 + 20;
        *((_DWORD *)v52 + 4) = 4;
        if (v50)
        {
          v21 = (_OWORD *)*((_QWORD *)v41 + 1);
          v6 = *((unsigned int *)v41 + 1);
          if ((*((_BYTE *)v41 + 16) & 4) != 0)
          {
            if ((_DWORD)v6 == 1)
            {
              *v128 = *(_BYTE *)v21;
            }
            else if ((_DWORD)v6)
            {
              memcpy((char *)v52 + 20, v21, v6);
            }
          }
          else
          {
            if (v6 < 0x10)
            {
              v130 = (unsigned __int128 *)((char *)v52 + 20);
            }
            else
            {
              v130 = (unsigned __int128 *)&v128[v6 & 0xFFFFFFF0];
              v131 = (unsigned __int128 *)((char *)v52 + 20);
              do
              {
                v132 = (unsigned __int128)vld2q_s8((const char *)v21);
                v21 += 2;
                *v131++ = v132;
              }
              while (v131 != v130);
            }
            while (v130 != (unsigned __int128 *)&v128[v6])
            {
              v137 = *(_BYTE *)v21;
              v21 = (_OWORD *)((char *)v21 + 2);
              *(_BYTE *)v130 = v137;
              v130 = (unsigned __int128 *)((char *)v130 + 1);
            }
          }
          v129 = *((unsigned int *)v41 + 1);
        }
        else
        {
          v129 = 0;
        }
        v128[v129] = 35;
        v57 = (unsigned __int128 *)&v128[v129 + 1];
        if (!v51)
          goto LABEL_63;
        v21 = (_OWORD *)*((_QWORD *)v42 + 1);
        v6 = *((unsigned int *)v42 + 1);
        if ((*((_BYTE *)v42 + 16) & 4) == 0)
        {
          v133 = (unsigned __int128 *)((char *)v57 + v6);
          if (v6 >= 0x10)
          {
            v134 = (unsigned __int128 *)((char *)v57 + (v6 & 0xFFFFFFF0));
            do
            {
              v135 = (unsigned __int128)vld2q_s8((const char *)v21);
              v21 += 2;
              *v57++ = v135;
            }
            while (v57 != v134);
            v57 = v134;
          }
          while (v57 != v133)
          {
            v136 = *(_BYTE *)v21;
            v21 = (_OWORD *)((char *)v21 + 2);
            *(_BYTE *)v57 = v136;
            v57 = (unsigned __int128 *)((char *)v57 + 1);
          }
          goto LABEL_63;
        }
        if ((_DWORD)v6 == 1)
        {
          *(_BYTE *)v57 = *(_BYTE *)v21;
          goto LABEL_63;
        }
        if (!(_DWORD)v6)
          goto LABEL_63;
        goto LABEL_62;
      }
    }
    goto LABEL_141;
  }
  if (v48 > 0x7FFFFFEF)
    goto LABEL_141;
  WTF::tryFastCompactMalloc((WTF *)(2 * v48 + 20), &v140);
  v52 = v140;
  if (!v140)
    goto LABEL_141;
  v53 = (_WORD *)((char *)v140 + 20);
  *(_DWORD *)v140 = 2;
  *((_DWORD *)v52 + 1) = v48;
  *((_QWORD *)v52 + 1) = (char *)v52 + 20;
  *((_DWORD *)v52 + 4) = 0;
  if (v50)
  {
    v21 = (_OWORD *)*((_QWORD *)v41 + 1);
    v54 = *((unsigned int *)v41 + 1);
    if ((*((_BYTE *)v41 + 16) & 4) != 0)
    {
      v67 = (char *)&v53[v54];
      if (v54 >= 0x40)
      {
        v68 = (char *)&v53[v54 & 0xFFFFFFC0];
        v119 = 0uLL;
        v120 = (char *)v52 + 20;
        do
        {
          v142.val[0] = (int8x16_t)*v21;
          v121 = *((int8x16_t *)v21 + 1);
          v144.val[0] = (int8x16_t)v21[2];
          v122 = v21[3];
          v21 += 4;
          v123 = v122;
          v144.val[1] = 0uLL;
          v146.val[0] = v121;
          v142.val[1] = 0uLL;
          v124 = v120;
          vst2q_s8(v124, v142);
          v124 += 32;
          v146.val[1] = 0uLL;
          vst2q_s8(v124, v146);
          v125 = v120 + 64;
          vst2q_s8(v125, v144);
          v126 = v120 + 96;
          vst2q_s8(v126, *(int8x16x2_t *)(&v119 - 1));
          v120 += 128;
        }
        while (v120 != v68);
      }
      else
      {
        v68 = (char *)v52 + 20;
      }
      while (v68 != v67)
      {
        v127 = *(unsigned __int8 *)v21;
        v21 = (_OWORD *)((char *)v21 + 1);
        *(_WORD *)v68 = v127;
        v68 += 2;
      }
    }
    else if ((_DWORD)v54 == 1)
    {
      *v53 = *(_WORD *)v21;
    }
    else if ((_DWORD)v54)
    {
      memcpy((char *)v52 + 20, v21, 2 * v54);
    }
    v55 = *((unsigned int *)v41 + 1);
  }
  else
  {
    v55 = 0;
  }
  v56 = &v53[v55];
  *v56 = 35;
  v57 = (unsigned __int128 *)(v56 + 1);
  if (!v42)
    goto LABEL_63;
  v21 = (_OWORD *)*((_QWORD *)v42 + 1);
  v58 = *((unsigned int *)v42 + 1);
  if ((*((_BYTE *)v42 + 16) & 4) != 0)
  {
    v69 = (unsigned __int128 *)((char *)v57 + 2 * v58);
    if (v58 >= 0x40)
    {
      v70 = (unsigned __int128 *)((char *)v57 + 2 * (v58 & 0xFFFFFFC0));
      v71 = 0uLL;
      do
      {
        v141.val[0] = (int8x16_t)*v21;
        v72 = *((int8x16_t *)v21 + 1);
        v143.val[0] = (int8x16_t)v21[2];
        v73 = v21[3];
        v21 += 4;
        v74 = v73;
        v143.val[1] = 0uLL;
        v145.val[0] = v72;
        v141.val[1] = 0uLL;
        v75 = (char *)v57;
        vst2q_s8(v75, v141);
        v75 += 32;
        v145.val[1] = 0uLL;
        vst2q_s8(v75, v145);
        v76 = (char *)(v57 + 4);
        vst2q_s8(v76, v143);
        v77 = (char *)(v57 + 6);
        vst2q_s8(v77, *(int8x16x2_t *)(&v71 - 1));
        v57 += 8;
      }
      while (v57 != v70);
      v57 = v70;
    }
    while (v57 != v69)
    {
      v78 = *(unsigned __int8 *)v21;
      v21 = (_OWORD *)((char *)v21 + 1);
      *(_WORD *)v57 = v78;
      v57 = (unsigned __int128 *)((char *)v57 + 2);
    }
    goto LABEL_63;
  }
  if ((_DWORD)v58 == 1)
  {
    *(_WORD *)v57 = *(_WORD *)v21;
    goto LABEL_63;
  }
  if ((_DWORD)v58)
  {
    v6 = 2 * v58;
LABEL_62:
    memcpy(v57, v21, v6);
  }
LABEL_63:
  v3 = *(_QWORD *)this;
  if (v3)
  {
    v59 = *(_DWORD *)(v3 - 8);
    v60 = *((_DWORD *)v52 + 4);
    if (v60 < 0x100)
      v61 = WTF::StringImpl::hashSlowCase(v52);
    else
      v61 = v60 >> 8;
    for (k = 0; ; v61 = k + v63)
    {
      v63 = v61 & v59;
      v64 = *(WTF **)(v3 + 8 * (v61 & v59));
      if (!v64)
      {
        v3 = 0;
        goto LABEL_72;
      }
      if (v64 != (WTF *)-1 && WTF::equal(v64, v52, (const WTF::StringImpl *)v6))
        break;
      ++k;
    }
    v3 = 1;
  }
LABEL_72:
  if (*(_DWORD *)v52 == 2)
  {
    WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)v21, v6, v22, v23, v24, v25, v26);
    WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
  }
  else
  {
    *(_DWORD *)v52 -= 2;
  }
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, (WTF::AtomStringImpl *)v21, v6, v22, v23, v24, v25, v26);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, (WTF::AtomStringImpl *)v21, v6, v22, v23, v24, v25, v26);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
LABEL_80:
  v65 = v138;
  v138 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, (WTF::AtomStringImpl *)v21, v6, v22, v23, v24, v25, v26);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
LABEL_83:
  v66 = v139;
  v139 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, (WTF::AtomStringImpl *)v21, v6, v22, v23, v24, v25, v26);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  return v3;
}

WTF *WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int i;
  int v9;
  WTF *result;

  v3 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 < 0x100)
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v7 = v6 >> 8;
  for (i = 0; ; v7 = i + v9)
  {
    v9 = v7 & v5;
    result = *(WTF **)(v3 + 8 * (v7 & v5));
    if (!result)
      break;
    if (result != (WTF *)-1 && WTF::equal(result, *a2, a3))
      return (WTF *)1;
    ++i;
  }
  return result;
}

uint64_t JSC::FunctionAllowlist::containsWasmFunction(JSC::FunctionAllowlist *this, WTF::String *a2)
{
  const WTF::StringImpl *v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  WTF::StringImpl *v22;

  if (!*((_BYTE *)this + 8))
    return 1;
  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this - 12))
    return 0;
  WTF::String::number((unint64_t)a2, (uint64_t *)&v22);
  v21 = WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains((uint64_t *)this, &v22, v3);
  v11 = v22;
  v22 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  return v21;
}

void JSC::FunctionOverrides::parseOverridesInFile(JSC::FunctionOverrides *this, const char *a2)
{
  FILE *v2;
  FILE *v3;
  char *v4;
  char *v5;
  int v6;
  char *v8;
  WTF::AtomStringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  WTF **v21;
  int i;
  unsigned int v23;
  WTF **v24;
  WTF *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  char *v59;
  const char *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  const char *v71;
  char v72[1024];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v71 = (const char *)this;
  if (!byte_1ECF4C1E0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C45B18);
  }
  if (this)
  {
    v2 = fopen((const char *)this, "r");
    if (!v2)
    {
      WTF::dataLog<char [19],char [9],char [3]>();
      WTF::dataLog<char [21],char const*,char [64]>(&v71);
      WTF::exitProcess((WTF *)1);
    }
    v3 = v2;
    v4 = fgets(v72, 1024, v2);
    if (!v4)
      goto LABEL_59;
    v5 = v4;
    while (1)
    {
      if (!strncmp(v5, "//", 2uLL))
        goto LABEL_52;
      v6 = *v5;
      if (v6 == 10 || v6 == 0)
        goto LABEL_52;
      JSC::parseClause((JSC *)&v70, "override", 8, v3, v5, v72);
      v8 = fgets(v72, 1024, v3);
      JSC::parseClause((JSC *)&v69, "with", 4, v3, v8, v72);
      v16 = qword_1ECF58FC8;
      if (qword_1ECF58FC8
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(8u, 0, (uint64_t)v10, v11, v12, v13, v14, v15), (v16 = qword_1ECF58FC8) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = v70;
      v19 = *((_DWORD *)v70 + 4);
      if (v19 < 0x100)
        v20 = WTF::StringImpl::hashSlowCase(v70);
      else
        v20 = v19 >> 8;
      v21 = 0;
      for (i = 1; ; ++i)
      {
        v23 = v20 & v17;
        v24 = (WTF **)(v16 + 16 * (v20 & v17));
        v25 = *v24;
        if (*v24 == (WTF *)-1)
        {
          v21 = (WTF **)(v16 + 16 * v23);
          goto LABEL_22;
        }
        if (!v25)
          break;
        if (WTF::equal(v25, v18, v10))
        {
          v28 = v69;
          goto LABEL_46;
        }
LABEL_22:
        v20 = i + v23;
      }
      if (v21)
      {
        *v21 = 0;
        v21[1] = 0;
        --*(_DWORD *)(qword_1ECF58FC8 - 16);
        v24 = v21;
      }
      if (v18)
        *(_DWORD *)v18 += 2;
      *v24 = v18;
      v28 = v69;
      if (v69)
        *(_DWORD *)v69 += 2;
      v26 = v24[1];
      v24[1] = v28;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::~StringImpl(v26, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
        }
        else
        {
          *(_DWORD *)v26 -= 2;
        }
      }
      if (qword_1ECF58FC8)
        v27 = *(_DWORD *)(qword_1ECF58FC8 - 12) + 1;
      else
        v27 = 1;
      *(_DWORD *)(qword_1ECF58FC8 - 12) = v27;
      if (qword_1ECF58FC8)
        v29 = *(_DWORD *)(qword_1ECF58FC8 - 12);
      else
        v29 = 0;
      v30 = (*(_DWORD *)(qword_1ECF58FC8 - 16) + v29);
      v31 = *(unsigned int *)(qword_1ECF58FC8 - 4);
      if (v31 > 0x400)
      {
        if (v31 <= 2 * v30)
        {
LABEL_41:
          v32 = (_DWORD)v31 << (6 * *(_DWORD *)(qword_1ECF58FC8 - 12) >= (2 * v31));
          goto LABEL_45;
        }
      }
      else if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_41;
        v32 = 8;
LABEL_45:
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v32, (unint64_t)v24, (uint64_t)v10, v11, v12, v13, v14, v15);
      }
LABEL_46:
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
        {
          WTF::StringImpl::~StringImpl(v70, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
        }
        else
        {
          *(_DWORD *)v70 -= 2;
        }
      }
LABEL_52:
      v5 = fgets(v72, 1024, v3);
      if (!v5)
      {
LABEL_59:
        if (fclose(v3))
        {
          v57 = *__error();
          v58 = WTF::fastMalloc((WTF *)0x411);
          *(_DWORD *)v58 = 1;
          *(_QWORD *)(v58 + 8) = 1024;
          v59 = (char *)(v58 + 16);
          *(_BYTE *)(v58 + 1040) = 0;
          if (strerror_r(v57, (char *)(v58 + 16), 0x400uLL))
            snprintf(v59, 0x400uLL, "%s %d", "Unknown error", v57);
          WTF::dataLogF((WTF *)"Failed to close file %s: %s\n", v60, this, v59);
          if (*(_DWORD *)v58 == 1)
            WTF::fastFree(v58, v61, v62, v63, v64, v65, v66, v67);
          else
            --*(_DWORD *)v58;
        }
        if (!byte_1ECF4C1E0)
        {
          __break(0xC471u);
          JUMPOUT(0x198C45B38);
        }
        return;
      }
    }
  }
}

void JSC::FunctionOverrides::reinstallOverrides(JSC::FunctionOverrides *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::FunctionOverrides *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  char **v40;
  char *v41;

  if (!byte_1ECF4C1E0)
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  v8 = atomic_load(&_MergedGlobals_50);
  if (v8 != -1)
  {
    v41 = &v39;
    v40 = &v41;
    std::__call_once(&_MergedGlobals_50, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::FunctionOverrides::overrides(void)::$_0 &&>>);
  }
  if (!byte_1ECF4C1E0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C45D20);
  }
  if (__ldaxr((unsigned __int8 *)&byte_1ECF58FD0))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&byte_1ECF58FD0))
  {
    goto LABEL_9;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&byte_1ECF58FD0);
LABEL_9:
  v10 = *(JSC::FunctionOverrides **)((char *)&qword_1ECF4C6A7 + 1);
  v11 = qword_1ECF58FC8;
  if (qword_1ECF58FC8)
  {
    qword_1ECF58FC8 = 0;
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = (WTF::StringImpl **)v11;
      do
      {
        v14 = *v13;
        if (*v13 != (WTF::StringImpl *)-1)
        {
          v15 = v13[1];
          v13[1] = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
            {
              WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
              v14 = *v13;
            }
            else
            {
              *(_DWORD *)v15 -= 2;
            }
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::FunctionOverrides::parseOverridesInFile(v10, (const char *)a2);
  v38 = __ldxr((unsigned __int8 *)&byte_1ECF58FD0);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, (unsigned __int8 *)&byte_1ECF58FD0))
LABEL_28:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&byte_1ECF58FD0, 0, v32, v33, v34, v35, v36, v37);
  if (!byte_1ECF4C1E0)
  {
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x198C45D00);
  }
}

BOOL JSC::FunctionOverrides::initializeOverrideFor(unsigned int *a1, uint64_t a2, double a3, double a4, float a5)
{
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  _WORD *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  _WORD *v17;
  const void *v18;
  size_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  _BOOL8 v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int i;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  float v54;
  _BYTE *v55;
  int v56;
  size_t v57;
  int *v58;
  _BYTE *v59;
  unsigned int v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  size_t v70;
  int v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  const char *v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  WTF::StringImpl *v89;
  _WORD *v90;
  char *v91;
  char *v92;
  char *v93;
  __int128 v94;
  char *v95;
  int8x16_t v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  char *v100;
  char *v101;
  __int16 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::AtomStringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  uint64_t v119;
  WTF::AtomStringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  float v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  __int128 v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  _DWORD *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  __int128 v160;
  int8x16_t v161;
  __int128 v162;
  __int128 v163;
  char *v164;
  char *v165;
  char *v166;
  __int16 v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  unsigned __int128 v234;
  char v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239[2];
  __int128 v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  __int128 v243;
  __int128 v244;
  WTF::StringImpl *v245;
  int *v246;
  int8x16x2_t v247;
  int8x16x2_t v248;
  int8x16x2_t v249;
  int8x16x2_t v250;
  int8x16x2_t v251;
  int8x16x2_t v252;

  if (!byte_1ECF4C1E0)
  {
    __break(0xC471u);
    goto LABEL_236;
  }
  if (!*(uint64_t *)((char *)&qword_1ECF4C6A7 + 1))
  {
    __break(0xC471u);
    JUMPOUT(0x198C46890);
  }
  v7 = atomic_load(&_MergedGlobals_50);
  if (v7 != -1)
  {
    v242 = (WTF::StringImpl *)&v246;
    v239[0] = (WTF::StringImpl *)&v242;
    std::__call_once(&_MergedGlobals_50, v239, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::FunctionOverrides::overrides(void)::$_0 &&>>);
  }
  if (!byte_1ECF4C1E0)
  {
    __break(0xC471u);
    goto LABEL_216;
  }
  if (!*(_QWORD *)a1)
    goto LABEL_28;
  v8 = a1[2];
  v9 = a1[3];
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 24))(*(_QWORD *)a1);
  if (v11 <= v8)
    goto LABEL_27;
  v12 = (_WORD *)v10;
  v13 = v9 - v8;
  if ((int)v11 - (int)v8 > v9 - v8 || (v13 = v11 - v8, (_DWORD)v8))
  {
    v14 = v13;
    v15 = v11 - v8;
    if ((v11 & 0xFF00000000) != 0)
    {
      if (v15 < v14)
        goto LABEL_216;
      v12 = (_WORD *)(v10 + v8);
      v14 |= 0x100000000uLL;
    }
    else
    {
      if (v15 < v14)
        goto LABEL_216;
      v12 = (_WORD *)(v10 + 2 * v8);
    }
  }
  else
  {
    v14 = v11;
  }
  if ((v14 & 0xFF00000000) == 0)
  {
    if (!v12)
      goto LABEL_28;
    if ((_DWORD)v14)
    {
      if (v14 > 0x7FFFFFEFuLL)
      {
        __break(0xC471u);
        JUMPOUT(0x198C469C8);
      }
      v16 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v14 + 20));
      v17 = v16 + 5;
      *v16 = 2;
      v16[1] = v14;
      *((_QWORD *)v16 + 1) = v16 + 5;
      v16[4] = 0;
      if (v14 == 1)
      {
        *v17 = *v12;
        goto LABEL_32;
      }
      v18 = v12;
      v19 = 2 * v14;
      goto LABEL_31;
    }
LABEL_27:
    v16 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_32;
  }
  if (!v12)
  {
LABEL_28:
    v16 = 0;
    goto LABEL_32;
  }
  if (!(_DWORD)v14)
    goto LABEL_27;
  if ((unint64_t)v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198C469B8);
  }
  v16 = (int *)WTF::fastCompactMalloc((WTF *)(v14 + 20));
  v17 = v16 + 5;
  *v16 = 2;
  v16[1] = v14;
  *((_QWORD *)v16 + 1) = v16 + 5;
  v16[4] = 4;
  if (v14 == 1)
  {
    *(_BYTE *)v17 = *(_BYTE *)v12;
    goto LABEL_32;
  }
  v18 = v12;
  v19 = v14;
LABEL_31:
  memcpy(v17, v18, v19);
LABEL_32:
  v237 = (WTF::StringImpl *)v16;
  v20 = WTF::String::find((uint64_t)&v237, 0x7Bu, 0, a3, a4, a5);
  if (v20 == -1)
  {
    v31 = 0;
    goto LABEL_186;
  }
  v28 = v20;
  v29 = v237;
  if (v237)
  {
    if (v28 || (*((_DWORD *)v237 + 1) & 0x80000000) != 0)
    {
      WTF::StringImpl::substring(v237, v28, 0x7FFFFFFFu, (uint64_t *)&v236);
    }
    else
    {
      *(_DWORD *)v237 += 2;
      v236 = v29;
    }
  }
  else
  {
    v236 = 0;
  }
  if (__ldaxr((unsigned __int8 *)&byte_1ECF58FD0))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&byte_1ECF58FD0))
  {
    goto LABEL_42;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&byte_1ECF58FD0);
LABEL_42:
  WTF::String::isolatedCopy((uint64_t *)&v236, (uint64_t *)&v242);
  v32 = qword_1ECF58FC8;
  v33 = v242;
  if (!qword_1ECF58FC8)
  {
LABEL_54:
    if (!v33)
      goto LABEL_57;
LABEL_55:
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
    goto LABEL_57;
  }
  v34 = *(_DWORD *)(qword_1ECF58FC8 - 8);
  v35 = *((_DWORD *)v242 + 4);
  if (v35 < 0x100)
    v36 = WTF::StringImpl::hashSlowCase(v242);
  else
    v36 = v35 >> 8;
  for (i = 0; ; v36 = i + v38)
  {
    v38 = v36 & v34;
    v39 = *(WTF **)(v32 + 16 * v38);
    if (v39 == (WTF *)-1)
      goto LABEL_49;
    if (!v39)
      break;
    if (WTF::equal(v39, v33, v22))
    {
      v32 += 16 * v38;
      goto LABEL_54;
    }
LABEL_49:
    ++i;
  }
  if (!qword_1ECF58FC8)
  {
    v32 = 0;
    if (!v33)
      goto LABEL_57;
    goto LABEL_55;
  }
  v32 = qword_1ECF58FC8 + 16 * *(unsigned int *)(qword_1ECF58FC8 - 4);
  if (v33)
    goto LABEL_55;
LABEL_57:
  v40 = qword_1ECF58FC8;
  if (qword_1ECF58FC8)
    v40 = qword_1ECF58FC8 + 16 * *(unsigned int *)(qword_1ECF58FC8 - 4);
  v31 = v40 != v32;
  if (v40 != v32)
  {
    WTF::String::isolatedCopy((_DWORD *)(v32 + 8), (uint64_t *)&v242);
    v47 = v242;
    v48 = __ldxr((unsigned __int8 *)&byte_1ECF58FD0);
    if (v48 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)&byte_1ECF58FD0))
      {
LABEL_68:
        if (!byte_1ECF4C1E0)
        {
          __break(0xC471u);
          JUMPOUT(0x198C468F0);
        }
        v50 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 24))(*(_QWORD *)a1);
        v55 = (_BYTE *)v50;
        v56 = v51;
        v57 = v51;
        if ((v51 & 0xFF00000000) != 0)
        {
          if (v50)
          {
            if ((_DWORD)v51)
            {
              if ((unint64_t)v51 >> 31)
              {
                __break(0xC471u);
                JUMPOUT(0x198C469C0);
              }
              v58 = (int *)WTF::fastCompactMalloc((WTF *)(v51 + 20));
              v59 = v58 + 5;
              *v58 = 2;
              v58[1] = v56;
              *((_QWORD *)v58 + 1) = v58 + 5;
              v58[4] = 4;
              if (v57 == 1)
              {
                *v59 = *v55;
                goto LABEL_91;
              }
              v69 = v55;
              v70 = v57;
LABEL_90:
              memcpy(v59, v69, v70);
              goto LABEL_91;
            }
LABEL_84:
            v58 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
            goto LABEL_91;
          }
LABEL_80:
          v246 = 0;
          LODWORD(a1) = a1[2];
          v60 = -1;
LABEL_92:
          v71 = WTF::String::find((uint64_t)&v246, 0x7Bu, a1, v52, v53, v54);
          if (!v246 || (v79 = v246[1], v79 <= v60))
          {
            v82 = 0x100000000;
            v81 = "";
            if (v47)
              goto LABEL_104;
LABEL_135:
            v84 = 0;
            goto LABEL_105;
          }
          v80 = v71 - v60;
          v81 = (const char *)*((_QWORD *)v246 + 1);
          if (v79 - v60 <= v71 - v60)
          {
            v80 = v79 - v60;
            if (!v60)
            {
              v82 = v79 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)v246[4] >> 2) & 1) << 32);
              if (!v47)
                goto LABEL_135;
              goto LABEL_104;
            }
          }
          v82 = v80;
          v83 = v79 - v60;
          if (((v246[4] >> 2) & 1) != 0)
          {
            if (v83 >= v80)
            {
              v81 += v60;
              v82 = v80 | 0x100000000;
              if (!v47)
                goto LABEL_135;
LABEL_104:
              v84 = *((_DWORD *)v47 + 1);
              *(_DWORD *)v47 += 2;
LABEL_105:
              if (((v84 | v82) & 0x80000000) != 0)
                goto LABEL_231;
              v85 = v82 + v84;
              if (__OFADD__((_DWORD)v82, v84))
                goto LABEL_231;
              v86 = v82 & 0x100000000;
              if (v47 && v86)
              {
                v87 = v85;
                v88 = v85 == 0;
                if ((*((_BYTE *)v47 + 16) & 4) == 0)
                  goto LABEL_110;
LABEL_119:
                if (!v88)
                {
                  if ((v85 & 0x80000000) == 0)
                  {
                    WTF::tryFastCompactMalloc((WTF *)(v87 + 20), &v242);
                    v89 = v242;
                    if (v242)
                    {
                      v91 = (char *)v242 + 20;
                      *(_DWORD *)v242 = 2;
                      *((_DWORD *)v89 + 1) = v85;
                      *((_QWORD *)v89 + 1) = (char *)v89 + 20;
                      *((_DWORD *)v89 + 4) = 4;
                      if ((_DWORD)v82 == 1)
                      {
                        *v91 = *v81;
                      }
                      else if ((_DWORD)v82)
                      {
                        memcpy((char *)v89 + 20, v81, v82);
                      }
                      if (v47)
                      {
                        v92 = &v91[v82];
                        v72 = (_OWORD *)*((_QWORD *)v47 + 1);
                        v73 = *((unsigned int *)v47 + 1);
                        if ((*((_BYTE *)v47 + 16) & 4) != 0)
                        {
                          if ((_DWORD)v73 == 1)
                          {
                            *v92 = *(_BYTE *)v72;
                            goto LABEL_147;
                          }
                          if (!(_DWORD)v73)
                          {
LABEL_147:
                            v245 = v89;
LABEL_148:
                            if (*(_DWORD *)v47 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v47, (WTF::AtomStringImpl *)v72, v73, v74, v75, v76, v77, v78);
                              WTF::fastFree(v176, v177, v178, v179, v180, v181, v182, v183);
                            }
                            else
                            {
                              *(_DWORD *)v47 -= 2;
                            }
LABEL_150:
                            v241 = 0;
                            *(_OWORD *)v239 = 0u;
                            v240 = 0u;
                            v104 = WTF::fastCompactMalloc((WTF *)0x20);
                            *(_QWORD *)v104 = 0xC00000002;
                            *(_QWORD *)(v104 + 8) = "<overridden>";
                            *(_DWORD *)(v104 + 16) = 4;
                            v238 = (WTF::StringImpl *)v104;
                            WTF::URL::URL((uint64_t)&v242, (uint64_t)v239, &v238, 0, v105, v106, v107, v108);
                            if (*(_DWORD *)v104 == 2)
                            {
                              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v104, v109, v110, v111, v112, v113, v114, v115);
                              WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
                            }
                            else
                            {
                              *(_DWORD *)v104 -= 2;
                            }
                            v116 = v239[0];
                            v239[0] = 0;
                            if (v116)
                            {
                              if (*(_DWORD *)v116 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v116, v109, v110, v111, v112, v113, v114, v115);
                                WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
                              }
                              else
                              {
                                *(_DWORD *)v116 -= 2;
                              }
                            }
                            v117 = v242;
                            if (v242)
                              *(_DWORD *)v242 += 2;
                            *(_OWORD *)v239 = v243;
                            v240 = v244;
                            v118 = WTF::fastCompactMalloc((WTF *)0x20);
                            *(_QWORD *)v118 = 0xC00000002;
                            *(_QWORD *)(v118 + 8) = "<overridden>";
                            *(_DWORD *)(v118 + 16) = 4;
                            v119 = WTF::fastMalloc((WTF *)0x80);
                            v129 = v119;
                            *(_DWORD *)(v119 + 8) = 1;
                            *(_BYTE *)(v119 + 12) = 0;
                            if (v117)
                              *(_DWORD *)v117 += 2;
                            *(_QWORD *)(v119 + 16) = v117;
                            *(_OWORD *)(v119 + 24) = *(_OWORD *)v239;
                            *(_OWORD *)(v119 + 40) = v240;
                            *(_QWORD *)(v119 + 56) = 0;
                            *(_QWORD *)(v119 + 64) = v118;
                            *(_OWORD *)(v119 + 72) = 0u;
                            *(_OWORD *)(v119 + 88) = 0u;
                            *(_OWORD *)(v119 + 101) = 0u;
                            *(_QWORD *)v119 = off_1E357C4B0;
                            v130 = v245;
                            if (!v245)
                              v130 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
                            *(_DWORD *)v130 += 2;
                            *(_QWORD *)(v119 + 120) = v130;
                            if (v117)
                            {
                              if (*(_DWORD *)v117 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v117, v120, v121, v122, v123, v124, v125, v126);
                                WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
                              }
                              else
                              {
                                *(_DWORD *)v117 -= 2;
                              }
                            }
                            *(_QWORD *)&v131 = 0x100000001;
                            *((_QWORD *)&v131 + 1) = 0x100000001;
                            *(_OWORD *)(a2 + 24) = v131;
                            v132 = WTF::String::find((uint64_t)&v245, 0x28u, 0, COERCE_DOUBLE(0x100000001), v127, v128);
                            *(_QWORD *)(a2 + 40) = v132;
                            v133 = v245;
                            if (v245)
                              v133 = *((_DWORD *)v245 + 1);
                            *(_DWORD *)(a2 + 48) = v133 - 1;
                            v134 = v132 | ((unint64_t)v133 << 32);
                            v135 = *(_DWORD **)a2;
                            *(_QWORD *)a2 = v129;
                            if (v135)
                            {
                              if (v135[2] == 1)
                                (*(void (**)(_DWORD *))(*(_QWORD *)v135 + 8))(v135);
                              else
                                --v135[2];
                            }
                            *(_QWORD *)(a2 + 8) = v134;
                            *(_QWORD *)(a2 + 16) = 0;
                            v136 = v242;
                            v242 = 0;
                            if (v136)
                            {
                              if (*(_DWORD *)v136 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v136, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                                WTF::fastFree(v200, v201, v202, v203, v204, v205, v206, v207);
                              }
                              else
                              {
                                *(_DWORD *)v136 -= 2;
                              }
                            }
                            v137 = v245;
                            v245 = 0;
                            if (v137)
                            {
                              if (*(_DWORD *)v137 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v137, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                                WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
                              }
                              else
                              {
                                *(_DWORD *)v137 -= 2;
                              }
                            }
                            v138 = (WTF::StringImpl *)v246;
                            v246 = 0;
                            if (v138)
                            {
                              if (*(_DWORD *)v138 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v138, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                                WTF::fastFree(v216, v217, v218, v219, v220, v221, v222, v223);
                              }
                              else
                              {
                                *(_DWORD *)v138 -= 2;
                              }
                            }
                            if (!byte_1ECF4C1E0)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198C46910);
                            }
                            if (!*(uint64_t *)((char *)&qword_1ECF4C6A7 + 1))
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198C46930);
                            }
                            if (v47)
                            {
                              if (*(_DWORD *)v47 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v47, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                                WTF::fastFree(v224, v225, v226, v227, v228, v229, v230, v231);
                              }
                              else
                              {
                                *(_DWORD *)v47 -= 2;
                              }
                            }
                            goto LABEL_183;
                          }
LABEL_146:
                          memcpy(v92, v72, v73);
                          goto LABEL_147;
                        }
                        v232 = &v92[v73];
                        if (v73 >= 0x10)
                        {
                          v233 = &v92[v73 & 0xFFFFFFF0];
                          do
                          {
                            v234 = (unsigned __int128)vld2q_s8((const char *)v72);
                            v72 += 2;
                            *(_OWORD *)v92 = v234;
                            v92 += 16;
                          }
                          while (v92 != v233);
                          v92 = v233;
                        }
                        while (v92 != v232)
                        {
                          v235 = *(_BYTE *)v72;
                          v72 = (_OWORD *)((char *)v72 + 2);
                          *v92++ = v235;
                        }
                      }
                      goto LABEL_200;
                    }
                  }
LABEL_231:
                  v245 = 0;
                  __break(0xC471u);
                  JUMPOUT(0x198C469B0);
                }
LABEL_223:
                v89 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
                WTF::StringImpl::s_emptyAtomString += 2;
                goto LABEL_200;
              }
              v87 = v85;
              v88 = v85 == 0;
              if (v86)
                goto LABEL_119;
LABEL_110:
              if (v88)
                goto LABEL_223;
              if (v85 > 0x7FFFFFEF)
                goto LABEL_231;
              WTF::tryFastCompactMalloc((WTF *)(2 * v87 + 20), &v242);
              v89 = v242;
              if (!v242)
                goto LABEL_231;
              v90 = (_WORD *)((char *)v242 + 20);
              *(_DWORD *)v242 = 2;
              *((_DWORD *)v89 + 1) = v85;
              *((_QWORD *)v89 + 1) = (char *)v89 + 20;
              *((_DWORD *)v89 + 4) = 0;
              if (v86)
              {
                if (v82 >= 0x40)
                {
                  v93 = (char *)&v90[v82 & 0xFFFFFFC0];
                  v94 = 0uLL;
                  v95 = (char *)v89 + 20;
                  do
                  {
                    v247.val[0] = *(int8x16_t *)v81;
                    v96 = *((int8x16_t *)v81 + 1);
                    v249.val[0] = (int8x16_t)*((_OWORD *)v81 + 2);
                    v97 = *((_OWORD *)v81 + 3);
                    v81 += 64;
                    v98 = v97;
                    v249.val[1] = 0uLL;
                    v251.val[0] = v96;
                    v247.val[1] = 0uLL;
                    v99 = v95;
                    vst2q_s8(v99, v247);
                    v99 += 32;
                    v251.val[1] = 0uLL;
                    vst2q_s8(v99, v251);
                    v100 = v95 + 64;
                    vst2q_s8(v100, v249);
                    v101 = v95 + 96;
                    vst2q_s8(v101, *(int8x16x2_t *)(&v94 - 1));
                    v95 += 128;
                  }
                  while (v95 != v93);
                }
                else
                {
                  v93 = (char *)v89 + 20;
                }
                while (v93 != (char *)&v90[v82])
                {
                  v102 = *(unsigned __int8 *)v81++;
                  *(_WORD *)v93 = v102;
                  v93 += 2;
                }
              }
              else
              {
                if ((_DWORD)v82 == 1)
                {
                  *v90 = *(_WORD *)v81;
                  if (!v47)
                    goto LABEL_200;
                  goto LABEL_142;
                }
                if ((_DWORD)v82)
                {
                  memcpy((char *)v89 + 20, v81, 2 * v82);
                  if (!v47)
                    goto LABEL_200;
                  goto LABEL_142;
                }
              }
              if (!v47)
                goto LABEL_200;
LABEL_142:
              v92 = (char *)&v90[v82];
              v72 = (_OWORD *)*((_QWORD *)v47 + 1);
              v103 = *((unsigned int *)v47 + 1);
              if ((*((_BYTE *)v47 + 16) & 4) == 0)
              {
                if ((_DWORD)v103 == 1)
                {
                  *(_WORD *)v92 = *(_WORD *)v72;
                  goto LABEL_147;
                }
                if (!(_DWORD)v103)
                  goto LABEL_147;
                v73 = 2 * v103;
                goto LABEL_146;
              }
              v158 = &v92[2 * v103];
              if (v103 >= 0x40)
              {
                v159 = &v92[2 * (v103 & 0xFFFFFFC0)];
                v160 = 0uLL;
                do
                {
                  v248.val[0] = (int8x16_t)*v72;
                  v161 = *((int8x16_t *)v72 + 1);
                  v250.val[0] = (int8x16_t)v72[2];
                  v162 = v72[3];
                  v72 += 4;
                  v163 = v162;
                  v250.val[1] = 0uLL;
                  v252.val[0] = v161;
                  v248.val[1] = 0uLL;
                  v164 = v92;
                  vst2q_s8(v164, v248);
                  v164 += 32;
                  v252.val[1] = 0uLL;
                  vst2q_s8(v164, v252);
                  v165 = v92 + 64;
                  vst2q_s8(v165, v250);
                  v166 = v92 + 96;
                  vst2q_s8(v166, *(int8x16x2_t *)(&v160 - 1));
                  v92 += 128;
                }
                while (v92 != v159);
                v92 = v159;
              }
              while (v92 != v158)
              {
                v167 = *(unsigned __int8 *)v72;
                v72 = (_OWORD *)((char *)v72 + 1);
                *(_WORD *)v92 = v167;
                v92 += 2;
              }
LABEL_200:
              v245 = v89;
              if (v47)
                goto LABEL_148;
              goto LABEL_150;
            }
          }
          else if (v83 >= v80)
          {
            v81 += 2 * v60;
            if (!v47)
              goto LABEL_135;
            goto LABEL_104;
          }
LABEL_216:
          __break(1u);
LABEL_217:
          __break(0xC471u);
          JUMPOUT(0x198C468D0);
        }
        if (!v50)
          goto LABEL_80;
        if (!(_DWORD)v51)
          goto LABEL_84;
        if (v51 <= 0x7FFFFFEFuLL)
        {
          v58 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v51 + 20));
          v59 = v58 + 5;
          *v58 = 2;
          v58[1] = v56;
          *((_QWORD *)v58 + 1) = v58 + 5;
          v58[4] = 0;
          if (v57 != 1)
          {
            v69 = v55;
            v70 = 2 * v57;
            goto LABEL_90;
          }
          *(_WORD *)v59 = *(_WORD *)v55;
LABEL_91:
          v246 = v58;
          a1 = (unsigned int *)a1[2];
          v60 = WTF::StringImpl::reverseFind((uint64_t)v58, (int8x16_t *)"function", 8uLL, (unint64_t)a1);
          goto LABEL_92;
        }
        __break(0xC471u);
LABEL_236:
        JUMPOUT(0x198C46870);
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&byte_1ECF58FD0, 0, v41, v42, v43, v44, v45, v46);
    goto LABEL_68;
  }
  v49 = __ldxr((unsigned __int8 *)&byte_1ECF58FD0);
  if (v49 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&byte_1ECF58FD0))
      goto LABEL_183;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&byte_1ECF58FD0, 0, (uint64_t)v22, v23, v24, v25, v26, v27);
LABEL_183:
  v139 = v236;
  v236 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl(v139, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
  }
LABEL_186:
  v140 = v237;
  v237 = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
    {
      WTF::StringImpl::~StringImpl(v140, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v140 -= 2;
    }
  }
  if (!byte_1ECF4C1E0)
    goto LABEL_217;
  return v31;
}

uint64_t WTF::dataLog<char [19],char [9],char [3]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "functionOverrides ");
  WTF::PrintStream::printf(v2, "%s", "IO ERROR");
  WTF::PrintStream::printf(v2, "%s", ": ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [21],char const*,char [64]>(const char **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Failed to open file ");
  WTF::PrintStream::printf(v4, "%s", *a1);
  WTF::PrintStream::printf(v4, "%s", ". Did you add the file-read-data entitlement to WebProcess.sb?\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::parseClause(JSC *this, const char *a2, uint64_t a3, __sFILE *a4, char *__s1, char *a6)
{
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  int *v16;
  char *v17;
  const char *v18;
  unsigned int v19;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unsigned __int128 *v25;
  int8x16_t *v26;
  uint64_t v27;
  size_t v28;
  unsigned __int128 *v29;
  unsigned __int128 *v30;
  __int128 v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int16 v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  char *v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF *v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::AtomStringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::AtomStringImpl *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int128 *v168;
  unsigned __int128 *v169;
  unsigned __int128 v170;
  char v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  unsigned int v174;
  char v175;
  WTF *v176;
  WTF::StringImpl *v177;
  char *v178;
  const char *v179;
  WTF::StringImpl *v180;
  int v181;
  int8x16x2_t v182;
  int8x16x2_t v183;
  int8x16x2_t v184;

  v178 = __s1;
  v179 = a2;
  if (!byte_1ECF4C1E0)
  {
    __break(0xC471u);
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  v11 = strstr(__s1, a2);
  if (!v11)
  {
    WTF::dataLog<char [19],char [13],char [3]>();
    WTF::dataLog<char [12],char const*,char [11],char const*,char [2]>(&v179, (const char **)&v178);
    goto LABEL_25;
  }
  if (v11 != __s1)
  {
    WTF::dataLog<char [19],char [13],char [3]>();
    WTF::dataLog<char [36],char const*,char [4],char const*,char [2]>(&v179, (const char **)&v178);
    goto LABEL_25;
  }
  if (__s1[a3] != 32)
  {
    WTF::dataLog<char [19],char [13],char [3]>();
    WTF::dataLog<char [2],char const*,char [30],char const*,char [2]>(&v179, (const char **)&v178);
    goto LABEL_25;
  }
  v12 = &__s1[a3 + 1];
  v13 = strchr(v12, 123);
  if (!v13)
  {
    WTF::dataLog<char [19],char [13],char [3]>();
    WTF::dataLog<char [18],char const*,char [27],char const*,char [2]>(&v179, (const char **)&v178);
    goto LABEL_25;
  }
  v14 = v13;
  v15 = v13 - v12;
  if (v13 == v12)
  {
    v16 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    if (v15 >> 31)
    {
      __break(0xC471u);
LABEL_133:
      JUMPOUT(0x198C47084);
    }
    v16 = (int *)WTF::fastCompactMalloc((WTF *)(v15 + 20));
    v17 = (char *)(v16 + 5);
    *v16 = 2;
    v16[1] = v15;
    *((_QWORD *)v16 + 1) = v16 + 5;
    v16[4] = 4;
    if (v15 == 1)
      *v17 = *v12;
    else
      memcpy(v17, &__s1[a3 + 1], v15);
  }
  v177 = (WTF::StringImpl *)v16;
  v18 = (const char *)(&__s1[a3] - v14 + 1);
  while (v18)
  {
    v19 = *v12;
    if (v19 > 0x20 || ((1 << v19) & 0x100003600) == 0)
    {
      ++v12;
      ++v18;
      if (v19 != 125 && v19 != 11)
        continue;
    }
    WTF::dataLog<char [19],char [13],char [3]>();
    WTF::dataLog<char [12],WTF::String,char [40],char const*,char [2]>((WTF::PrintStream *)&v177, (const char **)&v178);
    goto LABEL_25;
  }
  v22 = v16[1];
  *v16 += 2;
  if (v22 < 0)
    goto LABEL_131;
  v23 = (v22 + 1);
  if (__OFADD__(v22, 1))
    goto LABEL_131;
  if ((v16[4] & 4) != 0)
  {
    WTF::tryFastCompactMalloc((WTF *)(v23 + 20), &v172);
    v24 = v172;
    if (v172)
    {
      *(_DWORD *)v172 = 2;
      *((_DWORD *)v24 + 1) = v23;
      *((_BYTE *)v24 + 20) = 125;
      *((_QWORD *)v24 + 1) = (char *)v24 + 20;
      *((_DWORD *)v24 + 4) = 4;
      v25 = (unsigned __int128 *)((char *)v24 + 21);
      v26 = (int8x16_t *)*((_QWORD *)v16 + 1);
      v28 = v16[1];
      if ((v16[4] & 4) == 0)
      {
        v168 = (unsigned __int128 *)((char *)v25 + v28);
        if (v28 >= 0x10)
        {
          v169 = (unsigned __int128 *)((char *)v25 + (v28 & 0xFFFFFFF0));
          do
          {
            v170 = (unsigned __int128)vld2q_s8(v26->i8);
            v26 += 2;
            *v25++ = v170;
          }
          while (v25 != v169);
          v25 = v169;
        }
        while (v25 != v168)
        {
          v171 = v26->i8[0];
          v26 = (int8x16_t *)((char *)v26 + 2);
          *(_BYTE *)v25 = v171;
          v25 = (unsigned __int128 *)((char *)v25 + 1);
        }
        goto LABEL_47;
      }
      if ((_DWORD)v28 == 1)
      {
        *(_BYTE *)v25 = v26->i8[0];
      }
      else if ((_DWORD)v28)
      {
        goto LABEL_40;
      }
      goto LABEL_47;
    }
LABEL_131:
    __break(0xC471u);
    JUMPOUT(0x198C4729CLL);
  }
  if (v23 > 0x7FFFFFEF)
    goto LABEL_131;
  WTF::tryFastCompactMalloc((WTF *)(2 * v23 + 20), &v172);
  v24 = v172;
  if (!v172)
    goto LABEL_131;
  *(_DWORD *)v172 = 2;
  *((_DWORD *)v24 + 1) = v23;
  *((_WORD *)v24 + 10) = 125;
  *((_QWORD *)v24 + 1) = (char *)v24 + 20;
  *((_DWORD *)v24 + 4) = 0;
  v25 = (unsigned __int128 *)((char *)v24 + 22);
  v26 = (int8x16_t *)*((_QWORD *)v16 + 1);
  v27 = v16[1];
  if ((v16[4] & 4) != 0)
  {
    v29 = (unsigned __int128 *)((char *)v25 + 2 * v27);
    if (v27 >= 0x40)
    {
      v30 = (unsigned __int128 *)((char *)v25 + 2 * (v27 & 0xFFFFFFC0));
      v31 = 0uLL;
      do
      {
        v182.val[0] = *v26;
        v32 = v26[1];
        v183.val[0] = v26[2];
        v33 = v26[3];
        v26 += 4;
        v34 = v33;
        v183.val[1] = 0uLL;
        v184.val[0] = v32;
        v182.val[1] = 0uLL;
        v35 = (char *)v25;
        vst2q_s8(v35, v182);
        v35 += 32;
        v184.val[1] = 0uLL;
        vst2q_s8(v35, v184);
        v36 = (char *)(v25 + 4);
        vst2q_s8(v36, v183);
        v37 = (char *)(v25 + 6);
        vst2q_s8(v37, *(int8x16x2_t *)(&v31 - 1));
        v25 += 8;
      }
      while (v25 != v30);
      v25 = v30;
    }
    while (v25 != v29)
    {
      v38 = v26->u8[0];
      v26 = (int8x16_t *)((char *)v26 + 1);
      *(_WORD *)v25 = v38;
      v25 = (unsigned __int128 *)((char *)v25 + 2);
    }
    goto LABEL_47;
  }
  if ((_DWORD)v27 == 1)
  {
    *(_WORD *)v25 = v26->i16[0];
    goto LABEL_47;
  }
  if ((_DWORD)v27)
  {
    v28 = 2 * v27;
LABEL_40:
    memcpy(v25, v26, v28);
  }
LABEL_47:
  v172 = v24;
  WTF::String::ascii((WTF::String *)&v172, (int8x16_t **)&v176);
  if (*(_DWORD *)v24 == 2)
  {
    WTF::StringImpl::~StringImpl(v24, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
  }
  else
  {
    *(_DWORD *)v24 -= 2;
  }
  if (*v16 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
  }
  else
  {
    *v16 -= 2;
  }
  if (v176)
    v46 = (char *)v176 + 16;
  else
    v46 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v175 = 1;
  while (1)
  {
    v47 = strstr(v14, v46);
    if (v47)
      break;
    v48 = strlen(v14);
    v180 = (WTF::StringImpl *)v14;
    if (v48 >> 31)
    {
      __break(0xC471u);
      goto LABEL_133;
    }
    v181 = v48;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)&v172, (uint64_t)&v180, v49, v50, v51, v52, v53, v54);
    v14 = fgets(a6, 1024, a4);
    if (!v14)
    {
      WTF::dataLog<char [19],char [13],char [3]>();
      v61 = v172;
      if (v172)
        goto LABEL_59;
      if ((v174 & 0x80000000) == 0 && v173 && *((_DWORD *)v173 + 1) > v174 + (v174 >> 2))
      {
        if ((*((_BYTE *)v173 + 16) & 4) != 0)
          WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v172, (WTF::AtomStringImpl *)v174, v55, v56, v57, v58, v59, v60);
        else
          WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v172, (WTF::AtomStringImpl *)v174, v55, v56, v57, v58, v59, v60);
        v159 = v172;
        v172 = v173;
        v173 = 0;
        if (v159)
        {
          if (*(_DWORD *)v159 == 2)
          {
            WTF::StringImpl::~StringImpl(v159, v152, v153, v154, v155, v156, v157, v158);
            WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
          }
          else
          {
            *(_DWORD *)v159 -= 2;
          }
        }
      }
      WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v172);
      v61 = v172;
      if (v172)
LABEL_59:
        *(_DWORD *)v61 += 2;
      v180 = v61;
      WTF::dataLog<char [2],char const*,char [25],WTF::String,char [14],WTF::String,char [2],char [45]>(&v179, (WTF::PrintStream *)&v177, (WTF::PrintStream *)&v180);
      v69 = v180;
      v180 = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
        {
          WTF::StringImpl::~StringImpl(v69, v62, v63, v64, v65, v66, v67, v68);
          WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
        }
        else
        {
          *(_DWORD *)v69 -= 2;
        }
      }
LABEL_25:
      WTF::exitProcess((WTF *)1);
    }
  }
  v70 = v47;
  v178 = v14;
  if (v47[strlen(v46)] != 10)
  {
    WTF::dataLog<char [19],char [13],char [3]>();
    WTF::dataLog<char [30],char const*,char [25],WTF::String,char [4],char const*,char [2]>(&v179, (WTF::PrintStream *)&v177, (const char **)&v178);
    goto LABEL_25;
  }
  if (v70 - v14 + 1 < 0)
    goto LABEL_103;
  v180 = (WTF::StringImpl *)v14;
  if ((unint64_t)(v70 - v14 + 1) >> 31)
  {
LABEL_104:
    __break(0xC471u);
    JUMPOUT(0x198C47148);
  }
  v181 = (_DWORD)v70 - (_DWORD)v14 + 1;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)&v172, (uint64_t)&v180, v71, v72, v73, v74, v75, v76);
  v84 = v172;
  if (v172)
    goto LABEL_67;
  if ((v174 & 0x80000000) == 0 && v173 && *((_DWORD *)v173 + 1) > v174 + (v174 >> 2))
  {
    if ((*((_BYTE *)v173 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v172, (WTF::AtomStringImpl *)v174, v78, v79, v80, v81, v82, v83);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v172, (WTF::AtomStringImpl *)v174, v78, v79, v80, v81, v82, v83);
    v135 = v172;
    v172 = v173;
    v173 = 0;
    if (v135)
    {
      if (*(_DWORD *)v135 == 2)
      {
        WTF::StringImpl::~StringImpl(v135, v128, v129, v130, v131, v132, v133, v134);
        WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
      }
      else
      {
        *(_DWORD *)v135 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v172);
  v84 = v172;
  if (v172)
LABEL_67:
    *(_DWORD *)v84 += 2;
  *(_QWORD *)this = v84;
  v85 = v173;
  v173 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
      v84 = v172;
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v172 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v86 = v176;
  v176 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::fastFree((unint64_t)v86, v77, v78, v79, v80, v81, v82, v83);
    else
      --*(_DWORD *)v86;
  }
  v87 = v177;
  v177 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  if (!byte_1ECF4C1E0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C47168);
  }
}

uint64_t JSC::HeapVerifier::HeapVerifier(JSC::HeapVerifier *this, JSC::Heap *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  *(_QWORD *)this = a2;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = a3;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a3 <= 0)
  {
    result = 47;
    __break(0xC471u);
  }
  else
  {
    v4 = a3;
    v5 = 14 * a3;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(v5 * 8 + 16));
    *v6 = 112;
    v6[1] = v4;
    v14 = v6 + 2;
    do
    {
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      v14[12] = 0;
      v14[13] = 0;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      v14[2] = "Before Marking";
      v14[3] = 0;
      v14[4] = 0;
      v14[5] = 0;
      *((_BYTE *)v14 + 48) = 0;
      *((_BYTE *)v14 + 96) = 0;
      v14[8] = "After Marking";
      v14[9] = 0;
      v14[10] = 0;
      v14[11] = 0;
      v14 += 14;
    }
    while (v14 != &v6[v5 + 2]);
    v15 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6 + 2;
    if (v15)
    {
      v16 = v15 - 16;
      v17 = *(_QWORD *)(v15 - 8);
      if (v17)
      {
        v18 = 112 * v17;
        v19 = v15 - 112;
        do
        {
          JSC::HeapVerifier::GCCycle::~GCCycle((JSC::HeapVerifier::GCCycle *)(v19 + v18), v7, v8, v9, v10, v11, v12, v13);
          v18 -= 112;
        }
        while (v18);
      }
      WTF::fastFree(v16, v7, v8, v9, v10, v11, v12, v13);
    }
    return (uint64_t)this;
  }
  return result;
}

void JSC::HeapVerifier::startGC(JSC::HeapVerifier *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  char **v40;
  char *v41;

  v9 = *(_QWORD *)this;
  v10 = (*((_DWORD *)this + 2) + 1) % *((_DWORD *)this + 3);
  *((_DWORD *)this + 2) = v10;
  v11 = v10;
  v12 = *((_QWORD *)this + 3);
  v13 = v12 + 112 * v10;
  WTF::SegmentedVector<JSC::CellProfile,64ul>::clear((unint64_t *)(v13 + 24), a2, a3, a4, a5, a6, a7, a8);
  v23 = *(_QWORD *)(v13 + 56);
  v22 = (_QWORD *)(v13 + 56);
  v21 = v23;
  if (v23)
  {
    *v22 = 0;
    WTF::fastFree(v21 - 16, v14, v15, v16, v17, v18, v19, v20);
  }
  v24 = v12 + 112 * v11;
  *(_BYTE *)(v24 + 48) = 0;
  WTF::SegmentedVector<JSC::CellProfile,64ul>::clear((unint64_t *)(v24 + 72), v14, v15, v16, v17, v18, v19, v20);
  v34 = *(_QWORD *)(v24 + 104);
  v33 = (_QWORD *)(v24 + 104);
  v32 = v34;
  if (v34)
  {
    *v33 = 0;
    WTF::fastFree(v32 - 16, v25, v26, v27, v28, v29, v30, v31);
  }
  *(_BYTE *)(v12 + 112 * v11 + 96) = 0;
  v35 = *(unsigned __int8 *)(v9 + 155);
  if (v35 == 255)
  {
    __break(1u);
  }
  else
  {
    *(_BYTE *)(*((_QWORD *)this + 3) + 112 * *((int *)this + 2)) = v35;
    v36 = mach_absolute_time();
    v38 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v38 != -1)
    {
      v41 = &v39;
      v40 = &v41;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v37) = dword_1ECF4400C;
    *(double *)(*((_QWORD *)this + 3) + 112 * *((int *)this + 2) + 8) = (double)(v36
                                                                                 * WTF::machTimebaseInfo(void)::timebaseInfo)
                                                                        / ((double)v37
                                                                         * 1000000000.0);
  }
}

uint64_t JSC::HeapVerifier::endGC(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  WTF::Thread *v3;
  const void *v4;
  uint64_t v5;
  int v6;
  double v7;
  char v8;

  if (*(_BYTE *)(this + 16))
  {
    v1 = this;
    WTF::dataLog<char [16]>("END ");
    if (*(unsigned __int8 *)(*(_QWORD *)v1 + 155) == 255)
    {
      this = 145;
      __break(0xC471u);
    }
    else
    {
      v2 = *(_QWORD *)(v1 + 24) + 112 * *(int *)(v1 + 8);
      v8 = *(_BYTE *)v2;
      v7 = *(double *)(v2 + 8);
      v3 = (WTF::Thread *)getpid();
      v6 = (int)v3;
      v4 = *(const void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v4)
        v4 = (const void *)WTF::Thread::initializeCurrentTLS(v3);
      v5 = *(_QWORD *)v1 - 192;
      WTF::dataLog<char [21],int,char [3],WTF::Thread,char [6],WTF::RawPointer,char [5],JSC::CollectionScope,char [7],WTF::MonotonicTime,char [2]>(&v6, v4, (const void **)&v5, &v8, &v7);
      this = WTF::dataLog<char [16]>("\n\n");
      *(_BYTE *)(v1 + 16) = 0;
    }
  }
  return this;
}

void JSC::HeapVerifier::gatherLiveCells(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int ***v19;
  uint64_t v20;
  unsigned int ***v21;
  uint64_t v22;
  unsigned int ***v23;
  unint64_t *v24;
  unsigned int *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unsigned int ***v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unsigned int ***v70;
  uint64_t v71;
  unsigned int ***v72;
  char **v73;
  unsigned __int8 v74;
  char **v75;
  char v76;
  char **v77;
  char *v78;

  v9 = *a1;
  if ((_DWORD)a2 == 2)
  {
    v10 = a1[3] + 112 * *((int *)a1 + 2) + 64;
  }
  else
  {
    if ((_DWORD)a2 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x198C47BA4);
    }
    v10 = a1[3] + 112 * *((int *)a1 + 2) + 16;
  }
  WTF::SegmentedVector<JSC::CellProfile,64ul>::clear((unint64_t *)(v10 + 8), a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(v10 + 40);
  if (v18)
  {
    *(_QWORD *)(v10 + 40) = 0;
    WTF::fastFree(v18 - 16, v11, v12, v13, v14, v15, v16, v17);
  }
  *(_BYTE *)(v10 + 32) = 0;
  v19 = *(unsigned int ****)(v9 + 264);
  v71 = v9;
  if (!v19)
  {
    v21 = 0;
    v70 = 0;
    v20 = 0;
LABEL_67:
    v23 = &v19[v20];
    v19 = v70;
    goto LABEL_15;
  }
  v20 = *((unsigned int *)v19 - 1);
  v21 = &v19[v20];
  if (!*((_DWORD *)v19 - 3))
  {
    v70 = &v19[v20];
    goto LABEL_67;
  }
  if ((_DWORD)v20)
  {
    v22 = 8 * v20;
    while ((unint64_t)*v19 + 1 <= 1)
    {
      ++v19;
      v22 -= 8;
      if (!v22)
      {
        v19 = v21;
        break;
      }
    }
  }
  v23 = v21;
LABEL_15:
  v24 = &WTF::machTimebaseInfo(void)::initializeTimerOnceFlag;
  if (v21 != v19)
  {
    v73 = (char **)(v10 + 16);
    v72 = v21;
    do
    {
      v25 = **v19;
      v26 = v25[1];
      if (v26 <= 0x3FF)
      {
        v74 = *((_BYTE *)v25 + 9);
        if (v74 <= 1u)
        {
          do
          {
            v38 = (_DWORD *)(*((_QWORD *)v25 + 11) + 16 * v26);
            if (JSC::MarkedBlock::Handle::isLive((uint64_t)v25, (uint64_t)v38, v12, v13, v14, v15, v16, v17))
            {
              v39 = mach_absolute_time();
              v40 = atomic_load(v24);
              if (v40 != -1)
              {
                v78 = &v76;
                v77 = &v78;
                std::__call_once(v24, &v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
              }
              v41 = v24;
              v42 = WTF::machTimebaseInfo(void)::timebaseInfo;
              LODWORD(v8) = dword_1ECF4400C;
              v43 = *(_QWORD *)(16 * *(unsigned int *)(16 * (*v38 & 0xFFFFFFFE) + 0x4C));
              v44 = *(_QWORD *)(v10 + 8);
              *(_QWORD *)(v10 + 8) = v44 + 1;
              v45 = v44 >> 6;
              v46 = *(unsigned int *)(v10 + 28);
              if (v44 >> 6 >= v46)
              {
                v47 = WTF::fastMalloc((WTF *)0xA00);
                v78 = (char *)v47;
                v48 = *(unsigned int *)(v10 + 28);
                if ((_DWORD)v48 == *(_DWORD *)(v10 + 24))
                {
                  v49 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v73, v48 + 1, (unint64_t)&v78);
                  v48 = *(unsigned int *)(v10 + 28);
                  *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v48) = *(_QWORD *)v49;
                }
                else
                {
                  *(_QWORD *)&(*v73)[8 * v48] = v47;
                }
                v46 = (v48 + 1);
                *(_DWORD *)(v10 + 28) = v46;
                v44 = *(_QWORD *)(v10 + 8) - 1;
                v45 = v44 >> 6;
              }
              if (v45 >= v46)
              {
                __break(0xC471u);
                JUMPOUT(0x198C47BB4);
              }
              v50 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v45) + 40 * (v44 & 0x3F);
              *(_QWORD *)v50 = v38;
              *(_BYTE *)(v50 + 8) = v74;
              *(_DWORD *)(v50 + 12) = 2;
              *(double *)(v50 + 16) = (double)(v39 * v42) / ((double)v8 * 1000000000.0);
              *(_QWORD *)(v50 + 24) = v43;
              *(_QWORD *)(v50 + 32) = 0;
              *(_BYTE *)(v10 + 32) = 0;
              v24 = v41;
            }
            v26 += *v25;
          }
          while (v26 < 0x400);
        }
        else
        {
          do
          {
            v27 = *((_QWORD *)v25 + 11) + 16 * v26;
            if (JSC::MarkedBlock::Handle::isLive((uint64_t)v25, v27, v12, v13, v14, v15, v16, v17))
            {
              v28 = mach_absolute_time();
              v29 = atomic_load(v24);
              if (v29 != -1)
              {
                v78 = &v76;
                v77 = &v78;
                std::__call_once(v24, &v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
              }
              v30 = WTF::machTimebaseInfo(void)::timebaseInfo;
              LODWORD(v8) = dword_1ECF4400C;
              v31 = *(_QWORD *)(v10 + 8);
              *(_QWORD *)(v10 + 8) = v31 + 1;
              v32 = v31 >> 6;
              v33 = *(unsigned int *)(v10 + 28);
              if (v31 >> 6 >= v33)
              {
                v34 = WTF::fastMalloc((WTF *)0xA00);
                v78 = (char *)v34;
                v35 = *(unsigned int *)(v10 + 28);
                if ((_DWORD)v35 == *(_DWORD *)(v10 + 24))
                {
                  v36 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v73, v35 + 1, (unint64_t)&v78);
                  v35 = *(unsigned int *)(v10 + 28);
                  *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v35) = *(_QWORD *)v36;
                }
                else
                {
                  *(_QWORD *)&(*v73)[8 * v35] = v34;
                }
                v33 = (v35 + 1);
                *(_DWORD *)(v10 + 28) = v33;
                v31 = *(_QWORD *)(v10 + 8) - 1;
                v32 = v31 >> 6;
              }
              if (v32 >= v33)
              {
                __break(0xC471u);
                JUMPOUT(0x198C47BACLL);
              }
              v37 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v32) + 40 * (v31 & 0x3F);
              *(_QWORD *)v37 = v27;
              *(_BYTE *)(v37 + 8) = v74;
              *(_DWORD *)(v37 + 12) = 2;
              *(double *)(v37 + 16) = (double)(v28 * v30) / ((double)v8 * 1000000000.0);
              *(_QWORD *)(v37 + 24) = 0;
              *(_QWORD *)(v37 + 32) = 0;
              *(_BYTE *)(v10 + 32) = 0;
            }
            v26 += *v25;
          }
          while (v26 <= 0x3FF);
        }
      }
      v51 = v19 + 1;
      v19 = v23;
      if (v51 != v23)
      {
        v19 = v51;
        while ((unint64_t)*v19 + 1 <= 1)
        {
          if (++v19 == v23)
          {
            v19 = v23;
            break;
          }
        }
      }
    }
    while (v19 != v72);
  }
  v52 = *(unsigned int *)(v71 + 196);
  if ((_DWORD)v52)
  {
    v53 = *(uint64_t **)(v71 + 184);
    v75 = (char **)(v10 + 16);
    v54 = 8 * v52;
    do
    {
      v55 = *v53;
      if ((*(_BYTE *)(*v53 + 33) & 1) != 0 || (*(_BYTE *)(v55 + 32) & 1) != 0)
      {
        v56 = *(unsigned __int16 *)(v55 + 34);
        v57 = mach_absolute_time();
        v58 = atomic_load(v24);
        if (v58 != -1)
        {
          v78 = &v76;
          v77 = &v78;
          std::__call_once(v24, &v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
        }
        v59 = (_DWORD *)(v55 + 112);
        v60 = v56 >> 8;
        v61 = WTF::machTimebaseInfo(void)::timebaseInfo;
        LODWORD(v8) = dword_1ECF4400C;
        if (v56 >> 8 <= 1)
          v62 = *(_QWORD *)(16 * *(unsigned int *)(16 * (*v59 & 0xFFFFFFFE) + 0x4C));
        else
          v62 = 0;
        v63 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = v63 + 1;
        v64 = v63 >> 6;
        v65 = *(unsigned int *)(v10 + 28);
        if (v63 >> 6 >= v65)
        {
          v66 = WTF::fastMalloc((WTF *)0xA00);
          v78 = (char *)v66;
          v67 = *(unsigned int *)(v10 + 28);
          if ((_DWORD)v67 == *(_DWORD *)(v10 + 24))
          {
            v68 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75, v67 + 1, (unint64_t)&v78);
            v67 = *(unsigned int *)(v10 + 28);
            *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v67) = *(_QWORD *)v68;
          }
          else
          {
            *(_QWORD *)&(*v75)[8 * v67] = v66;
          }
          v65 = (v67 + 1);
          *(_DWORD *)(v10 + 28) = v65;
          v63 = *(_QWORD *)(v10 + 8) - 1;
          v64 = v63 >> 6;
        }
        if (v64 >= v65)
        {
          __break(0xC471u);
          JUMPOUT(0x198C47BBCLL);
        }
        v69 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v64) + 40 * (v63 & 0x3F);
        *(_QWORD *)v69 = v59;
        *(_BYTE *)(v69 + 8) = v60;
        *(_DWORD *)(v69 + 12) = 2;
        *(double *)(v69 + 16) = (double)(v57 * v61) / ((double)v8 * 1000000000.0);
        *(_QWORD *)(v69 + 24) = v62;
        *(_QWORD *)(v69 + 32) = 0;
        *(_BYTE *)(v10 + 32) = 0;
      }
      ++v53;
      v54 -= 8;
    }
    while (v54);
  }
}

void JSC::HeapVerifier::trimDeadCells(JSC::HeapVerifier *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  int v22;
  JSC::HeapVerifier *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  _BYTE *v27;
  uint64_t *v28;
  unsigned int *v29;
  _QWORD *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t j;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  unsigned int v127;
  unint64_t v128;
  uint64_t i;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  int v151;
  _QWORD *v152;
  _QWORD *v153;
  unsigned int *v154;
  unsigned int *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  int *v160;
  int *v161;
  _BYTE *v162;
  uint64_t *v163;
  unint64_t StatusReg;
  _QWORD *v165;
  unsigned int *v166;

  v8 = *((_DWORD *)this + 2);
  v9 = *((_QWORD *)this + 3);
  v10 = v9 + 112 * v8;
  v11 = *(_QWORD *)(v10 + 24);
  if (v11)
  {
    v12 = 0;
    v13 = v10 + 64;
    v14 = v9 + 112 * v8;
    v15 = (unsigned int *)(v14 + 44);
    v16 = (_QWORD *)(v14 + 32);
    do
    {
      if (v12 >> 6 >= *v15)
      {
LABEL_167:
        __break(0xC471u);
        JUMPOUT(0x198C48690);
      }
      v17 = *(_QWORD *)(*v16 + 8 * (v12 >> 6));
      v18 = v17 + 40 * (v12 & 0x3F);
      v20 = *(_DWORD *)(v18 + 12);
      v19 = (int *)(v18 + 12);
      if (v20 != 1)
      {
        JSC::CellList::find(v13, *(void **)(v17 + 40 * (v12 & 0x3F)), a3, a4, a5, a6, a7, a8);
        if (v21)
          v22 = 2;
        else
          v22 = 1;
        *v19 = v22;
      }
      ++v12;
    }
    while (v11 != v12);
  }
  v23 = this;
  v24 = *((_DWORD *)this + 3);
  if (v24 >= 2)
  {
    v25 = v9 + 112 * v8;
    v26 = (uint64_t *)(v25 + 72);
    v27 = (_BYTE *)(v25 + 96);
    v28 = (uint64_t *)(v25 + 104);
    v29 = (unsigned int *)(v25 + 92);
    v30 = (_QWORD *)(v25 + 80);
    v31 = -1;
    v163 = (uint64_t *)(v25 + 72);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v162 = (_BYTE *)(v25 + 96);
    v165 = (_QWORD *)(v25 + 80);
    v166 = (unsigned int *)(v25 + 92);
LABEL_12:
    v32 = *((_DWORD *)v23 + 2) + v31;
    v33 = (v24 & (v32 >> 31)) + v32;
    v34 = *((_QWORD *)v23 + 3);
    v35 = *(_QWORD *)(v34 + 112 * v33 + 24);
    v151 = v31;
    if (!v35)
      goto LABEL_86;
    v36 = 0;
    v37 = v34 + 112 * v33;
    v38 = (unsigned int *)(v37 + 44);
    v39 = (_QWORD *)(v37 + 32);
    v154 = (unsigned int *)(v37 + 44);
    v156 = v35;
    v152 = (_QWORD *)(v37 + 32);
    while (1)
    {
      if (v36 >> 6 >= *v38)
      {
        __break(0xC471u);
        JUMPOUT(0x198C486A0);
      }
      v40 = *(_QWORD *)(*v39 + 8 * (v36 >> 6));
      v41 = v40 + 40 * (v36 & 0x3F);
      v43 = *(_DWORD *)(v41 + 12);
      v42 = (int *)(v41 + 12);
      if (v43 != 1)
        break;
LABEL_84:
      if (++v36 == v35)
      {
        v23 = this;
        v32 = *((_DWORD *)this + 2) + v151;
LABEL_86:
        if (v32 < 0)
          v32 += *((_DWORD *)v23 + 3);
        v92 = *((_QWORD *)v23 + 3);
        v93 = *(_QWORD *)(v92 + 112 * v32 + 72);
        if (v93)
        {
          v94 = 0;
          v95 = v92 + 112 * v32;
          v96 = (unsigned int *)(v95 + 92);
          v97 = (_QWORD *)(v95 + 80);
          v155 = (unsigned int *)(v95 + 92);
          v157 = v93;
          v153 = (_QWORD *)(v95 + 80);
          while (2)
          {
            if (v94 >> 6 >= *v96)
            {
              __break(0xC471u);
              JUMPOUT(0x198C486A8);
            }
            v98 = *(_QWORD *)(*v97 + 8 * (v94 >> 6));
            v99 = v98 + 40 * (v94 & 0x3F);
            v101 = *(_DWORD *)(v99 + 12);
            v100 = (int *)(v99 + 12);
            if (v101 == 1)
              goto LABEL_160;
            v102 = *v26;
            if (!*v26)
              goto LABEL_155;
            v103 = *(_QWORD *)(v98 + 40 * (v94 & 0x3F));
            v104 = *v28;
            if (*v27)
            {
              if (!v104)
              {
LABEL_156:
                if (v104)
                  v149 = 2;
                else
                  v149 = 1;
                *v100 = v149;
LABEL_160:
                if (++v94 == v93)
                  goto LABEL_161;
                continue;
              }
LABEL_150:
              v142 = *(_DWORD *)(v104 - 8);
              v143 = (~(v103 << 32) + v103) ^ ((~(v103 << 32) + v103) >> 22);
              v144 = 9 * ((v143 + ~(v143 << 13)) ^ ((v143 + ~(v143 << 13)) >> 8));
              v145 = (v144 ^ (v144 >> 15)) + ~((v144 ^ (v144 >> 15)) << 27);
              v146 = v142 & ((v145 >> 31) ^ v145);
              v147 = *(_QWORD *)(v104 + 16 * v146);
              if (v147 == v103)
              {
LABEL_154:
                v104 = *(_QWORD *)(v104 + 16 * v146 + 8);
                goto LABEL_156;
              }
              v148 = 1;
              while (v147)
              {
                v146 = ((_DWORD)v146 + v148) & v142;
                v147 = *(_QWORD *)(v104 + 16 * v146);
                ++v148;
                if (v147 == v103)
                  goto LABEL_154;
              }
LABEL_155:
              v104 = 0;
              goto LABEL_156;
            }
            break;
          }
          v159 = v103;
          v161 = v100;
          if (v104)
          {
            *v28 = 0;
            WTF::fastFree(v104 - 16, (void *)v103, a3, a4, a5, a6, a7, a8);
            v102 = *v26;
            if (!*v26)
            {
LABEL_149:
              v27 = v162;
              v26 = v163;
              *v162 = 1;
              v104 = *v28;
              v96 = v155;
              v93 = v157;
              v97 = v153;
              v103 = v159;
              v100 = v161;
              if (!*v28)
                goto LABEL_156;
              goto LABEL_150;
            }
          }
          v105 = 0;
          while (2)
          {
            if (v105 >> 6 >= *v29)
            {
              __break(0xC471u);
              JUMPOUT(0x198C48698);
            }
            v106 = (uint64_t *)(*(_QWORD *)(*v30 + 8 * (v105 >> 6)) + 40 * (v105 & 0x3F));
            v107 = *v106;
            v108 = *v28;
            if (*v28
              || (v109 = WTF::fastZeroedMalloc(0x90uLL, v103, a3, a4, a5, a6, a7, a8),
                  *v28 = v109 + 16,
                  *(_DWORD *)(v109 + 12) = 8,
                  *(_DWORD *)(*v28 - 8) = 7,
                  *(_DWORD *)(*v28 - 16) = 0,
                  *(_DWORD *)(*v28 - 12) = 0,
                  (v108 = *v28) != 0))
            {
              v110 = *(_DWORD *)(v108 - 8);
            }
            else
            {
              v110 = 0;
            }
            v111 = (~(v107 << 32) + v107) ^ ((unint64_t)(~(v107 << 32) + v107) >> 22);
            v112 = 9 * ((v111 + ~(v111 << 13)) ^ ((v111 + ~(v111 << 13)) >> 8));
            v113 = (v112 ^ (v112 >> 15)) + ~((v112 ^ (v112 >> 15)) << 27);
            v114 = v110 & ((v113 >> 31) ^ v113);
            v115 = (_QWORD *)(v108 + 16 * v114);
            v116 = *v115;
            if (*v115)
            {
              v117 = 0;
              v118 = 1;
              while (v116 != v107)
              {
                if (v116 == -1)
                  v117 = v115;
                v114 = (v114 + v118) & v110;
                v115 = (_QWORD *)(v108 + 16 * v114);
                v116 = *v115;
                ++v118;
                if (!*v115)
                {
                  if (v117)
                  {
                    *v117 = 0;
                    v117[1] = 0;
                    --*(_DWORD *)(*v28 - 16);
                    v115 = v117;
                  }
                  goto LABEL_111;
                }
              }
LABEL_138:
              if (++v105 == v102)
                goto LABEL_149;
              continue;
            }
            break;
          }
LABEL_111:
          *v115 = v107;
          v115[1] = v106;
          v119 = *v28;
          if (*v28)
            v120 = *(_DWORD *)(v119 - 12) + 1;
          else
            v120 = 1;
          *(_DWORD *)(v119 - 12) = v120;
          v121 = *v28;
          if (*v28)
            v122 = *(_DWORD *)(v121 - 12);
          else
            v122 = 0;
          v123 = v121 - 16;
          v124 = (*(_DWORD *)(v121 - 16) + v122);
          v125 = *(unsigned int *)(v121 - 4);
          if (v125 > 0x400)
          {
            if (v125 > 2 * v124)
              goto LABEL_138;
LABEL_120:
            v126 = *(_DWORD *)(v121 - 12);
            v127 = (_DWORD)v125 << (6 * v126 >= (2 * v125));
          }
          else
          {
            if (3 * v125 > 4 * v124)
              goto LABEL_138;
            if ((_DWORD)v125)
              goto LABEL_120;
            v126 = *(_DWORD *)(v121 - 12);
            v127 = 8;
          }
          v128 = WTF::fastZeroedMalloc(16 * v127 + 16, v103, a3, a4, a5, a6, a7, a8);
          *v28 = v128 + 16;
          *(_DWORD *)(v128 + 12) = v127;
          *(_DWORD *)(*v28 - 8) = v127 - 1;
          *(_DWORD *)(*v28 - 16) = 0;
          *(_DWORD *)(*v28 - 12) = v126;
          v30 = v165;
          v29 = v166;
          if ((_DWORD)v125)
          {
            for (i = 0; i != v125; ++i)
            {
              v130 = (_QWORD *)(v121 + 16 * i);
              if ((unint64_t)(*v130 + 1) >= 2)
              {
                v131 = *v28;
                if (*v28)
                  v132 = *(_DWORD *)(v131 - 8);
                else
                  v132 = 0;
                v133 = (~(*v130 << 32) + *v130) ^ ((~(*v130 << 32) + *v130) >> 22);
                v134 = 9 * ((v133 + ~(v133 << 13)) ^ ((unint64_t)(v133 + ~(v133 << 13)) >> 8));
                v135 = (v134 ^ (v134 >> 15)) + ~((v134 ^ (v134 >> 15)) << 27);
                v136 = v132 & ((v135 >> 31) ^ v135);
                v137 = 1;
                do
                {
                  v138 = v136;
                  v139 = *(_QWORD *)(v131 + 16 * v136);
                  v136 = (v136 + v137++) & v132;
                }
                while (v139);
                *(_OWORD *)(v131 + 16 * v138) = *(_OWORD *)v130;
              }
            }
          }
          v140 = *(_QWORD *)(StatusReg + 752);
          if (!v140)
          {
            pas_try_deallocate_slow_no_cache(v121 - 16, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_138;
          }
          if (!(v123 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                 + (((unint64_t)(v121 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v121 - 16) >> 24)) & 1) != 0)
          {
LABEL_136:
            v141 = *(unsigned int *)(v140 + 8000);
            if (v141 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v140, v121 - 16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v140 + 8 * v141) = v123 | 0x5000000000000;
              *(_DWORD *)(v140 + 8000) = v141 + 1;
            }
            goto LABEL_138;
          }
          if (v123 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v123 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8
                            + (((((unint64_t)(v121 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2 * ((((v121 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_136;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v140, v121 - 16, 1, a4, a5, a6, a7, a8);
          goto LABEL_138;
        }
LABEL_161:
        v31 = v151 - 1;
        v23 = this;
        v24 = *((_DWORD *)this + 3);
        if (v151 - 1 <= -v24)
          return;
        goto LABEL_12;
      }
    }
    v44 = *v26;
    if (!*v26)
      goto LABEL_79;
    v45 = *(_QWORD *)(v40 + 40 * (v36 & 0x3F));
    v46 = *v28;
    if (*v27)
    {
      if (!v46)
        goto LABEL_80;
LABEL_74:
      v84 = *(_DWORD *)(v46 - 8);
      v85 = (~(v45 << 32) + v45) ^ ((~(v45 << 32) + v45) >> 22);
      v86 = 9 * ((v85 + ~(v85 << 13)) ^ ((v85 + ~(v85 << 13)) >> 8));
      v87 = (v86 ^ (v86 >> 15)) + ~((v86 ^ (v86 >> 15)) << 27);
      v88 = v84 & ((v87 >> 31) ^ v87);
      v89 = *(_QWORD *)(v46 + 16 * v88);
      if (v89 != v45)
      {
        v90 = 1;
        while (v89)
        {
          v88 = ((_DWORD)v88 + v90) & v84;
          v89 = *(_QWORD *)(v46 + 16 * v88);
          ++v90;
          if (v89 == v45)
            goto LABEL_78;
        }
LABEL_79:
        v46 = 0;
        goto LABEL_80;
      }
LABEL_78:
      v46 = *(_QWORD *)(v46 + 16 * v88 + 8);
LABEL_80:
      if (v46)
        v91 = 2;
      else
        v91 = 1;
      *v42 = v91;
      goto LABEL_84;
    }
    v158 = v45;
    v160 = v42;
    if (v46)
    {
      *v28 = 0;
      WTF::fastFree(v46 - 16, (void *)v45, a3, a4, a5, a6, a7, a8);
      v44 = *v26;
      if (!*v26)
      {
LABEL_73:
        v27 = v162;
        v26 = v163;
        *v162 = 1;
        v46 = *v28;
        v38 = v154;
        v35 = v156;
        v39 = v152;
        v45 = v158;
        v42 = v160;
        if (!*v28)
          goto LABEL_80;
        goto LABEL_74;
      }
    }
    v47 = 0;
    while (1)
    {
      if (v47 >> 6 >= *v29)
        goto LABEL_167;
      v48 = (uint64_t *)(*(_QWORD *)(*v30 + 8 * (v47 >> 6)) + 40 * (v47 & 0x3F));
      v49 = *v48;
      v50 = *v28;
      if (*v28
        || (v51 = WTF::fastZeroedMalloc(0x90uLL, v45, a3, a4, a5, a6, a7, a8),
            *v28 = v51 + 16,
            *(_DWORD *)(v51 + 12) = 8,
            *(_DWORD *)(*v28 - 8) = 7,
            *(_DWORD *)(*v28 - 16) = 0,
            *(_DWORD *)(*v28 - 12) = 0,
            (v50 = *v28) != 0))
      {
        v52 = *(_DWORD *)(v50 - 8);
      }
      else
      {
        v52 = 0;
      }
      v53 = (~(v49 << 32) + v49) ^ ((unint64_t)(~(v49 << 32) + v49) >> 22);
      v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
      v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
      v56 = v52 & ((v55 >> 31) ^ v55);
      v57 = (_QWORD *)(v50 + 16 * v56);
      v58 = *v57;
      if (*v57)
      {
        v59 = 0;
        v60 = 1;
        while (v58 != v49)
        {
          if (v58 == -1)
            v59 = v57;
          v56 = (v56 + v60) & v52;
          v57 = (_QWORD *)(v50 + 16 * v56);
          v58 = *v57;
          ++v60;
          if (!*v57)
          {
            if (v59)
            {
              *v59 = 0;
              v59[1] = 0;
              --*(_DWORD *)(*v28 - 16);
              v57 = v59;
            }
            goto LABEL_35;
          }
        }
        goto LABEL_62;
      }
LABEL_35:
      *v57 = v49;
      v57[1] = v48;
      v61 = *v28;
      v62 = *v28 ? *(_DWORD *)(v61 - 12) + 1 : 1;
      *(_DWORD *)(v61 - 12) = v62;
      v63 = *v28;
      v64 = *v28 ? *(_DWORD *)(v63 - 12) : 0;
      v65 = v63 - 16;
      v66 = (*(_DWORD *)(v63 - 16) + v64);
      v67 = *(unsigned int *)(v63 - 4);
      if (v67 > 0x400)
        break;
      if (3 * v67 > 4 * v66)
        goto LABEL_62;
      if ((_DWORD)v67)
        goto LABEL_44;
      v68 = *(_DWORD *)(v63 - 12);
      v69 = 8;
LABEL_47:
      v70 = WTF::fastZeroedMalloc(16 * v69 + 16, v45, a3, a4, a5, a6, a7, a8);
      *v28 = v70 + 16;
      *(_DWORD *)(v70 + 12) = v69;
      *(_DWORD *)(*v28 - 8) = v69 - 1;
      *(_DWORD *)(*v28 - 16) = 0;
      *(_DWORD *)(*v28 - 12) = v68;
      v30 = v165;
      v29 = v166;
      if ((_DWORD)v67)
      {
        for (j = 0; j != v67; ++j)
        {
          v72 = (_QWORD *)(v63 + 16 * j);
          if ((unint64_t)(*v72 + 1) >= 2)
          {
            v73 = *v28;
            if (*v28)
              v74 = *(_DWORD *)(v73 - 8);
            else
              v74 = 0;
            v75 = (~(*v72 << 32) + *v72) ^ ((~(*v72 << 32) + *v72) >> 22);
            v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((unint64_t)(v75 + ~(v75 << 13)) >> 8));
            v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
            v78 = v74 & ((v77 >> 31) ^ v77);
            v79 = 1;
            do
            {
              v80 = v78;
              v81 = *(_QWORD *)(v73 + 16 * v78);
              v78 = (v78 + v79++) & v74;
            }
            while (v81);
            *(_OWORD *)(v73 + 16 * v80) = *(_OWORD *)v72;
          }
        }
      }
      v82 = *(_QWORD *)(StatusReg + 752);
      if (v82)
      {
        if (!(v65 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                               + (((unint64_t)(v63 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v63 - 16) >> 24)) & 1) != 0)
        {
LABEL_60:
          v83 = *(unsigned int *)(v82 + 8000);
          if (v83 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v82, v63 - 16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v82 + 8 * v83) = v65 | 0x5000000000000;
            *(_DWORD *)(v82 + 8000) = v83 + 1;
          }
          goto LABEL_62;
        }
        if (v65 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v65 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8
                          + (((((unint64_t)(v63 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                          + 24) >> (2 * ((((v63 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_60;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v82, v63 - 16, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v63 - 16, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_62:
      if (++v47 == v44)
        goto LABEL_73;
    }
    if (v67 > 2 * v66)
      goto LABEL_62;
LABEL_44:
    v68 = *(_DWORD *)(v63 - 12);
    v69 = (_DWORD)v67 << (6 * v68 >= (2 * v67));
    goto LABEL_47;
  }
}

uint64_t WTF::dataLog<char [21],int,char [3],WTF::Thread,char [6],WTF::RawPointer,char [5],JSC::CollectionScope,char [7],WTF::MonotonicTime,char [2]>(_DWORD *a1, const void *a2, const void **a3, _BYTE *a4, double *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  const char *v14;
  WTF::PrintStream *v15;
  WTF::PrintStream *v16;
  uint64_t result;
  char v18;
  char **v19;
  char *v20;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", "Verifying heap in [p");
  WTF::PrintStream::printf(v12, "%d", *a1);
  WTF::PrintStream::printf(v12, "%s", ", ");
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
  WTF::PrintStream::printf(v13, "%s", "Thread:");
  WTF::PrintStream::printf(v13, "%p", a2);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
  WTF::PrintStream::printf(v12, "%s", "] vm ");
  WTF::PrintStream::printf(v12, "%p", *a3);
  WTF::PrintStream::printf(v12, "%s", " on ");
  if (!*a4)
  {
    v14 = "Eden";
    goto LABEL_7;
  }
  if (*a4 == 1)
  {
    v14 = "Full";
LABEL_7:
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
    WTF::PrintStream::printf(v15, "%s", v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
    WTF::PrintStream::printf(v12, "%s", " GC @ ");
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
    WTF::PrintStream::printf(v16, "%s", "Monotonic(");
    WTF::PrintStream::printf(v16, "%lf", *a5);
    WTF::PrintStream::printf(v16, "%s", " sec)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
    WTF::PrintStream::printf(v12, "%s", "\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  }
  result = 41;
  __break(0xC471u);
  return result;
}

uint64_t JSC::HeapVerifier::validateJSCell(const void *a1, unint64_t a2, _QWORD *a3, uint64_t a4, void (**a5)(_QWORD), const char *a6, uint64_t a7, uint64_t a8)
{
  int v11;
  const void **v13;
  const void *v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const void *v19;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  const void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int *v30;
  unint64_t v31;
  unsigned int *v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t *v44;
  _DWORD *v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  const void *v49;
  const void *v50[4];
  const char *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;

  v51 = a6;
  v52 = a6;
  v50[1] = (const void *)a2;
  v50[2] = a3;
  v50[3] = a5;
  v11 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
  {
    (*a5)(a5[1]);
    v54 = a2;
    WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
    if (a3)
    {
      v54 = a3[3];
      WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
    }
    WTF::dataLog<char [16]>(" is zapped\n");
    return 0;
  }
  if (!a1)
    return 1;
  v13 = (const void **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
  if ((a2 & 8) != 0)
    v13 = (const void **)(a2 - 16);
  v14 = *v13;
  if (*v13 != a1)
  {
    (*a5)(a5[1]);
    v54 = a2;
    WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
    if (a3)
    {
      v54 = a3[3];
      WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
    }
    v53 = (uint64_t)v14;
    v54 = (uint64_t)a1;
    WTF::dataLog<char [35],WTF::RawPointer,char [9],WTF::RawPointer,char [2]>((const void **)&v54, (const void **)&v53);
    return 0;
  }
  v16 = v11 & 0xFFFFFFFE;
  if ((v11 & 0xFFFFFFFE) == 0)
  {
    (*a5)(a5[1]);
    v54 = a2;
    WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
    if (a3)
    {
      v54 = a3[3];
      WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
    }
    LODWORD(v54) = v11;
    WTF::dataLog<char [19],unsigned int,char [35]>(&v54);
    return 0;
  }
  v17 = 16 * v16;
  v18 = *(_DWORD *)(16 * v16);
  if (!v18)
  {
    (*a5)(a5[1]);
    v54 = a2;
    WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
    if (a3)
    {
      v54 = a3[3];
      WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
    }
    v54 = v17;
    WTF::dataLog<char [23],WTF::RawPointer,char [2]>((const void **)&v54);
    return 0;
  }
  v19 = *(const void **)((v17 & 0xFFFFFC000) + 8);
  if (v19 != a1)
  {
    (*a5)(a5[1]);
    v54 = a2;
    WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
    if (a3)
    {
      v54 = a3[3];
      WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
    }
    v53 = (uint64_t)a1;
    v54 = v17;
    v50[0] = v19;
    WTF::dataLog<char [16],WTF::RawPointer,char [32],WTF::RawPointer,char [9],WTF::RawPointer,char [2]>((const void **)&v54, (const void **)&v53, v50);
    return 0;
  }
  if (a4)
  {
    JSC::CellList::find(a4, (void *)v17, (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    if (!v21)
    {
      (*a5)(a5[1]);
      v54 = a2;
      WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
      if (a3)
      {
        v54 = a3[3];
        WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
      }
      v54 = v17;
      WTF::dataLog<char [16],WTF::RawPointer,char [34]>((const void **)&v54);
      return 0;
    }
    if (*(_DWORD *)(v21 + 12) != 2)
    {
      (*a5)(a5[1]);
      v54 = a2;
      WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
      if (a3)
      {
        v54 = a3[3];
        WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
      }
      v54 = v17;
      WTF::dataLog<char [21],WTF::RawPointer,char [2]>((const void **)&v54);
      return 0;
    }
    v18 = *(_DWORD *)v17;
    if (!*(_DWORD *)v17)
    {
      (*a5)(a5[1]);
      v54 = a2;
      WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
      if (a3)
      {
        v54 = a3[3];
        WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
      }
      v54 = v17;
      v25 = " with a NULL structureID\n";
      goto LABEL_50;
    }
  }
  v22 = v18 & 0xFFFFFFFE;
  if (!v22)
  {
    (*a5)(a5[1]);
    v54 = a2;
    WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
    if (a3)
    {
      v54 = a3[3];
      WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
    }
    v54 = v17;
    v25 = " whose structure is NULL\n";
LABEL_50:
    WTF::dataLog<char [16],WTF::RawPointer,char [26]>((const void **)&v54, v25);
    return 0;
  }
  v23 = 16 * v22;
  if (!*(_DWORD *)v23)
  {
    (*a5)(a5[1]);
    v54 = a2;
    WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
    if (a3)
    {
      v54 = a3[3];
      WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
    }
    v53 = v23;
    v54 = v17;
    WTF::dataLog<char [16],WTF::RawPointer,char [18],WTF::RawPointer,char [12]>((const void **)&v54, (const void **)&v53);
    return 0;
  }
  v24 = *(const void **)((v23 & 0xFFFFFC000) + 8);
  if (v24 != a1)
  {
    (*a5)(a5[1]);
    v54 = a2;
    WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
    if (a3)
    {
      v54 = a3[3];
      WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
    }
    v53 = v23;
    v54 = v17;
    v49 = v24;
    v50[0] = a1;
    WTF::dataLog<char [16],WTF::RawPointer,char [18],WTF::RawPointer,char [35],WTF::RawPointer,char [9],WTF::RawPointer,char [2]>((const void **)&v54, (const void **)&v53, v50, &v49);
    return 0;
  }
  if (a4)
  {
    JSC::CellList::find(a4, (void *)v23, (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    if (!v26)
    {
      (*a5)(a5[1]);
      v54 = a2;
      WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
      if (a3)
      {
        v54 = a3[3];
        WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
      }
      v53 = v23;
      v54 = v17;
      WTF::dataLog<char [16],WTF::RawPointer,char [18],WTF::RawPointer,char [37]>((const void **)&v54, (const void **)&v53);
      return 0;
    }
    if (*(_DWORD *)(v26 + 12) != 2)
    {
      (*a5)(a5[1]);
      v54 = a2;
      WTF::dataLog<char const*,char [6],WTF::RawPointer>(&v51, (const void **)&v54);
      if (a3)
      {
        v54 = a3[3];
        WTF::dataLog<char [3],char const*,char [2]>((const char **)&v54);
      }
      v53 = v23;
      v54 = v17;
      WTF::dataLog<char [16],WTF::RawPointer,char [18],WTF::RawPointer,char [10]>((const void **)&v54, (const void **)&v53);
      return 0;
    }
  }
  if (*(_BYTE *)(a2 + 5) == 18)
  {
    v27 = 0;
    v28 = 0;
    v29 = 1;
    while (1)
    {
      v30 = *(unsigned int **)(a2 + 152);
      v31 = v30 ? *v30 : 0;
      if (v28 >= v31)
        break;
      if (v28 >= *v30)
      {
        __break(0xC471u);
        JUMPOUT(0x198C48F48);
      }
      v32 = &v30[v27];
      v33 = *(_QWORD *)&v30[v27 + 2];
      if (v33)
        v34 = (v33 & 0xFFFE000000000002) == 0;
      else
        v34 = 0;
      if (v34 && !*(_DWORD *)v33)
      {
        (*a5)(a5[1]);
        v53 = v33;
        v54 = a2;
        WTF::dataLog<char const*,char [11],WTF::RawPointer,char [31],WTF::RawPointer,char [2]>(&v52, (const void **)&v54, (const void **)&v53);
        v29 = 0;
      }
      v35 = *((_QWORD *)v32 + 2);
      if (v35)
        v36 = (v35 & 0xFFFE000000000002) == 0;
      else
        v36 = 0;
      if (v36 && !*(_DWORD *)v35)
      {
        (*a5)(a5[1]);
        v53 = v35;
        v54 = a2;
        WTF::dataLog<char const*,char [11],WTF::RawPointer,char [31],WTF::RawPointer,char [2]>(&v52, (const void **)&v54, (const void **)&v53);
        v29 = 0;
      }
      ++v28;
      v27 += 6;
    }
    v37 = *(_QWORD *)(a2 + 136);
    if (!v37)
      return v29 != 0;
    v38 = *(_QWORD *)(v37 - 16);
    do
      v39 = __ldaxr((unsigned int *)v38);
    while (__stlxr(v39 + 1, (unsigned int *)v38));
    v40 = -*(_DWORD *)(v38 + 8);
    do
    {
      v41 = __ldaxr((unsigned int *)v38);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, (unsigned int *)v38));
    if (v42)
    {
      if ((v40 & 0x80000000) == 0)
        return v29 != 0;
    }
    else
    {
      atomic_store(1u, (unsigned int *)v38);
      if ((*(_BYTE *)(v38 + 4) & 1) != 0)
        WTF::fastFree(*(_QWORD *)(v38 + 16), (void *)a2, (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
      WTF::fastFree(v38, (void *)a2, (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
      if ((v40 & 0x80000000) == 0)
        return v29 != 0;
    }
    v43 = 0;
    v44 = (unint64_t *)(v37 - 32);
    do
    {
      v46 = *v44;
      v44 -= 2;
      v45 = (_DWORD *)v46;
      v47 = v46 & 0xFFFE000000000002;
      if (v46)
        v48 = v47 == 0;
      else
        v48 = 0;
      if (v48 && !*v45)
      {
        (*a5)(a5[1]);
        v53 = (uint64_t)v45;
        v54 = a2;
        WTF::dataLog<char const*,char [11],WTF::RawPointer,char [31],WTF::RawPointer,char [2]>(&v52, (const void **)&v54, (const void **)&v53);
        v29 = 0;
      }
      --v43;
    }
    while (v43 > v40);
    return v29 != 0;
  }
  return 1;
}

uint64_t JSC::HeapVerifier::validateCell(unint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v8;
  unint64_t v10;
  void (*v11[3])(_QWORD);

  v11[0] = (void (*)(_QWORD))WTF::ScopedLambdaFunctor<void ()(void),JSC::HeapVerifier::validateCell(JSC::HeapCell *,JSC::VM *)::$_0>::implFunction;
  v11[1] = (void (*)(_QWORD))v11;
  if (*(_DWORD *)a1)
  {
    if ((a1 & 8) != 0)
      v8 = (unsigned __int16 *)(a1 - 78);
    else
      v8 = (unsigned __int16 *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFC000) + 8);
    if (*v8 > 0x1FFu)
      return 1;
    else
      return JSC::HeapVerifier::validateJSCell(a2, a1, 0, 0, v11, "", a7, a8);
  }
  else
  {
    v10 = a1;
    WTF::dataLog<char [10],WTF::RawPointer,char [12]>((const void **)&v10);
    return 0;
  }
}

uint64_t WTF::dataLog<char [10],WTF::RawPointer,char [12]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    cell ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", " is ZAPPED\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [35],WTF::RawPointer,char [9],WTF::RawPointer,char [2]>(const void **a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", " is from a different VM: expected:");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " actual:");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [19],unsigned int,char [35]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", " with structureID ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", " maps to a NULL Structure pointer\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [23],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", " has ZAPPED structure ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [16],WTF::RawPointer,char [32],WTF::RawPointer,char [9],WTF::RawPointer,char [2]>(const void **a1, const void **a2, const void **a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", " has structure ");
  WTF::PrintStream::printf(v8, "%p", *a1);
  WTF::PrintStream::printf(v8, "%s", " from a different VM: expected:");
  WTF::PrintStream::printf(v8, "%p", *a2);
  WTF::PrintStream::printf(v8, "%s", " actual:");
  WTF::PrintStream::printf(v8, "%p", *a3);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [16],WTF::RawPointer,char [34]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", " has structure ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", " NOT found in the live cell list\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [21],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", " has DEAD structure ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [16],WTF::RawPointer,char [26]>(const void **a1, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", " has structure ");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [16],WTF::RawPointer,char [18],WTF::RawPointer,char [12]>(const void **a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", " has structure ");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " whose structure ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", " is ZAPPED\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [16],WTF::RawPointer,char [18],WTF::RawPointer,char [35],WTF::RawPointer,char [9],WTF::RawPointer,char [2]>(const void **a1, const void **a2, const void **a3, const void **a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", " has structure ");
  WTF::PrintStream::printf(v10, "%p", *a1);
  WTF::PrintStream::printf(v10, "%s", " whose structure ");
  WTF::PrintStream::printf(v10, "%p", *a2);
  WTF::PrintStream::printf(v10, "%s", " is from a different VM: expected:");
  WTF::PrintStream::printf(v10, "%p", *a3);
  WTF::PrintStream::printf(v10, "%s", " actual:");
  WTF::PrintStream::printf(v10, "%p", *a4);
  WTF::PrintStream::printf(v10, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

uint64_t WTF::dataLog<char [16],WTF::RawPointer,char [18],WTF::RawPointer,char [37]>(const void **a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", " has structure ");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " whose structure ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", " is NOT found in the live cell list\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [16],WTF::RawPointer,char [18],WTF::RawPointer,char [10]>(const void **a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", " has structure ");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " whose structure ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", " is DEAD\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t JSC::HeapVerifier::verify(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(_QWORD);
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  uint64_t v17;
  unsigned int *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22[7])(_QWORD);
  char v23;
  int v24;

  if (a2 == 3)
  {
    v8 = *(_DWORD *)(result + 8);
    v9 = *(_QWORD *)(result + 24);
    v10 = v9 + 112 * v8;
    v24 = 3;
    v11 = *(_QWORD *)result;
    v23 = 0;
    v14 = *(_QWORD *)(v10 + 72);
    v13 = (void (*)(_QWORD))(v10 + 72);
    v12 = v14;
    v22[0] = (void (*)(_QWORD))WTF::ScopedLambdaFunctor<void ()(void),JSC::HeapVerifier::verifyCellList(JSC::HeapVerifier::Phase,JSC::CellList &)::$_0>::implFunction;
    v22[1] = (void (*)(_QWORD))v22;
    v22[2] = (void (*)(_QWORD))&v23;
    v22[3] = (void (*)(_QWORD))result;
    v22[4] = (void (*)(_QWORD))&v24;
    v22[5] = (void (*)(_QWORD))((char *)v13 - 8);
    v22[6] = v13;
    if (v14)
    {
      v15 = 0;
      v16 = (const void *)(v11 - 192);
      v17 = v9 + 112 * v8;
      v18 = (unsigned int *)(v17 + 92);
      v19 = (_QWORD *)(v17 + 80);
      while (v15 >> 6 < *v18)
      {
        v20 = *(_QWORD *)(*v19 + 8 * (v15 >> 6));
        v21 = v20 + 40 * (v15 & 0x3F);
        if (*(_DWORD *)(v21 + 12) == 2 && *(unsigned __int8 *)(v20 + 40 * (v15 & 0x3F) + 8) <= 1u)
        {
          result = JSC::HeapVerifier::validateJSCell(v16, *(_QWORD *)v21, (_QWORD *)v21, (uint64_t)v13 - 8, v22, "  ", a7, a8);
          v12 = *(_QWORD *)v13;
        }
        if (++v15 >= v12)
          return result;
      }
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WTF::dataLog<WTF::RawPointer>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%p", *a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [3],char const*,char [2]>(const char **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", " [");
  WTF::PrintStream::printf(v4, "%s", *a1);
  WTF::PrintStream::printf(v4, "%s", "]");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [12],WTF::RawPointer>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", " structure:");
  WTF::PrintStream::printf(v4, "%p", *a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [12],WTF::RawPointer,char [8],WTF::RawPointer,char [2]>(const void **a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", " butterfly:");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " (base:");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", ")");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [5],JSC::CollectionScope,char [5],int,char [7],char const*,char [14],WTF::RawPointer,char [19],WTF::MonotonicTime,char [2]>(_BYTE *a1, _DWORD *a2, const char **a3, const void **a4, double *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  const char *v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  uint64_t result;
  char v17;
  char **v18;
  char *v19;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", " in ");
  if (!*a1)
  {
    v13 = "Eden";
    goto LABEL_7;
  }
  if (*a1 == 1)
  {
    v13 = "Full";
LABEL_7:
    v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
    WTF::PrintStream::printf(v14, "%s", v13);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
    WTF::PrintStream::printf(v12, "%s", " GC[");
    WTF::PrintStream::printf(v12, "%d", *a2);
    WTF::PrintStream::printf(v12, "%s", "] in '");
    WTF::PrintStream::printf(v12, "%s", *a3);
    WTF::PrintStream::printf(v12, "%s", "' list in VM ");
    WTF::PrintStream::printf(v12, "%p", *a4);
    WTF::PrintStream::printf(v12, "%s", " recorded at time ");
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
    WTF::PrintStream::printf(v15, "%s", "Monotonic(");
    WTF::PrintStream::printf(v15, "%lf", *a5);
    WTF::PrintStream::printf(v15, "%s", " sec)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
    WTF::PrintStream::printf(v12, "%s", "\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  }
  result = 41;
  __break(0xC471u);
  return result;
}

uint64_t WTF::dataLog<WTF::StackTrace>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  _QWORD *v9;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v7[0] = &v8;
    v9 = v7;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v5 = *a1;
  v7[0] = &a1[a1[1] + 2];
  v7[1] = v5;
  v7[2] = "";
  WTF::StackTracePrinter::dump((WTF::StackTracePrinter *)v7, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [10],JSC::CollectionScope,char [5],WTF::MonotonicTime,char [11],int,char [4]>(_BYTE *a1, double *a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  const char *v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  uint64_t result;
  char v13;
  char **v14;
  char *v15;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Checking ");
  if (!*a1)
  {
    v9 = "Eden";
    goto LABEL_7;
  }
  if (*a1 == 1)
  {
    v9 = "Full";
LABEL_7:
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v10, "%s", v9);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    WTF::PrintStream::printf(v8, "%s", " GC<");
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v11, "%s", "Monotonic(");
    WTF::PrintStream::printf(v11, "%lf", *a2);
    WTF::PrintStream::printf(v11, "%s", " sec)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    WTF::PrintStream::printf(v8, "%s", ">, cycle [");
    WTF::PrintStream::printf(v8, "%d", *a3);
    WTF::PrintStream::printf(v8, "%s", "]:\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  result = 41;
  __break(0xC471u);
  return result;
}

uint64_t WTF::dataLog<char const*,char [8],int,char [4],char const*,char [9]>(const char **a1, _DWORD *a2, const char **a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", *a1);
  WTF::PrintStream::printf(v8, "%s", "Cycle [");
  WTF::PrintStream::printf(v8, "%d", *a2);
  WTF::PrintStream::printf(v8, "%s", "] '");
  WTF::PrintStream::printf(v8, "%s", *a3);
  WTF::PrintStream::printf(v8, "%s", "' list: ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char const*,char [16]>(const char **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", *a1);
  WTF::PrintStream::printf(v4, "%s", "cell NOT found\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char const*,char [6],WTF::RawPointer,char [12]>(const char **a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", *a1);
  WTF::PrintStream::printf(v6, "%s", "cell ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", " NOT FOUND\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void JSC::HeapVerifier::checkIfRecorded(JSC::HeapVerifier *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  const void ***v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void **v40;
  const void **v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  const void **v45;
  const void *v46;
  const void **v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  const void **v54;
  const void *v55;
  const void **v56;
  int v57;
  const void **v58;
  int v59;
  const void **v60;
  int v61;
  const void **v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t i;
  _QWORD *v69;
  const void **v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  const void *v78;
  uint64_t v79;
  uint64_t v80;
  const void **v81;
  unsigned int v82;
  uint64_t v83;
  JSC::HeapVerifier *v84;
  int v85;
  unsigned __int8 *v86;
  uint64_t v87;
  _QWORD *v88;
  int v89;
  const char *v90;
  char v91;
  _QWORD *v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  const void **v101;
  uint64_t *v102;
  int v103;
  unsigned __int8 *v104;
  uint64_t v105;
  char v106;
  _BYTE *v107;
  uint64_t *v108;
  int v109;
  unsigned int v110;
  char v111;
  unint64_t StatusReg;
  const void **v113;
  int v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const void **v119;
  int v120;
  const void *v121[4];

  v121[2] = *(const void **)MEMORY[0x1E0C80C00];
  v9 = atomic_load(&JSC::VMInspector::instance(void)::once);
  if (v9 != -1)
  {
    v121[0] = &v118;
    v119 = v121;
    std::__call_once(&JSC::VMInspector::instance(void)::once, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::VMInspector::instance(void)::$_0 &&>>);
  }
  v10 = (unsigned __int8 *)JSC::VMInspector::instance(void)::manager;
  while (1)
  {
    v11 = *v10;
    if ((v11 & 1) != 0)
      break;
    v12 = __ldaxr(v10);
    if (v12 == v11)
    {
      if (!__stxr(v11 | 1, v10))
        goto LABEL_27;
    }
    else
    {
      __clrex();
    }
  }
  sleep(1u);
  while (1)
  {
    v13 = *v10;
    if ((v13 & 1) != 0)
      break;
    v14 = __ldaxr(v10);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 1, v10))
        goto LABEL_27;
    }
    else
    {
      __clrex();
    }
  }
  sleep(1u);
  while (1)
  {
    v15 = *v10;
    if ((v15 & 1) != 0)
      break;
    v16 = __ldaxr(v10);
    if (v16 == v15)
    {
      if (!__stxr(v15 | 1, v10))
        goto LABEL_27;
    }
    else
    {
      __clrex();
    }
  }
  sleep(1u);
  while (1)
  {
    v17 = *v10;
    if ((v17 & 1) != 0)
      break;
    v18 = __ldaxr(v10);
    if (v18 == v17)
    {
      if (!__stxr(v17 | 1, v10))
        break;
    }
    else
    {
      __clrex();
    }
  }
LABEL_27:
  v19 = atomic_load(v10);
  if ((v19 & 1) == 0)
  {
    WTF::dataLog<char [16]>("ERROR: Timed out while waiting to iterate VMs.");
    return;
  }
  v104 = v10;
  v20 = *((_QWORD *)v10 + 1);
  if (!v20)
    goto LABEL_150;
  v21 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
  v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
  v110 = (v23 >> 31) ^ v23;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    if (!*(_BYTE *)(v20 + 93188))
      goto LABEL_149;
    v24 = *(uint64_t **)(v20 + 888);
    if (!v24)
      goto LABEL_149;
    v121[0] = this;
    v105 = v20;
    v119 = (const void **)v20;
    v108 = v24;
    WTF::dataLog<char [17],WTF::RawPointer,char [8],WTF::RawPointer,char [3]>(v121, (const void **)&v119);
    v25 = v108;
    v115 = "  ";
    v114 = 0;
    v26 = *((_DWORD *)v108 + 3);
    if (v26 < 1)
      goto LABEL_147;
    v27 = 0;
    v106 = 0;
    do
    {
      v109 = v27;
      v28 = v25[3] + 112 * ((v26 & ((*((_DWORD *)v25 + 2) + v27) >> 31)) + *((_DWORD *)v25 + 2) + v27);
      v121[0] = (const void *)(v28 + 16);
      v121[1] = (const void *)(v28 + 64);
      v107 = (_BYTE *)v28;
      WTF::dataLog<char [10],JSC::CollectionScope,char [5],WTF::MonotonicTime,char [11],int,char [4]>((_BYTE *)v28, (double *)(v28 + 8), &v114);
      v29 = 0;
      v30 = 0;
      v113 = (const void **)"    ";
      do
      {
        v31 = v29;
        v32 = (const void ***)v121[v30];
        v119 = *v32;
        WTF::dataLog<char const*,char [8],int,char [4],char const*,char [9]>(&v115, &v114, (const char **)&v119);
        v40 = v32[1];
        if (!v40)
          goto LABEL_108;
        if (!*((_BYTE *)v32 + 32))
        {
          v41 = v32[5];
          v111 = v31;
          if (!v41)
            goto LABEL_45;
          v32[5] = 0;
          v33 = (unint64_t)(v41 - 2);
          v42 = *(_QWORD *)(StatusReg + 752);
          if (v42)
          {
            if (v33 >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                   + (((unint64_t)(v41 - 2) >> 27) & 0x1FFFFFFFFCLL)) >> (((_DWORD)v41 - 16) >> 24)) & 1) == 0)
            {
              if (v33 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v33 >> 24)
              {
                v35 = 0;
              }
              else
              {
                v35 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + (((((unint64_t)(v41 - 2) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2
                                         * (((((_DWORD)v41 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v35 == 1)
                  goto LABEL_42;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v42, v33, 1, v35, v36, v37, v38, v39);
            }
            else
            {
LABEL_42:
              v43 = *(unsigned int *)(v42 + 8000);
              if (v43 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v42, v33, (os_unfair_lock_s *)5, v35, v36, v37, v38, v39);
              }
              else
              {
                *(_QWORD *)(v42 + 8 * v43) = v33 | 0x5000000000000;
                *(_DWORD *)(v42 + 8000) = v43 + 1;
              }
            }
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v33, (uint64_t)&bmalloc_heap_config, 1);
          }
          v40 = v32[1];
          if (v40)
          {
LABEL_45:
            v44 = 0;
            while (1)
            {
              if (v44 >> 6 >= *((unsigned int *)v32 + 7))
              {
                __break(0xC471u);
                JUMPOUT(0x198C4B2C4);
              }
              v45 = (const void **)((char *)v32[2][v44 >> 6] + 40 * (v44 & 0x3F));
              v46 = *v45;
              v47 = v32[5];
              if (v47
                || (v48 = WTF::fastZeroedMalloc(0x90uLL, v33, v34, v35, v36, v37, v38, v39),
                    v32[5] = (const void **)(v48 + 16),
                    *(_DWORD *)(v48 + 12) = 8,
                    *((_DWORD *)v32[5] - 2) = 7,
                    *((_DWORD *)v32[5] - 4) = 0,
                    *((_DWORD *)v32[5] - 3) = 0,
                    (v47 = v32[5]) != 0))
              {
                v49 = *((_DWORD *)v47 - 2);
              }
              else
              {
                v49 = 0;
              }
              v50 = ((unint64_t)v46 + ~((_QWORD)v46 << 32)) ^ (((unint64_t)v46 + ~((_QWORD)v46 << 32)) >> 22);
              v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
              v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
              v53 = v49 & ((v52 >> 31) ^ v52);
              v54 = &v47[2 * v53];
              v55 = *v54;
              if (*v54)
              {
                v56 = 0;
                v57 = 1;
                while (v55 != v46)
                {
                  if (v55 == (const void *)-1)
                    v56 = v54;
                  v53 = (v53 + v57) & v49;
                  v54 = &v47[2 * v53];
                  v55 = *v54;
                  ++v57;
                  if (!*v54)
                  {
                    if (v56)
                    {
                      *v56 = 0;
                      v56[1] = 0;
                      --*((_DWORD *)v32[5] - 4);
                      v54 = v56;
                    }
                    goto LABEL_58;
                  }
                }
                goto LABEL_85;
              }
LABEL_58:
              *v54 = v46;
              v54[1] = v45;
              v58 = v32[5];
              v59 = v58 ? *((_DWORD *)v58 - 3) + 1 : 1;
              *((_DWORD *)v58 - 3) = v59;
              v60 = v32[5];
              v61 = v60 ? *((_DWORD *)v60 - 3) : 0;
              v62 = v60 - 2;
              v63 = (*((_DWORD *)v60 - 4) + v61);
              v64 = *((unsigned int *)v60 - 1);
              if (v64 > 0x400)
                break;
              if (3 * v64 > 4 * v63)
                goto LABEL_85;
              if ((_DWORD)v64)
                goto LABEL_67;
              v65 = *((_DWORD *)v60 - 3);
              v66 = 8;
LABEL_70:
              v67 = WTF::fastZeroedMalloc(16 * v66 + 16, v33, v34, v35, v36, v37, v38, v39);
              v32[5] = (const void **)(v67 + 16);
              *(_DWORD *)(v67 + 12) = v66;
              *((_DWORD *)v32[5] - 2) = v66 - 1;
              *((_DWORD *)v32[5] - 4) = 0;
              *((_DWORD *)v32[5] - 3) = v65;
              if ((_DWORD)v64)
              {
                for (i = 0; i != v64; ++i)
                {
                  v69 = &v60[2 * i];
                  if ((unint64_t)(*v69 + 1) >= 2)
                  {
                    v70 = v32[5];
                    if (v70)
                      v71 = *((_DWORD *)v70 - 2);
                    else
                      v71 = 0;
                    v72 = (~(*v69 << 32) + *v69) ^ ((~(*v69 << 32) + *v69) >> 22);
                    v73 = 9 * ((v72 + ~(v72 << 13)) ^ ((unint64_t)(v72 + ~(v72 << 13)) >> 8));
                    v74 = (v73 ^ (v73 >> 15)) + ~((v73 ^ (v73 >> 15)) << 27);
                    v75 = v71 & ((v74 >> 31) ^ v74);
                    v76 = 1;
                    do
                    {
                      v77 = v75;
                      v78 = v70[2 * v75];
                      v75 = (v75 + v76++) & v71;
                    }
                    while (v78);
                    *(_OWORD *)&v70[2 * v77] = *(_OWORD *)v69;
                  }
                }
              }
              v79 = *(_QWORD *)(StatusReg + 752);
              if (v79)
              {
                if (!((unint64_t)v62 >> 43)
                  && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                       + (((unint64_t)(v60 - 2) >> 27) & 0x1FFFFFFFFCLL)) >> (((_DWORD)v60 - 16) >> 24)) & 1) != 0)
                {
LABEL_83:
                  v80 = *(unsigned int *)(v79 + 8000);
                  if (v80 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v79, (uint64_t)(v60 - 2), (os_unfair_lock_s *)5, v35, v36, v37, v38, v39);
                  }
                  else
                  {
                    *(_QWORD *)(v79 + 8 * v80) = (unint64_t)v62 | 0x5000000000000;
                    *(_DWORD *)(v79 + 8000) = v80 + 1;
                  }
                  goto LABEL_85;
                }
                if ((unint64_t)v62 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v62 >> 24)
                {
                  v35 = 0;
                }
                else
                {
                  v35 = (*(_DWORD *)((char *)off_1ECF425F8
                                   + (((((unint64_t)(v60 - 2) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                   + 24) >> (2
                                           * (((((_DWORD)v60 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)v35 == 1)
                    goto LABEL_83;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v79, (unint64_t)(v60 - 2), 1, v35, v36, v37, v38, v39);
              }
              else
              {
                pas_try_deallocate_slow_no_cache((unint64_t)(v60 - 2), (uint64_t)&bmalloc_heap_config, 1);
              }
LABEL_85:
              if ((const void **)++v44 == v40)
                goto LABEL_96;
            }
            if (v64 > 2 * v63)
              goto LABEL_85;
LABEL_67:
            v65 = *((_DWORD *)v60 - 3);
            v66 = (_DWORD)v64 << (6 * v65 >= (2 * v64));
            goto LABEL_70;
          }
LABEL_96:
          *((_BYTE *)v32 + 32) = 1;
          v31 = v111;
        }
        v81 = v32[5];
        if (!v81)
          goto LABEL_108;
        v82 = *((_DWORD *)v81 - 2);
        v83 = v82 & v110;
        v84 = (JSC::HeapVerifier *)v81[2 * v83];
        if (v84 != this)
        {
          v85 = 1;
          while (v84)
          {
            v83 = ((_DWORD)v83 + v85) & v82;
            v84 = (JSC::HeapVerifier *)v81[2 * v83];
            ++v85;
            if (v84 == this)
              goto LABEL_102;
          }
LABEL_108:
          WTF::dataLog<char const*,char [16]>((const char **)&v113);
          goto LABEL_109;
        }
LABEL_102:
        v86 = (unsigned __int8 *)v81[2 * v83 + 1];
        if (!v86)
          goto LABEL_108;
        v87 = *v108;
        v120 = v109;
        v119 = v113;
        v88 = *(_QWORD **)v86;
        if (v113)
          WTF::dataLog<char const*>((const char **)&v119);
        WTF::dataLog<char [16]>("FOUND");
        v89 = *((_DWORD *)v86 + 3);
        if (v89 == 2)
        {
          v90 = " LIVE";
          goto LABEL_112;
        }
        if (v89 == 1)
        {
          v90 = " DEAD";
LABEL_112:
          WTF::dataLog<char [16]>(v90);
        }
        v91 = v31;
        if (v86[8] >= 2u)
          WTF::dataLog<char [16]>(" HeapCell ");
        else
          WTF::dataLog<char [16]>(" JSCell ");
        v118 = (uint64_t)v88;
        WTF::dataLog<WTF::RawPointer>((const void **)&v118);
        if (*((_QWORD *)v86 + 3))
        {
          v118 = *((_QWORD *)v86 + 3);
          WTF::dataLog<char [3],char const*,char [2]>((const char **)&v118);
        }
        if (*((_DWORD *)v86 + 3) == 2 && v86[8] <= 1u)
        {
          v93 = *(_QWORD **)v86;
          v94 = 16 * (**(_DWORD **)v86 & 0xFFFFFFFE);
          v118 = v94;
          WTF::dataLog<char [12],WTF::RawPointer>((const void **)&v118);
          if (*((unsigned __int8 *)v93 + 5) >= 0x17u)
          {
            v95 = (unsigned int *)v88[1];
            if ((*(_BYTE *)(v94 + 8) & 0xEu) >= 0xA)
              v96 = v95[2];
            else
              v96 = 0;
            v97 = *(unsigned __int16 *)(v94 + 24);
            if (v97 == 65534)
              goto LABEL_129;
            if (v97 == 0xFFFF)
              v97 = *(_DWORD *)(*(_QWORD *)(v94 + 64) + 84);
            if (v97 < 64)
            {
LABEL_129:
              v98 = 0;
            }
            else if ((v97 - 63) >= 5)
            {
              v99 = (v97 - 64) | ((v97 - 64) >> 1) | (((v97 - 64) | ((v97 - 64) >> 1)) >> 2);
              v100 = v99 | (v99 >> 4) | ((v99 | (v99 >> 4)) >> 8);
              v98 = (v100 | HIWORD(v100)) + 1;
            }
            else
            {
              v98 = 4;
            }
            v117 = (uint64_t)&v95[-2 * v98 - 2 + -2 * v96];
            v118 = (uint64_t)v95;
            WTF::dataLog<char [12],WTF::RawPointer,char [8],WTF::RawPointer,char [2]>((const void **)&v118, (const void **)&v117);
          }
        }
        v101 = *v32;
        v117 = v87 - 192;
        v118 = (uint64_t)v101;
        v116 = *((_QWORD *)v86 + 2);
        WTF::dataLog<char [5],JSC::CollectionScope,char [5],int,char [7],char const*,char [14],WTF::RawPointer,char [19],WTF::MonotonicTime,char [2]>(v107, &v120, (const char **)&v118, (const void **)&v117, (double *)&v116);
        v102 = (uint64_t *)*((_QWORD *)v86 + 4);
        if (v102)
          WTF::dataLog<WTF::StackTrace>(v102);
        v106 = 1;
        v31 = v91;
LABEL_109:
        v29 = 1;
        v30 = 1;
      }
      while ((v31 & 1) == 0);
      v27 = v109 - 1;
      v114 = v109 - 1;
      v25 = v108;
      v26 = *((_DWORD *)v108 + 3);
    }
    while (v109 - 1 > -v26);
    if ((v106 & 1) == 0)
    {
LABEL_147:
      v121[0] = this;
      WTF::dataLog<char const*,char [6],WTF::RawPointer,char [12]>(&v115, v121);
    }
    v20 = v105;
LABEL_149:
    v20 = *(_QWORD *)(v20 + 93528);
  }
  while (v20);
LABEL_150:
  v103 = __ldxr(v104);
  if (v103 != 1)
  {
    __clrex();
    goto LABEL_154;
  }
  if (__stlxr(0, v104))
LABEL_154:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v104, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Integrity::logFile(JSC::Integrity *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_1ECF58FC0);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECF58FC0, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
  }
  return qword_1ECF58FB8;
}

uint64_t JSC::Integrity::logF(JSC::Integrity *this, const char *a2, ...)
{
  unint64_t v3;
  char v5;
  char **v6;
  char *v7;
  va_list va;

  va_start(va, a2);
  v3 = atomic_load(&qword_1ECF58FC0);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&qword_1ECF58FC0, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
  }
  return (*(uint64_t (**)(uint64_t, JSC::Integrity *, uint64_t *))(*(_QWORD *)qword_1ECF58FB8 + 16))(qword_1ECF58FB8, this, (uint64_t *)va);
}

uint64_t JSC::Integrity::logLnF(JSC::Integrity *this, const char *a2, ...)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;
  va_list va;

  va_start(va, a2);
  v3 = atomic_load(&qword_1ECF58FC0);
  if (v3 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&qword_1ECF58FC0, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
  }
  (*(void (**)(uint64_t, JSC::Integrity *, uint64_t *))(*(_QWORD *)qword_1ECF58FB8 + 16))(qword_1ECF58FB8, this, (uint64_t *)va);
  v4 = atomic_load(&qword_1ECF58FC0);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&qword_1ECF58FC0, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
  }
  v5 = qword_1ECF58FB8;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1ECF58FB8 + 32))(qword_1ECF58FB8);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

BOOL JSC::Integrity::Random::reloadAndCheckShouldAuditSlow(JSC::Integrity::Random *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL8 v19;
  int v20;

  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  if (*(double *)&qword_1ECF4C608 == 0.0)
  {
    v19 = 0;
    *(_QWORD *)this = 0;
  }
  else
  {
    v12 = 0;
    v13 = (*(double *)&qword_1ECF4C608 * 4294967300.0);
    v15 = *((_QWORD *)a2 + 17);
    v14 = *((_QWORD *)a2 + 18);
    v16 = 0x8000000000000000;
    do
    {
      v17 = v14;
      v14 = (v17 >> 26) ^ ((v15 ^ (v15 << 23)) >> 17) ^ v17 ^ v15 ^ (v15 << 23);
      v16 |= (unint64_t)((int)v14 + (int)v17 <= v13) << v12++;
      v15 = v17;
    }
    while (v12 != 63);
    *(_QWORD *)this = v16;
    v18 = ((v17 ^ (v17 << 23)) >> 17) ^ (v14 >> 26) ^ v17 ^ (v17 << 23) ^ v14;
    *((_QWORD *)a2 + 17) = v14;
    *((_QWORD *)a2 + 18) = v18;
    v19 = (int)v18 + (int)v14 <= v13;
  }
  v20 = __ldxr(v10);
  if (v20 == 1)
  {
    if (!__stlxr(0, v10))
      return v19;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v19;
}

void JSC::Integrity::auditCellMinimallySlow(JSC::Integrity *this, JSC::VM *a2, JSC::JSCell *a3)
{
  if ((unint64_t)a2 - qword_1ECF4C028 < qword_1ECF4C030 && *((_BYTE *)a2 + 5) != 19)
    __break(0xC471u);
}

JSC::Integrity *JSC::Integrity::doAudit(JSC::Integrity *this, const OpaqueJSContext *a2)
{
  JSC::Integrity *result;
  const char *v3;
  JSC::Integrity *v4;
  uint64_t v5;

  if (this)
    return JSC::Integrity::doAudit(this, a2);
  JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "ctx", "./tools/Integrity.cpp", 137);
  v4 = (JSC::Integrity *)JSC::Integrity::logLnF((JSC::Integrity *)"    NULL JSContextRef", v3);
  v5 = JSC::Integrity::logFile(v4);
  result = (JSC::Integrity *)WTFReportBacktraceWithPrefixAndPrintStream(v5, "    ");
  __break(0xC471u);
  return result;
}

JSC::Integrity *JSC::Integrity::doAudit(JSC::Integrity *this, JSC::JSGlobalObject *a2)
{
  const char *v3;
  JSC::Integrity *result;
  const char *v5;
  unint64_t v6;
  char v7;
  char **v8;
  char *v9;

  JSC::Integrity::Analyzer::analyzeCell((unint64_t)this, (char *)1);
  if (*((_BYTE *)this + 5) == 51)
    return this;
  JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", v3, "globalObject->isGlobalObject()", "./tools/Integrity.cpp", 358);
  JSC::Integrity::logLnF((JSC::Integrity *)"    Invalid JSGlobalObject %p", v5, this);
  v6 = atomic_load(&qword_1ECF58FC0);
  if (v6 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&qword_1ECF58FC0, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
  }
  result = (JSC::Integrity *)WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
  if (*((_BYTE *)this + 5) == 51)
    return this;
  __break(0xC471u);
  return result;
}

JSC::Integrity *JSC::Integrity::doAudit(JSC::Integrity *this, OpaqueJSContext *a2)
{
  JSC::Integrity *result;
  const char *v3;
  JSC::Integrity *v4;
  uint64_t v5;

  if (this)
    return JSC::Integrity::doAudit(this, a2);
  JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "ctx", "./tools/Integrity.cpp", 144);
  v4 = (JSC::Integrity *)JSC::Integrity::logLnF((JSC::Integrity *)"    NULL JSGlobalContextRef", v3);
  v5 = JSC::Integrity::logFile(v4);
  result = (JSC::Integrity *)WTFReportBacktraceWithPrefixAndPrintStream(v5, "    ");
  __break(0xC471u);
  return result;
}

JSC::Integrity *JSC::Integrity::doAudit(JSC::Integrity *this, OpaqueJSValue *a2)
{
  if (this)
    return JSC::Integrity::doAudit(this, a2);
  return this;
}

JSC::Integrity *JSC::Integrity::doAudit(JSC::Integrity *this, JSC::JSObject *a2)
{
  const char *v3;
  JSC::Integrity *result;
  const char *v5;
  unint64_t v6;
  char v7;
  char **v8;
  char *v9;

  if (!this)
    return this;
  JSC::Integrity::Analyzer::analyzeCell((unint64_t)this, (char *)1);
  if (*((unsigned __int8 *)this + 5) > 0x16u)
    return this;
  JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", v3, "cell->isObject()", "./tools/Integrity.cpp", 351);
  JSC::Integrity::logLnF((JSC::Integrity *)"    Invalid JSObject %p", v5, this);
  v6 = atomic_load(&qword_1ECF58FC0);
  if (v6 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&qword_1ECF58FC0, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
  }
  result = (JSC::Integrity *)WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
  if (*((unsigned __int8 *)this + 5) > 0x16u)
    return this;
  __break(0xC471u);
  return result;
}

unint64_t JSC::Integrity::doAudit(unint64_t this, const OpaqueJSValue *a2)
{
  if (this && (this & 0xFFFE000000000002) == 0)
    JSC::Integrity::Analyzer::analyzeCell(this, (char *)1);
  return this;
}

unint64_t JSC::Integrity::doAudit(unint64_t a1)
{
  if ((a1 & 0xFFFE000000000002) == 0)
    JSC::Integrity::Analyzer::analyzeCell(a1, (char *)1);
  return a1;
}

JSC::Integrity *JSC::Integrity::doAudit(JSC::Integrity *this, JSC::JSCell *a2)
{
  JSC::Integrity::Analyzer::analyzeCell((unint64_t)this, (char *)1);
  return this;
}

uint64_t JSC::Integrity::Analyzer::analyzeVM(uint64_t result, JSC::VM *a2)
{
  int v2;
  JSC::VMInspector *v3;
  const char *v4;
  const char *v5;
  unint64_t v6;
  JSC::VMInspector *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  char v16;
  char **v17;
  char *v18;

  if (JSC::VMInspector::m_recentVM != result)
  {
    v2 = (int)a2;
    v3 = (JSC::VMInspector *)result;
    result = JSC::VMInspector::isValidVMSlow((JSC::VMInspector *)result, a2);
    if ((result & 1) == 0)
    {
      JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", v4, "VMInspector::isValidVM(&vm)", "./tools/Integrity.cpp", 184);
      JSC::Integrity::logLnF((JSC::Integrity *)"    Invalid VM %p", v5, v3);
      v6 = atomic_load(&qword_1ECF58FC0);
      if (v6 != -1)
      {
        v18 = &v16;
        v17 = &v18;
        std::__call_once(&qword_1ECF58FC0, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
      }
      v7 = (JSC::VMInspector *)WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
      result = JSC::VMInspector::dumpVMs(v7, v8, v9, v10, v11, v12, v13, v14);
      if (v2 == 1 && (JSC::VMInspector *)JSC::VMInspector::m_recentVM != v3)
      {
        result = JSC::VMInspector::isValidVMSlow(v3, v15);
        if ((result & 1) == 0)
        {
          result = 181;
          __break(0xC471u);
        }
      }
    }
  }
  return result;
}

uint64_t JSC::Integrity::Analyzer::analyzeCell(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  const char *v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  const char *v46;
  const char *v47;
  unint64_t v48;
  const char *v49;
  const char *v50;
  unint64_t v51;
  const char *v52;
  const char *v53;
  unint64_t v54;
  const char *v55;
  const char *v56;
  unint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  const char *v70;
  const char *v71;
  unint64_t v72;
  const char *v73;
  const char *v74;
  unint64_t v75;
  const char *v76;
  const char *v77;
  unint64_t v78;
  const char *v79;
  char v80;
  char **v81;
  char *v82;

  v6 = a2 >> 36;
  if (qword_1ECF4C080 > a2 || v6 != 0 || (a2 & 0xFFFFFFFFFLL) == 0)
  {
    JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "isSanePointer(cell)", "./tools/Integrity.cpp", 216);
    JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d", v47, a2, *(unsigned __int8 *)(a2 + 5));
    v48 = atomic_load(&qword_1ECF58FC0);
    if (v48 != -1)
    {
      v82 = &v80;
      v81 = &v82;
      std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
    }
    WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
    JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v49, a2);
    if (a3 != 1)
      return 0;
    if (qword_1ECF4C080 > a2 || v6 || (a2 & 0xFFFFFFFFFLL) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198C4BFDCLL);
    }
  }
  if ((a2 & 8) != 0)
  {
    if (*(_QWORD *)(a2 - 16) != a1)
    {
      JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "&preciseAllocation.vm() == &vm", "./tools/Integrity.cpp", 222);
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d preciseAllocation.vm %p vm %p", v53, a2, *(unsigned __int8 *)(a2 + 5), *(_QWORD *)(a2 - 16), a1);
      v54 = atomic_load(&qword_1ECF58FC0);
      if (v54 != -1)
      {
        v82 = &v80;
        v81 = &v82;
        std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
      }
      WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v55, a2);
      if (a3 != 1)
        return 0;
      if (*(_QWORD *)(a2 - 16) != a1)
      {
        __break(0xC471u);
        JUMPOUT(0x198C4C17CLL);
      }
    }
    v18 = *(unsigned int *)(a1 + 388);
    if (!(_DWORD)v18)
    {
LABEL_25:
      JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "isValidPreciseAllocation", "./tools/Integrity.cpp", 231);
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d", v21, a2, *(unsigned __int8 *)(a2 + 5));
      v22 = atomic_load(&qword_1ECF58FC0);
      if (v22 != -1)
      {
        v82 = &v80;
        v81 = &v82;
        std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
      }
      WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v23, a2);
      if (a3 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198C4C74CLL);
      }
      return 0;
    }
    v19 = *(_QWORD **)(a1 + 376);
    v20 = 8 * v18;
    while (*v19 != a2 - 112)
    {
      ++v19;
      v20 -= 8;
      if (!v20)
        goto LABEL_25;
    }
    v14 = *(_QWORD *)(a2 - 88);
  }
  else
  {
    v9 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFC000);
    if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8) != a1)
    {
      JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "&block.vm() == &vm", "./tools/Integrity.cpp", 238);
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d markedBlock.vm %p vm %p", v50, a2, *(unsigned __int8 *)(a2 + 5), *(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8), a1);
      v51 = atomic_load(&qword_1ECF58FC0);
      if (v51 != -1)
      {
        v82 = &v80;
        v81 = &v82;
        std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
      }
      WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v52, a2);
      if (a3 != 1)
        return 0;
      if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8) != a1)
      {
        __break(0xC471u);
        JUMPOUT(0x198C4C0ACLL);
      }
    }
    v10 = *(_QWORD *)(v9 + 88);
    v11 = v10 + 16 * *(unsigned int *)(v9 + 4);
    v12 = v10 + 0x4000;
    v13 = v11 <= a2 && v12 > a2;
    if (!v13)
    {
      JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "blockHandle.contains(cell)", "./tools/Integrity.cpp", 242);
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d markedBlock.start %p markedBlock.end %p", v56, a2, *(unsigned __int8 *)(a2 + 5), *(_QWORD *)(v9 + 88) + 16 * *(unsigned int *)(v9 + 4), *(_QWORD *)(v9 + 88) + 0x4000);
      v57 = atomic_load(&qword_1ECF58FC0);
      if (v57 != -1)
      {
        v82 = &v80;
        v81 = &v82;
        std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
      }
      WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v58, a2);
      if (a3 != 1)
        return 0;
      v59 = *(_QWORD *)(v9 + 88);
      if (v59 + 16 * (unint64_t)*(unsigned int *)(v9 + 4) > a2 || v59 + 0x4000 <= a2)
      {
        __break(0xC471u);
        JUMPOUT(0x198C4C274);
      }
    }
    v14 = 16 * **(unsigned int **)(a2 & 0xFFFFFFFFFFFFC000);
    if ((a2 - v11) % v14)
    {
      JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "cellIsProperlyAligned", "./tools/Integrity.cpp", 249);
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d allocator.cellSize %zu", v15, a2, *(unsigned __int8 *)(a2 + 5), v14);
      v16 = atomic_load(&qword_1ECF58FC0);
      if (v16 != -1)
      {
        v82 = &v80;
        v81 = &v82;
        std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
      }
      WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v17, a2);
      if (a3 == 1)
      {
LABEL_134:
        __break(0xC471u);
        JUMPOUT(0x198C4BBB4);
      }
      return 0;
    }
  }
  v25 = *(unsigned __int8 *)(a2 + 5);
  if ((_DWORD)v25 != 19 && a2 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "!Gigacage::contains(cell)", "./tools/Integrity.cpp", 254);
    JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d", v77, a2, v25);
    v78 = atomic_load(&qword_1ECF58FC0);
    if (v78 != -1)
    {
      v82 = &v80;
      v81 = &v82;
      std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
    }
    WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
    JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v79, a2);
    if (a3 != 1)
      return 0;
    if (a2 - qword_1ECF4C028 < qword_1ECF4C030)
    {
      __break(0xC471u);
      JUMPOUT(0x198C4C73CLL);
    }
  }
  v26 = a2 & 0xFFFFFFFFFFFFC000;
  if ((a2 & 8) != 0)
    v26 = (a2 - 112) | 1;
  if ((v26 & 1) != 0)
    v27 = v26 + 47;
  else
    v27 = *(_QWORD *)v26 + 32;
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v13 = qword_1ECF4C080 > v28;
    v29 = v28 & 0xFFFFFFFFFLL;
    v30 = v28 >> 36;
    v31 = !v13 && v30 == 0;
    if (!v31 || v29 == 0)
    {
      JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "!weakSet.m_allocator || isSanePointer(weakSet.m_allocator)", "./tools/Integrity.cpp", 258);
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d weakSet.allocator %p", v60, a2, *(unsigned __int8 *)(a2 + 5), *(_QWORD *)(v27 + 16));
      v61 = atomic_load(&qword_1ECF58FC0);
      if (v61 != -1)
      {
        v82 = &v80;
        v81 = &v82;
        std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
      }
      WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v62, a2);
      if (a3 != 1)
        return 0;
      v63 = *(_QWORD *)(v27 + 16);
      if (v63 && (qword_1ECF4C080 > v63 || v63 >> 36 || (v63 & 0xFFFFFFFFFLL) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198C4C358);
      }
    }
  }
  v33 = *(_QWORD *)(v27 + 24);
  if (v33)
  {
    v13 = qword_1ECF4C080 > v33;
    v34 = v33 & 0xFFFFFFFFFLL;
    v35 = v33 >> 36;
    v36 = !v13 && v35 == 0;
    if (!v36 || v34 == 0)
    {
      JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "!weakSet.m_nextAllocator || isSanePointer(weakSet.m_nextAllocator)", "./tools/Integrity.cpp", 260);
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d weakSet.allocator %p", v64, a2, *(unsigned __int8 *)(a2 + 5), *(_QWORD *)(v27 + 24));
      v65 = atomic_load(&qword_1ECF58FC0);
      if (v65 != -1)
      {
        v82 = &v80;
        v81 = &v82;
        std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
      }
      WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
      JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v66, a2);
      if (a3 != 1)
        return 0;
      v67 = *(_QWORD *)(v27 + 24);
      if (v67 && (qword_1ECF4C080 > v67 || v67 >> 36 || (v67 & 0xFFFFFFFFFLL) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198C4C43CLL);
      }
    }
  }
  if (*(_QWORD *)(a1 + 41896) == a2)
    return 1;
  v38 = *(unsigned int *)a2;
  if ((v38 & 0xFFFFFFFE) <= 0x3FF)
  {
    JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "structure", "./tools/Integrity.cpp", 271);
    JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d structureID.bits 0x%x", v68, a2, v25, v38);
    v69 = atomic_load(&qword_1ECF58FC0);
    if (v69 != -1)
    {
      v82 = &v80;
      v81 = &v82;
      std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
    }
    WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
    JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v70, a2);
    if (a3 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x198C4C4F0);
    }
    return 0;
  }
  v39 = 16 * (v38 & 0xFFFFFFFE);
  v40 = *(unsigned int *)(v39 + 76);
  if ((_DWORD)v25 != *(unsigned __int8 *)(v39 + 9))
  {
    JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "cellType == structure->m_blob.type()", "./tools/Integrity.cpp", 279);
    JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d structureBlob.type %d", v71, a2, v25, *(unsigned __int8 *)(v39 + 9));
    v72 = atomic_load(&qword_1ECF58FC0);
    if (v72 != -1)
    {
      v82 = &v80;
      v81 = &v82;
      std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
    }
    WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
    JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v73, a2);
    if (a3 != 1)
      return 0;
    if ((_DWORD)v25 != *(unsigned __int8 *)(v39 + 9))
    {
      __break(0xC471u);
      JUMPOUT(0x198C4C5B8);
    }
  }
  v41 = 16 * v40;
  v42 = *(unsigned __int8 *)(a2 + 5);
  if (v42 > 0x34)
  {
    if (v42 != 53)
    {
      if (v42 == 54)
      {
        v43 = 8 * (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 16) + 1) + 40;
        goto LABEL_65;
      }
      goto LABEL_62;
    }
    v43 = 8 * (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 16) + 1) + 32;
  }
  else
  {
    if (v42 != 24)
    {
      if (v42 == 33)
      {
        v43 = 8 * *(unsigned int *)(a2 + 36) + 48;
        goto LABEL_65;
      }
LABEL_62:
      v43 = *(unsigned int *)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0xF0);
      goto LABEL_65;
    }
    v43 = 8 * *(unsigned __int8 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0xE) + 16;
  }
LABEL_65:
  if (v43 > v14)
  {
    JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "size <= allocatorCellSize", "./tools/Integrity.cpp", 283);
    JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d cell.size %zu allocator.cellSize %zu, classInfo.cellSize %u", v74, a2, v25, v43, v14, *(unsigned int *)(v41 + 240));
    v75 = atomic_load(&qword_1ECF58FC0);
    if (v75 != -1)
    {
      v82 = &v80;
      v81 = &v82;
      std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
    }
    WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
    JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v76, a2);
    if (a3 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x198C4C67CLL);
    }
    return 0;
  }
  result = 1;
  if (v25 <= 0x36 && ((1 << v25) & 0x60000201000000) != 0 && v43 < *(unsigned int *)(v41 + 240))
  {
    JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", (const char *)a2, "size >= classInfo->staticClassSize", "./tools/Integrity.cpp", 286);
    JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p cell.type %d cell.size %zu classInfo.cellSize %u", v44, a2, v25, v43, *(unsigned int *)(v41 + 240));
    v45 = atomic_load(&qword_1ECF58FC0);
    if (v45 != -1)
    {
      v82 = &v80;
      v81 = &v82;
      std::__call_once(&qword_1ECF58FC0, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
    }
    WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
    JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v46, a2);
    if (a3 == 1)
    {
      if (v43 < *(unsigned int *)(v41 + 240))
        goto LABEL_134;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t JSC::Integrity::Analyzer::analyzeCell(unint64_t a1, char *a2)
{
  int v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  const char *v7;
  unint64_t v8;
  const char *v9;
  char v10;
  char **v11;
  char *v12;

  if (!a1)
    return 0;
  v2 = (int)a2;
  if ((a1 & 0xFFFE000000000002) != 0)
  {
    JSC::Integrity::logLnF((JSC::Integrity *)"ERROR: %s @ %s:%d", a2, "value.isCell()", "./tools/Integrity.cpp", 303);
    JSC::Integrity::logLnF((JSC::Integrity *)"    Invalid cell address: cell %p", v7, a1);
    v8 = atomic_load(&qword_1ECF58FC0);
    if (v8 != -1)
    {
      v12 = &v10;
      v11 = &v12;
      std::__call_once(&qword_1ECF58FC0, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>);
    }
    WTFReportBacktraceWithPrefixAndPrintStream(qword_1ECF58FB8, "    ");
    result = JSC::Integrity::logLnF((JSC::Integrity *)"    cell %p", v9, a1);
    if (v2 == 1)
    {
      __break(0xC471u);
      return result;
    }
    return 0;
  }
  v4 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
  if ((a1 & 8) != 0)
    v4 = (uint64_t *)(a1 - 16);
  v5 = *v4;
  JSC::Integrity::Analyzer::analyzeVM(*v4, (JSC::VM *)a2);
  return JSC::Integrity::Analyzer::analyzeCell(v5, a1, v2);
}

JSC::Integrity *JSC::Integrity::doAuditSlow(JSC::Integrity *this, JSC::VM *a2)
{
  JSC::Integrity::Analyzer::analyzeVM((uint64_t)this, (JSC::VM *)1);
  return this;
}

JSC::VM *JSC::Integrity::doAudit(JSC::Integrity *this, JSC::VM *a2, JSC::JSCell *a3)
{
  if (a2)
    JSC::Integrity::Analyzer::analyzeCell((uint64_t)this, (unint64_t)a2, 1);
  return a2;
}

uint64_t JSC::Integrity::verifyCell(JSC::Integrity *this, JSC::JSCell *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;

  v4 = JSC::Integrity::Analyzer::analyzeCell((unint64_t)this, 0);
  v5 = "INVALID";
  if ((_DWORD)v4)
    v5 = "VALID";
  JSC::Integrity::logLnF((JSC::Integrity *)"Cell %p is %s", v3, this, v5);
  return v4;
}

uint64_t JSC::Integrity::verifyCell(JSC::Integrity *this, JSC::VM *a2, JSC::JSCell *a3)
{
  const char *v4;
  uint64_t v5;
  const char *v6;

  v5 = JSC::Integrity::Analyzer::analyzeCell((uint64_t)this, (unint64_t)a2, 0);
  v6 = "INVALID";
  if ((_DWORD)v5)
    v6 = "VALID";
  JSC::Integrity::logLnF((JSC::Integrity *)"Cell %p is %s", v4, a2, v6);
  return v5;
}

uint64_t `anonymous namespace'::customGetterValueGetter(JSC::JSGlobalObject *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  char **v13;
  BOOL v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  _BOOL4 v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  int *v35;
  int v36;
  uint64_t result;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  JSC::VM *v50;
  WTF::StringImpl *v51;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C4CB94);
  }
  v10 = *((_QWORD *)a1 + 7);
  v50 = (JSC::VM *)v10;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    goto LABEL_37;
  v11 = *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
  }
  if (!v12)
    goto LABEL_37;
  WTF::AtomStringImpl::addLiteral((uint64_t)"shouldThrow", 0xBuLL, a4, a5, a6, a7, a8, &v51);
  v16 = v51;
  v22 = JSC::JSObject::get(a2, (uint64_t)a1, (unint64_t)v51, v17, v18, v19, v20, v21);
  if (v22 >= 0xFFFE000000000000)
  {
    v33 = (_DWORD)v22 == 0;
    goto LABEL_29;
  }
  *(_QWORD *)&v30 = v22 - 0x2000000000000;
  if (v22 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v31 = v30 > 0.0 || v30 < 0.0;
    if (v16)
      goto LABEL_33;
    goto LABEL_35;
  }
  if ((v22 & 0xFFFE000000000002) != 0)
  {
    v31 = v22 == 7;
    if (!v16)
      goto LABEL_35;
    goto LABEL_33;
  }
  v32 = *(unsigned __int8 *)(v22 + 5);
  if (v32 == 2)
  {
    v34 = *(_QWORD *)(v22 + 8);
    if ((v34 & 1) != 0)
      v35 = (int *)(v22 + 16);
    else
      v35 = (int *)(v34 + 4);
    v36 = *v35;
    goto LABEL_28;
  }
  if (v32 == 3)
  {
    v36 = *(_DWORD *)(v22 + 8);
LABEL_28:
    v33 = v36 == 0;
    goto LABEL_29;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
    v31 = 1;
    if (!v16)
      goto LABEL_35;
    goto LABEL_33;
  }
  v33 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_29:
  v31 = !v33;
  if (v16)
  {
LABEL_33:
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
LABEL_35:
  if (*(_DWORD *)(v10 + 80))
  {
    v46 = *(_DWORD *)(v10 + 80);
    if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v24, v25, v26, v27, v28, v29);
    v47 = *(_QWORD *)(v10 + 16);
    v48 = v47 == 0;
    if (v47)
      v49 = 0;
    else
      v49 = v31;
    if (v48)
      result = 0xFFFE000000000064;
    else
      result = 0;
    if (v49)
      goto LABEL_37;
  }
  else
  {
    if (v31)
    {
LABEL_37:
      result = JSC::throwTypeError(a1, &v50);
      goto LABEL_39;
    }
    result = 0xFFFE000000000064;
  }
LABEL_39:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C4CBB4);
  }
  return result;
}

uint64_t JSC::DollarVMAssertScope::DollarVMAssertScope(JSC::DollarVMAssertScope *this)
{
  uint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t `anonymous namespace'::customGetterAcessorGetter(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  _BOOL4 v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t result;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  JSC::VM *v45;
  WTF::StringImpl *v46;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C4CDE8);
  }
  v10 = *((_QWORD *)a1 + 7);
  v45 = (JSC::VM *)v10;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) < 0x17u)
    goto LABEL_28;
  WTF::AtomStringImpl::addLiteral((uint64_t)"shouldThrow", 0xBuLL, a4, a5, a6, a7, a8, &v46);
  v11 = v46;
  v17 = JSC::JSObject::get((unsigned int *)a2, (uint64_t)a1, (unint64_t)v46, v12, v13, v14, v15, v16);
  if (v17 >= 0xFFFE000000000000)
  {
    v28 = (_DWORD)v17 == 0;
    goto LABEL_20;
  }
  *(_QWORD *)&v25 = v17 - 0x2000000000000;
  if (v17 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v26 = v25 > 0.0 || v25 < 0.0;
    if (v11)
      goto LABEL_24;
    goto LABEL_26;
  }
  if ((v17 & 0xFFFE000000000002) != 0)
  {
    v26 = v17 == 7;
    if (!v11)
      goto LABEL_26;
    goto LABEL_24;
  }
  v27 = *(unsigned __int8 *)(v17 + 5);
  if (v27 == 2)
  {
    v29 = *(_QWORD *)(v17 + 8);
    if ((v29 & 1) != 0)
      v30 = (int *)(v17 + 16);
    else
      v30 = (int *)(v29 + 4);
    v31 = *v30;
    goto LABEL_19;
  }
  if (v27 == 3)
  {
    v31 = *(_DWORD *)(v17 + 8);
LABEL_19:
    v28 = v31 == 0;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
    v26 = 1;
    if (!v11)
      goto LABEL_26;
    goto LABEL_24;
  }
  v28 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_20:
  v26 = !v28;
  if (v11)
  {
LABEL_24:
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
LABEL_26:
  if (*(_DWORD *)(v10 + 80))
  {
    v41 = *(_DWORD *)(v10 + 80);
    if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v19, v20, v21, v22, v23, v24);
    v42 = *(_QWORD *)(v10 + 16);
    v43 = v42 == 0;
    if (v42)
      v44 = 0;
    else
      v44 = v26;
    if (v43)
      result = 0xFFFE000000000064;
    else
      result = 0;
    if (v44)
      goto LABEL_28;
  }
  else
  {
    if (v26)
    {
LABEL_28:
      result = JSC::throwTypeError(a1, &v45);
      goto LABEL_30;
    }
    result = 0xFFFE000000000064;
  }
LABEL_30:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C4CE08);
  }
  return result;
}

unint64_t `anonymous namespace'::runtimeArrayLengthGetter(JSC::JSGlobalObject *a1, unint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;
  unint64_t result;
  uint64_t v8;
  JSC::VM *v9;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C4CF4CLL);
  }
  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_13;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
  }
  if (v3)
  {
    v8 = *(unsigned int *)(a2 + 28);
    if ((v8 & 0x80000000) != 0)
      return COERCE__INT64((double)v8) + 0x2000000000000;
    else
      return v8 | 0xFFFE000000000000;
  }
  else
  {
LABEL_13:
    result = JSC::throwTypeError(a1, &v9);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C4CF10);
    }
  }
  return result;
}

uint64_t `anonymous namespace'::testStaticAccessorGetter(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  WTF::StringImpl *v10;
  const JSC::PropertyTable *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::VM *v34;
  WTF::StringImpl *v35;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_16;
  }
  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v34 = v9;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    result = JSC::throwTypeError(a1, &v34);
  }
  else
  {
    WTF::AtomStringImpl::addLiteral((uint64_t)"testField", 9uLL, a4, a5, a6, a7, a8, &v35);
    v10 = v35;
    JSC::JSObject::getDirect((_DWORD *)a2, v9, (unint64_t)v35, v11, v12, v13, v14, v15);
    v24 = v23;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    if (v24)
      result = v24;
    else
      result = 10;
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_16:
    JUMPOUT(0x198C4D050);
  }
  return result;
}

BOOL `anonymous namespace'::testStaticAccessorPutter(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD v34[2];
  int v35;
  int v36;
  uint64_t v37;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C4D19CLL);
  }
  v9 = (int *)a2;
  v10 = *((_QWORD *)a1 + 7);
  v33 = a2;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
    v9 = (int *)JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v33, (unint64_t)a1);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_6;
  v32 = *(_DWORD *)(v10 + 80);
  if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
  {
    v22 = 0;
  }
  else
  {
LABEL_6:
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x198C4D1DCLL);
    }
    WTF::AtomStringImpl::addLiteral((uint64_t)"testField", 9uLL, a4, a5, a6, a7, a8, v34);
    v11 = (WTF::StringImpl *)v34[0];
    v34[0] = 0;
    v34[1] = v9;
    v35 = -1;
    v12.n128_u64[0] = 0x100000001000000;
    v36 = 0x1000000;
    v37 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v9, v10, (unint64_t)v11, a3, 0, (uint64_t)v34, v13, v14, v12);
    v22 = v15 == 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C4D1FCLL);
  }
  return v22;
}

uint64_t `anonymous namespace'::testStaticValueGetter()
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 10;
  result = 34;
  __break(0xC471u);
  return result;
}

BOOL `anonymous namespace'::testStaticValuePutter(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  WTF::StringImpl *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::VM *v32;
  _QWORD v33[2];
  int v34;
  int v35;
  uint64_t v36;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_13;
  }
  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v32 = v9;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v22 = JSC::throwTypeError(a1, &v32) != 0;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral((uint64_t)"testStaticValue", 0xFuLL, a4, a5, a6, a7, a8, v33);
    v11 = (WTF::StringImpl *)v33[0];
    v33[0] = 0;
    v33[1] = a2;
    v34 = -1;
    v12.n128_u64[0] = 0x100000001000000;
    v35 = 0x1000000;
    v36 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, (uint64_t)v9, (unint64_t)v11, a3, 0, (uint64_t)v33, v13, v14, v12);
    v22 = v15 == 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_13:
    JUMPOUT(0x198C4D36CLL);
  }
  return v22;
}

BOOL `anonymous namespace'::testStaticValuePutterSetFlag(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  WTF::StringImpl *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::VM *v31;
  _QWORD v32[2];
  int v33;
  int v34;
  uint64_t v35;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_13;
  }
  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v31 = v9;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v21 = JSC::throwTypeError(a1, &v31) != 0;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral((uint64_t)"testStaticValueSetterCalled", 0x1BuLL, a4, a5, a6, a7, a8, v32);
    v10 = (WTF::StringImpl *)v32[0];
    v32[0] = 0;
    v32[1] = a2;
    v33 = -1;
    v11.n128_u64[0] = 0x100000001000000;
    v34 = 0x1000000;
    v35 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, (uint64_t)v9, (unint64_t)v10, 7, 0, (uint64_t)v32, v12, v13, v11);
    v21 = v14 == 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_13:
    JUMPOUT(0x198C4D4A4);
  }
  return v21;
}

unint64_t `anonymous namespace'::domJITGetterCustomGetter(JSC::JSGlobalObject *a1, unint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;
  unint64_t result;
  JSC::VM *v8;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x198C4D578);
  }
  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v4 = (char **)(16 * v2);
    if ((_DWORD)v2)
    else
      v5 = 1;
    if (!v5)
    {
      do
      {
        v4 = (char **)v4[2];
        v3 = v4 != 0;
      }
    }
    if (v3)
      return *(unsigned int *)(a2 + 16) | 0xFFFE000000000000;
  }
  result = JSC::throwTypeError(a1, &v8);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  return result;
}

unint64_t domJITGetterSlowCall(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t vars0;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
    return *(unsigned int *)(a2 + 16) | 0xFFFE000000000000;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

unint64_t `anonymous namespace'::domJITGetterNoEffectCustomGetter(JSC::JSGlobalObject *a1, unint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;
  unint64_t result;
  JSC::VM *v8;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x198C4D6BCLL);
  }
  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v4 = (char **)(16 * v2);
    if ((_DWORD)v2)
    else
      v5 = 1;
    if (!v5)
    {
      do
      {
        v4 = (char **)v4[2];
        v3 = v4 != 0;
      }
    }
    if (v3)
      return *(unsigned int *)(a2 + 16) | 0xFFFE000000000000;
  }
  result = JSC::throwTypeError(a1, &v8);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  return result;
}

unint64_t domJITGetterNoEffectSlowCall(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t vars0;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
    return *(unsigned int *)(a2 + 16) | 0xFFFE000000000000;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

unint64_t `anonymous namespace'::domJITGetterComplexCustomGetter(unint64_t a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  unint64_t v9;
  uint64_t v10;
  JSC::Heap **v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  JSC::Exception *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v38)(_QWORD *);
  _QWORD *v39;
  WTF::StringImpl *v40;
  JSC::VM *v41;
  _QWORD v42[3];

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C4D904);
  }
  v3 = *(JSC::VM **)(a1 + 56);
  v41 = v3;
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_13;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
  }
  if (v5)
  {
    if (*(_BYTE *)(a2 + 20))
    {
      v10 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v10 = 0x2700000002;
      *(_QWORD *)(v10 + 8) = "DOMJITGetterComplex slow call exception";
      *(_DWORD *)(v10 + 16) = 4;
      v40 = (WTF::StringImpl *)v10;
      v11 = *(JSC::Heap ***)(a1 + 56);
      v12 = *(_QWORD *)(a1 + 1504);
      if ((v12 & 1) != 0)
      {
        v38 = *(uint64_t (**)(_QWORD *))(v12 & 0xFFFFFFFFFFFFFFFCLL);
        v39 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v39 = (_QWORD *)(a1 - 16);
        v42[0] = *v39;
        v42[1] = a1;
        v42[2] = a1 + 1504;
        v12 = v38(v42);
      }
      v13 = JSC::ErrorInstance::create(v11, v12, &v40, 0, 0, 0, 0, 1);
      v20 = (JSC::Exception *)v13;
      if ((v13 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)))
      {
        v20 = (JSC::Exception *)JSC::Exception::create((uint64_t)v3, (JSC::VM *)v13, 0, v14, v15, v16, v17, v18);
      }
      v9 = (unint64_t)JSC::VM::throwException(v3, (JSC::JSGlobalObject *)a1, v20, v19, v14, v15, v16, v17, v18);
      v28 = v40;
      v40 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
    }
    else
    {
      v9 = *(unsigned int *)(a2 + 16) | 0xFFFE000000000000;
    }
  }
  else
  {
LABEL_13:
    v9 = JSC::throwTypeError((JSC::JSGlobalObject *)a1, &v41);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C4D924);
  }
  return v9;
}

unint64_t domJITGetterComplexSlowCall(unint64_t a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  JSC::Heap **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  JSC::Exception *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::Exception *v27;
  WTF::StringImpl *v28;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD *);
  _QWORD *v39;
  WTF::StringImpl *v40;
  _QWORD var38[8];

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C4DB38);
  }
  v3 = *(JSC::VM **)(a1 + 56);
  *((_QWORD *)v3 + 5) = var38[7];
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
  }
  if (!v5 || !*(_BYTE *)(a2 + 20))
    return *(unsigned int *)(a2 + 16) | 0xFFFE000000000000;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x2700000002;
  *(_QWORD *)(v9 + 8) = "DOMJITGetterComplex slow call exception";
  *(_DWORD *)(v9 + 16) = 4;
  v40 = (WTF::StringImpl *)v9;
  v10 = *(JSC::Heap ***)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 1504);
  if ((v11 & 1) != 0)
  {
    v38 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v39 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v39 = (_QWORD *)(a1 - 16);
    var38[0] = *v39;
    var38[1] = a1;
    var38[2] = a1 + 1504;
    v11 = v38(var38);
  }
  v12 = JSC::ErrorInstance::create(v10, v11, &v40, 0, 0, 0, 0, 1);
  v19 = (JSC::Exception *)v12;
  if ((v12 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)))
  {
    v19 = (JSC::Exception *)JSC::Exception::create((uint64_t)v3, (JSC::VM *)v12, 0, v13, v14, v15, v16, v17);
  }
  v27 = JSC::VM::throwException(v3, (JSC::JSGlobalObject *)a1, v19, v18, v13, v14, v15, v16, v17);
  v28 = v40;
  v40 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C4DAE4);
  }
  return (unint64_t)v27;
}

unint64_t functionDOMJITFunctionObjectWithoutTypeCheck(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t vars0;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
    return *(unsigned int *)(a2 + 16) | 0xFFFE000000000000;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

unint64_t functionDOMJITCheckJSCastObjectWithoutTypeCheck(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t vars0;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
    return *(unsigned int *)(a2 + 16) | 0xFFFE000000000000;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t `anonymous namespace'::domJITGetterBaseJSObjectCustomGetter(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t result;
  JSC::VM *v3;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_10;
  }
  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) < 0x17u)
  {
    result = JSC::throwTypeError(a1, &v3);
    if ((_BYTE)qword_1ECF4C6A7)
      return result;
    __break(0xC471u);
LABEL_10:
    JUMPOUT(0x198C4DCDCLL);
  }
  result = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
  if (!result)
    return *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t domJITGetterBaseJSObjectSlowCall(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t vars0;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
    result = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
    if (!result)
      return *(_QWORD *)(a2 + 16);
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t `anonymous namespace'::customGetAccessor(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t `anonymous namespace'::customGetValue(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  char **v4;
  BOOL v5;
  uint64_t result;

  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v4 = (char **)(16 * v2);
    if ((_DWORD)v2)
    else
      v5 = 1;
    if (!v5)
    {
      do
      {
        v4 = (char **)v4[2];
        v3 = v4 != 0;
      }
    }
    if (v3)
      return a2;
  }
  result = 1738;
  __break(0xC471u);
  return result;
}

uint64_t `anonymous namespace'::customGetValue2(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  BOOL v10;
  char **v11;
  BOOL v12;
  JSC::VM *v14;
  WTF::StringImpl *v15;
  const JSC::PropertyTable *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_25;
  }
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_23;
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
  }
  if (!v10)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x198C4DF34);
  }
  v14 = *(JSC::VM **)(a1 + 56);
  WTF::AtomStringImpl::addLiteral((uint64_t)"value2", 6uLL, a4, a5, a6, a7, a8, &v39);
  v15 = v39;
  JSC::JSObject::getDirect((_DWORD *)a2, v14, (unint64_t)v39, v16, v17, v18, v19, v20);
  v29 = v28;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_25:
    JUMPOUT(0x198C4DF14);
  }
  if (v29)
    return v29;
  else
    return 10;
}

uint64_t `anonymous namespace'::customSetAccessor(unint64_t a1, const JSC::PropertyTable *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  int v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_14;
  }
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && a3[5] >= 0x17u)
  {
    v32[0] = 0;
    v32[1] = a3;
    v33 = -1;
    v34 = 0x1000000;
    v35 = 0;
    WTF::AtomStringImpl::addLiteral((uint64_t)"result", 6uLL, a4, a5, a6, a7, a8, &v36);
    v11 = v36;
    JSC::JSObject::put(a3, a1, (unint64_t)v36, a2, (uint64_t)v32, v12, v13, v14, v15);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
    if ((_BYTE)qword_1ECF4C6A7)
      return 1;
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x198C4E064);
  }
  return 0;
}

uint64_t `anonymous namespace'::customSetAccessorGlobalObject(const JSC::PropertyTable *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  int v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_14;
  }
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && a3[5] >= 0x17u)
  {
    v31[0] = 0;
    v31[1] = a3;
    v32 = -1;
    v33 = 0x1000000;
    v34 = 0;
    WTF::AtomStringImpl::addLiteral((uint64_t)"result", 6uLL, a4, a5, a6, a7, a8, &v35);
    v10 = v35;
    JSC::JSObject::put(a3, (unint64_t)a1, (unint64_t)v35, a1, (uint64_t)v31, v11, v12, v13, v14);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    if ((_BYTE)qword_1ECF4C6A7)
      return 1;
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x198C4E180);
  }
  return 0;
}

uint64_t `anonymous namespace'::customSetValue(unint64_t a1, const JSC::PropertyTable *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  int v38;
  int v39;
  uint64_t v40;
  WTF::StringImpl *v41;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v11 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
  }
  if (!v12)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x198C4E31CLL);
  }
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && a3[5] >= 0x17u)
  {
    v37[0] = 0;
    v37[1] = a3;
    v38 = -1;
    v39 = 0x1000000;
    v40 = 0;
    WTF::AtomStringImpl::addLiteral((uint64_t)"result", 6uLL, a4, a5, a6, a7, a8, &v41);
    v16 = v41;
    JSC::JSObject::put(a3, a1, (unint64_t)v41, a2, (uint64_t)v37, v17, v18, v19, v20);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl(v16, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    if ((_BYTE)qword_1ECF4C6A7)
      return 1;
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x198C4E2FCLL);
  }
  return 0;
}

uint64_t `anonymous namespace'::customSetValueGlobalObject(const JSC::PropertyTable *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  BOOL v11;
  char **v12;
  BOOL v13;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  int v37;
  int v38;
  uint64_t v39;
  WTF::StringImpl *v40;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
  }
  if (!v11)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x198C4E4ACLL);
  }
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && a3[5] >= 0x17u)
  {
    v36[0] = 0;
    v36[1] = a3;
    v37 = -1;
    v38 = 0x1000000;
    v39 = 0;
    WTF::AtomStringImpl::addLiteral((uint64_t)"result", 6uLL, a4, a5, a6, a7, a8, &v40);
    v15 = v40;
    JSC::JSObject::put(a3, (unint64_t)a1, (unint64_t)v40, a1, (uint64_t)v36, v16, v17, v18, v19);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if ((_BYTE)qword_1ECF4C6A7)
      return 1;
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x198C4E48CLL);
  }
  return 0;
}

uint64_t `anonymous namespace'::customSetValue2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  BOOL v11;
  char **v12;
  BOOL v13;
  uint64_t v15;
  WTF::StringImpl *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  int v37;
  int v38;
  uint64_t v39;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_22;
  }
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    goto LABEL_20;
  v10 = *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
  }
  if (!v11)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x198C4E630);
  }
  v15 = *(_QWORD *)(a1 + 56);
  WTF::AtomStringImpl::addLiteral((uint64_t)"value2", 6uLL, a4, a5, a6, a7, a8, v36);
  v16 = (WTF::StringImpl *)v36[0];
  v36[0] = 0;
  v36[1] = a2;
  v37 = -1;
  v17.n128_u64[0] = 0x100000001000000;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a2, v15, (unint64_t)v16, a3, 0, (uint64_t)v36, v18, v19, v17);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x198C4E610);
  }
  return 1;
}

uint64_t `anonymous namespace'::customFunctionSetter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  int v19;
  char v20;
  _QWORD v21[11];
  unsigned __int8 v22[8];
  uint64_t v23;
  uint64_t v24;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_15;
  }
  if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 26)
    return 0;
  v8 = *(_QWORD *)(a3 + 24);
  if ((v8 & 1) != 0)
    v8 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v8 + 5) == 8)
  {
    v22[0] = 1;
    v23 = *(_QWORD *)(v8 + 40);
    LOBYTE(v24) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C));
  }
  else
  {
    v22[0] = 2;
    v9 = *(_QWORD *)(a3 + 16);
    v23 = v8;
    v24 = v9;
  }
  v20 = 0;
  v21[0] = 0x800000000;
  v21[1] = &v21[3];
  memset(&v21[2], 0, 72);
  v18 = &v21[3];
  v19 = 0;
  JSC::call(a1, a3, v22, 10, (uint64_t)&v18, a6, a7, a8);
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v21, v10, v11, v12, v13, v14, v15, v16);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_15:
    JUMPOUT(0x198C4E788);
  }
  return 1;
}

void JSC::JSDollarVM::getOwnPropertyNames(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSObject::getOwnIndexedPropertyNames((uint64_t)a1, a2, a3, 1, a5, a6, a7, a8);
  JSC::JSObject::getOwnNonIndexPropertyNames(a1, a2, a3, (const JSC::PropertyTable *)1);
}

void JSC::JSDollarVM::visitChildren(JSC::JSDollarVM *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_DWORD *)this + 4);
  v17 = v16 & 0xFFFFFFFE;
  if ((v16 & 0xFFFFFFFE) != 0)
  {
    v18 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v17) & 0xFFFFFC000 | 0x20) != v18)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v17) & 0xFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)(((16 * v17) & 0xFFFFFC000) + 8 * ((v17 >> 6) & 0xF) + 0x28) >> (v17 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v17, 0, v11, v12, v13, v14, v15);
    }
  }
}

uint64_t JSC::JSDollarVM::visitChildren(JSC::JSDollarVM *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  char v11;

  v9[0] = a2;
  v9[1] = this;
  v11 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v10 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v9;
    JSC::JSObject::visitChildren(this, a2, a3);
    v6 = *((_DWORD *)this + 4);
    if (v6)
      v7 = 16 * (v6 & 0xFFFFFFFE);
    else
      v7 = 0;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
    *(_QWORD *)(v9[0] + 88) = v10;
  }
  return result;
}

unint64_t JSC::JSDollarVM::finishCreation(JSC::JSDollarVM *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  JSC::VM *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t SlowCase;
  unint64_t result;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  WTF::StringImpl *v243;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50388);
  }
  if (*((_BYTE *)a2 + 755))
  {
    __dmb(0xAu);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C503B4);
    }
  }
  v10 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "abort", 6uLL, (uint64_t)JSC::functionCrash, 0, a8);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C503D4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "crash", 6uLL, (uint64_t)JSC::functionCrash, 0, v11);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C503F4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "breakpoint", 0xBuLL, (uint64_t)JSC::functionBreakpoint, 0, v12);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50414);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "exit", 5uLL, (uint64_t)JSC::functionExit, 0, v13);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50434);
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"dfgTrue", 7uLL, v14, v15, v16, v17, v18, &v243);
  v19 = v243;
  JSC::JSObject::putDirectNativeFunction(this, (uint64_t)a2, v10, (unint64_t *)&v243, 0, (uint64_t)JSC::functionDFGTrue, 0, 157, 0xEu);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"ftlTrue", 7uLL, v22, v23, v24, v25, v26, &v243);
  v27 = v243;
  JSC::JSObject::putDirectNativeFunction(this, (uint64_t)a2, v10, (unint64_t *)&v243, 0, (uint64_t)JSC::functionFTLTrue, 0, 158, 0xEu);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"cpuMfence", 9uLL, v30, v31, v32, v33, v34, &v243);
  v35 = v243;
  JSC::JSObject::putDirectNativeFunction(this, (uint64_t)a2, v10, (unint64_t *)&v243, 0, (uint64_t)JSC::functionCpuMfence, 0, 164, 0xEu);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v207, v208, v209, v210, v211, v212, v213, v214);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"cpuRdtsc", 8uLL, v38, v39, v40, v41, v42, &v243);
  v43 = v243;
  JSC::JSObject::putDirectNativeFunction(this, (uint64_t)a2, v10, (unint64_t *)&v243, 0, (uint64_t)JSC::functionCpuRdtsc, 0, 165, 0xEu);
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v215, v216, v217, v218, v219, v220, v221, v222);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"cpuCpuid", 8uLL, v46, v47, v48, v49, v50, &v243);
  v51 = v243;
  JSC::JSObject::putDirectNativeFunction(this, (uint64_t)a2, v10, (unint64_t *)&v243, 0, (uint64_t)JSC::functionCpuCpuid, 0, 166, 0xEu);
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v223, v224, v225, v226, v227, v228, v229, v230);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"cpuPause", 8uLL, v54, v55, v56, v57, v58, &v243);
  v59 = v243;
  JSC::JSObject::putDirectNativeFunction(this, (uint64_t)a2, v10, (unint64_t *)&v243, 0, (uint64_t)JSC::functionCpuPause, 0, 167, 0xEu);
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v60, v61, v62, v63, v64, v65, v66);
      WTF::fastFree(v231, v232, v233, v234, v235, v236, v237, v238);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50454);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "cpuClflush", 0xBuLL, (uint64_t)JSC::functionCpuClflush, 2, v66);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50474);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "llintTrue", 0xAuLL, (uint64_t)JSC::functionLLintTrue, 0, v67);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50494);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "baselineJITTrue", 0x10uLL, (uint64_t)JSC::functionBaselineJITTrue, 0, v68);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C504B4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "noInline", 9uLL, (uint64_t)JSC::functionNoInline, 1, v69);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C504D4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "gc", 3uLL, (uint64_t)JSC::functionGC, 0, v70);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C504F4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "gcSweepAsynchronously", 0x16uLL, (uint64_t)JSC::functionGCSweepAsynchronously, 0, v71);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50514);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "edenGC", 7uLL, (uint64_t)JSC::functionEdenGC, 0, v72);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50534);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "dumpSubspaceHashes", 0x13uLL, (uint64_t)JSC::functionDumpSubspaceHashes, 0, v73);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50554);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "callFrame", 0xAuLL, (uint64_t)JSC::functionCallFrame, 1, v74);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50574);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "codeBlockFor", 0xDuLL, (uint64_t)JSC::functionCodeBlockFor, 1, v75);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50594);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "codeBlockForFrame", 0x12uLL, (uint64_t)JSC::functionCodeBlockForFrame, 1, v76);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C505B4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "dumpSourceFor", 0xEuLL, (uint64_t)JSC::functionDumpSourceFor, 1, v77);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C505D4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "dumpBytecodeFor", 0x10uLL, (uint64_t)JSC::functionDumpBytecodeFor, 1, v78);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C505F4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "dataLog", 8uLL, (uint64_t)JSC::functionDataLog, 1, v79);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50614);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "print", 6uLL, (uint64_t)JSC::functionPrint, 1, v80);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50634);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "dumpCallFrame", 0xEuLL, (uint64_t)JSC::functionDumpCallFrame, 0, v81);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50654);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "dumpStack", 0xAuLL, (uint64_t)JSC::functionDumpStack, 0, v82);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50674);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "dumpRegisters", 0xEuLL, (uint64_t)JSC::functionDumpRegisters, 1, v83);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50694);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "dumpCell", 9uLL, (uint64_t)JSC::functionDumpCell, 1, v84);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C506B4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "indexingMode", 0xDuLL, (uint64_t)JSC::functionIndexingMode, 1, v85);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C506D4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "inlineCapacity", 0xFuLL, (uint64_t)JSC::functionInlineCapacity, 1, v86);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C506F4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "clearLinkBufferStats", 0x15uLL, (uint64_t)JSC::functionClearLinkBufferStats, 0, v87);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50714);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "linkBufferStats", 0x10uLL, (uint64_t)JSC::functionLinkBufferStats, 0, v88);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50734);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "value", 6uLL, (uint64_t)JSC::functionValue, 1, v89);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50754);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "getpid", 7uLL, (uint64_t)JSC::functionGetPID, 0, v90);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50774);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "haveABadTime", 0xDuLL, (uint64_t)JSC::functionHaveABadTime, 1, v91);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50794);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "isHavingABadTime", 0x11uLL, (uint64_t)JSC::functionIsHavingABadTime, 1, v92);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C507B4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "callWithStackSize", 0x12uLL, (uint64_t)JSC::functionCallWithStackSize, 2, v93);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C507D4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createGlobalObject", 0x13uLL, (uint64_t)JSC::functionCreateGlobalObject, 0, v94);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C507F4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createGlobalProxy", 0x12uLL, (uint64_t)JSC::functionCreateProxy, 1, v95);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50814);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createRuntimeArray", 0x13uLL, (uint64_t)JSC::functionCreateRuntimeArray, 0, v96);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50834);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createImpureGetter", 0x13uLL, (uint64_t)JSC::functionCreateImpureGetter, 1, v97);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50854);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createCustomGetterObject", 0x19uLL, (uint64_t)JSC::functionCreateCustomGetterObject, 0, v98);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50874);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createDOMJITNodeObject", 0x17uLL, (uint64_t)JSC::functionCreateDOMJITNodeObject, 0, v99);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50894);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createDOMJITGetterObject", 0x19uLL, (uint64_t)JSC::functionCreateDOMJITGetterObject, 0, v100);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C508B4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createDOMJITGetterNoEffectsObject", 0x22uLL, (uint64_t)JSC::functionCreateDOMJITGetterNoEffectsObject, 0, v101);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C508D4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createDOMJITGetterComplexObject", 0x20uLL, (uint64_t)JSC::functionCreateDOMJITGetterComplexObject, 0, v102);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C508F4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createDOMJITFunctionObject", 0x1BuLL, (uint64_t)JSC::functionCreateDOMJITFunctionObject, 0, v103);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50914);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createDOMJITCheckJSCastObject", 0x1EuLL, (uint64_t)JSC::functionCreateDOMJITCheckJSCastObject, 0, v104);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50934);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createDOMJITGetterBaseJSObject", 0x1FuLL, (uint64_t)JSC::functionCreateDOMJITGetterBaseJSObject, 0, v105);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50954);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createBuiltin", 0xEuLL, (uint64_t)JSC::functionCreateBuiltin, 2, v106);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50974);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "vmTaintedState", 0xFuLL, (uint64_t)JSC::functionVMTaintedState, 0, v107);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50994);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "runTaintedString", 0x11uLL, (uint64_t)JSC::functionRunTaintedString, 1, v108);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C509B4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createWasmStreamingParser", 0x1AuLL, (uint64_t)JSC::functionCreateWasmStreamingParser, 0, v109);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C509D4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createWasmStreamingCompilerForCompile", 0x26uLL, (uint64_t)JSC::functionCreateWasmStreamingCompilerForCompile, 0, v110);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C509F4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createWasmStreamingCompilerForInstantiate", 0x2AuLL, (uint64_t)JSC::functionCreateWasmStreamingCompilerForInstantiate, 0, v111);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50A14);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createStaticCustomAccessor", 0x1BuLL, (uint64_t)JSC::functionCreateStaticCustomAccessor, 0, v112);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50A34);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createStaticCustomValue", 0x18uLL, (uint64_t)JSC::functionCreateStaticCustomValue, 0, v113);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50A54);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createStaticDontDeleteDontEnum", 0x1FuLL, (uint64_t)JSC::functionCreateStaticDontDeleteDontEnum, 0, v114);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50A74);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createObjectDoingSideEffectPutWithoutCorrectSlotStatus", 0x37uLL, (uint64_t)JSC::functionCreateObjectDoingSideEffectPutWithoutCorrectSlotStatus, 0, v115);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50A94);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createEmptyFunctionWithName", 0x1CuLL, (uint64_t)JSC::functionCreateEmptyFunctionWithName, 1, v116);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50AB4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "getPrivateProperty", 0x13uLL, (uint64_t)JSC::functionGetPrivateProperty, 2, v117);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50AD4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "setImpureGetterDelegate", 0x18uLL, (uint64_t)JSC::functionSetImpureGetterDelegate, 2, v118);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50AF4);
  }
  JSC::JSDollarVM::addConstructibleFunction((int *)this, (uint64_t)a2, v10, "Root", 5uLL, (unint64_t)JSC::functionCreateRoot, 0, v119);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50B14);
  }
  JSC::JSDollarVM::addConstructibleFunction((int *)this, (uint64_t)a2, v10, "Element", 8uLL, (unint64_t)JSC::functionCreateElement, 1, v120);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50B34);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "getElement", 0xBuLL, (uint64_t)JSC::functionGetElement, 1, v121);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50B54);
  }
  JSC::JSDollarVM::addConstructibleFunction((int *)this, (uint64_t)a2, v10, "SimpleObject", 0xDuLL, (unint64_t)JSC::functionCreateSimpleObject, 0, v122);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50B74);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "getHiddenValue", 0xFuLL, (uint64_t)JSC::functionGetHiddenValue, 1, v123);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50B94);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "setHiddenValue", 0xFuLL, (uint64_t)JSC::functionSetHiddenValue, 2, v124);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50BB4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "shadowChickenFunctionsOnStack", 0x1EuLL, (uint64_t)JSC::functionShadowChickenFunctionsOnStack, 0, v125);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50BD4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "setGlobalConstRedeclarationShouldNotThrow", 0x2AuLL, (uint64_t)JSC::functionSetGlobalConstRedeclarationShouldNotThrow, 0, v126);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50BF4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "findTypeForExpression", 0x16uLL, (uint64_t)JSC::functionFindTypeForExpression, 2, v127);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50C14);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "returnTypeFor", 0xEuLL, (uint64_t)JSC::functionReturnTypeFor, 1, v128);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50C34);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "flattenDictionaryObject", 0x18uLL, (uint64_t)JSC::functionFlattenDictionaryObject, 1, v129);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50C54);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "dumpBasicBlockExecutionRanges", 0x1EuLL, (uint64_t)JSC::functionDumpBasicBlockExecutionRanges, 0, v130);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50C74);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "hasBasicBlockExecuted", 0x16uLL, (uint64_t)JSC::functionHasBasicBlockExecuted, 2, v131);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50C94);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "basicBlockExecutionCount", 0x19uLL, (uint64_t)JSC::functionBasicBlockExecutionCount, 2, v132);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50CB4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "enableDebuggerModeWhenIdle", 0x1BuLL, (uint64_t)JSC::functionEnableDebuggerModeWhenIdle, 0, v133);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50CD4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "disableDebuggerModeWhenIdle", 0x1CuLL, (uint64_t)JSC::functionDisableDebuggerModeWhenIdle, 0, v134);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50CF4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "deleteAllCodeWhenIdle", 0x16uLL, (uint64_t)JSC::functionDeleteAllCodeWhenIdle, 0, v135);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50D14);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "globalObjectCount", 0x12uLL, (uint64_t)JSC::functionGlobalObjectCount, 0, v136);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50D34);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "globalObjectForObject", 0x16uLL, (uint64_t)JSC::functionGlobalObjectForObject, 1, v137);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50D54);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "getGetterSetter", 0x10uLL, (uint64_t)JSC::functionGetGetterSetter, 2, v138);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50D74);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "loadGetterFromGetterSetter", 0x1BuLL, (uint64_t)JSC::functionLoadGetterFromGetterSetter, 1, v139);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50D94);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "createCustomTestGetterSetter", 0x1DuLL, (uint64_t)JSC::functionCreateCustomTestGetterSetter, 1, v140);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50DB4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "deltaBetweenButterflies", 0x18uLL, (uint64_t)JSC::functionDeltaBetweenButterflies, 2, v141);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50DD4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "currentCPUTime", 0xFuLL, (uint64_t)JSC::functionCurrentCPUTime, 0, v142);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50DF4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "totalGCTime", 0xCuLL, (uint64_t)JSC::functionTotalGCTime, 0, v143);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50E14);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "parseCount", 0xBuLL, (uint64_t)JSC::functionParseCount, 0, v144);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50E34);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "isWasmSupported", 0x10uLL, (uint64_t)JSC::functionIsWasmSupported, 0, v145);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50E54);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "make16BitStringIfPossible", 0x1AuLL, (uint64_t)JSC::functionMake16BitStringIfPossible, 1, v146);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50E74);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "getStructureTransitionList", 0x1BuLL, (uint64_t)JSC::functionGetStructureTransitionList, 1, v147);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50E94);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "getConcurrently", 0x10uLL, (uint64_t)JSC::functionGetConcurrently, 2, v148);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50EB4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "hasOwnLengthProperty", 0x15uLL, (uint64_t)JSC::functionHasOwnLengthProperty, 1, v149);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50ED4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "rejectPromiseAsHandled", 0x17uLL, (uint64_t)JSC::functionRejectPromiseAsHandled, 1, v150);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50EF4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "setUserPreferredLanguages", 0x1AuLL, (uint64_t)JSC::functionSetUserPreferredLanguages, 1, v151);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50F14);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "icuVersion", 0xBuLL, (uint64_t)JSC::functionICUVersion, 0, v152);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50F34);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "icuMinorVersion", 0x10uLL, (uint64_t)JSC::functionICUMinorVersion, 0, v153);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50F54);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "icuHeaderVersion", 0x11uLL, (uint64_t)JSC::functionICUHeaderVersion, 0, v154);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50F74);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "assertEnabled", 0xEuLL, (uint64_t)JSC::functionAssertEnabled, 0, v155);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50F94);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "securityAssertEnabled", 0x16uLL, (uint64_t)JSC::functionSecurityAssertEnabled, 0, v156);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50FB4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "asanEnabled", 0xCuLL, (uint64_t)JSC::functionAsanEnabled, 0, v157);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50FD4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "isMemoryLimited", 0x10uLL, (uint64_t)JSC::functionIsMemoryLimited, 0, v158);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C50FF4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "useJIT", 7uLL, (uint64_t)JSC::functionUseJIT, 0, v159);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51014);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "useDFGJIT", 0xAuLL, (uint64_t)JSC::functionUseDFGJIT, 0, v160);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51034);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "useFTLJIT", 0xAuLL, (uint64_t)JSC::functionUseFTLJIT, 0, v161);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51054);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "isGigacageEnabled", 0x12uLL, (uint64_t)JSC::functionIsGigacageEnabled, 0, v162);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51074);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "toCacheableDictionary", 0x16uLL, (uint64_t)JSC::functionToCacheableDictionary, 1, v163);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51094);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "toUncacheableDictionary", 0x18uLL, (uint64_t)JSC::functionToUncacheableDictionary, 1, v164);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C510B4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "isPrivateSymbol", 0x10uLL, (uint64_t)JSC::functionIsPrivateSymbol, 1, v165);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C510D4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "dumpAndResetPasDebugSpectrum", 0x1DuLL, (uint64_t)JSC::functionDumpAndResetPasDebugSpectrum, 0, v166);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C510F4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "monotonicTimeNow", 0x11uLL, (uint64_t)JSC::functionMonotonicTimeNow, 0, v167);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51114);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "wallTimeNow", 0xCuLL, (uint64_t)JSC::functionWallTimeNow, 0, v168);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51134);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "approximateTimeNow", 0x13uLL, (uint64_t)JSC::functionApproximateTimeNow, 0, v169);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51154);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "heapExtraMemorySize", 0x14uLL, (uint64_t)JSC::functionHeapExtraMemorySize, 0, v170);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51174);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "jitSizeStatistics", 0x12uLL, (uint64_t)JSC::functionJITSizeStatistics, 0, v171);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51194);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "dumpJITSizeStatistics", 0x16uLL, (uint64_t)JSC::functionDumpJITSizeStatistics, 0, v172);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C511B4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "resetJITSizeStatistics", 0x17uLL, (uint64_t)JSC::functionResetJITSizeStatistics, 0, v173);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C511D4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "allowDoubleShape", 0x11uLL, (uint64_t)JSC::functionAllowDoubleShape, 0, v174);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C511F4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "ensureArrayStorage", 0x13uLL, (uint64_t)JSC::functionEnsureArrayStorage, 1, v175);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51214);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "setCrashLogMessage", 0x13uLL, (uint64_t)JSC::functionSetCrashLogMessage, 1, v176);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51234);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "assertFrameAligned", 0x13uLL, (uint64_t)JSC::functionAssertFrameAligned, 0, v177);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51254);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "callFromCPPAsFirstEntry", 0x18uLL, (uint64_t)JSC::functionCallFromCPPAsFirstEntry, 2, v178);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51274);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "callFromCPP", 0xCuLL, (uint64_t)JSC::functionCallFromCPP, 2, v179);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51294);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "cachedCallFromCPP", 0x12uLL, (uint64_t)JSC::functionCachedCallFromCPP, 2, v180);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C512B4);
  }
  JSC::JSDollarVM::addFunction((int *)this, (uint64_t)a2, v10, "dumpLineBreakData", 0x12uLL, (uint64_t)JSC::functionDumpLineBreakData, 0, v181);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C512D4);
  }
  LODWORD(v243) = 67117079;
  SlowCase = *((_QWORD *)a2 + 5017);
  if (SlowCase < *((_QWORD *)a2 + 5018))
    goto LABEL_143;
  SlowCase = *((_QWORD *)a2 + 5019);
  if ((SlowCase & 1) == 0)
  {
    v239 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = SlowCase + HIDWORD(v239);
    *((_QWORD *)a2 + 5019) = SlowCase + (int)v239;
LABEL_143:
    *((_QWORD *)a2 + 5017) = SlowCase + 128;
    goto LABEL_144;
  }
  JSC::sanitizeStackForVM(a2, v182, v183, v184, v185, v186, v187, v188);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 40112, (uint64_t)a2 + 192, 128, 0, 0, v240, v241, v242);
LABEL_144:
  *(_DWORD *)SlowCase = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51320);
  }
  *((_DWORD *)this + 4) = result >> 4;
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
  {
    result = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C50368);
    }
  }
  return result;
}

void JSC::functionCrash(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  const WTF::String *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v40;
  uint64_t v41;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    if (*((_DWORD *)a2 + 8) != 1)
    {
      v4 = *((_QWORD *)this + 7);
      v41 = *((int *)a2 + 8) - 1;
      WTF::dataLog<char [9],unsigned long,char [25],char [2]>(&v41);
      JSC::doPrint(this, a2, (JSC::CallFrame *)1, v5, v6, v7, v8, v9, v10);
      v18 = *(_QWORD *)(v4 + 16);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 8);
        v41 = v19;
        *(_QWORD *)(v4 + 16) = 0;
        v20 = (unsigned int *)(v4 + 80);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 & 0xFFFFFFEF, v20));
        if ((v19 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v19 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v41, this, v11, v12, v13, v14, v15, v16, (int **)&v40);
        }
        else
        {
          v22 = *(WTF::StringImpl **)(v19 + 8);
          if ((v22 & 1) != 0)
            v22 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v19, this, (uint64_t)v11, v12, v17, v13, v14, v15, v16);
          if (v22)
            *(_DWORD *)v22 += 2;
          v40 = v22;
        }
        WTF::dataLog<char [30],WTF::String,char [2]>((WTF::PrintStream *)&v40);
        v30 = v40;
        v40 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
            WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
          }
          else
          {
            *(_DWORD *)v30 -= 2;
          }
        }
      }
    }
    __break(0xC471u);
  }
  else
  {
    __break(0xC471u);
  }
  JUMPOUT(0x198C51398);
}

uint64_t JSC::functionBreakpoint(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51584);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_17;
  v3 = *((_QWORD *)a2 + 6);
  if (v3 >= 0xFFFE000000000000)
    goto LABEL_16;
  if (v3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (COERCE_DOUBLE(v3 - 0x2000000000000) != 0.0)
      goto LABEL_17;
    return 10;
  }
  if ((v3 & 0xFFFE000000000002) != 0)
  {
    if (v3 != 7)
      return 10;
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x198C51544);
  }
  v4 = *(unsigned __int8 *)(v3 + 5);
  if (v4 == 2)
  {
    v6 = *(_QWORD *)(v3 + 8);
    v3 += 16;
    if ((v6 & 1) == 0)
      v3 = v6 + 4;
    LODWORD(v3) = *(_DWORD *)v3;
LABEL_16:
    if ((_DWORD)v3)
      goto LABEL_17;
    return 10;
  }
  if (v4 == 3)
  {
    LODWORD(v3) = *(_DWORD *)(v3 + 8);
    goto LABEL_16;
  }
  v5 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v5 + 10) & 1) == 0 || *(JSC **)(v5 + 40) != this)
    goto LABEL_17;
  return 10;
}

void JSC::functionExit(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::DollarVMAssertScope::DollarVMAssertScope(this);
  WTF::exitProcess(0);
}

uint64_t JSC::functionDFGTrue(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 6;
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t JSC::functionFTLTrue(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 6;
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t JSC::functionCpuMfence(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 10;
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t JSC::functionCpuRdtsc(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 0xFFFE000000000000;
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t JSC::functionCpuCpuid(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 10;
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t JSC::functionCpuPause(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 10;
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t JSC::functionCpuClflush(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 6;
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t JSC::functionLLintTrue(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t result;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  JSC::Wasm::NameSection *v25;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51838);
  }
  if (!a2)
    return 10;
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v21, a2, this[7], 0, a5, a6, a7, a8);
  if (v22
    && (JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v21, (uint64_t)v8, v9, v10, v11, v12, v13, v14), v22)
    && v23
    && (v15 = *(_QWORD *)(v23 + 120)) != 0)
  {
    v16 = *(unsigned __int8 *)(v15 + 12);
  }
  else
  {
    v16 = 0;
  }
  v17 = v24;
  v24 = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      v25 = (JSC::Wasm::NameSection *)v17;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v25, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  if (v16 == 2)
    result = 7;
  else
    result = 6;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51804);
  }
  return result;
}

uint64_t JSC::functionBaselineJITTrue(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t result;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  JSC::Wasm::NameSection *v25;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51940);
  }
  if (!a2)
    return 10;
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v21, a2, this[7], 0, a5, a6, a7, a8);
  if (v22
    && (JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v21, (uint64_t)v8, v9, v10, v11, v12, v13, v14), v22)
    && v23
    && (v15 = *(_QWORD *)(v23 + 120)) != 0)
  {
    v16 = *(unsigned __int8 *)(v15 + 12);
  }
  else
  {
    v16 = 0;
  }
  v17 = v24;
  v24 = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      v25 = (JSC::Wasm::NameSection *)v17;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v25, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  if (v16 == 3)
    result = 7;
  else
    result = 6;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5190CLL);
  }
  return result;
}

uint64_t JSC::functionNoInline(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_11;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v3 = *((_QWORD *)a2 + 6);
    if ((v3 & 0xFFFE000000000002) == 0 && v3 && *(_BYTE *)(v3 + 5) == 26)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if ((v4 & 1) != 0)
        v4 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v4 + 5) == 12)
      {
        *(_WORD *)(v4 + 70) |= 2u;
        if (!(_BYTE)qword_1ECF4C6A7)
        {
LABEL_11:
          __break(0xC471u);
          JUMPOUT(0x198C519F0);
        }
      }
    }
  }
  return 10;
}

uint64_t JSC::functionGC(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int16 v17;
  unsigned int *v18;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51AF0);
  }
  v8 = *((_QWORD *)this + 7);
  v9 = *(_QWORD *)(v8 + 112);
  if (!*(_BYTE *)(v9 + 6))
    goto LABEL_6;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = WTF::Thread::initializeCurrentTLS(0);
  if (v10 == v11)
  {
    v17 = 257;
    v18 = 0;
    JSC::Heap::collectNow((JSC::Heap *)(v8 + 192), (void *)1, (uint64_t)&v17, a4, a5, a6, a7, a8);
    v12 = v18;
    v18 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
LABEL_6:
    WTF::dataLog<char [16]>("ERROR: current thread does not own the JSLock\n");
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C51B10);
  }
  return 10;
}

uint64_t JSC::functionGCSweepAsynchronously(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  __int16 v14;
  unsigned int *v15;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_11;
  }
  v8 = (JSC::Heap *)(*((_QWORD *)this + 7) + 192);
  v14 = 257;
  v15 = 0;
  JSC::Heap::collectNow(v8, 0, (uint64_t)&v14, a4, a5, a6, a7, a8);
  v9 = v15;
  v15 = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_11:
    JUMPOUT(0x198C51BCCLL);
  }
  return 10;
}

uint64_t JSC::functionEdenGC(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Heap *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v21;
  uint64_t v22;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_14;
  }
  v8 = *((_QWORD *)this + 7);
  v9 = *(_QWORD *)(v8 + 112);
  if (!*(_BYTE *)(v9 + 6))
    goto LABEL_6;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = WTF::Thread::initializeCurrentTLS(0);
  if (v10 == v11)
  {
    if (HIBYTE(word_1ECF4C5CC) && *(_BYTE *)(v8 + 753))
    {
      v12 = (JSC::Heap *)(v8 + 192);
      v21 = 256;
      v22 = 0;
      v13 = JSC::Heap::requestCollection((uint64_t)v12, (uint64_t)&v21, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::Heap::waitForCollection(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  else
  {
LABEL_6:
    WTF::dataLog<char [16]>("ERROR: current thread does not own the JSLock\n");
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x198C51CE0);
  }
  return 10;
}

uint64_t JSC::functionDumpSubspaceHashes(JSC::VMInspector **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  if (!(_BYTE)qword_1ECF4C6A7 || (JSC::VMInspector::dumpSubspaceHashes(this[7], a2), !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C51D5CLL);
  }
  return 10;
}

unint64_t JSC::functionCallFrame(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  unint64_t Slow;
  uint64_t v14;
  unint64_t SlowCase;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  WTF::StringImpl *v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  WTF::AtomStringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD v169[2];
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  WTF::StringImpl *v175;
  JSC::Wasm::NameSection *v176;
  unint64_t v177;
  int v178;
  int v179;
  uint64_t v180;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C52344);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v10 = 1;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 6);
    if (v11 < 0xFFFE000000000000 || (v11 & 0x80000000) != 0)
      return 10;
    v10 = v11 + 1;
  }
  v14 = *((_QWORD *)this + 7);
  LODWORD(v169[0]) = 23;
  SlowCase = *(_QWORD *)(v14 + 40136);
  if (SlowCase < *(_QWORD *)(v14 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v14 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v159 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v14 + 40160);
    *(_QWORD *)(v14 + 40144) = SlowCase + HIDWORD(v159);
    *(_QWORD *)(v14 + 40152) = SlowCase + (int)v159;
LABEL_11:
    *(_QWORD *)(v14 + 40136) = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC *)v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v14 + 40112, v14 + 192, 128, 0, 0, v161, v162, v163);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C52390);
  }
  v23 = *(_QWORD *)(v14 + 15032);
  if (v23)
  {
    v24 = *(unsigned int *)(v23 + 60);
    Slow = *(_QWORD *)(v23 + 24);
    if (Slow < *(_QWORD *)(v23 + 32))
    {
LABEL_17:
      *(_QWORD *)(v23 + 24) = Slow + v24;
      goto LABEL_18;
    }
    Slow = *(_QWORD *)(v23 + 40);
    if ((Slow & 1) == 0)
    {
      v160 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v23 + 48);
      *(_QWORD *)(v23 + 32) = Slow + HIDWORD(v160);
      *(_QWORD *)(v23 + 40) = Slow + (int)v160;
      goto LABEL_17;
    }
    v164 = *(_QWORD *)(v14 + 15032);
    v165 = *(unsigned int *)(v23 + 60);
    JSC::sanitizeStackForVM((JSC *)v14, v16, v17, v18, v19, v20, v21, v22);
    Slow = JSC::LocalAllocator::allocateSlowCase(v164, v14 + 192, v165, 0, 0, v166, v167, v168);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v14 + 14936, (JSC *)v14, 0x10uLL, 0, v19, v20, v21, v22);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C52324);
    }
  }
LABEL_18:
  *(_DWORD *)Slow = 0;
  v25 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v25;
  *(_QWORD *)(Slow + 8) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C523B0);
  }
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v169, a2, (JSC::VM *)v14, 0, v19, v20, v21, v22);
  if (v170)
  {
    v33 = v10 + 1;
    v34 = 6;
    while (1)
    {
      if (!(_BYTE)qword_1ECF4C6A7)
      {
        __break(0xC471u);
        JUMPOUT(0x198C522E4);
      }
      if (!--v33)
        break;
      JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v169, (uint64_t)v26, v27, v28, v29, v30, v31, v32);
      if (!v170)
        goto LABEL_60;
    }
    JSC::StackVisitor::Frame::functionName((JSC::StackVisitor::Frame *)v169, (uint64_t *)&v175);
    v41 = JSC::jsString(v14, (JSC::VM *)&v175, v35, v36, v37, v38, v39, v40);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C52474);
    }
    v47 = v41;
    WTF::AtomStringImpl::addLiteral((uint64_t)"name", 4uLL, v42, v43, v44, v45, v46, &v176);
    v48 = v176;
    v176 = 0;
    v177 = Slow;
    v178 = -1;
    v49.n128_u64[0] = 0x100000001000000;
    v179 = 0x1000000;
    v180 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v14, (unint64_t)v48, v47, 0, (uint64_t)&v176, v50, v51, v49);
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C52494);
    }
    v52 = v175;
    v175 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
        v53 = qword_1ECF4C6A7;
        goto LABEL_37;
      }
      *(_DWORD *)v52 -= 2;
    }
    v53 = 1;
LABEL_37:
    v54 = v172;
    if ((v172 & 0xFFFE000000000007) != 3)
    {
      if (!v53)
      {
        __break(0xC471u);
        JUMPOUT(0x198C52514);
      }
      WTF::AtomStringImpl::addLiteral((uint64_t)"callee", 6uLL, v28, v29, v30, v31, v32, &v176);
      v55 = v176;
      v176 = 0;
      v177 = Slow;
      v178 = -1;
      v56.n128_u64[0] = 0x100000001000000;
      v179 = 0x1000000;
      v180 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v14, (unint64_t)v55, v54, 0, (uint64_t)&v176, v57, v58, v56);
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::~StringImpl(v55, v26, v27, v28, v29, v30, v31, v32);
          WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
        }
        else
        {
          *(_DWORD *)v55 -= 2;
        }
      }
      v53 = qword_1ECF4C6A7;
      if (!(_BYTE)qword_1ECF4C6A7)
      {
        __break(0xC471u);
        JUMPOUT(0x198C52534);
      }
    }
    v59 = v173;
    if (v173)
    {
      if (!v53)
      {
        __break(0xC471u);
        JUMPOUT(0x198C524B4);
      }
      WTF::AtomStringImpl::addLiteral((uint64_t)"codeBlock", 9uLL, v28, v29, v30, v31, v32, &v176);
      v60 = v176;
      v176 = 0;
      v177 = Slow;
      v178 = -1;
      v61.n128_u64[0] = 0x100000001000000;
      v179 = 0x1000000;
      v180 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v14, (unint64_t)v60, v59, 0, (uint64_t)&v176, v62, v63, v61);
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v64, v65, v66, v67, v68, v69, v70);
          WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
        }
        else
        {
          *(_DWORD *)v60 -= 2;
        }
      }
      if (!(_BYTE)qword_1ECF4C6A7)
      {
        __break(0xC471u);
        JUMPOUT(0x198C524D4);
      }
      v71 = *(_QWORD *)(v59 + 56);
      WTF::AtomStringImpl::addLiteral((uint64_t)"unlinkedCodeBlock", 0x11uLL, v66, v67, v68, v69, v70, &v176);
      v72 = v176;
      v176 = 0;
      v177 = Slow;
      v178 = -1;
      v73.n128_u64[0] = 0x100000001000000;
      v179 = 0x1000000;
      v180 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v14, (unint64_t)v72, v71, 0, (uint64_t)&v176, v74, v75, v73);
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::~StringImpl(v72, v76, v77, v78, v79, v80, v81, v82);
          WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
      if (!(_BYTE)qword_1ECF4C6A7)
      {
        __break(0xC471u);
        JUMPOUT(0x198C524F4);
      }
      v83 = *(_QWORD *)(v59 + 64);
      WTF::AtomStringImpl::addLiteral((uint64_t)"executable", 0xAuLL, v78, v79, v80, v81, v82, &v176);
      v84 = v176;
      v176 = 0;
      v177 = Slow;
      v178 = -1;
      v85.n128_u64[0] = 0x100000001000000;
      v179 = 0x1000000;
      v180 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v14, (unint64_t)v84, v83, 0, (uint64_t)&v176, v86, v87, v85);
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
        {
          WTF::StringImpl::~StringImpl(v84, v26, v27, v28, v29, v30, v31, v32);
          WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
        }
        else
        {
          *(_DWORD *)v84 -= 2;
        }
      }
      if (!(_BYTE)qword_1ECF4C6A7)
      {
        __break(0xC471u);
        JUMPOUT(0x198C5219CLL);
      }
    }
    else if (!v53)
    {
      __break(0xC471u);
      JUMPOUT(0x198C52454);
    }
    v34 = 7;
    goto LABEL_60;
  }
  v34 = 6;
LABEL_60:
  v88 = v174;
  v174 = 0;
  if (v88)
  {
    do
    {
      v89 = __ldaxr(v88);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, v88));
    if (!v90)
    {
      atomic_store(1u, v88);
      v176 = (JSC::Wasm::NameSection *)v88;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v176, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C523FCLL);
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"valid", 5uLL, v28, v29, v30, v31, v32, v169);
  v91 = (WTF::StringImpl *)v169[0];
  v169[0] = 0;
  v169[1] = Slow;
  v170 = 0x1000000FFFFFFFFLL;
  v92.n128_u64[0] = 0x100000001000000;
  v171 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v14, (unint64_t)v91, v34, 0, (uint64_t)v169, v93, v94, v92);
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
    {
      WTF::StringImpl::~StringImpl(v91, v95, v96, v97, v98, v99, v100, v101);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v91 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C52434);
  }
  return Slow;
}

uint64_t JSC::functionCodeBlockFor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  void (**v36)(WTF::StringPrintStream *__hidden);
  WTF *v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C526F4);
  }
  v9 = JSC::codeBlockFromArg(this, a2, a3, a4, a5, a6, a7, a8);
  v36 = off_1E3572250;
  v37 = (WTF *)v39;
  v38 = xmmword_199122F80;
  v39[0] = 0;
  if (v9)
  {
    JSC::CodeBlock::dumpAssumingJITType(v9);
    v36[5]((WTF::StringPrintStream *)&v36);
    v16 = *((_QWORD *)this + 7);
    if (v37)
      WTF::fromUTF8Impl<false>((unint64_t)v37, v38, (uint64_t *)&v35);
    else
      v35 = 0;
    v17 = JSC::jsString(v16, (JSC::VM *)&v35, v10, v11, v12, v13, v14, v15);
    v25 = v35;
    v35 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    if (v37 != (WTF *)v39)
      WTF::fastFree((unint64_t)v37, v18, v19, v20, v21, v22, v23, v24);
  }
  else
  {
    v17 = 10;
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C52714);
  }
  return v17;
}

uint64_t JSC::functionCodeBlockForFrame(JSC::VMInspector **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_13;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v8 = 1;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 6);
    if (v9 < 0xFFFE000000000000 || (v9 & 0x80000000) != 0)
      return 10;
    v8 = (v9 + 1);
  }
  result = JSC::VMInspector::codeBlockForFrame(this[7], a2, (JSC::CallFrame *)v8, a4, a5, a6, a7, a8);
  if (!result)
    result = 10;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198C527B4);
  }
  return result;
}

uint64_t JSC::functionDumpSourceFor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::CodeBlock *v9;
  unint64_t v10;
  char v12;
  char **v13;
  char *v14;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_10;
  }
  v8 = JSC::codeBlockFromArg(this, a2, a3, a4, a5, a6, a7, a8);
  if (v8)
  {
    v9 = (JSC::CodeBlock *)v8;
    v10 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v10 != -1)
    {
      v14 = &v12;
      v13 = &v14;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    JSC::CodeBlock::dumpSource(v9, (WTF::PrintStream *)WTF::s_file);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_10:
    JUMPOUT(0x198C52888);
  }
  return 10;
}

uint64_t JSC::functionDumpBytecodeFor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::CodeBlock *v15;
  unint64_t v16;
  char v18;
  char **v19;
  char *v20;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_10;
  }
  v8 = JSC::codeBlockFromArg(this, a2, a3, a4, a5, a6, a7, a8);
  if (v8)
  {
    v15 = (JSC::CodeBlock *)v8;
    v16 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v16 != -1)
    {
      v20 = &v18;
      v19 = &v20;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    JSC::CodeBlock::dumpBytecode(v15, (WTF::PrintStream *)WTF::s_file, v9, v10, v11, v12, v13, v14);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_10:
    JUMPOUT(0x198C5295CLL);
  }
  return 10;
}

uint64_t JSC::functionDataLog(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7
    || (result = JSC::doPrint(this, a2, 0, a4, a5, a6, a7, a8, a9), !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C529D4);
  }
  return result;
}

uint64_t JSC::functionPrint(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7
    || (result = JSC::doPrint(this, a2, (JSC::CallFrame *)1, a4, a5, a6, a7, a8, a9), !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C52A4CLL);
  }
  return result;
}

uint64_t JSC::functionDumpCallFrame(JSC::VMInspector **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!(_BYTE)qword_1ECF4C6A7
    || (JSC::VMInspector::dumpCallFrame(this[7], a2, (JSC::CallFrame *)1, a4, a5, a6, a7, a8), !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C52ACCLL);
  }
  return 10;
}

uint64_t JSC::functionDumpStack(JSC::VMInspector **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!(_BYTE)qword_1ECF4C6A7
    || (JSC::VMInspector::dumpStack(this[7], a2, (JSC::CallFrame *)1, a4, a5, a6, a7, a8), !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C52B4CLL);
  }
  return 10;
}

uint64_t JSC::functionDumpRegisters(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  JSC::CallFrame *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::VMInspector *v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _BYTE v24[16];
  JSC::VMInspector *v25;
  unsigned int *v26;
  JSC::Wasm::NameSection *v27;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C52C84);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v8 = 1;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 6);
    if (v9 < 0xFFFE000000000000 || (v9 & 0x80000000) != 0)
      return 10;
    v8 = v9 + 1;
  }
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v24, a2, this[7], 0, a5, a6, a7, a8);
  v18 = v25;
  if (v25)
  {
    v19 = v8 + 1;
    while (1)
    {
      if (!(_BYTE)qword_1ECF4C6A7)
        goto LABEL_26;
      if (!--v19)
        break;
      JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v24, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
      v18 = v25;
      if (!v25)
        goto LABEL_17;
    }
    JSC::VMInspector::dumpRegisters(v18, v11, v12, v13, v14, v15, v16, v17);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x198C52C64);
    }
  }
LABEL_17:
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      v27 = (JSC::Wasm::NameSection *)v20;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v27, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C52CA4);
  }
  return 10;
}

uint64_t JSC::functionDumpCell(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  unint64_t v4;
  char v6;
  char **v7;
  char *v8;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_10;
  }
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v3 = *((_QWORD *)a2 + 6);
    if ((v3 & 0xFFFE000000000002) == 0)
    {
      v4 = atomic_load(&WTF::initializeLogFile(void)::once);
      if (v4 != -1)
      {
        v8 = &v6;
        v7 = &v8;
        std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
      }
      JSC::VMInspector::dumpCellMemoryToStream(v3, (JSC::JSCell *)WTF::s_file, a3);
      if (!(_BYTE)qword_1ECF4C6A7)
      {
        __break(0xC471u);
LABEL_10:
        JUMPOUT(0x198C52DA4);
      }
    }
  }
  return 10;
}

uint64_t JSC::functionIndexingMode(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  void (**v33)(WTF::StringPrintStream *__hidden);
  WTF *v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C52F68);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v3 = *((_QWORD *)a2 + 6);
  if ((v3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v3 + 5) < 0x17u)
    return 10;
  v33 = off_1E3572250;
  v34 = (WTF *)v36;
  v35 = xmmword_199122F80;
  v36[0] = 0;
  v5 = *(_BYTE *)(v3 + 4) & 0x1F;
  if (v5 > 0x19)
    v6 = "Unknown!";
  else
    v6 = off_1E35B51B0[v5];
  WTF::PrintStream::printf((WTF::PrintStream *)&v33, "%s%s", v6, "");
  v33[5]((WTF::StringPrintStream *)&v33);
  v14 = *((_QWORD *)this + 7);
  if (v34)
    WTF::fromUTF8Impl<false>((unint64_t)v34, v35, (uint64_t *)&v32);
  else
    v32 = 0;
  v7 = JSC::jsString(v14, (JSC::VM *)&v32, v8, v9, v10, v11, v12, v13);
  v22 = v32;
  v32 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  if (v34 != (WTF *)v36)
    WTF::fastFree((unint64_t)v34, v15, v16, v17, v18, v19, v20, v21);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C52F88);
  }
  return v7;
}

unint64_t JSC::functionInlineCapacity(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    if (*((_DWORD *)a2 + 8) == 1)
      return 10;
    v3 = *((_QWORD *)a2 + 6);
    if ((v3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v3 + 5) < 0x17u)
      return 10;
    else
      return *(unsigned __int8 *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xE) | 0xFFFE000000000000;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::functionClearLinkBufferStats(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    xmmword_1EE342CE0 = 0u;
    *(_OWORD *)&qword_1EE342CF0 = 0u;
    xmmword_1EE342CC0 = 0u;
    *(_OWORD *)&qword_1EE342CD0 = 0u;
    xmmword_1EE342CA0 = 0u;
    *(_OWORD *)&qword_1EE342CB0 = 0u;
    xmmword_1EE342C80 = 0u;
    *(_OWORD *)&qword_1EE342C90 = 0u;
    JSC::LinkBuffer::s_profileCummulativeLinkedSizes = 0u;
    *(_OWORD *)&qword_1EE342C70 = 0u;
    JSC::LinkBuffer::s_profileCummulativeLinkedCounts = 0u;
    *(_OWORD *)&qword_1EE342D10 = 0u;
    xmmword_1EE342D20 = 0u;
    *(_OWORD *)&qword_1EE342D30 = 0u;
    xmmword_1EE342D40 = 0u;
    *(_OWORD *)&qword_1EE342D50 = 0u;
    xmmword_1EE342D60 = 0u;
    *(_OWORD *)&qword_1EE342D70 = 0u;
    xmmword_1EE342D80 = 0u;
    *(_OWORD *)&qword_1EE342D90 = 0u;
    return 10;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::functionLinkBufferStats(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  void (**v30)(WTF::StringPrintStream *__hidden);
  WTF *v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C531A4);
  }
  v30 = off_1E3572250;
  v31 = (WTF *)v33;
  v32 = xmmword_199122F80;
  v33[0] = 0;
  JSC::LinkBuffer::dumpProfileStatistics((uint64_t)&v30, 1, (__n128)xmmword_199122F80);
  v10 = *((_QWORD *)this + 7);
  if (v31)
    WTF::fromUTF8Impl<false>((unint64_t)v31, v32, (uint64_t *)&v29);
  else
    v29 = 0;
  v18 = JSC::jsString(v10, (JSC::VM *)&v29, v4, v5, v6, v7, v8, v9);
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (v31 != (WTF *)v33)
    WTF::fastFree((unint64_t)v31, v11, v12, v13, v14, v15, v16, v17);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C531C4);
  }
  return v18;
}

uint64_t JSC::functionValue(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  void (**v9)(WTF::StringPrintStream *__hidden);
  WTF::PrintStream *v10;
  WTF::StringImpl *v11;
  WTF::PrintStream *v12;
  BOOL v13;
  JSC::Structure *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  void (**v41)(WTF::StringPrintStream *__hidden);
  WTF *v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C533ECLL);
  }
  v41 = off_1E3572250;
  v42 = (WTF *)v44;
  v43 = xmmword_199122F80;
  v44[0] = 0;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v5 = *((_QWORD *)this + 7);
    v6 = (WTF *)v44;
LABEL_15:
    WTF::fromUTF8Impl<false>((unint64_t)v6, v43, (uint64_t *)&v40);
    goto LABEL_16;
  }
  v7 = 0;
  v8 = 1;
  do
  {
    v9 = v41;
    if (v8 != 1)
    {
      v10 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v41[4])(&v41);
      WTF::PrintStream::printf(v10, "%s", ", ");
      v41[5]((WTF::StringPrintStream *)&v41);
      v9 = v41;
    }
    v11 = *(WTF::StringImpl **)((char *)a2 + (((v7 << 32) + 0x600000000) >> 29));
    v40 = v11;
    v12 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v9[4])(&v41);
    if (v11)
      v13 = ((unint64_t)v11 & 0xFFFE000000000002) == 0;
    else
      v13 = 0;
    if (v13)
      v14 = (JSC::Structure *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE));
    else
      v14 = 0;
    JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v40, v12, 0, v14);
    v41[5]((WTF::StringPrintStream *)&v41);
    v7 = v8;
  }
  while (*((int *)a2 + 8) - 1 > (unint64_t)v8++);
  v6 = v42;
  v5 = *((_QWORD *)this + 7);
  if (v42)
    goto LABEL_15;
  v40 = 0;
LABEL_16:
  v29 = JSC::jsString(v5, (JSC::VM *)&v40, v15, v16, v17, v18, v19, v20);
  v30 = v40;
  v40 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  if (v42 != (WTF *)v44)
    WTF::fastFree((unint64_t)v42, v22, v23, v24, v25, v26, v27, v28);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5340CLL);
  }
  return v29;
}

unint64_t JSC::functionGetPID(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unsigned int v3;

  if (!(_BYTE)qword_1ECF4C6A7 || (v3 = getpid(), !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C5346CLL);
  }
  return v3 | 0xFFFE000000000000;
}

uint64_t JSC::functionHaveABadTime(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t result;
  JSC::VM *v12;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_14;
  }
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_8;
  v10 = *((_QWORD *)a2 + 6);
  if (v10 == 10)
    goto LABEL_8;
  if ((v10 & 0xFFFE000000000002) == 0 && v10 && *(unsigned __int8 *)(v10 + 5) > 0x16u)
  {
    this = *(JSC **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
LABEL_8:
    JSC::JSGlobalObject::haveABadTime(this, v9, (uint64_t)a3, a4, a5, a6, a7, a8);
    result = 7;
    goto LABEL_10;
  }
  result = JSC::throwTypeError((unint64_t)this, &v12, (uint64_t)"haveABadTime expects first argument to be an object if provided", 64);
LABEL_10:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x198C53558);
  }
  return result;
}

uint64_t JSC::functionIsHavingABadTime(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t result;
  JSC::VM *v5;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_15;
  }
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_8;
  v3 = *((_QWORD *)a2 + 6);
  if (v3 == 10)
    goto LABEL_8;
  if ((v3 & 0xFFFE000000000002) != 0 || !v3 || *(unsigned __int8 *)(v3 + 5) < 0x17u)
  {
    result = JSC::throwTypeError((unint64_t)this, &v5, (uint64_t)"isHavingABadTime expects first argument to be an object if provided", 68);
    if ((_BYTE)qword_1ECF4C6A7)
      return result;
    __break(0xC471u);
LABEL_15:
    JUMPOUT(0x198C5364CLL);
  }
  this = *(JSC **)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
LABEL_8:
  if (*(_BYTE *)(*((_QWORD *)this + 256) + 4) == 2)
    return 7;
  else
    return 6;
}

JSC::Exception *JSC::functionCallWithStackSize(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v10;
  uint64_t v11;
  JSC::Heap **v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  JSC::Exception *v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::Exception *v29;
  WTF::StringImpl *v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD *);
  _QWORD *v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  _QWORD v44[3];

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_17;
  }
  v10 = *(JSC::VM **)(this + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v43, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x1F00000002;
  *(_QWORD *)(v11 + 8) = "Not supported for this platform";
  *(_DWORD *)(v11 + 16) = 4;
  v42 = (WTF::StringImpl *)v11;
  v12 = *(JSC::Heap ***)(this + 56);
  v13 = *(_QWORD *)(this + 1504);
  if ((v13 & 1) != 0)
  {
    v40 = *(uint64_t (**)(_QWORD *))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v41 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v41 = (_QWORD *)(this - 16);
    v44[0] = *v41;
    v44[1] = this;
    v44[2] = this + 1504;
    v13 = v40(v44);
  }
  v14 = JSC::ErrorInstance::create(v12, v13, &v42, 0, 0, 0, 0, 1);
  v21 = (JSC::Exception *)v14;
  if ((v14 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)))
  {
    v21 = (JSC::Exception *)JSC::Exception::create((uint64_t)v10, (JSC::VM *)v14, 0, v15, v16, v17, v18, v19);
  }
  v29 = JSC::VM::throwException(v10, (JSC::JSGlobalObject *)this, v21, v20, v15, v16, v17, v18, v19);
  v30 = v42;
  v42 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v43, v22, v23, v24, v25, v26, v27, v28);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_17:
    JUMPOUT(0x198C537C8);
  }
  return v29;
}

unint64_t JSC::functionCreateGlobalObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  unint64_t *v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t SlowCase;
  JSC::Structure *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  int v44;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5398CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = (unint64_t *)(v10 + 40136);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v43, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (*((_DWORD *)a2 + 8) == 1 || (v20 = *((_QWORD *)a2 + 6), (v20 & 0xFFFE000000000002) != 0))
  {
    v44 = 71575603;
    v21 = 2;
  }
  else
  {
    if (*(unsigned __int8 *)(v20 + 5) <= 0x16u)
      v21 = 2;
    else
      v21 = *((_QWORD *)a2 + 6);
    v44 = 71575603;
    if ((v21 & 0xFFFE000000000002) == 0 && v21 && *(unsigned __int8 *)(v21 + 5) >= 0x17u)
      JSC::JSObject::didBecomePrototype(v21, (JSC::VM *)v10, v19, v13, v14, v15, v16, v17, v18);
  }
  SlowCase = *v11;
  if (*v11 < *(_QWORD *)(v10 + 40144))
    goto LABEL_15;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v39 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v39);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v39;
LABEL_15:
    *v11 = SlowCase + 128;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v12, v13, v14, v15, v16, v17, v18);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v40, v41, v42);
LABEL_16:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v10, 0, v21, (uint64_t)&v44, (unint64_t)&JSC::JSGlobalObject::s_info, 0, 0);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x4000000u;
  v30 = JSC::JSGlobalObject::create((JSC::JSGlobalObject *)v10, (JSC::VM *)SlowCase, v24, v25, v26, v27, v28, v29);
  JSC::JSLockHolder::~JSLockHolder(&v43, v31, v32, v33, v34, v35, v36, v37);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C539D8);
  }
  return v30;
}

unint64_t JSC::functionCreateProxy(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t SlowCase;
  JSC::JSGlobalObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  int v36;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C53B80);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v35, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (*((_DWORD *)a2 + 8) == 1
    || (v19 = *((_QWORD *)a2 + 6), (v19 & 0xFFFE000000000002) != 0)
    || *(_BYTE *)(v19 + 5) != 51)
  {
    v29 = 10;
    goto LABEL_19;
  }
  v20 = (unint64_t *)(v10 + 40136);
  v21 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x30);
  if (!v21)
    v21 = *(_QWORD *)(v19 + 16);
  v36 = 755107872;
  if ((v21 & 0xFFFE000000000002) == 0 && v21 && *(unsigned __int8 *)(v21 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v21, (JSC::VM *)v10, v18, v12, v13, v14, v15, v16, v17);
  SlowCase = *v20;
  if (*v20 >= *(_QWORD *)(v10 + 40144))
  {
    SlowCase = *(_QWORD *)(v10 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v32, v33, v34);
      goto LABEL_16;
    }
    v31 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v31);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v31;
  }
  *v20 = SlowCase + 128;
LABEL_16:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v10, v19, v21, (uint64_t)&v36, (unint64_t)&JSC::JSGlobalProxy::s_info, 0, 0);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v29 = JSC::JSGlobalProxy::create((JSC::JSGlobalProxy *)v10, SlowCase, (JSC::Structure *)v19, v24, v25, v26, v27, v28);
LABEL_19:
  JSC::JSLockHolder::~JSLockHolder(&v35, v11, v12, v13, v14, v15, v16, v17);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C53BA0);
  }
  return v29;
}

unint64_t JSC::functionCreateRuntimeArray(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t SlowCase;
  JSC::VM *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t Slow;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t v39;
  uint64_t v40;
  JSC::JSObject *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  JSC::JSObject *v71;
  int v72;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C53F60);
  }
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v70, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C53F80);
  }
  v19 = *((_QWORD *)this + 7);
  v20 = (unint64_t *)(v19 + 40136);
  v21 = *((_QWORD *)this + 84);
  LODWORD(v71) = 84150309;
  if ((v21 & 0xFFFE000000000002) == 0 && v21 && *(unsigned __int8 *)(v21 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v21, (JSC::VM *)v19, v18, v12, v13, v14, v15, v16, v17);
  SlowCase = *v20;
  if (*v20 < *(_QWORD *)(v19 + 40144))
    goto LABEL_8;
  SlowCase = *(_QWORD *)(v19 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v48 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v19 + 40160);
    *(_QWORD *)(v19 + 40144) = SlowCase + HIDWORD(v48);
    *(_QWORD *)(v19 + 40152) = SlowCase + (int)v48;
LABEL_8:
    *v20 = SlowCase + 128;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM((JSC *)v19, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v19 + 40112, v19 + 192, 128, 0, 0, v62, v63, v64);
LABEL_9:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v19 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C53FCCLL);
  }
  v31 = *(_QWORD *)(v19 + 15040);
  if (v31)
  {
    v32 = *(unsigned int *)(v31 + 60);
    Slow = *(_QWORD *)(v31 + 24);
    if (Slow < *(_QWORD *)(v31 + 32))
    {
LABEL_14:
      *(_QWORD *)(v31 + 24) = Slow + v32;
      goto LABEL_15;
    }
    Slow = *(_QWORD *)(v31 + 40);
    if ((Slow & 1) == 0)
    {
      v50 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v31 + 48);
      *(_QWORD *)(v31 + 32) = Slow + HIDWORD(v50);
      *(_QWORD *)(v31 + 40) = Slow + (int)v50;
      goto LABEL_14;
    }
    v65 = *(_QWORD *)(v19 + 15040);
    v66 = *(unsigned int *)(v31 + 60);
    JSC::sanitizeStackForVM((JSC *)v19, v23, v24, v25, v26, v27, v28, v29);
    Slow = JSC::LocalAllocator::allocateSlowCase(v65, v19 + 192, v66, 0, 0, v67, v68, v69);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v19 + 14936, (JSC *)v19, 0x20uLL, 0, v26, v27, v28, v29);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C53F40);
    }
  }
LABEL_15:
  *(_DWORD *)Slow = 0;
  v34 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v34;
  *(_QWORD *)(Slow + 8) = 0;
  *(_QWORD *)(Slow + 16) = 0;
  *(_QWORD *)(Slow + 24) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C53FECLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 7) + 755))
    __dmb(0xAu);
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v39 = 0;
    v40 = 0x600000000;
    do
    {
      v41 = *(JSC::JSObject **)((char *)a2 + (v40 >> 29));
      v71 = v41;
      if ((unint64_t)v41 < 0xFFFE000000000000)
      {
        v43 = (unint64_t)v41 - 0x2000000000000;
        if (v43 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v71, this, v24, v25, v26, v27, v28, v29, v30);
        else
          v30.i64[0] = v43;
        v44 = ((unint64_t)v30.i64[0] >> 52) & 0x7FF;
        v45 = v44 - 1023;
        v46 = (unint64_t)v30.i64[0] >> (51 - ((unint64_t)v30.i64[0] >> 52));
        if (v44 > 0x433)
          LODWORD(v46) = v30.i64[0] << (((unint64_t)v30.i64[0] >> 52) - 51);
        if (v44 >= 0x41F)
          v47 = v46;
        else
          v47 = (((1 << (((unint64_t)v30.i64[0] >> 52) + 1)) - 1) & v46)
              + (1 << (((unint64_t)v30.i64[0] >> 52) + 1));
        if (v30.i64[0] >= 0)
          LODWORD(v41) = v47;
        else
          LODWORD(v41) = -v47;
        if (v45 > 0x53)
          LODWORD(v41) = 0;
      }
      v72 = (int)v41;
      v42 = *(unsigned int *)(Slow + 28);
      if ((_DWORD)v42 == *(_DWORD *)(Slow + 24))
        *(_DWORD *)(*(_QWORD *)(Slow + 16) + 4 * *(unsigned int *)(Slow + 28)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(Slow + 16, v42 + 1, (unint64_t)&v72);
      else
        *(_DWORD *)(*(_QWORD *)(Slow + 16) + 4 * v42) = (_DWORD)v41;
      ++*(_DWORD *)(Slow + 28);
      ++v39;
      v40 += 0x100000000;
    }
    while (v39 < *((int *)a2 + 8) - 1);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54014);
  }
  if ((Slow & 8) != 0)
    v35 = (Slow - 112) | 1;
  else
    v35 = Slow & 0xFFFFFFFFFFFFC000;
  if ((v35 & 1) != 0)
    v36 = (_QWORD *)(v35 + 47);
  else
    v36 = (_QWORD *)(*(_QWORD *)v35 + 32);
  v37 = (unint64_t *)v36[2];
  if (!v37)
  {
    while (1)
    {
      v49 = (_QWORD *)v36[3];
      if (!v49)
        break;
      v36[3] = v49[2];
      v37 = (unint64_t *)v49[4];
      v49[3] = 257;
      v49[4] = 0;
      if (v37)
        goto LABEL_26;
    }
    v51 = v36[6];
    if (!v36[1])
    {
      v52 = *(_QWORD **)(v51 + 488);
      *v36 = v51 + 480;
      v36[1] = v52;
      *v52 = v36;
      *(_QWORD *)(v51 + 488) = v36;
    }
    *(_QWORD *)(v51 + 1072) += 1024;
    v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
    JSC::WeakBlock::WeakBlock((uint64_t)v53, v35);
    JSC::Heap::didAllocate((JSC::Heap *)(v36[6] + 192), 0x400uLL, v54, v55, v56, v57, v58, v59);
    v60 = v36 + 4;
    v61 = v36[5];
    if (v61)
      v60 = (_QWORD *)(v61 + 16);
    *v60 = v53;
    v36[5] = v53;
    v53[1] = v61;
    v53[2] = 0;
    v37 = (unint64_t *)v53[4];
    v53[3] = 257;
    v53[4] = 0;
  }
LABEL_26:
  v36[2] = *v37;
  *v37 = Slow;
  v37[1] = v19 + 736;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54058);
  }
  JSC::JSLockHolder::~JSLockHolder(&v70, v23, v24, v25, v26, v27, v28, v29);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54078);
  }
  return Slow;
}

unint64_t JSC::functionCreateImpureGetter(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t SlowCase;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t Slow;
  int v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  int v45;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5438CLL);
  }
  v11 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v44, (JSC::VM *)v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (*((_DWORD *)a2 + 8) == 1 || (v19 = *((_QWORD *)a2 + 6), (v19 & 0xFFFE000000000002) != 0))
  {
    v20 = 0;
  }
  else if (*(unsigned __int8 *)(v19 + 5) <= 0x16u)
  {
    v20 = 0;
  }
  else
  {
    v20 = *((_QWORD *)a2 + 6);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C543ACLL);
  }
  v45 = 1050647;
  SlowCase = *(_QWORD *)(v11 + 40136);
  if (SlowCase < *(_QWORD *)(v11 + 40144))
    goto LABEL_9;
  SlowCase = *(_QWORD *)(v11 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 40160);
    *(_QWORD *)(v11 + 40144) = SlowCase + HIDWORD(v34);
    *(_QWORD *)(v11 + 40152) = SlowCase + (int)v34;
LABEL_9:
    *(_QWORD *)(v11 + 40136) = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM((JSC *)v11, v12, v13, v14, v15, v16, v17, v18);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 40112, v11 + 192, 128, 0, 0, v36, v37, v38);
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C543F8);
  }
  v29 = *(_QWORD *)(v11 + 15040);
  if (v29)
  {
    v30 = *(unsigned int *)(v29 + 60);
    Slow = *(_QWORD *)(v29 + 24);
    if (Slow < *(_QWORD *)(v29 + 32))
    {
LABEL_15:
      *(_QWORD *)(v29 + 24) = Slow + v30;
      goto LABEL_16;
    }
    Slow = *(_QWORD *)(v29 + 40);
    if ((Slow & 1) == 0)
    {
      v35 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v29 + 48);
      *(_QWORD *)(v29 + 32) = Slow + HIDWORD(v35);
      *(_QWORD *)(v29 + 40) = Slow + (int)v35;
      goto LABEL_15;
    }
    v39 = *(_QWORD *)(v11 + 15040);
    v40 = *(unsigned int *)(v29 + 60);
    JSC::sanitizeStackForVM((JSC *)v11, v22, v23, v24, v25, v26, v27, v28);
    Slow = JSC::LocalAllocator::allocateSlowCase(v39, v11 + 192, v40, 0, 0, v41, v42, v43);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v11 + 14936, (JSC *)v11, 0x20uLL, 0, v25, v26, v27, v28);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C5436CLL);
    }
  }
LABEL_16:
  *(_DWORD *)Slow = 0;
  v32 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v32;
  *(_QWORD *)(Slow + 8) = 0;
  *(_QWORD *)(Slow + 16) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54418);
  }
  if (*(_BYTE *)(v11 + 755))
  {
    __dmb(0xAu);
    if (!v20)
      goto LABEL_21;
  }
  else if (!v20)
  {
    goto LABEL_21;
  }
  *(_QWORD *)(Slow + 16) = v20;
  if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(Slow + 7))
    JSC::Heap::writeBarrierSlowPath(v11 + 192, Slow);
LABEL_21:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54444);
  }
  JSC::JSLockHolder::~JSLockHolder(&v44, v22, v23, v24, v25, v26, v27, v28);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54464);
  }
  return Slow;
}

unint64_t JSC::functionCreateCustomGetterObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5468CLL);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C546ACLL);
  }
  v42 = 2071;
  SlowCase = *(_QWORD *)(v10 + 40136);
  if (SlowCase < *(_QWORD *)(v10 + 40144))
    goto LABEL_4;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v31);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v31;
LABEL_4:
    *(_QWORD *)(v10 + 40136) = SlowCase + 128;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v33, v34, v35);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C546F8);
  }
  v26 = *(_QWORD *)(v10 + 15032);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow < *(_QWORD *)(v26 + 32))
    {
LABEL_10:
      *(_QWORD *)(v26 + 24) = Slow + v27;
      goto LABEL_11;
    }
    Slow = *(_QWORD *)(v26 + 40);
    if ((Slow & 1) == 0)
    {
      v32 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v32);
      *(_QWORD *)(v26 + 40) = Slow + (int)v32;
      goto LABEL_10;
    }
    v36 = *(_QWORD *)(v10 + 15032);
    v37 = *(unsigned int *)(v26 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
    Slow = JSC::LocalAllocator::allocateSlowCase(v36, v10 + 192, v37, 0, 0, v38, v39, v40);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x10uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C5466CLL);
    }
  }
LABEL_11:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54718);
  }
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C54744);
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v41, v19, v20, v21, v22, v23, v24, v25);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54764);
  }
  return Slow;
}

unint64_t JSC::functionCreateDOMJITNodeObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *Structure;
  JSC::Structure *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  JSC::VM *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t SlowCase;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t Slow;
  int v47;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  int v59;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C549E4);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v58, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54A04);
  }
  v33 = v24;
  v34 = (unint64_t *)(v10 + 40136);
  v59 = 78;
  if ((v24 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v24 + 5) >= 0x17u && v24 != 0)
    JSC::JSObject::didBecomePrototype(v24, (JSC::VM *)v10, v32, v26, v27, v28, v29, v30, v31);
  SlowCase = *v34;
  if (*v34 < *(_QWORD *)(v10 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v49);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v49;
LABEL_10:
    *v34 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v25, v26, v27, v28, v29, v30, v31);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v51, v52, v53);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54A50);
  }
  v44 = *(_QWORD *)(v10 + 15040);
  if (v44)
  {
    v45 = *(unsigned int *)(v44 + 60);
    Slow = *(_QWORD *)(v44 + 24);
    if (Slow < *(_QWORD *)(v44 + 32))
    {
LABEL_16:
      *(_QWORD *)(v44 + 24) = Slow + v45;
      goto LABEL_17;
    }
    Slow = *(_QWORD *)(v44 + 40);
    if ((Slow & 1) == 0)
    {
      v50 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v44 + 48);
      *(_QWORD *)(v44 + 32) = Slow + HIDWORD(v50);
      *(_QWORD *)(v44 + 40) = Slow + (int)v50;
      goto LABEL_16;
    }
    v54 = *(unsigned int *)(v44 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v37, v38, v39, v40, v41, v42, v43);
    Slow = JSC::LocalAllocator::allocateSlowCase(v44, v10 + 192, v54, 0, 0, v55, v56, v57);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x20uLL, 0, v40, v41, v42, v43);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C549C4);
    }
  }
LABEL_17:
  *(_DWORD *)Slow = 0;
  v47 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v47;
  *(_QWORD *)(Slow + 8) = 0;
  *(_DWORD *)(Slow + 16) = 42;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54A70);
  }
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C54A9CLL);
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v58, v37, v38, v39, v40, v41, v42, v43);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54ABCLL);
  }
  return Slow;
}

unint64_t JSC::functionCreateDOMJITGetterObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *Structure;
  JSC::Structure *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v33;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_6;
  }
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v33, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  JSC::JSLockHolder::~JSLockHolder(&v33, v25, v26, v27, v28, v29, v30, v31);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_6:
    JUMPOUT(0x198C54BD8);
  }
  return v24;
}

unint64_t JSC::functionCreateDOMJITGetterNoEffectsObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  _QWORD v69[2];
  int v70;
  int v71;
  uint64_t v72;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54EA8);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v68, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54EC8);
  }
  LODWORD(v69[0]) = 78;
  SlowCase = *(_QWORD *)(v10 + 40136);
  if (SlowCase < *(_QWORD *)(v10 + 40144))
    goto LABEL_4;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v54 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v54);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v54;
LABEL_4:
    *(_QWORD *)(v10 + 40136) = SlowCase + 128;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v57, v58, v59);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54F14);
  }
  v26 = *(_QWORD *)(v10 + 15040);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow < *(_QWORD *)(v26 + 32))
    {
LABEL_10:
      *(_QWORD *)(v26 + 24) = Slow + v27;
      goto LABEL_11;
    }
    Slow = *(_QWORD *)(v26 + 40);
    if ((Slow & 1) == 0)
    {
      v56 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v56);
      *(_QWORD *)(v26 + 40) = Slow + (int)v56;
      goto LABEL_10;
    }
    v63 = *(_QWORD *)(v10 + 15040);
    v64 = *(unsigned int *)(v26 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
    Slow = JSC::LocalAllocator::allocateSlowCase(v63, v10 + 192, v64, 0, 0, v65, v66, v67);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x20uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C54E88);
    }
  }
LABEL_11:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  *(_DWORD *)(Slow + 16) = 42;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54F34);
  }
  v30 = (unint64_t *)(v10 + 38112);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v31 = *v30;
  if (*v30 < *(_QWORD *)(v10 + 38120))
    goto LABEL_15;
  v31 = *(_QWORD *)(v10 + 38128);
  if ((v31 & 1) == 0)
  {
    v55 = *(_QWORD *)(v31 + 8) ^ *(_QWORD *)(v10 + 38136);
    *(_QWORD *)(v10 + 38120) = v31 + HIDWORD(v55);
    *(_QWORD *)(v10 + 38128) = v31 + (int)v55;
LABEL_15:
    *v30 = v31 + 48;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
  v31 = JSC::LocalAllocator::allocateSlowCase(v10 + 38088, v10 + 192, 48, 0, 0, v60, v61, v62);
LABEL_16:
  *(_DWORD *)v31 = 0;
  v32 = *(_QWORD *)(v10 + 41544);
  v33 = *(_DWORD *)(v32 + 8);
  *(_DWORD *)v31 = v32 >> 4;
  *(_DWORD *)(v31 + 4) = v33;
  *(_QWORD *)(v31 + 16) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"customGetter", 0xCuLL, v21, v22, v23, v24, v25, v69);
  v34 = (WTF::StringImpl *)v69[0];
  v69[0] = 0;
  v69[1] = Slow;
  v70 = -1;
  v35.n128_u64[0] = 0x100000001000000;
  v71 = 0x1000000;
  v72 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v10, (unint64_t)v34, v31, 34, (uint64_t)v69, v36, v37, v35);
  *(_DWORD *)((16 * *(unsigned int *)Slow) | 0x10) |= 0x18u;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54F88);
  }
  JSC::JSLockHolder::~JSLockHolder(&v68, v38, v39, v40, v41, v42, v43, v44);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C54FA8);
  }
  return Slow;
}

unint64_t JSC::functionCreateDOMJITGetterComplexObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unint64_t v85[2];
  int v86;
  int v87;
  uint64_t v88;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55390);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v84, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C553B0);
  }
  LODWORD(v85[0]) = 78;
  SlowCase = *(_QWORD *)(v10 + 40136);
  if (SlowCase < *(_QWORD *)(v10 + 40144))
    goto LABEL_4;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v70 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v70);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v70;
LABEL_4:
    *(_QWORD *)(v10 + 40136) = SlowCase + 128;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v73, v74, v75);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C553FCLL);
  }
  v26 = *(_QWORD *)(v10 + 15040);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow < *(_QWORD *)(v26 + 32))
    {
LABEL_10:
      *(_QWORD *)(v26 + 24) = Slow + v27;
      goto LABEL_11;
    }
    Slow = *(_QWORD *)(v26 + 40);
    if ((Slow & 1) == 0)
    {
      v72 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v72);
      *(_QWORD *)(v26 + 40) = Slow + (int)v72;
      goto LABEL_10;
    }
    v79 = *(_QWORD *)(v10 + 15040);
    v80 = *(unsigned int *)(v26 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
    Slow = JSC::LocalAllocator::allocateSlowCase(v79, v10 + 192, v80, 0, 0, v81, v82, v83);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x20uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C55370);
    }
  }
LABEL_11:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  *(_DWORD *)(Slow + 16) = 42;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5541CLL);
  }
  *(_BYTE *)(Slow + 20) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5543CLL);
  }
  v30 = (unint64_t *)(v10 + 38112);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v31 = *v30;
  if (*v30 < *(_QWORD *)(v10 + 38120))
    goto LABEL_16;
  v31 = *(_QWORD *)(v10 + 38128);
  if ((v31 & 1) == 0)
  {
    v71 = *(_QWORD *)(v31 + 8) ^ *(_QWORD *)(v10 + 38136);
    *(_QWORD *)(v10 + 38120) = v31 + HIDWORD(v71);
    *(_QWORD *)(v10 + 38128) = v31 + (int)v71;
LABEL_16:
    *v30 = v31 + 48;
    goto LABEL_17;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
  v31 = JSC::LocalAllocator::allocateSlowCase(v10 + 38088, v10 + 192, 48, 0, 0, v76, v77, v78);
LABEL_17:
  *(_DWORD *)v31 = 0;
  v32 = *(_QWORD *)(v10 + 41544);
  v33 = *(_DWORD *)(v32 + 8);
  *(_DWORD *)v31 = v32 >> 4;
  *(_DWORD *)(v31 + 4) = v33;
  *(_QWORD *)(v31 + 16) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"customGetter", 0xCuLL, v21, v22, v23, v24, v25, v85);
  v34 = (WTF::StringImpl *)v85[0];
  v85[0] = 0;
  v85[1] = Slow;
  v86 = -1;
  v35.n128_u64[0] = 0x100000001000000;
  v87 = 0x1000000;
  v88 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v10, (unint64_t)v34, v31, 34, (uint64_t)v85, v36, v37, v35);
  *(_DWORD *)((16 * *(unsigned int *)Slow) | 0x10) |= 0x18u;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"enableException", 0xFuLL, v40, v41, v42, v43, v44, v85);
  v45 = (WTF::StringImpl *)v85[0];
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55490);
  }
  JSC::JSLockHolder::~JSLockHolder(&v84, v46, v47, v48, v49, v50, v51, v52);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C554B0);
  }
  return Slow;
}

unint64_t JSC::functionCreateDOMJITFunctionObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  WTF::StringImpl *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  WTF::StringImpl *v58;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55794);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v57, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C557B4);
  }
  LODWORD(v58) = 78;
  SlowCase = *(_QWORD *)(v10 + 40136);
  if (SlowCase < *(_QWORD *)(v10 + 40144))
    goto LABEL_4;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v47 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v47);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v47;
LABEL_4:
    *(_QWORD *)(v10 + 40136) = SlowCase + 128;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v49, v50, v51);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55800);
  }
  v26 = *(_QWORD *)(v10 + 15040);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow < *(_QWORD *)(v26 + 32))
    {
LABEL_10:
      *(_QWORD *)(v26 + 24) = Slow + v27;
      goto LABEL_11;
    }
    Slow = *(_QWORD *)(v26 + 40);
    if ((Slow & 1) == 0)
    {
      v48 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v48);
      *(_QWORD *)(v26 + 40) = Slow + (int)v48;
      goto LABEL_10;
    }
    v52 = *(_QWORD *)(v10 + 15040);
    v53 = *(unsigned int *)(v26 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
    Slow = JSC::LocalAllocator::allocateSlowCase(v52, v10 + 192, v53, 0, 0, v54, v55, v56);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x20uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C55774);
    }
  }
LABEL_11:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  *(_DWORD *)(Slow + 16) = 42;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55820);
  }
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"func", 4uLL, v21, v22, v23, v24, v25, &v58);
  v30 = v58;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55848);
  }
  JSC::JSLockHolder::~JSLockHolder(&v57, v31, v32, v33, v34, v35, v36, v37);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55868);
  }
  return Slow;
}

unint64_t JSC::functionCreateDOMJITCheckJSCastObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  WTF::StringImpl *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  WTF::StringImpl *v58;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55B1CLL);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v57, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55B3CLL);
  }
  LODWORD(v58) = 78;
  SlowCase = *(_QWORD *)(v10 + 40136);
  if (SlowCase < *(_QWORD *)(v10 + 40144))
    goto LABEL_4;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v47 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v47);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v47;
LABEL_4:
    *(_QWORD *)(v10 + 40136) = SlowCase + 128;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v49, v50, v51);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55B88);
  }
  v26 = *(_QWORD *)(v10 + 15040);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow < *(_QWORD *)(v26 + 32))
    {
LABEL_10:
      *(_QWORD *)(v26 + 24) = Slow + v27;
      goto LABEL_11;
    }
    Slow = *(_QWORD *)(v26 + 40);
    if ((Slow & 1) == 0)
    {
      v48 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v48);
      *(_QWORD *)(v26 + 40) = Slow + (int)v48;
      goto LABEL_10;
    }
    v52 = *(_QWORD *)(v10 + 15040);
    v53 = *(unsigned int *)(v26 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
    Slow = JSC::LocalAllocator::allocateSlowCase(v52, v10 + 192, v53, 0, 0, v54, v55, v56);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x20uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C55AFCLL);
    }
  }
LABEL_11:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  *(_DWORD *)(Slow + 16) = 42;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55BA8);
  }
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"func", 4uLL, v21, v22, v23, v24, v25, &v58);
  v30 = v58;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55BD0);
  }
  JSC::JSLockHolder::~JSLockHolder(&v57, v31, v32, v33, v34, v35, v36, v37);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55BF0);
  }
  return Slow;
}

unint64_t JSC::functionCreateDOMJITGetterBaseJSObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  _QWORD v69[2];
  int v70;
  int v71;
  uint64_t v72;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55F2CLL);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v68, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55F4CLL);
  }
  LODWORD(v69[0]) = 78;
  SlowCase = *(_QWORD *)(v10 + 40136);
  if (SlowCase < *(_QWORD *)(v10 + 40144))
    goto LABEL_4;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v54 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v54);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v54;
LABEL_4:
    *(_QWORD *)(v10 + 40136) = SlowCase + 128;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v57, v58, v59);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55F98);
  }
  v26 = *(_QWORD *)(v10 + 15040);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow < *(_QWORD *)(v26 + 32))
    {
LABEL_10:
      *(_QWORD *)(v26 + 24) = Slow + v27;
      goto LABEL_11;
    }
    Slow = *(_QWORD *)(v26 + 40);
    if ((Slow & 1) == 0)
    {
      v56 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v56);
      *(_QWORD *)(v26 + 40) = Slow + (int)v56;
      goto LABEL_10;
    }
    v63 = *(_QWORD *)(v10 + 15040);
    v64 = *(unsigned int *)(v26 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
    Slow = JSC::LocalAllocator::allocateSlowCase(v63, v10 + 192, v64, 0, 0, v65, v66, v67);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x20uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C55F0CLL);
    }
  }
LABEL_11:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  *(_DWORD *)(Slow + 16) = 42;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C55FB8);
  }
  v30 = (unint64_t *)(v10 + 38112);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v31 = *v30;
  if (*v30 < *(_QWORD *)(v10 + 38120))
    goto LABEL_15;
  v31 = *(_QWORD *)(v10 + 38128);
  if ((v31 & 1) == 0)
  {
    v55 = *(_QWORD *)(v31 + 8) ^ *(_QWORD *)(v10 + 38136);
    *(_QWORD *)(v10 + 38120) = v31 + HIDWORD(v55);
    *(_QWORD *)(v10 + 38128) = v31 + (int)v55;
LABEL_15:
    *v30 = v31 + 48;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
  v31 = JSC::LocalAllocator::allocateSlowCase(v10 + 38088, v10 + 192, 48, 0, 0, v60, v61, v62);
LABEL_16:
  *(_DWORD *)v31 = 0;
  v32 = *(_QWORD *)(v10 + 41544);
  v33 = *(_DWORD *)(v32 + 8);
  *(_DWORD *)v31 = v32 >> 4;
  *(_DWORD *)(v31 + 4) = v33;
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 24) = &JSC::JSObject::s_info;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"customGetter", 0xCuLL, v21, v22, v23, v24, v25, v69);
  v34 = (WTF::StringImpl *)v69[0];
  v69[0] = 0;
  v69[1] = Slow;
  v70 = -1;
  v35.n128_u64[0] = 0x100000001000000;
  v71 = 0x1000000;
  v72 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v10, (unint64_t)v34, v31, 34, (uint64_t)v69, v36, v37, v35);
  *(_DWORD *)((16 * *(unsigned int *)Slow) | 0x10) |= 0x18u;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5600CLL);
  }
  JSC::JSLockHolder::~JSLockHolder(&v68, v38, v39, v40, v41, v42, v43, v44);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5602CLL);
  }
  return Slow;
}

uint64_t JSC::functionCreateBuiltin(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v11;
  int **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  int v53;
  int v54;
  uint64_t v55;
  WTF::StringImpl *v56;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5630CLL);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v9 = *((_QWORD *)a2 + 6);
  if ((v9 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v9 + 5) != 2)
    return 10;
  v11 = *((_QWORD *)this + 7);
  v12 = (int **)(v9 + 8);
  if ((*(_BYTE *)(v9 + 8) & 1) != 0)
    v12 = JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 6), this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_8;
  v50 = *(_DWORD *)(v11 + 80);
  if ((v50 & 0x27) != 0 && (v50 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v11 + 16))
  {
    v39 = 0;
  }
  else
  {
LABEL_8:
    v13 = WTF::fastMalloc((WTF *)0x80);
    *(_DWORD *)(v13 + 8) = 1;
    *(_BYTE *)(v13 + 12) = 0;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_QWORD *)(v13 + 109) = 0;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_QWORD *)v13 = off_1E357C4B0;
    v19 = *v12;
    if (!*v12)
      v19 = &WTF::StringImpl::s_emptyAtomString;
    *v19 += 2;
    *(_QWORD *)(v13 + 120) = v19;
    v52 = (_DWORD *)v13;
    v53 = 0;
    v54 = v19[1];
    v55 = 0;
    WTF::AtomStringImpl::addLiteral((uint64_t)"foo", 3uLL, v14, v15, v16, v17, v18, &v56);
    v20 = v56;
    v51 = v56;
    v21 = JSC::BuiltinExecutables::createExecutable(v11, (unsigned int *)&v52, &v51, 0, 0, 1, 0, 0, 0);
    v26 = JSC::UnlinkedFunctionExecutable::link(v21, v11, 0, (uint64_t)&v52, 0, 0, 0, v22, v23, v24, v25);
    v39 = JSC::JSFunction::create(v11, v26, this, v27, v28, v29, v30, v31);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
    v40 = v52;
    v52 = 0;
    if (v40)
    {
      if (v40[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
      else
        --v40[2];
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C56298);
  }
  return v39;
}

uint64_t JSC::functionVMTaintedState(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48[2];
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  JSC::Wasm::NameSection *v52;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_30;
  }
  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  if (!*((_BYTE *)v8 + 41452))
  {
    v17 = "Untainted";
    v18 = 9;
    goto LABEL_21;
  }
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v48, a2, v8, 0, a5, a6, a7, a8);
  if (v49)
  {
    LOBYTE(v16) = 1;
    do
    {
      if (v50 && (*(_DWORD *)(v50 + 32) & 0x80000000) != 0)
      {
        v16 = v16 <= *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v50 + 64) + 40)
                                                                       + 116)
            ? *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v50 + 64) + 40) + 116)
            : v16;
        if (v16 == 3)
          break;
      }
      JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v48, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    }
    while (v49);
  }
  else
  {
    LOBYTE(v16) = 1;
  }
  v19 = v51;
  v51 = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      v52 = (JSC::Wasm::NameSection *)v19;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v52, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  v22 = v16 - 1;
  if ((v16 - 1) >= 3u)
  {
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x198C564CCLL);
  }
  v18 = dword_19915A074[v22];
  v17 = off_1E35B5280[v22];
LABEL_21:
  v23 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)v23 = 2;
  *(_DWORD *)(v23 + 4) = v18;
  *(_QWORD *)(v23 + 8) = v17;
  *(_DWORD *)(v23 + 16) = 4;
  v48[0] = (WTF::StringImpl *)v23;
  v37 = JSC::jsString((uint64_t)v8, (JSC::VM *)v48, v24, v25, v26, v27, v28, v29);
  v38 = v48[0];
  v48[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C564ECLL);
  }
  return v37;
}

uint64_t JSC::functionRunTaintedString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v11;
  int **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  SourceProvider *var0;
  int v30;
  JSC::Exception *v31;
  SourceCode v32;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C566D0);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v9 = *((_QWORD *)a2 + 6);
  if ((v9 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v9 + 5) != 2)
    return 10;
  v11 = *((_QWORD *)this + 7);
  v12 = (int **)(v9 + 8);
  if ((*(_BYTE *)(v9 + 8) & 1) != 0)
    v12 = JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 6), this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_8;
  v30 = *(_DWORD *)(v11 + 80);
  if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v11 + 16))
  {
    v27 = 0;
  }
  else
  {
LABEL_8:
    v13 = WTF::fastMalloc((WTF *)0x80);
    *(_DWORD *)(v13 + 8) = 1;
    *(_BYTE *)(v13 + 12) = 0;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_BYTE *)(v13 + 116) = 3;
    *(_DWORD *)(v13 + 112) = 0;
    *(_QWORD *)v13 = off_1E357C4B0;
    v18 = *v12;
    if (!*v12)
      v18 = &WTF::StringImpl::s_emptyAtomString;
    *v18 += 2;
    *(_QWORD *)(v13 + 120) = v18;
    v31 = 0;
    v32.var0.var0 = (SourceProvider *)v13;
    v32.var1 = 0;
    v19 = v18[1];
    *(_QWORD *)&v32.var3.var0 = 0;
    v32.var2 = v19;
    v20 = JSC::evaluate(this, &v32, 0, &v31, v14, v15, v16, v17, 0.0);
    if (v31)
    {
      JSC::VM::throwException((JSC::VM *)v11, this, v31, v26, v21, v22, v23, v24, v25);
      v27 = 0;
    }
    else
    {
      v27 = v20;
    }
    var0 = v32.var0.var0;
    v32.var0.var0 = 0;
    if (var0)
    {
      if (*((_DWORD *)var0 + 2) == 1)
        (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
      else
        --*((_DWORD *)var0 + 2);
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C566F0);
  }
  return v27;
}

unint64_t JSC::functionCreateWasmStreamingParser(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  JSC::Wasm::ModuleInformation *v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  WTF::StringImpl *v83;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C56A24);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v82, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C56A44);
  }
  LODWORD(v83) = 23;
  SlowCase = *(_QWORD *)(v10 + 40136);
  if (SlowCase < *(_QWORD *)(v10 + 40144))
    goto LABEL_4;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v72 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v72);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v72;
LABEL_4:
    *(_QWORD *)(v10 + 40136) = SlowCase + 128;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v74, v75, v76);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C56A90);
  }
  v26 = *(_QWORD *)(v10 + 23440);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow >= *(_QWORD *)(v26 + 32))
    {
      Slow = *(_QWORD *)(v26 + 40);
      if ((Slow & 1) != 0)
      {
        v77 = *(_QWORD *)(v10 + 23440);
        v78 = *(unsigned int *)(v26 + 60);
        JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
        Slow = JSC::LocalAllocator::allocateSlowCase(v77, v10 + 192, v78, 0, 0, v79, v80, v81);
        goto LABEL_11;
      }
      v73 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v73);
      *(_QWORD *)(v26 + 40) = Slow + (int)v73;
    }
    *(_QWORD *)(v26 + 24) = Slow + v27;
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 23224, (JSC *)v10, 0x100uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C56A04);
    }
  }
LABEL_11:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  *(_QWORD *)(Slow + 16) = 16 * *(unsigned int *)(SlowCase + 76);
  v30 = (JSC::Wasm::ModuleInformation *)WTF::fastMalloc((WTF *)0x150);
  v31 = (unsigned int *)JSC::Wasm::ModuleInformation::ModuleInformation(v30);
  *(_QWORD *)(Slow + 24) = v31;
  *(_QWORD *)(Slow + 32) = &off_1E35B4470;
  *(_QWORD *)(Slow + 40) = Slow;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 + 1, v31));
  *(_QWORD *)(Slow + 48) = v31;
  *(_QWORD *)(Slow + 56) = Slow + 32;
  *(_QWORD *)(Slow + 72) = 0;
  *(_QWORD *)(Slow + 80) = 0;
  *(_QWORD *)(Slow + 64) = 0;
  *(_BYTE *)(Slow + 88) = 0;
  *(_OWORD *)(Slow + 96) = 0u;
  *(_OWORD *)(Slow + 112) = 0u;
  CC_SHA1_Init((CC_SHA1_CTX *)(Slow + 128));
  *(_QWORD *)(Slow + 224) = 0;
  *(_QWORD *)(Slow + 232) = 0;
  *(_DWORD *)(Slow + 240) = 0;
  if ((_QWORD)xmmword_1ECF4C290)
    WTF::dataLog<char [88],char [2]>("Wasm streaming parser created, but we can only dump source in debug builds.", "\n");
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C56AC8);
  }
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(16 * (*(_DWORD *)Slow & 0xFFFFFFFE) + 0x28);
  WTF::AtomStringImpl::addLiteral((uint64_t)"addBytes", 8uLL, v33, v34, v35, v36, v37, &v83);
  v39 = v83;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"finalize", 8uLL, v42, v43, v44, v45, v46, &v83);
  v47 = v83;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C56AF0);
  }
  JSC::JSLockHolder::~JSLockHolder(&v82, v48, v49, v50, v51, v52, v53, v54);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C56B10);
  }
  return Slow;
}

uint64_t JSC::functionCreateWasmStreamingCompilerForCompile(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  float v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  unint64_t *v41;
  int v42;
  char v43;
  _QWORD v44[3];
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  JSC::VM *v50;
  unsigned int *v51;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C56D28);
  }
  v11 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v51, (JSC::VM *)v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v50 = (JSC::VM *)v11;
  if (*((_DWORD *)a2 + 8) == 1
    || (v16 = *((_QWORD *)a2 + 6), (v16 & 0xFFFE000000000002) != 0)
    || *(_BYTE *)(v16 + 5) != 26)
  {
    v29 = JSC::throwTypeError((unint64_t)this, &v50, (uint64_t)"First argument is not a JS function", 36);
  }
  else
  {
    v43 = 0;
    v44[1] = &v45;
    v44[2] = 0;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0;
    v45 = v17;
    v44[0] = 0x800000001;
    v41 = &v45;
    v42 = 1;
    JSC::call((unint64_t)this, v16, 10, (uint64_t)&v41, (uint64_t)"You shouldn't see this...", 26, v18, v19);
    if (*(_QWORD *)(v11 + 16))
    {
      *(_QWORD *)(v11 + 16) = 0;
      v38 = (unsigned int *)(v11 + 80);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 & 0xFFFFFFEF, v38));
    }
    JSC::Wasm::StreamingCompiler::finalize(*(JSC::Wasm::StreamingCompiler **)(v17 + 32), (unint64_t)this, v20, v21);
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_7;
    v40 = *(_DWORD *)(v11 + 80);
    if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v11 + 16))
      v29 = 0;
    else
LABEL_7:
      v29 = *(_QWORD *)(v17 + 24);
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v44, v22, v23, v24, v25, v26, v27, v28);
  }
  JSC::JSLockHolder::~JSLockHolder(&v51, v30, v31, v32, v33, v34, v35, v36);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C56D48);
  }
  return v29;
}

uint64_t JSC::functionCreateWasmStreamingCompilerForInstantiate(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  float v23;
  JSC::VM *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  int v44;
  unint64_t *v45;
  int v46;
  char v47;
  _QWORD v48[3];
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  JSC::VM *v54;
  unsigned int *v55;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C56F50);
  }
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v55, v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v54 = v11;
  if (*((_DWORD *)a2 + 8) == 1
    || (v16 = *((_QWORD *)a2 + 6), (v16 & 0xFFFE000000000002) != 0)
    || *(_BYTE *)(v16 + 5) != 26)
  {
    v41 = JSC::throwTypeError((unint64_t)this, &v54, (uint64_t)"First argument is not a JS function", 36);
    goto LABEL_19;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 1) >= 2)
  {
    v17 = *((_QWORD *)a2 + 7);
    if ((v17 & 0xFFFE000000000002) != 0)
    {
      v18 = 0;
    }
    else if (*(unsigned __int8 *)(v17 + 5) <= 0x16u)
    {
      v18 = 0;
    }
    else
    {
      v18 = *((_QWORD *)a2 + 7);
    }
    if (v17 == 10 || v18)
      goto LABEL_12;
    v41 = JSC::throwTypeError(this, &v54);
LABEL_19:
    v32 = v41;
    goto LABEL_16;
  }
  v18 = 0;
LABEL_12:
  v47 = 0;
  v48[1] = &v49;
  v48[2] = 0;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v49 = v19;
  v48[0] = 0x800000001;
  v45 = &v49;
  v46 = 1;
  JSC::call((unint64_t)this, v16, 10, (uint64_t)&v45, (uint64_t)"You shouldn't see this...", 26, v20, v21);
  v24 = v54;
  if (*((_QWORD *)v54 + 2))
  {
    *((_QWORD *)v54 + 2) = 0;
    v42 = (unsigned int *)((char *)v24 + 80);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 & 0xFFFFFFEF, v42));
    v24 = v54;
  }
  JSC::Wasm::StreamingCompiler::finalize(*(JSC::Wasm::StreamingCompiler **)(v19 + 32), (unint64_t)this, v22, v23);
  if (!*((_DWORD *)v24 + 20))
    goto LABEL_14;
  v44 = *((_DWORD *)v24 + 20);
  if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v24 + 64), 7u, v26, v27, v28, v29, v30, v31);
  if (*((_QWORD *)v24 + 2))
    v32 = 0;
  else
LABEL_14:
    v32 = *(_QWORD *)(v19 + 24);
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v48, v25, v26, v27, v28, v29, v30, v31);
LABEL_16:
  JSC::JSLockHolder::~JSLockHolder(&v55, v33, v34, v35, v36, v37, v38, v39);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C56F70);
  }
  return v32;
}

unint64_t JSC::functionCreateStaticCustomAccessor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57178);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57198);
  }
  v42 = 10263;
  SlowCase = *(_QWORD *)(v10 + 40136);
  if (SlowCase < *(_QWORD *)(v10 + 40144))
    goto LABEL_4;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v31);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v31;
LABEL_4:
    *(_QWORD *)(v10 + 40136) = SlowCase + 128;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v33, v34, v35);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C571E4);
  }
  v26 = *(_QWORD *)(v10 + 15032);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow < *(_QWORD *)(v26 + 32))
    {
LABEL_10:
      *(_QWORD *)(v26 + 24) = Slow + v27;
      goto LABEL_11;
    }
    Slow = *(_QWORD *)(v26 + 40);
    if ((Slow & 1) == 0)
    {
      v32 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v32);
      *(_QWORD *)(v26 + 40) = Slow + (int)v32;
      goto LABEL_10;
    }
    v36 = *(_QWORD *)(v10 + 15032);
    v37 = *(unsigned int *)(v26 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
    Slow = JSC::LocalAllocator::allocateSlowCase(v36, v10 + 192, v37, 0, 0, v38, v39, v40);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x10uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C57158);
    }
  }
LABEL_11:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57204);
  }
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C57230);
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v41, v19, v20, v21, v22, v23, v24, v25);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57250);
  }
  return Slow;
}

unint64_t JSC::functionCreateStaticCustomValue(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57478);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57498);
  }
  v42 = 8215;
  SlowCase = *(_QWORD *)(v10 + 40136);
  if (SlowCase < *(_QWORD *)(v10 + 40144))
    goto LABEL_4;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v31);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v31;
LABEL_4:
    *(_QWORD *)(v10 + 40136) = SlowCase + 128;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v33, v34, v35);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C574E4);
  }
  v26 = *(_QWORD *)(v10 + 15032);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow < *(_QWORD *)(v26 + 32))
    {
LABEL_10:
      *(_QWORD *)(v26 + 24) = Slow + v27;
      goto LABEL_11;
    }
    Slow = *(_QWORD *)(v26 + 40);
    if ((Slow & 1) == 0)
    {
      v32 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v32);
      *(_QWORD *)(v26 + 40) = Slow + (int)v32;
      goto LABEL_10;
    }
    v36 = *(_QWORD *)(v10 + 15032);
    v37 = *(unsigned int *)(v26 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
    Slow = JSC::LocalAllocator::allocateSlowCase(v36, v10 + 192, v37, 0, 0, v38, v39, v40);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x10uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C57458);
    }
  }
LABEL_11:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57504);
  }
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C57530);
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v41, v19, v20, v21, v22, v23, v24, v25);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57550);
  }
  return Slow;
}

unint64_t JSC::functionCreateStaticDontDeleteDontEnum(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57778);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57798);
  }
  v42 = 8215;
  SlowCase = *(_QWORD *)(v10 + 40136);
  if (SlowCase < *(_QWORD *)(v10 + 40144))
    goto LABEL_4;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v31);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v31;
LABEL_4:
    *(_QWORD *)(v10 + 40136) = SlowCase + 128;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v33, v34, v35);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C577E4);
  }
  v26 = *(_QWORD *)(v10 + 15032);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow < *(_QWORD *)(v26 + 32))
    {
LABEL_10:
      *(_QWORD *)(v26 + 24) = Slow + v27;
      goto LABEL_11;
    }
    Slow = *(_QWORD *)(v26 + 40);
    if ((Slow & 1) == 0)
    {
      v32 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v32);
      *(_QWORD *)(v26 + 40) = Slow + (int)v32;
      goto LABEL_10;
    }
    v36 = *(_QWORD *)(v10 + 15032);
    v37 = *(unsigned int *)(v26 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
    Slow = JSC::LocalAllocator::allocateSlowCase(v36, v10 + 192, v37, 0, 0, v38, v39, v40);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x10uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C57758);
    }
  }
LABEL_11:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57804);
  }
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C57830);
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v41, v19, v20, v21, v22, v23, v24, v25);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57850);
  }
  return Slow;
}

unint64_t JSC::functionCreateObjectDoingSideEffectPutWithoutCorrectSlotStatus(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t SlowCase;
  int v24;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57A7CLL);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v34, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0
    || &JSC::JSDollarVM::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)))
  {
    __break(0xC471u);
    JUMPOUT(0x198C57A5CLL);
  }
  v19 = *(_DWORD *)(v18 + 16);
  if (v19)
    v20 = 16 * (v19 & 0xFFFFFFFE);
  else
    v20 = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57A9CLL);
  }
  v21 = *(_QWORD *)(v10 + 15032);
  if (v21)
  {
    v22 = *(unsigned int *)(v21 + 60);
    SlowCase = *(_QWORD *)(v21 + 24);
    if (SlowCase < *(_QWORD *)(v21 + 32))
    {
LABEL_10:
      *(_QWORD *)(v21 + 24) = SlowCase + v22;
      goto LABEL_11;
    }
    SlowCase = *(_QWORD *)(v21 + 40);
    if ((SlowCase & 1) == 0)
    {
      v26 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v21 + 48);
      *(_QWORD *)(v21 + 32) = SlowCase + HIDWORD(v26);
      *(_QWORD *)(v21 + 40) = SlowCase + (int)v26;
      goto LABEL_10;
    }
    v27 = *(_QWORD *)(v10 + 15032);
    v28 = v20;
    v29 = *(unsigned int *)(v21 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
    v30 = v29;
    v20 = v28;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v27, v10 + 192, v30, 0, 0, v31, v32, v33);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x10uLL, 0, v14, v15, v16, v17);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x198C57A3CLL);
    }
  }
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  v24 = *(_DWORD *)(v20 + 8);
  *(_DWORD *)SlowCase = v20 >> 4;
  *(_DWORD *)(SlowCase + 4) = v24;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57ABCLL);
  }
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C57AE8);
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v34, v11, v12, v13, v14, v15, v16, v17);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57B08);
  }
  return SlowCase;
}

uint64_t JSC::functionCreateEmptyFunctionWithName(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  const WTF::String *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unsigned int *v36;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57CE0);
  }
  v11 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v36, (JSC::VM *)v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v34 = 10;
LABEL_20:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v34, this, v13, v14, v15, v16, v17, v18, (int **)&v35);
    goto LABEL_9;
  }
  v20 = *((_QWORD *)a2 + 6);
  v34 = v20;
  if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
    goto LABEL_20;
  v21 = *(WTF::StringImpl **)(v20 + 8);
  if ((v21 & 1) != 0)
  {
    v21 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v20, this, (uint64_t)v13, v14, v19, v15, v16, v17, v18);
    if (!v21)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v21)
LABEL_7:
    *(_DWORD *)v21 += 2;
LABEL_8:
  v35 = v21;
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_10;
LABEL_9:
  v33 = *(_DWORD *)(v11 + 80);
  if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v13, v14, v15, v16, v17, v18);
  if (*(_QWORD *)(v11 + 16))
    v22 = 0;
  else
LABEL_10:
    v22 = JSC::JSFunction::create(v11, (uint64_t)this, 1, &v35, (uint64_t)JSC::functionCreateEmptyFunctionWithName, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v23 = v35;
  v35 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v36, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C57D20);
  }
  return v22;
}

uint64_t JSC::functionGetPrivateProperty(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v12;
  int **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::Heap **v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  JSC::Exception *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  int v70;
  _BYTE *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unsigned __int16 *v77;
  uint64_t v78;
  unsigned int v79;
  BOOL v80;
  unsigned int *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  BOOL v97;
  int v99;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int8x16_t **v104;
  int v105;
  _BYTE *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  int v123;
  unsigned int v124;
  int v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned __int8 *v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  size_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unsigned __int8 *v147;
  JSC::VM **v148;
  uint64_t v149;
  int v150;
  int v151;
  JSC::VM **p_dst;
  uint64_t v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int16 *v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t (*v164)(JSC::VM **);
  JSC::VM **v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  char v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  char v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  char v179;
  int v180;
  uint64_t v181;
  unsigned __int8 *v182;
  uint64_t v183;
  unsigned int v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  int v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  char v194;
  int v195;
  uint64_t v196;
  unsigned int *v197;
  uint64_t v198;
  WTF::StringImpl *Index;
  int v200;
  char v201;
  int v202;
  _BYTE *v203;
  uint64_t v204;
  uint64_t v205;
  unsigned __int16 *v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  unsigned __int8 *v211;
  unsigned int v212;
  int v213;
  unsigned __int8 *v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  _DWORD *v219;
  int v220;
  unint64_t v221;
  char v222;
  uint64_t v223;
  int v224;
  JSC::VMTraps *v225;
  JSC::VMTraps *v226;
  uint64_t v227;
  WTF::StringImpl *v228;
  uint64_t v229;
  unint64_t v230;
  _DWORD *v231;
  _DWORD *v232;
  _QWORD v233[2];
  uint64_t v234;
  char v235;
  int8x16_t **v236;
  uint64_t v237;
  JSC::VM *__dst;
  unint64_t v239;
  char *v240;
  char __s[3];
  _BYTE v242[39];

  *(_QWORD *)&v242[23] = *MEMORY[0x1E0C80C00];
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C58380);
  }
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 2)
    return 10;
  v10 = *((_QWORD *)a2 + 7);
  if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
    return 10;
  v12 = *(_QWORD *)(this + 56);
  v13 = (int **)(v10 + 8);
  if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    v13 = JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 7), (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v12 + 80))
  {
    v158 = *(_DWORD *)(v12 + 80);
    if ((v158 & 0x27) != 0 && (v158 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
      v50 = 0;
      goto LABEL_106;
    }
  }
  v14 = JSC::BuiltinNames::lookUpPrivateName(*(JSC::BuiltinNames **)(*(_QWORD *)(v12 + 41952) + 48), (const WTF::String *)v13);
  if (!v14)
  {
    v51 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v51 = 0x1500000002;
    *(_QWORD *)(v51 + 8) = "Unknown private name.";
    *(_DWORD *)(v51 + 16) = 4;
    v228 = (WTF::StringImpl *)v51;
    v52 = *(JSC::Heap ***)(this + 56);
    v53 = *(_QWORD *)(this + 1504);
    if ((v53 & 1) != 0)
    {
      v164 = *(uint64_t (**)(JSC::VM **))(v53 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v165 = (JSC::VM **)(this - 16);
      else
        v165 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
      __dst = *v165;
      v239 = this;
      v240 = (char *)(this + 1504);
      v53 = v164(&__dst);
    }
    v54 = JSC::ErrorInstance::create(v52, v53, &v228, 0, 0, 0, 0, 1);
    v61 = (JSC::Exception *)v54;
    if ((v54 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C)))
    {
      v61 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v54, 0, v55, v56, v57, v58, v59);
    }
    v50 = (uint64_t)JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)this, v61, v60, v55, v56, v57, v58, v59);
    v69 = v228;
    v228 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
      {
        WTF::StringImpl::~StringImpl(v69, v62, v63, v64, v65, v66, v67, v68);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
      else
      {
        *(_DWORD *)v69 -= 2;
      }
    }
    goto LABEL_106;
  }
  v22 = v14;
  if (*((_DWORD *)a2 + 8) == 1)
    v23 = 10;
  else
    v23 = *((_QWORD *)a2 + 6);
  v227 = v23;
  v21.i64[0] = 0xFFFFFFFF00000000;
  v230 = 0xFFFFFFFF00000000;
  LOBYTE(v234) = 0;
  v235 = 0;
  v236 = 0;
  v237 = 0;
  v232 = 0;
  memset(v233, 0, 13);
  v231 = (_DWORD *)v23;
  if ((v23 & 0xFFFE000000000002) != 0)
    goto LABEL_393;
  v24 = *(_QWORD *)(this + 56);
  v25 = *(unsigned __int8 *)(v23 + 5);
  if (v25 <= 0x16)
  {
    if (v25 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v24 + 41952) + 1768) == v14)
      {
        v196 = *(_QWORD *)(v23 + 8);
        if ((v196 & 1) != 0)
          v197 = (unsigned int *)(v23 + 16);
        else
          v197 = (unsigned int *)(v196 + 4);
        v198 = *v197;
        if ((v198 & 0x80000000) != 0)
          Index = (WTF::StringImpl *)(COERCE__INT64((double)v198) + 0x2000000000000);
        else
          Index = (WTF::StringImpl *)(v198 | 0xFFFE000000000000);
        v200 = 14;
        goto LABEL_385;
      }
      v202 = *(_DWORD *)(v14 + 16);
      if ((v202 & 0x20) == 0)
      {
        v203 = *(_BYTE **)(v14 + 8);
        v204 = *(unsigned int *)(v14 + 4);
        if ((v202 & 4) != 0)
        {
          if (!(_DWORD)v204)
            goto LABEL_390;
          v15 = *v203 - 48;
          if (v15 > 9)
            goto LABEL_390;
          if (v204 >= 2 && *v203 == 48)
            goto LABEL_390;
          v215 = v203 + 1;
          v216 = v204 - 1;
          while (v216)
          {
            if (v15 > 0x19999999)
              goto LABEL_390;
            v217 = *v215 - 48;
            if (v217 > 9)
              goto LABEL_390;
            v201 = 0;
            v80 = __CFADD__(v217, 10 * v15);
            v15 = v217 + 10 * (_DWORD)v15;
            ++v215;
            --v216;
            if (v80)
              goto LABEL_391;
          }
        }
        else
        {
          if (!(_DWORD)v204)
            goto LABEL_390;
          v15 = *(unsigned __int16 *)v203 - 48;
          if (v15 > 9)
            goto LABEL_390;
          if (*(_WORD *)v203 == 48 && v204 > 1)
            goto LABEL_390;
          v207 = (unsigned __int16 *)(v203 + 2);
          v208 = v204 - 1;
          while (v208)
          {
            if (v15 > 0x19999999)
              goto LABEL_390;
            v209 = *v207 - 48;
            if (v209 > 9)
              goto LABEL_390;
            v201 = 0;
            v80 = __CFADD__(v209, 10 * v15);
            v15 = v209 + 10 * (_DWORD)v15;
            ++v207;
            --v208;
            if (v80)
              goto LABEL_391;
          }
        }
        if ((_DWORD)v15 != -1)
        {
          v218 = *(_QWORD *)(v23 + 8);
          v219 = (_DWORD *)((v218 & 1) != 0 ? v23 + 16 : v218 + 4);
          if (*v219 > v15)
          {
            Index = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v23, (JSC::JSGlobalObject *)this, v15, v16, v17, v18, v19, v20, v21);
            if (!*(_DWORD *)(v24 + 80))
              goto LABEL_444;
            v220 = *(_DWORD *)(v24 + 80);
            if ((v220 & 0x27) != 0 && (v220 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v24 + 64), 7u, v15, v16, v17, v18, v19, v20);
            if (!*(_QWORD *)(v24 + 16))
            {
LABEL_444:
              v200 = 10;
LABEL_385:
              v228 = Index;
              LODWORD(v230) = v200;
              v232 = 0;
              v201 = 1;
              BYTE1(v233[1]) = 1;
              goto LABEL_391;
            }
          }
        }
      }
LABEL_390:
      v201 = 0;
LABEL_391:
      if (*(_DWORD *)(v24 + 80))
      {
        v213 = *(_DWORD *)(v24 + 80);
        if ((v213 & 0x27) != 0 && (v213 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v24 + 64), 7u, v15, v16, v17, v18, v19, v20);
        if (*(_QWORD *)(v24 + 16))
          goto LABEL_62;
      }
      if ((v201 & 1) != 0)
        goto LABEL_81;
    }
LABEL_393:
    v205 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v227, this);
    if (!v205)
      goto LABEL_62;
    v23 = v205;
    v24 = *(_QWORD *)(this + 56);
  }
  v26 = (_BYTE *)(v23 + 6);
  v27 = v22 >> 4;
  v28 = v23;
  if ((*(_BYTE *)(v23 + 6) & 8) == 0)
  {
    v29 = v23;
    do
    {
      v30 = *(_DWORD *)v29 & 0xFFFFFFFE;
      v31 = 16 * v30;
      if (!(_DWORD)v27 || (v27 & ~*(_DWORD *)(16 * v30 + 0x20)) != 0)
        goto LABEL_42;
      v32 = *(_QWORD *)(16 * v30 + 0x58);
      if (!v32)
      {
        v33 = *(_QWORD *)(16 * v30 + 0x40);
        if (!v33 || *(_BYTE *)(v33 + 5) != 1 && *(_DWORD *)(v33 + 80) < 2u)
          goto LABEL_42;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v31, (JSC::VM *)v24, 1, (const JSC::PropertyTable *)v16, v17, v18, v19, v20);
        if (!v32)
          goto LABEL_42;
      }
      if (!*(_DWORD *)(v32 + 24))
        goto LABEL_42;
      v34 = *(_QWORD *)(v32 + 16);
      v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
      v36 = *(unsigned int *)(v32 + 8);
      v37 = *(_DWORD *)(v22 + 16);
      if ((v34 & 1) != 0)
      {
        if ((v37 & 0x20) != 0)
          v37 = *(_DWORD *)(v22 + 32);
        v38 = *(_DWORD *)(v32 + 12);
        v39 = (v37 >> 8) & *(_QWORD *)&v38;
        v40 = *(unsigned __int8 *)(v35 + v39);
        if (!*(_BYTE *)(v35 + v39))
          goto LABEL_42;
        v41 = v35 + v36;
        v42 = 1;
        while (1)
        {
          v43 = *(_QWORD *)(v41 + 8 * (v40 - 1));
          if (v22 == (v43 & 0xFFFFFFFFFFFFLL))
            break;
          v39 = ((_DWORD)v39 + v42) & v38;
          v40 = *(unsigned __int8 *)(v35 + v39);
          ++v42;
          if (!*(_BYTE *)(v35 + v39))
            goto LABEL_42;
        }
        v18 = (v43 >> 16) & 0xFF00000000 | HIBYTE(v43);
      }
      else
      {
        if ((v37 & 0x20) != 0)
          v37 = *(_DWORD *)(v22 + 32);
        v44 = *(_DWORD *)(v32 + 12);
        v45 = v44 & (v37 >> 8);
        v46 = *(_DWORD *)(v35 + 4 * v45);
        if (!v46)
          goto LABEL_42;
        v47 = v35 + 4 * v36;
        v48 = 1;
        while (1)
        {
          v49 = (v46 - 1);
          if (v22 == *(_QWORD *)(v47 + 16 * v49))
            break;
          v45 = (v45 + v48) & v44;
          v46 = *(_DWORD *)(v35 + 4 * v45);
          ++v48;
          if (!v46)
            goto LABEL_42;
        }
        v18 = *(unsigned int *)(v47 + 16 * v49 + 8) | ((unint64_t)*(unsigned __int8 *)(v47 + 16 * v49 + 12) << 32);
      }
      if ((_DWORD)v18 != -1)
      {
        v17 = HIDWORD(v18);
        if ((int)v18 <= 63)
        {
          v74 = v29 + 16;
          v75 = v18 << 32;
        }
        else
        {
          v74 = *(_QWORD *)(v29 + 8) - 8;
          v75 = 0x3F00000000 - (v18 << 32);
        }
        v16 = *(_QWORD *)(v74 + (v75 >> 29));
        if ((v16 & 0xFFFE000000000002) == 0)
        {
          v76 = *(unsigned __int8 *)(v16 + 5);
          if (v76 != 5)
          {
            if (v76 != 6)
              goto LABEL_69;
            v101 = *(_DWORD *)(v31 + 16) & 3;
            v102 = *(_QWORD *)(v16 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v16 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v104 = *(int8x16_t ***)(v16 + 24);
              v103 = *(_QWORD *)(v16 + 32);
              v228 = *(WTF::StringImpl **)(v16 + 8);
              v229 = v102;
              LODWORD(v230) = HIDWORD(v18);
              v232 = (_DWORD *)v29;
              goto LABEL_110;
            }
            v228 = *(WTF::StringImpl **)(v16 + 8);
            v229 = v102;
            LODWORD(v230) = HIDWORD(v18);
            v232 = (_DWORD *)v29;
LABEL_302:
            BYTE1(v233[1]) = 3;
            if (v101 != 2)
              LOBYTE(v233[1]) = 1;
            goto LABEL_81;
          }
          v81 = (unsigned int *)v29;
          v82 = v24;
LABEL_80:
          JSC::JSObject::fillGetterPropertySlot(v81, v82, (uint64_t)&v228, v16, v17, v18);
          goto LABEL_81;
        }
LABEL_69:
        v228 = (WTF::StringImpl *)v16;
        v232 = (_DWORD *)v29;
LABEL_70:
        v230 = __PAIR64__(v18, v17);
        LOWORD(v233[1]) = 257;
        goto LABEL_81;
      }
LABEL_42:
      if ((*v26 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v29, (JSC::VM *)v24, v22, (uint64_t)&v228) & 1) != 0)
      {
        goto LABEL_81;
      }
      v28 = *(_QWORD *)(v31 + 48);
      if (!v28)
        v28 = *(_QWORD *)(v29 + 16);
      if ((v28 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v28 + 5) < 0x17u)
      {
        v70 = *(_DWORD *)(v22 + 16);
        if ((v70 & 0x20) == 0)
        {
          v71 = *(_BYTE **)(v22 + 8);
          v72 = *(unsigned int *)(v22 + 4);
          if ((v70 & 4) != 0)
          {
            if ((_DWORD)v72)
            {
              v73 = *v71 - 48;
              if (v73 <= 9 && (v72 < 2 || *v71 != 48))
              {
                v182 = v71 + 1;
                v183 = v72 - 1;
                v50 = 10;
                while (v183)
                {
                  if (v73 <= 0x19999999)
                  {
                    v184 = *v182 - 48;
                    if (v184 <= 9)
                    {
                      v80 = __CFADD__(v184, 10 * v73);
                      v73 = v184 + 10 * v73;
                      ++v182;
                      --v183;
                      if (!v80)
                        continue;
                    }
                  }
                  goto LABEL_103;
                }
                goto LABEL_335;
              }
            }
          }
          else if ((_DWORD)v72)
          {
            v73 = *(unsigned __int16 *)v71 - 48;
            if (v73 <= 9 && (*(_WORD *)v71 != 48 || v72 <= 1))
            {
              v77 = (unsigned __int16 *)(v71 + 2);
              v78 = v72 - 1;
              v50 = 10;
              while (v78)
              {
                if (v73 <= 0x19999999)
                {
                  v79 = *v77 - 48;
                  if (v79 <= 9)
                  {
                    v80 = __CFADD__(v79, 10 * v73);
                    v73 = v79 + 10 * v73;
                    ++v77;
                    --v78;
                    if (!v80)
                      continue;
                  }
                }
                goto LABEL_103;
              }
LABEL_335:
              if (v73 != -1)
              {
                v185 = v73;
                v186 = *(_QWORD *)(this + 56);
                v226 = (JSC::VMTraps *)(v186 + 64);
                v50 = 10;
                while (1)
                {
                  v187 = 16 * (*(_DWORD *)v23 & 0xFFFFFFFE);
                  v188 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v187 + 0x4C) + 0x70))(v23, this, v185, &v228);
                  if (*(_DWORD *)(v186 + 80))
                  {
                    v191 = *(_DWORD *)(v186 + 80);
                    if ((v191 & 0x27) != 0 && (v191 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v226, 7u, v15, v16, v17, v18, v19, v20);
                    if (*(_QWORD *)(v186 + 16))
                      goto LABEL_103;
                  }
                  if ((v188 & 1) != 0)
                    goto LABEL_81;
                  if (BYTE2(v233[1]) == 3)
                  {
                    if (BYTE4(v233[1]))
                      goto LABEL_103;
                    v189 = *(unsigned __int8 *)(v23 + 5);
                    if (v189 != 61)
                    {
LABEL_341:
                      if ((v189 - 39) <= 0xA)
                      {
                        if ((*(_BYTE *)(v23 + 40) & 7u) > 2)
                        {
                          LOBYTE(__dst) = 0;
                          LOBYTE(v239) = 0;
                          v193 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v23, (uint64_t)&__dst, v15, v16, v17, v18, v19, v20);
                          v192 = v194 ? v193 : 0;
                        }
                        else
                        {
                          v192 = *(_QWORD *)(v23 + 24);
                        }
                        if (v192 <= v185)
                          goto LABEL_103;
                      }
                    }
                  }
                  else
                  {
                    v189 = *(unsigned __int8 *)(v23 + 5);
                    if (v189 != 61)
                      goto LABEL_341;
                    if (BYTE2(v233[1]) == 1)
                      goto LABEL_103;
                  }
                  if ((*(_WORD *)(v187 + 12) & 0x800) == 0 || BYTE2(v233[1]) == 3)
                  {
                    v190 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x30);
                    if (!v190)
                      v190 = *(_QWORD *)(v23 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v190 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0xB0))(v23, this);
                    }
                    else
                    {
                      v190 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x30);
                      if (!v190)
                        v190 = *(_QWORD *)(v23 + 16);
                    }
                    if (*(_DWORD *)(v186 + 80))
                    {
                      v195 = *(_DWORD *)(v186 + 80);
                      if ((v195 & 0x27) != 0 && (v195 & 0x20) == 0)
                        JSC::VMTraps::handleTraps(v226, 7u, v15, v16, v17, v18, v19, v20);
                      if (*(_QWORD *)(v186 + 16))
                        goto LABEL_103;
                    }
                  }
                  if ((v190 & 0xFFFE000000000002) == 0)
                  {
                    v23 = v190;
                    if (*(unsigned __int8 *)(v190 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_103;
                }
              }
            }
          }
        }
LABEL_62:
        v50 = 10;
        goto LABEL_103;
      }
      v26 = (_BYTE *)(v28 + 6);
      v29 = v28;
    }
    while ((*(_BYTE *)(v28 + 6) & 8) == 0);
  }
  v105 = *(_DWORD *)(v22 + 16);
  if ((v105 & 0x20) == 0)
  {
    v106 = *(_BYTE **)(v22 + 8);
    v107 = *(unsigned int *)(v22 + 4);
    if ((v105 & 4) != 0)
    {
      if ((_DWORD)v107)
      {
        v108 = *v106 - 48;
        if (v108 <= 9 && (v107 < 2 || *v106 != 48))
        {
          v210 = v107 - 1;
          v211 = v106 + 1;
          while (v210)
          {
            if (v108 <= 0x19999999)
            {
              v212 = *v211 - 48;
              if (v212 <= 9)
              {
                v80 = __CFADD__(v212, 10 * v108);
                v108 = v212 + 10 * v108;
                --v210;
                ++v211;
                if (!v80)
                  continue;
              }
            }
            goto LABEL_119;
          }
          if (v108 != -1)
            goto LABEL_258;
        }
      }
    }
    else if ((_DWORD)v107)
    {
      v108 = *(unsigned __int16 *)v106 - 48;
      if (v108 <= 9 && (*(_WORD *)v106 != 48 || v107 <= 1))
      {
        v161 = (unsigned __int16 *)(v106 + 2);
        v162 = v107 - 1;
        while (v162)
        {
          if (v108 <= 0x19999999)
          {
            v163 = *v161 - 48;
            if (v163 <= 9)
            {
              v80 = __CFADD__(v163, 10 * v108);
              v108 = v163 + 10 * v108;
              ++v161;
              --v162;
              if (!v80)
                continue;
            }
          }
          goto LABEL_119;
        }
        if (v108 != -1)
        {
LABEL_258:
          v166 = v108;
          v167 = *(_QWORD *)(this + 56);
          v225 = (JSC::VMTraps *)(v167 + 64);
          v50 = 10;
          while (1)
          {
            v168 = 16 * (*(_DWORD *)v23 & 0xFFFFFFFE);
            v169 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v168 + 0x4C) + 0x70))(v23, this, v166, &v228);
            v170 = v169;
            if (*(_DWORD *)(v167 + 80))
            {
              v173 = *(_DWORD *)(v167 + 80);
              if ((v173 & 0x27) != 0 && (v173 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v225, 7u, v15, v16, v17, v18, v19, v20);
              v174 = *(_QWORD *)(v167 + 16);
              if (v174)
                v175 = 1;
              else
                v175 = v170;
              if ((v175 & 1) != 0)
              {
                if (!v174)
                  goto LABEL_81;
                goto LABEL_62;
              }
            }
            else if ((v169 & 1) != 0)
            {
              goto LABEL_81;
            }
            if (BYTE2(v233[1]) == 3)
            {
              if (BYTE4(v233[1]))
                goto LABEL_103;
              v171 = *(unsigned __int8 *)(v23 + 5);
              if (v171 != 61)
              {
LABEL_263:
                if ((v171 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v23 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    LOBYTE(v239) = 0;
                    v178 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v23, (uint64_t)&__dst, v15, v16, v17, v18, v19, v20);
                    v177 = v179 ? v178 : 0;
                  }
                  else
                  {
                    v177 = *(_QWORD *)(v23 + 24);
                  }
                  if (v177 <= v166)
                    goto LABEL_103;
                }
              }
            }
            else
            {
              v171 = *(unsigned __int8 *)(v23 + 5);
              if (v171 != 61)
                goto LABEL_263;
              if (BYTE2(v233[1]) == 1)
                goto LABEL_103;
            }
            if ((*(_WORD *)(v168 + 12) & 0x800) == 0 || BYTE2(v233[1]) == 3)
            {
              v172 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x30);
              if (!v172)
                v172 = *(_QWORD *)(v23 + 16);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v172 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v23 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v23, this);
              }
              else
              {
                v172 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x30);
                if (!v172)
                  v172 = *(_QWORD *)(v23 + 16);
              }
              if (*(_DWORD *)(v167 + 80))
              {
                v176 = *(_DWORD *)(v167 + 80);
                if ((v176 & 0x27) != 0 && (v176 & 0x20) == 0)
                  JSC::VMTraps::handleTraps(v225, 7u, v15, v16, v17, v18, v19, v20);
                if (*(_QWORD *)(v167 + 16))
                  goto LABEL_103;
              }
            }
            if ((v172 & 0xFFFE000000000002) == 0)
            {
              v23 = v172;
              if (*(unsigned __int8 *)(v172 + 5) > 0x16u)
                continue;
            }
            goto LABEL_103;
          }
        }
      }
    }
  }
LABEL_119:
  v109 = *(_QWORD *)(this + 56);
  v50 = 10;
  while (1)
  {
    v110 = 16 * (*(_DWORD *)v28 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v28 + 6) & 8) == 0)
      break;
    v222 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) + 0x68))(v28, this, v22, &v228);
    if (*(_DWORD *)(v109 + 80))
    {
      v156 = *(_DWORD *)(v109 + 80);
      if ((v156 & 0x27) != 0 && (v156 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v109 + 64), 7u, v15, v16, v17, v18, v19, v20);
      if (*(_QWORD *)(v109 + 16))
        goto LABEL_103;
    }
    if ((v222 & 1) != 0)
      goto LABEL_81;
    if (BYTE2(v233[1]) == 3)
    {
      if (BYTE4(v233[1]))
        goto LABEL_103;
      v132 = *(unsigned __int8 *)(v28 + 5);
      if (v132 == 61)
        goto LABEL_149;
    }
    else
    {
      v132 = *(unsigned __int8 *)(v28 + 5);
      if (v132 == 61)
      {
        if (BYTE2(v233[1]) == 1)
          goto LABEL_103;
        goto LABEL_149;
      }
    }
    if ((v132 - 39) > 0xA)
      goto LABEL_149;
    v133 = *(_DWORD *)(v22 + 16);
    if ((v133 & 0x20) != 0)
      goto LABEL_149;
    v134 = *(unsigned int *)(v22 + 4);
    if (!(_DWORD)v134)
      goto LABEL_149;
    v135 = *(unsigned __int8 **)(v22 + 8);
    if ((v133 & 4) != 0)
    {
      v136 = *v135;
      if ((_DWORD)v134 == 1)
      {
LABEL_173:
        if ((v136 - 48) < 0xA)
          goto LABEL_103;
        goto LABEL_149;
      }
      if (v136 == 45)
      {
        v136 = v135[1];
        goto LABEL_177;
      }
      if ((v136 - 48) < 0xA)
        goto LABEL_188;
      if ((_DWORD)v134 == 8)
        goto LABEL_187;
    }
    else
    {
      v136 = *(unsigned __int16 *)v135;
      if ((_DWORD)v134 == 1)
        goto LABEL_173;
      if (v136 == 45)
      {
        v136 = *((unsigned __int16 *)v135 + 1);
LABEL_177:
        if ((v136 - 48) < 0xA)
        {
          if ((_DWORD)v134 == 2)
            goto LABEL_103;
          goto LABEL_188;
        }
        if ((_DWORD)v134 != 9)
          goto LABEL_149;
LABEL_187:
        if (v136 != 73)
          goto LABEL_149;
        goto LABEL_188;
      }
      if ((v136 - 48) < 0xA || (_DWORD)v134 == 8 && v136 == 73)
        goto LABEL_188;
    }
    if ((_DWORD)v134 != 3 || v136 != 78)
      goto LABEL_149;
LABEL_188:
    v221 = v221 & 0xFFFFFF0000000000 | v134 | ((unint64_t)((v133 >> 2) & 1) << 32);
    JSC::jsToNumber(v135, v221);
    v138 = (v137 >> 52) & 0x7FF;
    if ((_DWORD)v138 == 2047)
    {
      if ((v137 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v139 = v242;
      }
      else
      {
        if ((v137 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v145 = &__s[1];
        }
        else
        {
          v145 = __s;
        }
        *(_QWORD *)v145 = 0x7974696E69666E49;
        v139 = v145 + 8;
      }
      goto LABEL_202;
    }
    v140 = v137 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v137 & 0x8000000000000000) != 0 && v140)
    {
      __s[0] = 45;
      v141 = &__s[1];
    }
    else
    {
      if (!v140)
      {
        __s[0] = 48;
        v139 = &__s[1];
        goto LABEL_202;
      }
      v141 = __s;
    }
    v223 = (uint64_t)v141;
    v142 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v137 & 0x800FFFFFFFFFFFFFLL, v138);
    v139 = WTF::dragonbox::detail::to_shortest(v142, v143, v223, v144);
LABEL_202:
    *v139 = 0;
    v224 = strlen(__s);
    memcpy(&__dst, __s, v224);
    *((_BYTE *)&__dst + v224) = 0;
    v146 = *(unsigned int *)(v22 + 4);
    v147 = *(unsigned __int8 **)(v22 + 8);
    if ((*(_BYTE *)(v22 + 16) & 4) != 0)
    {
      if ((_DWORD)v146)
      {
        p_dst = &__dst;
        v153 = *(unsigned int *)(v22 + 4);
        do
        {
          v155 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v154 = v155;
          if (!v155 || *v147 != v154)
            goto LABEL_149;
          ++v147;
        }
        while (--v153);
      }
    }
    else if ((_DWORD)v146)
    {
      v148 = &__dst;
      v149 = *(unsigned int *)(v22 + 4);
      do
      {
        v151 = *(unsigned __int8 *)v148;
        v148 = (JSC::VM **)((char *)v148 + 1);
        v150 = v151;
        if (!v151 || *(unsigned __int16 *)v147 != v150)
          goto LABEL_149;
        v147 += 2;
      }
      while (--v149);
    }
    if (!*((_BYTE *)&__dst + v146))
      goto LABEL_103;
LABEL_149:
    if ((*(_WORD *)(v110 + 12) & 0x800) == 0)
    {
      v129 = *(_DWORD *)v28;
LABEL_151:
      v130 = *(_QWORD *)(16 * (v129 & 0xFFFFFFFE) + 0x30);
      if (!v130)
        v130 = *(_QWORD *)(v28 + 16);
      goto LABEL_153;
    }
    v129 = *(_DWORD *)v28;
    if (BYTE2(v233[1]) == 3)
      goto LABEL_151;
    v131 = 16 * (v129 & 0xFFFFFFFE);
    if ((*(_WORD *)(v131 + 12) & 0x800) != 0)
    {
      v130 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v131 + 76) + 0xB0))(v28, this);
    }
    else
    {
      v130 = *(_QWORD *)(v131 + 48);
      if (!v130)
        v130 = *(_QWORD *)(v28 + 16);
    }
    if (*(_DWORD *)(v109 + 80))
    {
      v157 = *(_DWORD *)(v109 + 80);
      if ((v157 & 0x27) != 0 && (v157 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v109 + 64), 7u, v15, v16, v17, v18, v19, v20);
      if (*(_QWORD *)(v109 + 16))
        goto LABEL_103;
    }
LABEL_153:
    if ((v130 & 0xFFFE000000000002) == 0)
    {
      v28 = v130;
      if (*(unsigned __int8 *)(v130 + 5) > 0x16u)
        continue;
    }
    goto LABEL_103;
  }
  if (!(_DWORD)v27 || (v27 & ~*(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_148;
  v111 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x58);
  if (!v111)
  {
    v112 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x40);
    if (!v112 || *(_BYTE *)(v112 + 5) != 1 && *(_DWORD *)(v112 + 80) < 2u)
      goto LABEL_148;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE)), (JSC::VM *)v109, 1, (const JSC::PropertyTable *)v16, v17, v18, v19, v20);
    if (!v111)
      goto LABEL_148;
  }
  if (!*(_DWORD *)(v111 + 24))
    goto LABEL_148;
  v113 = *(_QWORD *)(v111 + 16);
  v114 = v113 & 0xFFFFFFFFFFFFFFFELL;
  v115 = *(unsigned int *)(v111 + 8);
  v116 = *(_DWORD *)(v22 + 16);
  if ((v113 & 1) != 0)
  {
    if ((v116 & 0x20) != 0)
      v116 = *(_DWORD *)(v22 + 32);
    v117 = *(_DWORD *)(v111 + 12);
    v118 = (v116 >> 8) & *(_QWORD *)&v117;
    v119 = *(unsigned __int8 *)(v114 + v118);
    if (*(_BYTE *)(v114 + v118))
    {
      v120 = v114 + v115;
      v121 = 1;
      while (1)
      {
        v122 = *(_QWORD *)(v120 + 8 * (v119 - 1));
        if (v22 == (v122 & 0xFFFFFFFFFFFFLL))
          break;
        v118 = ((_DWORD)v118 + v121) & v117;
        v119 = *(unsigned __int8 *)(v114 + v118);
        ++v121;
        if (!*(_BYTE *)(v114 + v118))
          goto LABEL_148;
      }
      v18 = (v122 >> 16) & 0xFF00000000 | HIBYTE(v122);
      goto LABEL_145;
    }
    goto LABEL_148;
  }
  if ((v116 & 0x20) != 0)
    v116 = *(_DWORD *)(v22 + 32);
  v123 = *(_DWORD *)(v111 + 12);
  v124 = v123 & (v116 >> 8);
  v125 = *(_DWORD *)(v114 + 4 * v124);
  if (!v125)
    goto LABEL_148;
  v126 = v114 + 4 * v115;
  v127 = 1;
  while (1)
  {
    v128 = (v125 - 1);
    if (v22 == *(_QWORD *)(v126 + 16 * v128))
      break;
    v124 = (v124 + v127) & v123;
    v125 = *(_DWORD *)(v114 + 4 * v124);
    ++v127;
    if (!v125)
      goto LABEL_148;
  }
  v18 = *(unsigned int *)(v126 + 16 * v128 + 8) | ((unint64_t)*(unsigned __int8 *)(v126 + 16 * v128 + 12) << 32);
LABEL_145:
  if ((_DWORD)v18 == -1)
  {
LABEL_148:
    if ((*(_BYTE *)(v28 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v28, (JSC::VM *)v109, v22, (uint64_t)&v228) & 1) != 0)
    {
      goto LABEL_81;
    }
    goto LABEL_149;
  }
  v17 = HIDWORD(v18);
  if ((int)v18 <= 63)
  {
    v159 = v28 + 16;
    v160 = v18 << 32;
  }
  else
  {
    v159 = *(_QWORD *)(v28 + 8) - 8;
    v160 = 0x3F00000000 - (v18 << 32);
  }
  v16 = *(_QWORD *)(v159 + (v160 >> 29));
  if ((v16 & 0xFFFE000000000002) != 0)
  {
LABEL_308:
    v228 = (WTF::StringImpl *)v16;
    v232 = (_DWORD *)v28;
    goto LABEL_70;
  }
  v180 = *(unsigned __int8 *)(v16 + 5);
  if (v180 == 5)
  {
    v81 = (unsigned int *)v28;
    v82 = v109;
    goto LABEL_80;
  }
  if (v180 != 6)
    goto LABEL_308;
  v101 = *(_DWORD *)(v110 + 16) & 3;
  v181 = *(_QWORD *)(v16 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C)))
  {
    v228 = *(WTF::StringImpl **)(v16 + 8);
    v229 = v181;
    LODWORD(v230) = HIDWORD(v18);
    v232 = (_DWORD *)v28;
    goto LABEL_302;
  }
  v104 = *(int8x16_t ***)(v16 + 24);
  v103 = *(_QWORD *)(v16 + 32);
  v228 = *(WTF::StringImpl **)(v16 + 8);
  v229 = v181;
  LODWORD(v230) = HIDWORD(v18);
  v232 = (_DWORD *)v28;
LABEL_110:
  BYTE1(v233[1]) = 3;
  if (v101 != 2)
    LOBYTE(v233[1]) = 1;
  BYTE3(v233[1]) = 1;
  v236 = v104;
  v237 = v103;
LABEL_81:
  if (BYTE1(v233[1]) == 1)
  {
    v50 = (uint64_t)v228;
  }
  else
  {
    if (BYTE1(v233[1]) == 2)
    {
      v83 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v228, (JSC::JSGlobalObject *)this, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      v92 = (unint64_t)v232;
      v93 = *(_QWORD *)(16 * (*v232 & 0xFFFFFFFE) + 0x28);
      if ((v230 & 0x20) != 0)
        v92 = (unint64_t)v231;
      if (BYTE3(v233[1]) != 1)
        goto LABEL_101;
      if ((v92 & 0xFFFE000000000002) != 0)
        goto LABEL_322;
      v94 = *(unsigned int *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0x4C);
      v95 = *(_DWORD *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0x4C) != 0;
      v96 = 16 * v94;
      if ((_DWORD)v94)
        v97 = v236 == (int8x16_t **)v96;
      else
        v97 = 1;
      if (!v97)
      {
        do
        {
          v96 = *(_QWORD *)(v96 + 16);
          v95 = v96 != 0;
        }
        while ((int8x16_t **)v96 != v236 && v96 != 0);
      }
      if (!v95)
      {
LABEL_322:
        __dst = *(JSC::VM **)(this + 56);
        v83 = JSC::throwDOMAttributeGetterTypeError(v93, &__dst, v236, (WTF::StringImpl *)v22);
      }
      else
      {
LABEL_101:
        v83 = ((uint64_t (*)(unint64_t))v228)(v93);
      }
    }
    v50 = v83;
  }
LABEL_103:
  if (v235)
  {
    v99 = *(_DWORD *)(v234 + 4);
    if (!v99)
    {
      __break(0xC471u);
      JUMPOUT(0x198C58A30);
    }
    *(_DWORD *)(v234 + 4) = v99 - 1;
  }
LABEL_106:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C583A0);
  }
  return v50;
}

uint64_t JSC::functionSetImpureGetterDelegate(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char **v23;
  BOOL v24;
  uint64_t v26;
  JSC::VM *v28;
  unsigned int *v29;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C593BCLL);
  }
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v29, v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v28 = v11;
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_22;
  v12 = *((_QWORD *)a2 + 6);
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_22;
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 2 || *(unsigned __int8 *)(v12 + 5) < 0x17u)
    goto LABEL_22;
  v20 = *((_QWORD *)a2 + 7);
  if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) < 0x17u)
    goto LABEL_22;
  v21 = *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C);
  v22 = *(_DWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) != 0;
  v23 = (char **)(16 * v21);
  if ((_DWORD)v21)
  else
    v24 = 1;
  if (!v24)
  {
    do
    {
      v23 = (char **)v23[2];
      v22 = v23 != 0;
    }
  }
  if (v22)
  {
    *(_QWORD *)(v12 + 16) = v20;
    if (v20 && *((_DWORD *)v11 + 190) >= *(unsigned __int8 *)(v12 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, v12);
LABEL_22:
    v26 = 10;
    goto LABEL_23;
  }
  JSC::throwTypeError((unint64_t)this, &v28, (uint64_t)"argument is not an ImpureGetter", 32);
  v26 = 0;
LABEL_23:
  JSC::JSLockHolder::~JSLockHolder(&v29, (void *)v12, v13, v14, v15, v16, v17, v18);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C593DCLL);
  }
  return v26;
}

unint64_t JSC::functionCreateRoot(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C595C0);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C595E0);
  }
  v42 = 23;
  SlowCase = *(_QWORD *)(v10 + 40136);
  if (SlowCase < *(_QWORD *)(v10 + 40144))
    goto LABEL_4;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v31);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v31;
LABEL_4:
    *(_QWORD *)(v10 + 40136) = SlowCase + 128;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v33, v34, v35);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5962CLL);
  }
  v26 = *(_QWORD *)(v10 + 23328);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow < *(_QWORD *)(v26 + 32))
    {
LABEL_10:
      *(_QWORD *)(v26 + 24) = Slow + v27;
      goto LABEL_11;
    }
    Slow = *(_QWORD *)(v26 + 40);
    if ((Slow & 1) == 0)
    {
      v32 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v32);
      *(_QWORD *)(v26 + 40) = Slow + (int)v32;
      goto LABEL_10;
    }
    v36 = *(_QWORD *)(v10 + 23328);
    v37 = *(unsigned int *)(v26 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
    Slow = JSC::LocalAllocator::allocateSlowCase(v36, v10 + 192, v37, 0, 0, v38, v39, v40);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 23224, (JSC *)v10, 0x20uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C595A0);
    }
  }
LABEL_11:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  *(_QWORD *)(Slow + 16) = 16 * *(unsigned int *)(SlowCase + 76);
  *(_QWORD *)(Slow + 24) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5964CLL);
  }
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C59678);
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v41, v19, v20, v21, v22, v23, v24, v25);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C59698);
  }
  return Slow;
}

unint64_t JSC::functionCreateElement(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t Slow;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v38;
  JSC::Heap **v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  JSC::Exception *v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t (*v72)(_QWORD *);
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  unsigned int *v83;
  _QWORD v84[3];

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C59A88);
  }
  v11 = *(_QWORD *)(this + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v83, (JSC::VM *)v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (*((_DWORD *)a2 + 8) == 1
    || (v19 = *((_QWORD *)a2 + 6), (v19 & 0xFFFE000000000002) != 0)
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C)))
  {
    v38 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v38 = 0x2500000002;
    *(_QWORD *)(v38 + 8) = "Cannot create Element without a Root.";
    *(_DWORD *)(v38 + 16) = 4;
    v82 = (WTF::StringImpl *)v38;
    v39 = *(JSC::Heap ***)(this + 56);
    v40 = *(_QWORD *)(this + 1504);
    if ((v40 & 1) != 0)
    {
      v72 = *(uint64_t (**)(_QWORD *))(v40 & 0xFFFFFFFFFFFFFFFCLL);
      v73 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v73 = (_QWORD *)(this - 16);
      v84[0] = *v73;
      v84[1] = this;
      v84[2] = this + 1504;
      v40 = v72(v84);
    }
    v41 = JSC::ErrorInstance::create(v39, v40, &v82, 0, 0, 0, 0, 1);
    v48 = (JSC::Exception *)v41;
    if ((v41 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x4C)))
    {
      v48 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v41, 0, v42, v43, v44, v45, v46);
    }
    Slow = (unint64_t)JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, v48, v47, v42, v43, v44, v45, v46);
    v49 = v82;
    v82 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    goto LABEL_31;
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C59AC8);
  }
  LODWORD(v84[0]) = 23;
  SlowCase = *(_QWORD *)(v11 + 40136);
  if (SlowCase < *(_QWORD *)(v11 + 40144))
    goto LABEL_7;
  SlowCase = *(_QWORD *)(v11 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v58 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 40160);
    *(_QWORD *)(v11 + 40144) = SlowCase + HIDWORD(v58);
    *(_QWORD *)(v11 + 40152) = SlowCase + (int)v58;
LABEL_7:
    *(_QWORD *)(v11 + 40136) = SlowCase + 128;
    goto LABEL_8;
  }
  JSC::sanitizeStackForVM((JSC *)v11, v12, v13, v14, v15, v16, v17, v18);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 40112, v11 + 192, 128, 0, 0, v74, v75, v76);
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C59B14);
  }
  v28 = *(_QWORD *)(v11 + 15040);
  if (!v28)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v11 + 14936, (JSC *)v11, 0x20uLL, 0, v24, v25, v26, v27);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C59A68);
    }
    goto LABEL_14;
  }
  v29 = *(unsigned int *)(v28 + 60);
  Slow = *(_QWORD *)(v28 + 24);
  if (Slow >= *(_QWORD *)(v28 + 32))
  {
    Slow = *(_QWORD *)(v28 + 40);
    if ((Slow & 1) != 0)
    {
      v77 = *(_QWORD *)(v11 + 15040);
      v78 = *(unsigned int *)(v28 + 60);
      JSC::sanitizeStackForVM((JSC *)v11, v21, v22, v23, v24, v25, v26, v27);
      Slow = JSC::LocalAllocator::allocateSlowCase(v77, v11 + 192, v78, 0, 0, v79, v80, v81);
      goto LABEL_14;
    }
    v60 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v28 + 48);
    *(_QWORD *)(v28 + 32) = Slow + HIDWORD(v60);
    *(_QWORD *)(v28 + 40) = Slow + (int)v60;
  }
  *(_QWORD *)(v28 + 24) = Slow + v29;
LABEL_14:
  *(_DWORD *)Slow = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v31;
  *(_QWORD *)(Slow + 8) = 0;
  *(_QWORD *)(Slow + 16) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C59B34);
  }
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  *(_QWORD *)(Slow + 16) = v19;
  if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(Slow + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v11 + 192, Slow);
    v19 = *(_QWORD *)(Slow + 16);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C59B5CLL);
  }
  {
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v32 = off_1E35B4CD0;
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C59C64);
    }
  }
  if ((Slow & 8) != 0)
    v33 = (Slow - 112) | 1;
  else
    v33 = Slow & 0xFFFFFFFFFFFFC000;
  if ((v33 & 1) != 0)
    v34 = (_QWORD *)(v33 + 47);
  else
    v34 = (_QWORD *)(*(_QWORD *)v33 + 32);
  v35 = (unint64_t *)v34[2];
  if (!v35)
  {
    while (1)
    {
      v59 = (_QWORD *)v34[3];
      if (!v59)
        break;
      v34[3] = v59[2];
      v35 = (unint64_t *)v59[4];
      v59[3] = 257;
      v59[4] = 0;
      if (v35)
        goto LABEL_28;
    }
    v61 = v34[6];
    if (!v34[1])
    {
      v62 = *(_QWORD **)(v61 + 488);
      *v34 = v61 + 480;
      v34[1] = v62;
      *v62 = v34;
      *(_QWORD *)(v61 + 488) = v34;
    }
    *(_QWORD *)(v61 + 1072) += 1024;
    v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
    JSC::WeakBlock::WeakBlock((uint64_t)v63, v33);
    JSC::Heap::didAllocate((JSC::Heap *)(v34[6] + 192), 0x400uLL, v64, v65, v66, v67, v68, v69);
    v70 = v34 + 4;
    v71 = v34[5];
    if (v71)
      v70 = (_QWORD *)(v71 + 16);
    *v70 = v63;
    v34[5] = v63;
    v63[1] = v71;
    v63[2] = 0;
    v35 = (unint64_t *)v63[4];
    v63[3] = 257;
    v63[4] = 0;
  }
LABEL_28:
  v34[2] = *v35;
  *v35 = Slow;
  v35[1] = (unint64_t)v32;
  v35[2] = 0;
  v36 = *(_QWORD *)(v19 + 24);
  *(_QWORD *)(v19 + 24) = v35;
  if (v36)
    *(_QWORD *)(v36 + 8) = 3;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C59BA0);
  }
LABEL_31:
  JSC::JSLockHolder::~JSLockHolder(&v83, v21, v22, v23, v24, v25, v26, v27);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C59AA8);
  }
  return Slow;
}

uint64_t JSC::functionGetElement(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v22;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_15;
  }
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v22, this[7], (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (*((_DWORD *)a2 + 8) == 1
    || (v17 = *((_QWORD *)a2 + 6), (v17 & 0xFFFE000000000002) != 0)
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C))
    || (v18 = *(_QWORD *)(v17 + 24)) == 0
    || (*(_BYTE *)(v18 + 8) & 3) != 0)
  {
    v19 = 10;
  }
  else
  {
    v20 = *(_QWORD *)v18;
    if (v20)
      v19 = v20;
    else
      v19 = 10;
  }
  JSC::JSLockHolder::~JSLockHolder(&v22, v10, v11, v12, v13, v14, v15, v16);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_15:
    JUMPOUT(0x198C59E00);
  }
  return v19;
}

unint64_t JSC::functionCreateSimpleObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C59FBCLL);
  }
  v10 = *((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v41, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C59FDCLL);
  }
  v42 = 23;
  SlowCase = *(_QWORD *)(v10 + 40136);
  if (SlowCase < *(_QWORD *)(v10 + 40144))
    goto LABEL_4;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v31);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v31;
LABEL_4:
    *(_QWORD *)(v10 + 40136) = SlowCase + 128;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v33, v34, v35);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5A028);
  }
  v26 = *(_QWORD *)(v10 + 15040);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow < *(_QWORD *)(v26 + 32))
    {
LABEL_10:
      *(_QWORD *)(v26 + 24) = Slow + v27;
      goto LABEL_11;
    }
    Slow = *(_QWORD *)(v26 + 40);
    if ((Slow & 1) == 0)
    {
      v32 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v32);
      *(_QWORD *)(v26 + 40) = Slow + (int)v32;
      goto LABEL_10;
    }
    v36 = *(_QWORD *)(v10 + 15040);
    v37 = *(unsigned int *)(v26 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
    Slow = JSC::LocalAllocator::allocateSlowCase(v36, v10 + 192, v37, 0, 0, v38, v39, v40);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x20uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C59F9CLL);
    }
  }
LABEL_11:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  *(_QWORD *)(Slow + 16) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5A048);
  }
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C5A074);
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v41, v19, v20, v21, v22, v23, v24, v25);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5A094);
  }
  return Slow;
}

uint64_t JSC::functionGetHiddenValue(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  JSC::VM *v27;
  unsigned int *v28;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_20;
  }
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v28, v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v27 = v11;
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_17;
  v19 = *((_QWORD *)a2 + 6);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_17;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
  }
  if (!v21)
  {
LABEL_17:
    JSC::throwTypeError((unint64_t)this, &v27, (uint64_t)"Invalid use of getHiddenValue test function", 44);
    v25 = 0;
  }
  else
  {
    v25 = *(_QWORD *)(v19 + 16);
  }
  JSC::JSLockHolder::~JSLockHolder(&v28, v12, v13, v14, v15, v16, v17, v18);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_20:
    JUMPOUT(0x198C5A238);
  }
  return v25;
}

uint64_t JSC::functionSetHiddenValue(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  JSC::VM *v28;
  unsigned int *v29;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5A398);
  }
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v29, v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v28 = v11;
  v18 = *((int *)a2 + 8);
  if (v18 == 1)
    goto LABEL_19;
  v19 = *((_QWORD *)a2 + 6);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_19;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
  }
  if (!v21)
  {
LABEL_19:
    JSC::throwTypeError((unint64_t)this, &v28, (uint64_t)"Invalid use of setHiddenValue test function", 44);
    v26 = 0;
  }
  else if ((unint64_t)(v18 - 1) <= 1)
  {
    v26 = 10;
    *(_QWORD *)(v19 + 16) = 10;
  }
  else
  {
    v25 = *((_QWORD *)a2 + 7);
    *(_QWORD *)(v19 + 16) = v25;
    v26 = 10;
    if (v25 && (v25 & 0xFFFE000000000002) == 0)
    {
      if (*((_DWORD *)v11 + 190) >= *(unsigned __int8 *)(v19 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, v19);
      v26 = 10;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v29, (void *)v19, v12, v13, v14, v15, v16, v17);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5A3B8);
  }
  return v26;
}

unint64_t JSC::functionShadowChickenFunctionsOnStack(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  JSC::ShadowChicken *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  _QWORD v44[6];
  unint64_t v45;
  unsigned int *v46;
  JSC::Wasm::NameSection *v47;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5A5ACLL);
  }
  v11 = *((_QWORD *)this + 7);
  v12 = *(_DWORD *)(v11 + 88);
  *(_DWORD *)(v11 + 88) = v12 + 1;
  if (!v12)
  {
    v13 = *(_QWORD *)(v11 + 16);
    if (v13)
    {
      if (*(_QWORD *)(v11 + 24) == v13)
      {
        *(_QWORD *)(v11 + 16) = 0;
        v39 = (unsigned int *)(v11 + 80);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 & 0xFFFFFFEF, v39));
        *(_BYTE *)(v11 + 86) = 1;
      }
    }
  }
  v14 = *(JSC::ShadowChicken **)(v11 + 93384);
  if ((v14 & 1) != 0 || !v14)
  {
    v21 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v11 + 80))
    {
      v37 = *(_DWORD *)(v11 + 80);
      if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v15, v16, v17, v18, v19, v20);
      if (*(_QWORD *)(v11 + 16))
        goto LABEL_36;
    }
    JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v44, a2, (JSC::VM *)v11, 0, v17, v18, v19, v20);
    while (v44[2])
    {
      if (!(_BYTE)qword_1ECF4C6A7)
      {
        __break(0xC471u);
        JUMPOUT(0x198C5A54CLL);
      }
      v30 = v45;
      if ((v45 & 0xFFFE000000000007) != 3 && v44[0] == 0)
      {
        JSC::JSArray::push(v21, (JSC::VM **)this, v45, v24, v25, v26, v27, v28, v29);
        if (*(_QWORD *)(v11 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x198C5A58CLL);
        }
        if (!(_BYTE)qword_1ECF4C6A7)
        {
          __break(0xC471u);
          JUMPOUT(0x198C5A56CLL);
        }
      }
      JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v44, (uint64_t)v22, v30, v24, v25, v26, v27, v28);
    }
    v32 = v46;
    v46 = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        v47 = (JSC::Wasm::NameSection *)v32;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v47, v22, v23, v24, v25, v26, v27, v28);
      }
    }
    if (*(_DWORD *)(v11 + 80))
    {
      v38 = *(_DWORD *)(v11 + 80);
      if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v23, v24, v25, v26, v27, v28);
      if (*(_QWORD *)(v11 + 16))
LABEL_36:
        v21 = 0;
    }
  }
  else
  {
    v21 = JSC::ShadowChicken::functionsOnStack(v14, this, a2, a9, a4, a5, a6, a7, a8);
  }
  v35 = *(_DWORD *)(v11 + 88) - 1;
  *(_DWORD *)(v11 + 88) = v35;
  if (!v35 && *(_BYTE *)(v11 + 93441))
  {
    v41 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 16) = v41;
    *(_QWORD *)(v11 + 32) = v41;
    if (v41)
    {
      v42 = (unsigned int *)(v11 + 80);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 | 0x10, v42));
    }
    if (*(_BYTE *)(v11 + 93443))
      *(_BYTE *)(v11 + 93442) = 1;
    *(_BYTE *)(v11 + 86) = 0;
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5A5E8);
  }
  return v21;
}

uint64_t JSC::functionSetGlobalConstRedeclarationShouldNotThrow(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    *(_BYTE *)(*((_QWORD *)this + 7) + 93122) = 0;
    return 10;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::functionFindTypeForExpression(JSC *this, unint64_t a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  JSC::TypeProfilerLog *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  double v21;
  float v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int **v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  _WORD *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  int *v46;
  _WORD *v47;
  const void *v48;
  size_t v49;
  int *v50;
  StringView v51;
  int v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91[3];

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5ABC4);
  }
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  if (!*((_QWORD *)v4 + 11646))
  {
    __break(0xC471u);
    JUMPOUT(0x198C5ABE4);
  }
  v6 = (JSC::TypeProfilerLog *)*((_QWORD *)v4 + 11647);
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x2E00000002;
  *(_QWORD *)(v7 + 8) = "jsc Testing API: functionFindTypeForExpression";
  *(_DWORD *)(v7 + 16) = 4;
  v91[0] = (WTF::StringImpl *)v7;
  JSC::TypeProfilerLog::processLogEntries(v6, v4, (const WTF::String *)v91, v8, v9, v10, v11, v12);
  v23 = v91[0];
  v91[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  if (*(_DWORD *)(a2 + 32) == 1)
    goto LABEL_84;
  v24 = *(_QWORD *)(a2 + 48);
  if ((v24 & 0xFFFE000000000002) != 0)
    goto LABEL_84;
  v25 = *(unsigned __int8 *)(v24 + 5);
  if (v25 < 0x17)
    goto LABEL_84;
  if ((v25 & 0xFE) != 0x1A)
  {
    if ((*(_BYTE *)(v24 + 6) & 4) == 0)
      goto LABEL_84;
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD))(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v24 & 0xFFFFFFFE)
                                                                                     + 0x4C)
                                                                   + 0x38))(v91, *(_QWORD *)(a2 + 48));
    if (!LOBYTE(v91[0]))
      goto LABEL_84;
    v25 = *(unsigned __int8 *)(v24 + 5);
  }
  if (v25 <= 0x16)
    v34 = 0;
  else
    v34 = v24;
  if (*(_BYTE *)(v34 + 5) != 26)
    v34 = 0;
  v35 = *(_QWORD *)(v34 + 24);
  if ((v35 & 1) != 0)
    v35 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if ((unint64_t)(*(int *)(a2 + 32) - 3) > 0xFFFFFFFFFFFFFFFDLL
    || (a2 = *(_QWORD *)(a2 + 56), (a2 & 0xFFFE000000000002) != 0)
    || *(_BYTE *)(a2 + 5) != 2)
  {
    v14 = "JSC::EncodedJSValue JSC::functionFindTypeForExpression(JSGlobalObject *, CallFrame *)";
    v15 = 477;
    __break(0xC471u);
    goto LABEL_36;
  }
  v36 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    goto LABEL_37;
  while (1)
  {
    v37 = *(_QWORD *)(v35 + 40);
    if (!v37)
      goto LABEL_51;
    v38 = *(unsigned int *)(v35 + 48);
    v39 = *(_DWORD *)(v35 + 52);
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
    if (v41 <= v38)
      goto LABEL_50;
    v42 = (_WORD *)v40;
    v43 = v39 - v38;
    if ((int)v41 - (int)v38 <= (v39 - v38))
    {
      v43 = v41 - v38;
      if (!(_DWORD)v38)
        break;
    }
    v44 = v43;
    v45 = v41 - v38;
    if ((v41 & 0xFF00000000) != 0)
    {
      if (v45 >= v44)
      {
        v42 = (_WORD *)(v40 + v38);
        v44 |= 0x100000000uLL;
        goto LABEL_39;
      }
    }
    else if (v45 >= v44)
    {
      v42 = (_WORD *)(v40 + 2 * v38);
      goto LABEL_39;
    }
LABEL_36:
    __break(1u);
LABEL_37:
    v36 = JSC::JSRopeString::resolveRope(a2, this, (uint64_t)v14, v15, v20, v16, v17, v18, v19);
  }
  v44 = v41;
LABEL_39:
  if ((v44 & 0xFF00000000) == 0)
  {
    if (!v42)
      goto LABEL_51;
    if (!(_DWORD)v44)
      goto LABEL_50;
    if (v44 < 0x7FFFFFF0uLL)
    {
      v46 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v44 + 20));
      v47 = v46 + 5;
      *v46 = 2;
      v46[1] = v44;
      *((_QWORD *)v46 + 1) = v46 + 5;
      v46[4] = 0;
      if (v44 == 1)
      {
        *v47 = *v42;
        goto LABEL_55;
      }
      v48 = v42;
      v49 = 2 * v44;
      goto LABEL_54;
    }
LABEL_84:
    __break(0xC471u);
    JUMPOUT(0x198C5A834);
  }
  if (!v42)
  {
LABEL_51:
    v46 = 0;
    goto LABEL_55;
  }
  if (!(_DWORD)v44)
  {
LABEL_50:
    v46 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_55;
  }
  if ((unint64_t)v44 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5AC2CLL);
  }
  v46 = (int *)WTF::fastCompactMalloc((WTF *)(v44 + 20));
  v47 = v46 + 5;
  *v46 = 2;
  v46[1] = v44;
  *((_QWORD *)v46 + 1) = v46 + 5;
  v46[4] = 4;
  if (v44 == 1)
  {
    *(_BYTE *)v47 = *(_BYTE *)v42;
    goto LABEL_55;
  }
  v48 = v42;
  v49 = v44;
LABEL_54:
  memcpy(v47, v48, v49);
LABEL_55:
  v50 = *v36;
  if (*v36)
  {
    v51.m_characters = (void *)*((_QWORD *)v50 + 1);
    v51.m_length = v50[1];
    *(_DWORD *)&v51.m_is8Bit = (v50[4] >> 2) & 1;
    if (v46)
    {
LABEL_57:
      v52 = WTF::StringImpl::find((WTF::StringImpl *)v46, v51, *(double *)v20.i64, v21, v22);
      goto LABEL_60;
    }
  }
  else
  {
    v51.m_characters = 0;
    *(_QWORD *)&v51.m_length = 0x100000000;
    if (v46)
      goto LABEL_57;
  }
  v52 = -1;
LABEL_60:
  v53 = *(_DWORD *)(v35 + 48);
  v54 = (uint64_t *)*((_QWORD *)v4 + 11646);
  v55 = *(_QWORD *)(v35 + 40);
  if (v55)
  {
    v56 = *(_DWORD *)(v55 + 112);
    if (!v56)
    {
      do
        v57 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
      while (__stlxr(v57 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
      v56 = v57 + 1;
      *(_DWORD *)(v55 + 112) = v57 + 1;
      if (v57 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x198C5AC24);
      }
    }
  }
  else
  {
    v56 = 1;
  }
  JSC::TypeProfiler::typeInformationForExpressionAtOffset(v54, 1, v53 + v52, v56, (uint64_t)v4, v91);
  if (v91[0])
  {
    v63 = *((_QWORD *)v91[0] + 1);
    v64 = *((unsigned int *)v91[0] + 1) | ((unint64_t)((*((_DWORD *)v91[0] + 4) >> 2) & 1) << 32);
  }
  else
  {
    v63 = 0;
    v64 = 0x100000000;
  }
  v72 = JSC::JSONParse((uint64_t)this, v63, v64, v58, v59, v60, v61, v62);
  v73 = v91[0];
  v91[0] = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
      if (!v46)
        goto LABEL_72;
      goto LABEL_70;
    }
    *(_DWORD *)v73 -= 2;
  }
  if (!v46)
    goto LABEL_72;
LABEL_70:
  if (*v46 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v46, v65, v66, v67, v68, v69, v70, v71);
    WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
  }
  else
  {
    *v46 -= 2;
  }
LABEL_72:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5AC04);
  }
  return v72;
}

uint64_t JSC::functionReturnTypeFor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  JSC::TypeProfilerLog *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64[3];

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5AE98);
  }
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  if (!*((_QWORD *)v4 + 11646))
  {
    __break(0xC471u);
    JUMPOUT(0x198C5AEB8);
  }
  v6 = (JSC::TypeProfilerLog *)*((_QWORD *)v4 + 11647);
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x2600000002;
  *(_QWORD *)(v7 + 8) = "jsc Testing API: functionReturnTypeFor";
  *(_DWORD *)(v7 + 16) = 4;
  v64[0] = (WTF::StringImpl *)v7;
  JSC::TypeProfilerLog::processLogEntries(v6, v4, (const WTF::String *)v64, v8, v9, v10, v11, v12);
  v20 = v64[0];
  v64[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_41;
  v21 = *((_QWORD *)a2 + 6);
  if ((v21 & 0xFFFE000000000002) != 0)
    goto LABEL_41;
  v22 = *(unsigned __int8 *)(v21 + 5);
  if (v22 < 0x17)
    goto LABEL_41;
  if ((v22 & 0xFE) != 0x1A)
  {
    if ((*(_BYTE *)(v21 + 6) & 4) == 0)
      goto LABEL_41;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v21 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(v64, v21);
    if (!LOBYTE(v64[0]))
      goto LABEL_41;
    if (*(unsigned __int8 *)(v21 + 5) <= 0x16u)
      v21 = 0;
  }
  if (*(_BYTE *)(v21 + 5) == 26)
    v31 = v21;
  else
    v31 = 0;
  v32 = *(_QWORD *)(v31 + 24);
  if ((v32 & 1) != 0)
    v32 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 48);
  v33 = *(_QWORD *)(v32 + 72);
  if (v33)
    v34 = *(_DWORD *)(v33 + 48);
  else
    v34 = *(_DWORD *)(*(_QWORD *)(v32 + 88) + 16) & 0x7FFFFFFF;
  v35 = (uint64_t *)*((_QWORD *)v4 + 11646);
  v36 = *(_QWORD *)(v32 + 40);
  if (!v36)
  {
    v37 = 1;
    goto LABEL_27;
  }
  v37 = *(_DWORD *)(v36 + 112);
  if (!v37)
  {
    do
      v38 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
    while (__stlxr(v38 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
    v37 = v38 + 1;
    *(_DWORD *)(v36 + 112) = v38 + 1;
    if (v38 == -1)
    {
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x198C5AD34);
    }
  }
LABEL_27:
  JSC::TypeProfiler::typeInformationForExpressionAtOffset(v35, 2, v34, v37, (uint64_t)v4, v64);
  if (v64[0])
  {
    v44 = *((_QWORD *)v64[0] + 1);
    v45 = *((unsigned int *)v64[0] + 1) | ((unint64_t)((*((_DWORD *)v64[0] + 4) >> 2) & 1) << 32);
  }
  else
  {
    v44 = 0;
    v45 = 0x100000000;
  }
  v53 = JSC::JSONParse((uint64_t)this, v44, v45, v39, v40, v41, v42, v43);
  v54 = v64[0];
  v64[0] = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5AEE0);
  }
  return v53;
}

uint64_t JSC::functionFlattenDictionaryObject(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSObject *v8;

  if (!(_BYTE)qword_1ECF4C6A7
    || *((_DWORD *)a2 + 8) != 1
    && (v8 = (JSC::JSObject *)*((_QWORD *)a2 + 6), ((unint64_t)v8 & 0xFFFE000000000002) == 0)
    && *((unsigned __int8 *)v8 + 5) >= 0x17u
    && (*(_BYTE *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x10) & 3) != 0
    && (JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)v8 & 0xFFFFFFFE), this[7], v8, a4, a5, a6, a7, a8),
        !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C5AFA4);
  }
  return 10;
}

uint64_t JSC::functionDumpBasicBlockExecutionRanges(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::ControlFlowProfiler *v3;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_7;
  v3 = *(JSC::ControlFlowProfiler **)(*((_QWORD *)this + 7) + 93280);
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5B050);
  }
  JSC::ControlFlowProfiler::dumpData(v3);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x198C5B030);
  }
  return 10;
}

uint64_t JSC::functionHasBasicBlockExecuted(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  JSC::VM **v11;
  JSC::VM *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  _WORD *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  _WORD *v28;
  const void *v29;
  size_t v30;
  int *v31;
  StringView v32;
  double v33;
  double v34;
  float v35;
  int *v36;
  StringView v37;
  int v38;
  int v39;
  JSC::ControlFlowProfiler *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 hasBasicBlockAtTextOffsetBeenExecuted;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[3];

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5B488);
  }
  v11 = this;
  v12 = this[7];
  if (!*((_QWORD *)v12 + 11660))
  {
    __break(0xC471u);
    JUMPOUT(0x198C5B4A8);
  }
  v13 = (unint64_t)a2;
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_76;
  v14 = *((_QWORD *)a2 + 6);
  if ((v14 & 0xFFFE000000000002) != 0)
    goto LABEL_76;
  v15 = *(unsigned __int8 *)(v14 + 5);
  if (v15 < 0x17)
    goto LABEL_76;
  if ((v15 & 0xFE) != 0x1A)
  {
    if ((*(_BYTE *)(v14 + 6) & 4) == 0)
      goto LABEL_76;
    (*(void (**)(uint64_t *__return_ptr, _QWORD))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(v61, *((_QWORD *)a2 + 6));
    if (!LOBYTE(v61[0]))
      goto LABEL_76;
    v15 = *(unsigned __int8 *)(v14 + 5);
  }
  if (v15 <= 0x16)
    v16 = 0;
  else
    v16 = v14;
  if (*(_BYTE *)(v16 + 5) != 26)
    v16 = 0;
  v17 = *(_QWORD *)(v16 + 24);
  if ((v17 & 1) != 0)
    v17 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if ((unint64_t)(*(int *)(v13 + 32) - 3) > 0xFFFFFFFFFFFFFFFDLL
    || (v13 = *(_QWORD *)(v13 + 56), (v13 & 0xFFFE000000000002) != 0)
    || *(_BYTE *)(v13 + 5) != 2)
  {
    a3 = (JSC::CallFrame *)"JSC::EncodedJSValue JSC::functionHasBasicBlockExecuted(JSGlobalObject *, CallFrame *)";
    a4 = 483;
    __break(0xC471u);
    goto LABEL_32;
  }
  v18 = (int **)(v13 + 8);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    goto LABEL_33;
  while (1)
  {
    v19 = *(_QWORD *)(v17 + 40);
    if (!v19)
      goto LABEL_47;
    v11 = (JSC::VM **)*(unsigned int *)(v17 + 48);
    v20 = *(_DWORD *)(v17 + 52);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    if (v22 <= v11)
      goto LABEL_46;
    v23 = (_WORD *)v21;
    v24 = v20 - (_DWORD)v11;
    if ((int)v22 - (int)v11 <= (v20 - (_DWORD)v11))
    {
      v24 = v22 - (_DWORD)v11;
      if (!(_DWORD)v11)
        break;
    }
    v25 = v24;
    v26 = v22 - (_QWORD)v11;
    if ((v22 & 0xFF00000000) != 0)
    {
      if (v26 >= v25)
      {
        v23 = (_WORD *)((char *)v11 + v21);
        v25 |= 0x100000000uLL;
        goto LABEL_35;
      }
    }
    else if (v26 >= v25)
    {
      v23 = (_WORD *)(v21 + 2 * (_QWORD)v11);
      goto LABEL_35;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    v18 = JSC::JSRopeString::resolveRope(v13, (JSC::JSGlobalObject *)v11, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  }
  v25 = v22;
LABEL_35:
  if ((v25 & 0xFF00000000) == 0)
  {
    if (!v23)
      goto LABEL_47;
    if (!(_DWORD)v25)
      goto LABEL_46;
    if (v25 < 0x7FFFFFF0uLL)
    {
      v27 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v25 + 20));
      v28 = v27 + 5;
      *v27 = 2;
      v27[1] = v25;
      *((_QWORD *)v27 + 1) = v27 + 5;
      v27[4] = 0;
      if (v25 == 1)
      {
        *v28 = *v23;
        goto LABEL_51;
      }
      v29 = v23;
      v30 = 2 * v25;
      goto LABEL_50;
    }
LABEL_76:
    __break(0xC471u);
    JUMPOUT(0x198C5B11CLL);
  }
  if (!v23)
  {
LABEL_47:
    v27 = 0;
    goto LABEL_51;
  }
  if (!(_DWORD)v25)
  {
LABEL_46:
    v27 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_51;
  }
  if ((unint64_t)v25 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5B4F0);
  }
  v27 = (int *)WTF::fastCompactMalloc((WTF *)(v25 + 20));
  v28 = v27 + 5;
  *v27 = 2;
  v27[1] = v25;
  *((_QWORD *)v27 + 1) = v27 + 5;
  v27[4] = 4;
  if (v25 == 1)
  {
    *(_BYTE *)v28 = *(_BYTE *)v23;
    goto LABEL_51;
  }
  v29 = v23;
  v30 = v25;
LABEL_50:
  memcpy(v28, v29, v30);
LABEL_51:
  v31 = *v18;
  if (*v18)
  {
    v32.m_characters = (void *)*((_QWORD *)v31 + 1);
    v32.m_length = v31[1];
    *(_DWORD *)&v32.m_is8Bit = (v31[4] >> 2) & 1;
    if (!v27)
    {
LABEL_69:
      __break(0xC471u);
      JUMPOUT(0x198C5B45CLL);
    }
  }
  else
  {
    v32.m_characters = 0;
    *(_QWORD *)&v32.m_length = 0x100000000;
    if (!v27)
      goto LABEL_69;
  }
  if (WTF::StringImpl::find((WTF::StringImpl *)v27, v32, *(double *)a9.i64, a10, a11) == -1)
    goto LABEL_69;
  v36 = *v18;
  if (*v18)
  {
    v37.m_characters = (void *)*((_QWORD *)v36 + 1);
    v37.m_length = v36[1];
    *(_DWORD *)&v37.m_is8Bit = (v36[4] >> 2) & 1;
  }
  else
  {
    v37.m_characters = 0;
    *(_QWORD *)&v37.m_length = 0x100000000;
  }
  v38 = WTF::StringImpl::find((WTF::StringImpl *)v27, v37, v33, v34, v35);
  v39 = *(_DWORD *)(v17 + 48);
  v40 = (JSC::ControlFlowProfiler *)*((_QWORD *)v12 + 11660);
  v41 = *(_QWORD *)(v17 + 40);
  if (v41)
  {
    v42 = *(_DWORD *)(v41 + 112);
    if (!v42)
    {
      do
        v43 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
      while (__stlxr(v43 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
      v42 = v43 + 1;
      *(_DWORD *)(v41 + 112) = v43 + 1;
      if (v43 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x198C5B4E8);
      }
    }
  }
  else
  {
    v42 = 1;
  }
  hasBasicBlockAtTextOffsetBeenExecuted = JSC::ControlFlowProfiler::hasBasicBlockAtTextOffsetBeenExecuted(v40, v39 + v38, v42, v12);
  if (*v27 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v27, v44, v45, v46, v47, v48, v49, v50);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *v27 -= 2;
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5B4C8);
  }
  if (hasBasicBlockAtTextOffsetBeenExecuted)
    return 7;
  else
    return 6;
}

unint64_t JSC::functionBasicBlockExecutionCount(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  JSC::VM **v11;
  JSC::VM *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  _WORD *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  _WORD *v28;
  const void *v29;
  size_t v30;
  int *v31;
  StringView v32;
  double v33;
  double v34;
  float v35;
  int *v36;
  StringView v37;
  int v38;
  int v39;
  JSC::ControlFlowProfiler *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  WTF *v53;
  _QWORD *v54;
  int v55;
  int v56;
  int v57;
  _QWORD *v58;
  int v59;
  int v60;
  BOOL v61;
  unint64_t v62;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  WTF *v73;
  int v74;
  unsigned int v75;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5B9C4);
  }
  v11 = this;
  v12 = this[7];
  if (!*((_QWORD *)v12 + 11660))
  {
    __break(0xC471u);
    JUMPOUT(0x198C5B9E4);
  }
  v13 = (unint64_t)a2;
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_96;
  v14 = *((_QWORD *)a2 + 6);
  if ((v14 & 0xFFFE000000000002) != 0)
    goto LABEL_96;
  v15 = *(unsigned __int8 *)(v14 + 5);
  if (v15 < 0x17)
    goto LABEL_96;
  if ((v15 & 0xFE) != 0x1A)
  {
    if ((*(_BYTE *)(v14 + 6) & 4) == 0)
      goto LABEL_96;
    (*(void (**)(WTF **__return_ptr, _QWORD))(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                       + 0x38))(&v73, *((_QWORD *)a2 + 6));
    if (!(_BYTE)v73)
      goto LABEL_96;
    v15 = *(unsigned __int8 *)(v14 + 5);
  }
  if (v15 <= 0x16)
    v16 = 0;
  else
    v16 = v14;
  if (*(_BYTE *)(v16 + 5) != 26)
    v16 = 0;
  v17 = *(_QWORD *)(v16 + 24);
  if ((v17 & 1) != 0)
    v17 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if ((unint64_t)(*(int *)(v13 + 32) - 3) > 0xFFFFFFFFFFFFFFFDLL
    || (v13 = *(_QWORD *)(v13 + 56), (v13 & 0xFFFE000000000002) != 0)
    || *(_BYTE *)(v13 + 5) != 2)
  {
    a3 = (JSC::CallFrame *)"JSC::EncodedJSValue JSC::functionBasicBlockExecutionCount(JSGlobalObject *, CallFrame *)";
    a4 = 487;
    __break(0xC471u);
    goto LABEL_32;
  }
  v18 = (int **)(v13 + 8);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    goto LABEL_33;
  while (1)
  {
    v19 = *(_QWORD *)(v17 + 40);
    if (!v19)
      goto LABEL_47;
    v11 = (JSC::VM **)*(unsigned int *)(v17 + 48);
    v20 = *(_DWORD *)(v17 + 52);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    if (v22 <= v11)
      goto LABEL_46;
    v23 = (_WORD *)v21;
    v24 = v20 - (_DWORD)v11;
    if ((int)v22 - (int)v11 <= (v20 - (_DWORD)v11))
    {
      v24 = v22 - (_DWORD)v11;
      if (!(_DWORD)v11)
        break;
    }
    v25 = v24;
    v26 = v22 - (_QWORD)v11;
    if ((v22 & 0xFF00000000) != 0)
    {
      if (v26 >= v25)
      {
        v23 = (_WORD *)((char *)v11 + v21);
        v25 |= 0x100000000uLL;
        goto LABEL_35;
      }
    }
    else if (v26 >= v25)
    {
      v23 = (_WORD *)(v21 + 2 * (_QWORD)v11);
      goto LABEL_35;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    v18 = JSC::JSRopeString::resolveRope(v13, (JSC::JSGlobalObject *)v11, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  }
  v25 = v22;
LABEL_35:
  if ((v25 & 0xFF00000000) == 0)
  {
    if (!v23)
      goto LABEL_47;
    if (!(_DWORD)v25)
      goto LABEL_46;
    if (v25 < 0x7FFFFFF0uLL)
    {
      v27 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v25 + 20));
      v28 = v27 + 5;
      *v27 = 2;
      v27[1] = v25;
      *((_QWORD *)v27 + 1) = v27 + 5;
      v27[4] = 0;
      if (v25 == 1)
      {
        *v28 = *v23;
        goto LABEL_51;
      }
      v29 = v23;
      v30 = 2 * v25;
      goto LABEL_50;
    }
LABEL_96:
    __break(0xC471u);
    JUMPOUT(0x198C5B5A4);
  }
  if (!v23)
  {
LABEL_47:
    v27 = 0;
    goto LABEL_51;
  }
  if (!(_DWORD)v25)
  {
LABEL_46:
    v27 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_51;
  }
  if ((unint64_t)v25 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5BA68);
  }
  v27 = (int *)WTF::fastCompactMalloc((WTF *)(v25 + 20));
  v28 = v27 + 5;
  *v27 = 2;
  v27[1] = v25;
  *((_QWORD *)v27 + 1) = v27 + 5;
  v27[4] = 4;
  if (v25 == 1)
  {
    *(_BYTE *)v28 = *(_BYTE *)v23;
    goto LABEL_51;
  }
  v29 = v23;
  v30 = v25;
LABEL_50:
  memcpy(v28, v29, v30);
LABEL_51:
  v31 = *v18;
  if (*v18)
  {
    v32.m_characters = (void *)*((_QWORD *)v31 + 1);
    v32.m_length = v31[1];
    *(_DWORD *)&v32.m_is8Bit = (v31[4] >> 2) & 1;
    if (!v27)
    {
LABEL_84:
      __break(0xC471u);
      JUMPOUT(0x198C5B978);
    }
  }
  else
  {
    v32.m_characters = 0;
    *(_QWORD *)&v32.m_length = 0x100000000;
    if (!v27)
      goto LABEL_84;
  }
  if (WTF::StringImpl::find((WTF::StringImpl *)v27, v32, *(double *)a9.i64, a10, a11) == -1)
    goto LABEL_84;
  v36 = *v18;
  if (*v18)
  {
    v37.m_characters = (void *)*((_QWORD *)v36 + 1);
    v37.m_length = v36[1];
    *(_DWORD *)&v37.m_is8Bit = (v36[4] >> 2) & 1;
  }
  else
  {
    v37.m_characters = 0;
    *(_QWORD *)&v37.m_length = 0x100000000;
  }
  v38 = WTF::StringImpl::find((WTF::StringImpl *)v27, v37, v33, v34, v35);
  v39 = *(_DWORD *)(v17 + 48);
  v40 = (JSC::ControlFlowProfiler *)*((_QWORD *)v12 + 11660);
  v41 = *(_QWORD *)(v17 + 40);
  if (v41)
  {
    v42 = *(_DWORD *)(v41 + 112);
    if (!v42)
    {
      do
        v43 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
      while (__stlxr(v43 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
      v42 = v43 + 1;
      *(_DWORD *)(v41 + 112) = v43 + 1;
      if (v43 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x198C5BA38);
      }
    }
  }
  else
  {
    v42 = 1;
  }
  JSC::ControlFlowProfiler::getBasicBlocksForSourceID(v40, v12, v42, (uint64_t)&v73);
  if (!v75)
    goto LABEL_93;
  v51 = 0;
  v52 = v39 + v38;
  v53 = v73;
  v54 = (_QWORD *)((char *)v73 + 16);
  v55 = 0x7FFFFFFF;
  v56 = -1;
  v57 = -1;
  do
  {
    v59 = *((_DWORD *)v54 - 4);
    v60 = *((_DWORD *)v54 - 3);
    v58 = v54 - 2;
    v61 = v59 > v52 || v60 < v52;
    if (!v61 && v60 - v59 < v55)
    {
      if (v60 - v59 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198C5B9A4);
      }
      v51 = *v54;
      v56 = *((_DWORD *)v54 - 3);
      v57 = *((_DWORD *)v54 - 4);
      v55 = v60 - v59;
    }
    v54 += 3;
  }
  while (v58 + 3 != (_QWORD *)((char *)v73 + 24 * v75));
  if (v57 == -1 || v56 == -1)
  {
LABEL_93:
    __break(0xC471u);
    JUMPOUT(0x198C5BA58);
  }
  if (v73)
  {
    v73 = 0;
    v74 = 0;
    WTF::fastFree((unint64_t)v53, v44, v45, v46, v47, v48, v49, v50);
  }
  if (HIDWORD(v51))
  {
    v72 = (double)v51;
  }
  else
  {
    if ((v51 & 0x80000000) == 0)
    {
      v62 = v51 | 0xFFFE000000000000;
      goto LABEL_77;
    }
    v72 = (double)v51;
  }
  v62 = *(_QWORD *)&v72 + 0x2000000000000;
LABEL_77:
  if (*v27 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v27, (WTF::AtomStringImpl *)v44, v45, v46, v47, v48, v49, v50);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *v27 -= 2;
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5BA04);
  }
  return v62;
}

uint64_t JSC::functionEnableDebuggerModeWhenIdle(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5BB78);
  }
  if (!*((_QWORD *)this + 252))
  {
    v4 = *((_QWORD *)this + 7);
    v5 = WTF::fastMalloc((WTF *)0x18);
    v6 = v5;
    *(_QWORD *)v5 = off_1E35B4E00;
    *(_BYTE *)(v5 + 8) = 1;
    *(_QWORD *)(v5 + 16) = this;
    v9 = v5;
    if (!*(_QWORD *)(v4 + 90568))
    {
      WTF::Detail::CallableWrapper<JSC::changeDebuggerModeWhenIdle(JSC::JSGlobalObject *,WTF::OptionSet<JSC::CodeGenerationMode>)::$_0,void>::call(v5);
      v9 = 0;
LABEL_5:
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      goto LABEL_6;
    }
    v8 = *(unsigned int *)(v4 + 93476);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 93472))
    {
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v4 + 93464, (unint64_t)&v9);
      v6 = v9;
      *(_BYTE *)(v4 + 56) |= 0x20u;
      v9 = 0;
      if (v6)
        goto LABEL_5;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v4 + 93464) + 8 * v8) = v5;
      *(_DWORD *)(v4 + 93476) = v8 + 1;
      *(_BYTE *)(v4 + 56) |= 0x20u;
    }
LABEL_6:
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C5BB98);
    }
  }
  return 10;
}

uint64_t JSC::functionDisableDebuggerModeWhenIdle(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5BCDCLL);
  }
  if (*((_QWORD *)this + 252))
  {
    v4 = *((_QWORD *)this + 7);
    v5 = WTF::fastMalloc((WTF *)0x18);
    v6 = v5;
    *(_QWORD *)v5 = off_1E35B4E00;
    *(_BYTE *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = this;
    v9 = v5;
    if (!*(_QWORD *)(v4 + 90568))
    {
      WTF::Detail::CallableWrapper<JSC::changeDebuggerModeWhenIdle(JSC::JSGlobalObject *,WTF::OptionSet<JSC::CodeGenerationMode>)::$_0,void>::call(v5);
      v9 = 0;
LABEL_5:
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      goto LABEL_6;
    }
    v8 = *(unsigned int *)(v4 + 93476);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 93472))
    {
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v4 + 93464, (unint64_t)&v9);
      v6 = v9;
      *(_BYTE *)(v4 + 56) |= 0x20u;
      v9 = 0;
      if (v6)
        goto LABEL_5;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v4 + 93464) + 8 * v8) = v5;
      *(_DWORD *)(v4 + 93476) = v8 + 1;
      *(_BYTE *)(v4 + 56) |= 0x20u;
    }
LABEL_6:
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C5BCBCLL);
    }
  }
  return 10;
}

uint64_t JSC::functionDeleteAllCodeWhenIdle(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5BDF8);
  }
  v3 = *((_QWORD *)this + 7);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v5 = v4;
  *v4 = off_1E35B4E98;
  v4[1] = v3;
  v8 = v4;
  if (!*(_QWORD *)(v3 + 90568))
  {
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C5BE18);
    }
    JSC::VM::deleteAllCode(v3, 0);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x198C5BE38);
    }
    v8 = 0;
    goto LABEL_6;
  }
  v7 = *(unsigned int *)(v3 + 93476);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 93472))
  {
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v3 + 93464, (unint64_t)&v8);
    v5 = v8;
    *(_BYTE *)(v3 + 56) |= 0x20u;
    v8 = 0;
    if (v5)
LABEL_6:
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v3 + 93464) + 8 * v7) = v4;
    *(_DWORD *)(v3 + 93476) = v7 + 1;
    *(_BYTE *)(v3 + 56) |= 0x20u;
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5BE58);
  }
  return 10;
}

unint64_t JSC::functionGlobalObjectCount(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_8;
  v8 = JSC::Heap::globalObjectCount((JSC::Heap *)(*((_QWORD *)this + 7) + 192), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v9 = v8 | 0xFFFE000000000000;
  if ((v8 & 0x80000000) != 0)
    v9 = COERCE__INT64((double)v8) + 0x2000000000000;
  result = HIDWORD(v8) ? COERCE__INT64((double)v8) + 0x2000000000000 : v9;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198C5BF08);
  }
  return result;
}

uint64_t JSC::functionGlobalObjectForObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5BFC0);
  }
  if (*((_DWORD *)a2 + 8) == 1
    || (v3 = *((_QWORD *)a2 + 6), (v3 & 0xFFFE000000000002) != 0)
    || *(unsigned __int8 *)(v3 + 5) <= 0x16u
    || (v4 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28)) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5BFA0);
  }
  return *(_QWORD *)(v4 + 64);
}

uint64_t JSC::functionGetGetterSetter(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  JSC::JSString *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  JSC::JSString *v18;
  unsigned int v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  JSC::JSString *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  JSC::JSGlobalObject *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  JSC::JSGlobalObject *v46;
  char OwnStaticPropertySlot;
  uint64_t v48;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned __int16 *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  int v65;
  uint64_t v66;
  int v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  unsigned int *v72;
  int v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  WTF::StringImpl *v86;
  _DWORD *v87;
  WTF::StringImpl *v88;
  _QWORD *v89;
  uint64_t v90;
  WTF::StringImpl **v91;
  WTF::StringImpl **p_dst;
  WTF::StringImpl *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _WORD *v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned __int16 *v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  int v140;
  unsigned int v141;
  int v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  unsigned __int8 *v154;
  int v155;
  BOOL v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  size_t v163;
  char *v164;
  char *v165;
  int v166;
  uint64_t v167;
  unsigned __int8 *v168;
  WTF::StringImpl **v169;
  uint64_t v170;
  int v171;
  int v172;
  WTF::StringImpl **v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  char v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int *v206;
  uint64_t v207;
  uint64_t Index;
  int v209;
  char v210;
  int v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  unsigned __int16 *v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  char v224;
  int v225;
  uint64_t v226;
  int v227;
  char v228;
  unint64_t v229;
  unint64_t v230;
  int v231;
  uint64_t v232;
  unsigned __int8 *v233;
  unsigned int v234;
  int v235;
  char v236;
  unsigned __int8 *v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  JSC::JSString *v241;
  int v242;
  unint64_t v243;
  JSC::VMTraps *v244;
  JSC::VMTraps *v245;
  JSC::VMTraps *v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  JSC::JSString *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  char v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  uint64_t v258;
  JSC::JSString *v259;
  WTF::StringImpl *__dst;
  char v261;
  char __s[3];
  _BYTE v263[39];

  *(_QWORD *)&v263[23] = *MEMORY[0x1E0C80C00];
  v9 = g_config;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5C808);
  }
  v10 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) == 1
    || (v12 = *((_QWORD *)this + 7),
        v13 = (JSC::JSString *)*((_QWORD *)a2 + 6),
        v259 = v13,
        ((unint64_t)v13 & 0xFFFE000000000002) != 0)
    || ((v14 = *((unsigned __int8 *)v13 + 5), v10 >= 2) ? (v15 = v14 >= 0x17) : (v15 = 0),
        !v15 || (v16 = *((_QWORD *)a2 + 7), (v16 & 0xFFFE000000000002) != 0) || *(_BYTE *)(v16 + 5) != 2))
  {
    v48 = 10;
    goto LABEL_56;
  }
  v17 = *(_QWORD *)(v16 + 8);
  if ((v17 & 1) == 0)
  {
    if ((*(_BYTE *)(v17 + 16) & 0x10) == 0)
    {
      v84 = *(WTF::StringImpl **)(v12 + 64768);
      if (v84 != (WTF::StringImpl *)v17)
      {
        *(_DWORD *)v17 += 2;
        *(_QWORD *)(v12 + 64768) = v17;
        if (v84)
        {
          if (*(_DWORD *)v84 == 2)
          {
            WTF::StringImpl::~StringImpl(v84, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
          }
          else
          {
            *(_DWORD *)v84 -= 2;
          }
        }
        v85 = *(_QWORD *)(v16 + 8);
        if (v85)
        {
          if ((*(_BYTE *)(v85 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v85 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(v85, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&__dst);
            v85 = (unint64_t)__dst;
          }
        }
        v86 = *(WTF::StringImpl **)(v12 + 64776);
        *(_QWORD *)(v12 + 64776) = v85;
        if (v86)
        {
          if (*(_DWORD *)v86 == 2)
          {
            WTF::StringImpl::~StringImpl(v86, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
          }
          else
          {
            *(_DWORD *)v86 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v16 + 8) + 16) & 0x10) == 0)
      {
        v87 = *(_DWORD **)(v12 + 64776);
        *v87 += 2;
        __dmb(0xAu);
        v88 = *(WTF::StringImpl **)(v16 + 8);
        *(_QWORD *)(v16 + 8) = v87;
        __dst = v88;
        v89 = (_QWORD *)(v12 + 808);
        v90 = *(unsigned int *)(v12 + 820);
        if ((_DWORD)v90 == *(_DWORD *)(v12 + 816))
        {
          p_dst = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&__dst);
          v90 = *(unsigned int *)(v12 + 820);
          v91 = (WTF::StringImpl **)(*(_QWORD *)(v12 + 808) + 8 * v90);
          v88 = *p_dst;
        }
        else
        {
          v91 = (WTF::StringImpl **)(*v89 + 8 * v90);
          p_dst = &__dst;
        }
        *p_dst = 0;
        *v91 = v88;
        *(_DWORD *)(v12 + 820) = v90 + 1;
        v93 = __dst;
        __dst = 0;
        if (v93)
        {
          if (*(_DWORD *)v93 == 2)
          {
            WTF::StringImpl::~StringImpl(v93, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
          }
          else
          {
            *(_DWORD *)v93 -= 2;
          }
        }
      }
      v17 = *(_QWORD *)(v12 + 64776);
    }
    *(_DWORD *)v17 += 2;
    goto LABEL_14;
  }
  JSC::JSRopeString::resolveRopeToAtomString(*((JSC::JSRopeString **)a2 + 7), this);
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_141;
  v199 = *(_DWORD *)(v12 + 80);
  if ((v199 & 0x27) != 0 && (v199 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 16))
  {
    v17 = 0;
    v83 = __dst;
    __dst = 0;
    if (!v83)
      goto LABEL_14;
  }
  else
  {
LABEL_141:
    v17 = (unint64_t)__dst;
    if (!__dst)
      goto LABEL_14;
    *(_DWORD *)__dst += 2;
    __dst = 0;
    v83 = (WTF::StringImpl *)v17;
  }
  if (*(_DWORD *)v83 == 2)
  {
    WTF::StringImpl::~StringImpl(v83, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
  }
  else
  {
    *(_DWORD *)v83 -= 2;
  }
LABEL_14:
  if (*(_DWORD *)(v12 + 80))
  {
    v120 = *(_DWORD *)(v12 + 80);
    if ((v120 & 0x27) != 0 && (v120 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
      v48 = 0;
      if (!v17)
        goto LABEL_56;
      goto LABEL_137;
    }
  }
  a9.i64[0] = 0xFFFFFFFF00000000;
  v249 = 0xFFFFFFFF00000000;
  v251 = 0;
  v252 = 0;
  v250 = v259;
  v253 = 196608;
  v254 = 0;
  v257 = 0;
  v258 = 0;
  v255 = v12;
  ++*(_DWORD *)(v12 + 4);
  v256 = 1;
  v18 = v259;
  if (((unint64_t)v259 & 0xFFFE000000000002) != 0)
    goto LABEL_391;
  a2 = (JSC::JSGlobalObject *)*((_QWORD *)this + 7);
  v19 = *((unsigned __int8 *)v259 + 5);
  if (v19 > 0x16)
    goto LABEL_17;
  if (v19 != 2)
    goto LABEL_391;
  v204 = *((_QWORD *)this + 7);
  if (*(_QWORD *)(*((_QWORD *)a2 + 5244) + 1768) == v17)
  {
    v205 = *((_QWORD *)v259 + 1);
    if ((v205 & 1) != 0)
      v206 = (unsigned int *)((char *)v259 + 16);
    else
      v206 = (unsigned int *)(v205 + 4);
    v207 = *v206;
    if ((v207 & 0x80000000) != 0)
      Index = COERCE__INT64((double)v207) + 0x2000000000000;
    else
      Index = v207 | 0xFFFE000000000000;
    v209 = 14;
LABEL_383:
    v247 = Index;
    LODWORD(v249) = v209;
    v251 = 0;
    v210 = 1;
    BYTE1(v253) = 1;
    if (!*(_DWORD *)(v204 + 80))
      goto LABEL_126;
LABEL_470:
    v235 = *(_DWORD *)(v204 + 80);
    if ((v235 & 0x27) != 0 && (v235 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v204 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v204 + 16))
      v236 = 1;
    else
      v236 = v210;
    if ((v236 & 1) != 0)
      goto LABEL_126;
    goto LABEL_391;
  }
  if (v17)
  {
    v211 = *(_DWORD *)(v17 + 16);
    if ((v211 & 0x20) == 0)
    {
      v212 = *(_BYTE **)(v17 + 8);
      v213 = *(unsigned int *)(v17 + 4);
      if ((v211 & 4) != 0)
      {
        if ((_DWORD)v213)
        {
          a3 = *v212 - 48;
          if (a3 <= 9 && (v213 < 2 || *v212 != 48))
          {
            v237 = v212 + 1;
            v238 = v213 - 1;
            while (v238)
            {
              if (a3 <= 0x19999999)
              {
                v239 = *v237 - 48;
                if (v239 <= 9)
                {
                  v15 = __CFADD__(v239, 10 * a3);
                  a3 = v239 + 10 * (_DWORD)a3;
                  ++v237;
                  --v238;
                  if (!v15)
                    continue;
                }
              }
              goto LABEL_390;
            }
LABEL_492:
            if ((_DWORD)a3 != -1)
            {
              v240 = *((_QWORD *)v259 + 1);
              v241 = (v240 & 1) != 0 ? (JSC::JSString *)((char *)v259 + 16) : (JSC::JSString *)(v240 + 4);
              if (*(_DWORD *)v241 > a3)
              {
                Index = JSC::JSString::getIndex(v259, this, a3, a4, a5, a6, a7, a8, a9);
                if (!*(_DWORD *)(v204 + 80))
                  goto LABEL_498;
                v242 = *(_DWORD *)(v204 + 80);
                if ((v242 & 0x27) != 0 && (v242 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v204 + 64), 7u, a3, a4, a5, a6, a7, a8);
                if (!*(_QWORD *)(v204 + 16))
                {
LABEL_498:
                  v209 = 10;
                  goto LABEL_383;
                }
              }
            }
          }
        }
      }
      else if ((_DWORD)v213)
      {
        a3 = *(unsigned __int16 *)v212 - 48;
        if (a3 <= 9 && (*(_WORD *)v212 != 48 || v213 <= 1))
        {
          v215 = (unsigned __int16 *)(v212 + 2);
          v216 = v213 - 1;
          while (v216)
          {
            if (a3 <= 0x19999999)
            {
              v217 = *v215 - 48;
              if (v217 <= 9)
              {
                v15 = __CFADD__(v217, 10 * a3);
                a3 = v217 + 10 * (_DWORD)a3;
                ++v215;
                --v216;
                if (!v15)
                  continue;
              }
            }
            goto LABEL_390;
          }
          goto LABEL_492;
        }
      }
    }
  }
LABEL_390:
  if (*(_DWORD *)(v204 + 80))
  {
    v210 = 0;
    goto LABEL_470;
  }
LABEL_391:
  v214 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v259, (unint64_t)this);
  if (!v214)
    goto LABEL_126;
  v18 = (JSC::JSString *)v214;
  a2 = (JSC::JSGlobalObject *)*((_QWORD *)this + 7);
LABEL_17:
  v20 = (char *)v18 + 6;
  v21 = v17 >> 4;
  v22 = (uint64_t)v18;
  if ((*((_BYTE *)v18 + 6) & 8) != 0)
  {
LABEL_167:
    if (!v17)
      goto LABEL_205;
    v114 = *(_DWORD *)(v17 + 16);
    if ((v114 & 0x20) != 0)
      goto LABEL_205;
    v115 = *(_WORD **)(v17 + 8);
    v116 = *(unsigned int *)(v17 + 4);
    if ((v114 & 4) == 0)
    {
      if ((_DWORD)v116)
      {
        v117 = (unsigned __int16)*v115 - 48;
        if (v117 <= 9 && (*v115 != 48 || v116 <= 1))
        {
          v122 = v115 + 1;
          v123 = v116 - 1;
          while (v123)
          {
            if (v117 > 0x19999999 || (v124 = *v122 - 48, v124 > 9))
            {
              v118 = 0;
              LOBYTE(v116) = 0;
              v119 = 0;
              goto LABEL_204;
            }
            v118 = 0;
            LOBYTE(v116) = 0;
            v119 = 0;
            v15 = __CFADD__(v124, 10 * v117);
            v117 = v124 + 10 * v117;
            ++v122;
            --v123;
            if (v15)
              goto LABEL_204;
          }
          v119 = v117 & 0xFFFFFF00;
          v118 = 0x100000000;
          if (v117 == -1)
          {
            v118 = 0;
            LOBYTE(v116) = 0;
          }
          else
          {
            LOBYTE(v116) = v117;
          }
          if (v117 == -1)
            v119 = 0;
LABEL_204:
          v125 = v116;
          if ((v118 & 0x100000000) == 0)
            goto LABEL_205;
          goto LABEL_406;
        }
        v118 = 0;
        LOBYTE(v116) = 0;
      }
      else
      {
        v118 = 0;
      }
      v119 = 0;
      goto LABEL_204;
    }
    if ((_DWORD)v116)
    {
      v218 = *(unsigned __int8 *)v115 - 48;
      if (v218 <= 9 && (v116 < 2 || *(_BYTE *)v115 != 48))
      {
        v232 = v116 - 1;
        v233 = (unsigned __int8 *)v115 + 1;
        while (v232)
        {
          if (v218 > 0x19999999)
            goto LABEL_403;
          v234 = *v233 - 48;
          if (v234 > 9)
            goto LABEL_403;
          v125 = 0;
          LOBYTE(v116) = 0;
          v219 = 0;
          v15 = __CFADD__(v234, 10 * v218);
          v218 = v234 + 10 * v218;
          --v232;
          ++v233;
          if (v15)
            goto LABEL_405;
        }
        if (v218 == -1)
          v125 = 0;
        else
          v125 = v218 & 0xFFFFFF00;
        if (v218 == -1)
          LOBYTE(v116) = 0;
        else
          LOBYTE(v116) = v218;
        if (v218 == -1)
          v219 = 0;
        else
          v219 = 0x100000000;
LABEL_405:
        v119 = v116;
        if ((v219 & 0x100000000) != 0)
        {
LABEL_406:
          v220 = v119 | v125;
          v221 = *((_QWORD *)this + 7);
          v246 = (JSC::VMTraps *)(v221 + 64);
          while (1)
          {
            v222 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
            v223 = (*(uint64_t (**)(JSC::JSString *, JSC *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v222 + 0x4C)
                                                                                                  + 0x70))(v18, this, v220, &v247);
            v224 = v223;
            if (*(_DWORD *)(v221 + 80))
            {
              v227 = *(_DWORD *)(v221 + 80);
              if ((v227 & 0x27) != 0 && (v227 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v246, 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v221 + 16))
                v228 = 1;
              else
                v228 = v224;
              if ((v228 & 1) != 0)
                goto LABEL_126;
            }
            else if ((v223 & 1) != 0)
            {
              goto LABEL_126;
            }
            if (BYTE2(v253) == 3)
            {
              if (v254)
                goto LABEL_126;
              v225 = *((unsigned __int8 *)v18 + 5);
              if (v225 != 61)
              {
LABEL_411:
                if ((v225 - 39) <= 0xA)
                {
                  if ((*((_BYTE *)v18 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    v261 = 0;
                    v230 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v18, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                    v229 = (_BYTE)a2 ? v230 : 0;
                  }
                  else
                  {
                    v229 = *((_QWORD *)v18 + 3);
                  }
                  if (v229 <= v220)
                    goto LABEL_126;
                }
              }
            }
            else
            {
              v225 = *((unsigned __int8 *)v18 + 5);
              if (v225 != 61)
                goto LABEL_411;
              if (BYTE2(v253) == 1)
                goto LABEL_126;
            }
            if ((*(_WORD *)(v222 + 12) & 0x800) == 0 || BYTE2(v253) == 3)
            {
              v226 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x30);
              if (!v226)
                v226 = *((_QWORD *)v18 + 2);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v226 = (*(uint64_t (**)(JSC::JSString *, JSC *))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0xB0))(v18, this);
              }
              else
              {
                v226 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x30);
                if (!v226)
                  v226 = *((_QWORD *)v18 + 2);
              }
              if (*(_DWORD *)(v221 + 80))
              {
                v231 = *(_DWORD *)(v221 + 80);
                if ((v231 & 0x27) != 0 && (v231 & 0x20) == 0)
                  JSC::VMTraps::handleTraps(v246, 7u, a3, a4, a5, a6, a7, a8);
                if (*(_QWORD *)(v221 + 16))
                  goto LABEL_126;
              }
            }
            if ((v226 & 0xFFFE000000000002) == 0)
            {
              v18 = (JSC::JSString *)v226;
              if (*(unsigned __int8 *)(v226 + 5) > 0x16u)
                continue;
            }
            goto LABEL_126;
          }
        }
LABEL_205:
        v126 = *((_QWORD *)this + 7);
        v244 = (JSC::VMTraps *)(v126 + 64);
        while (1)
        {
          v127 = 16 * (*(_DWORD *)v22 & 0xFFFFFFFE);
          if ((*(_BYTE *)(v22 + 6) & 8) == 0)
          {
            if ((_DWORD)v21 && (v21 & ~*(_DWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x20)) == 0)
            {
              v128 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x58);
              if (v128
                || (v129 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x40)) != 0
                && (*(_BYTE *)(v129 + 5) == 1 || *(_DWORD *)(v129 + 80) >= 2u)
                && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE)), (JSC::VM *)v126, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v128))
              {
                if (*(_DWORD *)(v128 + 24))
                {
                  v130 = *(_QWORD *)(v128 + 16);
                  v131 = v130 & 0xFFFFFFFFFFFFFFFELL;
                  v132 = *(unsigned int *)(v128 + 8);
                  v133 = *(_DWORD *)(v17 + 16);
                  if ((v130 & 1) != 0)
                  {
                    if ((v133 & 0x20) != 0)
                      v133 = *(_DWORD *)(v17 + 32);
                    v134 = *(_DWORD *)(v128 + 12);
                    v135 = (v133 >> 8) & *(_QWORD *)&v134;
                    v136 = *(unsigned __int8 *)(v131 + v135);
                    if (*(_BYTE *)(v131 + v135))
                    {
                      v137 = v131 + v132;
                      v138 = 1;
                      while (1)
                      {
                        v139 = *(_QWORD *)(v137 + 8 * (v136 - 1));
                        if (v17 == (v139 & 0xFFFFFFFFFFFFLL))
                          break;
                        v135 = ((_DWORD)v135 + v138) & v134;
                        v136 = *(unsigned __int8 *)(v131 + v135);
                        ++v138;
                        if (!*(_BYTE *)(v131 + v135))
                          goto LABEL_234;
                      }
                      a6 = (v139 >> 16) & 0xFF00000000 | HIBYTE(v139);
LABEL_231:
                      if ((_DWORD)a6 != -1)
                      {
                        a5 = HIDWORD(a6);
                        if ((int)a6 <= 63)
                        {
                          v180 = v22 + 16;
                          v181 = a6 << 32;
                        }
                        else
                        {
                          v180 = *(_QWORD *)(v22 + 8) - 8;
                          v181 = 0x3F00000000 - (a6 << 32);
                        }
                        a4 = *(_QWORD *)(v180 + (v181 >> 29));
                        if ((a4 & 0xFFFE000000000002) == 0)
                        {
                          v182 = *(unsigned __int8 *)(a4 + 5);
                          if (v182 != 5)
                          {
                            if (v182 != 6)
                              goto LABEL_337;
                            v94 = *(_DWORD *)(v127 + 16) & 3;
                            v200 = *(_QWORD *)(a4 + 16);
                            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                            {
                              v97 = *(_QWORD *)(a4 + 24);
                              v96 = *(_QWORD *)(a4 + 32);
                              v247 = *(_QWORD *)(a4 + 8);
                              v248 = v200;
                              LODWORD(v249) = HIDWORD(a6);
                              v251 = v22;
LABEL_160:
                              BYTE1(v253) = 3;
                              if (v94 != 2)
                                LOBYTE(v253) = 1;
                              HIBYTE(v253) = 1;
                              v257 = v97;
                              v258 = v96;
                              goto LABEL_126;
                            }
                            v247 = *(_QWORD *)(a4 + 8);
                            v248 = v200;
                            LODWORD(v249) = HIDWORD(a6);
                            v251 = v22;
LABEL_201:
                            BYTE1(v253) = 3;
                            if (v94 != 2)
                              LOBYTE(v253) = 1;
                            goto LABEL_126;
                          }
                          v72 = (unsigned int *)v22;
                          a2 = (JSC::JSGlobalObject *)v126;
LABEL_125:
                          JSC::JSObject::fillGetterPropertySlot(v72, (uint64_t)a2, (uint64_t)&v247, a4, a5, a6);
                          goto LABEL_126;
                        }
LABEL_337:
                        v247 = a4;
                        v251 = v22;
                        goto LABEL_78;
                      }
                    }
                  }
                  else
                  {
                    if ((v133 & 0x20) != 0)
                      v133 = *(_DWORD *)(v17 + 32);
                    v140 = *(_DWORD *)(v128 + 12);
                    v141 = v140 & (v133 >> 8);
                    v142 = *(_DWORD *)(v131 + 4 * v141);
                    if (v142)
                    {
                      v143 = v131 + 4 * v132;
                      v144 = 1;
                      while (1)
                      {
                        v145 = (v142 - 1);
                        if (v17 == *(_QWORD *)(v143 + 16 * v145))
                          break;
                        v141 = (v141 + v144) & v140;
                        v142 = *(_DWORD *)(v131 + 4 * v141);
                        ++v144;
                        if (!v142)
                          goto LABEL_234;
                      }
                      a6 = *(unsigned int *)(v143 + 16 * v145 + 8) | ((unint64_t)*(unsigned __int8 *)(v143 + 16 * v145 + 12) << 32);
                      goto LABEL_231;
                    }
                  }
                }
              }
            }
LABEL_234:
            if ((*(_BYTE *)(v22 + 6) & 0x20) != 0
              && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v22, (JSC::VM *)v126, v17, (uint64_t)&v247) & 1) != 0)
            {
              goto LABEL_126;
            }
            goto LABEL_235;
          }
          v149 = (*(uint64_t (**)(uint64_t, JSC *, unint64_t, uint64_t *))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0x68))(v22, this, v17, &v247);
          v150 = v149;
          if (*(_DWORD *)(v126 + 80))
          {
            v177 = *(_DWORD *)(v126 + 80);
            if ((v177 & 0x27) != 0 && (v177 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v244, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v126 + 16))
              v178 = 1;
            else
              v178 = v150;
            v9 = g_config;
            if ((v178 & 1) != 0)
              goto LABEL_126;
          }
          else
          {
            v9 = g_config;
            if ((v149 & 1) != 0)
              goto LABEL_126;
          }
          if (BYTE2(v253) == 3)
          {
            if (v254)
              goto LABEL_126;
            v151 = *(unsigned __int8 *)(v22 + 5);
            if (v151 == 61)
              goto LABEL_235;
          }
          else
          {
            v151 = *(unsigned __int8 *)(v22 + 5);
            if (v151 == 61)
            {
              if (BYTE2(v253) == 1)
                goto LABEL_126;
              goto LABEL_235;
            }
          }
          if (!v17)
            goto LABEL_235;
          if ((v151 - 50) < 0xFFFFFFF5)
            goto LABEL_235;
          v152 = *(_DWORD *)(v17 + 16);
          if ((v152 & 0x20) != 0)
            goto LABEL_235;
          v153 = *(unsigned int *)(v17 + 4);
          if (!(_DWORD)v153)
            goto LABEL_235;
          v154 = *(unsigned __int8 **)(v17 + 8);
          if ((v152 & 4) == 0)
            break;
          v155 = *v154;
          if ((_DWORD)v153 == 1)
          {
LABEL_260:
            if ((v155 - 48) < 0xA)
              goto LABEL_126;
            goto LABEL_235;
          }
          if (v155 == 45)
          {
            v155 = v154[1];
LABEL_264:
            if ((v155 - 48) < 0xA)
            {
              if ((_DWORD)v153 == 2)
                goto LABEL_126;
              goto LABEL_276;
            }
            if ((_DWORD)v153 != 9)
              goto LABEL_235;
            goto LABEL_273;
          }
          if ((v155 - 48) < 0xA)
            goto LABEL_276;
          if ((_DWORD)v153 != 8)
            goto LABEL_270;
LABEL_273:
          v156 = v155 == 73;
LABEL_274:
          if (!v156)
            goto LABEL_235;
LABEL_276:
          v243 = v243 & 0xFFFFFF0000000000 | v153 | ((unint64_t)((v152 >> 2) & 1) << 32);
          JSC::jsToNumber(v154, v243);
          v158 = (v157 >> 52) & 0x7FF;
          if ((_DWORD)v158 == 2047)
          {
            if ((v157 & 0xFFFFFFFFFFFFFLL) != 0)
            {
              qmemcpy(__s, "NaN", sizeof(__s));
              v159 = v263;
            }
            else
            {
              if ((v157 & 0x8000000000000000) != 0)
              {
                __s[0] = 45;
                v165 = &__s[1];
              }
              else
              {
                v165 = __s;
              }
              *(_QWORD *)v165 = 0x7974696E69666E49;
              v159 = v165 + 8;
            }
            goto LABEL_290;
          }
          v160 = v157 & 0x7FFFFFFFFFFFFFFFLL;
          if ((v157 & 0x8000000000000000) != 0 && v160)
          {
            __s[0] = 45;
            v161 = &__s[1];
          }
          else
          {
            if (!v160)
            {
              __s[0] = 48;
              v159 = &__s[1];
              goto LABEL_290;
            }
            v161 = __s;
          }
          v162 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v157 & 0x800FFFFFFFFFFFFFLL, v158);
          v159 = WTF::dragonbox::detail::to_shortest(v162, v163, (uint64_t)v161, v164);
LABEL_290:
          *v159 = 0;
          v166 = strlen(__s);
          memcpy(&__dst, __s, v166);
          *((_BYTE *)&__dst + v166) = 0;
          v167 = *(unsigned int *)(v17 + 4);
          v168 = *(unsigned __int8 **)(v17 + 8);
          if ((*(_BYTE *)(v17 + 16) & 4) != 0)
          {
            if ((_DWORD)v167)
            {
              v173 = &__dst;
              v174 = *(unsigned int *)(v17 + 4);
              do
              {
                v176 = *(unsigned __int8 *)v173;
                v173 = (WTF::StringImpl **)((char *)v173 + 1);
                v175 = v176;
                if (!v176 || *v168 != v175)
                  goto LABEL_304;
                ++v168;
              }
              while (--v174);
            }
          }
          else if ((_DWORD)v167)
          {
            v169 = &__dst;
            v170 = *(unsigned int *)(v17 + 4);
            while (1)
            {
              v172 = *(unsigned __int8 *)v169;
              v169 = (WTF::StringImpl **)((char *)v169 + 1);
              v171 = v172;
              if (!v172 || *(unsigned __int16 *)v168 != v171)
                break;
              v168 += 2;
              if (!--v170)
                goto LABEL_302;
            }
LABEL_304:
            v9 = g_config;
            goto LABEL_235;
          }
LABEL_302:
          v9 = g_config;
          if (!*((_BYTE *)&__dst + v167))
            goto LABEL_126;
LABEL_235:
          if ((*(_WORD *)(v127 + 12) & 0x800) == 0)
          {
            v146 = *(_DWORD *)v22;
LABEL_237:
            v147 = *(_QWORD *)(16 * (v146 & 0xFFFFFFFE) + 0x30);
            if (!v147)
              v147 = *(_QWORD *)(v22 + 16);
            goto LABEL_239;
          }
          v146 = *(_DWORD *)v22;
          if (BYTE2(v253) == 3)
            goto LABEL_237;
          v148 = 16 * (v146 & 0xFFFFFFFE);
          if ((*(_WORD *)(v148 + 12) & 0x800) != 0)
          {
            v147 = (*(uint64_t (**)(uint64_t, JSC *))(16 * *(unsigned int *)(v148 + 76) + 0xB0))(v22, this);
          }
          else
          {
            v147 = *(_QWORD *)(v148 + 48);
            if (!v147)
              v147 = *(_QWORD *)(v22 + 16);
          }
          if (*(_DWORD *)(v126 + 80))
          {
            v179 = *(_DWORD *)(v126 + 80);
            if ((v179 & 0x27) != 0 && (v179 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v244, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v126 + 16))
              goto LABEL_126;
          }
LABEL_239:
          if ((v147 & 0xFFFE000000000002) == 0)
          {
            v22 = v147;
            if (*(unsigned __int8 *)(v147 + 5) > 0x16u)
              continue;
          }
          goto LABEL_126;
        }
        v155 = *(unsigned __int16 *)v154;
        if ((_DWORD)v153 == 1)
          goto LABEL_260;
        if (v155 != 45)
        {
          if ((v155 - 48) < 0xA || (_DWORD)v153 == 8 && v155 == 73)
            goto LABEL_276;
LABEL_270:
          if ((_DWORD)v153 != 3)
            goto LABEL_235;
          v156 = v155 == 78;
          goto LABEL_274;
        }
        v155 = *((unsigned __int16 *)v154 + 1);
        goto LABEL_264;
      }
LABEL_403:
      v125 = 0;
      LOBYTE(v116) = 0;
    }
    else
    {
      v125 = 0;
    }
    v219 = 0;
    goto LABEL_405;
  }
  v23 = v18;
  while (1)
  {
    v24 = *(_DWORD *)v23 & 0xFFFFFFFE;
    v25 = 16 * v24;
    if (!(_DWORD)v21 || (v21 & ~*(_DWORD *)(16 * v24 + 0x20)) != 0)
      goto LABEL_46;
    v26 = *(_QWORD *)(16 * v24 + 0x58);
    if (!v26)
    {
      v27 = *(_QWORD *)(16 * v24 + 0x40);
      if (!v27 || *(_BYTE *)(v27 + 5) != 1 && *(_DWORD *)(v27 + 80) < 2u)
        goto LABEL_46;
      v28 = v9;
      v29 = a2;
      JSC::Structure::materializePropertyTable((JSC::Structure *)v25, a2, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      a2 = v29;
      v9 = v28;
      if (!v26)
        goto LABEL_46;
    }
    if (!*(_DWORD *)(v26 + 24))
      goto LABEL_46;
    v30 = *(_QWORD *)(v26 + 16);
    v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
    v32 = *(unsigned int *)(v26 + 8);
    v33 = *(_DWORD *)(v17 + 16);
    if ((v30 & 1) != 0)
    {
      if ((v33 & 0x20) != 0)
        v33 = *(_DWORD *)(v17 + 32);
      v34 = *(_DWORD *)(v26 + 12);
      v35 = (v33 >> 8) & *(_QWORD *)&v34;
      v36 = *(unsigned __int8 *)(v31 + v35);
      if (!*(_BYTE *)(v31 + v35))
        goto LABEL_46;
      v37 = v31 + v32;
      v38 = 1;
      while (1)
      {
        v39 = *(_QWORD *)(v37 + 8 * (v36 - 1));
        if (v17 == (v39 & 0xFFFFFFFFFFFFLL))
          break;
        v35 = ((_DWORD)v35 + v38) & v34;
        v36 = *(unsigned __int8 *)(v31 + v35);
        ++v38;
        if (!*(_BYTE *)(v31 + v35))
          goto LABEL_46;
      }
      a6 = (v39 >> 16) & 0xFF00000000 | HIBYTE(v39);
    }
    else
    {
      if ((v33 & 0x20) != 0)
        v33 = *(_DWORD *)(v17 + 32);
      v40 = *(_DWORD *)(v26 + 12);
      v41 = v40 & (v33 >> 8);
      v42 = *(_DWORD *)(v31 + 4 * v41);
      if (!v42)
        goto LABEL_46;
      v43 = v31 + 4 * v32;
      v44 = 1;
      while (1)
      {
        v45 = (v42 - 1);
        if (v17 == *(_QWORD *)(v43 + 16 * v45))
          break;
        v41 = (v41 + v44) & v40;
        v42 = *(_DWORD *)(v31 + 4 * v41);
        ++v44;
        if (!v42)
          goto LABEL_46;
      }
      a6 = *(unsigned int *)(v43 + 16 * v45 + 8) | ((unint64_t)*(unsigned __int8 *)(v43 + 16 * v45 + 12) << 32);
    }
    if ((_DWORD)a6 != -1)
    {
      a5 = HIDWORD(a6);
      if ((int)a6 <= 63)
      {
        v57 = (uint64_t)v23 + 16;
        v58 = a6 << 32;
      }
      else
      {
        v57 = *((_QWORD *)v23 + 1) - 8;
        v58 = 0x3F00000000 - (a6 << 32);
      }
      a4 = *(_QWORD *)(v57 + (v58 >> 29));
      if ((a4 & 0xFFFE000000000002) == 0)
      {
        v59 = *(unsigned __int8 *)(a4 + 5);
        if (v59 == 5)
        {
          v72 = (unsigned int *)v23;
          goto LABEL_125;
        }
        if (v59 == 6)
        {
          v94 = *(_DWORD *)(v25 + 16) & 3;
          v95 = *(_QWORD *)(a4 + 16);
          if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
          {
            v97 = *(_QWORD *)(a4 + 24);
            v96 = *(_QWORD *)(a4 + 32);
            v247 = *(_QWORD *)(a4 + 8);
            v248 = v95;
            LODWORD(v249) = HIDWORD(a6);
            v251 = (uint64_t)v23;
            goto LABEL_160;
          }
          v247 = *(_QWORD *)(a4 + 8);
          v248 = v95;
          LODWORD(v249) = HIDWORD(a6);
          v251 = (uint64_t)v23;
          goto LABEL_201;
        }
      }
      v247 = a4;
      v251 = (uint64_t)v23;
LABEL_78:
      v249 = __PAIR64__(a6, a5);
      LOWORD(v253) = 257;
      goto LABEL_126;
    }
LABEL_46:
    if ((*v20 & 0x20) != 0)
    {
      v46 = a2;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v23, a2, v17, (uint64_t)&v247);
      a2 = v46;
      if ((OwnStaticPropertySlot & 1) != 0)
        goto LABEL_126;
    }
    v22 = *(_QWORD *)(v25 + 48);
    if (!v22)
      v22 = *((_QWORD *)v23 + 2);
    if ((v22 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v22 + 5) < 0x17u)
      break;
    v20 = (_BYTE *)(v22 + 6);
    v23 = (JSC::JSString *)v22;
    if ((*(_BYTE *)(v22 + 6) & 8) != 0)
      goto LABEL_167;
  }
  if (!v17)
    goto LABEL_126;
  v50 = *(_DWORD *)(v17 + 16);
  if ((v50 & 0x20) != 0)
    goto LABEL_126;
  v51 = *(_BYTE **)(v17 + 8);
  v52 = *(unsigned int *)(v17 + 4);
  if ((v50 & 4) != 0)
  {
    if (!(_DWORD)v52)
      goto LABEL_126;
    v53 = *v51 - 48;
    if (v53 > 9 || v52 >= 2 && *v51 == 48)
      goto LABEL_126;
    v201 = v52 - 1;
    v202 = v51 + 1;
    while (v201)
    {
      if (v53 <= 0x19999999)
      {
        v203 = *v202 - 48;
        if (v203 <= 9)
        {
          v15 = __CFADD__(v203, 10 * v53);
          v53 = v203 + 10 * v53;
          --v201;
          ++v202;
          if (!v15)
            continue;
        }
      }
      goto LABEL_126;
    }
    if (v53 != -1)
      goto LABEL_80;
  }
  else
  {
    if (!(_DWORD)v52)
      goto LABEL_126;
    v53 = *(unsigned __int16 *)v51 - 48;
    if (v53 > 9 || *(_WORD *)v51 == 48 && v52 > 1)
      goto LABEL_126;
    v54 = (unsigned __int16 *)(v51 + 2);
    v55 = v52 - 1;
    while (v55)
    {
      if (v53 <= 0x19999999)
      {
        v56 = *v54 - 48;
        if (v56 <= 9)
        {
          v15 = __CFADD__(v56, 10 * v53);
          v53 = v56 + 10 * v53;
          ++v54;
          --v55;
          if (!v15)
            continue;
        }
      }
      goto LABEL_126;
    }
    if (v53 != -1)
    {
LABEL_80:
      v60 = v53;
      v61 = *((_QWORD *)this + 7);
      v245 = (JSC::VMTraps *)(v61 + 64);
      while (1)
      {
        v62 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
        v63 = (*(uint64_t (**)(JSC::JSString *, JSC *, unint64_t, uint64_t *))(16
                                                                                             * *(unsigned int *)(v62 + 0x4C)
                                                                                             + 0x70))(v18, this, v60, &v247);
        v64 = v63;
        if (*(_DWORD *)(v61 + 80))
        {
          v67 = *(_DWORD *)(v61 + 80);
          if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v245, 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v61 + 16))
            v68 = 1;
          else
            v68 = v64;
          if ((v68 & 1) != 0)
            goto LABEL_126;
        }
        else if ((v63 & 1) != 0)
        {
          goto LABEL_126;
        }
        if (BYTE2(v253) == 3)
        {
          if (v254)
            goto LABEL_126;
          v65 = *((unsigned __int8 *)v18 + 5);
          if (v65 != 61)
          {
LABEL_85:
            if ((v65 - 39) <= 0xA)
            {
              if ((*((_BYTE *)v18 + 40) & 7u) > 2)
              {
                LOBYTE(__dst) = 0;
                v261 = 0;
                v70 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v18, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                v69 = (_BYTE)a2 ? v70 : 0;
              }
              else
              {
                v69 = *((_QWORD *)v18 + 3);
              }
              if (v69 <= v60)
                goto LABEL_126;
            }
          }
        }
        else
        {
          v65 = *((unsigned __int8 *)v18 + 5);
          if (v65 != 61)
            goto LABEL_85;
          if (BYTE2(v253) == 1)
            goto LABEL_126;
        }
        if ((*(_WORD *)(v62 + 12) & 0x800) == 0 || BYTE2(v253) == 3)
        {
          v66 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x30);
          if (!v66)
            v66 = *((_QWORD *)v18 + 2);
        }
        else
        {
          if ((*(_WORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v66 = (*(uint64_t (**)(JSC::JSString *, JSC *))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0xB0))(v18, this);
          }
          else
          {
            v66 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x30);
            if (!v66)
              v66 = *((_QWORD *)v18 + 2);
          }
          if (*(_DWORD *)(v61 + 80))
          {
            v71 = *(_DWORD *)(v61 + 80);
            if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v245, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v61 + 16))
              goto LABEL_126;
          }
        }
        if ((v66 & 0xFFFE000000000002) == 0)
        {
          v18 = (JSC::JSString *)v66;
          if (*(unsigned __int8 *)(v66 + 5) > 0x16u)
            continue;
        }
        goto LABEL_126;
      }
    }
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_127;
LABEL_126:
  v121 = *(_DWORD *)(v12 + 80);
  if ((v121 & 0x27) != 0 && (v121 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 16))
  {
    v48 = 0;
  }
  else
  {
LABEL_127:
    if (BYTE1(v253) == 2 && v253 == 1)
      v48 = v247;
    else
      v48 = 2;
  }
  if (v256)
  {
    v74 = *(_DWORD *)(v255 + 4);
    if (!v74)
    {
      __break(0xC471u);
      JUMPOUT(0x198C5C924);
    }
    *(_DWORD *)(v255 + 4) = v74 - 1;
  }
  if (v17)
  {
LABEL_137:
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
LABEL_56:
  if (!*((_BYTE *)v9 + 1703))
  {
    __break(0xC471u);
    JUMPOUT(0x198C5C828);
  }
  return v48;
}

uint64_t JSC::functionLoadGetterFromGetterSetter(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t result;
  JSC::VM *v5;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_12;
  }
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1
    || (v3 = *((_QWORD *)a2 + 6), (v3 & 0xFFFE000000000002) != 0)
    || *(_BYTE *)(v3 + 5) != 5)
  {
    JSC::throwTypeError((unint64_t)this, &v5, (uint64_t)"Invalid use of loadGetterFromGetterSetter test function: argument is not a GetterSetter", 88);
    if ((_BYTE)qword_1ECF4C6A7)
      return 0;
    __break(0xC471u);
LABEL_12:
    JUMPOUT(0x198C5D730);
  }
  result = *(_QWORD *)(v3 + 8);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5D750);
  }
  return result;
}

unint64_t JSC::functionCreateCustomTestGetterSetter(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t SlowCase;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t Slow;
  int v24;
  unint64_t *v25;
  JSC::VM *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  JSC::VM *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  JSC::VM *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  JSC::VM *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  JSC::VM *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  WTF::StringImpl *v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  JSC::VM *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __n128 v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  WTF::AtomStringImpl *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  JSC::VM *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __n128 v146;
  WTF::StringImpl *v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  WTF::AtomStringImpl *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  JSC::VM *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __n128 v164;
  WTF::StringImpl *v165;
  unint64_t v166;
  unint64_t v167;
  int v168;
  WTF::AtomStringImpl *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  WTF::StringImpl *v283;
  unint64_t v284;
  int v285;
  int v286;
  uint64_t v287;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5E120);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = (unint64_t *)(v10 + 40136);
  v12 = *((_QWORD *)this + 82);
  LODWORD(v283) = 23;
  if ((v12 & 0xFFFE000000000002) == 0 && v12 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v12, (JSC::VM *)v10, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = *v11;
  if (*v11 < *(_QWORD *)(v10 + 40144))
    goto LABEL_7;
  SlowCase = *(_QWORD *)(v10 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v242 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 40160);
    *(_QWORD *)(v10 + 40144) = SlowCase + HIDWORD(v242);
    *(_QWORD *)(v10 + 40152) = SlowCase + (int)v242;
LABEL_7:
    *v11 = SlowCase + 128;
    goto LABEL_8;
  }
  JSC::sanitizeStackForVM((JSC *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 40112, v10 + 192, 128, 0, 0, v252, v253, v254);
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5E16CLL);
  }
  v21 = *(_QWORD *)(v10 + 15032);
  if (v21)
  {
    v22 = *(unsigned int *)(v21 + 60);
    Slow = *(_QWORD *)(v21 + 24);
    if (Slow < *(_QWORD *)(v21 + 32))
    {
LABEL_13:
      *(_QWORD *)(v21 + 24) = Slow + v22;
      goto LABEL_14;
    }
    Slow = *(_QWORD *)(v21 + 40);
    if ((Slow & 1) == 0)
    {
      v251 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v21 + 48);
      *(_QWORD *)(v21 + 32) = Slow + HIDWORD(v251);
      *(_QWORD *)(v21 + 40) = Slow + (int)v251;
      goto LABEL_13;
    }
    v279 = *(unsigned int *)(v21 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v14, v15, v16, v17, v18, v19, v20);
    Slow = JSC::LocalAllocator::allocateSlowCase(v21, v10 + 192, v279, 0, 0, v280, v281, v282);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x10uLL, 0, v17, v18, v19, v20);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C5E100);
    }
  }
LABEL_14:
  *(_DWORD *)Slow = 0;
  v24 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)Slow = SlowCase >> 4;
  *(_DWORD *)(Slow + 4) = v24;
  *(_QWORD *)(Slow + 8) = 0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5E18CLL);
  }
  v25 = (unint64_t *)(v10 + 37936);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"customValue", 0xBuLL, v16, v17, v18, v19, v20, &v283);
  v33 = v283;
  v34 = *v25;
  if (*v25 < *(_QWORD *)(v10 + 37944))
    goto LABEL_18;
  v34 = *(_QWORD *)(v10 + 37952);
  if ((v34 & 1) == 0)
  {
    v243 = *(_QWORD *)(v34 + 8) ^ *(_QWORD *)(v10 + 37960);
    *(_QWORD *)(v10 + 37944) = v34 + HIDWORD(v243);
    *(_QWORD *)(v10 + 37952) = v34 + (int)v243;
LABEL_18:
    *v25 = v34 + 32;
    goto LABEL_19;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v26, v27, v34, v28, v29, v30, v31);
  v34 = JSC::LocalAllocator::allocateSlowCase(v10 + 37912, v10 + 192, 32, 0, 0, v255, v256, v257);
LABEL_19:
  *(_DWORD *)v34 = 0;
  v35 = *(_QWORD *)(v10 + 41536);
  v36 = *(_DWORD *)(v35 + 8);
  *(_DWORD *)v34 = v35 >> 4;
  *(_DWORD *)(v34 + 4) = v36;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v283 = 0;
  v284 = Slow;
  v285 = -1;
  v32.n128_u64[0] = 0x100000001000000;
  v286 = 0x1000000;
  v287 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v10, (unint64_t)v33, v34, 64, (uint64_t)&v283, v30, v31, v32);
  if (*(WTF::StringImpl **)(*(_QWORD *)(v10 + 41952) + 16) == v33)
    v44 = 8;
  else
    v44 = 24;
  *(_DWORD *)((16 * *(unsigned int *)Slow) | 0x10) |= v44;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"customValue2", 0xCuLL, v39, v40, v41, v42, v43, &v283);
  v52 = v283;
  v53 = *v25;
  if (*v25 < *(_QWORD *)(v10 + 37944))
    goto LABEL_28;
  v53 = *(_QWORD *)(v10 + 37952);
  if ((v53 & 1) == 0)
  {
    v244 = *(_QWORD *)(v53 + 8) ^ *(_QWORD *)(v10 + 37960);
    *(_QWORD *)(v10 + 37944) = v53 + HIDWORD(v244);
    *(_QWORD *)(v10 + 37952) = v53 + (int)v244;
LABEL_28:
    *v25 = v53 + 32;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v45, v46, v53, v47, v48, v49, v50);
  v53 = JSC::LocalAllocator::allocateSlowCase(v10 + 37912, v10 + 192, 32, 0, 0, v258, v259, v260);
LABEL_29:
  *(_DWORD *)v53 = 0;
  v54 = *(_QWORD *)(v10 + 41536);
  v55 = *(_DWORD *)(v54 + 8);
  *(_DWORD *)v53 = v54 >> 4;
  *(_DWORD *)(v53 + 4) = v55;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v283 = 0;
  v284 = Slow;
  v285 = -1;
  v51.n128_u64[0] = 0x100000001000000;
  v286 = 0x1000000;
  v287 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v10, (unint64_t)v52, v53, 64, (uint64_t)&v283, v49, v50, v51);
  if (*(WTF::StringImpl **)(*(_QWORD *)(v10 + 41952) + 16) == v52)
    v63 = 8;
  else
    v63 = 24;
  *(_DWORD *)((16 * *(unsigned int *)Slow) | 0x10) |= v63;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"customAccessor", 0xEuLL, v58, v59, v60, v61, v62, &v283);
  v71 = v283;
  v72 = *v25;
  if (*v25 < *(_QWORD *)(v10 + 37944))
    goto LABEL_38;
  v72 = *(_QWORD *)(v10 + 37952);
  if ((v72 & 1) == 0)
  {
    v245 = *(_QWORD *)(v72 + 8) ^ *(_QWORD *)(v10 + 37960);
    *(_QWORD *)(v10 + 37944) = v72 + HIDWORD(v245);
    *(_QWORD *)(v10 + 37952) = v72 + (int)v245;
LABEL_38:
    *v25 = v72 + 32;
    goto LABEL_39;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v64, v65, v72, v66, v67, v68, v69);
  v72 = JSC::LocalAllocator::allocateSlowCase(v10 + 37912, v10 + 192, 32, 0, 0, v261, v262, v263);
LABEL_39:
  *(_DWORD *)v72 = 0;
  v73 = *(_QWORD *)(v10 + 41536);
  v74 = *(_DWORD *)(v73 + 8);
  *(_DWORD *)v72 = v73 >> 4;
  *(_DWORD *)(v72 + 4) = v74;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v283 = 0;
  v284 = Slow;
  v285 = -1;
  v70.n128_u64[0] = 0x100000001000000;
  v286 = 0x1000000;
  v287 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v10, (unint64_t)v71, v72, 32, (uint64_t)&v283, v68, v69, v70);
  if (*(WTF::StringImpl **)(*(_QWORD *)(v10 + 41952) + 16) == v71)
    v82 = 8;
  else
    v82 = 24;
  *(_DWORD *)((16 * *(unsigned int *)Slow) | 0x10) |= v82;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"customValueGlobalObject", 0x17uLL, v77, v78, v79, v80, v81, &v283);
  v90 = v283;
  v91 = *v25;
  if (*v25 < *(_QWORD *)(v10 + 37944))
    goto LABEL_48;
  v91 = *(_QWORD *)(v10 + 37952);
  if ((v91 & 1) == 0)
  {
    v246 = *(_QWORD *)(v91 + 8) ^ *(_QWORD *)(v10 + 37960);
    *(_QWORD *)(v10 + 37944) = v91 + HIDWORD(v246);
    *(_QWORD *)(v10 + 37952) = v91 + (int)v246;
LABEL_48:
    *v25 = v91 + 32;
    goto LABEL_49;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v83, v84, v91, v85, v86, v87, v88);
  v91 = JSC::LocalAllocator::allocateSlowCase(v10 + 37912, v10 + 192, 32, 0, 0, v264, v265, v266);
LABEL_49:
  *(_DWORD *)v91 = 0;
  v92 = *(_QWORD *)(v10 + 41536);
  v93 = *(_DWORD *)(v92 + 8);
  *(_DWORD *)v91 = v92 >> 4;
  *(_DWORD *)(v91 + 4) = v93;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v283 = 0;
  v284 = Slow;
  v285 = -1;
  v89.n128_u64[0] = 0x100000001000000;
  v286 = 0x1000000;
  v287 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v10, (unint64_t)v90, v91, 64, (uint64_t)&v283, v87, v88, v89);
  if (*(WTF::StringImpl **)(*(_QWORD *)(v10 + 41952) + 16) == v90)
    v101 = 8;
  else
    v101 = 24;
  *(_DWORD *)((16 * *(unsigned int *)Slow) | 0x10) |= v101;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v94, v95, v96, v97, v98, v99, v100);
      WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"customAccessorGlobalObject", 0x1AuLL, v96, v97, v98, v99, v100, &v283);
  v109 = v283;
  v110 = *v25;
  if (*v25 < *(_QWORD *)(v10 + 37944))
    goto LABEL_58;
  v110 = *(_QWORD *)(v10 + 37952);
  if ((v110 & 1) == 0)
  {
    v247 = *(_QWORD *)(v110 + 8) ^ *(_QWORD *)(v10 + 37960);
    *(_QWORD *)(v10 + 37944) = v110 + HIDWORD(v247);
    *(_QWORD *)(v10 + 37952) = v110 + (int)v247;
LABEL_58:
    *v25 = v110 + 32;
    goto LABEL_59;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v102, v103, v110, v104, v105, v106, v107);
  v110 = JSC::LocalAllocator::allocateSlowCase(v10 + 37912, v10 + 192, 32, 0, 0, v267, v268, v269);
LABEL_59:
  *(_DWORD *)v110 = 0;
  v111 = *(_QWORD *)(v10 + 41536);
  v112 = *(_DWORD *)(v111 + 8);
  *(_DWORD *)v110 = v111 >> 4;
  *(_DWORD *)(v110 + 4) = v112;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v283 = 0;
  v284 = Slow;
  v285 = -1;
  v108.n128_u64[0] = 0x100000001000000;
  v286 = 0x1000000;
  v287 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v10, (unint64_t)v109, v110, 32, (uint64_t)&v283, v106, v107, v108);
  if (*(WTF::StringImpl **)(*(_QWORD *)(v10 + 41952) + 16) == v109)
    v120 = 8;
  else
    v120 = 24;
  *(_DWORD *)((16 * *(unsigned int *)Slow) | 0x10) |= v120;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v113, v114, v115, v116, v117, v118, v119);
      WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"customValueNoSetter", 0x13uLL, v115, v116, v117, v118, v119, &v283);
  v128 = v283;
  v129 = *v25;
  if (*v25 < *(_QWORD *)(v10 + 37944))
    goto LABEL_68;
  v129 = *(_QWORD *)(v10 + 37952);
  if ((v129 & 1) == 0)
  {
    v248 = *(_QWORD *)(v129 + 8) ^ *(_QWORD *)(v10 + 37960);
    *(_QWORD *)(v10 + 37944) = v129 + HIDWORD(v248);
    *(_QWORD *)(v10 + 37952) = v129 + (int)v248;
LABEL_68:
    *v25 = v129 + 32;
    goto LABEL_69;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v121, v122, v129, v123, v124, v125, v126);
  v129 = JSC::LocalAllocator::allocateSlowCase(v10 + 37912, v10 + 192, 32, 0, 0, v270, v271, v272);
LABEL_69:
  *(_DWORD *)v129 = 0;
  v130 = *(_QWORD *)(v10 + 41536);
  v131 = *(_DWORD *)(v130 + 8);
  *(_DWORD *)v129 = v130 >> 4;
  *(_DWORD *)(v129 + 4) = v131;
  *(_QWORD *)(v129 + 16) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v283 = 0;
  v284 = Slow;
  v285 = -1;
  v127.n128_u64[0] = 0x100000001000000;
  v286 = 0x1000000;
  v287 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v10, (unint64_t)v128, v129, 64, (uint64_t)&v283, v125, v126, v127);
  if (*(WTF::StringImpl **)(*(_QWORD *)(v10 + 41952) + 16) == v128)
    v139 = 8;
  else
    v139 = 24;
  *(_DWORD *)((16 * *(unsigned int *)Slow) | 0x10) |= v139;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
    {
      WTF::StringImpl::~StringImpl(v128, v132, v133, v134, v135, v136, v137, v138);
      WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
    }
    else
    {
      *(_DWORD *)v128 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"customAccessorReadOnly", 0x16uLL, v134, v135, v136, v137, v138, &v283);
  v147 = v283;
  v148 = *v25;
  if (*v25 < *(_QWORD *)(v10 + 37944))
    goto LABEL_78;
  v148 = *(_QWORD *)(v10 + 37952);
  if ((v148 & 1) == 0)
  {
    v249 = *(_QWORD *)(v148 + 8) ^ *(_QWORD *)(v10 + 37960);
    *(_QWORD *)(v10 + 37944) = v148 + HIDWORD(v249);
    *(_QWORD *)(v10 + 37952) = v148 + (int)v249;
LABEL_78:
    *v25 = v148 + 32;
    goto LABEL_79;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v140, v141, v148, v142, v143, v144, v145);
  v148 = JSC::LocalAllocator::allocateSlowCase(v10 + 37912, v10 + 192, 32, 0, 0, v273, v274, v275);
LABEL_79:
  *(_DWORD *)v148 = 0;
  v149 = *(_QWORD *)(v10 + 41536);
  v150 = *(_DWORD *)(v149 + 8);
  *(_DWORD *)v148 = v149 >> 4;
  *(_DWORD *)(v148 + 4) = v150;
  *(_QWORD *)(v148 + 16) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v283 = 0;
  v284 = Slow;
  v285 = -1;
  v146.n128_u64[0] = 0x100000001000000;
  v286 = 0x1000000;
  v287 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v10, (unint64_t)v147, v148, 34, (uint64_t)&v283, v144, v145, v146);
  *(_DWORD *)((16 * *(unsigned int *)Slow) | 0x10) |= 0x18u;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::~StringImpl(v147, v151, v152, v153, v154, v155, v156, v157);
      WTF::fastFree(v226, v227, v228, v229, v230, v231, v232, v233);
    }
    else
    {
      *(_DWORD *)v147 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"customFunction", 0xEuLL, v153, v154, v155, v156, v157, &v283);
  v165 = v283;
  v166 = *v25;
  if (*v25 < *(_QWORD *)(v10 + 37944))
    goto LABEL_85;
  v166 = *(_QWORD *)(v10 + 37952);
  if ((v166 & 1) == 0)
  {
    v250 = *(_QWORD *)(v166 + 8) ^ *(_QWORD *)(v10 + 37960);
    *(_QWORD *)(v10 + 37944) = v166 + HIDWORD(v250);
    *(_QWORD *)(v10 + 37952) = v166 + (int)v250;
LABEL_85:
    *v25 = v166 + 32;
    goto LABEL_86;
  }
  JSC::sanitizeStackForVM((JSC *)v10, v158, v159, v166, v160, v161, v162, v163);
  v166 = JSC::LocalAllocator::allocateSlowCase(v10 + 37912, v10 + 192, 32, 0, 0, v276, v277, v278);
LABEL_86:
  *(_DWORD *)v166 = 0;
  v167 = *(_QWORD *)(v10 + 41536);
  v168 = *(_DWORD *)(v167 + 8);
  *(_DWORD *)v166 = v167 >> 4;
  *(_DWORD *)(v166 + 4) = v168;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v283 = 0;
  v284 = Slow;
  v285 = -1;
  v164.n128_u64[0] = 0x100000001000000;
  v286 = 0x1000000;
  v287 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v10, (unint64_t)v165, v166, 32, (uint64_t)&v283, v162, v163, v164);
  if (*(WTF::StringImpl **)(*(_QWORD *)(v10 + 41952) + 16) == v165)
    v176 = 8;
  else
    v176 = 24;
  *(_DWORD *)((16 * *(unsigned int *)Slow) | 0x10) |= v176;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
    {
      WTF::StringImpl::~StringImpl(v165, v169, v170, v171, v172, v173, v174, v175);
      WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
    }
    else
    {
      *(_DWORD *)v165 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5E314);
  }
  return Slow;
}

unint64_t JSC::functionDeltaBetweenButterflies(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  unint64_t v9;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5E588);
  }
  v3 = *((int *)a2 + 8);
  v4 = v3 - 1;
  if (v3 == 1)
    return 0x7FFA000000000000;
  v5 = *((_QWORD *)a2 + 6);
  if ((v5 & 0xFFFE000000000002) != 0)
  {
    v5 = 0;
  }
  else if (*(unsigned __int8 *)(v5 + 5) <= 0x16u)
  {
    v5 = 0;
  }
  if (v4 < 2)
    return 0x7FFA000000000000;
  v6 = *((_QWORD *)a2 + 7);
  if ((v6 & 0xFFFE000000000002) != 0)
    return 0x7FFA000000000000;
  if (*(unsigned __int8 *)(v6 + 5) <= 0x16u)
    v7 = 0;
  else
    v7 = *((_QWORD *)a2 + 7);
  result = 0x7FFA000000000000;
  if (v5 && v7)
  {
    v9 = *(_QWORD *)(v5 + 8) - *(_QWORD *)(v7 + 8);
    if (v9 >> 31)
      return 0x7FFA000000000000;
    else
      return v9 | 0xFFFE000000000000;
  }
  return result;
}

unint64_t JSC::functionCurrentCPUTime(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  double v3;
  uint64_t v4;
  unint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7
    || ((WTF::CPUTime::forCurrentThread(this), (*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
     || (v4 = (int)v3, v3 != (double)(int)v4)
     || !(_DWORD)v4 && (*(_QWORD *)&v3 & 0x8000000000000000) != 0
      ? (result = *(_QWORD *)&v3 + 0x2000000000000)
      : (result = v4 | 0xFFFE000000000000),
        !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C5E628);
  }
  return result;
}

unint64_t JSC::functionTotalGCTime(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  double v3;
  uint64_t v4;
  unint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    v3 = *(double *)(*((_QWORD *)this + 7) + 1280);
    if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v4 = (int)v3, v3 == (double)(int)v4)
      && ((_DWORD)v4 || (*(_QWORD *)&v3 & 0x8000000000000000) == 0))
    {
      return v4 | 0xFFFE000000000000;
    }
    else
    {
      return *(_QWORD *)&v3 + 0x2000000000000;
    }
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

unint64_t JSC::functionParseCount(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5E718);
  }
  v3 = atomic_load(&JSC::globalParseCount);
  if ((v3 & 0x80000000) != 0)
    result = COERCE__INT64((double)v3) + 0x2000000000000;
  else
    result = v3 | 0xFFFE000000000000;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5E738);
  }
  return result;
}

uint64_t JSC::functionIsWasmSupported(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    if (BYTE2(dword_1ECF4C6C3))
      return 7;
    else
      return 6;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::functionMake16BitStringIfPossible(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5E8CCLL);
  }
  v9 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v30 = 10;
LABEL_20:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v30, this, a3, a4, a5, a6, a7, a8, (int **)&v31);
    goto LABEL_9;
  }
  v10 = *((_QWORD *)a2 + 6);
  v30 = v10;
  if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
    goto LABEL_20;
  v11 = *(WTF::StringImpl **)(v10 + 8);
  if ((v11 & 1) != 0)
  {
    v11 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v10, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (!v11)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v11)
LABEL_7:
    *(_DWORD *)v11 += 2;
LABEL_8:
  v31 = v11;
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_10;
LABEL_9:
  v29 = *(_DWORD *)(v9 + 80);
  if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v9 + 16))
  {
    v18 = 0;
  }
  else
  {
LABEL_10:
    WTF::String::convertTo16Bit(&v31, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v18 = JSC::jsString(v9, (JSC::VM *)&v31, v12, v13, v14, v15, v16, v17);
  }
  v19 = v31;
  v31 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5E90CLL);
  }
  return v18;
}

unint64_t JSC::functionGetStructureTransitionList(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  _QWORD *v16;
  int v17;
  unint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  __n128 v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  WTF *v68;
  JSC::VMTraps *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  uint64_t v73;
  _BYTE v74[64];

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_97;
  }
  v10 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v72 = (WTF *)10;
    goto LABEL_77;
  }
  v11 = *((_QWORD *)a2 + 6);
  v72 = (WTF *)v11;
  if ((v11 & 0xFFFE000000000002) != 0)
  {
LABEL_77:
    v65 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v72, this, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_78:
    v11 = v65;
    goto LABEL_5;
  }
  if (*(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    v65 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_78;
  }
LABEL_5:
  if (*(_DWORD *)(v10 + 80))
  {
    v66 = *(_DWORD *)(v10 + 80);
    if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
    {
      v26 = 0;
      goto LABEL_90;
    }
  }
  if (!v11)
  {
    v26 = 2;
    goto LABEL_90;
  }
  v72 = (WTF *)v74;
  a9.n128_u64[0] = 8;
  v73 = 8;
  v12 = *(_DWORD *)v11 & 0xFFFFFFFE;
  v13 = 16 * v12;
  v71 = (WTF::StringImpl *)(16 * v12);
  if ((_DWORD)v12)
  {
    v14 = 0;
    do
    {
      if (v14 == (_DWORD)v73)
      {
        v16 = (_QWORD *)WTF::Vector<JSC::Structure *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v72, v14 + 1, (unint64_t)&v71);
        v14 = HIDWORD(v73);
        *((_QWORD *)v72 + HIDWORD(v73)) = *v16;
      }
      else
      {
        *((_QWORD *)v72 + v14) = v13;
      }
      HIDWORD(v73) = ++v14;
      v13 = *((_QWORD *)v71 + 8);
      if (!v13)
        break;
      if (*(_BYTE *)(v13 + 5) != 1)
      {
        v15 = *(_DWORD *)(v13 + 80);
        if (!v15)
          break;
        v13 = 16 * (v15 & 0xFFFFFFFE);
      }
      v71 = (WTF::StringImpl *)v13;
    }
    while (v13);
  }
  v17 = *((_DWORD *)this + 227);
  if (v17)
    v18 = 16 * (v17 & 0xFFFFFFFE);
  else
    v18 = 0;
  v26 = JSC::JSArray::tryCreate((JSC::JSArray *)v10, v18, 0, (uint64_t)a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v67 = *(_DWORD *)(v10 + 80);
    if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v20, v21, v22, v23, v24, v25);
    if (*(_QWORD *)(v10 + 16))
    {
LABEL_86:
      v26 = 0;
      goto LABEL_87;
    }
  }
  v28 = HIDWORD(v73);
  if (HIDWORD(v73))
  {
    v29 = 0;
    v70 = (JSC::VMTraps *)(v10 + 64);
    v30 = -1;
    while (1)
    {
      v31 = __CFADD__(v28, v30);
      v32 = v28 + v30;
      if (!v31)
        break;
      v33 = *((_QWORD *)v72 + v32);
      v34 = v33 >> 4;
      if (((v33 >> 4) & 0x80000000) != 0)
      {
        v27.n128_f64[0] = (double)v34;
        v35 = COERCE__INT64((double)v34) + 0x2000000000000;
      }
      else
      {
        v35 = (v33 >> 4) | 0xFFFE000000000000;
      }
      JSC::JSArray::push(v26, (JSC::VM **)this, v35, v21, v22, v23, v24, v25, v27);
      if (*(_DWORD *)(v10 + 80))
      {
        v60 = *(_DWORD *)(v10 + 80);
        if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v70, 7u, v20, v21, v22, v23, v24, v25);
        if (*(_QWORD *)(v10 + 16))
          goto LABEL_86;
      }
      v37 = *(unsigned __int16 *)(v33 + 22);
      if ((_DWORD)v37 == 65534)
      {
        v37 = 0xFFFFFFFFLL;
      }
      else if ((_DWORD)v37 == 0xFFFF)
      {
        v37 = *(unsigned int *)(*(_QWORD *)(v33 + 64) + 88);
      }
      JSC::JSArray::push(v26, (JSC::VM **)this, v37 | 0xFFFE000000000000, v21, v22, v23, v24, v25, v36);
      if (*(_DWORD *)(v10 + 80))
      {
        v61 = *(_DWORD *)(v10 + 80);
        if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v70, 7u, v20, v21, v22, v23, v24, v25);
        if (*(_QWORD *)(v10 + 16))
          goto LABEL_86;
      }
      v39 = *(unsigned __int16 *)(v33 + 24);
      if ((_DWORD)v39 == 65534)
      {
        v39 = 0xFFFFFFFFLL;
      }
      else if ((_DWORD)v39 == 0xFFFF)
      {
        v39 = *(unsigned int *)(*(_QWORD *)(v33 + 64) + 84);
      }
      JSC::JSArray::push(v26, (JSC::VM **)this, v39 | 0xFFFE000000000000, v21, v22, v23, v24, v25, v38);
      if (*(_DWORD *)(v10 + 80))
      {
        v62 = *(_DWORD *)(v10 + 80);
        if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v70, 7u, v20, v21, v22, v23, v24, v25);
        if (*(_QWORD *)(v10 + 16))
          goto LABEL_86;
      }
      v41 = *(unsigned int *)(v33 + 72);
      if ((_DWORD)v41)
      {
        v42 = (WTF::StringImpl *)(16 * v41);
        *(_DWORD *)v42 += 2;
        v71 = v42;
        v43 = JSC::jsString(v10, (JSC::VM *)&v71, v20, v21, v22, v23, v24, v25);
        JSC::JSArray::push(v26, (JSC::VM **)this, v43, v44, v45, v46, v47, v48, v49);
        v51 = v71;
        v71 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
          {
            WTF::StringImpl::~StringImpl(v51, v19, v20, v21, v22, v23, v24, v25);
            WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
          }
          else
          {
            *(_DWORD *)v51 -= 2;
          }
        }
      }
      else
      {
        JSC::JSArray::push(v26, (JSC::VM **)this, 2uLL, v21, v22, v23, v24, v25, v40);
      }
      if (*(_DWORD *)(v10 + 80))
      {
        v63 = *(_DWORD *)(v10 + 80);
        if ((v63 & 0x27) != 0 && (v63 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v70, 7u, v20, v21, v22, v23, v24, v25);
        if (*(_QWORD *)(v10 + 16))
          goto LABEL_86;
      }
      JSC::JSArray::push(v26, (JSC::VM **)this, ((unint64_t)*(unsigned int *)(v33 + 16) >> 13) & 0x1F | 0xFFFE000000000000, v21, v22, v23, v24, v25, v50);
      if (*(_DWORD *)(v10 + 80))
      {
        v64 = *(_DWORD *)(v10 + 80);
        if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v70, 7u, v20, v21, v22, v23, v24, v25);
        if (*(_QWORD *)(v10 + 16))
          goto LABEL_86;
      }
      ++v29;
      v28 = HIDWORD(v73);
      --v30;
      if (v29 >= HIDWORD(v73))
        goto LABEL_87;
    }
    __break(0xC471u);
LABEL_97:
    JUMPOUT(0x198C5ED44);
  }
LABEL_87:
  v68 = v72;
  if (v74 != (_BYTE *)v72 && v72)
  {
    v72 = 0;
    LODWORD(v73) = 0;
    WTF::fastFree((unint64_t)v68, v19, v20, v21, v22, v23, v24, v25);
  }
LABEL_90:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5EDECLL);
  }
  return v26;
}

unint64_t JSC::functionGetConcurrently(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _BOOL8 v20;
  WTF::StringImpl *v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  WTF::StringImpl *v51;
  uint64_t v52;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5F060);
  }
  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v52 = 10;
    goto LABEL_35;
  }
  v12 = *((_QWORD *)a2 + 6);
  v52 = v12;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
LABEL_35:
    v47 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v52, this, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_36:
    v12 = v47;
    goto LABEL_5;
  }
  if (*(unsigned __int8 *)(v12 + 5) <= 0x16u)
  {
    v47 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v12, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_36;
  }
LABEL_5:
  if (*(_DWORD *)(v11 + 80))
  {
    v48 = *(_DWORD *)(v11 + 80);
    if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
    {
      v16 = 0;
      goto LABEL_29;
    }
  }
  if (!v12)
  {
    v16 = 2;
    goto LABEL_29;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v52 = 10;
LABEL_40:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v52, this, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v51);
    goto LABEL_14;
  }
  v13 = *((_QWORD *)a2 + 7);
  v52 = v13;
  if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 2)
    goto LABEL_40;
  v14 = *(WTF::StringImpl **)(v13 + 8);
  if ((v14 & 1) != 0)
  {
    v14 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v13, this, (uint64_t)a3, (uint64_t)a4, a9, a5, a6, a7, a8);
    if (!v14)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v14)
LABEL_12:
    *(_DWORD *)v14 += 2;
LABEL_13:
  v51 = v14;
LABEL_14:
  if (*(_DWORD *)(v11 + 80))
  {
    v49 = *(_DWORD *)(v11 + 80);
    if ((v49 & 0x27) != 0 && (v49 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_52;
  }
  v15 = v51;
  if (v51)
  {
    if ((*((_BYTE *)v51 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v51 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v11 + 41912), (unint64_t)v51, a3, (uint64_t)a4, a5, a6, a7, a8, &v52);
      v15 = (WTF::StringImpl *)v52;
    }
  }
  v17 = *(_DWORD *)v15;
  *(_DWORD *)v15 += 2;
  if (v17)
  {
    *(_DWORD *)v15 = v17;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v15, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    v17 = *(_DWORD *)v15;
  }
  v18 = v17 - 2;
  if (v18)
  {
    *(_DWORD *)v15 = v18;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v15, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
  }
  v19 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
  LODWORD(v52) = 0;
  v20 = JSC::Structure::getConcurrently(v19, v15, &v52, (uint64_t)a4, a5, a6, a7, a8) != -1;
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_25;
  v50 = *(_DWORD *)(v11 + 80);
  if ((v50 & 0x27) != 0 && (v50 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v11 + 16))
LABEL_52:
    v16 = 0;
  else
LABEL_25:
    v16 = v20 | 0xFFFE000000000000;
  v21 = v51;
  v51 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
LABEL_29:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5F0A0);
  }
  return v16;
}

uint64_t JSC::functionHasOwnLengthProperty(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5F1B8);
  }
  if (*(_BYTE *)(*((_QWORD *)a2 + 6) + 5) == 26)
    v3 = *((_QWORD *)a2 + 6);
  else
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 24);
  if ((v4 & 1) != 0)
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 48);
  else
    v5 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v5 + 5) == 8
    && &JSC::JSBoundFunction::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
  {
    return 6;
  }
  if ((v4 & 1) != 0 && (v6 = v4 & 0xFFFFFFFFFFFFFFFELL) != 0 && (*(_BYTE *)(v6 + 64) & 0xC) != 0)
    return 6;
  else
    return 7;
}

uint64_t JSC::functionRejectPromiseAsHandled(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v18;
  unint64_t v19;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5F288);
  }
  v8 = (uint64_t *)this;
  v10 = *((_QWORD *)a2 + 6);
  v9 = *((_QWORD *)a2 + 7);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 >= 0xFFFE000000000000 && (v11 & 0x80000000) == 0;
  v13 = COERCE_DOUBLE(v11 - 0x2000000000000);
  if (v12)
    v13 = *(_QWORD *)(v10 + 16);
  if ((v13 & 8) == 0)
  {
    v14 = (v13 & 0x80000000) != 0 ? COERCE__INT64((double)(v13 | 4)) + 0x2000000000000 : v13 | 0xFFFE000000000004;
    v15 = *((_QWORD *)this + 7);
    *(_QWORD *)(v10 + 16) = v14;
    v16 = v14 && (v14 & 0xFFFE000000000002) == 0;
    if (v16 && *(_DWORD *)(v15 + 760) >= *(unsigned __int8 *)(v10 + 7))
    {
      v19 = v10;
      v18 = v9;
      JSC::Heap::writeBarrierSlowPath(v15 + 192, v10);
      v9 = v18;
      v10 = v19;
      v8 = (uint64_t *)this;
    }
  }
  JSC::JSPromise::reject(v10, v8, v9, a4, a5, a6, a7, a8);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5F2A8);
  }
  return 10;
}

uint64_t JSC::functionSetUserPreferredLanguages(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  const WTF::String *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  WTF *v32;
  WTF *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  WTF::StringImpl *v55;
  WTF *v56;
  uint64_t v57;
  JSC::VM *v58;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5F578);
  }
  v4 = *((_QWORD *)this + 7);
  v58 = (JSC::VM *)v4;
  if (*((_DWORD *)a2 + 8) == 1
    || (v5 = *((_QWORD *)a2 + 6), (v5 & 0xFFFE000000000002) != 0)
    || (*(_BYTE *)(v5 + 5) & 0xFE) != 0x24)
  {
    v31 = JSC::throwTypeError((unint64_t)this, &v58, (uint64_t)"Expected first argument to be an array", 39);
    goto LABEL_38;
  }
  v56 = 0;
  v57 = 0;
  if ((*(_BYTE *)(v5 + 4) & 0xE) == 0 || (v6 = *(_DWORD *)(*(_QWORD *)(v5 + 8) - 8)) == 0)
  {
LABEL_34:
    WTF::overrideUserPreferredLanguages((uint64_t)&v56);
    v31 = 10;
    goto LABEL_35;
  }
  v7 = 0;
  while (1)
  {
    v8 = JSC::JSObject::get((JSC::JSObject *)v5, this, v7);
    v54 = v8;
    if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v54, this, v10, v11, v12, v13, v14, v15, (int **)&v55);
      goto LABEL_14;
    }
    v17 = *(WTF::StringImpl **)(v8 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v8, this, (uint64_t)v10, v11, v16, v12, v13, v14, v15);
      if (!v17)
        goto LABEL_13;
LABEL_12:
      *(_DWORD *)v17 += 2;
      goto LABEL_13;
    }
    if (v17)
      goto LABEL_12;
LABEL_13:
    v55 = v17;
LABEL_14:
    if (*(_DWORD *)(v4 + 80))
    {
      v30 = *(_DWORD *)(v4 + 80);
      if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, (uint64_t)v10, v11, v12, v13, v14, v15);
      if (*(_QWORD *)(v4 + 16))
        break;
    }
    v18 = HIDWORD(v57);
    if (HIDWORD(v57) == (_DWORD)v57)
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String&>((uint64_t)&v56, (unint64_t)&v55);
    }
    else
    {
      v29 = v55;
      v28 = v56;
      if (v55)
        *(_DWORD *)v55 += 2;
      *((_QWORD *)v28 + v18) = v29;
      HIDWORD(v57) = v18 + 1;
    }
    v19 = v55;
    v55 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    v7 = (v7 + 1);
    if (v6 == (_DWORD)v7)
      goto LABEL_34;
  }
  v45 = v55;
  v55 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  v31 = 0;
LABEL_35:
  if (HIDWORD(v57))
  {
    v34 = v56;
    v35 = 8 * HIDWORD(v57);
    do
    {
      v36 = *(WTF::StringImpl **)v34;
      *(_QWORD *)v34 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::~StringImpl(v36, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
        }
        else
        {
          *(_DWORD *)v36 -= 2;
        }
      }
      v34 = (WTF *)((char *)v34 + 8);
      v35 -= 8;
    }
    while (v35);
  }
  v32 = v56;
  if (v56)
  {
    v56 = 0;
    LODWORD(v57) = 0;
    WTF::fastFree((unint64_t)v32, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
  }
LABEL_38:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5F598);
  }
  return v31;
}

unint64_t JSC::functionICUVersion(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  char v5;
  char **v6;
  char *v7;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_8;
  }
  v3 = atomic_load(&WTF::ICU::version(void)::onceKey);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WTF::ICU::version(void)::onceKey, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_8:
    JUMPOUT(0x198C5F668);
  }
  return WTF::ICU::version(void)::versions | 0xFFFE000000000000;
}

unint64_t JSC::functionICUMinorVersion(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  char v5;
  char **v6;
  char *v7;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_8;
  }
  v3 = atomic_load(&WTF::ICU::version(void)::onceKey);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WTF::ICU::version(void)::onceKey, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_8:
    JUMPOUT(0x198C5F728);
  }
  return byte_1ECF44029 | 0xFFFE000000000000;
}

uint64_t JSC::functionICUHeaderVersion(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 0xFFFE00000000004ALL;
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t JSC::functionAssertEnabled(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 6;
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t JSC::functionSecurityAssertEnabled(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 6;
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t JSC::functionAsanEnabled(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 6;
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t JSC::functionIsMemoryLimited(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 7;
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t JSC::functionUseJIT(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    if (BYTE1(dword_1ECF4C240))
      return 7;
    else
      return 6;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::functionUseDFGJIT(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    if (HIBYTE(dword_1ECF4C240))
      return 7;
    else
      return 6;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::functionUseFTLJIT(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    if (HIBYTE(qword_1ECF4C414))
      return 7;
    else
      return 6;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::functionIsGigacageEnabled(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    if (byte_1ECF4C021)
      return 7;
    else
      return 6;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::functionToCacheableDictionary(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v10;
  uint64_t v11;
  JSC::VM *v13;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_12;
  }
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v13 = v10;
  if (*((_DWORD *)a2 + 8) == 1
    || (v11 = *((_QWORD *)a2 + 6), (v11 & 0xFFFE000000000002) != 0)
    || *(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    v11 = JSC::throwTypeError((unint64_t)this, &v13, (uint64_t)"Expected first argument to be an object", 40);
  }
  else if ((*(_DWORD *)((16 * *(unsigned int *)v11) | 0x10) & 3) != 2)
  {
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v11, v10, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_12:
    JUMPOUT(0x198C5FA48);
  }
  return v11;
}

unint64_t JSC::functionToUncacheableDictionary(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v10;
  unint64_t v11;
  JSC::VM *v13;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_11;
  }
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v13 = v10;
  if (*((_DWORD *)a2 + 8) == 1
    || (v11 = *((_QWORD *)a2 + 6), (v11 & 0xFFFE000000000002) != 0)
    || *(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    v11 = JSC::throwTypeError((unint64_t)this, &v13, (uint64_t)"Expected first argument to be an object", 40);
  }
  else
  {
    JSC::JSObject::convertToUncacheableDictionary(v11, v10, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_11:
    JUMPOUT(0x198C5FB20);
  }
  return v11;
}

uint64_t JSC::functionIsPrivateSymbol(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    if (*((_DWORD *)a2 + 8) == 1)
      return 6;
    v3 = *((_QWORD *)a2 + 6);
    if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 4)
    {
      return 6;
    }
    else if ((*(_BYTE *)(*(_QWORD *)(v3 + 8) + 36) & 4) != 0)
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::functionDumpAndResetPasDebugSpectrum(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t StatusReg;
  unsigned int v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_25;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v4, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_7;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_7:
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v6 = dword_1EE345100;
  if (dword_1EE345100)
  {
    v7 = 0;
    v8 = 0;
    v9 = pas_debug_spectrum;
    do
    {
      if (*(_QWORD *)(v9 + v7) != -1)
      {
        v10 = *(_QWORD *)(v9 + v7 + 8);
        if (*(_QWORD *)(v10 + 8))
        {
          (*(void (**)(uint64_t (***)(int, char *, va_list)))v10)(&pas_log_stream);
          pas_stream_printf((uint64_t (***)(_QWORD, uint64_t, uint64_t *))&pas_log_stream, (uint64_t)": %llu\n", v11, v12, v13, v14, v15, v16, *(_QWORD *)(v10 + 8));
          v9 = pas_debug_spectrum;
          v6 = dword_1EE345100;
        }
      }
      ++v8;
      v7 += 16;
    }
    while (v8 < v6);
  }
  os_unfair_lock_assert_owner(&pas_heap_lock);
  v17 = dword_1EE345100;
  if (dword_1EE345100)
  {
    v18 = pas_debug_spectrum + 8;
    do
    {
      if (*(_QWORD *)(v18 - 8) != -1)
        *(_QWORD *)(*(_QWORD *)v18 + 8) = 0;
      v18 += 16;
      --v17;
    }
    while (v17);
  }
  v19 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v20 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v20 != v19)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_23;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
LABEL_23:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x198C5FD6CLL);
  }
  return 10;
}

unint64_t JSC::functionMonotonicTimeNow(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  uint64_t v7;
  char v9;
  char **v10;
  char *v11;

  v3 = mach_absolute_time();
  v5 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v5 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v4) = dword_1ECF4400C;
  v6 = (double)(v3 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v4 * 1000000000.0) * 1000.0;
  if (COERCE_UNSIGNED_INT64(fabs(v6)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v7 = (int)v6, v6 == (double)(int)v7)
    && ((_DWORD)v7 || (*(_QWORD *)&v6 & 0x8000000000000000) == 0))
  {
    return v7 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v6 + 0x2000000000000;
  }
}

unint64_t JSC::functionWallTimeNow(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  double v3;
  uint64_t v4;

  v3 = WTF::WallTime::now(this) * 1000.0;
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v3, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (*(_QWORD *)&v3 & 0x8000000000000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t JSC::functionApproximateTimeNow(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  double v3;
  uint64_t v4;

  v3 = WTF::ApproximateTime::now(this) * 1000.0;
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v3, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (*(_QWORD *)&v3 & 0x8000000000000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t JSC::functionHeapExtraMemorySize(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  unint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C5FFECLL);
  }
  v3 = (_QWORD *)*((_QWORD *)this + 7);
  v4 = v3[67];
  v5 = v3[68];
  v6 = __CFADD__(v4, v5);
  v7 = v4 + v5;
  if (v6)
  {
    v10 = -1;
  }
  else
  {
    v8 = v3[66];
    v6 = __CFADD__(v7, v8);
    v9 = v7 + v8;
    if (v6)
      v10 = -1;
    else
      v10 = v9;
  }
  v11 = JSC::MarkedSpace::capacity((JSC::MarkedSpace *)(v3 + 44));
  if (v10 >= ~v11)
    v12 = ~v11;
  else
    v12 = v10;
  v13 = HIDWORD(v12);
  v14 = (double)v12;
  if ((v12 & 0x80000000) != 0)
    v15 = COERCE__INT64((double)v12) + 0x2000000000000;
  else
    v15 = v12 | 0xFFFE000000000000;
  if (v13)
    result = *(_QWORD *)&v14 + 0x2000000000000;
  else
    result = v15;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6000CLL);
  }
  return result;
}

uint64_t JSC::functionJITSizeStatistics(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JITSizeStatistics *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  void (**v35)(WTF::StringPrintStream *__hidden);
  WTF *v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C60158);
  }
  v8 = *((_QWORD *)this + 7);
  v9 = *(JSC::JITSizeStatistics **)(v8 + 41440);
  if (!v9)
    return 10;
  v35 = off_1E3572250;
  v36 = (WTF *)v38;
  v37 = xmmword_199122F80;
  v38[0] = 0;
  JSC::JITSizeStatistics::dump(v9, (WTF::PrintStream *)&v35, (uint64_t)a3, a4, a5, a6, a7, a8, (__n128)xmmword_199122F80);
  v35[5]((WTF::StringPrintStream *)&v35);
  if (v36)
    WTF::fromUTF8Impl<false>((unint64_t)v36, v37, (uint64_t *)&v34);
  else
    v34 = 0;
  v16 = JSC::jsString(v8, (JSC::VM *)&v34, v10, v11, v12, v13, v14, v15);
  v24 = v34;
  v34 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (v36 != (WTF *)v38)
    WTF::fastFree((unint64_t)v36, v17, v18, v19, v20, v21, v22, v23);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C60178);
  }
  return v16;
}

uint64_t JSC::functionDumpJITSizeStatistics(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JITSizeStatistics *v3;

  if (!(_BYTE)qword_1ECF4C6A7
    || (v3 = *(JSC::JITSizeStatistics **)(*((_QWORD *)this + 7) + 41440)) != 0
    && (WTF::dataLog<JSC::JITSizeStatistics,char [2]>(v3), !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C601E4);
  }
  return 10;
}

uint64_t JSC::functionResetJITSizeStatistics(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl ***v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_15;
  v8 = *(WTF::StringImpl ****)(*((_QWORD *)this + 7) + 41440);
  if (v8)
  {
    v9 = *v8;
    if (*v8)
    {
      *v8 = 0;
      v10 = *((unsigned int *)v9 - 1);
      if ((_DWORD)v10)
      {
        v11 = v9;
        do
        {
          v12 = *v11;
          if (*v11 != (WTF::StringImpl *)-1)
          {
            *v11 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2)
              {
                WTF::StringImpl::~StringImpl(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
              }
              else
              {
                *(_DWORD *)v12 -= 2;
              }
            }
          }
          v11 += 3;
          --v10;
        }
        while (v10);
      }
      WTF::fastFree((unint64_t)(v9 - 2), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!(_BYTE)qword_1ECF4C6A7)
      {
LABEL_15:
        __break(0xC471u);
        JUMPOUT(0x198C602D0);
      }
    }
  }
  return 10;
}

uint64_t JSC::functionAllowDoubleShape(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
  {
    if (BYTE1(dword_1ECF4C5C0))
      return 7;
    else
      return 6;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::functionEnsureArrayStorage(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;

  if (!(_BYTE)qword_1ECF4C6A7
    || *((_DWORD *)a2 + 8) != 1
    && (v9 = *((_QWORD *)a2 + 6), (v9 & 0xFFFE000000000002) == 0)
    && *(unsigned __int8 *)(v9 + 5) >= 0x17u
    && (*(_BYTE *)(v9 + 4) & 0xEu) <= 9
    && (JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)v9, this[7], (uint64_t)a3, a4, a5, a6, a7, a8, a9),
        !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C603BCLL);
  }
  return 10;
}

uint64_t JSC::functionSetCrashLogMessage(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, float a10)
{
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  char *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6057CLL);
  }
  v10 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v29 = 10;
LABEL_25:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this, a3, a4, a5, a6, a7, a8, (int **)&v30);
    goto LABEL_9;
  }
  v11 = *((_QWORD *)a2 + 6);
  v29 = v11;
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
    goto LABEL_25;
  v12 = *(WTF::StringImpl **)(v11 + 8);
  if ((v12 & 1) != 0)
  {
    v12 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v11, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (!v12)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v12)
LABEL_7:
    *(_DWORD *)v12 += 2;
LABEL_8:
  v30 = v12;
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_10;
LABEL_9:
  v28 = *(_DWORD *)(v10 + 80);
  if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
  {
    v17 = 0;
  }
  else
  {
LABEL_10:
    WTF::String::utf8((uint64_t *)&v30, 0, a4, a5, a6, a7, a8, &v29, a10);
    v13 = (_DWORD *)v29;
    if (v29)
    {
      v14 = strdup((const char *)(v29 + 16));
      v15 = (void *)WTF::setCrashLogMessage(char const*)::previousCopiedCrashLogMessage;
      WTF::setCrashLogMessage(char const*)::previousCopiedCrashLogMessage = (uint64_t)v14;
      free(v15);
      if (*v13 == 1)
        WTF::fastFree((unint64_t)v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      else
        --*v13;
    }
    else
    {
      v16 = (void *)WTF::setCrashLogMessage(char const*)::previousCopiedCrashLogMessage;
      WTF::setCrashLogMessage(char const*)::previousCopiedCrashLogMessage = 0;
      free(v16);
    }
    v17 = 10;
  }
  v18 = v30;
  v30 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C605BCLL);
  }
  return v17;
}

uint64_t JSC::functionAssertFrameAligned(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  if (!(_BYTE)qword_1ECF4C6A7 || (a2 & 0xF) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C60610);
  }
  return 10;
}

uint64_t JSC::functionCallFromCPPAsFirstEntry(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7
    || (v9 = *((_QWORD *)this + 7),
        v10 = *(_QWORD *)(v9 + 90568),
        *(_QWORD *)(v9 + 90568) = 0,
        result = JSC::functionCallFromCPP(this, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9),
        *(_QWORD *)(v9 + 90568) = v10,
        !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C606A4);
  }
  return result;
}

uint64_t JSC::functionCallFromCPP(JSC *this, unint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::JSObject *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  int v33;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD v40[4];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  int v46;
  uint64_t *v47;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C60AB8);
  }
  v9 = a2;
  if (*(_DWORD *)(a2 + 32) == 1)
    goto LABEL_67;
  v10 = *(_QWORD *)(a2 + 48);
  if ((v10 & 0xFFFE000000000002) != 0)
    goto LABEL_67;
  v12 = *((_QWORD *)this + 7);
  if (*(_BYTE *)(v10 + 5) == 26)
  {
    v13 = *(_QWORD *)(v10 + 24);
    if ((v13 & 1) != 0)
      v13 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v13 + 5) == 8)
    {
      LOBYTE(v42) = 1;
      v43 = *(_QWORD *)(v13 + 40);
      LOBYTE(v44) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v42) = 2;
      v14 = *(_QWORD *)(v10 + 16);
      v43 = v13;
      v44 = v14;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(&v42, *(_QWORD *)(a2 + 48));
    if (!(_BYTE)v42)
      goto LABEL_67;
  }
  if ((unint64_t)(*(int *)(v9 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v37 = 10;
LABEL_53:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v37, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v28 = v27;
    goto LABEL_55;
  }
  v15 = *(JSC::JSObject **)(v9 + 56);
  v37 = (uint64_t)v15;
  if ((unint64_t)v15 >= 0xFFFE000000000000)
    goto LABEL_12;
  v28 = (unint64_t)v15 - 0x2000000000000;
  if ((unint64_t)v15 - 0x2000000000000 >= 0xFFFC000000000000)
    goto LABEL_53;
LABEL_55:
  v29 = (v28 >> 52) & 0x7FF;
  v30 = v29 - 1023;
  v31 = v28 >> (51 - (v28 >> 52));
  if (v29 > 0x433)
    LODWORD(v31) = v28 << ((v28 >> 52) - 51);
  if (v29 >= 0x41F)
    v32 = v31;
  else
    v32 = (((1 << ((v28 >> 52) + 1)) - 1) & v31) + (1 << ((v28 >> 52) + 1));
  if ((v28 & 0x8000000000000000) == 0)
    v33 = v32;
  else
    v33 = -v32;
  if (v30 <= 0x53)
    LODWORD(v15) = v33;
  else
    LODWORD(v15) = 0;
LABEL_12:
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_13;
  v35 = *(_DWORD *)(v12 + 80);
  if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_13:
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v37) = 0;
      v38 = 0x800000000;
      v39 = (_OWORD *)((char *)v40 + 8);
      memset(v40, 0, sizeof(v40));
      v41 = 0;
      v16 = *(int *)(v9 + 32);
      if ((unint64_t)(v16 - 4) <= 0xFFFFFFFFFFFFFFFCLL)
      {
        a2 = v16 - 3;
        if ((unint64_t)(v16 - 3) >= 9
          && (a2 >> 31 || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v38, a2)))
        {
          LOBYTE(v37) = 1;
        }
        if ((unint64_t)(*(int *)(v9 + 32) - 4) <= 0xFFFFFFFFFFFFFFFCLL)
        {
          v17 = 3;
          v18 = 2;
          do
          {
            v19 = *(_QWORD *)(v9 + (((v18 << 32) + 0x600000000) >> 29));
            v20 = v38;
            if ((_DWORD)v38 == HIDWORD(v38))
            {
              if (!(v38 >> 30)
                && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v38, 2 * (int)v38))
              {
                v20 = v38;
LABEL_31:
                *((_QWORD *)v39 + v20) = v19;
                LODWORD(v38) = v20 + 1;
                if (!*(_QWORD *)&v40[0] && (v19 & 0xFFFE000000000002) == 0 && v19 != 0)
                {
                  v24 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 8);
                  if ((v19 & 8) != 0)
                    v24 = (_QWORD *)(v19 - 16);
                  *(_QWORD *)&v40[0] = *v24 + 560;
                  v47 = &v38;
                  WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v40[0], (uint64_t *)&v47, a4, a5, a6, a7, a8, (uint64_t)&v45);
                }
                goto LABEL_25;
              }
              LOBYTE(v37) = 1;
            }
            else
            {
              if (v39 != (_OWORD *)((char *)v40 + 8) && v39 != 0)
                goto LABEL_31;
              *((_QWORD *)v39 + v38) = v19;
              LODWORD(v38) = v20 + 1;
            }
LABEL_25:
            v18 = v17;
          }
          while (*(int *)(v9 + 32) - 1 > (unint64_t)v17++);
        }
      }
      if (!*(_DWORD *)(v12 + 80))
        goto LABEL_40;
      v36 = *(_DWORD *)(v12 + 80);
      if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!*(_QWORD *)(v12 + 16))
      {
LABEL_40:
        if ((int)v15 < 1)
        {
          v25 = 10;
LABEL_51:
          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v38, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_68;
        }
        v25 = 10;
        while (1)
        {
          v45 = v39;
          v46 = v38;
          JSC::call((uint64_t *)this, v10, (unsigned __int8 *)&v42, 2, (uint64_t)&v45, a6, a7, a8);
          if (*(_DWORD *)(v12 + 80))
          {
            v26 = *(_DWORD *)(v12 + 80);
            if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v12 + 16))
              break;
          }
          LODWORD(v15) = (_DWORD)v15 - 1;
          if (!(_DWORD)v15)
            goto LABEL_51;
        }
      }
      v25 = 0;
      goto LABEL_51;
    }
LABEL_67:
    v25 = 10;
    goto LABEL_68;
  }
  v25 = 0;
LABEL_68:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C60AD8);
  }
  return v25;
}

uint64_t JSC::functionCachedCallFromCPP(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::JSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  JSC::MarkedVectorBase *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v31;
  unint64_t v33;
  JSC::MarkedVectorBase *v34;
  uint64_t v35;
  int v36;
  JSC::VMTraps *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  JSC::CodeBlock *v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  JSC::CodeBlock *v59;
  int v60;
  JSC::VMTraps *v61;
  JSC::MarkedVectorBase *v62;
  uint64_t v63;
  JSC::JSObject *v64[3];
  uint64_t v65;
  _QWORD v66[7];
  char v67;
  _DWORD v68[2];
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[3];
  _BYTE v74[24];
  JSC::MarkedVectorBase *v75;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C60FECLL);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_86;
  v10 = *((_QWORD *)a2 + 6);
  if ((v10 & 0xFFFE000000000002) != 0)
    goto LABEL_86;
  v12 = *((_QWORD *)this + 7);
  if (*(_BYTE *)(v10 + 5) == 26)
  {
    v13 = *(_QWORD *)(v10 + 24);
    if ((v13 & 1) != 0)
      v13 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v13 + 5) == 8)
      goto LABEL_86;
    LOBYTE(v73[0]) = 2;
    v14 = *(_QWORD *)(v10 + 16);
    v73[1] = v13;
    v73[2] = v14;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD))(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                         + 0x38))(v73, *((_QWORD *)a2 + 6));
    if (LOBYTE(v73[0]) != 2)
      goto LABEL_86;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v64[0] = (JSC::JSObject *)10;
LABEL_72:
    JSC::JSValue::toNumberSlowCase(v64, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v50 = v49;
    goto LABEL_74;
  }
  v15 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
  v64[0] = v15;
  if ((unint64_t)v15 >= 0xFFFE000000000000)
    goto LABEL_11;
  v50 = (unint64_t)v15 - 0x2000000000000;
  if ((unint64_t)v15 - 0x2000000000000 >= 0xFFFC000000000000)
    goto LABEL_72;
LABEL_74:
  v51 = (v50 >> 52) & 0x7FF;
  v52 = v51 - 1023;
  v53 = v50 >> (51 - (v50 >> 52));
  if (v51 > 0x433)
    LODWORD(v53) = v50 << ((v50 >> 52) - 51);
  if (v51 >= 0x41F)
    v54 = v53;
  else
    v54 = (((1 << ((v50 >> 52) + 1)) - 1) & v53) + (1 << ((v50 >> 52) + 1));
  if ((v50 & 0x8000000000000000) == 0)
    v55 = v54;
  else
    v55 = -v54;
  if (v52 <= 0x53)
    LODWORD(v15) = v55;
  else
    LODWORD(v15) = 0;
LABEL_11:
  if (*(_DWORD *)(v12 + 80))
  {
    v56 = *(_DWORD *)(v12 + 80);
    if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
      v35 = 0;
      goto LABEL_95;
    }
  }
  if ((v15 & 0x80000000) != 0)
  {
LABEL_86:
    v35 = 10;
    goto LABEL_95;
  }
  JSC::CachedCall::CachedCall((JSC::CachedCall *)v64, this, (JSC::JSFunction *)v10, (*((_DWORD *)a2 + 8) - 3), a5, a6, a7, a8);
  if (*(_DWORD *)(v12 + 80))
  {
    v57 = *(_DWORD *)(v12 + 80);
    if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v17, v18, v19, v20, v21, v22);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_93;
  }
  v67 = 0;
  v68[0] = 0;
  v23 = 1;
  if ((unint64_t)(*((int *)a2 + 8) - 4) <= 0xFFFFFFFFFFFFFFFCLL)
  {
    v24 = (JSC::MarkedVectorBase *)v68;
    v25 = 3;
    v26 = 2;
    while (1)
    {
      v27 = *(_QWORD *)((char *)a2 + (((v26 << 32) + 0x600000000) >> 29));
      v28 = v68[0];
      if (v68[0] == v68[1])
      {
        if (!(v68[0] >> 30))
        {
          v62 = v24;
          v31 = JSC::MarkedVectorBase::expandCapacity(v24, 2 * v68[0]);
          v24 = v62;
          if (!v31)
          {
            v28 = v68[0];
LABEL_29:
            v69[v28] = v27;
            v68[0] = v28 + 1;
            if (!v70 && (v27 & 0xFFFE000000000002) == 0 && v27 != 0)
            {
              v33 = v27 & 0xFFFFFFFFFFFFC000 | 8;
              if ((v27 & 8) != 0)
                v33 = v27 - 16;
              v70 = (uint64_t *)(*(_QWORD *)v33 + 560);
              v75 = v24;
              v34 = v24;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v70, (uint64_t *)&v75, v18, v19, v20, v21, v22, (uint64_t)v74);
              v24 = v34;
            }
            goto LABEL_23;
          }
        }
        v67 = 1;
      }
      else
      {
        if (v69 != &v71 && v69 != 0)
          goto LABEL_29;
        v69[v68[0]] = v27;
        v68[0] = v28 + 1;
      }
LABEL_23:
      v26 = v25;
      if (*((int *)a2 + 8) - 1 <= (unint64_t)v25++)
      {
        v23 = v67 == 0;
        break;
      }
    }
  }
  v66[3] = 2;
  v35 = 10;
  if (!v23 || (int)v15 < 1)
    goto LABEL_94;
  v36 = 0;
  v37 = (JSC::VMTraps *)(v12 + 64);
  v35 = 10;
  while (1)
  {
    v38 = v65;
    v39 = v72;
    if (v72)
      goto LABEL_41;
    v61 = v37;
    v40 = (unsigned int *)(v65 + 80);
    v41 = v65;
    v60 = *(_DWORD *)(v65 + 80);
    if ((v60 & 0x20) == 0)
    {
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 | 0x20, v40));
      v41 = v65;
    }
    v63 = v41;
    v43 = JSC::Interpreter::prepareForCachedCall((JSC::Interpreter *)(v41 + 90560), (JSC::CachedCall *)v64, (JSC::JSFunction *)v66[1], v18, v19, v20, v21, v22);
    if (!*(_DWORD *)(v63 + 80))
      goto LABEL_49;
    v59 = v43;
    v47 = *(_DWORD *)(v63 + 80);
    if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v63 + 64), 7u, v17, v18, v19, v20, v21, v22);
    v43 = v59;
    if (!*(_QWORD *)(v63 + 16))
LABEL_49:
      v66[0] = v43;
    if (!*v40)
      goto LABEL_51;
    v48 = *(_DWORD *)(v38 + 80);
    if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, v17, v18, v19, v20, v21, v22);
    if (*(_QWORD *)(v38 + 16))
    {
      v44 = 0;
      v39 = 0;
    }
    else
    {
LABEL_51:
      v44 = 1;
      v39 = v72;
    }
    if ((v60 & 0x20) == 0)
    {
      do
        v45 = __ldaxr(v40);
      while (__stlxr(v45 & 0xFFFFFFDF, v40));
    }
    v37 = v61;
    if (v44)
LABEL_41:
      vmEntryToJavaScript(v39, (JSC::VM *)v38, (uint64_t)v66, v18, v19, v20, v21, v22);
    *(_BYTE *)(v38 + 93120) = 1;
    if (*(_DWORD *)(v12 + 80))
    {
      v46 = *(_DWORD *)(v12 + 80);
      if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v37, 7u, v17, v18, v19, v20, v21, v22);
      if (*(_QWORD *)(v12 + 16))
        break;
    }
    if (++v36 == (_DWORD)v15)
      goto LABEL_94;
  }
LABEL_93:
  v35 = 0;
LABEL_94:
  JSC::CachedCall::~CachedCall((JSC::CachedCall *)v64, v16, v17, v18, v19, v20, v21, v22);
LABEL_95:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6107CLL);
  }
  return v35;
}

uint64_t JSC::functionDumpLineBreakData(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _opaque_pthread_t *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v37;
  _BOOL4 v39;
  char v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  WTF::StringImpl *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _opaque_pthread_t *v87;
  unint64_t v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl **v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t j;
  unint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  unint64_t kk;
  unint64_t mm;
  uint64_t nn;
  uint64_t v170;
  uint64_t v171;
  uint64_t i1;
  uint64_t i2;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t i3;
  unint64_t v179;
  unint64_t i4;
  unint64_t i5;
  unint64_t i6;
  unint64_t i7;
  unint64_t i8;
  unint64_t i9;
  unint64_t i10;
  unint64_t i11;
  unint64_t i12;
  unint64_t i13;
  unint64_t i14;
  unint64_t i15;
  unint64_t i16;
  unint64_t i17;
  unint64_t i18;
  uint64_t i19;
  unint64_t i20;
  unint64_t i21;
  unint64_t i22;
  unint64_t i23;
  unint64_t i24;
  uint64_t i25;
  unint64_t i26;
  unint64_t i27;
  unint64_t i28;
  const char *v205;
  const char *v206;
  int i29;
  char *v208;
  const char *v209;
  unint64_t i30;
  uint64_t v211;
  const char *v212;
  unint64_t v213;
  const char *v214;
  WTF::StringImpl **v216;
  unint64_t StatusReg;
  uint64_t v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t *v221;
  uint64_t *v222;
  _BYTE *v223;
  uint64_t *v224;
  uint64_t *v225;
  unsigned int v226;
  char *v227;
  char *v228;
  _BYTE v229[384];
  unint64_t v230;
  uint64_t v231;
  _BYTE v232[512];
  _QWORD v233[772];
  WTF::StringImpl *v234;
  unint64_t v235;
  _QWORD v236[2];
  uint64_t v237[2];
  uint64_t **v238;
  uint64_t *v239;
  _QWORD *v240;
  uint64_t v241;
  char v242;
  WTF::StringImpl **v243;
  uint64_t v244;
  int v245;
  char v246;
  uint64_t v247;
  WTF::StringImpl **v248;
  uint64_t v249;
  int v250;
  char v251;
  uint64_t v252;
  WTF::StringImpl **v253;
  uint64_t v254;
  int v255;
  char v256;
  uint64_t v257;
  WTF::StringImpl **v258;
  uint64_t v259;
  char v260;
  int v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  char v264;
  WTF::StringImpl *v265;
  char v266;
  unsigned int v267;
  unint64_t v268;
  char v269;
  WTF::StringImpl *v270;
  uint64_t v271;

  MEMORY[0x1E0C80A78](this, a2);
  v271 = *MEMORY[0x1E0C80C00];
  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_258;
  bzero(v229, 0x1BE0uLL);
  v216 = &v263;
  v227 = &v266;
  v228 = &v260;
  v224 = &v262;
  v225 = (uint64_t *)&v268;
  v221 = &v247;
  v222 = &v241;
  v219 = &v257;
  v220 = &v252;
  v3 = 33;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    v226 = (unsigned __int16)v3;
    v218 = v3;
    v223 = &v229[32 * v3 - 1056];
    for (i = 33; i != 256; ++i)
    {
      if (((unsigned __int16)i | v226) > 0xFF)
      {
        WTF::tryFastCompactMalloc((WTF *)0x18, &v239);
        v5 = (unint64_t)v239;
        if (!v239)
          goto LABEL_258;
        *((_WORD *)v239 + 10) = v226;
        v6 = v5 + 20;
        *(_QWORD *)v5 = 0x200000002;
        *(_QWORD *)(v5 + 8) = v5 + 20;
        *(_DWORD *)(v5 + 16) = 0;
        *(_WORD *)(v5 + 22) = i;
        v7 = 2;
      }
      else
      {
        WTF::tryFastCompactMalloc((WTF *)0x16, &v239);
        v5 = (unint64_t)v239;
        if (!v239)
          goto LABEL_258;
        *((_BYTE *)v239 + 20) = v218;
        v6 = v5 + 20;
        *(_QWORD *)v5 = 0x200000002;
        *(_QWORD *)(v5 + 8) = v5 + 20;
        *(_DWORD *)(v5 + 16) = 4;
        *(_BYTE *)(v5 + 21) = i;
        v7 = 0x100000002;
      }
      v8 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v8 = 0x200000002;
      *(_QWORD *)(v8 + 8) = "en";
      *(_DWORD *)(v8 + 16) = 4;
      v265 = (WTF::StringImpl *)v8;
      WTF::AtomStringImpl::addSlowCase(&v265, v9, v10, v11, v12, v13, v14, (WTF *)&v239);
      v22 = (WTF::StringImpl *)v239;
      if (v265)
      {
        if (*(_DWORD *)v265 == 2)
        {
          WTF::StringImpl::~StringImpl(v265, v15, v16, v17, v18, v19, v20, v21);
          WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
        }
        else
        {
          *(_DWORD *)v265 -= 2;
        }
      }
      v234 = v22;
      v23 = pthread_self();
      if (!pthread_equal(v23, (pthread_t)WTF::s_webThreadPthread) && !pthread_main_np()
        || WebCoreWebThreadIsLockedOrDisabled && !WebCoreWebThreadIsLockedOrDisabled())
      {
        v236[0] = 0;
        v239 = (uint64_t *)v6;
        BYTE4(v240) = BYTE4(v7);
        LODWORD(v240) = v7;
        v43 = v222;
        *v222 = 0;
        v43[1] = 0;
        v242 = 1;
        v243 = &v234;
        v244 = v6;
        v246 = BYTE4(v7);
        v245 = v7;
        v44 = v221;
        *v221 = 0;
        v44[1] = 0;
        v248 = &v234;
        v249 = v6;
        v251 = BYTE4(v7);
        v250 = v7;
        v45 = v220;
        *v220 = 0;
        v45[1] = 0;
        v253 = &v234;
        v254 = v6;
        v256 = BYTE4(v7);
        v255 = v7;
        v46 = v219;
        *v219 = 0;
        v46[1] = 0;
        v258 = &v234;
        v237[0] = (uint64_t)&v239;
        std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_0,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_1,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_2,WTF::TextBreakIterator::mapModeToBackingIterator(WTF::StringView,std::span<char16_t const,18446744073709551615ul>,std::variant<WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode>,WTF::TextBreakIterator::ContentAnalysis,WTF::AtomString const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::TextBreakIterator::CaretMode,WTF::TextBreakIterator::DeleteMode,WTF::TextBreakIterator::CharacterMode> &>(v237, (unsigned __int8 *)v236, v26, v27, v28, v29, v30, (uint64_t)&v265, v31);
        v268 = 0;
        goto LABEL_61;
      }
      v32 = atomic_load(&WTF::TextBreakIteratorCache::singleton(void)::onceKey);
      if (v32 != -1)
      {
        v239 = v236;
        v237[0] = (uint64_t)&v239;
        std::__call_once(&WTF::TextBreakIteratorCache::singleton(void)::onceKey, v237, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::TextBreakIteratorCache::singleton(void)::$_0 &&>>);
      }
      v235 = 0;
      v33 = WTF::TextBreakIteratorCache::singleton(void)::cache;
      if (!HIDWORD(qword_1EE342B30))
      {
        v42 = 0;
        v41 = WTF::TextBreakIteratorCache::singleton(void)::cache;
        goto LABEL_42;
      }
      v34 = WTF::TextBreakIteratorCache::singleton(void)::cache + 80 * HIDWORD(qword_1EE342B30);
      v35 = 80 * HIDWORD(qword_1EE342B30);
      do
      {
        v237[0] = *(_QWORD *)(v33 + 56);
        v37 = HIDWORD(v235) == HIDWORD(v237[0]) && HIDWORD(v235) != -1;
        if (HIDWORD(v237[0]) == -1 || !v37)
        {
          if (HIDWORD(v237[0]) == -1)
            v39 = HIDWORD(v235) == -1;
          else
            v39 = v37;
          if (!v39)
            goto LABEL_37;
        }
        else
        {
          v239 = v236;
          v40 = ((uint64_t (*)(uint64_t **, uint64_t *, unint64_t *))off_1E35B35F0[HIDWORD(v237[0])])(&v239, v237, &v235);
          if ((v40 & 1) == 0)
            goto LABEL_37;
        }
        if (*(_BYTE *)(v33 + 64) && *(WTF::StringImpl **)(v33 + 72) == v234)
          goto LABEL_39;
LABEL_37:
        v33 += 80;
        v35 -= 80;
      }
      while (v35);
      v33 = v34;
LABEL_39:
      v41 = v33;
      v33 = WTF::TextBreakIteratorCache::singleton(void)::cache;
      v42 = HIDWORD(qword_1EE342B30);
LABEL_42:
      if (v41 != v33 + 80 * v42)
      {
        v266 = 0;
        v267 = -1;
        v54 = *(unsigned int *)(v41 + 48);
        if ((_DWORD)v54 != -1)
        {
          ((void (*)(uint64_t **, char *, uint64_t))off_1E35B3630[v54])(&v239, v227, v41 + 8);
          v267 = v54;
        }
        v55 = *(_QWORD *)(v41 + 56);
        v56 = v225;
        *((_BYTE *)v225 + 8) = *(_BYTE *)(v41 + 64);
        *v56 = v55;
        v57 = *(WTF::StringImpl **)(v41 + 72);
        *(_QWORD *)(v41 + 72) = 0;
        v270 = v57;
        v58 = *(WTF::StringImpl **)(v41 + 72);
        *(_QWORD *)(v41 + 72) = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
          {
            WTF::StringImpl::~StringImpl(v58, v24, v25, v26, v27, v28, v29, v30);
            WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
          }
          else
          {
            *(_DWORD *)v58 -= 2;
          }
        }
        v59 = *(unsigned int *)(v41 + 48);
        if ((_DWORD)v59 != -1)
          ((void (*)(uint64_t **, uint64_t))off_1E35B3610[v59])(&v239, v41 + 8);
        *(_DWORD *)(v41 + 48) = -1;
        v60 = v41 + 80;
        v61 = HIDWORD(qword_1EE342B30);
        v62 = WTF::TextBreakIteratorCache::singleton(void)::cache + 80 * HIDWORD(qword_1EE342B30);
        if (v60 != v62)
        {
          do
          {
            *(_BYTE *)(v60 - 72) = 0;
            *(_DWORD *)(v60 - 32) = -1;
            v63 = *(unsigned int *)(v60 + 48);
            if ((_DWORD)v63 != -1)
            {
              ((void (*)(uint64_t **))off_1E35B3630[v63])(&v239);
              *(_DWORD *)(v60 - 32) = v63;
            }
            *(_QWORD *)(v60 - 24) = *(_QWORD *)(v60 + 56);
            *(_BYTE *)(v60 - 16) = *(_BYTE *)(v60 + 64);
            *(_QWORD *)(v60 - 8) = *(_QWORD *)(v60 + 72);
            *(_QWORD *)(v60 + 72) = 0;
            v64 = *(unsigned int *)(v60 + 48);
            if ((_DWORD)v64 != -1)
              ((void (*)(uint64_t **, uint64_t))off_1E35B3610[v64])(&v239, v60 + 8);
            *(_DWORD *)(v60 + 48) = -1;
            v60 += 80;
          }
          while (v60 != v62);
          v61 = HIDWORD(qword_1EE342B30);
        }
        HIDWORD(qword_1EE342B30) = v61 - 1;
        v237[0] = v6;
        v237[1] = v7;
        v236[1] = 0;
        v236[0] = 0;
        v239 = v237;
        v240 = v236;
        if (v267 != -1)
        {
          v238 = &v239;
          ((void (*)(uint64_t ***, char *))off_1E35B3650[v267])(&v238, v227);
          goto LABEL_64;
        }
LABEL_255:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_258:
        __break(0xC471u);
        JUMPOUT(0x198C628FCLL);
      }
      v65 = v235;
      v236[0] = v235;
      v239 = (uint64_t *)v6;
      BYTE4(v240) = BYTE4(v7);
      LODWORD(v240) = v7;
      v66 = v222;
      *v222 = 0;
      v66[1] = 0;
      v242 = 1;
      v243 = &v234;
      v244 = v6;
      v246 = BYTE4(v7);
      v245 = v7;
      v67 = v221;
      *v221 = 0;
      v67[1] = 0;
      v248 = &v234;
      v249 = v6;
      v251 = BYTE4(v7);
      v250 = v7;
      v68 = v220;
      *v220 = 0;
      v68[1] = 0;
      v253 = &v234;
      v254 = v6;
      v256 = BYTE4(v7);
      v255 = v7;
      v69 = v219;
      *v219 = 0;
      v69[1] = 0;
      v258 = &v234;
      if (HIDWORD(v65) == 0xFFFFFFFF)
        goto LABEL_255;
      v237[0] = (uint64_t)&v239;
      ((void (*)(WTF::StringImpl **__return_ptr, uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_17TextBreakIterator24mapModeToBackingIteratorENS6_10StringViewENS_4spanIKDsLm18446744073709551615EEENS_7variantIJNS8_8LineModeENS8_9CaretModeENS8_10DeleteModeENS8_13CharacterModeEEEENS8_15ContentAnalysisERKNS6_10AtomStringEE3__0JZNS8_24mapModeToBackingIteratorES9_SC_SI_SJ_SM_E3__1ZNS8_24mapModeToBackingIteratorES9_SC_SI_SJ_SM_E3__2ZNS8_24mapModeToBackingIteratorES9_SC_SI_SJ_SM_E3__3EEEEEJRNS0_6__implIJSE_SF_SG_SH_EEEEEEDcOT_DpOT0____fmatrix[HIDWORD(v65)])(&v265, v237, v236);
      v268 = v65;
LABEL_61:
      v269 = 1;
      v70 = v234;
      if (v234)
        *(_DWORD *)v234 += 2;
      v270 = v70;
LABEL_64:
      v260 = 0;
      v261 = -1;
      v71 = v267;
      if (v267 == -1)
      {
        v72 = 0xFFFFFFFFLL;
      }
      else
      {
        ((void (*)(uint64_t **, char *, char *))off_1E35B3630[v267])(&v239, v228, v227);
        v261 = v71;
        v72 = v267;
      }
      v73 = v224;
      v74 = v225;
      *v224 = *v225;
      *((_BYTE *)v73 + 8) = *((_BYTE *)v74 + 8);
      v263 = v270;
      v264 = 1;
      v270 = 0;
      if (v72 != 0xFFFFFFFFLL)
        ((void (*)(uint64_t **, char *))off_1E35B3610[v72])(&v239, v227);
      v75 = v234;
      v234 = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 != 2)
        {
          *(_DWORD *)v75 -= 2;
          goto LABEL_72;
        }
        WTF::StringImpl::~StringImpl(v75, v47, v48, v49, v50, v51, v52, v53);
        v120 = *(_QWORD *)(StatusReg + 752);
        if (v120)
        {
          if ((unint64_t)v75 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)v75 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v75)) & 1) == 0)
          {
            if ((unint64_t)v75 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v75 >> 24)
            {
              v115 = 0;
            }
            else
            {
              v115 = (*(_DWORD *)((char *)off_1ECF425F8
                                + (((((unint64_t)v75 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v75) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v115 == 1)
                goto LABEL_119;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v120, (unint64_t)v75, 1, v115, v116, v117, v118, v119);
          }
          else
          {
LABEL_119:
            v121 = *(unsigned int *)(v120 + 8000);
            if (v121 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v120, (uint64_t)v75, (os_unfair_lock_s *)5, v115, v116, v117, v118, v119);
            }
            else
            {
              *(_QWORD *)(v120 + 8 * v121) = (unint64_t)v75 | 0x5000000000000;
              *(_DWORD *)(v120 + 8000) = v121 + 1;
            }
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache((unint64_t)v75, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_72:
      if (!v264)
        goto LABEL_254;
      LODWORD(v237[0]) = 1;
      v265 = (WTF::StringImpl *)v237;
      if (v261 == -1)
        goto LABEL_255;
      v239 = (uint64_t *)&v265;
      v76 = ((uint64_t (*)(uint64_t **, char *))off_1E35B3670[v261])(&v239, v228);
      v84 = 1 << (i - 33);
      v85 = ((unint64_t)(i - 33) >> 3) & 0x1FFFFFFFFFFFFFF8;
      if (v76)
        v86 = *(_QWORD *)&v223[v85] | v84;
      else
        v86 = *(_QWORD *)&v223[v85] & ~v84;
      *(_QWORD *)&v223[v85] = v86;
      if (!v264)
        goto LABEL_112;
      v87 = pthread_self();
      if (!pthread_equal(v87, (pthread_t)WTF::s_webThreadPthread) && !pthread_main_np()
        || WebCoreWebThreadIsLockedOrDisabled && !WebCoreWebThreadIsLockedOrDisabled())
      {
        goto LABEL_106;
      }
      v88 = atomic_load(&WTF::TextBreakIteratorCache::singleton(void)::onceKey);
      if (v88 != -1)
      {
        v239 = v237;
        v265 = (WTF::StringImpl *)&v239;
        std::__call_once(&WTF::TextBreakIteratorCache::singleton(void)::onceKey, &v265, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::TextBreakIteratorCache::singleton(void)::$_0 &&>>);
      }
      if (!v264)
      {
LABEL_254:
        __break(1u);
        goto LABEL_255;
      }
      v89 = HIDWORD(qword_1EE342B30);
      if (HIDWORD(qword_1EE342B30) == (_DWORD)qword_1EE342B30)
      {
        v90 = WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&WTF::TextBreakIteratorCache::singleton(void)::cache, HIDWORD(qword_1EE342B30) + 1, (unint64_t)&v259, v79, v80, v81, v82, v83);
        v91 = v90;
        v92 = HIDWORD(qword_1EE342B30);
        v93 = WTF::TextBreakIteratorCache::singleton(void)::cache;
        v94 = WTF::TextBreakIteratorCache::singleton(void)::cache + 80 * HIDWORD(qword_1EE342B30);
        *(_BYTE *)(v94 + 8) = 0;
        v77 = (WTF::AtomStringImpl *)(v94 + 8);
        *(_DWORD *)(v94 + 48) = -1;
        v95 = *(unsigned int *)(v90 + 48);
        if ((_DWORD)v95 != -1)
        {
          ((void (*)(uint64_t **, WTF::AtomStringImpl *, unint64_t))off_1E35B3630[v95])(&v239, v77, v90 + 8);
          *(_DWORD *)(v94 + 48) = v95;
        }
        v96 = (WTF::StringImpl **)(v91 + 72);
        v97 = *(_QWORD *)(v91 + 56);
        v98 = v93 + 80 * v92;
        *(_BYTE *)(v98 + 64) = *(_BYTE *)(v91 + 64);
        *(_QWORD *)(v98 + 56) = v97;
        v99 = (WTF::StringImpl **)(v98 + 72);
      }
      else
      {
        v100 = WTF::TextBreakIteratorCache::singleton(void)::cache;
        v101 = WTF::TextBreakIteratorCache::singleton(void)::cache + 80 * HIDWORD(qword_1EE342B30);
        *(_BYTE *)(v101 + 8) = 0;
        v77 = (WTF::AtomStringImpl *)(v101 + 8);
        *(_DWORD *)(v101 + 48) = -1;
        v102 = v261;
        if (v261 != -1)
        {
          ((void (*)(uint64_t **, WTF::AtomStringImpl *, char *))off_1E35B3630[v261])(&v239, v77, v228);
          *(_DWORD *)(v101 + 48) = v102;
        }
        v103 = *v224;
        v104 = v100 + 80 * v89;
        *(_BYTE *)(v104 + 64) = *((_BYTE *)v224 + 8);
        *(_QWORD *)(v104 + 56) = v103;
        v99 = (WTF::StringImpl **)(v104 + 72);
        v96 = v216;
      }
      v105 = *v96;
      *v96 = 0;
      *v99 = v105;
      if (++HIDWORD(qword_1EE342B30) >= 3u)
      {
        v106 = WTF::TextBreakIteratorCache::singleton(void)::cache;
        v107 = *(WTF::StringImpl **)(WTF::TextBreakIteratorCache::singleton(void)::cache + 72);
        *(_QWORD *)(WTF::TextBreakIteratorCache::singleton(void)::cache + 72) = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
          {
            WTF::StringImpl::~StringImpl(v107, v77, v78, v79, v80, v81, v82, v83);
            WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
          }
          else
          {
            *(_DWORD *)v107 -= 2;
          }
        }
        v108 = *(unsigned int *)(v106 + 48);
        if ((_DWORD)v108 != -1)
          ((void (*)(uint64_t **, uint64_t))off_1E35B3610[v108])(&v239, v106 + 8);
        *(_DWORD *)(v106 + 48) = -1;
        v109 = v106 + 80;
        v110 = HIDWORD(qword_1EE342B30);
        v111 = WTF::TextBreakIteratorCache::singleton(void)::cache + 80 * HIDWORD(qword_1EE342B30);
        if (v109 != v111)
        {
          do
          {
            *(_BYTE *)(v109 - 72) = 0;
            v77 = (WTF::AtomStringImpl *)(v109 - 72);
            *(_DWORD *)(v109 - 32) = -1;
            v112 = *(unsigned int *)(v109 + 48);
            if ((_DWORD)v112 != -1)
            {
              ((void (*)(uint64_t **))off_1E35B3630[v112])(&v239);
              *(_DWORD *)(v109 - 32) = v112;
            }
            *(_QWORD *)(v109 - 24) = *(_QWORD *)(v109 + 56);
            *(_BYTE *)(v109 - 16) = *(_BYTE *)(v109 + 64);
            *(_QWORD *)(v109 - 8) = *(_QWORD *)(v109 + 72);
            *(_QWORD *)(v109 + 72) = 0;
            v113 = *(unsigned int *)(v109 + 48);
            if ((_DWORD)v113 != -1)
              ((void (*)(uint64_t **, uint64_t))off_1E35B3610[v113])(&v239, v109 + 8);
            *(_DWORD *)(v109 + 48) = -1;
            v109 += 80;
          }
          while (v109 != v111);
          v110 = HIDWORD(qword_1EE342B30);
        }
        HIDWORD(qword_1EE342B30) = v110 - 1;
      }
LABEL_106:
      if (v264)
      {
        v114 = v263;
        v263 = 0;
        if (v114)
        {
          if (*(_DWORD *)v114 == 2)
          {
            WTF::StringImpl::~StringImpl(v114, v77, v78, v79, v80, v81, v82, v83);
            WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
          }
          else
          {
            *(_DWORD *)v114 -= 2;
          }
        }
        if (v261 != -1)
          ((void (*)(uint64_t **, char *))off_1E35B3610[v261])(&v239, v228);
      }
LABEL_112:
      if (*(_DWORD *)v5 != 2)
      {
        *(_DWORD *)v5 -= 2;
        continue;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v5, v77, v78, v79, v80, v81, v82, v83);
      v127 = *(_QWORD *)(StatusReg + 752);
      if (v127)
      {
        if (v5 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v5 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v5)) & 1) == 0)
        {
          if (v5 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v5 >> 24)
          {
            v122 = 0;
          }
          else
          {
            v122 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v5 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v5) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v122 == 1)
              goto LABEL_124;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v127, v5, 1, v122, v123, v124, v125, v126);
        }
        else
        {
LABEL_124:
          v128 = *(unsigned int *)(v127 + 8000);
          if (v128 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v127, v5, (os_unfair_lock_s *)5, v122, v123, v124, v125, v126);
          }
          else
          {
            *(_QWORD *)(v127 + 8 * v128) = v5 | 0x5000000000000;
            *(_DWORD *)(v127 + 8000) = v128 + 1;
          }
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v5, (uint64_t)&bmalloc_heap_config, 1);
      }
    }
    v3 = v218 + 1;
  }
  while (v218 != 255);
  for (j = 33; j != 128; ++j)
  {
    for (k = 0; k != 95; ++k)
      *(_QWORD *)&v229[32 * j - 1056 + ((k >> 3) & 0x1FFFFFFFFFFFFFF8)] &= ~(1 << k);
  }
  for (m = 0; m != 3040; m += 32)
    *(_QWORD *)&v229[m] |= 0x80uLL;
  for (n = 0; n != 3040; n += 32)
    *(_QWORD *)&v229[n] |= 0x8000000uLL;
  for (ii = 0; ii != 3040; ii += 32)
    *(_QWORD *)&v229[ii] |= 0x400000000000000uLL;
  for (jj = 8; jj != 3048; jj += 32)
    *(_QWORD *)&v229[jj] |= 0x4000000uLL;
  for (kk = 0; kk != 95; ++kk)
    *(unint64_t *)((char *)&v230 + ((kk >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << kk;
  for (mm = 0; mm != 95; ++mm)
    *(_QWORD *)((char *)v233 + ((mm >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << mm;
  for (nn = 0; nn != 3040; nn += 32)
    *(_QWORD *)&v229[nn] &= ~1uLL;
  v170 = 0;
  v230 |= 1uLL;
  v233[0] &= 0xFFFFFFFFFFFFFFBDLL;
  do
  {
    *(_QWORD *)&v229[v170] &= ~0x100uLL;
    v170 += 32;
  }
  while (v170 != 3040);
  v171 = 0;
  v230 |= 0x100uLL;
  do
  {
    *(_QWORD *)&v229[v171] &= ~0x800uLL;
    v171 += 32;
  }
  while (v171 != 3040);
  for (i1 = 0; i1 != 3040; i1 += 32)
    *(_QWORD *)&v229[i1] &= ~0x2000uLL;
  for (i2 = 0; i2 != 3040; i2 += 32)
    *(_QWORD *)&v229[i2] &= ~0x4000uLL;
  v174 = 0;
  v230 = v230 & 0xFFFFFFFFFE003FFFLL | 0x4000;
  do
  {
    *(_QWORD *)&v229[v174] &= ~0x2000000uLL;
    v174 += 32;
  }
  while (v174 != 3040);
  v175 = 0;
  v230 |= 0x2000000uLL;
  do
  {
    *(_QWORD *)&v229[v175] &= ~0x4000000uLL;
    v175 += 32;
  }
  while (v175 != 3040);
  v176 = 0;
  v230 |= 0x4000000uLL;
  do
  {
    *(_QWORD *)&v229[v176] &= ~0x40000000uLL;
    v176 += 32;
  }
  while (v176 != 3040);
  v177 = 0;
  v230 |= 0x40000000uLL;
  do
  {
    *(_QWORD *)&v229[v177] &= ~0x1000000000000000uLL;
    v177 += 32;
  }
  while (v177 != 3040);
  v230 |= 0x1000000000000000uLL;
  for (i3 = 8; i3 != 3048; i3 += 32)
    *(_QWORD *)&v229[i3] &= ~0x10000000uLL;
  v179 = 0;
  v231 |= 0x10000000uLL;
  do
  {
    *(_QWORD *)&v229[((v179 >> 3) & 0x1FFFFFFFFFFFFFF8) + 96] &= ~(1 << v179);
    ++v179;
  }
  while (v179 != 95);
  for (i4 = 0; i4 != 95; ++i4)
    *(_QWORD *)&v229[((i4 >> 3) & 0x1FFFFFFFFFFFFFF8) + 192] &= ~(1 << i4);
  for (i5 = 0; i5 != 95; ++i5)
    *(_QWORD *)&v229[((i5 >> 3) & 0x1FFFFFFFFFFFFFF8) + 224] &= ~(1 << i5);
  for (i6 = 0; i6 != 95; ++i6)
    *(_QWORD *)&v232[(i6 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << i6);
  for (i7 = 0; i7 != 95; ++i7)
    *(_QWORD *)&v232[((i7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 32] &= ~(1 << i7);
  for (i8 = 0; i8 != 95; ++i8)
    *(_QWORD *)&v232[((i8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64] &= ~(1 << i8);
  for (i9 = 0; i9 != 95; ++i9)
    *(_QWORD *)&v232[((i9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 96] &= ~(1 << i9);
  for (i10 = 0; i10 != 95; ++i10)
    *(_QWORD *)&v232[((i10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 128] &= ~(1 << i10);
  for (i11 = 0; i11 != 95; ++i11)
    *(_QWORD *)&v232[((i11 >> 3) & 0x1FFFFFFFFFFFFFF8) + 160] &= ~(1 << i11);
  for (i12 = 0; i12 != 95; ++i12)
    *(_QWORD *)&v232[((i12 >> 3) & 0x1FFFFFFFFFFFFFF8) + 192] &= ~(1 << i12);
  for (i13 = 0; i13 != 95; ++i13)
    *(_QWORD *)&v232[((i13 >> 3) & 0x1FFFFFFFFFFFFFF8) + 224] &= ~(1 << i13);
  for (i14 = 0; i14 != 95; ++i14)
    *(_QWORD *)&v232[((i14 >> 3) & 0x1FFFFFFFFFFFFFF8) + 256] &= ~(1 << i14);
  for (i15 = 0; i15 != 95; ++i15)
    *(_QWORD *)&v232[((i15 >> 3) & 0x1FFFFFFFFFFFFFF8) + 288] &= ~(1 << i15);
  for (i16 = 0; i16 != 95; ++i16)
    *(_QWORD *)&v232[((i16 >> 3) & 0x1FFFFFFFFFFFFFF8) + 320] &= ~(1 << i16);
  for (i17 = 0; i17 != 95; ++i17)
    *(_QWORD *)&v232[((i17 >> 3) & 0x1FFFFFFFFFFFFFF8) + 416] &= ~(1 << i17);
  for (i18 = 0; i18 != 95; ++i18)
    *(_QWORD *)((char *)&v233[4] + ((i18 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i18);
  for (i19 = 65; i19 != 91; ++i19)
  {
    for (i20 = 0; i20 != 95; ++i20)
      *(_QWORD *)&v229[32 * i19 - 1056 + ((i20 >> 3) & 0x1FFFFFFFFFFFFFF8)] &= ~(1 << i20);
  }
  for (i21 = 0; i21 != 95; ++i21)
    *(_QWORD *)((char *)&v233[112] + ((i21 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i21);
  for (i22 = 0; i22 != 95; ++i22)
    *(_QWORD *)((char *)&v233[124] + ((i22 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i22);
  for (i23 = 0; i23 != 95; ++i23)
    *(_QWORD *)((char *)&v233[128] + ((i23 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i23);
  for (i24 = 0; i24 != 95; ++i24)
    *(_QWORD *)((char *)&v233[132] + ((i24 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i24);
  for (i25 = 97; i25 != 123; ++i25)
  {
    for (i26 = 0; i26 != 95; ++i26)
      *(_QWORD *)&v229[32 * i25 - 1056 + ((i26 >> 3) & 0x1FFFFFFFFFFFFFF8)] &= ~(1 << i26);
  }
  for (i27 = 0; i27 != 95; ++i27)
    *(_QWORD *)((char *)&v233[240] + ((i27 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i27);
  for (i28 = 0; i28 != 95; ++i28)
    *(_QWORD *)((char *)&v233[256] + ((i28 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i28);
  WTF::dataLog<char [3],char [2]>("/*");
  WTF::dataLog<char [59],char [2]>();
  WTF::dataLog<char [60],char [2]>();
  WTF::dataLog<char [3],char [2]>(" *");
  WTF::dataLog<char [3],char [2]>(" * Redistribution and use in source and binary forms, with or without");
  WTF::dataLog<char [3],char [2]>(" * modification, are permitted provided that the following conditions");
  WTF::dataLog<char [12],char [2]>();
  WTF::dataLog<char [69],char [2]>();
  WTF::dataLog<char [88],char [2]>(" *    notice, this list of conditions and the following disclaimer.", "\n");
  WTF::dataLog<char [3],char [2]>(" * 2. Redistributions in binary form must reproduce the above copyright");
  WTF::dataLog<char [3],char [2]>(" *    notice, this list of conditions and the following disclaimer in the");
  WTF::dataLog<char [3],char [2]>(" *    documentation and/or other materials provided with the distribution.");
  WTF::dataLog<char [3],char [2]>(" *");
  WTF::dataLog<char [73],char [2]>();
  WTF::dataLog<char [3],char [2]>(" * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR");
  WTF::dataLog<char [88],char [2]>(" * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS", "\n");
  WTF::dataLog<char [3],char [2]>(" * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR");
  WTF::dataLog<char [3],char [2]>(" * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF");
  WTF::dataLog<char [88],char [2]>(" * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS", "\n");
  WTF::dataLog<char [3],char [2]>(" * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN");
  WTF::dataLog<char [3],char [2]>(" * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)");
  WTF::dataLog<char [3],char [2]>(" * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF");
  WTF::dataLog<char [88],char [2]>(" * THE POSSIBILITY OF SUCH DAMAGE.", "\n");
  WTF::dataLog<char [3],char [2]>(" */");
  WTF::dataLog<char [88],char [2]>("", "\n");
  WTF::dataLog<char [3],char [2]>("#include \"config.h\"");
  WTF::dataLog<char [88],char [2]>("#include \"BreakLines.h\"", "\n");
  WTF::dataLog<char [88],char [2]>("", "\n");
  WTF::dataLog<char [88],char [2]>("#include <wtf/ASCIICType.h>", "\n");
  WTF::dataLog<char [30],char [2]>();
  WTF::dataLog<char [88],char [2]>("#include <wtf/unicode/CharacterNames.h>", "\n");
  WTF::dataLog<char [88],char [2]>("", "\n");
  WTF::dataLog<char [88],char [2]>("// This file is generated from JSC's $vm.dumpLineBreakData()", "\n");
  WTF::dataLog<char [88],char [2]>("", "\n");
  WTF::dataLog<char [3],char [2]>("namespace WebCore {");
  WTF::dataLog<char [88],char [2]>("", "\n");
  WTF::dataLog<char [29],char [2]>();
  WTF::dataLog<char [88],char [2]>("#define B(a, b, c, d, e, f, g, h) \\", "\n");
  WTF::dataLog<char [101],char [2]>();
  WTF::dataLog<char [88],char [2]>("", "\n");
  LODWORD(v239) = 28;
  WTF::dataLog<char [54],unsigned int,char [3],unsigned int,char [6],char [2]>(&v239);
  WTF::dataLog<char [16]>("           /*");
  WTF::dataLogF((WTF *)" %c", v205, 33);
  for (i29 = 41; i29 != 263; ++i29)
  {
    if ((i29 & 7) == 0)
      WTF::dataLog<char [16]>("   ");
    if ((i29 - 7) >= 0x7F)
      v208 = "%02X";
    else
      v208 = " %c";
    WTF::dataLogF((WTF *)v208, v206, (i29 - 7));
  }
  WTF::dataLog<char [3],char [2]>(" */");
  for (i30 = 0; i30 != 223; ++i30)
  {
    if (i30 >= 0x5E)
      v211 = 32;
    else
      v211 = (i30 + 33);
    WTF::dataLogF((WTF *)"/* %02X %c */ {B(", v209, (i30 + 33), v211);
    v213 = 0;
    v214 = "";
    do
    {
      WTF::dataLogF((WTF *)"%s%u", v212, v214, (*(_QWORD *)&v229[32 * i30 + ((v213 >> 3) & 0x1FFFFFFFFFFFFFF8)] >> v213) & 1);
      if ((~(_BYTE)v213 & 7) != 0)
        v214 = ",";
      else
        v214 = "),B(";
      ++v213;
    }
    while (v213 != 224);
    WTF::dataLog<char [3],char [2]>(")},");
  }
  WTF::dataLog<char [3],char [2]>("};");
  WTF::dataLog<char [88],char [2]>("", "\n");
  WTF::dataLog<char [9],char [2]>();
  WTF::dataLog<char [88],char [2]>("", "\n");
  WTF::dataLog<char [23],char [2]>();
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6291CLL);
  }
  return 10;
}

void JSC::JSDollarVM::addFunction(int *a1, uint64_t a2, uint64_t a3, _BYTE *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  _QWORD v37[2];
  int v38;
  int v39;
  uint64_t v40;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C62A4CLL);
  }
  v8 = a7;
  if (!a5)
    goto LABEL_3;
  if (a5 != 2)
  {
    --a5;
LABEL_3:
    WTF::AtomStringImpl::addLiteral((uint64_t)a4, a5, (uint64_t)a4, a5, a6, a7, a8, v37);
LABEL_4:
    v13 = v37[0];
    goto LABEL_5;
  }
  if (!*(_BYTE *)(a2 + 44265))
  {
    LOBYTE(v36) = *a4;
    WTF::AtomStringImpl::add((uint64_t)&v36, 1uLL, (uint64_t)a4, 2, a6, a7, a8, v37);
    goto LABEL_4;
  }
  v34 = *(_QWORD *)(a2 + 8 * *a4 + 42216);
  v13 = *(_QWORD *)(v34 + 8);
  if ((v13 & 1) != 0)
    v35 = 0;
  else
    v35 = *(_DWORD **)(v34 + 8);
  *v35 += 2;
LABEL_5:
  v36 = (WTF::StringImpl *)v13;
  v14 = JSC::JSFunction::create(a2, a3, v8, &v36, a6, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v37[0] = 0;
  v37[1] = a1;
  v38 = -1;
  v15.n128_u64[0] = 0x100000001000000;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a1, a2, v13, v14, 14, (uint64_t)v37, v16, v17, v15);
  v25 = v36;
  v36 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C62A6CLL);
  }
}

void JSC::JSDollarVM::addConstructibleFunction(int *a1, uint64_t a2, uint64_t a3, _BYTE *a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  _QWORD v37[2];
  int v38;
  int v39;
  uint64_t v40;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C62BECLL);
  }
  v8 = a7;
  if (!a5)
    goto LABEL_3;
  if (a5 != 2)
  {
    --a5;
LABEL_3:
    WTF::AtomStringImpl::addLiteral((uint64_t)a4, a5, (uint64_t)a4, a5, a6, a7, a8, v37);
LABEL_4:
    v13 = v37[0];
    goto LABEL_5;
  }
  if (!*(_BYTE *)(a2 + 44265))
  {
    LOBYTE(v36) = *a4;
    WTF::AtomStringImpl::add((uint64_t)&v36, 1uLL, (uint64_t)a4, 2, a6, a7, a8, v37);
    goto LABEL_4;
  }
  v34 = *(_QWORD *)(a2 + 8 * *a4 + 42216);
  v13 = *(_QWORD *)(v34 + 8);
  if ((v13 & 1) != 0)
    v35 = 0;
  else
    v35 = *(_DWORD **)(v34 + 8);
  *v35 += 2;
LABEL_5:
  v36 = (WTF::StringImpl *)v13;
  v14 = JSC::JSFunction::create(a2, a3, v8, &v36, a6, 0, 0, a6, 0);
  v37[0] = 0;
  v37[1] = a1;
  v38 = -1;
  v15.n128_u64[0] = 0x100000001000000;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a1, a2, v13, v14, 14, (uint64_t)v37, v16, v17, v15);
  v25 = v36;
  v36 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C62C0CLL);
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>()
{
  return 1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (*a2)
    return ubrk_close();
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E35B3620[v3])(&v5, a2);
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v6;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 32) = -1;
  v3 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v3 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E35B3640[v3])(&v6);
    *(_DWORD *)(a2 + 32) = v3;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(_QWORD *)(a2 + 24) = a3[3];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

UText *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNS8_17TextBreakIterator7setTextENS8_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSF_DpT0_(UText *result, uint64_t a2)
{
  const void **v3;
  const void **v4;
  const void *v5;
  unint64_t v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  UText *v10;
  const UTextFuncs *v11;
  int v12;
  UErrorCode status;
  UText ut;
  uint64_t v15;

  v4 = **(const void ****)&result->magic;
  v3 = *(const void ***)(*(_QWORD *)&result->magic + 8);
  v5 = *v4;
  v6 = (unint64_t)v4[1];
  v8 = *v3;
  v7 = v3[1];
  *(_OWORD *)&ut.magic = xmmword_199123440;
  memset(&ut.chunkNativeLimit, 0, 48);
  memset(&ut.context, 0, 72);
  ut.extraSize = 32;
  ut.pExtra = &v15;
  status = U_ZERO_ERROR;
  v9 = (v6 >> 31) & 1;
  if (!v5)
    LOBYTE(v9) = 1;
  if ((v6 & 0xFF00000000) != 0)
  {
    if ((v9 & 1) == 0)
    {
      result = utext_setup(&ut, 32, &status);
      if (status < U_ILLEGAL_ARGUMENT_ERROR)
      {
        v10 = result;
        v11 = (const UTextFuncs *)&WTF::textLatin1ContextAwareFuncs;
LABEL_11:
        v10->pFuncs = v11;
        v10->providerProperties = 4;
        v10->context = v5;
        v10->p = v5;
        v10->a = v6;
        v10->q = v8;
        v10->b = (int)v7;
        ubrk_setUText();
        result = utext_close(v10);
        v12 = (int)v7;
        goto LABEL_12;
      }
    }
    goto LABEL_8;
  }
  if ((v9 & 1) != 0)
  {
LABEL_8:
    v12 = 0;
    goto LABEL_12;
  }
  result = utext_setup(&ut, 0, &status);
  v12 = 0;
  if (status <= U_ZERO_ERROR)
  {
    v10 = result;
    v11 = (const UTextFuncs *)&WTF::textUTF16ContextAwareFuncs;
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)(a2 + 8) = v12;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNS8_17TextBreakIterator7setTextENS8_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSF_DpT0_(__int128 ***a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v8[2];
  _QWORD *v9;

  v2 = ***a1;
  v6 = *(*a1)[1];
  v7 = v2;
  v8[0] = &v7;
  v8[1] = &v6;
  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNS8_19TextBreakIteratorCF7setTextENS8_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSF_DpT0_(v5);
  }
  else
  {
    v9 = v8;
    return ((uint64_t (*)(_QWORD **))off_1E35B3660[v3])(&v9);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNS8_19TextBreakIteratorCF7setTextENS8_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSF_DpT0_(const UInt8 ****a1, uint64_t a2)
{
  WTF::TextBreakIteratorCFCharacterCluster::setText(a2, ***a1, (uint64_t)(**a1)[1], (uint64_t)*(*a1)[1], *((unsigned int *)(*a1)[1] + 2));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNS8_19TextBreakIteratorCF7setTextENS8_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSF_DpT0_(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  CFIndex v7;
  const __CFString *v8;
  const __CFAllocator *v9;
  CFStringRef v10;
  CFTypeRef v11;
  CFTypeRef cf;
  CFRange v13;

  v4 = **a1;
  v3 = (*a1)[1];
  v5 = v4[1];
  v6 = *((unsigned int *)v3 + 2);
  v7 = v5;
  if (*((_DWORD *)v3 + 2))
  {
    WTF::createContextualizedCFString(*v4, v5, *v3, v6, (WTFContextualizedNSString **)&cf);
    v8 = (const __CFString *)cf;
  }
  else
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if ((v5 & 0xFF00000000) != 0)
      v10 = CFStringCreateWithBytesNoCopy(v9, (const UInt8 *)*v4, v4[1], 0x201u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    else
      v10 = CFStringCreateWithCharactersNoCopy(v9, (const UniChar *)*v4, v4[1], (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v8 = v10;
    cf = v10;
  }
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v13.location = 0;
  v13.length = v7;
  CFStringTokenizerSetString(*(CFStringTokenizerRef *)a2, v8, v13);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_17TextBreakIterator10isBoundaryEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSB_DpT0_()
{
  return ubrk_isBoundary() != 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_17TextBreakIterator10isBoundaryEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSB_DpT0_(int ***a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int *v6;
  int **v7;

  v5 = ***a1;
  v6 = &v5;
  v2 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF10isBoundaryEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(v4);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(int ***))off_1E35B3680[v2])(&v7);
  }
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF10isBoundaryEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2;

  v2 = ***a1;
  return *(_QWORD *)(a2 + 16) == v2 || CFStringGetRangeOfCharacterClusterAtIndex() == *(_QWORD *)(a2 + 24) + v2;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF10isBoundaryEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(unsigned int ***a1, uint64_t a2)
{
  uint64_t v2;
  CFIndex location;

  v2 = ***a1;
  if (*(_QWORD *)(a2 + 8) == v2)
    return 1;
  CFStringTokenizerGoToTokenAtIndex(*(CFStringTokenizerRef *)a2, *(_QWORD *)(a2 + 16) + v2);
  location = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(_QWORD *)a2).location;
  return location == -1 || location == *(_QWORD *)(a2 + 16) + v2;
}

unint64_t WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = a3 - v10;
    v12 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 > a2)
      a2 = v13;
    WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v11;
  }
  return v8;
}

void WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v32;
  char v33;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return;
  v9 = *(_QWORD *)a1;
  v10 = *(unsigned int *)(a1 + 12);
  if (a2 >= 3)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
      return;
    }
    v11 = 80 * a2;
    v12 = WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(a1 + 8) = (v11 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)a1 = v12;
    if (!(_DWORD)v10)
      goto LABEL_18;
    goto LABEL_7;
  }
  v12 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 2;
  if ((_DWORD)v10)
  {
LABEL_7:
    v13 = 0;
    v14 = 80 * v10;
    do
    {
      v15 = v12 + v13;
      *(_BYTE *)(v12 + v13 + 8) = 0;
      a2 = v12 + v13 + 8;
      *(_DWORD *)(v12 + v13 + 48) = -1;
      v16 = v9 + v13;
      v17 = *(unsigned int *)(v9 + v13 + 48);
      if ((_DWORD)v17 != -1)
      {
        ((void (*)(char *, unint64_t, uint64_t))off_1E35B3630[v17])(&v32, a2, v16 + 8);
        *(_DWORD *)(v15 + 48) = v17;
      }
      v18 = *(_QWORD *)(v16 + 56);
      *(_BYTE *)(v15 + 64) = *(_BYTE *)(v16 + 64);
      *(_QWORD *)(v15 + 56) = v18;
      v19 = *(_QWORD *)(v16 + 72);
      *(_QWORD *)(v16 + 72) = 0;
      *(_QWORD *)(v15 + 72) = v19;
      v20 = *(WTF::StringImpl **)(v16 + 72);
      *(_QWORD *)(v16 + 72) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
      v21 = *(unsigned int *)(v16 + 48);
      if ((_DWORD)v21 != -1)
        ((void (*)(char *, unint64_t))off_1E35B3610[v21])(&v33, v9 + v13 + 8);
      *(_DWORD *)(v16 + 48) = -1;
      v13 += 80;
    }
    while (v14 != v13);
  }
LABEL_18:
  if (a1 + 16 != v9 && v9 != 0)
  {
    if (*(_QWORD *)a1 == v9)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::dataLog<char [3],char [2]>(const char *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [59],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", " * Copyright (C) 2005-2024 Apple Inc. All rights reserved.");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [60],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", " * Copyright (C) 2011-2024 Google Inc. All rights reserved.");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [12],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", " * are met:");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [69],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", " * 1. Redistributions of source code must retain the above copyright");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [73],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", " * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [30],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "#include <wtf/StdLibExtras.h>");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [29],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "// Pack 8 bits into one byte");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [101],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "    ((a) | ((b) << 1) | ((c) << 2) | ((d) << 3) | ((e) << 4) | ((f) << 5) | ((g) << 6) | ((h) << 7))");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [54],unsigned int,char [3],unsigned int,char [6],char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "const uint8_t BreakLines::LineBreakTable::breakTable[");
  WTF::PrintStream::printf(v4, "%u", 223);
  WTF::PrintStream::printf(v4, "%s", "][");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "] = {");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [9],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "#undef B");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [23],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "} // namespace WebCore");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [11],WTF::FixedWidthDouble,char [10],WTF::FixedWidthDouble,char [3],char const*,char [3],char const*,char [2]>(uint64_t a1, uint64_t a2, const char **a3, const char **a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", "total ms: ");
  WTF::PrintStream::printf(v10, "%*.*lf", *(_QWORD *)(a1 + 8), HIDWORD(*(_QWORD *)(a1 + 8)), *(double *)a1);
  WTF::PrintStream::printf(v10, "%s", " max ms: ");
  WTF::PrintStream::printf(v10, "%*.*lf", *(_QWORD *)(a2 + 8), HIDWORD(*(_QWORD *)(a2 + 8)), *(double *)a2);
  WTF::PrintStream::printf(v10, "%s", " [");
  WTF::PrintStream::printf(v10, "%s", *a3);
  WTF::PrintStream::printf(v10, "%s", "] ");
  WTF::PrintStream::printf(v10, "%s", *a4);
  WTF::PrintStream::printf(v10, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

uint64_t WTF::dataLog<char [19],char [13],char [3]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "functionOverrides ");
  WTF::PrintStream::printf(v2, "%s", "SYNTAX ERROR");
  WTF::PrintStream::printf(v2, "%s", ": ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [12],char const*,char [11],char const*,char [2]>(const char **a1, const char **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Expecting '");
  WTF::PrintStream::printf(v6, "%s", *a1);
  WTF::PrintStream::printf(v6, "%s", "' clause:\n");
  WTF::PrintStream::printf(v6, "%s", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [36],char const*,char [4],char const*,char [2]>(const char **a1, const char **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Cannot have any characters before '");
  WTF::PrintStream::printf(v6, "%s", *a1);
  WTF::PrintStream::printf(v6, "%s", "':\n");
  WTF::PrintStream::printf(v6, "%s", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [2],char const*,char [30],char const*,char [2]>(const char **a1, const char **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "'");
  WTF::PrintStream::printf(v6, "%s", *a1);
  WTF::PrintStream::printf(v6, "%s", "' must be followed by a ' ':\n");
  WTF::PrintStream::printf(v6, "%s", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [18],char const*,char [27],char const*,char [2]>(const char **a1, const char **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Missing { after '");
  WTF::PrintStream::printf(v6, "%s", *a1);
  WTF::PrintStream::printf(v6, "%s", "' clause start delimiter:\n");
  WTF::PrintStream::printf(v6, "%s", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [12],WTF::String,char [40],char const*,char [2]>(WTF::PrintStream *a1, const char **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  const WTF::String *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  float v14;
  char v16;
  char **v17;
  char *v18;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Delimiter '");
  WTF::printInternal(v6, a1, v7, v8, v9, v10, v11, v12, v13, v14);
  WTF::PrintStream::printf(v6, "%s", "' cannot have '{', '}', or whitespace:\n");
  WTF::PrintStream::printf(v6, "%s", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [30],char const*,char [25],WTF::String,char [4],char const*,char [2]>(const char **a1, WTF::PrintStream *a2, const char **a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  const WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float v16;
  char v18;
  char **v19;
  char *v20;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Unexpected characters after '");
  WTF::PrintStream::printf(v8, "%s", *a1);
  WTF::PrintStream::printf(v8, "%s", "' clause end delimiter '");
  WTF::printInternal(v8, a2, v9, v10, v11, v12, v13, v14, v15, v16);
  WTF::PrintStream::printf(v8, "%s", "':\n");
  WTF::PrintStream::printf(v8, "%s", *a3);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [2],char const*,char [25],WTF::String,char [14],WTF::String,char [2],char [45]>(const char **a1, WTF::PrintStream *a2, WTF::PrintStream *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  const WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float v16;
  const WTF::String *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  float v24;
  char v26;
  char **v27;
  char *v28;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v28 = &v26;
    v27 = &v28;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "'");
  WTF::PrintStream::printf(v8, "%s", *a1);
  WTF::PrintStream::printf(v8, "%s", "' clause end delimiter '");
  WTF::printInternal(v8, a2, v9, v10, v11, v12, v13, v14, v15, v16);
  WTF::PrintStream::printf(v8, "%s", "' not found:\n");
  WTF::printInternal(v8, a3, v17, v18, v19, v20, v21, v22, v23, v24);
  WTF::PrintStream::printf(v8, "%s", "\n");
  WTF::PrintStream::printf(v8, "%s", "Are you missing a '}' before the delimiter?\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char const*,char [6],WTF::RawPointer>(const char **a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", *a1);
  WTF::PrintStream::printf(v6, "%s", "cell ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t JSC::doPrint(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_42;
  }
  v9 = (int)a3;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v13 = 0;
    v14 = *((_QWORD *)this + 7);
    v15 = 1;
    do
    {
      v16 = *(_QWORD *)((char *)a2 + (((v13 << 32) + 0x600000000) >> 29));
      v33 = v16;
      if ((v16 & 0xFFFE000000000002) != 0)
      {
        v31 = v16;
      }
      else
      {
        if (*(unsigned __int8 *)(v16 + 5) <= 0x16u && (*(_BYTE *)(v16 + 5) & 0xFE) != 2)
        {
          WTF::dataLog<JSC::JSValue>((JSC::JSValue *)&v33);
          goto LABEL_26;
        }
        v31 = v16;
        if (*(_BYTE *)(v16 + 5) == 2)
        {
          v18 = *(WTF::StringImpl **)(v16 + 8);
          if ((v18 & 1) != 0)
          {
            v18 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v16, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
            if (v18)
LABEL_18:
              *(_DWORD *)v18 += 2;
          }
          else if (v18)
          {
            goto LABEL_18;
          }
          v32 = v18;
          goto LABEL_20;
        }
      }
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v31, this, a3, a4, a5, a6, a7, a8, (int **)&v32);
      if (!*(_DWORD *)(v14 + 80))
        goto LABEL_21;
LABEL_20:
      v30 = *(_DWORD *)(v14 + 80);
      if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v14 + 16))
      {
        v19 = 0;
      }
      else
      {
LABEL_21:
        WTF::dataLog<WTF::String>((WTF::PrintStream *)&v32);
        v19 = 1;
      }
      v20 = v32;
      v32 = 0;
      if (!v20)
        goto LABEL_25;
      if (*(_DWORD *)v20 != 2)
      {
        *(_DWORD *)v20 -= 2;
LABEL_25:
        if (!v19)
          goto LABEL_37;
        goto LABEL_26;
      }
      WTF::StringImpl::~StringImpl(v20, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      if (!v19)
      {
LABEL_37:
        result = 0;
        goto LABEL_38;
      }
LABEL_26:
      v13 = v15;
    }
    while (*((int *)a2 + 8) - 1 > (unint64_t)v15++);
  }
  if (v9)
    WTF::dataLog<char [16]>("\n");
  result = 10;
LABEL_38:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_42:
    JUMPOUT(0x198C64A98);
  }
  return result;
}

uint64_t WTF::dataLog<char [9],unsigned long,char [25],char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Dumping ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", " values before crashing:");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::JSValue>(JSC::JSValue *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  BOOL v5;
  JSC::Structure *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  if (*(_QWORD *)a1)
    v5 = (*(_QWORD *)a1 & 0xFFFE000000000002) == 0;
  else
    v5 = 0;
  if (v5)
    v6 = (JSC::Structure *)(16 * (**(_DWORD **)a1 & 0xFFFFFFFE));
  else
    v6 = 0;
  JSC::JSValue::dumpInContextAssumingStructure(a1, v4, 0, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [30],WTF::String,char [2]>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Error thrown while crashing: ");
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::codeBlockFromArg(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  const void *v18[3];

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v9 = *((_QWORD *)this + 7);
    v8 = *((_QWORD *)a2 + 6);
    v15 = v8;
    if ((v8 & 0xFFFE000000000002) != 0)
      goto LABEL_5;
    if (!v8 || *(_BYTE *)(v8 + 5) != 26)
      goto LABEL_13;
    v10 = *(_QWORD *)(v8 + 24);
    if ((v10 & 1) != 0)
      v10 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v10 + 5) == 8 || (v8 = *(_QWORD *)(v10 + 96)) == 0 && (v8 = *(_QWORD *)(v10 + 104)) == 0)
    {
LABEL_5:
      WTF::dataLog<char [20],JSC::JSValue,char [2]>("Invalid codeBlock: ", (JSC::JSValue *)&v15, "\n");
    }
    else
    {
LABEL_13:
      v11 = *(_QWORD *)(v9 + 112);
      if (!*(_BYTE *)(v11 + 6))
        goto LABEL_17;
      v12 = *(_QWORD *)(v11 + 8);
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13)
        v13 = WTF::Thread::initializeCurrentTLS(0);
      if (v12 == v13)
      {
        v16 = v8;
        v17 = 0;
        v18[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::VMInspector::isValidCodeBlock(JSC::VM *,JSC::CodeBlock *)::CodeBlockValidationFunctor>::implFunction;
        v18[1] = v18;
        v18[2] = &v16;
        JSC::Heap::forEachCodeBlockImpl(v9 + 192, (uint64_t)v18, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (v17)
          goto LABEL_20;
      }
      else
      {
LABEL_17:
        WTF::dataLog<char [16]>("ERROR: current thread does not own the JSLock\n");
      }
      v18[0] = (const void *)v8;
      WTF::dataLog<char [20],WTF::RawPointer,char [2],JSC::JSValue,char [2]>(v18, (JSC::JSValue *)&v15);
    }
    v8 = 0;
LABEL_20:
    if ((_BYTE)qword_1ECF4C6A7)
      return v8;
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x198C64EA8);
  }
  return 0;
}

uint64_t WTF::dataLog<char [20],WTF::RawPointer,char [2],JSC::JSValue,char [2]>(const void **a1, JSC::JSValue *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  JSC::Structure *v7;
  unint64_t v8;
  char v10;
  char **v11;
  char *v12;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Invalid codeBlock: ");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " ");
  v7 = 0;
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && (v8 & 0xFFFE000000000002) == 0)
    v7 = (JSC::Structure *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure(a2, v6, 0, v7);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void `anonymous namespace'::RuntimeArray::destroy(_anonymous_namespace_::RuntimeArray *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if (!(_BYTE)qword_1ECF4C6A7
    || (v8 = *((_QWORD *)this + 2)) != 0
    && (*((_QWORD *)this + 2) = 0,
        *((_DWORD *)this + 6) = 0,
        WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8),
        !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C65068);
  }
}

void `anonymous namespace'::RuntimeArray::put()
{
  __break(0xC471u);
}

void `anonymous namespace'::RuntimeArray::deleteProperty()
{
  __break(0xC471u);
}

uint64_t `anonymous namespace'::RuntimeArray::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v32;
  unsigned __int16 *v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned __int16 *v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unsigned int v66;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_118:
    __break(0xC471u);
    JUMPOUT(0x198C654B4);
  }
  v12 = *(JSC::VM **)(a2 + 56);
  if (*(_QWORD *)(*((_QWORD *)v12 + 5244) + 1768) == a3)
  {
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 14;
    *(_QWORD *)(a4 + 32) = a1;
    *(_WORD *)(a4 + 48) = 769;
LABEL_24:
    result = 1;
    goto LABEL_115;
  }
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
    {
      result = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
      goto LABEL_115;
    }
    goto LABEL_114;
  }
  v13 = *(_DWORD *)(a3 + 16);
  if ((v13 & 0x20) == 0)
  {
    v14 = *(_BYTE **)(a3 + 8);
    v15 = *(unsigned int *)(a3 + 4);
    if ((v13 & 4) != 0)
    {
      if (!(_DWORD)v15)
        goto LABEL_8;
      v16 = *v14 - 48;
      if (v16 > 9 || v15 >= 2 && *v14 == 48)
        goto LABEL_8;
      v61 = v15 - 1;
      v62 = v14 + 1;
      while (v61)
      {
        if (v16 <= 0x19999999)
        {
          v63 = *v62 - 48;
          if (v63 <= 9)
          {
            v35 = __CFADD__(v63, 10 * v16);
            v16 = v63 + 10 * v16;
            --v61;
            ++v62;
            if (!v35)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (!(_DWORD)v15)
        goto LABEL_8;
      v16 = *(unsigned __int16 *)v14 - 48;
      if (v16 > 9)
        goto LABEL_8;
      if (*(_WORD *)v14 == 48 && v15 > 1)
        goto LABEL_8;
      v32 = v15 - 1;
      v33 = (unsigned __int16 *)(v14 + 2);
      while (v32)
      {
        if (v16 <= 0x19999999)
        {
          v34 = *v33 - 48;
          if (v34 <= 9)
          {
            v35 = __CFADD__(v34, 10 * v16);
            v16 = v34 + 10 * v16;
            --v32;
            ++v33;
            if (!v35)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    if (v16 != -1 && *(_DWORD *)(a1 + 28) > v16)
    {
      *(_QWORD *)a4 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v16) | 0xFFFE000000000000;
      *(_DWORD *)(a4 + 16) = 12;
      *(_QWORD *)(a4 + 32) = a1;
      result = 1;
      *(_BYTE *)(a4 + 49) = 1;
      goto LABEL_115;
    }
  }
LABEL_8:
  if (!(a3 >> 4))
    goto LABEL_55;
  v17 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v17 + 0x20)) != 0)
    goto LABEL_55;
  v18 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v18)
  {
    v19 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v19 || *(_BYTE *)(v19 + 5) != 1 && *(_DWORD *)(v19 + 80) < 2u)
      goto LABEL_55;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v18)
      goto LABEL_55;
  }
  if (!*(_DWORD *)(v18 + 24))
    goto LABEL_55;
  v20 = *(_QWORD *)(v18 + 16);
  v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
  v22 = *(unsigned int *)(v18 + 8);
  v23 = *(_DWORD *)(a3 + 16);
  if ((v20 & 1) != 0)
  {
    if ((v23 & 0x20) != 0)
      v23 = *(_DWORD *)(a3 + 32);
    v24 = *(_DWORD *)(v18 + 12);
    v25 = (v23 >> 8) & *(_QWORD *)&v24;
    v26 = *(unsigned __int8 *)(v21 + v25);
    if (*(_BYTE *)(v21 + v25))
    {
      v27 = v21 + v22;
      v28 = 1;
      while (1)
      {
        v29 = *(_QWORD *)(v27 + 8 * (v26 - 1));
        if (a3 == (v29 & 0xFFFFFFFFFFFFLL))
          break;
        v25 = ((_DWORD)v25 + v28) & v24;
        v26 = *(unsigned __int8 *)(v21 + v25);
        ++v28;
        if (!*(_BYTE *)(v21 + v25))
          goto LABEL_55;
      }
      a6 = (v29 >> 16) & 0xFF00000000 | HIBYTE(v29);
      goto LABEL_45;
    }
LABEL_55:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v12, a3, a4) & 1) != 0)
    {
      goto LABEL_24;
    }
    v46 = *(_DWORD *)(a3 + 16);
    if ((v46 & 0x20) != 0)
    {
LABEL_114:
      result = 0;
      goto LABEL_115;
    }
    v47 = *(_BYTE **)(a3 + 8);
    v48 = *(unsigned int *)(a3 + 4);
    if ((v46 & 4) != 0)
    {
      if ((_DWORD)v48)
      {
        v49 = *v47 - 48;
        if (v49 <= 9 && (v48 < 2 || *v47 != 48))
        {
          v64 = v47 + 1;
          v65 = v48 - 1;
          while (v65)
          {
            if (v49 > 0x19999999)
              goto LABEL_60;
            v66 = *v64 - 48;
            if (v66 > 9)
              goto LABEL_60;
            v50 = 0;
            v51 = 0;
            v52 = 0;
            v35 = __CFADD__(v66, 10 * v49);
            v49 = v66 + 10 * v49;
            ++v64;
            --v65;
            if (v35)
              goto LABEL_113;
          }
          goto LABEL_107;
        }
      }
    }
    else if ((_DWORD)v48)
    {
      v49 = *(unsigned __int16 *)v47 - 48;
      if (v49 <= 9 && (*(_WORD *)v47 != 48 || v48 <= 1))
      {
        v53 = (unsigned __int16 *)(v47 + 2);
        v54 = v48 - 1;
        while (v54)
        {
          if (v49 > 0x19999999)
            goto LABEL_60;
          v55 = *v53 - 48;
          if (v55 > 9)
            goto LABEL_60;
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v35 = __CFADD__(v55, 10 * v49);
          v49 = v55 + 10 * v49;
          ++v53;
          --v54;
          if (v35)
            goto LABEL_113;
        }
LABEL_107:
        v50 = 0x100000000;
        if (v49 == -1)
        {
          v50 = 0;
          v51 = 0;
        }
        else
        {
          v51 = v49;
        }
        if (v49 == -1)
          v52 = 0;
        else
          v52 = v49 & 0xFFFFFF00;
LABEL_113:
        if ((v50 & 0x100000000) != 0)
        {
          result = JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, (const WTF::StringImpl *)(v52 | v51), a4, a5, a6, a7, a8);
          goto LABEL_115;
        }
        goto LABEL_114;
      }
    }
LABEL_60:
    v50 = 0;
    v51 = 0;
    v52 = 0;
    goto LABEL_113;
  }
  if ((v23 & 0x20) != 0)
    v23 = *(_DWORD *)(a3 + 32);
  v36 = *(_DWORD *)(v18 + 12);
  v37 = v36 & (v23 >> 8);
  v38 = *(_DWORD *)(v21 + 4 * v37);
  if (!v38)
    goto LABEL_55;
  v39 = v21 + 4 * v22;
  v40 = 1;
  while (1)
  {
    v41 = (v38 - 1);
    if (*(_QWORD *)(v39 + 16 * v41) == a3)
      break;
    v37 = (v37 + v40) & v36;
    v38 = *(_DWORD *)(v21 + 4 * v37);
    ++v40;
    if (!v38)
      goto LABEL_55;
  }
  a6 = *(unsigned int *)(v39 + 16 * v41 + 8) | ((unint64_t)*(unsigned __int8 *)(v39 + 16 * v41 + 12) << 32);
LABEL_45:
  if ((_DWORD)a6 == -1)
    goto LABEL_55;
  if ((int)a6 <= 63)
  {
    v42 = a1 + 16;
    v43 = a6 << 32;
  }
  else
  {
    v42 = *(_QWORD *)(a1 + 8) - 8;
    v43 = 0x3F00000000 - (a6 << 32);
  }
  v44 = *(_QWORD *)(v42 + (v43 >> 29));
  if ((v44 & 0xFFFE000000000002) != 0)
    goto LABEL_52;
  v45 = *(unsigned __int8 *)(v44 + 5);
  if (v45 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v12, a4, v44, SHIDWORD(a6), a6);
    goto LABEL_24;
  }
  if (v45 != 6)
  {
LABEL_52:
    *(_QWORD *)a4 = v44;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    goto LABEL_115;
  }
  v56 = *(_DWORD *)(v17 + 16) & 3;
  v58 = *(_QWORD *)(v44 + 8);
  v57 = *(_QWORD *)(v44 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C)))
  {
    v60 = *(_QWORD *)(v44 + 24);
    v59 = *(_QWORD *)(v44 + 32);
    *(_QWORD *)a4 = v58;
    *(_QWORD *)(a4 + 8) = v57;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v56 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v60;
    *(_QWORD *)(a4 + 80) = v59;
  }
  else
  {
    *(_QWORD *)a4 = v58;
    *(_QWORD *)(a4 + 8) = v57;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v56 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
LABEL_115:
  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_118;
  return result;
}

uint64_t `anonymous namespace'::RuntimeArray::getOwnPropertySlotByIndex(_anonymous_namespace_::RuntimeArray *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7
    || (*((_DWORD *)this + 7) <= a3
      ? (result = JSC::JSObject::getOwnPropertySlotByIndex((uint64_t)this, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8))
      : (*(_QWORD *)a4 = *(unsigned int *)(*((_QWORD *)this + 2) + 4 * a3) | 0xFFFE000000000000,
         *(_DWORD *)(a4 + 16) = 12,
         *(_QWORD *)(a4 + 32) = this,
         result = 1,
         *(_BYTE *)(a4 + 49) = 1),
        !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C6571CLL);
  }
  return result;
}

uint64_t `anonymous namespace'::ImpureGetter::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const JSC::PropertyTable *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  const JSC::PropertyTable *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  JSC::VM *v45;
  unint64_t v46;
  const JSC::PropertyTable *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char OwnStaticPropertySlot;
  int v55;
  _BYTE *v56;
  uint64_t v57;
  unsigned int v58;
  JSC::VM *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned __int16 *v82;
  uint64_t v83;
  unsigned int v84;
  BOOL v85;
  int v86;
  unsigned int v87;
  int v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t result;
  uint64_t v97;
  uint64_t *v98;
  int v99;
  _BYTE *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  unsigned __int16 *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  char v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  _BYTE *v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned __int16 *v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t *v135;
  const JSC::PropertyTable *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  int v147;
  unsigned int v148;
  int v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  const JSC::PropertyTable *v157;
  uint64_t *v158;
  char v159;
  const JSC::PropertyTable *v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  int v168;
  int v169;
  unsigned int v170;
  uint64_t v171;
  unsigned __int8 *v172;
  int v173;
  BOOL v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  size_t v181;
  char *v182;
  char *v183;
  int v184;
  uint64_t v185;
  unsigned __int8 *v186;
  unsigned __int8 *v187;
  uint64_t v188;
  int v189;
  int v190;
  unsigned __int8 *v191;
  uint64_t v192;
  int v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  unint64_t v206;
  const JSC::PropertyTable *v207;
  unsigned __int8 *v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  unsigned __int8 *v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  char v223;
  int v224;
  int v225;
  uint64_t v226;
  int v227;
  unint64_t v228;
  unint64_t v229;
  char v230;
  int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  int v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  char v248;
  unint64_t v249;
  unint64_t v250;
  char v251;
  int v252;
  uint64_t v253;
  unsigned __int8 *v254;
  unsigned int v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  JSC::VMTraps *v263;
  JSC::VMTraps *v264;
  JSC::VMTraps *v265;
  JSC::VM *v266;
  JSC::VM *v267;
  JSC::VM *v268;
  const JSC::PropertyTable *v269;
  uint64_t v270;
  const JSC::PropertyTable *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE __dst[8];
  char v278;
  char __s[3];
  _BYTE v280[39];

  *(_QWORD *)&v280[23] = *MEMORY[0x1E0C80C00];
  v8 = g_config;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C65E74);
  }
  v10 = a1;
  v12 = a1 + 16;
  v11 = *(_QWORD *)(a1 + 16);
  v13 = (const JSC::PropertyTable *)(a3 >> 4);
  if (!v11)
    goto LABEL_47;
  v14 = *(_QWORD *)(a2 + 56);
  v15 = (_BYTE *)(v11 + 6);
  v16 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(v11 + 6) & 8) == 0)
  {
    v17 = *(_QWORD *)(a1 + 16);
    do
    {
      v18 = *(_DWORD *)v17 & 0xFFFFFFFE;
      v19 = 16 * v18;
      if (!(_DWORD)v13 || (v13 & ~*(_DWORD *)(16 * v18 + 0x20)) != 0)
        goto LABEL_32;
      v20 = *(_QWORD *)(16 * v18 + 0x58);
      if (!v20)
      {
        v21 = *(_QWORD *)(16 * v18 + 0x40);
        if (!v21 || *(_BYTE *)(v21 + 5) != 1 && *(_DWORD *)(v21 + 80) < 2u)
          goto LABEL_32;
        v272 = v10;
        v274 = v12;
        v22 = a4;
        v23 = a2;
        v24 = a3;
        v25 = v8;
        v26 = v13;
        v27 = v11;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v19, (JSC::VM *)v14, 1, v13, v11, a6, a7, a8);
        v11 = v27;
        v13 = v26;
        a3 = v24;
        a2 = v23;
        a4 = v22;
        v10 = v272;
        v12 = v274;
        v8 = v25;
        if (!v20)
          goto LABEL_32;
      }
      if (!*(_DWORD *)(v20 + 24))
        goto LABEL_32;
      v28 = *(_QWORD *)(v20 + 16);
      v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
      v30 = *(unsigned int *)(v20 + 8);
      v31 = *(_DWORD *)(a3 + 16);
      if ((v28 & 1) != 0)
      {
        if ((v31 & 0x20) != 0)
          v31 = *(_DWORD *)(a3 + 32);
        v32 = *(_DWORD *)(v20 + 12);
        v33 = (v31 >> 8) & *(_QWORD *)&v32;
        v34 = *(unsigned __int8 *)(v29 + v33);
        if (!*(_BYTE *)(v29 + v33))
          goto LABEL_32;
        v35 = v29 + v30;
        v36 = 1;
        while (1)
        {
          v37 = *(_QWORD *)(v35 + 8 * (v34 - 1));
          if (a3 == (v37 & 0xFFFFFFFFFFFFLL))
            break;
          v33 = ((_DWORD)v33 + v36) & v32;
          v34 = *(unsigned __int8 *)(v29 + v33);
          ++v36;
          if (!*(_BYTE *)(v29 + v33))
            goto LABEL_32;
        }
        a6 = (v37 >> 16) & 0xFF00000000 | HIBYTE(v37);
      }
      else
      {
        if ((v31 & 0x20) != 0)
          v31 = *(_DWORD *)(a3 + 32);
        v38 = *(_DWORD *)(v20 + 12);
        v39 = v38 & (v31 >> 8);
        v40 = *(_DWORD *)(v29 + 4 * v39);
        if (!v40)
          goto LABEL_32;
        v41 = v29 + 4 * v30;
        v42 = 1;
        while (1)
        {
          v43 = (v40 - 1);
          if (*(_QWORD *)(v41 + 16 * v43) == a3)
            break;
          v39 = (v39 + v42) & v38;
          v40 = *(_DWORD *)(v29 + 4 * v39);
          ++v42;
          if (!v40)
            goto LABEL_32;
        }
        a6 = *(unsigned int *)(v41 + 16 * v43 + 8) | ((unint64_t)*(unsigned __int8 *)(v41 + 16 * v43 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        v77 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v78 = v17 + 16;
          v79 = a6 << 32;
        }
        else
        {
          v78 = *(_QWORD *)(v17 + 8) - 8;
          v79 = 0x3F00000000 - (a6 << 32);
        }
        v80 = *(_QWORD *)(v78 + (v79 >> 29));
        if ((v80 & 0xFFFE000000000002) == 0)
        {
          v81 = *(unsigned __int8 *)(v80 + 5);
          if (v81 == 5)
          {
            v92 = (unsigned int *)v17;
            v93 = v14;
            goto LABEL_97;
          }
          if (v81 == 6)
          {
            v113 = *(_DWORD *)(v19 + 16) & 3;
            v115 = *(_QWORD *)(v80 + 8);
            v114 = *(_QWORD *)(v80 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v80 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v117 = *(_QWORD *)(v80 + 24);
              v116 = *(_QWORD *)(v80 + 32);
              *(_QWORD *)a4 = v115;
              *(_QWORD *)(a4 + 8) = v114;
              *(_DWORD *)(a4 + 16) = HIDWORD(a6);
              *(_QWORD *)(a4 + 32) = v17;
              goto LABEL_120;
            }
            *(_QWORD *)a4 = v115;
            *(_QWORD *)(a4 + 8) = v114;
            *(_DWORD *)(a4 + 16) = HIDWORD(a6);
            *(_QWORD *)(a4 + 32) = v17;
            goto LABEL_281;
          }
        }
        *(_QWORD *)a4 = v80;
        *(_QWORD *)(a4 + 32) = v17;
LABEL_95:
        *(_DWORD *)(a4 + 16) = v77;
        *(_DWORD *)(a4 + 20) = a6;
        result = 1;
        *(_WORD *)(a4 + 48) = 257;
        goto LABEL_315;
      }
LABEL_32:
      if ((*v15 & 0x20) != 0)
      {
        v44 = a2;
        v45 = (JSC::VM *)v14;
        v46 = a3;
        v47 = v13;
        v48 = a4;
        v49 = v8;
        v275 = v12;
        v50 = v10;
        v51 = a4;
        v52 = v14;
        v53 = v11;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v17, v45, a3, v48);
        v11 = v53;
        v14 = v52;
        a4 = v51;
        v10 = v50;
        v12 = v275;
        v13 = v47;
        a3 = v46;
        a2 = v44;
        v8 = v49;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_115;
      }
      v16 = *(_QWORD *)(v19 + 48);
      if (!v16)
        v16 = *(_QWORD *)(v17 + 16);
      if ((v16 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) < 0x17u)
      {
        if (!a3)
          goto LABEL_46;
        v55 = *(_DWORD *)(a3 + 16);
        if ((v55 & 0x20) != 0)
          goto LABEL_46;
        v56 = *(_BYTE **)(a3 + 8);
        v57 = *(unsigned int *)(a3 + 4);
        if ((v55 & 4) != 0)
        {
          if (!(_DWORD)v57)
            goto LABEL_46;
          v58 = *v56 - 48;
          if (v58 > 9 || v57 >= 2 && *v56 == 48)
            goto LABEL_46;
          v213 = v57 - 1;
          v214 = v56 + 1;
          while (v213)
          {
            if (v58 <= 0x19999999)
            {
              v215 = *v214 - 48;
              if (v215 <= 9)
              {
                v85 = __CFADD__(v215, 10 * v58);
                v58 = v215 + 10 * v58;
                --v213;
                ++v214;
                if (!v85)
                  continue;
              }
            }
            goto LABEL_46;
          }
        }
        else
        {
          if (!(_DWORD)v57)
            goto LABEL_46;
          v58 = *(unsigned __int16 *)v56 - 48;
          if (v58 > 9 || *(_WORD *)v56 == 48 && v57 > 1)
            goto LABEL_46;
          v82 = (unsigned __int16 *)(v56 + 2);
          v83 = v57 - 1;
          while (v83)
          {
            if (v58 <= 0x19999999)
            {
              v84 = *v82 - 48;
              if (v84 <= 9)
              {
                v85 = __CFADD__(v84, 10 * v58);
                v58 = v84 + 10 * v58;
                ++v82;
                --v83;
                if (!v85)
                  continue;
              }
            }
            goto LABEL_46;
          }
        }
        if (v58 != -1)
        {
          v216 = *(_QWORD *)(a2 + 56);
          v264 = (JSC::VMTraps *)(v216 + 64);
          v267 = (JSC::VM *)v58;
          v270 = (uint64_t)v13;
          while (1)
          {
            v217 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
            v218 = a2;
            v219 = a3;
            v220 = v11;
            v221 = (*(uint64_t (**)(uint64_t))(16 * *(unsigned int *)(v217 + 0x4C) + 0x70))(v11);
            v222 = v220;
            v13 = (const JSC::PropertyTable *)v270;
            a3 = v219;
            a2 = v218;
            v8 = g_config;
            v223 = v221;
            if (*(_DWORD *)(v216 + 80))
            {
              v227 = *(_DWORD *)(v216 + 80);
              if ((v227 & 0x27) != 0 && (v227 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v264, 7u, v219, v270, v11, a6, a7, a8);
              v8 = g_config;
              a2 = v218;
              a3 = v219;
              v13 = (const JSC::PropertyTable *)v270;
              v222 = v220;
              if (*(_QWORD *)(v216 + 16))
                break;
            }
            if ((v223 & 1) != 0)
              goto LABEL_115;
            v224 = *(unsigned __int8 *)(a4 + 50);
            if (v224 == 3)
            {
              if (*(_BYTE *)(a4 + 52))
                break;
              v225 = *(unsigned __int8 *)(v222 + 5);
              if (v225 != 61)
              {
LABEL_336:
                if ((v225 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v222 + 40) & 7u) > 2)
                  {
                    __dst[0] = 0;
                    v278 = 0;
                    v229 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v220, (uint64_t)__dst, a3, (uint64_t)v13, v11, a6, a7, a8);
                    v228 = v230 ? v229 : 0;
                  }
                  else
                  {
                    v228 = *(_QWORD *)(v220 + 24);
                  }
                  v13 = (const JSC::PropertyTable *)v270;
                  v8 = g_config;
                  a2 = v218;
                  a3 = v219;
                  v222 = v220;
                  if (v228 <= (unint64_t)v267)
                    break;
                }
              }
            }
            else
            {
              v225 = *(unsigned __int8 *)(v222 + 5);
              if (v225 != 61)
                goto LABEL_336;
              if (v224 == 1)
                break;
            }
            if ((*(_WORD *)(v217 + 12) & 0x800) == 0 || *(_BYTE *)(a4 + 50) == 3)
            {
              v226 = *(_QWORD *)(16 * (*(_DWORD *)v222 & 0xFFFFFFFE) + 0x30);
              if (!v226)
                v226 = *(_QWORD *)(v222 + 16);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v222 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v226 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, const JSC::PropertyTable *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v222 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v220, v218, a3, v13);
              }
              else
              {
                v226 = *(_QWORD *)(16 * (*(_DWORD *)v222 & 0xFFFFFFFE) + 0x30);
                if (!v226)
                  v226 = *(_QWORD *)(v220 + 16);
              }
              if (*(_DWORD *)(v216 + 80))
              {
                v231 = *(_DWORD *)(v216 + 80);
                if ((v231 & 0x27) != 0 && (v231 & 0x20) == 0)
                  JSC::VMTraps::handleTraps(v264, 7u, a3, (uint64_t)v13, v11, a6, a7, a8);
                v8 = g_config;
                a2 = v218;
                a3 = v219;
                v13 = (const JSC::PropertyTable *)v270;
                if (*(_QWORD *)(v216 + 16))
                  break;
              }
              else
              {
                v8 = g_config;
                a2 = v218;
                a3 = v219;
                v13 = (const JSC::PropertyTable *)v270;
              }
            }
            if ((v226 & 0xFFFE000000000002) == 0)
            {
              v11 = v226;
              if (*(unsigned __int8 *)(v226 + 5) > 0x16u)
                continue;
            }
            break;
          }
        }
LABEL_46:
        if (!*(_DWORD *)(v14 + 80))
          goto LABEL_47;
        v200 = *(_DWORD *)(v14 + 80);
        if ((v200 & 0x27) != 0 && (v200 & 0x20) == 0)
        {
          v203 = a4;
          v204 = a2;
          v205 = v8;
          v206 = a3;
          v207 = v13;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, (uint64_t)v13, v11, a6, a7, a8);
          v13 = v207;
          a3 = v206;
          a2 = v204;
          a4 = v203;
          v8 = v205;
        }
        if (!*(_QWORD *)(v14 + 16))
        {
LABEL_47:
          v59 = *(JSC::VM **)(a2 + 56);
          if (!(_DWORD)v13)
            goto LABEL_99;
          v60 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
          if ((v13 & ~*(_DWORD *)(v60 + 0x20)) != 0)
            goto LABEL_99;
          v61 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x58);
          if (!v61)
          {
            v62 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x40);
            if (!v62 || *(_BYTE *)(v62 + 5) != 1 && *(_DWORD *)(v62 + 80) < 2u)
              goto LABEL_99;
            v63 = a4;
            v64 = a2;
            v65 = a3;
            v66 = v8;
            JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, v13, v11, a6, a7, a8);
            a3 = v65;
            a2 = v64;
            a4 = v63;
            v8 = v66;
            if (!v61)
              goto LABEL_99;
          }
          if (!*(_DWORD *)(v61 + 24))
            goto LABEL_99;
          v67 = *(_QWORD *)(v61 + 16);
          v68 = v67 & 0xFFFFFFFFFFFFFFFELL;
          v69 = *(unsigned int *)(v61 + 8);
          v70 = *(_DWORD *)(a3 + 16);
          if ((v67 & 1) != 0)
          {
            if ((v70 & 0x20) != 0)
              v70 = *(_DWORD *)(a3 + 32);
            v71 = *(_DWORD *)(v61 + 12);
            v72 = (v70 >> 8) & *(_QWORD *)&v71;
            v73 = *(unsigned __int8 *)(v68 + v72);
            if (*(_BYTE *)(v68 + v72))
            {
              v74 = v68 + v69;
              v75 = 1;
              while (1)
              {
                v76 = *(_QWORD *)(v74 + 8 * (v73 - 1));
                if (a3 == (v76 & 0xFFFFFFFFFFFFLL))
                  break;
                v72 = ((_DWORD)v72 + v75) & v71;
                v73 = *(unsigned __int8 *)(v68 + v72);
                ++v75;
                if (!*(_BYTE *)(v68 + v72))
                  goto LABEL_99;
              }
              a6 = (v76 >> 16) & 0xFF00000000 | HIBYTE(v76);
              goto LABEL_87;
            }
            goto LABEL_99;
          }
          if ((v70 & 0x20) != 0)
            v70 = *(_DWORD *)(a3 + 32);
          v86 = *(_DWORD *)(v61 + 12);
          v87 = v86 & (v70 >> 8);
          v88 = *(_DWORD *)(v68 + 4 * v87);
          if (v88)
          {
            v89 = v68 + 4 * v69;
            v90 = 1;
            while (1)
            {
              v91 = (v88 - 1);
              if (*(_QWORD *)(v89 + 16 * v91) == a3)
                break;
              v87 = (v87 + v90) & v86;
              v88 = *(_DWORD *)(v68 + 4 * v87);
              ++v90;
              if (!v88)
                goto LABEL_99;
            }
            a6 = *(unsigned int *)(v89 + 16 * v91 + 8) | ((unint64_t)*(unsigned __int8 *)(v89 + 16 * v91 + 12) << 32);
LABEL_87:
            if ((_DWORD)a6 != -1)
            {
              v77 = HIDWORD(a6);
              if ((int)a6 <= 63)
              {
                v94 = a6 << 32;
              }
              else
              {
                v12 = *(_QWORD *)(v10 + 8) - 8;
                v94 = 0x3F00000000 - (a6 << 32);
              }
              v80 = *(_QWORD *)(v12 + (v94 >> 29));
              if ((v80 & 0xFFFE000000000002) == 0)
              {
                v95 = *(unsigned __int8 *)(v80 + 5);
                if (v95 != 5)
                {
                  if (v95 != 6)
                    goto LABEL_94;
                  v113 = *(_DWORD *)(v60 + 16) & 3;
                  v119 = *(_QWORD *)(v80 + 8);
                  v118 = *(_QWORD *)(v80 + 16);
                  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v80 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
                  {
                    v117 = *(_QWORD *)(v80 + 24);
                    v116 = *(_QWORD *)(v80 + 32);
                    *(_QWORD *)a4 = v119;
                    *(_QWORD *)(a4 + 8) = v118;
                    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
                    *(_QWORD *)(a4 + 32) = v10;
                    goto LABEL_120;
                  }
                  *(_QWORD *)a4 = v119;
                  *(_QWORD *)(a4 + 8) = v118;
                  *(_DWORD *)(a4 + 16) = HIDWORD(a6);
                  *(_QWORD *)(a4 + 32) = v10;
LABEL_281:
                  result = 1;
                  *(_BYTE *)(a4 + 49) = 3;
                  if (v113 != 2)
                    *(_BYTE *)(a4 + 48) = 1;
                  goto LABEL_315;
                }
                v92 = (unsigned int *)v10;
                v93 = (uint64_t)v59;
LABEL_97:
                v97 = a4;
                v98 = v8;
                JSC::JSObject::fillGetterPropertySlot(v92, v93, v97, v80, v77, a6);
                v8 = v98;
LABEL_115:
                result = 1;
                goto LABEL_315;
              }
LABEL_94:
              *(_QWORD *)a4 = v80;
              *(_QWORD *)(a4 + 32) = v10;
              goto LABEL_95;
            }
          }
LABEL_99:
          if ((*(_BYTE *)(v10 + 6) & 0x20) != 0)
          {
            v109 = a2;
            v110 = a3;
            v111 = v8;
            v112 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v10, v59, a3, a4);
            a3 = v110;
            a2 = v109;
            v8 = v111;
            if ((v112 & 1) != 0)
              goto LABEL_115;
          }
          if (a3)
          {
            v99 = *(_DWORD *)(a3 + 16);
            if ((v99 & 0x20) == 0)
            {
              v100 = *(_BYTE **)(a3 + 8);
              v101 = *(unsigned int *)(a3 + 4);
              if ((v99 & 4) != 0)
              {
                if (!(_DWORD)v101)
                  goto LABEL_105;
                v102 = *v100 - 48;
                if (v102 > 9 || v101 >= 2 && *v100 == 48)
                  goto LABEL_105;
                v208 = v100 + 1;
                v209 = v101 - 1;
                while (v209)
                {
                  if (v102 > 0x19999999)
                    goto LABEL_105;
                  v210 = *v208 - 48;
                  if (v210 > 9)
                    goto LABEL_105;
                  v103 = 0;
                  v104 = 0;
                  v105 = 0;
                  v85 = __CFADD__(v210, 10 * v102);
                  v102 = v210 + 10 * v102;
                  ++v208;
                  --v209;
                  if (v85)
                    goto LABEL_313;
                }
LABEL_307:
                v103 = 0x100000000;
                if (v102 == -1)
                {
                  v103 = 0;
                  v104 = 0;
                }
                else
                {
                  v104 = v102;
                }
                if (v102 == -1)
                  v105 = 0;
                else
                  v105 = v102 & 0xFFFFFF00;
              }
              else
              {
                if ((_DWORD)v101)
                {
                  v102 = *(unsigned __int16 *)v100 - 48;
                  if (v102 <= 9 && (*(_WORD *)v100 != 48 || v101 <= 1))
                  {
                    v106 = (unsigned __int16 *)(v100 + 2);
                    v107 = v101 - 1;
                    while (v107)
                    {
                      if (v102 > 0x19999999)
                        goto LABEL_105;
                      v108 = *v106 - 48;
                      if (v108 > 9)
                        goto LABEL_105;
                      v103 = 0;
                      v104 = 0;
                      v105 = 0;
                      v85 = __CFADD__(v108, 10 * v102);
                      v102 = v108 + 10 * v102;
                      ++v106;
                      --v107;
                      if (v85)
                        goto LABEL_313;
                    }
                    goto LABEL_307;
                  }
                }
LABEL_105:
                v103 = 0;
                v104 = 0;
                v105 = 0;
              }
LABEL_313:
              if ((v103 & 0x100000000) != 0)
              {
                v211 = a4;
                v212 = v8;
                result = JSC::JSObject::getOwnPropertySlotByIndex(v10, a2, (const WTF::StringImpl *)(v105 | v104), v211, v11, a6, a7, a8);
                v8 = v212;
                goto LABEL_315;
              }
            }
          }
        }
        result = 0;
        goto LABEL_315;
      }
      v15 = (_BYTE *)(v16 + 6);
      v17 = v16;
    }
    while ((*(_BYTE *)(v16 + 6) & 8) == 0);
  }
  if (!a3)
    goto LABEL_145;
  v120 = *(_DWORD *)(a3 + 16);
  if ((v120 & 0x20) != 0)
    goto LABEL_145;
  v121 = *(_BYTE **)(a3 + 8);
  v122 = *(unsigned int *)(a3 + 4);
  if ((v120 & 4) != 0)
  {
    if ((_DWORD)v122)
    {
      v232 = *v121 - 48;
      if (v232 <= 9 && (v122 < 2 || *v121 != 48))
      {
        v253 = v122 - 1;
        v254 = v121 + 1;
        while (v253)
        {
          if (v232 > 0x19999999)
            goto LABEL_374;
          v255 = *v254 - 48;
          if (v255 > 9)
            goto LABEL_374;
          v129 = 0;
          LOBYTE(v122) = 0;
          v233 = 0;
          v85 = __CFADD__(v255, 10 * v232);
          v232 = v255 + 10 * v232;
          --v253;
          ++v254;
          if (v85)
            goto LABEL_376;
        }
        if (v232 == -1)
          v129 = 0;
        else
          v129 = v232 & 0xFFFFFF00;
        if (v232 == -1)
          LOBYTE(v122) = 0;
        else
          LOBYTE(v122) = v232;
        if (v232 == -1)
          v233 = 0;
        else
          v233 = 0x100000000;
LABEL_376:
        v125 = v122;
        if ((v233 & 0x100000000) == 0)
          goto LABEL_145;
        goto LABEL_377;
      }
LABEL_374:
      v129 = 0;
      LOBYTE(v122) = 0;
    }
    else
    {
      v129 = 0;
    }
    v233 = 0;
    goto LABEL_376;
  }
  if (!(_DWORD)v122)
  {
    v124 = 0;
    goto LABEL_129;
  }
  v123 = *(unsigned __int16 *)v121 - 48;
  if (v123 > 9 || *(_WORD *)v121 == 48 && v122 > 1)
  {
LABEL_128:
    v124 = 0;
    LOBYTE(v122) = 0;
LABEL_129:
    v125 = 0;
    goto LABEL_144;
  }
  v126 = (unsigned __int16 *)(v121 + 2);
  v127 = v122 - 1;
  while (v127)
  {
    if (v123 > 0x19999999)
      goto LABEL_128;
    v128 = *v126 - 48;
    if (v128 > 9)
      goto LABEL_128;
    v124 = 0;
    LOBYTE(v122) = 0;
    v125 = 0;
    v85 = __CFADD__(v128, 10 * v123);
    v123 = v128 + 10 * v123;
    ++v126;
    --v127;
    if (v85)
      goto LABEL_144;
  }
  v125 = v123 & 0xFFFFFF00;
  v124 = 0x100000000;
  if (v123 == -1)
  {
    v124 = 0;
    LOBYTE(v122) = 0;
  }
  else
  {
    LOBYTE(v122) = v123;
  }
  if (v123 == -1)
    v125 = 0;
LABEL_144:
  v129 = v122;
  if ((v124 & 0x100000000) != 0)
  {
LABEL_377:
    v268 = (JSC::VM *)(v125 | v129);
    v271 = v13;
    v234 = *(_QWORD *)(a2 + 56);
    v265 = (JSC::VMTraps *)(v234 + 64);
    v259 = a2;
    v261 = a3;
    v262 = a4;
    v273 = v10;
    v276 = v12;
    while (1)
    {
      v235 = v8;
      v236 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
      v237 = v11;
      v238 = (*(uint64_t (**)(uint64_t))(16 * *(unsigned int *)(v236 + 0x4C) + 0x70))(v11);
      v241 = v238;
      if (*(_DWORD *)(v234 + 80))
      {
        v246 = *(_DWORD *)(v234 + 80);
        if ((v246 & 0x27) != 0 && (v246 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v265, 7u, v239, v240, v11, a6, a7, a8);
        v247 = *(_QWORD *)(v234 + 16);
        if (v247)
          v248 = 1;
        else
          v248 = v241;
        if ((v248 & 1) != 0)
        {
          v8 = v235;
          a2 = v259;
          a3 = v261;
          a4 = v262;
          v10 = v273;
          v12 = v276;
          v13 = v271;
          if (!v247)
            goto LABEL_115;
          goto LABEL_46;
        }
      }
      else if ((v238 & 1) != 0)
      {
        result = 1;
        v8 = v235;
        goto LABEL_315;
      }
      v242 = *(unsigned __int8 *)(v262 + 50);
      if (v242 == 3)
      {
        a3 = v261;
        a4 = v262;
        v8 = v235;
        a2 = v259;
        v10 = v273;
        v12 = v276;
        v13 = v271;
        if (*(_BYTE *)(v262 + 52))
          goto LABEL_46;
        v243 = v237;
        v244 = *(unsigned __int8 *)(v237 + 5);
        if (v244 == 61)
          goto LABEL_383;
      }
      else
      {
        v243 = v237;
        v244 = *(unsigned __int8 *)(v237 + 5);
        a2 = v259;
        a3 = v261;
        a4 = v262;
        v10 = v273;
        v12 = v276;
        v13 = v271;
        if (v244 == 61)
        {
          v8 = v235;
          if (v242 == 1)
            goto LABEL_46;
          goto LABEL_383;
        }
      }
      if ((v244 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v243 + 40) & 7u) > 2)
        {
          __dst[0] = 0;
          v278 = 0;
          v250 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v237, (uint64_t)__dst, a3, (uint64_t)v13, v11, a6, a7, a8);
          v249 = v251 ? v250 : 0;
        }
        else
        {
          v249 = *(_QWORD *)(v237 + 24);
        }
        v13 = v271;
        v8 = v235;
        a2 = v259;
        a3 = v261;
        a4 = v262;
        v10 = v273;
        v12 = v276;
        if (v249 <= (unint64_t)v268)
          goto LABEL_46;
      }
LABEL_383:
      if ((*(_WORD *)(v236 + 12) & 0x800) == 0 || *(_BYTE *)(v262 + 50) == 3)
      {
        v245 = *(_QWORD *)(16 * (*(_DWORD *)v237 & 0xFFFFFFFE) + 0x30);
        v8 = v235;
        a2 = v259;
        a3 = v261;
        a4 = v262;
        v10 = v273;
        v12 = v276;
        v13 = v271;
        if (!v245)
          v245 = *(_QWORD *)(v237 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v237 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v245 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, const JSC::PropertyTable *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v237 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v237, v259, a3, v13);
        }
        else
        {
          v245 = *(_QWORD *)(16 * (*(_DWORD *)v237 & 0xFFFFFFFE) + 0x30);
          if (!v245)
            v245 = *(_QWORD *)(v237 + 16);
        }
        if (*(_DWORD *)(v234 + 80))
        {
          v252 = *(_DWORD *)(v234 + 80);
          if ((v252 & 0x27) != 0 && (v252 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v265, 7u, a3, (uint64_t)v13, v11, a6, a7, a8);
          v8 = v235;
          a2 = v259;
          a3 = v261;
          a4 = v262;
          v10 = v273;
          v12 = v276;
          v13 = v271;
          if (*(_QWORD *)(v234 + 16))
            goto LABEL_46;
        }
        else
        {
          v8 = v235;
          a2 = v259;
          a3 = v261;
          a4 = v262;
          v10 = v273;
          v12 = v276;
          v13 = v271;
        }
      }
      if ((v245 & 0xFFFE000000000002) == 0)
      {
        v11 = v245;
        if (*(unsigned __int8 *)(v245 + 5) > 0x16u)
          continue;
      }
      goto LABEL_46;
    }
  }
LABEL_145:
  v266 = *(JSC::VM **)(a2 + 56);
  v263 = (JSC::VM *)((char *)v266 + 64);
  while (1)
  {
    v130 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v16 + 6) & 8) == 0)
      break;
    v258 = a2;
    v260 = a3;
    v269 = v13;
    v166 = (*(uint64_t (**)(uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C)
                                              + 0x68))(v16);
    if (*((_DWORD *)v266 + 20))
    {
      v195 = *((_DWORD *)v266 + 20);
      if ((v195 & 0x27) != 0 && (v195 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v263, 7u, v164, v165, v11, a6, a7, a8);
      v13 = v269;
      v8 = g_config;
      a2 = v258;
      a3 = v260;
      if (*((_QWORD *)v266 + 2))
        goto LABEL_46;
    }
    if ((v166 & 1) != 0)
    {
      result = 1;
      v8 = g_config;
      goto LABEL_315;
    }
    v167 = a4;
    v168 = *(unsigned __int8 *)(a4 + 50);
    if (v168 == 3)
    {
      v8 = g_config;
      a2 = v258;
      a3 = v260;
      v13 = v269;
      if (*(_BYTE *)(a4 + 52))
        goto LABEL_46;
      v169 = *(unsigned __int8 *)(v16 + 5);
      if (v169 == 61)
        goto LABEL_245;
    }
    else
    {
      v169 = *(unsigned __int8 *)(v16 + 5);
      if (v169 == 61)
      {
        v8 = g_config;
        a2 = v258;
        a3 = v260;
        v13 = v269;
        if (v168 == 1)
          goto LABEL_46;
        goto LABEL_175;
      }
    }
    if (!v260)
      goto LABEL_244;
    if ((v169 - 50) < 0xFFFFFFF5)
      goto LABEL_244;
    v170 = *(_DWORD *)(v260 + 16);
    if ((v170 & 0x20) != 0)
      goto LABEL_244;
    v171 = *(unsigned int *)(v260 + 4);
    if (!(_DWORD)v171)
      goto LABEL_244;
    v172 = *(unsigned __int8 **)(v260 + 8);
    if ((v170 & 4) != 0)
    {
      v173 = *v172;
      if ((_DWORD)v171 == 1)
      {
LABEL_200:
        v8 = g_config;
        a2 = v258;
        a3 = v260;
        v13 = v269;
        if ((v173 - 48) < 0xA)
          goto LABEL_46;
        goto LABEL_175;
      }
      if (v173 == 45)
      {
        v173 = v172[1];
        goto LABEL_204;
      }
      if ((v173 - 48) < 0xA)
        goto LABEL_216;
      if ((_DWORD)v171 == 8)
        goto LABEL_213;
    }
    else
    {
      v173 = *(unsigned __int16 *)v172;
      if ((_DWORD)v171 == 1)
        goto LABEL_200;
      if (v173 == 45)
      {
        v173 = *((unsigned __int16 *)v172 + 1);
LABEL_204:
        if ((v173 - 48) < 0xA)
        {
          v8 = g_config;
          a2 = v258;
          a3 = v260;
          v13 = v269;
          if ((_DWORD)v171 == 2)
            goto LABEL_46;
          goto LABEL_216;
        }
        if ((_DWORD)v171 != 9)
          goto LABEL_244;
LABEL_213:
        v174 = v173 == 73;
        goto LABEL_214;
      }
      if ((v173 - 48) < 0xA || (_DWORD)v171 == 8 && v173 == 73)
        goto LABEL_216;
    }
    if ((_DWORD)v171 != 3)
      goto LABEL_244;
    v174 = v173 == 78;
LABEL_214:
    v8 = g_config;
    a2 = v258;
    a3 = v260;
    v13 = v269;
    if (!v174)
      goto LABEL_175;
LABEL_216:
    v256 = v256 & 0xFFFFFF0000000000 | v171 | ((unint64_t)((v170 >> 2) & 1) << 32);
    JSC::jsToNumber(v172, v256);
    v176 = (v175 >> 52) & 0x7FF;
    if ((_DWORD)v176 == 2047)
    {
      if ((v175 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v177 = v280;
      }
      else
      {
        if ((v175 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v183 = &__s[1];
        }
        else
        {
          v183 = __s;
        }
        *(_QWORD *)v183 = 0x7974696E69666E49;
        v177 = v183 + 8;
      }
      goto LABEL_230;
    }
    v178 = v175 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v175 & 0x8000000000000000) != 0 && v178)
    {
      __s[0] = 45;
      v179 = &__s[1];
    }
    else
    {
      if (!v178)
      {
        __s[0] = 48;
        v177 = &__s[1];
        goto LABEL_230;
      }
      v179 = __s;
    }
    v180 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v175 & 0x800FFFFFFFFFFFFFLL, v176);
    v177 = WTF::dragonbox::detail::to_shortest(v180, v181, (uint64_t)v179, v182);
LABEL_230:
    *v177 = 0;
    v184 = strlen(__s);
    memcpy(__dst, __s, v184);
    __dst[v184] = 0;
    v185 = *(unsigned int *)(v260 + 4);
    v186 = *(unsigned __int8 **)(v260 + 8);
    if ((*(_BYTE *)(v260 + 16) & 4) != 0)
    {
      if ((_DWORD)v185)
      {
        v191 = __dst;
        v192 = *(unsigned int *)(v260 + 4);
        do
        {
          v194 = *v191++;
          v193 = v194;
          if (!v194 || *v186 != v193)
            goto LABEL_244;
          ++v186;
        }
        while (--v192);
      }
    }
    else if ((_DWORD)v185)
    {
      v187 = __dst;
      v188 = *(unsigned int *)(v260 + 4);
      while (1)
      {
        v190 = *v187++;
        v189 = v190;
        if (!v190 || *(unsigned __int16 *)v186 != v189)
          break;
        v186 += 2;
        if (!--v188)
          goto LABEL_242;
      }
LABEL_244:
      v8 = g_config;
LABEL_245:
      a2 = v258;
      a3 = v260;
      a4 = v167;
      v13 = v269;
      goto LABEL_175;
    }
LABEL_242:
    v8 = g_config;
    a2 = v258;
    a3 = v260;
    a4 = v167;
    v13 = v269;
    if (!__dst[v185])
      goto LABEL_46;
LABEL_175:
    if ((*(_WORD *)(v130 + 12) & 0x800) == 0)
    {
      v153 = *(_DWORD *)v16;
LABEL_177:
      v154 = *(_QWORD *)(16 * (v153 & 0xFFFFFFFE) + 0x30);
      if (!v154)
        v154 = *(_QWORD *)(v16 + 16);
      goto LABEL_179;
    }
    v153 = *(_DWORD *)v16;
    if (*(_BYTE *)(a4 + 50) == 3)
      goto LABEL_177;
    v160 = v13;
    v161 = a3;
    v257 = a2;
    v162 = v8;
    v163 = 16 * (v153 & 0xFFFFFFFE);
    if ((*(_WORD *)(v163 + 12) & 0x800) != 0)
    {
      v154 = (*(uint64_t (**)(uint64_t, uint64_t))(16 * *(unsigned int *)(v163 + 76) + 0xB0))(v16, a2);
    }
    else
    {
      v154 = *(_QWORD *)(v163 + 48);
      if (!v154)
        v154 = *(_QWORD *)(v16 + 16);
    }
    if (*((_DWORD *)v266 + 20))
    {
      v196 = *((_DWORD *)v266 + 20);
      if ((v196 & 0x27) != 0 && (v196 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v263, 7u, a3, (uint64_t)v13, v11, a6, a7, a8);
      v8 = v162;
      a2 = v257;
      a3 = v161;
      v13 = v160;
      if (*((_QWORD *)v266 + 2))
        goto LABEL_46;
    }
    else
    {
      v8 = v162;
      a2 = v257;
      a3 = v161;
      v13 = v160;
    }
LABEL_179:
    if ((v154 & 0xFFFE000000000002) == 0)
    {
      v16 = v154;
      if (*(unsigned __int8 *)(v154 + 5) > 0x16u)
        continue;
    }
    goto LABEL_46;
  }
  if (!(_DWORD)v13 || (v13 & ~*(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_174;
  v131 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x58);
  if (!v131)
  {
    v132 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x40);
    if (!v132 || *(_BYTE *)(v132 + 5) != 1 && *(_DWORD *)(v132 + 80) < 2u)
      goto LABEL_174;
    v133 = a2;
    v134 = a3;
    v135 = v8;
    v136 = v13;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE)), v266, 1, v13, v11, a6, a7, a8);
    v13 = v136;
    a3 = v134;
    a2 = v133;
    v8 = v135;
    if (!v131)
      goto LABEL_174;
  }
  if (!*(_DWORD *)(v131 + 24))
    goto LABEL_174;
  v137 = *(_QWORD *)(v131 + 16);
  v138 = v137 & 0xFFFFFFFFFFFFFFFELL;
  v139 = *(unsigned int *)(v131 + 8);
  v140 = *(_DWORD *)(a3 + 16);
  if ((v137 & 1) != 0)
  {
    if ((v140 & 0x20) != 0)
      v140 = *(_DWORD *)(a3 + 32);
    v141 = *(_DWORD *)(v131 + 12);
    v142 = (v140 >> 8) & *(_QWORD *)&v141;
    v143 = *(unsigned __int8 *)(v138 + v142);
    if (*(_BYTE *)(v138 + v142))
    {
      v144 = v138 + v139;
      v145 = 1;
      while (1)
      {
        v146 = *(_QWORD *)(v144 + 8 * (v143 - 1));
        if (a3 == (v146 & 0xFFFFFFFFFFFFLL))
          break;
        v142 = ((_DWORD)v142 + v145) & v141;
        v143 = *(unsigned __int8 *)(v138 + v142);
        ++v145;
        if (!*(_BYTE *)(v138 + v142))
          goto LABEL_174;
      }
      a6 = (v146 >> 16) & 0xFF00000000 | HIBYTE(v146);
      goto LABEL_171;
    }
    goto LABEL_174;
  }
  if ((v140 & 0x20) != 0)
    v140 = *(_DWORD *)(a3 + 32);
  v147 = *(_DWORD *)(v131 + 12);
  v148 = v147 & (v140 >> 8);
  v149 = *(_DWORD *)(v138 + 4 * v148);
  if (!v149)
    goto LABEL_174;
  v150 = v138 + 4 * v139;
  v151 = 1;
  while (1)
  {
    v152 = (v149 - 1);
    if (*(_QWORD *)(v150 + 16 * v152) == a3)
      break;
    v148 = (v148 + v151) & v147;
    v149 = *(_DWORD *)(v138 + 4 * v148);
    ++v151;
    if (!v149)
      goto LABEL_174;
  }
  a6 = *(unsigned int *)(v150 + 16 * v152 + 8) | ((unint64_t)*(unsigned __int8 *)(v150 + 16 * v152 + 12) << 32);
LABEL_171:
  if ((_DWORD)a6 == -1)
  {
LABEL_174:
    if ((*(_BYTE *)(v16 + 6) & 0x20) != 0)
    {
      v155 = a2;
      v156 = a3;
      v157 = v13;
      v158 = v8;
      v159 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v16, v266, a3, a4);
      v13 = v157;
      a3 = v156;
      a2 = v155;
      v8 = v158;
      if ((v159 & 1) != 0)
        goto LABEL_115;
    }
    goto LABEL_175;
  }
  v77 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v197 = v16 + 16;
    v198 = a6 << 32;
  }
  else
  {
    v197 = *(_QWORD *)(v16 + 8) - 8;
    v198 = 0x3F00000000 - (a6 << 32);
  }
  v80 = *(_QWORD *)(v197 + (v198 >> 29));
  if ((v80 & 0xFFFE000000000002) != 0)
    goto LABEL_274;
  v199 = *(unsigned __int8 *)(v80 + 5);
  if (v199 == 5)
  {
    v92 = (unsigned int *)v16;
    v93 = (uint64_t)v266;
    goto LABEL_97;
  }
  if (v199 != 6)
  {
LABEL_274:
    *(_QWORD *)a4 = v80;
    *(_QWORD *)(a4 + 32) = v16;
    goto LABEL_95;
  }
  v113 = *(_DWORD *)(v130 + 16) & 3;
  v202 = *(_QWORD *)(v80 + 8);
  v201 = *(_QWORD *)(v80 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v80 & 0xFFFFFFFE) + 0x4C)))
  {
    *(_QWORD *)a4 = v202;
    *(_QWORD *)(a4 + 8) = v201;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = v16;
    goto LABEL_281;
  }
  v117 = *(_QWORD *)(v80 + 24);
  v116 = *(_QWORD *)(v80 + 32);
  *(_QWORD *)a4 = v202;
  *(_QWORD *)(a4 + 8) = v201;
  *(_DWORD *)(a4 + 16) = HIDWORD(a6);
  *(_QWORD *)(a4 + 32) = v16;
LABEL_120:
  *(_BYTE *)(a4 + 49) = 3;
  result = 1;
  if (v113 != 2)
    *(_BYTE *)(a4 + 48) = 1;
  *(_BYTE *)(a4 + 51) = 1;
  *(_QWORD *)(a4 + 72) = v117;
  *(_QWORD *)(a4 + 80) = v116;
LABEL_315:
  if (!*((_BYTE *)v8 + 1703))
  {
    __break(0xC471u);
    JUMPOUT(0x198C668A0);
  }
  return result;
}

void `anonymous namespace'::ImpureGetter::visitChildren(_anonymous_namespace_::ImpureGetter *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198C66FC0);
  }
  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_7:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_8;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
LABEL_8:
  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_13;
}

uint64_t `anonymous namespace'::ImpureGetter::visitChildren(_anonymous_namespace_::ImpureGetter *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
LABEL_9:
    JUMPOUT(0x198C670C4);
  }
  *((_QWORD *)a2 + 11) = v7;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_9;
  }
  JSC::JSObject::visitChildren(this, a2, a3);
  result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C670E4);
  }
  *(_QWORD *)(v7[0] + 88) = v8;
  return result;
}

uint64_t `anonymous namespace'::CustomGetter::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  const JSC::PropertyTable *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  uint64_t result;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  _BYTE *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned __int16 *v77;
  uint64_t v78;
  unsigned int v79;
  BOOL v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t v87;
  unsigned int v88;
  WTF::StringImpl *v89;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_99;
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"customGetter", 0xCuLL, a4, a5, a6, a7, a8, &v89);
  v19 = v89;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  if (v19 == (WTF::StringImpl *)a3)
  {
    *(_QWORD *)(a4 + 8) = 0;
    v42 = 14;
LABEL_27:
    *(_DWORD *)(a4 + 16) = v42;
    *(_QWORD *)(a4 + 32) = a1;
    *(_WORD *)(a4 + 48) = 769;
LABEL_28:
    result = 1;
    goto LABEL_95;
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"customGetterAccessor", 0x14uLL, v14, v15, v16, v17, v18, &v89);
  v27 = v89;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v20, v21, (uint64_t)v22, v23, v24, v25, v26);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  if (v27 == (WTF::StringImpl *)a3)
  {
    *(_QWORD *)(a4 + 8) = 0;
    v42 = 46;
    goto LABEL_27;
  }
  v28 = *(JSC::VM **)(a2 + 56);
  if (!(a3 >> 4))
    goto LABEL_50;
  v29 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v29 + 0x20)) != 0)
    goto LABEL_50;
  v30 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v30)
  {
    v31 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v31 || *(_BYTE *)(v31 + 5) != 1 && *(_DWORD *)(v31 + 80) < 2u)
      goto LABEL_50;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, v22, v23, v24, v25, v26);
    if (!v30)
      goto LABEL_50;
  }
  if (!*(_DWORD *)(v30 + 24))
    goto LABEL_50;
  v32 = *(_QWORD *)(v30 + 16);
  v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
  v34 = *(unsigned int *)(v30 + 8);
  v35 = *(_DWORD *)(a3 + 16);
  if ((v32 & 1) != 0)
  {
    if ((v35 & 0x20) != 0)
      v35 = *(_DWORD *)(a3 + 32);
    v36 = *(_DWORD *)(v30 + 12);
    v37 = (v35 >> 8) & *(_QWORD *)&v36;
    v38 = *(unsigned __int8 *)(v33 + v37);
    if (*(_BYTE *)(v33 + v37))
    {
      v39 = v33 + v34;
      v40 = 1;
      while (1)
      {
        v41 = *(_QWORD *)(v39 + 8 * (v38 - 1));
        if (a3 == (v41 & 0xFFFFFFFFFFFFLL))
          break;
        v37 = ((_DWORD)v37 + v40) & v36;
        v38 = *(unsigned __int8 *)(v33 + v37);
        ++v40;
        if (!*(_BYTE *)(v33 + v37))
          goto LABEL_50;
      }
      v24 = (v41 >> 16) & 0xFF00000000 | HIBYTE(v41);
      goto LABEL_40;
    }
LABEL_50:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v28, a3, a4) & 1) != 0)
    {
      goto LABEL_28;
    }
    if (!a3 || (v70 = *(_DWORD *)(a3 + 16), (v70 & 0x20) != 0))
    {
LABEL_94:
      result = 0;
      goto LABEL_95;
    }
    v71 = *(_BYTE **)(a3 + 8);
    v72 = *(unsigned int *)(a3 + 4);
    if ((v70 & 4) != 0)
    {
      if ((_DWORD)v72)
      {
        v73 = *v71 - 48;
        if (v73 <= 9 && (v72 < 2 || *v71 != 48))
        {
          v86 = v71 + 1;
          v87 = v72 - 1;
          while (v87)
          {
            if (v73 > 0x19999999)
              goto LABEL_56;
            v88 = *v86 - 48;
            if (v88 > 9)
              goto LABEL_56;
            v74 = 0;
            v75 = 0;
            v76 = 0;
            v80 = __CFADD__(v88, 10 * v73);
            v73 = v88 + 10 * v73;
            ++v86;
            --v87;
            if (v80)
              goto LABEL_93;
          }
          goto LABEL_87;
        }
      }
    }
    else if ((_DWORD)v72)
    {
      v73 = *(unsigned __int16 *)v71 - 48;
      if (v73 <= 9 && (*(_WORD *)v71 != 48 || v72 <= 1))
      {
        v77 = (unsigned __int16 *)(v71 + 2);
        v78 = v72 - 1;
        while (v78)
        {
          if (v73 > 0x19999999)
            goto LABEL_56;
          v79 = *v77 - 48;
          if (v79 > 9)
            goto LABEL_56;
          v74 = 0;
          v75 = 0;
          v76 = 0;
          v80 = __CFADD__(v79, 10 * v73);
          v73 = v79 + 10 * v73;
          ++v77;
          --v78;
          if (v80)
            goto LABEL_93;
        }
LABEL_87:
        v74 = 0x100000000;
        if (v73 == -1)
        {
          v74 = 0;
          v75 = 0;
        }
        else
        {
          v75 = v73;
        }
        if (v73 == -1)
          v76 = 0;
        else
          v76 = v73 & 0xFFFFFF00;
LABEL_93:
        if ((v74 & 0x100000000) != 0)
        {
          result = JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, (const WTF::StringImpl *)(v76 | v75), a4, v23, v24, v25, v26);
          goto LABEL_95;
        }
        goto LABEL_94;
      }
    }
LABEL_56:
    v74 = 0;
    v75 = 0;
    v76 = 0;
    goto LABEL_93;
  }
  if ((v35 & 0x20) != 0)
    v35 = *(_DWORD *)(a3 + 32);
  v60 = *(_DWORD *)(v30 + 12);
  v61 = v60 & (v35 >> 8);
  v62 = *(_DWORD *)(v33 + 4 * v61);
  if (!v62)
    goto LABEL_50;
  v63 = v33 + 4 * v34;
  v64 = 1;
  while (1)
  {
    v65 = (v62 - 1);
    if (*(_QWORD *)(v63 + 16 * v65) == a3)
      break;
    v61 = (v61 + v64) & v60;
    v62 = *(_DWORD *)(v33 + 4 * v61);
    ++v64;
    if (!v62)
      goto LABEL_50;
  }
  v24 = *(unsigned int *)(v63 + 16 * v65 + 8) | ((unint64_t)*(unsigned __int8 *)(v63 + 16 * v65 + 12) << 32);
LABEL_40:
  if ((_DWORD)v24 == -1)
    goto LABEL_50;
  if ((int)v24 <= 63)
  {
    v66 = a1 + 16;
    v67 = v24 << 32;
  }
  else
  {
    v66 = *(_QWORD *)(a1 + 8) - 8;
    v67 = 0x3F00000000 - (v24 << 32);
  }
  v68 = *(_QWORD *)(v66 + (v67 >> 29));
  if ((v68 & 0xFFFE000000000002) != 0)
    goto LABEL_47;
  v69 = *(unsigned __int8 *)(v68 + 5);
  if (v69 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v28, a4, v68, SHIDWORD(v24), v24);
    goto LABEL_28;
  }
  if (v69 != 6)
  {
LABEL_47:
    *(_QWORD *)a4 = v68;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v24);
    *(_DWORD *)(a4 + 20) = v24;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    goto LABEL_95;
  }
  v81 = *(_DWORD *)(v29 + 16) & 3;
  v83 = *(_QWORD *)(v68 + 8);
  v82 = *(_QWORD *)(v68 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x4C)))
  {
    v85 = *(_QWORD *)(v68 + 24);
    v84 = *(_QWORD *)(v68 + 32);
    *(_QWORD *)a4 = v83;
    *(_QWORD *)(a4 + 8) = v82;
    *(_DWORD *)(a4 + 16) = HIDWORD(v24);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v81 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v85;
    *(_QWORD *)(a4 + 80) = v84;
  }
  else
  {
    *(_QWORD *)a4 = v83;
    *(_QWORD *)(a4 + 8) = v82;
    *(_DWORD *)(a4 + 16) = HIDWORD(v24);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v81 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
LABEL_95:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_99:
    JUMPOUT(0x198C67504);
  }
  return result;
}

unint64_t `anonymous namespace'::DOMJITGetter::create(_anonymous_namespace_::DOMJITGetter *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t SlowCase;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  int v74;
  int v75;
  uint64_t v76;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C67950);
  }
  v10 = *((_QWORD *)this + 1880);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    SlowCase = *(_QWORD *)(v10 + 24);
    if (SlowCase < *(_QWORD *)(v10 + 32))
    {
LABEL_4:
      *(_QWORD *)(v10 + 24) = SlowCase + v11;
      goto LABEL_5;
    }
    SlowCase = *(_QWORD *)(v10 + 40);
    if ((SlowCase & 1) == 0)
    {
      v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = SlowCase + HIDWORD(v62);
      *(_QWORD *)(v10 + 40) = SlowCase + (int)v62;
      goto LABEL_4;
    }
    JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, (uint64_t)this + 192, v11, 0, 0, v69, v70, v71);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)this + 14936, this, 0x20uLL, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x198C67930);
    }
  }
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v13 = *((_DWORD *)a2 + 2);
  *(_DWORD *)SlowCase = (unint64_t)a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v13;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_DWORD *)(SlowCase + 16) = 42;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C67970);
  }
  v14 = (unint64_t *)((char *)this + 38112);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v15 = *v14;
  if (*v14 < *((_QWORD *)this + 4765))
    goto LABEL_9;
  v15 = *((_QWORD *)this + 4766);
  if ((v15 & 1) == 0)
  {
    v60 = *(_QWORD *)(v15 + 8) ^ *((_QWORD *)this + 4767);
    *((_QWORD *)this + 4765) = v15 + HIDWORD(v60);
    *((_QWORD *)this + 4766) = v15 + (int)v60;
LABEL_9:
    *v14 = v15 + 48;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v15 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38088, (uint64_t)this + 192, 48, 0, 0, v63, v64, v65);
LABEL_10:
  *(_DWORD *)v15 = 0;
  v16 = *((_QWORD *)this + 5193);
  v17 = *(_DWORD *)(v16 + 8);
  *(_DWORD *)v15 = v16 >> 4;
  *(_DWORD *)(v15 + 4) = v17;
  *(_QWORD *)(v15 + 16) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"customGetter", 0xCuLL, a4, a5, a6, a7, a8, &v72);
  v18 = v72;
  v72 = 0;
  v73 = SlowCase;
  v74 = -1;
  v19.n128_u64[0] = 0x100000001000000;
  v75 = 0x1000000;
  v76 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, (uint64_t)this, (unint64_t)v18, v15, 34, (uint64_t)&v72, v20, v21, v19);
  *(_DWORD *)((16 * *(unsigned int *)SlowCase) | 0x10) |= 0x18u;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  v29 = *v14;
  if (*v14 < *((_QWORD *)this + 4765))
    goto LABEL_16;
  v29 = *((_QWORD *)this + 4766);
  if ((v29 & 1) == 0)
  {
    v61 = *(_QWORD *)(v29 + 8) ^ *((_QWORD *)this + 4767);
    *((_QWORD *)this + 4765) = v29 + HIDWORD(v61);
    *((_QWORD *)this + 4766) = v29 + (int)v61;
LABEL_16:
    *v14 = v29 + 48;
    goto LABEL_17;
  }
  JSC::sanitizeStackForVM(this, v22, v23, v24, v25, v26, v27, v28);
  v29 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38088, (uint64_t)this + 192, 48, 0, 0, v66, v67, v68);
LABEL_17:
  *(_DWORD *)v29 = 0;
  v30 = *((_QWORD *)this + 5193);
  v31 = *(_DWORD *)(v30 + 8);
  *(_DWORD *)v29 = v30 >> 4;
  *(_DWORD *)(v29 + 4) = v31;
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"customGetter2", 0xDuLL, v24, v25, v26, v27, v28, &v72);
  v32 = v72;
  v72 = 0;
  v73 = SlowCase;
  v74 = -1;
  v33.n128_u64[0] = 0x100000001000000;
  v75 = 0x1000000;
  v76 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, (uint64_t)this, (unint64_t)v32, v29, 34, (uint64_t)&v72, v34, v35, v33);
  *(_DWORD *)((16 * *(unsigned int *)SlowCase) | 0x10) |= 0x18u;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C679F0);
  }
  return SlowCase;
}

uint64_t `anonymous namespace'::DOMJITGetter::createStructure(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v10;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C67B48);
  }
  v8 = (uint64_t)a2;
  v10 = (_QWORD *)(a1 + 40136);
  v18 = 78;
  SlowCase = *(_QWORD *)(a1 + 40136);
  if (SlowCase < v10[1])
    goto LABEL_3;
  SlowCase = v10[2];
  if ((SlowCase & 1) == 0)
  {
    v13 = *(_QWORD *)(SlowCase + 8) ^ v10[3];
    v10[1] = SlowCase + HIDWORD(v13);
    v10[2] = SlowCase + (int)v13;
LABEL_3:
    *v10 = SlowCase + 128;
    goto LABEL_4;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 40112, a1 + 192, 128, 0, 0, v14, v15, v16);
  v8 = (uint64_t)a2;
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C67B94);
  }
  return result;
}

unsigned int *`anonymous namespace'::DOMJITNode::checkSubClassSnippet@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_8;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = 1;
  v3[1] = 0;
  *a1 = v3;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B3BA0;
  result = (unsigned int *)v3[1];
  v3[1] = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198C67C88);
  }
  return result;
}

void WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),`anonymous namespace'::DOMJITNode::checkSubClassSnippet(void)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unsigned __int8 *v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  if (!(_BYTE)qword_1ECF4C6A7
    || (v9 = *(unsigned __int8 **)(a2 + 16),
        v10 = *(_DWORD *)(a2 + 28),
        *(_QWORD *)a8 = a8 + 16,
        *(_QWORD *)(a8 + 8) = 2,
        !v10))
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x198C67E08);
  }
  if (*((_DWORD *)v9 + 1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_16;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198C67E28);
  }
  v12 = *v9 | 0x500000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v12, *(char *)(a1 + 304), a3, a4, a5, a6, a7);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 78, v13, v14, v15, v16, (uint64_t)&v28);
  v22 = v28;
  if (v28 != -1)
  {
    v23 = *(unsigned int *)(a8 + 12);
    if ((_DWORD)v23 == *(_DWORD *)(a8 + 8))
    {
      v24 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a8, (void *)(v23 + 1), (unint64_t)&v28, v17, v18, v19, v20, v21);
      v26 = *v24;
      v25 = (uint64_t *)(v24 + 1);
      v22 = v26;
      LODWORD(v23) = *(_DWORD *)(a8 + 12);
    }
    else
    {
      v25 = &v29;
    }
    v27 = *(_QWORD *)a8 + 12 * v23;
    *(_DWORD *)v27 = v22;
    *(_QWORD *)(v27 + 4) = *v25;
    ++*(_DWORD *)(a8 + 12);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C67E48);
  }
}

unsigned int *`anonymous namespace'::DOMJITGetter::DOMJITAttribute::callDOMGetter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_8;
  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 20) = 0xFFFF0000FFFF0000;
  *(_DWORD *)(v3 + 28) = -65536;
  *a1 = v3;
  *(_BYTE *)(v3 + 16) = 1;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B3BE0;
  result = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198C67F24);
  }
  return result;
}

void WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),`anonymous namespace'::DOMJITGetter::DOMJITAttribute::callDOMGetter(void)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::AssemblerBuffer *v16;
  int i;
  unsigned int v18;
  unint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  JSC::AssemblerBuffer *v29;
  int v30;
  unint64_t v31;
  WTF *v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_30;
  v10 = *(_DWORD *)(a2 + 28);
  if (!v10)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x198C681F8);
  }
  v11 = *(unsigned __int8 **)(a2 + 16);
  if (*((_DWORD *)v11 + 1) != 2)
    goto LABEL_27;
  if (v10 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198C68200);
  }
  if (*((_DWORD *)v11 + 5))
  {
LABEL_27:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_28;
  }
  if (v10 <= 2)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x198C68170);
  }
  if (*((_DWORD *)v11 + 9))
    goto LABEL_27;
  v13 = *v11;
  v14 = v11[16];
  v15 = v11[32];
  v16 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v29 = v16;
      JSC::AssemblerBuffer::outOfLineGrow(v16, a1, a2, a3, a4, a5, a6, a7);
      v16 = v29;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v18 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v16, a1, a2, a3, a4, a5, a6, a7);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (i == -1)
  {
    v20 = 0;
    v32 = (WTF *)&v35;
    v33 = 2;
  }
  else
  {
    v19 = 0xFF000F4100000000;
    if (*(_BYTE *)(a1 + 328))
      v19 = 0xFF000F4500000000;
    v31 = v19;
    v20 = 1;
    v30 = i;
    v32 = (WTF *)&v35;
    v33 = 2;
    v35 = i;
    v36 = v19;
  }
  v34 = v20;
  (*(void (**)(uint64_t, WTF **, uint64_t, unint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v32, a1, domJITGetterSlowCall, v13, v15 | (v14 << 8));
  v28 = v32;
  if (&v35 != (int *)v32 && v32)
  {
    v32 = 0;
    v33 = 0;
    WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
  }
  a8[3] = 0;
  a8[4] = 0;
  a8[2] = 0;
  *a8 = a8 + 2;
  a8[1] = 2;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C681ECLL);
  }
}

unsigned int *`anonymous namespace'::DOMJITGetterNoEffects::DOMJITAttribute::callDOMGetter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_8;
  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *a1 = v3;
  *(_QWORD *)(v3 + 20) = -4294246390;
  *(_DWORD *)(v3 + 28) = -65536;
  *(_BYTE *)(v3 + 16) = 1;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B3E28;
  result = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198C682DCLL);
  }
  return result;
}

void WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),`anonymous namespace'::DOMJITGetterNoEffects::DOMJITAttribute::callDOMGetter(void)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::AssemblerBuffer *v16;
  int i;
  unsigned int v18;
  unint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  JSC::AssemblerBuffer *v29;
  int v30;
  unint64_t v31;
  WTF *v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_30;
  v10 = *(_DWORD *)(a2 + 28);
  if (!v10)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x198C685B0);
  }
  v11 = *(unsigned __int8 **)(a2 + 16);
  if (*((_DWORD *)v11 + 1) != 2)
    goto LABEL_27;
  if (v10 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198C685B8);
  }
  if (*((_DWORD *)v11 + 5))
  {
LABEL_27:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_28;
  }
  if (v10 <= 2)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x198C68528);
  }
  if (*((_DWORD *)v11 + 9))
    goto LABEL_27;
  v13 = *v11;
  v14 = v11[16];
  v15 = v11[32];
  v16 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v29 = v16;
      JSC::AssemblerBuffer::outOfLineGrow(v16, a1, a2, a3, a4, a5, a6, a7);
      v16 = v29;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v18 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v16, a1, a2, a3, a4, a5, a6, a7);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (i == -1)
  {
    v20 = 0;
    v32 = (WTF *)&v35;
    v33 = 2;
  }
  else
  {
    v19 = 0xFF000F4100000000;
    if (*(_BYTE *)(a1 + 328))
      v19 = 0xFF000F4500000000;
    v31 = v19;
    v20 = 1;
    v30 = i;
    v32 = (WTF *)&v35;
    v33 = 2;
    v35 = i;
    v36 = v19;
  }
  v34 = v20;
  (*(void (**)(uint64_t, WTF **, uint64_t, unint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v32, a1, domJITGetterNoEffectSlowCall, v13, v15 | (v14 << 8));
  v28 = v32;
  if (&v35 != (int *)v32 && v32)
  {
    v32 = 0;
    v33 = 0;
    WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
  }
  a8[3] = 0;
  a8[4] = 0;
  a8[2] = 0;
  *a8 = a8 + 2;
  a8[1] = 2;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C685A4);
  }
}

uint64_t `anonymous namespace'::functionDOMJITGetterComplexEnableException(_anonymous_namespace_ *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_15;
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) == 0)
  {
    v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
    v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
    v6 = (char **)(16 * v4);
    if ((_DWORD)v4)
    else
      v7 = 1;
    if (!v7)
    {
      do
      {
        v6 = (char **)v6[2];
        v5 = v6 != 0;
      }
    }
    if (v5)
    {
      *(_BYTE *)(v3 + 20) = 1;
      if (!(_BYTE)qword_1ECF4C6A7)
      {
LABEL_15:
        __break(0xC471u);
        JUMPOUT(0x198C68668);
      }
    }
  }
  return 10;
}

unsigned int *`anonymous namespace'::DOMJITGetterComplex::DOMJITAttribute::callDOMGetter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_8;
  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 20) = 0xFFFF0000FFFF0000;
  *(_DWORD *)(v3 + 28) = -65536;
  *a1 = v3;
  *(_WORD *)(v3 + 4) = 779;
  *(_BYTE *)(v3 + 16) = 1;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E35B3F68;
  v4[1] = 0xB00000001;
  result = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198C68768);
  }
  return result;
}

void WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),`anonymous namespace'::DOMJITGetterComplex::DOMJITAttribute::callDOMGetter(void)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  unsigned int v11;
  unsigned __int8 *v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  int v33;
  unint64_t v34;
  WTF *v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_39;
  v11 = *(_DWORD *)(a3 + 28);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198C68AD0);
  }
  v12 = *(unsigned __int8 **)(a3 + 16);
  if (*((_DWORD *)v12 + 1) != 2)
    goto LABEL_35;
  if (v11 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198C68AD8);
  }
  if (*((_DWORD *)v12 + 5))
    goto LABEL_35;
  if (v11 <= 2)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198C68A40);
  }
  if (*((_DWORD *)v12 + 9))
  {
LABEL_35:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_36;
  }
  v15 = *v12;
  v16 = v12[16];
  v17 = v12[32];
  if (*(_DWORD *)(a1 + 12))
  {
    v18 = 0;
    while (v18 < *(unsigned int *)(a3 + 44))
    {
      v19 = *(_BYTE *)(*(_QWORD *)(a3 + 32) + v18);
      v20 = *(_DWORD *)(a2 + 200);
      if (v20 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v20 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = v19 & 0x1F | 0x52800540;
      v21 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v21;
      if (++v18 >= *(unsigned int *)(a1 + 12))
        goto LABEL_16;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x198C68AC8);
  }
  v21 = *(_DWORD *)(a2 + 200);
LABEL_16:
  while (v21 < *(_DWORD *)(a2 + 52))
  {
    if ((v21 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v21 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v21) = -721215457;
    v21 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v21;
  }
  v22 = v21;
  if ((v21 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v22 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v22) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (v21 == -1)
  {
    v24 = 0;
    v35 = (WTF *)&v38;
    v36 = 2;
  }
  else
  {
    v23 = 0xFF000F4100000000;
    if (*(_BYTE *)(a2 + 328))
      v23 = 0xFF000F4500000000;
    v34 = v23;
    v24 = 1;
    v33 = v21;
    v35 = (WTF *)&v38;
    v36 = 2;
    v38 = v21;
    v39 = v23;
  }
  v37 = v24;
  (*(void (**)(uint64_t, WTF **, uint64_t, unint64_t (*)(unint64_t, uint64_t), uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, &v35, a2, domJITGetterComplexSlowCall, v15, v17 | (v16 << 8));
  v32 = v35;
  if (&v38 != (int *)v35 && v35)
  {
    v35 = 0;
    v36 = 0;
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  }
  a9[3] = 0;
  a9[4] = 0;
  a9[2] = 0;
  *a9 = a9 + 2;
  a9[1] = 2;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C68ABCLL);
  }
}

unsigned int *`anonymous namespace'::DOMJITFunctionObject::checkSubClassSnippet@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_8;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = 0x10000000001;
  v3[1] = 0;
  *a1 = v3;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B4090;
  result = (unsigned int *)v3[1];
  v3[1] = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198C68B9CLL);
  }
  return result;
}

void WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),`anonymous namespace'::DOMJITFunctionObject::checkSubClassSnippet(void)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_22;
  *(_QWORD *)a8 = a8 + 16;
  *(_QWORD *)(a8 + 8) = 2;
  if (!*(_DWORD *)(a2 + 60))
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x198C68E04);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198C68DA8);
  }
  v11 = **(char **)(a2 + 48);
  v19 = *(_DWORD *)(a1 + 200);
  if (v19 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v12, v13, v14, v15, v16, v17, v18);
    v19 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = v11 | 0xFC7F6A20;
  *(_DWORD *)(a1 + 200) += 4;
  if (!*(_DWORD *)(a2 + 28))
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x198C68D88);
  }
  v20 = *(unsigned __int8 **)(a2 + 16);
  if (*((_DWORD *)v20 + 1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_21;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198C68DD8);
  }
  v21 = *v20 | 0x500000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v21, *(char *)(a1 + 304), v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 78, v22, v23, v24, v25, (uint64_t)&v37);
  v31 = v37;
  if (v37 != -1)
  {
    v32 = *(unsigned int *)(a8 + 12);
    if ((_DWORD)v32 == *(_DWORD *)(a8 + 8))
    {
      v33 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a8, (void *)(v32 + 1), (unint64_t)&v37, v26, v27, v28, v29, v30);
      v35 = *v33;
      v34 = (uint64_t *)(v33 + 1);
      v31 = v35;
      LODWORD(v32) = *(_DWORD *)(a8 + 12);
    }
    else
    {
      v34 = &v38;
    }
    v36 = *(_QWORD *)a8 + 12 * v32;
    *(_DWORD *)v36 = v31;
    *(_QWORD *)(v36 + 4) = *v34;
    ++*(_DWORD *)(a8 + 12);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C68DF8);
  }
}

unint64_t `anonymous namespace'::functionDOMJITFunctionObjectWithTypeCheck(_anonymous_namespace_ *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  unint64_t result;
  JSC::VM *v10;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x198C68EC4);
  }
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) == 0)
  {
    v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
    v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
    v6 = (char **)(16 * v4);
    if ((_DWORD)v4)
    else
      v7 = 1;
    if (!v7)
    {
      do
      {
        v6 = (char **)v6[2];
        v5 = v6 != 0;
      }
    }
    if (v5)
      return *(unsigned int *)(v3 + 16) | 0xFFFE000000000000;
  }
  result = JSC::throwTypeError(this, &v10);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  return result;
}

unint64_t `anonymous namespace'::functionDOMJITCheckJSCastObjectWithTypeCheck(_anonymous_namespace_ *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  unint64_t result;
  JSC::VM *v10;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x198C68FB4);
  }
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) == 0)
  {
    v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
    v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
    v6 = (char **)(16 * v4);
    if ((_DWORD)v4)
    else
      v7 = 1;
    if (!v7)
    {
      do
      {
        v6 = (char **)v6[2];
        v5 = v6 != 0;
      }
    }
    if (v5)
      return *(unsigned int *)(v3 + 16) | 0xFFFE000000000000;
  }
  result = JSC::throwTypeError(this, &v10);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  return result;
}

unsigned int *`anonymous namespace'::DOMJITGetterBaseJSObject::DOMJITAttribute::callDOMGetter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_8;
  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 20) = 0xFFFF0000FFFF0000;
  *(_DWORD *)(v3 + 28) = -65536;
  *a1 = v3;
  *(_BYTE *)(v3 + 16) = 1;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35B4348;
  result = *(unsigned int **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198C690BCLL);
  }
  return result;
}

void WTF::SharedTaskFunctor<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList ()(JSC::CCallHelpers &,JSC::SnippetParams &),`anonymous namespace'::DOMJITGetterBaseJSObject::DOMJITAttribute::callDOMGetter(void)::{lambda(JSC::CCallHelpers &,JSC::SnippetParams &)#1}>::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::AssemblerBuffer *v16;
  int i;
  unsigned int v18;
  unint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  JSC::AssemblerBuffer *v29;
  int v30;
  unint64_t v31;
  WTF *v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_30;
  v10 = *(_DWORD *)(a2 + 28);
  if (!v10)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x198C69390);
  }
  v11 = *(unsigned __int8 **)(a2 + 16);
  if (*((_DWORD *)v11 + 1) != 2)
    goto LABEL_27;
  if (v10 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198C69398);
  }
  if (*((_DWORD *)v11 + 5))
  {
LABEL_27:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_28;
  }
  if (v10 <= 2)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x198C69308);
  }
  if (*((_DWORD *)v11 + 9))
    goto LABEL_27;
  v13 = *v11;
  v14 = v11[16];
  v15 = v11[32];
  v16 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v29 = v16;
      JSC::AssemblerBuffer::outOfLineGrow(v16, a1, a2, a3, a4, a5, a6, a7);
      v16 = v29;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v18 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v16, a1, a2, a3, a4, a5, a6, a7);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (i == -1)
  {
    v20 = 0;
    v32 = (WTF *)&v35;
    v33 = 2;
  }
  else
  {
    v19 = 0xFF000F4100000000;
    if (*(_BYTE *)(a1 + 328))
      v19 = 0xFF000F4500000000;
    v31 = v19;
    v20 = 1;
    v30 = i;
    v32 = (WTF *)&v35;
    v33 = 2;
    v35 = i;
    v36 = v19;
  }
  v34 = v20;
  (*(void (**)(uint64_t, WTF **, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v32, a1, domJITGetterBaseJSObjectSlowCall, v13, v15 | (v14 << 8));
  v28 = v32;
  if (&v35 != (int *)v32 && v32)
  {
    v32 = 0;
    v33 = 0;
    WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
  }
  a8[3] = 0;
  a8[4] = 0;
  a8[2] = 0;
  *a8 = a8 + 2;
  a8[1] = 2;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C69384);
  }
}

void `anonymous namespace'::WasmStreamingParser::Client::~Client(_anonymous_namespace_::WasmStreamingParser::Client *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t `anonymous namespace'::WasmStreamingParser::Client::didReceiveSectionData()
{
  return 1;
}

uint64_t `anonymous namespace'::WasmStreamingParser::Client::didReceiveFunctionData()
{
  return 1;
}

unint64_t `anonymous namespace'::functionWasmStreamingParserAddBytes(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  JSC::Heap **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  JSC::Exception *v42;
  WTF::AtomStringImpl *v43;
  WTF::StringImpl *v44;
  char v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  int v60;
  int v61;
  JSC::Heap **v62;
  uint64_t (*v63)(unint64_t *);
  unint64_t *v64;
  uint64_t v65;
  _DWORD *v66;
  WTF::StringImpl *v67;
  JSC::VM *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6978CLL);
  }
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return 6;
  v12 = *(_QWORD *)(this + 56);
  v13 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v14 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v15 = (char **)(16 * v13);
  if ((_DWORD)v13)
  else
    v16 = 1;
  if (!v16)
  {
    do
    {
      v15 = (char **)v15[2];
      v14 = v15 != 0;
    }
  }
  if (!v14)
    return 6;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19 = 10;
    goto LABEL_26;
  }
  v19 = *((_QWORD *)a2 + 6);
  if ((v19 & 0xFFFE000000000002) != 0)
  {
LABEL_26:
    v27 = 0;
    v28 = 0;
    v66 = 0;
    v68 = (JSC::VM *)v12;
    v22 = v12;
    goto LABEL_27;
  }
  v20 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C));
  if (v20 == &JSC::JSSourceCode::s_info && (v21 = *(_DWORD **)(v19 + 8)) != 0)
  {
    ++v21[2];
    v66 = v21;
    (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 80))(v21);
    v22 = *(_QWORD *)(this + 56);
    v68 = (JSC::VM *)v22;
    v20 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C));
  }
  else
  {
    v66 = 0;
    v68 = (JSC::VM *)v12;
    v22 = v12;
  }
  if (v20 == &JSC::JSSourceCode::s_info)
  {
    v23 = *(_QWORD *)(v19 + 8);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 64))(v23);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
    goto LABEL_21;
  }
  v55 = *(unsigned __int8 *)(v19 + 5);
  if (v55 < 0x17)
  {
    v27 = 0;
    v28 = 0;
  }
  else
  {
    if (v55 == 38)
      v27 = v19;
    else
      v27 = 0;
    if (v55 - 39 >= 0xC)
      v28 = 0;
    else
      v28 = v19;
  }
LABEL_27:
  if (!(v27 | v28))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x3B00000002;
    *(_QWORD *)(v31 + 8) = "first argument must be an ArrayBufferView or an ArrayBuffer";
    *(_DWORD *)(v31 + 16) = 4;
    v67 = (WTF::StringImpl *)v31;
    v69 = v19;
    switch(v19)
    {
      case 10:
        v32 = 2;
LABEL_47:
        v33 = *(_QWORD *)(this + 176);
        v34 = *(JSC::Heap ***)(this + 56);
        if ((v33 & 1) != 0)
        {
          v62 = *(JSC::Heap ***)(this + 56);
          v63 = *(uint64_t (**)(unint64_t *))(v33 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v64 = (unint64_t *)(this - 16);
          else
            v64 = (unint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v69 = *v64;
          v70 = this;
          v71 = (char *)(this + 176);
          v33 = v63(&v69);
          v34 = v62;
        }
        v35 = JSC::ErrorInstance::create(v34, v33, &v67, 0, (uint64_t)JSC::defaultSourceAppender, v32, 5, 1);
        v42 = (JSC::Exception *)v35;
        if ((v35 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C)))
        {
          v42 = (JSC::Exception *)JSC::Exception::create(v22, (JSC::VM *)v35, 0, v36, v37, v38, v39, v40);
        }
        JSC::VM::throwException((JSC::VM *)v22, (JSC::JSGlobalObject *)this, v42, v41, v36, v37, v38, v39, v40);
        v44 = v67;
        v67 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
          {
            WTF::StringImpl::~StringImpl(v44, v43, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
          }
          else
          {
            *(_DWORD *)v44 -= 2;
          }
        }
        goto LABEL_53;
      case 2:
        v32 = 4;
        goto LABEL_47;
      case 0:
LABEL_102:
        v32 = 0;
        goto LABEL_47;
    }
    if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v69))
    {
      v32 = 16;
      goto LABEL_47;
    }
    if (v69 >> 49)
    {
      v32 = 32;
      goto LABEL_47;
    }
    if ((v69 & 0xFFFE000000000002) != 0)
    {
      if ((v69 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
LABEL_95:
        if (JSC::JSValue::isCallable((JSC::JSValue *)&v69))
        {
          v32 = 1;
          goto LABEL_47;
        }
        if ((v69 & 0xFFFE000000000002) == 0)
        {
          v61 = *(unsigned __int8 *)(v69 + 5);
          if (v61 == 4)
            v32 = 256;
          else
            v32 = (v61 == 3) << 9;
          goto LABEL_47;
        }
        goto LABEL_102;
      }
    }
    else
    {
      v56 = *(unsigned __int8 *)(v69 + 5);
      if (v56 == 2)
      {
        v32 = 64;
        goto LABEL_47;
      }
      if ((v69 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        if (v56 > 0x16)
        {
          v32 = 128;
          goto LABEL_47;
        }
        goto LABEL_95;
      }
    }
    v32 = 8;
    goto LABEL_47;
  }
  if (!v28)
  {
    v30 = *(_QWORD *)(v27 + 16);
    v24 = *(_QWORD *)(v30 + 16);
    if (v24)
    {
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      {
        if (!((v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
          goto LABEL_44;
        v24 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      if (*(_BYTE *)(v30 + 64) && (v65 = *(_QWORD *)(v30 + 32)) != 0)
        v25 = *(_QWORD *)(v65 + 32);
      else
        v25 = *(_QWORD *)(v30 + 48);
      goto LABEL_21;
    }
LABEL_44:
    JSC::throwTypeError(this, &v68, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    goto LABEL_53;
  }
  if (*(unsigned __int8 *)(v28 + 5) - 39 <= 0xA)
  {
    JSC::validateTypedArray((JSC *)this, (JSC::ArrayBuffer **)v28, a3, a4, a5, a6, a7, a8);
    if (!*(_DWORD *)(v22 + 80))
      goto LABEL_31;
    v60 = *(_DWORD *)(v22 + 80);
    if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v22 + 16))
      goto LABEL_31;
LABEL_53:
    v25 = 0;
    v24 = 0;
    goto LABEL_21;
  }
  LOBYTE(v69) = 0;
  LOBYTE(v70) = 0;
  JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v28, (uint64_t)&v69);
  if (!v45)
    goto LABEL_44;
LABEL_31:
  v24 = *(_QWORD *)(v28 + 16);
  if (v24 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v24 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if ((*(_BYTE *)(v28 + 40) & 7u) <= 2)
    goto LABEL_36;
  LOBYTE(v69) = 0;
  LOBYTE(v70) = 0;
  v57 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v28, (uint64_t)&v69, (uint64_t)a3, a4, a5, a6, a7, a8);
  v25 = 0;
  if (!v58 || !v57)
    goto LABEL_21;
  if ((*(_BYTE *)(v28 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(v28 + 5) - 42) > 7u)
      LOBYTE(v59) = 0;
    else
      v59 = qword_19915A080[(char)(*(_BYTE *)(v28 + 5) - 42)];
    v25 = v57 << v59;
  }
  else
  {
LABEL_36:
    if ((*(_BYTE *)(v28 + 5) - 42) > 7u)
      LOBYTE(v29) = 0;
    else
      v29 = qword_19915A080[(char)(*(_BYTE *)(v28 + 5) - 42)];
    v25 = *(_QWORD *)(v28 + 24) << v29;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_22;
LABEL_21:
  v54 = *(_DWORD *)(v12 + 80);
  if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 16))
    v18 = 0;
  else
LABEL_22:
    v18 = JSC::Wasm::StreamingParser::addBytes(v10 + 48, (const void *)v24, v25, 0, a9, a10) | 0xFFFE000000000000;
  JSC::WebAssemblySourceProviderBufferGuard::~WebAssemblySourceProviderBufferGuard((JSC::WebAssemblySourceProviderBufferGuard *)&v66);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C697ACLL);
  }
  return v18;
}

unint64_t `anonymous namespace'::functionWasmStreamingParserFinalize(_anonymous_namespace_ *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, double a4, float a5)
{
  unint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  unsigned int v12;

  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_16;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return 6;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
  }
  if (!v7)
    return 6;
  v12 = JSC::Wasm::StreamingParser::finalize((JSC::Wasm::StreamingParser *)(v5 + 48), a4, a5);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x198C69AE0);
  }
  return v12 | 0xFFFE000000000000;
}

void JSC::WebAssemblySourceProviderBufferGuard::~WebAssemblySourceProviderBufferGuard(JSC::WebAssemblySourceProviderBufferGuard *this)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)this;
  if (v2)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 88))(v2);
    v3 = *(_DWORD **)this;
    *(_QWORD *)this = 0;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

unint64_t `anonymous namespace'::WasmStreamingCompiler::create(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unint64_t *v12;
  int v13;
  unint64_t v14;
  char *v15;
  unint64_t SlowCase;
  int v17;
  unint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C69E38);
  }
  v9 = a3;
  v12 = (unint64_t *)((char *)this + 38992);
  v13 = *((_DWORD *)a2 + 291);
  if (v13)
    v14 = 16 * (v13 & 0xFFFFFFFE);
  else
    v14 = 0;
  v15 = (char *)this + 192;
  SlowCase = *v12;
  if (*v12 < *((_QWORD *)this + 4875))
    goto LABEL_6;
  SlowCase = *((_QWORD *)this + 4876);
  if ((SlowCase & 1) == 0)
  {
    v54 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4877);
    *((_QWORD *)this + 4875) = SlowCase + HIDWORD(v54);
    *((_QWORD *)this + 4876) = SlowCase + (int)v54;
LABEL_6:
    *v12 = SlowCase + 32;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM(this, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38968, (uint64_t)v15, 32, 0, 0, v57, v58, v59);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  v17 = *(_DWORD *)(v14 + 8);
  *(_DWORD *)SlowCase = v14 >> 4;
  *(_DWORD *)(SlowCase + 4) = v17;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_OWORD *)(SlowCase + 16) = xmmword_19914EFB0;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C69E84);
  }
  LODWORD(v68) = 23;
  v18 = *((_QWORD *)this + 5017);
  if (v18 < *((_QWORD *)this + 5018))
    goto LABEL_11;
  v18 = *((_QWORD *)this + 5019);
  if ((v18 & 1) == 0)
  {
    v55 = *(_QWORD *)(v18 + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = v18 + HIDWORD(v55);
    *((_QWORD *)this + 5019) = v18 + (int)v55;
LABEL_11:
    *((_QWORD *)this + 5017) = v18 + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM(this, a2, a3, a4, a5, a6, a7, a8);
  v18 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 40112, (uint64_t)v15, 128, 0, 0, v60, v61, v62);
LABEL_12:
  *(_DWORD *)v18 = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C69ED0);
  }
  v26 = *((_QWORD *)this + 2917);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 + 60);
    Slow = *(_QWORD *)(v26 + 24);
    if (Slow < *(_QWORD *)(v26 + 32))
    {
LABEL_17:
      *(_QWORD *)(v26 + 24) = Slow + v27;
      goto LABEL_18;
    }
    Slow = *(_QWORD *)(v26 + 40);
    if ((Slow & 1) == 0)
    {
      v56 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v56);
      *(_QWORD *)(v26 + 40) = Slow + (int)v56;
      goto LABEL_17;
    }
    v63 = *((_QWORD *)this + 2917);
    v64 = *(unsigned int *)(v26 + 60);
    JSC::sanitizeStackForVM(this, v19, v20, v21, v22, v23, v24, v25);
    Slow = JSC::LocalAllocator::allocateSlowCase(v63, (uint64_t)v15, v64, 0, 0, v65, v66, v67);
  }
  else
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)this + 23224, this, 0x30uLL, 0, v22, v23, v24, v25);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198C69E18);
    }
  }
LABEL_18:
  *(_DWORD *)Slow = 0;
  v29 = *(_DWORD *)(v18 + 8);
  *(_DWORD *)Slow = v18 >> 4;
  *(_DWORD *)(Slow + 4) = v29;
  *(_QWORD *)(Slow + 8) = 0;
  *(_QWORD *)(Slow + 16) = 16 * *(unsigned int *)(v18 + 76);
  *(_QWORD *)(Slow + 24) = SlowCase;
  v30 = WTF::fastMalloc((WTF *)0x108);
  *(_QWORD *)(Slow + 32) = JSC::Wasm::StreamingCompiler::StreamingCompiler(v30, (uint64_t)this, v9, (uint64_t)a2, (_DWORD *)SlowCase, a4);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C69EF0);
  }
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v36 = *(_QWORD *)(16 * (*(_DWORD *)Slow & 0xFFFFFFFE) + 0x28);
  WTF::AtomStringImpl::addLiteral((uint64_t)"addBytes", 8uLL, v31, v32, v33, v34, v35, &v68);
  v37 = v68;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C69F18);
  }
  return Slow;
}

void `anonymous namespace'::WasmStreamingCompiler::visitChildren(_anonymous_namespace_::WasmStreamingCompiler *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198C6A08CLL);
  }
  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_7:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_8;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
LABEL_8:
  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_13;
}

uint64_t `anonymous namespace'::WasmStreamingCompiler::visitChildren(_anonymous_namespace_::WasmStreamingCompiler *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
LABEL_9:
    JUMPOUT(0x198C6A190);
  }
  *((_QWORD *)a2 + 11) = v7;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_9;
  }
  JSC::JSObject::visitChildren(this, a2, a3);
  result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3));
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6A1B0);
  }
  *(_QWORD *)(v7[0] + 88) = v8;
  return result;
}

uint64_t `anonymous namespace'::functionWasmStreamingCompilerAddBytes(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  JSC::Heap **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  JSC::Exception *v42;
  WTF::AtomStringImpl *v43;
  WTF::StringImpl *v44;
  char v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  int v60;
  int v61;
  JSC::Heap **v62;
  uint64_t (*v63)(unint64_t *);
  unint64_t *v64;
  uint64_t v65;
  _DWORD *v66;
  WTF::StringImpl *v67;
  JSC::VM *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6A590);
  }
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return 6;
  v12 = *(_QWORD *)(this + 56);
  v13 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v14 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v15 = (char **)(16 * v13);
  if ((_DWORD)v13)
  else
    v16 = 1;
  if (!v16)
  {
    do
    {
      v15 = (char **)v15[2];
      v14 = v15 != 0;
    }
  }
  if (!v14)
    return 6;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19 = 10;
    goto LABEL_26;
  }
  v19 = *((_QWORD *)a2 + 6);
  if ((v19 & 0xFFFE000000000002) != 0)
  {
LABEL_26:
    v27 = 0;
    v28 = 0;
    v66 = 0;
    v68 = (JSC::VM *)v12;
    v22 = v12;
    goto LABEL_27;
  }
  v20 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C));
  if (v20 == &JSC::JSSourceCode::s_info && (v21 = *(_DWORD **)(v19 + 8)) != 0)
  {
    ++v21[2];
    v66 = v21;
    (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 80))(v21);
    v22 = *(_QWORD *)(this + 56);
    v68 = (JSC::VM *)v22;
    v20 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C));
  }
  else
  {
    v66 = 0;
    v68 = (JSC::VM *)v12;
    v22 = v12;
  }
  if (v20 == &JSC::JSSourceCode::s_info)
  {
    v23 = *(_QWORD *)(v19 + 8);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 64))(v23);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
    goto LABEL_21;
  }
  v55 = *(unsigned __int8 *)(v19 + 5);
  if (v55 < 0x17)
  {
    v27 = 0;
    v28 = 0;
  }
  else
  {
    if (v55 == 38)
      v27 = v19;
    else
      v27 = 0;
    if (v55 - 39 >= 0xC)
      v28 = 0;
    else
      v28 = v19;
  }
LABEL_27:
  if (!(v27 | v28))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x3B00000002;
    *(_QWORD *)(v31 + 8) = "first argument must be an ArrayBufferView or an ArrayBuffer";
    *(_DWORD *)(v31 + 16) = 4;
    v67 = (WTF::StringImpl *)v31;
    v69 = v19;
    switch(v19)
    {
      case 10:
        v32 = 2;
LABEL_47:
        v33 = *(_QWORD *)(this + 176);
        v34 = *(JSC::Heap ***)(this + 56);
        if ((v33 & 1) != 0)
        {
          v62 = *(JSC::Heap ***)(this + 56);
          v63 = *(uint64_t (**)(unint64_t *))(v33 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v64 = (unint64_t *)(this - 16);
          else
            v64 = (unint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v69 = *v64;
          v70 = this;
          v71 = (char *)(this + 176);
          v33 = v63(&v69);
          v34 = v62;
        }
        v35 = JSC::ErrorInstance::create(v34, v33, &v67, 0, (uint64_t)JSC::defaultSourceAppender, v32, 5, 1);
        v42 = (JSC::Exception *)v35;
        if ((v35 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C)))
        {
          v42 = (JSC::Exception *)JSC::Exception::create(v22, (JSC::VM *)v35, 0, v36, v37, v38, v39, v40);
        }
        JSC::VM::throwException((JSC::VM *)v22, (JSC::JSGlobalObject *)this, v42, v41, v36, v37, v38, v39, v40);
        v44 = v67;
        v67 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
          {
            WTF::StringImpl::~StringImpl(v44, v43, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
          }
          else
          {
            *(_DWORD *)v44 -= 2;
          }
        }
        goto LABEL_53;
      case 2:
        v32 = 4;
        goto LABEL_47;
      case 0:
LABEL_102:
        v32 = 0;
        goto LABEL_47;
    }
    if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v69))
    {
      v32 = 16;
      goto LABEL_47;
    }
    if (v69 >> 49)
    {
      v32 = 32;
      goto LABEL_47;
    }
    if ((v69 & 0xFFFE000000000002) != 0)
    {
      if ((v69 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
LABEL_95:
        if (JSC::JSValue::isCallable((JSC::JSValue *)&v69))
        {
          v32 = 1;
          goto LABEL_47;
        }
        if ((v69 & 0xFFFE000000000002) == 0)
        {
          v61 = *(unsigned __int8 *)(v69 + 5);
          if (v61 == 4)
            v32 = 256;
          else
            v32 = (v61 == 3) << 9;
          goto LABEL_47;
        }
        goto LABEL_102;
      }
    }
    else
    {
      v56 = *(unsigned __int8 *)(v69 + 5);
      if (v56 == 2)
      {
        v32 = 64;
        goto LABEL_47;
      }
      if ((v69 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        if (v56 > 0x16)
        {
          v32 = 128;
          goto LABEL_47;
        }
        goto LABEL_95;
      }
    }
    v32 = 8;
    goto LABEL_47;
  }
  if (!v28)
  {
    v30 = *(_QWORD *)(v27 + 16);
    v24 = *(_QWORD *)(v30 + 16);
    if (v24)
    {
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      {
        if (!((v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
          goto LABEL_44;
        v24 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      if (*(_BYTE *)(v30 + 64) && (v65 = *(_QWORD *)(v30 + 32)) != 0)
        v25 = *(_QWORD *)(v65 + 32);
      else
        v25 = *(_QWORD *)(v30 + 48);
      goto LABEL_21;
    }
LABEL_44:
    JSC::throwTypeError(this, &v68, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    goto LABEL_53;
  }
  if (*(unsigned __int8 *)(v28 + 5) - 39 <= 0xA)
  {
    JSC::validateTypedArray((JSC *)this, (JSC::ArrayBuffer **)v28, a3, a4, a5, a6, a7, a8);
    if (!*(_DWORD *)(v22 + 80))
      goto LABEL_31;
    v60 = *(_DWORD *)(v22 + 80);
    if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v22 + 16))
      goto LABEL_31;
LABEL_53:
    v25 = 0;
    v24 = 0;
    goto LABEL_21;
  }
  LOBYTE(v69) = 0;
  LOBYTE(v70) = 0;
  JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v28, (uint64_t)&v69);
  if (!v45)
    goto LABEL_44;
LABEL_31:
  v24 = *(_QWORD *)(v28 + 16);
  if (v24 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v24 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if ((*(_BYTE *)(v28 + 40) & 7u) <= 2)
    goto LABEL_36;
  LOBYTE(v69) = 0;
  LOBYTE(v70) = 0;
  v57 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v28, (uint64_t)&v69, (uint64_t)a3, a4, a5, a6, a7, a8);
  v25 = 0;
  if (!v58 || !v57)
    goto LABEL_21;
  if ((*(_BYTE *)(v28 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(v28 + 5) - 42) > 7u)
      LOBYTE(v59) = 0;
    else
      v59 = qword_19915A080[(char)(*(_BYTE *)(v28 + 5) - 42)];
    v25 = v57 << v59;
  }
  else
  {
LABEL_36:
    if ((*(_BYTE *)(v28 + 5) - 42) > 7u)
      LOBYTE(v29) = 0;
    else
      v29 = qword_19915A080[(char)(*(_BYTE *)(v28 + 5) - 42)];
    v25 = *(_QWORD *)(v28 + 24) << v29;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_22;
LABEL_21:
  v54 = *(_DWORD *)(v12 + 80);
  if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 16))
  {
    v18 = 0;
  }
  else
  {
LABEL_22:
    JSC::Wasm::StreamingParser::addBytes(*(_QWORD *)(v10 + 32) + 56, (const void *)v24, v25, 0, a9, a10);
    v18 = 10;
  }
  JSC::WebAssemblySourceProviderBufferGuard::~WebAssemblySourceProviderBufferGuard((JSC::WebAssemblySourceProviderBufferGuard *)&v66);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6A5B0);
  }
  return v18;
}

uint64_t `anonymous namespace'::StaticCustomAccessor::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _BOOL4 v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  const JSC::PropertyTable *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t result;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::VM *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unsigned __int16 *v58;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unsigned int v69;

  if (!a3)
  {
    if (WTF::equalInternal<unsigned char>(0, (unint64_t)"thinAirCustomGetter", 19))
      goto LABEL_4;
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
    return 0;
  }
  *(_DWORD *)a3 += 2;
  v8 = WTF::equalInternal<unsigned char>(a3, (unint64_t)"thinAirCustomGetter", 19);
  v16 = v8;
  if (*(_DWORD *)a3 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)a3, v9, v10, (uint64_t)v11, v12, v13, v14, v15);
    WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    if (v16)
      goto LABEL_4;
  }
  else
  {
    *(_DWORD *)a3 -= 2;
    if (v8)
    {
LABEL_4:
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 46;
      *(_QWORD *)(a4 + 32) = a1;
      *(_WORD *)(a4 + 48) = 769;
      return 1;
    }
  }
  v26 = *(JSC::VM **)(a2 + 56);
  if (!(a3 >> 4))
    goto LABEL_41;
  v27 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v27 + 0x20)) != 0)
    goto LABEL_41;
  v28 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v28)
  {
    v29 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v29 || *(_BYTE *)(v29 + 5) != 1 && *(_DWORD *)(v29 + 80) < 2u)
      goto LABEL_41;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, v11, v12, v13, v14, v15);
    if (!v28)
      goto LABEL_41;
  }
  if (!*(_DWORD *)(v28 + 24))
    goto LABEL_41;
  v30 = *(_QWORD *)(v28 + 16);
  v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
  v32 = *(unsigned int *)(v28 + 8);
  v33 = *(_DWORD *)(a3 + 16);
  if ((v30 & 1) != 0)
  {
    if ((v33 & 0x20) != 0)
      v33 = *(_DWORD *)(a3 + 32);
    v34 = *(_DWORD *)(v28 + 12);
    v35 = (v33 >> 8) & *(_QWORD *)&v34;
    v36 = *(unsigned __int8 *)(v31 + v35);
    if (*(_BYTE *)(v31 + v35))
    {
      v37 = v31 + v32;
      v38 = 1;
      while (1)
      {
        v39 = *(_QWORD *)(v37 + 8 * (v36 - 1));
        if (a3 == (v39 & 0xFFFFFFFFFFFFLL))
          break;
        v35 = ((_DWORD)v35 + v38) & v34;
        v36 = *(unsigned __int8 *)(v31 + v35);
        ++v38;
        if (!*(_BYTE *)(v31 + v35))
          goto LABEL_41;
      }
      v13 = (v39 >> 16) & 0xFF00000000 | HIBYTE(v39);
      goto LABEL_31;
    }
LABEL_41:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v26, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v50 = *(_DWORD *)(a3 + 16);
    if ((v50 & 0x20) == 0)
    {
      v51 = *(_BYTE **)(a3 + 8);
      v52 = *(unsigned int *)(a3 + 4);
      if ((v50 & 4) != 0)
      {
        if ((_DWORD)v52)
        {
          v53 = *v51 - 48;
          if (v53 <= 9 && (v52 < 2 || *v51 != 48))
          {
            v67 = v51 + 1;
            v68 = v52 - 1;
            while (v68)
            {
              if (v53 > 0x19999999)
                goto LABEL_46;
              v69 = *v67 - 48;
              if (v69 > 9)
                goto LABEL_46;
              v54 = 0;
              v55 = 0;
              v56 = 0;
              v61 = __CFADD__(v69, 10 * v53);
              v53 = v69 + 10 * v53;
              ++v67;
              --v68;
              if (v61)
                goto LABEL_86;
            }
            goto LABEL_80;
          }
        }
      }
      else if ((_DWORD)v52)
      {
        v53 = *(unsigned __int16 *)v51 - 48;
        if (v53 <= 9 && (*(_WORD *)v51 != 48 || v52 <= 1))
        {
          v58 = (unsigned __int16 *)(v51 + 2);
          v59 = v52 - 1;
          while (v59)
          {
            if (v53 > 0x19999999)
              goto LABEL_46;
            v60 = *v58 - 48;
            if (v60 > 9)
              goto LABEL_46;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v61 = __CFADD__(v60, 10 * v53);
            v53 = v60 + 10 * v53;
            ++v58;
            --v59;
            if (v61)
              goto LABEL_86;
          }
LABEL_80:
          v54 = 0x100000000;
          if (v53 == -1)
          {
            v54 = 0;
            v55 = 0;
          }
          else
          {
            v55 = v53;
          }
          if (v53 == -1)
            v56 = 0;
          else
            v56 = v53 & 0xFFFFFF00;
LABEL_86:
          if ((v54 & 0x100000000) != 0)
            return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, (const WTF::StringImpl *)(v56 | v55), a4, v12, v13, v14, v15);
          return 0;
        }
      }
LABEL_46:
      v54 = 0;
      v55 = 0;
      v56 = 0;
      goto LABEL_86;
    }
    return 0;
  }
  if ((v33 & 0x20) != 0)
    v33 = *(_DWORD *)(a3 + 32);
  v40 = *(_DWORD *)(v28 + 12);
  v41 = v40 & (v33 >> 8);
  v42 = *(_DWORD *)(v31 + 4 * v41);
  if (!v42)
    goto LABEL_41;
  v43 = v31 + 4 * v32;
  v44 = 1;
  while (1)
  {
    v45 = (v42 - 1);
    if (*(_QWORD *)(v43 + 16 * v45) == a3)
      break;
    v41 = (v41 + v44) & v40;
    v42 = *(_DWORD *)(v31 + 4 * v41);
    ++v44;
    if (!v42)
      goto LABEL_41;
  }
  v13 = *(unsigned int *)(v43 + 16 * v45 + 8) | ((unint64_t)*(unsigned __int8 *)(v43 + 16 * v45 + 12) << 32);
LABEL_31:
  if ((_DWORD)v13 == -1)
    goto LABEL_41;
  if ((int)v13 <= 63)
  {
    v46 = a1 + 16;
    v47 = v13 << 32;
  }
  else
  {
    v46 = *(_QWORD *)(a1 + 8) - 8;
    v47 = 0x3F00000000 - (v13 << 32);
  }
  v48 = *(_QWORD *)(v46 + (v47 >> 29));
  if ((v48 & 0xFFFE000000000002) != 0)
    goto LABEL_38;
  v49 = *(unsigned __int8 *)(v48 + 5);
  if (v49 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v26, a4, v48, SHIDWORD(v13), v13);
    return 1;
  }
  if (v49 == 6)
  {
    v62 = *(_DWORD *)(v27 + 16) & 3;
    v64 = *(_QWORD *)(v48 + 8);
    v63 = *(_QWORD *)(v48 + 16);
    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE)
                                                                             + 0x4C)))
    {
      v66 = *(_QWORD *)(v48 + 24);
      v65 = *(_QWORD *)(v48 + 32);
      *(_QWORD *)a4 = v64;
      *(_QWORD *)(a4 + 8) = v63;
      *(_DWORD *)(a4 + 16) = HIDWORD(v13);
      *(_QWORD *)(a4 + 32) = a1;
      *(_BYTE *)(a4 + 49) = 3;
      result = 1;
      if (v62 != 2)
        *(_BYTE *)(a4 + 48) = 1;
      *(_BYTE *)(a4 + 51) = 1;
      *(_QWORD *)(a4 + 72) = v66;
      *(_QWORD *)(a4 + 80) = v65;
    }
    else
    {
      *(_QWORD *)a4 = v64;
      *(_QWORD *)(a4 + 8) = v63;
      *(_DWORD *)(a4 + 16) = HIDWORD(v13);
      *(_QWORD *)(a4 + 32) = a1;
      result = 1;
      *(_BYTE *)(a4 + 49) = 3;
      if (v62 != 2)
        *(_BYTE *)(a4 + 48) = 1;
    }
  }
  else
  {
LABEL_38:
    *(_QWORD *)a4 = v48;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v13);
    *(_DWORD *)(a4 + 20) = v13;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
  }
  return result;
}

uint64_t `anonymous namespace'::staticDontDeleteDontEnumMethod(_anonymous_namespace_ *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  if ((_BYTE)qword_1ECF4C6A7)
    return 10;
  result = 34;
  __break(0xC471u);
  return result;
}

void `anonymous namespace'::Root::visitChildren(_anonymous_namespace_::Root *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _anonymous_namespace_::Root *v20;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6AE24);
  }
  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  if (this && !*((_BYTE *)a2 + 130))
  {
    v12 = *((_QWORD *)a2 + 15);
    v13 = *(_DWORD **)(v12 + 48);
    v14 = v13[1];
    v15 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = v18;
    while (1)
    {
      v20 = *(_anonymous_namespace_::Root **)&v13[2 * v19 + 4];
      if (!v20)
        break;
      if (v20 == this)
        goto LABEL_13;
      v19 = ((_DWORD)v19 + 1) & v14;
      if ((_DWORD)v19 == (_DWORD)v18)
      {
        __break(0xC471u);
        JUMPOUT(0x198C6ADCCLL);
      }
    }
    if (WTF::ConcurrentPtrHashSet::addSlow(v12, v13, v14, v18, v19, (unint64_t)this, v10, v11))
    {
      if (*((_BYTE *)a2 + 131))
        (*(void (**)(JSC::JSCell *, _anonymous_namespace_::Root *))(*(_QWORD *)a2 + 144))(a2, this);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_13:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6AE44);
  }
}

void `anonymous namespace'::Root::visitChildren(_anonymous_namespace_::Root *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _anonymous_namespace_::Root *v16;
  _QWORD v17[2];
  uint64_t v18;
  char v19;

  v17[0] = a2;
  v17[1] = this;
  v19 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v18 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
LABEL_20:
    JUMPOUT(0x198C6AF50);
  }
  *((_QWORD *)a2 + 11) = v17;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6AFB8);
  }
  JSC::JSObject::visitChildren(this, a2, a3);
  if (this && !*((_BYTE *)a2 + 130))
  {
    v8 = *((_QWORD *)a2 + 15);
    v9 = *(_DWORD **)(v8 + 48);
    v10 = v9[1];
    v11 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v14;
    while (1)
    {
      v16 = *(_anonymous_namespace_::Root **)&v9[2 * v15 + 4];
      if (!v16)
        break;
      if (v16 == this)
        goto LABEL_15;
      v15 = ((_DWORD)v15 + 1) & v10;
      if ((_DWORD)v15 == (_DWORD)v14)
      {
        __break(0xC471u);
        goto LABEL_20;
      }
    }
    if (WTF::ConcurrentPtrHashSet::addSlow(v8, v9, v10, v14, v15, (unint64_t)this, v6, v7))
    {
      if (*((_BYTE *)a2 + 131))
        (*(void (**)(JSC::JSCell *, _anonymous_namespace_::Root *))(*(_QWORD *)a2 + 144))(a2, this);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_15:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6AFD8);
  }
  *(_QWORD *)(v17[0] + 88) = v18;
}

void `anonymous namespace'::Element::visitChildren(_anonymous_namespace_::Element *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198C6B0C8);
  }
  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_7:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_8;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
LABEL_8:
  if (!(_BYTE)qword_1ECF4C6A7)
    goto LABEL_13;
}

uint64_t `anonymous namespace'::Element::visitChildren(_anonymous_namespace_::Element *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
LABEL_9:
    JUMPOUT(0x198C6B1CCLL);
  }
  *((_QWORD *)a2 + 11) = v7;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_9;
  }
  JSC::JSObject::visitChildren(this, a2, a3);
  result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6B1ECLL);
  }
  *(_QWORD *)(v7[0] + 88) = v8;
  return result;
}

uint64_t `anonymous namespace'::ElementHandleOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  unsigned __int8 *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6B368);
  }
  if (a5)
  {
    *a5 = "JSC::Element is opaque root";
    a5[1] = 28;
  }
  v6 = *(void **)(*(_QWORD *)a2 + 16);
  v7 = *(_QWORD *)(a4 + 120);
  v8 = *(_QWORD *)(v7 + 48);
  if (v7 + 56 != v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    v10 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*(_QWORD *)(*(_QWORD *)a2 + 16)) & v9;
    v11 = v10;
    while (1)
    {
      v12 = *(void **)(v8 + 8 * v11 + 16);
      if (!v12)
        goto LABEL_22;
      if (v6 == v12)
        goto LABEL_17;
      v11 = (v11 + 1) & v9;
      if (v11 == v10)
      {
        __break(0xC471u);
        JUMPOUT(0x198C6B2B4);
      }
    }
  }
  v13 = (unsigned __int8 *)(v7 + 80);
  if (__ldaxr((unsigned __int8 *)(v7 + 80)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_14;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v7 + 80);
LABEL_14:
  v15 = WTF::ConcurrentPtrHashSet::containsImpl((WTF::ConcurrentPtrHashSet *)v7, v6);
  v22 = v15;
  v23 = __ldxr(v13);
  if (v23 != 1)
  {
    __clrex();
LABEL_21:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, v16, v17, v18, v19, v20, v21);
    if (v22)
      goto LABEL_17;
LABEL_22:
    result = 0;
    goto LABEL_23;
  }
  if (__stlxr(0, v13))
    goto LABEL_21;
  if (!v15)
    goto LABEL_22;
LABEL_17:
  if (*(_BYTE *)(a4 + 131))
    (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v6);
  result = 1;
LABEL_23:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6B39CLL);
  }
  return result;
}

void `anonymous namespace'::SimpleObject::getConstructData(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = JSC::callHostFunctionAsConstructor;
  *(_BYTE *)(a1 + 16) = 0;
}

void `anonymous namespace'::SimpleObject::visitChildren(_anonymous_namespace_::SimpleObject *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6B498);
  }
  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if ((v16 & 0xFFFE000000000002) == 0 && v16 != 0)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      v18 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_10:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_11;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
LABEL_11:
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6B4B8);
  }
}

void `anonymous namespace'::SimpleObject::visitChildren(_anonymous_namespace_::SimpleObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  char v8;

  v6[0] = a2;
  v6[1] = this;
  v8 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v7 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
LABEL_11:
    JUMPOUT(0x198C6B5ACLL);
  }
  *((_QWORD *)a2 + 11) = v6;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    goto LABEL_11;
  }
  JSC::JSObject::visitChildren(this, a2, a3);
  if ((*((_QWORD *)this + 2) & 0xFFFE000000000002) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6B5CCLL);
  }
  *(_QWORD *)(v6[0] + 88) = v7;
}

uint64_t WTF::Detail::CallableWrapper<JSC::changeDebuggerModeWhenIdle(JSC::JSGlobalObject *,WTF::OptionSet<JSC::CodeGenerationMode>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6B790);
  }
  if (!*(_BYTE *)(a1 + 8))
  {
    v13 = *(_QWORD *)(a1 + 16);
    v7 = *(_WORD **)(v13 + 2016);
    v14 = v7[24];
    if ((v14 & 0x40) != 0)
    {
      v7[24] = v14 & 0xFFBF;
      (*(void (**)(_WORD *))(*(_QWORD *)v7 + 40))(v7);
      v13 = *(_QWORD *)(a1 + 16);
    }
    *(_QWORD *)(v13 + 2016) = 0;
    v12 = 1;
    goto LABEL_14;
  }
  v2 = WTF::fastMalloc((WTF *)0xE8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
  v4 = (uint64_t *)(v3 + 93504);
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_BYTE *)(v2 + 8) = 1;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 48) &= 0xFC0Cu;
  *(_DWORD *)(v2 + 76) = 0;
  *(_QWORD *)(v2 + 60) = 0;
  *(_QWORD *)(v2 + 68) = 0;
  *(_QWORD *)(v2 + 52) = 0;
  *(_QWORD *)(v2 + 80) = 0xFFFFFFFFLL;
  *(_BYTE *)(v2 + 88) = 0;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_DWORD *)(v2 + 176) = 1;
  *(_OWORD *)(v2 + 180) = 0u;
  *(_OWORD *)(v2 + 196) = 0u;
  *(_DWORD *)(v2 + 212) = 0;
  v5 = *(_QWORD *)(v3 + 93512);
  v6 = (uint64_t *)(v5 + 224);
  if (!v5)
    v6 = v4;
  *v6 = v2;
  v4[1] = v2;
  *(_QWORD *)(v2 + 216) = v5;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)v2 = off_1E35B4E28;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6B7D0);
  }
  v7 = (_WORD *)v2;
  *(_WORD *)(v2 + 48) |= 0x100u;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6B7F0);
  }
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v8 + 2016) = v2;
  result = *(_QWORD *)(v8 + 56);
  v10 = *(_QWORD *)(result + 93384);
  if ((v10 & 1) != 0)
    result = (*(uint64_t (**)(void))(v10 & 0xFFFFFFFFFFFFFFFCLL))();
  v11 = v7[24];
  if ((v11 & 0x40) == 0)
  {
    v7[24] = v11 | 0x40;
    v12 = 5;
LABEL_14:
    result = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v7 + 8 * v12))(v7);
  }
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6B7B0);
  }
  return result;
}

void JSC::DoNothingDebugger::~DoNothingDebugger(JSC::DoNothingDebugger *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::Debugger::~Debugger(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::DoNothingDebugger::sourceParsed(JSC::DoNothingDebugger *this, JSC::JSGlobalObject *a2, JSC::SourceProvider *a3, int a4, const WTF::String *a5)
{
  uint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7)
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSC::functionDeleteAllCodeWhenIdle(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  if (!(_BYTE)qword_1ECF4C6A7 || (result = JSC::VM::deleteAllCode(*(_QWORD *)(a1 + 8), 0), !(_BYTE)qword_1ECF4C6A7))
  {
    __break(0xC471u);
    JUMPOUT(0x198C6B8B0);
  }
  return result;
}

uint64_t WTF::dataLog<JSC::JITSizeStatistics,char [2]>(JSC::JITSizeStatistics *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char v13;
  char **v14;
  char *v15;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::JITSizeStatistics::dump(a1, v4, v5, v6, v7, v8, v9, v10, v11);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t `anonymous namespace'::ObjectDoingSideEffectPutWithoutCorrectSlotStatus::put(unsigned __int8 *a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  uint64_t result;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;

  v17 = (unsigned __int8 *)a4;
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6BA58);
  }
  v13 = *((_QWORD *)a2 + 7);
  if ((a4 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a4 + 5) != 2)
    a4 = (uint64_t)JSC::JSValue::toStringSlowCase(&v17, (uint64_t)a2, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_5;
  v15 = *(_DWORD *)(v13 + 80);
  if ((v15 & 0x27) != 0 && (v15 & 0x20) == 0)
  {
    v16 = (unsigned __int8 *)a4;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
    a4 = (uint64_t)v16;
  }
  if (*(_QWORD *)(v13 + 16))
    result = 0;
  else
LABEL_5:
    result = JSC::JSObject::put(a1, (unint64_t)a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  if (!(_BYTE)qword_1ECF4C6A7)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6BA98);
  }
  return result;
}

void WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl **v15;
  int i;
  unsigned int v17;
  WTF::StringImpl **v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v11 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = *((_DWORD *)*a3 + 4);
  if (v13 < 0x100)
    v14 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v14 = v13 >> 8;
  v15 = 0;
  for (i = 1; ; ++i)
  {
    v17 = v14 & v12;
    v18 = (WTF::StringImpl **)(v11 + 8 * (v14 & v12));
    v19 = *v18;
    if (*v18 != (WTF::StringImpl *)-1)
      break;
    v15 = (WTF::StringImpl **)(v11 + 8 * v17);
LABEL_12:
    v14 = i + v17;
  }
  if (!v19)
  {
    if (v15)
    {
      *v15 = 0;
      --*(_DWORD *)(*a2 - 16);
      v18 = v15;
    }
    v20 = *a3;
    *a3 = 0;
    v21 = *v18;
    *v18 = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_32;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
        goto LABEL_33;
      }
LABEL_32:
      v28 = ((_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27)));
LABEL_33:
      v18 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, v28, (uint64_t)v18, a4, a5, a6, a7, a8);
      v24 = *a2;
      if (*a2)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
    v32 = v24 + 8 * v27;
    v31 = 1;
    goto LABEL_36;
  }
  if (!WTF::equal(v19, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_12;
  v29 = *a2;
  if (*a2)
    v30 = *(unsigned int *)(v29 - 4);
  else
    v30 = 0;
  v31 = 0;
  v32 = v29 + 8 * v30;
LABEL_36:
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::FunctionOverrides::overrides(void)::$_0 &&>>(uint64_t a1, const char *a2)
{
  JSC::FunctionOverrides *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (!byte_1ECF4C1E0)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x198C6BD70);
  }
  v2 = *(JSC::FunctionOverrides **)((char *)&qword_1ECF4C6A7 + 1);
  qword_1ECF58FC8 = 0;
  byte_1ECF58FD0 = 0;
  if (__ldaxr((unsigned __int8 *)&byte_1ECF58FD0))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&byte_1ECF58FD0))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&byte_1ECF58FD0);
LABEL_6:
  JSC::FunctionOverrides::parseOverridesInFile(v2, a2);
  v10 = __ldxr((unsigned __int8 *)&byte_1ECF58FD0);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)&byte_1ECF58FD0))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&byte_1ECF58FD0, 0, v4, v5, v6, v7, v8, v9);
  if (!byte_1ECF4C1E0)
    goto LABEL_12;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(unsigned int a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  _DWORD *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v9 = qword_1ECF58FC8;
  if (qword_1ECF58FC8)
  {
    v10 = *(_DWORD *)(qword_1ECF58FC8 - 4);
    v11 = *(_DWORD *)(qword_1ECF58FC8 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = (_DWORD *)WTF::fastZeroedMalloc(16 * a1 + 16, a2, a3, a4, a5, a6, a7, a8);
  qword_1ECF58FC8 = (uint64_t)(v12 + 4);
  v12[2] = a1 - 1;
  v12[3] = a1;
  *v12 = 0;
  *(_DWORD *)(qword_1ECF58FC8 - 12) = v11;
  if (v10)
  {
    v20 = 0;
    while (1)
    {
      v21 = (WTF::StringImpl **)(v9 + 16 * v20);
      v22 = *v21;
      if (*v21 == (WTF::StringImpl *)-1)
        goto LABEL_31;
      if (v22)
        break;
      v23 = v9 + 16 * v20;
      v24 = *(WTF::StringImpl **)(v23 + 8);
      *(_QWORD *)(v23 + 8) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::~StringImpl(v24, v13, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
          v22 = *v21;
        }
        else
        {
          *(_DWORD *)v24 -= 2;
        }
      }
      *v21 = 0;
      if (!v22)
        goto LABEL_31;
      if (*(_DWORD *)v22 == 2)
      {
LABEL_35:
        WTF::StringImpl::~StringImpl(v22, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
        goto LABEL_31;
      }
      *(_DWORD *)v22 -= 2;
LABEL_31:
      if (++v20 == v10)
        goto LABEL_43;
    }
    v25 = qword_1ECF58FC8;
    if (qword_1ECF58FC8)
      v26 = *(_DWORD *)(qword_1ECF58FC8 - 8);
    else
      v26 = 0;
    v27 = *((_DWORD *)v22 + 4);
    if (v27 < 0x100)
      v28 = WTF::StringImpl::hashSlowCase(v22);
    else
      v28 = v27 >> 8;
    v29 = 0;
    do
    {
      v30 = v28 & v26;
      v28 = ++v29 + v30;
    }
    while (*(_QWORD *)(v25 + 16 * v30));
    v31 = (WTF::StringImpl **)(v25 + 16 * v30);
    v32 = v31[1];
    v31[1] = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        v61 = *v31;
        *v31 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
          {
            WTF::StringImpl::~StringImpl(v61, v13, v14, v15, v16, v17, v18, v19);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
          }
          else
          {
            *(_DWORD *)v61 -= 2;
          }
        }
        goto LABEL_25;
      }
      *(_DWORD *)v32 -= 2;
    }
    *v31 = 0;
LABEL_25:
    v33 = *v21;
    *v21 = 0;
    *v31 = v33;
    v34 = v9 + 16 * v20;
    v35 = *(WTF::StringImpl **)(v34 + 8);
    *(_QWORD *)(v34 + 8) = 0;
    v31[1] = v35;
    v36 = *(WTF::StringImpl **)(v34 + 8);
    *(_QWORD *)(v34 + 8) = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
    v22 = *v21;
    *v21 = 0;
    if (!v22)
      goto LABEL_31;
    if (*(_DWORD *)v22 == 2)
      goto LABEL_35;
    *(_DWORD *)v22 -= 2;
    goto LABEL_31;
  }
  if (v9)
LABEL_43:
    WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
}

uint64_t WTF::ScopedLambdaFunctor<void ()(void),JSC::HeapVerifier::verifyCellList(JSC::HeapVerifier::Phase,JSC::CellList &)::$_0>::implFunction(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WTF::Thread *v4;
  const void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char v12;

  if (!**(_BYTE **)(result + 16))
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 24);
    if (*(unsigned __int8 *)(*(_QWORD *)v2 + 155) == 255)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)(v2 + 24) + 112 * *(int *)(v2 + 8);
      v12 = *(_BYTE *)v3;
      v11 = *(const char **)(v3 + 8);
      v4 = (WTF::Thread *)getpid();
      LODWORD(v9) = (_DWORD)v4;
      v5 = *(const void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v5)
        v5 = (const void *)WTF::Thread::initializeCurrentTLS(v4);
      v10 = *(_QWORD *)v2 - 192;
      WTF::dataLog<char [21],int,char [3],WTF::Thread,char [6],WTF::RawPointer,char [5],JSC::CollectionScope,char [7],WTF::MonotonicTime,char [2]>(&v9, v5, (const void **)&v10, &v12, (double *)&v11);
      v6 = **(int **)(v1 + 32);
      if (v6 < 4)
      {
        v7 = off_1E35B5298[v6];
        v8 = *(uint64_t **)(v1 + 48);
        v10 = **(_QWORD **)(v1 + 40);
        v11 = v7;
        v9 = *v8;
        result = WTF::dataLog<char [10],char const*,char [24],char const*,char [9],unsigned long,char [3]>(&v11, (const char **)&v10, &v9);
        **(_BYTE **)(v1 + 16) = 1;
        *(_BYTE *)(v2 + 16) = 1;
        return result;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x198C6C0F4);
  }
  return result;
}

uint64_t WTF::dataLog<char [10],char const*,char [24],char const*,char [9],unsigned long,char [3]>(const char **a1, const char **a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", " @ phase ");
  WTF::PrintStream::printf(v8, "%s", *a1);
  WTF::PrintStream::printf(v8, "%s", ": FAILED in cell list '");
  WTF::PrintStream::printf(v8, "%s", *a2);
  WTF::PrintStream::printf(v8, "%s", "' (size ");
  WTF::PrintStream::printf(v8, "%lu", *a3);
  WTF::PrintStream::printf(v8, "%s", ")\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char const*,char [11],WTF::RawPointer,char [31],WTF::RawPointer,char [2]>(const char **a1, const void **a2, const void **a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", *a1);
  WTF::PrintStream::printf(v8, "%s", "CodeBlock ");
  WTF::PrintStream::printf(v8, "%p", *a2);
  WTF::PrintStream::printf(v8, "%s", " has ZAPPED ValueProfile cell ");
  WTF::PrintStream::printf(v8, "%p", *a3);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [17],WTF::RawPointer,char [8],WTF::RawPointer,char [3]>(const void **a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Search for cell ");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " in VM ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", ":\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Integrity::logFile(void)::$_0 &&>>()
{
  uint64_t v0;

  WTF::OSLogPrintStream::open((WTF::OSLogPrintStream *)"com.apple.JavaScriptCore", "Integrity", (const char *)0x10, &v0);
  qword_1ECF58FB8 = v0;
}

uint64_t JSC::VMInspector::isValidVMSlow(JSC::VMInspector *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  int v13;
  unsigned __int8 v15;
  JSC::VMInspector *v16;
  char v17;
  char **v18;
  char *v19;

  v16 = this;
  v15 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E35B52C8;
  v8[1] = &v16;
  v8[2] = &v15;
  v9 = atomic_load(&JSC::VMInspector::instance(void)::once);
  if (v9 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&JSC::VMInspector::instance(void)::once, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::VMInspector::instance(void)::$_0 &&>>);
  }
  v10 = JSC::VMInspector::instance(void)::manager;
  if (__ldaxr((unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v10);
LABEL_7:
  for (i = *(_QWORD *)(v10 + 8); i; i = *(_QWORD *)(i + 93528))
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v8 + 16))(v8, i) == 1)
      break;
  }
  v13 = __ldxr((unsigned __int8 *)v10);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v10))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v10, 0, v2, v3, v4, v5, v6, v7);
LABEL_15:
  (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  return v15;
}

void JSC::VMInspector::forEachVM(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  int v13;
  char v14;
  char **v15;
  char *v16;

  v9 = atomic_load(&JSC::VMInspector::instance(void)::once);
  if (v9 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&JSC::VMInspector::instance(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::VMInspector::instance(void)::$_0 &&>>);
  }
  v10 = JSC::VMInspector::instance(void)::manager;
  if (__ldaxr((unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v10);
LABEL_7:
  for (i = *(_QWORD *)(v10 + 8); i; i = *(_QWORD *)(i + 93528))
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, i) == 1)
      break;
  }
  v13 = __ldxr((unsigned __int8 *)v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_14:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v10, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::VMInspector::dumpVMs(JSC::VMInspector *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  int v19;
  char v21;
  int v22;
  char v23;
  char **v24;
  char *v25;

  v22 = 0;
  WTFLogAlways("Registered VMs:", a2, a3, a4, a5, a6, a7, a8, v21);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = off_1E35B52F0;
  v14[1] = &v22;
  v15 = atomic_load(&JSC::VMInspector::instance(void)::once);
  if (v15 != -1)
  {
    v25 = &v23;
    v24 = &v25;
    std::__call_once(&JSC::VMInspector::instance(void)::once, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::VMInspector::instance(void)::$_0 &&>>);
  }
  v16 = JSC::VMInspector::instance(void)::manager;
  if (__ldaxr((unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v16);
LABEL_7:
  for (i = *(_QWORD *)(v16 + 8); i; i = *(_QWORD *)(i + 93528))
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v14 + 16))(v14, i) == 1)
      break;
  }
  v19 = __ldxr((unsigned __int8 *)v16);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v16))
      return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v16, 0, v8, v9, v10, v11, v12, v13);
  return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
}

_QWORD *JSC::VMInspector::vmForCallFrame(JSC::VMInspector *this, JSC::CallFrame *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *i;
  BOOL v13;
  int v15;
  char v17;
  char **v18;
  char *v19;

  v9 = atomic_load(&JSC::VMInspector::instance(void)::once);
  if (v9 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&JSC::VMInspector::instance(void)::once, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::VMInspector::instance(void)::$_0 &&>>);
  }
  v10 = JSC::VMInspector::instance(void)::manager;
  if (__ldaxr((unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)JSC::VMInspector::instance(void)::manager))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v10);
LABEL_7:
  i = (_QWORD *)JSC::VMInspector::m_recentVM;
  if (!JSC::VMInspector::m_recentVM
    || (*(_QWORD *)(JSC::VMInspector::m_recentVM + 93088) > (unint64_t)this
      ? (v13 = *(_QWORD *)(JSC::VMInspector::m_recentVM + 93104) >= (unint64_t)this)
      : (v13 = 1),
        v13))
  {
    for (i = *(_QWORD **)(v10 + 8); i; i = (_QWORD *)i[11691])
    {
      if (i[11636] > (unint64_t)this && i[11638] < (unint64_t)this)
        break;
    }
  }
  v15 = __ldxr((unsigned __int8 *)v10);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v10))
      return i;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v10, 0, a3, a4, a5, a6, a7, a8);
  return i;
}

BOOL JSC::VMInspector::currentThreadOwnsJSLock(JSC::VMInspector *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 14);
  if (!*(_BYTE *)(v2 + 6))
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4)
    v4 = WTF::Thread::initializeCurrentTLS(0);
  return v3 == v4;
}

unsigned int *JSC::VMInspector::gc(JSC::VMInspector *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int *result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int16 v16;
  unsigned int *v17;

  v8 = *((_QWORD *)this + 14);
  if (!*(_BYTE *)(v8 + 6))
    return (unsigned int *)WTF::dataLog<char [16]>("ERROR: current thread does not own the JSLock\n");
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = WTF::Thread::initializeCurrentTLS(0);
  if (v10 != v11)
    return (unsigned int *)WTF::dataLog<char [16]>("ERROR: current thread does not own the JSLock\n");
  v16 = 257;
  v17 = 0;
  JSC::Heap::collectNow((JSC::VMInspector *)((char *)this + 192), (void *)1, (uint64_t)&v16, a4, a5, a6, a7, a8);
  result = v17;
  v17 = 0;
  if (result)
  {
    v13 = result + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::VMInspector::edenGC(JSC::VMInspector *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t result;
  JSC::Heap *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  v8 = *((_QWORD *)this + 14);
  if (!*(_BYTE *)(v8 + 6))
    return WTF::dataLog<char [16]>("ERROR: current thread does not own the JSLock\n");
  v10 = *(_QWORD *)(v8 + 8);
  result = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!result)
    result = WTF::Thread::initializeCurrentTLS(0);
  if (v10 != result)
    return WTF::dataLog<char [16]>("ERROR: current thread does not own the JSLock\n");
  if (HIBYTE(word_1ECF4C5CC))
  {
    if (*((_BYTE *)this + 753))
    {
      v12 = (JSC::VMInspector *)((char *)this + 192);
      v20 = 256;
      v21 = 0;
      v13 = JSC::Heap::requestCollection((uint64_t)v12, (uint64_t)&v20, a3, a4, a5, a6, a7, a8);
      return JSC::Heap::waitForCollection(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  return result;
}

uint64_t JSC::VMInspector::isInHeap(JSC::VMInspector *this, unint64_t a2, void *a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = *((_QWORD *)this + 33);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = v4 & (a2 >> 14);
    v6 = *(_QWORD *)(v3 + 8 * v5);
    if (v6 == (a2 & 0xFFFFFFFFFFFFC000))
      return 1;
    v7 = 1;
    while (v6)
    {
      v5 = (v5 + v7) & v4;
      v6 = *(_QWORD *)(v3 + 8 * v5);
      ++v7;
      if (v6 == (a2 & 0xFFFFFFFFFFFFC000))
        return 1;
    }
  }
  v9 = *((unsigned int *)this + 49);
  if ((_DWORD)v9)
  {
    v10 = *((_QWORD *)this + 23);
    v11 = 8 * v9;
    while (1)
    {
      v12 = *(_QWORD *)v10 + 112;
      if (v12 <= a2 && v12 + *(_QWORD *)(*(_QWORD *)v10 + 24) + 8 >= a2)
        break;
      v10 += 8;
      v11 -= 8;
      if (!v11)
        return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t JSC::VMInspector::isValidCell(JSC::VMInspector *this, JSC::Heap *a2, JSC::JSCell *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::MarkedSpace *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int ***v18;
  uint64_t v19;
  unsigned int ***v20;
  uint64_t v21;
  unsigned int ***v22;
  unsigned int *v23;
  unint64_t v24;
  JSC::Heap *v25;
  unsigned int ***v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int ***v34;

  v10 = (JSC::VMInspector *)((char *)this + 160);
  JSC::MarkedSpace::willStartIterating((JSC::VMInspector *)((char *)this + 160), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v18 = (unsigned int ***)*((_QWORD *)this + 33);
  if (!v18)
  {
    v20 = 0;
    v34 = 0;
    v19 = 0;
LABEL_32:
    v22 = &v18[v19];
    v18 = v34;
    goto LABEL_9;
  }
  v19 = *((unsigned int *)v18 - 1);
  v20 = &v18[v19];
  if (!*((_DWORD *)v18 - 3))
  {
    v34 = &v18[v19];
    goto LABEL_32;
  }
  if ((_DWORD)v19)
  {
    v21 = 8 * v19;
    while ((unint64_t)*v18 + 1 <= 1)
    {
      ++v18;
      v21 -= 8;
      if (!v21)
      {
        v18 = v20;
        break;
      }
    }
  }
  v22 = v20;
LABEL_9:
  if (v20 != v18)
  {
    while (1)
    {
      v23 = **v18;
      v24 = v23[1];
      if (v24 <= 0x3FF)
        break;
LABEL_16:
      v27 = v18 + 1;
      v18 = v22;
      if (v27 != v22)
      {
        v18 = v27;
        while ((unint64_t)*v18 + 1 <= 1)
        {
          if (++v18 == v22)
          {
            v18 = v22;
            break;
          }
        }
      }
      if (v18 == v20)
        goto LABEL_22;
    }
    while (1)
    {
      v25 = (JSC::Heap *)(*((_QWORD *)v23 + 11) + 16 * v24);
      if (JSC::MarkedBlock::Handle::isLive((uint64_t)v23, (uint64_t)v25, v12, v13, v14, v15, v16, v17)
        && v25 == a2)
      {
        goto LABEL_29;
      }
      v24 += *v23;
      if (v24 >= 0x400)
        goto LABEL_16;
    }
  }
LABEL_22:
  v28 = *((unsigned int *)this + 49);
  if ((_DWORD)v28)
  {
    v29 = (uint64_t *)*((_QWORD *)this + 23);
    v30 = 8 * v28;
    while (1)
    {
      v31 = *v29;
      if (((*(_BYTE *)(*v29 + 33) & 1) != 0 || (*(_BYTE *)(v31 + 32) & 1) != 0) && (JSC::Heap *)(v31 + 112) == a2)
        break;
      ++v29;
      v30 -= 8;
      if (!v30)
        goto LABEL_28;
    }
LABEL_29:
    v32 = 1;
    goto LABEL_30;
  }
LABEL_28:
  v32 = 0;
LABEL_30:
  JSC::MarkedSpace::didFinishIterating(v10, v11, v12, v13, v14, v15, v16, v17);
  return v32;
}

BOOL JSC::VMInspector::isValidCodeBlock(JSC::VMInspector *this, JSC::VM *a2, JSC::CodeBlock *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  JSC::VM *v14;
  char v15;
  _QWORD v16[3];

  v8 = *((_QWORD *)this + 14);
  if (!*(_BYTE *)(v8 + 6))
    goto LABEL_5;
  v11 = *(_QWORD *)(v8 + 8);
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12)
    v12 = WTF::Thread::initializeCurrentTLS(0);
  if (v11 == v12)
  {
    v14 = a2;
    v15 = 0;
    v16[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::VMInspector::isValidCodeBlock(JSC::VM *,JSC::CodeBlock *)::CodeBlockValidationFunctor>::implFunction;
    v16[1] = v16;
    v16[2] = &v14;
    JSC::Heap::forEachCodeBlockImpl((uint64_t)this + 192, (uint64_t)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    return v15 != 0;
  }
  else
  {
LABEL_5:
    WTF::dataLog<char [16]>("ERROR: current thread does not own the JSLock\n");
    return 0;
  }
}

uint64_t JSC::VMInspector::codeBlockForFrame(JSC::VMInspector *this, JSC::VM *a2, JSC::CallFrame *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  JSC::Wasm::NameSection *v31;

  v8 = *((_QWORD *)this + 14);
  if (!*(_BYTE *)(v8 + 6))
    goto LABEL_5;
  v9 = (int)a3;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13)
    v13 = WTF::Thread::initializeCurrentTLS(0);
  if (v12 != v13)
  {
LABEL_5:
    WTF::dataLog<char [16]>("ERROR: current thread does not own the JSLock\n");
    return 0;
  }
  if (!a2)
    return 0;
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v27, a2, this, 0, a5, a6, a7, a8);
  if (v28)
  {
    v22 = v9 + 1;
    while (--v22)
    {
      JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v27, (uint64_t)v15, v16, v17, v18, v19, v20, v21);
      if (!v28)
        goto LABEL_12;
    }
    result = v29;
  }
  else
  {
LABEL_12:
    result = 0;
  }
  v23 = v30;
  v30 = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      v31 = (JSC::Wasm::NameSection *)v23;
      v26 = result;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v31, v15, v16, v17, v18, v19, v20, v21);
      return v26;
    }
  }
  return result;
}

void JSC::VMInspector::dumpCallFrame(JSC::VMInspector *this, JSC::VM *a2, JSC::CallFrame *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD v24[3];
  _BYTE v25[16];
  uint64_t v26;
  unsigned int *v27;
  JSC::Wasm::NameSection *v28;

  v8 = *((_QWORD *)this + 14);
  if (!*(_BYTE *)(v8 + 6))
    goto LABEL_5;
  v9 = (int)a3;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13)
    v13 = WTF::Thread::initializeCurrentTLS(0);
  if (v12 == v13)
  {
    v24[0] = 0;
    v24[1] = v9;
    v24[2] = 0;
    JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v25, a2, this, 0, a5, a6, a7, a8);
    while (v26 && !JSC::DumpFrameFunctor::operator()(v24, (JSC::StackVisitor::Frame *)v25))
      JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v25, (uint64_t)v14, v15, v16, v17, v18, v19, v20);
    v21 = v27;
    v27 = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        v28 = (JSC::Wasm::NameSection *)v21;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v28, v14, v15, v16, v17, v18, v19, v20);
      }
    }
  }
  else
  {
LABEL_5:
    WTF::dataLog<char [16]>("ERROR: current thread does not own the JSLock\n");
  }
}

uint64_t JSC::VMInspector::dumpRegisters(JSC::VMInspector *this, JSC::CallFrame *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  JSC::VMInspector *i;
  JSC::CallFrame *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  JSC::VMInspector *v37;
  JSC::VMInspector *v38;
  unint64_t v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  char *v44;
  JSC::VMInspector *v45;
  JSC::Wasm::NameSection **v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::Wasm::NameSection **v54;
  JSC::Wasm::NameSection *v55;
  JSC::Wasm::NameSection *v56;
  JSC::JSCell *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  JSC::Structure *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  size_t v73;
  unint64_t v74;
  unint64_t v75;
  WTF *v76;
  const char *v77;
  unint64_t v78;
  WTF *v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  int v99;
  unint64_t v100;
  uint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  JSC::Wasm::NameSection **v107;
  JSC::Wasm::NameSection **v108;
  JSC::Wasm::NameSection *v109;
  JSC::Wasm::NameSection *v110;
  JSC::JSCell *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  JSC::Structure *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF *v126;
  size_t v127;
  unint64_t v128;
  unint64_t v129;
  WTF *v130;
  const char *v131;
  unint64_t v132;
  WTF *v133;
  WTF::StringImpl *v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  JSC::JSCell *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  JSC::Wasm::NameSection **v150;
  JSC::Heap *v151;
  JSC::Wasm::NameSection *v152;
  unint64_t v153;
  BOOL v154;
  JSC::Structure *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF *v163;
  const char *v164;
  size_t v165;
  unint64_t v166;
  unint64_t v167;
  WTF *v168;
  const char *v169;
  unint64_t v170;
  const char *v171;
  const char *v172;
  const char *v173;
  JSC::JSCell *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF::StringImpl ***v180;
  uint64_t v181;
  JSC::Structure *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF *v190;
  size_t v191;
  unint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  const char *v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int v216;
  JSC::Wasm::NameSection **v217;
  const char *v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  JSC::Wasm::NameSection *v228;
  JSC::JSCell *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  JSC::Structure *v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  WTF *v244;
  size_t v245;
  unint64_t v246;
  unint64_t v247;
  WTF *v248;
  const char *v249;
  unint64_t v250;
  WTF *v251;
  WTF::StringImpl *v252;
  unint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  JSC::VM *v262;
  JSC::VMInspector *v263;
  WTF *v264;
  WTF::StringImpl *v265;
  uint64_t v266;
  WTF::StringImpl ***v267;
  WTF::StringImpl **v268;
  WTF *v269;
  __int128 v270;
  _BYTE v271[48];
  unsigned int v272;
  unsigned int *v273;
  uint64_t v274;

  v274 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)JSC::VMInspector::vmForCallFrame(this, a2, a3, a4, a5, a6, a7, a8);
  if (!v9)
    return WTF::dataLog<char [39],char [2]>();
  v15 = v9;
  v17 = (JSC::CallFrame *)*((_QWORD *)v9 + 5);
  for (i = (JSC::VMInspector *)*((_QWORD *)v9 + 6); i; i = *(JSC::VMInspector **)(vmEntryRecord((uint64_t)i) + 16))
  {
    if (i == this)
    {
      v268 = (WTF::StringImpl **)this;
      WTF::dataLog<char [11],WTF::RawPointer,char [19],char [2]>((const void **)&v268);
      v26 = vmEntryRecord((uint64_t)this);
      v268 = *(WTF::StringImpl ***)(v26 + 16);
      WTF::dataLog<char [26],WTF::RawPointer,char [2]>((const void **)&v268);
      v268 = *(WTF::StringImpl ***)(v26 + 8);
      return WTF::dataLog<char [28],WTF::RawPointer,char [2]>((const void **)&v268);
    }
  }
  v263 = this;
  v262 = v15;
  if (v17)
  {
    JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)&v268, v17, v15, 0, v11, v12, v13, v14);
    v24 = v270;
    if ((_QWORD)v270)
    {
      if ((JSC::VMInspector *)v270 == this)
      {
        v24 = 0;
LABEL_16:
        v27 = *((_QWORD *)&v270 + 1);
        goto LABEL_17;
      }
      while (1)
      {
        JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)&v268, (uint64_t)v10, v18, v19, v20, v21, v22, v23);
        if (!(_QWORD)v270)
          break;
        if ((JSC::VMInspector *)v270 == this)
          goto LABEL_16;
        v24 = v270;
      }
    }
    v27 = 0;
LABEL_17:
    v28 = v273;
    v273 = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        v267 = (WTF::StringImpl ***)v28;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v267, v10, v18, v19, v20, v21, v22, v23);
      }
    }
    goto LABEL_21;
  }
  v27 = 0;
  v24 = 0;
LABEL_21:
  if ((*((_QWORD *)v263 + 3) & 0xFFFE000000000007) == 3)
    v31 = JSC::CallFrame::codeOwnerCellSlow(v263);
  else
    v31 = *((_QWORD *)v263 + 2);
  v32 = *(unsigned __int8 *)(v31 + 5);
  if (v32 == 18)
    v33 = v31;
  else
    v33 = 0;
  v266 = v33;
  if (v33)
  {
    v34 = *(unsigned int *)(v33 + 20);
    v35 = *(unsigned int *)(v33 + 24);
    v36 = "JS";
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v36 = "native";
  }
  v37 = (JSC::VMInspector *)((char *)v263 - 8 * v34);
  if (v24)
    v38 = (JSC::VMInspector *)(v24 + 40);
  else
    v38 = v37;
  v39 = (unint64_t)(v38 - v263) >> 3;
  if (v32 == 73)
    v40 = "Wasm";
  else
    v40 = v36;
  WTF::dataLogF((WTF *)"Registers for %s frame 0x%llx (entryFrame ", (const char *)v10, v40, v263);
  if (v27)
    WTF::dataLogF((WTF *)"0x%llx):\n", v41, v27);
  else
    WTF::dataLogF((WTF *)"unknown):\n", v41, v261);
  WTF::dataLogF((WTF *)"-----------------------------------------------------------------------------\n", v42);
  WTF::dataLogF((WTF *)"   VirtualRegister     : address      value\n", v43);
  v45 = v263;
  if (!v266)
    goto LABEL_155;
  v46 = (JSC::Wasm::NameSection **)((char *)v263 - 8 * v35);
  WTF::dataLogF((WTF *)"---------------------------------------------------- Outgoing Args + Misc ---\n", v44);
  if (v38 < (JSC::VMInspector *)v46)
  {
    v54 = (JSC::Wasm::NameSection **)v38;
    while (1)
    {
      v56 = *v54++;
      v55 = v56;
      JSC::CodeBlock::nameForRegister(v266, v39, v48, v49, v50, v51, v52, v53, (uint64_t *)&v265);
      WTF::String::ascii((WTF::String *)&v265, (int8x16_t **)&v264);
      if (v264)
        v63 = (char *)v264 + 16;
      else
        v63 = 0;
      v267 = (WTF::StringImpl ***)v55;
      if (((unint64_t)v55 & 0xFFFE000000000002) != 0
        || JSC::VMInspector::isValidCell((JSC::VM *)((char *)v262 + 192), v55, v57, v58, v59, v60, v61, v62))
      {
        v64 = 0;
        v268 = (WTF::StringImpl **)off_1E3572250;
        v269 = (WTF *)v271;
        v270 = xmmword_199122F80;
        v271[0] = 0;
        if (v55 && ((unint64_t)v55 & 0xFFFE000000000002) == 0)
          v64 = (JSC::Structure *)(16 * (*(_DWORD *)v55 & 0xFFFFFFFE));
        JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v267, (WTF::PrintStream *)&v268, 0, v64);
        ((void (*)(WTF::StringImpl ***))v268[5])(&v268);
        v72 = v269;
        if (!v269)
        {
          v74 = 0;
          v76 = 0;
LABEL_55:
          WTF::fastFree((unint64_t)v76, v65, v66, v67, v68, v69, v70, v71);
          v78 = v74 + 16;
          if (!v74)
            v78 = 0;
          WTF::dataLogF((WTF *)"% 4d  %-16s : %10p  0x%llx %s\n", v77, v39, v63, v38, v55, v78);
          if (!v74)
            goto LABEL_63;
          goto LABEL_61;
        }
        v73 = v270;
        if ((unint64_t)v270 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x198C6DE70);
        }
        if ((_QWORD)v270 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x198C6DE78);
        }
        v74 = WTF::fastMalloc((WTF *)(v270 + 17));
        *(_DWORD *)v74 = 1;
        *(_QWORD *)(v74 + 8) = v73;
        v75 = v74 + 16;
        memcpy((void *)(v74 + 16), v72, v73);
        *(_BYTE *)(v74 + 16 + v73) = 0;
        v76 = v269;
        if (v269 != (WTF *)v271)
          goto LABEL_55;
      }
      else
      {
        v74 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v74 = 1;
        *(_QWORD *)(v74 + 8) = 0;
        *(_BYTE *)(v74 + 16) = 0;
        v75 = v74 + 16;
      }
      WTF::dataLogF((WTF *)"% 4d  %-16s : %10p  0x%llx %s\n", (const char *)v65, v39, v63, v38, v55, v75);
LABEL_61:
      if (*(_DWORD *)v74 == 1)
        WTF::fastFree(v74, v47, v48, v49, v50, v51, v52, v53);
      else
        --*(_DWORD *)v74;
LABEL_63:
      v79 = v264;
      v264 = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 1)
          WTF::fastFree((unint64_t)v79, v47, v48, v49, v50, v51, v52, v53);
        else
          --*(_DWORD *)v79;
      }
      v80 = v265;
      v265 = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
        {
          WTF::StringImpl::~StringImpl(v80, (WTF::AtomStringImpl *)v47, v48, v49, v50, v51, v52, v53);
          WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
        }
        else
        {
          *(_DWORD *)v80 -= 2;
        }
      }
      v39 = (v39 + 1);
      v38 = (JSC::VMInspector *)v54;
      if (v54 >= v46)
        goto LABEL_75;
    }
  }
  v54 = (JSC::Wasm::NameSection **)v38;
LABEL_75:
  WTF::dataLogF((WTF *)"--------------------------------------------------------------- Variables ---\n", (const char *)v47);
  v96 = *(_QWORD *)(v266 + 120);
  if (v96)
  {
    v97 = (unsigned int *)(v96 + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 + 1, v97));
  }
  v99 = *(unsigned __int8 *)(v96 + 12);
  if (v99 == 5)
  {
    v101 = (uint64_t *)(v96 + 256);
  }
  else if (v99 == 4)
  {
    v102 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
    if (v102 != -1)
    {
      v268 = &v265;
      v267 = &v268;
      std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v267, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
    }
    v101 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
  }
  else
  {
    v100 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
    if (v100 != -1)
    {
      v268 = &v265;
      v267 = &v268;
      std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v267, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
    }
    v101 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  }
  v103 = (unint64_t)(v101[1] + 7) >> 3;
  v104 = (unsigned int *)(v96 + 8);
  do
  {
    v105 = __ldaxr(v104);
    v106 = v105 - 1;
  }
  while (__stlxr(v106, v104));
  if (!v106)
  {
    atomic_store(1u, (unsigned int *)(v96 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 32))(v96);
  }
  v107 = (JSC::Wasm::NameSection **)((char *)v263 - 8 * v103);
  if (v54 < v107)
  {
    v108 = v54;
    while (1)
    {
      v110 = *v108++;
      v109 = v110;
      JSC::CodeBlock::nameForRegister(v266, v39, v90, v91, v92, v93, v94, v95, (uint64_t *)&v265);
      WTF::String::ascii((WTF::String *)&v265, (int8x16_t **)&v264);
      if (v264)
        v117 = (char *)v264 + 16;
      else
        v117 = 0;
      v267 = (WTF::StringImpl ***)v109;
      if (((unint64_t)v109 & 0xFFFE000000000002) != 0
        || JSC::VMInspector::isValidCell((JSC::VM *)((char *)v262 + 192), v109, v111, v112, v113, v114, v115, v116))
      {
        v118 = 0;
        v268 = (WTF::StringImpl **)off_1E3572250;
        v269 = (WTF *)v271;
        v270 = xmmword_199122F80;
        v271[0] = 0;
        if (v109 && ((unint64_t)v109 & 0xFFFE000000000002) == 0)
          v118 = (JSC::Structure *)(16 * (*(_DWORD *)v109 & 0xFFFFFFFE));
        JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v267, (WTF::PrintStream *)&v268, 0, v118);
        ((void (*)(WTF::StringImpl ***))v268[5])(&v268);
        v126 = v269;
        if (!v269)
        {
          v128 = 0;
          v130 = 0;
LABEL_107:
          WTF::fastFree((unint64_t)v130, v119, v120, v121, v122, v123, v124, v125);
          v132 = v128 + 16;
          if (!v128)
            v132 = 0;
          WTF::dataLogF((WTF *)"% 4d  %-16s : %10p  0x%llx %s\n", v131, v39, v117, v54, v109, v132);
          if (!v128)
            goto LABEL_115;
          goto LABEL_113;
        }
        v127 = v270;
        if ((unint64_t)v270 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x198C6DE80);
        }
        if ((_QWORD)v270 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x198C6DE88);
        }
        v128 = WTF::fastMalloc((WTF *)(v270 + 17));
        *(_DWORD *)v128 = 1;
        *(_QWORD *)(v128 + 8) = v127;
        v129 = v128 + 16;
        memcpy((void *)(v128 + 16), v126, v127);
        *(_BYTE *)(v128 + 16 + v127) = 0;
        v130 = v269;
        if (v269 != (WTF *)v271)
          goto LABEL_107;
      }
      else
      {
        v128 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v128 = 1;
        *(_QWORD *)(v128 + 8) = 0;
        *(_BYTE *)(v128 + 16) = 0;
        v129 = v128 + 16;
      }
      WTF::dataLogF((WTF *)"% 4d  %-16s : %10p  0x%llx %s\n", (const char *)v119, v39, v117, v54, v109, v129);
LABEL_113:
      if (*(_DWORD *)v128 == 1)
        WTF::fastFree(v128, v89, v90, v91, v92, v93, v94, v95);
      else
        --*(_DWORD *)v128;
LABEL_115:
      v133 = v264;
      v264 = 0;
      if (v133)
      {
        if (*(_DWORD *)v133 == 1)
          WTF::fastFree((unint64_t)v133, v89, v90, v91, v92, v93, v94, v95);
        else
          --*(_DWORD *)v133;
      }
      v134 = v265;
      v265 = 0;
      if (v134)
      {
        if (*(_DWORD *)v134 == 2)
        {
          WTF::StringImpl::~StringImpl(v134, (WTF::AtomStringImpl *)v89, v90, v91, v92, v93, v94, v95);
          WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
        }
        else
        {
          *(_DWORD *)v134 -= 2;
        }
      }
      v39 = (v39 + 1);
      v54 = v108;
      if (v108 >= v107)
        goto LABEL_127;
    }
  }
  v108 = v54;
LABEL_127:
  WTF::dataLogF((WTF *)"------------------------------------------------------------ Callee Saves ---\n", (const char *)v89);
  v45 = v263;
  if (v108 == (JSC::Wasm::NameSection **)v263)
    goto LABEL_154;
  v149 = "CalleeSaveReg";
  v150 = v108;
  do
  {
    v152 = *v150++;
    v151 = v152;
    v267 = (WTF::StringImpl ***)v152;
    v153 = (unint64_t)v152 & 0xFFFE000000000002;
    if (((unint64_t)v152 & 0xFFFE000000000002) == 0
      && !JSC::VMInspector::isValidCell((JSC::VM *)((char *)v262 + 192), v151, v143, v144, v145, v146, v147, v148))
    {
      v166 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v166 = 1;
      *(_QWORD *)(v166 + 8) = 0;
      *(_BYTE *)(v166 + 16) = 0;
      v167 = v166 + 16;
LABEL_148:
      WTF::dataLogF((WTF *)"% 4d  %-16s : %10p  0x%llx %s\n", v156, v39, v149, v108, v151, v167);
LABEL_149:
      if (*(_DWORD *)v166 == 1)
        WTF::fastFree(v166, v44, (uint64_t)v143, v144, v145, v146, v147, v148);
      else
        --*(_DWORD *)v166;
      goto LABEL_151;
    }
    v268 = (WTF::StringImpl **)off_1E3572250;
    v269 = (WTF *)v271;
    v270 = xmmword_199122F80;
    v271[0] = 0;
    if (v151)
      v154 = v153 == 0;
    else
      v154 = 0;
    if (v154)
      v155 = (JSC::Structure *)(16 * (*(_DWORD *)v151 & 0xFFFFFFFE));
    else
      v155 = 0;
    JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v267, (WTF::PrintStream *)&v268, 0, v155);
    ((void (*)(WTF::StringImpl ***))v268[5])(&v268);
    v163 = v269;
    if (v269)
    {
      v164 = v149;
      v165 = v270;
      if ((unint64_t)v270 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x198C6DE60);
      }
      if ((_QWORD)v270 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x198C6DE68);
      }
      v166 = WTF::fastMalloc((WTF *)(v270 + 17));
      *(_DWORD *)v166 = 1;
      *(_QWORD *)(v166 + 8) = v165;
      v167 = v166 + 16;
      memcpy((void *)(v166 + 16), v163, v165);
      *(_BYTE *)(v166 + 16 + v165) = 0;
      v168 = v269;
      v149 = v164;
      if (v269 == (WTF *)v271)
        goto LABEL_148;
    }
    else
    {
      v166 = 0;
      v168 = 0;
    }
    WTF::fastFree((unint64_t)v168, v156, v157, v158, v159, v160, v161, v162);
    v170 = v166 + 16;
    if (!v166)
      v170 = 0;
    WTF::dataLogF((WTF *)"% 4d  %-16s : %10p  0x%llx %s\n", v169, v39, v149, v108, v151, v170);
    if (v166)
      goto LABEL_149;
LABEL_151:
    v39 = (v39 + 1);
    v108 = v150;
  }
  while (v150 != (JSC::Wasm::NameSection **)v263);
  v45 = v263;
LABEL_154:
  v38 = v45;
LABEL_155:
  WTF::dataLogF((WTF *)"-------------------------------------------------------- CallFrame Header ---\n", v44);
  WTF::dataLogF((WTF *)"% 4d  CallerFrame      : %10p  %p \n", v171, v39, v38, *(_QWORD *)v45);
  WTF::dataLogF((WTF *)"% 4d  ReturnPC         : %10p  %p \n", v172, (v39 + 1), (char *)v38 + 8, *((_QWORD *)v45 + 1));
  WTF::dataLogF((WTF *)"% 4d  CodeBlock        : %10p  0x%llx ", v173, (v39 + 2), (char *)v38 + 16, v266);
  WTF::dataLog<JSC::CodeBlock *,char [2]>(&v266, "\n");
  v180 = (WTF::StringImpl ***)*((_QWORD *)v38 + 3);
  v181 = *((_QWORD *)v45 + 3);
  v267 = v180;
  if (((unint64_t)v180 & 0xFFFE000000000002) == 0
    && !JSC::VMInspector::isValidCell((JSC::VM *)((char *)v262 + 192), (JSC::Heap *)v180, v174, v175, v176, v177, v178, v179))
  {
    v192 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v192 = 1;
    *(_QWORD *)(v192 + 8) = 0;
    *(_BYTE *)(v192 + 16) = 0;
    v193 = v192 + 16;
    goto LABEL_169;
  }
  v182 = 0;
  v268 = (WTF::StringImpl **)off_1E3572250;
  v269 = (WTF *)v271;
  v270 = xmmword_199122F80;
  v271[0] = 0;
  if (v180 && ((unint64_t)v180 & 0xFFFE000000000002) == 0)
    v182 = (JSC::Structure *)(16 * (*(_DWORD *)v180 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v267, (WTF::PrintStream *)&v268, 0, v182);
  ((void (*)(WTF::StringImpl ***))v268[5])(&v268);
  v190 = v269;
  if (!v269)
  {
    WTF::fastFree(0, v183, v184, v185, v186, v187, v188, v189);
    v193 = 0;
    goto LABEL_170;
  }
  v191 = v270;
  if ((unint64_t)v270 >= 0xFFFFFFFFFFFFFFF0)
  {
    __break(0xC471u);
    JUMPOUT(0x198C6DE90);
  }
  if ((_QWORD)v270 == -17)
  {
LABEL_228:
    __break(0xC471u);
    JUMPOUT(0x198C6DE50);
  }
  v192 = WTF::fastMalloc((WTF *)(v270 + 17));
  *(_DWORD *)v192 = 1;
  *(_QWORD *)(v192 + 8) = v191;
  v193 = v192 + 16;
  memcpy((void *)(v192 + 16), v190, v191);
  *(_BYTE *)(v192 + 16 + v191) = 0;
  if (v269 != (WTF *)v271)
    WTF::fastFree((unint64_t)v269, v194, v195, v196, v197, v198, v199, v200);
  if (*(_DWORD *)v192 == 1)
  {
LABEL_169:
    WTF::fastFree(v192, v194, v195, v196, v197, v198, v199, v200);
    goto LABEL_170;
  }
  --*(_DWORD *)v192;
LABEL_170:
  WTF::dataLogF((WTF *)"% 4d  Callee           : %10p  0x%llx %s\n", (const char *)v194, (v39 + 3), (char *)v38 + 24, v181, v193);
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)&v268, v263, v262, 0, v201, v202, v203, v204);
  while ((_QWORD)v270)
  {
    if ((JSC::VMInspector *)v270 == v263)
    {
      v212 = JSC::StackVisitor::Frame::computeLineAndColumn((JSC::StackVisitor::Frame *)&v268);
      WTF::dataLogF((WTF *)"% 2d.1  ReturnVPC        : %10p  %d (line %d)\n", v213, (v39 + 4), (char *)v38 + 32, v272 >> 2, v212);
      break;
    }
    JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)&v268, (uint64_t)v205, v206, v207, v208, v209, v210, v211);
  }
  v214 = v273;
  v273 = 0;
  if (v214)
  {
    do
    {
      v215 = __ldaxr(v214);
      v216 = v215 - 1;
    }
    while (__stlxr(v216, v214));
    if (!v216)
    {
      atomic_store(1u, v214);
      v267 = (WTF::StringImpl ***)v214;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v267, v205, v206, v207, v208, v209, v210, v211);
    }
  }
  v217 = (JSC::Wasm::NameSection **)((char *)v38 + 40);
  WTF::dataLogF((WTF *)"% 2d.2  ArgumentCount    : %10p  %lu \n", (const char *)v205, (v39 + 4), (char *)v38 + 32, *((int *)v263 + 8) - 1);
  WTF::dataLogF((WTF *)"--------------------------------------------------------------- Arguments ---\n", v218);
  v226 = (unint64_t)v263 + 8 * *((int *)v263 + 8) + 32;
  if ((unint64_t)v38 + 40 <= v226)
  {
    v227 = (v39 + 5);
    do
    {
      v228 = *v217;
      if (v266)
      {
        JSC::CodeBlock::nameForRegister(v266, v227, v220, v221, v222, v223, v224, v225, (uint64_t *)&v265);
      }
      else
      {
        WTF::StringImpl::s_emptyAtomString += 2;
        v265 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      }
      WTF::String::ascii((WTF::String *)&v265, (int8x16_t **)&v264);
      if (v264)
        v235 = (char *)v264 + 16;
      else
        v235 = 0;
      v267 = (WTF::StringImpl ***)v228;
      if (((unint64_t)v228 & 0xFFFE000000000002) != 0
        || JSC::VMInspector::isValidCell((JSC::VM *)((char *)v262 + 192), v228, v229, v230, v231, v232, v233, v234))
      {
        v236 = 0;
        v268 = (WTF::StringImpl **)off_1E3572250;
        v269 = (WTF *)v271;
        v270 = xmmword_199122F80;
        v271[0] = 0;
        if (v228 && ((unint64_t)v228 & 0xFFFE000000000002) == 0)
          v236 = (JSC::Structure *)(16 * (*(_DWORD *)v228 & 0xFFFFFFFE));
        JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v267, (WTF::PrintStream *)&v268, 0, v236);
        ((void (*)(WTF::StringImpl ***))v268[5])(&v268);
        v244 = v269;
        if (!v269)
        {
          v246 = 0;
          v248 = 0;
LABEL_199:
          WTF::fastFree((unint64_t)v248, v237, v238, v239, v240, v241, v242, v243);
          v250 = v246 + 16;
          if (!v246)
            v250 = 0;
          WTF::dataLogF((WTF *)"% 4d  %-16s : %10p  0x%llx %s\n", v249, v227, v235, v217, v228, v250);
          if (!v246)
            goto LABEL_207;
          goto LABEL_205;
        }
        v245 = v270;
        if ((unint64_t)v270 >= 0xFFFFFFFFFFFFFFF0)
          goto LABEL_228;
        if ((_QWORD)v270 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x198C6DE58);
        }
        v246 = WTF::fastMalloc((WTF *)(v270 + 17));
        *(_DWORD *)v246 = 1;
        *(_QWORD *)(v246 + 8) = v245;
        v247 = v246 + 16;
        memcpy((void *)(v246 + 16), v244, v245);
        *(_BYTE *)(v246 + 16 + v245) = 0;
        v248 = v269;
        if (v269 != (WTF *)v271)
          goto LABEL_199;
      }
      else
      {
        v246 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v246 = 1;
        *(_QWORD *)(v246 + 8) = 0;
        *(_BYTE *)(v246 + 16) = 0;
        v247 = v246 + 16;
      }
      WTF::dataLogF((WTF *)"% 4d  %-16s : %10p  0x%llx %s\n", (const char *)v237, v227, v235, v217, v228, v247);
LABEL_205:
      if (*(_DWORD *)v246 == 1)
        WTF::fastFree(v246, v219, v220, v221, v222, v223, v224, v225);
      else
        --*(_DWORD *)v246;
LABEL_207:
      v251 = v264;
      v264 = 0;
      if (v251)
      {
        if (*(_DWORD *)v251 == 1)
          WTF::fastFree((unint64_t)v251, v219, v220, v221, v222, v223, v224, v225);
        else
          --*(_DWORD *)v251;
      }
      v252 = v265;
      v265 = 0;
      if (v252)
      {
        if (*(_DWORD *)v252 == 2)
        {
          WTF::StringImpl::~StringImpl(v252, (WTF::AtomStringImpl *)v219, v220, v221, v222, v223, v224, v225);
          WTF::fastFree(v253, v254, v255, v256, v257, v258, v259, v260);
        }
        else
        {
          *(_DWORD *)v252 -= 2;
        }
      }
      ++v217;
      v227 = (v227 + 1);
    }
    while ((unint64_t)v217 <= v226);
  }
  return WTF::dataLogF((WTF *)"--------------------------------------------------------------------- End ---\n", (const char *)v219);
}

void JSC::VMInspector::dumpStack(JSC::VMInspector *this, JSC::VM *a2, JSC::CallFrame *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD v24[3];
  _BYTE v25[16];
  uint64_t v26;
  unsigned int *v27;
  JSC::Wasm::NameSection *v28;

  v8 = *((_QWORD *)this + 14);
  if (!*(_BYTE *)(v8 + 6))
    goto LABEL_5;
  v9 = (int)a3;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13)
    v13 = WTF::Thread::initializeCurrentTLS(0);
  if (v12 == v13)
  {
    if (a2)
    {
      v24[0] = 1;
      v24[1] = v9;
      v24[2] = 0;
      JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v25, a2, this, 0, a5, a6, a7, a8);
      while (v26 && !JSC::DumpFrameFunctor::operator()(v24, (JSC::StackVisitor::Frame *)v25))
        JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v25, (uint64_t)v14, v15, v16, v17, v18, v19, v20);
      v21 = v27;
      v27 = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v28 = (JSC::Wasm::NameSection *)v21;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v28, v14, v15, v16, v17, v18, v19, v20);
        }
      }
    }
  }
  else
  {
LABEL_5:
    WTF::dataLog<char [16]>("ERROR: current thread does not own the JSLock\n");
  }
}

uint64_t JSC::VMInspector::dumpValue(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return WTF::dataLog<JSC::JSValue,char [2]>((JSC::JSValue *)&v2, "\n");
}

uint64_t JSC::VMInspector::dumpCellMemory(JSC::VMInspector *this, JSC::JSCell *a2, WTF::PrintStream *a3)
{
  unint64_t v4;
  char v6;
  char **v7;
  char *v8;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  return JSC::VMInspector::dumpCellMemoryToStream((unint64_t)this, (JSC::JSCell *)WTF::s_file, a3);
}

uint64_t JSC::VMInspector::dumpCellMemoryToStream(unint64_t this, JSC::JSCell *a2, WTF::PrintStream *a3)
{
  uint64_t *v4;
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  WTF::PrintStream *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  WTF::PrintStream *v16;
  WTF::PrintStream *v17;
  unsigned int v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;
  unsigned int i;
  WTF::PrintStream *v22;
  WTF::PrintStream *v23;
  const char *v24;
  unsigned int j;
  WTF::PrintStream *v26;
  WTF::PrintStream *v27;
  unsigned int k;
  WTF::PrintStream *v29;
  WTF::PrintStream *v30;
  unsigned int m;
  WTF::PrintStream *v32;
  WTF::PrintStream *v33;
  uint64_t result;
  int v35;
  uint64_t *v36;
  unsigned int *v37;
  char v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  WTF::PrintStream *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  WTF::PrintStream *v50;
  WTF::PrintStream *v51;
  WTF::PrintStream *v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  WTF::PrintStream *v69;
  WTF::PrintStream *v70;
  unsigned int n;
  WTF::PrintStream *v72;
  WTF::PrintStream *v73;
  unsigned int ii;
  WTF::PrintStream *v75;
  WTF::PrintStream *v76;
  WTF::PrintStream *v77;
  WTF::PrintStream *v78;
  unsigned int jj;
  WTF::PrintStream *v80;
  WTF::PrintStream *v81;
  unsigned int v82;
  unsigned int v83;
  JSC::JSCell *v84;
  WTF::PrintStream *v85;
  JSC::JSCell *v86;
  WTF::PrintStream *v87;
  uint64_t v88;
  unsigned int v89;
  JSC::JSCell *v90;
  WTF::PrintStream *v91;
  JSC::JSCell *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  WTF::PrintStream *v96;
  JSC::JSCell *v97;
  WTF::PrintStream *v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  char *v112;
  int v113;
  int v114;
  uint64_t v115;
  unsigned int v116;
  _QWORD v117[4];
  JSC::JSCell *v118;
  char *v119;
  JSC::JSCell *v120;
  unsigned int *v121;
  JSC::JSCell *v122;
  unsigned int v123;

  v4 = (uint64_t *)this;
  v5 = *(_DWORD *)this;
  v6 = *(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
  if ((this & 8) != 0)
    v7 = *(_QWORD *)(this - 88);
  else
    v7 = 16 * **(unsigned int **)(this & 0xFFFFFFFFFFFFC000);
  v109 = v7;
  v8 = *(unsigned __int8 *)(this + 4);
  v9 = *(unsigned __int8 *)(this + 5);
  v110 = *(unsigned __int8 *)(this + 6);
  v113 = *(unsigned __int8 *)(this + 7);
  v115 = 16 * (v5 & 0xFFFFFFFE);
  v123 = 0;
  v121 = &v123;
  v122 = a2;
  v120 = a2;
  WTF::PrintStream::printf(a2, "<%p, %s>\n", (const void *)this, *(const char **)(16 * *(unsigned int *)(v115 + 0x4C)));
  v10 = __CFADD__(v123++, 1);
  if (!v10)
  {
    v11 = 0;
    do
    {
      v12 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v12, "%s", "  ");
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
      ++v11;
    }
    while (v11 < v123);
  }
  v108 = v6;
  v13 = v6 & 0x1F;
  v14 = *v4;
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v15, "%s", "[");
  WTF::PrintStream::printf(v15, "%u", 0);
  WTF::PrintStream::printf(v15, "%s", "] ");
  WTF::PrintStream::printfVariableFormat(v15, "%p : 0x%016llx", v4, v14);
  (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v16, "%s", " ");
  WTF::PrintStream::printf(v16, "%s", "header");
  (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v17, "%s", "\n");
  (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
  v10 = __CFADD__(v123++, 1);
  if (!v10)
  {
    v18 = 0;
    do
    {
      v19 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v19, "%s", "  ");
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
      ++v18;
    }
    while (v18 < v123);
  }
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v20, "%s", "structureID ");
  WTF::PrintStream::printfVariableFormat(v20, "%d 0x%x", v5, v5);
  WTF::PrintStream::printf(v20, "%s", " structure ");
  WTF::PrintStream::printf(v20, "%p", (const void *)v115);
  WTF::PrintStream::printf(v20, "%s", "\n");
  (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
  if (v123)
  {
    for (i = 0; i < v123; ++i)
    {
      v22 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v22, "%s", "  ");
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
    }
  }
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v23, "%s", "indexingTypeAndMisc ");
  WTF::PrintStream::printfVariableFormat(v23, "%d 0x%hhx", v8, v8);
  WTF::PrintStream::printf(v23, "%s", " ");
  if (v13 > 0x19)
    v24 = "Unknown!";
  else
    v24 = off_1E35B5330[v13];
  WTF::PrintStream::printf(v23, "%s%s", v24, "");
  WTF::PrintStream::printf(v23, "%s", "\n");
  (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
  if (v123)
  {
    for (j = 0; j < v123; ++j)
    {
      v26 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v26, "%s", "  ");
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
    }
  }
  v27 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v27, "%s", "type ");
  WTF::PrintStream::printfVariableFormat(v27, "%d 0x%hhx", v9, v9);
  WTF::PrintStream::printf(v27, "%s", "\n");
  (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
  if (v123)
  {
    for (k = 0; k < v123; ++k)
    {
      v29 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v29, "%s", "  ");
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
    }
  }
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v30, "%s", "flags ");
  WTF::PrintStream::printfVariableFormat(v30, "%d 0x%hhx", v110, v110);
  WTF::PrintStream::printf(v30, "%s", "\n");
  (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
  if (v123)
  {
    for (m = 0; m < v123; ++m)
    {
      v32 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v32, "%s", "  ");
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
    }
  }
  v33 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v33, "%s", "cellState ");
  WTF::PrintStream::printfVariableFormat(v33, "%d", v113);
  WTF::PrintStream::printf(v33, "%s", "\n");
  result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
  v35 = --v123;
  if (*((unsigned __int8 *)v4 + 5) < 0x17u)
  {
    v41 = 1;
    goto LABEL_111;
  }
  v36 = v4 + 1;
  v37 = (unsigned int *)v4[1];
  v38 = *(_BYTE *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 8);
  if ((v38 & 0xE) != 0)
  {
    if ((v38 & 0xEu) >= 0xA)
      v111 = v37[2];
    else
      v111 = 0;
LABEL_29:
    v39 = v38 & 0xF;
    if ((v39 - 3) >= 7)
    {
      if ((v39 - 10) < 4)
        v40 = 8 * *(v37 - 1) + 16;
      else
        v40 = 0;
    }
    else
    {
      v40 = 8 * *(v37 - 1);
    }
    v42 = 8;
    goto LABEL_38;
  }
  if (*(unsigned __int8 *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 9) - 39 > 0xA)
  {
    v42 = 0;
    v111 = 0;
    v40 = 0;
  }
  else
  {
    v111 = 0;
    v42 = 0;
    v40 = 0;
    if ((v4[5] & 0x40) != 0)
      goto LABEL_29;
  }
LABEL_38:
  v43 = *(unsigned __int16 *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x18);
  if (v43 != 65534)
  {
    if (v43 == 0xFFFF)
      v43 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x40) + 84);
    if (v43 >= 64)
    {
      if ((v43 - 63) >= 5)
      {
        v48 = (v43 - 64) | ((v43 - 64) >> 1) | (((v43 - 64) | ((v43 - 64) >> 1)) >> 2);
        v49 = v48 | (v48 >> 4) | ((v48 | (v48 >> 4)) >> 8);
        v47 = (v49 | HIWORD(v49)) + 1;
      }
      else
      {
        v47 = 4;
      }
      v106 = v47;
      if (v35)
        goto LABEL_43;
LABEL_50:
      v46 = v4[1];
      goto LABEL_51;
    }
  }
  v106 = 0;
  if (!v35)
    goto LABEL_50;
LABEL_43:
  v44 = 0;
  do
  {
    v45 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v45, "%s", "  ");
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
    ++v44;
  }
  while (v44 < v123);
  v46 = *v36;
LABEL_51:
  v50 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v50, "%s", "[");
  WTF::PrintStream::printf(v50, "%u", 1);
  WTF::PrintStream::printf(v50, "%s", "] ");
  WTF::PrintStream::printfVariableFormat(v50, "%p : 0x%016llx", v4 + 1, v46);
  (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
  v51 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v51, "%s", " ");
  WTF::PrintStream::printf(v51, "%s", "butterfly");
  (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
  v52 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v52, "%s", "\n");
  result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
  if (v37)
  {
    v53 = ++v123;
    if ((*(_BYTE *)(v115 + 8) & 0xE) != 0)
    {
      v54 = 1;
    }
    else
    {
      if (*(unsigned __int8 *)(v115 + 9) - 39 > 0xA)
      {
        v114 = 0;
LABEL_57:
        if ((*(_BYTE *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 8) & 0xEu) >= 0xA)
          v55 = *(unsigned int *)(*v36 + 8);
        else
          v55 = 0;
        v56 = *(unsigned __int16 *)(v115 + 24);
        if (v56 == 65534
          || (v56 == 0xFFFF
            ? (v57 = *(_DWORD *)(*(_QWORD *)(v115 + 64) + 84))
            : (v57 = *(unsigned __int16 *)(v115 + 24)),
              v57 < 64))
        {
          v58 = 0;
        }
        else if ((v57 - 63) >= 5)
        {
          v59 = (v57 - 64) | ((v57 - 64) >> 1) | (((v57 - 64) | ((v57 - 64) >> 1)) >> 2);
          v60 = v59 | (v59 >> 4) | ((v59 | (v59 >> 4)) >> 8);
          v58 = (v60 | HIWORD(v60)) + 1;
        }
        else
        {
          v58 = 4;
        }
        v61 = v40 + v42 + 8 * (v106 + v111);
        v62 = v58;
        v63 = "YES";
        v107 = v58;
        v64 = v55;
        v65 = "YES";
        if ((v114 & 1) == 0)
        {
          if ((*(_BYTE *)(v115 + 8) & 0xEu) >= 0xA)
            v64 = v37[2];
          else
            v64 = 0;
          if (v56 == 65534)
            goto LABEL_74;
          if (v56 == 0xFFFF)
            v56 = *(_DWORD *)(*(_QWORD *)(v115 + 64) + 84);
          if (v56 < 64)
          {
LABEL_74:
            v62 = 0;
LABEL_75:
            v65 = "NO";
            goto LABEL_78;
          }
          if ((v56 - 63) >= 5)
          {
            v99 = (v56 - 64) | ((v56 - 64) >> 1) | (((v56 - 64) | ((v56 - 64) >> 1)) >> 2);
            v100 = v99 | (v99 >> 4) | ((v99 | (v99 >> 4)) >> 8);
            v62 = (v100 | HIWORD(v100)) + 1;
            goto LABEL_75;
          }
          v65 = "NO";
          v62 = 4;
        }
LABEL_78:
        v103 = *(v37 - 2);
        v66 = (uint64_t)&v37[-2 * v62 - 2];
        v105 = v61;
        if (v61 > 0x50)
        {
          if (v61 > 0x1F60)
          {
            v104 = v61;
            goto LABEL_83;
          }
          v67 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v61 + 15) >> 2) & 0x1FFFFFFFFCLL));
        }
        else
        {
          v67 = (v61 + 15) & 0x7FFFFFFFF0;
        }
        v104 = v67;
LABEL_83:
        v112 = (char *)(v66 - 8 * v64);
        v102 = *(v37 - 1);
        if (v53)
        {
          v68 = 0;
          do
          {
            v69 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v69, "%s", "  ");
            (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
            ++v68;
          }
          while (v68 < v123);
        }
        v116 = v108 & 0xE;
        v70 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v70, "%s", "base ");
        WTF::PrintStream::printf(v70, "%p", v112);
        WTF::PrintStream::printf(v70, "%s", "\n");
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
        if (v123)
        {
          for (n = 0; n < v123; ++n)
          {
            v72 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v72, "%s", "  ");
            (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
          }
        }
        if (v116 <= 9)
          v63 = "NO";
        v73 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v73, "%s", "hasIndexingHeader ");
        WTF::PrintStream::printf(v73, "%s", v65);
        WTF::PrintStream::printf(v73, "%s", " hasAnyArrayStorage ");
        WTF::PrintStream::printf(v73, "%s", v63);
        WTF::PrintStream::printf(v73, "%s", "\n");
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
        if (v114)
        {
          if (v123)
          {
            for (ii = 0; ii < v123; ++ii)
            {
              v75 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
              WTF::PrintStream::printf(v75, "%s", "  ");
              (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
            }
          }
          v76 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v76, "%s", "publicLength ");
          WTF::PrintStream::printf(v76, "%u", v103);
          WTF::PrintStream::printf(v76, "%s", " vectorLength ");
          WTF::PrintStream::printf(v76, "%u", v102);
          (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
          if (v116 >= 0xA)
          {
            v77 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v77, "%s", " indexBias ");
            WTF::PrintStream::printf(v77, "%u", v37[2]);
            (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
          }
          v78 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v78, "%s", "\n");
          (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
        }
        if (v123)
        {
          for (jj = 0; jj < v123; ++jj)
          {
            v80 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v80, "%s", "  ");
            (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
          }
        }
        v81 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v81, "%s", "preCapacity ");
        WTF::PrintStream::printf(v81, "%lu", v55);
        WTF::PrintStream::printf(v81, "%s", " propertyCapacity ");
        WTF::PrintStream::printf(v81, "%lu", v107);
        WTF::PrintStream::printf(v81, "%s", "\n");
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
        v119 = v112;
        v117[0] = &v121;
        v117[1] = &v118;
        v117[2] = &v120;
        v117[3] = &v119;
        v118 = a2;
        ++v123;
        JSC::VMInspector::dumpCellMemoryToStream(JSC::JSCell *,WTF::PrintStream &)::$_3::operator()((uint64_t)v117, 0, v55, "preCapacity");
        v82 = v107 + v55;
        JSC::VMInspector::dumpCellMemoryToStream(JSC::JSCell *,WTF::PrintStream &)::$_3::operator()((uint64_t)v117, v55, v107 + v55, "propertyCapacity");
        if (v114)
          JSC::VMInspector::dumpCellMemoryToStream(JSC::JSCell *,WTF::PrintStream &)::$_3::operator()((uint64_t)v117, v107 + v55, ++v82, "indexingHeader");
        if (*v121)
        {
          v83 = 0;
          do
          {
            v84 = v122;
            v85 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)v122 + 32))(v122);
            WTF::PrintStream::printf(v85, "%s", "  ");
            (*(void (**)(JSC::JSCell *))(*(_QWORD *)v84 + 40))(v84);
            ++v83;
          }
          while (v83 < *v121);
        }
        v86 = v118;
        v87 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)v118 + 32))(v118);
        WTF::PrintStream::printf(v87, "%s", "<--- ");
        WTF::PrintStream::printf(v87, "%s", "butterfly");
        WTF::PrintStream::printf(v87, "%s", "\n");
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)v86 + 40))(v86);
        if (v116 >= 0xA)
        {
          if (v37 != (unsigned int *)&v119[8 * v82])
          {
            __break(0xC471u);
            JUMPOUT(0x198C6F248);
          }
          JSC::VMInspector::dumpCellMemoryToStream(JSC::JSCell *,WTF::PrintStream &)::$_3::operator()((uint64_t)v117, v82, v82 + 2, "arrayStorage");
          v82 += 2;
        }
        JSC::VMInspector::dumpCellMemoryToStream(JSC::JSCell *,WTF::PrintStream &)::$_3::operator()((uint64_t)v117, v82, v105 >> 3, "indexedProperties");
        result = JSC::VMInspector::dumpCellMemoryToStream(JSC::JSCell *,WTF::PrintStream &)::$_3::operator()((uint64_t)v117, v105 >> 3, v104 >> 3, "unallocated capacity");
        v123 -= 2;
        goto LABEL_110;
      }
      v54 = (*((unsigned __int8 *)v4 + 40) >> 6) & 1;
    }
    v114 = v54;
    goto LABEL_57;
  }
LABEL_110:
  v41 = 2;
LABEL_111:
  if (v109 >> 3 > v41)
  {
    v88 = v41;
    do
    {
      if (*v121)
      {
        v89 = 0;
        do
        {
          v90 = v122;
          v91 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)v122 + 32))(v122);
          WTF::PrintStream::printf(v91, "%s", "  ");
          (*(void (**)(JSC::JSCell *))(*(_QWORD *)v90 + 40))(v90);
          ++v89;
        }
        while (v89 < *v121);
      }
      v92 = v120;
      v93 = &v4[v88];
      v94 = v4;
      v95 = *v93;
      v96 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)v120 + 32))(v120);
      WTF::PrintStream::printf(v96, "%s", "[");
      WTF::PrintStream::printf(v96, "%u", v41);
      WTF::PrintStream::printf(v96, "%s", "] ");
      v101 = v95;
      v4 = v94;
      WTF::PrintStream::printfVariableFormat(v96, "%p : 0x%016llx", v93, v101);
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)v92 + 40))(v92);
      v97 = v120;
      v98 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)v120 + 32))(v120);
      WTF::PrintStream::printf(v98, "%s", "\n");
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)v97 + 40))(v97);
      v88 = ++v41;
    }
    while (v109 >> 3 > v41);
  }
  return result;
}

uint64_t JSC::VMInspector::dumpCellMemoryToStream(JSC::JSCell *,WTF::PrintStream &)::$_3::operator()(uint64_t a1, unsigned int a2, unsigned int a3, const char *a4)
{
  uint64_t v6;
  unsigned int **v7;
  unsigned int v8;
  unsigned int *v9;
  WTF::PrintStream *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  unsigned int **v13;
  unsigned int v14;
  unsigned int *v15;
  WTF::PrintStream *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  uint64_t v22;
  WTF::PrintStream *v23;
  uint64_t v26;

  if (a2 < a3)
  {
    v6 = a2;
    v26 = a2;
    do
    {
      if (a4 && v6 == v26)
      {
        v7 = *(unsigned int ***)a1;
        if (***(_DWORD ***)a1)
        {
          v8 = 0;
          do
          {
            v9 = v7[1];
            v10 = (WTF::PrintStream *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 32))(v9);
            WTF::PrintStream::printf(v10, "%s", "  ");
            (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 40))(v9);
            ++v8;
          }
          while (v8 < **v7);
        }
        v11 = **(_QWORD **)(a1 + 8);
        v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
        WTF::PrintStream::printf(v12, "%s", "<--- ");
        WTF::PrintStream::printf(v12, "%s", a4);
        WTF::PrintStream::printf(v12, "%s", "\n");
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      }
      v13 = *(unsigned int ***)a1;
      if (***(_DWORD ***)a1)
      {
        v14 = 0;
        do
        {
          v15 = v13[1];
          v16 = (WTF::PrintStream *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 32))(v15);
          WTF::PrintStream::printf(v16, "%s", "  ");
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 40))(v15);
          ++v14;
        }
        while (v14 < **v13);
      }
      v17 = *(_QWORD **)(a1 + 16);
      v18 = *v17;
      v19 = (uint64_t *)(**(_QWORD **)(a1 + 24) + 8 * v6);
      v20 = *v19;
      v21 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 32))(*v17);
      WTF::PrintStream::printf(v21, "%s", "[");
      WTF::PrintStream::printf(v21, "%u", v6);
      WTF::PrintStream::printf(v21, "%s", "] ");
      WTF::PrintStream::printfVariableFormat(v21, "%p : 0x%016llx", v19, v20);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      v22 = *v17;
      v23 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 32))(*v17);
      WTF::PrintStream::printf(v23, "%s", "\n");
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
      ++v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t JSC::VMInspector::dumpSubspaceHashes(JSC::VMInspector *this, JSC::VM *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  int v19;
  const char *v20;

  v2 = *((unsigned int *)this + 91);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *((_QWORD *)this + 44);
    v5 = v4 + 8 * v2;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)v4 + 80);
      v7 = (const char *)(v6 + 16);
      if (!v6)
        v7 = 0;
      v20 = v7;
      v8 = *(unsigned __int8 *)v7;
      v9 = -1640531527;
      if (v8)
      {
        v10 = (unsigned __int8 *)(v6 + 18);
        while (*(v10 - 1))
        {
          v11 = ((v9 + v8) << 16) ^ (*(v10 - 1) << 11) ^ (v9 + v8);
          v9 = v11 + (v11 >> 11);
          v12 = *v10;
          v10 += 2;
          v8 = v12;
          if (!v12)
            goto LABEL_11;
        }
        v9 = ((v9 + v8) ^ ((v9 + v8) << 11)) + (((v9 + v8) ^ ((v9 + v8) << 11)) >> 17);
      }
LABEL_11:
      v13 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * v9)) >> 5);
      v14 = (v13 ^ (4 * v13)) + ((v13 ^ (4 * v13)) >> 15);
      LODWORD(v15) = v14 ^ (v14 << 10);
      if ((_DWORD)v15)
        v15 = v15;
      else
        v15 = 0x800000;
      v16 = v3 + 1;
      v19 = v3;
      v18 = v15;
      WTF::dataLog<char [6],unsigned int,char [3],char const*,char [7],WTF::RawPointer,char [2]>("    [", &v19, "] ", &v20, " Hash:", (const void **)&v18, "\n");
      v4 += 8;
      v3 = v16;
    }
    while (v4 != v5);
  }
  return WTF::dataLog<char [16]>("\n");
}

_QWORD *std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::VMInspector::instance(void)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  JSC::VMInspector::instance(void)::manager = (uint64_t)result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSC::VMInspector::isValidVMSlow(JSC::VM *)::$_0,WTF::IterationStatus,JSC::VM&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE *v3;

  if (**(_QWORD **)(a1 + 8) != a2)
    return 0;
  JSC::VMInspector::m_recentVM = a2;
  v3 = *(_BYTE **)(a1 + 16);
  result = 1;
  *v3 = 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSC::VMInspector::dumpVMs(void)::$_0,WTF::IterationStatus,JSC::VM &>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  int v9;

  v8 = *(_DWORD **)(a1 + 8);
  v9 = (*v8)++;
  WTFLogAlways("  [%u] VM %p", a2, a3, a4, a5, a6, a7, a8, v9);
  return 0;
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::VMInspector::isValidCodeBlock(JSC::VM *,JSC::CodeBlock *)::CodeBlockValidationFunctor>::implFunction(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(_QWORD *)v2 == a2)
    *(_BYTE *)(v2 + 8) = 1;
  return result;
}

BOOL JSC::DumpFrameFunctor::operator()(_DWORD *a1, JSC::StackVisitor::Frame *a2)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  WTF::StringImpl *v38;
  char v39;
  char **v40;
  char *v41;

  v3 = a1[1];
  v4 = a1[2] + 1;
  a1[2] = v4;
  if (v4 > v3)
  {
    v6 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v6 != -1)
    {
      v41 = &v39;
      v40 = &v41;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    v7 = WTF::s_file;
    v8 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v8 + 8) = "  ";
    *(_DWORD *)(v8 + 16) = 4;
    v37 = 2;
    *(_QWORD *)v8 = 0x200000004;
    v38 = (WTF::StringImpl *)v8;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E35B5318;
    v9[1] = a1;
    v36 = v9;
    JSC::StackVisitor::Frame::dump(a2, v7, &v37, &v36);
    v17 = v36;
    v36 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    v18 = v38;
    v38 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  return !*a1 && a1[2] > a1[1];
}

uint64_t WTF::Detail::CallableWrapper<JSC::DumpFrameFunctor::operator()(JSC::StackVisitor &)::{lambda(WTF::PrintStream &)#1},void,WTF::PrintStream &>::call(uint64_t a1, uint64_t a2)
{
  int v3;
  WTF::PrintStream *v4;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) + ~*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4);
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "[");
  WTF::PrintStream::printf(v4, "%u", v3);
  WTF::PrintStream::printf(v4, "%s", "] ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WTF::dataLog<char [39],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Cannot find callFrame on any VM stack.");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [11],WTF::RawPointer,char [19],char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "CallFrame ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", " is an EntryFrame.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [26],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    previous entryFrame: ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [28],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    previous topCallFrame: ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [6],unsigned int,char [3],char const*,char [7],WTF::RawPointer,char [2]>(const char *a1, _DWORD *a2, const char *a3, const char **a4, const char *a5, const void **a6, const char *a7)
{
  unint64_t v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  char v18;
  char **v19;
  char *v20;

  v14 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v14 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v15 = WTF::s_file;
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v16, "%s", a1);
  WTF::PrintStream::printf(v16, "%u", *a2);
  WTF::PrintStream::printf(v16, "%s", a3);
  WTF::PrintStream::printf(v16, "%s", *a4);
  WTF::PrintStream::printf(v16, "%s", a5);
  WTF::PrintStream::printf(v16, "%p", *a6);
  WTF::PrintStream::printf(v16, "%s", a7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
}

double JSC::Wasm::BBQDisassembler::BBQDisassembler(JSC::Wasm::BBQDisassembler *this)
{
  double result;

  *(_DWORD *)this = -1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  result = NAN;
  *((_QWORD *)this + 3) = -1;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t JSC::Wasm::BBQDisassembler::dump(JSC::Wasm::BBQDisassembler *this, WTF::PrintStream *a2, JSC::LinkBuffer *a3)
{
  char *v6;
  char *v7;
  WTF::PrintStream *v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  WTF::PrintStream *v34;
  size_t v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  WTF *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  WTF *v43;
  char *v44;
  size_t v45;
  size_t v46;
  char *v47;
  char *v48;
  char *String;
  uint64_t v50;
  uint64_t v51;
  WTF::PrintStream *v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float v60;
  WTF::PrintStream *v61;
  float v62;
  WTF::PrintStream *v63;
  float v64;
  unsigned int v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  WTF *v84;
  unint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  WTF *v89;
  size_t v90;
  uint64_t v91;
  char *v92;
  _DWORD *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  unsigned __int128 v120;
  char v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  unint64_t v133;
  WTF *v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  WTF *v138;
  size_t v139;
  uint64_t v140;
  char *v141;
  _DWORD *v142;
  uint64_t v143;
  WTF *v144;
  WTF::PrintStream *v145;
  uint64_t v146;
  const char *v147;
  const char *v148;
  uint64_t v149;
  WTF *v150;
  _DWORD *v151;
  WTF::PrintStream *v152;
  int v153;
  JSC::LinkBuffer *v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  int v160;
  int v162;
  JSC::LinkBuffer *v163;
  WTF *v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  WTF *v167;
  int v168;
  _BYTE v169[17];
  _DWORD __n[3];
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v6 = (char *)*((_QWORD *)a3 + 23);
  *((_QWORD *)this + 4) = v6;
  v7 = &v6[*((_QWORD *)a3 + 1)];
  *((_QWORD *)this + 5) = v7;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v8, "%s", "   Code at [");
  WTF::PrintStream::printf(v8, "%p", v6);
  WTF::PrintStream::printf(v8, "%s", ", ");
  WTF::PrintStream::printf(v8, "%p", v7);
  WTF::PrintStream::printf(v8, "%s", "):\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v9 = *(_DWORD *)this;
  if (*((_DWORD *)this + 5))
  {
    if (v9 < 4)
      v10 = 0;
    else
      v10 = *(_DWORD *)((v9 & 0xFFFFFFFC) + *((_QWORD *)a3 + 3) - 4);
    v11 = (v9 - v10);
    v12 = *((_QWORD *)a3 + 23);
    v13 = v11 + v12;
    if (v12 > v13 || (v14 = v12 + *((_QWORD *)a3 + 1), v14 < v13))
    {
      __break(0xC471u);
      JUMPOUT(0x198C7098CLL);
    }
    v15 = **((_DWORD **)this + 1);
    *(_QWORD *)&__n[1] = v13;
    if (v15 < 4)
      v16 = 0;
    else
      v16 = *(_DWORD *)((v15 & 0xFFFFFFFC) + *((_QWORD *)a3 + 3) - 4);
    v17 = (v15 - v16) + v12;
    if (v12 > v17 || v14 < v17)
    {
      __break(0xC471u);
      JUMPOUT(0x198C709ACLL);
    }
    v163 = a3;
    JSC::tryToDisassemble((unint64_t *)&__n[1], v17 - v13, *((_QWORD *)this + 4), *((_QWORD *)this + 5), "        ", a2);
    *(_QWORD *)&__n[1] = off_1E3572250;
    v171 = (WTF *)v173;
    v172 = xmmword_199122F80;
    v173[0] = 0;
    v164 = 0;
    v165 = 0;
    if (*((_DWORD *)this + 5))
    {
      v162 = *((_DWORD *)this + 6);
      v26 = 0;
      LODWORD(v27) = 0;
      v28 = 0;
      while (1)
      {
        *(_QWORD *)&v172 = 0;
        *(_BYTE *)v171 = 0;
        if (v28 >= *((unsigned int *)this + 5))
        {
          __break(0xC471u);
          JUMPOUT(0x198C70A70);
        }
        v29 = *(_QWORD *)(*((_QWORD *)this + 1) + 16 * v28 + 8);
        v167 = 0;
        if ((_DWORD)v27 == (_DWORD)v165)
        {
          v30 = (uint64_t *)WTF::Vector<JSC::Wasm::BBQDisassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v164, v27 + 1, (unint64_t)&v167);
          v27 = HIDWORD(v165);
          v31 = v164;
          v32 = *v30;
          *v30 = 0;
          *((_QWORD *)v31 + v27) = v32;
        }
        else
        {
          *((_QWORD *)v26 + v27) = 0;
        }
        HIDWORD(v165) = v27 + 1;
        v33 = v167;
        v167 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 1)
            WTF::fastFree((unint64_t)v33, v19, v20, v21, v22, v23, v24, v25);
          else
            --*(_DWORD *)v33;
        }
        v34 = (WTF::PrintStream *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)&__n[1] + 32))(&__n[1]);
        WTF::PrintStream::printf(v34, "%s", "    ");
        (*(void (**)(_DWORD *))(*(_QWORD *)&__n[1] + 40))(&__n[1]);
        v35 = 0;
        do
        {
          v169[v35-- + 16] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v29 & 0xF];
          v36 = v29 > 0xF;
          v29 >>= 4;
        }
        while (v36);
        if ((uint64_t)(v35 + 17) <= 17)
        {
          v37 = __n + v35;
        }
        else
        {
          memset(__n, 48, v35);
          v37 = __n;
        }
        __n[0] = __n - v37;
        v38 = (__n[0] + 2);
        if (__OFADD__(__n[0], 2) || (WTF::tryFastCompactMalloc((WTF *)(v38 + 20), &v167), (v39 = v167) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198C70A68);
        }
        *(_DWORD *)v167 = 2;
        *((_DWORD *)v39 + 1) = v38;
        *((_WORD *)v39 + 10) = 30768;
        *((_QWORD *)v39 + 1) = (char *)v39 + 20;
        *((_DWORD *)v39 + 4) = 4;
        v40 = (char *)v39 + 22;
        v41 = (char *)__n - __n[0];
        if (__n[0] == 1)
        {
          *v40 = *v41;
        }
        else if (__n[0])
        {
          memcpy(v40, v41, __n[0]);
        }
        *(_DWORD *)v39 = 4;
        if (v38 <= 8)
          v42 = 8;
        else
          v42 = v38;
        WTF::tryFastCompactMalloc((WTF *)(v42 + 20), &v167);
        v43 = v167;
        if (!v167)
        {
          v166 = 0;
          __break(0xC471u);
          JUMPOUT(0x198C70A7CLL);
        }
        v44 = (char *)v167 + 20;
        *(_DWORD *)v167 = 2;
        *((_DWORD *)v43 + 1) = v42;
        *((_QWORD *)v43 + 1) = (char *)v43 + 20;
        *((_DWORD *)v43 + 4) = 4;
        v45 = *((unsigned int *)v39 + 1);
        if (v45 > 7)
        {
          v46 = 0;
        }
        else
        {
          v46 = 8 - v45;
          memset((char *)v43 + 20, 32, 8 - v45);
          v45 = *((unsigned int *)v39 + 1);
        }
        v47 = &v44[v46];
        v48 = (char *)*((_QWORD *)v39 + 1);
        if ((*((_BYTE *)v39 + 16) & 4) != 0)
        {
          if (v45 == 1)
          {
            *v47 = *v48;
          }
          else if (v45)
          {
            memcpy(v47, v48, v45);
          }
        }
        else
        {
          if (v45 < 0x10)
          {
            v118 = &v44[v46];
          }
          else
          {
            v118 = &v47[v45 & 0xFFFFFFF0];
            v119 = &v44[v46];
            do
            {
              v120 = (unsigned __int128)vld2q_s8(v48);
              v48 += 32;
              *(_OWORD *)v119 = v120;
              v119 += 16;
            }
            while (v119 != v118);
          }
          while (v118 != &v47[v45])
          {
            v121 = *v48;
            v48 += 2;
            *v118++ = v121;
          }
        }
        v166 = v43;
        String = (char *)JSC::Wasm::makeString();
        v51 = v50;
        v52 = (WTF::PrintStream *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)&__n[1] + 32))(&__n[1]);
        WTF::PrintStream::printf(v52, "%s", "[");
        WTF::printInternal(v52, (WTF::PrintStream *)&v166, v53, v54, v55, v56, v57, v58, v59, v60);
        v61 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v52 + 32))(v52);
        WTF::StringImpl::utf8ForCharacters("] ", 2uLL, (uint64_t)&v167, v62);
        WTF::printExpectedCStringHelper(v61, "StringView", &v167);
        if (v168 != -1)
          ((void (*)(_BYTE *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v168])(v169, &v167);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v52 + 40))(v52);
        v63 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v52 + 32))(v52);
        if (String)
        {
          v65 = v51 - 1;
          if (!v51)
            v65 = 0;
          WTF::StringImpl::utf8ForCharacters(String, v65, (uint64_t)&v167, v64);
        }
        else
        {
          v66 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v66 = 1;
          *(_QWORD *)(v66 + 8) = 0;
          *(_BYTE *)(v66 + 16) = 0;
          v167 = (WTF *)v66;
          v168 = 0;
        }
        WTF::printExpectedCStringHelper(v63, "StringView", &v167);
        if (v168 != -1)
          ((void (*)(_BYTE *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v168])(v169, &v167);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v52 + 40))(v52);
        WTF::PrintStream::printf(v52, "%s", "\n");
        (*(void (**)(_DWORD *))(*(_QWORD *)&__n[1] + 40))(&__n[1]);
        v74 = v166;
        v166 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
          {
            WTF::StringImpl::~StringImpl(v74, v67, v68, v69, v70, v71, v72, v73);
            WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
          }
          else
          {
            *(_DWORD *)v74 -= 2;
          }
        }
        v75 = *(_DWORD *)v39 - 2;
        if (*(_DWORD *)v39 == 2)
        {
          WTF::StringImpl::~StringImpl(v39, v67, v68, v69, v70, v71, v72, v73);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
          v75 = *(_DWORD *)v39;
        }
        else
        {
          *(_DWORD *)v39 = v75;
        }
        v76 = v75 - 2;
        if (v76)
        {
          *(_DWORD *)v39 = v76;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v39, v67, v68, v69, v70, v71, v72, v73);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        }
        v77 = v28 + 1;
        v78 = *((unsigned int *)this + 5);
        if (v28 + 1 >= v78)
          break;
        v79 = *((_QWORD *)this + 1);
        v80 = *(_DWORD *)(v79 + 16 * v28);
        if (v80 < 4)
          v81 = 0;
        else
          v81 = *(_DWORD *)((v80 & 0xFFFFFFFC) + *((_QWORD *)v163 + 3) - 4);
        v82 = (v80 - v81);
        v83 = *((_QWORD *)v163 + 23);
        v84 = (WTF *)(v82 + v83);
        if (v83 > (unint64_t)v84 || (v85 = v83 + *((_QWORD *)v163 + 1), v85 < (unint64_t)v84))
        {
          __break(0xC471u);
          JUMPOUT(0x198C70918);
        }
        v86 = *(_DWORD *)(v79 + 16 * v77);
        v167 = v84;
        if (v86 < 4)
          v87 = 0;
        else
          v87 = *(_DWORD *)((v86 & 0xFFFFFFFC) + *((_QWORD *)v163 + 3) - 4);
        v88 = (v86 - v87) + v83;
        if (v83 > v88 || v85 < v88)
        {
          __break(0xC471u);
          JUMPOUT(0x198C70938);
        }
        JSC::tryToDisassemble((unint64_t *)&v167, v88 - (_QWORD)v84, *((_QWORD *)this + 4), *((_QWORD *)this + 5), "        ", (WTF::PrintStream *)&__n[1]);
        v89 = v171;
        if (v171)
        {
          v90 = v172;
          if ((unint64_t)v172 >= 0xFFFFFFFFFFFFFFF0)
          {
            __break(0xC471u);
            JUMPOUT(0x198C70A8CLL);
          }
          if ((_QWORD)v172 == -17)
          {
            __break(0xC471u);
            JUMPOUT(0x198C70A94);
          }
          v91 = WTF::fastMalloc((WTF *)(v172 + 17));
          *(_DWORD *)v91 = 1;
          *(_QWORD *)(v91 + 8) = v90;
          memcpy((void *)(v91 + 16), v89, v90);
          *(_BYTE *)(v91 + 16 + v90) = 0;
        }
        else
        {
          v91 = 0;
        }
        LODWORD(v27) = HIDWORD(v165);
        if (!HIDWORD(v165))
        {
          __break(0xC471u);
          JUMPOUT(0x198C70A84);
        }
        v26 = v164;
        v92 = (char *)v164 + 8 * HIDWORD(v165);
        v93 = (_DWORD *)*((_QWORD *)v92 - 1);
        *((_QWORD *)v92 - 1) = v91;
        if (v93)
        {
          if (*v93 == 1)
            WTF::fastFree((unint64_t)v93, v19, v20, v21, v22, v23, v24, v25);
          else
            --*v93;
        }
        ++v28;
        if (v77 >= *((unsigned int *)this + 5))
          goto LABEL_123;
      }
      if (v78 <= v28)
      {
        __break(0xC471u);
        JUMPOUT(0x198C70A9CLL);
      }
      v130 = *(_DWORD *)(*((_QWORD *)this + 1) + 16 * v28);
      if (v130 < 4)
        v131 = 0;
      else
        v131 = *(_DWORD *)((v130 & 0xFFFFFFFC) + *((_QWORD *)v163 + 3) - 4);
      v132 = (v130 - v131);
      v133 = *((_QWORD *)v163 + 23);
      v134 = (WTF *)(v132 + v133);
      if (v133 > (unint64_t)v134 || (v135 = v133 + *((_QWORD *)v163 + 1), v135 < (unint64_t)v134))
      {
        __break(0xC471u);
        JUMPOUT(0x198C70A3CLL);
      }
      v167 = v134;
      if (v162 < 4)
        v136 = 0;
      else
        v136 = *(_DWORD *)((v162 & 0xFFFFFFFC) + *((_QWORD *)v163 + 3) - 4);
      v137 = (v162 - v136) + v133;
      if (v133 > v137 || v135 < v137)
      {
        __break(0xC471u);
        JUMPOUT(0x198C70A5CLL);
      }
      JSC::tryToDisassemble((unint64_t *)&v167, v137 - (_QWORD)v134, *((_QWORD *)this + 4), *((_QWORD *)this + 5), "        ", (WTF::PrintStream *)&__n[1]);
      v138 = v171;
      if (v171)
      {
        v139 = v172;
        if ((unint64_t)v172 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x198C70AACLL);
        }
        if ((_QWORD)v172 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x198C70AB4);
        }
        v140 = WTF::fastMalloc((WTF *)(v172 + 17));
        *(_DWORD *)v140 = 1;
        *(_QWORD *)(v140 + 8) = v139;
        memcpy((void *)(v140 + 16), v138, v139);
        *(_BYTE *)(v140 + 16 + v139) = 0;
      }
      else
      {
        v140 = 0;
      }
      LODWORD(v27) = HIDWORD(v165);
      if (!HIDWORD(v165))
      {
        __break(0xC471u);
        JUMPOUT(0x198C70AA4);
      }
      v26 = v164;
      v141 = (char *)v164 + 8 * HIDWORD(v165);
      v142 = (_DWORD *)*((_QWORD *)v141 - 1);
      *((_QWORD *)v141 - 1) = v140;
      if (v142)
      {
        if (*v142 == 1)
          WTF::fastFree((unint64_t)v142, v19, v20, v21, v22, v23, v24, v25);
        else
          --*v142;
      }
    }
    else
    {
      v26 = 0;
      LODWORD(v27) = 0;
    }
LABEL_123:
    if (v171 != (WTF *)v173)
      WTF::fastFree((unint64_t)v171, v19, v20, v21, v22, v23, v24, v25);
    if ((_DWORD)v27)
    {
      v143 = v27;
      v144 = v26;
      v27 = v27;
      do
      {
        v145 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        v146 = *(_QWORD *)v144;
        v144 = (WTF *)((char *)v144 + 8);
        v147 = (const char *)(v146 + 16);
        if (v146)
          v148 = v147;
        else
          v148 = 0;
        WTF::PrintStream::printf(v145, "%s", v148);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        --v27;
      }
      while (v27);
      v149 = 8 * v143;
      v150 = v26;
      do
      {
        v151 = *(_DWORD **)v150;
        *(_QWORD *)v150 = 0;
        if (v151)
        {
          if (*v151 == 1)
            WTF::fastFree((unint64_t)v151, v19, v20, v21, v22, v23, v24, v25);
          else
            --*v151;
        }
        v150 = (WTF *)((char *)v150 + 8);
        v149 -= 8;
      }
      while (v149);
    }
    if (v26)
      WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
    v152 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v152, "%s", "    (End Of Main Code)\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v153 = *((_DWORD *)this + 6);
    if (v153 < 4)
    {
      v155 = 0;
      v154 = v163;
    }
    else
    {
      v154 = v163;
      v155 = *(_DWORD *)((v153 & 0xFFFFFFFC) + *((_QWORD *)v163 + 3) - 4);
    }
    v156 = (v153 - v155);
    v157 = *((_QWORD *)v154 + 23);
    v125 = v156 + v157;
    if (v157 > v125 || (v158 = v157 + *((_QWORD *)v154 + 1), v158 < v125))
    {
      __break(0xC471u);
      JUMPOUT(0x198C709CCLL);
    }
    v159 = *((_DWORD *)this + 7);
    *(_QWORD *)&__n[1] = v125;
    if (v159 < 4)
      v160 = 0;
    else
      v160 = *(_DWORD *)((v159 & 0xFFFFFFFC) + *((_QWORD *)v154 + 3) - 4);
    v129 = (v159 - v160) + v157;
    if (v157 > v129 || v158 < v129)
    {
      __break(0xC471u);
      JUMPOUT(0x198C709ECLL);
    }
  }
  else
  {
    if (v9 < 4)
      v122 = 0;
    else
      v122 = *(_DWORD *)((v9 & 0xFFFFFFFC) + *((_QWORD *)a3 + 3) - 4);
    v123 = (v9 - v122);
    v124 = *((_QWORD *)a3 + 23);
    v125 = v123 + v124;
    if (v124 > v125 || (v126 = v124 + *((_QWORD *)a3 + 1), v126 < v125))
    {
      __break(0xC471u);
      JUMPOUT(0x198C70A1CLL);
    }
    v127 = *((_DWORD *)this + 7);
    *(_QWORD *)&__n[1] = v125;
    if (v127 < 4)
      v128 = 0;
    else
      v128 = *(_DWORD *)((v127 & 0xFFFFFFFC) + *((_QWORD *)a3 + 3) - 4);
    v129 = (v127 - v128) + v124;
    if (v124 > v129 || v126 < v129)
    {
      __break(0xC471u);
      JUMPOUT(0x198C70604);
    }
  }
  return JSC::tryToDisassemble((unint64_t *)&__n[1], v129 - v125, *((_QWORD *)this + 4), *((_QWORD *)this + 5), "        ", a2);
}

const char *JSC::Wasm::makeString()
{
  const char *result;

  result = "I32Const";
  switch("I32Const")
  {
    case 0u:
      result = "Unreachable";
      break;
    case 1u:
      result = "Nop";
      break;
    case 2u:
      result = "Block";
      break;
    case 3u:
      result = "Loop";
      break;
    case 4u:
      result = "If";
      break;
    case 5u:
      result = "Else";
      break;
    case 6u:
      result = "Try";
      break;
    case 7u:
      result = "Catch";
      break;
    case 8u:
      result = "Throw";
      break;
    case 9u:
      result = "Rethrow";
      break;
    case 0xBu:
      result = "End";
      break;
    case 0xCu:
      result = "Br";
      break;
    case 0xDu:
      result = "BrIf";
      break;
    case 0xEu:
      result = "BrTable";
      break;
    case 0xFu:
      result = "Return";
      break;
    case 0x10u:
      result = "Call";
      break;
    case 0x11u:
      result = "CallIndirect";
      break;
    case 0x12u:
      result = "TailCall";
      break;
    case 0x13u:
      result = "TailCallIndirect";
      break;
    case 0x14u:
      result = "CallRef";
      break;
    case 0x18u:
      result = "Delegate";
      break;
    case 0x19u:
      result = "CatchAll";
      break;
    case 0x1Au:
      result = "Drop";
      break;
    case 0x1Bu:
      result = "Select";
      break;
    case 0x1Cu:
      result = "AnnotatedSelect";
      break;
    case 0x20u:
      result = "GetLocal";
      break;
    case 0x21u:
      result = "SetLocal";
      break;
    case 0x22u:
      result = "TeeLocal";
      break;
    case 0x23u:
      result = "GetGlobal";
      break;
    case 0x24u:
      result = "SetGlobal";
      break;
    case 0x25u:
      result = "TableGet";
      break;
    case 0x26u:
      result = "TableSet";
      break;
    case 0x28u:
      result = "I32Load";
      break;
    case 0x29u:
      result = "I64Load";
      break;
    case 0x2Au:
      result = "F32Load";
      break;
    case 0x2Bu:
      result = "F64Load";
      break;
    case 0x2Cu:
      result = "I32Load8S";
      break;
    case 0x2Du:
      result = "I32Load8U";
      break;
    case 0x2Eu:
      result = "I32Load16S";
      break;
    case 0x2Fu:
      result = "I32Load16U";
      break;
    case 0x30u:
      result = "I64Load8S";
      break;
    case 0x31u:
      result = "I64Load8U";
      break;
    case 0x32u:
      result = "I64Load16S";
      break;
    case 0x33u:
      result = "I64Load16U";
      break;
    case 0x34u:
      result = "I64Load32S";
      break;
    case 0x35u:
      result = "I64Load32U";
      break;
    case 0x36u:
      result = "I32Store";
      break;
    case 0x37u:
      result = "I64Store";
      break;
    case 0x38u:
      result = "F32Store";
      break;
    case 0x39u:
      result = "F64Store";
      break;
    case 0x3Au:
      result = "I32Store8";
      break;
    case 0x3Bu:
      result = "I32Store16";
      break;
    case 0x3Cu:
      result = "I64Store8";
      break;
    case 0x3Du:
      result = "I64Store16";
      break;
    case 0x3Eu:
      result = "I64Store32";
      break;
    case 0x3Fu:
      result = "CurrentMemory";
      break;
    case 0x40u:
      result = "GrowMemory";
      break;
    case 0x41u:
      return result;
    case 0x42u:
      result = "I64Const";
      break;
    case 0x43u:
      result = "F32Const";
      break;
    case 0x44u:
      result = "F64Const";
      break;
    case 0x45u:
      result = "I32Eqz";
      break;
    case 0x46u:
      result = "I32Eq";
      break;
    case 0x47u:
      result = "I32Ne";
      break;
    case 0x48u:
      result = "I32LtS";
      break;
    case 0x49u:
      result = "I32LtU";
      break;
    case 0x4Au:
      result = "I32GtS";
      break;
    case 0x4Bu:
      result = "I32GtU";
      break;
    case 0x4Cu:
      result = "I32LeS";
      break;
    case 0x4Du:
      result = "I32LeU";
      break;
    case 0x4Eu:
      result = "I32GeS";
      break;
    case 0x4Fu:
      result = "I32GeU";
      break;
    case 0x50u:
      result = "I64Eqz";
      break;
    case 0x51u:
      result = "I64Eq";
      break;
    case 0x52u:
      result = "I64Ne";
      break;
    case 0x53u:
      result = "I64LtS";
      break;
    case 0x54u:
      result = "I64LtU";
      break;
    case 0x55u:
      result = "I64GtS";
      break;
    case 0x56u:
      result = "I64GtU";
      break;
    case 0x57u:
      result = "I64LeS";
      break;
    case 0x58u:
      result = "I64LeU";
      break;
    case 0x59u:
      result = "I64GeS";
      break;
    case 0x5Au:
      result = "I64GeU";
      break;
    case 0x5Bu:
      result = "F32Eq";
      break;
    case 0x5Cu:
      result = "F32Ne";
      break;
    case 0x5Du:
      result = "F32Lt";
      break;
    case 0x5Eu:
      result = "F32Gt";
      break;
    case 0x5Fu:
      result = "F32Le";
      break;
    case 0x60u:
      result = "F32Ge";
      break;
    case 0x61u:
      result = "F64Eq";
      break;
    case 0x62u:
      result = "F64Ne";
      break;
    case 0x63u:
      result = "F64Lt";
      break;
    case 0x64u:
      result = "F64Gt";
      break;
    case 0x65u:
      result = "F64Le";
      break;
    case 0x66u:
      result = "F64Ge";
      break;
    case 0x67u:
      result = "I32Clz";
      break;
    case 0x68u:
      result = "I32Ctz";
      break;
    case 0x69u:
      result = "I32Popcnt";
      break;
    case 0x6Au:
      result = "I32Add";
      break;
    case 0x6Bu:
      result = "I32Sub";
      break;
    case 0x6Cu:
      result = "I32Mul";
      break;
    case 0x6Du:
      result = "I32DivS";
      break;
    case 0x6Eu:
      result = "I32DivU";
      break;
    case 0x6Fu:
      result = "I32RemS";
      break;
    case 0x70u:
      result = "I32RemU";
      break;
    case 0x71u:
      result = "I32And";
      break;
    case 0x72u:
      result = "I32Or";
      break;
    case 0x73u:
      result = "I32Xor";
      break;
    case 0x74u:
      result = "I32Shl";
      break;
    case 0x75u:
      result = "I32ShrS";
      break;
    case 0x76u:
      result = "I32ShrU";
      break;
    case 0x77u:
      result = "I32Rotl";
      break;
    case 0x78u:
      result = "I32Rotr";
      break;
    case 0x79u:
      result = "I64Clz";
      break;
    case 0x7Au:
      result = "I64Ctz";
      break;
    case 0x7Bu:
      result = "I64Popcnt";
      break;
    case 0x7Cu:
      result = "I64Add";
      break;
    case 0x7Du:
      result = "I64Sub";
      break;
    case 0x7Eu:
      result = "I64Mul";
      break;
    case 0x7Fu:
      result = "I64DivS";
      break;
    case 0x80u:
      result = "I64DivU";
      break;
    case 0x81u:
      result = "I64RemS";
      break;
    case 0x82u:
      result = "I64RemU";
      break;
    case 0x83u:
      result = "I64And";
      break;
    case 0x84u:
      result = "I64Or";
      break;
    case 0x85u:
      result = "I64Xor";
      break;
    case 0x86u:
      result = "I64Shl";
      break;
    case 0x87u:
      result = "I64ShrS";
      break;
    case 0x88u:
      result = "I64ShrU";
      break;
    case 0x89u:
      result = "I64Rotl";
      break;
    case 0x8Au:
      result = "I64Rotr";
      break;
    case 0x8Bu:
      result = "F32Abs";
      break;
    case 0x8Cu:
      result = "F32Neg";
      break;
    case 0x8Du:
      result = "F32Ceil";
      break;
    case 0x8Eu:
      result = "F32Floor";
      break;
    case 0x8Fu:
      result = "F32Trunc";
      break;
    case 0x90u:
      result = "F32Nearest";
      break;
    case 0x91u:
      result = "F32Sqrt";
      break;
    case 0x92u:
      result = "F32Add";
      break;
    case 0x93u:
      result = "F32Sub";
      break;
    case 0x94u:
      result = "F32Mul";
      break;
    case 0x95u:
      result = "F32Div";
      break;
    case 0x96u:
      result = "F32Min";
      break;
    case 0x97u:
      result = "F32Max";
      break;
    case 0x98u:
      result = "F32Copysign";
      break;
    case 0x99u:
      result = "F64Abs";
      break;
    case 0x9Au:
      result = "F64Neg";
      break;
    case 0x9Bu:
      result = "F64Ceil";
      break;
    case 0x9Cu:
      result = "F64Floor";
      break;
    case 0x9Du:
      result = "F64Trunc";
      break;
    case 0x9Eu:
      result = "F64Nearest";
      break;
    case 0x9Fu:
      result = "F64Sqrt";
      break;
    case 0xA0u:
      result = "F64Add";
      break;
    case 0xA1u:
      result = "F64Sub";
      break;
    case 0xA2u:
      result = "F64Mul";
      break;
    case 0xA3u:
      result = "F64Div";
      break;
    case 0xA4u:
      result = "F64Min";
      break;
    case 0xA5u:
      result = "F64Max";
      break;
    case 0xA6u:
      result = "F64Copysign";
      break;
    case 0xA7u:
      result = "I32WrapI64";
      break;
    case 0xA8u:
      result = "I32TruncSF32";
      break;
    case 0xA9u:
      result = "I32TruncUF32";
      break;
    case 0xAAu:
      result = "I32TruncSF64";
      break;
    case 0xABu:
      result = "I32TruncUF64";
      break;
    case 0xACu:
      result = "I64ExtendSI32";
      break;
    case 0xADu:
      result = "I64ExtendUI32";
      break;
    case 0xAEu:
      result = "I64TruncSF32";
      break;
    case 0xAFu:
      result = "I64TruncUF32";
      break;
    case 0xB0u:
      result = "I64TruncSF64";
      break;
    case 0xB1u:
      result = "I64TruncUF64";
      break;
    case 0xB2u:
      result = "F32ConvertSI32";
      break;
    case 0xB3u:
      result = "F32ConvertUI32";
      break;
    case 0xB4u:
      result = "F32ConvertSI64";
      break;
    case 0xB5u:
      result = "F32ConvertUI64";
      break;
    case 0xB6u:
      result = "F32DemoteF64";
      break;
    case 0xB7u:
      result = "F64ConvertSI32";
      break;
    case 0xB8u:
      result = "F64ConvertUI32";
      break;
    case 0xB9u:
      result = "F64ConvertSI64";
      break;
    case 0xBAu:
      result = "F64ConvertUI64";
      break;
    case 0xBBu:
      result = "F64PromoteF32";
      break;
    case 0xBCu:
      result = "I32ReinterpretF32";
      break;
    case 0xBDu:
      result = "I64ReinterpretF64";
      break;
    case 0xBEu:
      result = "F32ReinterpretI32";
      break;
    case 0xBFu:
      result = "F64ReinterpretI64";
      break;
    case 0xC0u:
      result = "I32Extend8S";
      break;
    case 0xC1u:
      result = "I32Extend16S";
      break;
    case 0xC2u:
      result = "I64Extend8S";
      break;
    case 0xC3u:
      result = "I64Extend16S";
      break;
    case 0xC4u:
      result = "I64Extend32S";
      break;
    case 0xD0u:
      result = "RefNull";
      break;
    case 0xD1u:
      result = "RefIsNull";
      break;
    case 0xD2u:
      result = "RefFunc";
      break;
    case 0xD3u:
      result = "RefEq";
      break;
    case 0xD4u:
      result = "RefAsNonNull";
      break;
    case 0xD5u:
      result = "BrOnNull";
      break;
    case 0xD6u:
      result = "BrOnNonNull";
      break;
    case 0xFBu:
      result = "ExtGC";
      break;
    case 0xFCu:
      result = "Ext1";
      break;
    case 0xFDu:
      result = "ExtSIMD";
      break;
    case 0xFEu:
      result = "ExtAtomic";
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198C714A0);
  }
  return result;
}

{
  const char *result;

  result = "I32AtomicLoad";
  switch("I32AtomicLoad")
  {
    case 0u:
      result = "MemoryAtomicNotify";
      break;
    case 1u:
      result = "MemoryAtomicWait32";
      break;
    case 2u:
      result = "MemoryAtomicWait64";
      break;
    case 3u:
      result = "AtomicFence";
      break;
    case 0x10u:
      return result;
    case 0x11u:
      result = "I64AtomicLoad";
      break;
    case 0x12u:
      result = "I32AtomicLoad8U";
      break;
    case 0x13u:
      result = "I32AtomicLoad16U";
      break;
    case 0x14u:
      result = "I64AtomicLoad8U";
      break;
    case 0x15u:
      result = "I64AtomicLoad16U";
      break;
    case 0x16u:
      result = "I64AtomicLoad32U";
      break;
    case 0x17u:
      result = "I32AtomicStore";
      break;
    case 0x18u:
      result = "I64AtomicStore";
      break;
    case 0x19u:
      result = "I32AtomicStore8U";
      break;
    case 0x1Au:
      result = "I32AtomicStore16U";
      break;
    case 0x1Bu:
      result = "I64AtomicStore8U";
      break;
    case 0x1Cu:
      result = "I64AtomicStore16U";
      break;
    case 0x1Du:
      result = "I64AtomicStore32U";
      break;
    case 0x1Eu:
      result = "I32AtomicRmwAdd";
      break;
    case 0x1Fu:
      result = "I64AtomicRmwAdd";
      break;
    case 0x20u:
      result = "I32AtomicRmw8AddU";
      break;
    case 0x21u:
      result = "I32AtomicRmw16AddU";
      break;
    case 0x22u:
      result = "I64AtomicRmw8AddU";
      break;
    case 0x23u:
      result = "I64AtomicRmw16AddU";
      break;
    case 0x24u:
      result = "I64AtomicRmw32AddU";
      break;
    case 0x25u:
      result = "I32AtomicRmwSub";
      break;
    case 0x26u:
      result = "I64AtomicRmwSub";
      break;
    case 0x27u:
      result = "I32AtomicRmw8SubU";
      break;
    case 0x28u:
      result = "I32AtomicRmw16SubU";
      break;
    case 0x29u:
      result = "I64AtomicRmw8SubU";
      break;
    case 0x2Au:
      result = "I64AtomicRmw16SubU";
      break;
    case 0x2Bu:
      result = "I64AtomicRmw32SubU";
      break;
    case 0x2Cu:
      result = "I32AtomicRmwAnd";
      break;
    case 0x2Du:
      result = "I64AtomicRmwAnd";
      break;
    case 0x2Eu:
      result = "I32AtomicRmw8AndU";
      break;
    case 0x2Fu:
      result = "I32AtomicRmw16AndU";
      break;
    case 0x30u:
      result = "I64AtomicRmw8AndU";
      break;
    case 0x31u:
      result = "I64AtomicRmw16AndU";
      break;
    case 0x32u:
      result = "I64AtomicRmw32AndU";
      break;
    case 0x33u:
      result = "I32AtomicRmwOr";
      break;
    case 0x34u:
      result = "I64AtomicRmwOr";
      break;
    case 0x35u:
      result = "I32AtomicRmw8OrU";
      break;
    case 0x36u:
      result = "I32AtomicRmw16OrU";
      break;
    case 0x37u:
      result = "I64AtomicRmw8OrU";
      break;
    case 0x38u:
      result = "I64AtomicRmw16OrU";
      break;
    case 0x39u:
      result = "I64AtomicRmw32OrU";
      break;
    case 0x3Au:
      result = "I32AtomicRmwXor";
      break;
    case 0x3Bu:
      result = "I64AtomicRmwXor";
      break;
    case 0x3Cu:
      result = "I32AtomicRmw8XorU";
      break;
    case 0x3Du:
      result = "I32AtomicRmw16XorU";
      break;
    case 0x3Eu:
      result = "I64AtomicRmw8XorU";
      break;
    case 0x3Fu:
      result = "I64AtomicRmw16XorU";
      break;
    case 0x40u:
      result = "I64AtomicRmw32XorU";
      break;
    case 0x41u:
      result = "I32AtomicRmwXchg";
      break;
    case 0x42u:
      result = "I64AtomicRmwXchg";
      break;
    case 0x43u:
      result = "I32AtomicRmw8XchgU";
      break;
    case 0x44u:
      result = "I32AtomicRmw16XchgU";
      break;
    case 0x45u:
      result = "I64AtomicRmw8XchgU";
      break;
    case 0x46u:
      result = "I64AtomicRmw16XchgU";
      break;
    case 0x47u:
      result = "I64AtomicRmw32XchgU";
      break;
    case 0x48u:
      result = "I32AtomicRmwCmpxchg";
      break;
    case 0x49u:
      result = "I64AtomicRmwCmpxchg";
      break;
    case 0x4Au:
      result = "I32AtomicRmw8CmpxchgU";
      break;
    case 0x4Bu:
      result = "I32AtomicRmw16CmpxchgU";
      break;
    case 0x4Cu:
      result = "I64AtomicRmw8CmpxchgU";
      break;
    case 0x4Du:
      result = "I64AtomicRmw16CmpxchgU";
      break;
    case 0x4Eu:
      result = "I64AtomicRmw32CmpxchgU";
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198F15080);
  }
  return result;
}

uint64_t *JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(JSC::Wasm::BBQPlan *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::$_0 &&>>);
  }
  return &JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist;
}

uint64_t JSC::Wasm::BBQPlan::prepareImpl(JSC::Wasm::BBQPlan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  const void *v48;
  void *v49;
  uint64_t v50;
  JSC::Wasm::InternalFunction **v51;
  uint64_t v52;
  JSC::Wasm::InternalFunction *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  const void *v68;
  void *v69;
  uint64_t v70;
  JSC::LinkBuffer **v71;
  uint64_t v72;
  JSC::LinkBuffer *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  JSC::Wasm::CompilationContext *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  const void *v130;
  void *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unsigned __int8 *v159;
  WTF::AtomStringImpl *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  int v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  const char *v184;
  int v185;
  unint64_t v186;
  void *__dst;
  int v188;

  v9 = *((_QWORD *)this + 2);
  v10 = *(unsigned int *)(v9 + 132);
  if (*((_DWORD *)this + 94) >= v10)
    goto LABEL_6;
  if (v10 >> 29
    || (v11 = (const void *)*((_QWORD *)this + 46),
        v12 = *((unsigned int *)this + 95),
        WTF::tryFastMalloc((WTF *)(8 * v10), &__dst),
        (v13 = __dst) == 0))
  {
    v159 = (unsigned __int8 *)this + 13;
    if (__ldaxr((unsigned __int8 *)this + 13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v159))
    {
      goto LABEL_188;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 13);
LABEL_188:
    v186 = v10;
    __dst = "Failed allocating enough space for ";
    v188 = 35;
    v184 = " WebAssembly functions";
    v185 = 22;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&__dst, &v186, (uint64_t)&v184, (int **)&v183);
    v172 = v183;
    if (!v183)
      goto LABEL_222;
LABEL_205:
    v173 = *((_QWORD *)this + 7);
    v183 = 0;
    if (v173
      || (*((_QWORD *)this + 7) = v172,
          *((_BYTE *)this + 64) = 0,
          (*(void (**)(JSC::Wasm::BBQPlan *))(*(_QWORD *)this + 48))(this),
          v172 = v183,
          v183 = 0,
          v172))
    {
      if (*(_DWORD *)v172 == 2)
      {
        WTF::StringImpl::~StringImpl(v172, v165, v166, v167, v168, v169, v170, v171);
        WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
      }
      else
      {
        *(_DWORD *)v172 -= 2;
      }
    }
    v174 = __ldxr(v159);
    if (v174 == 1)
    {
      if (!__stlxr(0, v159))
        return 0;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v159, 0, v166, v167, v168, v169, v170, v171);
    return 0;
  }
  *((_DWORD *)this + 94) = v10;
  *((_QWORD *)this + 46) = v13;
  memcpy(v13, v11, 8 * v12);
  if (v11)
  {
    if (*((const void **)this + 46) == v11)
    {
      *((_QWORD *)this + 46) = 0;
      *((_DWORD *)this + 94) = 0;
    }
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  LODWORD(v10) = *(_DWORD *)(v9 + 132);
LABEL_6:
  if (*((_DWORD *)this + 98) >= v10)
    goto LABEL_10;
  if (v10 >> 29
    || (v14 = (const void *)*((_QWORD *)this + 48),
        v15 = *((unsigned int *)this + 99),
        WTF::tryFastMalloc((WTF *)(8 * v10), &__dst),
        (v16 = __dst) == 0))
  {
    v159 = (unsigned __int8 *)this + 13;
    if (__ldaxr((unsigned __int8 *)this + 13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v159))
    {
      goto LABEL_192;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 13);
LABEL_192:
    v186 = v10;
    __dst = "Failed allocating enough space for ";
    v188 = 35;
    v184 = " compilation contexts";
    v185 = 21;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&__dst, &v186, (uint64_t)&v184, (int **)&v183);
    v172 = v183;
    if (!v183)
    {
      __break(0xC471u);
      JUMPOUT(0x198C72418);
    }
    goto LABEL_205;
  }
  *((_DWORD *)this + 98) = v10;
  *((_QWORD *)this + 48) = v16;
  memcpy(v16, v14, 8 * v15);
  if (v14)
  {
    if (*((const void **)this + 48) == v14)
    {
      *((_QWORD *)this + 48) = 0;
      *((_DWORD *)this + 98) = 0;
    }
    WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_10:
  v17 = *(unsigned int *)(v9 + 132);
  if (*((_DWORD *)this + 108) >= v17)
    goto LABEL_18;
  if (v17 > 0x38E38E3
    || (v18 = *((_QWORD *)this + 53),
        v19 = *((_DWORD *)this + 109),
        WTF::tryFastMalloc((WTF *)(72 * v17), &__dst),
        (v20 = __dst) == 0))
  {
    v159 = (unsigned __int8 *)this + 13;
    if (__ldaxr((unsigned __int8 *)this + 13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v159))
    {
      goto LABEL_196;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 13);
LABEL_196:
    v186 = v17;
    __dst = "Failed allocating enough space for ";
    v188 = 35;
    v184 = " compilation contexts";
    v185 = 21;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&__dst, &v186, (uint64_t)&v184, (int **)&v183);
    v172 = v183;
    if (!v183)
    {
      __break(0xC471u);
      JUMPOUT(0x198C72478);
    }
    goto LABEL_205;
  }
  *((_DWORD *)this + 108) = 72 * (int)v17 / 0x48u;
  *((_QWORD *)this + 53) = v20;
  if (v19)
  {
    v21 = v18;
    do
    {
      v22 = *(_QWORD *)v21;
      *(_QWORD *)v21 = 0;
      *v20 = v22;
      v23 = *(_QWORD *)(v21 + 8);
      *(_QWORD *)(v21 + 8) = 0;
      v20[1] = v23;
      v24 = *(_QWORD *)(v21 + 16);
      *(_QWORD *)(v21 + 16) = 0;
      v20[2] = v24;
      v25 = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v21 + 24) = 0;
      v20[3] = v25;
      v26 = *(_QWORD *)(v21 + 32);
      *(_QWORD *)(v21 + 32) = 0;
      v20[4] = v26;
      v27 = *(_QWORD *)(v21 + 40);
      *(_QWORD *)(v21 + 40) = 0;
      v20[5] = v27;
      v28 = *(_QWORD *)(v21 + 48);
      *(_QWORD *)(v21 + 48) = 0;
      v20[7] = 0;
      v20[8] = 0;
      v20[6] = v28;
      v29 = *(_QWORD *)(v21 + 56);
      *(_QWORD *)(v21 + 56) = 0;
      v20[7] = v29;
      LODWORD(v29) = *(_DWORD *)(v21 + 64);
      *(_DWORD *)(v21 + 64) = 0;
      *((_DWORD *)v20 + 16) = v29;
      LODWORD(v29) = *(_DWORD *)(v21 + 68);
      *(_DWORD *)(v21 + 68) = 0;
      *((_DWORD *)v20 + 17) = v29;
      JSC::Wasm::CompilationContext::~CompilationContext((JSC::Wasm::CompilationContext *)v21, a2, a3, a4, a5, a6, a7, a8);
      v21 = v30 + 72;
      v20 += 9;
    }
    while (v21 != v18 + 72 * v19);
  }
  if (v18)
  {
    if (*((_QWORD *)this + 53) == v18)
    {
      *((_QWORD *)this + 53) = 0;
      *((_DWORD *)this + 108) = 0;
    }
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
  LODWORD(v17) = *(_DWORD *)(v9 + 132);
LABEL_18:
  if (*((_DWORD *)this + 112) >= v17)
    goto LABEL_22;
  if (v17 >> 29
    || (v31 = (const void *)*((_QWORD *)this + 55),
        v32 = *((unsigned int *)this + 113),
        WTF::tryFastMalloc((WTF *)(8 * v17), &__dst),
        (v33 = __dst) == 0))
  {
    v159 = (unsigned __int8 *)this + 13;
    if (__ldaxr((unsigned __int8 *)this + 13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v159))
    {
      goto LABEL_200;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 13);
LABEL_200:
    v186 = v17;
    __dst = "Failed allocating enough space for ";
    v188 = 35;
    v184 = " BBQ callees";
    v185 = 12;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&__dst, &v186, (uint64_t)&v184, (int **)&v183);
    v172 = v183;
    if (!v183)
    {
      __break(0xC471u);
      JUMPOUT(0x198C724D8);
    }
    goto LABEL_205;
  }
  *((_DWORD *)this + 112) = v17;
  *((_QWORD *)this + 55) = v33;
  memcpy(v33, v31, 8 * v32);
  if (v31)
  {
    if (*((const void **)this + 55) == v31)
    {
      *((_QWORD *)this + 55) = 0;
      *((_DWORD *)this + 112) = 0;
    }
    WTF::fastFree((unint64_t)v31, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_22:
  v34 = *(unsigned int *)(v9 + 132);
  if (*((_DWORD *)this + 116) < v34)
  {
    if (!(v34 >> 28))
    {
      v35 = *((_QWORD *)this + 57);
      v36 = *((unsigned int *)this + 117);
      WTF::tryFastMalloc((WTF *)(16 * v34), &__dst);
      v37 = __dst;
      if (__dst)
      {
        *((_DWORD *)this + 116) = v34;
        *((_QWORD *)this + 57) = v37;
        if ((_DWORD)v36)
        {
          v38 = 16 * v36;
          v39 = (_DWORD *)(v35 + 8);
          do
          {
            *v37 = 0;
            v37[1] = 0;
            v40 = *((_QWORD *)v39 - 1);
            *((_QWORD *)v39 - 1) = 0;
            *v37 = v40;
            LODWORD(v40) = *v39;
            *v39 = 0;
            *((_DWORD *)v37 + 2) = v40;
            LODWORD(v40) = v39[1];
            v39[1] = 0;
            *((_DWORD *)v37 + 3) = v40;
            v41 = *((_QWORD *)v39 - 1);
            if (v41)
            {
              *((_QWORD *)v39 - 1) = 0;
              *v39 = 0;
              WTF::fastFree(v41, a2, a3, a4, a5, a6, a7, a8);
            }
            v39 += 4;
            v37 += 2;
            v38 -= 16;
          }
          while (v38);
        }
        if (v35)
        {
          if (*((_QWORD *)this + 57) == v35)
          {
            *((_QWORD *)this + 57) = 0;
            *((_DWORD *)this + 116) = 0;
          }
          WTF::fastFree(v35, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_34;
      }
    }
    v159 = (unsigned __int8 *)this + 13;
    if (__ldaxr((unsigned __int8 *)this + 13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v159))
    {
      goto LABEL_204;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 13);
LABEL_204:
    v186 = v34;
    __dst = "Failed allocating enough space for ";
    v188 = 35;
    v184 = " loop entrypoints";
    v185 = 17;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&__dst, &v186, (uint64_t)&v184, (int **)&v183);
    v172 = v183;
    if (v183)
      goto LABEL_205;
LABEL_222:
    __break(0xC471u);
    JUMPOUT(0x198C723B8);
  }
LABEL_34:
  v42 = *(unsigned int *)(v9 + 132);
  v43 = *((unsigned int *)this + 95);
  if (v43 >= v42)
  {
    if ((_DWORD)v43 != (_DWORD)v42)
    {
      v51 = (JSC::Wasm::InternalFunction **)(*((_QWORD *)this + 46) + 8 * v42);
      v52 = 8 * v43 - 8 * v42;
      do
      {
        v53 = *v51;
        *v51 = 0;
        if (v53)
        {
          JSC::Wasm::InternalFunction::~InternalFunction(v53, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        }
        ++v51;
        v52 -= 8;
      }
      while (v52);
    }
  }
  else
  {
    v44 = *((unsigned int *)this + 94);
    if (v44 < v42)
    {
      v45 = v44 + (v44 >> 2);
      if (v45 >= 0x10)
        v46 = v45 + 1;
      else
        v46 = 16;
      if (v46 <= v42)
        v47 = *(unsigned int *)(v9 + 132);
      else
        v47 = v46;
      if (v47 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198C725B4);
      }
      v48 = (const void *)*((_QWORD *)this + 46);
      v49 = (void *)WTF::fastMalloc((WTF *)(8 * v47));
      *((_DWORD *)this + 94) = v47;
      *((_QWORD *)this + 46) = v49;
      memcpy(v49, v48, 8 * v43);
      if (v48)
      {
        if (*((const void **)this + 46) == v48)
        {
          *((_QWORD *)this + 46) = 0;
          *((_DWORD *)this + 94) = 0;
        }
        WTF::fastFree((unint64_t)v48, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    v50 = *((_QWORD *)this + 46);
    if (v50)
      bzero((void *)(v50 + 8 * *((unsigned int *)this + 95)), 8 * v42 - 8 * *((unsigned int *)this + 95));
  }
  *((_DWORD *)this + 95) = v42;
  v62 = *(unsigned int *)(v9 + 132);
  v63 = *((unsigned int *)this + 99);
  if (v63 >= v62)
  {
    if ((_DWORD)v63 != (_DWORD)v62)
    {
      v71 = (JSC::LinkBuffer **)(*((_QWORD *)this + 48) + 8 * v62);
      v72 = 8 * v63 - 8 * v62;
      do
      {
        v73 = *v71;
        *v71 = 0;
        if (v73)
        {
          JSC::LinkBuffer::~LinkBuffer(v73, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        }
        ++v71;
        v72 -= 8;
      }
      while (v72);
    }
  }
  else
  {
    v64 = *((unsigned int *)this + 98);
    if (v64 < v62)
    {
      v65 = v64 + (v64 >> 2);
      if (v65 >= 0x10)
        v66 = v65 + 1;
      else
        v66 = 16;
      if (v66 <= v62)
        v67 = *(unsigned int *)(v9 + 132);
      else
        v67 = v66;
      if (v67 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198C725BCLL);
      }
      v68 = (const void *)*((_QWORD *)this + 48);
      v69 = (void *)WTF::fastMalloc((WTF *)(8 * v67));
      *((_DWORD *)this + 98) = v67;
      *((_QWORD *)this + 48) = v69;
      memcpy(v69, v68, 8 * v63);
      if (v68)
      {
        if (*((const void **)this + 48) == v68)
        {
          *((_QWORD *)this + 48) = 0;
          *((_DWORD *)this + 98) = 0;
        }
        WTF::fastFree((unint64_t)v68, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    v70 = *((_QWORD *)this + 48);
    if (v70)
      bzero((void *)(v70 + 8 * *((unsigned int *)this + 99)), 8 * v62 - 8 * *((unsigned int *)this + 99));
  }
  *((_DWORD *)this + 99) = v62;
  v82 = *(unsigned int *)(v9 + 132);
  v83 = *((unsigned int *)this + 103);
  if (v83 >= v82)
  {
    if ((_DWORD)v83 != (_DWORD)v82)
    {
      v97 = *((_QWORD *)this + 50) + 16 * v82;
      v98 = 16 * v83 - 16 * v82;
      do
      {
        v99 = *(_QWORD *)v97;
        if (*(_QWORD *)v97)
        {
          *(_QWORD *)v97 = 0;
          *(_DWORD *)(v97 + 8) = 0;
          WTF::fastFree(v99, a2, a3, a4, a5, a6, a7, a8);
        }
        v97 += 16;
        v98 -= 16;
      }
      while (v98);
    }
  }
  else
  {
    v84 = *((unsigned int *)this + 102);
    if (v84 < v82)
    {
      v85 = v84 + (v84 >> 2);
      if (v85 >= 0x10)
        v86 = v85 + 1;
      else
        v86 = 16;
      if (v86 <= v82)
        v87 = *(unsigned int *)(v9 + 132);
      else
        v87 = v86;
      if (v87 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x198C725C4);
      }
      v88 = *((_QWORD *)this + 50);
      v89 = WTF::fastMalloc((WTF *)(16 * v87));
      *((_DWORD *)this + 102) = v87;
      *((_QWORD *)this + 50) = v89;
      if ((_DWORD)v83)
      {
        v90 = v89;
        v91 = 16 * v83;
        v92 = (_DWORD *)(v88 + 8);
        do
        {
          *(_QWORD *)v90 = 0;
          *(_QWORD *)(v90 + 8) = 0;
          v93 = *((_QWORD *)v92 - 1);
          *((_QWORD *)v92 - 1) = 0;
          *(_QWORD *)v90 = v93;
          LODWORD(v93) = *v92;
          *v92 = 0;
          *(_DWORD *)(v90 + 8) = v93;
          LODWORD(v93) = v92[1];
          v92[1] = 0;
          *(_DWORD *)(v90 + 12) = v93;
          v94 = *((_QWORD *)v92 - 1);
          if (v94)
          {
            *((_QWORD *)v92 - 1) = 0;
            *v92 = 0;
            WTF::fastFree(v94, a2, a3, a4, a5, a6, a7, a8);
          }
          v92 += 4;
          v90 += 16;
          v91 -= 16;
        }
        while (v91);
      }
      if (v88)
      {
        if (*((_QWORD *)this + 50) == v88)
        {
          *((_QWORD *)this + 50) = 0;
          *((_DWORD *)this + 102) = 0;
        }
        WTF::fastFree(v88, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    v95 = *((_QWORD *)this + 50);
    if (v95)
    {
      v96 = *((unsigned int *)this + 103);
      if ((_DWORD)v96 != (_DWORD)v82)
        bzero((void *)(v95 + 16 * v96), (16 * v82 - 16 * v96) & 0xFFFFFFFFFFFFFFF0);
    }
  }
  *((_DWORD *)this + 103) = v82;
  v100 = *(unsigned int *)(v9 + 132);
  v101 = *((_DWORD *)this + 109);
  if (v101 >= v100)
  {
    if (v101 != (_DWORD)v100)
    {
      v121 = (JSC::Wasm::CompilationContext *)(*((_QWORD *)this + 53) + 72 * v100);
      v122 = 72 * v101 - 72 * v100;
      do
      {
        JSC::Wasm::CompilationContext::~CompilationContext(v121, a2, a3, a4, a5, a6, a7, a8);
        v121 = (JSC::Wasm::CompilationContext *)(v123 + 72);
        v122 -= 72;
      }
      while (v122);
    }
  }
  else
  {
    v102 = *((unsigned int *)this + 108);
    if (v102 < v100)
    {
      v103 = v102 + (v102 >> 2);
      if (v103 >= 0x10)
        v104 = v103 + 1;
      else
        v104 = 16;
      if (v104 <= v100)
        v104 = *(unsigned int *)(v9 + 132);
      if (v104 >= 0x38E38E4)
      {
        __break(0xC471u);
        JUMPOUT(0x198C725CCLL);
      }
      v105 = *((_QWORD *)this + 53);
      v106 = 72 * v104;
      v107 = WTF::fastMalloc((WTF *)(72 * v104));
      *((_DWORD *)this + 108) = (v106 & 0xFFFFFFF8) / 0x48;
      *((_QWORD *)this + 53) = v107;
      if (v101)
      {
        v108 = v107;
        v109 = v105;
        do
        {
          v110 = *(_QWORD *)v109;
          *(_QWORD *)v109 = 0;
          *(_QWORD *)v108 = v110;
          v111 = *(_QWORD *)(v109 + 8);
          *(_QWORD *)(v109 + 8) = 0;
          *(_QWORD *)(v108 + 8) = v111;
          v112 = *(_QWORD *)(v109 + 16);
          *(_QWORD *)(v109 + 16) = 0;
          *(_QWORD *)(v108 + 16) = v112;
          v113 = *(_QWORD *)(v109 + 24);
          *(_QWORD *)(v109 + 24) = 0;
          *(_QWORD *)(v108 + 24) = v113;
          v114 = *(_QWORD *)(v109 + 32);
          *(_QWORD *)(v109 + 32) = 0;
          *(_QWORD *)(v108 + 32) = v114;
          v115 = *(_QWORD *)(v109 + 40);
          *(_QWORD *)(v109 + 40) = 0;
          *(_QWORD *)(v108 + 40) = v115;
          v116 = *(_QWORD *)(v109 + 48);
          *(_QWORD *)(v109 + 48) = 0;
          *(_QWORD *)(v108 + 56) = 0;
          *(_QWORD *)(v108 + 64) = 0;
          *(_QWORD *)(v108 + 48) = v116;
          v117 = *(_QWORD *)(v109 + 56);
          *(_QWORD *)(v109 + 56) = 0;
          *(_QWORD *)(v108 + 56) = v117;
          LODWORD(v117) = *(_DWORD *)(v109 + 64);
          *(_DWORD *)(v109 + 64) = 0;
          *(_DWORD *)(v108 + 64) = v117;
          LODWORD(v117) = *(_DWORD *)(v109 + 68);
          *(_DWORD *)(v109 + 68) = 0;
          *(_DWORD *)(v108 + 68) = v117;
          JSC::Wasm::CompilationContext::~CompilationContext((JSC::Wasm::CompilationContext *)v109, a2, a3, a4, a5, a6, a7, a8);
          v109 = v118 + 72;
          v108 += 72;
        }
        while (v109 != v105 + 72 * v101);
      }
      if (v105)
      {
        if (*((_QWORD *)this + 53) == v105)
        {
          *((_QWORD *)this + 53) = 0;
          *((_DWORD *)this + 108) = 0;
        }
        WTF::fastFree(v105, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    v119 = *((_QWORD *)this + 53);
    if (v119)
    {
      v120 = *((_DWORD *)this + 109);
      if (v120 != (_DWORD)v100)
        bzero((void *)(v119 + 72 * v120), 72 * ((72 * v100 - 72 * (unint64_t)v120 - 72) / 0x48) + 72);
    }
  }
  *((_DWORD *)this + 109) = v100;
  v124 = *(unsigned int *)(v9 + 132);
  v125 = *((unsigned int *)this + 113);
  if (v125 >= v124)
  {
    WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct((unsigned int **)(*((_QWORD *)this + 55) + 8 * v124), *((_QWORD *)this + 55) + 8 * v125, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v126 = *((unsigned int *)this + 112);
    if (v126 < v124)
    {
      v127 = v126 + (v126 >> 2);
      if (v127 >= 0x10)
        v128 = v127 + 1;
      else
        v128 = 16;
      if (v128 <= v124)
        v129 = *(unsigned int *)(v9 + 132);
      else
        v129 = v128;
      if (v129 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198C725D4);
      }
      v130 = (const void *)*((_QWORD *)this + 55);
      v131 = (void *)WTF::fastMalloc((WTF *)(8 * v129));
      *((_DWORD *)this + 112) = v129;
      *((_QWORD *)this + 55) = v131;
      memcpy(v131, v130, 8 * v125);
      if (v130)
      {
        if (*((const void **)this + 55) == v130)
        {
          *((_QWORD *)this + 55) = 0;
          *((_DWORD *)this + 112) = 0;
        }
        WTF::fastFree((unint64_t)v130, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    v132 = *((_QWORD *)this + 55);
    if (v132)
      bzero((void *)(v132 + 8 * *((unsigned int *)this + 113)), 8 * v124 - 8 * *((unsigned int *)this + 113));
  }
  *((_DWORD *)this + 113) = v124;
  v133 = *(unsigned int *)(v9 + 132);
  v134 = *((unsigned int *)this + 117);
  if (v134 >= v133)
  {
    if ((_DWORD)v134 != (_DWORD)v133)
    {
      v155 = *((_QWORD *)this + 57) + 16 * v133;
      v156 = 16 * v134 - 16 * v133;
      do
      {
        v157 = *(_QWORD *)v155;
        if (*(_QWORD *)v155)
        {
          *(_QWORD *)v155 = 0;
          *(_DWORD *)(v155 + 8) = 0;
          WTF::fastFree(v157, a2, a3, a4, a5, a6, a7, a8);
        }
        v155 += 16;
        v156 -= 16;
      }
      while (v156);
    }
  }
  else
  {
    v135 = *((unsigned int *)this + 116);
    if (v135 < v133)
    {
      v136 = v135 + (v135 >> 2);
      if (v136 >= 0x10)
        v137 = v136 + 1;
      else
        v137 = 16;
      if (v137 <= v133)
        v138 = v133;
      else
        v138 = v137;
      if (v138 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x198C725DCLL);
      }
      v139 = *((_QWORD *)this + 57);
      v140 = WTF::fastMalloc((WTF *)(16 * v138));
      *((_DWORD *)this + 116) = v138;
      *((_QWORD *)this + 57) = v140;
      if ((_DWORD)v134)
      {
        v148 = v140;
        v149 = 16 * v134;
        v150 = (_DWORD *)(v139 + 8);
        do
        {
          *(_QWORD *)v148 = 0;
          *(_QWORD *)(v148 + 8) = 0;
          v151 = *((_QWORD *)v150 - 1);
          *((_QWORD *)v150 - 1) = 0;
          *(_QWORD *)v148 = v151;
          LODWORD(v151) = *v150;
          *v150 = 0;
          *(_DWORD *)(v148 + 8) = v151;
          LODWORD(v151) = v150[1];
          v150[1] = 0;
          *(_DWORD *)(v148 + 12) = v151;
          v152 = *((_QWORD *)v150 - 1);
          if (v152)
          {
            *((_QWORD *)v150 - 1) = 0;
            *v150 = 0;
            WTF::fastFree(v152, v141, v142, v143, v144, v145, v146, v147);
          }
          v150 += 4;
          v148 += 16;
          v149 -= 16;
        }
        while (v149);
      }
      if (v139)
      {
        if (*((_QWORD *)this + 57) == v139)
        {
          *((_QWORD *)this + 57) = 0;
          *((_DWORD *)this + 116) = 0;
        }
        WTF::fastFree(v139, v141, v142, v143, v144, v145, v146, v147);
      }
    }
    v153 = *((_QWORD *)this + 57);
    if (v153)
    {
      v154 = *((unsigned int *)this + 117);
      if ((_DWORD)v154 != (_DWORD)v133)
        bzero((void *)(v153 + 16 * v154), (16 * v133 - 16 * v154) & 0xFFFFFFFFFFFFFFF0);
    }
  }
  *((_DWORD *)this + 117) = v133;
  return 1;
}

uint64_t JSC::Wasm::BBQPlan::dumpDisassembly(uint64_t a1, uint64_t a2, JSC::LinkBuffer *a3, uint64_t a4, JSC::Wasm::TypeDefinition *a5, unsigned int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  uint64_t v18;
  unsigned int v19;
  const char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF::StringImpl *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  int8x16_t *v37;
  WTF *v38;
  JSC::Wasm::BBQDisassembler *v39;
  WTF::PrintStream *v40;
  uint64_t result;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  WTF *v66;
  int8x16_t *v67;
  JSC::Wasm::NameSection *v68;

  if (!byte_1ECF4C288)
  {
    v58 = !HIBYTE(word_1ECF4C286) && byte_1ECF4C28E == 0;
    if (v58 && word_1ECF4C2A0 == 0)
      return 0;
  }
  JSC::Wasm::TypeDefinition::toString(a5, (uint64_t *)&v66);
  WTF::String::ascii((WTF::String *)&v66, &v67);
  v16 = 0;
  if (v67)
    v17 = v67 + 1;
  else
    v17 = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 248);
  if (*(_DWORD *)(v18 + 52) > a6)
    v16 = *(_QWORD *)(v18 + 40) + 16 * a6;
  do
    v19 = __ldaxr((unsigned int *)v18);
  while (__stlxr(v19 + 1, (unsigned int *)v18));
  v60 = v16;
  v61 = (unsigned int *)v18;
  JSC::Wasm::IndexOrName::IndexOrName((unint64_t *)&v62, a6, (unint64_t *)&v60, v11, v12, v13, v14, v15);
  JSC::Wasm::makeString(&v62, (uint64_t *)&v64);
  WTF::String::ascii((WTF::String *)&v64, (int8x16_t **)&v65);
  if (v65)
    v21 = (char *)v65 + 16;
  else
    v21 = 0;
  WTF::dataLogF((WTF *)"Generated BBQ code for WebAssembly BBQ function[%i] %s name %s\n", v20, a4, v17, v21);
  v29 = v65;
  v65 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
    else
      --*(_DWORD *)v29;
  }
  v30 = v64;
  v64 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, (WTF::AtomStringImpl *)v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  v31 = v63;
  v63 = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      v68 = (JSC::Wasm::NameSection *)v31;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v68, v22, v23, v24, v25, v26, v27, v28);
    }
  }
  v34 = v61;
  v61 = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      v68 = (JSC::Wasm::NameSection *)v34;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v68, v22, v23, v24, v25, v26, v27, v28);
    }
  }
  v37 = v67;
  v67 = 0;
  if (v37)
  {
    if (v37->i32[0] == 1)
      WTF::fastFree((unint64_t)v37, v22, v23, v24, v25, v26, v27, v28);
    else
      --v37->i32[0];
  }
  v38 = v66;
  v66 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, (WTF::AtomStringImpl *)v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  v39 = *(JSC::Wasm::BBQDisassembler **)(a2 + 32);
  if (v39)
  {
    v40 = (WTF::PrintStream *)WTF::dataFile(v38);
    JSC::Wasm::BBQDisassembler::dump(v39, v40, a3);
  }
  result = 1;
  *((_BYTE *)a3 + 170) = 1;
  return result;
}

void JSC::Wasm::BBQPlan::work(uint64_t a1, int a2, double a3, float a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  JSC::Wasm::TypeDefinition *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC *v26;
  pthread_key_t *v27;
  WTF **v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  WTF **v38;
  unsigned int v39;
  JSC::LinkBuffer *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  char *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  JSC::Compilation *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  WTF *v82;
  WTF::StringImpl *v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  WTF *v90;
  WTF::StringImpl *v91;
  JSC::Wasm::InternalFunction *v92;
  int v93;
  int v94;
  unint64_t v95;
  char i;
  int v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int *v124;
  uint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  JSC::ExecutableAllocator *v131;
  unint64_t v132;
  int *v133;
  int v134;
  unsigned int *v135;
  unsigned int *v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 *v155;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  unint64_t v162;
  int v163;
  unsigned __int8 *v164;
  int v165;
  uint64_t v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  int v172;
  int v173;
  uint64_t v174;
  unsigned __int8 *v175;
  WTF::AtomStringImpl *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  WTF *v185;
  WTF *v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  WTF *v204;
  unsigned __int8 *v205;
  uint64_t v207;
  uint64_t v208;
  unsigned __int8 **v209;
  uint64_t v210;
  JSC::CCallHelpers *v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  JSC::LinkBuffer *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  _QWORD *v265;
  _DWORD *v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned __int8 *v275;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int *v285;
  unsigned int v286;
  unsigned int v287;
  JSC::Compilation **v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  unint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  void *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  _DWORD *v314;
  uint64_t **p_start;
  uint64_t v316;
  size_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unsigned int *v325;
  uint64_t *v326;
  unsigned int v327;
  unsigned int *v328;
  unsigned int v329;
  unsigned int v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v341;
  uint64_t v342;
  unsigned int *v343;
  unsigned int v344;
  unsigned int v345;
  unint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  WTF *v357;
  unsigned __int8 *v358;
  int v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  unsigned __int8 *v363;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  WTF::StringImpl *v370;
  int v371;
  unint64_t v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  void *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unsigned int v388;
  unsigned int v389;
  unint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unsigned int *v398;
  WTF *v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t CachedUnrolling;
  uint64_t v408;
  uint64_t v409;
  const JSC::Wasm::Type *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  char v414;
  const JSC::Wasm::TypeDefinition *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  char v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  void *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  void *v443;
  WTF *v444;
  WTF::StringImpl *v445;
  unsigned __int8 *v446;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  unint64_t v455;
  void *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  void *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  unsigned int *v472;
  uint64_t v473;
  unsigned __int8 *v474;
  JSC::ExecutableMemoryHandle *v475;
  JSC::Compilation **v476;
  unsigned int *v477;
  uint64_t v478;
  WTF::StringImpl *v479;
  WTF *v480;
  JSC::LinkBuffer *v481;
  JSC::Compilation **v482;
  WTF *v483;
  uint64_t v484;
  unsigned __int8 *v485;
  char v486;
  uint64_t v487;
  uint64_t v488;
  unsigned int *v489;
  uint64_t v490;
  unsigned int *v491;
  WTF::StringImpl *v492;
  WTF *v493;
  WTF::StringImpl *v494;
  WTF *v495;
  WTF *v496;
  uint64_t v497;
  WTF *v498;
  uint64_t v499;
  JSC::Wasm::InternalFunction *v500;
  WTF *v501;
  uint64_t v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  uint64_t v507;
  __int128 v508;
  uint64_t v509;
  unsigned int *v510;
  size_t len;
  uint64_t v512;
  WTF *v513;
  _BYTE v514[128];
  unsigned int v515;
  char v516;
  int v517;
  unsigned int v518;
  __int128 start;
  __int128 v520;
  uint64_t v521;
  uint64_t v522;

  v522 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 472))
  {
    v313 = *(unsigned __int8 *)(a1 + 352);
    if (v313 == 2)
    {
      JSC::Wasm::EntryPlan::compileFunctions(a1, a2);
      return;
    }
    if (v313 == 1)
    {
LABEL_221:
      JSC::Wasm::EntryPlan::prepare((JSC::Wasm::EntryPlan *)a1);
      return;
    }
    if (*(_BYTE *)(a1 + 352))
      return;
    JSC::Wasm::EntryPlan::parseAndValidateModule(a1, *(const void **)(a1 + 80), *(unsigned int *)(a1 + 92), a3, a4);
    if (*(_BYTE *)(a1 + 355) == 1)
    {
      if (!*(_BYTE *)(a1 + 352))
        goto LABEL_221;
    }
    else if (*(unsigned __int8 *)(a1 + 352) < 3u)
    {
      goto LABEL_221;
    }
    v446 = (unsigned __int8 *)(a1 + 13);
    if (__ldaxr((unsigned __int8 *)(a1 + 13)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v446))
    {
LABEL_314:
      JSC::Wasm::EntryPlan::complete((JSC::Wasm::EntryPlan *)a1);
      v454 = __ldxr(v446);
      if (v454 == 1)
      {
        if (!__stlxr(0, v446))
          return;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v448, v449, v450, v451, v452, v453);
      return;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
    goto LABEL_314;
  }
  v507 = 0;
  v505 = 0u;
  v506 = 0u;
  v503 = 0u;
  v504 = 0u;
  v501 = 0;
  v502 = 0;
  v5 = WTF::fastMalloc((WTF *)0x50);
  v6 = v5;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 5) = 0;
  v7 = DWORD2(xmmword_1ECF4C6D8);
  *(_DWORD *)(v5 + 8) = DWORD2(xmmword_1ECF4C6D8);
  if (v7 == 0x7FFFFFFF)
  {
    *(_DWORD *)(v5 + 8) = 0x7FFFFFFF;
    *(_DWORD *)v5 = 0x80000000;
  }
  else if (v7 >= 1)
  {
    v8 = (double)v7;
    if ((double)v7 > (double)(int)xmmword_1ECF4C524)
      v8 = (double)(int)xmmword_1ECF4C524;
    *(_DWORD *)v5 = (int)-v8;
    v9 = v8;
    *(float *)(v5 + 4) = v9;
  }
  *(_DWORD *)(v5 + 13) = 0;
  v10 = *(unsigned int *)(a1 + 480);
  v11 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v11 + 52) <= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198C73E18);
  }
  v12 = *(_DWORD *)(v11 + 36);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8 * v10);
  v14 = (JSC::Wasm::TypeDefinition *)v13;
  if (*(_DWORD *)(v13 + 32) == 4)
  {
    v398 = *(unsigned int **)(v13 + 8);
    v399 = *(WTF **)v398;
    v14 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v398 + 8) + 8 * v398[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v14))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v13, v400, v401, v402, v403, v404, v405, v406);
      if (v414)
      {
        v14 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v14 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v14, v399, v408, v409, v410, v411, v412, v413);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v13, v14, v415, v416, v417, v418, v419, v420);
      }
    }
  }
  if (*((_DWORD *)v14 + 8) == 5)
    v14 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v14 + 1);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = HIBYTE(dword_1ECF4C7B0);
  if (HIBYTE(dword_1ECF4C7B0))
  {
    if (HIBYTE(word_1ECF4C79E))
    {
      v16 = 1;
    }
    else
    {
      v17 = *(_DWORD *)(a1 + 480);
      if (*(_DWORD *)(v15 + 132) <= v17)
      {
        __break(0xC471u);
        JUMPOUT(0x198C73E20);
      }
      v16 = *(_BYTE *)(*(_QWORD *)(v15 + 120) + 40 * v17 + 32) & 1;
    }
  }
  v18 = (v12 + v10);
  v19 = v16 ^ 1;
  v20 = *(_QWORD *)(v15 + 248);
  if (*(_DWORD *)(v20 + 52) > v18)
    v21 = *(_QWORD *)(v20 + 40) + 16 * v18;
  else
    v21 = 0;
  v472 = (unsigned int *)(a1 + 480);
  do
    v22 = __ldaxr((unsigned int *)v20);
  while (__stlxr(v22 + 1, (unsigned int *)v20));
  v23 = WTF::fastMalloc((WTF *)0xC0);
  v24 = v23;
  *(_DWORD *)v23 = 1;
  *(_WORD *)(v23 + 4) = 1;
  *(_BYTE *)(v23 + 6) = 2;
  if (!v21)
    v21 = v18 | 0x8000000000000000;
  *(_QWORD *)(v23 + 8) = v21;
  *(_QWORD *)(v23 + 16) = v20;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_OWORD *)(v23 + 104) = 0u;
  *(_QWORD *)(v23 + 120) = v6;
  *(_BYTE *)(v23 + 128) = 0;
  *(_BYTE *)(v23 + 136) = 0;
  *(_QWORD *)(v23 + 152) = 0;
  *(_QWORD *)(v23 + 160) = 0;
  *(_QWORD *)(v23 + 144) = 0;
  *(_BYTE *)(v23 + 168) = 0;
  *(_DWORD *)(v23 + 172) = v19;
  *(_QWORD *)(v23 + 176) = 0;
  v473 = v23 + 176;
  *(_QWORD *)(v23 + 184) = 0;
  JSC::Wasm::BBQPlan::compileFunction(&v500, a1, *(unsigned int *)(a1 + 480), v23, (uint64_t)&v503, (uint64_t)&v501, v6);
  v25 = *((_QWORD *)&v503 + 1);
  v510 = 0;
  len = 0;
  v512 = v24;
  v513 = (WTF *)v514;
  v515 = 128;
  v27 = (pthread_key_t *)JSC::threadSpecificAssemblerData(v26);
  v28 = (WTF **)WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::operator*(v27);
  v37 = (WTF *)(v28 + 1);
  v36 = *v28;
  if (*v28 != (WTF *)(v28 + 1))
  {
    v38 = v28;
    v39 = *((_DWORD *)v28 + 34);
    if (v515 < v39)
    {
      if (v513 && v513 != (WTF *)v514)
      {
        WTF::fastFree((unint64_t)v513, v29, v30, v31, v32, v33, v34, v35);
        v36 = *v38;
        v39 = *((_DWORD *)v38 + 34);
      }
      v513 = v36;
      v515 = v39;
      *v38 = v37;
      *((_DWORD *)v38 + 34) = 128;
    }
  }
  v516 = 1;
  v517 = 0;
  v518 = 15;
  start = 0u;
  v520 = 0u;
  v521 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v510, v25, 0, v31, v32, v33, v34, v35);
  if (!(_BYTE)v517)
  {
    v363 = (unsigned __int8 *)(a1 + 13);
    if (__ldaxr((unsigned __int8 *)(a1 + 13)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v363))
    {
LABEL_278:
      WTF::makeString<WTF::ASCIILiteral,unsigned int>((uint64_t)"Out of executable memory while tiering up function at index ", 61, *(_DWORD *)(a1 + 480), (int **)&v508);
      JSC::Wasm::Plan::fail(a1, (WTF::AtomStringImpl *)&v508, 1, v365, v366, v367, v368, v369);
      v370 = (WTF::StringImpl *)v508;
      *(_QWORD *)&v508 = 0;
      if (v370)
      {
        if (*(_DWORD *)v370 == 2)
        {
          WTF::StringImpl::~StringImpl(v370, v177, v178, v179, v180, v181, v182, v183);
          WTF::fastFree(v390, v391, v392, v393, v394, v395, v396, v397);
        }
        else
        {
          *(_DWORD *)v370 -= 2;
        }
      }
      v371 = __ldxr(v363);
      if (v371 == 1)
      {
        if (!__stlxr(0, v363))
          goto LABEL_161;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v178, v179, v180, v181, v182, v183);
      goto LABEL_161;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
    goto LABEL_278;
  }
  v498 = 0;
  v499 = 0;
  v496 = 0;
  v497 = 0;
  JSC::Wasm::computeExceptionHandlerAndLoopEntrypointLocations(&v498, (uint64_t)&v496, (uint64_t)v500, (uint64_t)&v503, &v510);
  JSC::Wasm::computePCToCodeOriginMap((JSC::Wasm *)&v503, (JSC::Wasm::CompilationContext *)&v510, v40, v41, v42, v43, v44, v45);
  if ((JSC::Wasm::BBQPlan::dumpDisassembly(a1, (uint64_t)&v503, (JSC::LinkBuffer *)&v510, *(unsigned int *)(a1 + 480), v14, v18) & 1) != 0)
  {
    if (!byte_1ECF4C289)
      goto LABEL_225;
    v46 = 0;
  }
  else
  {
    if (!byte_1ECF4C288 && !(HIBYTE(word_1ECF4C286) | byte_1ECF4C28E))
    {
      if ((_BYTE)word_1ECF4C2A0 || byte_1ECF4C289)
      {
        v46 = word_1ECF4C2A0 != 0;
        goto LABEL_31;
      }
LABEL_225:
      if (DWORD1(v520))
      {
        v347 = (uint64_t *)*((_QWORD *)&start + 1);
        v348 = 8 * DWORD1(v520);
        do
        {
          v349 = *v347++;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v349 + 16))(v349, &v510);
          v348 -= 8;
        }
        while (v348);
      }
      p_start = (uint64_t **)&start;
      if (HIDWORD(v521))
      {
        v360 = (uint64_t *)*((_QWORD *)&v520 + 1);
        v361 = 8 * HIDWORD(v521);
        do
        {
          v362 = *v360++;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v362 + 16))(v362, &v510);
          v361 -= 8;
        }
        while (v361);
      }
      v316 = v518;
      v317 = len;
      *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v518) += len;
      ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v316);
      sys_icache_invalidate((void *)start, v317);
      v325 = v510;
      if (v510)
      {
        do
          v471 = __ldaxr(v325);
        while (__stlxr(v471 + 1, v325));
        p_start = (uint64_t **)(v325 + 2);
      }
      v326 = *p_start;
      *(_QWORD *)&v508 = v326;
      *((_QWORD *)&v508 + 1) = v325;
      if (byte_1ECF4C2A2)
        JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v510, (uint64_t)&v508, 0, 0);
      v474 = (unsigned __int8 *)v326;
      v475 = 0;
      if (v325)
      {
        do
          v327 = __ldaxr(v325);
        while (__stlxr(v327 + 1, v325));
        v475 = (JSC::ExecutableMemoryHandle *)v325;
        v328 = (unsigned int *)*((_QWORD *)&v508 + 1);
        *((_QWORD *)&v508 + 1) = 0;
        if (v328)
        {
          do
          {
            v329 = __ldaxr(v328);
            v330 = v329 - 1;
          }
          while (__stlxr(v330, v328));
          if (!v330)
          {
            atomic_store(1u, v328);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v328, v318, v319, v320, v321, v322, v323, v324);
            WTF::fastFree(v455, v456, v457, v458, v459, v460, v461, v462);
          }
        }
      }
      v56 = 0;
      goto LABEL_35;
    }
    v46 = 1;
  }
LABEL_31:
  v47 = *(unsigned int *)(a1 + 480);
  JSC::Wasm::TypeDefinition::toString(v14, (uint64_t *)&v494);
  WTF::String::ascii((WTF::String *)&v494, (int8x16_t **)&v495);
  v53 = 0;
  v54 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 248);
  if (*(_DWORD *)(v54 + 52) > v18)
    v53 = *(_QWORD *)(v54 + 40) + 16 * v18;
  do
    v55 = __ldaxr((unsigned int *)v54);
  while (__stlxr(v55 + 1, (unsigned int *)v54));
  v488 = v53;
  v489 = (unsigned int *)v54;
  JSC::Wasm::IndexOrName::IndexOrName((unint64_t *)&v490, v18, (unint64_t *)&v488, v48, v49, v50, v51, v52);
  JSC::Wasm::makeString(&v490, (uint64_t *)&v492);
  WTF::String::ascii((WTF::String *)&v492, (int8x16_t **)&v493);
  JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)2367,unsigned int,char const*,char const*>((uint64_t)&v510, v46, 0, 0, "WebAssembly BBQ function[%i] %s name %s", v47, &v474);
  v56 = 1;
LABEL_35:
  v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v65 = (unsigned int *)v475;
  v475 = 0;
  v66 = v504;
  *(_QWORD *)&v504 = 0;
  *v64 = v474;
  if (v65)
  {
    do
      v67 = __ldaxr(v65);
    while (__stlxr(v67 + 1, v65));
    v64[1] = v65;
    v64[2] = v66;
    do
    {
      v68 = __ldaxr(v65);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v65));
    if (!v69)
    {
      atomic_store(1u, v65);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v65, (uint64_t)v57, (uint64_t)v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v372, v373, v374, v375, v376, v377, v378, v379);
    }
  }
  else
  {
    v64[1] = 0;
    v64[2] = v66;
  }
  v70 = (JSC::Compilation *)*((_QWORD *)v500 + 6);
  *((_QWORD *)v500 + 6) = v64;
  if (v70)
  {
    JSC::Compilation::~Compilation(v70, v57, (uint64_t)v58, v59, v60, v61, v62, v63);
    WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
  }
  v79 = (unsigned int *)v475;
  v475 = 0;
  if (v79)
  {
    do
    {
      v80 = __ldaxr(v79);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v79));
    if (!v81)
    {
      atomic_store(1u, v79);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v79, (uint64_t)v57, (uint64_t)v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v380, v381, v382, v383, v384, v385, v386, v387);
    }
  }
  if (v56)
  {
    v82 = v493;
    v493 = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 1)
        WTF::fastFree((unint64_t)v82, v57, (uint64_t)v58, v59, v60, v61, v62, v63);
      else
        --*(_DWORD *)v82;
    }
    v83 = v492;
    v492 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
      {
        WTF::StringImpl::~StringImpl(v83, (WTF::AtomStringImpl *)v57, (uint64_t)v58, v59, v60, v61, v62, v63);
        WTF::fastFree(v297, v298, v299, v300, v301, v302, v303, v304);
      }
      else
      {
        *(_DWORD *)v83 -= 2;
      }
    }
    v84 = v491;
    v491 = 0;
    if (v84)
    {
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        atomic_store(1u, v84);
        *(_QWORD *)&v508 = v84;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v508, v57, (uint64_t)v58, v59, v60, v61, v62, v63);
      }
    }
    v87 = v489;
    v489 = 0;
    if (v87)
    {
      do
      {
        v88 = __ldaxr(v87);
        v89 = v88 - 1;
      }
      while (__stlxr(v89, v87));
      if (!v89)
      {
        atomic_store(1u, v87);
        *(_QWORD *)&v508 = v87;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v508, v57, (uint64_t)v58, v59, v60, v61, v62, v63);
      }
    }
    v90 = v495;
    v495 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 1)
        WTF::fastFree((unint64_t)v90, v57, (uint64_t)v58, v59, v60, v61, v62, v63);
      else
        --*(_DWORD *)v90;
    }
    v91 = v494;
    v494 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2)
      {
        WTF::StringImpl::~StringImpl(v91, (WTF::AtomStringImpl *)v57, (uint64_t)v58, v59, v60, v61, v62, v63);
        WTF::fastFree(v305, v306, v307, v308, v309, v310, v311, v312);
      }
      else
      {
        *(_DWORD *)v91 -= 2;
      }
    }
  }
  v92 = v500;
  if (!*((_BYTE *)v500 + 44))
    goto LABEL_215;
  v93 = *((_DWORD *)v500 + 10);
  if (v93 < 4)
    v94 = 0;
  else
    v94 = *(_DWORD *)((char *)v513 + (v93 & 0xFFFFFFFC) - 4);
  v95 = (v93 - v94) + (_QWORD)start;
  if ((unint64_t)start > v95 || (unint64_t)start + len < v95)
    goto LABEL_335;
  for (i = 1; ; i = 0)
  {
    v98 = *((_DWORD *)v92 + 18);
    *(_QWORD *)(v24 + 128) = v95;
    *(_BYTE *)(v24 + 136) = i;
    v99 = *(_QWORD *)(v24 + 144);
    if (v99)
    {
      *(_QWORD *)(v24 + 144) = 0;
      *(_DWORD *)(v24 + 152) = 0;
      WTF::fastFree(v99, v57, (uint64_t)v58, v59, v60, v61, v62, v63);
    }
    *(_QWORD *)(v24 + 144) = v496;
    v100 = v497;
    v496 = 0;
    v497 = 0;
    *(_QWORD *)(v24 + 152) = v100;
    *(_DWORD *)(v24 + 160) = v98;
    JSC::Wasm::OptimizingJITCallee::setEntrypoint((_QWORD *)v24, (char *)v92 + 48, (uint64_t)&v501, (uint64_t *)v92, (uint64_t)v92 + 8, (uint64_t)&v498, v62, v63);
    WTF::Vector<WTF::UniqueRef<WTF::EmbeddedFixedVector<JSC::CodeLocationLabel<(WTF::PtrTag)40321>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v473, *(unsigned int *)(v24 + 188), v101, v102, v103, v104, v105, v106);
    *(_QWORD *)&v508 = 0;
    v474 = (unsigned __int8 *)&v508;
    JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v24, (uint64_t **)&v474);
    v112 = v508;
    v113 = *((_QWORD *)&v505 + 1);
    if (*((_QWORD *)&v505 + 1))
    {
      *((_QWORD *)&v505 + 1) = 0;
      v487 = v113;
      JSC::NativeCalleeRegistry::addPCToCodeOriginMap((uint64_t)&JSC::calleeRegistry, v24, &v487);
      WTF::Box<JSC::PCToCodeOriginMap>::~Box((unint64_t *)&v487, v331, v332, v333, v334, v335, v336, v337);
    }
    v114 = (uint64_t *)(*(_QWORD *)(a1 + 472) + 128);
    v474 = (unsigned __int8 *)v114;
    LOBYTE(v475) = 1;
    if (__ldaxr((unsigned __int8 *)v114))
    {
      __clrex();
LABEL_83:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v114);
      goto LABEL_84;
    }
    if (__stxr(1u, (unsigned __int8 *)v114))
      goto LABEL_83;
LABEL_84:
    v116 = *(_QWORD *)(a1 + 472);
    v117 = *(unsigned int *)(a1 + 480);
    do
      v118 = __ldaxr((unsigned int *)v24);
    while (__stlxr(v118 + 1, (unsigned int *)v24));
    *(_QWORD *)&v508 = v24;
    JSC::Wasm::CalleeGroup::setBBQCallee(v116, v117, (uint64_t *)&v508, v107, v108, v109, v110, v111);
    v122 = (unsigned int *)v508;
    *(_QWORD *)&v508 = 0;
    if (v122)
    {
      do
      {
        v148 = __ldaxr(v122);
        v149 = v148 - 1;
      }
      while (__stlxr(v149, v122));
      if (!v149)
      {
        atomic_store(1u, v122);
        JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v122, v119, v120, v121, v60, v61, v62, v63);
      }
    }
    v123 = *(unsigned int **)(v24 + 32);
    if (v123)
      v124 = v123 + 2;
    else
      v124 = 0;
    if (v123)
      v125 = (uint64_t)&v123[8 * *v123 + 2];
    else
      v125 = 0;
    for (; v124 != (unsigned int *)v125; v124 += 8)
    {
      v126 = *((_QWORD *)v124 + 2);
      v127 = *(_QWORD **)(a1 + 472);
      if (v126 < *(unsigned int *)(*(_QWORD *)(a1 + 16) + 36))
      {
        v314 = (_DWORD *)v127[9];
        if (*v314 <= v126)
        {
          __break(0xC471u);
          JUMPOUT(0x198C73D4CLL);
        }
        v128 = 0;
        v130 = *(_QWORD *)&v314[4 * v126 + 2];
      }
      else
      {
        v128 = JSC::Wasm::CalleeGroup::wasmEntrypointCalleeFromFunctionIndexSpace(v127, (uint64_t)&v474, v126);
        v129 = JSC::Wasm::CalleeGroup::wasmEntrypointCalleeFromFunctionIndexSpace(*(_QWORD **)(a1 + 472), (uint64_t)&v474, v124[4]);
        *(_QWORD *)&v508 = 0;
        v485 = (unsigned __int8 *)&v508;
        JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v129, (uint64_t **)&v485);
        v130 = v508;
      }
      v131 = *(JSC::ExecutableAllocator **)v124;
      if (*((_BYTE *)v124 + 8))
      {
        if (*((_BYTE *)v124 + 8) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198C73B3CLL);
        }
        JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>(*(JSC::ExecutableAllocator **)v124, *(_QWORD *)v124, v130);
      }
      else
      {
        v131 = (JSC::ExecutableAllocator *)((char *)v131 - 4);
        JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>(v131, (unint64_t)v131, v130);
      }
      sys_icache_invalidate(v131, 4uLL);
      if (v128)
        v132 = (v128 - qword_1ECF4C080) | 3;
      else
        v132 = 0;
      JSC::ARM64Assembler::linkPointer(*((JSC::ARM64Assembler **)v124 + 3), v132, (void *)1);
    }
    v92 = *(JSC::Wasm::InternalFunction **)(a1 + 472);
    v133 = (int *)*((_QWORD *)v92 + 9);
    if (v133)
      v134 = *v133;
    else
      v134 = 0;
    v135 = *(unsigned int **)(v24 + 32);
    if (v135)
      v136 = v135 + 2;
    else
      v136 = 0;
    if (v135)
      v137 = (uint64_t)&v135[8 * *v135 + 2];
    else
      v137 = 0;
    if (v136 != (unsigned int *)v137)
    {
      while (1)
      {
        v138 = v136[4] - v134;
        v139 = (unsigned int *)*((_QWORD *)v92 + 13);
        if (*v139 <= v138)
          break;
        v140 = &v139[4 * v138];
        v141 = (uint64_t)(v140 + 2);
        v142 = *(_QWORD *)v136;
        BYTE8(v508) = *((_BYTE *)v136 + 8);
        *(_QWORD *)&v508 = v142;
        v509 = 0;
        v143 = v140[5];
        if ((_DWORD)v143 == v140[4])
        {
          v147 = WTF::Vector<JSC::DFG::DesiredTransition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v141, v143 + 1, (unint64_t)&v508);
          v144 = *(_QWORD *)v141 + 24 * *(unsigned int *)(v141 + 12);
          v145 = *(_OWORD *)v147;
          v146 = *(_QWORD *)(v147 + 16);
        }
        else
        {
          v144 = *(_QWORD *)v141 + 24 * v143;
          v145 = v508;
          v146 = v509;
        }
        *(_QWORD *)(v144 + 16) = v146;
        *(_OWORD *)v144 = v145;
        ++*(_DWORD *)(v141 + 12);
        v136 += 8;
        if (v136 == (unsigned int *)v137)
        {
          v92 = *(JSC::Wasm::InternalFunction **)(a1 + 472);
          goto LABEL_120;
        }
      }
      v57 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/Devel"
            "oper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/TrailingArray.h";
      v58 = "reference WTF::TrailingArray<WTF::EmbeddedFixedVector<WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite>>,"
            " WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite>>::at [Derived = WTF::EmbeddedFixedVector"
            "<WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite>>, T = WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite>]";
      v59 = 170;
      __break(0xC471u);
      goto LABEL_214;
    }
LABEL_120:
    JSC::Wasm::CallsiteCollection::updateCallsitesToCallUs((unsigned __int8 *)v92 + 88, v119, (uint64_t)v92, v112, *(_DWORD *)(a1 + 480), v61, v62, v63);
    v150 = *(_QWORD *)(a1 + 472);
    v151 = *(unsigned int *)(a1 + 480);
    v152 = (int *)(a1 + 480);
    if (byte_1ECF4C798)
      break;
    v153 = *(_QWORD *)(v150 + 40);
    if (*(_DWORD *)(v153 + 4) <= v151)
    {
      __break(0xC471u);
      JUMPOUT(0x198C73A7CLL);
    }
    v154 = *(_QWORD *)(v153 + 8 * v151 + 8);
    v155 = (unsigned __int8 *)(v154 + 116);
    if (__ldaxr((unsigned __int8 *)(v154 + 116)))
    {
      __clrex();
LABEL_124:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v154 + 116);
      goto LABEL_125;
    }
    if (__stxr(1u, v155))
      goto LABEL_124;
    do
LABEL_125:
      v157 = __ldaxr((unsigned int *)v24);
    while (__stlxr(v157 + 1, (unsigned int *)v24));
    v158 = v154 + 8 * *(unsigned __int8 *)(a1 + 12);
    v159 = *(unsigned int **)(v158 + 144);
    *(_QWORD *)(v158 + 144) = v24;
    if (v159)
    {
      do
      {
        v160 = __ldaxr(v159);
        v161 = v160 - 1;
      }
      while (__stlxr(v161, v159));
      if (!v161)
      {
        atomic_store(1u, v159);
        JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v159, (uint64_t)v57, (uint64_t)v58, v59, v60, v61, v62, v63);
      }
    }
    v162 = *(unsigned __int8 *)(a1 + 12);
    if (v162 < 2)
    {
      *(_BYTE *)(v154 + v162 + 117) = 2;
      goto LABEL_132;
    }
LABEL_214:
    __break(1u);
LABEL_215:
    v95 = 0;
  }
  v338 = *(_QWORD *)(v150 + 32);
  if (*(_DWORD *)(v338 + 4) <= v151)
  {
    __break(0xC471u);
    JUMPOUT(0x198C73DACLL);
  }
  v339 = *(_QWORD *)(v338 + 8 * v151 + 8);
  v155 = (unsigned __int8 *)(v339 + 188);
  if (__ldaxr((unsigned __int8 *)(v339 + 188)))
  {
    __clrex();
    goto LABEL_240;
  }
  if (__stxr(1u, v155))
LABEL_240:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v339 + 188);
  do
    v341 = __ldaxr((unsigned int *)v24);
  while (__stlxr(v341 + 1, (unsigned int *)v24));
  v342 = v339 + 8 * *(unsigned __int8 *)(a1 + 12);
  v343 = *(unsigned int **)(v342 + 40);
  *(_QWORD *)(v342 + 40) = v24;
  if (v343)
  {
    do
    {
      v344 = __ldaxr(v343);
      v345 = v344 - 1;
    }
    while (__stlxr(v345, v343));
    if (!v345)
    {
      atomic_store(1u, v343);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v343, (uint64_t)v57, (uint64_t)v58, v59, v60, v61, v62, v63);
    }
  }
  v346 = *(unsigned __int8 *)(a1 + 12);
  if (v346 >= 2)
    goto LABEL_214;
  *(_BYTE *)(v339 + v346 + 189) = 2;
LABEL_132:
  v163 = __ldxr(v155);
  if (v163 != 1)
  {
    __clrex();
    goto LABEL_136;
  }
  if (__stlxr(0, v155))
LABEL_136:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v155, 0, (uint64_t)v58, v59, v60, v61, v62, v63);
  if (!(_BYTE)v475)
    goto LABEL_143;
  v164 = v474;
  v165 = __ldxr(v474);
  if (v165 != 1)
  {
    __clrex();
    goto LABEL_142;
  }
  if (__stlxr(0, v474))
LABEL_142:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v164, 0, (uint64_t)v58, v59, v60, v61, v62, v63);
LABEL_143:
  v166 = *(_QWORD *)(*(_QWORD *)(a1 + 472) + 48);
  if (!v166)
    goto LABEL_149;
  v167 = *(_DWORD *)(v166 - 8);
  v168 = *v472;
  v169 = 9 * ((v168 + ~(v168 << 15)) ^ ((v168 + ~(v168 << 15)) >> 10));
  v170 = (v169 ^ (v169 >> 6)) + ~((v169 ^ (v169 >> 6)) << 11);
  v171 = (v170 ^ HIWORD(v170)) & v167;
  v172 = *(_DWORD *)(v166 + 16 * v171);
  if (v172 != *v472)
  {
    v173 = 1;
    while (v172 != -1)
    {
      v171 = ((_DWORD)v171 + v173) & v167;
      v172 = *(_DWORD *)(v166 + 16 * v171);
      ++v173;
      if (v172 == v168)
        goto LABEL_148;
    }
    goto LABEL_149;
  }
LABEL_148:
  v174 = *(_QWORD *)(v166 + 16 * v171 + 8);
  if (!v174 || *(_BYTE *)(v174 + 6) != 7)
    goto LABEL_149;
  v205 = (unsigned __int8 *)(a1 + 13);
  v485 = (unsigned __int8 *)(a1 + 13);
  v486 = 1;
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
    goto LABEL_182;
  }
  if (__stxr(1u, v205))
LABEL_182:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v205);
  v207 = *(_QWORD *)(a1 + 16);
  v208 = *(unsigned int *)(a1 + 480);
  if (*(_DWORD *)(v207 + 52) <= v208)
  {
LABEL_335:
    __break(0xC471u);
    JUMPOUT(0x198C73934);
  }
  v209 = (unsigned __int8 **)JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(*(_QWORD *)(v207 + 40) + 8 * v208));
  v210 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v210 = 1;
  *(_WORD *)(v210 + 4) = 257;
  *(_BYTE *)(v210 + 6) = 6;
  *(_QWORD *)(v210 + 8) = 0x4000000000000000;
  *(_QWORD *)(v210 + 16) = 0;
  *(_OWORD *)(v210 + 24) = 0u;
  *(_OWORD *)(v210 + 40) = 0u;
  v211 = (JSC::CCallHelpers *)WTF::fastMalloc((WTF *)0x160);
  JSC::CCallHelpers::CCallHelpers(v211, 0);
  *(_QWORD *)&v508 = 0;
  v219 = v503;
  *(_QWORD *)&v503 = v211;
  if (v219)
  {
    v220 = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler(v219, v212, v213, v214, v215, v216, v217, v218);
    WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
  }
  std::unique_ptr<JSC::CCallHelpers>::~unique_ptr[abi:sn180100]((uint64_t *)&v508, v212, v213, v214, v215, v216, v217, v218);
  v483 = 0;
  v484 = 0;
  JSC::Wasm::createJSToWasmWrapper(v503, v210, 0, v209, (uint64_t)&v483, *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 12), *(_DWORD *)(a1 + 480), (uint64_t *)&v482);
  *(_QWORD *)&v508 = v210;
  LODWORD(v474) = 15;
  LODWORD(v480) = 0;
  std::make_unique[abi:sn180100]<JSC::LinkBuffer,JSC::CCallHelpers &,JSC::Wasm::JSEntrypointJITCallee *,JSC::LinkBuffer::Profile,JSC::JITCompilationEffort>((uint64_t *)&v481, v503, (uint64_t *)&v508, (int *)&v474, (unsigned int *)&v480);
  v235 = v481;
  if (*((_BYTE *)v481 + 169))
  {
    if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
    {
      v421 = 1;
    }
    else
    {
      if (!byte_1ECF4C28E && !byte_1ECF4C289)
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v481, 0, 0, &v508);
        v478 = 0;
        std::make_unique[abi:sn180100]<JSC::Compilation,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)2367>,decltype(nullptr)>((uint64_t *)&v508, &v474);
        std::unique_ptr<JSC::Compilation>::operator=[abi:sn180100](v482 + 6, (JSC::Compilation **)&v474, v236, v237, v238, v239, v240, v241);
        std::unique_ptr<JSC::Compilation>::~unique_ptr[abi:sn180100]((JSC::Compilation **)&v474, v242, v243, v244, v245, v246, v247, v248);
        JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v508, v249, v250, v251, v252, v253, v254, v255);
        goto LABEL_191;
      }
      v421 = byte_1ECF4C28E != 0;
    }
    v422 = *v472;
    JSC::Wasm::TypeDefinition::toString((JSC::Wasm::TypeDefinition *)v209, (uint64_t *)&v479);
    WTF::String::ascii((WTF::String *)&v479, (int8x16_t **)&v480);
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)2367,unsigned int,char const*>((uint64_t)v235, v421, 0, 0, "(ipint upgrade edition) JS->WebAssembly entrypoint[%i] %s", v422, &v508);
    v478 = 0;
    std::make_unique[abi:sn180100]<JSC::Compilation,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)2367>,decltype(nullptr)>((uint64_t *)&v508, &v474);
    std::unique_ptr<JSC::Compilation>::operator=[abi:sn180100](v482 + 6, (JSC::Compilation **)&v474, v423, v424, v425, v426, v427, v428);
    std::unique_ptr<JSC::Compilation>::~unique_ptr[abi:sn180100]((JSC::Compilation **)&v474, v429, v430, v431, v432, v433, v434, v435);
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v508, v436, v437, v438, v439, v440, v441, v442);
    v444 = v480;
    v480 = 0;
    if (v444)
    {
      if (*(_DWORD *)v444 == 1)
        WTF::fastFree((unint64_t)v444, v443, v256, v257, v258, v259, v260, v261);
      else
        --*(_DWORD *)v444;
    }
    v445 = v479;
    v479 = 0;
    if (v445)
    {
      if (*(_DWORD *)v445 == 2)
      {
        WTF::StringImpl::~StringImpl(v445, (WTF::AtomStringImpl *)v443, v256, v257, v258, v259, v260, v261);
        WTF::fastFree(v463, v464, v465, v466, v467, v468, v469, v470);
      }
      else
      {
        *(_DWORD *)v445 -= 2;
      }
    }
    v152 = (int *)(a1 + 480);
LABEL_191:
    if (HIDWORD(v484))
    {
      v262 = 32 * HIDWORD(v484);
      v263 = (_QWORD *)((char *)v483 + 8);
      do
      {
        v264 = v263[1];
        v265 = *(_QWORD **)(a1 + 472);
        if (v264 >= *(unsigned int *)(*(_QWORD *)(a1 + 16) + 36))
        {
          v268 = JSC::Wasm::CalleeGroup::wasmEntrypointCalleeFromFunctionIndexSpace(v265, (uint64_t)&v485, v264);
          *(_QWORD *)&v508 = 0;
          v474 = (unsigned __int8 *)&v508;
          JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v268, (uint64_t **)&v474);
          v267 = v508;
        }
        else
        {
          v266 = (_DWORD *)v265[9];
          if (*v266 <= v264)
          {
            __break(0xC471u);
            JUMPOUT(0x198C73BA0);
          }
          v267 = *(_QWORD *)&v266[4 * v264 + 2];
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::repatchNearCall<(WTF::PtrTag)64376,(WTF::PtrTag)64376>((JSC::ExecutableAllocator *)*(v263 - 1), *v263, v267);
        v263 += 4;
        v262 -= 32;
      }
      while (v262);
    }
    JSC::Wasm::JSEntrypointJITCallee::setEntrypoint((_QWORD *)v210, (uint64_t *)v482 + 6, v256, v257, v258, v259, v260, v261);
    v275 = (unsigned __int8 *)(*(_QWORD *)(a1 + 472) + 128);
    if (__ldaxr(v275))
    {
      __clrex();
      goto LABEL_200;
    }
    if (__stxr(1u, v275))
LABEL_200:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v275);
    do
      v277 = __ldaxr((unsigned int *)v210);
    while (__stlxr(v277 + 1, (unsigned int *)v210));
    v477 = (unsigned int *)v210;
    JSC::Wasm::JSEntrypointInterpreterCallee::setReplacement(v174, (uint64_t *)&v477, v269, v270, v271, v272, v273, v274);
    v285 = v477;
    v477 = 0;
    if (v285)
    {
      do
      {
        v286 = __ldaxr(v285);
        v287 = v286 - 1;
      }
      while (__stlxr(v287, v285));
      if (!v287)
      {
        atomic_store(1u, v285);
        JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v285, v278, v279, v280, v281, v282, v283, v284);
      }
    }
    v474 = (unsigned __int8 *)v210;
    v475 = v481;
    v288 = v482;
    v481 = 0;
    v482 = 0;
    v476 = v288;
    WTF::HashMap<unsigned int,std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>,WTF::HashTableTraits>::add<std::tuple<WTF::Ref<JSC::Wasm::JSEntrypointJITCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointJITCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointJITCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>((uint64_t)&v508, (uint64_t *)(a1 + 416), v152, (uint64_t *)&v474, v281, v282, v283, v284);
    std::tuple<WTF::Ref<JSC::Wasm::JSEntrypointJITCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointJITCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointJITCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>::~tuple((uint64_t)&v474, v289, v290, v291, v292, v293, v294, v295);
    v296 = __ldxr(v275);
    if (v296 == 1)
    {
      if (!__stlxr(0, v275))
      {
LABEL_258:
        v210 = 0;
        goto LABEL_259;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v275, 0, v229, v230, v231, v232, v233, v234);
    goto LABEL_258;
  }
LABEL_259:
  std::unique_ptr<JSC::LinkBuffer>::~unique_ptr[abi:sn180100](&v481, v228, v229, v230, v231, v232, v233, v234);
  std::unique_ptr<JSC::Wasm::InternalFunction>::~unique_ptr[abi:sn180100]((JSC::Wasm::InternalFunction **)&v482, v350, v351, v352, v353, v354, v355, v356);
  v357 = v483;
  if (v483)
  {
    v483 = 0;
    LODWORD(v484) = 0;
    WTF::fastFree((unint64_t)v357, v57, (uint64_t)v58, v59, v60, v61, v62, v63);
  }
  if (v210)
  {
    do
    {
      v388 = __ldaxr((unsigned int *)v210);
      v389 = v388 - 1;
    }
    while (__stlxr(v389, (unsigned int *)v210));
    if (!v389)
    {
      atomic_store(1u, (unsigned int *)v210);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v210, (uint64_t)v57, (uint64_t)v58, v59, v60, v61, v62, v63);
    }
  }
  if (v486)
  {
    v358 = v485;
    v359 = __ldxr(v485);
    if (v359 == 1)
    {
      if (!__stlxr(0, v485))
        goto LABEL_149;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v358, 0, (uint64_t)v58, v59, v60, v61, v62, v63);
  }
LABEL_149:
  v175 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
    goto LABEL_151;
  }
  if (__stxr(1u, v175))
LABEL_151:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
  *(_BYTE *)(a1 + 352) = 4;
  JSC::Wasm::Plan::runCompletionTasks((JSC::Wasm::Plan *)a1, v57, (uint64_t)v58, v59, v60, v61, v62, v63);
  v184 = __ldxr(v175);
  if (v184 != 1)
  {
    __clrex();
    goto LABEL_156;
  }
  if (__stlxr(0, v175))
LABEL_156:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v178, v179, v180, v181, v182, v183);
  v185 = v496;
  if (v496)
  {
    v496 = 0;
    LODWORD(v497) = 0;
    WTF::fastFree((unint64_t)v185, v177, v178, v179, v180, v181, v182, v183);
  }
  v186 = v498;
  if (v498)
  {
    v498 = 0;
    LODWORD(v499) = 0;
    WTF::fastFree((unint64_t)v186, v177, v178, v179, v180, v181, v182, v183);
  }
LABEL_161:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v510, v177, v178, v179, v180, v181, v182, v183);
  if (v500)
  {
    JSC::Wasm::InternalFunction::~InternalFunction(v500, v187, v188, v189, v190, v191, v192, v193);
    WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
  }
  do
  {
    v202 = __ldaxr((unsigned int *)v24);
    v203 = v202 - 1;
  }
  while (__stlxr(v203, (unsigned int *)v24));
  if (!v203)
  {
    atomic_store(1u, (unsigned int *)v24);
    JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v24, (uint64_t)v187, v188, v189, v190, v191, v192, v193);
  }
  v204 = v501;
  if (v501)
  {
    v501 = 0;
    LODWORD(v502) = 0;
    WTF::fastFree((unint64_t)v204, v187, v188, v189, v190, v191, v192, v193);
  }
  JSC::Wasm::CompilationContext::~CompilationContext((JSC::Wasm::CompilationContext *)&v503, v187, v188, v189, v190, v191, v192, v193);
}

BOOL JSC::Wasm::BBQPlan::hasWork(JSC::Wasm::BBQPlan *this)
{
  unsigned int v1;
  _BOOL4 v2;
  _BOOL4 v3;

  v1 = *((unsigned __int8 *)this + 352);
  v2 = v1 < 3;
  v3 = v1 == 0;
  if (*((_BYTE *)this + 355) == 1)
    return v3;
  else
    return v2;
}

void JSC::Wasm::BBQPlan::compileFunction(WTF::StringImpl **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  WTF::StringImpl *v26;
  _BOOL4 v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  int v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  JSC::Wasm::TypeDefinition *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BOOL4 hasRecursiveReference;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t CachedUnrolling;
  uint64_t v76;
  uint64_t v77;
  const JSC::Wasm::Type *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  WTF *v83;
  const JSC::Wasm::TypeDefinition *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  WTF::StringImpl *v92;
  char v93[8];
  unsigned int v94;
  WTF::StringImpl *v95;
  int v96;
  char v97[8];
  int v98;
  WTF::StringImpl *v99;
  int v100;
  char v101;

  v7 = *(_QWORD *)(a2 + 16);
  if (*(_DWORD *)(v7 + 132) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198C7435CLL);
  }
  if (*(_DWORD *)(v7 + 52) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198C74364);
  }
  v13 = *(_QWORD *)(v7 + 120) + 40 * a3;
  v14 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * a3);
  v15 = v14;
  if (*(_DWORD *)(v14 + 32) == 4)
  {
    v65 = *(unsigned int **)(v14 + 8);
    v91 = *(WTF **)v65;
    v66 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v65 + 8) + 8 * v65[2]);
    v67 = a4;
    v68 = a5;
    v69 = a7;
    v70 = v13;
    hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v66);
    v15 = (uint64_t)v66;
    v13 = v70;
    a7 = v69;
    a5 = v68;
    a4 = v67;
    if (hasRecursiveReference)
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v14, v72, v70, (uint64_t)v66, v68, v73, v69, v74);
      if (v82)
      {
        v15 = CachedUnrolling;
      }
      else
      {
        v83 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v66, v91, v76, v77, v78, v79, v80, v81);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v14, v83, v84, v85, v86, v87, v88, v89);
        v15 = (uint64_t)v83;
      }
      a4 = v67;
      a5 = v68;
      a7 = v69;
      v13 = v70;
    }
  }
  if (*(_DWORD *)(v15 + 32) == 5)
    v15 = **(_QWORD **)(v15 + 8);
  v16 = *(_QWORD *)(a2 + 16);
  v95 = 0;
  v96 = 0;
  JSC::Wasm::parseAndCompileBBQ(a5, a4, v13, v15, a6, v16, *(unsigned __int8 *)(a2 + 12), a3, *(_WORD *)(a2 + 484), 0, -1, a7);
  v97[0] = 0;
  v98 = -1;
  v23 = v94;
  if (v94 != -1)
  {
    ((void (*)(WTF::StringImpl **, char *, char *))off_1E35B54B0[v94])(&v99, v97, v93);
    v98 = v23;
  }
  if ((_DWORD)v23 == -1)
    v24 = -1;
  else
    v24 = v23;
  if (v96 == -1)
    v25 = v23 == -1;
  else
    v25 = v24 == v96;
  if (v25)
  {
    ((void (*)(WTF::StringImpl **, char *, WTF::StringImpl **))off_1E35B54C0[v24])(&v99, v97, &v95);
  }
  else
  {
    v28 = (v23 - 1) < 0xFFFFFFFE || (v96 + 1) < 2;
    if (v28)
      v29 = (WTF::StringImpl **)v97;
    else
      v29 = &v95;
    if (v28)
      v30 = &v95;
    else
      v30 = (WTF::StringImpl **)v97;
    LOBYTE(v99) = 0;
    v100 = -1;
    v31 = *((unsigned int *)v30 + 2);
    if ((_DWORD)v31 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E35B54B0[v31])(&v101, &v99, v30);
      v100 = v31;
      v32 = *((unsigned int *)v30 + 2);
      if ((_DWORD)v32 != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E35B54A0[v32])(&v101, v30);
    }
    *((_DWORD *)v30 + 2) = -1;
    if (v28)
      v33 = (WTF::StringImpl **)v97;
    else
      v33 = &v95;
    v34 = *((unsigned int *)v33 + 2);
    if ((_DWORD)v34 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E35B54D0[v34])(&v101, v30, v29);
      *((_DWORD *)v30 + 2) = v34;
      v35 = *((unsigned int *)v33 + 2);
      if ((_DWORD)v35 != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E35B54A0[v35])(&v101, v29);
    }
    *((_DWORD *)v33 + 2) = -1;
    v36 = v100;
    if (v100 != -1)
    {
      ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E35B54D0[v100])(&v101, v29, &v99);
      *((_DWORD *)v33 + 2) = v36;
      if (v100 != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E35B54A0[v100])(&v101, &v99);
    }
  }
  if (v98 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E35B54A0[v98])(&v99, v97);
  if (v94 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E35B54A0[v94])(&v99, v93);
  if (!v96)
  {
    v26 = v95;
    v95 = 0;
    *a1 = v26;
    goto LABEL_22;
  }
  v37 = (unsigned __int8 *)(a2 + 13);
  if (__ldaxr((unsigned __int8 *)(a2 + 13)))
  {
    __clrex();
LABEL_52:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 13);
    goto LABEL_53;
  }
  if (__stxr(1u, v37))
    goto LABEL_52;
LABEL_53:
  if (!*(_QWORD *)(a2 + 56))
  {
    if (v96 != 1)
    {
      v90 = std::__throw_bad_variant_access[abi:sn180100]();
      JSC::Wasm::computeExceptionHandlerAndLoopEntrypointLocations(v90);
      return;
    }
    v40 = v95;
    if (v95)
      *(_DWORD *)v95 += 2;
    v92 = v40;
    WTF::makeString<WTF::String,WTF::ASCIILiteral,unsigned int>((uint64_t *)&v92, ", in function at index ", 24, a3, (int **)&v99);
    JSC::Wasm::Plan::fail(a2, (WTF::AtomStringImpl *)&v99, 0, v41, v42, v43, v44, v45);
    v47 = v99;
    v99 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v46, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
    v48 = v92;
    v92 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v46, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
  }
  *(_DWORD *)(a2 + 360) = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 132);
  *a1 = 0;
  v39 = __ldxr(v37);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_58;
  }
  if (__stlxr(0, v37))
LABEL_58:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 13), 0, v17, v18, v19, v20, v21, v22);
LABEL_22:
  if (v96 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E35B54A0[v96])(&v99, &v95);
}

_QWORD *JSC::Wasm::computeExceptionHandlerAndLoopEntrypointLocations(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v54;
  unint64_t v55;

  v9 = (uint64_t)result;
  v10 = *(_QWORD *)(a4 + 24);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 200);
    v12 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v12)
    {
      v13 = *(_DWORD **)(a3 + 8);
      v14 = 28 * v12;
      v15 = 1;
      do
      {
        if (*v13 == 2)
        {
          v55 = 0;
          v16 = *(unsigned int *)(v9 + 12);
          if ((_DWORD)v16 == *(_DWORD *)(v9 + 8))
          {
            result = (_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v16 + 1, (unint64_t)&v55);
            *(_QWORD *)(*(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 12)) = *result;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v9 + 8 * v16) = 0;
          }
          ++*(_DWORD *)(v9 + 12);
        }
        else
        {
          if (v15 >= v11)
          {
            __break(0xC471u);
            JUMPOUT(0x198C74810);
          }
          v17 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 160);
          if (*(unsigned int *)(v17 + 268) <= v15)
          {
            __break(0xC471u);
            JUMPOUT(0x198C74820);
          }
          v18 = *(_DWORD *)(*(_QWORD *)(v17 + 256) + 4 * v15);
          if (v18 < 4)
            v19 = 0;
          else
            v19 = *(_DWORD *)((v18 & 0xFFFFFFFC) + a5[3] - 4);
          v20 = (v18 - v19);
          v21 = a5[23];
          v22 = v20 + v21;
          if (v21 > v22 || v21 + a5[1] < v22)
          {
            __break(0xC471u);
            JUMPOUT(0x198C747D0);
          }
          v55 = v22;
          v24 = *(unsigned int *)(v9 + 12);
          if ((_DWORD)v24 == *(_DWORD *)(v9 + 8))
          {
            result = (_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v24 + 1, (unint64_t)&v55);
            *(_QWORD *)(*(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 12)) = *result;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v9 + 8 * v24) = v22;
          }
          ++*(_DWORD *)(v9 + 12);
          ++v15;
        }
        v13 += 7;
        v14 -= 28;
      }
      while (v14);
    }
    else
    {
      v15 = 1;
    }
    if (v15 < v11)
    {
      while (1)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 160);
        if (v15 >= *(unsigned int *)(v47 + 268))
        {
          __break(0xC471u);
          JUMPOUT(0x198C74818);
        }
        v48 = *(_DWORD *)(*(_QWORD *)(v47 + 256) + 4 * v15);
        v49 = v48 < 4 ? 0 : *(_DWORD *)((v48 & 0xFFFFFFFC) + a5[3] - 4);
        v50 = (v48 - v49);
        v51 = a5[23];
        v52 = v50 + v51;
        if (v51 > v52 || v51 + a5[1] < v52)
          break;
        v55 = v52;
        v54 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v54 == *(_DWORD *)(a2 + 8))
        {
          result = (_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v54 + 1, (unint64_t)&v55);
          *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 12)) = *result;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v54) = v52;
        }
        ++*(_DWORD *)(a2 + 12);
        if (v11 == ++v15)
          return result;
      }
LABEL_81:
      __break(0xC471u);
      JUMPOUT(0x198C74790);
    }
  }
  else
  {
    v25 = *(unsigned int *)(a3 + 36);
    if ((_DWORD)v25)
    {
      v26 = *(int **)(a3 + 24);
      v27 = 4 * v25;
      do
      {
        v28 = *v26;
        if (*v26 < 4)
          v29 = 0;
        else
          v29 = *(_DWORD *)((v28 & 0xFFFFFFFC) + a5[3] - 4);
        v30 = (v28 - v29);
        v31 = a5[23];
        v32 = v30 + v31;
        if (v31 > v32 || v31 + a5[1] < v32)
        {
          __break(0xC471u);
          JUMPOUT(0x198C747B0);
        }
        v55 = v32;
        v34 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v34 == *(_DWORD *)(a2 + 8))
        {
          result = (_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v34 + 1, (unint64_t)&v55);
          *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 12)) = *result;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v34) = v32;
        }
        ++*(_DWORD *)(a2 + 12);
        ++v26;
        v27 -= 4;
      }
      while (v27);
    }
    v35 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v35)
    {
      v36 = 0;
      v37 = *(_DWORD **)(a3 + 8);
      v38 = 28 * v35;
      do
      {
        if (*v37 == 2)
        {
          v55 = 0;
          v39 = *(unsigned int *)(v9 + 12);
          if ((_DWORD)v39 == *(_DWORD *)(v9 + 8))
          {
            result = (_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v39 + 1, (unint64_t)&v55);
            *(_QWORD *)(*(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 12)) = *result;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v9 + 8 * v39) = 0;
          }
        }
        else
        {
          if (*(_DWORD *)(a4 + 68) <= v36)
            goto LABEL_81;
          v40 = *(_DWORD *)(*(_QWORD *)(a4 + 56) + 4 * v36);
          if (v40 < 4)
            v41 = 0;
          else
            v41 = *(_DWORD *)((v40 & 0xFFFFFFFC) + a5[3] - 4);
          v42 = (v40 - v41);
          v43 = a5[23];
          v44 = v42 + v43;
          if (v43 > v44 || v43 + a5[1] < v44)
          {
            __break(0xC471u);
            JUMPOUT(0x198C747F0);
          }
          v55 = v44;
          v46 = *(unsigned int *)(v9 + 12);
          if ((_DWORD)v46 == *(_DWORD *)(v9 + 8))
          {
            result = (_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v46 + 1, (unint64_t)&v55);
            *(_QWORD *)(*(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 12)) = *result;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v9 + 8 * v46) = v44;
          }
          ++v36;
        }
        ++*(_DWORD *)(v9 + 12);
        v37 += 7;
        v38 -= 28;
      }
      while (v38);
    }
  }
  return result;
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)2367,unsigned int,char const*,char const*>(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  JSC::ExecutableMemoryHandle *v40;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a1, a2, a3, a4, a5, &v39, a6);
  v15 = (unsigned int *)v40;
  *a7 = v39;
  a7[1] = 0;
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v17 = (unsigned int *)a7[1];
    a7[1] = v15;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
    }
    v20 = (unsigned int *)v40;
    v40 = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v20, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
      }
    }
  }
}

JSC::Compilation **std::unique_ptr<JSC::Compilation>::operator=[abi:sn180100](JSC::Compilation **a1, JSC::Compilation **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Compilation *v9;
  JSC::Compilation *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    JSC::Compilation::~Compilation(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return a1;
}

JSC::Compilation **std::unique_ptr<JSC::Compilation>::~unique_ptr[abi:sn180100](JSC::Compilation **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Compilation *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    JSC::Compilation::~Compilation(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return a1;
}

uint64_t JSC::Wasm::Callee::entrypoint(JSC::Wasm::Callee *this)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = &v3;
  v3 = 0;
  JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>((uint64_t)this, &v2);
  return v3;
}

void JSC::NativeCalleeRegistry::addPCToCodeOriginMap(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;

  v14 = a2;
  if (__ldaxr((unsigned __int8 *)a1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)a1))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1);
LABEL_5:
  WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::add<WTF::Box<JSC::PCToCodeOriginMap>>((uint64_t *)(a1 + 16), &v14, a3, (uint64_t)v13);
  if (!v13[16])
  {
    __break(0xC471u);
    return;
  }
  v12 = __ldxr((unsigned __int8 *)a1);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)a1))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a1, 0, v6, v7, v8, v9, v10, v11);
}

unint64_t *WTF::Box<JSC::PCToCodeOriginMap>::~Box(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  unint64_t v14;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 24);
      if (v13)
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_QWORD *)(v9 + 32);
      if (v14)
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void JSC::Wasm::CalleeGroup::setBBQCallee(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;

  v9 = a2;
  v11 = *(unsigned int **)(a1 + 24);
  if (!v11 || (v12 = *v11) == 0)
  {
    WTF::FixedVector<WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::FixedVector(&v33, *(unsigned int *)(a1 + 4));
    v18 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v33;
    v33 = 0;
    v34 = v18;
    WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::~FixedVector(&v34, v19, v20, v21, v22, v23, v24, v25);
    WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::~FixedVector(&v33, v26, v27, v28, v29, v30, v31, v32);
    v11 = *(unsigned int **)(a1 + 24);
    v12 = *v11;
  }
  if (v12 <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198C74B6CLL);
  }
  v13 = &v11[2 * v9];
  v14 = *a3;
  *a3 = 0;
  v15 = (unsigned int *)*((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v14;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::Wasm::CalleeGroup::wasmEntrypointCalleeFromFunctionIndexSpace(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  _DWORD *v3;
  unsigned int v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v8;
  uint64_t v9;

  v3 = (_DWORD *)a1[9];
  if (v3)
  {
    LODWORD(v3) = *v3;
    if (v3 > a3)
      goto LABEL_20;
  }
  v4 = a3 - (_DWORD)v3;
  v5 = (unsigned int *)a1[2];
  if (!v5 || !*v5)
    goto LABEL_27;
  if (*v5 <= v4)
  {
    __break(0xC471u);
    JUMPOUT(0x198C74C54);
  }
  v6 = *(_QWORD *)&v5[2 * v4 + 2];
  if (!v6)
  {
LABEL_27:
    v8 = (unsigned int *)a1[3];
    if (!v8 || !*v8)
      goto LABEL_12;
    if (*v8 <= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x198C74C74);
    }
    v6 = *(_QWORD *)&v8[2 * v4 + 2];
    if (!v6)
    {
LABEL_12:
      if (!byte_1ECF4C798)
      {
        v9 = a1[5];
        if (*(_DWORD *)(v9 + 4) <= v4)
        {
          __break(0xC471u);
          JUMPOUT(0x198C74C94);
        }
        return *(_QWORD *)(v9 + 8 * v4 + 8);
      }
      v9 = a1[4];
      if (*(_DWORD *)(v9 + 4) > v4)
        return *(_QWORD *)(v9 + 8 * v4 + 8);
LABEL_20:
      __break(0xC471u);
      JUMPOUT(0x198C74C34);
    }
  }
  return v6;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::repatchNearCall<(WTF::PtrTag)64376,(WTF::PtrTag)64376>(JSC::ExecutableAllocator *a1, char a2, unint64_t a3)
{
  JSC::ExecutableAllocator *v3;

  v3 = a1;
  if (!a2)
  {
    v3 = (JSC::ExecutableAllocator *)((char *)a1 - 4);
    JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>(v3, (unint64_t)v3, a3);
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>(a1, (unint64_t)a1, a3);
LABEL_5:
    sys_icache_invalidate(v3, 4uLL);
    return;
  }
  __break(0xC471u);
}

uint64_t JSC::Wasm::CallsiteCollection::addCallsites(uint64_t result, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v4;
  int *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v4 = result;
  v5 = *(int **)(a3 + 72);
  if (v5)
    v6 = *v5;
  else
    v6 = 0;
  v7 = *a4;
  if (*a4)
    v8 = (uint64_t)(*a4 + 2);
  else
    v8 = 0;
  if (v7)
    v9 = (uint64_t)&(*a4)[8 * *v7 + 2];
  else
    v9 = 0;
  if (v8 != v9)
  {
    while (1)
    {
      v10 = *(_DWORD *)(v8 + 16) - v6;
      v11 = *(unsigned int **)(v4 + 16);
      if (*v11 <= v10)
        break;
      v12 = &v11[4 * v10];
      v13 = (uint64_t)(v12 + 2);
      v14 = *(_QWORD *)v8;
      BYTE8(v19) = *(_BYTE *)(v8 + 8);
      *(_QWORD *)&v19 = v14;
      v20 = 0;
      v15 = v12[5];
      if ((_DWORD)v15 == v12[4])
      {
        result = WTF::Vector<JSC::DFG::DesiredTransition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v15 + 1, (unint64_t)&v19);
        v16 = *(_QWORD *)v13 + 24 * *(unsigned int *)(v13 + 12);
        v17 = *(_OWORD *)result;
        v18 = *(_QWORD *)(result + 16);
      }
      else
      {
        v16 = *(_QWORD *)v13 + 24 * v15;
        v17 = v19;
        v18 = v20;
      }
      *(_QWORD *)(v16 + 16) = v18;
      *(_OWORD *)v16 = v17;
      ++*(_DWORD *)(v13 + 12);
      v8 += 32;
      if (v8 == v9)
        return result;
    }
    result = 146;
    __break(0xC471u);
  }
  return result;
}

void JSC::Wasm::CallsiteCollection::updateCallsitesToCallUs(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  JSC::ExecutableAllocator *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  char v36;

  v8 = (unsigned int *)*((_QWORD *)a1 + 2);
  if (*v8 <= a5)
  {
    __break(0xC471u);
    goto LABEL_40;
  }
  v12 = a1;
  v13 = a5;
  v14 = &v8[4 * a5];
  v15 = v14[5];
  if (v15)
  {
    v16 = *((_QWORD *)v14 + 1);
    v17 = v16 + 24 * v15;
    do
    {
      v18 = *(_QWORD *)v16;
      if (*(_BYTE *)(v16 + 8))
      {
        if (*(_BYTE *)(v16 + 8) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198C75100);
        }
        v19 = a4;
        if (!((unint64_t)(((uint64_t)(a4 - v18) >> 2) + 0x2000000) >> 26))
          goto LABEL_10;
        v20 = (unsigned __int8 *)qword_1ECF4C1F0;
        if (!qword_1ECF4C1F0)
        {
          __break(0xC471u);
          JUMPOUT(0x198C75140);
        }
      }
      else
      {
        v18 -= 4;
        v19 = a4;
        if (!((unint64_t)(((uint64_t)(a4 - v18) >> 2) + 0x2000000) >> 26))
          goto LABEL_10;
        v20 = (unsigned __int8 *)qword_1ECF4C1F0;
        if (!qword_1ECF4C1F0)
        {
          __break(0xC471u);
LABEL_40:
          JUMPOUT(0x198C750A0);
        }
      }
      v35 = v20;
      v36 = 1;
      if (__ldaxr(v20))
      {
        __clrex();
      }
      else if (!__stxr(1u, v20))
      {
        goto LABEL_17;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v20);
LABEL_17:
      a1 = (unsigned __int8 *)JSC::FixedVMPoolExecutableAllocator::islandForJumpLocation(v20, (uint64_t)&v35, v18, a4, 1, 0, a7, a8);
      v19 = (unint64_t)a1;
      if (v36)
      {
        a1 = v35;
        v26 = __ldxr(v35);
        if (v26 != 1)
        {
          __clrex();
LABEL_22:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(a1, 0, v22, v23, v24, v25, a7, a8);
          goto LABEL_10;
        }
        if (__stlxr(0, v35))
          goto LABEL_22;
      }
LABEL_10:
      *(_QWORD *)(v16 + 16) = v19;
      v16 += 24;
    }
    while (v16 != v17);
  }
  JSC::Wasm::resetInstructionCacheOnAllThreads((JSC::Wasm *)a1);
  __dmb(0xAu);
  v27 = *(unsigned int **)(a3 + 56);
  if (*v27 <= a5)
  {
    __break(0xC471u);
    JUMPOUT(0x198C750C0);
  }
  *(_QWORD *)&v27[2 * v13 + 2] = a4;
  v28 = (unsigned int *)*((_QWORD *)v12 + 2);
  if (*v28 <= a5)
  {
    __break(0xC471u);
    JUMPOUT(0x198C750E0);
  }
  v29 = &v28[4 * v13];
  v30 = v29[5];
  if (v30)
  {
    v31 = *((_QWORD *)v29 + 1);
    v32 = v31 + 24 * v30;
    do
    {
      v33 = *(JSC::ExecutableAllocator **)v31;
      v34 = *(_QWORD *)(v31 + 16);
      if (*(_BYTE *)(v31 + 8))
      {
        if (*(_BYTE *)(v31 + 8) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198C75120);
        }
        JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>(*(JSC::ExecutableAllocator **)v31, *(_QWORD *)v31, v34);
      }
      else
      {
        v33 = (JSC::ExecutableAllocator *)((char *)v33 - 4);
        JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>(v33, (unint64_t)v33, v34);
      }
      sys_icache_invalidate(v33, 4uLL);
      v31 += 24;
    }
    while (v31 != v32);
  }
}

uint64_t *std::unique_ptr<JSC::CCallHelpers>::~unique_ptr[abi:sn180100](uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return a1;
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)2367,unsigned int,char const*>(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  JSC::ExecutableMemoryHandle *v40;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a1, a2, a3, a4, a5, &v39, a6);
  v15 = (unsigned int *)v40;
  *a7 = v39;
  a7[1] = 0;
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v17 = (unsigned int *)a7[1];
    a7[1] = v15;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
    }
    v20 = (unsigned int *)v40;
    v40 = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v20, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
      }
    }
  }
}

void JSC::Wasm::JSEntrypointJITCallee::setEntrypoint(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::Compilation *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;

  v10 = *a2;
  *a2 = 0;
  v11 = (JSC::Compilation *)a1[4];
  a1[4] = v10;
  if (v11)
  {
    JSC::Compilation::~Compilation(v11, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = a2[1];
  a2[1] = 0;
  v21 = a1[5];
  a1[5] = v20;
  if (v21)
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  a1[6] = a2[2];
  v31 = a1;
  if (__ldaxr((unsigned __int8 *)&JSC::calleeRegistry))
  {
    __clrex();
LABEL_7:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::calleeRegistry);
    goto LABEL_8;
  }
  if (__stxr(1u, (unsigned __int8 *)&JSC::calleeRegistry))
    goto LABEL_7;
LABEL_8:
  WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::add(&qword_1ECF53D80, (uint64_t *)&v31, a3, a4, a5, a6, a7, a8, (uint64_t)&v30);
  v29 = __ldxr((unsigned __int8 *)&JSC::calleeRegistry);
  if (v29 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&JSC::calleeRegistry))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::calleeRegistry, 0, v23, v24, v25, v26, v27, v28);
}

void JSC::Wasm::JSEntrypointInterpreterCallee::setReplacement(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::Callee *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*(_QWORD *)(a1 + 64))
  {
    v8 = *a2;
    *a2 = 0;
    v9 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v8;
    if (v9)
    {
      do
      {
        v10 = __ldaxr((unsigned int *)v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unsigned int *)v9));
      if (!v11)
      {
        atomic_store(1u, (unsigned int *)v9);
        JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v9, a3, a4, a5, a6, a7, a8);
        if (*(_BYTE *)(v9 + 4) == 1)
          JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v9, v12, v13, v14, v15, v16, v17, v18);
      }
    }
  }
}

void WTF::HashMap<unsigned int,std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>,WTF::HashTableTraits>::add<std::tuple<WTF::Ref<JSC::Wasm::JSEntrypointJITCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointJITCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointJITCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>(uint64_t a1, uint64_t *a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  JSC::LinkBuffer *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::Wasm::InternalFunction *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
  v17 = (((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) ^ (((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) >> 16)) & v14;
  v18 = v12 + 32 * v17;
  v19 = *(_DWORD *)v18;
  if (*(_DWORD *)v18 != -1)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (v19 == v15)
      {
        if ((v13 & 1) != 0)
          v48 = 0;
        else
          v48 = *(unsigned int *)(v12 - 4);
        v54 = 0;
        v55 = v12 + 32 * v48;
        goto LABEL_39;
      }
      if (v19 == -2)
        v20 = v18;
      v17 = ((_DWORD)v17 + v21) & v14;
      v18 = v12 + 32 * v17;
      v19 = *(_DWORD *)v18;
      ++v21;
    }
    while (*(_DWORD *)v18 != -1);
    if (v20)
    {
      *(_DWORD *)v20 = -1;
      *(_QWORD *)(v20 + 16) = 0;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 8) = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v18 = v20;
    }
  }
  *(_DWORD *)v18 = v15;
  v22 = *a4;
  *a4 = 0;
  v23 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = v22;
  if (v23)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v23));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v23);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v23, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v23 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v23, (JSC::Wasm::Callee *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  v26 = a4[1];
  a4[1] = 0;
  v27 = *(JSC::LinkBuffer **)(v18 + 16);
  *(_QWORD *)(v18 + 16) = v26;
  if (v27)
  {
    JSC::LinkBuffer::~LinkBuffer(v27, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  v36 = a4[2];
  a4[2] = 0;
  v37 = *(JSC::Wasm::InternalFunction **)(v18 + 24);
  *(_QWORD *)(v18 + 24) = v36;
  if (v37)
  {
    JSC::Wasm::InternalFunction::~InternalFunction(v37, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
  }
  v46 = *a2;
  if (*a2)
    v47 = *(_DWORD *)(v46 - 12) + 1;
  else
    v47 = 1;
  *(_DWORD *)(v46 - 12) = v47;
  v49 = *a2;
  if (*a2)
    v50 = *(_DWORD *)(v49 - 12);
  else
    v50 = 0;
  v51 = (*(_DWORD *)(v49 - 16) + v50);
  v52 = *(unsigned int *)(v49 - 4);
  if (v52 > 0x400)
  {
    if (v52 <= 2 * v51)
      goto LABEL_30;
  }
  else if (3 * v52 <= 4 * v51)
  {
    if (!(_DWORD)v52)
    {
      v53 = 8;
LABEL_35:
      v18 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, v53, (int *)v18);
      v49 = *a2;
      if (*a2)
        v52 = *(unsigned int *)(v49 - 4);
      else
        v52 = 0;
      goto LABEL_38;
    }
LABEL_30:
    v53 = (_DWORD)v52 << (6 * *(_DWORD *)(v49 - 12) >= (2 * v52));
    goto LABEL_35;
  }
LABEL_38:
  v55 = v49 + 32 * v52;
  v54 = 1;
LABEL_39:
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v55;
  *(_BYTE *)(a1 + 16) = v54;
}

uint64_t std::tuple<WTF::Ref<JSC::Wasm::JSEntrypointJITCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointJITCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointJITCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>::~tuple(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::InternalFunction *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::LinkBuffer *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v29;
  unsigned int v30;
  JSC::Wasm::Callee *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::Wasm::Callee *v38;

  v9 = *(JSC::Wasm::InternalFunction **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    JSC::Wasm::InternalFunction::~InternalFunction(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  v18 = *(JSC::LinkBuffer **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v18)
  {
    JSC::LinkBuffer::~LinkBuffer(v18, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  v27 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v27)
  {
    do
    {
      v29 = __ldaxr(v27);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v27));
    if (!v30)
    {
      atomic_store(1u, v27);
      v38 = (JSC::Wasm::Callee *)v27;
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, (uint64_t)v27, a3, a4, a5, a6, a7, a8);
      if (*((_BYTE *)v38 + 4) == 1)
        JSC::Wasm::Callee::destroy(v38, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  return a1;
}

JSC::LinkBuffer **std::unique_ptr<JSC::LinkBuffer>::~unique_ptr[abi:sn180100](JSC::LinkBuffer **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::LinkBuffer *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    JSC::LinkBuffer::~LinkBuffer(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return a1;
}

JSC::Wasm::InternalFunction **std::unique_ptr<JSC::Wasm::InternalFunction>::~unique_ptr[abi:sn180100](JSC::Wasm::InternalFunction **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::InternalFunction *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    JSC::Wasm::InternalFunction::~InternalFunction(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return a1;
}

void JSC::Wasm::BBQPlan::compileFunction(JSC::Wasm::BBQPlan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  float v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::Wasm::InternalFunction *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  pthread_key_t *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unsigned int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  unsigned __int8 *v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::Wasm::TypeDefinition *v102;
  uint64_t v103;
  JSC::CCallHelpers *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  pthread_key_t *v123;
  _QWORD *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  unsigned int v135;
  unint64_t v136;
  JSC::Wasm::InternalFunction *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  JSC::Wasm::InternalFunction *v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  JSC::LinkBuffer *v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  JSC::Wasm::InternalFunction *v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  JSC::Wasm::Callee *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int *v187;
  WTF *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t CachedUnrolling;
  uint64_t v197;
  uint64_t v198;
  const JSC::Wasm::Type *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  const JSC::Wasm::TypeDefinition *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  JSC::LinkBuffer *v211;
  JSC::Wasm::InternalFunction *v212;
  WTF::StringImpl *v213[3];
  JSC::Wasm::InternalFunction *v214;
  unsigned int v215;

  v215 = a2;
  if (*((_DWORD *)this + 37) <= a2)
  {
    __break(0xC471u);
    goto LABEL_106;
  }
  v8 = a2;
  v10 = *((_QWORD *)this + 17) + 16 * a2;
  v11 = *(_QWORD *)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)v10 = 0;
    *(_DWORD *)(v10 + 8) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = v8;
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  if ((_BYTE)word_1ECF4C6D4)
  {
    v13 = WTF::fastMalloc((WTF *)0x50);
    v14 = v13;
    *(_OWORD *)(v13 + 24) = 0u;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_QWORD *)(v13 + 72) = 0;
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 5) = 0;
    v15 = DWORD2(xmmword_1ECF4C6D8);
    *(_DWORD *)(v13 + 8) = DWORD2(xmmword_1ECF4C6D8);
    if (v15 == 0x7FFFFFFF)
    {
      *(_DWORD *)(v13 + 8) = 0x7FFFFFFF;
      *(_DWORD *)v13 = 0x80000000;
    }
    else if (v15 >= 1)
    {
      v16 = (double)v15;
      if ((double)v15 > (double)(int)xmmword_1ECF4C524)
        v16 = (double)(int)xmmword_1ECF4C524;
      *(_DWORD *)v13 = (int)-v16;
      v17 = v16;
      *(float *)(v13 + 4) = v17;
    }
    *(_DWORD *)(v13 + 13) = 0;
  }
  else
  {
    v14 = 0;
  }
  v18 = *((_QWORD *)this + 2);
  v19 = HIBYTE(dword_1ECF4C7B0);
  if (HIBYTE(dword_1ECF4C7B0))
  {
    if (HIBYTE(word_1ECF4C79E))
    {
      v19 = 1;
    }
    else
    {
      if (*(_DWORD *)(v18 + 132) <= v8)
      {
        __break(0xC471u);
        JUMPOUT(0x198C75E80);
      }
      v19 = *(_BYTE *)(*(_QWORD *)(v18 + 120) + 40 * v8 + 32) & 1;
    }
  }
  if (*((_DWORD *)this + 109) <= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198C75E88);
  }
  v20 = *(_DWORD *)(v18 + 36) + v8;
  v21 = v19 ^ 1;
  v22 = *((_QWORD *)this + 53);
  v23 = (uint64_t *)(v22 + 72 * v8);
  v24 = *(_QWORD *)(v18 + 248);
  if (*(_DWORD *)(v24 + 52) > v20)
    v25 = *(_QWORD *)(v24 + 40) + 16 * v20;
  else
    v25 = 0;
  do
    v26 = __ldaxr((unsigned int *)v24);
  while (__stlxr(v26 + 1, (unsigned int *)v24));
  v27 = WTF::fastMalloc((WTF *)0xC0);
  v28 = v27;
  *(_DWORD *)v27 = 1;
  *(_WORD *)(v27 + 4) = 1;
  *(_BYTE *)(v27 + 6) = 2;
  if (!v25)
    v25 = v20 | 0x8000000000000000;
  *(_QWORD *)(v27 + 8) = v25;
  *(_QWORD *)(v27 + 16) = v24;
  *(_OWORD *)(v27 + 24) = 0u;
  *(_OWORD *)(v27 + 40) = 0u;
  *(_OWORD *)(v27 + 56) = 0u;
  *(_OWORD *)(v27 + 72) = 0u;
  *(_OWORD *)(v27 + 88) = 0u;
  *(_OWORD *)(v27 + 104) = 0u;
  *(_QWORD *)(v27 + 120) = v14;
  *(_BYTE *)(v27 + 128) = 0;
  *(_BYTE *)(v27 + 136) = 0;
  *(_QWORD *)(v27 + 152) = 0;
  *(_QWORD *)(v27 + 160) = 0;
  *(_QWORD *)(v27 + 144) = 0;
  *(_BYTE *)(v27 + 168) = 0;
  *(_DWORD *)(v27 + 172) = v21;
  *(_QWORD *)(v27 + 176) = 0;
  *(_QWORD *)(v27 + 184) = 0;
  v29 = v215;
  if (*((_DWORD *)this + 37) <= v215)
  {
    __break(0xC471u);
    JUMPOUT(0x198C75E90);
  }
  JSC::Wasm::BBQPlan::compileFunction(v213, (uint64_t)this, v215, v27, v22 + 72 * v12, *((_QWORD *)this + 17) + 16 * v215, v14);
  if (*((_DWORD *)this + 95) <= v29)
  {
    __break(0xC471u);
    JUMPOUT(0x198C75E98);
  }
  v37 = *((_QWORD *)this + 46);
  v38 = *(JSC::Wasm::InternalFunction **)(v37 + 8 * v29);
  *(WTF::StringImpl **)(v37 + 8 * v29) = v213[0];
  if (v38)
  {
    JSC::Wasm::InternalFunction::~InternalFunction(v38, v30, v31, v32, v33, v34, v35, v36);
    WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
  }
  v47 = *(_QWORD *)(v22 + 72 * v12 + 8);
  v48 = WTF::fastMalloc((WTF *)0xE0);
  *(_QWORD *)v48 = 0;
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v48 + 16) = v28;
  *(_QWORD *)(v48 + 24) = v48 + 32;
  *(_DWORD *)(v48 + 160) = 128;
  v49 = (pthread_key_t *)JSC::threadSpecificAssemblerData((JSC *)v48);
  v50 = WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::operator*(v49);
  v59 = v50 + 1;
  v58 = *v50;
  if ((_QWORD *)*v50 != v50 + 1)
  {
    v60 = v50;
    v61 = *((_DWORD *)v50 + 34);
    if (*(_DWORD *)(v48 + 160) < v61)
    {
      v62 = *(_QWORD *)(v48 + 24);
      if (v62 && v62 != v48 + 32)
      {
        WTF::fastFree(v62, v51, v52, v53, v54, v55, v56, v57);
        v58 = *v60;
        v61 = *((_DWORD *)v60 + 34);
      }
      *(_QWORD *)(v48 + 24) = v58;
      *(_DWORD *)(v48 + 160) = v61;
      *v60 = v59;
      *((_DWORD *)v60 + 34) = 128;
    }
  }
  *(_BYTE *)(v48 + 168) = 1;
  *(_DWORD *)(v48 + 169) = 0;
  *(_DWORD *)(v48 + 176) = 15;
  *(_OWORD *)(v48 + 184) = 0u;
  *(_OWORD *)(v48 + 200) = 0u;
  *(_QWORD *)(v48 + 216) = 0;
  JSC::LinkBuffer::linkCode(v48, v47, 0, v53, v54, v55, v56, v57);
  if (*(_BYTE *)(v48 + 169))
  {
    if (*((_DWORD *)this + 99) > v29)
    {
      v70 = *((_QWORD *)this + 48);
      v71 = *(_QWORD *)(v70 + 8 * v29);
      *(_QWORD *)(v70 + 8 * v29) = v48;
      v48 = v71;
      if (!v71)
        goto LABEL_36;
      goto LABEL_35;
    }
    __break(0xC471u);
LABEL_106:
    JUMPOUT(0x198C75E78);
  }
LABEL_35:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v48, v63, v64, v65, v66, v67, v68, v69);
  WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
LABEL_36:
  if (*((_DWORD *)this + 113) <= v29)
  {
    __break(0xC471u);
    JUMPOUT(0x198C75EA0);
  }
  v80 = *((_QWORD *)this + 55);
  v81 = *(_QWORD *)(v80 + 8 * v29);
  *(_QWORD *)(v80 + 8 * v29) = v28;
  if (v81)
  {
    do
    {
      v82 = __ldaxr((unsigned int *)v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, (unsigned int *)v81));
    if (!v83)
    {
      atomic_store(1u, (unsigned int *)v81);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v81, v64, v65, v66, v67, v68, v69);
      if (*(_BYTE *)(v81 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v81, v180, v181, v182, v183, v184, v185, v186);
    }
  }
  v84 = *((_QWORD *)this + 16);
  if (v84)
  {
    v85 = *(_DWORD *)(v84 - 8);
    v86 = 9 * ((v215 + ~(v215 << 15)) ^ ((v215 + ~(v215 << 15)) >> 10));
    v87 = (((v86 ^ (v86 >> 6)) + ~((v86 ^ (v86 >> 6)) << 11)) ^ (((v86 ^ (v86 >> 6)) + ~((v86 ^ (v86 >> 6)) << 11)) >> 16)) & v85;
    v88 = *(_DWORD *)(v84 + 4 * v87);
    if (v88 == v215)
      goto LABEL_54;
    v89 = 1;
    while (v88 != -1)
    {
      v87 = (v87 + v89) & v85;
      v88 = *(_DWORD *)(v84 + 4 * v87);
      ++v89;
      if (v88 == v215)
        goto LABEL_54;
    }
  }
  v90 = *((_QWORD *)this + 2);
  v91 = *(_QWORD *)(v90 + 320);
  v92 = (unint64_t *)(2 * v91);
  if (v91 < 0)
    v93 = 63;
  else
    v93 = *v92;
  if (v93 <= v20)
    return;
  v94 = (_QWORD *)(v90 + 320);
  v95 = v92 + 1;
  v96 = v91 >= 0 ? v95 : v94;
  if (((*(_QWORD *)((char *)v96 + ((v20 >> 3) & 0x1FFFFFF8)) >> v20) & 1) == 0)
    return;
LABEL_54:
  v97 = (unsigned __int8 *)this + 13;
  if (__ldaxr((unsigned __int8 *)this + 13))
  {
    __clrex();
LABEL_57:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 13);
    goto LABEL_58;
  }
  if (__stxr(1u, v97))
    goto LABEL_57;
LABEL_58:
  v99 = *((_QWORD *)this + 2);
  v100 = v215;
  if (*(_DWORD *)(v99 + 52) <= v215)
  {
    __break(0xC471u);
    JUMPOUT(0x198C75EA8);
  }
  v101 = *(_QWORD *)(*(_QWORD *)(v99 + 40) + 8 * v215);
  v102 = (JSC::Wasm::TypeDefinition *)v101;
  if (*(_DWORD *)(v101 + 32) == 4)
  {
    v187 = *(unsigned int **)(v101 + 8);
    v188 = *(WTF **)v187;
    v102 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v187 + 8) + 8 * v187[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v102))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v101, v189, v190, v191, v192, v193, v194, v195);
      if (v203)
      {
        v102 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v102 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v102, v188, v197, v198, v199, v200, v201, v202);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v101, v102, v204, v205, v206, v207, v208, v209);
      }
    }
  }
  if (*((_DWORD *)v102 + 8) == 5)
    v102 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v102 + 1);
  v103 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v103 = 1;
  *(_WORD *)(v103 + 4) = 257;
  *(_BYTE *)(v103 + 6) = 6;
  *(_QWORD *)(v103 + 8) = 0x4000000000000000;
  *(_QWORD *)(v103 + 16) = 0;
  *(_OWORD *)(v103 + 24) = 0u;
  *(_OWORD *)(v103 + 40) = 0u;
  v104 = (JSC::CCallHelpers *)WTF::fastMalloc((WTF *)0x160);
  JSC::CCallHelpers::CCallHelpers(v104, 0);
  v112 = *v23;
  *v23 = (uint64_t)v104;
  if (v112)
  {
    v113 = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler(v112, v105, v106, v107, v108, v109, v110, v111);
    WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
  }
  if (*((_DWORD *)this + 37) <= v100)
  {
    __break(0xC471u);
    JUMPOUT(0x198C75EB0);
  }
  JSC::Wasm::createJSToWasmWrapper(*v23, v103, 0, (unsigned __int8 **)v102, *((_QWORD *)this + 17) + 16 * v100, *((_QWORD *)this + 2), *((unsigned __int8 *)this + 12), v100, (uint64_t *)&v214);
  v121 = *v23;
  v122 = WTF::fastMalloc((WTF *)0xE0);
  *(_QWORD *)v122 = 0;
  *(_QWORD *)(v122 + 8) = 0;
  *(_QWORD *)(v122 + 16) = v28;
  *(_QWORD *)(v122 + 24) = v122 + 32;
  *(_DWORD *)(v122 + 160) = 128;
  v123 = (pthread_key_t *)JSC::threadSpecificAssemblerData((JSC *)v122);
  v124 = WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::operator*(v123);
  v133 = v124 + 1;
  v132 = *v124;
  if ((_QWORD *)*v124 != v124 + 1)
  {
    v134 = v124;
    v135 = *((_DWORD *)v124 + 34);
    if (*(_DWORD *)(v122 + 160) < v135)
    {
      v136 = *(_QWORD *)(v122 + 24);
      if (v136 && v136 != v122 + 32)
      {
        WTF::fastFree(v136, v125, v126, v127, v128, v129, v130, v131);
        v132 = *v134;
        v135 = *((_DWORD *)v134 + 34);
      }
      *(_QWORD *)(v122 + 24) = v132;
      *(_DWORD *)(v122 + 160) = v135;
      *v134 = v133;
      *((_DWORD *)v134 + 34) = 128;
    }
  }
  *(_BYTE *)(v122 + 168) = 1;
  *(_DWORD *)(v122 + 169) = 0;
  *(_DWORD *)(v122 + 176) = 15;
  *(_OWORD *)(v122 + 184) = 0u;
  *(_OWORD *)(v122 + 200) = 0u;
  *(_QWORD *)(v122 + 216) = 0;
  JSC::LinkBuffer::linkCode(v122, v121, 0, v127, v128, v129, v130, v131);
  v210 = v103;
  v211 = (JSC::LinkBuffer *)v122;
  v137 = v214;
  v214 = 0;
  v212 = v137;
  WTF::HashMap<unsigned int,std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>,WTF::HashTableTraits>::add<std::tuple<WTF::Ref<JSC::Wasm::JSEntrypointJITCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointJITCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointJITCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>((uint64_t)v213, (uint64_t *)this + 52, (int *)&v215, &v210, v138, v139, v140, v141);
  v149 = v212;
  v212 = 0;
  if (v149)
  {
    JSC::Wasm::InternalFunction::~InternalFunction(v149, v142, v143, v144, v145, v146, v147, v148);
    WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
  }
  v158 = v211;
  v211 = 0;
  if (v158)
  {
    JSC::LinkBuffer::~LinkBuffer(v158, v142, v143, v144, v145, v146, v147, v148);
    WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
  }
  v167 = v210;
  v210 = 0;
  if (v167)
  {
    do
    {
      v178 = __ldaxr((unsigned int *)v167);
      v179 = v178 - 1;
    }
    while (__stlxr(v179, (unsigned int *)v167));
    if (!v179)
    {
      atomic_store(1u, (unsigned int *)v167);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v167, v143, v144, v145, v146, v147, v148);
      if (*(_BYTE *)(v167 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v167, (JSC::Wasm::Callee *)v142, v143, v144, v145, v146, v147, v148);
    }
  }
  v168 = v214;
  v214 = 0;
  if (v168)
  {
    JSC::Wasm::InternalFunction::~InternalFunction(v168, v142, v143, v144, v145, v146, v147, v148);
    WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
  }
  v177 = __ldxr(v97);
  if (v177 == 1)
  {
    if (!__stlxr(0, v97))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v97, 0, v143, v144, v145, v146, v147, v148);
}

uint64_t WTF::makeString<WTF::String,WTF::ASCIILiteral,unsigned int>@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, int **a5@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  int v15;
  char v16;
  _BOOL4 v17;
  uint64_t result;

  v8 = *a1;
  if (a3)
  {
    v9 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_24;
  }
  else
  {
    v9 = 0;
  }
  if (v8)
    v10 = *(_DWORD *)(v8 + 4);
  else
    v10 = 0;
  v11 = 0;
  v12 = a4;
  do
  {
    ++v11;
    v13 = v12 > 9;
    v12 /= 0xAu;
  }
  while (v13);
  if (v11 < 0
    || ((v14 = __OFADD__(v9, v11), v15 = v9 + v11, !v14) ? (v16 = 0) : (v16 = 1),
        v10 < 0 || (v16 & 1) != 0 || __OFADD__(v10, v15)))
  {
    *a5 = 0;
    goto LABEL_24;
  }
  v17 = !v8 || (*(_BYTE *)(v8 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>((v10 + v15), v17, v8, a2, v9, a4, a5);
  if (!*a5)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x198C75F78);
  }
  return result;
}

void JSC::Wasm::BBQPlan::didCompleteCompilation(unsigned int **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  JSC::Wasm::TypeDefinition *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::LinkBuffer *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  WTF *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  char v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  JSC::Compilation *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  WTF::StringImpl *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  WTF *v96;
  WTF::StringImpl *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int *v105;
  uint64_t v106;
  char v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF *v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF *v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  _QWORD *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  JSC::Compilation *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  WTF::StringImpl *v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  WTF *v160;
  WTF::StringImpl *v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  unint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int *v242;
  WTF *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t CachedUnrolling;
  uint64_t v252;
  uint64_t v253;
  const JSC::Wasm::Type *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  const JSC::Wasm::TypeDefinition *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  BOOL v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  WTF **v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int *v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t v296;
  unsigned int *v297;
  unsigned int *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  BOOL v304;
  unint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  JSC::ExecutableAllocator *v308;
  JSC *v309;
  int v310;
  WTF *v312;
  WTF *v313;
  uint64_t v314;
  WTF::AtomStringImpl *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  WTF::StringImpl *v322;
  unsigned int *v323;
  unint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  JSC::Wasm::TypeDefinition *v332;
  unint64_t v333;
  unsigned int *v334;
  WTF::StringImpl *v335;
  WTF *v336;
  WTF::StringImpl *v337;
  WTF *v338;
  unint64_t v339;
  unsigned int *v340;
  WTF::StringImpl *v341;
  WTF *v342;
  WTF::StringImpl *v343;
  WTF *v344;
  WTF::StringImpl *v345;
  unsigned int v346;
  WTF *v347;
  WTF *v348;
  __int128 v349;
  _BYTE v350[128];
  uint64_t v351;

  v351 = *MEMORY[0x1E0C80C00];
  JSC::Wasm::EntryPlan::generateStubsIfNecessary((JSC::Wasm::EntryPlan *)this, a2, a3, a4, a5, a6, a7, a8);
  v9 = this[2];
  if (!v9[33])
  {
LABEL_185:
    v296 = *((unsigned int *)this + 37);
    if (!(_DWORD)v296)
      return;
    v297 = this[17];
    v298 = &v297[4 * v296];
    while (1)
    {
      v299 = v297[3];
      if ((_DWORD)v299)
        break;
LABEL_219:
      v297 += 4;
      if (v297 == v298)
        return;
    }
    v300 = 32 * v299;
    v301 = (unint64_t *)(*(_QWORD *)v297 + 16);
    while (1)
    {
      v302 = *v301;
      v303 = this[2][9];
      v304 = *v301 >= v303;
      v305 = *v301 - v303;
      if (v304)
      {
        if (v305 >= *((unsigned int *)this + 95))
        {
          __break(0xC471u);
          JUMPOUT(0x198C76E1CLL);
        }
        v306 = *(unint64_t **)(*(_QWORD *)&this[46][2 * v305] + 48);
      }
      else
      {
        if (v302 >= *((unsigned int *)this + 27))
        {
          __break(0xC471u);
          JUMPOUT(0x198C76E24);
        }
        v306 = (unint64_t *)&this[12][4 * v302];
      }
      v307 = *v306;
      v308 = (JSC::ExecutableAllocator *)*(v301 - 2);
      if (*((_BYTE *)v301 - 8))
      {
        if (*((_BYTE *)v301 - 8) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198C76E10);
        }
        JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>((JSC::ExecutableAllocator *)*(v301 - 2), *(v301 - 2), v307);
      }
      else
      {
        v308 = (JSC::ExecutableAllocator *)((char *)v308 - 4);
        JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>(v308, (unint64_t)v308, v307);
      }
      sys_icache_invalidate(v308, 4uLL);
      v309 = (JSC *)v301[1];
      if (!v309)
        goto LABEL_218;
      v310 = *(_DWORD *)v309;
      v347 = (WTF *)vorr_s8((int8x8_t)vdup_n_s32(*(_DWORD *)v309 & 0x1F), (int8x8_t)0xF2A00000D2800000);
      LODWORD(v348) = v310 & 0x1F | 0xF2C00000;
      if (v309 != (JSC *)(((unint64_t)v309 + 3) & 0xFFFFFFFFFFFFFFFCLL))
      {
        __break(0xC471u);
        JUMPOUT(0x198C76D84);
      }
      if (qword_1ECF4C1F8 <= (unint64_t)v309 && qword_1ECF4C200 > (unint64_t)v309)
      {
        if ((unint64_t)&v347 - qword_1ECF4C028 < qword_1ECF4C030)
        {
          __break(0xC471u);
          JUMPOUT(0x198C76DB0);
        }
        if (!qword_1ECF4C1F0 || qword_1ECF4C200 < (unint64_t)v309 + 12)
        {
          __break(0xC471u);
          JUMPOUT(0x198C76DD0);
        }
        if (qword_1ECF4C748)
          JSC::dumpJITMemory(v309, &v347, (char *)0xC);
        if (byte_1ECF4C1E4)
        {
          be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
          v313 = v347;
          *((_DWORD *)v309 + 2) = (_DWORD)v348;
          *(_QWORD *)v309 = v313;
          be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
          goto LABEL_217;
        }
        if (off_1ECF4C228)
        {
          if (qword_1ECF4C1F0)
            v314 = qword_1ECF4C1F8;
          else
            v314 = 0;
          off_1ECF4C228((char *)v309 - v314, &v347, 12);
          if ((unint64_t)&v347 - qword_1ECF4C028 < qword_1ECF4C030)
          {
            __break(0xC471u);
            JUMPOUT(0x198C76DF0);
          }
          goto LABEL_217;
        }
      }
      v312 = v347;
      *((_DWORD *)v309 + 2) = (_DWORD)v348;
      *(_QWORD *)v309 = v312;
LABEL_217:
      sys_icache_invalidate(v309, 0xCuLL);
LABEL_218:
      v301 += 4;
      v300 -= 32;
      if (!v300)
        goto LABEL_219;
    }
  }
  v10 = 0;
  while (1)
  {
    if (v10 >= *((unsigned int *)this + 109))
    {
      __break(0xC471u);
      JUMPOUT(0x198C76E2CLL);
    }
    if (v10 >= v9[13])
    {
      __break(0xC471u);
      JUMPOUT(0x198C76E34);
    }
    v11 = this[53];
    v12 = *(_QWORD *)(*((_QWORD *)v9 + 5) + 8 * v10);
    v13 = (JSC::Wasm::TypeDefinition *)v12;
    if (*(_DWORD *)(v12 + 32) == 4)
    {
      v242 = *(unsigned int **)(v12 + 8);
      v243 = *(WTF **)v242;
      v13 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v242 + 8) + 8 * v242[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v13))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v12, v244, v245, v246, v247, v248, v249, v250);
        if (v258)
        {
          v13 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v13 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v13, v243, v252, v253, v254, v255, v256, v257);
          JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v12, v13, v259, v260, v261, v262, v263, v264);
        }
      }
    }
    if (*((_DWORD *)v13 + 8) == 5)
      v13 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v13 + 1);
    if (v10 >= *((unsigned int *)this + 95))
    {
      __break(0xC471u);
      JUMPOUT(0x198C76E3CLL);
    }
    if (v10 >= *((unsigned int *)this + 99))
    {
      __break(0xC471u);
      JUMPOUT(0x198C76E44);
    }
    v14 = *(_QWORD *)&this[48][2 * v10];
    if (!v14)
    {
      v347 = (WTF *)"Out of executable memory in function at index ";
      v348 = (WTF *)47;
      v346 = v10;
      WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&v347, &v346, (int **)&v345);
      v322 = v345;
      if (v345)
        goto LABEL_224;
LABEL_243:
      __break(0xC471u);
      JUMPOUT(0x198C76CBCLL);
    }
    if (v10 >= *((unsigned int *)this + 103))
    {
      __break(0xC471u);
      JUMPOUT(0x198C76E4CLL);
    }
    if (v10 >= *((unsigned int *)this + 117))
    {
      __break(0xC471u);
      JUMPOUT(0x198C76E54);
    }
    v15 = this[2][9] + v10;
    v16 = *(_QWORD *)&this[46][2 * v10];
    JSC::Wasm::computeExceptionHandlerAndLoopEntrypointLocations(&this[50][4 * v10], (uint64_t)&this[57][4 * v10], v16, (uint64_t)&v11[18 * v10], (_QWORD *)v14);
    JSC::Wasm::computePCToCodeOriginMap((JSC::Wasm *)&v11[18 * v10], (JSC::Wasm::CompilationContext *)v14, v17, v18, v19, v20, v21, v22);
    v332 = v13;
    if ((JSC::Wasm::BBQPlan::dumpDisassembly((uint64_t)this, (uint64_t)&v11[18 * v10], (JSC::LinkBuffer *)v14, v10, v13, v15) & 1) != 0)
    {
      if (!byte_1ECF4C289)
        goto LABEL_15;
      v45 = 0;
LABEL_30:
      v347 = (WTF *)off_1E3572250;
      v348 = (WTF *)v350;
      v349 = xmmword_199122F80;
      v350[0] = 0;
      JSC::Wasm::TypeDefinition::dump(v13, (WTF::PrintStream *)&v347);
      (*((void (**)(WTF **))v347 + 5))(&v347);
      v53 = v348;
      if (v348)
      {
        WTF::fromUTF8Impl<false>((unint64_t)v348, v349, (uint64_t *)&v343);
        v53 = v348;
        if (v348 == (WTF *)v350)
        {
LABEL_35:
          WTF::String::ascii((WTF::String *)&v343, (int8x16_t **)&v344);
          v54 = *((_QWORD *)this[2] + 31);
          if (*(_DWORD *)(v54 + 52) > v15)
          {
            v205 = *(_QWORD *)(v54 + 40);
            do
              v206 = __ldaxr((unsigned int *)v54);
            while (__stlxr(v206 + 1, (unsigned int *)v54));
            if (v205)
            {
              v56 = v205 + 16 * v15;
LABEL_38:
              v339 = v56;
              v340 = (unsigned int *)v54;
              JSC::Wasm::makeString((uint64_t *)&v339, (uint64_t *)&v341);
              WTF::String::ascii((WTF::String *)&v341, (int8x16_t **)&v342);
              JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(v14, v45, 0, 0, "WebAssembly BBQ function[%i] %s name %s", &v347, v10);
              v39 = v347;
              v38 = (unsigned int *)v348;
              if (v348)
              {
                do
                  v64 = __ldaxr(v38);
                while (__stlxr(v64 + 1, v38));
                v65 = (unsigned int *)v348;
                v348 = 0;
                if (v65)
                {
                  do
                  {
                    v66 = __ldaxr(v65);
                    v67 = v66 - 1;
                  }
                  while (__stlxr(v67, v65));
                  if (!v67)
                  {
                    atomic_store(1u, v65);
                    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v65, v57, v58, v59, v60, v61, v62, v63);
                    WTF::fastFree(v207, v208, v209, v210, v211, v212, v213, v214);
                  }
                }
              }
              v23 = v15;
              v44 = 1;
              goto LABEL_45;
            }
          }
          else
          {
            do
              v55 = __ldaxr((unsigned int *)v54);
            while (__stlxr(v55 + 1, (unsigned int *)v54));
          }
          v56 = v15 | 0x8000000000000000;
          goto LABEL_38;
        }
      }
      else
      {
        v343 = 0;
      }
      WTF::fastFree((unint64_t)v53, v46, v47, v48, v49, v50, v51, v52);
      goto LABEL_35;
    }
    if (byte_1ECF4C288)
    {
      v45 = 1;
      goto LABEL_30;
    }
    if (HIBYTE(word_1ECF4C286) | byte_1ECF4C28E)
    {
      v45 = 1;
      goto LABEL_30;
    }
    if ((_BYTE)word_1ECF4C2A0 || byte_1ECF4C289)
    {
      v45 = word_1ECF4C2A0 != 0;
      goto LABEL_30;
    }
LABEL_15:
    v23 = v15;
    v24 = *(unsigned int *)(v14 + 204);
    if ((_DWORD)v24)
    {
      v25 = *(uint64_t **)(v14 + 192);
      v26 = 8 * v24;
      do
      {
        v27 = *v25++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v14);
        v26 -= 8;
      }
      while (v26);
    }
    v28 = *(unsigned int *)(v14 + 220);
    if ((_DWORD)v28)
    {
      v178 = *(uint64_t **)(v14 + 208);
      v179 = 8 * v28;
      do
      {
        v180 = *v178++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v180 + 16))(v180, v14);
        v179 -= 8;
      }
      while (v179);
    }
    v29 = *(unsigned int *)(v14 + 176);
    *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v29) += *(_QWORD *)(v14 + 8);
    ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v29);
    v30 = (WTF **)(v14 + 184);
    sys_icache_invalidate(*(void **)(v14 + 184), *(_QWORD *)(v14 + 8));
    v38 = *(unsigned int **)v14;
    if (*(_QWORD *)v14)
    {
      do
        v241 = __ldaxr(v38);
      while (__stlxr(v241 + 1, v38));
      v30 = (WTF **)(v38 + 2);
    }
    v39 = *v30;
    v347 = v39;
    v348 = (WTF *)v38;
    if (byte_1ECF4C2A2)
    {
      JSC::LinkBuffer::logJITCodeForPerf(v14, (uint64_t)&v347, 0, 0);
      if (v38)
      {
        do
LABEL_22:
          v40 = __ldaxr(v38);
        while (__stlxr(v40 + 1, v38));
        v41 = (unsigned int *)v348;
        v348 = 0;
        if (v41)
        {
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            atomic_store(1u, v41);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v41, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v215, v216, v217, v218, v219, v220, v221, v222);
          }
        }
      }
    }
    else if (v38)
    {
      goto LABEL_22;
    }
    v44 = 0;
LABEL_45:
    v68 = &v11[18 * v10];
    v69 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v77 = v69;
    v78 = *((_QWORD *)v68 + 2);
    *((_QWORD *)v68 + 2) = 0;
    *v69 = v39;
    if (v38)
    {
      do
        v79 = __ldaxr(v38);
      while (__stlxr(v79 + 1, v38));
      v69[1] = v38;
      v69[2] = v78;
      do
      {
        v80 = __ldaxr(v38);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v38));
      if (!v81)
      {
        atomic_store(1u, v38);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v38, (uint64_t)v70, v71, v72, v73, v74, v75, v76);
        WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
      }
    }
    else
    {
      v69[1] = 0;
      v69[2] = v78;
    }
    v82 = *(JSC::Compilation **)(v16 + 48);
    *(_QWORD *)(v16 + 48) = v77;
    if (v82)
    {
      JSC::Compilation::~Compilation(v82, v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    if (v44)
    {
      v91 = v342;
      v342 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 1)
          WTF::fastFree((unint64_t)v91, v70, v71, v72, v73, v74, v75, v76);
        else
          --*(_DWORD *)v91;
      }
      v92 = v341;
      v341 = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 2)
        {
          WTF::StringImpl::~StringImpl(v92, (WTF::AtomStringImpl *)v70, v71, v72, v73, v74, v75, v76);
          WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
        }
        else
        {
          *(_DWORD *)v92 -= 2;
        }
      }
      v93 = v340;
      v340 = 0;
      if (v93)
      {
        do
        {
          v94 = __ldaxr(v93);
          v95 = v94 - 1;
        }
        while (__stlxr(v95, v93));
        if (!v95)
        {
          atomic_store(1u, v93);
          v347 = (WTF *)v93;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v347, v70, v71, v72, v73, v74, v75, v76);
        }
      }
      v96 = v344;
      v344 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 1)
          WTF::fastFree((unint64_t)v96, v70, v71, v72, v73, v74, v75, v76);
        else
          --*(_DWORD *)v96;
      }
      v97 = v343;
      v343 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 2)
        {
          WTF::StringImpl::~StringImpl(v97, (WTF::AtomStringImpl *)v70, v71, v72, v73, v74, v75, v76);
          WTF::fastFree(v170, v171, v172, v173, v174, v175, v176, v177);
        }
        else
        {
          *(_DWORD *)v97 -= 2;
        }
      }
    }
    v98 = this[52];
    if (!v98)
      goto LABEL_121;
    v99 = *(v98 - 2);
    v100 = 9 * ((v10 + ~((_DWORD)v10 << 15)) ^ ((v10 + ~((_DWORD)v10 << 15)) >> 10));
    v101 = (v100 ^ (v100 >> 6)) + ~((v100 ^ (v100 >> 6)) << 11);
    v102 = v99 & (v101 ^ HIWORD(v101));
    v103 = v98[8 * v102];
    if (v10 != v103)
    {
      v104 = 1;
      while ((_DWORD)v103 != -1)
      {
        v102 = ((_DWORD)v102 + v104) & v99;
        v103 = v98[8 * v102];
        ++v104;
        if (v10 == v103)
          goto LABEL_77;
      }
      v102 = *(v98 - 1);
    }
LABEL_77:
    if (v102 == *(v98 - 1))
      goto LABEL_121;
    v105 = &v98[8 * v102];
    v106 = *((_QWORD *)v105 + 2);
    if (!*(_BYTE *)(v106 + 169))
      break;
    if (byte_1ECF4C288)
    {
      v107 = 1;
      goto LABEL_81;
    }
    if (HIBYTE(word_1ECF4C286) | byte_1ECF4C28E)
    {
      v107 = 1;
LABEL_81:
      v347 = (WTF *)off_1E3572250;
      v348 = (WTF *)v350;
      v349 = xmmword_199122F80;
      v350[0] = 0;
      JSC::Wasm::TypeDefinition::dump(v332, (WTF::PrintStream *)&v347);
      (*((void (**)(WTF **))v347 + 5))(&v347);
      v115 = v348;
      if (v348)
      {
        WTF::fromUTF8Impl<false>((unint64_t)v348, v349, (uint64_t *)&v337);
        v115 = v348;
        if (v348 == (WTF *)v350)
        {
LABEL_86:
          WTF::String::ascii((WTF::String *)&v337, (int8x16_t **)&v338);
          v116 = *((_QWORD *)this[2] + 31);
          if (*(_DWORD *)(v116 + 52) > v23)
          {
            v223 = *(_QWORD *)(v116 + 40);
            do
              v224 = __ldaxr((unsigned int *)v116);
            while (__stlxr(v224 + 1, (unsigned int *)v116));
            if (v223)
            {
              v118 = v223 + 16 * v23;
LABEL_89:
              v333 = v118;
              v334 = (unsigned int *)v116;
              JSC::Wasm::makeString((uint64_t *)&v333, (uint64_t *)&v335);
              WTF::String::ascii((WTF::String *)&v335, (int8x16_t **)&v336);
              JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(v106, v107, 0, 0, "JS->WebAssembly entrypoint[%i] %s name %s", &v347, v10);
              v126 = v347;
              v127 = (unsigned int *)v348;
              if (v348)
              {
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 + 1, v127));
                v129 = (unsigned int *)v348;
                v348 = 0;
                if (v129)
                {
                  do
                  {
                    v130 = __ldaxr(v129);
                    v131 = v130 - 1;
                  }
                  while (__stlxr(v131, v129));
                  if (!v131)
                  {
                    atomic_store(1u, v129);
                    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v129, v119, v120, v121, v122, v123, v124, v125);
                    WTF::fastFree(v233, v234, v235, v236, v237, v238, v239, v240);
                  }
                }
              }
              v132 = 1;
              goto LABEL_96;
            }
          }
          else
          {
            do
              v117 = __ldaxr((unsigned int *)v116);
            while (__stlxr(v117 + 1, (unsigned int *)v116));
          }
          v118 = v23 | 0x8000000000000000;
          goto LABEL_89;
        }
      }
      else
      {
        v337 = 0;
      }
      WTF::fastFree((unint64_t)v115, v108, v109, v110, v111, v112, v113, v114);
      goto LABEL_86;
    }
    if ((_BYTE)word_1ECF4C2A0)
      v265 = 0;
    else
      v265 = byte_1ECF4C289 == 0;
    if (!v265)
    {
      v107 = word_1ECF4C2A0 != 0;
      goto LABEL_81;
    }
    v266 = *(unsigned int *)(v106 + 204);
    if ((_DWORD)v266)
    {
      v267 = *(uint64_t **)(v106 + 192);
      v268 = 8 * v266;
      do
      {
        v269 = *v267++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v269 + 16))(v269, v106);
        v268 -= 8;
      }
      while (v268);
    }
    v270 = *(unsigned int *)(v106 + 220);
    if ((_DWORD)v270)
    {
      v284 = *(uint64_t **)(v106 + 208);
      v285 = 8 * v270;
      do
      {
        v286 = *v284++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v286 + 16))(v286, v106);
        v285 -= 8;
      }
      while (v285);
    }
    v271 = *(unsigned int *)(v106 + 176);
    *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v271) += *(_QWORD *)(v106 + 8);
    ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v271);
    v272 = (WTF **)(v106 + 184);
    sys_icache_invalidate(*(void **)(v106 + 184), *(_QWORD *)(v106 + 8));
    v127 = *(unsigned int **)v106;
    if (*(_QWORD *)v106)
    {
      do
        v295 = __ldaxr(v127);
      while (__stlxr(v295 + 1, v127));
      v272 = (WTF **)(v127 + 2);
    }
    v126 = *v272;
    v347 = v126;
    v348 = (WTF *)v127;
    if (byte_1ECF4C2A2)
    {
      JSC::LinkBuffer::logJITCodeForPerf(v106, (uint64_t)&v347, 0, 0);
      if (v127)
      {
        do
LABEL_170:
          v280 = __ldaxr(v127);
        while (__stlxr(v280 + 1, v127));
        v281 = (unsigned int *)v348;
        v348 = 0;
        if (v281)
        {
          do
          {
            v282 = __ldaxr(v281);
            v283 = v282 - 1;
          }
          while (__stlxr(v283, v281));
          if (!v283)
          {
            atomic_store(1u, v281);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v281, v273, v274, v275, v276, v277, v278, v279);
            WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
          }
        }
      }
    }
    else if (v127)
    {
      goto LABEL_170;
    }
    v132 = 0;
LABEL_96:
    v133 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v141 = v133;
    *v133 = v126;
    if (v127)
    {
      do
        v142 = __ldaxr(v127);
      while (__stlxr(v142 + 1, v127));
      v133[1] = v127;
      v133[2] = 0;
      do
      {
        v143 = __ldaxr(v127);
        v144 = v143 - 1;
      }
      while (__stlxr(v144, v127));
      if (!v144)
      {
        atomic_store(1u, v127);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v127, (uint64_t)v134, v135, v136, v137, v138, v139, v140);
        WTF::fastFree(v225, v226, v227, v228, v229, v230, v231, v232);
      }
    }
    else
    {
      v133[1] = 0;
      v133[2] = 0;
    }
    v145 = *((_QWORD *)v105 + 3);
    v146 = *(JSC::Compilation **)(v145 + 48);
    *(_QWORD *)(v145 + 48) = v141;
    if (v146)
    {
      JSC::Compilation::~Compilation(v146, v134, v135, v136, v137, v138, v139, v140);
      WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
    }
    if (v132)
    {
      v155 = v336;
      v336 = 0;
      if (v155)
      {
        if (*(_DWORD *)v155 == 1)
          WTF::fastFree((unint64_t)v155, v134, v135, v136, v137, v138, v139, v140);
        else
          --*(_DWORD *)v155;
      }
      v156 = v335;
      v335 = 0;
      if (v156)
      {
        if (*(_DWORD *)v156 == 2)
        {
          WTF::StringImpl::~StringImpl(v156, (WTF::AtomStringImpl *)v134, v135, v136, v137, v138, v139, v140);
          WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
        }
        else
        {
          *(_DWORD *)v156 -= 2;
        }
      }
      v157 = v334;
      v334 = 0;
      if (v157)
      {
        do
        {
          v158 = __ldaxr(v157);
          v159 = v158 - 1;
        }
        while (__stlxr(v159, v157));
        if (!v159)
        {
          atomic_store(1u, v157);
          v347 = (WTF *)v157;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v347, v134, v135, v136, v137, v138, v139, v140);
        }
      }
      v160 = v338;
      v338 = 0;
      if (v160)
      {
        if (*(_DWORD *)v160 == 1)
          WTF::fastFree((unint64_t)v160, v134, v135, v136, v137, v138, v139, v140);
        else
          --*(_DWORD *)v160;
      }
      v161 = v337;
      v337 = 0;
      if (v161)
      {
        if (*(_DWORD *)v161 == 2)
        {
          WTF::StringImpl::~StringImpl(v161, (WTF::AtomStringImpl *)v134, v135, v136, v137, v138, v139, v140);
          WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
        }
        else
        {
          *(_DWORD *)v161 -= 2;
        }
      }
    }
LABEL_121:
    ++v10;
    v9 = this[2];
    if (v10 >= v9[33])
      goto LABEL_185;
  }
  v347 = (WTF *)"Out of executable memory in function entrypoint at index ";
  v348 = (WTF *)58;
  v346 = v10;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&v347, &v346, (int **)&v345);
  v322 = v345;
  if (!v345)
    goto LABEL_243;
LABEL_224:
  v323 = this[7];
  v345 = 0;
  if (v323
    || (this[7] = (unsigned int *)v322,
        *((_BYTE *)this + 64) = 0,
        (*((void (**)(unsigned int **))*this + 6))(this),
        v322 = v345,
        v345 = 0,
        v322))
  {
    if (*(_DWORD *)v322 == 2)
    {
      WTF::StringImpl::~StringImpl(v322, v315, v316, v317, v318, v319, v320, v321);
      WTF::fastFree(v324, v325, v326, v327, v328, v329, v330, v331);
    }
    else
    {
      *(_DWORD *)v322 -= 2;
    }
  }
}

void JSC::Wasm::BBQPlan::initializeCallees(uint64_t a1, JSC::Wasm::Callee *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  WTF *v42;
  WTF *v43;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  WTF *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  WTF *v64;
  unsigned int *v65;
  _QWORD v66[2];
  char v67;
  uint64_t v68;

  if (*(_DWORD *)(a1 + 380))
  {
    for (i = 0; i < *(unsigned int *)(a1 + 380); ++i)
    {
      v65 = 0;
      if (i >= *(unsigned int *)(a1 + 452))
      {
        __break(0xC471u);
        JUMPOUT(0x198C77278);
      }
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 440) + 8 * i);
      if (v11)
      {
        do
          v12 = __ldaxr((unsigned int *)v11);
        while (__stlxr(v12 + 1, (unsigned int *)v11));
      }
      v13 = *(_QWORD *)(a1 + 416);
      if (v13)
      {
        v14 = *(_DWORD *)(v13 - 8);
        v15 = 9 * ((i + ~((_DWORD)i << 15)) ^ ((i + ~((_DWORD)i << 15)) >> 10));
        v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
        v17 = v14 & (v16 ^ HIWORD(v16));
        v18 = *(unsigned int *)(v13 + 32 * v17);
        if (i != v18)
        {
          v19 = 1;
          while ((_DWORD)v18 != -1)
          {
            v17 = ((_DWORD)v17 + v19) & v14;
            v18 = *(unsigned int *)(v13 + 32 * v17);
            ++v19;
            if (i == v18)
              goto LABEL_13;
          }
          v17 = *(unsigned int *)(v13 - 4);
        }
LABEL_13:
        if (v17 != *(_DWORD *)(v13 - 4))
        {
          v20 = v13 + 32 * v17;
          v21 = *(unsigned int **)(v20 + 8);
          if (v21)
          {
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 + 1, v21));
          }
          v23 = v65;
          v65 = v21;
          if (v23)
          {
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v23);
              JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, (uint64_t)v23, a3, a4, a5, a6, a7, a8);
              if (*((_BYTE *)v23 + 4) == 1)
                JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v23, a2, a3, a4, a5, a6, a7, a8);
            }
          }
          if (*((_BYTE *)v65 + 6) == 6)
            JSC::Wasm::JSEntrypointJITCallee::setEntrypoint(v65, (uint64_t *)(*(_QWORD *)(v20 + 24) + 48), a3, a4, a5, a6, a7, a8);
        }
      }
      if (i >= *(unsigned int *)(a1 + 380))
      {
        __break(0xC471u);
        JUMPOUT(0x198C77280);
      }
      if (i >= *(unsigned int *)(a1 + 148))
      {
        __break(0xC471u);
        JUMPOUT(0x198C77288);
      }
      if (i >= *(unsigned int *)(a1 + 412))
      {
        __break(0xC471u);
        JUMPOUT(0x198C77290);
      }
      if (i >= *(unsigned int *)(a1 + 468))
      {
        __break(0xC471u);
        JUMPOUT(0x198C77298);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * i);
      v27 = *(_QWORD *)(a1 + 136);
      v28 = *(_QWORD *)(a1 + 400);
      v29 = *(_QWORD *)(a1 + 456);
      v30 = *(_DWORD *)(v26 + 72);
      *(_QWORD *)(v11 + 128) = 0;
      *(_BYTE *)(v11 + 136) = 0;
      v31 = *(_QWORD *)(v11 + 144);
      if (v31)
      {
        *(_QWORD *)(v11 + 144) = 0;
        *(_DWORD *)(v11 + 152) = 0;
        WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
      }
      v32 = (uint64_t *)(v29 + 16 * i);
      v33 = *v32;
      *v32 = 0;
      *(_QWORD *)(v11 + 144) = v33;
      LODWORD(v33) = *((_DWORD *)v32 + 2);
      *((_DWORD *)v32 + 2) = 0;
      *(_DWORD *)(v11 + 152) = v33;
      LODWORD(v33) = *((_DWORD *)v32 + 3);
      *((_DWORD *)v32 + 3) = 0;
      *(_DWORD *)(v11 + 156) = v33;
      *(_DWORD *)(v11 + 160) = v30;
      JSC::Wasm::OptimizingJITCallee::setEntrypoint((_QWORD *)v11, (void *)(v26 + 48), v27 + 16 * i, (uint64_t *)v26, v26 + 8, v28 + 16 * i, a7, a8);
      WTF::Vector<WTF::UniqueRef<WTF::EmbeddedFixedVector<JSC::CodeLocationLabel<(WTF::PtrTag)40321>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v11 + 176, *(unsigned int *)(v11 + 188), v34, v35, v36, v37, v38, v39);
      if (i >= *(unsigned int *)(a1 + 436))
      {
LABEL_68:
        __break(0xC471u);
        JUMPOUT(0x198C77270);
      }
      v40 = *(_QWORD *)(a1 + 424) + 72 * i;
      v43 = *(WTF **)(v40 + 40);
      v41 = (_QWORD *)(v40 + 40);
      v42 = v43;
      if (!v43)
        goto LABEL_42;
      *v41 = 0;
      v64 = v42;
      v68 = v11;
      if (__ldaxr((unsigned __int8 *)&JSC::calleeRegistry))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)&JSC::calleeRegistry))
      {
        goto LABEL_33;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::calleeRegistry);
LABEL_33:
      WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::add<WTF::Box<JSC::PCToCodeOriginMap>>(&qword_1ECF53D88, &v68, (uint64_t *)&v64, (uint64_t)v66);
      if (!v67)
        goto LABEL_68;
      v52 = __ldxr((unsigned __int8 *)&JSC::calleeRegistry);
      if (v52 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)&JSC::calleeRegistry))
          goto LABEL_39;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::calleeRegistry, 0, v46, v47, v48, v49, v50, v51);
LABEL_39:
      v53 = v64;
      v64 = 0;
      if (v53)
      {
        do
        {
          v54 = __ldaxr((unsigned int *)v53);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, (unsigned int *)v53));
        if (!v55)
        {
          atomic_store(1u, (unsigned int *)v53);
          v62 = *((_QWORD *)v53 + 3);
          if (v62)
            WTF::fastFree(v62, v45, v46, v47, v48, v49, v50, v51);
          v63 = *((_QWORD *)v53 + 4);
          if (v63)
            WTF::fastFree(v63, v45, v46, v47, v48, v49, v50, v51);
          WTF::fastFree((unint64_t)v53, v45, v46, v47, v48, v49, v50, v51);
        }
      }
LABEL_42:
      v66[0] = v11;
      (*(void (**)(_QWORD, unint64_t, unsigned int **, _QWORD *))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2, i, &v65, v66);
      v56 = v66[0];
      v66[0] = 0;
      if (v56)
      {
        do
        {
          v57 = __ldaxr((unsigned int *)v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, (unsigned int *)v56));
        if (!v58)
        {
          atomic_store(1u, (unsigned int *)v56);
          JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v56, a3, a4, a5, a6, a7, a8);
          if (*(_BYTE *)(v56 + 4) == 1)
            JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v56, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v59 = v65;
      v65 = 0;
      if (v59)
      {
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
        {
          atomic_store(1u, v59);
          JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, (uint64_t)v59, a3, a4, a5, a6, a7, a8);
          if (*((_BYTE *)v59 + 4) == 1)
            JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v59, a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
  }
}

uint64_t JSC::Wasm::BBQPlan::didReceiveFunctionData()
{
  return 1;
}

uint64_t `non-virtual thunk to'JSC::Wasm::BBQPlan::didReceiveFunctionData()
{
  return 1;
}

uint64_t JSC::Wasm::wasmToWasm@<X0>(JSC::Wasm *this@<X0>, uint64_t a2@<X8>)
{
  pthread_key_t *v3;
  WTF **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF **v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  pthread_key_t *v60;
  WTF **v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  WTF **v71;
  unsigned int v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 *p_start;
  uint64_t v81;
  size_t v82;
  unsigned int *v83;
  unsigned int **v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  JSC::ExecutableMemoryHandle *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int **v125;
  JSC::ExecutableMemoryHandle *v126;
  unsigned int v127;
  unsigned int **v128;
  JSC::ExecutableMemoryHandle *v129;
  unsigned int *v130;
  size_t len;
  uint64_t v132;
  WTF *v133;
  _BYTE v134[128];
  unsigned int v135;
  char v136;
  int v137;
  unsigned int v138;
  __int128 start;
  __int128 v140;
  uint64_t v141;
  _DWORD v142[6];
  char v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  WTF *v147;
  _BYTE v148[128];
  unsigned int v149;
  unsigned int v150;
  int v151;
  char v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _DWORD *v156;
  char v157;
  uint64_t v158;
  int v159;
  _DWORD *v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v127 = this;
  LOBYTE(v142[0]) = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0x8000000080000000;
  v147 = (WTF *)v148;
  v149 = 128;
  v3 = (pthread_key_t *)JSC::threadSpecificAssemblerData(this);
  v4 = (WTF **)WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::operator*(v3);
  v13 = (WTF *)(v4 + 1);
  v12 = *v4;
  if (*v4 != (WTF *)(v4 + 1))
  {
    v14 = v4;
    v15 = *((_DWORD *)v4 + 34);
    if (v149 < v15)
    {
      if (v147 && v147 != (WTF *)v148)
      {
        WTF::fastFree((unint64_t)v147, v5, v6, v7, v8, v9, v10, v11);
        v12 = *v14;
        v15 = *((_DWORD *)v14 + 34);
      }
      v147 = v12;
      v149 = v15;
      *v14 = v13;
      *((_DWORD *)v14 + 34) = 128;
    }
  }
  v152 = 1;
  v150 = 0;
  v151 = 0;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  v156 = v142;
  v157 = 16;
  v158 = 0;
  v159 = 0x10000;
  v160 = v142;
  v161 = 17;
  v162 = 0;
  v163 = 0x20000;
  v164 = 0;
  v166 = 0;
  v165 = 0;
  v16 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v16 != -1)
  {
    v130 = (unsigned int *)&v125;
    v128 = &v130;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v128, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (!dword_1EE3430FC)
    goto LABEL_62;
  v17 = *(unsigned __int8 *)qword_1EE3430F0;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [48],unsigned int>((uint64_t)v142, &v127);
  v18 = 120 * v127;
  JSC::MacroAssemblerARM64::load64((uint64_t)v142, ((unint64_t)((120 * v127 + 184) >> 3) << 35) | 0x13, (char)v17, v7, v8, v9, v10, v11);
  JSC::MacroAssemblerARM64::load64((uint64_t)v142, v17, (char)v17, v19, v20, v21, v22, v23);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v142, "< Store Callee's wasm callee");
  v31 = v150;
  if (v150 + 4 > v149)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, v24, v25, v26, v27, v28, v29, v30);
    v31 = v150;
  }
  *(_DWORD *)((char *)v147 + v31) = v17 & 0x1F | 0xF80083E0;
  v150 += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)v142, ((unint64_t)(v18 + 160) << 32) | 0x13, (char)v17, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerARM64::load64((uint64_t)v142, ((unint64_t)(v18 + 152) << 32) | 0x13, 19, v32, v33, v34, v35, v36);
  v44 = v150;
  if (v150 + 4 > v149)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, v37, v38, v39, v40, v41, v42, v43);
    v44 = v150;
  }
  *(_DWORD *)((char *)v147 + v44) = -1455235466;
  v150 += 4;
  v45 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v45 != -1)
  {
    v130 = (unsigned int *)&v125;
    v128 = &v130;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v128, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (dword_1EE3430FC <= 1)
  {
LABEL_62:
    __break(0xC471u);
    JUMPOUT(0x198C778CCLL);
  }
  JSC::AssemblyHelpers::cageConditionally(v142, 0, 22, 23, *(char *)(qword_1EE3430F0 + 1), v41, v42, v43);
  JSC::MacroAssemblerARM64::load64((uint64_t)v142, v17, (char)v17, v46, v47, v48, v49, v50);
  v59 = v150;
  if (v150 + 4 > v149)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v147, v52, v53, v54, v55, v56, v57, v58);
    v59 = v150;
  }
  *(_DWORD *)((char *)v147 + v59) = (32 * (v17 & 0x1F)) | 0xD61F0000;
  v150 += 4;
  v130 = 0;
  len = 0;
  v132 = -1;
  v133 = (WTF *)v134;
  v135 = 128;
  v60 = (pthread_key_t *)JSC::threadSpecificAssemblerData(v51);
  v61 = (WTF **)WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::operator*(v60);
  v70 = (WTF *)(v61 + 1);
  v69 = *v61;
  if (*v61 != (WTF *)(v61 + 1))
  {
    v71 = v61;
    v72 = *((_DWORD *)v61 + 34);
    if (v135 < v72)
    {
      if (v133 && v133 != (WTF *)v134)
      {
        WTF::fastFree((unint64_t)v133, v62, v63, v64, v65, v66, v67, v68);
        v69 = *v71;
        v72 = *((_DWORD *)v71 + 34);
      }
      v133 = v69;
      v135 = v72;
      *v71 = v70;
      *((_DWORD *)v71 + 34) = 128;
    }
  }
  v136 = 1;
  v137 = 0;
  v138 = 12;
  start = 0u;
  v140 = 0u;
  v141 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v130, (uint64_t)v142, 0, v64, v65, v66, v67, v68);
  if (!(_BYTE)v137)
  {
    *(_DWORD *)a2 = 0;
    *(_DWORD *)(a2 + 16) = 1;
    goto LABEL_49;
  }
  if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
  {
    v107 = 1;
  }
  else
  {
    if (!byte_1ECF4C28E && !byte_1ECF4C289)
    {
      if (DWORD1(v140))
      {
        v101 = (uint64_t *)*((_QWORD *)&start + 1);
        v102 = 8 * DWORD1(v140);
        do
        {
          v103 = *v101++;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v103 + 16))(v103, &v130);
          v102 -= 8;
        }
        while (v102);
      }
      p_start = &start;
      if (HIDWORD(v141))
      {
        v104 = (uint64_t *)*((_QWORD *)&v140 + 1);
        v105 = 8 * HIDWORD(v141);
        do
        {
          v106 = *v104++;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v106 + 16))(v106, &v130);
          v105 -= 8;
        }
        while (v105);
      }
      v81 = v138;
      v82 = len;
      *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v138 / 2] += len;
      ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v81);
      sys_icache_invalidate((void *)start, v82);
      v83 = v130;
      if (v130)
      {
        do
          v124 = __ldaxr(v83);
        while (__stlxr(v124 + 1, v83));
        p_start = (__int128 *)(v83 + 2);
      }
      v84 = *(unsigned int ***)p_start;
      v128 = v84;
      v129 = (JSC::ExecutableMemoryHandle *)v83;
      if (byte_1ECF4C2A2)
        JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v130, (uint64_t)&v128, 0, 0);
      v125 = v84;
      v126 = 0;
      if (v83)
      {
        do
          v85 = __ldaxr(v83);
        while (__stlxr(v85 + 1, v83));
        v86 = (unsigned int *)v126;
        v126 = (JSC::ExecutableMemoryHandle *)v83;
        if (v86)
        {
          do
          {
            v87 = __ldaxr(v86);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, v86));
          if (!v88)
          {
            atomic_store(1u, v86);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v86, (uint64_t)v73, v74, v75, v76, v77, v78, v79);
            WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
          }
        }
        v89 = (unsigned int *)v129;
        v129 = 0;
        if (v89)
        {
          do
          {
            v90 = __ldaxr(v89);
            v91 = v90 - 1;
          }
          while (__stlxr(v91, v89));
          if (!v91)
          {
            atomic_store(1u, v89);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v89, (uint64_t)v73, v74, v75, v76, v77, v78, v79);
            WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
          }
        }
      }
      goto LABEL_48;
    }
    v107 = byte_1ECF4C28E != 0;
  }
  JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)64376,unsigned int>(&v125, (uint64_t)&v130, v107, v127);
LABEL_48:
  v92 = v126;
  *(_QWORD *)a2 = v125;
  *(_QWORD *)(a2 + 8) = v92;
  *(_DWORD *)(a2 + 16) = 0;
LABEL_49:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v130, v73, v74, v75, v76, v77, v78, v79);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v142, v93, v94, v95, v96, v97, v98, v99);
}

uint64_t *JSC::Wasm::wasmCallingConvention(JSC::Wasm *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  return &JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [48],unsigned int>(uint64_t a1, _DWORD *a2)
{
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v40 = off_1E3572250;
    v41 = (WTF *)v43;
    v42 = xmmword_199122F80;
    v43[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%s", "Store Callee's wasm callee for import function ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v40, "%u", *a2);
    v40[5]((WTF::StringPrintStream *)&v40);
    if (v41)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v41, v42, (uint64_t *)&v37);
      v11 = v37;
    }
    else
    {
      v11 = 0;
    }
    v12 = *(_DWORD *)(a1 + 200);
    v38 = v12;
    v37 = 0;
    v39 = v11;
    v13 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 224))
    {
      v14 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v13 + 1, (unint64_t)&v38);
      v15 = *(unsigned int *)(a1 + 228);
      v16 = *(_QWORD *)(a1 + 216) + 16 * v15;
      *(_DWORD *)v16 = *(_DWORD *)v14;
      v17 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v16 + 8) = v17;
      v18 = v39;
      *(_DWORD *)(a1 + 228) = v15 + 1;
      v39 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, v4, v5, v6, v7, v8, v9, v10);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v19 = v12;
      *(_QWORD *)(v19 + 8) = v11;
      *(_DWORD *)(a1 + 228) = v13 + 1;
    }
    v20 = v37;
    v37 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
    if (v41 != (WTF *)v43)
      WTF::fastFree((unint64_t)v41, v4, v5, v6, v7, v8, v9, v10);
  }
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)64376,unsigned int>(_QWORD *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  JSC::ExecutableMemoryHandle *v37;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a2, a3, 0, 0, "WebAssembly->WebAssembly import[%i]", &v36, a4);
  v12 = (unsigned int *)v37;
  *a1 = v36;
  a1[1] = 0;
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = (unsigned int *)a1[1];
    a1[1] = v12;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
    }
    v17 = (unsigned int *)v37;
    v37 = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
    }
  }
}

void JSC::Wasm::BranchHintsSectionParser::parse(JSC::Wasm::BranchHintsSectionParser *this@<X0>, uint64_t a2@<X5>, uint64_t a3@<X7>, uint64_t a4@<X8>, float a5@<S1>)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  char v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  _DWORD *v72;
  int v73;
  _DWORD *v74;
  int v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  _DWORD *v81;
  uint64_t v82;
  _BYTE *v83;
  _DWORD *v84;
  uint64_t i;
  _DWORD *v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  char *v113;
  _QWORD *v114;
  unint64_t *v115;
  uint64_t v116;
  char *v117;
  _QWORD *v118;
  unint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  unsigned int v132;
  unint64_t StatusReg;
  int v134;

  v7 = *((_QWORD *)this + 2);
  v8 = *(_QWORD *)this;
  v50 = v7 > *(_QWORD *)this;
  v9 = v7 - *(_QWORD *)this;
  if (!v50)
    goto LABEL_176;
  v10 = 0;
  v11 = 0;
  LODWORD(v12) = 0;
  v13 = *((_QWORD *)this + 1);
  v14 = 5;
  if (v9 < 5)
    v14 = v9;
  v15 = v14 - 1;
  *(_QWORD *)this = v8 + 1;
  v16 = v13 + v8;
  v17 = v8 + 2;
  while (1)
  {
    LODWORD(v18) = *(char *)(v16 + v10);
    LODWORD(v12) = ((v18 & 0x7F) << v11) | v12;
    if ((v18 & 0x80000000) == 0)
      break;
    if (v15 == v10)
      goto LABEL_176;
    LOBYTE(v18) = v17 + v10;
    *(_QWORD *)this = v17 + v10;
    v11 += 7;
    if (v9 == ++v10)
    {
LABEL_9:
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v10 == 4 && v18 >= 0x10u)
  {
LABEL_176:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get function count", (unint64_t *)this, 25, (_QWORD *)a4, a5);
    goto LABEL_170;
  }
  v129 = a4;
  if (!(_DWORD)v12)
    goto LABEL_162;
  v19 = 0;
  v20 = -1;
  a4 = 5;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v130 = v12;
LABEL_13:
  v21 = *((_QWORD *)this + 2);
  v22 = *(_QWORD *)this;
  v23 = v21 - *(_QWORD *)this;
  if (v21 <= *(_QWORD *)this)
    goto LABEL_173;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v10 = *((_QWORD *)this + 1);
  v27 = v23 >= 5 ? 5 : v21 - *(_QWORD *)this;
  v18 = v27 - 1;
  *(_QWORD *)this = v22 + 1;
  while (1)
  {
    v28 = *(char *)(v10 + v22 + v24);
    v132 = ((v28 & 0x7F) << v25) | v26;
    if ((v28 & 0x80000000) == 0)
      break;
    if (v18 == v24)
      goto LABEL_173;
    *(_QWORD *)this = v22 + v24++ + 2;
    v25 += 7;
    v26 = v132;
    if (v23 == v24)
      goto LABEL_9;
  }
  if ((_DWORD)v24 == 4 && *(unsigned __int8 *)(v10 + v22 + v24) >= 0x10u)
  {
LABEL_173:
    v113 = "can't get function index for function ";
    a4 = v129;
    v114 = (_QWORD *)v129;
    v115 = (unint64_t *)this;
    v116 = 39;
    goto LABEL_174;
  }
  if (v20 > v132)
  {
    a4 = v129;
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>("invalid function index ", (unint64_t *)this, 24, v132, " for function ", 15, v19, (_QWORD *)v129, a5);
LABEL_170:
    *(_BYTE *)(a4 + 8) = 1;
    return;
  }
  if (v21 <= v22 + v24 + 1)
    goto LABEL_161;
  v18 = 0;
  v29 = 0;
  v30 = 0;
  v31 = ~v24 + v23;
  v32 = v22 + v24;
  *(_QWORD *)this = v22 + v24 + 2;
  v33 = v22 - v21 + v24;
  v34 = v31 >= 5 ? 5 : v31;
  v35 = v34 - 1;
  v36 = v10 + v32 + 1;
  v10 = v33 + 1;
  while (1)
  {
    v37 = *(char *)(v36 + v18);
    v30 |= (v37 & 0x7F) << v29;
    if ((v37 & 0x80000000) == 0)
      break;
    if (v35 == v18)
      goto LABEL_161;
    *(_QWORD *)this = v32 + v18 + 3;
    v29 += 7;
    ++v18;
    if (!(v10 + v18))
      goto LABEL_9;
  }
  if ((_DWORD)v18 == 4 && *(unsigned __int8 *)(v36 + v18) >= 0x10u)
  {
LABEL_161:
    v113 = "can't get number of hints for function ";
    a4 = v129;
    v114 = (_QWORD *)v129;
    v115 = (unint64_t *)this;
    v116 = 40;
LABEL_174:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int>(v113, v115, v116, v19, v114, a5);
    goto LABEL_170;
  }
  v131 = v19;
  if (!v30)
    goto LABEL_154;
  v38 = 0;
  v39 = 0;
  v40 = -1;
  v134 = v30;
  while (1)
  {
    v41 = *((_QWORD *)this + 2);
    v10 = *(_QWORD *)this;
    v18 = v41 - *(_QWORD *)this;
    if (v41 <= *(_QWORD *)this)
      goto LABEL_171;
    v42 = v40;
    v43 = 0;
    v44 = 0;
    LODWORD(v40) = 0;
    v45 = *((_QWORD *)this + 1);
    v46 = v18 >= 5 ? 5 : v41 - *(_QWORD *)this;
    v47 = v46 - 1;
    *(_QWORD *)this = v10 + 1;
    v48 = v10 + 4;
    while (1)
    {
      v49 = *(char *)(v45 + v10 + v43);
      v40 = ((v49 & 0x7F) << v44) | v40;
      if ((v49 & 0x80000000) == 0)
        break;
      if (v47 == v43)
        goto LABEL_171;
      v12 = v10 + v43 + 2;
      *(_QWORD *)this = v12;
      ++v43;
      v44 += 7;
      ++v48;
      if (v18 == v43)
        goto LABEL_9;
    }
    if ((_DWORD)v43 == 4 && *(unsigned __int8 *)(v45 + v10 + v43) >= 0x10u)
    {
LABEL_171:
      v117 = "can't get branch offset for hint ";
      v121 = v129;
      v118 = (_QWORD *)v129;
      v119 = (unint64_t *)this;
      v120 = 34;
      goto LABEL_166;
    }
    v50 = v40 <= 0xFFFFFFFD && v42 <= v40;
    if (!v50)
    {
      v121 = v129;
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>("invalid branch offset ", (unint64_t *)this, 23, v40, " for hint ", 11, v39, (_QWORD *)v129, a5);
      goto LABEL_167;
    }
    if (v41 <= v10 + v43 + 1)
      break;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = ~v43 + v18;
    if (v54 >= 5)
      v54 = 5;
    v55 = v54 - 1;
    v12 = v10 + v43;
    v18 = v10 + v43 + 2;
    *(_QWORD *)this = v18;
    v56 = (_BYTE *)(v45 + v10 + v43 + 1);
    v57 = v10 - v41 + v43 + 1;
    while (1)
    {
      v58 = (char)v56[v51];
      v59 = (v56[v51] & 0x7F) << v52;
      v53 |= v59;
      if ((v58 & 0x80000000) == 0)
        break;
      if (v55 == v51)
        goto LABEL_172;
      ++v18;
      *(_QWORD *)this = v12 + v51++ + 3;
      v52 += 7;
      ++v48;
      if (!(v57 + v51))
        goto LABEL_9;
    }
    if ((_DWORD)v51 == 4 && v56[v51] >= 0x10u)
      break;
    if (v53 != 1)
    {
      v117 = "invalid payload size for hint ";
      v121 = v129;
      v118 = (_QWORD *)v129;
      v119 = (unint64_t *)this;
      v120 = 31;
      goto LABEL_166;
    }
    if (v41 <= v10 + v43 + v51 + 2)
      goto LABEL_164;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = v41 - v18;
    if (v41 - v18 >= 5)
      v63 = 5;
    v64 = v63 - 1;
    *(_QWORD *)this = v10 + v43 + v51 + 3;
    v10 = v45 + v18;
    v65 = v18 - v41;
    while (1)
    {
      v66 = *(char *)(v10 + v60);
      v62 |= (v66 & 0x7F) << v61;
      if ((v66 & 0x80000000) == 0)
        break;
      if (v64 == v60)
        goto LABEL_164;
      ++v60;
      *(_QWORD *)this = v48++;
      v61 += 7;
      if (!(v65 + v60))
        goto LABEL_9;
    }
    if ((_DWORD)v60 == 4)
    {
      if (*(unsigned __int8 *)(v10 + v60) > 0xFu || v62 > 1)
      {
LABEL_164:
        v117 = "can't get or invalid branch hint value for hint ";
        v121 = v129;
        v118 = (_QWORD *)v129;
        v119 = (unint64_t *)this;
        v120 = 49;
        goto LABEL_166;
      }
    }
    else if (v62 >= 2)
    {
      goto LABEL_164;
    }
    if (!v38)
    {
      v67 = WTF::fastMalloc((WTF *)0x50);
      *(_BYTE *)(v67 + 20) = 0;
      *(_DWORD *)(v67 + 24) = -1;
      *(_BYTE *)(v67 + 28) = 0;
      *(_DWORD *)(v67 + 32) = -1;
      *(_BYTE *)(v67 + 36) = 0;
      *(_DWORD *)(v67 + 40) = -1;
      *(_BYTE *)(v67 + 44) = 0;
      *(_DWORD *)(v67 + 48) = -1;
      *(_BYTE *)(v67 + 52) = 0;
      *(_DWORD *)(v67 + 56) = -1;
      *(_BYTE *)(v67 + 60) = 0;
      *(_DWORD *)(v67 + 64) = -1;
      *(_BYTE *)(v67 + 68) = 0;
      *(_DWORD *)(v67 + 72) = -1;
      *(_BYTE *)(v67 + 76) = 0;
      *(_OWORD *)v67 = xmmword_19914F680;
      *(_DWORD *)(v67 + 16) = -1;
      v38 = v67 + 16;
    }
    v68 = *(_DWORD *)(v38 - 8);
    v69 = 9 * ((v40 + ~((_DWORD)v40 << 15)) ^ ((v40 + ~((_DWORD)v40 << 15)) >> 10));
    v70 = (v69 ^ (v69 >> 6)) + ~((v69 ^ (v69 >> 6)) << 11);
    LODWORD(v71) = v68 & (v70 ^ HIWORD(v70));
    v72 = (_DWORD *)(v38 + 8 * v71);
    v73 = *v72;
    if (*v72 != -1)
    {
      v74 = 0;
      v75 = 1;
      while (v73 != (_DWORD)v40)
      {
        if (v73 == -2)
          v74 = v72;
        v71 = ((_DWORD)v71 + v75) & v68;
        v72 = (_DWORD *)(v38 + 8 * v71);
        v73 = *v72;
        ++v75;
        if (*v72 == -1)
        {
          if (v74)
          {
            *v74 = -1;
            *((_BYTE *)v74 + 4) = 0;
            --*(_DWORD *)(v38 - 16);
            goto LABEL_82;
          }
          *v72 = v40;
          v74 = (_DWORD *)(v38 + 8 * v71);
          goto LABEL_83;
        }
      }
      goto LABEL_104;
    }
    v74 = (_DWORD *)(v38 + 8 * v71);
LABEL_82:
    *v74 = v40;
LABEL_83:
    *((_BYTE *)v74 + 4) = v62;
    v76 = *(_DWORD *)(v38 - 12) + 1;
    *(_DWORD *)(v38 - 12) = v76;
    v77 = v38 - 16;
    v78 = (*(_DWORD *)(v38 - 16) + v76);
    v79 = *(unsigned int *)(v38 - 4);
    if (v79 > 0x400)
    {
      if (v79 > 2 * v78)
        goto LABEL_104;
LABEL_86:
      v80 = (_DWORD)v79 << (6 * v76 >= (2 * v79));
LABEL_88:
      v81 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v80 + 16));
      if (v80)
      {
        v82 = v80;
        v83 = v81 + 5;
        do
        {
          *((_DWORD *)v83 - 1) = -1;
          *v83 = 0;
          v83 += 8;
          --v82;
        }
        while (v82);
      }
      v84 = v81 + 4;
      v81[2] = v80 - 1;
      v81[3] = v80;
      *v81 = 0;
      v81[1] = v76;
      if ((_DWORD)v79)
      {
        for (i = 0; i != v79; ++i)
        {
          v86 = (_DWORD *)(v38 + 8 * i);
          if (*v86 <= 0xFFFFFFFD)
          {
            v87 = 0;
            v88 = 9 * ((*v86 + ~(*v86 << 15)) ^ ((*v86 + ~(*v86 << 15)) >> 10));
            v89 = (v88 ^ (v88 >> 6)) + ~((v88 ^ (v88 >> 6)) << 11);
            v90 = v89 ^ HIWORD(v89);
            do
            {
              v91 = v90 & (v80 - 1);
              v90 = ++v87 + v91;
            }
            while (v84[2 * v91] != -1);
            *(_QWORD *)&v84[2 * v91] = *(_QWORD *)v86;
          }
        }
      }
      v92 = *(_QWORD *)(StatusReg + 752);
      if (v92)
      {
        if (v77 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                               + (((unint64_t)(v38 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v38 - 16) >> 24)) & 1) == 0)
        {
          if (v77 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v77 >> 24)
          {
            v58 = 0;
          }
          else
          {
            v58 = (*(_DWORD *)((char *)off_1ECF425F8
                             + (((((unint64_t)(v38 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((((v38 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v58 == 1)
              goto LABEL_101;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v92, v38 - 16, 1, v58, v59, a2, v19, a3);
        }
        else
        {
LABEL_101:
          v93 = *(unsigned int *)(v92 + 8000);
          if (v93 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v92, v38 - 16, (os_unfair_lock_s *)5, v58, v59, a2, v19, a3);
          }
          else
          {
            *(_QWORD *)(v92 + 8 * v93) = v77 | 0x5000000000000;
            *(_DWORD *)(v92 + 8000) = v93 + 1;
          }
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v38 - 16, (uint64_t)&bmalloc_heap_config, 1);
      }
      v38 = (uint64_t)v84;
      a4 = 5;
      v30 = v134;
      goto LABEL_104;
    }
    if (3 * v79 <= 4 * v78)
    {
      if ((_DWORD)v79)
        goto LABEL_86;
      v80 = 8;
      goto LABEL_88;
    }
LABEL_104:
    if (++v39 == v30)
    {
      v95 = (uint64_t *)(*((_QWORD *)this + 6) + 256);
      v96 = *v95;
      if (*v95
        || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Wasm::BranchHintMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Wasm::BranchHintMap>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Wasm::BranchHintMap,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::BranchHintMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)(*((_QWORD *)this + 6) + 256), 8u), (v96 = *v95) != 0))
      {
        v97 = *(_DWORD *)(v96 - 8);
      }
      else
      {
        v97 = 0;
      }
      v98 = 9 * ((v132 + ~(v132 << 15)) ^ ((v132 + ~(v132 << 15)) >> 10));
      v99 = (v98 ^ (v98 >> 6)) + ~((v98 ^ (v98 >> 6)) << 11);
      v100 = v97 & (v99 ^ HIWORD(v99));
      v101 = v96 + 16 * v100;
      v102 = *(_DWORD *)v101;
      if (*(_DWORD *)v101 != -1)
      {
        v103 = 0;
        v104 = 1;
        while (v102 != v132)
        {
          if (v102 == -2)
            v103 = v101;
          v100 = (v100 + v104) & v97;
          v101 = v96 + 16 * v100;
          v102 = *(_DWORD *)v101;
          ++v104;
          if (*(_DWORD *)v101 == -1)
          {
            if (v103)
            {
              *(_DWORD *)v103 = -1;
              *(_QWORD *)(v103 + 8) = 0;
              --*(_DWORD *)(*v95 - 16);
              v101 = v103;
            }
            goto LABEL_137;
          }
        }
        if (v38)
          WTF::fastFree(v38 - 16, v56, v57, v58, v59, a2, v19, a3);
LABEL_154:
        v19 = (v131 + 1);
        LODWORD(v12) = v130;
        v20 = v132;
        if ((_DWORD)v19 == v130)
        {
LABEL_162:
          *(_BYTE *)v129 = 0;
          *(_BYTE *)(v129 + 8) = 0;
          return;
        }
        goto LABEL_13;
      }
LABEL_137:
      *(_DWORD *)v101 = v132;
      v105 = *(_QWORD *)(v101 + 8);
      *(_QWORD *)(v101 + 8) = v38;
      if (v105)
        WTF::fastFree(v105 - 16, v56, v57, v58, v59, a2, v19, a3);
      v106 = *v95;
      if (*v95)
        v107 = *(_DWORD *)(v106 - 12) + 1;
      else
        v107 = 1;
      *(_DWORD *)(v106 - 12) = v107;
      v108 = *v95;
      if (*v95)
        v109 = *(_DWORD *)(v108 - 12);
      else
        v109 = 0;
      v110 = (*(_DWORD *)(v108 - 16) + v109);
      v111 = *(unsigned int *)(v108 - 4);
      if (v111 > 0x400)
      {
        if (v111 > 2 * v110)
          goto LABEL_154;
LABEL_150:
        v112 = (_DWORD)v111 << (6 * *(_DWORD *)(v108 - 12) >= (2 * v111));
      }
      else
      {
        if (3 * v111 > 4 * v110)
          goto LABEL_154;
        if ((_DWORD)v111)
          goto LABEL_150;
        v112 = 8;
      }
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Wasm::BranchHintMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Wasm::BranchHintMap>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Wasm::BranchHintMap,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::BranchHintMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v95, v112);
      goto LABEL_154;
    }
  }
LABEL_172:
  v117 = "can't get payload size for hint ";
  v121 = v129;
  v118 = (_QWORD *)v129;
  v119 = (unint64_t *)this;
  v120 = 33;
LABEL_166:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int>(v117, v119, v120, v39, v118, a5);
LABEL_167:
  *(_BYTE *)(v121 + 8) = 1;
  if (v38)
    WTF::fastFree(v38 - 16, v122, v123, v124, v125, v126, v127, v128);
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S1>)
{
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int *v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v38 = (const char *)off_1E3572250;
  v39 = (WTF *)v41;
  v40 = xmmword_199122F80;
  v41[0] = 0;
  if (__src)
  {
    v7 = a3 - 1;
    if (!a3)
      v7 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v7, (uint64_t)&v36, a5);
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = 0;
    *(_BYTE *)(v8 + 16) = 0;
    v36 = (const char *)v8;
    LODWORD(v37) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringView", &v36);
  if ((_DWORD)v37 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v37])(&v35, &v36);
  (*((void (**)(const char **))v38 + 5))(&v38);
  (*((void (**)(const char **))v38 + 5))(&v38);
  v16 = v39;
  if (!v39)
  {
    v33 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v33);
  v16 = v39;
  if (v39 != (WTF *)v41)
LABEL_12:
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  v38 = "WebAssembly.Module doesn't parse at byte ";
  v39 = (WTF *)42;
  v36 = ": ";
  v37 = 3;
  v35 = v6;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String>((uint64_t)&v38, &v35, (uint64_t)&v36, (uint64_t *)&v33, &v34);
  if (v34)
  {
    *a4 = v34;
    v24 = v33;
    v33 = 0;
    v34 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>, float a6@<S1>)
{
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int *v54;
  unint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  WTF *v59;
  __int128 v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v58 = (const char *)off_1E3572250;
  v59 = (WTF *)v61;
  v60 = xmmword_199122F80;
  v61[0] = 0;
  if (__src)
  {
    v9 = a3 - 1;
    if (!a3)
      v9 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v9, (uint64_t)&v56, a6);
  }
  else
  {
    v10 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 16) = 0;
    v56 = (const char *)v10;
    LODWORD(v57) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v58, "StringView", &v56);
  if ((_DWORD)v57 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v57])(&v55, &v56);
  (*((void (**)(const char **))v58 + 5))(&v58);
  (*((void (**)(const char **))v58 + 5))(&v58);
  v18 = v59;
  if (!v59)
  {
    v53 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v59, v60, (uint64_t *)&v53);
  v18 = v59;
  if (v59 != (WTF *)v61)
LABEL_12:
    WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
  v58 = (const char *)off_1E3572250;
  v59 = (WTF *)v61;
  v60 = xmmword_199122F80;
  v61[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v58, "%u", a4);
  (*((void (**)(const char **))v58 + 5))(&v58);
  v26 = v59;
  if (!v59)
  {
    v52 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v59, v60, (uint64_t *)&v52);
  v26 = v59;
  if (v59 != (WTF *)v61)
LABEL_17:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  v58 = "WebAssembly.Module doesn't parse at byte ";
  v59 = (WTF *)42;
  v56 = ": ";
  v57 = 3;
  v55 = v8;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)&v58, &v55, (uint64_t)&v56, (uint64_t *)&v53, (uint64_t *)&v52, &v54);
  if (v54)
  {
    *a5 = v54;
    v54 = 0;
    v34 = v52;
    v52 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    v35 = v53;
    v53 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, v27, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, _QWORD *a8@<X8>, float a9@<S1>)
{
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  const char *v105;
  int v106;
  const char *v107;
  WTF *v108;
  __int128 v109;
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v14 = *a2;
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (__src)
  {
    v15 = a3 - 1;
    if (!a3)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v15, (uint64_t)&v105, a9);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v105 = (const char *)v16;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v24 = v108;
  if (!v108)
  {
    v98 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v98);
  v24 = v108;
  if (v108 != (WTF *)v110)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%u", a4);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v32 = v108;
  if (!v108)
  {
    v97 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v97);
  v32 = v108;
  if (v108 != (WTF *)v110)
LABEL_17:
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (a5)
  {
    v34 = a6 - 1;
    if (!a6)
      v34 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v34, (uint64_t)&v105, v33);
  }
  else
  {
    v35 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = 0;
    *(_BYTE *)(v35 + 16) = 0;
    v105 = (const char *)v35;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v43 = v108;
  if (!v108)
  {
    v96 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v96);
  v43 = v108;
  if (v108 != (WTF *)v110)
LABEL_29:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%u", a7);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v51 = v108;
  if (!v108)
  {
    v95 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v95);
  v51 = v108;
  if (v108 != (WTF *)v110)
LABEL_34:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  v107 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v108) = 41;
  v104 = v14;
  v105 = ": ";
  v106 = 2;
  v102 = v97;
  v103 = v98;
  v100 = v95;
  v101 = v96;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v107, &v104, (uint64_t)&v105, (uint64_t *)&v103, (uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, &v99);
  if (v99)
  {
    *a8 = v99;
    v99 = 0;
    v59 = v95;
    v95 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v59 -= 2;
      }
    }
    v60 = v96;
    v96 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::~StringImpl(v60, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v60 -= 2;
      }
    }
    v61 = v97;
    v97 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::~StringImpl(v61, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v61 -= 2;
      }
    }
    v62 = v98;
    v98 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::Wasm::Callee::Callee(uint64_t result, char a2)
{
  *(_DWORD *)result = 1;
  *(_WORD *)(result + 4) = 257;
  *(_BYTE *)(result + 6) = a2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0x4000000000000000;
  return result;
}

{
  *(_DWORD *)result = 1;
  *(_WORD *)(result + 4) = 257;
  *(_BYTE *)(result + 6) = a2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0x4000000000000000;
  return result;
}

uint64_t JSC::Wasm::Callee::Callee(uint64_t a1, char a2, unint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 1;
  *(_BYTE *)(a1 + 6) = a2;
  JSC::Wasm::IndexOrName::IndexOrName((unint64_t *)(a1 + 8), a3, a4, (uint64_t)a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t JSC::Wasm::Callee::Callee(uint64_t a1, void *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  JSC::Wasm::NameSection *v15;

  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 1;
  *(_BYTE *)(a1 + 6) = (_BYTE)a2;
  v9 = *a4;
  if (!*a4)
    v9 = a3 | 0x8000000000000000;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = 0;
  v10 = a4[1];
  a4[1] = 0;
  v11 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v15 = (JSC::Wasm::NameSection *)v11;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v15, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

void JSC::Wasm::Callee::dump(JSC::Wasm::Callee *this, WTF::PrintStream *a2)
{
  WTF *v3;
  const WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  JSC::Wasm::makeString((uint64_t *)this + 1, (uint64_t *)&v28);
  v3 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v3, (WTF::PrintStream *)&v28, v4, v5, v6, v7, v8, v9, v10, v11);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
}

uint64_t JSC::Wasm::Callee::range(JSC::Wasm::Callee *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v8 = 0;
  v10 = 0;
  switch(*((_BYTE *)this + 6))
  {
    case 2:
      v11 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      if (v11)
      {
        do
          v12 = __ldaxr((unsigned int *)v11);
        while (__stlxr(v12 + 1, (unsigned int *)v11));
      }
      v8 = *(_QWORD *)(v11 + 8);
      do
      {
        v13 = __ldaxr((unsigned int *)v11);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v11));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v11);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v11, 0, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      v15 = *(unsigned int **)(*((_QWORD *)this + 5) + 8);
      if (v15)
      {
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      do
      {
        v17 = __ldaxr(v15);
        v18 = --v17 == 0;
      }
      while (__stlxr(v17, v15));
      goto LABEL_61;
    case 3:
      v19 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      if (v19)
      {
        do
          v20 = __ldaxr((unsigned int *)v19);
        while (__stlxr(v20 + 1, (unsigned int *)v19));
      }
      v8 = *(_QWORD *)(v19 + 8);
      do
      {
        v21 = __ldaxr((unsigned int *)v19);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unsigned int *)v19));
      if (!v22)
      {
        atomic_store(1u, (unsigned int *)v19);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v19, 0, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
      }
      v15 = *(unsigned int **)(*((_QWORD *)this + 5) + 8);
      if (v15)
      {
        do
          v23 = __ldaxr(v15);
        while (__stlxr(v23 + 1, v15));
      }
      do
      {
        v24 = __ldaxr(v15);
        v18 = --v24 == 0;
      }
      while (__stlxr(v24, v15));
      goto LABEL_61;
    case 4:
      v25 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      if (v25)
      {
        do
          v26 = __ldaxr((unsigned int *)v25);
        while (__stlxr(v26 + 1, (unsigned int *)v25));
      }
      v8 = *(_QWORD *)(v25 + 8);
      do
      {
        v27 = __ldaxr((unsigned int *)v25);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unsigned int *)v25));
      if (!v28)
      {
        atomic_store(1u, (unsigned int *)v25);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, 0, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
      }
      v15 = *(unsigned int **)(*((_QWORD *)this + 5) + 8);
      if (v15)
      {
        do
          v29 = __ldaxr(v15);
        while (__stlxr(v29 + 1, v15));
      }
      do
      {
        v30 = __ldaxr(v15);
        v18 = --v30 == 0;
      }
      while (__stlxr(v30, v15));
      goto LABEL_61;
    case 5:
      v31 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      if (v31)
      {
        do
          v32 = __ldaxr((unsigned int *)v31);
        while (__stlxr(v32 + 1, (unsigned int *)v31));
      }
      v8 = *(_QWORD *)(v31 + 8);
      do
      {
        v33 = __ldaxr((unsigned int *)v31);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, (unsigned int *)v31));
      if (!v34)
      {
        atomic_store(1u, (unsigned int *)v31);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v31, 0, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
      }
      v15 = *(unsigned int **)(*((_QWORD *)this + 5) + 8);
      if (v15)
      {
        do
          v35 = __ldaxr(v15);
        while (__stlxr(v35 + 1, v15));
      }
      do
      {
        v36 = __ldaxr(v15);
        v18 = --v36 == 0;
      }
      while (__stlxr(v36, v15));
      goto LABEL_61;
    case 6:
      v37 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
      if (v37)
      {
        do
          v38 = __ldaxr((unsigned int *)v37);
        while (__stlxr(v38 + 1, (unsigned int *)v37));
      }
      v8 = *(_QWORD *)(v37 + 8);
      do
      {
        v39 = __ldaxr((unsigned int *)v37);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, (unsigned int *)v37));
      if (!v40)
      {
        atomic_store(1u, (unsigned int *)v37);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v37, 0, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
      }
      v15 = *(unsigned int **)(*((_QWORD *)this + 4) + 8);
      if (v15)
      {
        do
          v41 = __ldaxr(v15);
        while (__stlxr(v41 + 1, v15));
      }
      do
      {
        v42 = __ldaxr(v15);
        v18 = --v42 == 0;
      }
      while (__stlxr(v42, v15));
      goto LABEL_61;
    case 8:
      v43 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      if (v43)
      {
        do
          v44 = __ldaxr((unsigned int *)v43);
        while (__stlxr(v44 + 1, (unsigned int *)v43));
      }
      v8 = *(_QWORD *)(v43 + 8);
      do
      {
        v45 = __ldaxr((unsigned int *)v43);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, (unsigned int *)v43));
      if (!v46)
      {
        atomic_store(1u, (unsigned int *)v43);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v43, 0, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
      }
      v15 = *(unsigned int **)(*((_QWORD *)this + 5) + 8);
      if (v15)
      {
        do
          v47 = __ldaxr(v15);
        while (__stlxr(v47 + 1, v15));
      }
      do
      {
        v48 = __ldaxr(v15);
        v18 = --v48 == 0;
      }
      while (__stlxr(v48, v15));
LABEL_61:
      if (v18)
      {
        atomic_store(1u, v15);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v15, v10, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      break;
    default:
      return v8;
  }
  return v8;
}

uint64_t JSC::Wasm::Callee::calleeSaveRegisters(JSC::Wasm::Callee *this)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = &v3;
  v3 = 0;
  JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::calleeSaveRegisters(void)::$_0>(this, &v2);
  return v3;
}

void JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::calleeSaveRegisters(void)::$_0>(_BYTE *a1, _QWORD **a2)
{
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  char **v9;
  char *v10;

  switch(a1[6])
  {
    case 0:
      v5 = atomic_load(&qword_1ECF58FE0);
      if (v5 != -1)
      {
        v10 = &v8;
        v9 = &v10;
        std::__call_once(&qword_1ECF58FE0, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::LLIntCallee::calleeSaveRegistersImpl(void)::$_0 &&>>);
      }
      v3 = *a2;
      v4 = &unk_1ECF59000;
      goto LABEL_3;
    case 1:
      v6 = atomic_load(&_MergedGlobals_51);
      if (v6 != -1)
      {
        v10 = &v8;
        v9 = &v10;
        std::__call_once(&_MergedGlobals_51, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::IPIntCallee::calleeSaveRegistersImpl(void)::$_0 &&>>);
      }
      v3 = *a2;
      v4 = &unk_1ECF58FF0;
      goto LABEL_3;
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
      v3 = *a2;
      v4 = a1 + 48;
      goto LABEL_3;
    case 6:
      v3 = *a2;
      v4 = a1 + 40;
      goto LABEL_3;
    case 7:
      v7 = atomic_load(&qword_1ECF58FE8);
      if (v7 != -1)
      {
        v10 = &v8;
        v9 = &v10;
        std::__call_once(&qword_1ECF58FE8, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::JSEntrypointInterpreterCallee::calleeSaveRegistersImpl(void)::$_0 &&>>);
      }
      v3 = *a2;
      v4 = &unk_1ECF59010;
LABEL_3:
      *v3 = v4;
      break;
    case 9:
      **a2 = 0;
      break;
    default:
      return;
  }
}

void JSC::Wasm::Callee::destroy(JSC::Wasm::Callee *this, JSC::Wasm::Callee *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  JSC::Wasm::Callee *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  BOOL v24;
  unint64_t v25;
  unsigned int v26;
  JSC::Wasm::NameSection *v27;

  v8 = (unsigned int *)*((unsigned __int8 *)this + 6);
  switch(*((_BYTE *)this + 6))
  {
    case 0:
      JSC::Wasm::LLIntCallee::~LLIntCallee(this, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 1:
      JSC::Wasm::IPIntCallee::~IPIntCallee(this, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
      JSC::Wasm::BBQCallee::~BBQCallee(this, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 3:
    case 4:
    case 5:
      JSC::Wasm::OptimizingJITCallee::~OptimizingJITCallee(this, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 6:
      std::__destroy_at[abi:sn180100]<JSC::Wasm::JSEntrypointJITCallee,0>(this, a2, a3, a4, a5, a6, a7, a8, v8);
      goto LABEL_18;
    case 7:
      v18 = (unsigned int *)*((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          JSC::NativeCallee::operator delete();
        }
      }
      v21 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = 0;
      if (v21)
        WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
      v22 = (unsigned int *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      if (!v22)
        goto LABEL_25;
      do
      {
        v23 = __ldaxr(v22);
        v24 = --v23 == 0;
      }
      while (__stlxr(v23, v22));
      goto LABEL_23;
    case 8:
      std::__destroy_at[abi:sn180100]<JSC::Wasm::JSToWasmICCallee,0>(this, a2, a3, a4, a5, a6, a7, a8, v8);
LABEL_18:
      v10 = this;
LABEL_3:
      WTF::fastFree((unint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
      return;
    case 9:
      v25 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = 0;
      if (v25)
        WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
      v22 = (unsigned int *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      if (!v22)
        goto LABEL_25;
      do
      {
        v26 = __ldaxr(v22);
        v24 = --v26 == 0;
      }
      while (__stlxr(v26, v22));
LABEL_23:
      if (v24)
      {
        atomic_store(1u, v22);
        v27 = (JSC::Wasm::NameSection *)v22;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v27, a2, a3, a4, a5, a6, a7, a8);
      }
LABEL_25:
      WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
      return;
    default:
      return;
  }
}

uint64_t JSC::Wasm::Callee::handlerForIndex(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  return JSC::Wasm::HandlerInfo::handlerForIndex(a2, (unsigned int **)(a1 + 24), a3, a4);
}

double JSC::Wasm::JITCallee::JITCallee(uint64_t a1, char a2)
{
  double result;

  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 257;
  *(_BYTE *)(a1 + 6) = a2;
  *(_QWORD *)(a1 + 8) = 0x4000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

{
  double result;

  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 257;
  *(_BYTE *)(a1 + 6) = a2;
  *(_QWORD *)(a1 + 8) = 0x4000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t JSC::Wasm::JITCallee::JITCallee(uint64_t a1, char a2, unint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 1;
  *(_BYTE *)(a1 + 6) = a2;
  JSC::Wasm::IndexOrName::IndexOrName((unint64_t *)(a1 + 8), a3, a4, (uint64_t)a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

uint64_t JSC::Wasm::JITCallee::JITCallee(uint64_t a1, void *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  JSC::Wasm::NameSection *v15;

  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 1;
  *(_BYTE *)(a1 + 6) = (_BYTE)a2;
  v9 = *a4;
  if (!*a4)
    v9 = a3 | 0x8000000000000000;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = 0;
  v10 = a4[1];
  a4[1] = 0;
  v11 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v15 = (JSC::Wasm::NameSection *)v11;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v15, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

void JSC::Wasm::JITCallee::setEntrypoint(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::Compilation *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;

  v10 = *a2;
  *a2 = 0;
  v11 = (JSC::Compilation *)a1[5];
  a1[5] = v10;
  if (v11)
  {
    JSC::Compilation::~Compilation(v11, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = a2[1];
  a2[1] = 0;
  v21 = a1[6];
  a1[6] = v20;
  if (v21)
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  a1[7] = a2[2];
  v31 = a1;
  if (__ldaxr((unsigned __int8 *)&JSC::calleeRegistry))
  {
    __clrex();
LABEL_7:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::calleeRegistry);
    goto LABEL_8;
  }
  if (__stxr(1u, (unsigned __int8 *)&JSC::calleeRegistry))
    goto LABEL_7;
LABEL_8:
  WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::add(&qword_1ECF53D80, (uint64_t *)&v31, a3, a4, a5, a6, a7, a8, (uint64_t)&v30);
  v29 = __ldxr((unsigned __int8 *)&JSC::calleeRegistry);
  if (v29 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&JSC::calleeRegistry))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::calleeRegistry, 0, v23, v24, v25, v26, v27, v28);
}

uint64_t JSC::Wasm::WasmToJSCallee::singleton(JSC::Wasm::WasmToJSCallee *this)
{
  char v2;

  std::call_once[abi:sn180100]<JSC::Wasm::WasmToJSCallee::singleton(void)::$_0>((uint64_t)&v2);
  return JSC::Wasm::WasmToJSCallee::singleton(void)::callee;
}

void std::call_once[abi:sn180100]<JSC::Wasm::WasmToJSCallee::singleton(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::Wasm::WasmToJSCallee::singleton(void)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::Wasm::WasmToJSCallee::singleton(void)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmToJSCallee::singleton(void)::$_0 &&>>);
  }
}

uint64_t JSC::Wasm::IPIntCallee::IPIntCallee(uint64_t a1, _DWORD *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  int32x2_t v26;
  int v27;
  uint64_t v28;
  __int128 *v29;
  int v30;
  double v31;
  float v32;
  unint64_t v33;
  _DWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD *v49;
  __int128 v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  JSC::Wasm::NameSection *v53;

  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 1;
  *(_BYTE *)(a1 + 6) = 1;
  v10 = *a4;
  if (!*a4)
    v10 = a3 | 0x8000000000000000;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = 0;
  v11 = a4[1];
  a4[1] = 0;
  v12 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v53 = (JSC::Wasm::NameSection *)v12;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v53, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v15 = *((_QWORD *)a2 + 14);
  v16 = a2[31];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  if ((_DWORD)v16)
  {
    v17 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v16 + 8));
    v18 = v17;
    v19 = 0;
    *v17 = v16;
    do
    {
      *(_QWORD *)&v17[v19 + 2] = *(_QWORD *)(v15 + v19 * 4);
      v19 += 2;
    }
    while (2 * v16 != v19);
    if (v15)
    {
      WTF::fastFree(v15, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v15 = 0;
    }
  }
  else
  {
    v18 = 0;
  }
  v20 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v18;
  if (v20)
    WTF::fastFree(v20, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v15)
    WTF::fastFree(v15, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v21 = a2[13];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2) + v21;
  *(_DWORD *)(a1 + 96) = a2[6] - v21;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v22 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  *(_QWORD *)(a1 + 104) = v22;
  LODWORD(v21) = a2[10];
  a2[10] = 0;
  *(_DWORD *)(a1 + 112) = v21;
  LODWORD(v21) = a2[11];
  a2[11] = 0;
  *(_DWORD *)(a1 + 116) = v21;
  v23 = (WTF *)a2[23];
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = v22;
  *(_DWORD *)(a1 + 140) = (_DWORD)v23;
  if ((_DWORD)v23)
  {
    v24 = (void *)WTF::fastMalloc(v23);
    *(_DWORD *)(a1 + 136) = (_DWORD)v23;
    *(_QWORD *)(a1 + 128) = v24;
    memcpy(v24, *((const void **)a2 + 10), a2[23]);
    v25 = *(_QWORD *)(a1 + 128);
  }
  else
  {
    v25 = 0;
  }
  *(_DWORD *)(a1 + 152) = a2[12];
  v26 = *(int32x2_t *)(a2 + 15);
  *(_QWORD *)(a1 + 144) = v25;
  *(_DWORD *)(a1 + 156) = (v26.i32[0] + 1) & 0xFFFFFFFE;
  *(int32x2_t *)(a1 + 160) = vrev64_s32(v26);
  v27 = a2[14];
  *(_DWORD *)(a1 + 168) = a2[18];
  *(_DWORD *)(a1 + 172) = v27;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 181) = 0;
  v28 = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = 0;
  *(_QWORD *)(a1 + 200) = v28;
  if ((_BYTE)word_1ECF4C720)
    v29 = &xmmword_1ECF4C6D8;
  else
    v29 = (__int128 *)((char *)&xmmword_1ECF4C6D8 + 8);
  v30 = *(_DWORD *)v29;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = v30;
  if (v30 == 0x7FFFFFFF)
  {
    *(_DWORD *)(a1 + 184) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 176) = 0x80000000;
  }
  else if (v30 <= 0)
  {
    *(_DWORD *)(a1 + 180) = 0;
  }
  else
  {
    v31 = (double)v30;
    if ((double)v30 > (double)SHIDWORD(xmmword_1ECF4C514))
      v31 = (double)SHIDWORD(xmmword_1ECF4C514);
    *(_DWORD *)(a1 + 176) = (int)-v31;
    v32 = v31;
    *(float *)(a1 + 180) = v32;
  }
  *(_DWORD *)(a1 + 189) = 0;
  v33 = a2[37];
  if ((_DWORD)v33)
  {
    v34 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * ((3 * v33) & 0x3FFFFFFFFLL)) | 8));
    *v34 = v33;
    bzero(v34 + 2, 48 * ((48 * v33 - 48) / 0x30) + 48);
    v42 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v34;
    if (v42)
      WTF::fastFree(v42, v35, v36, v37, v38, v39, v40, v41);
    v43 = 0;
    if (v33 <= 1)
      v44 = 1;
    else
      v44 = v33;
    v45 = 6;
    v46 = 16;
    do
    {
      if (v43 >= a2[37] || (v47 = *(_DWORD **)(a1 + 24), *v47 <= v43))
      {
        __break(0xC471u);
        JUMPOUT(0x198C79C58);
      }
      v48 = *((_QWORD *)a2 + 17) + v46;
      v49 = &v47[v45];
      v50 = *(_OWORD *)(v48 - 16);
      *((_OWORD *)v49 - 1) = v50;
      if ((_DWORD)v50)
        v51 = ipint_catch_all_entry;
      else
        v51 = ipint_catch_entry;
      *(_QWORD *)v49 = *(_QWORD *)v48;
      *((_QWORD *)v49 + 2) = v51;
      if ((v50 | 2) == 2)
        v49[6] = *(_DWORD *)(v48 + 8);
      ++v43;
      v45 += 12;
      v46 += 28;
    }
    while (v44 != v43);
  }
  return a1;
}

_QWORD *WTF::FixedVector<JSC::Wasm::HandlerInfo>::FixedVector(_QWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v5;
  uint64_t v6;

  if (a2)
  {
    v5 = a2;
    v6 = 48 * a2;
    v3 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * ((3 * a2) & 0x3FFFFFFFFLL)) | 8));
    *v3 = v5;
    bzero(v3 + 2, 48 * ((v6 - 48) / 0x30uLL) + 48);
  }
  else
  {
    v3 = 0;
  }
  *a1 = v3;
  return a1;
}

void *JSC::Wasm::IPIntCallee::calleeSaveRegistersImpl(JSC::Wasm::IPIntCallee *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&_MergedGlobals_51);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&_MergedGlobals_51, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::IPIntCallee::calleeSaveRegistersImpl(void)::$_0 &&>>);
  }
  return &unk_1ECF58FF0;
}

uint64_t JSC::Wasm::LLIntCallee::LLIntCallee(uint64_t a1, _OWORD *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  int v43;
  double v44;
  float v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  int v98;
  int v99;
  int v100;
  WTF *v101[2];

  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 1;
  *(_BYTE *)(a1 + 6) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v10 = *a4;
  if (!*a4)
    v10 = a3 | 0x8000000000000000;
  *(_QWORD *)(a1 + 8) = v10;
  v11 = a4[1];
  a4[1] = 0;
  v12 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v101[0] = (WTF *)v12;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v101, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = *a2;
  *(_QWORD *)(a1 + 48) = 0;
  v15 = *((_QWORD *)a2 + 3);
  v16 = *((unsigned int *)a2 + 9);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  if ((_DWORD)v16)
  {
    v17 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v16) | 8));
    v18 = v17;
    v19 = 0;
    *v17 = v16;
    do
    {
      *(_OWORD *)&v17[v19 + 2] = *(_OWORD *)(v15 + v19 * 4);
      v19 += 4;
    }
    while (4 * v16 != v19);
    if (v15)
    {
      WTF::fastFree(v15, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v15 = 0;
    }
  }
  else
  {
    v18 = 0;
  }
  v20 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v18;
  if (v20)
    WTF::fastFree(v20, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v15)
    WTF::fastFree(v15, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 56) = 0;
  v21 = *((_QWORD *)a2 + 5);
  v22 = *((unsigned int *)a2 + 13);
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  if ((_DWORD)v22)
  {
    v23 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v22 + 8));
    v24 = v23;
    v25 = 0;
    *v23 = v22;
    do
    {
      *(_QWORD *)&v23[v25 + 2] = *(_QWORD *)(v21 + v25 * 4);
      v25 += 2;
    }
    while (2 * v22 != v25);
    if (v21)
    {
      WTF::fastFree(v21, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v21 = 0;
    }
  }
  else
  {
    v24 = 0;
  }
  v26 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v24;
  if (v26)
    WTF::fastFree(v26, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v21)
    WTF::fastFree(v21, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v27 = *(_OWORD *)((char *)a2 + 56);
  *((_QWORD *)a2 + 7) = 0;
  *(_OWORD *)(a1 + 64) = v27;
  *(_QWORD *)(a1 + 80) = 0;
  v28 = *((_QWORD *)a2 + 9);
  v29 = *((unsigned int *)a2 + 21);
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  if ((_DWORD)v29)
  {
    v30 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v29 + 4));
    v31 = v30;
    v32 = 0;
    *v30 = v29;
    do
    {
      v30[v32 + 1] = *(_DWORD *)(v28 + v32 * 4);
      ++v32;
    }
    while (v29 != v32);
    if (v28)
    {
      WTF::fastFree(v28, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v28 = 0;
    }
  }
  else
  {
    v31 = 0;
  }
  v33 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v31;
  if (v33)
    WTF::fastFree(v33, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v28)
    WTF::fastFree(v28, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 88) = 0;
  v34 = *((_QWORD *)a2 + 11);
  v35 = *((unsigned int *)a2 + 25);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  if ((_DWORD)v35)
  {
    v36 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v35 + 8));
    v37 = v36;
    v38 = 0;
    *v36 = v35;
    do
    {
      *(_QWORD *)&v36[v38 + 2] = *(_QWORD *)(v34 + v38 * 4);
      v38 += 2;
    }
    while (2 * v35 != v38);
    if (v34)
    {
      WTF::fastFree(v34, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v34 = 0;
    }
  }
  else
  {
    v37 = 0;
  }
  v39 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v37;
  if (v39)
    WTF::fastFree(v39, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v34)
    WTF::fastFree(v34, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 96) = 0;
  v40 = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 96) = v40;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 109) = 0;
  v41 = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = 0;
  *(_QWORD *)(a1 + 128) = v41;
  if ((_BYTE)word_1ECF4C720)
    v42 = &xmmword_1ECF4C6D8;
  else
    v42 = (__int128 *)((char *)&xmmword_1ECF4C6D8 + 8);
  v43 = *(_DWORD *)v42;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 112) = v43;
  if (v43 == 0x7FFFFFFF)
  {
    *(_DWORD *)(a1 + 112) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 104) = 0x80000000;
  }
  else if (v43 <= 0)
  {
    *(_DWORD *)(a1 + 108) = 0;
  }
  else
  {
    v44 = (double)v43;
    if ((double)v43 > (double)SHIDWORD(xmmword_1ECF4C514))
      v44 = (double)SHIDWORD(xmmword_1ECF4C514);
    *(_DWORD *)(a1 + 104) = (int)-v44;
    v45 = v44;
    *(float *)(a1 + 108) = v45;
  }
  *(_DWORD *)(a1 + 117) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v46 = *((_QWORD *)a2 + 15);
  v47 = *((unsigned int *)a2 + 33);
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  if ((_DWORD)v47)
  {
    v48 = 8 * v47;
    v49 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v47 + 8));
    v50 = v49;
    v51 = 0;
    *v49 = v47;
    do
    {
      v52 = *(_QWORD *)(v46 + v51);
      *(_QWORD *)(v46 + v51) = 0;
      *(_QWORD *)&v49[v51 / 4 + 2] = v52;
      v51 += 8;
    }
    while (v48 != v51);
    v53 = 0;
    do
    {
      v54 = *(_QWORD *)(v46 + v53);
      *(_QWORD *)(v46 + v53) = 0;
      if (v54)
        WTF::fastFree(v54, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v53 += 8;
    }
    while (v48 != v53);
    if (v46)
    {
      WTF::fastFree(v46, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v46 = 0;
    }
  }
  else
  {
    v50 = 0;
  }
  v55 = *(unsigned int **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v50;
  if (v55)
  {
    v57 = (unint64_t *)(v55 + 2);
    v56 = *v55;
    if ((_DWORD)v56)
    {
      v58 = 8 * v56;
      do
      {
        v59 = *v57;
        *v57 = 0;
        if (v59)
          WTF::fastFree(v59, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        ++v57;
        v58 -= 8;
      }
      while (v58);
    }
    WTF::fastFree((unint64_t)v55, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  if (v46)
    WTF::fastFree(v46, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v60 = *((unsigned int *)a2 + 37);
  if ((_DWORD)v60)
  {
    WTF::FixedVector<JSC::Wasm::HandlerInfo>::FixedVector(v101, *((unsigned int *)a2 + 37));
    v69 = v101[0];
    v101[0] = 0;
    v70 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v69;
    if (v70)
    {
      WTF::fastFree(v70, v62, v63, v64, v65, v66, v67, v68);
      v78 = v101[0];
      v101[0] = 0;
      if (v78)
        WTF::fastFree((unint64_t)v78, v71, v72, v73, v74, v75, v76, v77);
    }
    v79 = 0;
    v80 = 0;
    if (v60 <= 1)
      v81 = 1;
    else
      v81 = v60;
    v82 = 2;
    do
    {
      if (v79 >> 32 >= (unint64_t)*((unsigned int *)a2 + 37)
        || (v83 = *(_DWORD **)(a1 + 24), *v83 <= v80))
      {
        __break(0xC471u);
        JUMPOUT(0x198C7A2E4);
      }
      v84 = *((_QWORD *)a2 + 17) + 28 * SHIDWORD(v79);
      v85 = *(unsigned int *)(v84 + 12);
      v86 = **(_QWORD **)(a1 + 64);
      if (*(_DWORD *)v84)
      {
        v87 = *(unsigned __int8 *)(v86 + v85);
        if (v87 == 141)
          v88 = 2;
        else
          v88 = 1;
        if (v87 == 142)
          v89 = 4;
        else
          v89 = v88;
        JSC::LLInt::handleWasmCatchAll(v89, (uint64_t *)v101);
      }
      else
      {
        v98 = *(unsigned __int8 *)(v86 + v85);
        if (v98 == 141)
          v99 = 2;
        else
          v99 = 1;
        if (v98 == 142)
          v100 = 4;
        else
          v100 = v99;
        JSC::LLInt::handleWasmCatch(v100, (uint64_t *)v101);
      }
      v97 = v101[0];
      JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v101, v90, v91, v92, v93, v94, v95, v96);
      JSC::Wasm::HandlerInfo::initialize((uint64_t)&v83[v82], (__int128 *)v84, (uint64_t)v97);
      ++v80;
      v82 += 12;
      v79 += 0x100000000;
    }
    while (v81 != v80);
  }
  return a1;
}

void JSC::Wasm::LLIntCallee::setEntrypoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(a1 + 176) = a2;
  v17 = a1;
  if (__ldaxr((unsigned __int8 *)&JSC::calleeRegistry))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&JSC::calleeRegistry))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::calleeRegistry);
LABEL_5:
  WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::add(&qword_1ECF53D80, &v17, a3, a4, a5, a6, a7, a8, (uint64_t)&v16);
  v15 = __ldxr((unsigned __int8 *)&JSC::calleeRegistry);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)&JSC::calleeRegistry))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::calleeRegistry, 0, v9, v10, v11, v12, v13, v14);
}

void *JSC::Wasm::LLIntCallee::calleeSaveRegistersImpl(JSC::Wasm::LLIntCallee *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_1ECF58FE0);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECF58FE0, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::LLIntCallee::calleeSaveRegistersImpl(void)::$_0 &&>>);
  }
  return &unk_1ECF59000;
}

uint64_t JSC::Wasm::OptimizingJITCallee::getOrigin@<X0>(uint64_t this@<X0>, BOOL *a2@<X3>, unsigned int a3@<W1>, int a4@<W2>, unint64_t *a5@<X8>)
{
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;

  *a2 = 0;
  v5 = *(unsigned int **)(this + 72);
  v6 = *(unsigned int *)(this + 84);
  v7 = &v5[4 * v6];
  if ((_DWORD)v6)
  {
    v8 = *(unsigned int **)(this + 72);
    do
    {
      v9 = v6 >> 1;
      v10 = &v8[4 * (v6 >> 1)];
      v11 = v10[1];
      v12 = v10 + 4;
      v6 += ~(v6 >> 1);
      if (v11 == a3)
        v6 = v9;
      else
        v8 = v12;
    }
    while (v6);
  }
  else
  {
    v8 = &v5[4 * v6];
  }
  if (v8 != v7 && v8 != 0)
    v5 = v8;
  while (1)
  {
    if (v5 == v7)
    {
      v14 = *(_QWORD *)(this + 16);
      *a5 = *(_QWORD *)(this + 8);
      if (v14)
      {
        do
          v15 = __ldaxr((unsigned int *)v14);
        while (__stlxr(v15 + 1, (unsigned int *)v14));
      }
      goto LABEL_22;
    }
    if (*v5 <= a3 && v5[1] >= a3)
      break;
LABEL_19:
    v5 += 4;
  }
  if (a4)
  {
    --a4;
    goto LABEL_19;
  }
  *a2 = 1;
  v16 = v5[3];
  if (*(_DWORD *)(this + 100) > v16)
  {
    v17 = v5[2];
    v14 = *(_QWORD *)(*(_QWORD *)(this + 88) + 8 * v16);
    if (*(_DWORD *)(v14 + 52) > v17)
    {
      v20 = *(_QWORD *)(v14 + 40);
      do
        v21 = __ldaxr((unsigned int *)v14);
      while (__stlxr(v21 + 1, (unsigned int *)v14));
      a5[1] = 0;
      if (!v20)
        goto LABEL_27;
      v19 = v20 + 16 * v17;
    }
    else
    {
      do
        v18 = __ldaxr((unsigned int *)v14);
      while (__stlxr(v18 + 1, (unsigned int *)v14));
      a5[1] = 0;
LABEL_27:
      v19 = v17 | 0x8000000000000000;
    }
    *a5 = v19;
LABEL_22:
    a5[1] = v14;
    return this;
  }
  __break(0xC471u);
  return this;
}

uint64_t JSC::Wasm::OptimizingJITCallee::stackmap(uint64_t a1, int a2)
{
  int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  unsigned int v15;
  unsigned int *v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t result;
  int *v35;
  __int128 v37;

  v2 = *(int **)(a1 + 64);
  if (v2)
  {
    v3 = *(v2 - 2);
    v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
    v6 = v3 & (v5 ^ HIWORD(v5));
    v7 = v2[4 * v6];
    if (v7 != a2)
    {
      v8 = 1;
      while (v7 != -1)
      {
        v6 = ((_DWORD)v6 + v8) & v3;
        v7 = v2[4 * v6];
        ++v8;
        if (v7 == a2)
          goto LABEL_9;
      }
      v6 = *(v2 - 1);
    }
LABEL_9:
    v9 = &v2[4 * v6];
    v11 = *(v2 - 1);
    if (v6 != v11)
      goto LABEL_48;
    if (*(v2 - 3))
    {
      v10 = *(int **)(a1 + 64);
      if ((_DWORD)v11)
      {
        v12 = 16 * v6;
        v10 = *(int **)(a1 + 64);
        while (*v10 >= 0xFFFFFFFE)
        {
          v10 += 4;
          v12 -= 16;
          if (!v12)
          {
            v10 = v9;
            break;
          }
        }
      }
      v13 = v9;
      goto LABEL_20;
    }
    v10 = &v2[4 * v6];
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v6 = 0;
  }
  v13 = &v2[4 * v6];
  if (!v2)
  {
    v14 = 0;
    goto LABEL_21;
  }
LABEL_20:
  v14 = &v2[4 * *(v2 - 1)];
LABEL_21:
  if (v14 != v10)
  {
    v35 = v9;
    do
    {
      v15 = *v10;
      v16 = (unsigned int *)*((_QWORD *)v10 + 1);
      if (v16)
      {
        v19 = *v16;
        v17 = v16 + 2;
        v18 = v19;
        v20 = (unsigned int *)WTF::fastMalloc((WTF *)((16 * v19) | 8));
        v21 = v20;
        *v20 = v19;
        if (v19)
        {
          v22 = 0;
          do
          {
            *(_OWORD *)&v20[v22 + 2] = *(_OWORD *)&v17[v22];
            v22 += 4;
          }
          while (4 * v18 != v22);
        }
      }
      else
      {
        v21 = 0;
      }
      LODWORD(v37) = v15;
      WTF::dataLog<unsigned int,char [3]>(&v37);
      if (v21)
        v23 = (__int128 *)(v21 + 2);
      else
        v23 = 0;
      if (v21)
        v24 = (uint64_t)&v21[4 * *v21 + 2];
      else
        v24 = 0;
      while (v23 != (__int128 *)v24)
      {
        v25 = *v23++;
        v37 = v25;
        WTF::dataLog<JSC::Wasm::OSREntryValue,char [3]>((JSC::B3::ValueRep *)&v37);
      }
      WTF::dataLog<char [88],char [2]>("", "\n");
      if (v21)
        WTF::fastFree((unint64_t)v21, v26, v27, v28, v29, v30, v31, v32);
      v33 = v10 + 4;
      v10 = v13;
      if (v33 != v13)
      {
        v10 = v33;
        while (*v10 >= 0xFFFFFFFE)
        {
          v10 += 4;
          if (v10 == v13)
          {
            v10 = v13;
            break;
          }
        }
      }
    }
    while (v10 != v14);
    v9 = v35;
    v2 = *(int **)(a1 + 64);
  }
  if (v2)
  {
    v11 = *(v2 - 1);
LABEL_48:
    v2 += 4 * v11;
  }
  if (v9 != v2)
    return (uint64_t)(v9 + 2);
  result = 411;
  __break(0xC471u);
  return result;
}

uint64_t WTF::dataLog<unsigned int,char [3]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", ": ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::Wasm::OSREntryValue,char [3]>(JSC::B3::ValueRep *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::B3::ValueRep::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", ", ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::Wasm::JSEntrypointInterpreterCallee::JSEntrypointInterpreterCallee(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  char **v31;
  char *v32;

  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 257;
  *(_BYTE *)(a1 + 6) = 7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0x4000000000000000;
  v9 = *(unsigned int *)(a2 + 12);
  v10 = *(char **)a2;
  *(_DWORD *)(a1 + 32) = v9;
  if ((_DWORD)v9)
  {
    v11 = (_BYTE *)(a1 + 72);
    do
    {
      v12 = *v10++;
      *v11++ = v12;
      --v9;
    }
    while (v9);
  }
  *(_QWORD *)(a1 + 40) = 191;
  v13 = (a3 - qword_1ECF4C080) | 3;
  if (!a3)
    v13 = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v14 = (uint64_t *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 64) = 0;
  if (!BYTE1(dword_1ECF4C240))
  {
    v16 = qword_1ECF53318;
LABEL_16:
    *v14 = v16;
    return a1;
  }
  v15 = atomic_load(&JSC::LLInt::wasmFunctionEntryThunk(void)::onceKey);
  if (v15 != -1)
  {
    v32 = &v30;
    v31 = &v32;
    std::__call_once(&JSC::LLInt::wasmFunctionEntryThunk(void)::onceKey, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::wasmFunctionEntryThunk(void)::$_0 &&>>);
  }
  v16 = JSC::LLInt::wasmFunctionEntryThunk(void)::codeRef;
  v17 = (unsigned int *)JSC::LLInt::wasmFunctionEntryThunk(void)::codeRef;
  if (!JSC::LLInt::wasmFunctionEntryThunk(void)::codeRef)
    goto LABEL_16;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  *v14 = v16;
  do
  {
    v19 = __ldaxr(v17);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v17));
  if (!v20)
  {
    atomic_store(1u, v17);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  return a1;
}

void *JSC::Wasm::JSEntrypointInterpreterCallee::calleeSaveRegistersImpl(JSC::Wasm::JSEntrypointInterpreterCallee *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_1ECF58FE8);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECF58FE8, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::JSEntrypointInterpreterCallee::calleeSaveRegistersImpl(void)::$_0 &&>>);
  }
  return &unk_1ECF59010;
}

void JSC::Wasm::OptimizingJITCallee::linkExceptionHandlers(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  _DWORD *v21;

  v11 = a2[3];
  if ((_DWORD)v11)
  {
    v12 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * ((3 * v11) & 0x3FFFFFFFFLL)) | 8));
    *v12 = v11;
    bzero(v12 + 2, 48 * ((48 * v11 - 48) / 0x30uLL) + 48);
  }
  else
  {
    v12 = 0;
  }
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v12;
  if (v13)
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v11)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_DWORD **)(a1 + 24);
      if (*v17 <= v16)
        goto LABEL_17;
      if (v16 >= a2[3])
      {
        __break(0xC471u);
        JUMPOUT(0x198C7ABF4);
      }
      if (v16 >= *(unsigned int *)(a3 + 12))
      {
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x198C7ABA8);
      }
      v18 = (__int128 *)(*(_QWORD *)a2 + v14);
      v19 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v16);
      v20 = *v18;
      *(_OWORD *)&v17[v15 + 2] = *v18;
      v21 = &v17[v15];
      *((_QWORD *)v21 + 3) = *((_QWORD *)v18 + 2);
      *((_QWORD *)v21 + 5) = v19;
      if ((v20 | 2) == 2)
        v21[12] = *((_DWORD *)v18 + 6);
      ++v16;
      v15 += 12;
      v14 += 28;
    }
    while (12 * v11 != v15);
  }
}

void JSC::Wasm::CalleeGroup::createFromLLInt(uint64_t a1@<X0>, char a2@<W1>, unsigned int *a3@<X2>, unsigned int **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;

  v10 = WTF::fastMalloc((WTF *)0x88);
  v11 = *a4;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v22 = v11;
    *a5 = JSC::Wasm::CalleeGroup::CalleeGroup(v10, a1, a2, a3, &v22);
    v22 = 0;
    do
    {
      v20 = __ldaxr(v11);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v11));
    if (!v21)
    {
      atomic_store(1u, v11);
      v23 = v11;
      WTF::ThreadSafeRefCounted<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((unint64_t *)&v23, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  else
  {
    v22 = 0;
    *a5 = JSC::Wasm::CalleeGroup::CalleeGroup(v10, a1, a2, a3, &v22);
  }
}

void JSC::Wasm::CalleeGroup::createFromIPInt(uint64_t a1@<X0>, char a2@<W1>, unsigned int *a3@<X2>, unsigned int **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;

  v10 = WTF::fastMalloc((WTF *)0x88);
  v11 = *a4;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v22 = v11;
    *a5 = JSC::Wasm::CalleeGroup::CalleeGroup(v10, a1, a2, a3, &v22);
    v22 = 0;
    do
    {
      v20 = __ldaxr(v11);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v11));
    if (!v21)
    {
      atomic_store(1u, v11);
      v23 = v11;
      WTF::ThreadSafeRefCounted<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((unint64_t *)&v23, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  else
  {
    v22 = 0;
    *a5 = JSC::Wasm::CalleeGroup::CalleeGroup(v10, a1, a2, a3, &v22);
  }
}

uint64_t JSC::Wasm::CalleeGroup::createFromExisting@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x88);
  result = JSC::Wasm::CalleeGroup::CalleeGroup(v6, a1, a2);
  *a3 = result;
  return result;
}

uint64_t JSC::Wasm::CalleeGroup::CalleeGroup(uint64_t a1, char a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _DWORD v34[4];

  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a3 + 4);
  *(_BYTE *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(unsigned int **)(a3 + 40);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 40) = v5;
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)(a1 + 48), (int **)(a3 + 48));
  WTF::FixedVector<WTF::CodePtr<(WTF::PtrTag)64376,(WTF::FunctionAttributes)0>>::FixedVector((_QWORD *)(a1 + 56), *(unsigned int **)(a3 + 56));
  WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::FixedVector((unsigned int **)(a1 + 64), *(unsigned int **)(a3 + 64));
  WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::FixedVector((_QWORD *)(a1 + 72), *(unsigned int **)(a3 + 72));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = *(unsigned int *)(a1 + 4);
  *(_QWORD *)(a1 + 96) = 0;
  WTF::FixedVector<WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::FixedVector((_QWORD *)(a1 + 104), v7);
  *(_BYTE *)(a1 + 128) = 0;
  v8 = (unsigned __int8 *)(a1 + 128);
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if (__ldaxr((unsigned __int8 *)(a1 + 128)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 128);
LABEL_6:
  WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v34, a3 + 88);
  JSC::Wasm::CallsiteCollection::addCalleeGroupCallsites(a1 + 88, *(int **)(a1 + 72), v34, v10, v11, v12, v13, v14);
  v22 = *(unsigned int **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v22)
  {
    v23 = v22 + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 112));
  WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v15, v16, v17, v18, v19, v20, v21);
  v32 = __ldxr(v8);
  if (v32 == 1)
  {
    if (!__stlxr(0, v8))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 128), 0, v26, v27, v28, v29, v30, v31);
  return a1;
}

_QWORD *WTF::FixedVector<WTF::CodePtr<(WTF::PtrTag)64376,(WTF::FunctionAttributes)0>>::FixedVector(_QWORD *a1, unsigned int *a2)
{
  unsigned int *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  if (a2)
  {
    v3 = a2 + 2;
    v4 = *a2;
    v5 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v4 + 8));
    *v5 = v4;
    if ((_DWORD)v4)
    {
      v6 = 0;
      do
      {
        *(_QWORD *)&v5[v6 + 2] = *(_QWORD *)&v3[v6];
        v6 += 2;
      }
      while (2 * v4 != v6);
    }
  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
  return a1;
}

_QWORD *WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::FixedVector(_QWORD *a1, unsigned int *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;

  if (a2)
  {
    v3 = a2 + 2;
    v4 = *a2;
    v5 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v4) | 8));
    *v5 = v4;
    if ((_DWORD)v4)
    {
      v6 = &v3[2 * v4];
      v7 = v5 + 2;
      do
      {
        *v7 = *v3;
        v8 = (unsigned int *)v3[1];
        if (v8)
        {
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
        }
        v7[1] = v8;
        v3 += 2;
        v7 += 2;
      }
      while (v3 != v6);
    }
  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
  return a1;
}

uint64_t JSC::Wasm::CallsiteCollection::addCalleeGroupCallsites(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t result;
  __int128 v26;
  uint64_t v27;

  if (a2)
    v10 = *a2;
  else
    v10 = 0;
  v11 = a3[3];
  if (!(_DWORD)v11)
    return WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = *(unsigned int **)a3;
  v13 = *(_QWORD *)a3 + 16 * v11;
  while (1)
  {
    v14 = v12[3];
    if ((_DWORD)v14)
      break;
LABEL_6:
    v12 += 4;
    if (v12 == (unsigned int *)v13)
      return WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v15 = 32 * v14;
  v16 = (_DWORD *)(*(_QWORD *)v12 + 16);
  while (1)
  {
    v17 = *v16 - v10;
    v18 = *(unsigned int **)(a1 + 16);
    if (*v18 <= v17)
      break;
    v19 = &v18[4 * v17];
    v20 = v19 + 2;
    v21 = *((_QWORD *)v16 - 2);
    BYTE8(v26) = *((_BYTE *)v16 - 8);
    *(_QWORD *)&v26 = v21;
    v27 = 0;
    v22 = v19[5];
    if (v22 == v19[4])
    {
      WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::CallsiteCollection::Callsite>((uint64_t)v20, (unint64_t)&v26);
    }
    else
    {
      v23 = *v20 + 24 * v22;
      v24 = v26;
      *(_QWORD *)(v23 + 16) = v27;
      *(_OWORD *)v23 = v24;
      ++v19[5];
    }
    v16 += 8;
    v15 -= 32;
    if (!v15)
      goto LABEL_6;
  }
  result = 146;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  if (!(_DWORD)v9)
  {
    if (!v10)
      return a1;
LABEL_9:
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    return a1;
  }
  v12 = 16 * v9;
  do
  {
    v13 = *(_QWORD *)v10;
    if (*(_QWORD *)v10)
    {
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 8) = 0;
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
    v10 += 16;
    v12 -= 16;
  }
  while (v12);
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    goto LABEL_9;
  return a1;
}

uint64_t JSC::Wasm::CalleeGroup::CalleeGroup(uint64_t a1, uint64_t a2, char a3, unsigned int *a4, unsigned int **a5)
{
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  JSC::Wasm *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v32;
  BOOL v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  JSC::Wasm *v51;

  *(_DWORD *)a1 = 1;
  v9 = a4[13];
  *(_DWORD *)(a1 + 4) = v9;
  *(_BYTE *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v10 = *a5;
  if (*a5)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v9 = *(_DWORD *)(a1 + 4);
  }
  *(_QWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  WTF::FixedVector<WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::FixedVector((_QWORD *)(a1 + 104), v9);
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  do
    v12 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v12 + 1, (unsigned int *)a1));
  if ((_BYTE)dword_1ECF4C702)
  {
    v13 = WTF::fastMalloc((WTF *)0x1B8);
    do
      v14 = __ldaxr(a4);
    while (__stlxr(v14 + 1, a4));
    v50 = a4;
    v15 = *(_QWORD *)(a1 + 40) + 8;
    v16 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v16 + 8) = 1;
    *(_QWORD *)v16 = &off_1E35B54F0;
    *(_QWORD *)(v16 + 16) = a1;
    *(_QWORD *)(v16 + 24) = a1;
    v51 = (JSC::Wasm *)v16;
    JSC::Wasm::LLIntPlan::LLIntPlan(v13, a2, &v50, v15, &v51);
    v17 = *(unsigned int **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v13;
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v17 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    v21 = v51;
    v51 = 0;
    if (v21)
    {
      v22 = (unsigned int *)((char *)v21 + 8);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, (unsigned int *)v21 + 2);
        v21 = (JSC::Wasm *)(*(uint64_t (**)(JSC::Wasm *))(*(_QWORD *)v21 + 8))(v21);
      }
    }
    v25 = v50;
    v50 = 0;
    if (!v25)
      goto LABEL_20;
    do
    {
      v32 = __ldaxr(v25);
      v33 = --v32 == 0;
    }
    while (__stlxr(v32, v25));
LABEL_25:
    if (v33)
    {
      atomic_store(1u, v25);
      v51 = (JSC::Wasm *)v25;
      WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v51);
    }
    goto LABEL_20;
  }
  v37 = WTF::fastMalloc((WTF *)0x1E8);
  do
    v38 = __ldaxr(a4);
  while (__stlxr(v38 + 1, a4));
  v49 = a4;
  v39 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v39 + 8) = 1;
  *(_QWORD *)v39 = &off_1E35B5518;
  *(_QWORD *)(v39 + 16) = a1;
  *(_QWORD *)(v39 + 24) = a1;
  v51 = (JSC::Wasm *)v39;
  JSC::Wasm::EntryPlan::EntryPlan(v37, a2, (uint64_t *)&v49, 0, (uint64_t *)&v51);
  *(_QWORD *)v37 = off_1E35B5410;
  *(_QWORD *)(v37 + 72) = &unk_1E35B5478;
  *(_WORD *)(v37 + 484) = 0;
  *(_OWORD *)(v37 + 368) = 0u;
  *(_OWORD *)(v37 + 384) = 0u;
  *(_OWORD *)(v37 + 400) = 0u;
  *(_OWORD *)(v37 + 416) = 0u;
  *(_OWORD *)(v37 + 432) = 0u;
  *(_OWORD *)(v37 + 448) = 0u;
  *(_OWORD *)(v37 + 464) = 0u;
  v40 = *(unsigned int **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v37;
  if (v40)
  {
    v41 = v40 + 2;
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v40 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
    }
  }
  v21 = v51;
  v51 = 0;
  if (v21)
  {
    v44 = (unsigned int *)((char *)v21 + 8);
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, (unsigned int *)v21 + 2);
      v21 = (JSC::Wasm *)(*(uint64_t (**)(JSC::Wasm *))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  v25 = v49;
  v49 = 0;
  if (v25)
  {
    do
    {
      v47 = __ldaxr(v25);
      v33 = --v47 == 0;
    }
    while (__stlxr(v47, v25));
    goto LABEL_25;
  }
LABEL_20:
  *(_BYTE *)(*(_QWORD *)(a1 + 80) + 12) = a3;
  v26 = JSC::Wasm::ensureWorklist(v21);
  v27 = *(unsigned int **)(a1 + 80);
  v28 = v27 + 2;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  v48 = v27;
  JSC::Wasm::Worklist::enqueue(v26, &v48);
  v30 = v48;
  v48 = 0;
  if (v30)
  {
    v34 = v30 + 2;
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
    }
  }
  return a1;
}

{
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  char v48;
  JSC::Wasm::ModuleInformation **v49;
  JSC::Wasm::ModuleInformation *v50;

  *(_DWORD *)a1 = 1;
  v9 = a4[13];
  *(_DWORD *)(a1 + 4) = v9;
  *(_BYTE *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v10 = *a5;
  if (*a5)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v9 = *(_DWORD *)(a1 + 4);
  }
  *(_QWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  WTF::FixedVector<WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::FixedVector((_QWORD *)(a1 + 104), v9);
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  do
    v12 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v12 + 1, (unsigned int *)a1));
  if (byte_1ECF4C798)
  {
    v13 = WTF::fastMalloc((WTF *)0x1B8);
    do
      v14 = __ldaxr(a4);
    while (__stlxr(v14 + 1, a4));
    v47 = a4;
    v15 = *(_QWORD *)(a1 + 32) + 8;
    v16 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v16 + 8) = 1;
    *(_QWORD *)v16 = &off_1E35B5568;
    *(_QWORD *)(v16 + 16) = a1;
    *(_QWORD *)(v16 + 24) = a1;
    v50 = (JSC::Wasm::ModuleInformation *)v16;
    JSC::Wasm::IPIntPlan::IPIntPlan(v13, a2, (uint64_t *)&v47, v15, (uint64_t *)&v50);
    v17 = *(unsigned int **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v13;
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v17 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    v21 = (unsigned int *)v50;
    v50 = 0;
    if (v21)
    {
      v22 = v21 + 2;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v21 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
      }
    }
    v25 = v47;
    v47 = 0;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        v50 = (JSC::Wasm::ModuleInformation *)v25;
        WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v50);
      }
    }
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x1E8);
    do
      v29 = __ldaxr(a4);
    while (__stlxr(v29 + 1, a4));
    v30 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v30 + 8) = 1;
    *(_QWORD *)v30 = &off_1E35B5590;
    *(_QWORD *)(v30 + 16) = a1;
    *(_QWORD *)(v30 + 24) = a1;
    *(_DWORD *)(v28 + 8) = 1;
    *(_WORD *)(v28 + 12) = 0;
    *(_BYTE *)(v28 + 14) = 0;
    *(_QWORD *)(v28 + 40) = a2;
    *(_QWORD *)(v28 + 16) = a4;
    *(_QWORD *)(v28 + 24) = v28 + 40;
    *(_BYTE *)(v28 + 64) = 0;
    *(_QWORD *)(v28 + 48) = v30;
    *(_QWORD *)(v28 + 56) = 0;
    *(_QWORD *)(v28 + 32) = 0x100000001;
    *(_QWORD *)(v28 + 72) = &unk_1E35B56A0;
    *(_QWORD *)v28 = off_1E35B5640;
    *(_QWORD *)(v28 + 144) = 0;
    *(_OWORD *)(v28 + 112) = 0u;
    *(_OWORD *)(v28 + 128) = 0u;
    *(_OWORD *)(v28 + 80) = 0u;
    *(_OWORD *)(v28 + 96) = 0u;
    do
      v31 = __ldaxr(a4);
    while (__stlxr(v31 + 1, a4));
    *(_QWORD *)(v28 + 152) = a4;
    *(_QWORD *)(v28 + 160) = v28 + 72;
    *(_QWORD *)(v28 + 176) = 0;
    *(_QWORD *)(v28 + 184) = 0;
    *(_QWORD *)(v28 + 168) = 0;
    *(_BYTE *)(v28 + 192) = 0;
    *(_OWORD *)(v28 + 200) = 0u;
    *(_OWORD *)(v28 + 216) = 0u;
    CC_SHA1_Init((CC_SHA1_CTX *)(v28 + 232));
    *(_QWORD *)(v28 + 328) = 0;
    *(_QWORD *)(v28 + 336) = 0;
    *(_DWORD *)(v28 + 344) = 0;
    if ((_QWORD)xmmword_1ECF4C290)
      WTF::dataLog<char [88],char [2]>("Wasm streaming parser created, but we can only dump source in debug builds.", "\n");
    *(_BYTE *)(v28 + 352) = 1;
    *(_QWORD *)(v28 + 360) = 0;
    *(_DWORD *)(v28 + 353) = 0;
    *(_QWORD *)v28 = off_1E35B5410;
    *(_QWORD *)(v28 + 72) = &unk_1E35B5478;
    *(_WORD *)(v28 + 484) = 0;
    *(_OWORD *)(v28 + 368) = 0u;
    *(_OWORD *)(v28 + 384) = 0u;
    *(_OWORD *)(v28 + 400) = 0u;
    *(_OWORD *)(v28 + 416) = 0u;
    *(_OWORD *)(v28 + 432) = 0u;
    *(_OWORD *)(v28 + 448) = 0u;
    *(_OWORD *)(v28 + 464) = 0u;
    v32 = *(unsigned int **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v28;
    if (v32)
    {
      v33 = v32 + 2;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v32 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
      }
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 80) + 12) = a3;
  v36 = atomic_load(&JSC::Wasm::ensureWorklist(void)::initializeWorklist);
  if (v36 != -1)
  {
    v50 = (JSC::Wasm::ModuleInformation *)&v48;
    v49 = &v50;
    std::__call_once(&JSC::Wasm::ensureWorklist(void)::initializeWorklist, &v49, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::ensureWorklist(void)::$_0 &&>>);
  }
  v37 = JSC::Wasm::globalWorklist;
  v38 = *(unsigned int **)(a1 + 80);
  v39 = v38 + 2;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 + 1, v39));
  v46 = v38;
  JSC::Wasm::Worklist::enqueue(v37, &v46);
  v41 = v46;
  v46 = 0;
  if (v41)
  {
    v43 = v41 + 2;
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v41 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
    }
  }
  return a1;
}

void JSC::Wasm::CalleeGroup::~CalleeGroup(JSC::Wasm::CalleeGroup *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  JSC::Wasm::CallsiteCollection::~CallsiteCollection((JSC::Wasm::CalleeGroup *)((char *)this + 88), a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::~FixedVector((unsigned int **)this + 9, v10, v11, v12, v13, v14, v15, v16);
  WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::~FixedVector((unsigned int **)this + 8, v21, v22, v23, v24, v25, v26, v27);
  v35 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v35)
    WTF::fastFree(v35, v28, v29, v30, v31, v32, v33, v34);
  v36 = *((_QWORD *)this + 6);
  if (v36)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(v36, v28, v29, v30, v31, v32, v33, v34);
  v37 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v37)
  {
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      v58 = v37;
      WTF::ThreadSafeRefCounted<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((unint64_t *)&v58, (uint64_t)v28, v29, v30, v31, v32, v33, v34);
    }
  }
  v40 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v40)
  {
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v40);
      v58 = v40;
      WTF::ThreadSafeRefCounted<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((unint64_t *)&v58, (uint64_t)v28, v29, v30, v31, v32, v33, v34);
    }
  }
  WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::~FixedVector((unsigned int **)this + 3, (uint64_t)v28, v29, v30, v31, v32, v33, v34);
  WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::~FixedVector((unsigned int **)this + 2, v43, v44, v45, v46, v47, v48, v49);
}

void JSC::Wasm::CallsiteCollection::~CallsiteCollection(JSC::Wasm::CallsiteCollection *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    v10 = WTF::TrailingArray<WTF::EmbeddedFixedVector<WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~TrailingArray(v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  }
  v18 = *((unsigned int *)this + 3);
  v19 = *(_QWORD *)this;
  if (!(_DWORD)v18)
  {
    if (!v19)
      return;
LABEL_11:
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v20 = 16 * v18;
  do
  {
    v21 = *(_QWORD *)v19;
    if (*(_QWORD *)v19)
    {
      *(_QWORD *)v19 = 0;
      *(_DWORD *)(v19 + 8) = 0;
      WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    }
    v19 += 16;
    v20 -= 16;
  }
  while (v20);
  v19 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    goto LABEL_11;
}

unsigned int **WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::~FixedVector(unsigned int **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v11 = v9 + 2;
    v10 = *v9;
    if ((_DWORD)v10)
    {
      v12 = &v11[4 * v10];
      do
      {
        v13 = (unsigned int *)*((_QWORD *)v11 + 1);
        *((_QWORD *)v11 + 1) = 0;
        if (v13)
        {
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v13);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
          }
        }
        v11 += 4;
      }
      while (v11 != v12);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unsigned int **WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::~FixedVector(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct((unsigned int **)v9 + 1, (uint64_t)&v9[2 * *v9 + 2], a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v9, v10, v11, v12, v13, v14, v15, v16);
  }
  return a1;
}

void JSC::Wasm::CalleeGroup::waitUntilFinished(JSC::Wasm::CalleeGroup *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char **v20;
  char *v21;

  v9 = (unsigned __int8 *)this + 128;
  if (__ldaxr((unsigned __int8 *)this + 128))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 128);
LABEL_5:
  v11 = (unsigned int *)*((_QWORD *)this + 10);
  if (v11)
  {
    v12 = v11 + 2;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = __ldxr(v9);
  if (v14 != 1)
  {
    __clrex();
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
    if (!v11)
      return;
    goto LABEL_14;
  }
  if (__stlxr(0, v9))
    goto LABEL_13;
  if (!v11)
    return;
LABEL_14:
  v15 = atomic_load(&JSC::Wasm::ensureWorklist(void)::initializeWorklist);
  if (v15 != -1)
  {
    v21 = &v19;
    v20 = &v21;
    std::__call_once(&JSC::Wasm::ensureWorklist(void)::initializeWorklist, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::ensureWorklist(void)::$_0 &&>>);
  }
  JSC::Wasm::Worklist::completePlanSynchronously((JSC::Wasm::Worklist *)JSC::Wasm::globalWorklist, (JSC::Wasm::Plan *)v11, a3, a4, a5, a6, a7, a8);
  v16 = v11 + 2;
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
  {
    atomic_store(1u, v11 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
  }
}

void JSC::Wasm::CalleeGroup::compileAsync(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  JSC::Wasm::CalleeGroup *v46[3];
  unsigned int *v47;

  v11 = (unsigned __int8 *)(a1 + 128);
  if (__ldaxr((unsigned __int8 *)(a1 + 128)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 128);
    goto LABEL_4;
  }
  if (__stxr(1u, v11))
    goto LABEL_3;
LABEL_4:
  v13 = *(unsigned int **)(a1 + 80);
  if (v13)
  {
    v14 = v13 + 2;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v16 = __ldxr(v11);
  if (v16 == 1)
  {
    if (!__stlxr(0, v11))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_9:
  if (v13)
  {
    do
      v17 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v17 + 1, (unsigned int *)a1));
    v46[0] = (JSC::Wasm::CalleeGroup *)a1;
    v18 = *a3;
    *a3 = 0;
    v19 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v19 + 8) = 1;
    *(_QWORD *)v19 = &off_1E35B55E0;
    *(_QWORD *)(v19 + 16) = a1;
    *(_QWORD *)(v19 + 24) = v18;
    v46[1] = 0;
    v46[2] = 0;
    *(_QWORD *)(v19 + 32) = a1;
    v47 = (unsigned int *)v19;
    JSC::Wasm::Plan::addCompletionTask((uint64_t)v13, a2, &v47);
    v27 = v47;
    v47 = 0;
    if (v27)
    {
      v28 = v27 + 2;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v27 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
      }
    }
    JSC::Wasm::CalleeGroup::compileAsync(JSC::VM &,WTF::RefPtr<WTF::SharedTask<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>,WTF::RawPtrTraits<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>,WTF::DefaultRefDerefTraits<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>> &&)::$_0::~$_0((uint64_t)v46, v20, v21, v22, v23, v24, v25, v26);
    v31 = v13 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  else
  {
    v34 = *a3;
    do
      v35 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v35 + 1, (unsigned int *)a1));
    v47 = (unsigned int *)a1;
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v34 + 16))(v34, &v47);
    v43 = v47;
    v47 = 0;
    if (v43)
    {
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        atomic_store(1u, v43);
        v46[0] = (JSC::Wasm::CalleeGroup *)v43;
        WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v46, v36, v37, v38, v39, v40, v41, v42);
      }
    }
  }
}

uint64_t JSC::Wasm::CalleeGroup::compileAsync(JSC::VM &,WTF::RefPtr<WTF::SharedTask<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>,WTF::RawPtrTraits<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>,WTF::DefaultRefDerefTraits<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>> &&)::$_0::~$_0(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  JSC::Wasm::CalleeGroup *v17;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v17 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v17, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  return a1;
}

uint64_t JSC::Wasm::CalleeGroup::isSafeToRun(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  uint64_t result;

  v2 = atomic_load((unsigned __int8 *)(a1 + 112));
  if ((v2 & 1) == 0 || *(_QWORD *)(a1 + 120))
    return 0;
  if (*(_BYTE *)(a1 + 8) == 1)
    return a2 == 1;
  if (!*(_BYTE *)(a1 + 8))
    return 1;
  result = 267;
  __break(0xC471u);
  return result;
}

__int128 *JSC::Wasm::jsCallingConvention(JSC::Wasm *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::Wasm::jsCallingConvention(void)::staticJSCCallingConventionFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::Wasm::jsCallingConvention(void)::staticJSCCallingConventionFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::jsCallingConvention(void)::$_0 &&>>);
  }
  return &JSC::Wasm::jsCallingConvention(void)::staticJSCallingConvention;
}

uint64_t WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10)
  {
    v12 = *(_QWORD *)a1;
    v13 = 16 * v10;
    do
    {
      v14 = *(_QWORD *)v12;
      if (*(_QWORD *)v12)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 += 16;
      v13 -= 16;
    }
    while (v13);
  }
  WTF::GenericHashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::Wasm::BBQPlan::~BBQPlan(JSC::Wasm::BBQPlan *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::Wasm::BBQPlan::~BBQPlan(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  JSC::Wasm::CompilationContext *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  _QWORD *v34;
  JSC::Wasm::InternalFunction *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::LinkBuffer *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  JSC::LinkBuffer **v56;
  uint64_t v57;
  JSC::LinkBuffer *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::Wasm::InternalFunction **v67;
  uint64_t v68;
  JSC::Wasm::InternalFunction *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  JSC::Wasm::Callee *v78;
  JSC::Wasm::CalleeGroup *v79;

  v9 = (unsigned int *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v79 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v79, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((unsigned int *)this + 117);
  v13 = *((_QWORD *)this + 57);
  if ((_DWORD)v12)
  {
    v14 = 16 * v12;
    do
    {
      v15 = *(_QWORD *)v13;
      if (*(_QWORD *)v13)
      {
        *(_QWORD *)v13 = 0;
        *(_DWORD *)(v13 + 8) = 0;
        WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      }
      v13 += 16;
      v14 -= 16;
    }
    while (v14);
    v13 = *((_QWORD *)this + 57);
  }
  if (v13)
  {
    *((_QWORD *)this + 57) = 0;
    *((_DWORD *)this + 116) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *((unsigned int *)this + 113);
  if ((_DWORD)v16)
    WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct(*((unsigned int ***)this + 55), *((_QWORD *)this + 55) + 8 * v16, a3, a4, a5, a6, a7, a8);
  v17 = *((_QWORD *)this + 55);
  if (v17)
  {
    *((_QWORD *)this + 55) = 0;
    *((_DWORD *)this + 112) = 0;
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = *((unsigned int *)this + 109);
  if ((_DWORD)v18)
  {
    v29 = (JSC::Wasm::CompilationContext *)*((_QWORD *)this + 53);
    v30 = 72 * v18;
    do
    {
      JSC::Wasm::CompilationContext::~CompilationContext(v29, a2, a3, a4, a5, a6, a7, a8);
      v29 = (JSC::Wasm::CompilationContext *)(v31 + 72);
      v30 -= 72;
    }
    while (v30);
  }
  v19 = *((_QWORD *)this + 53);
  if (v19)
  {
    *((_QWORD *)this + 53) = 0;
    *((_DWORD *)this + 108) = 0;
    WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = *((_QWORD *)this + 52);
  if (v20)
  {
    v32 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v32)
    {
      for (i = 0; i != v32; ++i)
      {
        if (*(_DWORD *)(v20 + 32 * i) != -2)
        {
          v34 = (_QWORD *)(v20 + 32 * i);
          v35 = (JSC::Wasm::InternalFunction *)v34[3];
          v34[3] = 0;
          if (v35)
          {
            JSC::Wasm::InternalFunction::~InternalFunction(v35, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
          }
          v44 = (JSC::LinkBuffer *)v34[2];
          v34[2] = 0;
          if (v44)
          {
            JSC::LinkBuffer::~LinkBuffer(v44, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
          }
          v53 = (unsigned int *)v34[1];
          v34[1] = 0;
          if (v53)
          {
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              atomic_store(1u, v53);
              v78 = (JSC::Wasm::Callee *)v53;
              JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, (uint64_t)v53, a3, a4, a5, a6, a7, a8);
              if (*((_BYTE *)v78 + 4) == 1)
                JSC::Wasm::Callee::destroy(v78, a2, a3, a4, a5, a6, a7, a8);
            }
          }
        }
      }
    }
    WTF::fastFree(v20 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = *((unsigned int *)this + 103);
  v22 = *((_QWORD *)this + 50);
  if ((_DWORD)v21)
  {
    v23 = 16 * v21;
    do
    {
      v24 = *(_QWORD *)v22;
      if (*(_QWORD *)v22)
      {
        *(_QWORD *)v22 = 0;
        *(_DWORD *)(v22 + 8) = 0;
        WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
      }
      v22 += 16;
      v23 -= 16;
    }
    while (v23);
    v22 = *((_QWORD *)this + 50);
  }
  if (v22)
  {
    *((_QWORD *)this + 50) = 0;
    *((_DWORD *)this + 102) = 0;
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  }
  v25 = *((unsigned int *)this + 99);
  if ((_DWORD)v25)
  {
    v56 = (JSC::LinkBuffer **)*((_QWORD *)this + 48);
    v57 = 8 * v25;
    do
    {
      v58 = *v56;
      *v56 = 0;
      if (v58)
      {
        JSC::LinkBuffer::~LinkBuffer(v58, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
      }
      ++v56;
      v57 -= 8;
    }
    while (v57);
  }
  v26 = *((_QWORD *)this + 48);
  if (v26)
  {
    *((_QWORD *)this + 48) = 0;
    *((_DWORD *)this + 98) = 0;
    WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
  }
  v27 = *((unsigned int *)this + 95);
  if ((_DWORD)v27)
  {
    v67 = (JSC::Wasm::InternalFunction **)*((_QWORD *)this + 46);
    v68 = 8 * v27;
    do
    {
      v69 = *v67;
      *v67 = 0;
      if (v69)
      {
        JSC::Wasm::InternalFunction::~InternalFunction(v69, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
      }
      ++v67;
      v68 -= 8;
    }
    while (v68);
  }
  v28 = *((_QWORD *)this + 46);
  if (v28)
  {
    *((_QWORD *)this + 46) = 0;
    *((_DWORD *)this + 94) = 0;
    WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::Wasm::EntryPlan::~EntryPlan(this, a2, a3, a4, a5, a6, a7, a8);
}

BOOL JSC::Wasm::EntryPlan::multiThreaded(JSC::Wasm::EntryPlan *this)
{
  return *((unsigned __int8 *)this + 352) > 1u;
}

BOOL JSC::Wasm::EntryPlan::isComplete(JSC::Wasm::EntryPlan *this)
{
  return *((_BYTE *)this + 352) == 4;
}

void `non-virtual thunk to'JSC::Wasm::BBQPlan::~BBQPlan(JSC::Wasm::BBQPlan *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::BBQPlan::~BBQPlan((JSC::Wasm::BBQPlan *)((char *)this - 72), a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::Wasm::BBQPlan::~BBQPlan((JSC::Wasm::BBQPlan *)((char *)this - 72), a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::Wasm::StreamingParserClient::didReceiveSectionData()
{
  return 1;
}

void JSC::Wasm::OptimizingJITCallee::setEntrypoint(_QWORD *a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD v38[2];
  unint64_t v39;
  int v40;
  int v41;

  v13 = *(_QWORD *)a3;
  v14 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if ((_DWORD)v14)
  {
    v15 = (_DWORD *)WTF::fastMalloc((WTF *)((32 * v14) | 8));
    v16 = v15;
    v17 = 0;
    *v15 = v14;
    do
    {
      v18 = &v15[v17];
      v19 = *(_OWORD *)(v13 + v17 * 4);
      *(_OWORD *)(v18 + 6) = *(_OWORD *)(v13 + v17 * 4 + 16);
      *(_OWORD *)(v18 + 2) = v19;
      v17 += 8;
    }
    while (8 * v14 != v17);
    if (v13)
    {
      WTF::fastFree(v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  v20 = a1[4];
  a1[4] = v16;
  if (v20)
    WTF::fastFree(v20, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v13)
    WTF::fastFree(v13, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v21 = *a4;
  *a4 = 0;
  v22 = a1[8];
  a1[8] = v21;
  if (v22)
  {
    v35 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v35)
    {
      v36 = (unint64_t *)(v22 + 8);
      do
      {
        if (*((_DWORD *)v36 - 2) != -2)
        {
          v37 = *v36;
          *v36 = 0;
          if (v37)
            WTF::fastFree(v37, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        v36 += 2;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree(v22 - 16, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  v23 = *(_DWORD *)(a5 + 12);
  if (v23 != *(_DWORD *)(a6 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x198C7C33CLL);
  }
  v24 = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v39 = v24;
  v25 = *(_DWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v40 = v25;
  v41 = v23;
  v26 = *(_QWORD *)a6;
  *(_QWORD *)a6 = 0;
  v38[0] = v26;
  v27 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a6 + 8) = 0;
  v38[1] = v27;
  JSC::Wasm::OptimizingJITCallee::linkExceptionHandlers((uint64_t)a1, (unsigned int *)&v39, (uint64_t)v38, (uint64_t)a4, a5, a6, a7, a8);
  if (v26)
    WTF::fastFree(v26, v28, v29, v30, v31, v32, v33, v34);
  if (v24)
    WTF::fastFree(v24, v28, v29, v30, v31, v32, v33, v34);
  JSC::Wasm::JITCallee::setEntrypoint(a1, (uint64_t *)a2, v29, v30, v31, v32, v33, v34);
}

void WTF::Vector<WTF::UniqueRef<WTF::EmbeddedFixedVector<JSC::CodeLocationLabel<(WTF::PtrTag)40321>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v10 = *(unsigned int *)(a1 + 12);
    if (v10 > a2)
    {
      v11 = (unint64_t *)(*(_QWORD *)a1 + 8 * a2);
      v12 = 8 * v10 - 8 * a2;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
          WTF::fastFree(v13, (void *)a2, a3, a4, a5, a6, a7, a8);
        ++v11;
        v12 -= 8;
      }
      while (v12);
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v10) = a2;
    }
    v14 = *(const void **)a1;
    if (a2)
    {
      if (*(_DWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 8) = a2;
        *(_QWORD *)a1 = WTF::fastRealloc((unint64_t)v14, 8 * a2, a3, a4, a5, a6, a7, a8);
        return;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v15 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = v15;
      if (v15 != v14)
        memcpy(v15, v14, 8 * v10);
    }
    if (v14)
    {
      if (*(const void **)a1 == v14)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v14, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::add<WTF::Box<JSC::PCToCodeOriginMap>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::NativeCallee *,WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::NativeCallee *>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v17 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a2) & v9;
  v18 = (uint64_t *)(v8 + 16 * v17);
  v19 = *v18;
  v20 = *a2;
  if (*v18)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v19 == v20)
      {
        v29 = *a1;
        if (*a1)
          v30 = *(unsigned int *)(v29 - 4);
        else
          v30 = 0;
        v31 = 0;
        v32 = v29 + 16 * v30;
        goto LABEL_33;
      }
      if (v19 == -1)
        v21 = v18;
      v17 = (v17 + v22) & v9;
      v18 = (uint64_t *)(v8 + 16 * v17);
      v19 = *v18;
      ++v22;
    }
    while (*v18);
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v20 = *a2;
      v18 = v21;
    }
  }
  *v18 = v20;
  v23 = *a3;
  *a3 = 0;
  v24 = v18[1];
  v18[1] = v23;
  if (v24)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v24));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v24);
      v38 = *(_QWORD *)(v24 + 24);
      if (v38)
        WTF::fastFree(v38, v10, v11, v12, v13, v14, v15, v16);
      v39 = *(_QWORD *)(v24 + 32);
      if (v39)
        WTF::fastFree(v39, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v24, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  v27 = *a1;
  if (*a1)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v33 = *a1;
  if (*a1)
    v34 = *(_DWORD *)(v33 - 12);
  else
    v34 = 0;
  v35 = (*(_DWORD *)(v33 - 16) + v34);
  v36 = *(unsigned int *)(v33 - 4);
  if (v36 > 0x400)
  {
    if (v36 <= 2 * v35)
      goto LABEL_27;
  }
  else if (3 * v36 <= 4 * v35)
  {
    if (!(_DWORD)v36)
    {
      v37 = 8;
LABEL_30:
      v18 = WTF::HashTable<JSC::NativeCallee *,WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::NativeCallee *>>::rehash(a1, v37, v18);
      v33 = *a1;
      if (*a1)
        v36 = *(unsigned int *)(v33 - 4);
      else
        v36 = 0;
      goto LABEL_32;
    }
LABEL_27:
    v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
    goto LABEL_30;
  }
LABEL_32:
  v32 = v33 + 16 * v36;
  v31 = 1;
LABEL_33:
  *(_QWORD *)a4 = v18;
  *(_QWORD *)(a4 + 8) = v32;
  *(_BYTE *)(a4 + 16) = v31;
}

_QWORD *WTF::FixedVector<WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::FixedVector(_QWORD *a1, uint64_t a2)
{
  int v4;
  size_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;

  if (a2)
  {
    v4 = a2;
    v5 = 8 * a2;
    v6 = (_DWORD *)WTF::fastMalloc((WTF *)(v5 + 8));
    *v6 = v4;
    bzero(v6 + 2, v5);
    v14 = 0;
    *a1 = v6;
    WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::~FixedVector(&v14, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a1 != (unsigned int **)a2)
  {
    v9 = a1;
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v10, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v9;
    }
    while (v9 != (unsigned int **)a2);
  }
}

void std::make_unique[abi:sn180100]<JSC::LinkBuffer,JSC::CCallHelpers &,JSC::Wasm::JSEntrypointJITCallee *,JSC::LinkBuffer::Profile,JSC::JITCompilationEffort>(uint64_t *a1, uint64_t a2, uint64_t *a3, int *a4, unsigned int *a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  pthread_key_t *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int v26;
  unint64_t v27;
  BOOL v28;

  v10 = WTF::fastMalloc((WTF *)0xE0);
  v11 = *a3;
  v12 = *a4;
  v13 = *a5;
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v10 + 24) = v10 + 32;
  *(_DWORD *)(v10 + 160) = 128;
  v14 = (pthread_key_t *)JSC::threadSpecificAssemblerData((JSC *)v10);
  v15 = WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::operator*(v14);
  v24 = v15 + 1;
  v23 = *v15;
  if ((_QWORD *)*v15 != v15 + 1)
  {
    v25 = v15;
    v26 = *((_DWORD *)v15 + 34);
    if (*(_DWORD *)(v10 + 160) < v26)
    {
      v27 = *(_QWORD *)(v10 + 24);
      if (v27)
        v28 = v27 == v10 + 32;
      else
        v28 = 1;
      if (!v28)
      {
        WTF::fastFree(v27, v16, v17, v18, v19, v20, v21, v22);
        v23 = *v25;
        v26 = *((_DWORD *)v25 + 34);
      }
      *(_QWORD *)(v10 + 24) = v23;
      *(_DWORD *)(v10 + 160) = v26;
      *v25 = v24;
      *((_DWORD *)v25 + 34) = 128;
    }
  }
  *(_BYTE *)(v10 + 168) = 1;
  *(_DWORD *)(v10 + 169) = 0;
  *(_DWORD *)(v10 + 176) = v12;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(_QWORD *)(v10 + 216) = 0;
  JSC::LinkBuffer::linkCode(v10, a2, v13, v18, v19, v20, v21, v22);
  *a1 = v10;
}

void std::make_unique[abi:sn180100]<JSC::Compilation,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)2367>,decltype(nullptr)>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v13 = *a1;
  v12 = (unsigned int *)a1[1];
  a1[1] = 0;
  *v11 = v13;
  if (v12)
  {
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 + 1, v12));
    v11[1] = v12;
    v11[2] = 0;
    *a2 = v11;
    do
    {
      v15 = __ldaxr(v12);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v12));
    if (!v16)
    {
      atomic_store(1u, v12);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v12, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  else
  {
    v11[1] = 0;
    v11[2] = 0;
    *a2 = v11;
  }
}

void JSC::Wasm::InternalFunction::~InternalFunction(JSC::Wasm::InternalFunction *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC::Compilation *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = (JSC::Compilation *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    JSC::Compilation::~Compilation(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  v19 = *((_QWORD *)this + 3);
  if (v19)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = *((_QWORD *)this + 1);
  if (v20)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v22 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v22)
    {
      v23 = (unint64_t *)(v21 + 8);
      do
      {
        if (*((_DWORD *)v23 - 2) != -2)
        {
          v24 = *v23;
          *v23 = 0;
          if (v24)
            WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
        }
        v23 += 2;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree(v21 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Wasm::CompilationContext::~CompilationContext(JSC::Wasm::CompilationContext *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  JSC::B3::Procedure *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;

  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v51 = *(unsigned int *)(v10 + 20);
      v52 = *(_QWORD *)(v10 + 8);
      if ((_DWORD)v51)
      {
        v55 = 16 * v51;
        v56 = (uint64_t *)(v52 + 8);
        do
        {
          v58 = *v56;
          v56 += 2;
          v57 = v58;
          if ((v58 & 1) != 0 && (v57 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v57 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v55 -= 16;
        }
        while (v55);
        v52 = *(_QWORD *)(v10 + 8);
        if (!v52)
          goto LABEL_33;
      }
      else if (!v52)
      {
LABEL_33:
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_6;
      }
      *(_QWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 16) = 0;
      WTF::fastFree(v52, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_33;
    }
  }
LABEL_6:
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v53 = *(_QWORD *)(v13 + 24);
      if (v53)
        WTF::fastFree(v53, a2, a3, a4, a5, a6, a7, a8);
      v54 = *(_QWORD *)(v13 + 32);
      if (v54)
        WTF::fastFree(v54, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
    {
      *(_QWORD *)(v16 + 8) = 0;
      *(_DWORD *)(v16 + 16) = 0;
      WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = (JSC::B3::Procedure *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v18)
  {
    JSC::B3::Procedure::~Procedure(v18, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  v27 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v27)
  {
    v28 = *(unsigned int *)(v27 + 12);
    if ((_DWORD)v28)
    {
      v48 = *(uint64_t **)v27;
      v49 = 8 * v28;
      do
      {
        v50 = *v48;
        *v48 = 0;
        if (v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        ++v48;
        v49 -= 8;
      }
      while (v49);
    }
    v29 = *(_QWORD *)v27;
    if (*(_QWORD *)v27)
    {
      *(_QWORD *)v27 = 0;
      *(_DWORD *)(v27 + 8) = 0;
      WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
  }
  v30 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v30)
  {
    v31 = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler(v30, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
  }
  v39 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v39)
  {
    v40 = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler(v39, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN3JSC4Wasm16InternalFunctionENS_14default_deleteISB_EEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, JSC::Wasm::InternalFunction **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::InternalFunction *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *a2;
  *a2 = 0;
  if (v8)
  {
    JSC::Wasm::InternalFunction::~InternalFunction(v8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN3JSC4Wasm16InternalFunctionENS_14default_deleteISB_EEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

uint64_t *WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v10;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v10 = result;
  v12 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::expand(result, 0, a3, a4, a5, a6, a7, a8), (v12 = *v10) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a2;
  v16 = ~(*a2 << 32) + *a2;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 8 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        v31 = 0;
        v30 = v12 + 8 * v32;
        goto LABEL_18;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (uint64_t *)(v12 + 8 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      --*(_DWORD *)(*v10 - 16);
      v15 = *a2;
      v20 = v22;
    }
  }
  *v20 = v15;
  v24 = *v10;
  if (*v10)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *v10;
  if (*v10)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_17;
LABEL_20:
    result = WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::expand(v10, (uint64_t)v20, a3, a4, a5, a6, a7, a8);
    v20 = result;
    v26 = *v10;
    if (*v10)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
    goto LABEL_17;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_20;
LABEL_17:
  v30 = v26 + 8 * v29;
  v31 = 1;
LABEL_18:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v30;
  *(_BYTE *)(a9 + 16) = v31;
  return result;
}

_QWORD *WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable(uint64_t *a1, int **a2)
{
  int *v3;
  int v4;
  unsigned int v6;
  uint64_t Table;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  int *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int **v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  int *v35;

  *a1 = 0;
  v3 = *a2;
  if (!*a2)
    return a1;
  v4 = *(v3 - 3);
  if (!v4)
    return a1;
  v6 = WTF::HashTable<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashMap<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>>::computeBestTableSize(*(v3 - 3));
  Table = WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::JSValue *,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::JSValue *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::allocateTable(v6);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 12) = v4;
  *(_DWORD *)(*a1 - 16) = 0;
  v15 = *a2;
  if (*a2)
  {
    v16 = *(v15 - 1);
    v17 = &v15[4 * v16];
    if (*(v15 - 3))
    {
      v18 = v15;
      if ((_DWORD)v16)
      {
        v19 = 16 * v16;
        v18 = v15;
        while (*v18 >= 0xFFFFFFFE)
        {
          v18 += 4;
          v19 -= 16;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v18 = &v15[4 * v16];
  }
  else
  {
    v18 = 0;
    v16 = 0;
  }
  v17 = &v15[4 * v16];
LABEL_12:
  if (v15)
    v20 = &v15[4 * *(v15 - 1)];
  else
    v20 = 0;
  while (v18 != v20)
  {
    v21 = *a1;
    if (*a1)
      v22 = *(_DWORD *)(v21 - 8);
    else
      v22 = 0;
    v23 = 0;
    v24 = *v18;
    v25 = 9 * ((v24 + ~(v24 << 15)) ^ ((v24 + ~(v24 << 15)) >> 10));
    v26 = ((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) ^ (((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) >> 16);
    do
    {
      v27 = v26 & v22;
      v26 = ++v23 + v27;
    }
    while (*(_DWORD *)(v21 + 16 * v27) != -1);
    v28 = (unsigned int *)(v21 + 16 * v27);
    *v28 = v24;
    v29 = (unsigned int **)(v28 + 2);
    v30 = (unsigned int *)*((_QWORD *)v18 + 1);
    if (v30)
    {
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
    }
    v32 = *v29;
    *v29 = v30;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v32, v8, v9, v10, v11, v12, v13, v14);
      }
    }
    v35 = v18 + 4;
    v18 = v17;
    if (v35 != v17)
    {
      v18 = v35;
      while (*v18 >= 0xFFFFFFFE)
      {
        v18 += 4;
        if (v18 == v17)
        {
          v18 = v17;
          break;
        }
      }
    }
  }
  return a1;
}

_QWORD *WTF::FixedVector<WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::FixedVector(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int *v14;

  if (a2)
  {
    v4 = a2;
    v5 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * a2) | 8));
    v13 = v5;
    *v5 = v4;
    if (v4)
      bzero(v5 + 2, 16 * v4);
    v14 = 0;
    *a1 = v13;
    WTF::UniqueRef<WTF::EmbeddedFixedVector<WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~UniqueRef(&v14, v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **WTF::UniqueRef<WTF::EmbeddedFixedVector<WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~UniqueRef(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = WTF::TrailingArray<WTF::EmbeddedFixedVector<WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~TrailingArray(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return a1;
}

unsigned int *WTF::TrailingArray<WTF::EmbeddedFixedVector<WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~TrailingArray(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t StatusReg;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v10 = a1 + 2;
  v9 = *a1;
  if ((_DWORD)v9)
  {
    v11 = 16 * v9;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v13 = *(_QWORD *)v10;
      if (*(_QWORD *)v10)
      {
        *(_QWORD *)v10 = 0;
        v10[2] = 0;
        v14 = *(_QWORD *)(StatusReg + 752);
        if (v14)
        {
          if (!(v13 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v13 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v13)) & 1) != 0)
          {
LABEL_9:
            v15 = *(unsigned int *)(v14 + 8000);
            if (v15 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v14, v13, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v14 + 8 * v15) = v13 | 0x5000000000000;
              *(_DWORD *)(v14 + 8000) = v15 + 1;
            }
            goto LABEL_4;
          }
          if (v13 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v13 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v13 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v13) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_9;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v14, v13, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v13, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_4:
      v10 += 4;
      v11 -= 16;
    }
    while (v11);
  }
  return a1;
}

void WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (*(_DWORD *)(a1 + 16 * i) != -2)
      {
        v11 = a1 + 16 * i;
        v12 = *(unsigned int **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (v12)
        {
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          }
        }
      }
    }
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::Wasm::EntryPlan::~EntryPlan(JSC::Wasm::EntryPlan *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::Wasm::ModuleInformation *v58;

  *(_QWORD *)this = off_1E35B5640;
  *((_QWORD *)this + 9) = &unk_1E35B56A0;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *((_QWORD *)this + 21);
  if (v10)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v11)
  {
    do
    {
      v30 = __ldaxr(v11);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v11));
    if (!v31)
    {
      atomic_store(1u, v11);
      v58 = (JSC::Wasm::ModuleInformation *)v11;
      WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v58);
    }
  }
  v12 = *((unsigned int *)this + 37);
  v13 = *((_QWORD *)this + 17);
  if ((_DWORD)v12)
  {
    v40 = 16 * v12;
    do
    {
      v41 = *(_QWORD *)v13;
      if (*(_QWORD *)v13)
      {
        *(_QWORD *)v13 = 0;
        *(_DWORD *)(v13 + 8) = 0;
        WTF::fastFree(v41, a2, a3, a4, a5, a6, a7, a8);
      }
      v13 += 16;
      v40 -= 16;
    }
    while (v40);
    v13 = *((_QWORD *)this + 17);
  }
  if (v13)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 16);
  if (v14)
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
  v15 = *((unsigned int *)this + 31);
  if ((_DWORD)v15)
  {
    v16 = *((_QWORD *)this + 14);
    v17 = v16 + 16 * v15;
    do
    {
      v18 = *(unsigned int **)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v18, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
        }
      }
      v16 += 16;
    }
    while (v16 != v17);
  }
  v21 = *((_QWORD *)this + 14);
  if (v21)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *((unsigned int *)this + 27);
  if ((_DWORD)v22)
  {
    v23 = *((_QWORD *)this + 12);
    v24 = v23 + 16 * v22;
    do
    {
      v25 = *(unsigned int **)(v23 + 8);
      *(_QWORD *)(v23 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
        }
      }
      v23 += 16;
    }
    while (v23 != v24);
  }
  v28 = *((_QWORD *)this + 12);
  if (v28)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
  }
  v29 = *((_QWORD *)this + 10);
  if (v29)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::Wasm::Plan::~Plan(this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t WTF::Vector<JSC::Wasm::BBQDisassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<JSC::Wasm::BBQDisassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<JSC::Wasm::BBQDisassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::Wasm::BBQDisassembler::DumpedOp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = (_QWORD *)v9;
        v18 = 8 * v8;
        v19 = (_QWORD *)v7;
        do
        {
          v20 = (_DWORD *)*v19;
          *v19 = 0;
          *v17 = v20;
          v21 = (_DWORD *)*v19;
          *v19 = 0;
          if (v21)
          {
            if (*v21 == 1)
              WTF::fastFree((unint64_t)v21, v10, v11, v12, v13, v14, v15, v16);
            else
              --*v21;
          }
          ++v17;
          ++v19;
          v18 -= 8;
        }
        while (v18);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(JSC::Wasm::ModuleInformation **a1)
{
  JSC::Wasm::ModuleInformation *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *a1;
  if (v1)
  {
    JSC::Wasm::ModuleInformation::~ModuleInformation(v1);
    WTF::fastFree(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, int **a5@<X8>)
{
  int8x16_t *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int8x16_t *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  int v20;
  char v21;
  int v22;
  int v23;

  v7 = *(int8x16_t **)result;
  v8 = *(_QWORD *)(result + 8);
  if (v8)
  {
    v9 = v8 - 1;
    if ((unint64_t)(v8 - 1) >> 31)
      goto LABEL_25;
  }
  else
  {
    v9 = 0;
  }
  v10 = *a2;
  v11 = *(int8x16_t **)a3;
  v12 = *(_QWORD *)(a3 + 8);
  if (v12)
  {
    v13 = v12 - 1;
    if (!((unint64_t)(v12 - 1) >> 31))
      goto LABEL_5;
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x198C7D8FCLL);
  }
  v13 = 0;
LABEL_5:
  v14 = 0;
  v15 = *a4;
  v16 = *a2;
  do
  {
    ++v14;
    v17 = v16 > 9;
    v16 /= 0xAuLL;
  }
  while (v17);
  if (v15)
  {
    v18 = *(_DWORD *)(v15 + 4);
    if (v18 < 0)
    {
LABEL_19:
      *a5 = 0;
      return result;
    }
  }
  else
  {
    v18 = 0;
  }
  v19 = __OFADD__(v13, v18);
  v20 = v13 + v18;
  v21 = v19;
  if (v14 < 0)
    goto LABEL_19;
  if ((v21 & 1) != 0)
    goto LABEL_19;
  v19 = __OFADD__(v14, v20);
  v22 = v14 + v20;
  if (v19)
    goto LABEL_19;
  result = v9 + v22;
  if (__OFADD__(v9, v22))
    goto LABEL_19;
  if (v15)
    v23 = (*(unsigned __int8 *)(v15 + 16) >> 2) & 1;
  else
    v23 = 1;
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v23, v7, v9, v10, v11, v13, v15, a5);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  int v15;
  int *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  char *v23;
  int v24;
  char *v25;
  _BYTE *v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  unsigned __int128 v30;
  char v31;
  _QWORD v32[5];

  v15 = result;
  v32[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v32);
        v17 = (int *)v32[0];
        if (v32[0])
        {
          v18 = (_BYTE *)(v32[0] + 20);
          *(_DWORD *)v32[0] = 2;
          v17[1] = v15;
          *((_QWORD *)v17 + 1) = v17 + 5;
          v17[4] = 4;
          if (a4 == 1)
          {
            *v18 = a3->i8[0];
          }
          else if (a4)
          {
            result = (uint64_t)memcpy(v17 + 5, a3, a4);
          }
          v20 = 0;
          v21 = a5;
          do
          {
            *((_BYTE *)&v32[3] + v20--) = (v21 % 0xA) | 0x30;
            v22 = v21 > 9;
            v21 /= 0xAuLL;
          }
          while (v22);
          v23 = &v18[a4];
          if (v20 + 26 <= 25)
            result = (uint64_t)memcpy(v23, (char *)&v32[3] + v20 + 1, -v20);
          v24 = 0;
          do
          {
            ++v24;
            v22 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v22);
          v25 = &v23[v24];
          if (a7 == 1)
          {
            *v25 = a6->i8[0];
          }
          else if (a7)
          {
            result = (uint64_t)memcpy(&v23[v24], a6, a7);
          }
          if (a8)
          {
            result = (uint64_t)&v25[a7];
            v26 = *(_BYTE **)(a8 + 8);
            v27 = *(unsigned int *)(a8 + 4);
            if ((*(_BYTE *)(a8 + 16) & 4) != 0)
            {
              if ((_DWORD)v27 == 1)
              {
                *(_BYTE *)result = *v26;
              }
              else if ((_DWORD)v27)
              {
                result = (uint64_t)memcpy((void *)result, v26, v27);
              }
            }
            else
            {
              v28 = result + v27;
              if (v27 >= 0x10)
              {
                v29 = result + (v27 & 0xFFFFFFF0);
                do
                {
                  v30 = (unsigned __int128)vld2q_s8(v26);
                  v26 += 32;
                  *(_OWORD *)result = v30;
                  result += 16;
                }
                while (result != v29);
                result = v29;
              }
              while (result != v28)
              {
                v31 = *v26;
                v26 += 2;
                *(_BYTE *)result++ = v31;
              }
            }
          }
        }
        goto LABEL_29;
      }
LABEL_31:
      v17 = 0;
      goto LABEL_29;
    }
LABEL_30:
    v17 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_29;
  }
  if (!(_DWORD)result)
    goto LABEL_30;
  if (result > 0x7FFFFFEF)
    goto LABEL_31;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v32);
  v17 = (int *)v32[0];
  if (v32[0])
  {
    v19 = (char *)(v32[0] + 20);
    *(_DWORD *)v32[0] = 2;
    v17[1] = v15;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v19, a3, a4, a5, a6, a7, a8);
  }
LABEL_29:
  *a9 = v17;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *a1, int8x16_t *a2, int a3, unint64_t a4, int8x16_t *a5, int a6, uint64_t a7)
{
  char *v7;
  char *v8;
  __int128 v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int16 v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  char *v20;
  int v22;
  char *v23;
  char *result;
  char *v25;
  __int128 v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int16 v33;
  int8x16_t *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int16 v45;
  _BYTE v46[25];
  uint64_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;

  v47 = *MEMORY[0x1E0C80C00];
  v7 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v8 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v9 = 0uLL;
    do
    {
      v48.val[0] = *a2;
      v10 = a2[1];
      v51.val[0] = a2[2];
      v11 = a2[3];
      a2 += 4;
      v12 = v11;
      v51.val[1] = 0uLL;
      v54.val[0] = v10;
      v48.val[1] = 0uLL;
      v13 = a1;
      vst2q_s8(v13, v48);
      v13 += 32;
      v54.val[1] = 0uLL;
      vst2q_s8(v13, v54);
      v14 = a1 + 64;
      vst2q_s8(v14, v51);
      v15 = a1 + 96;
      vst2q_s8(v15, *(int8x16x2_t *)(&v9 - 1));
      a1 += 128;
    }
    while (a1 != v8);
    a1 = v8;
  }
  while (a1 != v7)
  {
    v16 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v16;
    a1 += 2;
  }
  v17 = 0;
  v18 = a4;
  do
  {
    v46[v17-- + 24] = (v18 % 0xA) | 0x30;
    v19 = v18 > 9;
    v18 /= 0xAuLL;
  }
  while (v19);
  if (v17 + 26 <= 25)
  {
    v20 = v7;
    do
    {
      *(_WORD *)v20 = *((unsigned __int8 *)&v47 + v17);
      v20 += 2;
    }
    while (!__CFADD__(v17++, 1));
  }
  v22 = 0;
  do
  {
    ++v22;
    v19 = a4 > 9;
    a4 /= 0xAuLL;
  }
  while (v19);
  v23 = &v7[2 * v22];
  result = &v23[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v25 = &v23[2 * (a6 & 0xFFFFFFC0)];
    v26 = 0uLL;
    do
    {
      v49.val[0] = *a5;
      v27 = a5[1];
      v52.val[0] = a5[2];
      v28 = a5[3];
      a5 += 4;
      v29 = v28;
      v52.val[1] = 0uLL;
      v55.val[0] = v27;
      v49.val[1] = 0uLL;
      v30 = v23;
      vst2q_s8(v30, v49);
      v30 += 32;
      v55.val[1] = 0uLL;
      vst2q_s8(v30, v55);
      v31 = v23 + 64;
      vst2q_s8(v31, v52);
      v32 = v23 + 96;
      vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
      v23 += 128;
    }
    while (v23 != v25);
    v23 = v25;
  }
  while (v23 != result)
  {
    v33 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v23 = v33;
    v23 += 2;
  }
  if (a7)
  {
    v34 = *(int8x16_t **)(a7 + 8);
    v35 = *(unsigned int *)(a7 + 4);
    if ((*(_BYTE *)(a7 + 16) & 4) != 0)
    {
      v36 = &result[2 * v35];
      if (v35 >= 0x40)
      {
        v37 = &result[2 * (v35 & 0xFFFFFFC0)];
        v38 = 0uLL;
        do
        {
          v50.val[0] = *v34;
          v39 = v34[1];
          v53.val[0] = v34[2];
          v40 = v34[3];
          v34 += 4;
          v41 = v40;
          v53.val[1] = 0uLL;
          v56.val[0] = v39;
          v50.val[1] = 0uLL;
          v42 = result;
          vst2q_s8(v42, v50);
          v42 += 32;
          v56.val[1] = 0uLL;
          vst2q_s8(v42, v56);
          v43 = result + 64;
          vst2q_s8(v43, v53);
          v44 = result + 96;
          vst2q_s8(v44, *(int8x16x2_t *)(&v38 - 1));
          result += 128;
        }
        while (result != v37);
        result = v37;
      }
      while (result != v36)
      {
        v45 = v34->u8[0];
        v34 = (int8x16_t *)((char *)v34 + 1);
        *(_WORD *)result = v45;
        result += 2;
      }
    }
    else if ((_DWORD)v35 == 1)
    {
      *(_WORD *)result = v34->i16[0];
    }
    else if ((_DWORD)v35)
    {
      return (char *)memcpy(result, v34, 2 * v35);
    }
  }
  return result;
}

void WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(JSC::Wasm::CalleeGroup **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::CalleeGroup *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *a1;
  if (v8)
  {
    JSC::Wasm::CalleeGroup::~CalleeGroup(v8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

JSC::FunctionAllowlist *std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::$_0 &&>>()
{
  return JSC::FunctionAllowlist::FunctionAllowlist((JSC::FunctionAllowlist *)&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist, *((const char **)&xmmword_1ECF4C308 + 1));
}

char *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(char *result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  int *v11;
  BOOL v12;
  int v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  size_t v17;
  char *v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  int v24;
  _QWORD v25[5];

  v5 = 0;
  v25[4] = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)result + 2);
  v7 = *a2;
  v8 = *a2;
  do
  {
    ++v5;
    v9 = v8 > 9;
    v8 /= 0xAuLL;
  }
  while (v9);
  v10 = *(_DWORD *)(a3 + 8);
  if ((v10 | v5) < 0)
    goto LABEL_28;
  v11 = 0;
  v12 = __OFADD__(v5, v10);
  v13 = v5 + v10;
  v14 = v12;
  if (v6 < 0 || (v14 & 1) != 0)
    goto LABEL_27;
  v15 = (v6 + v13);
  if (__OFADD__(v6, v13))
    goto LABEL_28;
  if (!(_DWORD)v15)
  {
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_27;
  }
  if ((v15 & 0x80000000) != 0)
  {
LABEL_28:
    v11 = 0;
    goto LABEL_27;
  }
  v16 = *(_BYTE **)result;
  v17 = *((unsigned int *)result + 2);
  v18 = *(char **)a3;
  v19 = *(unsigned int *)(a3 + 8);
  result = (char *)WTF::tryFastCompactMalloc((WTF *)(v15 + 20), v25);
  v11 = (int *)v25[0];
  if (v25[0])
  {
    v20 = (_BYTE *)(v25[0] + 20);
    *(_DWORD *)v25[0] = 2;
    v11[1] = v15;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 4;
    if ((_DWORD)v17 == 1)
    {
      *v20 = *v16;
    }
    else if ((_DWORD)v17)
    {
      memcpy(v11 + 5, v16, v17);
    }
    v21 = 0;
    v22 = v7;
    do
    {
      *((_BYTE *)&v25[3] + v21--) = (v22 % 0xA) | 0x30;
      v9 = v22 > 9;
      v22 /= 0xAuLL;
    }
    while (v9);
    v23 = &v20[v17];
    if (v21 + 26 <= 25)
      memcpy(v23, (char *)&v25[3] + v21 + 1, -v21);
    v24 = 0;
    do
    {
      ++v24;
      v9 = v7 > 9;
      v7 /= 0xAuLL;
    }
    while (v9);
    result = &v23[v24];
    if ((_DWORD)v19 == 1)
    {
      *result = *v18;
    }
    else if ((_DWORD)v19)
    {
      result = (char *)memcpy(result, v18, v19);
    }
  }
LABEL_27:
  *a4 = v11;
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::tuple<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,std::unique_ptr<JSC::LinkBuffer>,std::unique_ptr<JSC::Wasm::InternalFunction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  _QWORD *v22;
  JSC::Wasm::InternalFunction *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::LinkBuffer *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  JSC::Wasm::InternalFunction *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  JSC::LinkBuffer *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  JSC::LinkBuffer **v75;
  uint64_t v76;
  JSC::LinkBuffer *v77;
  JSC::Wasm::InternalFunction *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  JSC::LinkBuffer *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t result;
  uint64_t v100;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v16 = (_QWORD *)(v8 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = -1;
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      v16 += 4;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = 0;
    v18 = 0;
    v19 = v5;
    v100 = v5;
    do
    {
      v20 = (int *)(v4 + 32 * v17);
      v21 = *v20;
      if (*v20 != -2)
      {
        if (v21 == -1)
        {
          v22 = (_QWORD *)(v4 + 32 * v17);
          v23 = (JSC::Wasm::InternalFunction *)v22[3];
          v22[3] = 0;
          if (v23)
          {
            JSC::Wasm::InternalFunction::~InternalFunction(v23, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
          }
          v32 = (JSC::LinkBuffer *)v22[2];
          v22[2] = 0;
          if (v32)
          {
            JSC::LinkBuffer::~LinkBuffer(v32, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
          }
          v41 = v22[1];
          v22[1] = 0;
          if (v41)
          {
            do
            {
              v42 = __ldaxr((unsigned int *)v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, (unsigned int *)v41));
            if (!v43)
            {
              atomic_store(1u, (unsigned int *)v41);
              JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v41, v10, v11, v12, v13, v14, v15);
              if (*(_BYTE *)(v41 + 4) == 1)
                JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v41, (JSC::Wasm::Callee *)v9, v10, v11, v12, v13, v14, v15);
            }
          }
        }
        else
        {
          v44 = *a1;
          if (*a1)
            v45 = *(_DWORD *)(v44 - 8);
          else
            v45 = 0;
          v46 = 0;
          v47 = 9 * ((v21 + ~(v21 << 15)) ^ ((v21 + ~(v21 << 15)) >> 10));
          v48 = ((v47 ^ (v47 >> 6)) + ~((v47 ^ (v47 >> 6)) << 11)) ^ (((v47 ^ (v47 >> 6)) + ~((v47 ^ (v47 >> 6)) << 11)) >> 16);
          do
          {
            v49 = v48 & v45;
            v48 = ++v46 + v49;
          }
          while (*(_DWORD *)(v44 + 32 * v49) != -1);
          v50 = v44 + 32 * v49;
          v51 = *(JSC::Wasm::InternalFunction **)(v50 + 24);
          *(_QWORD *)(v50 + 24) = 0;
          if (v51)
          {
            JSC::Wasm::InternalFunction::~InternalFunction(v51, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
          }
          v60 = *(JSC::LinkBuffer **)(v50 + 16);
          *(_QWORD *)(v50 + 16) = 0;
          if (v60)
          {
            JSC::LinkBuffer::~LinkBuffer(v60, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
          }
          v69 = *(_QWORD *)(v50 + 8);
          *(_QWORD *)(v50 + 8) = 0;
          if (v69)
          {
            do
            {
              v70 = __ldaxr((unsigned int *)v69);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, (unsigned int *)v69));
            if (!v71)
            {
              atomic_store(1u, (unsigned int *)v69);
              JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v69, v10, v11, v12, v13, v14, v15);
              if (*(_BYTE *)(v69 + 4) == 1)
                JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v69, (JSC::Wasm::Callee *)v9, v10, v11, v12, v13, v14, v15);
            }
          }
          v72 = v4 + 32 * v17;
          v74 = *(_QWORD *)(v72 + 8);
          v73 = (uint64_t *)(v72 + 8);
          *(_DWORD *)v50 = *v20;
          *(_QWORD *)(v72 + 8) = 0;
          *(_QWORD *)(v50 + 8) = v74;
          v76 = *(_QWORD *)(v72 + 16);
          v75 = (JSC::LinkBuffer **)(v72 + 16);
          *v75 = 0;
          *(_QWORD *)(v50 + 16) = v76;
          v77 = v75[1];
          v75[1] = 0;
          *(_QWORD *)(v50 + 24) = v77;
          v78 = v75[1];
          v75[1] = 0;
          if (v78)
          {
            JSC::Wasm::InternalFunction::~InternalFunction(v78, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
          }
          v87 = *v75;
          *v75 = 0;
          v19 = v100;
          if (v87)
          {
            JSC::LinkBuffer::~LinkBuffer(v87, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
          }
          v96 = *v73;
          *v73 = 0;
          if (v96)
          {
            do
            {
              v97 = __ldaxr((unsigned int *)v96);
              v98 = v97 - 1;
            }
            while (__stlxr(v98, (unsigned int *)v96));
            if (!v98)
            {
              atomic_store(1u, (unsigned int *)v96);
              JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v96, v10, v11, v12, v13, v14, v15);
              if (*(_BYTE *)(v96 + 4) == 1)
                JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v96, (JSC::Wasm::Callee *)v9, v10, v11, v12, v13, v14, v15);
            }
          }
          if (v20 == a3)
            v18 = v50;
        }
      }
      ++v17;
    }
    while (v17 != v19);
  }
  else
  {
    v18 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree(v4 - 16, v9, v10, v11, v12, v13, v14, v15);
  return v18;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_10unique_ptrIN3JSC4Wasm16InternalFunctionENS_14default_deleteISB_EEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSE_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_10unique_ptrIN3JSC4Wasm16InternalFunctionENS_14default_deleteISB_EEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSE_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_10unique_ptrIN3JSC4Wasm16InternalFunctionENS_14default_deleteISA_EEEEN3WTF6StringEEE6__swapB8sn180100ERSG_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEESR_EEEDcSI_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_10unique_ptrIN3JSC4Wasm16InternalFunctionENS_14default_deleteISA_EEEEN3WTF6StringEEE6__swapB8sn180100ERSG_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEESR_EEEDcSI_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_10unique_ptrIN3JSC4Wasm16InternalFunctionENS_14default_deleteISB_EEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJSE_SG_EEEEEvRSI_OT_EUlRSN_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SG_EEEOSW_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_10unique_ptrIN3JSC4Wasm16InternalFunctionENS_14default_deleteISB_EEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJSE_SG_EEEEEvRSI_OT_EUlRSN_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SG_EEEOSW_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, int **a6@<X8>)
{
  _OWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  int v29;

  v9 = *(_OWORD **)result;
  v10 = *(_QWORD *)(result + 8);
  if (v10)
  {
    v11 = v10 - 1;
    if ((unint64_t)(v10 - 1) >> 31)
      goto LABEL_32;
  }
  else
  {
    v11 = 0;
  }
  v12 = *a2;
  v13 = *(int8x16_t **)a3;
  v14 = *(_QWORD *)(a3 + 8);
  if (v14)
  {
    v15 = v14 - 1;
    if (!((unint64_t)(v14 - 1) >> 31))
      goto LABEL_5;
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x198C7E540);
  }
  v15 = 0;
LABEL_5:
  v16 = 0;
  v17 = *a4;
  v18 = *a5;
  v19 = *a2;
  do
  {
    ++v16;
    v20 = v19 > 9;
    v19 /= 0xAuLL;
  }
  while (v20);
  if (v17)
  {
    v21 = *(_DWORD *)(v17 + 4);
    if (v18)
    {
LABEL_9:
      v22 = *(_DWORD *)(v18 + 4);
      goto LABEL_10;
    }
  }
  else
  {
    v21 = 0;
    if (v18)
      goto LABEL_9;
  }
  v22 = 0;
LABEL_10:
  if (((v22 | v21) & 0x80000000) == 0)
  {
    v23 = __OFADD__(v21, v22);
    v24 = v21 + v22;
    if (!v23)
    {
      v23 = __OFADD__(v15, v24);
      v25 = v15 + v24;
      v26 = v23;
      if ((v16 & 0x80000000) == 0 && !v26)
      {
        v23 = __OFADD__(v16, v25);
        v27 = v16 + v25;
        if (!v23)
        {
          result = v11 + v27;
          if (!__OFADD__(v11, v27))
          {
            if (v17)
            {
              v28 = *(_DWORD *)(v17 + 16);
              v29 = (v28 >> 2) & 1;
              if (!v18 || (v28 & 4) == 0)
                return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v29, v9, v11, v12, v13, v15, v17, a6, v18);
            }
            else if (!v18)
            {
              v29 = 1;
              return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v29, v9, v11, v12, v13, v15, v17, a6, v18);
            }
            v29 = (*(unsigned __int8 *)(v18 + 16) >> 2) & 1;
            return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v29, v9, v11, v12, v13, v15, v17, a6, v18);
          }
        }
      }
    }
  }
  *a6 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>, uint64_t a10)
{
  int v16;
  int **v17;
  int *v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  int8x16_t v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  _WORD *v34;
  unsigned int v36;
  _QWORD v38[5];
  int8x16x2_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;

  v16 = result;
  v17 = a9;
  v38[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v38);
        v18 = (int *)v38[0];
        if (v38[0])
        {
          v19 = (_BYTE *)(v38[0] + 20);
          *(_DWORD *)v38[0] = 2;
          v18[1] = v16;
          *((_QWORD *)v18 + 1) = v18 + 5;
          v18[4] = 4;
          if (a4 == 1)
          {
            *v19 = *(_BYTE *)a3;
          }
          else if (a4)
          {
            memcpy(v18 + 5, a3, a4);
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v19[a4], a5, a6, a7, a8, a10);
        }
        v17 = a9;
        goto LABEL_29;
      }
LABEL_31:
      v18 = 0;
      goto LABEL_29;
    }
LABEL_30:
    v18 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_29;
  }
  if (!(_DWORD)result)
    goto LABEL_30;
  if (result > 0x7FFFFFEF)
    goto LABEL_31;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v38);
  v18 = (int *)v38[0];
  if (v38[0])
  {
    v20 = (char *)(v38[0] + 20);
    *(_DWORD *)v38[0] = 2;
    v18[1] = v16;
    *((_QWORD *)v18 + 1) = v18 + 5;
    v18[4] = 0;
    v21 = (uint64_t)v18 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v22 = &v20[2 * (a4 & 0xFFFFFFC0)];
      v23 = 0uLL;
      do
      {
        v39.val[0] = (int8x16_t)*a3;
        v24 = *((int8x16_t *)a3 + 1);
        v40.val[0] = (int8x16_t)a3[2];
        v25 = a3[3];
        a3 += 4;
        v26 = v25;
        v40.val[1] = 0uLL;
        v41.val[0] = v24;
        v39.val[1] = 0uLL;
        v27 = v20;
        vst2q_s8(v27, v39);
        v27 += 32;
        v41.val[1] = 0uLL;
        vst2q_s8(v27, v41);
        v28 = v20 + 64;
        vst2q_s8(v28, v40);
        v29 = v20 + 96;
        vst2q_s8(v29, *(int8x16x2_t *)(&v23 - 1));
        v20 += 128;
      }
      while (v20 != v22);
      v20 = v22;
    }
    while (v20 != (char *)v21)
    {
      v30 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v20 = v30;
      v20 += 2;
    }
    v31 = 0;
    v32 = a5;
    do
    {
      *((_BYTE *)&v38[3] + v31--) = (v32 % 0xA) | 0x30;
      v33 = v32 > 9;
      v32 /= 0xAuLL;
    }
    while (v33);
    if (v31 + 26 <= 25)
    {
      v34 = (_WORD *)v18 + a4 + 10;
      do
        *v34++ = *((unsigned __int8 *)&v38[3] + v31 + 1);
      while (!__CFADD__(v31++, 1));
    }
    v36 = 0;
    do
    {
      ++v36;
      v33 = a5 > 9;
      a5 /= 0xAuLL;
    }
    while (v33);
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v21 + 2 * v36), a6, a7, a8, a10);
  }
LABEL_29:
  *v17 = v18;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *__dst, unint64_t a2, _BYTE *__src, unsigned int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  _BYTE *v21;
  size_t v22;
  unsigned __int128 *v23;
  unsigned __int128 *v24;
  unsigned __int128 v25;
  _BYTE *v26;
  _BYTE *v27;
  unsigned __int128 v28;
  char v29;
  char v30;
  _BYTE v31[25];
  uint64_t v32;

  v10 = a2;
  v11 = __dst;
  v12 = 0;
  v32 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  do
  {
    v31[v12-- + 24] = (v13 % 0xA) | 0x30;
    v14 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v14);
  if (v12 + 26 <= 25)
    __dst = memcpy(__dst, &v31[v12 + 25], -v12);
  v15 = 0;
  do
  {
    ++v15;
    v14 = v10 > 9;
    v10 /= 0xAuLL;
  }
  while (v14);
  v16 = &v11[v15];
  if (a4 == 1)
  {
    *v16 = *__src;
  }
  else if (a4)
  {
    __dst = memcpy(v16, __src, a4);
  }
  v17 = &v16[a4];
  if (!a5)
  {
    v20 = 0;
    if (!a6)
      return __dst;
    goto LABEL_18;
  }
  v18 = *(_BYTE **)(a5 + 8);
  v19 = *(unsigned int *)(a5 + 4);
  if ((*(_BYTE *)(a5 + 16) & 4) != 0)
  {
    if ((_DWORD)v19 == 1)
    {
      *v17 = *v18;
    }
    else if ((_DWORD)v19)
    {
      __dst = memcpy(v17, v18, v19);
    }
  }
  else
  {
    if (v19 < 0x10)
    {
      v23 = (unsigned __int128 *)v17;
    }
    else
    {
      v23 = (unsigned __int128 *)&v17[v19 & 0xFFFFFFF0];
      v24 = (unsigned __int128 *)v17;
      do
      {
        v25 = (unsigned __int128)vld2q_s8(v18);
        v18 += 32;
        *v24++ = v25;
      }
      while (v24 != v23);
    }
    while (v23 != (unsigned __int128 *)&v17[v19])
    {
      v30 = *v18;
      v18 += 2;
      *(_BYTE *)v23 = v30;
      v23 = (unsigned __int128 *)((char *)v23 + 1);
    }
  }
  v20 = *(unsigned int *)(a5 + 4);
  if (a6)
  {
LABEL_18:
    __dst = &v17[v20];
    v21 = *(_BYTE **)(a6 + 8);
    v22 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) != 0)
    {
      if ((_DWORD)v22 == 1)
      {
        *__dst = *v21;
      }
      else if ((_DWORD)v22)
      {
        return memcpy(__dst, v21, v22);
      }
    }
    else
    {
      v26 = &__dst[v22];
      if (v22 >= 0x10)
      {
        v27 = &__dst[v22 & 0xFFFFFFF0];
        do
        {
          v28 = (unsigned __int128)vld2q_s8(v21);
          v21 += 32;
          *(_OWORD *)__dst = v28;
          __dst += 16;
        }
        while (__dst != v27);
        __dst = v27;
      }
      while (__dst != v26)
      {
        v29 = *v21;
        v21 += 2;
        *__dst++ = v29;
      }
    }
  }
  return __dst;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *result, int8x16_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  char *v8;
  __int128 v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int16 v16;
  int8x16_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  int8x16_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;

  v7 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v8 = &result[2 * (a3 & 0xFFFFFFC0)];
    v9 = 0uLL;
    do
    {
      v43.val[0] = *a2;
      v10 = a2[1];
      v46.val[0] = a2[2];
      v11 = a2[3];
      a2 += 4;
      v12 = v11;
      v46.val[1] = 0uLL;
      v49.val[0] = v10;
      v43.val[1] = 0uLL;
      v13 = result;
      vst2q_s8(v13, v43);
      v13 += 32;
      v49.val[1] = 0uLL;
      vst2q_s8(v13, v49);
      v14 = result + 64;
      vst2q_s8(v14, v46);
      v15 = result + 96;
      vst2q_s8(v15, *(int8x16x2_t *)(&v9 - 1));
      result += 128;
    }
    while (result != v8);
    result = v8;
  }
  while (result != v7)
  {
    v16 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v16;
    result += 2;
  }
  if (!a4)
  {
    v30 = 0;
    if (!a5)
      return result;
    goto LABEL_20;
  }
  v17 = *(int8x16_t **)(a4 + 8);
  v18 = *(unsigned int *)(a4 + 4);
  if ((*(_BYTE *)(a4 + 16) & 4) != 0)
  {
    v19 = &v7[2 * v18];
    if (v18 >= 0x40)
    {
      v20 = &v7[2 * (v18 & 0xFFFFFFC0)];
      v21 = 0uLL;
      v22 = v7;
      do
      {
        v44.val[0] = *v17;
        v23 = v17[1];
        v47.val[0] = v17[2];
        v24 = v17[3];
        v17 += 4;
        v25 = v24;
        v47.val[1] = 0uLL;
        v50.val[0] = v23;
        v44.val[1] = 0uLL;
        v26 = v22;
        vst2q_s8(v26, v44);
        v26 += 32;
        v50.val[1] = 0uLL;
        vst2q_s8(v26, v50);
        v27 = v22 + 64;
        vst2q_s8(v27, v47);
        v28 = v22 + 96;
        vst2q_s8(v28, *(int8x16x2_t *)(&v21 - 1));
        v22 += 128;
      }
      while (v22 != v20);
    }
    else
    {
      v20 = v7;
    }
    while (v20 != v19)
    {
      v29 = v17->u8[0];
      v17 = (int8x16_t *)((char *)v17 + 1);
      *(_WORD *)v20 = v29;
      v20 += 2;
    }
  }
  else if ((_DWORD)v18 == 1)
  {
    *(_WORD *)v7 = v17->i16[0];
  }
  else if ((_DWORD)v18)
  {
    result = (char *)memcpy(v7, v17, 2 * v18);
  }
  v30 = *(unsigned int *)(a4 + 4);
  if (a5)
  {
LABEL_20:
    result = &v7[2 * v30];
    v31 = *(int8x16_t **)(a5 + 8);
    v32 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v33 = &result[2 * v32];
      if (v32 >= 0x40)
      {
        v34 = &result[2 * (v32 & 0xFFFFFFC0)];
        v35 = 0uLL;
        do
        {
          v45.val[0] = *v31;
          v36 = v31[1];
          v48.val[0] = v31[2];
          v37 = v31[3];
          v31 += 4;
          v38 = v37;
          v48.val[1] = 0uLL;
          v51.val[0] = v36;
          v45.val[1] = 0uLL;
          v39 = result;
          vst2q_s8(v39, v45);
          v39 += 32;
          v51.val[1] = 0uLL;
          vst2q_s8(v39, v51);
          v40 = result + 64;
          vst2q_s8(v40, v48);
          v41 = result + 96;
          vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
          result += 128;
        }
        while (result != v34);
        result = v34;
      }
      while (result != v33)
      {
        v42 = v31->u8[0];
        v31 = (int8x16_t *)((char *)v31 + 1);
        *(_WORD *)result = v42;
        result += 2;
      }
    }
    else if ((_DWORD)v32 == 1)
    {
      *(_WORD *)result = v31->i16[0];
    }
    else if ((_DWORD)v32)
    {
      return (char *)memcpy(result, v31, 2 * v32);
    }
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, int **a8@<X8>)
{
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  unsigned int v36;

  v9 = 0;
  v10 = *(_DWORD *)(result + 8);
  v11 = *a2;
  v12 = *a2;
  do
  {
    ++v9;
    v13 = v12 > 9;
    v12 /= 0xAuLL;
  }
  while (v13);
  v14 = *a4;
  if (*a4)
    v15 = *(_DWORD *)(v14 + 4);
  else
    v15 = 0;
  v16 = *a5;
  if (*a5)
    v17 = *(_DWORD *)(v16 + 4);
  else
    v17 = 0;
  v18 = *a6;
  if (*a6)
    v19 = *(_DWORD *)(v18 + 4);
  else
    v19 = 0;
  v20 = *a7;
  if (*a7)
    v21 = *(_DWORD *)(v20 + 4);
  else
    v21 = 0;
  if ((v21 | v19) < 0)
    goto LABEL_49;
  v22 = __OFADD__(v19, v21);
  v23 = v19 + v21;
  v24 = v22;
  if (v17 < 0 || v24)
    goto LABEL_49;
  v22 = __OFADD__(v17, v23);
  v25 = v17 + v23;
  v26 = v22;
  if (v15 < 0 || v26)
    goto LABEL_49;
  v27 = *(_DWORD *)(a3 + 8);
  v22 = __OFADD__(v15, v25);
  v28 = v15 + v25;
  v29 = v22;
  if (v27 < 0 || v29)
    goto LABEL_49;
  v22 = __OFADD__(v27, v28);
  v30 = v27 + v28;
  v31 = v22;
  if (v9 < 0
    || v31
    || ((v22 = __OFADD__(v9, v30), v32 = v9 + v30, !v22) ? (v33 = 0) : (v33 = 1),
        v10 < 0 || (v33 & 1) != 0 || (v22 = __OFADD__(v10, v32), v34 = (v10 + v32), v22)))
  {
LABEL_49:
    *a8 = 0;
    return result;
  }
  if ((!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0) && (!v16 || (*(_BYTE *)(v16 + 16) & 4) != 0))
  {
    if (v18)
    {
      v36 = *(_DWORD *)(v18 + 16);
      v35 = (v36 >> 2) & 1;
      if (!v20 || (v36 & 4) == 0)
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v34, v35, *(_OWORD **)result, *(_QWORD *)(result + 8), v11, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v14, a8, v16, v18, v20);
    }
    else if (!v20)
    {
      v35 = 1;
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v34, v35, *(_OWORD **)result, *(_QWORD *)(result + 8), v11, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v14, a8, v16, v18, v20);
    }
    v35 = (*(unsigned __int8 *)(v20 + 16) >> 2) & 1;
  }
  else
  {
    v35 = 0;
  }
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v34, v35, *(_OWORD **)result, *(_QWORD *)(result + 8), v11, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v14, a8, v16, v18, v20);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v17;
  int **i;
  int *v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  _BYTE *v35;
  int v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  size_t v40;
  uint64_t v41;
  unsigned __int128 *v42;
  unsigned __int128 *v43;
  unsigned __int128 *v44;
  unsigned __int128 v45;
  char v46;
  _QWORD v49[5];
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;

  v17 = result;
  i = a9;
  v49[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v49);
        v19 = (int *)v49[0];
        if (v49[0])
        {
          v20 = (_BYTE *)(v49[0] + 20);
          *(_DWORD *)v49[0] = 2;
          v19[1] = v17;
          *((_QWORD *)v19 + 1) = v19 + 5;
          v19[4] = 4;
          if (a4 == 1)
          {
            *v20 = *(_BYTE *)a3;
          }
          else if (a4)
          {
            memcpy(v19 + 5, a3, a4);
          }
          v32 = 0;
          v33 = a5;
          do
          {
            *((_BYTE *)&v49[3] + v32--) = (v33 % 0xA) | 0x30;
            v34 = v33 > 9;
            v33 /= 0xAuLL;
          }
          while (v34);
          v35 = &v20[a4];
          if (v32 + 26 <= 25)
            memcpy(&v20[a4], (char *)&v49[3] + v32 + 1, -v32);
          v36 = 0;
          i = a9;
          do
          {
            ++v36;
            v34 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v34);
          v37 = &v35[v36];
          if (a7 == 1)
          {
            *v37 = a6->i8[0];
          }
          else if (a7)
          {
            memcpy(v37, a6, a7);
          }
          v38 = &v37[a7];
          if (a8)
          {
            v39 = *(_BYTE **)(a8 + 8);
            v40 = *(unsigned int *)(a8 + 4);
            if ((*(_BYTE *)(a8 + 16) & 4) != 0)
            {
              if ((_DWORD)v40 == 1)
              {
                *v38 = *v39;
              }
              else if ((_DWORD)v40)
              {
                memcpy(v38, v39, v40);
              }
            }
            else
            {
              v42 = (unsigned __int128 *)&v38[v40];
              if (v40 < 0x10)
              {
                v43 = (unsigned __int128 *)v38;
              }
              else
              {
                v43 = (unsigned __int128 *)&v38[v40 & 0xFFFFFFF0];
                v44 = (unsigned __int128 *)v38;
                do
                {
                  v45 = (unsigned __int128)vld2q_s8(v39);
                  v39 += 32;
                  *v44++ = v45;
                }
                while (v44 != v43);
              }
              for (i = a9; v43 != v42; v43 = (unsigned __int128 *)((char *)v43 + 1))
              {
                v46 = *v39;
                v39 += 2;
                *(_BYTE *)v43 = v46;
              }
            }
            v41 = *(unsigned int *)(a8 + 4);
          }
          else
          {
            v41 = 0;
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v38[v41], a10, a11, a12);
        }
        goto LABEL_37;
      }
LABEL_39:
      v19 = 0;
      goto LABEL_37;
    }
LABEL_38:
    v19 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_37;
  }
  if (!(_DWORD)result)
    goto LABEL_38;
  if (result > 0x7FFFFFEF)
    goto LABEL_39;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v49);
  v19 = (int *)v49[0];
  if (v49[0])
  {
    v21 = (char *)(v49[0] + 20);
    *(_DWORD *)v49[0] = 2;
    v19[1] = v17;
    *((_QWORD *)v19 + 1) = v19 + 5;
    v19[4] = 0;
    v22 = (char *)v19 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v23 = &v21[2 * (a4 & 0xFFFFFFC0)];
      v24 = 0uLL;
      do
      {
        v50.val[0] = (int8x16_t)*a3;
        v25 = *((int8x16_t *)a3 + 1);
        v51.val[0] = (int8x16_t)a3[2];
        v26 = a3[3];
        a3 += 4;
        v27 = v26;
        v51.val[1] = 0uLL;
        v52.val[0] = v25;
        v50.val[1] = 0uLL;
        v28 = v21;
        vst2q_s8(v28, v50);
        v28 += 32;
        v52.val[1] = 0uLL;
        vst2q_s8(v28, v52);
        v29 = v21 + 64;
        vst2q_s8(v29, v51);
        v30 = v21 + 96;
        vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
        v21 += 128;
      }
      while (v21 != v23);
      v21 = v23;
    }
    while (v21 != v22)
    {
      v31 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v21 = v31;
      v21 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v22, a5, a6, a7, a8, a10, a11, a12);
  }
LABEL_37:
  *i = v19;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(_WORD *a1, unint64_t a2, int8x16_t *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  _WORD *v15;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  int8x16_t *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  uint64_t v42;
  _BYTE v44[25];
  uint64_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;

  v12 = 0;
  v45 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  do
  {
    v44[v12-- + 24] = (v13 % 0xA) | 0x30;
    v14 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v14);
  if (v12 + 26 <= 25)
  {
    v15 = a1;
    do
      *v15++ = *((unsigned __int8 *)&v45 + v12);
    while (!__CFADD__(v12++, 1));
  }
  v17 = 0;
  do
  {
    ++v17;
    v14 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v14);
  v18 = (char *)&a1[v17];
  v19 = &v18[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v20 = &v18[2 * (a4 & 0xFFFFFFC0)];
    v21 = 0uLL;
    do
    {
      v46.val[0] = *a3;
      v22 = a3[1];
      v48.val[0] = a3[2];
      v23 = a3[3];
      a3 += 4;
      v24 = v23;
      v48.val[1] = 0uLL;
      v50.val[0] = v22;
      v46.val[1] = 0uLL;
      v25 = v18;
      vst2q_s8(v25, v46);
      v25 += 32;
      v50.val[1] = 0uLL;
      vst2q_s8(v25, v50);
      v26 = v18 + 64;
      vst2q_s8(v26, v48);
      v27 = v18 + 96;
      vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
      v18 += 128;
    }
    while (v18 != v20);
    v18 = v20;
  }
  while (v18 != v19)
  {
    v28 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v18 = v28;
    v18 += 2;
  }
  if (a5)
  {
    v29 = *(int8x16_t **)(a5 + 8);
    v30 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v31 = &v19[2 * v30];
      if (v30 >= 0x40)
      {
        v32 = &v19[2 * (v30 & 0xFFFFFFC0)];
        v33 = 0uLL;
        v34 = v19;
        do
        {
          v47.val[0] = *v29;
          v35 = v29[1];
          v49.val[0] = v29[2];
          v36 = v29[3];
          v29 += 4;
          v37 = v36;
          v49.val[1] = 0uLL;
          v51.val[0] = v35;
          v47.val[1] = 0uLL;
          v38 = v34;
          vst2q_s8(v38, v47);
          v38 += 32;
          v51.val[1] = 0uLL;
          vst2q_s8(v38, v51);
          v39 = v34 + 64;
          vst2q_s8(v39, v49);
          v40 = v34 + 96;
          vst2q_s8(v40, *(int8x16x2_t *)(&v33 - 1));
          v34 += 128;
        }
        while (v34 != v32);
      }
      else
      {
        v32 = v19;
      }
      while (v32 != v31)
      {
        v41 = v29->u8[0];
        v29 = (int8x16_t *)((char *)v29 + 1);
        *(_WORD *)v32 = v41;
        v32 += 2;
      }
    }
    else if ((_DWORD)v30 == 1)
    {
      *(_WORD *)v19 = v29->i16[0];
    }
    else if ((_DWORD)v30)
    {
      memcpy(v19, v29, 2 * v30);
    }
    v42 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v42 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v19[2 * v42], a6, a7, a8);
}

void WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Wasm::BranchHintMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Wasm::BranchHintMap>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Wasm::BranchHintMap,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Wasm::BranchHintMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_QWORD *)(v7 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = -1;
      *v16 = 0;
      v16 += 2;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = 0;
    while (1)
    {
      v18 = (int *)(v4 + 16 * v17);
      v19 = *v18;
      if (*v18 != -2)
      {
        if (v19 != -1)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = 0;
          v24 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
          v25 = ((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) ^ (((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) >> 16);
          do
          {
            v26 = v25 & v22;
            v25 = ++v23 + v26;
          }
          while (*(_DWORD *)(v21 + 16 * v26) != -1);
          v27 = v21 + 16 * v26;
          v29 = (_QWORD *)(v27 + 8);
          v28 = *(_QWORD *)(v27 + 8);
          if (v28)
          {
            WTF::fastFree(v28 - 16, v8, v9, v10, v11, v12, v13, v14);
            v19 = *v18;
          }
          *(_DWORD *)v27 = v19;
          v30 = v4 + 16 * v17;
          *v29 = 0;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          *v29 = v31;
          v20 = *(_QWORD *)(v30 + 8);
          if (!v20)
            goto LABEL_21;
LABEL_20:
          WTF::fastFree(v20 - 16, v8, v9, v10, v11, v12, v13, v14);
          goto LABEL_21;
        }
        v20 = *(_QWORD *)(v4 + 16 * v17 + 8);
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      if (++v17 == v5)
        goto LABEL_24;
    }
  }
  if (v4)
LABEL_24:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(uint64_t result, uint64_t **a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = 0;
  switch(*(_BYTE *)(result + 6))
  {
    case 0:
      v3 = *(_QWORD *)(result + 176);
      goto LABEL_4;
    case 1:
      v3 = *(_QWORD *)(result + 72);
      goto LABEL_4;
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
      v4 = *(uint64_t **)(result + 40);
      goto LABEL_3;
    case 6:
      v4 = *(uint64_t **)(result + 32);
LABEL_3:
      v3 = *v4;
      goto LABEL_4;
    case 7:
      result = *(_QWORD *)(result + 64);
      if (result)
      {
        v5 = &v6;
        v6 = 0;
        result = JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(result, &v5);
        v3 = v6;
      }
      else
      {
        v3 = qword_1ECF53330;
      }
      goto LABEL_4;
    case 9:
LABEL_4:
      **a2 = v3;
      break;
    default:
      return result;
  }
  return result;
}

void JSC::Wasm::IPIntCallee::~IPIntCallee(JSC::Wasm::IPIntCallee *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  JSC::Wasm::NameSection *v29;

  v9 = *((_QWORD *)this + 25);
  if (v9)
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 16);
  if (v10)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 13);
  if (v11)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v13, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v13 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v13, (JSC::Wasm::Callee *)a2);
    }
  }
  v16 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v16));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v16);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v16, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v16 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v16, (JSC::Wasm::Callee *)a2);
    }
  }
  v19 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v19));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v19);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v19, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v19 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v19, (JSC::Wasm::Callee *)a2);
    }
  }
  v22 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr((unsigned int *)v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)v22));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v22);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v22, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v22 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v22, (JSC::Wasm::Callee *)a2);
    }
  }
  v25 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v25)
    WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
  v26 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      v29 = (JSC::Wasm::NameSection *)v26;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v29, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::Wasm::LLIntCallee::~LLIntCallee(JSC::Wasm::LLIntCallee *this, JSC::Wasm::Callee *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  JSC::Wasm::NameSection *v41;

  v9 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v9, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v9 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v9, a2);
    }
  }
  v12 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v12, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v12 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v12, a2);
    }
  }
  v15 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v15));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v15);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v15, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v15 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v15, a2);
    }
  }
  v18 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v18));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v18);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v18, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v18 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v18, a2);
    }
  }
  v21 = (unsigned int *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v21)
  {
    v23 = (unint64_t *)(v21 + 2);
    v22 = *v21;
    if ((_DWORD)v22)
    {
      v24 = 8 * v22;
      do
      {
        v25 = *v23;
        *v23 = 0;
        if (v25)
          WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
    WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *((_QWORD *)this + 16);
  if (v26)
  {
    v38 = *(unsigned int *)(v26 - 4);
    if ((_DWORD)v38)
    {
      v39 = v26 + 16;
      do
      {
        if (*(_DWORD *)(v39 - 16) != -1)
        {
          v40 = *(_QWORD *)v39;
          if (*(_QWORD *)v39)
          {
            *(_QWORD *)v39 = 0;
            *(_DWORD *)(v39 + 8) = 0;
            WTF::fastFree(v40, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v39 += 32;
        --v38;
      }
      while (v38);
    }
    WTF::fastFree(v26 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v27 = *((_QWORD *)this + 12);
  if (v27)
    WTF::fastFree(v27 - 16, a2, a3, a4, a5, a6, a7, a8);
  v28 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v28)
    WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
  v29 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v29)
    WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
  v30 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v30)
  {
    v31 = *(_QWORD *)v30;
    if (*(_QWORD *)v30)
    {
      *(_QWORD *)v30 = 0;
      *(_DWORD *)(v30 + 8) = 0;
      WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v32)
    WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
  v33 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v33)
    WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
  v34 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v34)
    WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
  v35 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      v41 = (JSC::Wasm::NameSection *)v35;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v41, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::Wasm::BBQCallee::~BBQCallee(JSC::Wasm::BBQCallee *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  JSC::Wasm::TierUpCount *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;

  v9 = *((unsigned int *)this + 47);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t *)*((_QWORD *)this + 22);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *((_QWORD *)this + 22);
  if (v13)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 18);
  if (v14)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = (JSC::Wasm::TierUpCount *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v15)
  {
    JSC::Wasm::TierUpCount::~TierUpCount(v15, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  v24 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v24)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v24));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v24);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v24, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v24 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v24, (JSC::Wasm::Callee *)a2);
    }
  }
  v27 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v27)
  {
    do
    {
      v28 = __ldaxr((unsigned int *)v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, (unsigned int *)v27));
    if (!v29)
    {
      atomic_store(1u, (unsigned int *)v27);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v27, a3, a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v27 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v27, (JSC::Wasm::Callee *)a2);
    }
  }
  JSC::Wasm::OptimizingJITCallee::~OptimizingJITCallee(this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::Wasm::OptimizingJITCallee::~OptimizingJITCallee(JSC::Wasm::OptimizingJITCallee *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  JSC::Compilation *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  JSC::Wasm::NameSection *v33;

  v9 = *((unsigned int *)this + 25);
  if ((_DWORD)v9)
  {
    v28 = (unsigned int **)*((_QWORD *)this + 11);
    v29 = 8 * v9;
    do
    {
      v28 = WTF::Ref<JSC::Wasm::NameSection,WTF::RawPtrTraits<JSC::Wasm::NameSection>,WTF::DefaultRefDerefTraits<JSC::Wasm::NameSection>>::~Ref(v28, a2, a3, a4, a5, a6, a7, a8)+ 1;
      v29 -= 8;
    }
    while (v29);
  }
  v10 = *((_QWORD *)this + 11);
  if (v10)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((_QWORD *)this + 8);
  if (v12)
  {
    v30 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v30)
    {
      v31 = (unint64_t *)(v12 + 8);
      do
      {
        if (*((_DWORD *)v31 - 2) != -2)
        {
          v32 = *v31;
          *v31 = 0;
          if (v32)
            WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
        }
        v31 += 2;
        --v30;
      }
      while (v30);
    }
    WTF::fastFree(v12 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  v14 = (JSC::Compilation *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
  {
    JSC::Compilation::~Compilation(v14, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  v23 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v23)
    WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
  v24 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v24)
    WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
  v25 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      v33 = (JSC::Wasm::NameSection *)v25;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v33, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

unsigned int **WTF::Ref<JSC::Wasm::NameSection,WTF::RawPtrTraits<JSC::Wasm::NameSection>,WTF::DefaultRefDerefTraits<JSC::Wasm::NameSection>>::~Ref(unsigned int **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::NameSection *v13;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = (JSC::Wasm::NameSection *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void std::__destroy_at[abi:sn180100]<JSC::Wasm::JSEntrypointJITCallee,0>(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int *a9@<X8>)
{
  unint64_t v10;
  JSC::Compilation *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  JSC::Wasm::NameSection *v23;

  if (!a1)
  {
    __break(1u);
LABEL_13:
    atomic_store(1u, a9);
    v23 = (JSC::Wasm::NameSection *)a9;
    WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v23, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v10 = a1[5];
  a1[5] = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = (JSC::Compilation *)a1[4];
  a1[4] = 0;
  if (v11)
  {
    JSC::Compilation::~Compilation(v11, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = a1[3];
  a1[3] = 0;
  if (v20)
    WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
  a9 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (a9)
  {
    do
    {
      v21 = __ldaxr(a9);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, a9));
    if (!v22)
      goto LABEL_13;
  }
}

void std::__destroy_at[abi:sn180100]<JSC::Wasm::JSToWasmICCallee,0>(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int *a9@<X8>)
{
  unint64_t v10;
  JSC::Compilation *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  JSC::Wasm::NameSection *v24;

  if (!a1)
  {
    __break(1u);
LABEL_15:
    atomic_store(1u, a9);
    v24 = (JSC::Wasm::NameSection *)a9;
    WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v24, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v10 = a1[6];
  a1[6] = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = (JSC::Compilation *)a1[5];
  a1[5] = 0;
  if (v11)
  {
    JSC::Compilation::~Compilation(v11, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = a1[4];
  a1[4] = 0;
  if (v20)
    WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
  v21 = a1[3];
  a1[3] = 0;
  if (v21)
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  a9 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (a9)
  {
    do
    {
      v22 = __ldaxr(a9);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, a9));
    if (!v23)
      goto LABEL_15;
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmToJSCallee::singleton(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v6 = 1;
  *(_WORD *)(v6 + 4) = 257;
  *(_BYTE *)(v6 + 6) = 9;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 8) = 0x4000000000000000;
  v16 = v6;
  if (__ldaxr((unsigned __int8 *)&JSC::calleeRegistry))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&JSC::calleeRegistry))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::calleeRegistry);
LABEL_5:
  WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::add(&qword_1ECF53D80, &v16, v0, v1, v2, v3, v4, v5, (uint64_t)&v15);
  v14 = __ldxr((unsigned __int8 *)&JSC::calleeRegistry);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&JSC::calleeRegistry))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::calleeRegistry, 0, v8, v9, v10, v11, v12, v13);
LABEL_10:
  JSC::Wasm::WasmToJSCallee::singleton(void)::callee = v6;
}

unsigned int **std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::IPIntCallee::calleeSaveRegistersImpl(void)::$_0 &&>>()
{
  return JSC::RegisterAtOffsetList::RegisterAtOffsetList((unsigned int **)&unk_1ECF58FF0, 0x6080000uLL, 0, 0);
}

unsigned int **std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::LLIntCallee::calleeSaveRegistersImpl(void)::$_0 &&>>()
{
  return JSC::RegisterAtOffsetList::RegisterAtOffsetList((unsigned int **)&unk_1ECF59000, 0x4080000uLL, 0, 0);
}

uint64_t WTF::Vector<WTF::Ref<JSC::Wasm::NameSection,WTF::RawPtrTraits<JSC::Wasm::NameSection>,WTF::DefaultRefDerefTraits<JSC::Wasm::NameSection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::Wasm::NameSection,WTF::RawPtrTraits<JSC::Wasm::NameSection>,WTF::DefaultRefDerefTraits<JSC::Wasm::NameSection>> const&>(uint64_t a1, unint64_t a2)
{
  unsigned int **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = (unsigned int **)WTF::Vector<JSC::ExpressionInfo::Chapter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(_QWORD *)(v5 + 8 * v4) = v6;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<JSC::Wasm::WasmCodeOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::WasmCodeOrigin>(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<JSC::Wasm::WasmCodeOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<JSC::Wasm::WasmCodeOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::Wasm::WasmCodeOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::Wasm::WasmCodeOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::Wasm::WasmCodeOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  const void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(const void **)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      memcpy(v6, v4, 16 * v5);
      if (v4)
      {
        if (*(const void **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

unsigned int **std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::JSEntrypointInterpreterCallee::calleeSaveRegistersImpl(void)::$_0 &&>>()
{
  return JSC::RegisterAtOffsetList::RegisterAtOffsetList((unsigned int **)&unk_1ECF59010, 0xC80000uLL, 0, 0);
}

void WTF::ThreadSafeRefCounted<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = *a1;
  if (*a1)
  {
    WTF::VectorDestructor<true,WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>>::destruct((unsigned int **)(v8 + 8), v8 + 8 + 8 * *(unsigned int *)(v8 + 4), a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
  }
}

void WTF::VectorDestructor<true,WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>>::destruct(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a1 != (unsigned int **)a2)
  {
    v9 = a1;
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v10, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v9;
    }
    while (v9 != (unsigned int **)a2);
  }
}

void WTF::ThreadSafeRefCounted<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = *a1;
  if (*a1)
  {
    WTF::VectorDestructor<true,WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>>::destruct((unsigned int **)(v8 + 8), v8 + 8 + 8 * *(unsigned int *)(v8 + 4), a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
  }
}

unsigned int **WTF::VectorDestructor<true,WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>>::destruct(unsigned int **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int **v12;

  for (; result != (unsigned int **)a2; ++result)
  {
    v8 = *result;
    *result = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        v11 = a2;
        v12 = result;
        JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v8, a2, a3, a4, a5, a6, a7, a8);
        a2 = v11;
        result = v12;
      }
    }
  }
  return result;
}

unsigned int **WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::FixedVector(unsigned int **a1, unsigned int *a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;

  if (a2)
  {
    WTF::EmbeddedFixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::create<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>> const*>(&v12, (unsigned int **)a2 + 1, (unsigned int **)&a2[2 * *a2 + 2]);
    v4 = v12;
    v12 = 0;
    *a1 = v4;
    WTF::FixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::~FixedVector(&v12, v5, v6, v7, v8, v9, v10, v11);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

_DWORD *WTF::EmbeddedFixedVector<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>>>::create<WTF::RefPtr<JSC::Wasm::Callee,WTF::RawPtrTraits<JSC::Wasm::Callee>,WTF::DefaultRefDerefTraits<JSC::Wasm::Callee>> const*>(_DWORD *result, unsigned int **a2, unsigned int **a3)
{
  unint64_t v3;
  unsigned int **v5;
  _QWORD *v6;
  unint64_t v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int v10;

  v3 = (char *)a3 - (char *)a2;
  if ((unint64_t)((char *)a3 - (char *)a2) >> 35)
  {
    __break(0xC471u);
  }
  else
  {
    v5 = a2;
    v6 = result;
    v7 = v3 >> 3;
    result = (_DWORD *)WTF::fastMalloc((WTF *)((v3 & 0x7FFFFFFF8) + 8));
    *result = v7;
    if (v5 != a3)
    {
      v8 = (unsigned int **)(result + 2);
      do
      {
        v9 = *v5;
        if (*v5)
        {
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
        }
        *v8++ = v9;
        ++v5;
      }
      while (v5 != a3);
    }
    *v6 = result;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 28))
  {
    v5 = WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    WTF::VectorCopier<false,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::uninitializedCopy<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(_OWORD **)a2, (_OWORD *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 12)), v5);
    return v2;
  }
  __break(0xC471u);
  return result;
}

_OWORD *WTF::VectorCopier<false,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::uninitializedCopy<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_OWORD *result, _OWORD *a2, uint64_t a3)
{
  _OWORD *i;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  if (result != a2)
  {
    for (i = result; i != a2; ++i)
    {
      v6 = *((unsigned int *)i + 3);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      if ((_DWORD)v6)
      {
        if (v6 >> 27)
        {
          __break(0xC471u);
          return result;
        }
        result = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v6));
        *(_DWORD *)(a3 + 8) = v6;
        *(_QWORD *)a3 = result;
        v7 = *((unsigned int *)i + 3);
        if ((_DWORD)v7)
        {
          v8 = *(__int128 **)i;
          v9 = 32 * v7;
          do
          {
            v10 = *v8;
            v11 = v8[1];
            v8 += 2;
            *result = v10;
            result[1] = v11;
            result += 2;
            v9 -= 32;
          }
          while (v9);
        }
      }
      a3 += 16;
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>>)::$_0>::~SharedTaskFunctor(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::CalleeGroup *v13;

  v9 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>>)::$_0>::~SharedTaskFunctor(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::CalleeGroup *v12;

  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v12 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>>)::$_0>::run(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  unsigned int *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  JSC::Wasm::Callee *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  int v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  unint64_t v134;
  WTF *v135;
  unsigned int v136;
  WTF **v137;

  v8 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v8 + 80))
  {
    v9 = (unsigned __int8 *)(v8 + 128);
    if (__ldaxr((unsigned __int8 *)(v8 + 128)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
LABEL_16:
      v24 = *(_QWORD *)(v8 + 80);
      v26 = *(_QWORD *)(v24 + 56);
      v25 = (_DWORD *)(v24 + 56);
      if (v26)
      {
        WTF::String::isolatedCopy(v25, (uint64_t *)&v135);
        v34 = *(WTF::StringImpl **)(v8 + 120);
        *(_QWORD *)(v8 + 120) = v135;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
          {
            WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
            WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
          }
          else
          {
            *(_DWORD *)v34 -= 2;
          }
        }
        v35 = *(unsigned int **)(v8 + 80);
        *(_QWORD *)(v8 + 80) = 0;
        if (v35)
        {
          v36 = v35 + 2;
          do
          {
            v37 = __ldaxr(v36);
            v38 = --v37 == 0;
          }
          while (__stlxr(v37, v36));
LABEL_59:
          if (v38)
          {
            atomic_store(1u, v35 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
          }
          goto LABEL_61;
        }
        goto LABEL_61;
      }
      v39 = *(unsigned int *)(v8 + 4);
      if ((_DWORD)v39)
      {
        v40 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v39 + 8));
        *v40 = v39;
        bzero(v40 + 2, 8 * v39);
      }
      else
      {
        v40 = 0;
      }
      v41 = *(_QWORD *)(v8 + 56);
      *(_QWORD *)(v8 + 56) = v40;
      if (v41)
        WTF::fastFree(v41, a2, a3, a4, a5, a6, a7, a8);
      WTF::FixedVector<WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::FixedVector(&v135, *(unsigned int *)(v8 + 4));
      v48 = v135;
      v135 = 0;
      v49 = *(unsigned int **)(v8 + 64);
      *(_QWORD *)(v8 + 64) = v48;
      if (v49)
      {
        WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct((unsigned int **)v49 + 1, (uint64_t)&v49[2 * *v49 + 2], v42, v43, v44, v45, v46, v47);
        WTF::fastFree((unint64_t)v49, v50, v51, v52, v53, v54, v55, v56);
        v63 = v135;
        v135 = 0;
        if (v63)
        {
          WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct((unsigned int **)v63 + 1, (uint64_t)v63 + 8 * *(unsigned int *)v63 + 8, v57, v58, v59, v60, v61, v62);
          WTF::fastFree((unint64_t)v63, v64, v65, v66, v67, v68, v69, v70);
        }
      }
      if (!*(_DWORD *)(v8 + 4))
      {
LABEL_47:
        v96 = *(unint64_t **)(v8 + 80);
        if (v96[7] || (*(unsigned int (**)(_QWORD))(*v96 + 16))(*(_QWORD *)(v8 + 80)))
        {
          __break(0xC471u);
          JUMPOUT(0x198C80A84);
        }
        WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::operator=<0ul,WTF::CrashOnOverflow>((unsigned int **)(v8 + 72), v96 + 12, v97, v98, v99, v100, v101, v102);
        JSC::Wasm::EntryPlan::takeWasmToWasmCallsites((JSC::Wasm::EntryPlan *)&v135, *(_QWORD **)(v8 + 80));
        JSC::Wasm::CallsiteCollection::addCalleeGroupCallsites(v8 + 88, *(int **)(v8 + 72), &v135, v103, v104, v105, v106, v107);
        v109 = v135;
        if (v136)
        {
          v132 = 16 * v136;
          v133 = v135;
          do
          {
            v134 = *(_QWORD *)v133;
            if (*(_QWORD *)v133)
            {
              *(_QWORD *)v133 = 0;
              *((_DWORD *)v133 + 2) = 0;
              WTF::fastFree(v134, v108, v28, v29, v30, v31, v32, v33);
            }
            v133 = (WTF *)((char *)v133 + 16);
            v132 -= 16;
          }
          while (v132);
        }
        if (v109)
          WTF::fastFree((unint64_t)v109, v108, v28, v29, v30, v31, v32, v33);
        v110 = *(_QWORD *)(v8 + 80);
        if (*(_QWORD *)(v110 + 56) || *(unsigned __int8 *)(v110 + 352) <= 2u)
        {
          __break(0xC471u);
          JUMPOUT(0x198C80AA4);
        }
        v111 = *(_QWORD *)(v110 + 424);
        *(_QWORD *)(v110 + 424) = 0;
        v112 = *(_QWORD *)(v8 + 48);
        *(_QWORD *)(v8 + 48) = v111;
        if (v112)
          WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(v112, v108, v28, v29, v30, v31, v32, v33);
        v35 = *(unsigned int **)(v8 + 80);
        *(_QWORD *)(v8 + 80) = 0;
        if (v35)
        {
          v113 = v35 + 2;
          do
          {
            v114 = __ldaxr(v113);
            v38 = --v114 == 0;
          }
          while (__stlxr(v114, v113));
          goto LABEL_59;
        }
LABEL_61:
        atomic_store(1u, (unsigned __int8 *)(v8 + 112));
        v115 = __ldxr(v9);
        if (v115 == 1)
        {
          if (!__stlxr(0, v9))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 128), 0, v28, v29, v30, v31, v32, v33);
        return;
      }
      v71 = 0;
      while (1)
      {
        v72 = *(_QWORD *)(v8 + 40);
        if (v71 >= *(unsigned int *)(v72 + 4))
          break;
        v73 = *(_QWORD *)(v72 + 8 * v71 + 8);
        v135 = 0;
        v137 = &v135;
        JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v73, (uint64_t **)&v137);
        v80 = *(unsigned int **)(v8 + 56);
        if (v71 >= *v80)
        {
          __break(0xC471u);
          JUMPOUT(0x198C80A08);
        }
        *(_QWORD *)&v80[2 * v71 + 2] = v135;
        v81 = *(_QWORD *)(v8 + 40);
        if (v71 >= *(unsigned int *)(v81 + 4))
        {
          __break(0xC471u);
          JUMPOUT(0x198C80A28);
        }
        v82 = *(unsigned int **)(v8 + 64);
        if (v71 >= *v82)
        {
          __break(0xC471u);
          JUMPOUT(0x198C80A48);
        }
        v83 = *(unsigned int **)(v81 + 8 * v71 + 8);
        if (v83)
        {
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 + 1, v83));
        }
        v85 = v82 + 2;
        v86 = *(_QWORD *)&v85[2 * v71];
        *(_QWORD *)&v85[2 * v71] = v83;
        if (v86)
        {
          do
          {
            v87 = __ldaxr((unsigned int *)v86);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, (unsigned int *)v86));
          if (!v88)
          {
            atomic_store(1u, (unsigned int *)v86);
            JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v86, v74, v75, v76, v77, v78, v79);
            if (*(_BYTE *)(v86 + 4) == 1)
              JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v86, v89, v90, v91, v92, v93, v94, v95);
          }
        }
        if (++v71 >= *(unsigned int *)(v8 + 4))
          goto LABEL_47;
      }
LABEL_79:
      __break(0xC471u);
      JUMPOUT(0x198C809E8);
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 128);
    goto LABEL_16;
  }
  WTF::tryFastCompactMalloc((WTF *)0x42, &v135);
  v18 = v135;
  if (!v135)
    goto LABEL_79;
  *(_QWORD *)v135 = 0x2E00000002;
  qmemcpy((char *)v18 + 20, "Out of memory while creating LLInt CalleeGroup", 46);
  *((_QWORD *)v18 + 1) = (char *)v18 + 20;
  *((_DWORD *)v18 + 4) = 4;
  v19 = *(WTF::StringImpl **)(v8 + 120);
  *(_QWORD *)(v8 + 120) = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  v20 = *(unsigned int **)(v8 + 80);
  *(_QWORD *)(v8 + 80) = 0;
  if (v20)
  {
    v21 = v20 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v20 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  atomic_store(1u, (unsigned __int8 *)(v8 + 112));
}

unsigned int **WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::operator=<0ul,WTF::CrashOnOverflow>(unsigned int **a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v9 = *a2;
  v10 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  if ((_DWORD)v10)
  {
    v11 = (unsigned int *)WTF::fastMalloc((WTF *)((16 * v10) | 8));
    v12 = v11;
    v13 = 0;
    v14 = v9 + 16 * v10;
    *v11 = v10;
    do
    {
      v15 = &v11[v13 / 4];
      v16 = v9 + v13;
      *((_QWORD *)v15 + 1) = *(_QWORD *)(v9 + v13);
      v17 = *(_QWORD *)(v9 + v13 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      *((_QWORD *)v15 + 2) = v17;
      v13 += 16;
    }
    while (v16 + 16 != v14);
    v18 = v9;
    do
    {
      v19 = *(unsigned int **)(v18 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v19, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
        }
      }
      v18 += 16;
    }
    while (v18 != v14);
    if (v9)
    {
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
      v9 = 0;
    }
  }
  else
  {
    v12 = 0;
  }
  v30 = *a1;
  *a1 = v12;
  if (v30)
  {
    v32 = v30 + 2;
    v31 = *v30;
    if ((_DWORD)v31)
    {
      v33 = &v32[4 * v31];
      do
      {
        v34 = (unsigned int *)*((_QWORD *)v32 + 1);
        *((_QWORD *)v32 + 1) = 0;
        if (v34)
        {
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v34, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
          }
        }
        v32 += 4;
      }
      while (v32 != v33);
    }
    WTF::fastFree((unint64_t)v30, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t JSC::Wasm::EntryPlan::takeWasmToWasmCallsites(JSC::Wasm::EntryPlan *this, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;

  if (a2[7] || (result = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2), (_DWORD)result))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)this = a2[17];
    v5 = a2[18];
    a2[17] = 0;
    a2[18] = 0;
    *((_QWORD *)this + 1) = v5;
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>>)::$_1>::~SharedTaskFunctor(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::CalleeGroup *v13;

  v9 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>>)::$_1>::~SharedTaskFunctor(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::CalleeGroup *v12;

  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v12 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>>)::$_1>::run(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  unsigned int *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  WTF *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned __int8 *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  unint64_t v94;
  WTF *v95;
  unsigned int v96;
  unsigned __int8 *v97;
  char v98;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = (unsigned __int8 *)(v8 + 128);
  v97 = (unsigned __int8 *)(v8 + 128);
  v98 = 1;
  if (__ldaxr((unsigned __int8 *)(v8 + 128)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_5:
  v11 = *(_QWORD *)(v8 + 80);
  v13 = *(_QWORD *)(v11 + 56);
  v12 = (_DWORD *)(v11 + 56);
  if (v13)
  {
    WTF::String::isolatedCopy(v12, (uint64_t *)&v95);
    v21 = *(WTF::StringImpl **)(v8 + 120);
    *(_QWORD *)(v8 + 120) = v95;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    v22 = *(unsigned int **)(v8 + 80);
    *(_QWORD *)(v8 + 80) = 0;
    if (v22)
    {
      v23 = v22 + 2;
      do
      {
        v24 = __ldaxr(v23);
        v25 = --v24 == 0;
      }
      while (__stlxr(v24, v23));
LABEL_29:
      if (v25)
      {
        atomic_store(1u, v22 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
      }
    }
  }
  else
  {
    v26 = *(unsigned int *)(v8 + 4);
    if ((_DWORD)v26)
    {
      v27 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v26 + 8));
      *v27 = v26;
      bzero(v27 + 2, 8 * v26);
    }
    else
    {
      v27 = 0;
    }
    v28 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v8 + 56) = v27;
    if (v28)
      WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
    WTF::FixedVector<WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::FixedVector(&v95, *(unsigned int *)(v8 + 4));
    v35 = v95;
    v95 = 0;
    v36 = *(unsigned int **)(v8 + 64);
    *(_QWORD *)(v8 + 64) = v35;
    if (v36)
    {
      WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct((unsigned int **)v36 + 1, (uint64_t)&v36[2 * *v36 + 2], v29, v30, v31, v32, v33, v34);
      WTF::fastFree((unint64_t)v36, v37, v38, v39, v40, v41, v42, v43);
      v50 = v95;
      v95 = 0;
      if (v50)
      {
        WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct((unsigned int **)v50 + 1, (uint64_t)v50 + 8 * *(unsigned int *)v50 + 8, v44, v45, v46, v47, v48, v49);
        WTF::fastFree((unint64_t)v50, v51, v52, v53, v54, v55, v56, v57);
      }
    }
    v58 = *(_QWORD *)(v8 + 80);
    v59 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v59 = off_1E35B5540;
    *((_QWORD *)v59 + 1) = v8;
    *((_QWORD *)v59 + 2) = &v97;
    v95 = v59;
    JSC::Wasm::BBQPlan::initializeCallees(v58, (JSC::Wasm::Callee *)&v95, v60, v61, v62, v63, v64, v65);
    (*(void (**)(WTF *))(*(_QWORD *)v59 + 8))(v59);
    v66 = *(unint64_t **)(v8 + 80);
    if (v66[7] || (*(unsigned int (**)(_QWORD))(*v66 + 16))(*(_QWORD *)(v8 + 80)))
    {
      __break(0xC471u);
      return;
    }
    WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::operator=<0ul,WTF::CrashOnOverflow>((unsigned int **)(v8 + 72), v66 + 12, v67, v68, v69, v70, v71, v72);
    JSC::Wasm::EntryPlan::takeWasmToWasmCallsites((JSC::Wasm::EntryPlan *)&v95, *(_QWORD **)(v8 + 80));
    JSC::Wasm::CallsiteCollection::addCalleeGroupCallsites(v8 + 88, *(int **)(v8 + 72), &v95, v73, v74, v75, v76, v77);
    v79 = v95;
    if (v96)
    {
      v92 = 16 * v96;
      v93 = v95;
      do
      {
        v94 = *(_QWORD *)v93;
        if (*(_QWORD *)v93)
        {
          *(_QWORD *)v93 = 0;
          *((_DWORD *)v93 + 2) = 0;
          WTF::fastFree(v94, v78, v15, v16, v17, v18, v19, v20);
        }
        v93 = (WTF *)((char *)v93 + 16);
        v92 -= 16;
      }
      while (v92);
    }
    if (v79)
      WTF::fastFree((unint64_t)v79, v78, v15, v16, v17, v18, v19, v20);
    v22 = *(unsigned int **)(v8 + 80);
    *(_QWORD *)(v8 + 80) = 0;
    if (v22)
    {
      v80 = v22 + 2;
      do
      {
        v81 = __ldaxr(v80);
        v25 = --v81 == 0;
      }
      while (__stlxr(v81, v80));
      goto LABEL_29;
    }
  }
  atomic_store(1u, (unsigned __int8 *)(v8 + 112));
  if (v98)
  {
    v82 = v97;
    v83 = __ldxr(v97);
    if (v83 == 1)
    {
      if (!__stlxr(0, v97))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v82, 0, v15, v16, v17, v18, v19, v20);
  }
}

void WTF::Detail::CallableWrapper<JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::LLIntCallee,WTF::RawPtrTraits<JSC::Wasm::LLIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::LLIntCallee>>,true>>>)::$_1::operator() const(JSC::Wasm::Plan &)::{lambda(unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>> &&,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>> &&>> &&)#1},void,unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>> &,WTF::Ref<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>> &&,JSC::Wasm::BBQCallee,WTF::RawPtrTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>> &&>> &&>::call(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  JSC::Wasm::Callee *v32;
  uint64_t v33;
  JSC::Wasm::Callee *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[3];
  unsigned int v42;
  uint64_t *v43;

  v9 = *a4;
  *a4 = 0;
  v42 = a2;
  v10 = *(uint64_t **)(a1 + 8);
  if (*a3)
    WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>((uint64_t)v41, v10 + 6, (int *)&v42, a3, a5, a6, a7, a8);
  v41[0] = 0;
  v43 = v41;
  JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v9, &v43);
  v17 = (unsigned int *)v10[7];
  if (*v17 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198C8114CLL);
  }
  *(_QWORD *)&v17[2 * a2 + 2] = v41[0];
  v18 = (unsigned int *)v10[8];
  if (*v18 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198C8116CLL);
  }
  v19 = &v18[2 * a2];
  v20 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v20, v11, v12, v13, v14, v15, v16);
      if (*(_BYTE *)(v20 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v20, v32, v33, v12, v13, v14, v15, v16);
    }
  }
  v41[0] = v9;
  JSC::Wasm::CalleeGroup::setBBQCallee((uint64_t)v10, v42, v41, v12, v13, v14, v15, v16);
  v29 = v41[0];
  v41[0] = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr((unsigned int *)v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)v29));
    if (!v31)
    {
      atomic_store(1u, (unsigned int *)v29);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v29, v23, v24, v25, v26, v27, v28);
      if (*(_BYTE *)(v29 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v29, v34, v35, v36, v37, v38, v39, v40);
    }
  }
}

void WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>(uint64_t a1, uint64_t *a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  JSC::Wasm::Callee *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::Wasm::Callee *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(a2, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = (v17 ^ HIWORD(v17)) & v14;
  v19 = v12 + 16 * v18;
  v20 = *(_DWORD *)v19;
  if (*(_DWORD *)v19 == -1)
  {
LABEL_12:
    *(_DWORD *)v19 = v15;
    v23 = *a4;
    *a4 = 0;
    v24 = *(_QWORD *)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v23;
    if (v24)
    {
      do
      {
        v25 = __ldaxr((unsigned int *)v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v24));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)v24);
        JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v24, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_BYTE *)(v24 + 4) == 1)
          JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v24, v38, v39, v40, v41, v42, v43, v44);
      }
    }
    v27 = *a2;
    if (*a2)
      v28 = *(_DWORD *)(v27 - 12) + 1;
    else
      v28 = 1;
    *(_DWORD *)(v27 - 12) = v28;
    v29 = *a2;
    if (*a2)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    v31 = (*(_DWORD *)(v29 - 16) + v30);
    v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 <= 2 * v31)
      {
LABEL_21:
        v19 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(a2, (int *)v19);
        v29 = *a2;
        if (*a2)
          v32 = *(unsigned int *)(v29 - 4);
        else
          v32 = 0;
      }
    }
    else if (3 * v32 <= 4 * v31)
    {
      goto LABEL_21;
    }
    *(_QWORD *)a1 = v19;
    *(_QWORD *)(a1 + 8) = v29 + 16 * v32;
    *(_BYTE *)(a1 + 16) = 1;
    return;
  }
  v21 = 0;
  v22 = 1;
  while (v20 != v15)
  {
    if (v20 == -2)
      v21 = v19;
    v18 = (v18 + v22) & v14;
    v19 = v12 + 16 * v18;
    v20 = *(_DWORD *)v19;
    ++v22;
    if (*(_DWORD *)v19 == -1)
    {
      if (v21)
      {
        *(_DWORD *)v21 = -1;
        *(_QWORD *)(v21 + 8) = 0;
        --*(_DWORD *)(*a2 - 16);
        v15 = *a3;
        v19 = v21;
      }
      goto LABEL_12;
    }
  }
  if ((v13 & 1) != 0)
    v33 = 0;
  else
    v33 = *(unsigned int *)(v12 - 4);
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v12 + 16 * v33;
  *(_BYTE *)(a1 + 16) = 0;
  v34 = *a4;
  *a4 = 0;
  v35 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v19 + 8) = v34;
  if (v35)
  {
    do
    {
      v36 = __ldaxr((unsigned int *)v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, (unsigned int *)v35));
    if (!v37)
    {
      atomic_store(1u, (unsigned int *)v35);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v35, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_BYTE *)(v35 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v35, v45, v46, v47, v48, v49, v50, v51);
    }
  }
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t Table;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::JSValue *>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::JSValue *,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::JSValue *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = (int *)(v6 + 16 * v17);
      v20 = *v19;
      if (*v19 == -1)
      {
        v36 = (unsigned int *)*((_QWORD *)v19 + 1);
        *((_QWORD *)v19 + 1) = 0;
        if (v36)
        {
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            atomic_store(1u, v36);
            JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v36, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
          }
        }
      }
      else if (v20 != -2)
      {
        v21 = *a1;
        if (*a1)
          v22 = *(_DWORD *)(v21 - 8);
        else
          v22 = 0;
        v23 = 0;
        v24 = 9 * ((v20 + ~(v20 << 15)) ^ ((v20 + ~(v20 << 15)) >> 10));
        v25 = ((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) ^ (((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) >> 16);
        do
        {
          v26 = v25 & v22;
          v25 = ++v23 + v26;
        }
        while (*(_DWORD *)(v21 + 16 * v26) != -1);
        v27 = v21 + 16 * v26;
        v28 = *(unsigned int **)(v27 + 8);
        *(_QWORD *)(v27 + 8) = 0;
        if (v28)
        {
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            atomic_store(1u, v28);
            JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v28, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
          }
        }
        *(_DWORD *)v27 = *v19;
        v31 = v6 + 16 * v17;
        v32 = *(_QWORD *)(v31 + 8);
        *(_QWORD *)(v31 + 8) = 0;
        *(_QWORD *)(v27 + 8) = v32;
        v33 = *(unsigned int **)(v31 + 8);
        *(_QWORD *)(v31 + 8) = 0;
        if (v33)
        {
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            atomic_store(1u, v33);
            JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v33, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
          }
        }
        if (v19 == a3)
          v18 = v27;
      }
      ++v17;
    }
    while (v17 != v7);
  }
  else
  {
    v18 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v18;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>>)::$_0>::~SharedTaskFunctor(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::CalleeGroup *v13;

  v9 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>>)::$_0>::~SharedTaskFunctor(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::CalleeGroup *v12;

  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v12 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>>)::$_0>::run(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  unsigned int *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  JSC::Wasm::Callee *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  int v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  unint64_t v113;
  WTF *v114;
  unsigned int v115;
  WTF **v116;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = (unsigned __int8 *)(v8 + 128);
  if (__ldaxr((unsigned __int8 *)(v8 + 128)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 128);
LABEL_5:
  v11 = *(_QWORD *)(v8 + 80);
  v13 = *(_QWORD *)(v11 + 56);
  v12 = (_DWORD *)(v11 + 56);
  if (v13)
  {
    WTF::String::isolatedCopy(v12, (uint64_t *)&v114);
    v21 = *(WTF::StringImpl **)(v8 + 120);
    *(_QWORD *)(v8 + 120) = v114;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    v22 = *(unsigned int **)(v8 + 80);
    *(_QWORD *)(v8 + 80) = 0;
    if (v22)
    {
      v23 = v22 + 2;
      do
      {
        v24 = __ldaxr(v23);
        v25 = --v24 == 0;
      }
      while (__stlxr(v24, v23));
LABEL_48:
      if (v25)
      {
        atomic_store(1u, v22 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
      }
      goto LABEL_50;
    }
    goto LABEL_50;
  }
  v26 = *(unsigned int *)(v8 + 4);
  if ((_DWORD)v26)
  {
    v27 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v26 + 8));
    *v27 = v26;
    bzero(v27 + 2, 8 * v26);
  }
  else
  {
    v27 = 0;
  }
  v28 = *(_QWORD *)(v8 + 56);
  *(_QWORD *)(v8 + 56) = v27;
  if (v28)
    WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
  WTF::FixedVector<WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::FixedVector(&v114, *(unsigned int *)(v8 + 4));
  v35 = v114;
  v114 = 0;
  v36 = *(unsigned int **)(v8 + 64);
  *(_QWORD *)(v8 + 64) = v35;
  if (v36)
  {
    WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct((unsigned int **)v36 + 1, (uint64_t)&v36[2 * *v36 + 2], v29, v30, v31, v32, v33, v34);
    WTF::fastFree((unint64_t)v36, v37, v38, v39, v40, v41, v42, v43);
    v50 = v114;
    v114 = 0;
    if (v50)
    {
      WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct((unsigned int **)v50 + 1, (uint64_t)v50 + 8 * *(unsigned int *)v50 + 8, v44, v45, v46, v47, v48, v49);
      WTF::fastFree((unint64_t)v50, v51, v52, v53, v54, v55, v56, v57);
    }
  }
  if (*(_DWORD *)(v8 + 4))
  {
    v58 = 0;
    while (1)
    {
      v59 = *(_QWORD *)(v8 + 32);
      if (v58 >= *(unsigned int *)(v59 + 4))
        break;
      v60 = *(_QWORD *)(v59 + 8 * v58 + 8);
      v114 = 0;
      v116 = &v114;
      JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v60, (uint64_t **)&v116);
      v67 = *(unsigned int **)(v8 + 56);
      if (v58 >= *v67)
      {
        __break(0xC471u);
        JUMPOUT(0x198C81AE8);
      }
      *(_QWORD *)&v67[2 * v58 + 2] = v114;
      v68 = *(_QWORD *)(v8 + 32);
      if (v58 >= *(unsigned int *)(v68 + 4))
      {
        __break(0xC471u);
        JUMPOUT(0x198C81B08);
      }
      v69 = *(unsigned int **)(v8 + 64);
      if (v58 >= *v69)
      {
        __break(0xC471u);
        JUMPOUT(0x198C81B28);
      }
      v70 = *(unsigned int **)(v68 + 8 * v58 + 8);
      if (v70)
      {
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 + 1, v70));
      }
      v72 = v69 + 2;
      v73 = *(_QWORD *)&v72[2 * v58];
      *(_QWORD *)&v72[2 * v58] = v70;
      if (v73)
      {
        do
        {
          v74 = __ldaxr((unsigned int *)v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, (unsigned int *)v73));
        if (!v75)
        {
          atomic_store(1u, (unsigned int *)v73);
          JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v73, v61, v62, v63, v64, v65, v66);
          if (*(_BYTE *)(v73 + 4) == 1)
            JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v73, v76, v77, v78, v79, v80, v81, v82);
        }
      }
      if (++v58 >= *(unsigned int *)(v8 + 4))
        goto LABEL_36;
    }
LABEL_66:
    __break(0xC471u);
    JUMPOUT(0x198C81AC8);
  }
LABEL_36:
  v83 = *(unint64_t **)(v8 + 80);
  if (v83[7] || (*(unsigned int (**)(_QWORD))(*v83 + 16))(*(_QWORD *)(v8 + 80)))
  {
    __break(0xC471u);
    JUMPOUT(0x198C81B64);
  }
  WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::operator=<0ul,WTF::CrashOnOverflow>((unsigned int **)(v8 + 72), v83 + 12, v84, v85, v86, v87, v88, v89);
  JSC::Wasm::EntryPlan::takeWasmToWasmCallsites((JSC::Wasm::EntryPlan *)&v114, *(_QWORD **)(v8 + 80));
  JSC::Wasm::CallsiteCollection::addCalleeGroupCallsites(v8 + 88, *(int **)(v8 + 72), &v114, v90, v91, v92, v93, v94);
  v96 = v114;
  if (v115)
  {
    v111 = 16 * v115;
    v112 = v114;
    do
    {
      v113 = *(_QWORD *)v112;
      if (*(_QWORD *)v112)
      {
        *(_QWORD *)v112 = 0;
        *((_DWORD *)v112 + 2) = 0;
        WTF::fastFree(v113, v95, v15, v16, v17, v18, v19, v20);
      }
      v112 = (WTF *)((char *)v112 + 16);
      v111 -= 16;
    }
    while (v111);
  }
  if (v96)
    WTF::fastFree((unint64_t)v96, v95, v15, v16, v17, v18, v19, v20);
  v97 = *(_QWORD *)(v8 + 80);
  if (*(_QWORD *)(v97 + 56) || *(unsigned __int8 *)(v97 + 352) <= 2u)
    goto LABEL_66;
  v98 = *(_QWORD *)(v97 + 424);
  *(_QWORD *)(v97 + 424) = 0;
  v99 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 48) = v98;
  if (v99)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(v99, v95, v15, v16, v17, v18, v19, v20);
  v22 = *(unsigned int **)(v8 + 80);
  *(_QWORD *)(v8 + 80) = 0;
  if (v22)
  {
    v100 = v22 + 2;
    do
    {
      v101 = __ldaxr(v100);
      v25 = --v101 == 0;
    }
    while (__stlxr(v101, v100));
    goto LABEL_48;
  }
LABEL_50:
  atomic_store(1u, (unsigned __int8 *)(v8 + 112));
  v102 = __ldxr(v9);
  if (v102 != 1)
  {
    __clrex();
    goto LABEL_54;
  }
  if (__stlxr(0, v9))
LABEL_54:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 128), 0, v15, v16, v17, v18, v19, v20);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>>)::$_1>::~SharedTaskFunctor(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::CalleeGroup *v13;

  v9 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>>)::$_1>::~SharedTaskFunctor(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::CalleeGroup *v12;

  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v12 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>>)::$_1>::run(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  unsigned int *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  WTF *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned __int8 *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  unint64_t v94;
  WTF *v95;
  unsigned int v96;
  unsigned __int8 *v97;
  char v98;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = (unsigned __int8 *)(v8 + 128);
  v97 = (unsigned __int8 *)(v8 + 128);
  v98 = 1;
  if (__ldaxr((unsigned __int8 *)(v8 + 128)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_5:
  v11 = *(_QWORD *)(v8 + 80);
  v13 = *(_QWORD *)(v11 + 56);
  v12 = (_DWORD *)(v11 + 56);
  if (v13)
  {
    WTF::String::isolatedCopy(v12, (uint64_t *)&v95);
    v21 = *(WTF::StringImpl **)(v8 + 120);
    *(_QWORD *)(v8 + 120) = v95;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    v22 = *(unsigned int **)(v8 + 80);
    *(_QWORD *)(v8 + 80) = 0;
    if (v22)
    {
      v23 = v22 + 2;
      do
      {
        v24 = __ldaxr(v23);
        v25 = --v24 == 0;
      }
      while (__stlxr(v24, v23));
LABEL_29:
      if (v25)
      {
        atomic_store(1u, v22 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
      }
    }
  }
  else
  {
    v26 = *(unsigned int *)(v8 + 4);
    if ((_DWORD)v26)
    {
      v27 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v26 + 8));
      *v27 = v26;
      bzero(v27 + 2, 8 * v26);
    }
    else
    {
      v27 = 0;
    }
    v28 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v8 + 56) = v27;
    if (v28)
      WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
    WTF::FixedVector<WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::FixedVector(&v95, *(unsigned int *)(v8 + 4));
    v35 = v95;
    v95 = 0;
    v36 = *(unsigned int **)(v8 + 64);
    *(_QWORD *)(v8 + 64) = v35;
    if (v36)
    {
      WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct((unsigned int **)v36 + 1, (uint64_t)&v36[2 * *v36 + 2], v29, v30, v31, v32, v33, v34);
      WTF::fastFree((unint64_t)v36, v37, v38, v39, v40, v41, v42, v43);
      v50 = v95;
      v95 = 0;
      if (v50)
      {
        WTF::VectorDestructor<true,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<JSC::Wasm::BBQCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::BBQCallee>>>::destruct((unsigned int **)v50 + 1, (uint64_t)v50 + 8 * *(unsigned int *)v50 + 8, v44, v45, v46, v47, v48, v49);
        WTF::fastFree((unint64_t)v50, v51, v52, v53, v54, v55, v56, v57);
      }
    }
    v58 = *(_QWORD *)(v8 + 80);
    v59 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v59 = off_1E35B55B8;
    *((_QWORD *)v59 + 1) = v8;
    *((_QWORD *)v59 + 2) = &v97;
    v95 = v59;
    JSC::Wasm::BBQPlan::initializeCallees(v58, (JSC::Wasm::Callee *)&v95, v60, v61, v62, v63, v64, v65);
    (*(void (**)(WTF *))(*(_QWORD *)v59 + 8))(v59);
    v66 = *(unint64_t **)(v8 + 80);
    if (v66[7] || (*(unsigned int (**)(_QWORD))(*v66 + 16))(*(_QWORD *)(v8 + 80)))
    {
      __break(0xC471u);
      return;
    }
    WTF::FixedVector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>::operator=<0ul,WTF::CrashOnOverflow>((unsigned int **)(v8 + 72), v66 + 12, v67, v68, v69, v70, v71, v72);
    JSC::Wasm::EntryPlan::takeWasmToWasmCallsites((JSC::Wasm::EntryPlan *)&v95, *(_QWORD **)(v8 + 80));
    JSC::Wasm::CallsiteCollection::addCalleeGroupCallsites(v8 + 88, *(int **)(v8 + 72), &v95, v73, v74, v75, v76, v77);
    v79 = v95;
    if (v96)
    {
      v92 = 16 * v96;
      v93 = v95;
      do
      {
        v94 = *(_QWORD *)v93;
        if (*(_QWORD *)v93)
        {
          *(_QWORD *)v93 = 0;
          *((_DWORD *)v93 + 2) = 0;
          WTF::fastFree(v94, v78, v15, v16, v17, v18, v19, v20);
        }
        v93 = (WTF *)((char *)v93 + 16);
        v92 -= 16;
      }
      while (v92);
    }
    if (v79)
      WTF::fastFree((unint64_t)v79, v78, v15, v16, v17, v18, v19, v20);
    v22 = *(unsigned int **)(v8 + 80);
    *(_QWORD *)(v8 + 80) = 0;
    if (v22)
    {
      v80 = v22 + 2;
      do
      {
        v81 = __ldaxr(v80);
        v25 = --v81 == 0;
      }
      while (__stlxr(v81, v80));
      goto LABEL_29;
    }
  }
  atomic_store(1u, (unsigned __int8 *)(v8 + 112));
  if (v98)
  {
    v82 = v97;
    v83 = __ldxr(v97);
    if (v83 == 1)
    {
      if (!__stlxr(0, v97))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v82, 0, v15, v16, v17, v18, v19, v20);
  }
}

void WTF::Detail::CallableWrapper<JSC::Wasm::CalleeGroup::CalleeGroup(JSC::VM &,JSC::MemoryMode,JSC::Wasm::ModuleInformation &,WTF::RefPtr<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>,WTF::RawPtrTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>,WTF::DefaultRefDerefTraits<WTF::RefCountedFixedVectorBase<WTF::Ref<JSC::Wasm::IPIntCallee,WTF::RawPtrTraits<JSC::Wasm::IPIntCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::IPIntCallee>>,true>>>)::$_1::operator() const(JSC::Wasm::Plan &)::{lambda(unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>> &&,WTF::RefPtr<JSC::Wasm::BBQCallee,WTF::RawPtrTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>> &&>> &&)#1},void,unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>> &,WTF::Ref<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>> &&,JSC::Wasm::BBQCallee,WTF::RawPtrTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>> &&>> &&>::call(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  JSC::Wasm::Callee *v32;
  uint64_t v33;
  JSC::Wasm::Callee *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[3];
  unsigned int v42;
  uint64_t *v43;

  v9 = *a4;
  *a4 = 0;
  v42 = a2;
  v10 = *(uint64_t **)(a1 + 8);
  if (*a3)
    WTF::HashMap<unsigned int,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::RefPtr<JSC::Wasm::JSEntrypointCallee,WTF::RawPtrTraits<JSC::Wasm::JSEntrypointCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSEntrypointCallee>>>((uint64_t)v41, v10 + 6, (int *)&v42, a3, a5, a6, a7, a8);
  v41[0] = 0;
  v43 = v41;
  JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v9, &v43);
  v17 = (unsigned int *)v10[7];
  if (*v17 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198C8203CLL);
  }
  *(_QWORD *)&v17[2 * a2 + 2] = v41[0];
  v18 = (unsigned int *)v10[8];
  if (*v18 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198C8205CLL);
  }
  v19 = &v18[2 * a2];
  v20 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v20, v11, v12, v13, v14, v15, v16);
      if (*(_BYTE *)(v20 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v20, v32, v33, v12, v13, v14, v15, v16);
    }
  }
  v41[0] = v9;
  JSC::Wasm::CalleeGroup::setBBQCallee((uint64_t)v10, v42, v41, v12, v13, v14, v15, v16);
  v29 = v41[0];
  v41[0] = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr((unsigned int *)v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)v29));
    if (!v31)
    {
      atomic_store(1u, (unsigned int *)v29);
      JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, v29, v23, v24, v25, v26, v27, v28);
      if (*(_BYTE *)(v29 + 4) == 1)
        JSC::Wasm::Callee::destroy((JSC::Wasm::Callee *)v29, v34, v35, v36, v37, v38, v39, v40);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::compileAsync(JSC::VM &,WTF::RefPtr<WTF::SharedTask<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>,WTF::RawPtrTraits<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>,WTF::DefaultRefDerefTraits<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>> &&)::$_0>::~SharedTaskFunctor(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  JSC::Wasm::CalleeGroup *v17;

  v9 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v17 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v17, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::compileAsync(JSC::VM &,WTF::RefPtr<WTF::SharedTask<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>,WTF::RawPtrTraits<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>,WTF::DefaultRefDerefTraits<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>> &&)::$_0>::~SharedTaskFunctor(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  JSC::Wasm::CalleeGroup *v16;

  v9 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v16 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::CalleeGroup::compileAsync(JSC::VM &,WTF::RefPtr<WTF::SharedTask<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>,WTF::RawPtrTraits<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>,WTF::DefaultRefDerefTraits<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)>> &&)::$_0>::run(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  JSC::Wasm::CalleeGroup *v15;

  v2 = *(unsigned int **)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v14 = v2;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v1 + 16))(v1, &v14);
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v15 = (JSC::Wasm::CalleeGroup *)v11;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v15, v4, v5, v6, v7, v8, v9, v10);
    }
  }
}

double std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::jsCallingConvention(void)::$_0 &&>>()
{
  double result;

  JSC::Wasm::jsCallingConvention(void)::staticJSCallingConvention = 0u;
  unk_1EE3430A8 = 0u;
  *(_QWORD *)&result = 0xFF003FF80000;
  xmmword_1EE3430B8 = xmmword_19915A0C0;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t result;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v0 = WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v0 = 0x706050403020100;
  result = WTF::fastMalloc((WTF *)8);
  *(_QWORD *)result = 0x706050403020100;
  v2 = *(_BYTE *)v0 & 0x7F;
  if (v2 >= 0x40
    || (v3 = *(_BYTE *)(v0 + 1) & 0x7F, v3 > 0x3F)
    || (v4 = *(_BYTE *)(v0 + 2) & 0x7F, v4 > 0x3F)
    || (v5 = *(_BYTE *)(v0 + 3) & 0x7F, v5 > 0x3F)
    || (v6 = *(_BYTE *)(v0 + 4) & 0x7F, v6 > 0x3F)
    || (v7 = *(_BYTE *)(v0 + 5) & 0x7F, v7 > 0x3F)
    || (v8 = *(_BYTE *)(v0 + 6) & 0x7F, v8 > 0x3F)
    || (v9 = *(_BYTE *)(v0 + 7) & 0x7F, v9 > 0x3F))
  {
    __break(1u);
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v10 = (unsigned __int16)~((1 << v3) | (1 << v2) | (1 << v4) | (1 << v5) | (1 << v6) | (1 << v7) | (1 << v8) | (1 << v9));
    if (((unsigned __int16)((1 << v3) | (1 << v2) | (1 << v4) | (1 << v5) | (1 << v6) | (1 << v7) | (1 << v8)) | (unsigned __int16)(1 << v9)) != -1)
    {
      v11 = result;
      v12 = 0;
      v13 = 0;
      v14 = __clz(__rbit64(v10));
      do
      {
        v17 = v14;
        if (v13 == (_DWORD)v19)
        {
          result = WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v18, (WTF *)(v13 + 1), (unint64_t)&v17);
          v13 = HIDWORD(v19);
          v12 = v18;
          *(_BYTE *)(v18 + HIDWORD(v19)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(v12 + v13) = v14;
        }
        HIDWORD(v19) = ++v13;
        if (v14 > 0x3E)
          break;
        v15 = __clz(__rbit64(v10 >> (v14 + 1)));
        v16 = v15 + v14 + 1;
        if (v16 >= 0x40)
          v14 = 64;
        else
          v14 += v15 + 1;
      }
      while (v16 <= 0x3F);
      if (v13 >= 2)
      {
        JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention = v0;
        qword_1EE3430D8 = 0x800000008;
        qword_1EE3430E0 = v11;
        qword_1EE3430E8 = 0x800000008;
        qword_1EE3430F0 = v12;
        dword_1EE3430F8 = v19;
        dword_1EE3430FC = v13;
        xmmword_1EE343100 = xmmword_19915A0C0;
        return result;
      }
    }
  }
  result = 87;
  __break(0xC471u);
  return result;
}

__n128 WTF::Vector<JSC::Wasm::CallsiteCollection::Callsite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::CallsiteCollection::Callsite>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::DFG::DesiredTransition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v3;
  v4[1].n128_u64[0] = v3[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void JSC::Wasm::computePCToCodeOriginMap(JSC::Wasm *this, JSC::Wasm::CompilationContext *a2, JSC::LinkBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  unint64_t v69[3];
  _DWORD *v70;

  v10 = *((_QWORD *)this + 3);
  if (v10 && *(_BYTE *)(v10 + 210))
  {
    v67 = *(WTF **)(v10 + 184);
    v12 = *(_QWORD *)(v10 + 192);
    *(_QWORD *)(v10 + 184) = 0;
    *(_QWORD *)(v10 + 192) = 0;
    v68 = v12;
    JSC::PCToCodeOriginMapBuilder::PCToCodeOriginMapBuilder((uint64_t)v69, 0, (uint64_t)&v67, a4, a5, a6, a7, a8);
    v13 = (_DWORD *)WTF::fastMalloc((WTF *)0x38);
    *v13 = 1;
    JSC::PCToCodeOriginMap::PCToCodeOriginMap((uint64_t)(v13 + 2), v69, (uint64_t)a2, v14, v15, v16, v17, v18);
    v70 = v13;
    WTF::Box<JSC::PCToCodeOriginMap>::operator=((unint64_t *)this + 5, (unint64_t *)&v70, v19, v20, v21, v22, v23, v24);
    WTF::Box<JSC::PCToCodeOriginMap>::~Box((unint64_t *)&v70, v25, v26, v27, v28, v29, v30, v31);
    JSC::PCToCodeOriginMapBuilder::~PCToCodeOriginMapBuilder((JSC::PCToCodeOriginMapBuilder *)v69, v32, v33, v34, v35, v36, v37, v38);
    v46 = v67;
    if (v67)
    {
      v67 = 0;
      LODWORD(v68) = 0;
      WTF::fastFree((unint64_t)v46, v39, v40, v41, v42, v43, v44, v45);
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 6);
    if (v11)
    {
      v47 = (_DWORD *)(v11 + 8);
      v48 = (_DWORD *)WTF::fastMalloc((WTF *)0x38);
      *v48 = 1;
      JSC::PCToCodeOriginMap::PCToCodeOriginMap((uint64_t)(v48 + 2), v47, (uint64_t)a2, v49, v50, v51, v52, v53);
      v69[0] = (unint64_t)v48;
      WTF::Box<JSC::PCToCodeOriginMap>::operator=((unint64_t *)this + 5, v69, v54, v55, v56, v57, v58, v59);
      WTF::Box<JSC::PCToCodeOriginMap>::~Box(v69, v60, v61, v62, v63, v64, v65, v66);
    }
  }
}

unint64_t *WTF::Box<JSC::PCToCodeOriginMap>::operator=(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  unint64_t v15;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 24);
      if (v14)
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_QWORD *)(v10 + 32);
      if (v15)
        WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void JSC::Wasm::parseExtendedConstExpr(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t **v14;
  uint64_t v15;
  const JSC::Wasm::Type *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unsigned __int8 *v22;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  const JSC::Wasm::Type *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  JSC::Wasm::TypeDefinition *v36;
  unsigned int v37;
  unsigned int v38;
  WTF *v39;
  WTF *v41;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  WTF::BitVector *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned __int8 **v66;
  unsigned __int8 *v67;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unsigned int *v79;
  WTF *v80;
  unint64_t CachedUnrolling;
  const JSC::Wasm::TypeDefinition *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  uint64_t v89;
  _BYTE v90[256];
  WTF *v91;
  int v92;
  uint64_t v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  char v98;
  int v99;
  int v100;
  unint64_t ***v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD v104[98];
  _QWORD v105[3170];
  uint64_t v106;
  JSC::Wasm::TypeDefinition *v107;
  uint64_t v108;
  __int128 v109;
  unint64_t v110;
  char v111;
  __int128 v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 **v120;
  char v121;
  unsigned int *v122;
  uint64_t v123;
  char v124;
  uint64_t **v125;
  uint64_t *v126[2];
  __int128 v127;
  uint64_t v128;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = v9;
  v128 = *MEMORY[0x1E0C80C00];
  if (!byte_1ECF4C7B6)
  {
    __break(0xC471u);
    JUMPOUT(0x198C82B28);
  }
  v11 = v6;
  v12 = v3;
  v13 = v2;
  v14 = v5;
  v114 = 0;
  v113 = 0;
  v115 = v4;
  v116 = 1;
  v117 = 0;
  v118 = 0;
  v119 = v6;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  *(_QWORD *)&v127 = v7;
  *((_QWORD *)&v127 + 1) = v8;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v91, &v127, 1uLL);
  v88 = (WTF *)v90;
  v89 = 16;
  v20 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v20 != -1)
  {
    v94 = (unint64_t *)&v125;
    v126[0] = (uint64_t *)&v94;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v126, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v21 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v22 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v22))
  {
    goto LABEL_8;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v22);
LABEL_8:
  v126[0] = (uint64_t *)&v91;
  v126[1] = (uint64_t *)&v88;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v21, v126, (uint64_t)v126, v15, v16, v17, v18, v19, (uint64_t)&v94);
  v32 = *v94;
  if (*v94)
  {
    do
      v33 = __ldaxr((unsigned int *)v32);
    while (__stlxr(v33 + 1, (unsigned int *)v32));
  }
  v34 = __ldxr(v22);
  if (v34 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v22))
LABEL_14:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v22, 0, v25, v26, (uint64_t)v27, v28, v29, v30);
  v94 = 0;
  v95 = v13;
  v96 = v12;
  v35 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v35 != -1)
  {
    v126[0] = (uint64_t *)&v124;
    v125 = v126;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v125, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v97 = JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v98 = 0;
  v100 = 0;
  v99 = 0;
  v101 = (unint64_t ***)&v113;
  v102 = v104;
  v103 = 16;
  v104[96] = v105;
  v104[97] = 16;
  v105[3168] = &v106;
  v105[3169] = 16;
  v36 = (JSC::Wasm::TypeDefinition *)v32;
  if (*(_DWORD *)(v32 + 32) == 4)
  {
    v79 = *(unsigned int **)(v32 + 8);
    v80 = *(WTF **)v79;
    v36 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v79 + 8) + 8 * v79[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v36))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v32, (unint64_t)v24, v25, v26, (uint64_t)v27, v28, v29, v30);
      if ((_BYTE)v24)
      {
        v36 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v36 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v36, v80, v25, v26, v27, v28, v29, v30);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v32, v36, v82, v83, v84, v85, v86, v87);
      }
    }
  }
  if (*((_DWORD *)v36 + 8) == 5)
    v36 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v36 + 1);
  v107 = v36;
  v108 = v11;
  v109 = 0u;
  v111 = 0;
  v110 = 0x8000000000000000;
  v112 = 0u;
  *v101 = &v94;
  do
  {
    v37 = __ldaxr((unsigned int *)v32);
    v38 = v37 - 1;
  }
  while (__stlxr(v38, (unsigned int *)v32));
  if (!v38)
  {
    atomic_store(1u, (unsigned int *)v32);
    WTF::fastFree(v32, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
  }
  v39 = v88;
  if (v90 != (_BYTE *)v88 && v88 != 0)
  {
    v88 = 0;
    LODWORD(v89) = 0;
    WTF::fastFree((unint64_t)v39, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
  }
  v41 = v91;
  if (&v93 != (uint64_t *)v91 && v91 != 0)
  {
    v91 = 0;
    v92 = 0;
    WTF::fastFree((unint64_t)v41, v24, v25, v26, (uint64_t)v27, v28, v29, v30);
  }
  if (*((_DWORD *)v107 + 8))
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("type signature was not a function signature", (unint64_t *)&v94, 44, &v91, v31);
    goto LABEL_67;
  }
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseBody((uint64_t)&v91, &v94, v25, v26, (uint64_t)v27, v28, v29, v30);
  if ((_BYTE)v92)
  {
LABEL_67:
    *(_QWORD *)v10 = v91;
    v57 = 1;
    goto LABEL_48;
  }
  *v14 = v94;
  if (HIDWORD(v123))
  {
    v50 = v122;
    v51 = (WTF::BitVector *)(v11 + 304);
    v52 = 4 * HIDWORD(v123);
    do
    {
      v53 = *(_QWORD *)v51;
      if ((*(_QWORD *)v51 & 0x8000000000000000) != 0)
        v54 = 63;
      else
        v54 = *(_QWORD *)(2 * v53);
      v55 = *v50;
      if (v54 <= v55)
      {
        WTF::BitVector::resizeOutOfLine(v51, v55 + 1, 0);
        v53 = *(_QWORD *)v51;
      }
      if (v53 >= 0)
        v56 = 2 * v53 + 8;
      else
        v56 = (uint64_t)v51;
      *(_QWORD *)(v56 + ((v55 >> 3) & 0x1FFFFFF8)) |= 1 << v55;
      ++v50;
      v52 -= 4;
    }
    while (v52);
  }
  v57 = 0;
  *(_BYTE *)v10 = 0;
LABEL_48:
  *(_BYTE *)(v10 + 8) = v57;
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::~FunctionParser((uint64_t)&v94, v43, v44, v45, v46, v47, v48, v49);
  v65 = (unint64_t)v122;
  if (v122)
  {
    v122 = 0;
    LODWORD(v123) = 0;
    WTF::fastFree(v65, v58, v59, v60, v61, v62, v63, v64);
  }
  v66 = v120;
  v120 = 0;
  if (v66)
  {
    v67 = *v66;
    if (__ldaxr(*v66))
    {
      __clrex();
    }
    else if (!__stxr(1u, v67))
    {
      goto LABEL_55;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v67);
LABEL_55:
    v69 = *((_QWORD *)v67 + 1);
    v70 = v69 - 1;
    *((_QWORD *)v67 + 1) = v69 - 1;
    if (v69 == 1)
    {
      v74 = *((_QWORD *)v67 + 2);
      v72 = *((_QWORD *)v67 + 3);
      *((_QWORD *)v67 + 3) = 0;
      v71 = v74 == 0;
    }
    else
    {
      v71 = 0;
      v72 = 0;
    }
    v73 = __ldxr(v67);
    if (v73 == 1)
    {
      if (!__stlxr(0, v67))
      {
        if (v70)
          goto LABEL_60;
LABEL_64:
        v94 = (unint64_t *)v67;
        v95 = v72;
        LOBYTE(v96) = v71;
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v94, v58, v59, v60, v61, v62, v63, v64);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v67, 0, v59, v60, v61, v62, v63, v64);
    if (v70)
      goto LABEL_60;
    goto LABEL_64;
  }
LABEL_60:
  if (v118)
  {
    v75 = (uint64_t *)(v118 - 16);
    v76 = *(_QWORD *)(((v118 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v77 = *(uint64_t **)(v118 - 8);
    if (v77)
    {
      v78 = *v75;
      *v77 = *v75;
      *(_QWORD *)(v78 + 8) = v77;
      *v75 = 0;
      v75[1] = 0;
    }
    *v75 = *(_QWORD *)(v76 + 40);
    *(_QWORD *)(v76 + 40) = v75;
  }
}

void JSC::Wasm::evaluateExtendedConstExpr(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 ***v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  int v19;
  unsigned __int8 *v20;
  int v22;
  unsigned __int8 *v23;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const JSC::Wasm::Type *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unsigned __int8 *v39;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  const JSC::Wasm::Type *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  JSC::Wasm::TypeDefinition *v53;
  unsigned int v54;
  unsigned int v55;
  WTF *v56;
  WTF *v58;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned __int8 **v85;
  unsigned __int8 *v86;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned int *v99;
  WTF *v100;
  unint64_t CachedUnrolling;
  _QWORD *v102;
  uint64_t v103;
  const JSC::Wasm::TypeDefinition *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  uint64_t v111;
  _BYTE v112[256];
  WTF *v113;
  int v114;
  uint64_t v115;
  unint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  char v120;
  int v121;
  int v122;
  unint64_t ***v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD v126[98];
  _QWORD v127[3170];
  uint64_t v128;
  JSC::Wasm::TypeDefinition *v129;
  uint64_t v130;
  __int128 v131;
  unint64_t v132;
  char v133;
  __int128 v134;
  uint64_t v135;
  char v136;
  unsigned __int8 v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  unsigned __int8 **v141;
  char v142;
  unint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t **v146;
  uint64_t *v147[2];
  __int128 v148;
  uint64_t v149;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = v10;
  v149 = *MEMORY[0x1E0C80C00];
  if (!byte_1ECF4C7B6)
  {
    __break(0xC471u);
    JUMPOUT(0x198C8320CLL);
  }
  v12 = v6;
  v13 = v5;
  v14 = v4;
  v15 = v2;
  v16 = *v3;
  if (*v3)
  {
    v17 = *v16;
    if (__ldaxr(*v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_7;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
LABEL_7:
    ++*((_QWORD *)v17 + 1);
    v19 = __ldxr(v17);
    if (v19 == 1)
    {
      if (!__stlxr(0, v17))
      {
LABEL_12:
        v136 = 1;
        v137 = 1;
        v135 = 0;
        v138 = 0;
        v139 = 0;
        v140 = v14;
        v20 = *v16;
        if (__ldaxr(*v16))
        {
          __clrex();
        }
        else if (!__stxr(1u, v20))
        {
          goto LABEL_16;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v20);
LABEL_16:
        ++*((_QWORD *)v20 + 1);
        v22 = __ldxr(v20);
        if (v22 == 1)
        {
          if (!__stlxr(0, v20))
          {
LABEL_21:
            v142 = 0;
            v143 = 0;
            v144 = 0;
            v141 = v16;
            v23 = *v16;
            if (__ldaxr(*v16))
            {
              __clrex();
            }
            else if (!__stxr(1u, v23))
            {
              goto LABEL_25;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v23);
LABEL_25:
            v25 = *((_QWORD *)v23 + 1);
            v26 = v25 - 1;
            *((_QWORD *)v23 + 1) = v25 - 1;
            if (v25 == 1)
            {
              v93 = *((_QWORD *)v23 + 2);
              v28 = *((_QWORD *)v23 + 3);
              *((_QWORD *)v23 + 3) = 0;
              v27 = v93 == 0;
            }
            else
            {
              v27 = 0;
              v28 = 0;
            }
            v29 = __ldxr(v23);
            if (v29 == 1)
            {
              if (!__stlxr(0, v23))
              {
                if (v26)
                  goto LABEL_34;
LABEL_33:
                v116 = (unint64_t *)v23;
                v117 = v28;
                LOBYTE(v118) = v27;
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v116, v3, v4, v5, v6, v7, v8, v9);
                goto LABEL_34;
              }
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v23, 0, v4, v5, v6, v7, v8, v9);
            if (v26)
              goto LABEL_34;
            goto LABEL_33;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v20, 0, v4, v5, v6, v7, v8, v9);
        goto LABEL_21;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v17, 0, v4, v5, v6, v7, v8, v9);
    goto LABEL_12;
  }
  v136 = 1;
  v137 = 1;
  v135 = 0;
  v138 = 0;
  v139 = 0;
  v140 = v4;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v141 = 0;
LABEL_34:
  v30 = *(_QWORD *)v15;
  v31 = *(unsigned int *)(v15 + 12);
  *(_QWORD *)&v148 = v13;
  *((_QWORD *)&v148 + 1) = v12;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v113, &v148, 1uLL);
  v110 = (WTF *)v112;
  v111 = 16;
  v37 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v37 != -1)
  {
    v116 = (unint64_t *)&v146;
    v147[0] = (uint64_t *)&v116;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v147, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v38 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v39 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v39))
  {
    goto LABEL_40;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v39);
LABEL_40:
  v147[0] = (uint64_t *)&v113;
  v147[1] = (uint64_t *)&v110;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v38, v147, (uint64_t)v147, v32, v33, v34, v35, v36, (uint64_t)&v116);
  v49 = *v116;
  if (*v116)
  {
    do
      v50 = __ldaxr((unsigned int *)v49);
    while (__stlxr(v50 + 1, (unsigned int *)v49));
  }
  v51 = __ldxr(v39);
  if (v51 != 1)
  {
    __clrex();
    goto LABEL_46;
  }
  if (__stlxr(0, v39))
LABEL_46:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v39, 0, v42, v43, (uint64_t)v44, v45, v46, v47);
  v116 = 0;
  v117 = v30;
  v118 = v31;
  v52 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v52 != -1)
  {
    v147[0] = (uint64_t *)&v145;
    v146 = v147;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v146, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v119 = JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v120 = 0;
  v122 = 0;
  v121 = 0;
  v123 = (unint64_t ***)&v135;
  v124 = v126;
  v125 = 16;
  v126[96] = v127;
  v126[97] = 16;
  v127[3168] = &v128;
  v127[3169] = 16;
  v53 = (JSC::Wasm::TypeDefinition *)v49;
  if (*(_DWORD *)(v49 + 32) == 4)
  {
    v99 = *(unsigned int **)(v49 + 8);
    v100 = *(WTF **)v99;
    v53 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v99 + 8) + 8 * v99[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v53))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v49, (unint64_t)v41, v42, v43, (uint64_t)v44, v45, v46, v47);
      if ((_BYTE)v41)
      {
        v53 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v53 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v53, v100, v42, v43, v44, v45, v46, v47);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v49, v53, v104, v105, v106, v107, v108, v109);
      }
    }
  }
  if (*((_DWORD *)v53 + 8) == 5)
    v53 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v53 + 1);
  v129 = v53;
  v130 = v14;
  v131 = 0u;
  v133 = 0;
  v132 = 0x8000000000000000;
  v134 = 0u;
  *v123 = &v116;
  do
  {
    v54 = __ldaxr((unsigned int *)v49);
    v55 = v54 - 1;
  }
  while (__stlxr(v55, (unsigned int *)v49));
  if (!v55)
  {
    atomic_store(1u, (unsigned int *)v49);
    WTF::fastFree(v49, v41, v42, v43, (uint64_t)v44, v45, v46, v47);
  }
  v56 = v110;
  if (v112 != (_BYTE *)v110 && v110 != 0)
  {
    v110 = 0;
    LODWORD(v111) = 0;
    WTF::fastFree((unint64_t)v56, v41, v42, v43, (uint64_t)v44, v45, v46, v47);
  }
  v58 = v113;
  if (&v115 != (uint64_t *)v113 && v113 != 0)
  {
    v113 = 0;
    v114 = 0;
    WTF::fastFree((unint64_t)v58, v41, v42, v43, (uint64_t)v44, v45, v46, v47);
  }
  if (*((_DWORD *)v129 + 8))
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("type signature was not a function signature", (unint64_t *)&v116, 44, &v113, v48);
    goto LABEL_103;
  }
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseBody((uint64_t)&v113, &v116, v42, v43, (uint64_t)v44, v45, v46, v47);
  if ((_BYTE)v114)
  {
LABEL_103:
    *(_QWORD *)v11 = v113;
    *(_DWORD *)(v11 + 8) = 1;
    goto LABEL_83;
  }
  v67 = v137;
  v68 = v138;
  if (v139)
  {
    v69 = *(_QWORD *)(((unint64_t)(v139 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v70 = *(_QWORD **)(v69 + 40);
    if (!v70)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v139 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)v60, v61, v62, v63, v64, v65, v66);
      v70 = *(_QWORD **)(v69 + 40);
    }
    *(_QWORD *)(v69 + 40) = *v70;
    v70[2] = 0;
    v71 = v70 + 2;
    *v70 = 0;
    v70[1] = 0;
    v72 = v139;
    if (v139)
    {
      v72 = (_QWORD *)*v139;
      if (*v139)
      {
        v102 = *(_QWORD **)(((unint64_t)(v71 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v103 = v102[3];
        v102 += 3;
        *(v71 - 2) = v103;
        *(v71 - 1) = v102;
        *v102 = v71 - 2;
        *(_QWORD *)(v103 + 8) = v71 - 2;
      }
    }
    *v71 = v72;
    if (v67 == 1)
      v72 = v68;
    *(_QWORD *)v11 = v72;
    *(_DWORD *)(v11 + 8) = 0;
    v73 = v71 - 2;
    v74 = *(_QWORD *)(((unint64_t)(v71 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v75 = (uint64_t *)*(v71 - 1);
    if (v75)
    {
      v76 = *v73;
      *v75 = *v73;
      *(_QWORD *)(v76 + 8) = v75;
      *v73 = 0;
      v73[1] = 0;
    }
    *v73 = *(_QWORD *)(v74 + 40);
    *(_QWORD *)(v74 + 40) = v73;
  }
  else
  {
    if (v137 == 1)
      *(_QWORD *)v11 = v138;
    else
      *(_QWORD *)v11 = 0;
    *(_DWORD *)(v11 + 8) = 0;
  }
LABEL_83:
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::~FunctionParser((uint64_t)&v116, v60, v61, v62, v63, v64, v65, v66);
  v84 = v143;
  if (v143)
  {
    v143 = 0;
    LODWORD(v144) = 0;
    WTF::fastFree(v84, v77, v78, v79, v80, v81, v82, v83);
  }
  v85 = v141;
  v141 = 0;
  if (v85)
  {
    v86 = *v85;
    if (__ldaxr(*v85))
    {
      __clrex();
    }
    else if (!__stxr(1u, v86))
    {
      goto LABEL_90;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v86);
LABEL_90:
    v88 = *((_QWORD *)v86 + 1);
    v89 = v88 - 1;
    *((_QWORD *)v86 + 1) = v88 - 1;
    if (v88 == 1)
    {
      v94 = *((_QWORD *)v86 + 2);
      v91 = *((_QWORD *)v86 + 3);
      *((_QWORD *)v86 + 3) = 0;
      v90 = v94 == 0;
    }
    else
    {
      v90 = 0;
      v91 = 0;
    }
    v92 = __ldxr(v86);
    if (v92 == 1)
    {
      if (!__stlxr(0, v86))
      {
        if (v89)
          goto LABEL_95;
LABEL_99:
        v116 = (unint64_t *)v86;
        v117 = v91;
        LOBYTE(v118) = v90;
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v116, v77, v78, v79, v80, v81, v82, v83);
        goto LABEL_95;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v86, 0, v78, v79, v80, v81, v82, v83);
    if (v89)
      goto LABEL_95;
    goto LABEL_99;
  }
LABEL_95:
  if (v139)
  {
    v95 = v139 - 2;
    v96 = *(_QWORD *)(((unint64_t)(v139 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v97 = (uint64_t *)*(v139 - 1);
    if (v97)
    {
      v98 = *v95;
      *v97 = *v95;
      *(_QWORD *)(v98 + 8) = v97;
      *v95 = 0;
      v95[1] = 0;
    }
    *v95 = *(_QWORD *)(v96 + 40);
    *(_QWORD *)(v96 + 40) = v95;
    v139 = 0;
  }
}

uint64_t JSC::Wasm::Context::scratchBufferForSize(JSC::Wasm::Context *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  size_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  WTF *v21;

  if (!a2)
    return 0;
  v10 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 24);
    goto LABEL_5;
  }
  if (__stxr(1u, v10))
    goto LABEL_4;
LABEL_5:
  if (*((_QWORD *)this + 2) < a2)
  {
    *((_QWORD *)this + 2) = 2 * a2;
    if (((a2 >> 60) & 7) != 0)
    {
      __break(0xC471u);
LABEL_23:
      JUMPOUT(0x198C83490);
    }
    v16 = 16 * a2;
    v17 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
    bzero(v17, v16);
    v21 = (WTF *)v17;
    v18 = *((unsigned int *)this + 3);
    if ((_DWORD)v18 == *((_DWORD *)this + 2))
    {
      WTF::Vector<std::unique_ptr<unsigned long long [],WTF::UniqueArrayFree<unsigned long long []>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<unsigned long long [],WTF::UniqueArrayFree<unsigned long long []>>>((uint64_t)this, (unint64_t)&v21);
      v20 = v21;
      v21 = 0;
      if (v20)
        WTF::fastFree((unint64_t)v20, v19, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)this + 8 * v18) = v17;
      *((_DWORD *)this + 3) = v18 + 1;
    }
  }
  v12 = *((unsigned int *)this + 3);
  if (!(_DWORD)v12)
  {
    __break(0xC471u);
    goto LABEL_23;
  }
  v13 = *(_QWORD *)(*(_QWORD *)this + 8 * v12 - 8);
  v14 = __ldxr(v10);
  if (v14 == 1)
  {
    if (!__stlxr(0, v10))
      return v13;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v13;
}

uint64_t JSC::Wasm::EntryPlan::EntryPlan(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  v8 = *a5;
  *a5 = 0;
  v9 = *(_QWORD **)(a1 + 24);
  *v9 = a2;
  v9[1] = v8;
  *(_QWORD *)(a1 + 32) = 0x100000001;
  *(_QWORD *)(a1 + 72) = &unk_1E35B56A0;
  *(_QWORD *)a1 = off_1E35B5640;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v10 = *(unsigned int **)(a1 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *(_QWORD *)(a1 + 152) = v10;
  *(_QWORD *)(a1 + 160) = a1 + 72;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  CC_SHA1_Init((CC_SHA1_CTX *)(a1 + 232));
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  if ((_QWORD)xmmword_1ECF4C290)
    WTF::dataLog<char [88],char [2]>("Wasm streaming parser created, but we can only dump source in debug builds.", "\n");
  *(_WORD *)(a1 + 352) = 1;
  *(_BYTE *)(a1 + 354) = 0;
  *(_BYTE *)(a1 + 355) = a4;
  *(_BYTE *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  return a1;
}

{
  uint64_t v8;
  uint64_t v9;

  v8 = JSC::Wasm::Plan::Plan(a1, a2, a5);
  *(_QWORD *)v8 = off_1E35B5640;
  *(_QWORD *)(v8 + 72) = &unk_1E35B56A0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(v8 + 80) = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(v8 + 88) = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(v8 + 92) = v9;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  JSC::Wasm::StreamingParser::StreamingParser((JSC::Wasm::StreamingParser *)(v8 + 152), *(JSC::Wasm::ModuleInformation **)(a1 + 16), (JSC::Wasm::StreamingParserClient *)(v8 + 72));
  *(_WORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 354) = 0;
  *(_BYTE *)(a1 + 355) = a4;
  *(_BYTE *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  return a1;
}

uint64_t JSC::Wasm::EntryPlan::parseAndValidateModule(uint64_t a1, const void *a2, unint64_t a3, double a4, float a5)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float v16;
  unsigned __int8 *v17;
  uint64_t v19;
  int v20;
  uint64_t result;
  WTF::MonotonicTime *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;

  if (*(_BYTE *)(a1 + 352))
    return 1;
  v8 = 0.0;
  if (BYTE6(qword_1ECF4C332))
  {
    a4 = WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    v8 = a4;
  }
  JSC::Wasm::StreamingParser::addBytes(a1 + 152, a2, a3, 0, a4, a5);
  v17 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
    goto LABEL_7;
  }
  if (__stxr(1u, v17))
    goto LABEL_6;
LABEL_7:
  v19 = *(_QWORD *)(a1 + 56);
  v20 = __ldxr(v17);
  if (v20 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v9, v10, v11, v12, v13, v14);
LABEL_9:
  if (v19)
    return 0;
  v22 = (WTF::MonotonicTime *)JSC::Wasm::StreamingParser::finalize((JSC::Wasm::StreamingParser *)(a1 + 152), v15, v16);
  if ((_DWORD)v22 != 7)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_23;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
LABEL_23:
    WTF::String::isolatedCopy((_DWORD *)(a1 + 184), (uint64_t *)&v46);
    JSC::Wasm::Plan::fail(a1, (WTF::AtomStringImpl *)&v46, 0, v24, v25, v26, v27, v28);
    v36 = v46;
    *(double *)&v46 = 0.0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
    v37 = __ldxr(v17);
    if (v37 == 1)
    {
      if (!__stlxr(0, v17))
        return 0;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v30, v31, v32, v33, v34, v35);
    return 0;
  }
  if (BYTE6(qword_1ECF4C332))
  {
    *(double *)&v46 = (WTF::MonotonicTime::now(v22) - v8) * 1000.0 * 1000.0;
    WTF::dataLog<char [6],double,char [23],char [2]>("Took ", (double *)&v46, " us to validate module", "\n");
  }
  result = 1;
  *(_BYTE *)(a1 + 352) = 1;
  return result;
}

uint64_t JSC::Wasm::EntryPlan::prepare(JSC::Wasm::EntryPlan *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int *v30;
  int v31;
  int *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int v41[7];
  int v42;

  v2 = *((_QWORD *)this + 2);
  *((_DWORD *)this + 91) = *(_DWORD *)(v2 + 132);
  result = JSC::Wasm::EntryPlan::tryReserveCapacity<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>((uint64_t)this, (uint64_t)this + 96, *(unsigned int *)(v2 + 36), (uint64_t)" WebAssembly to WebAssembly stubs", 34);
  if ((_DWORD)result)
  {
    result = JSC::Wasm::EntryPlan::tryReserveCapacity<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>((uint64_t)this, (uint64_t)this + 112, *(unsigned int *)(*((_QWORD *)this + 2) + 36), (uint64_t)" WebAssembly to JavaScript stubs", 33);
    if ((_DWORD)result)
    {
      result = JSC::Wasm::EntryPlan::tryReserveCapacity<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, (uint64_t)this + 136, *(unsigned int *)(v2 + 132));
      if ((_DWORD)result)
      {
        WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)this + 136, *(unsigned int *)(v2 + 132), v4, v5, v6, v7, v8, v9);
        v10 = *((_QWORD *)this + 2);
        v11 = *(unsigned int *)(v10 + 36);
        v12 = *(unsigned int *)(v10 + 148);
        if ((_DWORD)v12)
        {
          v13 = 24 * v12;
          v14 = (unsigned int *)(*(_QWORD *)(v10 + 136) + 20);
          do
          {
            v16 = *v14;
            v14 += 6;
            v15 = v16;
            if (v16 >= v11)
            {
              v42 = v15 - v11;
              WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(v41, (uint64_t *)this + 16, &v42);
            }
            v13 -= 24;
          }
          while (v13);
          v10 = *((_QWORD *)this + 2);
        }
        v17 = *(_DWORD *)(v10 + 188);
        if (v17)
        {
          v18 = *(_QWORD *)(v10 + 176);
          v19 = v18 + 80 * v17;
          v20 = (uint64_t *)((char *)this + 128);
          while (1)
          {
            v21 = *(unsigned int *)(v18 + 60);
            if ((_DWORD)v21)
              break;
LABEL_42:
            v18 += 80;
            if (v18 == v19)
            {
              v10 = *((_QWORD *)this + 2);
              goto LABEL_44;
            }
          }
          v22 = 0;
          while (1)
          {
            if (v22 >= v21)
            {
              __break(0xC471u);
              JUMPOUT(0x198C83B18);
            }
            if (*(_BYTE *)(*(_QWORD *)(v18 + 48) + v22) != 1)
              goto LABEL_34;
            if (v22 >= *(unsigned int *)(v18 + 76))
            {
              __break(0xC471u);
              JUMPOUT(0x198C83B20);
            }
            v23 = *(_QWORD *)(*(_QWORD *)(v18 + 64) + 8 * v22);
            if (v23 < v11)
              goto LABEL_34;
            v24 = *v20;
            if (*v20
              || (WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand((uint64_t *)this + 16, 0), (v24 = *v20) != 0))
            {
              v25 = *(_DWORD *)(v24 - 8);
            }
            else
            {
              v25 = 0;
            }
            v26 = v23 - v11;
            v27 = 9 * ((v26 + ~(v26 << 15)) ^ ((v26 + ~(v26 << 15)) >> 10));
            v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
            v29 = v25 & (v28 ^ HIWORD(v28));
            v30 = (int *)(v24 + 4 * v29);
            v31 = *v30;
            if (*v30 != -1)
            {
              v32 = 0;
              v33 = 1;
              while (v31 != v26)
              {
                if (v31 == -2)
                  v32 = v30;
                v29 = (v29 + v33) & v25;
                v30 = (int *)(v24 + 4 * v29);
                v31 = *v30;
                ++v33;
                if (*v30 == -1)
                {
                  if (v32)
                  {
                    *v32 = -1;
                    --*(_DWORD *)(*v20 - 16);
                    v30 = v32;
                  }
                  goto LABEL_28;
                }
              }
              goto LABEL_34;
            }
LABEL_28:
            *v30 = v26;
            v34 = *v20;
            if (*v20)
              v35 = *(_DWORD *)(v34 - 12) + 1;
            else
              v35 = 1;
            *(_DWORD *)(v34 - 12) = v35;
            v36 = *v20;
            if (*v20)
              v37 = *(_DWORD *)(v36 - 12);
            else
              v37 = 0;
            v38 = (*(_DWORD *)(v36 - 16) + v37);
            v39 = *(unsigned int *)(v36 - 4);
            if (v39 > 0x400)
            {
              if (v39 <= 2 * v38)
LABEL_37:
                WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand((uint64_t *)this + 16, v30);
            }
            else if (3 * v39 <= 4 * v38)
            {
              goto LABEL_37;
            }
LABEL_34:
            ++v22;
            v21 = *(unsigned int *)(v18 + 60);
            if (v22 >= v21)
              goto LABEL_42;
          }
        }
LABEL_44:
        if (*(_BYTE *)(v10 + 156))
        {
          v40 = *(_DWORD *)(v10 + 152);
          if (v40 >= v11)
          {
            v42 = v40 - v11;
            WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(v41, (uint64_t *)this + 16, &v42);
          }
        }
        result = (*(uint64_t (**)(JSC::Wasm::EntryPlan *))(*(_QWORD *)this + 56))(this);
        if ((_DWORD)result)
          *((_BYTE *)this + 352) = 2;
      }
    }
  }
  return result;
}

uint64_t JSC::Wasm::EntryPlan::tryReserveCapacity<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v34;
  int v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  const char *v59;
  int v60;

  if (*(unsigned int *)(a2 + 8) >= a3)
    return 1;
  if (!(a3 >> 28))
  {
    v10 = *(_QWORD *)a2;
    v11 = *(unsigned int *)(a2 + 12);
    WTF::tryFastMalloc((WTF *)(16 * a3), &v59);
    v19 = (char *)v59;
    if (v59)
    {
      *(_DWORD *)(a2 + 8) = a3;
      *(_QWORD *)a2 = v19;
      if ((_DWORD)v11)
      {
        v20 = (_QWORD *)v10;
        do
        {
          *(_QWORD *)v19 = *v20;
          v21 = v20[1];
          v20[1] = 0;
          *((_QWORD *)v19 + 1) = v21;
          v22 = (unsigned int *)v20[1];
          v20[1] = 0;
          if (v22)
          {
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v22);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v22, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
              WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
            }
          }
          v19 += 16;
          v20 += 2;
        }
        while (v20 != (_QWORD *)(v10 + 16 * v11));
      }
      if (v10)
      {
        if (*(_QWORD *)a2 == v10)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree(v10, v12, v13, v14, v15, v16, v17, v18);
      }
      return 1;
    }
  }
  v34 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v34))
  {
    goto LABEL_20;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
LABEL_20:
  v58 = a3;
  v59 = "Failed allocating enough space for ";
  v60 = 35;
  if (a5)
  {
    v36 = a5 - 1;
    v56 = a4;
    if ((unint64_t)(a5 - 1) >> 31)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
  }
  else
  {
    v36 = 0;
    v56 = a4;
  }
  v57 = v36;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v59, &v58, (uint64_t)&v56, (int **)&v55);
  v44 = v55;
  if (!v55)
  {
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x198C83D4CLL);
  }
  v45 = *(_QWORD *)(a1 + 56);
  v55 = 0;
  if (v45
    || (*(_QWORD *)(a1 + 56) = v44,
        *(_BYTE *)(a1 + 64) = 0,
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1),
        v44 = v55,
        v55 = 0,
        v44))
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  v46 = __ldxr(v34);
  if (v46 == 1)
  {
    if (!__stlxr(0, v34))
      return 0;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v38, v39, v40, v41, v42, v43);
  return 0;
}

uint64_t JSC::Wasm::EntryPlan::tryReserveCapacity<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v5 = WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(a2, a3);
  if ((v5 & 1) != 0)
    return v5;
  v7 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
LABEL_6:
  WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>((uint64_t)"Failed allocating enough space for ", 36, a3, (uint64_t)" unlinked WebAssembly to WebAssembly calls", 43, (int **)&v31);
  JSC::Wasm::Plan::fail(a1, (WTF::AtomStringImpl *)&v31, 0, v9, v10, v11, v12, v13);
  v21 = v31;
  v31 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  v22 = __ldxr(v7);
  if (v22 == 1)
  {
    if (!__stlxr(0, v7))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v15, v16, v17, v18, v19, v20);
  return v5;
}

void WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v10 = *(unsigned int *)(a1 + 12);
  if (v10 >= a2)
  {
    if (v10 != a2)
    {
      v12 = *(_QWORD *)a1 + 16 * a2;
      v13 = 16 * v10 - 16 * a2;
      do
      {
        v14 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          *(_QWORD *)v12 = 0;
          *(_DWORD *)(v12 + 8) = 0;
          WTF::fastFree(v14, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v12 += 16;
        v13 -= 16;
      }
      while (v13);
    }
  }
  else
  {
    if (*(unsigned int *)(a1 + 8) < a2)
      WTF::Vector<WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    if (*(_QWORD *)a1)
    {
      v11 = *(unsigned int *)(a1 + 12);
      if (v11 != a2)
        bzero((void *)(*(_QWORD *)a1 + 16 * v11), (16 * a2 - 16 * v11) & 0xFFFFFFFFFFFFFFF0);
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
}

void JSC::Wasm::EntryPlan::compileFunctions(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  int v49;
  _BYTE v50[8];

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return;
  v50[0] = 0;
  v50[4] = 0;
  if (BYTE2(dword_1ECF4C723))
  {
    v49 = 2503;
    LODWORD(v48) = 2504;
    std::optional<WTF::TraceScope>::emplace[abi:sn180100]<TracePointCode,TracePointCode,void>((uint64_t)v50, (uint64_t)&v49, &v48);
  }
  JSC::Wasm::EntryPlan::ThreadCountHolder::ThreadCountHolder((JSC::Wasm::EntryPlan::ThreadCountHolder *)&v49, (JSC::Wasm::EntryPlan *)a1, v4, v5, v6, v7, v8, v9);
  if (a2 == 1 && !qword_1ECF4C6C8)
    goto LABEL_6;
  v17 = 0;
  v18 = (unsigned __int8 *)(a1 + 13);
  while (1)
  {
    if (__ldaxr(v18))
    {
      __clrex();
LABEL_11:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
      goto LABEL_12;
    }
    if (__stxr(1u, v18))
      goto LABEL_11;
LABEL_12:
    v20 = *(_DWORD *)(a1 + 360);
    v21 = *(unsigned int *)(a1 + 364);
    if (v20 < v21)
    {
      v22 = *(unsigned int *)(a1 + 360);
      v23 = *(_QWORD *)(a1 + 16);
      LODWORD(v24) = *(_DWORD *)(v23 + 132);
      if (v24 <= v20)
        v24 = v20;
      else
        v24 = v24;
      v25 = 40 * v20 + 28;
      v26 = *(unsigned int *)(a1 + 360);
      while (v24 != v26)
      {
        v17 += *(unsigned int *)(*(_QWORD *)(v23 + 120) + v25);
        if (v17 >= qword_1ECF4C6C8)
        {
          v27 = v26 + 1;
          goto LABEL_22;
        }
        ++v26;
        v25 += 40;
        if (v21 == v26)
        {
          v27 = *(_DWORD *)(a1 + 364);
LABEL_22:
          *(_DWORD *)(a1 + 360) = v27;
          v28 = *(_BYTE *)(a1 + 353) != 0;
          v29 = *(unsigned __int8 *)(a1 + 354);
          *(_WORD *)(a1 + 353) = 257;
          v30 = v29 != 0;
          goto LABEL_23;
        }
      }
      __break(0xC471u);
      return;
    }
    v28 = 0;
    v30 = 0;
    v27 = 0;
    v22 = 0;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
      *(_BYTE *)(a1 + 352) = 3;
LABEL_23:
    v31 = __ldxr(v18);
    if (v31 != 1)
    {
      __clrex();
LABEL_27:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v11, v12, v13, v14, v15, v16);
      goto LABEL_28;
    }
    if (__stlxr(0, v18))
      goto LABEL_27;
LABEL_28:
    if (v20 >= v21)
      goto LABEL_6;
    if (v22 < v27)
    {
      do
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v22);
        v22 = (v22 + 1);
      }
      while (v27 != (_DWORD)v22);
    }
    if (!v28
      && (JSC::Wasm::EntryPlan::generateWasmToWasmStubs((JSC::Wasm::EntryPlan *)a1, (uint64_t)v10, v11, v12, v13, v14, v15, v16) & 1) == 0|| !v30&& (JSC::Wasm::EntryPlan::generateWasmToJSStubs((JSC::Wasm::EntryPlan *)a1, (uint64_t)v10, v11, v12, v13, v14, v15, v16) & 1) == 0)
    {
      break;
    }
    if (a2 == 1 && v17 >= qword_1ECF4C6C8)
      goto LABEL_6;
  }
  if (__ldaxr(v18))
  {
    __clrex();
    goto LABEL_45;
  }
  if (__stxr(1u, v18))
LABEL_45:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
  WTF::makeString<WTF::ASCIILiteral>("Out of executable memory at stub generation", 44, (int **)&v48);
  JSC::Wasm::Plan::fail(a1, (WTF::AtomStringImpl *)&v48, 0, v33, v34, v35, v36, v37);
  v38 = v48;
  v48 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  v39 = __ldxr(v18);
  if (v39 == 1)
  {
    if (!__stlxr(0, v18))
      goto LABEL_6;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v11, v12, v13, v14, v15, v16);
LABEL_6:
  JSC::Wasm::EntryPlan::ThreadCountHolder::~ThreadCountHolder((JSC::Wasm::EntryPlan::ThreadCountHolder *)&v49, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
  std::optional<WTF::TraceScope>::~optional((uint64_t)v50);
}

uint64_t std::optional<WTF::TraceScope>::emplace[abi:sn180100]<TracePointCode,TracePointCode,void>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*(_BYTE *)(a1 + 4))
  {
    kdebug_trace();
    *(_BYTE *)(a1 + 4) = 0;
  }
  *(_DWORD *)a1 = *a3;
  kdebug_trace();
  *(_BYTE *)(a1 + 4) = 1;
  return a1;
}

uint64_t JSC::Wasm::EntryPlan::generateWasmToWasmStubs(JSC::Wasm::EntryPlan *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Wasm *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  char v41;

  v9 = (_QWORD *)((char *)this + 96);
  WTF::Vector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)this + 96, *(unsigned int *)(*((_QWORD *)this + 2) + 36), a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  if (!*(_DWORD *)(v10 + 20))
    return 1;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    if (*(_BYTE *)(*(_QWORD *)(v10 + 8) + 40 * v11 + 32))
      goto LABEL_17;
    result = JSC::Wasm::wasmToWasm(v12, (uint64_t)&v38);
    v21 = v40;
    if (!v40)
      break;
    v29 = v40;
LABEL_13:
    if (v29 != 0xFFFFFFFFLL)
      ((void (*)(char *, uint64_t *))off_1E35B55F8[v29])(&v41, &v38);
    if (v21)
      return 0;
    v10 = *((_QWORD *)this + 2);
LABEL_17:
    if (++v11 >= (unint64_t)*(unsigned int *)(v10 + 20))
      return 1;
  }
  if (*((_DWORD *)this + 27) > v12)
  {
    v22 = (_QWORD *)(*v9 + 16 * v12);
    *v22 = v38;
    v23 = (unsigned int **)(v22 + 1);
    v24 = v39;
    if (v39)
    {
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
    v26 = *v23;
    *v23 = v24;
    if (v26)
    {
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v26, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
    }
    v12 = (JSC::Wasm *)((_DWORD)v12 + 1);
    v29 = v40;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

_BYTE *WTF::makeString<WTF::ASCIILiteral>@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, int **a3@<X8>)
{
  int *v3;
  size_t v4;
  _DWORD *v5;
  int **v6;
  _BYTE *__src;
  _DWORD *v8;

  if (!a2)
    goto LABEL_2;
  v6 = a3;
  __src = result;
  v4 = a2 - 1;
  if ((unint64_t)(a2 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198C84454);
  }
  if ((_DWORD)a2 == 1)
  {
LABEL_2:
    v3 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    WTF::tryFastCompactMalloc((WTF *)(a2 + 19), &v8);
    v5 = v8;
    if (!v8)
    {
      *v6 = 0;
      __break(0xC471u);
      JUMPOUT(0x198C844B8);
    }
    result = v8 + 5;
    *v8 = 2;
    v5[1] = v4;
    *((_QWORD *)v5 + 1) = v5 + 5;
    v5[4] = 4;
    if ((_DWORD)v4 == 1)
      *result = *__src;
    else
      result = memcpy(result, __src, v4);
    v3 = v5;
    a3 = v6;
  }
  *a3 = v3;
  return result;
}

uint64_t JSC::Wasm::EntryPlan::generateWasmToJSStubs(JSC::Wasm::EntryPlan *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  int v22;
  char v23;

  v9 = (_QWORD *)((char *)this + 112);
  WTF::Vector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)this + 112, *(unsigned int *)(*((_QWORD *)this + 2) + 36), a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  v11 = *(unsigned int *)(v10 + 36);
  if (!(_DWORD)v11)
    return 1;
  v12 = 0;
  v13 = 0;
  while (1)
  {
    if (v13 >= v11)
    {
LABEL_13:
      __break(0xC471u);
      JUMPOUT(0x198C845D0);
    }
    JSC::Wasm::wasmToJS(*(JSC::Wasm **)(*(_QWORD *)(v10 + 24) + 8 * v13), v13, (uint64_t)v21);
    if (v22)
      break;
    if (v13 >= *((unsigned int *)this + 31))
      goto LABEL_13;
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>::operator=((_QWORD *)(*v9 + v12), v21, v14, v15, v16, v17, v18, v19);
    if (v22 != -1)
      ((void (*)(char *, _QWORD *))off_1E35B55F8[v22])(&v23, v21);
    ++v13;
    v10 = *((_QWORD *)this + 2);
    v11 = *(unsigned int *)(v10 + 36);
    v12 += 16;
    if (v13 >= v11)
      return 1;
  }
  if (v22 != -1)
    ((void (*)(char *, _QWORD *))off_1E35B55F8[v22])(&v23, v21);
  return 0;
}

uint64_t std::optional<WTF::TraceScope>::~optional(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    kdebug_trace();
  return a1;
}

void JSC::Wasm::EntryPlan::complete(JSC::Wasm::EntryPlan *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!*((_QWORD *)this + 7) && *((_BYTE *)this + 352) == 3)
    (*(void (**)(JSC::Wasm::EntryPlan *))(*(_QWORD *)this + 72))(this);
  if (((*(uint64_t (**)(JSC::Wasm::EntryPlan *))(*(_QWORD *)this + 40))(this) & 1) == 0)
  {
    JSC::Wasm::EntryPlan::generateStubsIfNecessary(this, v2, v3, v4, v5, v6, v7, v8);
    *((_BYTE *)this + 352) = 4;
    JSC::Wasm::Plan::runCompletionTasks(this, v9, v10, v11, v12, v13, v14, v15);
  }
}

void JSC::Wasm::EntryPlan::generateStubsIfNecessary(JSC::Wasm::EntryPlan *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;

  v9 = *((unsigned __int8 *)this + 353);
  *((_BYTE *)this + 353) = 1;
  if (!v9 && (JSC::Wasm::EntryPlan::generateWasmToWasmStubs(this, a2, a3, a4, a5, a6, a7, a8) & 1) == 0
    || (v10 = *((unsigned __int8 *)this + 354), *((_BYTE *)this + 354) = 1, !v10)
    && (JSC::Wasm::EntryPlan::generateWasmToJSStubs(this, a2, a3, a4, a5, a6, a7, a8) & 1) == 0)
  {
    WTF::makeString<WTF::ASCIILiteral>("Out of executable memory at stub generation", 44, (int **)&v32);
    JSC::Wasm::Plan::fail((uint64_t)this, (WTF::AtomStringImpl *)&v32, 0, v11, v12, v13, v14, v15);
    v23 = v32;
    v32 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
}

void WTF::Vector<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v10 = *(unsigned int *)(a1 + 12);
  if (v10 >= a2)
  {
    if (v10 != a2)
    {
      v38 = *(_QWORD *)a1 + 16 * v10;
      v39 = *(_QWORD *)a1 + 16 * a2;
      do
      {
        v40 = *(unsigned int **)(v39 + 8);
        *(_QWORD *)(v39 + 8) = 0;
        if (v40)
        {
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            atomic_store(1u, v40);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v40, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
          }
        }
        v39 += 16;
      }
      while (v39 != v38);
    }
    goto LABEL_33;
  }
  v11 = *(unsigned int *)(a1 + 8);
  v12 = *(_QWORD *)a1;
  if (v11 >= a2)
    goto LABEL_30;
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (!(v15 >> 28))
  {
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v15));
    *(_DWORD *)(a1 + 8) = v15;
    *(_QWORD *)a1 = v23;
    if ((_DWORD)v10)
    {
      v24 = (_QWORD *)(v12 + 16 * v10);
      v25 = (_QWORD *)v12;
      do
      {
        *v23 = *v25;
        v26 = v25[1];
        v25[1] = 0;
        v23[1] = v26;
        v27 = (unsigned int *)v25[1];
        v25[1] = 0;
        if (v27)
        {
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v27);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v27, (uint64_t)v16, v17, v18, v19, v20, v21, v22);
            WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
          }
        }
        v23 += 2;
        v25 += 2;
      }
      while (v25 != v24);
      v23 = *(_QWORD **)a1;
    }
    if (!v12)
    {
      v12 = (unint64_t)v23;
      if (v23)
      {
LABEL_31:
        v51 = *(unsigned int *)(a1 + 12);
        if (v51 != a2)
          bzero((void *)(v12 + 16 * v51), ((16 * a2 - 16 * v51 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      }
LABEL_33:
      *(_DWORD *)(a1 + 12) = a2;
      return;
    }
    if (v23 == (_QWORD *)v12)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v12, v16, v17, v18, v19, v20, v21, v22);
    v12 = *(_QWORD *)a1;
LABEL_30:
    if (v12)
      goto LABEL_31;
    goto LABEL_33;
  }
  __break(0xC471u);
}

_QWORD *JSC::MacroAssemblerCodeRef<(WTF::PtrTag)64376>::operator=(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v9 = (unsigned int *)a2[1];
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = (unsigned int *)a1[1];
  a1[1] = v9;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  return a1;
}

void std::call_once[abi:sn180100]<JSC::Wasm::activateSignalingMemory(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::Wasm::activateSignalingMemory(void)::once);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::Wasm::activateSignalingMemory(void)::once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::activateSignalingMemory(void)::$_0 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::Wasm::prepareSignalingMemory(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::Wasm::prepareSignalingMemory(void)::once);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::Wasm::prepareSignalingMemory(void)::once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::prepareSignalingMemory(void)::$_0 &&>>);
  }
}

void JSC::Wasm::Segment::create(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  char v10;
  int v11;
  _BYTE *v14;
  _BYTE *v15;

  if (a3 >= 0xFFFFFFEC)
  {
    *a9 = 0;
    a9[1] = JSC::Wasm::Segment::destroy;
  }
  else
  {
    v10 = a4;
    v11 = a3;
    WTF::tryFastZeroedMalloc((a3 + 20), a3, a4, a5, a6, a7, a8, (unint64_t *)&v15);
    v14 = v15;
    if (v15)
    {
      *v15 = v10;
      *((_QWORD *)v14 + 1) = a1;
      v14[16] = a2;
      *((_DWORD *)v14 + 1) = v11;
    }
    *a9 = v14;
    a9[1] = JSC::Wasm::Segment::destroy;
  }
}

void JSC::Wasm::makeString(uint64_t a1@<X0>, int **a2@<X8>)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[7];
  unint64_t v21[3];
  BOOL v22;
  _BYTE v23[7];

  v3 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v3)
    goto LABEL_20;
  v5 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a1 + 12));
  memcpy(v5, *(const void **)a1, *(unsigned int *)(a1 + 12));
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v21[0] = v8;
    v9 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v5, v3, v21);
    if (v9 == -1)
      break;
    v8 = v21[0];
    v10 = v9 < 0x10000 ? 1 : 2;
    v6 += v10;
    v7 |= v9;
  }
  while (v21[0] < v3);
  if (v8 > v3)
  {
    __break(1u);
LABEL_20:
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  v21[0] = (unint64_t)v5;
  v21[1] = v8;
  *(_DWORD *)v23 = *(_DWORD *)v20;
  *(_DWORD *)&v23[3] = *(_DWORD *)&v20[3];
  if (v6 >> 31)
    v11 = 0;
  else
    v11 = v6;
  if (v6 >> 31)
    v12 = 0;
  else
    v12 = v6;
  v21[2] = v12;
  v22 = v7 < 0x80;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(v11, v7 < 0x80, (uint64_t)v21, a2);
  if (*a2)
  {
    if (v5)
      WTF::fastFree((unint64_t)v5, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::Wasm::FunctionCodeBlockGenerator::addOutOfLineJumpTarget(JSC::Wasm::FunctionCodeBlockGenerator *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;

  v10 = a3;
  v11 = a2;
  if (a3)
    return (uint64_t)WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)this + 13, &v11, &v10, a4, a5, a6, a7, a8, (uint64_t)&v9);
  result = 49;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Wasm::FunctionCodeBlockGenerator::addSignature(JSC::Wasm::FunctionCodeBlockGenerator *this, const JSC::Wasm::TypeDefinition *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  const JSC::Wasm::TypeDefinition *v8;

  v3 = (_QWORD *)((char *)this + 88);
  v8 = a2;
  v4 = *((unsigned int *)this + 25);
  if ((_DWORD)v4 == *((_DWORD *)this + 24))
  {
    v7 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&v8);
    v5 = *((unsigned int *)this + 25);
    *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v5) = *v7;
  }
  else
  {
    *(_QWORD *)(*v3 + 8 * v4) = a2;
    LODWORD(v5) = v4;
  }
  *((_DWORD *)this + 25) = v5 + 1;
  return v4;
}

void JSC::Wasm::FunctionCodeBlockGenerator::addJumpTable(JSC::Wasm::FunctionCodeBlockGenerator *this, uint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  int v17;
  unsigned int v18;
  _DWORD *v19;
  WTF *v20;

  if (a2)
  {
    v18 = a2;
    v19 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * a2) | 4));
    v3 = (WTF *)v19;
    *v19 = v18;
    if (v18)
      bzero(v19 + 1, 16 * v18);
  }
  else
  {
    v3 = 0;
  }
  v20 = v3;
  v4 = *((unsigned int *)this + 33);
  if ((_DWORD)v4 == *((_DWORD *)this + 32))
  {
    v5 = (uint64_t *)WTF::Vector<WTF::FixedVector<JSC::Wasm::JumpTableEntry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 120, v4 + 1, (unint64_t)&v20);
    v13 = *((unsigned int *)this + 33);
    v14 = *((_QWORD *)this + 15);
    v15 = *v5;
    *v5 = 0;
    *(_QWORD *)(v14 + 8 * v13) = v15;
    v16 = v20;
    v17 = v13 + 1;
    *((_DWORD *)this + 33) = v17;
    v20 = 0;
    if (v16)
    {
      WTF::fastFree((unint64_t)v16, v6, v7, v8, v9, v10, v11, v12);
      v17 = *((_DWORD *)this + 33);
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v4) = v3;
    v17 = v4 + 1;
    *((_DWORD *)this + 33) = v17;
  }
  if (!v17)
    __break(0xC471u);
}

void JSC::Wasm::FunctionCodeBlockGenerator::setTailCall(JSC::Wasm::FunctionCodeBlockGenerator *this, unsigned int a2, char a3)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v6 = (uint64_t *)((char *)this + 152);
  v5 = *((_QWORD *)this + 19);
  v7 = a2;
  if (v5 < 0)
    v8 = 63;
  else
    v8 = *(_QWORD *)(2 * v5);
  if (v8 <= a2)
  {
    WTF::BitVector::resizeOutOfLine((JSC::Wasm::FunctionCodeBlockGenerator *)((char *)this + 152), a2 + 1, 0);
    v5 = *v6;
  }
  if (v5 >= 0)
    v9 = 2 * v5 + 8;
  else
    v9 = (uint64_t)v6;
  *(_QWORD *)(v9 + ((v7 >> 3) & 0x1FFFFFF8)) |= 1 << v7;
  *((_BYTE *)this + 16) = a3;
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::~FunctionParser(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v9 = (_DWORD *)(a1 + 26208);
  v10 = *(_QWORD *)(a1 + 26504);
  if ((v10 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(a1 + 26488);
  if (v11)
  {
    *(_QWORD *)(a1 + 26488) = 0;
    v9[72] = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 26200);
  if (a1 + 26216 != v12 && v12 != 0)
  {
    *(_QWORD *)(a1 + 26200) = 0;
    *v9 = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_DWORD *)(a1 + 852);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 840);
    v16 = 1584 * v14;
    do
    {
      v15 = JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry(v15, a2, a3, a4, a5, a6, a7, a8)+ 1584;
      v16 -= 1584;
    }
    while (v16);
  }
  v17 = *(_QWORD *)(a1 + 840);
  if (a1 + 856 != v17 && v17 != 0)
  {
    *(_QWORD *)(a1 + 840) = 0;
    *(_DWORD *)(a1 + 848) = 0;
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = *(unsigned int *)(a1 + 68);
  v20 = *(_QWORD *)(a1 + 56);
  if ((_DWORD)v19)
  {
    v21 = 48 * v19;
    v22 = (uint64_t *)(v20 + 40);
    do
    {
      v23 = *v22;
      if (*v22)
      {
        v24 = (uint64_t *)(v23 - 16);
        v25 = *(_QWORD *)(((v23 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v26 = *(uint64_t **)(v23 - 8);
        if (v26)
        {
          v27 = *v24;
          *v26 = *v24;
          *(_QWORD *)(v27 + 8) = v26;
          *v24 = 0;
          v24[1] = 0;
        }
        *v24 = *(_QWORD *)(v25 + 40);
        *(_QWORD *)(v25 + 40) = v24;
        *v22 = 0;
      }
      v22 += 6;
      v21 -= 48;
    }
    while (v21);
    v20 = *(_QWORD *)(a1 + 56);
  }
  if (a1 + 72 != v20 && v20 != 0)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v9 = *(unsigned int *)(a1 + 796);
  v10 = *(_QWORD *)(a1 + 784);
  if ((_DWORD)v9)
  {
    v11 = 48 * v9;
    v12 = (uint64_t *)(v10 + 40);
    do
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = (uint64_t *)(v13 - 16);
        v15 = *(_QWORD *)(((v13 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v16 = *(uint64_t **)(v13 - 8);
        if (v16)
        {
          v17 = *v14;
          *v16 = *v14;
          *(_QWORD *)(v17 + 8) = v16;
          *v14 = 0;
          v14[1] = 0;
        }
        *v14 = *(_QWORD *)(v15 + 40);
        *(_QWORD *)(v15 + 40) = v14;
        *v12 = 0;
      }
      v12 += 6;
      v11 -= 48;
    }
    while (v11);
    v10 = *(_QWORD *)(a1 + 784);
  }
  if (a1 + 800 != v10 && v10 != 0)
  {
    *(_QWORD *)(a1 + 784) = 0;
    *(_DWORD *)(a1 + 792) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = *(unsigned int *)(a1 + 12);
  v20 = *(_QWORD *)a1;
  if ((_DWORD)v19)
  {
    v21 = 48 * v19;
    v22 = (uint64_t *)(v20 + 40);
    do
    {
      v23 = *v22;
      if (*v22)
      {
        v24 = (uint64_t *)(v23 - 16);
        v25 = *(_QWORD *)(((v23 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v26 = *(uint64_t **)(v23 - 8);
        if (v26)
        {
          v27 = *v24;
          *v26 = *v24;
          *(_QWORD *)(v27 + 8) = v26;
          *v24 = 0;
          v24[1] = 0;
        }
        *v24 = *(_QWORD *)(v25 + 40);
        *(_QWORD *)(v25 + 40) = v24;
        *v22 = 0;
      }
      v22 += 6;
      v21 -= 48;
    }
    while (v21);
    v20 = *(_QWORD *)a1;
  }
  if (a1 + 16 != v20 && v20 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

JSC::Wasm::EntryPlan::ThreadCountHolder *JSC::Wasm::EntryPlan::ThreadCountHolder::ThreadCountHolder(JSC::Wasm::EntryPlan::ThreadCountHolder *this, JSC::Wasm::EntryPlan *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v11;

  *(_QWORD *)this = a2;
  v9 = (unsigned __int8 *)a2 + 13;
  if (__ldaxr((unsigned __int8 *)a2 + 13))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 13);
    goto LABEL_4;
  }
  if (__stxr(1u, v9))
    goto LABEL_3;
LABEL_4:
  ++*(_BYTE *)(*(_QWORD *)this + 356);
  v11 = __ldxr(v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, v9))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  return this;
}

void JSC::Wasm::EntryPlan::ThreadCountHolder::~ThreadCountHolder(JSC::Wasm::EntryPlan::ThreadCountHolder *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  char v12;
  int v13;

  v9 = (unsigned __int8 *)(*(_QWORD *)this + 13);
  if (__ldaxr(v9))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
    goto LABEL_4;
  }
  if (__stxr(1u, v9))
    goto LABEL_3;
LABEL_4:
  v11 = *(_QWORD *)this;
  v12 = *(_BYTE *)(*(_QWORD *)this + 356) - 1;
  *(_BYTE *)(*(_QWORD *)this + 356) = v12;
  if (!v12 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) & 1) == 0)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 48))(*(_QWORD *)this);
  v13 = __ldxr(v9);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v9))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC21MacroAssemblerCodeRefILN3WTF6PtrTagE64376EEENS8_4Wasm14BindingFailureEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
}

uint64_t WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, __int128 *a2, unint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 16;
  if (a3 >= 0x11)
  {
    WTF::VectorBuffer<JSC::Wasm::Type,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a3);
    v6 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    if (!a3)
      return a1;
    v6 = 0;
  }
  v7 = 16 * a3;
  do
  {
    v8 = *a2++;
    *(_OWORD *)(*(_QWORD *)a1 + 16 * v6) = v8;
    v6 = *(_DWORD *)(a1 + 12) + 1;
    *(_DWORD *)(a1 + 12) = v6;
    v7 -= 16;
  }
  while (v7);
  return a1;
}

uint64_t WTF::VectorBuffer<JSC::Wasm::Type,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 0x11)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 16;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 28))
  {
    v4 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

JSC::Wasm::TypeInformation *std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>()
{
  JSC::Wasm::TypeInformation *v0;
  JSC::Wasm::TypeInformation *result;

  v0 = (JSC::Wasm::TypeInformation *)WTF::fastMalloc((WTF *)0x150);
  result = JSC::Wasm::TypeInformation::TypeInformation(v0);
  JSC::Wasm::TypeInformation::singleton(void)::theOne = result;
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseBody(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  _OWORD *v33;
  int v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  uint8x8_t v47;
  _BYTE *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _OWORD v60[48];
  _OWORD *v61;
  uint64_t v62;
  _OWORD v63[48];
  __int128 v64;
  char v65;
  _QWORD v66[2];

  v10 = a2 + 105;
  v58 = (char *)v60;
  v59 = 16;
  v61 = v63;
  v62 = 16;
  LODWORD(v64) = 0;
  v11 = a2[3309];
  if (*(_DWORD *)(v11 + 32))
    v12 = 0;
  else
    v12 = v11 + 8;
  *((_QWORD *)&v64 + 1) = v12;
  v13 = *((unsigned int *)a2 + 213);
  if ((_DWORD)v13 == *((_DWORD *)a2 + 212))
  {
    v14 = WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v13 + 1, (unint64_t)&v58, a4, a5, a6, a7, a8);
    v15 = *((_DWORD *)a2 + 213);
    v16 = a2[105];
    v17 = v16 + 1584 * v15;
    *(_QWORD *)v17 = v17 + 16;
    *(_QWORD *)(v17 + 8) = 16;
    v18 = *(_QWORD *)v14;
    if (*(_QWORD *)v14 == v14 + 16)
    {
      WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression>::move(v18, v18 + 48 * *(unsigned int *)(v14 + 12), v17 + 16, a4, a5, a6, a7, a8);
    }
    else
    {
      *(_QWORD *)v14 = v14 + 16;
      *(_QWORD *)v17 = v18;
      v19 = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = 16;
      *(_DWORD *)(v17 + 8) = v19;
    }
    v24 = *(_DWORD *)(v14 + 12);
    *(_DWORD *)(v14 + 12) = 0;
    *(_DWORD *)(v17 + 12) = v24;
    v25 = v16 + 1584 * v15;
    v26 = v25 + 800;
    *(_QWORD *)(v25 + 784) = v25 + 800;
    v27 = (_DWORD *)(v25 + 796);
    *(_QWORD *)(v25 + 792) = 16;
    v28 = *(_QWORD *)(v14 + 784);
    if (v28 == v14 + 800)
    {
      WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression>::move(v28, v28 + 48 * *(unsigned int *)(v14 + 796), v26, a4, a5, a6, a7, a8);
    }
    else
    {
      *(_QWORD *)(v14 + 784) = v14 + 800;
      *(_QWORD *)(v25 + 784) = v28;
      v29 = *(_DWORD *)(v14 + 792);
      *(_DWORD *)(v14 + 792) = 16;
      *(_DWORD *)(v25 + 792) = v29;
    }
    v35 = *(_DWORD *)(v14 + 796);
    *(_DWORD *)(v14 + 796) = 0;
    *v27 = v35;
    v36 = v16 + 1584 * v15;
    v37 = *(_OWORD *)(v14 + 1568);
  }
  else
  {
    v20 = *v10;
    v21 = *v10 + 1584 * v13;
    *(_QWORD *)v21 = v21 + 16;
    *(_QWORD *)(v21 + 8) = 16;
    v22 = v58;
    if (v58 == (char *)v60)
    {
      WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression>::move((uint64_t)v60, (uint64_t)&v60[3 * HIDWORD(v59)], v21 + 16, a4, a5, a6, a7, a8);
    }
    else
    {
      v58 = (char *)v60;
      *(_QWORD *)v21 = v22;
      v23 = v59;
      LODWORD(v59) = 16;
      *(_DWORD *)(v21 + 8) = v23;
    }
    v30 = HIDWORD(v59);
    HIDWORD(v59) = 0;
    *(_DWORD *)(v21 + 12) = v30;
    v31 = v20 + 1584 * v13;
    v26 = v31 + 800;
    *(_QWORD *)(v31 + 784) = v31 + 800;
    v32 = (_DWORD *)(v31 + 796);
    *(_QWORD *)(v31 + 792) = 16;
    v33 = v61;
    if (v61 == v63)
    {
      WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression>::move((uint64_t)v63, (uint64_t)&v63[3 * HIDWORD(v62)], v26, a4, a5, a6, a7, a8);
    }
    else
    {
      v61 = v63;
      *(_QWORD *)(v31 + 784) = v33;
      v34 = v62;
      LODWORD(v62) = 16;
      *(_DWORD *)(v31 + 792) = v34;
    }
    v38 = HIDWORD(v62);
    HIDWORD(v62) = 0;
    *v32 = v38;
    v36 = v20 + 1584 * v13;
    v37 = v64;
  }
  *(_OWORD *)(v36 + 1568) = v37;
  ++*((_DWORD *)a2 + 213);
  JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry((uint64_t)&v58, a2, v26, a4, a5, a6, a7, a8);
  if (*((_DWORD *)a2 + 213))
  {
    v48 = a2 + 3314;
    while (1)
    {
      v49 = *a2;
      a2[3315] = *a2;
      if (v49 >= a2[2])
        break;
      *a2 = v49 + 1;
      v50 = *(unsigned __int8 *)(a2[1] + v49);
      if (v50 == 255
        || ((JSC::Wasm::isValidOpType<unsigned char>(unsigned char)::valid[v50 >> 3] >> (v50 & 7)) & 1) == 0)
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>("invalid opcode ", a2, 16, v50, &v58, *(float *)&v45);
        goto LABEL_44;
      }
      *v48 = v50;
      if (BYTE5(qword_1ECF4C789))
      {
        v52 = atomic_load(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::onceKey);
        if (v52 != -1)
        {
          v58 = &v65;
          v66[0] = &v58;
          std::__call_once(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::onceKey, v66, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::singleton(void)::$_0 &&>>);
        }
        v53 = *v48;
        v54 = atomic_load(&JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::registerFlag);
        if (v54 != -1)
        {
          v57 = *v48;
          v58 = &v65;
          v66[0] = &v58;
          std::__call_once(&JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::registerFlag, v66, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::$_0 &&>>);
          v53 = v57;
        }
        v55 = (unint64_t *)((char *)&JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter + 8 * v53 + 952);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 + 1, v55));
      }
      if (*((_DWORD *)a2 + 6632))
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseUnreachableExpression(&v58, (uint64_t)a2, v39, v44, v45, v46, v47, v50, v40, v41, v42, v43);
      else
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseExpression(&v58, a2);
      if ((_BYTE)v59)
        goto LABEL_44;
      v51 = (uint64_t *)a2[6];
      if (*(_BYTE *)(*v51 + 26512) == 1)
        *((_BYTE *)v51 + 72) = 1;
      if (!*((_DWORD *)a2 + 213))
        goto LABEL_41;
    }
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't decode opcode", a2, 20, &v58, *(float *)&v45);
LABEL_44:
    *(_QWORD *)a1 = v58;
  }
  else
  {
    v51 = (uint64_t *)a2[6];
LABEL_41:
    if (!*((_BYTE *)v51 + 72))
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
      return;
    }
    JSC::Wasm::ConstExprGenerator::fail<char const*>((_QWORD *)a1, *(_QWORD *)*v51, v51[2]);
  }
  *(_BYTE *)(a1 + 8) = 1;
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>, float a6@<S1>)
{
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int *v54;
  unint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  WTF *v59;
  __int128 v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v58 = (const char *)off_1E3572250;
  v59 = (WTF *)v61;
  v60 = xmmword_199122F80;
  v61[0] = 0;
  if (__src)
  {
    v9 = a3 - 1;
    if (!a3)
      v9 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v9, (uint64_t)&v56, a6);
  }
  else
  {
    v10 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 16) = 0;
    v56 = (const char *)v10;
    LODWORD(v57) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v58, "StringView", &v56);
  if ((_DWORD)v57 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v57])(&v55, &v56);
  (*((void (**)(const char **))v58 + 5))(&v58);
  (*((void (**)(const char **))v58 + 5))(&v58);
  v18 = v59;
  if (!v59)
  {
    v53 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v59, v60, (uint64_t *)&v53);
  v18 = v59;
  if (v59 != (WTF *)v61)
LABEL_12:
    WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
  v58 = (const char *)off_1E3572250;
  v59 = (WTF *)v61;
  v60 = xmmword_199122F80;
  v61[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v58, "%u", a4);
  (*((void (**)(const char **))v58 + 5))(&v58);
  v26 = v59;
  if (!v59)
  {
    v52 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v59, v60, (uint64_t *)&v52);
  v26 = v59;
  if (v59 != (WTF *)v61)
LABEL_17:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  v58 = "WebAssembly.Module doesn't parse at byte ";
  v59 = (WTF *)42;
  v56 = ": ";
  v57 = 3;
  v55 = v8;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)&v58, &v55, (uint64_t)&v56, (uint64_t *)&v53, (uint64_t *)&v52, &v54);
  if (v54)
  {
    *a5 = v54;
    v54 = 0;
    v34 = v52;
    v52 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    v35 = v53;
    v53 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, v27, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseUnreachableExpression(_BYTE *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, uint8x8_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _DWORD *v12;
  uint64_t v13;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t *v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  char *v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  float v132;
  uint64_t v133;
  uint64_t v134;
  void (**v135)(WTF::StringPrintStream *__hidden);
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  int v150;
  uint64_t v151;
  unint64_t v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  char v158;
  uint64_t v159;
  unint64_t v160;
  int v161;
  WTF *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  char v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  int v235;
  unint64_t v236;
  int v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  char *v243;
  unint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  BOOL v248;
  uint64_t v249;
  char v250;
  int v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  const char *v262;
  uint64_t v263;
  char *v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unsigned int v276;
  int v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  void (**v303)(WTF::StringPrintStream *__hidden);
  int v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  char *v309;
  unint64_t *v310;
  uint64_t v311;
  double v312;
  float v313;
  char *v314;
  unint64_t *v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  char *v344;
  unint64_t *v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  char *v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  int v432;
  unsigned __int8 v433;
  int v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t *v437;
  unint64_t v438;
  char v439;
  float v440;
  unsigned int *v441;
  WTF *v442;
  JSC::Wasm::TypeDefinition ***v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  const JSC::Wasm::Type *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  char v457;
  WTF *v458;
  const JSC::Wasm::TypeDefinition *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unsigned int v465;
  WTF *v466;
  uint64_t v467;
  _BYTE v468[768];
  void (**v469)(WTF::StringPrintStream *__hidden);
  uint64_t v470;
  _OWORD v471[98];
  void (**v472)(WTF::StringPrintStream *__hidden);
  unsigned int v473;

  v12 = (_DWORD *)(a2 + 26212);
  v13 = *(unsigned __int8 *)(a2 + 26512);
  switch(*(_BYTE *)(a2 + 26512))
  {
    case 0:
    case 1:
    case 0xF:
    case 0x1A:
    case 0x1B:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xD0:
    case 0xD1:
    case 0xD3:
    case 0xD4:
      goto LABEL_2;
    case 2:
    case 3:
    case 4:
    case 6:
      ++*(_DWORD *)(a2 + 26528);
      v466 = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseBlockSignatureAndNotifySIMDUseIfNeeded(&v469, (unint64_t *)a2, &v466, a4, *(float *)&a5);
      if (!(_BYTE)v470)
        goto LABEL_2;
      if (v469)
      {
        if (*(_DWORD *)v469 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v469, v34, v35, v36, v37, v38, v39, v40);
          WTF::fastFree(v293, v294, v295, v296, v297, v298, v299, v300);
        }
        else
        {
          *(_DWORD *)v469 -= 2;
        }
      }
      v31 = "can't get inline type for ";
      v32 = (unint64_t *)a2;
      v33 = 27;
      goto LABEL_28;
    case 5:
      if (*(_DWORD *)(a2 + 26528) >= 2u)
        goto LABEL_2;
      if (!*(_DWORD *)(a2 + 852))
      {
        __break(0xC471u);
        JUMPOUT(0x198C87E0CLL);
      }
      *(_DWORD *)(a2 + 26528) = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [37]>(&v469);
      goto LABEL_356;
    case 7:
      LODWORD(v466) = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseExceptionIndex((uint64_t)&v469, (unint64_t *)a2, (unsigned int *)&v466, a4, *(float *)&a5);
      if ((_BYTE)v470)
        goto LABEL_356;
      v213 = *(_QWORD *)(a2 + 26480);
      v214 = v466;
      v215 = *(unsigned int *)(v213 + 68);
      if (v215 <= v466)
      {
        v214 = v466 - v215;
        if (v214 >= *(unsigned int *)(v213 + 84))
        {
          __break(0xC471u);
          JUMPOUT(0x198C87E14);
        }
        v216 = (_QWORD *)(v213 + 72);
      }
      else
      {
        v216 = (_QWORD *)(v213 + 56);
      }
      v287 = *(_QWORD *)(*v216 + 8 * v214);
      if (*(_DWORD *)(v287 + 32) == 4)
      {
        v441 = *(unsigned int **)(v287 + 8);
        v442 = *(WTF **)v441;
        v443 = *(JSC::Wasm::TypeDefinition ****)(*(_QWORD *)(*(_QWORD *)v441 + 8) + 8 * v441[2]);
        if (JSC::Wasm::TypeDefinition::hasRecursiveReference((JSC::Wasm::TypeDefinition *)v443))
        {
          JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v287, v444, v445, v446, v447, v448, v449, v450);
          if (!v457)
          {
            v458 = JSC::Wasm::TypeDefinition::replacePlaceholders(v443, v442, v451, v452, v453, v454, v455, v456);
            JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v287, v458, v459, v460, v461, v462, v463, v464);
          }
        }
      }
      if (v12[79] >= 2u)
        goto LABEL_2;
      if (!*(_DWORD *)(a2 + 852))
      {
        __break(0xC471u);
        JUMPOUT(0x198C86C18);
      }
      goto LABEL_355;
    case 8:
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseExceptionIndex((uint64_t)&v469, (unint64_t *)a2, (unsigned int *)&v466, a4, *(float *)&a5);
      goto LABEL_206;
    case 9:
      v193 = *(_QWORD *)(a2 + 16);
      v194 = *(_QWORD *)a2;
      v44 = v193 > *(_QWORD *)a2;
      v195 = v193 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_646;
      v196 = 0;
      v197 = 0;
      v48 = 0;
      v198 = *(_QWORD *)(a2 + 8);
      v199 = 5;
      if (v195 < 5)
        v199 = v195;
      v200 = v199 - 1;
      *(_QWORD *)a2 = v194 + 1;
      v201 = v198 + v194;
      v202 = v194 + 2;
      while (1)
      {
        v203 = *(char *)(v201 + v196);
        v48 |= (v203 & 0x7F) << v197;
        if ((v203 & 0x80000000) == 0)
          break;
        if (v200 == v196)
          goto LABEL_646;
        *(_QWORD *)a2 = v202 + v196;
        v197 += 7;
        if (v195 == ++v196)
          goto LABEL_226;
      }
      if ((_DWORD)v196 == 4 && *(unsigned __int8 *)(v201 + v196) >= 0x10u)
        goto LABEL_646;
      v80 = *(unsigned int *)(a2 + 852);
      if (v80 <= v48)
        goto LABEL_602;
      v262 = "rethrow doesn't refer to a catch block";
      v263 = 39;
      goto LABEL_270;
    case 0xB:
      v123 = *(_DWORD *)(a2 + 26528) - 1;
      if (*(_DWORD *)(a2 + 26528) != 1)
        goto LABEL_279;
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v469, (_DWORD *)(a2 + 840), a3, v13, a9, a10, a11, a12);
      v466 = (WTF *)v468;
      v467 = 16;
      JSC::Wasm::ConstExprGenerator::fail<char const*>(&v472, ***(_QWORD ***)(a2 + 48), *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16));
      *(_QWORD *)a1 = v472;
      a1[8] = 1;
      v162 = v466;
      if (HIDWORD(v467))
      {
        v163 = 48 * HIDWORD(v467);
        v164 = (uint64_t *)((char *)v466 + 40);
        do
        {
          v165 = *v164;
          if (*v164)
          {
            v166 = (uint64_t *)(v165 - 16);
            v167 = *(_QWORD *)(((v165 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v168 = *(uint64_t **)(v165 - 8);
            if (v168)
            {
              v169 = *v166;
              *v168 = *v166;
              *(_QWORD *)(v169 + 8) = v168;
              *v166 = 0;
              v166[1] = 0;
            }
            *v166 = *(_QWORD *)(v167 + 40);
            *(_QWORD *)(v167 + 40) = v166;
            *v164 = 0;
          }
          v164 += 6;
          v163 -= 48;
        }
        while (v163);
        v162 = v466;
      }
      if (v468 != (_BYTE *)v162 && v162 != 0)
      {
        v466 = 0;
        LODWORD(v467) = 0;
        WTF::fastFree((unint64_t)v162, v124, v125, v126, v127, v128, v129, v130);
      }
      goto LABEL_350;
    case 0xC:
    case 0xD:
      v55 = *(_QWORD *)(a2 + 16);
      v56 = *(_QWORD *)a2;
      v57 = v55 - *(_QWORD *)a2;
      if (v55 <= *(_QWORD *)a2)
        goto LABEL_646;
      v58 = 0;
      v59 = 0;
      v48 = 0;
      v60 = *(_DWORD *)(a2 + 26528);
      v61 = *(_QWORD *)(a2 + 8);
      v62 = 5;
      if (v57 < 5)
        v62 = v57;
      v63 = v62 - 1;
      *(_QWORD *)a2 = v56 + 1;
      v64 = v61 + v56;
      v65 = v56 + 2;
      while (1)
      {
        v66 = *(char *)(v64 + v58);
        v48 |= (v66 & 0x7F) << v59;
        if ((v66 & 0x80000000) == 0)
          break;
        if (v63 == v58)
          goto LABEL_646;
        *(_QWORD *)a2 = v65 + v58;
        v59 += 7;
        if (v57 == ++v58)
          goto LABEL_226;
      }
      if ((_DWORD)v58 == 4 && *(unsigned __int8 *)(v64 + v58) >= 0x10u)
        goto LABEL_646;
      v81 = *(unsigned int *)(a2 + 852);
      v248 = v60 != 0;
      LODWORD(v82) = v60 - 1;
      if (v248)
        v82 = v82;
      else
        v82 = 0;
      v80 = v81 + v82;
      if (v81 + v82 <= (unint64_t)v48)
        goto LABEL_602;
      goto LABEL_2;
    case 0xE:
      v136 = *(_QWORD *)(a2 + 16);
      v137 = *(_QWORD *)a2;
      v138 = v136 - *(_QWORD *)a2;
      if (v136 <= *(_QWORD *)a2)
        goto LABEL_639;
      v139 = 0;
      v140 = 0;
      v141 = 0;
      v142 = *(_QWORD *)(a2 + 8);
      if (v138 >= 5)
        v138 = 5;
      v143 = v138 - 1;
      *(_QWORD *)a2 = v137 + 1;
      while (2)
      {
        v144 = *(char *)(v142 + v137 + v139);
        v141 |= (v144 & 0x7F) << v140;
        if (v144 < 0)
        {
          if (v143 != v139)
          {
            *(_QWORD *)a2 = v137 + v139++ + 2;
            v140 += 7;
            if (!(v137 - v136 + v139))
              goto LABEL_226;
            continue;
          }
          goto LABEL_639;
        }
        break;
      }
      if ((_DWORD)v139 == 4 && *(unsigned __int8 *)(v142 + v137 + v139) >= 0x10u)
      {
LABEL_639:
        v68 = "can't get the number of targets for br_table in unreachable context";
        goto LABEL_640;
      }
      v236 = v137 + v139 + 1;
      if (!v141)
      {
LABEL_326:
        v44 = v136 > v236;
        v288 = v136 - v236;
        if (!v44)
          goto LABEL_337;
        v289 = 0;
        v290 = 5;
        if (v288 < 5)
          v290 = v288;
        v291 = v290 - 1;
        *(_QWORD *)a2 = v236 + 1;
        v292 = v142 + v236;
        while (*(char *)(v292 + v289) < 0)
        {
          if (v291 == v289)
            goto LABEL_337;
          *(_QWORD *)a2 = v236 + 2 + v289++;
          if (v288 == v289)
            goto LABEL_226;
        }
        if ((_DWORD)v289 == 4 && *(unsigned __int8 *)(v292 + v289) >= 0x10u)
        {
LABEL_337:
          v68 = "can't get default target for br_table in unreachable context";
          v69 = (unint64_t *)a2;
          v70 = 61;
          goto LABEL_555;
        }
        goto LABEL_2;
      }
      if (v141 == -1)
      {
        v314 = "br_table's number of targets is too big ";
        v315 = (unint64_t *)a2;
        v316 = 41;
        v150 = -1;
        goto LABEL_542;
      }
      v237 = 0;
      while (1)
      {
        v238 = v236;
        v248 = v136 >= v236;
        v239 = v136 - v236;
        if (v239 == 0 || !v248)
          break;
        v240 = 0;
        if (v239 >= 5)
          v239 = 5;
        v241 = v239 - 1;
        *(_QWORD *)a2 = v238 + 1;
        while (*(char *)(v142 + v238 + v240) < 0)
        {
          if (v241 == v240)
            goto LABEL_248;
          *(_QWORD *)a2 = v238 + v240++ + 2;
          if (!(v238 - v136 + v240))
            goto LABEL_226;
        }
        if ((_DWORD)v240 == 4 && *(unsigned __int8 *)(v142 + v238 + v240) >= 0x10u)
          break;
        v236 = v238 + v240 + 1;
        if (++v237 == v141)
        {
          v236 = v238 + v240 + 1;
          goto LABEL_326;
        }
      }
LABEL_248:
      v242 = "can't get ";
      v243 = "th target for br_table in unreachable context";
      v244 = (unint64_t *)a2;
      v245 = 11;
      v246 = 46;
LABEL_249:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(v242, v244, v245, v237, v243, v246, &v469, *(float *)&a5);
      goto LABEL_356;
    case 0x10:
      goto LABEL_205;
    case 0x11:
      goto LABEL_94;
    case 0x12:
      if (!HIBYTE(word_1ECF4C7B4))
        goto LABEL_605;
LABEL_205:
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseFunctionIndex((uint64_t)&v469, (unint64_t *)a2, (unsigned int *)&v466, a4, *(float *)&a5);
      goto LABEL_206;
    case 0x13:
      if (!HIBYTE(word_1ECF4C7B4))
      {
LABEL_605:
        v68 = "wasm tail calls are not enabled";
        v69 = (unint64_t *)a2;
        v70 = 32;
        goto LABEL_555;
      }
LABEL_94:
      v102 = *(_QWORD *)(a2 + 16);
      v103 = *(_QWORD *)a2;
      v104 = v102 - *(_QWORD *)a2;
      if (v102 <= *(_QWORD *)a2)
        goto LABEL_636;
      v105 = 0;
      v106 = *(_QWORD *)(a2 + 8);
      v107 = 5;
      if (v104 < 5)
        v107 = v102 - *(_QWORD *)a2;
      v108 = v107 - 1;
      *(_QWORD *)a2 = v103 + 1;
      while (2)
      {
        if (*(char *)(v106 + v103 + v105) < 0)
        {
          if (v108 != v105)
          {
            *(_QWORD *)a2 = v103 + v105++ + 2;
            if (v104 == v105)
              goto LABEL_226;
            continue;
          }
          goto LABEL_636;
        }
        break;
      }
      if ((_DWORD)v105 == 4 && *(unsigned __int8 *)(v106 + v103 + v105) >= 0x10u)
      {
LABEL_636:
        v68 = "can't get call_indirect's signature index in unreachable context";
        v69 = (unint64_t *)a2;
        v70 = 65;
        goto LABEL_555;
      }
      if (v102 <= v103 + v105 + 1)
        goto LABEL_113;
      v109 = 0;
      v110 = ~v105 + v104;
      if (v110 >= 5)
        v110 = 5;
      v111 = v110 - 1;
      v112 = v103 + v105;
      *(_QWORD *)a2 = v103 + v105 + 2;
      v113 = v103 - v102 + v105;
      v114 = v106 + v103;
      while (*(char *)(v114 + v109 + v105 + 1) < 0)
      {
        if (v111 == v109)
          goto LABEL_113;
        v115 = v112 + v109;
        v116 = v113 + v109++;
        *(_QWORD *)a2 = v115 + 3;
        if (v116 == -2)
          goto LABEL_226;
      }
      if ((_DWORD)v109 == 4 && *(unsigned __int8 *)(v114 + v109 + v105 + 1) >= 0x10u)
      {
LABEL_113:
        v68 = "can't get call_indirect's reserved byte in unreachable context";
        v69 = (unint64_t *)a2;
        v70 = 63;
        goto LABEL_555;
      }
      goto LABEL_2;
    case 0x14:
      if (!BYTE1(dword_1ECF4C7B0))
      {
        v68 = "function references are not enabled";
LABEL_579:
        v69 = (unint64_t *)a2;
        v70 = 36;
        goto LABEL_555;
      }
      v217 = *(_QWORD *)(a2 + 16);
      v218 = *(_QWORD *)a2;
      v44 = v217 > *(_QWORD *)a2;
      v219 = v217 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_301;
      v220 = 0;
      v221 = *(_QWORD *)(a2 + 8);
      v222 = 5;
      if (v219 < 5)
        v222 = v219;
      v223 = v222 - 1;
      *(_QWORD *)a2 = v218 + 1;
      v224 = v221 + v218;
      v225 = v218 + 2;
      while (*(char *)(v224 + v220) < 0)
      {
        if (v223 == v220)
          goto LABEL_301;
        *(_QWORD *)a2 = v225 + v220++;
        if (v219 == v220)
          goto LABEL_226;
      }
      if ((_DWORD)v220 == 4 && *(unsigned __int8 *)(v224 + v220) >= 0x10u)
      {
LABEL_301:
        v68 = "can't call_ref's signature index in unreachable context";
        v69 = (unint64_t *)a2;
        v70 = 56;
        goto LABEL_555;
      }
      goto LABEL_2;
    case 0x18:
      if (*(_DWORD *)(a2 + 852) == 1)
      {
        v68 = "can't use delegate at the top-level of a function";
        v69 = (unint64_t *)a2;
        v70 = 50;
        goto LABEL_555;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseDelegateTarget((uint64_t)&v469, a2, (unsigned int *)&v472, *(_DWORD *)(a2 + 26528), a4, *(float *)&a5);
      if ((_BYTE)v470)
        goto LABEL_356;
      v123 = v12[79] - 1;
      if (v12[79] != 1)
      {
LABEL_279:
        v12[79] = v123;
        goto LABEL_2;
      }
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)&v469, (_DWORD *)(a2 + 840), v117, v118, v119, v120, v121, v122);
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [35]>((void (***)(WTF::StringPrintStream *__hidden))&v466);
      *(_QWORD *)a1 = v466;
      a1[8] = 1;
LABEL_350:
      JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry((uint64_t)&v469, v124, v125, v126, v127, v128, v129, v130);
      return;
    case 0x19:
      if (*(_DWORD *)(a2 + 26528) >= 2u)
        goto LABEL_2;
      if (!*(_DWORD *)(a2 + 852))
      {
        __break(0xC471u);
        JUMPOUT(0x198C87E04);
      }
      *(_DWORD *)(a2 + 26528) = 0;
      v469 = (void (**)(WTF::StringPrintStream *__hidden))v471;
      v470 = 16;
      v83 = *(unsigned int *)(a2 + 68);
      v84 = *(_QWORD *)(a2 + 56);
      if ((_DWORD)v83)
      {
        v85 = 48 * v83;
        v86 = (uint64_t *)(v84 + 40);
        do
        {
          v87 = *v86;
          if (*v86)
          {
            v88 = (uint64_t *)(v87 - 16);
            v89 = *(_QWORD *)(((v87 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v90 = *(uint64_t **)(v87 - 8);
            if (v90)
            {
              v91 = *v88;
              *v90 = *v88;
              *(_QWORD *)(v91 + 8) = v90;
              *v88 = 0;
              v88[1] = 0;
            }
            *v88 = *(_QWORD *)(v89 + 40);
            *(_QWORD *)(v89 + 40) = v88;
            *v86 = 0;
          }
          v86 += 6;
          v85 -= 48;
        }
        while (v85);
        v84 = *(_QWORD *)(a2 + 56);
      }
      v301 = a2 + 72;
      if (v84 != a2 + 72)
      {
        if (v84)
        {
          *(_QWORD *)(a2 + 56) = 0;
          *(_DWORD *)(a2 + 64) = 0;
          WTF::fastFree(v84, (void *)a2, a3, v13, a9, a10, a11, a12);
        }
        *(_QWORD *)(a2 + 56) = v301;
      }
      if (v469 == (void (**)(WTF::StringPrintStream *__hidden))v471)
      {
        WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression>::move((uint64_t)v471, (uint64_t)&v471[3 * HIDWORD(v470)], a2 + 72, v13, a9, a10, a11, a12);
        v302 = v470;
        v303 = v469;
      }
      else
      {
        *(_QWORD *)(a2 + 56) = v469;
        v302 = v470;
        v303 = (void (**)(WTF::StringPrintStream *__hidden))v471;
      }
      v305 = HIDWORD(v470);
      HIDWORD(v470) = 0;
      *(_DWORD *)(a2 + 64) = v302;
      *(_DWORD *)(a2 + 68) = v305;
      if (v471 != (_OWORD *)v303 && v303)
      {
        v469 = 0;
        LODWORD(v470) = 0;
        WTF::fastFree((unint64_t)v303, (void *)a2, a3, v13, a9, a10, a11, a12);
      }
LABEL_355:
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [38]>(&v469);
      goto LABEL_356;
    case 0x1C:
      goto LABEL_227;
    case 0x20:
      v465 = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseIndexForLocal((uint64_t)&v469, a2, &v465, a4, *(float *)&a5);
      if ((_BYTE)v470)
        goto LABEL_356;
      v473 = v465;
      if (!BYTE1(dword_1ECF4C7B0))
        goto LABEL_2;
      if (*v12 <= v465)
      {
        __break(0xC471u);
        JUMPOUT(0x198C87DFCLL);
      }
      if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 26200) + 16 * v465) != 228)
        goto LABEL_2;
      v133 = a2 + 26504;
      v134 = *(_QWORD *)(a2 + 26504);
      if (v134 >= 0)
        v133 = 2 * v134 + 8;
      if (((*(_QWORD *)(v133 + (((unint64_t)v465 >> 3) & 0x1FFFFFF8)) >> v465) & 1) != 0)
        goto LABEL_2;
      v469 = (void (**)(WTF::StringPrintStream *__hidden))"non-defaultable function local ";
      v470 = 32;
      v466 = (WTF *)" is accessed before initialization";
      v467 = 35;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v472, (uint64_t)&v469, &v473, (uint64_t)&v466, v131, v132);
      v135 = v472;
      goto LABEL_357;
    case 0x21:
    case 0x22:
      LODWORD(v466) = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseIndexForLocal((uint64_t)&v469, a2, (unsigned int *)&v466, a4, *(float *)&a5);
      if ((_BYTE)v470)
        goto LABEL_356;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::pushLocalInitialized(a2, v466);
      v41 = 0;
      goto LABEL_207;
    case 0x23:
    case 0x24:
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseIndexForGlobal((uint64_t)&v469, (unint64_t *)a2, (unsigned int *)&v466, a4, *(float *)&a5);
LABEL_206:
      v41 = v470;
      if (!(_BYTE)v470)
        goto LABEL_207;
      goto LABEL_356;
    case 0x25:
    case 0x26:
      v71 = *(_QWORD *)(a2 + 16);
      v72 = *(_QWORD *)a2;
      v44 = v71 > *(_QWORD *)a2;
      v73 = v71 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_72;
      v74 = 0;
      v75 = *(_QWORD *)(a2 + 8);
      v76 = 5;
      if (v73 < 5)
        v76 = v73;
      v77 = v76 - 1;
      *(_QWORD *)a2 = v72 + 1;
      v78 = v75 + v72;
      v79 = v72 + 2;
      while (2)
      {
        if (*(char *)(v78 + v74) < 0)
        {
          if (v77 != v74)
          {
            *(_QWORD *)a2 = v79 + v74++;
            if (v73 == v74)
              goto LABEL_226;
            continue;
          }
          goto LABEL_72;
        }
        break;
      }
      if ((_DWORD)v74 == 4 && *(unsigned __int8 *)(v78 + v74) >= 0x10u)
      {
LABEL_72:
        v68 = "can't parse table index";
        v69 = (unint64_t *)a2;
        v70 = 24;
        goto LABEL_555;
      }
      goto LABEL_2;
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
      v16 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)a2;
      v18 = v16 - *(_QWORD *)a2;
      if (v16 <= *(_QWORD *)a2)
        goto LABEL_627;
      v19 = 0;
      v20 = *(_QWORD *)(a2 + 8);
      v21 = 5;
      if (v18 < 5)
        v21 = v16 - *(_QWORD *)a2;
      v22 = v21 - 1;
      *(_QWORD *)a2 = v17 + 1;
      while (2)
      {
        if (*(char *)(v20 + v17 + v19) < 0)
        {
          if (v22 != v19)
          {
            *(_QWORD *)a2 = v17 + v19++ + 2;
            if (v18 == v19)
              goto LABEL_226;
            continue;
          }
          goto LABEL_627;
        }
        break;
      }
      if ((_DWORD)v19 == 4 && *(unsigned __int8 *)(v20 + v17 + v19) >= 0x10u)
      {
LABEL_627:
        v31 = "can't get first immediate for ";
        v32 = (unint64_t *)a2;
        v33 = 31;
        goto LABEL_28;
      }
      if (v16 <= v17 + v19 + 1)
        goto LABEL_22;
      v23 = 0;
      v24 = ~v19 + v18;
      if (v24 >= 5)
        v24 = 5;
      v25 = v24 - 1;
      v26 = v17 + v19;
      *(_QWORD *)a2 = v17 + v19 + 2;
      v27 = v17 - v16 + v19;
      v28 = v20 + v17;
      while (*(char *)(v28 + v23 + v19 + 1) < 0)
      {
        if (v25 == v23)
          goto LABEL_22;
        v29 = v26 + v23;
        v30 = v27 + v23++;
        *(_QWORD *)a2 = v29 + 3;
        if (v30 == -2)
          goto LABEL_226;
      }
      if ((_DWORD)v23 == 4 && *(unsigned __int8 *)(v28 + v23 + v19 + 1) >= 0x10u)
      {
LABEL_22:
        v31 = "can't get second immediate for ";
        v32 = (unint64_t *)a2;
        v33 = 32;
        goto LABEL_28;
      }
      goto LABEL_2;
    case 0x3F:
    case 0x40:
      v67 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
      {
        v68 = "can't parse reserved byte for grow_memory/current_memory";
        v69 = (unint64_t *)a2;
        v70 = 57;
      }
      else
      {
        *(_QWORD *)a2 = v67 + 1;
        if (!*(_BYTE *)(*(_QWORD *)(a2 + 8) + v67))
          goto LABEL_2;
        v68 = "reserved byte for grow_memory/current_memory must be zero";
        v69 = (unint64_t *)a2;
        v70 = 58;
      }
      goto LABEL_555;
    case 0x41:
      v226 = *(_QWORD *)(a2 + 16);
      v227 = *(_QWORD *)a2;
      v44 = v226 > *(_QWORD *)a2;
      v228 = v226 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_278;
      v229 = 0;
      v230 = *(_QWORD *)(a2 + 8);
      v231 = 5;
      if (v228 < 5)
        v231 = v228;
      v232 = v231 - 1;
      *(_QWORD *)a2 = v227 + 1;
      v233 = v230 + v227;
      v234 = v227 + 2;
      while (2)
      {
        v235 = *(char *)(v233 + v229);
        if (v235 < 0)
        {
          if (v232 != v229)
          {
            *(_QWORD *)a2 = v234 + v229++;
            if (v228 == v229)
              goto LABEL_226;
            continue;
          }
          goto LABEL_278;
        }
        break;
      }
      if ((_DWORD)v229 != 4)
        goto LABEL_2;
      if ((v235 & 0x40) == 0)
      {
        if (*(unsigned __int8 *)(v233 + v229) < 8u)
          goto LABEL_2;
        goto LABEL_278;
      }
      if ((v235 & 0xF8) != 0x78)
      {
LABEL_278:
        v31 = "can't get immediate for ";
        v32 = (unint64_t *)a2;
        v33 = 25;
        goto LABEL_28;
      }
      goto LABEL_2;
    case 0x42:
      v92 = *(_QWORD *)(a2 + 16);
      v93 = *(_QWORD *)a2;
      v44 = v92 > *(_QWORD *)a2;
      v94 = v92 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_544;
      v95 = 0;
      v96 = *(_QWORD *)(a2 + 8);
      v97 = 10;
      if (v94 < 0xA)
        v97 = v94;
      v98 = v97 - 1;
      *(_QWORD *)a2 = v93 + 1;
      v99 = v96 + v93;
      v100 = v93 + 2;
      while (2)
      {
        v101 = *(char *)(v99 + v95);
        if (v101 < 0)
        {
          if (v98 != v95)
          {
            *(_QWORD *)a2 = v100 + v95++;
            if (v94 == v95)
              goto LABEL_226;
            continue;
          }
        }
        else
        {
          if ((_DWORD)v95 != 9)
            goto LABEL_2;
          if ((v101 & 0x40) != 0)
          {
            if (*(_BYTE *)(v99 + v95) == 127)
              goto LABEL_2;
          }
          else if (!*(_BYTE *)(v99 + v95))
          {
            goto LABEL_2;
          }
        }
        break;
      }
LABEL_544:
      v31 = "can't get immediate for ";
      v32 = (unint64_t *)a2;
      v33 = 25;
      goto LABEL_28;
    case 0x43:
      v192 = *(_QWORD *)a2 + 4;
      if (*(_QWORD *)(a2 + 16) >= v192)
        goto LABEL_230;
      v68 = "can't parse 32-bit floating-point constant";
      goto LABEL_554;
    case 0x44:
      v192 = *(_QWORD *)a2 + 8;
      if (*(_QWORD *)(a2 + 16) >= v192)
      {
LABEL_230:
        *(_QWORD *)a2 = v192;
        goto LABEL_2;
      }
      v68 = "can't parse 64-bit floating-point constant";
LABEL_554:
      v69 = (unint64_t *)a2;
      v70 = 43;
      goto LABEL_555;
    case 0xD2:
      v204 = *(_QWORD *)(a2 + 16);
      v205 = *(_QWORD *)a2;
      v44 = v204 > *(_QWORD *)a2;
      v206 = v204 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_274;
      v207 = 0;
      v208 = *(_QWORD *)(a2 + 8);
      v209 = 5;
      if (v206 < 5)
        v209 = v206;
      v210 = v209 - 1;
      *(_QWORD *)a2 = v205 + 1;
      v211 = v208 + v205;
      v212 = v205 + 2;
      while (2)
      {
        if (*(char *)(v211 + v207) < 0)
        {
          if (v210 != v207)
          {
            *(_QWORD *)a2 = v212 + v207++;
            if (v206 == v207)
              goto LABEL_226;
            continue;
          }
        }
        else if ((_DWORD)v207 != 4 || *(unsigned __int8 *)(v211 + v207) < 0x10u)
        {
          goto LABEL_2;
        }
        break;
      }
LABEL_274:
      v31 = "can't get immediate for ";
      v32 = (unint64_t *)a2;
      v33 = 25;
LABEL_28:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::Wasm::OpType,WTF::ASCIILiteral>(v31, v32, v33, " in unreachable context", 24, &v469, *(float *)&a5);
      goto LABEL_356;
    case 0xD5:
    case 0xD6:
      v42 = *(_QWORD *)(a2 + 16);
      v43 = *(_QWORD *)a2;
      v44 = v42 > *(_QWORD *)a2;
      v45 = v42 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_646;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = *(_QWORD *)(a2 + 8);
      v50 = 5;
      if (v45 < 5)
        v50 = v45;
      v51 = v50 - 1;
      *(_QWORD *)a2 = v43 + 1;
      v52 = v49 + v43;
      v53 = v43 + 2;
      while (2)
      {
        v54 = *(char *)(v52 + v46);
        v48 |= (v54 & 0x7F) << v47;
        if (v54 < 0)
        {
          if (v51 != v46)
          {
            *(_QWORD *)a2 = v53 + v46;
            v47 += 7;
            if (v45 == ++v46)
              goto LABEL_226;
            continue;
          }
          goto LABEL_646;
        }
        break;
      }
      if ((_DWORD)v46 == 4 && *(unsigned __int8 *)(v52 + v46) >= 0x10u)
      {
LABEL_646:
        v68 = "can't get br / br_if's target";
        v69 = (unint64_t *)a2;
        v70 = 30;
        goto LABEL_555;
      }
      v80 = *(unsigned int *)(a2 + 852);
      if (v80 > v48)
        goto LABEL_2;
LABEL_602:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>("br / br_if's target ", (unint64_t *)a2, 21, v48, " exceeds control stack size ", 29, v80, &v469, *(float *)&a5);
      goto LABEL_356;
    case 0xFB:
      if (!BYTE2(dword_1ECF4C7B0))
      {
        v68 = "Wasm GC is not enabled";
        v69 = (unint64_t *)a2;
        v70 = 23;
        goto LABEL_555;
      }
      v170 = *(_QWORD *)(a2 + 16);
      v171 = *(_QWORD *)a2;
      v44 = v170 > *(_QWORD *)a2;
      v172 = v170 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_651;
      v173 = 0;
      v174 = 0;
      v175 = 0;
      v176 = *(_QWORD *)(a2 + 8);
      v177 = 5;
      if (v172 < 5)
        v177 = v172;
      v178 = v177 - 1;
      *(_QWORD *)a2 = v171 + 1;
      v179 = v176 + v171;
      v180 = v171 + 2;
      while (1)
      {
        v181 = *(char *)(v179 + v173);
        v175 |= (v181 & 0x7F) << v174;
        if ((v181 & 0x80000000) == 0)
          break;
        if (v178 == v173)
          goto LABEL_651;
        *(_QWORD *)a2 = v180 + v173;
        v174 += 7;
        if (v172 == ++v173)
          goto LABEL_226;
      }
      if ((_DWORD)v173 == 4 && *(unsigned __int8 *)(v179 + v173) >= 0x10u)
      {
LABEL_651:
        v68 = "can't parse extended GC opcode";
        v69 = (unint64_t *)a2;
        v70 = 31;
        goto LABEL_555;
      }
      if (BYTE5(qword_1ECF4C789))
      {
        v435 = atomic_load(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::onceKey);
        if (v435 != -1)
        {
          v469 = (void (**)(WTF::StringPrintStream *__hidden))&v472;
          v466 = (WTF *)&v469;
          std::__call_once(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::onceKey, &v466, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::singleton(void)::$_0 &&>>);
        }
        v436 = atomic_load(&JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::registerFlag);
        if (v436 != -1)
        {
          v469 = (void (**)(WTF::StringPrintStream *__hidden))&v472;
          v466 = (WTF *)&v469;
          std::__call_once(&JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::registerFlag, &v466, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::$_0 &&>>);
        }
        v437 = (unint64_t *)((char *)&JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter
                                  + 8 * v175
                                  + 704);
        do
          v438 = __ldaxr(v437);
        while (__stlxr(v438 + 1, v437));
      }
      break;
    case 0xFC:
      v145 = *(_QWORD *)(a2 + 16);
      v146 = *(_QWORD *)a2;
      v147 = v145 - *(_QWORD *)a2;
      if (v145 <= *(_QWORD *)a2)
        goto LABEL_642;
      v148 = 0;
      v149 = 0;
      v150 = 0;
      v151 = *(_QWORD *)(a2 + 8);
      if (v147 >= 5)
        v147 = 5;
      v152 = v147 - 1;
      *(_QWORD *)a2 = v146 + 1;
      while (2)
      {
        v153 = *(char *)(v151 + v146 + v148);
        v150 |= (v153 & 0x7F) << v149;
        if (v153 < 0)
        {
          if (v152 != v148)
          {
            *(_QWORD *)a2 = v146 + v148++ + 2;
            v149 += 7;
            if (!(v146 - v145 + v148))
              goto LABEL_226;
            continue;
          }
        }
        else if ((_DWORD)v148 != 4 || *(unsigned __int8 *)(v151 + v146 + v148) < 0x10u)
        {
          switch(v150)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
              goto LABEL_2;
            case 8:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseMemoryInitImmediates((uint64_t)&v469, (unint64_t *)a2, &v466, a4, *(float *)&a5);
              goto LABEL_206;
            case 9:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseDataSegmentIndex(&v469, (unint64_t *)a2, (unsigned int *)&v466, a4, *(float *)&a5);
              goto LABEL_206;
            case 10:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseMemoryCopyImmediates((uint64_t)&v469, (unint64_t *)a2, a4, *(float *)&a5);
              goto LABEL_377;
            case 11:
              if (v146 + v148 + 1 >= v145)
              {
                v68 = "can't parse auxiliary byte";
                v69 = (unint64_t *)a2;
                v70 = 27;
                goto LABEL_555;
              }
              v306 = v146 + v148;
              *(_QWORD *)a2 = v306 + 2;
              v307 = v306 + v151;
              v308 = *(unsigned __int8 *)(v307 + 1);
              if (!*(_BYTE *)(v307 + 1))
                goto LABEL_2;
              v309 = "auxiliary byte for memory.fill should be zero, but got ";
              v310 = (unint64_t *)a2;
              v311 = 56;
              break;
            case 12:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseElementIndex((uint64_t)&v469, (unint64_t *)a2, (unsigned int *)&v466, a4, *(float *)&a5);
              if ((_BYTE)v470)
                goto LABEL_356;
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseTableIndex((uint64_t)&v469, (unint64_t *)a2, (unsigned int *)&v472, v312, v313);
LABEL_377:
              if ((_BYTE)v470)
                goto LABEL_356;
              goto LABEL_2;
            case 13:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseElementIndex((uint64_t)&v469, (unint64_t *)a2, (unsigned int *)&v466, a4, *(float *)&a5);
              goto LABEL_206;
            case 14:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseTableCopyImmediates(&v469, (unint64_t *)a2, &v466, a4, *(float *)&a5);
              goto LABEL_206;
            case 15:
            case 16:
            case 17:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseTableIndex((uint64_t)&v469, (unint64_t *)a2, (unsigned int *)&v466, a4, *(float *)&a5);
              goto LABEL_206;
            default:
              v314 = "invalid extended 0xfc op ";
              goto LABEL_380;
          }
          goto LABEL_540;
        }
        break;
      }
LABEL_642:
      v68 = "can't parse extended 0xfc opcode";
LABEL_649:
      v69 = (unint64_t *)a2;
      v70 = 33;
      goto LABEL_555;
    case 0xFD:
      if (!HIBYTE(dword_1ECF4C7B0))
      {
        v68 = "wasm-simd is not enabled";
        goto LABEL_608;
      }
      v154 = *(_QWORD *)(a2 + 16);
      v155 = *(_QWORD *)a2;
      v156 = v154 - *(_QWORD *)a2;
      if (v154 <= *(_QWORD *)a2)
        goto LABEL_648;
      v157 = 0;
      v158 = 0;
      v150 = 0;
      v159 = *(_QWORD *)(a2 + 8);
      if (v156 >= 5)
        v156 = 5;
      v160 = v156 - 1;
      *(_QWORD *)a2 = v155 + 1;
      while (2)
      {
        v161 = *(char *)(v159 + v155);
        v150 |= (v161 & 0x7F) << v158;
        if (v161 < 0)
        {
          if (v160 != v157)
          {
            ++v157;
            *(_QWORD *)a2 = v155 + 2;
            ++v155;
            v158 += 7;
            if (v154 == v155)
              goto LABEL_226;
            continue;
          }
        }
        else if (v157 != 4 || *(unsigned __int8 *)(v159 + v155) < 0x10u)
        {
          switch(v150)
          {
            case 0:
              v433 = 40;
              goto LABEL_592;
            case 1:
              v433 = 50;
              goto LABEL_592;
            case 2:
              v433 = 14;
              goto LABEL_592;
            case 3:
              v433 = 13;
              goto LABEL_592;
            case 4:
              v433 = 61;
              goto LABEL_592;
            case 5:
              v433 = 27;
              goto LABEL_592;
            case 6:
              v433 = 37;
              goto LABEL_592;
            case 7:
              v433 = 34;
              goto LABEL_592;
            case 8:
              v433 = 56;
              goto LABEL_592;
            case 9:
              v433 = 35;
              goto LABEL_592;
            case 10:
              v433 = 70;
              goto LABEL_592;
            case 11:
              v433 = 7;
              goto LABEL_592;
            case 12:
              v192 = v155 + 17;
              if (v154 >= v155 + 17)
                goto LABEL_230;
              v68 = "can't parse 128-bit vector constant";
              goto LABEL_579;
            case 13:
              v432 = 41;
              goto LABEL_598;
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 163:
            case 164:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 177:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 195:
            case 196:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 209:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
              goto LABEL_2;
            case 21:
            case 22:
              v432 = 65;
              goto LABEL_598;
            case 23:
              v432 = 66;
LABEL_598:
              v434 = 1;
              goto LABEL_601;
            case 24:
            case 25:
              v432 = 65;
              goto LABEL_600;
            case 26:
              v432 = 66;
LABEL_600:
              v434 = 2;
              goto LABEL_601;
            case 27:
              v432 = 65;
              goto LABEL_572;
            case 28:
              v432 = 66;
LABEL_572:
              v434 = 3;
              goto LABEL_601;
            case 29:
              v432 = 65;
              goto LABEL_574;
            case 30:
              v432 = 66;
LABEL_574:
              v434 = 4;
              goto LABEL_601;
            case 31:
              v432 = 65;
              goto LABEL_581;
            case 32:
              v432 = 66;
LABEL_581:
              v434 = 5;
              goto LABEL_601;
            case 33:
              v432 = 65;
              goto LABEL_588;
            case 34:
              v432 = 66;
LABEL_588:
              v434 = 6;
              goto LABEL_601;
            case 84:
              v432 = 16;
              goto LABEL_595;
            case 85:
              v432 = 2;
              goto LABEL_595;
            case 86:
              v432 = 46;
              goto LABEL_595;
            case 87:
              v432 = 71;
              goto LABEL_595;
            case 88:
              v432 = 8;
              goto LABEL_595;
            case 89:
              v432 = 48;
              goto LABEL_595;
            case 90:
              v432 = 25;
              goto LABEL_595;
            case 91:
              v432 = 29;
LABEL_595:
              v434 = 0;
LABEL_601:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<false,void>(a1, (unint64_t *)a2, v432, v434, a4, a5, a6, a7);
              return;
            case 92:
              v433 = 64;
              goto LABEL_592;
            case 93:
              v433 = 36;
LABEL_592:
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v469, v433, (unint64_t *)a2, &v466, a4, *(float *)&a5);
              goto LABEL_206;
            case 256:
            case 257:
            case 258:
            case 259:
            case 260:
            case 261:
            case 262:
            case 263:
            case 264:
              if ((_BYTE)word_1ECF4C7B4)
                goto LABEL_2;
              v68 = "relaxed simd instructions not supported";
              v69 = (unint64_t *)a2;
              v70 = 40;
              goto LABEL_555;
            default:
              v314 = "invalid extended simd op ";
LABEL_380:
              v315 = (unint64_t *)a2;
              v316 = 26;
              goto LABEL_542;
          }
        }
        break;
      }
LABEL_648:
      v68 = "can't parse wasm extended opcode";
      goto LABEL_649;
    case 0xFE:
      v182 = *(_QWORD *)(a2 + 16);
      v183 = *(_QWORD *)a2;
      v184 = v182 - *(_QWORD *)a2;
      if (v182 <= *(_QWORD *)a2)
        goto LABEL_644;
      v185 = 0;
      v186 = 0;
      v187 = 0;
      v188 = *(_QWORD *)(a2 + 8);
      v189 = 5;
      if (v184 < 5)
        v189 = v182 - *(_QWORD *)a2;
      v190 = v189 - 1;
      *(_QWORD *)a2 = v183 + 1;
      while (1)
      {
        v191 = *(char *)(v188 + v183 + v185);
        v187 |= (v191 & 0x7F) << v186;
        if ((v191 & 0x80000000) == 0)
          break;
        if (v190 == v185)
          goto LABEL_644;
        *(_QWORD *)a2 = v183 + v185++ + 2;
        v186 += 7;
        if (v184 == v185)
        {
LABEL_226:
          __break(1u);
LABEL_227:
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseAnnotatedSelectImmediates(&v466, a2, (uint64_t)&v469, a4, *(float *)&a5);
          v41 = v467;
          if (!(_BYTE)v467)
          {
LABEL_207:
            *a1 = 0;
            goto LABEL_358;
          }
          goto LABEL_271;
        }
      }
      if ((_DWORD)v185 == 4 && *(unsigned __int8 *)(v188 + v183 + v185) >= 0x10u)
      {
LABEL_644:
        v68 = "can't parse atomic extended opcode";
        v69 = (unint64_t *)a2;
        v70 = 35;
        goto LABEL_555;
      }
      v247 = v183 + v185 + 1;
      v248 = v187 - 16 >= 0x3F && v187 >= 3;
      if (v248)
      {
        if (v187 == 3)
        {
          if (v247 >= v182)
          {
            v68 = "can't get flags";
            v69 = (unint64_t *)a2;
            v70 = 16;
            goto LABEL_555;
          }
          v429 = v183 + v185;
          *(_QWORD *)a2 = v429 + 2;
          v430 = v429 + v188;
          v308 = *(unsigned __int8 *)(v430 + 1);
          if (!*(_BYTE *)(v430 + 1))
            goto LABEL_2;
          v309 = "flags should be 0x0 but got ";
          v310 = (unint64_t *)a2;
          v311 = 29;
LABEL_540:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>(v309, v310, v311, v308, &v469, *(float *)&a5);
        }
        else
        {
          v314 = "invalid extended atomic op ";
          v315 = (unint64_t *)a2;
          v316 = 28;
          v150 = v187;
LABEL_542:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int>(v314, v315, v316, v150, &v469, *(float *)&a5);
        }
        goto LABEL_356;
      }
      if (*(_DWORD *)(*(_QWORD *)(a2 + 26480) + 104) == -1)
      {
        v262 = "atomic instruction without memory";
        v263 = 34;
LABEL_270:
        v469 = (void (**)(WTF::StringPrintStream *__hidden))v262;
        v470 = v263;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v466, (uint64_t)&v469, a4, *(float *)&a5);
LABEL_271:
        v135 = (void (**)(WTF::StringPrintStream *__hidden))v466;
        goto LABEL_357;
      }
      if (v182 <= v247)
        goto LABEL_653;
      v249 = 0;
      v250 = 0;
      v251 = 0;
      v252 = ~v185 + v184;
      v253 = 5;
      if (v252 < 5)
        v253 = v252;
      v254 = v183 + v185;
      *(_QWORD *)a2 = v183 + v185 + 2;
      v255 = v183 - v182;
      v256 = v188 + v183;
      v257 = v253 - 1;
      v258 = v255 + v185;
      while (1)
      {
        v259 = *(char *)(v256 + v249 + v185 + 1);
        v251 |= (v259 & 0x7F) << v250;
        if ((v259 & 0x80000000) == 0)
          break;
        if (v257 == v249)
          goto LABEL_653;
        v260 = v254 + v249;
        v261 = v258 + v249++;
        *(_QWORD *)a2 = v260 + 3;
        v250 += 7;
        if (v261 == -2)
          goto LABEL_226;
      }
      if ((_DWORD)v249 == 4 && *(unsigned __int8 *)(v256 + v249 + v185 + 1) >= 0x10u)
      {
LABEL_653:
        v68 = "can't get load alignment";
LABEL_608:
        v69 = (unint64_t *)a2;
        v70 = 25;
        goto LABEL_555;
      }
      if (v251 != JSC::Wasm::memoryLog2Alignment())
      {
        v439 = JSC::Wasm::memoryLog2Alignment();
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v251, " does not match against atomic op's natural alignment ", 55, 1 << v439, &v469, v440);
        *(_QWORD *)a1 = v469;
        a1[8] = 1;
        return;
      }
      v278 = *(_QWORD *)(a2 + 16);
      v279 = *(_QWORD *)a2;
      v44 = v278 > *(_QWORD *)a2;
      v280 = v278 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_319;
      v281 = 0;
      v282 = *(_QWORD *)(a2 + 8);
      v283 = 5;
      if (v280 < 5)
        v283 = v280;
      v284 = v283 - 1;
      *(_QWORD *)a2 = v279 + 1;
      v285 = v282 + v279;
      v286 = v279 + 2;
      while (*(char *)(v285 + v281) < 0)
      {
        if (v284 == v281)
          goto LABEL_319;
        *(_QWORD *)a2 = v286 + v281++;
        if (v280 == v281)
          goto LABEL_226;
      }
      if ((_DWORD)v281 == 4 && *(unsigned __int8 *)(v285 + v281) >= 0x10u)
      {
LABEL_319:
        v242 = "can't get first immediate for atomic ";
        v243 = " in unreachable context";
        v244 = (unint64_t *)a2;
        v245 = 38;
        v237 = v187;
        v246 = 24;
        goto LABEL_249;
      }
      goto LABEL_2;
    default:
      __break(0xC471u);
      JUMPOUT(0x198C87D64);
  }
  switch(v175)
  {
    case 0:
      v344 = "struct.new";
      v345 = (unint64_t *)a2;
      v346 = 11;
      goto LABEL_440;
    case 1:
      v344 = "struct.new_default";
      v345 = (unint64_t *)a2;
      v346 = 19;
LABEL_440:
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseStructTypeIndex(&v469, v345, &v466, v344, v346, a4, *(float *)&a5);
      goto LABEL_206;
    case 2:
      v356 = "struct.get";
      goto LABEL_421;
    case 5:
      v356 = "struct.set";
LABEL_421:
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseStructTypeIndexAndFieldIndex((uint64_t)&v469, (unint64_t *)a2, (unsigned int *)&v466, v356, 11, a4, *(float *)&a5);
      goto LABEL_206;
    case 6:
      v382 = *(_QWORD *)(a2 + 16);
      v383 = *(_QWORD *)a2;
      v44 = v382 > *(_QWORD *)a2;
      v384 = v382 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_506;
      v385 = 0;
      v386 = *(_QWORD *)(a2 + 8);
      v387 = 5;
      if (v384 < 5)
        v387 = v384;
      v388 = v387 - 1;
      *(_QWORD *)a2 = v383 + 1;
      v389 = v386 + v383;
      v390 = v383 + 2;
      while (2)
      {
        if (*(char *)(v389 + v385) < 0)
        {
          if (v388 != v385)
          {
            *(_QWORD *)a2 = v390 + v385++;
            if (v384 == v385)
              goto LABEL_226;
            continue;
          }
          goto LABEL_506;
        }
        break;
      }
      if ((_DWORD)v385 == 4 && *(unsigned __int8 *)(v389 + v385) >= 0x10u)
      {
LABEL_506:
        v68 = "can't get type index immediate for array.new in unreachable context";
        goto LABEL_640;
      }
      goto LABEL_2;
    case 7:
      v373 = *(_QWORD *)(a2 + 16);
      v374 = *(_QWORD *)a2;
      v44 = v373 > *(_QWORD *)a2;
      v375 = v373 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_503;
      v376 = 0;
      v377 = *(_QWORD *)(a2 + 8);
      v378 = 5;
      if (v375 < 5)
        v378 = v375;
      v379 = v378 - 1;
      *(_QWORD *)a2 = v374 + 1;
      v380 = v377 + v374;
      v381 = v374 + 2;
      while (2)
      {
        if (*(char *)(v380 + v376) < 0)
        {
          if (v379 != v376)
          {
            *(_QWORD *)a2 = v381 + v376++;
            if (v375 == v376)
              goto LABEL_226;
            continue;
          }
          goto LABEL_503;
        }
        break;
      }
      if ((_DWORD)v376 == 4 && *(unsigned __int8 *)(v380 + v376) >= 0x10u)
      {
LABEL_503:
        v68 = "can't get type index immediate for array.new_default in unreachable context";
        goto LABEL_528;
      }
      goto LABEL_2;
    case 11:
      v326 = *(_QWORD *)(a2 + 16);
      v327 = *(_QWORD *)a2;
      v44 = v326 > *(_QWORD *)a2;
      v328 = v326 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_481;
      v329 = 0;
      v330 = *(_QWORD *)(a2 + 8);
      v331 = 5;
      if (v328 < 5)
        v331 = v328;
      v332 = v331 - 1;
      *(_QWORD *)a2 = v327 + 1;
      v333 = v330 + v327;
      v334 = v327 + 2;
      while (2)
      {
        if (*(char *)(v333 + v329) < 0)
        {
          if (v332 != v329)
          {
            *(_QWORD *)a2 = v334 + v329++;
            if (v328 == v329)
              goto LABEL_226;
            continue;
          }
          goto LABEL_481;
        }
        break;
      }
      if ((_DWORD)v329 == 4 && *(unsigned __int8 *)(v333 + v329) >= 0x10u)
      {
LABEL_481:
        v68 = "can't get type index immediate for array.get in unreachable context";
        goto LABEL_640;
      }
      goto LABEL_2;
    case 12:
      v347 = *(_QWORD *)(a2 + 16);
      v348 = *(_QWORD *)a2;
      v44 = v347 > *(_QWORD *)a2;
      v349 = v347 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_487;
      v350 = 0;
      v351 = *(_QWORD *)(a2 + 8);
      v352 = 5;
      if (v349 < 5)
        v352 = v349;
      v353 = v352 - 1;
      *(_QWORD *)a2 = v348 + 1;
      v354 = v351 + v348;
      v355 = v348 + 2;
      while (2)
      {
        if (*(char *)(v354 + v350) < 0)
        {
          if (v353 != v350)
          {
            *(_QWORD *)a2 = v355 + v350++;
            if (v349 == v350)
              goto LABEL_226;
            continue;
          }
          goto LABEL_487;
        }
        break;
      }
      if ((_DWORD)v350 == 4 && *(unsigned __int8 *)(v354 + v350) >= 0x10u)
      {
LABEL_487:
        v68 = "can't get type index immediate for array.get_s in unreachable context";
        goto LABEL_488;
      }
      goto LABEL_2;
    case 13:
      v335 = *(_QWORD *)(a2 + 16);
      v336 = *(_QWORD *)a2;
      v44 = v335 > *(_QWORD *)a2;
      v337 = v335 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_484;
      v338 = 0;
      v339 = *(_QWORD *)(a2 + 8);
      v340 = 5;
      if (v337 < 5)
        v340 = v337;
      v341 = v340 - 1;
      *(_QWORD *)a2 = v336 + 1;
      v342 = v339 + v336;
      v343 = v336 + 2;
      while (2)
      {
        if (*(char *)(v342 + v338) < 0)
        {
          if (v341 != v338)
          {
            *(_QWORD *)a2 = v343 + v338++;
            if (v337 == v338)
              goto LABEL_226;
            continue;
          }
        }
        else if ((_DWORD)v338 != 4 || *(unsigned __int8 *)(v342 + v338) < 0x10u)
        {
          goto LABEL_2;
        }
        break;
      }
LABEL_484:
      v68 = "can't get type index immediate for array.get_u in unreachable context";
LABEL_488:
      v69 = (unint64_t *)a2;
      v70 = 70;
      goto LABEL_555;
    case 14:
      v317 = *(_QWORD *)(a2 + 16);
      v318 = *(_QWORD *)a2;
      v44 = v317 > *(_QWORD *)a2;
      v319 = v317 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_478;
      v320 = 0;
      v321 = *(_QWORD *)(a2 + 8);
      v322 = 5;
      if (v319 < 5)
        v322 = v319;
      v323 = v322 - 1;
      *(_QWORD *)a2 = v318 + 1;
      v324 = v321 + v318;
      v325 = v318 + 2;
      while (2)
      {
        if (*(char *)(v324 + v320) < 0)
        {
          if (v323 != v320)
          {
            *(_QWORD *)a2 = v325 + v320++;
            if (v319 == v320)
              goto LABEL_226;
            continue;
          }
        }
        else if ((_DWORD)v320 != 4 || *(unsigned __int8 *)(v324 + v320) < 0x10u)
        {
          goto LABEL_2;
        }
        break;
      }
LABEL_478:
      v68 = "can't get type index immediate for array.set in unreachable context";
LABEL_640:
      v69 = (unint64_t *)a2;
      v70 = 68;
      goto LABEL_555;
    case 15:
    case 28:
    case 29:
    case 30:
      goto LABEL_2;
    case 16:
      v357 = *(_QWORD *)(a2 + 16);
      v358 = *(_QWORD *)a2;
      v44 = v357 > *(_QWORD *)a2;
      v359 = v357 - *(_QWORD *)a2;
      if (!v44)
        goto LABEL_491;
      v360 = 0;
      v361 = *(_QWORD *)(a2 + 8);
      v362 = 5;
      if (v359 < 5)
        v362 = v359;
      v363 = v362 - 1;
      *(_QWORD *)a2 = v358 + 1;
      v364 = v361 + v358;
      v365 = v358 + 2;
      while (2)
      {
        if (*(char *)(v364 + v360) < 0)
        {
          if (v363 != v360)
          {
            *(_QWORD *)a2 = v365 + v360++;
            if (v359 == v360)
              goto LABEL_226;
            continue;
          }
          goto LABEL_491;
        }
        break;
      }
      if ((_DWORD)v360 == 4 && *(unsigned __int8 *)(v364 + v360) >= 0x10u)
      {
LABEL_491:
        v68 = "can't get type index immediate for array.fill in unreachable context";
        v69 = (unint64_t *)a2;
        v70 = 69;
        goto LABEL_555;
      }
      goto LABEL_2;
    case 17:
      v366 = *(_QWORD *)(a2 + 16);
      v367 = *(_QWORD *)a2;
      v368 = v366 - *(_QWORD *)a2;
      if (v366 <= *(_QWORD *)a2)
        goto LABEL_656;
      v369 = 0;
      v370 = *(_QWORD *)(a2 + 8);
      v371 = 5;
      if (v368 < 5)
        v371 = v366 - *(_QWORD *)a2;
      v372 = v371 - 1;
      *(_QWORD *)a2 = v367 + 1;
      while (2)
      {
        if (*(char *)(v370 + v367 + v369) < 0)
        {
          if (v372 != v369)
          {
            *(_QWORD *)a2 = v367 + v369++ + 2;
            if (v368 == v369)
              goto LABEL_226;
            continue;
          }
          goto LABEL_656;
        }
        break;
      }
      if ((_DWORD)v369 == 4 && *(unsigned __int8 *)(v370 + v367 + v369) >= 0x10u)
      {
LABEL_656:
        v68 = "can't get first type index immediate for array.copy in unreachable context";
        v69 = (unint64_t *)a2;
        v70 = 75;
        goto LABEL_555;
      }
      if (v366 > v367 + v369 + 1)
      {
        v405 = 0;
        v406 = ~v369 + v368;
        if (v406 >= 5)
          v406 = 5;
        v407 = v406 - 1;
        v408 = v367 + v369;
        *(_QWORD *)a2 = v367 + v369 + 2;
        v409 = v367 - v366 + v369;
        v410 = v370 + v367;
        while (*(char *)(v410 + v405 + v369 + 1) < 0)
        {
          if (v407 == v405)
            goto LABEL_527;
          v411 = v408 + v405;
          v412 = v409 + v405++;
          *(_QWORD *)a2 = v411 + 3;
          if (v412 == -2)
            goto LABEL_226;
        }
        if ((_DWORD)v405 != 4 || *(unsigned __int8 *)(v410 + v405 + v369 + 1) < 0x10u)
          goto LABEL_2;
      }
LABEL_527:
      v68 = "can't get second type index immediate for array.copy in unreachable context";
LABEL_528:
      v69 = (unint64_t *)a2;
      v70 = 76;
LABEL_555:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v68, v69, v70, &v469, *(float *)&a5);
LABEL_356:
      v135 = v469;
LABEL_357:
      *(_QWORD *)a1 = v135;
      v41 = 1;
LABEL_358:
      a1[8] = v41;
      return;
    case 18:
      v398 = *(_QWORD *)(a2 + 16);
      v399 = *(_QWORD *)a2;
      v400 = v398 - *(_QWORD *)a2;
      if (v398 <= *(_QWORD *)a2)
        goto LABEL_660;
      v401 = 0;
      v402 = *(_QWORD *)(a2 + 8);
      v403 = 5;
      if (v400 < 5)
        v403 = v398 - *(_QWORD *)a2;
      v404 = v403 - 1;
      *(_QWORD *)a2 = v399 + 1;
      while (2)
      {
        if (*(char *)(v402 + v399 + v401) < 0)
        {
          if (v404 != v401)
          {
            *(_QWORD *)a2 = v399 + v401++ + 2;
            if (v400 == v401)
              goto LABEL_226;
            continue;
          }
          goto LABEL_660;
        }
        break;
      }
      if ((_DWORD)v401 == 4 && *(unsigned __int8 *)(v402 + v399 + v401) >= 0x10u)
      {
LABEL_660:
        v68 = "can't get first type index immediate for array.init_data in unreachable context";
        goto LABEL_661;
      }
      if (v398 <= v399 + v401 + 1)
        goto LABEL_534;
      v421 = 0;
      v422 = ~v401 + v400;
      if (v422 >= 5)
        v422 = 5;
      v423 = v422 - 1;
      v424 = v399 + v401;
      *(_QWORD *)a2 = v399 + v401 + 2;
      v425 = v399 - v398 + v401;
      v426 = v402 + v399;
      while (*(char *)(v426 + v421 + v401 + 1) < 0)
      {
        if (v423 == v421)
          goto LABEL_534;
        v427 = v424 + v421;
        v428 = v425 + v421++;
        *(_QWORD *)a2 = v427 + 3;
        if (v428 == -2)
          goto LABEL_226;
      }
      if ((_DWORD)v421 == 4 && *(unsigned __int8 *)(v426 + v421 + v401 + 1) >= 0x10u)
      {
LABEL_534:
        v68 = "can't get second type index immediate for array.init_data in unreachable context";
        goto LABEL_535;
      }
      goto LABEL_2;
    case 19:
      v391 = *(_QWORD *)(a2 + 16);
      v392 = *(_QWORD *)a2;
      v393 = v391 - *(_QWORD *)a2;
      if (v391 <= *(_QWORD *)a2)
        goto LABEL_658;
      v394 = 0;
      v395 = *(_QWORD *)(a2 + 8);
      v396 = 5;
      if (v393 < 5)
        v396 = v391 - *(_QWORD *)a2;
      v397 = v396 - 1;
      *(_QWORD *)a2 = v392 + 1;
      while (2)
      {
        if (*(char *)(v395 + v392 + v394) < 0)
        {
          if (v397 != v394)
          {
            *(_QWORD *)a2 = v392 + v394++ + 2;
            if (v393 == v394)
              goto LABEL_226;
            continue;
          }
          goto LABEL_658;
        }
        break;
      }
      if ((_DWORD)v394 == 4 && *(unsigned __int8 *)(v395 + v392 + v394) >= 0x10u)
      {
LABEL_658:
        v68 = "can't get first type index immediate for array.init_elem in unreachable context";
LABEL_661:
        v69 = (unint64_t *)a2;
        v70 = 80;
        goto LABEL_555;
      }
      if (v391 <= v392 + v394 + 1)
        goto LABEL_531;
      v413 = 0;
      v414 = ~v394 + v393;
      if (v414 >= 5)
        v414 = 5;
      v415 = v414 - 1;
      v416 = v392 + v394;
      *(_QWORD *)a2 = v392 + v394 + 2;
      v417 = v392 - v391 + v394;
      v418 = v395 + v392;
      while (*(char *)(v418 + v413 + v394 + 1) < 0)
      {
        if (v415 == v413)
          goto LABEL_531;
        v419 = v416 + v413;
        v420 = v417 + v413++;
        *(_QWORD *)a2 = v419 + 3;
        if (v420 == -2)
          goto LABEL_226;
      }
      if ((_DWORD)v413 == 4 && *(unsigned __int8 *)(v418 + v413 + v394 + 1) >= 0x10u)
      {
LABEL_531:
        v68 = "can't get second type index immediate for array.init_elem in unreachable context";
LABEL_535:
        v69 = (unint64_t *)a2;
        v70 = 81;
        goto LABEL_555;
      }
      goto LABEL_2;
    case 20:
    case 21:
    case 22:
    case 23:
      if ((v175 & 0xFFFFFFFE) == 0x16)
        v264 = "ref.cast";
      else
        v264 = "ref.test";
      if (!BYTE1(dword_1ECF4C7B0))
        goto LABEL_550;
      v265 = *(_QWORD *)(a2 + 16);
      v266 = *(_QWORD *)a2;
      v267 = v265 - *(_QWORD *)a2;
      if (v265 <= *(_QWORD *)a2)
        goto LABEL_550;
      v268 = 0;
      v269 = 0;
      v270 = *(_QWORD *)(a2 + 26480);
      v271 = *(_QWORD *)(a2 + 8);
      v272 = 5;
      if (v267 < 5)
        v272 = v267;
      v273 = v272 - 1;
      *(_QWORD *)a2 = v266 + 1;
      v274 = v271 + v266;
      v275 = v266 + 2;
      v276 = 7;
      while (2)
      {
        v277 = *(char *)(v274 + v268);
        v269 |= (v277 & 0x7F) << (v276 - 7);
        if (v277 < 0)
        {
          if (v273 != v268)
          {
            *(_QWORD *)a2 = v275 + v268;
            v276 += 7;
            if (v267 == ++v268)
              goto LABEL_226;
            continue;
          }
          goto LABEL_550;
        }
        break;
      }
      if ((_DWORD)v268 != 4)
        goto LABEL_360;
      if ((v277 & 0x40) != 0)
      {
        if ((v277 & 0xF8) != 0x78)
          goto LABEL_550;
LABEL_360:
        if (v276 <= 0x1F && (v277 & 0x40) != 0)
        {
          v269 |= -1 << v276;
          goto LABEL_549;
        }
      }
      else if (*(unsigned __int8 *)(v274 + v268) > 7u)
      {
LABEL_550:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get heap type for ", (unint64_t *)a2, 25, v264, 9, &v469, *(float *)&a5);
        goto LABEL_356;
      }
      if ((v269 & 0x80000000) == 0)
      {
        if (v269 >= *(_DWORD *)(v270 + 100)
          && (!*(_BYTE *)(a2 + 32) || v269 < *(_DWORD *)(a2 + 36) || v269 >= *(_DWORD *)(a2 + 40)))
        {
          goto LABEL_550;
        }
LABEL_2:
        *a1 = 0;
        a1[8] = 0;
        return;
      }
LABEL_549:
      v431 = (int)v269 + 22;
      if (v431 > 9 || ((1 << v431) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
        goto LABEL_550;
      goto LABEL_2;
    default:
      v314 = "invalid extended GC op ";
      v315 = (unint64_t *)a2;
      v316 = 24;
      v150 = v175;
      goto LABEL_542;
  }
}

#error "198C886FC: too big function (funcsize=0)"

uint64_t WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression>::move(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  JSC::HandleSet *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  JSC::HandleSet *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  if (result != a2)
  {
    v8 = (_QWORD *)(a3 + 40);
    do
    {
      *(_OWORD *)(v8 - 5) = *(_OWORD *)result;
      v9 = *(_OWORD *)(result + 16);
      *(v8 - 1) = *(_QWORD *)(result + 32);
      *v8 = 0;
      *(_OWORD *)(v8 - 3) = v9;
      v10 = *(_QWORD *)(result + 40);
      if (v10)
      {
        v11 = *(JSC::HandleSet **)(((v10 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v12 = (_QWORD *)*((_QWORD *)v11 + 5);
        if (!v12)
        {
          v28 = result;
          v26 = v8;
          v27 = a2;
          v25 = v11;
          JSC::HandleSet::grow(v11, a2, a3, a4, a5, a6, a7, a8);
          v11 = v25;
          v8 = v26;
          result = v28;
          a2 = v27;
          v12 = (_QWORD *)*((_QWORD *)v25 + 5);
        }
        *((_QWORD *)v11 + 5) = *v12;
        v12[2] = 0;
        v13 = v12 + 2;
        *v12 = 0;
        v12[1] = 0;
        *v8 = v12 + 2;
        v14 = *(_QWORD **)(result + 40);
        if (v14)
          v14 = (_QWORD *)*v14;
        v15 = (unint64_t)(v13 - 2);
        if ((v14 != 0) != (*v13 != 0))
        {
          if (v14)
          {
            v16 = *(unint64_t **)((v15 & 0xFFFFFFFFFFFFF000) + 0x10);
            v17 = v16[3];
            v16 += 3;
            *(_QWORD *)v15 = v17;
            *(v13 - 1) = v16;
            *v16 = v15;
            *(_QWORD *)(v17 + 8) = v15;
          }
          else
          {
            v24 = *(_QWORD *)v15;
            v23 = (_QWORD *)*(v13 - 1);
            *v23 = *(_QWORD *)v15;
            *(_QWORD *)(v24 + 8) = v23;
            *(_QWORD *)v15 = 0;
            *(_QWORD *)(v15 + 8) = 0;
            v13 = (_QWORD *)*v8;
          }
        }
        *v13 = v14;
        v18 = *(_QWORD *)(result + 40);
        if (v18)
        {
          v19 = (uint64_t *)(v18 - 16);
          v20 = *(_QWORD *)(((v18 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v21 = *(uint64_t **)(v18 - 8);
          if (v21)
          {
            v22 = *v19;
            *v21 = *v19;
            *(_QWORD *)(v22 + 8) = v21;
            *v19 = 0;
            v19[1] = 0;
          }
          *v19 = *(_QWORD *)(v20 + 40);
          *(_QWORD *)(v20 + 40) = v19;
          *(_QWORD *)(result + 40) = 0;
        }
      }
      result += 48;
      v8 += 6;
    }
    while (result != a2);
  }
  return result;
}

unint64_t WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || (v11 = (void *)(v10 + 1584 * *(unsigned int *)(a1 + 12)), (unint64_t)v11 <= a3))
  {
    v17 = *(unsigned int *)(a1 + 8);
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= a2)
      v19 = a2;
    if (v19 > v17)
    {
      v20 = *(_DWORD *)(a1 + 12);
      if (v19 < 0x11)
      {
        v22 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
      }
      else
      {
        if (v19 >= 0x295FAE)
        {
          __break(0xC471u);
          JUMPOUT(0x198CA4350);
        }
        v21 = 1584 * v19;
        v22 = WTF::fastMalloc((WTF *)(1584 * v19));
        *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF0) / 0x630;
        *(_QWORD *)a1 = v22;
      }
      WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry>::move(v10, (void *)(v10 + 1584 * v20), v22, a4, a5, a6, a7, a8);
      if (a1 + 16 != v10 && v10)
      {
        if (*(_QWORD *)a1 == v10)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v10, v23, v24, v25, v26, v27, v28, v29);
      }
    }
  }
  else
  {
    v12 = *(unsigned int *)(a1 + 8);
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= a2)
      v14 = a2;
    if (v14 <= v12)
    {
      v30 = *(_QWORD *)a1;
    }
    else
    {
      if (v14 < 0x11)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
      }
      else
      {
        if (v14 >= 0x295FAE)
        {
          __break(0xC471u);
          JUMPOUT(0x198CA4358);
        }
        v15 = 1584 * v14;
        v16 = WTF::fastMalloc((WTF *)(1584 * v14));
        *(_DWORD *)(a1 + 8) = (v15 & 0xFFFFFFF0) / 0x630;
        *(_QWORD *)a1 = v16;
      }
      WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry>::move(v10, v11, v16, a4, a5, a6, a7, a8);
      v30 = *(_QWORD *)a1;
      if (a1 + 16 != v10 && v10)
      {
        if (v30 == v10)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v10, v31, v32, v33, v34, v35, v36, v37);
        v30 = *(_QWORD *)a1;
      }
    }
    return v30 + 16 * ((uint64_t)(v8 - v10) >> 4);
  }
  return v8;
}

uint64_t WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry>::move(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;

  if ((void *)result != a2)
  {
    v10 = result;
    v11 = 0;
    do
    {
      v12 = v10 + v11;
      v13 = a3 + v11;
      v14 = a3 + v11 + 16;
      *(_QWORD *)v13 = v14;
      *(_QWORD *)(v13 + 8) = 16;
      v16 = v10 + v11 + 16;
      v15 = *(_QWORD *)(v10 + v11);
      if (v16 == v15)
      {
        WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression>::move(v15, v15 + 48 * *(unsigned int *)(v12 + 12), v14, a4, a5, a6, a7, a8);
      }
      else
      {
        *(_QWORD *)v12 = v16;
        *(_QWORD *)v13 = v15;
        v17 = *(_DWORD *)(v12 + 8);
        *(_DWORD *)(v12 + 8) = 16;
        *(_DWORD *)(v13 + 8) = v17;
      }
      v18 = v10 + v11;
      v19 = *(_DWORD *)(v10 + v11 + 12);
      *(_DWORD *)(v10 + v11 + 12) = 0;
      *(_DWORD *)(v13 + 12) = v19;
      v20 = a3 + v11;
      v21 = a3 + v11 + 800;
      *(_QWORD *)(v20 + 784) = v21;
      *(_QWORD *)(v20 + 792) = 16;
      v22 = *(_QWORD *)(v10 + v11 + 784);
      v23 = v10 + v11 + 800;
      if (v23 == v22)
      {
        WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression>::move(v22, v22 + 48 * *(unsigned int *)(v18 + 796), v21, a4, a5, a6, a7, a8);
      }
      else
      {
        *(_QWORD *)(v18 + 784) = v23;
        *(_QWORD *)(v20 + 784) = v22;
        v24 = *(_DWORD *)(v18 + 792);
        *(_DWORD *)(v18 + 792) = 16;
        *(_DWORD *)(v20 + 792) = v24;
      }
      v25 = *(_DWORD *)(v10 + v11 + 796);
      *(_DWORD *)(v10 + v11 + 796) = 0;
      *(_DWORD *)(v20 + 796) = v25;
      *(_OWORD *)(a3 + v11 + 1568) = *(_OWORD *)(v10 + v11 + 1568);
      result = JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry(v10 + v11, a2, v21, a4, a5, a6, a7, a8);
      v11 += 1584;
    }
    while ((void *)(v10 + v11) != a2);
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [37]>(void (***a1)(WTF::StringPrintStream *__hidden this))
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF::PrintStream *v11;
  float v12;
  double v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v40 = off_1E3572250;
  v41 = (WTF *)v43;
  v42 = xmmword_199122F80;
  v43[0] = 0;
  v44 = off_1E3572250;
  v45 = (WTF *)v47;
  v46 = xmmword_199122F80;
  v47[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "else block isn't associated to an if");
  v44[5]((WTF::StringPrintStream *)&v44);
  v9 = v45;
  if (!v45)
  {
    v38 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v45, v46, (uint64_t *)&v38);
  v9 = v45;
  if (v45 != (WTF *)v47)
LABEL_5:
    WTF::fastFree((unint64_t)v9, v2, v3, v4, v5, v6, v7, v8);
  v10 = (WTF *)((uint64_t (*)(_QWORD))v40[4])(&v40);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v10 + 32))(v10);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v44, v12);
  WTF::printExpectedCStringHelper(v11, "StringView", &v44);
  if ((_DWORD)v45 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v39, &v44);
  v13 = (*(double (**)(WTF *))(*(_QWORD *)v10 + 40))(v10);
  WTF::printInternal(v10, (WTF::PrintStream *)&v38, v14, v15, v16, v17, v18, v19, v13, v20);
  v40[5]((WTF::StringPrintStream *)&v40);
  v28 = v38;
  v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v29 = v41;
  if (v41)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v41, v42, (uint64_t *)&v44);
    v29 = v41;
    *a1 = v44;
    if (v29 == (WTF *)v43)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseExceptionIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse exception index", a2, 28, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(unsigned int *)(a2[3310] + 84) + (unint64_t)*(unsigned int *)(a2[3310] + 68);
  if (v18 <= v11)
  {
    v22[0] = "exception index ";
    v22[1] = 17;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [38]>(void (***a1)(WTF::StringPrintStream *__hidden this))
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF::PrintStream *v11;
  float v12;
  double v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v40 = off_1E3572250;
  v41 = (WTF *)v43;
  v42 = xmmword_199122F80;
  v43[0] = 0;
  v44 = off_1E3572250;
  v45 = (WTF *)v47;
  v46 = xmmword_199122F80;
  v47[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "catch block isn't associated to a try");
  v44[5]((WTF::StringPrintStream *)&v44);
  v9 = v45;
  if (!v45)
  {
    v38 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v45, v46, (uint64_t *)&v38);
  v9 = v45;
  if (v45 != (WTF *)v47)
LABEL_5:
    WTF::fastFree((unint64_t)v9, v2, v3, v4, v5, v6, v7, v8);
  v10 = (WTF *)((uint64_t (*)(_QWORD))v40[4])(&v40);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v10 + 32))(v10);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v44, v12);
  WTF::printExpectedCStringHelper(v11, "StringView", &v44);
  if ((_DWORD)v45 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v39, &v44);
  v13 = (*(double (**)(WTF *))(*(_QWORD *)v10 + 40))(v10);
  WTF::printInternal(v10, (WTF::PrintStream *)&v38, v14, v15, v16, v17, v18, v19, v13, v20);
  v40[5]((WTF::StringPrintStream *)&v40);
  v28 = v38;
  v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v29 = v41;
  if (v41)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v41, v42, (uint64_t *)&v44);
    v29 = v41;
    *a1 = v44;
    if (v29 == (WTF *)v43)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseDelegateTarget(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, double a5, float a6)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  unint64_t v24;
  unint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)a2;
  v9 = v7 > *(_QWORD *)a2;
  v10 = v7 - *(_QWORD *)a2;
  if (!v9)
    goto LABEL_20;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = *(_QWORD *)(a2 + 8);
  v16 = 5;
  if (v10 < 5)
    v16 = v10;
  v17 = v16 - 1;
  *(_QWORD *)a2 = v8 + 1;
  v18 = v15 + v8;
  v19 = v8 + 2;
  while (1)
  {
    v20 = *(char *)(v18 + v12);
    v14 |= (v20 & 0x7F) << v13;
    if ((v20 & 0x80000000) == 0)
      break;
    if (v17 == v12)
      goto LABEL_20;
    LOBYTE(v20) = v19 + v12;
    *(_QWORD *)a2 = v19 + v12;
    v13 += 7;
    if (v10 == ++v12)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v12 == 4 && v20 >= 0x10u)
  {
LABEL_20:
    v25 = (unint64_t *)a2;
    v26 = "can't get delegate target";
    v27 = 26;
LABEL_21:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v26, v25, v27, &v28, a6);
    goto LABEL_18;
  }
  v21 = *(_DWORD *)(a2 + 852);
  if (a4 && (v22 = a4 - 1, v23 = __CFADD__(v21, v22), v21 += v22, v23) || (v24 = v21 - 1, HIDWORD(v24)))
  {
    v25 = (unint64_t *)a2;
    v26 = "invalid control stack size";
    v27 = 27;
    goto LABEL_21;
  }
  if (v14 >= v24)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>("delegate target ", (unint64_t *)a2, 17, v14, " exceeds control stack size ", 29, v24, &v28, a6);
LABEL_18:
    *(_QWORD *)a1 = v28;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v14;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t result;

  v8 = a2[3];
  if (!(_DWORD)v8)
    goto LABEL_10;
  v11 = v8 - 1;
  v12 = *(_QWORD *)a2;
  v13 = *(_QWORD *)a2 + 1584 * (v8 - 1);
  v14 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 16;
  v15 = *(_QWORD *)v13;
  if (*(_QWORD *)v13 == v13 + 16)
  {
    WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression>::move(v15, v15 + 48 * *(unsigned int *)(v13 + 12), v14, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)v13 = v13 + 16;
    *(_QWORD *)a1 = v15;
    v16 = *(_DWORD *)(v13 + 8);
    *(_DWORD *)(v13 + 8) = 16;
    *(_DWORD *)(a1 + 8) = v16;
  }
  v17 = *(_DWORD *)(v13 + 12);
  *(_DWORD *)(v13 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v17;
  v18 = v12 + 1584 * v11;
  v19 = a1 + 800;
  *(_QWORD *)(a1 + 784) = a1 + 800;
  *(_QWORD *)(a1 + 792) = 16;
  v20 = *(_QWORD *)(v18 + 784);
  if (v20 == v18 + 800)
  {
    WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression>::move(v20, v20 + 48 * *(unsigned int *)(v12 + 1584 * v11 + 796), v19, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v18 + 784) = v18 + 800;
    *(_QWORD *)(a1 + 784) = v20;
    v21 = v12 + 1584 * v11;
    v22 = *(_DWORD *)(v21 + 792);
    *(_DWORD *)(v21 + 792) = 16;
    *(_DWORD *)(a1 + 792) = v22;
  }
  v23 = v12 + 1584 * v11;
  v24 = *(_DWORD *)(v23 + 796);
  *(_DWORD *)(v23 + 796) = 0;
  *(_DWORD *)(a1 + 796) = v24;
  *(_OWORD *)(a1 + 1568) = *(_OWORD *)(v23 + 1568);
  v25 = a2[3];
  if (!(_DWORD)v25)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198CA4C64);
  }
  v26 = v25 - 1;
  result = JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::ControlEntry::~ControlEntry(*(_QWORD *)a2 + 1584 * (v25 - 1), a2, v19, a4, a5, a6, a7, a8);
  a2[3] = v26;
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<char [35]>(void (***a1)(WTF::StringPrintStream *__hidden this))
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF::PrintStream *v11;
  float v12;
  double v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  WTF *v41;
  __int128 v42;
  _BYTE v43[128];
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v40 = off_1E3572250;
  v41 = (WTF *)v43;
  v42 = xmmword_199122F80;
  v43[0] = 0;
  v44 = off_1E3572250;
  v45 = (WTF *)v47;
  v46 = xmmword_199122F80;
  v47[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "delegate isn't associated to a try");
  v44[5]((WTF::StringPrintStream *)&v44);
  v9 = v45;
  if (!v45)
  {
    v38 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v45, v46, (uint64_t *)&v38);
  v9 = v45;
  if (v45 != (WTF *)v47)
LABEL_5:
    WTF::fastFree((unint64_t)v9, v2, v3, v4, v5, v6, v7, v8);
  v10 = (WTF *)((uint64_t (*)(_QWORD))v40[4])(&v40);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v10 + 32))(v10);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v44, v12);
  WTF::printExpectedCStringHelper(v11, "StringView", &v44);
  if ((_DWORD)v45 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v45])(&v39, &v44);
  v13 = (*(double (**)(WTF *))(*(_QWORD *)v10 + 40))(v10);
  WTF::printInternal(v10, (WTF::PrintStream *)&v38, v14, v15, v16, v17, v18, v19, v13, v20);
  v40[5]((WTF::StringPrintStream *)&v40);
  v28 = v38;
  v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v29 = v41;
  if (v41)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v41, v42, (uint64_t *)&v44);
    v29 = v41;
    *a1 = v44;
    if (v29 == (WTF *)v43)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseBlockSignatureAndNotifySIMDUseIfNeeded(_BYTE *a1, unint64_t *a2, _QWORD *a3, double a4, float a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  JSC::Wasm::TypeDefinition *v33;
  int v34;
  char *String;
  uint64_t v36;
  float v37;
  char *v38;
  unint64_t *v39;
  uint64_t v40;
  unsigned int *v41;
  WTF *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t CachedUnrolling;
  uint64_t v51;
  uint64_t v52;
  const JSC::Wasm::Type *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  const JSC::Wasm::TypeDefinition *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;

  v8 = a2[3310];
  v9 = *a2;
  v10 = a2[2];
  if (*a2 >= v10 || (v11 = *(char *)(a2[1] + v9), (v11 & 0x80000000) != 0))
  {
LABEL_20:
    v19 = v10 > v9;
    v20 = v10 - v9;
    if (!v19)
      goto LABEL_47;
    v21 = 0;
    v22 = 0;
    v23 = a2[1];
    v24 = 10;
    if (v20 < 0xA)
      v24 = v20;
    v25 = v24 - 1;
    *a2 = v9 + 1;
    v26 = v23 + v9;
    v27 = v9 + 2;
    v28 = 7;
    while (1)
    {
      v29 = *(unsigned __int8 *)(v26 + v21);
      v22 |= (unint64_t)(v29 & 0x7F) << (v28 - 7);
      if ((v29 & 0x80) == 0)
        break;
      if (v25 == v21)
        goto LABEL_47;
      v29 = v27 + v21;
      *a2 = v27 + v21;
      v28 += 7;
      if (v20 == ++v21)
      {
        __break(1u);
        break;
      }
    }
    if ((_DWORD)v21 == 9)
    {
      if ((v29 & 0x40) == 0)
      {
        if (v29)
          goto LABEL_47;
LABEL_33:
        if ((v22 & 0x8000000000000000) == 0)
        {
          v31 = *(unsigned int *)(v8 + 100);
          if (v22 >= v31)
          {
            JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,long long,WTF::ASCIILiteral,unsigned int>("Block-like instruction signature index is out of bounds. Index: ", a2, 65, v22, " type index space: ", 20, v31, &v64, a5);
            goto LABEL_42;
          }
          v32 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 8 * v22);
          if (*(_DWORD *)(v32 + 32) == 4)
          {
            v41 = *(unsigned int **)(v32 + 8);
            v42 = *(WTF **)v41;
            v33 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v41 + 8) + 8 * v41[2]);
            if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v33))
            {
              CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v32, v43, v44, v45, v46, v47, v48, v49);
              if (v57)
              {
                v33 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
              }
              else
              {
                v33 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v33, v42, v51, v52, v53, v54, v55, v56);
                JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v32, v33, v58, v59, v60, v61, v62, v63);
              }
            }
          }
          else
          {
            v33 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v8 + 88) + 8 * v22);
          }
          v34 = *((_DWORD *)v33 + 8);
          if (v34 == 5)
          {
            v33 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v33 + 1);
            if (!*((_DWORD *)v33 + 8))
              goto LABEL_39;
          }
          else if (!v34)
          {
LABEL_39:
            *a3 = (char *)v33 + 8;
            goto LABEL_8;
          }
          v38 = "Block-like instruction signature index does not refer to a function type definition";
          v39 = a2;
          v40 = 84;
          goto LABEL_44;
        }
LABEL_43:
        v38 = "Block-like instruction signature index is negative";
        v39 = a2;
        v40 = 51;
LABEL_44:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v38, v39, v40, &v64, a5);
        goto LABEL_42;
      }
      if (v29 != 127)
      {
LABEL_47:
        v38 = "Block-like instruction doesn't return value type but can't decode type section index";
        v39 = a2;
        v40 = 85;
        goto LABEL_44;
      }
    }
    v30 = (v29 >> 6) & 1;
    if (v28 >= 0x40)
      LOBYTE(v30) = 0;
    if ((v30 & 1) != 0)
      goto LABEL_43;
    goto LABEL_33;
  }
  v12 = v11 | (v11 >> 6 << 7);
  v13 = (char)(v11 | ((v11 >> 6) << 7));
  if ((JSC::Wasm::isValidTypeKind<signed char>(v13) & 1) == 0)
  {
    v10 = a2[2];
    v9 = *a2;
    goto LABEL_20;
  }
  if (!BYTE1(dword_1ECF4C7B0))
  {
LABEL_5:
    v14 = v12 - 192;
    if (v14 <= 0x3F)
    {
      if (((1 << (v12 + 64)) & 0xF000000000000001) != 0)
      {
LABEL_7:
        v15 = a2[3];
        *a3 = *(_QWORD *)(v15 + 8 * (int)JSC::Wasm::linearizeType(v13) + 32);
        ++*a2;
LABEL_8:
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      if (((1 << (v12 + 64)) & 0x1800000000000) != 0)
      {
        if (!BYTE1(dword_1ECF4C7B0))
          goto LABEL_7;
      }
      else if (v14 == 59 && HIBYTE(dword_1ECF4C7B0))
      {
        goto LABEL_7;
      }
    }
    String = (char *)JSC::Wasm::makeString(v13);
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>("result type of block: ", a2, 23, String, v36, " is not a value type or Void", 29, &v64, v37);
    goto LABEL_42;
  }
  v16 = (char)v12 + 22;
  if (v16 <= 9)
  {
    if (((1 << v16) & 0x39F) == 0)
      goto LABEL_13;
    v17 = BYTE2(dword_1ECF4C7B0) != 0;
  }
  else
  {
    v17 = 0;
  }
  if ((v12 + 29) >= 2u && !v17)
    goto LABEL_5;
LABEL_13:
  JSC::Wasm::ParserBase::parseReftypeSignature((uint64_t)a2, v8, a3, (uint64_t)&v64, a5);
  v18 = v65;
  *a1 = 0;
  a1[8] = 0;
  if (v18)
  {
LABEL_42:
    *(_QWORD *)a1 = v64;
    a1[8] = 1;
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::Wasm::OpType,WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, char *a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>, float a7@<S1>)
{
  unint64_t v10;
  unsigned int v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  const char *String;
  float v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int *v62;
  unint64_t v63;
  uint64_t v64[2];
  const char *v65;
  uint64_t v66;
  const char *v67;
  WTF *v68;
  __int128 v69;
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v10 = *a2;
  v67 = (const char *)off_1E3572250;
  v68 = (WTF *)v70;
  v69 = xmmword_199122F80;
  v70[0] = 0;
  if (__src)
  {
    v11 = a3 - 1;
    if (!a3)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v11, (uint64_t)&v65, a7);
  }
  else
  {
    v12 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *((_QWORD *)v12 + 1) = 0;
    v12[16] = 0;
    v65 = v12;
    LODWORD(v66) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v67, "StringView", &v65);
  if ((_DWORD)v66 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v66])(v64, &v65);
  (*((void (**)(const char **))v67 + 5))(&v67);
  (*((void (**)(const char **))v67 + 5))(&v67);
  v20 = v68;
  if (!v68)
  {
    v61 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v68, v69, (uint64_t *)&v61);
  v20 = v68;
  if (v68 != (WTF *)v70)
LABEL_12:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  String = JSC::Wasm::makeString();
  v24 = v23;
  v67 = (const char *)off_1E3572250;
  v68 = (WTF *)v70;
  v69 = xmmword_199122F80;
  v70[0] = 0;
  if (a4)
  {
    v25 = a5 - 1;
    if (!a5)
      v25 = 0;
    WTF::StringImpl::utf8ForCharacters(a4, v25, (uint64_t)&v65, v22);
  }
  else
  {
    v26 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v26 = 1;
    *((_QWORD *)v26 + 1) = 0;
    v26[16] = 0;
    v65 = v26;
    LODWORD(v66) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v67, "StringView", &v65);
  if ((_DWORD)v66 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v66])(v64, &v65);
  (*((void (**)(const char **))v67 + 5))(&v67);
  (*((void (**)(const char **))v67 + 5))(&v67);
  v34 = v68;
  if (!v68)
  {
    v60 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v68, v69, (uint64_t *)&v60);
  v34 = v68;
  if (v68 != (WTF *)v70)
LABEL_24:
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  v67 = "WebAssembly.Module doesn't parse at byte ";
  v68 = (WTF *)42;
  v65 = ": ";
  v66 = 3;
  v64[0] = (uint64_t)String;
  v64[1] = v24;
  v63 = v10;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t *)&v67, &v63, (uint64_t *)&v65, (uint64_t *)&v61, v64, (uint64_t *)&v60, &v62);
  if (v62)
  {
    *a6 = v62;
    v62 = 0;
    v42 = v60;
    v60 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        *(_DWORD *)v42 -= 2;
      }
    }
    v43 = v61;
    v61 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      }
      else
      {
        *(_DWORD *)v43 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S1>)
{
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  const char *v84;
  int v85;
  const char *v86;
  WTF *v87;
  __int128 v88;
  _BYTE v89[128];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  v86 = (const char *)off_1E3572250;
  v87 = (WTF *)v89;
  v88 = xmmword_199122F80;
  v89[0] = 0;
  if (__src)
  {
    v13 = a3 - 1;
    if (!a3)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v13, (uint64_t)&v84, a8);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v84 = (const char *)v14;
    v85 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v86, "StringView", &v84);
  if (v85 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v85])(&v83, &v84);
  (*((void (**)(const char **))v86 + 5))(&v86);
  (*((void (**)(const char **))v86 + 5))(&v86);
  v22 = v87;
  if (!v87)
  {
    v78 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v87, v88, (uint64_t *)&v78);
  v22 = v87;
  if (v87 != (WTF *)v89)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v86 = (const char *)off_1E3572250;
  v87 = (WTF *)v89;
  v88 = xmmword_199122F80;
  v89[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v86, "%u", a4);
  (*((void (**)(const char **))v86 + 5))(&v86);
  v30 = v87;
  if (!v87)
  {
    v77 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v87, v88, (uint64_t *)&v77);
  v30 = v87;
  if (v87 != (WTF *)v89)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v86 = (const char *)off_1E3572250;
  v87 = (WTF *)v89;
  v88 = xmmword_199122F80;
  v89[0] = 0;
  if (a5)
  {
    v32 = a6 - 1;
    if (!a6)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v32, (uint64_t)&v84, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v84 = (const char *)v33;
    v85 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v86, "StringView", &v84);
  if (v85 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v85])(&v83, &v84);
  (*((void (**)(const char **))v86 + 5))(&v86);
  (*((void (**)(const char **))v86 + 5))(&v86);
  v41 = v87;
  if (!v87)
  {
    v76 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v87, v88, (uint64_t *)&v76);
  v41 = v87;
  if (v87 != (WTF *)v89)
LABEL_29:
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  v86 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v87) = 41;
  v83 = v12;
  v84 = ": ";
  v85 = 2;
  v81 = v77;
  v82 = v78;
  v80 = v76;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v86, &v83, (uint64_t)&v84, (uint64_t *)&v82, (uint64_t *)&v81, (uint64_t *)&v80, &v79);
  if (v79)
  {
    *a7 = v79;
    v79 = 0;
    v49 = v76;
    v76 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    v50 = v77;
    v77 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
    v51 = v78;
    v78 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseIndexForLocal(uint64_t a1, uint64_t a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)a2;
  v8 = v6 - *(_QWORD *)a2;
  if (v6 <= *(_QWORD *)a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *(_QWORD *)a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *(_QWORD *)a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get index for local", (unint64_t *)a2, 26, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(unsigned int *)(a2 + 26212);
  if (v18 <= v11)
  {
    v22[0] = "attempt to use unknown local ";
    v22[1] = 30;
    v21[0] = ", the number of locals is ";
    v21[1] = 27;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::pushLocalInitialized(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;

  v13 = a2;
  if (BYTE1(dword_1ECF4C7B0))
  {
    v2 = result + 26212;
    if (*(_DWORD *)(result + 26212) <= a2)
    {
      __break(0xC471u);
    }
    else if (*(unsigned __int8 *)(*(_QWORD *)(result + 26200) + 16 * a2) == 228)
    {
      v3 = (uint64_t *)(result + 26504);
      v4 = *(_QWORD *)(result + 26504);
      v5 = 2 * v4;
      v6 = v4 >= 0 ? 2 * v4 + 8 : result + 26504;
      v7 = (unint64_t)a2 >> 6;
      v8 = 1 << a2;
      if ((*(_QWORD *)(v6 + 8 * v7) & (1 << a2)) == 0)
      {
        v9 = (_QWORD *)(result + 26488);
        v10 = *(unsigned int *)(result + 26500);
        if ((_DWORD)v10 == *(_DWORD *)(result + 26496))
        {
          result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 26488, v10 + 1, (unint64_t)&v13);
          *(_DWORD *)(*v9 + 4 * *(unsigned int *)(v2 + 288)) = *(_DWORD *)result;
          v4 = *v3;
          v5 = 2 * *v3;
          v7 = (unint64_t)v13 >> 6;
          v8 = 1 << v13;
        }
        else
        {
          *(_DWORD *)(*v9 + 4 * v10) = a2;
        }
        ++*(_DWORD *)(v2 + 288);
        v11 = v5 + 8;
        if (v4 >= 0)
          v12 = (uint64_t *)v11;
        else
          v12 = v3;
        v12[v7] |= v8;
      }
    }
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseIndexForGlobal(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  uint64_t v20;
  _QWORD v21[2];
  void (**v22)(WTF::StringPrintStream *__hidden);
  unsigned int v23;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v23 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get global's index", a2, 25, v21, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v21[0];
    goto LABEL_14;
  }
  v18 = *(unsigned int *)(a2[3310] + 220);
  if (v18 <= v11)
  {
    v21[0] = " of unknown global, limit is ";
    v21[1] = 30;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral,unsigned long>(&v22, &v23, (uint64_t)v21, &v20);
    v19 = v22;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseFunctionIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 > *a2;
  v9 = v6 - *a2;
  if (!v8)
    goto LABEL_17;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = a2[1];
  v14 = 5;
  if (v9 < 5)
    v14 = v9;
  v15 = v14 - 1;
  *a2 = v7 + 1;
  v16 = v13 + v7;
  v17 = v7 + 2;
  while (1)
  {
    v18 = *(char *)(v16 + v10);
    v12 |= (v18 & 0x7F) << v11;
    if ((v18 & 0x80000000) == 0)
      break;
    if (v15 == v10)
      goto LABEL_17;
    LOBYTE(v18) = v17 + v10;
    *a2 = v17 + v10;
    v11 += 7;
    if (v9 == ++v10)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v10 == 4 && v18 >= 0x10u)
  {
LABEL_17:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse function index", a2, 27, &v20, a5);
    goto LABEL_15;
  }
  v19 = *(unsigned int *)(a2[3310] + 52) + (unint64_t)*(unsigned int *)(a2[3310] + 36);
  if (v19 <= v12)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>("function index ", a2, 16, v12, " exceeds function index space ", 31, v19, &v20, a5);
LABEL_15:
    *(_QWORD *)a1 = v20;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v12;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, double a3, float a4)
{
  uint64_t v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  WTF::PrintStream *v18;
  float v19;
  double v20;
  const WTF::String *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  int v46;
  char v47;
  void (**v48)(WTF::StringPrintStream *__hidden);
  WTF *v49;
  __int128 v50;
  _BYTE v51[128];
  void (**v52)(WTF::StringPrintStream *__hidden);
  WTF *v53;
  __int128 v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v48 = off_1E3572250;
  v49 = (WTF *)v51;
  v50 = xmmword_199122F80;
  v51[0] = 0;
  v52 = off_1E3572250;
  v53 = (WTF *)v55;
  v54 = xmmword_199122F80;
  v55[0] = 0;
  if (*(_QWORD *)a2)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = v5 != 0;
    v7 = v5 - 1;
    if (!v6)
      v7 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a2, v7, (uint64_t)&v45, a4);
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = 0;
    *(_BYTE *)(v8 + 16) = 0;
    v45 = (WTF::StringImpl *)v8;
    v46 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v52, "StringView", &v45);
  if (v46 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v46])(&v47, &v45);
  v52[5]((WTF::StringPrintStream *)&v52);
  v52[5]((WTF::StringPrintStream *)&v52);
  v16 = v53;
  if (!v53)
  {
    v45 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v53, v54, (uint64_t *)&v45);
  v16 = v53;
  if (v53 != (WTF *)v55)
LABEL_12:
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  v17 = (WTF *)((uint64_t (*)(_QWORD))v48[4])(&v48);
  v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v17 + 32))(v17);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v52, v19);
  WTF::printExpectedCStringHelper(v18, "StringView", &v52);
  if ((_DWORD)v53 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v53])(&v47, &v52);
  v20 = (*(double (**)(WTF *))(*(_QWORD *)v17 + 40))(v17);
  WTF::printInternal(v17, (WTF::PrintStream *)&v45, v21, v22, v23, v24, v25, v26, v20, v27);
  v48[5]((WTF::StringPrintStream *)&v48);
  v35 = v45;
  v45 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  v36 = v49;
  if (v49)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v49, v50, (uint64_t *)&v52);
    v36 = v49;
    *a1 = v52;
    if (v36 == (WTF *)v51)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v36, v28, v29, v30, v31, v32, v33, v34);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseElementIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unsigned int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse element index", a2, 26, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(_DWORD *)(a2[3310] + 188);
  if (v11 >= v18)
  {
    v22[0] = "element index ";
    v22[1] = 15;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseTableIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unsigned int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse table index", a2, 24, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(_DWORD *)(a2[3310] + 204);
  if (v11 >= v18)
  {
    v22[0] = "table index ";
    v22[1] = 13;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseTableCopyImmediates(_BYTE *a1, unint64_t *a2, _DWORD *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  void (**v30)(WTF::StringPrintStream *__hidden);
  unint64_t *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  unsigned int v41;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 > *a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = a2[1];
    v13 = 5;
    if (v8 < 5)
      v13 = v6 - *a2;
    v14 = v13 - 1;
    *a2 = v7 + 1;
    while (1)
    {
      v15 = *(char *)(v12 + v7 + v9);
      LODWORD(v16) = (v15 & 0x7F) << v10;
      v11 |= v16;
      if ((v15 & 0x80000000) == 0)
        break;
      if (v14 == v9)
        goto LABEL_27;
      v17 = v7 + v9 + 2;
      *a2 = v17;
      ++v9;
      v10 += 7;
      if (v8 == v9)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    v41 = v11;
    if ((_DWORD)v9 != 4 || v15 < 0x10u)
    {
      v10 = *(_DWORD *)(a2[3310] + 204);
      if (v11 >= v10)
      {
        v38 = "table index ";
        v39 = 13;
        v36 = " is invalid, limit is ";
        v37 = 23;
        v35 = v10;
        v28 = &v41;
        v29 = &v35;
      }
      else
      {
        if (v6 <= v7 + v9 + 1)
          goto LABEL_29;
        v17 = 0;
        v18 = 0;
        LODWORD(v14) = 0;
        v19 = ~v9 + v8;
        v20 = 5;
        if (v19 < 5)
          v20 = v19;
        v21 = v7 + v9;
        *a2 = v7 + v9 + 2;
        v22 = v7 - v6;
        v23 = v12 + v7;
        v24 = v20 - 1;
        v25 = v22 + v9;
        while (1)
        {
          LODWORD(v16) = *(char *)(v23 + v17 + v9 + 1);
          LODWORD(v14) = ((v16 & 0x7F) << v18) | v14;
          if ((v16 & 0x80000000) == 0)
            break;
          if (v24 == v17)
            goto LABEL_29;
          v26 = v21 + v17;
          v27 = v25 + v17++;
          v16 = v26 + 3;
          *a2 = v16;
          v18 += 7;
          if (v27 == -2)
            goto LABEL_18;
        }
LABEL_19:
        v35 = v14;
        if ((_DWORD)v17 == 4 && v16 >= 0x10u)
        {
LABEL_29:
          v31 = a2;
          v32 = "can't parse source table index";
          v33 = 31;
          goto LABEL_30;
        }
        if (v14 < v10)
        {
          *a3 = v14;
          a3[1] = v11;
          *a1 = 0;
          a1[8] = 0;
          return;
        }
        v38 = "table index ";
        v39 = 13;
        v36 = " is invalid, limit is ";
        v37 = 23;
        v34 = v10;
        v28 = &v35;
        v29 = &v34;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v40, (uint64_t)&v38, v28, (uint64_t)&v36, v29, a4, a5);
      v30 = v40;
      goto LABEL_25;
    }
  }
LABEL_27:
  v31 = a2;
  v32 = "can't parse destination table index";
  v33 = 36;
LABEL_30:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v32, v31, v33, &v38, a5);
  v30 = (void (**)(WTF::StringPrintStream *__hidden))v38;
LABEL_25:
  *(_QWORD *)a1 = v30;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseMemoryCopyImmediates(uint64_t a1, unint64_t *a2, double a3, float a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;

  v5 = *a2;
  v6 = a2[2];
  if (*a2 >= v6)
    goto LABEL_9;
  v7 = v5 + 1;
  *a2 = v5 + 1;
  v8 = a2[1];
  v9 = *(unsigned __int8 *)(v8 + v5);
  if (*(_BYTE *)(v8 + v5))
  {
LABEL_7:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char>("auxiliary byte for memory.copy should be zero, but got ", a2, 56, v9, &v10, a4);
LABEL_8:
    *(_QWORD *)a1 = v10;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  if (v7 >= v6)
  {
LABEL_9:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse auxiliary byte", a2, 27, &v10, a4);
    goto LABEL_8;
  }
  *a2 = v5 + 2;
  v9 = *(unsigned __int8 *)(v8 + v7);
  if (*(_BYTE *)(v8 + v7))
    goto LABEL_7;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseMemoryInitImmediates(uint64_t a1, unint64_t *a2, _QWORD *a3, double a4, float a5)
{
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  char *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;

  v26 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseDataSegmentIndex(&v24, a2, &v26, a4, a5);
  if (v25)
    goto LABEL_16;
  v9 = a2[2];
  v10 = *a2;
  v11 = v9 - *a2;
  if (v9 <= *a2)
    goto LABEL_18;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = a2[1];
  v16 = 5;
  if (v11 < 5)
    v16 = v11;
  v17 = v16 - 1;
  *a2 = v10 + 1;
  v18 = v15 + v10;
  v19 = v10 + 2;
  while (1)
  {
    v20 = *(char *)(v18 + v12);
    v14 |= (v20 & 0x7F) << v13;
    if ((v20 & 0x80000000) == 0)
      break;
    if (v17 == v12)
      goto LABEL_18;
    LOBYTE(v20) = v19 + v12;
    *a2 = v19 + v12;
    v13 += 7;
    if (v11 == ++v12)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v12 == 4 && v20 >= 0x10u)
  {
LABEL_18:
    v21 = "can't parse unused";
    v22 = a2;
    v23 = 19;
    goto LABEL_15;
  }
  if (v14)
  {
    v21 = "memory.init invalid unsued byte";
    v22 = a2;
    v23 = 32;
LABEL_15:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v21, v22, v23, &v24, v8);
LABEL_16:
    *(_QWORD *)a1 = v24;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v26;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseDataSegmentIndex(_BYTE *a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  void (**v20)(WTF::StringPrintStream *__hidden);
  unsigned int v21;
  _QWORD v22[2];
  _QWORD v23[2];
  void (**v24)(WTF::StringPrintStream *__hidden);
  unsigned int v25;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_18;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_18;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v25 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_18:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse data segment index", a2, 31, v23, a5);
    v20 = (void (**)(WTF::StringPrintStream *__hidden))v23[0];
  }
  else
  {
    v18 = a2[3310];
    if (*(_BYTE *)(v18 + 268))
    {
      v19 = *(_DWORD *)(v18 + 264);
      if (v11 < v19)
      {
        *a3 = v11;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
    }
    else
    {
      v19 = 0;
    }
    v23[0] = "data segment index ";
    v23[1] = 20;
    v22[0] = " is invalid, limit is ";
    v22[1] = 23;
    v21 = v19;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v24, (uint64_t)v23, &v25, (uint64_t)v22, &v21, a4, a5);
    v20 = v24;
  }
  *(_QWORD *)a1 = v20;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseAnnotatedSelectImmediates(_BYTE *a1, uint64_t a2, uint64_t a3, double a4, float a5)
{
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  WTF *v49;
  WTF *v50;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)a2;
  v9 = v7 - *(_QWORD *)a2;
  if (v7 <= *(_QWORD *)a2)
    goto LABEL_73;
  v11 = 0;
  v12 = 0;
  LODWORD(v13) = 0;
  v14 = *(_QWORD *)(a2 + 8);
  if (v9 >= 5)
    v9 = 5;
  v15 = v9 - 1;
  *(_QWORD *)a2 = v8 + 1;
  while (1)
  {
    LODWORD(v16) = *(char *)(v14 + v8 + v11);
    LODWORD(v13) = ((v16 & 0x7F) << v12) | v13;
    if ((v16 & 0x80000000) == 0)
      break;
    if (v15 == v11)
      goto LABEL_73;
    v16 = v8 + v11 + 2;
    *(_QWORD *)a2 = v16;
    ++v11;
    v12 += 7;
    if (!(v8 - v7 + v11))
    {
LABEL_8:
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v11 == 4 && v16 >= 0x10u)
  {
LABEL_73:
    v28 = "select can't parse the size of annotation vector";
    v29 = (unint64_t *)a2;
    v30 = 49;
    goto LABEL_24;
  }
  if ((_DWORD)v13 != 1)
  {
    v28 = "select invalid result arity for";
    v29 = (unint64_t *)a2;
    v30 = 32;
    goto LABEL_24;
  }
  if (v8 + v11 + 1 >= v7)
    goto LABEL_23;
  v17 = *(_QWORD *)(a2 + 26480);
  v18 = (char *)(v8 + v11);
  *(_QWORD *)a2 = v18 + 2;
  v19 = v18[v14 + 1];
  if ((v19 & 0x80000000) != 0)
    goto LABEL_23;
  v20 = v19 | (v19 >> 6 << 7);
  if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v19 | ((v19 >> 6) << 7))))
    goto LABEL_23;
  if (!BYTE1(dword_1ECF4C7B0))
  {
    if ((v20 + 29) < 2u)
      goto LABEL_23;
    goto LABEL_17;
  }
  v8 = (char)v20;
  v26 = (char)v20 + 22;
  if (v26 <= 9 && (((1 << v26) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
  {
    v27 = 227;
LABEL_28:
    if (BYTE1(dword_1ECF4C7B0))
      v31 = v8 == 0;
    else
      v31 = 1;
    if (!v31)
      goto LABEL_19;
    goto LABEL_23;
  }
  if ((v20 + 29) < 2u)
  {
    v32 = *(_QWORD *)(a2 + 16);
    v14 = *(_QWORD *)a2;
    v7 = v32 - *(_QWORD *)a2;
    if (v32 <= *(_QWORD *)a2)
      goto LABEL_23;
    v11 = 0;
    LODWORD(v8) = 0;
    v33 = *(_QWORD *)(a2 + 8);
    v34 = 5;
    if (v7 < 5)
      v34 = v7;
    v13 = v34 - 1;
    *(_QWORD *)a2 = v14 + 1;
    v35 = v33 + v14;
    v36 = v14 + 2;
    LODWORD(v14) = 7;
    while (1)
    {
      v37 = *(char *)(v35 + v11);
      LOBYTE(v16) = v37 & 0x7F;
      v8 = ((v37 & 0x7F) << (v14 - 7)) | v8;
      if ((v37 & 0x80000000) == 0)
        break;
      if (v13 == v11)
        goto LABEL_23;
      *(_QWORD *)a2 = v36 + v11;
      v14 = (v14 + 7);
      if (v7 == ++v11)
        goto LABEL_8;
    }
    if ((_DWORD)v11 == 4)
    {
      if ((v37 & 0x40) == 0)
      {
        if (*(unsigned __int8 *)(v35 + v11) > 7u)
          goto LABEL_23;
        goto LABEL_45;
      }
      if ((v37 & 0xF8) != 0x78)
        goto LABEL_23;
    }
    if (v14 <= 0x1F && (v37 & 0x40) != 0)
    {
      LODWORD(v8) = v8 | (-1 << v14);
      goto LABEL_66;
    }
LABEL_45:
    if ((v8 & 0x80000000) == 0)
    {
      if (v8 >= *(_DWORD *)(v17 + 100))
      {
        if (!*(_BYTE *)(a2 + 32))
          goto LABEL_23;
        v38 = *(_DWORD *)(a2 + 36);
        if (v8 < v38 || v8 >= *(_DWORD *)(a2 + 40))
          goto LABEL_23;
      }
      else if (!*(_BYTE *)(a2 + 32) || (v38 = *(_DWORD *)(a2 + 36), v8 < v38))
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 8 * v8);
        goto LABEL_18;
      }
      JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(v8 - v38), v21, v22, v23, v24, v25, (unsigned int **)&v50);
      v8 = (int64_t)v50;
      v50 = 0;
      if (v8)
      {
        do
        {
          v46 = __ldaxr((unsigned int *)v8);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, (unsigned int *)v8));
        if (!v47)
        {
          atomic_store(1u, (unsigned int *)v8);
          v49 = (WTF *)v8;
          WTF::fastFree(v8, v39, v40, v41, v42, v43, v44, v45);
          v8 = (int64_t)v49;
        }
      }
      goto LABEL_18;
    }
LABEL_66:
    v8 = (int)v8;
    v48 = (int)v8 + 22;
    if (v48 > 9 || ((1 << v48) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
      goto LABEL_23;
    goto LABEL_18;
  }
LABEL_17:
  v8 = 0;
LABEL_18:
  v27 = v20;
  if (v20 - 252 < 4)
  {
LABEL_19:
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v27;
    *(_QWORD *)(a3 + 16) = v8;
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  if (v20 - 239 < 2)
  {
    if (!BYTE1(dword_1ECF4C7B0))
      goto LABEL_19;
  }
  else if (v20 == 251)
  {
    if (HIBYTE(dword_1ECF4C7B0))
    {
      v27 = 251;
      goto LABEL_19;
    }
  }
  else if (v20 - 227 < 2)
  {
    goto LABEL_28;
  }
LABEL_23:
  v28 = "select can't parse annotations";
  v29 = (unint64_t *)a2;
  v30 = 31;
LABEL_24:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v28, v29, v30, &v50, a5);
  *(_QWORD *)a1 = v50;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseStructTypeIndex(_BYTE *a1, unint64_t *a2, _DWORD *a3, char *a4, uint64_t a5, double a6, float a7)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  JSC::Wasm::TypeDefinition *v21;
  int v22;
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int *v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  _BOOL4 hasRecursiveReference;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t CachedUnrolling;
  uint64_t v36;
  uint64_t v37;
  const JSC::Wasm::Type *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  const JSC::Wasm::TypeDefinition *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::Wasm::TypeInformation *v49;
  void (**v50[2])(WTF::StringPrintStream *__hidden);
  const char *v51;
  uint64_t v52;
  void (**v53)(WTF::StringPrintStream *__hidden);
  unsigned int v54;
  _QWORD v55[2];

  v55[0] = a4;
  v55[1] = a5;
  v8 = a2[2];
  v9 = *a2;
  v10 = v8 - *a2;
  if (v8 <= *a2)
    goto LABEL_25;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = a2[1];
  v15 = 5;
  if (v10 < 5)
    v15 = v10;
  v16 = v15 - 1;
  *a2 = v9 + 1;
  v17 = v14 + v9;
  v18 = v9 + 2;
  while (1)
  {
    v19 = *(char *)(v17 + v11);
    v13 |= (v19 & 0x7F) << v12;
    if ((v19 & 0x80000000) == 0)
      break;
    if (v16 == v11)
      goto LABEL_25;
    LOBYTE(v19) = v18 + v11;
    *a2 = v18 + v11;
    v12 += 7;
    if (v10 == ++v11)
    {
      __break(1u);
      break;
    }
  }
  v54 = v13;
  if ((_DWORD)v11 == 4 && v19 >= 0x10u)
  {
LABEL_25:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a4, a5, &v51, a7);
    v23 = (void (**)(WTF::StringPrintStream *__hidden))v51;
  }
  else
  {
    v20 = a2[3310];
    if (v13 >= *(_DWORD *)(v20 + 100))
    {
      v51 = " index ";
      v52 = 8;
      v50[0] = (void (**)(WTF::StringPrintStream *__hidden))" is out of bound";
      v50[1] = (void (**)(WTF::StringPrintStream *__hidden))17;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v53, (uint64_t)v55, (uint64_t)&v51, &v54, (uint64_t)v50, a6, a7);
      v23 = v53;
    }
    else
    {
      v21 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v20 + 88) + 8 * v13);
      if (*((_DWORD *)v21 + 8) == 4)
      {
        v49 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v20 + 88) + 8 * v13);
        v24 = (unsigned int *)*((_QWORD *)v21 + 1);
        v25 = *(WTF **)v24;
        v21 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v24 + 8) + 8 * v24[2]);
        v26 = (uint64_t)a3;
        v27 = v13;
        hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v21);
        v13 = v27;
        a3 = (_DWORD *)v26;
        if (hasRecursiveReference)
        {
          CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v49, v29, v26, v30, v31, v32, v33, v34);
          if (v42)
          {
            v21 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
          }
          else
          {
            v21 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v21, v25, v36, v37, v38, v39, v40, v41);
            JSC::Wasm::TypeInformation::addCachedUnrolling(v49, v21, v43, v44, v45, v46, v47, v48);
          }
          a3 = (_DWORD *)v26;
          v13 = v27;
        }
      }
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 5)
        v22 = *(_DWORD *)(**((_QWORD **)v21 + 1) + 32);
      if (v22 == 1)
      {
        *a3 = v13;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v51 = ": invalid type index ";
      v52 = 22;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int>(v50, (uint64_t)v55, (uint64_t)&v51, &v54, a6, a7);
      v23 = v50[0];
    }
  }
  *(_QWORD *)a1 = v23;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseStructTypeIndexAndFieldIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, char *a4, uint64_t a5, double a6, float a7)
{
  float v12;
  unint64_t v13;
  unsigned int v14;
  JSC::Wasm::TypeDefinition *v15;
  int v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int *v31;
  WTF *v32;
  unsigned int v33;
  _BOOL4 hasRecursiveReference;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t CachedUnrolling;
  uint64_t v43;
  uint64_t v44;
  const JSC::Wasm::Type *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  const JSC::Wasm::TypeDefinition *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::Wasm::TypeInformation *v56;
  uint64_t v57;
  char v58;
  unsigned int v59;

  v59 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::parseStructTypeIndex(&v57, a2, &v59, a4, a5, a6, a7);
  if (v58)
  {
LABEL_22:
    *(_QWORD *)a1 = v57;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v13 = a2[3310];
  v14 = v59;
  if (*(_DWORD *)(v13 + 100) > v59)
  {
    v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v13 + 88) + 8 * v59);
    if (*((_DWORD *)v15 + 8) == 4)
    {
      v56 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v13 + 88) + 8 * v59);
      v31 = (unsigned int *)*((_QWORD *)v15 + 1);
      v32 = *(WTF **)v31;
      v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v31 + 8) + 8 * v31[2]);
      v33 = v59;
      hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v15);
      v14 = v33;
      if (hasRecursiveReference)
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v56, v35, v36, v37, v38, v39, v40, v41);
        if (v49)
        {
          v15 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v15 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v15, v32, v43, v44, v45, v46, v47, v48);
          JSC::Wasm::TypeInformation::addCachedUnrolling(v56, v15, v50, v51, v52, v53, v54, v55);
        }
        v14 = v33;
      }
    }
    v16 = *((_DWORD *)v15 + 8);
    if (v16 == 5)
    {
      v15 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v15 + 1);
      v16 = *((_DWORD *)v15 + 8);
    }
    if (v16 == 1)
      v17 = (char *)v15 + 8;
    else
      v17 = 0;
    v18 = a2[2];
    v19 = *a2;
    v20 = v18 > *a2;
    v21 = v18 - *a2;
    if (!v20)
      goto LABEL_29;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = a2[1];
    v26 = 5;
    if (v21 < 5)
      v26 = v21;
    v27 = v26 - 1;
    *a2 = v19 + 1;
    v28 = v25 + v19;
    v29 = v19 + 2;
    while (1)
    {
      v30 = *(char *)(v28 + v22);
      v24 |= (v30 & 0x7F) << v23;
      if ((v30 & 0x80000000) == 0)
        break;
      if (v27 == v22)
        goto LABEL_29;
      LOBYTE(v30) = v29 + v22;
      *a2 = v29 + v22;
      v23 += 7;
      if (v21 == ++v22)
      {
        __break(1u);
        break;
      }
    }
    if ((_DWORD)v22 != 4 || v30 < 0x10u)
    {
      if (v24 < *((_DWORD *)v17 + 2))
      {
        *a3 = v14;
        a3[1] = v24;
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
        return;
      }
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(a4, a2, a5, " field immediate ", 18, v24, " is out of bounds", 18, &v57, v12);
    }
    else
    {
LABEL_29:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a4, a5, &v57, v12);
    }
    goto LABEL_22;
  }
  __break(0xC471u);
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>, float a7@<S1>)
{
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  float v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int *v59;
  unint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  WTF *v64;
  __int128 v65;
  _BYTE v66[128];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v10 = *a2;
  v63 = (const char *)off_1E3572250;
  v64 = (WTF *)v66;
  v65 = xmmword_199122F80;
  v66[0] = 0;
  if (__src)
  {
    v11 = a3 - 1;
    if (!a3)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v11, (uint64_t)&v61, a7);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v61 = (const char *)v12;
    LODWORD(v62) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v63, "StringView", &v61);
  if ((_DWORD)v62 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v60, &v61);
  (*((void (**)(const char **))v63 + 5))(&v63);
  (*((void (**)(const char **))v63 + 5))(&v63);
  v20 = v64;
  if (!v64)
  {
    v58 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v64, v65, (uint64_t *)&v58);
  v20 = v64;
  if (v64 != (WTF *)v66)
LABEL_12:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  v63 = (const char *)off_1E3572250;
  v64 = (WTF *)v66;
  v65 = xmmword_199122F80;
  v66[0] = 0;
  if (a4)
  {
    v22 = a5 - 1;
    if (!a5)
      v22 = 0;
    WTF::StringImpl::utf8ForCharacters(a4, v22, (uint64_t)&v61, v21);
  }
  else
  {
    v23 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v23 = 1;
    *(_QWORD *)(v23 + 8) = 0;
    *(_BYTE *)(v23 + 16) = 0;
    v61 = (const char *)v23;
    LODWORD(v62) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v63, "StringView", &v61);
  if ((_DWORD)v62 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v62])(&v60, &v61);
  (*((void (**)(const char **))v63 + 5))(&v63);
  (*((void (**)(const char **))v63 + 5))(&v63);
  v31 = v64;
  if (!v64)
  {
    v57 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v64, v65, (uint64_t *)&v57);
  v31 = v64;
  if (v64 != (WTF *)v66)
LABEL_24:
    WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
  v63 = "WebAssembly.Module doesn't parse at byte ";
  v64 = (WTF *)42;
  v61 = ": ";
  v62 = 3;
  v60 = v10;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)&v63, &v60, (uint64_t)&v61, (uint64_t *)&v58, (uint64_t *)&v57, &v59);
  if (!v59)
  {
    __break(0xC471u);
    JUMPOUT(0x198CA72D0);
  }
  *a6 = v59;
  v59 = 0;
  v39 = v57;
  v57 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  v40 = v58;
  v58 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
}

uint64_t JSC::Wasm::memoryLog2Alignment()
{
  return 3;
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>, float a9@<S1>)
{
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  const char *v105;
  int v106;
  const char *v107;
  WTF *v108;
  __int128 v109;
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v14 = *a2;
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (__src)
  {
    v15 = a3 - 1;
    if (!a3)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v15, (uint64_t)&v105, a9);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v105 = (const char *)v16;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v24 = v108;
  if (!v108)
  {
    v98 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v98);
  v24 = v108;
  if (v108 != (WTF *)v110)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%llu", a4);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v32 = v108;
  if (!v108)
  {
    v97 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v97);
  v32 = v108;
  if (v108 != (WTF *)v110)
LABEL_17:
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (a5)
  {
    v34 = a6 - 1;
    if (!a6)
      v34 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v34, (uint64_t)&v105, v33);
  }
  else
  {
    v35 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = 0;
    *(_BYTE *)(v35 + 16) = 0;
    v105 = (const char *)v35;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v43 = v108;
  if (!v108)
  {
    v96 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v96);
  v43 = v108;
  if (v108 != (WTF *)v110)
LABEL_29:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%llu", a7);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v51 = v108;
  if (!v108)
  {
    v95 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v95);
  v51 = v108;
  if (v108 != (WTF *)v110)
LABEL_34:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  v107 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v108) = 41;
  v104 = v14;
  v105 = ": ";
  v106 = 2;
  v102 = v97;
  v103 = v98;
  v100 = v95;
  v101 = v96;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v107, &v104, (uint64_t)&v105, (uint64_t *)&v103, (uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, &v99);
  if (v99)
  {
    *a8 = v99;
    v99 = 0;
    v59 = v95;
    v95 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v59 -= 2;
      }
    }
    v60 = v96;
    v96 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::~StringImpl(v60, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v60 -= 2;
      }
    }
    v61 = v97;
    v97 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::~StringImpl(v61, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v61 -= 2;
      }
    }
    v62 = v98;
    v98 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<false,void>(_BYTE *a1, unint64_t *a2, int a3, int a4, double a5, double a6, double a7, uint8x8_t a8)
{
  unsigned __int8 v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  unint64_t v24;
  __int8 v25;
  __int8 v26;
  __int8 v27;
  __int8 v28;
  uint8x16_t v29;
  uint8x8_t v30;
  unint64_t v31;
  int8x8_t v32;
  uint32x2_t v33;
  __int8 v34;
  uint8x8_t v35;
  uint16x4_t v36;
  unint64_t v37;
  int8x8_t v38;
  uint32x2_t v39;
  __int8 v40;
  uint8x8_t v41;
  uint16x4_t v42;
  __int8 v43;
  __int8 v44;
  __int8 v45;
  __int8 v46;
  uint8x8_t v47;
  __int8 v48;
  uint8x16_t v49;
  uint64_t v50;
  char v51;
  int v52;

  switch(a3)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 28:
    case 30:
    case 31:
    case 32:
    case 33:
    case 38:
    case 39:
    case 42:
    case 43:
    case 44:
    case 45:
    case 47:
    case 49:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 60:
    case 62:
    case 63:
    case 67:
    case 68:
    case 69:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
      goto LABEL_2;
    case 2:
    case 16:
    case 46:
    case 71:
      if (a3 > 45)
      {
        if (a3 == 46)
        {
          v12 = 4;
        }
        else
        {
          if (a3 != 71)
          {
LABEL_69:
            __break(0xC471u);
            JUMPOUT(0x198CA7F40);
          }
          v12 = 2;
        }
      }
      else if (a3 == 2)
      {
        v12 = 8;
      }
      else
      {
        v12 = a3;
        if (a3 != 16)
          goto LABEL_69;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v50, a3, a2, &v52, a5, *(float *)&a6);
      if (v51)
        goto LABEL_31;
      v20 = (v12 - 2) >> 1;
      if (v20 > 7 || ((1 << v20) & 0x8B) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198CA7F60);
      }
      goto LABEL_45;
    case 7:
      v10 = 7;
      goto LABEL_4;
    case 8:
    case 25:
    case 29:
    case 48:
      if (a3 > 28)
      {
        if (a3 == 29)
        {
          v12 = 2;
        }
        else
        {
          if (a3 != 48)
            goto LABEL_68;
          v12 = 8;
        }
      }
      else
      {
        if (a3 != 8)
        {
          if (a3 == 25)
          {
            v12 = 4;
            goto LABEL_37;
          }
LABEL_68:
          __break(0xC471u);
          JUMPOUT(0x198CA7F20);
        }
        v12 = 16;
      }
LABEL_37:
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v50, a3, a2, &v52, a5, *(float *)&a6);
      if (!v51)
      {
        v19 = (v12 - 2) >> 1;
        if (v19 > 7 || ((1 << v19) & 0x8B) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198CA7B14);
        }
LABEL_45:
        v21 = *a2;
        if (*a2 >= a2[2])
        {
LABEL_67:
          v14 = "Could not parse the lane index immediate byte.";
          v15 = a2;
          v16 = 47;
LABEL_30:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v14, v15, v16, &v50, *(float *)&a6);
        }
        else
        {
          *a2 = v21 + 1;
          if (*(unsigned __int8 *)(a2[1] + v21) < v12)
          {
LABEL_2:
            *a1 = 0;
            a1[8] = 0;
            return;
          }
          v22 = a2;
          v23 = v12;
          v17 = v12;
LABEL_58:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", v22, 40, v23, ", expected an ImmLaneIdx", 25, v17, &v50, *(float *)&a6);
        }
      }
LABEL_31:
      *(_QWORD *)a1 = v50;
      v11 = 1;
LABEL_6:
      a1[8] = v11;
      return;
    case 13:
    case 14:
    case 27:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 50:
    case 56:
    case 61:
    case 64:
    case 70:
      v10 = a3;
LABEL_4:
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v50, v10, a2, &v52, a5, *(float *)&a6);
      v11 = v51;
      if (v51)
        goto LABEL_31;
      *a1 = 0;
      goto LABEL_6;
    case 19:
      v13 = *a2 + 16;
      if (a2[2] < v13)
      {
        v14 = "can't parse 128-bit vector constant";
        v15 = a2;
        v16 = 36;
        goto LABEL_30;
      }
      *a2 = v13;
      goto LABEL_2;
    case 41:
      v18 = *a2 + 16;
      if (a2[2] < v18)
      {
        v14 = "can't parse 128-bit shuffle immediate";
        v15 = a2;
        v16 = 38;
        goto LABEL_30;
      }
      v24 = a2[1] + *a2;
      LODWORD(a5) = *(_DWORD *)v24;
      v25 = *(_BYTE *)(v24 + 4);
      LODWORD(a6) = *(_DWORD *)(v24 + 5);
      v26 = *(_BYTE *)(v24 + 9);
      v27 = *(_BYTE *)(v24 + 10);
      v28 = *(_BYTE *)(v24 + 11);
      a8.i32[0] = *(_DWORD *)(v24 + 12);
      *a2 = v18;
      v29.i64[0] = vmovl_u8(*(uint8x8_t *)&a5).u64[0];
      v30 = (uint8x8_t)vmovl_u8(*(uint8x8_t *)&a6).u64[0];
      v31 = vmovl_u8(a8).u64[0];
      switch(a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198CA8000);
        case 1:
          v43 = v30.i8[6];
          v44 = v30.i8[4];
          v45 = v30.i8[2];
          v46 = v30.i8[0];
          v47.i8[0] = v29.i8[0];
          v47.i8[1] = v29.i8[4];
          v47.i8[2] = v29.i8[6];
          v47.i8[3] = v25;
          v47.i8[4] = v46;
          v47.i8[5] = v45;
          v47.i8[6] = v44;
          v47.i8[7] = v43;
          if ((vmaxv_u8(vcgt_u8(v47, (uint8x8_t)0x1F1F1F1F1F1F1F1FLL)) & 1) != 0
            || (v31 | v29.i8[2] | BYTE2(v31) | BYTE4(v31) | BYTE6(v31) | v28 | v26 | v27) >= 0x20u)
          {
            goto LABEL_66;
          }
          goto LABEL_2;
        case 2:
          v48 = v29.i8[0];
          v29.i8[0] = v29.i8[2];
          v29.i8[1] = v48;
          v29.i8[2] = v29.i8[4];
          v29.i8[3] = v29.i8[6];
          v29.i8[4] = v25;
          v29.i8[5] = v30.i8[0];
          v29.i8[6] = v30.i8[2];
          v29.i8[7] = v30.i8[4];
          v29.i8[8] = v30.i8[6];
          v29.i8[9] = v26;
          v29.i8[10] = v27;
          v29.i8[11] = v28;
          v29.i8[12] = v31;
          v29.i8[13] = BYTE2(v31);
          v29.i8[14] = BYTE4(v31);
          v29.i8[15] = BYTE6(v31);
          v49.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v49.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          if ((vmaxvq_u8(vcgtq_u8(v29, v49)) & 1) != 0)
            goto LABEL_66;
          goto LABEL_2;
        case 3:
        case 5:
          v32.i32[0] = v29.u16[1];
          v32.i32[1] = v29.u16[0];
          v33 = vcgt_u32((uint32x2_t)0x800000008, (uint32x2_t)vand_s8(v32, (int8x8_t)0xFF000000FFLL));
          v34 = v30.i8[0];
          v30.i8[0] = v25;
          v30.i8[1] = v34;
          v30.i8[3] = v30.i8[4];
          v30.i8[4] = v30.i8[6];
          v30.i8[5] = v26;
          v30.i8[6] = v27;
          v30.i8[7] = v28;
          v35 = vcgt_u8(v30, (uint8x8_t)0x707070707070707);
          v35.i8[0] = vmaxv_u8(v35);
          v36 = vcgt_u16((uint16x4_t)(v31 & 0xFF00FF00FF00FFLL), (uint16x4_t)0x7000700070007);
          v36.i16[0] = vmaxv_u16(v36);
          if ((~v35.i32[0] & ~v36.i32[0] & v33.i32[0] & v33.i32[1] & 1) == 0
            || (v29.i8[4] | v29.i8[6]) >= 8u)
          {
            goto LABEL_66;
          }
          goto LABEL_2;
        case 4:
        case 6:
          v38.i32[0] = v29.u16[1];
          v38.i32[1] = v29.u16[0];
          v39 = vcgt_u32((uint32x2_t)0x400000004, (uint32x2_t)vand_s8(v38, (int8x8_t)0xFF000000FFLL));
          v40 = v30.i8[0];
          v30.i8[0] = v25;
          v30.i8[1] = v40;
          v30.i8[3] = v30.i8[4];
          v30.i8[4] = v30.i8[6];
          v30.i8[5] = v26;
          v30.i8[6] = v27;
          v30.i8[7] = v28;
          v41 = vcgt_u8(v30, (uint8x8_t)0x303030303030303);
          v41.i8[0] = vmaxv_u8(v41);
          v42 = vcgt_u16((uint16x4_t)(v31 & 0xFF00FF00FF00FFLL), (uint16x4_t)0x3000300030003);
          v42.i16[0] = vmaxv_u16(v42);
          if ((~v41.i32[0] & ~v42.i32[0] & v39.i32[0] & v39.i32[1] & 1) != 0
            && (v29.i8[4] | v29.i8[6]) < 4u)
          {
            goto LABEL_2;
          }
LABEL_66:
          JSC::Wasm::ParserBase::fail<>(a2, &v50);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198CA7FE0);
      }
      goto LABEL_31;
    case 65:
      v17 = 16;
      switch(a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198CA7A04);
        case 1:
          goto LABEL_55;
        case 2:
          goto LABEL_54;
        case 3:
        case 5:
          goto LABEL_33;
        case 4:
        case 6:
          goto LABEL_48;
        default:
          __break(0xC471u);
          JUMPOUT(0x198CA7F80);
      }
    case 66:
      v17 = 16;
      switch(a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198CA7FC0);
        case 1:
          break;
        case 2:
LABEL_54:
          v17 = 8;
          break;
        case 3:
        case 5:
LABEL_33:
          v17 = 4;
          break;
        case 4:
        case 6:
LABEL_48:
          v17 = 2;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198CA7FA0);
      }
LABEL_55:
      v37 = *a2;
      if (*a2 >= a2[2])
        goto LABEL_67;
      *a2 = v37 + 1;
      if (*(unsigned __int8 *)(a2[1] + v37) < v17)
        goto LABEL_2;
      v22 = a2;
      v23 = v17;
      goto LABEL_58;
    default:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::SIMDLaneOperationDump>("invalid simd op ", a2, 17, a3, &v50, *(float *)&a6);
      goto LABEL_31;
  }
}

void JSC::Wasm::ConstExprGenerator::fail<char const*>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  _QWORD v46[2];
  const char *v47;
  WTF *v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v4 = 0;
  v51 = *MEMORY[0x1E0C80C00];
  v5 = a3 + a2;
  do
  {
    v6 = (v5 % 0xA) | 0x30;
    v50[v4-- - 8] = v6;
    v7 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v7);
  if (v4 + 26 >= 27)
    __break(1u);
  if (v4)
  {
    if ((unint64_t)-v4 >> 31)
    {
      __break(0xC471u);
LABEL_28:
      JUMPOUT(0x198CA83DCLL);
    }
    v8 = WTF::fastCompactMalloc((WTF *)(20 - v4));
    v9 = (_BYTE *)(v8 + 20);
    *(_DWORD *)v8 = 2;
    *(_DWORD *)(v8 + 4) = -(int)v4;
    *(_QWORD *)(v8 + 8) = v8 + 20;
    *(_DWORD *)(v8 + 16) = 4;
    v44 = (WTF::StringImpl *)v8;
    if (v4 == -1)
      *v9 = v6;
    else
      memcpy(v9, &v50[v4 - 7], -v4);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v44 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  }
  v47 = (const char *)off_1E3572250;
  v48 = (WTF *)v50;
  v49 = xmmword_199122F80;
  v50[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v47, "%s", "Invalid instruction for constant expression");
  (*((void (**)(const char **))v47 + 5))(&v47);
  v17 = v48;
  if (!v48)
  {
    v43 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v48, v49, (uint64_t *)&v43);
  v17 = v48;
  if (v48 != (WTF *)v50)
LABEL_14:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v47 = "WebAssembly.Module doesn't parse at byte ";
  v48 = (WTF *)42;
  v46[0] = ": ";
  v46[1] = 3;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)&v47, (uint64_t *)&v44, (uint64_t)v46, (uint64_t *)&v43, &v45);
  if (!v45)
  {
    __break(0xC471u);
    goto LABEL_28;
  }
  *a1 = v45;
  v45 = 0;
  v25 = v43;
  v43 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = v44;
  v44 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, uint64_t a4, _QWORD *a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF::PrintStream *v52;
  float v53;
  double v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  const WTF::String *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  int v134;
  char v135;
  void (**v136)(WTF::StringPrintStream *__hidden);
  WTF *v137;
  __int128 v138;
  _BYTE v139[128];
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v136 = off_1E3572250;
  v137 = (WTF *)v139;
  v138 = xmmword_199122F80;
  v139[0] = 0;
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a2)
  {
    v11 = *(_QWORD *)(a2 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a2, v13, (uint64_t)&v133, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v133 = (WTF::StringImpl *)v14;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v132, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v22 = v141;
  if (!v141)
  {
    v132 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v132);
  v22 = v141;
  if (v141 != (WTF *)v143)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v140, "%u", *a3);
  v140[5]((WTF::StringPrintStream *)&v140);
  v30 = v141;
  if (!v141)
  {
    v131 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v131);
  v30 = v141;
  if (v141 != (WTF *)v143)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a4)
  {
    v32 = *(_QWORD *)(a4 + 8);
    v12 = v32 != 0;
    v33 = v32 - 1;
    if (!v12)
      v33 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v33, (uint64_t)&v133, v31);
  }
  else
  {
    v34 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v34 = 1;
    *(_QWORD *)(v34 + 8) = 0;
    *(_BYTE *)(v34 + 16) = 0;
    v133 = (WTF::StringImpl *)v34;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v130, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v42 = v141;
  if (!v141)
  {
    v133 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v133);
  v42 = v141;
  if (v141 != (WTF *)v143)
LABEL_29:
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v140, "%lu", *a5);
  v140[5]((WTF::StringPrintStream *)&v140);
  v50 = v141;
  if (!v141)
  {
    v130 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v130);
  v50 = v141;
  if (v141 != (WTF *)v143)
LABEL_34:
    WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
  v51 = (WTF *)((uint64_t (*)(_QWORD))v136[4])(&v136);
  v52 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v51 + 32))(v51);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v140, v53);
  WTF::printExpectedCStringHelper(v52, "StringView", &v140);
  if ((_DWORD)v141 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v141])(&v135, &v140);
  v54 = (*(double (**)(WTF *))(*(_QWORD *)v51 + 40))(v51);
  WTF::printInternal(v51, (WTF::PrintStream *)&v132, v55, v56, v57, v58, v59, v60, v54, v61);
  WTF::printInternal(v51, (WTF::PrintStream *)&v131, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v51, (WTF::PrintStream *)&v133, v70, v71, v72, v73, v74, v75, v76, v77);
  WTF::printInternal(v51, (WTF::PrintStream *)&v130, v78, v79, v80, v81, v82, v83, v84, v85);
  v136[5]((WTF::StringPrintStream *)&v136);
  v93 = v130;
  v130 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v133;
  v133 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v131;
  v131 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v132;
  v132 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v137;
  if (v137)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v137, v138, (uint64_t *)&v140);
    v97 = v137;
    *a1 = v140;
    if (v97 == (WTF *)v139)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v97, v86, v87, v88, v89, v90, v91, v92);
}

void WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::ConstExprGenerator::ConstExprValue&>(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  JSC::HandleSet *v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v11 = *(unsigned int *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 12);
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  if (v15 > v11)
  {
    v16 = *(_QWORD *)a1;
    if (v15 < 0x11)
    {
      v18 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v15 >= 0x5555556)
      {
        __break(0xC471u);
        return;
      }
      v17 = 48 * v15;
      v18 = WTF::fastMalloc((WTF *)(48 * v15));
      *(_DWORD *)(a1 + 8) = (v17 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v18;
    }
    WTF::VectorMover<false,JSC::Wasm::FunctionParserTypes<JSC::Wasm::ConstExprGenerator::ControlData,JSC::Wasm::ConstExprGenerator::ConstExprValue,JSC::CallLinkInfoBase::CallType>::TypedExpression>::move(v16, v16 + 48 * v12, v18, a4, a5, a6, a7, a8);
    if (a1 + 16 != v16 && v16)
    {
      if (*(_QWORD *)a1 == v16)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v19 = *(_DWORD *)(a1 + 12);
  v20 = *(_QWORD *)a1;
  v21 = (_OWORD *)(*(_QWORD *)a1 + 48 * v19);
  v22 = *a2;
  v48 = *(_OWORD *)a3;
  v23 = *(_QWORD *)(a3 + 24);
  v49 = *(_QWORD *)(a3 + 16);
  if (v23)
  {
    v24 = *(JSC::HandleSet **)(((v23 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v25 = (_QWORD *)*((_QWORD *)v24 + 5);
    if (!v25)
    {
      v44 = *(_QWORD *)a1;
      v45 = *(_QWORD *)a1 + 48 * v19;
      v47 = v22;
      JSC::HandleSet::grow(v24, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v22 = v47;
      v21 = (_OWORD *)v45;
      v20 = v44;
      v25 = (_QWORD *)*((_QWORD *)v24 + 5);
    }
    *((_QWORD *)v24 + 5) = *v25;
    v25[2] = 0;
    v26 = v25 + 2;
    *v25 = 0;
    v25[1] = 0;
    v27 = *(_QWORD **)(a3 + 24);
    if (v27)
    {
      v27 = (_QWORD *)*v27;
      if (v27)
      {
        v40 = *(_QWORD **)(((unint64_t)(v26 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v41 = v40[3];
        v40 += 3;
        *(v26 - 2) = v41;
        *(v26 - 1) = (uint64_t)v40;
        *v40 = v26 - 2;
        *(_QWORD *)(v41 + 8) = v26 - 2;
      }
    }
    *v26 = (uint64_t)v27;
  }
  else
  {
    v26 = 0;
  }
  *v21 = v22;
  v28 = v20 + 48 * v19;
  *(_QWORD *)(v28 + 40) = 0;
  v29 = (_QWORD *)(v28 + 40);
  *(_OWORD *)(v29 - 3) = v48;
  *(v29 - 1) = v49;
  if (v26)
  {
    v30 = v26 - 2;
    v31 = *(_QWORD *)(((unint64_t)(v26 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v32 = *(_QWORD *)(v31 + 40);
    if (!v32)
    {
      v46 = v29;
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v26 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v29 = v46;
      v32 = *(_QWORD *)(v31 + 40);
    }
    *(_QWORD *)(v31 + 40) = *(_QWORD *)v32;
    *(_QWORD *)(v32 + 16) = 0;
    v33 = (_QWORD *)(v32 + 16);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *v29 = v32 + 16;
    v34 = *v26;
    if ((*v26 != 0) != (*(_QWORD *)(v32 + 16) != 0))
    {
      if (v34)
      {
        v35 = *(unint64_t **)((v32 & 0xFFFFFFFFFFFFF000) + 0x10);
        v36 = v35[3];
        v35 += 3;
        *(_QWORD *)v32 = v36;
        *(_QWORD *)(v32 + 8) = v35;
        *v35 = v32;
        *(_QWORD *)(v36 + 8) = v32;
      }
      else
      {
        v43 = *(_QWORD *)v32;
        v42 = *(_QWORD **)(v32 + 8);
        *v42 = *(_QWORD *)v32;
        *(_QWORD *)(v43 + 8) = v42;
        *(_QWORD *)v32 = 0;
        *(_QWORD *)(v32 + 8) = 0;
        v33 = (_QWORD *)*v29;
      }
    }
    *v33 = v34;
    v37 = *(_QWORD *)(((unint64_t)(v26 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v38 = (uint64_t *)*(v26 - 1);
    if (v38)
    {
      v39 = *v30;
      *v38 = *v30;
      *(_QWORD *)(v39 + 8) = v38;
      *v30 = 0;
      *(v26 - 1) = 0;
    }
    *v30 = *(_QWORD *)(v37 + 40);
    *(_QWORD *)(v37 + 40) = v30;
  }
  ++*(_DWORD *)(a1 + 12);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, WTF::PrintStream *a3, uint64_t a4, _DWORD *a5, uint64_t a6, _QWORD *a7, uint64_t a8, double a9, float a10)
{
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  const WTF::String *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  float v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  float v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  WTF *v89;
  WTF::PrintStream *v90;
  float v91;
  double v92;
  const WTF::String *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  const WTF::String *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  float v107;
  const WTF::String *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  float v115;
  const WTF::String *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  float v123;
  const WTF::String *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  float v131;
  const WTF::String *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  float v139;
  const WTF::String *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  float v147;
  WTF::AtomStringImpl *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF *v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  int v227;
  char v228;
  void (**v229)(WTF::StringPrintStream *__hidden);
  WTF *v230;
  __int128 v231;
  _BYTE v232[128];
  void (**v233)(WTF::StringPrintStream *__hidden);
  unint64_t v234;
  __int128 v235;
  _BYTE v236[128];
  uint64_t v237;

  v237 = *MEMORY[0x1E0C80C00];
  v229 = off_1E3572250;
  v230 = (WTF *)v232;
  v231 = xmmword_199122F80;
  v232[0] = 0;
  v233 = off_1E3572250;
  v234 = (unint64_t)v236;
  v235 = xmmword_199122F80;
  v236[0] = 0;
  if (*(_QWORD *)a2)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = v16 != 0;
    v18 = v16 - 1;
    if (!v17)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a2, v18, (uint64_t)&v226, a10);
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    v226 = (WTF::StringImpl *)v19;
    v227 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v233, "StringView", &v226);
  if (v227 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v227])(&v225, &v226);
  v233[5]((WTF::StringPrintStream *)&v233);
  v233[5]((WTF::StringPrintStream *)&v233);
  v27 = v234;
  if (!v234)
  {
    v225 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>(v234, v235, (uint64_t *)&v225);
  v27 = v234;
  if ((_BYTE *)v234 != v236)
LABEL_12:
    WTF::fastFree(v27, v20, (uint64_t)v21, v22, v23, v24, v25, v26);
  v233 = off_1E3572250;
  v234 = (unint64_t)v236;
  v235 = xmmword_199122F80;
  v236[0] = 0;
  WTF::printInternal((WTF *)&v233, a3, v21, v22, v23, v24, v25, v26, 0.0, v28);
  v233[5]((WTF::StringPrintStream *)&v233);
  v36 = v234;
  if (!v234)
  {
    v224 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>(v234, v235, (uint64_t *)&v224);
  v36 = v234;
  if ((_BYTE *)v234 != v236)
LABEL_17:
    WTF::fastFree(v36, v29, v30, v31, v32, v33, v34, v35);
  v233 = off_1E3572250;
  v234 = (unint64_t)v236;
  v235 = xmmword_199122F80;
  v236[0] = 0;
  if (*(_QWORD *)a4)
  {
    v38 = *(_QWORD *)(a4 + 8);
    v17 = v38 != 0;
    v39 = v38 - 1;
    if (!v17)
      v39 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v39, (uint64_t)&v226, v37);
  }
  else
  {
    v40 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v40 = 1;
    *(_QWORD *)(v40 + 8) = 0;
    *(_BYTE *)(v40 + 16) = 0;
    v226 = (WTF::StringImpl *)v40;
    v227 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v233, "StringView", &v226);
  if (v227 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v227])(&v223, &v226);
  v233[5]((WTF::StringPrintStream *)&v233);
  v233[5]((WTF::StringPrintStream *)&v233);
  v48 = v234;
  if (!v234)
  {
    v223 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>(v234, v235, (uint64_t *)&v223);
  v48 = v234;
  if ((_BYTE *)v234 != v236)
LABEL_29:
    WTF::fastFree(v48, v41, v42, v43, v44, v45, v46, v47);
  v233 = off_1E3572250;
  v234 = (unint64_t)v236;
  v235 = xmmword_199122F80;
  v236[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v233, "%u", *a5);
  v233[5]((WTF::StringPrintStream *)&v233);
  v56 = v234;
  if (!v234)
  {
    v222 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>(v234, v235, (uint64_t *)&v222);
  v56 = v234;
  if ((_BYTE *)v234 != v236)
LABEL_34:
    WTF::fastFree(v56, v49, v50, v51, v52, v53, v54, v55);
  v233 = off_1E3572250;
  v234 = (unint64_t)v236;
  v235 = xmmword_199122F80;
  v236[0] = 0;
  if (*(_QWORD *)a6)
  {
    v58 = *(_QWORD *)(a6 + 8);
    v17 = v58 != 0;
    v59 = v58 - 1;
    if (!v17)
      v59 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v59, (uint64_t)&v226, v57);
  }
  else
  {
    v60 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v60 = 1;
    *(_QWORD *)(v60 + 8) = 0;
    *(_BYTE *)(v60 + 16) = 0;
    v226 = (WTF::StringImpl *)v60;
    v227 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v233, "StringView", &v226);
  if (v227 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v227])(&v221, &v226);
  v233[5]((WTF::StringPrintStream *)&v233);
  v233[5]((WTF::StringPrintStream *)&v233);
  v68 = v234;
  if (!v234)
  {
    v221 = 0;
    goto LABEL_46;
  }
  WTF::fromUTF8Impl<false>(v234, v235, (uint64_t *)&v221);
  v68 = v234;
  if ((_BYTE *)v234 != v236)
LABEL_46:
    WTF::fastFree(v68, v61, v62, v63, v64, v65, v66, v67);
  v233 = off_1E3572250;
  v234 = (unint64_t)v236;
  v235 = xmmword_199122F80;
  v236[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v233, "%lu", *a7);
  v233[5]((WTF::StringPrintStream *)&v233);
  v76 = v234;
  if (!v234)
  {
    v220 = 0;
    goto LABEL_51;
  }
  WTF::fromUTF8Impl<false>(v234, v235, (uint64_t *)&v220);
  v76 = v234;
  if ((_BYTE *)v234 != v236)
LABEL_51:
    WTF::fastFree(v76, v69, v70, v71, v72, v73, v74, v75);
  v233 = off_1E3572250;
  v234 = (unint64_t)v236;
  v235 = xmmword_199122F80;
  v236[0] = 0;
  if (*(_QWORD *)a8)
  {
    v78 = *(_QWORD *)(a8 + 8);
    v17 = v78 != 0;
    v79 = v78 - 1;
    if (!v17)
      v79 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a8, v79, (uint64_t)&v226, v77);
  }
  else
  {
    v80 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v80 = 1;
    *(_QWORD *)(v80 + 8) = 0;
    *(_BYTE *)(v80 + 16) = 0;
    v226 = (WTF::StringImpl *)v80;
    v227 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v233, "StringView", &v226);
  if (v227 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v227])(&v228, &v226);
  v233[5]((WTF::StringPrintStream *)&v233);
  v233[5]((WTF::StringPrintStream *)&v233);
  v88 = v234;
  if (!v234)
  {
    v226 = 0;
    goto LABEL_63;
  }
  WTF::fromUTF8Impl<false>(v234, v235, (uint64_t *)&v226);
  v88 = v234;
  if ((_BYTE *)v234 != v236)
LABEL_63:
    WTF::fastFree(v88, v81, v82, v83, v84, v85, v86, v87);
  v89 = (WTF *)((uint64_t (*)(_QWORD))v229[4])(&v229);
  v90 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v89 + 32))(v89);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v233, v91);
  WTF::printExpectedCStringHelper(v90, "StringView", &v233);
  if ((_DWORD)v234 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v234])(&v228, &v233);
  v92 = (*(double (**)(WTF *))(*(_QWORD *)v89 + 40))(v89);
  WTF::printInternal(v89, (WTF::PrintStream *)&v225, v93, v94, v95, v96, v97, v98, v92, v99);
  WTF::printInternal(v89, (WTF::PrintStream *)&v224, v100, v101, v102, v103, v104, v105, v106, v107);
  WTF::printInternal(v89, (WTF::PrintStream *)&v223, v108, v109, v110, v111, v112, v113, v114, v115);
  WTF::printInternal(v89, (WTF::PrintStream *)&v222, v116, v117, v118, v119, v120, v121, v122, v123);
  WTF::printInternal(v89, (WTF::PrintStream *)&v221, v124, v125, v126, v127, v128, v129, v130, v131);
  WTF::printInternal(v89, (WTF::PrintStream *)&v220, v132, v133, v134, v135, v136, v137, v138, v139);
  WTF::printInternal(v89, (WTF::PrintStream *)&v226, v140, v141, v142, v143, v144, v145, v146, v147);
  v229[5]((WTF::StringPrintStream *)&v229);
  v155 = v226;
  v226 = 0;
  if (v155)
  {
    if (*(_DWORD *)v155 == 2)
    {
      WTF::StringImpl::~StringImpl(v155, v148, v149, v150, v151, v152, v153, v154);
      WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
    }
    else
    {
      *(_DWORD *)v155 -= 2;
    }
  }
  v156 = v220;
  v220 = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
    {
      WTF::StringImpl::~StringImpl(v156, v148, v149, v150, v151, v152, v153, v154);
      WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
    }
    else
    {
      *(_DWORD *)v156 -= 2;
    }
  }
  v157 = v221;
  v221 = 0;
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
    {
      WTF::StringImpl::~StringImpl(v157, v148, v149, v150, v151, v152, v153, v154);
      WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
    }
    else
    {
      *(_DWORD *)v157 -= 2;
    }
  }
  v158 = v222;
  v222 = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 2)
    {
      WTF::StringImpl::~StringImpl(v158, v148, v149, v150, v151, v152, v153, v154);
      WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
    }
    else
    {
      *(_DWORD *)v158 -= 2;
    }
  }
  v159 = v223;
  v223 = 0;
  if (v159)
  {
    if (*(_DWORD *)v159 == 2)
    {
      WTF::StringImpl::~StringImpl(v159, v148, v149, v150, v151, v152, v153, v154);
      WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
    }
    else
    {
      *(_DWORD *)v159 -= 2;
    }
  }
  v160 = v224;
  v224 = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
    {
      WTF::StringImpl::~StringImpl(v160, v148, v149, v150, v151, v152, v153, v154);
      WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
    }
    else
    {
      *(_DWORD *)v160 -= 2;
    }
  }
  v161 = v225;
  v225 = 0;
  if (v161)
  {
    if (*(_DWORD *)v161 == 2)
    {
      WTF::StringImpl::~StringImpl(v161, v148, v149, v150, v151, v152, v153, v154);
      WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
    }
    else
    {
      *(_DWORD *)v161 -= 2;
    }
  }
  v162 = v230;
  if (v230)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v230, v231, (uint64_t *)&v233);
    v162 = v230;
    *a1 = v233;
    if (v162 == (WTF *)v232)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v162, v148, v149, v150, v151, v152, v153, v154);
}

uint64_t JSC::Wasm::isSubtype(unsigned __int8 a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v14;

  if (BYTE1(dword_1ECF4C7B0))
  {
    if ((a1 - 239 < 2 || a1 == 227)
      && a3 - 239 >= 2
      && a3 != 227)
    {
      return 0;
    }
    if ((a1 + 27) < 0xFEu)
    {
      v8 = a4;
      v9 = a3;
      a4 = a2;
      LOBYTE(a3) = a1;
      goto LABEL_6;
    }
    if (a2 < 0xFFFFFFFFFFFFFFC1)
    {
      if ((a3 + 29) <= 1u && a4 < 0xFFFFFFFFFFFFFFC1)
        return JSC::Wasm::isSubtypeIndex((JSC::Wasm *)a2, (JSC::Wasm *)a4, a3, a4, a5, a6, a7, a8);
      v14 = BYTE2(dword_1ECF4C7B0);
      if (BYTE2(dword_1ECF4C7B0))
      {
        if ((a3 + 29) <= 1u && a4 + 19 < 2)
          return *(_DWORD *)(JSC::Wasm::TypeDefinition::expand(a2) + 32) != 0;
        if ((a3 + 29) <= 1u && a4 == -22)
          return *(_DWORD *)(JSC::Wasm::TypeDefinition::expand(a2) + 32) == 2;
        if ((a3 + 29) <= 1u && a4 == -21)
          return *(_DWORD *)(JSC::Wasm::TypeDefinition::expand(a2) + 32) == 1;
      }
      if ((a3 + 29) <= 1u && a4 == -16)
        return *(_DWORD *)(JSC::Wasm::TypeDefinition::expand(a2) + 32) == 0;
    }
    else
    {
      v14 = BYTE2(dword_1ECF4C7B0);
    }
    if (v14)
    {
      if (a2 + 22 >= 3)
      {
        switch(a2)
        {
          case 0xFFFFFFFFFFFFFFEDLL:
            a2 = -19;
            if ((a3 + 29) > 1u || a4 != -18)
              break;
            return 1;
          case 0xFFFFFFFFFFFFFFF1:
            return JSC::Wasm::isInternalref(a3, a4);
          case 0xFFFFFFFFFFFFFFF2:
            a2 = -14;
            if ((a3 + 29) > 1u || a4 != -17)
              break;
            return 1;
          case 0xFFFFFFFFFFFFFFF3:
            if ((a3 + 27) < 0xFEu)
            {
              v9 = -29;
              v8 = -16;
              goto LABEL_6;
            }
            if (a4 < 0xFFFFFFFFFFFFFFC1)
            {
              a2 = a4;
              return *(_DWORD *)(JSC::Wasm::TypeDefinition::expand(a2) + 32) == 0;
            }
            v8 = -16;
            if (a4 == -15)
            {
              LOBYTE(a3) = -29;
              a4 = -16;
              return JSC::Wasm::isInternalref(a3, a4);
            }
            a1 = a3;
            a2 = a4;
            LOBYTE(a3) = -29;
            v12 = a4 == -13;
            a4 = -16;
            if (v12)
              return v8 == a4;
            break;
          default:
            break;
        }
      }
      else if ((a3 + 29) <= 1u && a4 + 19 < 2)
      {
        return 1;
      }
    }
    if (a1 != 228)
    {
      v8 = a4;
      v9 = a3;
      a4 = a2;
      LOBYTE(a3) = -29;
      goto LABEL_6;
    }
    if (a3 != 227)
    {
      v8 = a4;
      v9 = a3;
      a4 = a2;
      LOBYTE(a3) = -28;
LABEL_6:
      v10 = v9;
      if (v9 == a3)
      {
        v11 = ((v9 + 29) < 0xEu) & (0x3001u >> (v9 + 29));
        if ((v10 - 239) < 2 || v10 == 227)
        {
          if ((v11 & 1) != 0)
            return v8 == a4;
        }
        else if ((v11 & 1) == 0)
        {
          return v8 == a4;
        }
      }
      return 0;
    }
    return a2 == a4;
  }
  else
  {
    if (a3 != a1)
      return 0;
    if (a1 - 239 < 2 || a1 == 227)
    {
      if ((((a1 + 29) < 0xEu) & (0x3001u >> (a1 + 29))) == 0)
        return 0;
    }
    else if ((((a1 + 29) < 0xEu) & (0x3001u >> (a1 + 29))) != 0)
    {
      return 0;
    }
    return a4 == a2;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  double v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  double v39;
  float v40;
  WTF *v41;
  WTF::PrintStream *v42;
  float v43;
  double v44;
  const WTF::String *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  const WTF::String *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  float v59;
  const WTF::String *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  float v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  float v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  char v125;
  void (**v126)(WTF::StringPrintStream *__hidden);
  WTF *v127;
  __int128 v128;
  _BYTE v129[128];
  void (**v130)(WTF::StringPrintStream *__hidden);
  WTF *v131;
  __int128 v132;
  _BYTE v133[128];
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v126 = off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  v130 = off_1E3572250;
  v131 = (WTF *)v133;
  v132 = xmmword_199122F80;
  v133[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v123, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v123 = (WTF::StringImpl *)v16;
    v124 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v130, "StringView", &v123);
  if (v124 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v124])(&v122, &v123);
  v130[5]((WTF::StringPrintStream *)&v130);
  v130[5]((WTF::StringPrintStream *)&v130);
  v24 = v131;
  if (!v131)
  {
    v122 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v131, v132, (uint64_t *)&v122);
  v24 = v131;
  if (v131 != (WTF *)v133)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v121, a2, a4, v25, v26);
  v130 = off_1E3572250;
  v131 = (WTF *)v133;
  v132 = xmmword_199122F80;
  v133[0] = 0;
  if (*(_QWORD *)a5)
  {
    v28 = *(_QWORD *)(a5 + 8);
    v14 = v28 != 0;
    v29 = v28 - 1;
    if (!v14)
      v29 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v29, (uint64_t)&v123, v27);
  }
  else
  {
    v30 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = 0;
    v123 = (WTF::StringImpl *)v30;
    v124 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v130, "StringView", &v123);
  if (v124 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v124])(&v120, &v123);
  v130[5]((WTF::StringPrintStream *)&v130);
  v130[5]((WTF::StringPrintStream *)&v130);
  v38 = v131;
  if (!v131)
  {
    v123 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v131, v132, (uint64_t *)&v123);
  v38 = v131;
  if (v131 != (WTF *)v133)
LABEL_24:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative((uint64_t *)&v120, a2, a6, v39, v40);
  v41 = (WTF *)((uint64_t (*)(_QWORD))v126[4])(&v126);
  v42 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v41 + 32))(v41);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v130, v43);
  WTF::printExpectedCStringHelper(v42, "StringView", &v130);
  if ((_DWORD)v131 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v131])(&v125, &v130);
  v44 = (*(double (**)(WTF *))(*(_QWORD *)v41 + 40))(v41);
  WTF::printInternal(v41, (WTF::PrintStream *)&v122, v45, v46, v47, v48, v49, v50, v44, v51);
  WTF::printInternal(v41, (WTF::PrintStream *)&v121, v52, v53, v54, v55, v56, v57, v58, v59);
  WTF::printInternal(v41, (WTF::PrintStream *)&v123, v60, v61, v62, v63, v64, v65, v66, v67);
  WTF::printInternal(v41, (WTF::PrintStream *)&v120, v68, v69, v70, v71, v72, v73, v74, v75);
  v126[5]((WTF::StringPrintStream *)&v126);
  v83 = v120;
  v120 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  v84 = v123;
  v123 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v127;
  if (v127)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v130);
    v87 = v127;
    *a1 = v130;
    if (v87 == (WTF *)v129)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v87, v76, v77, v78, v79, v80, v81, v82);
}

uint64_t JSC::Wasm::isSubtypeIndex(JSC::Wasm *this, JSC::Wasm *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  char v33;
  WTF *v34;
  char v35;

  if (this == a2)
    return 1;
  if (!BYTE2(dword_1ECF4C7B0))
    return 0;
  JSC::Wasm::TypeInformation::tryGetCanonicalRTT(this, a3, a4, a5, a6, a7, a8, (uint64_t)&v34);
  JSC::Wasm::TypeInformation::tryGetCanonicalRTT(a2, v10, v11, v12, v13, v14, v15, (uint64_t)&v32);
  if (v35 && v33)
  {
    result = JSC::Wasm::RTT::isSubRTT((uint64_t)v34, (uint64_t)v32);
    if (v33)
    {
      v23 = (unsigned int *)v32;
      v32 = 0;
      if (v23)
      {
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v23);
          v30 = result;
          WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
          result = v30;
        }
      }
    }
    if (v35)
    {
      v26 = (unsigned int *)v34;
      v34 = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          v29 = result;
          WTF::fastFree((unint64_t)v26, v16, v17, v18, v19, v20, v21, v22);
          return v29;
        }
      }
    }
  }
  else
  {
    v31 = std::__throw_bad_optional_access[abi:sn180100]();
    return JSC::Wasm::isInternalref(v31);
  }
  return result;
}

BOOL JSC::Wasm::isInternalref(char a1, unint64_t a2)
{
  char v2;
  JSC::Wasm::TypeDefinition *v4;
  int v5;
  unsigned int *v6;
  WTF *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t CachedUnrolling;
  uint64_t v17;
  uint64_t v18;
  const JSC::Wasm::Type *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  const JSC::Wasm::TypeDefinition *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (!BYTE2(dword_1ECF4C7B0))
    return 0;
  v2 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
  if ((v2 + a1) > 1u)
    return 0;
  if (a2 < 0xFFFFFFFFFFFFFFC1)
  {
    v4 = (JSC::Wasm::TypeDefinition *)a2;
    if (*(_DWORD *)(a2 + 32) == 4)
    {
      v6 = *(unsigned int **)(a2 + 8);
      v7 = *(WTF **)v6;
      v4 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v6 + 8) + 8 * v6[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v4))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)a2, v9, v10, v11, v12, v13, v14, v15);
        if (v23)
        {
          v4 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v4 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v4, v7, v17, v18, v19, v20, v21, v22);
          JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)a2, v4, v24, v25, v26, v27, v28, v29);
        }
      }
    }
    v5 = *((_DWORD *)v4 + 8);
    if (v5 == 5)
      v5 = *(_DWORD *)(**((_QWORD **)v4 + 1) + 32);
    return v5 != 0;
  }
  else if ((a2 + 22) >= 8u)
  {
    return 0;
  }
  else
  {
    return (0x9Fu >> (a2 + 22)) & 1;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::typeToStringModuleRelative(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, double a4, float a5)
{
  char v7;
  BOOL v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  int v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  unint64_t v22;
  const char *v23;
  WTF::PrintStream *v24;
  JSC::Wasm::TypeDefinition *v25;
  int v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::PrintStream *v36;
  uint64_t v37;
  WTF::PrintStream *v38;
  float v39;
  uint64_t v40;
  WTF::PrintStream *v41;
  float v42;
  unsigned int *v43;
  WTF *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t CachedUnrolling;
  uint64_t v53;
  uint64_t v54;
  const JSC::Wasm::Type *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  const JSC::Wasm::TypeDefinition *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  void (**v69)(WTF::StringPrintStream *__hidden);
  WTF *v70;
  __int128 v71;
  _BYTE v72[128];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (BYTE1(dword_1ECF4C7B0))
    v7 = 29;
  else
    v7 = 17;
  if (BYTE1(dword_1ECF4C7B0))
    v8 = (v7 + *a3) > 1u;
  else
    v8 = 1;
  if (v8)
  {
    v69 = off_1E3572250;
    v70 = (WTF *)v72;
    v71 = xmmword_199122F80;
    v72[0] = 0;
    JSC::Wasm::Type::dump((uint64_t)a3, (WTF::PrintStream *)&v69);
    v69[5]((WTF::StringPrintStream *)&v69);
    v16 = v70;
    if (v70)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v70, v71, a1);
      v16 = v70;
      if (v70 == (WTF *)v72)
        return;
LABEL_45:
      WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
      return;
    }
LABEL_44:
    *a1 = 0;
    goto LABEL_45;
  }
  v69 = off_1E3572250;
  v70 = (WTF *)v72;
  v71 = xmmword_199122F80;
  v72[0] = 0;
  WTF::StringImpl::utf8ForCharacters("(ref ", 5uLL, (uint64_t)&v66, a5);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v69, "StringView", &v66);
  if (v67 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
  v69[5]((WTF::StringPrintStream *)&v69);
  v69[5]((WTF::StringPrintStream *)&v69);
  v18 = *a3;
  if ((v18 - 239) < 2 || v18 == 227)
  {
    v19 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
    v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
    WTF::StringImpl::utf8ForCharacters("null ", 5uLL, (uint64_t)&v66, v21);
    WTF::printExpectedCStringHelper(v20, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v69[5]((WTF::StringPrintStream *)&v69);
  }
  v22 = *((_QWORD *)a3 + 1);
  if (v22 < 0xFFFFFFFFFFFFFFC1)
  {
    v25 = (JSC::Wasm::TypeDefinition *)v22;
    if (*(_DWORD *)(v22 + 32) == 4)
    {
      v43 = *(unsigned int **)(v22 + 8);
      v44 = *(WTF **)v43;
      v25 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v43 + 8) + 8 * v43[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v25))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v45, v46, v47, v48, v49, v50, v51);
        if (v59)
        {
          v25 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v25 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v25, v44, v53, v54, v55, v56, v57, v58);
          JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v25, v60, v61, v62, v63, v64, v65);
        }
      }
    }
    v26 = *((_DWORD *)v25 + 8);
    if (v26 == 5)
      v26 = *(_DWORD *)(**((_QWORD **)v25 + 1) + 32);
    if (v26 == 2)
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<array:";
      v31 = 7;
    }
    else if (v26)
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<struct:";
      v31 = 8;
    }
    else
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<func:";
      v31 = 6;
    }
    WTF::StringImpl::utf8ForCharacters(v30, v31, (uint64_t)&v66, v29);
    WTF::printExpectedCStringHelper(v28, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    v69[5]((WTF::StringPrintStream *)&v69);
    v32 = *(_QWORD *)(a2 + 26480);
    v33 = *(unsigned int *)(v32 + 100);
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = *(_QWORD *)(v32 + 88);
      while (*(_QWORD *)(v35 + 8 * v34) != v22)
      {
        if (v33 == ++v34)
          goto LABEL_35;
      }
    }
    else
    {
LABEL_35:
      v34 = -1;
    }
    v36 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v69[4])(&v69);
    WTF::PrintStream::printf(v36, "%lu", v34);
    v69[5]((WTF::StringPrintStream *)&v69);
    v37 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
    v38 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
    WTF::StringImpl::utf8ForCharacters(">", 1uLL, (uint64_t)&v66, v39);
    WTF::printExpectedCStringHelper(v38, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
  }
  else
  {
    if ((v22 + 22) >= 0xAu)
    {
      __break(0xC471u);
      return;
    }
    v23 = off_1E35B56C8[(char)(v22 + 22)];
    v24 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v69[4])(&v69);
    WTF::PrintStream::printf(v24, "%s", v23);
  }
  v69[5]((WTF::StringPrintStream *)&v69);
  v40 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
  v41 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40);
  WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v66, v42);
  WTF::printExpectedCStringHelper(v41, "StringView", &v66);
  if (v67 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  v69[5]((WTF::StringPrintStream *)&v69);
  v16 = v70;
  if (!v70)
    goto LABEL_44;
  WTF::fromUTF8Impl<false>((unint64_t)v70, v71, a1);
  v16 = v70;
  if (v70 != (WTF *)v72)
    goto LABEL_45;
}

uint64_t JSC::Wasm::Type::dump(uint64_t this, WTF::PrintStream *a2)
{
  JSC::Wasm::TypeDefinition *v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  const char *v6;

  v3 = *(JSC::Wasm::TypeDefinition **)(this + 8);
  if (v3)
  {
    if ((unint64_t)v3 < 0xFFFFFFFFFFFFFFC1)
    {
      v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      JSC::Wasm::TypeDefinition::dump(v3, v4);
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
  }
  else
  {
    LOBYTE(v3) = *(_BYTE *)this;
  }
  switch((char)v3)
  {
    case -50:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Rec";
      goto LABEL_32;
    case -49:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Subfinal";
      goto LABEL_32;
    case -48:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Sub";
      goto LABEL_32;
    case -47:
    case -46:
    case -45:
    case -44:
    case -43:
    case -42:
    case -41:
    case -40:
    case -39:
    case -38:
    case -37:
    case -36:
    case -35:
    case -31:
    case -30:
    case -27:
    case -26:
    case -25:
    case -24:
    case -23:
    case -12:
    case -11:
    case -10:
    case -9:
    case -8:
    case -7:
    case -6:
      return this;
    case -34:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Array";
      goto LABEL_32;
    case -33:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Struct";
      goto LABEL_32;
    case -32:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Func";
      goto LABEL_32;
    case -29:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "RefNull";
      goto LABEL_32;
    case -28:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Ref";
      goto LABEL_32;
    case -22:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Arrayref";
      goto LABEL_32;
    case -21:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Structref";
      goto LABEL_32;
    case -20:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "I31ref";
      goto LABEL_32;
    case -19:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Eqref";
      goto LABEL_32;
    case -18:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Anyref";
      goto LABEL_32;
    case -17:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Externref";
      goto LABEL_32;
    case -16:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Funcref";
      goto LABEL_32;
    case -15:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Nullref";
      goto LABEL_32;
    case -14:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Nullexternref";
      goto LABEL_32;
    case -13:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Nullfuncref";
      goto LABEL_32;
    case -5:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "V128";
      goto LABEL_32;
    case -4:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "F64";
      goto LABEL_32;
    case -3:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "F32";
      goto LABEL_32;
    case -2:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "I64";
      goto LABEL_32;
    case -1:
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "I32";
      goto LABEL_32;
    default:
      if (v3 != 192)
        return this;
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = "Void";
LABEL_32:
      WTF::PrintStream::printf(v5, "%s", v6);
      break;
  }
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::Wasm::isValidTypeKind<signed char>(unsigned int a1)
{
  return (a1 > 0xFFFFFFBF) & (0xF80FFC19C001C001 >> a1);
}

void JSC::Wasm::ParserBase::parseReftypeSignature(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>, float a5@<S1>)
{
  unint64_t v7;
  unsigned int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const JSC::Wasm::Type *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unsigned __int8 *v27;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  const JSC::Wasm::Type *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  JSC::Wasm::TypeDefinition *v43;
  int v44;
  char *v45;
  WTF *v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  WTF *v72;
  unint64_t CachedUnrolling;
  const JSC::Wasm::TypeDefinition *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  int v81;
  uint64_t v82;
  uint64_t *v83[2];
  _QWORD v84[3];
  char v85;
  __int128 v86;
  _QWORD v87[33];

  v87[32] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 16))
    goto LABEL_16;
  *(_QWORD *)a1 = v7 + 1;
  v8 = *(char *)(*(_QWORD *)(a1 + 8) + v7);
  if ((v8 & 0x80000000) != 0)
    goto LABEL_16;
  v11 = v8 | (v8 >> 6 << 7);
  if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v8 | ((v8 >> 6) << 7))))
    goto LABEL_16;
  if (!BYTE1(dword_1ECF4C7B0))
  {
    if ((v11 + 29) < 2u)
      goto LABEL_16;
    goto LABEL_7;
  }
  v17 = (char)v11;
  v18 = (char)v11 + 22;
  if (v18 > 9 || ((1 << v18) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
  {
    if ((v11 + 29) >= 2u)
    {
LABEL_7:
      v17 = 0;
      goto LABEL_8;
    }
    v48 = *(_QWORD *)(a1 + 16);
    v49 = *(_QWORD *)a1;
    v50 = v48 - *(_QWORD *)a1;
    if (v48 <= *(_QWORD *)a1)
      goto LABEL_16;
    v51 = 0;
    LODWORD(v17) = 0;
    v52 = *(_QWORD *)(a1 + 8);
    v53 = 5;
    if (v50 < 5)
      v53 = v50;
    v54 = v53 - 1;
    *(_QWORD *)a1 = v49 + 1;
    v55 = v52 + v49;
    v56 = v49 + 2;
    v57 = 7;
    while (1)
    {
      v58 = *(char *)(v55 + v51);
      LODWORD(v17) = ((v58 & 0x7F) << (v57 - 7)) | v17;
      if ((v58 & 0x80000000) == 0)
        break;
      if (v54 == v51)
        goto LABEL_16;
      LOBYTE(v58) = v56 + v51;
      *(_QWORD *)a1 = v56 + v51;
      v57 += 7;
      if (v50 == ++v51)
      {
        __break(1u);
        break;
      }
    }
    if ((_DWORD)v51 == 4)
    {
      if ((v58 & 0x40) == 0)
      {
        if (v58 > 7u)
          goto LABEL_16;
        goto LABEL_66;
      }
      if ((v58 & 0xF8) != 0x78)
        goto LABEL_16;
    }
    if (v57 <= 0x1F && (v58 & 0x40) != 0)
    {
      LODWORD(v17) = v17 | (-1 << v57);
      goto LABEL_86;
    }
LABEL_66:
    if ((v17 & 0x80000000) == 0)
    {
      if (v17 >= *(_DWORD *)(a2 + 100))
      {
        if (!*(_BYTE *)(a1 + 32))
          goto LABEL_16;
        v59 = *(_DWORD *)(a1 + 36);
        if (v17 < v59 || v17 >= *(_DWORD *)(a1 + 40))
          goto LABEL_16;
      }
      else if (!*(_BYTE *)(a1 + 32) || (v59 = *(_DWORD *)(a1 + 36), v17 < v59))
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * v17);
        goto LABEL_8;
      }
      JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(v17 - v59), v12, v13, v14, v15, v16, (unsigned int **)&v80);
      v17 = (unint64_t)v80;
      v80 = 0;
      if (v17)
      {
        do
        {
          v67 = __ldaxr((unsigned int *)v17);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, (unsigned int *)v17));
        if (!v68)
        {
          atomic_store(1u, (unsigned int *)v17);
          v69 = v17;
          WTF::fastFree(v17, v60, v61, v62, v63, v64, v65, v66);
          v17 = v69;
        }
      }
LABEL_8:
      v19 = v11;
      if (v11 - 252 < 4)
        goto LABEL_9;
      if (v11 - 239 < 2)
      {
        if (!BYTE1(dword_1ECF4C7B0))
          goto LABEL_9;
      }
      else if (v11 == 251)
      {
        if (HIBYTE(dword_1ECF4C7B0))
        {
          v19 = 251;
          goto LABEL_9;
        }
      }
      else if (v11 - 227 < 2)
      {
        goto LABEL_49;
      }
LABEL_16:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("result type of block is not a valid ref type", (unint64_t *)a1, 45, (_QWORD *)a4, a5);
      *(_BYTE *)(a4 + 8) = 1;
      return;
    }
LABEL_86:
    v17 = (int)v17;
    v70 = (int)v17 + 22;
    if (v70 > 9 || ((1 << v70) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
      goto LABEL_16;
    goto LABEL_8;
  }
  v19 = 227;
LABEL_49:
  if (BYTE1(dword_1ECF4C7B0))
    v47 = v17 == 0;
  else
    v47 = 1;
  if (v47)
    goto LABEL_16;
LABEL_9:
  *(_QWORD *)&v86 = v19;
  *((_QWORD *)&v86 + 1) = v17;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v80, &v86, 1uLL);
  *(_QWORD *)&v86 = v87;
  *((_QWORD *)&v86 + 1) = 16;
  v25 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v25 != -1)
  {
    v84[0] = &v85;
    v83[0] = v84;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v26 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v27 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v27))
  {
    goto LABEL_19;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v27);
LABEL_19:
  v83[0] = (uint64_t *)&v80;
  v83[1] = (uint64_t *)&v86;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v26, v83, (uint64_t)v83, v20, v21, v22, v23, v24, (uint64_t)v84);
  v36 = *(_QWORD *)v84[0];
  if (*(_QWORD *)v84[0])
  {
    do
      v37 = __ldaxr((unsigned int *)v36);
    while (__stlxr(v37 + 1, (unsigned int *)v36));
  }
  v38 = __ldxr(v27);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, v27))
LABEL_25:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v27, 0, v30, v31, (uint64_t)v32, v33, v34, v35);
  if (v36)
  {
    do
    {
      v39 = __ldaxr((unsigned int *)v36);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, (unsigned int *)v36));
    if (!v40)
    {
      atomic_store(1u, (unsigned int *)v36);
      WTF::fastFree(v36, v29, v30, v31, (uint64_t)v32, v33, v34, v35);
    }
  }
  v41 = v86;
  if (v87 != (_QWORD *)v86 && (_QWORD)v86 != 0)
  {
    *(_QWORD *)&v86 = 0;
    DWORD2(v86) = 0;
    WTF::fastFree(v41, v29, v30, v31, (uint64_t)v32, v33, v34, v35);
  }
  if (*(_DWORD *)(v36 + 32) == 4)
  {
    v71 = *(unsigned int **)(v36 + 8);
    v72 = *(WTF **)v71;
    v43 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v71 + 8) + 8 * v71[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v43))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v36, (unint64_t)v29, v30, v31, (uint64_t)v32, v33, v34, v35);
      if ((_BYTE)v29)
      {
        v43 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v43 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v43, v72, v30, v31, v32, v33, v34, v35);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v36, v43, v74, v75, v76, v77, v78, v79);
      }
    }
  }
  else
  {
    v43 = (JSC::Wasm::TypeDefinition *)v36;
  }
  v44 = *((_DWORD *)v43 + 8);
  if (v44 == 5)
  {
    v43 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v43 + 1);
    v44 = *((_DWORD *)v43 + 8);
  }
  if (v44)
    v45 = 0;
  else
    v45 = (char *)v43 + 8;
  *a3 = v45;
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 0;
  v46 = v80;
  if (&v82 != (uint64_t *)v80)
  {
    if (v80)
    {
      v80 = 0;
      v81 = 0;
      WTF::fastFree((unint64_t)v46, v29, v30, v31, (uint64_t)v32, v33, v34, v35);
    }
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>, float a9@<S1>)
{
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  float v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  float v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  int *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  const char *v89;
  int v90;
  const char *v91;
  WTF *v92;
  __int128 v93;
  _BYTE v94[128];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v14 = *a2;
  v91 = (const char *)off_1E3572250;
  v92 = (WTF *)v94;
  v93 = xmmword_199122F80;
  v94[0] = 0;
  if (__src)
  {
    v15 = a3 - 1;
    if (!a3)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v15, (uint64_t)&v89, a9);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v89 = (const char *)v16;
    v90 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v91, "StringView", &v89);
  if (v90 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v90])(&v88, &v89);
  (*((void (**)(const char **))v91 + 5))(&v91);
  (*((void (**)(const char **))v91 + 5))(&v91);
  v24 = v92;
  if (!v92)
  {
    v83 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v92, v93, (uint64_t *)&v83);
  v24 = v92;
  if (v92 != (WTF *)v94)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v91 = (const char *)off_1E3572250;
  v92 = (WTF *)v94;
  v93 = xmmword_199122F80;
  v94[0] = 0;
  if (a4)
  {
    v26 = a5 - 1;
    if (!a5)
      v26 = 0;
    WTF::StringImpl::utf8ForCharacters(a4, v26, (uint64_t)&v89, v25);
  }
  else
  {
    v27 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v27 = 1;
    *(_QWORD *)(v27 + 8) = 0;
    *(_BYTE *)(v27 + 16) = 0;
    v89 = (const char *)v27;
    v90 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v91, "StringView", &v89);
  if (v90 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v90])(&v88, &v89);
  (*((void (**)(const char **))v91 + 5))(&v91);
  (*((void (**)(const char **))v91 + 5))(&v91);
  v35 = v92;
  if (!v92)
  {
    v82 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v92, v93, (uint64_t *)&v82);
  v35 = v92;
  if (v92 != (WTF *)v94)
LABEL_24:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  v91 = (const char *)off_1E3572250;
  v92 = (WTF *)v94;
  v93 = xmmword_199122F80;
  v94[0] = 0;
  if (a6)
  {
    v37 = a7 - 1;
    if (!a7)
      v37 = 0;
    WTF::StringImpl::utf8ForCharacters(a6, v37, (uint64_t)&v89, v36);
  }
  else
  {
    v38 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v38 = 1;
    *(_QWORD *)(v38 + 8) = 0;
    *(_BYTE *)(v38 + 16) = 0;
    v89 = (const char *)v38;
    v90 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v91, "StringView", &v89);
  if (v90 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v90])(&v88, &v89);
  (*((void (**)(const char **))v91 + 5))(&v91);
  (*((void (**)(const char **))v91 + 5))(&v91);
  v46 = v92;
  if (!v92)
  {
    v81 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v92, v93, (uint64_t *)&v81);
  v46 = v92;
  if (v92 != (WTF *)v94)
LABEL_36:
    WTF::fastFree((unint64_t)v46, v39, v40, v41, v42, v43, v44, v45);
  v91 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v92) = 41;
  v88 = v14;
  v89 = ": ";
  v90 = 2;
  v86 = v82;
  v87 = v83;
  v85 = v81;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v91, &v88, (uint64_t)&v89, (uint64_t *)&v87, (uint64_t *)&v86, (uint64_t *)&v85, &v84);
  if (v84)
  {
    *a8 = v84;
    v84 = 0;
    v54 = v81;
    v81 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
        WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
    }
    v55 = v82;
    v82 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
      {
        WTF::StringImpl::~StringImpl(v55, v47, v48, v49, v50, v51, v52, v53);
        WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
      }
      else
      {
        *(_DWORD *)v55 -= 2;
      }
    }
    v56 = v83;
    v83 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
      {
        WTF::StringImpl::~StringImpl(v56, v47, v48, v49, v50, v51, v52, v53);
        WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
      }
      else
      {
        *(_DWORD *)v56 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,long long,WTF::ASCIILiteral,unsigned int>(char *__src@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, _QWORD *a8@<X8>, float a9@<S1>)
{
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  const char *v105;
  int v106;
  const char *v107;
  WTF *v108;
  __int128 v109;
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v14 = *a2;
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (__src)
  {
    v15 = a3 - 1;
    if (!a3)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v15, (uint64_t)&v105, a9);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v105 = (const char *)v16;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v24 = v108;
  if (!v108)
  {
    v98 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v98);
  v24 = v108;
  if (v108 != (WTF *)v110)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%lld", a4);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v32 = v108;
  if (!v108)
  {
    v97 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v97);
  v32 = v108;
  if (v108 != (WTF *)v110)
LABEL_17:
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (a5)
  {
    v34 = a6 - 1;
    if (!a6)
      v34 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v34, (uint64_t)&v105, v33);
  }
  else
  {
    v35 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = 0;
    *(_BYTE *)(v35 + 16) = 0;
    v105 = (const char *)v35;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v43 = v108;
  if (!v108)
  {
    v96 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v96);
  v43 = v108;
  if (v108 != (WTF *)v110)
LABEL_29:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%u", a7);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v51 = v108;
  if (!v108)
  {
    v95 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v95);
  v51 = v108;
  if (v108 != (WTF *)v110)
LABEL_34:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  v107 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v108) = 41;
  v104 = v14;
  v105 = ": ";
  v106 = 2;
  v102 = v97;
  v103 = v98;
  v100 = v95;
  v101 = v96;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v107, &v104, (uint64_t)&v105, (uint64_t *)&v103, (uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, &v99);
  if (v99)
  {
    *a8 = v99;
    v99 = 0;
    v59 = v95;
    v95 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v59 -= 2;
      }
    }
    v60 = v96;
    v96 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::~StringImpl(v60, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v60 -= 2;
      }
    }
    v61 = v97;
    v97 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::~StringImpl(v61, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v61 -= 2;
      }
    }
    v62 = v98;
    v98 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int **a7@<X8>)
{
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  unsigned int v31;

  v8 = 0;
  v9 = *(_DWORD *)(result + 8);
  v10 = *a2;
  v11 = *a2;
  do
  {
    ++v8;
    v12 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v12);
  v13 = *a4;
  if (*a4)
    v14 = *(_DWORD *)(v13 + 4);
  else
    v14 = 0;
  v15 = *a5;
  if (*a5)
    v16 = *(_DWORD *)(v15 + 4);
  else
    v16 = 0;
  v17 = *a6;
  if (*a6)
    v18 = *(_DWORD *)(v17 + 4);
  else
    v18 = 0;
  if ((v18 | v16) < 0)
    goto LABEL_40;
  v19 = __OFADD__(v16, v18);
  v20 = v16 + v18;
  v21 = v19;
  if (v14 < 0 || v21)
    goto LABEL_40;
  v22 = *(_DWORD *)(a3 + 8);
  v19 = __OFADD__(v14, v20);
  v23 = v14 + v20;
  v24 = v19;
  if (v22 < 0 || v24)
    goto LABEL_40;
  v19 = __OFADD__(v22, v23);
  v25 = v22 + v23;
  v26 = v19;
  if (v8 < 0
    || v26
    || ((v19 = __OFADD__(v8, v25), v27 = v8 + v25, !v19) ? (v28 = 0) : (v28 = 1),
        v9 < 0 || (v28 & 1) != 0 || (v19 = __OFADD__(v9, v27), v29 = (v9 + v27), v19)))
  {
LABEL_40:
    *a7 = 0;
    return result;
  }
  if (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0)
  {
    if (v15)
    {
      v31 = *(_DWORD *)(v15 + 16);
      v30 = (v31 >> 2) & 1;
      if (!v17 || (v31 & 4) == 0)
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v29, v30, *(_OWORD **)result, *(_QWORD *)(result + 8), v10, *(_OWORD **)a3, *(_QWORD *)(a3 + 8), v13, a7, v15, v17);
    }
    else if (!v17)
    {
      v30 = 1;
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v29, v30, *(_OWORD **)result, *(_QWORD *)(result + 8), v10, *(_OWORD **)a3, *(_QWORD *)(a3 + 8), v13, a7, v15, v17);
    }
    v30 = (*(unsigned __int8 *)(v17 + 16) >> 2) & 1;
  }
  else
  {
    v30 = 0;
  }
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v29, v30, *(_OWORD **)result, *(_QWORD *)(result + 8), v10, *(_OWORD **)a3, *(_QWORD *)(a3 + 8), v13, a7, v15, v17);
}

