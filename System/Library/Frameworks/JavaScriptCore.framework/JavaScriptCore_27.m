uint64_t operationRegExpMatchFastString(JSC::JSGlobalObject *a1, JSC::RegExpObject *this, JSC::JSString *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  if ((*(_BYTE *)((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFFCLL) + 18) & 2) != 0)
    return JSC::RegExpObject::matchGlobal(this, a1, a3, a4, a5, a6, a7, a8, a9);
  else
    return JSC::RegExpObject::execInline(this, a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t operationRegExpMatchFastGlobalString(unint64_t a1, JSC::RegExp *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v12;
  JSC::VM *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  JSC::JSGlobalObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  JSC::VM *v32;
  JSC::VM *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  JSC::VM *v44;
  uint64_t v45;
  uint64_t v46;
  int v48;
  uint64_t v49;
  JSC::JSGlobalObject *v50;
  int v51;
  unsigned int v52;
  JSC::VM *v53;
  uint64_t v54;
  uint64_t v55;
  JSC::VM *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  JSC::VM *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t OutOfMemoryError;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  JSC::Exception *v78;
  uint64_t v79;
  JSC::VM *v80;
  JSC::RegExp *v81;
  WTF::String *v82;
  _DWORD *v83[2];
  int v84;
  _QWORD var60[13];

  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v12 + 40) = var60[12];
  v82 = (WTF::String *)(a3 + 8);
  if ((a3[8] & 1) != 0)
    v82 = (WTF::String *)JSC::JSRopeString::resolveRope((unint64_t)a3, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  var60[0] = a3;
  var60[1] = v82;
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if ((*((_WORD *)a2 + 9) & 0x60) != 0)
  {
    v79 = *(_QWORD *)v82;
    if (*(_QWORD *)v82)
      LODWORD(v79) = *(_DWORD *)(v79 + 4);
    v84 = v79;
    v83[0] = var60;
    v83[1] = &v84;
    return JSC::collectMatches<operationRegExpMatchFastGlobalString::$_0>(v12, a1, (JSC::VM *)a3, v82, a2, v83, a7, a8);
  }
  else
  {
    v13 = *(JSC::VM **)(a1 + 56);
    v21 = JSC::RegExp::match(a2, (JSC::JSGlobalObject *)a1, v82, 0, a5, a6, a7, a8);
    v23 = v14;
    if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13, v14, v15, v16, v17, v18, v19, v20))
    {
      v23 = 0;
      v21 = -1;
    }
    else if (v21 != -1)
    {
      *(_QWORD *)(a1 + 2152) = a2;
      *(_QWORD *)(a1 + 2144) = a3;
      *(_QWORD *)(a1 + 2120) = v21;
      *(_QWORD *)(a1 + 2128) = v23;
      *(_BYTE *)(a1 + 2136) = 0;
      if (*((_DWORD *)v13 + 190) >= *(unsigned __int8 *)(a1 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, a1);
    }
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v14, v15, v16, v17, v18, v19, v20))
    {
      return 0;
    }
    if (v21 != -1)
    {
      v31 = JSC::constructEmptyArray(a1, 0, 0, 0, v17, v18, v19, v20, v22);
      if (!*(_DWORD *)(v12 + 80)
        || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v24, v25, v26, v27, v28, v29, v30))
      {
        v32 = 0;
        while ((*(_BYTE *)(v31 + 4) & 0xE) == 0 || *(_DWORD *)(*(_QWORD *)(v31 + 8) - 8) >> 5 < 0xC35u)
        {
          v33 = JSC::jsSubstringOfResolved((JSC *)v12, (JSC::VM *)a3, (JSC::JSString *)v21, (v23 - v21), v27, v28, v29, v30);
          JSC::JSObject::putDirectIndex(v31, a1, v32, (unint64_t)v33, v34, v35, v36, v37, v38);
          if (*(_QWORD *)(v12 + 16))
            return 0;
          v43 = v23 == v21 ? v23 + 1 : v23;
          v44 = *(JSC::VM **)(a1 + 56);
          v21 = JSC::RegExp::match(a2, (JSC::JSGlobalObject *)a1, v82, v43, v39, v40, v41, v42);
          v23 = (uint64_t)v24;
          if (*((_DWORD *)v44 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v44, (uint64_t)v24, v45, v46, v27, v28, v29, v30))
          {
            v23 = 0;
            v21 = -1;
          }
          else if (v21 != -1)
          {
            *(_QWORD *)(a1 + 2152) = a2;
            *(_QWORD *)(a1 + 2144) = a3;
            *(_QWORD *)(a1 + 2120) = v21;
            *(_QWORD *)(a1 + 2128) = v23;
            *(_BYTE *)(a1 + 2136) = 0;
            if (*((_DWORD *)v44 + 190) >= *(unsigned __int8 *)(a1 + 7))
              JSC::Heap::writeBarrierSlowPath((uint64_t)v44 + 192, a1);
          }
          if (*(_QWORD *)(v12 + 16))
            return 0;
          v32 = (JSC::VM *)((_DWORD)v32 + 1);
          if (v21 == -1)
            return v31;
        }
        v80 = (JSC::VM *)a3;
        v81 = a2;
        v48 = -1;
        v49 = v21;
        v50 = (JSC::JSGlobalObject *)v23;
        do
        {
          if ((*(_BYTE *)(v31 + 4) & 0xE) != 0)
            v51 = *(_DWORD *)(*(_QWORD *)(v31 + 8) - 8);
          else
            v51 = 0;
          ++v48;
          if ((v51 + v48) >= 0x10000001)
          {
            OutOfMemoryError = JSC::createOutOfMemoryError(a1, v24);
            v78 = (JSC::Exception *)OutOfMemoryError;
            if ((OutOfMemoryError & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16
                                                                      * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                      + 0x4C)))
            {
              v78 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)OutOfMemoryError, 0, v72, v73, v74, v75, v76);
            }
            JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, v78, v77, v72, v73, v74, v75, v76);
            return 10;
          }
          if ((JSC::JSGlobalObject *)v49 == v50)
            v52 = (_DWORD)v50 + 1;
          else
            v52 = v50;
          v53 = *(JSC::VM **)(a1 + 56);
          v49 = JSC::RegExp::match(v81, (JSC::JSGlobalObject *)a1, v82, v52, v27, v28, v29, v30);
          v50 = v24;
          if (*((_DWORD *)v53 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v53, (uint64_t)v24, v54, v55, v27, v28, v29, v30))
          {
            v50 = 0;
            v49 = -1;
          }
          else if (v49 != -1)
          {
            *(_QWORD *)(a1 + 2152) = v81;
            *(_QWORD *)(a1 + 2144) = v80;
            *(_QWORD *)(a1 + 2120) = v49;
            *(_QWORD *)(a1 + 2128) = v50;
            *(_BYTE *)(a1 + 2136) = 0;
            if (*((_DWORD *)v53 + 190) >= *(unsigned __int8 *)(a1 + 7))
              JSC::Heap::writeBarrierSlowPath((uint64_t)v53 + 192, a1);
          }
          if (*(_DWORD *)(v12 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v24, v54, v55, v27, v28, v29, v30))
          {
            return 0;
          }
        }
        while (v49 != -1);
        while (1)
        {
          v56 = JSC::jsSubstringOfResolved((JSC *)v12, v80, (JSC::JSString *)v21, (v23 - v21), v27, v28, v29, v30);
          JSC::JSObject::putDirectIndex(v31, a1, v32, (unint64_t)v56, v57, v58, v59, v60, v61);
          if (*(_QWORD *)(v12 + 16))
            break;
          v66 = v23 == v21 ? v23 + 1 : v23;
          v67 = *(JSC::VM **)(a1 + 56);
          v21 = JSC::RegExp::match(v81, (JSC::JSGlobalObject *)a1, v82, v66, v62, v63, v64, v65);
          v23 = v68;
          if (*((_DWORD *)v67 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v67, v68, v69, v70, v27, v28, v29, v30))
          {
            v23 = 0;
            v21 = -1;
          }
          else if (v21 != -1)
          {
            *(_QWORD *)(a1 + 2152) = v81;
            *(_QWORD *)(a1 + 2144) = v80;
            *(_QWORD *)(a1 + 2120) = v21;
            *(_QWORD *)(a1 + 2128) = v23;
            *(_BYTE *)(a1 + 2136) = 0;
            if (*((_DWORD *)v67 + 190) >= *(unsigned __int8 *)(a1 + 7))
              JSC::Heap::writeBarrierSlowPath((uint64_t)v67 + 192, a1);
          }
          if (*(_QWORD *)(v12 + 16))
            break;
          v32 = (JSC::VM *)((_DWORD)v32 + 1);
          if (v21 == -1)
            return v31;
        }
      }
      return 0;
    }
    return 2;
  }
}

uint64_t JSC::collectMatches<operationRegExpMatchFastGlobalString::$_0>(uint64_t a1, unint64_t a2, JSC::VM *a3, const WTF::String *a4, JSC::RegExp *a5, _DWORD **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  WTF::AtomStringImpl *v20;
  WTF::AtomStringImpl *v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  JSC::VM *v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int32x4_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  WTF::AtomStringImpl *v61;
  int v62;
  int *v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  BOOL v78;
  unint64_t OutOfMemoryError;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  JSC::Exception *v86;
  _DWORD **v88;
  JSC::VM *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int32x4_t v94;
  WTF::AtomStringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::AtomStringImpl *v108;
  int v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  int v120;
  int v121;
  int v122;
  _DWORD **v123;

  v11 = *(_QWORD *)(a2 + 56);
  v18 = JSC::RegExp::match(a5, (JSC::JSGlobalObject *)a2, a4, 0, (uint64_t)a5, (uint64_t)a6, a7, a8);
  v21 = v20;
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_134;
  v120 = *(_DWORD *)(v11 + 80);
  if ((v120 & 0x27) != 0 && (v120 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v12, v13, v14, v15, v16, v17);
  if (*(_QWORD *)(v11 + 16))
  {
    v21 = 0;
    v18 = -1;
  }
  else
  {
LABEL_134:
    if (v18 != -1)
    {
      *(_QWORD *)(a2 + 2152) = a5;
      *(_QWORD *)(a2 + 2144) = a3;
      *(_QWORD *)(a2 + 2120) = v18;
      *(_QWORD *)(a2 + 2128) = v21;
      *(_BYTE *)(a2 + 2136) = 0;
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, a2);
    }
  }
  if (*(_DWORD *)(a1 + 80))
  {
    v121 = *(_DWORD *)(a1 + 80);
    if ((v121 & 0x27) != 0 && (v121 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a1 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(a1 + 16))
      return 0;
  }
  if (v18 == -1)
    return 2;
  v29 = JSC::constructEmptyArray(a2, 0, 0, 0, v14, v15, v16, v17, v19);
  if (*(_DWORD *)(a1 + 80))
  {
    v122 = *(_DWORD *)(a1 + 80);
    if ((v122 & 0x27) != 0 && (v122 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a1 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(a1 + 16))
      return 0;
  }
  v30 = 0;
  while ((*(_BYTE *)(v29 + 4) & 0xE) == 0 || *(_DWORD *)(*(_QWORD *)(v29 + 8) - 8) >> 5 < 0xC35u)
  {
    v31 = JSC::jsSubstringOfResolved((JSC *)a1, a3, (JSC::JSString *)v18, ((_DWORD)v21 - v18), v25, v26, v27, v28);
    JSC::JSObject::putDirectIndex(v29, a2, v30, (unint64_t)v31, v32, v33, v34, v35, v36);
    if (*(_QWORD *)(a1 + 16))
      return 0;
    if (v21 == (WTF::AtomStringImpl *)v18)
    {
      v44 = (int *)**((_QWORD **)*a6 + 1);
      if (v44)
      {
        v45 = *v44;
        *v44 += 2;
        LODWORD(v21) = v18 + 1;
        if ((v18 + 1) < *a6[1])
        {
          v46 = v44[1];
          if (v46 > v18 && (v44[4] & 4) == 0)
          {
            v57 = *((_QWORD *)v44 + 1);
            v58 = v46 > v21 && (*(_WORD *)(v57 + 2 * v18) & 0xFC00) == 55296;
            if (v58 && *(_WORD *)(v57 + 2 * v21) >> 10 == 55)
              LODWORD(v21) = v18 + 2;
          }
        }
        if (v45)
        {
          *v44 = v45;
        }
        else
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v37, v38, v39, v40, v41, v42, v43);
          WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
        }
      }
      else
      {
        LODWORD(v21) = v18 + 1;
      }
    }
    v47 = *(_QWORD *)(a2 + 56);
    v18 = JSC::RegExp::match(a5, (JSC::JSGlobalObject *)a2, a4, v21, v40, v41, v42, v43);
    v21 = v22;
    if (!*(_DWORD *)(v47 + 80))
      goto LABEL_135;
    v56 = *(_DWORD *)(v47 + 80);
    if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v47 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v47 + 16))
    {
      v21 = 0;
      v18 = -1;
    }
    else
    {
LABEL_135:
      if (v18 != -1)
      {
        *(_QWORD *)(a2 + 2152) = a5;
        *(_QWORD *)(a2 + 2144) = a3;
        *(_QWORD *)(a2 + 2120) = v18;
        *(_QWORD *)(a2 + 2128) = v21;
        *(_BYTE *)(a2 + 2136) = 0;
        if (*(_DWORD *)(v47 + 760) >= *(unsigned __int8 *)(a2 + 7))
          JSC::Heap::writeBarrierSlowPath(v47 + 192, a2);
      }
    }
    if (*(_QWORD *)(a1 + 16))
      return 0;
    v30 = (JSC::VM *)((_DWORD)v30 + 1);
    if (v18 == -1)
      return v29;
  }
  v123 = a6;
  v59 = -1;
  v60 = v18;
  v61 = v21;
  while (1)
  {
    v62 = (*(_BYTE *)(v29 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v29 + 8) - 8) : 0;
    ++v59;
    if ((v62 + v59) >= 0x10000001)
      break;
    if ((WTF::AtomStringImpl *)v60 == v61)
    {
      v63 = (int *)**((_QWORD **)*v123 + 1);
      if (v63)
      {
        v64 = *v63;
        *v63 += 2;
        LODWORD(v61) = v60 + 1;
        if ((v60 + 1) < *v123[1])
        {
          v65 = v63[1];
          if (v65 > v60 && (v63[4] & 4) == 0)
          {
            v77 = *((_QWORD *)v63 + 1);
            v78 = v65 > v61 && (*(_WORD *)(v77 + 2 * v60) & 0xFC00) == 55296;
            if (v78 && *(_WORD *)(v77 + 2 * v61) >> 10 == 55)
              LODWORD(v61) = v60 + 2;
          }
        }
        if (v64)
        {
          *v63 = v64;
        }
        else
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v63, v22, v23, v24, v25, v26, v27, v28);
          WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
        }
      }
      else
      {
        LODWORD(v61) = v60 + 1;
      }
    }
    v66 = *(_QWORD *)(a2 + 56);
    v60 = JSC::RegExp::match(a5, (JSC::JSGlobalObject *)a2, a4, v61, v25, v26, v27, v28);
    v61 = v22;
    if (!*(_DWORD *)(v66 + 80))
      goto LABEL_136;
    v75 = *(_DWORD *)(v66 + 80);
    if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v66 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v66 + 16))
    {
      v61 = 0;
      v60 = -1;
    }
    else
    {
LABEL_136:
      if (v60 != -1)
      {
        *(_QWORD *)(a2 + 2152) = a5;
        *(_QWORD *)(a2 + 2144) = a3;
        *(_QWORD *)(a2 + 2120) = v60;
        *(_QWORD *)(a2 + 2128) = v61;
        *(_BYTE *)(a2 + 2136) = 0;
        if (*(_DWORD *)(v66 + 760) >= *(unsigned __int8 *)(a2 + 7))
          JSC::Heap::writeBarrierSlowPath(v66 + 192, a2);
      }
    }
    if (*(_DWORD *)(a1 + 80))
    {
      v76 = *(_DWORD *)(a1 + 80);
      if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(a1 + 64), 7u, v23, v24, v25, v26, v27, v28);
      if (*(_QWORD *)(a1 + 16))
        return 0;
    }
    if (v60 == -1)
    {
      v88 = v123;
      while (1)
      {
        v89 = JSC::jsSubstringOfResolved((JSC *)a1, a3, (JSC::JSString *)v18, ((_DWORD)v21 - v18), v25, v26, v27, v28);
        JSC::JSObject::putDirectIndex(v29, a2, v30, (unint64_t)v89, v90, v91, v92, v93, v94);
        if (*(_QWORD *)(a1 + 16))
          return 0;
        if (v21 == (WTF::AtomStringImpl *)v18)
        {
          v102 = (int *)**((_QWORD **)*v88 + 1);
          if (v102)
          {
            v103 = *v102;
            *v102 += 2;
            LODWORD(v21) = v18 + 1;
            if ((v18 + 1) < *v88[1] && (v104 = v102[1], v104 > v18))
            {
              if ((v102[4] & 4) == 0)
              {
                v118 = *((_QWORD *)v102 + 1);
                v119 = v104 > v21 && (*(_WORD *)(v118 + 2 * v18) & 0xFC00) == 55296;
                if (v119 && *(_WORD *)(v118 + 2 * v21) >> 10 == 55)
                  LODWORD(v21) = v18 + 2;
              }
              v88 = v123;
              if (!v103)
              {
LABEL_107:
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v102, v95, v96, v97, v98, v99, v100, v101);
                WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
                goto LABEL_92;
              }
            }
            else if (!v103)
            {
              goto LABEL_107;
            }
            *v102 = v103;
          }
          else
          {
            LODWORD(v21) = v18 + 1;
          }
        }
LABEL_92:
        v105 = *(_QWORD *)(a2 + 56);
        v18 = JSC::RegExp::match(a5, (JSC::JSGlobalObject *)a2, a4, v21, v98, v99, v100, v101);
        v21 = v108;
        if (!*(_DWORD *)(v105 + 80))
          goto LABEL_137;
        v109 = *(_DWORD *)(v105 + 80);
        if ((v109 & 0x27) != 0 && (v109 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v105 + 64), 7u, v106, v107, v25, v26, v27, v28);
        if (*(_QWORD *)(v105 + 16))
        {
          v21 = 0;
          v18 = -1;
        }
        else
        {
LABEL_137:
          if (v18 != -1)
          {
            *(_QWORD *)(a2 + 2152) = a5;
            *(_QWORD *)(a2 + 2144) = a3;
            *(_QWORD *)(a2 + 2120) = v18;
            *(_QWORD *)(a2 + 2128) = v21;
            *(_BYTE *)(a2 + 2136) = 0;
            if (*(_DWORD *)(v105 + 760) >= *(unsigned __int8 *)(a2 + 7))
              JSC::Heap::writeBarrierSlowPath(v105 + 192, a2);
          }
        }
        if (*(_QWORD *)(a1 + 16))
          return 0;
        v30 = (JSC::VM *)((_DWORD)v30 + 1);
        if (v18 == -1)
          return v29;
      }
    }
  }
  OutOfMemoryError = JSC::createOutOfMemoryError(a2, v22);
  v86 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v86 = (JSC::Exception *)JSC::Exception::create(a1, (JSC::VM *)OutOfMemoryError, 0, v80, v81, v82, v83, v84);
  }
  JSC::VM::throwException((JSC::VM *)a1, (JSC::JSGlobalObject *)a2, v86, v85, v80, v81, v82, v83, v84);
  return 10;
}

unsigned __int8 *operationParseIntGenericNoRadix(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t i;
  double v10;
  unint64_t v11;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *result;
  double v31;
  uint64_t v32;
  unint64_t v33;
  int v35;
  int v36;
  int v37;
  int v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int16 *v44;
  double v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  BOOL v54;
  int v56;
  int v57;
  int v58;
  int v59;
  double v60;
  double v61;
  double v62;
  int v63;
  int v64;
  int v65;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  double v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char *v81;
  unsigned __int8 *v82;
  unint64_t var58[12];

  v11 = a2;
  v13 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v13 + 40) = var58[11];
  if (!(a2 >> 49))
    goto LABEL_2;
  *(double *)a9.i64 = (double)(int)a2;
  if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = a2 - 0x2000000000000;
  if (*(double *)a9.i64 == 0.0)
  {
    v31 = 0.0;
LABEL_39:
    v32 = (int)v31;
    if ((double)(int)v32 == v31 && ((*(_QWORD *)&v31 & 0x8000000000000000) == 0 || (_DWORD)v32)
      || (*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (double)(int)v32 == v31
      && ((*(_QWORD *)&v31 & 0x8000000000000000) == 0 || (_DWORD)v32))
    {
      return (unsigned __int8 *)(v32 | 0xFFFE000000000000);
    }
    else
    {
      return (unsigned __int8 *)(*(_QWORD *)&v31 + 0x2000000000000);
    }
  }
  if (fabs(*(double *)a9.i64) <= 9.00719925e15 && (*(double *)a9.i64 >= 0.000001 || *(double *)a9.i64 <= -1.0))
  {
    v31 = trunc(*(double *)a9.i64);
    goto LABEL_39;
  }
LABEL_2:
  v82 = (unsigned __int8 *)a2;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
  {
    result = JSC::JSValue::toStringSlowCase(&v82, (uint64_t)a1, 0, a4, a5, a6, a7, a8);
    v11 = (unint64_t)result;
    if (!result)
      return result;
  }
  v14 = *(int **)(v11 + 8);
  if ((v14 & 1) != 0)
  {
    if ((v14 & 2) != 0)
    {
      v23 = *(_QWORD *)((*(_QWORD *)(v11 + 20) & 0xFFFFFFFFFLL) + 8);
      if (v23
        && (v24 = *(unsigned int *)(v23 + 4),
            v25 = *(_QWORD *)(v11 + 24),
            i = v25 >> 16,
            v24 > (v25 >> 16)))
      {
        v26 = *(unsigned int *)(v23 + 16);
        v16 = *(char **)(v23 + 8);
        v27 = *(_DWORD *)(v11 + 16);
        if ((int)v24 - (int)i > v27 || (v27 = v24 - i, (_DWORD)i))
        {
          v28 = (v25 >> 16);
          v18 = v27;
          v21 = v24 - i;
          if (((v26 >> 2) & 1) != 0)
          {
            if (v21 < v27)
              goto LABEL_203;
            v16 += v28;
            v18 = v27 | 0x100000000;
          }
          else
          {
            if (v21 < v27)
              goto LABEL_203;
            v16 += 2 * v28;
          }
        }
        else
        {
          i = v26 >> 2;
          v18 = v24 & 0xFFFFFFFEFFFFFFFFLL | (((v26 >> 2) & 1) << 32);
        }
      }
      else
      {
        v18 = 0x100000000;
        v16 = &str_77_5;
      }
      goto LABEL_8;
    }
    v14 = *JSC::JSRopeString::resolveRope(v11, a1, a3, a4, a9, a5, a6, a7, a8);
    if (v14)
      goto LABEL_6;
LABEL_24:
    v16 = 0;
    v17 = 1;
    goto LABEL_7;
  }
  if (!v14)
    goto LABEL_24;
LABEL_6:
  v15 = v14[4];
  v16 = (char *)*((_QWORD *)v14 + 1);
  LODWORD(v14) = v14[1];
  v17 = (v15 >> 2) & 1;
LABEL_7:
  v18 = v14 | (unint64_t)(v17 << 32);
LABEL_8:
  if (*(_DWORD *)(v13 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v19 = v18;
  if ((v18 & 0x100000000) == 0)
  {
    v81 = v16;
    if ((_DWORD)v18)
    {
      v33 = 0;
      while (1)
      {
        v16 = (char *)*(unsigned __int16 *)&v81[2 * v33];
        if (v16 > 0xFF)
        {
          if (u_charType(*(unsigned __int16 *)&v81[2 * v33]) != 12
            && ((_DWORD)v16 - 8232) >= 2
            && (_DWORD)v16 != 65279)
          {
            v16 = (char *)*(unsigned __int16 *)&v81[2 * v33];
LABEL_120:
            if ((_DWORD)v16 == 43)
            {
              v21 = v33 + 1;
              v10 = 1.0;
            }
            else
            {
              if ((_DWORD)v16 == 45)
                v10 = -1.0;
              else
                v10 = 1.0;
              if ((_DWORD)v16 == 45)
                v21 = v33 + 1;
              else
                v21 = v33;
            }
            if (v19 - v21 < 2)
              goto LABEL_58;
LABEL_52:
            if (v19 <= v21)
              goto LABEL_203;
            if (*(_WORD *)&v81[2 * v21] != 48)
              goto LABEL_58;
            if (v19 <= v21 + 1)
              goto LABEL_203;
            if ((*(unsigned __int16 *)&v81[2 * v21 + 2] | 0x20) == 0x78)
            {
              v21 += 2;
              v35 = 16;
            }
            else
            {
LABEL_58:
              v35 = 10;
            }
LABEL_59:
            if (v21 >= v19)
              goto LABEL_148;
            v36 = *(unsigned __int16 *)&v81[2 * v21];
            if ((v36 - 48) >= 0xA)
            {
              if ((v36 - 65) < 0x1A)
              {
                v37 = -55;
              }
              else
              {
                if ((v36 - 97) > 0x19)
                  goto LABEL_148;
                v37 = -87;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v37 + v36;
            if (v38 >= v35)
              goto LABEL_148;
            v39 = (double)v35;
            v40 = (double)v35 * 0.0 + (double)v38;
            for (i = v21 + 1; v19 != i; ++i)
            {
              v78 = *(unsigned __int16 *)&v81[2 * i];
              if ((v78 - 48) >= 0xA)
              {
                if ((v78 - 65) < 0x1A)
                {
                  v79 = -55;
                }
                else
                {
                  if ((v78 - 97) > 0x19)
                    goto LABEL_65;
                  v79 = -87;
                }
              }
              else
              {
                v79 = -48;
              }
              v80 = v79 + v78;
              if (v80 >= v35)
                goto LABEL_65;
              v40 = v40 * v39 + (double)v80;
            }
            i = v19;
LABEL_65:
            if (v40 < 9.00719925e15)
            {
LABEL_66:
              v41 = v10 * v40;
              goto LABEL_167;
            }
            switch((v35 - 2) >> 1)
            {
              case 0u:
              case 3u:
              case 7u:
                if (v19 < (int)v21)
                  goto LABEL_203;
                v42 = (int)v21;
                i -= (int)v21;
                v21 = v19 - (int)v21;
                if (i == -1)
                {
                  i = v21;
                }
                else if (v21 < i)
                {
                  goto LABEL_203;
                }
                v43 = (unint64_t)&v81[2 * v42];
                v44 = (unsigned __int16 *)(v43 + 2 * i - 2);
                v40 = 0.0;
                if ((unint64_t)v44 < v43)
                  goto LABEL_66;
                v45 = 1.0;
                break;
              case 4u:
                if (v19 < (int)v21)
                  goto LABEL_203;
                v51 = (int)v21;
                v21 = i - (int)v21;
                i = v19 - v51;
                if (v21 == -1)
                {
                  v21 = v19 - v51;
                }
                else if (i < v21)
                {
                  goto LABEL_203;
                }
                var58[0] = 0;
                fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)&v81[2 * v51], (unsigned __int16 *)&v81[2 * v51 + 2 * v21], (double *)var58, 0x2E00000005);
                v40 = *(double *)var58;
                goto LABEL_66;
              default:
                goto LABEL_66;
            }
            while (1)
            {
              v46 = *v44;
              if (v45 == INFINITY)
              {
                if (v46 != 48)
                {
                  v40 = INFINITY;
                  goto LABEL_66;
                }
              }
              else
              {
                v47 = v46 - 48;
                v48 = v46 - 65;
                if ((v46 - 97) <= 0x19)
                  v49 = v46 - 87;
                else
                  v49 = -1;
                v50 = v46 - 55;
                if (v48 > 0x19)
                  v50 = v49;
                if (v47 <= 9)
                  v50 = v47;
                if (v50 >= v35)
                  v50 = -1;
                v40 = v40 + (double)v50 * v45;
              }
              v45 = v45 * v39;
              if ((unint64_t)--v44 < v43)
                goto LABEL_66;
            }
          }
        }
        else if (*(_WORD *)&v81[2 * v33] > 0x20u || ((1 << (char)v16) & 0x100001A00) == 0)
        {
          v54 = *(_WORD *)&v81[2 * v33] == 160 || (_DWORD)v16 == 13;
          if (!v54 && (_DWORD)v16 != 10)
            goto LABEL_120;
        }
        if (v19 == ++v33)
        {
          v10 = 1.0;
          v21 = v19;
          goto LABEL_52;
        }
      }
    }
    v21 = 0;
    v35 = 10;
    v10 = 1.0;
    goto LABEL_59;
  }
  v20 = 0;
  if (!(_DWORD)v18)
  {
    v21 = 10;
    v22 = 1.0;
    goto LABEL_138;
  }
  while (1)
  {
    v56 = v16[v20];
    i = (v56 - 9);
    if (i < 5)
      goto LABEL_128;
    if (v16[v20] <= 0x2Au)
    {
      if (v56 != 32)
        goto LABEL_175;
      goto LABEL_128;
    }
    if (v56 == 43)
    {
      ++v20;
LABEL_175:
      v22 = 1.0;
      goto LABEL_134;
    }
    if (v56 == 45)
      break;
    if (v56 != 160)
      goto LABEL_175;
LABEL_128:
    if (v18 == ++v20)
    {
      v22 = 1.0;
      v20 = v18;
      goto LABEL_134;
    }
  }
  ++v20;
  v22 = -1.0;
LABEL_134:
  v21 = v18 - v20;
  if (v21 < 2)
    goto LABEL_137;
  if (v18 > v20)
  {
    if (v16[v20] != 48)
      goto LABEL_137;
    v21 = v20 + 1;
    if (v18 > v20 + 1)
    {
      if ((v16[v21] | 0x20) == 0x78)
      {
        v20 += 2;
        v21 = 16;
LABEL_138:
        if (v20 >= v18)
          goto LABEL_148;
        v57 = v16[v20];
        if ((v57 - 48) < 0xA)
        {
          v58 = -48;
          goto LABEL_141;
        }
        if ((v57 - 65) < 0x1A)
        {
          v58 = -55;
LABEL_141:
          v59 = v58 + v57;
          v41 = NAN;
          if (v59 < (int)v21 && v59 != -1)
          {
            v61 = (double)(int)v21;
            v62 = (double)(int)v21 * 0.0 + (double)v59;
            i = v20 + 1;
            if (v20 + 1 == v18)
            {
LABEL_164:
              i = v18;
            }
            else
            {
              while (1)
              {
                v63 = v16[i];
                if ((v63 - 48) >= 0xA)
                {
                  if ((v63 - 65) < 0x1A)
                  {
                    v64 = -55;
                  }
                  else
                  {
                    if ((v63 - 97) > 0x19)
                      break;
                    v64 = -87;
                  }
                }
                else
                {
                  v64 = -48;
                }
                v65 = v64 + v63;
                if (v65 >= (int)v21 || v65 == -1)
                  break;
                v62 = v62 * v61 + (double)v65;
                if (v18 == ++i)
                  goto LABEL_164;
              }
            }
            if (v62 < 9.00719925e15)
              goto LABEL_166;
            switch((v21 - 2) >> 1)
            {
              case 0u:
              case 3u:
              case 7u:
                if (v18 < (unint64_t)(int)v20)
                  goto LABEL_203;
                v69 = (int)v20;
                i -= (int)v20;
                v70 = v18 - (uint64_t)(int)v20;
                if (i == -1)
                {
                  i = v70;
                }
                else if (v70 < i)
                {
                  goto LABEL_203;
                }
                v71 = (unsigned __int8 *)&v16[v69 - 1 + i];
                if (v71 < (unsigned __int8 *)&v16[v69])
                {
                  v62 = 0.0;
                  goto LABEL_166;
                }
                v72 = 1.0;
                v62 = 0.0;
                break;
              case 4u:
                if (v18 < (unint64_t)(int)v20)
                  goto LABEL_203;
                v10 = v22;
                v21 = (int)v20;
                v68 = i - (int)v20;
                i = v18 - v21;
                if (v68 == -1)
                  goto LABEL_204;
                if (i >= v68)
                  goto LABEL_182;
                goto LABEL_203;
              default:
                goto LABEL_166;
            }
            while (1)
            {
              v73 = *v71;
              if (v72 == INFINITY)
              {
                if (v73 != 48)
                {
                  v62 = INFINITY;
                  goto LABEL_166;
                }
              }
              else
              {
                v74 = v73 - 48;
                v75 = v73 - 65;
                if ((v73 - 97) <= 0x19)
                  v76 = v73 - 87;
                else
                  v76 = -1;
                v77 = v73 - 55;
                if (v75 > 0x19)
                  v77 = v76;
                if (v74 <= 9)
                  v77 = v74;
                if (v77 >= (int)v21)
                  v77 = -1;
                v62 = v62 + (double)v77 * v72;
              }
              v72 = v72 * v61;
              if (--v71 < (unsigned __int8 *)&v16[v69])
                goto LABEL_166;
            }
          }
        }
        else
        {
          if ((v57 - 97) <= 0x19)
          {
            v58 = -87;
            goto LABEL_141;
          }
LABEL_148:
          v41 = NAN;
        }
LABEL_143:
        v60 = v41;
        return (unsigned __int8 *)(*(_QWORD *)&v60 + 0x2000000000000);
      }
LABEL_137:
      v21 = 10;
      goto LABEL_138;
    }
  }
LABEL_203:
  __break(1u);
LABEL_204:
  v68 = i;
LABEL_182:
  var58[0] = 0;
  fast_float::from_chars_advanced<double,char>((unsigned __int8 *)&v16[v21], (unsigned __int8 *)&v16[v21 + v68], var58, 0x2E00000005);
  v62 = *(double *)var58;
  v22 = v10;
LABEL_166:
  v41 = v22 * v62;
LABEL_167:
  v67 = (int)v41;
  if (v41 == (double)(int)v67 && ((_DWORD)v67 || (*(_QWORD *)&v41 & 0x8000000000000000) == 0))
    return (unsigned __int8 *)(v67 | 0xFFFE000000000000);
  if ((*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v41 != (double)(int)v67)
    goto LABEL_143;
  if ((_DWORD)v67)
    return (unsigned __int8 *)(v67 | 0xFFFE000000000000);
  v60 = v41;
  if ((*(_QWORD *)&v41 & 0x8000000000000000) == 0)
    return (unsigned __int8 *)(v67 | 0xFFFE000000000000);
  else
    return (unsigned __int8 *)(*(_QWORD *)&v60 + 0x2000000000000);
}

unint64_t operationParseIntStringNoRadix(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  double v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v31;
  unsigned int v32;
  int v34;
  int v35;
  int v36;
  int v37;
  double v38;
  unint64_t i;
  unint64_t v40;
  double v41;
  char *v42;
  uint64_t v43;
  BOOL v46;
  int v48;
  int v49;
  int v50;
  int v51;
  double v52;
  double v53;
  int v54;
  int v55;
  int v56;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t var48[10];

  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = var48[9];
  v12 = *(int **)(a2 + 8);
  if ((v12 & 1) != 0)
  {
    if ((v12 & 2) != 0)
    {
      v17 = *(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL;
      v22 = *(_QWORD *)(v17 + 8);
      if (v22
        && (v9 = *(unsigned int *)(v22 + 4),
            v23 = *(_QWORD *)(a2 + 24),
            v24 = v23 >> 16,
            v9 > (v23 >> 16)))
      {
        v25 = *(unsigned int *)(v22 + 16);
        v14 = *(_QWORD *)(v22 + 8);
        v26 = *(_DWORD *)(a2 + 16);
        if ((int)v9 - (int)v24 > v26 || (v26 = v9 - v24, (_DWORD)v24))
        {
          v27 = (v25 >> 2) & 1;
          v28 = (v23 >> 16);
          v16 = v26;
          v9 -= v24;
          if ((_DWORD)v27)
          {
            if (v9 < v26)
              goto LABEL_154;
            v14 += v28;
            v16 = v26 | 0x100000000;
          }
          else
          {
            if (v9 < v26)
              goto LABEL_154;
            v14 += 2 * v28;
          }
        }
        else
        {
          v9 = v9 & 0xFFFFFFFEFFFFFFFFLL | (((v25 >> 2) & 1) << 32);
          v16 = v9;
        }
      }
      else
      {
        v14 = (unint64_t)&str_77_5;
        v16 = 0x100000000;
      }
      goto LABEL_5;
    }
    v12 = *JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
    if (v12)
      goto LABEL_3;
LABEL_19:
    v14 = 0;
    v15 = 1;
    goto LABEL_4;
  }
  if (!v12)
    goto LABEL_19;
LABEL_3:
  v13 = v12[4];
  v14 = *((_QWORD *)v12 + 1);
  LODWORD(v12) = v12[1];
  v15 = (v13 >> 2) & 1;
LABEL_4:
  v16 = v12 | (unint64_t)(v15 << 32);
LABEL_5:
  v17 = *(unsigned int *)(v11 + 80);
  if ((_DWORD)v17)
  {
    v29 = *(_DWORD *)(v11 + 80);
    v9 = 39;
    if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
    {
      v42 = (char *)v14;
      v43 = v16;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v16 = v43;
      v14 = (unint64_t)v42;
    }
    v17 = *(_QWORD *)(v11 + 16);
    if (v17)
      return 0;
  }
  v18 = v16;
  if ((v16 & 0x100000000) != 0)
  {
    v19 = 0;
    if (!v18)
    {
      v20 = 10;
      v21 = 1.0;
      goto LABEL_102;
    }
    while (1)
    {
      v48 = *(unsigned __int8 *)(v14 + v19);
      v9 = (v48 - 9);
      if (v9 >= 5)
      {
        if (*(unsigned __int8 *)(v14 + v19) > 0x2Au)
        {
          if (v48 == 43)
          {
            ++v19;
LABEL_139:
            v21 = 1.0;
            goto LABEL_98;
          }
          if (v48 == 45)
          {
            ++v19;
            v21 = -1.0;
LABEL_98:
            v17 = v18 - v19;
            if (v18 - v19 < 2)
              goto LABEL_101;
            if (v18 > v19)
            {
              if (*(_BYTE *)(v14 + v19) != 48)
                goto LABEL_101;
              v17 = v19 + 1;
              if (v18 > v19 + 1)
              {
                if ((*(unsigned __int8 *)(v14 + v17) | 0x20) == 0x78)
                {
                  v19 += 2;
                  v20 = 16;
LABEL_102:
                  if (v19 < v18)
                  {
                    v49 = *(unsigned __int8 *)(v14 + v19);
                    if ((v49 - 48) < 0xA)
                    {
                      v50 = -48;
LABEL_105:
                      v51 = v50 + v49;
                      v41 = NAN;
                      if (v51 >= v20 || v51 == -1)
                      {
LABEL_107:
                        v52 = v41;
                        return *(_QWORD *)&v52 + 0x2000000000000;
                      }
                      v53 = (double)v20 * 0.0 + (double)v51;
                      v17 = v19 + 1;
                      if (v19 + 1 == v18)
                      {
LABEL_128:
                        v17 = v18;
                      }
                      else
                      {
                        while (1)
                        {
                          v54 = *(unsigned __int8 *)(v14 + v17);
                          if ((v54 - 48) >= 0xA)
                          {
                            if ((v54 - 65) < 0x1A)
                            {
                              v55 = -55;
                            }
                            else
                            {
                              if ((v54 - 97) > 0x19)
                                break;
                              v55 = -87;
                            }
                          }
                          else
                          {
                            v55 = -48;
                          }
                          v56 = v55 + v54;
                          if (v56 >= v20 || v56 == -1)
                            break;
                          v53 = v53 * (double)v20 + (double)v56;
                          if (v18 == ++v17)
                            goto LABEL_128;
                        }
                      }
                      if (v53 < 9.00719925e15)
                      {
LABEL_130:
                        v41 = v21 * v53;
                        goto LABEL_131;
                      }
                      v9 = (v20 - 2) >> 1;
                      switch((int)v9)
                      {
                        case 0:
                        case 3:
                        case 7:
                          if (v18 < (int)v19)
                            goto LABEL_154;
                          v10 = v21;
                          v9 = (int)v19;
                          v60 = v17 - (int)v19;
                          v61 = v18 - (int)v19;
                          if (v60 == -1)
                          {
                            v60 = v61;
                          }
                          else if (v61 < v60)
                          {
                            goto LABEL_154;
                          }
                          v53 = JSC::parseIntOverflow(v14 + v9, v60, v20);
                          break;
                        case 4:
                          if (v18 < (int)v19)
                            goto LABEL_154;
                          v10 = v21;
                          v9 = (int)v19;
                          v59 = v17 - (int)v19;
                          v17 = v18 - v9;
                          if (v59 == -1)
                            goto LABEL_155;
                          if (v17 >= v59)
                            goto LABEL_146;
                          goto LABEL_154;
                        default:
                          goto LABEL_130;
                      }
LABEL_147:
                      v21 = v10;
                      goto LABEL_130;
                    }
                    if ((v49 - 65) < 0x1A)
                    {
                      v50 = -55;
                      goto LABEL_105;
                    }
                    if ((v49 - 97) <= 0x19)
                    {
                      v50 = -87;
                      goto LABEL_105;
                    }
                  }
                  v41 = NAN;
                  goto LABEL_107;
                }
LABEL_101:
                v20 = 10;
                goto LABEL_102;
              }
            }
LABEL_154:
            __break(1u);
LABEL_155:
            v59 = v17;
LABEL_146:
            var48[0] = 0;
            fast_float::from_chars_advanced<double,char>((unsigned __int8 *)(v14 + v9), (unsigned __int8 *)(v14 + v9 + v59), var48, 0x2E00000005);
            v53 = *(double *)var48;
            goto LABEL_147;
          }
          if (v48 != 160)
            goto LABEL_139;
        }
        else if (v48 != 32)
        {
          goto LABEL_139;
        }
      }
      if (v18 == ++v19)
      {
        v21 = 1.0;
        v19 = v18;
        goto LABEL_98;
      }
    }
  }
  v64 = v14;
  if (!(_DWORD)v16)
  {
    v14 = 0;
    v34 = 10;
    v10 = 1.0;
    goto LABEL_42;
  }
  v31 = 0;
  while (1)
  {
    v32 = *(unsigned __int16 *)(v64 + 2 * v31);
    if (v32 > 0xFF)
      break;
    if (*(_WORD *)(v64 + 2 * v31) > 0x20u || ((1 << v32) & 0x100001A00) == 0)
    {
      v46 = *(_WORD *)(v64 + 2 * v31) == 160 || v32 == 13;
      if (!v46 && v32 != 10)
        goto LABEL_84;
    }
LABEL_33:
    if (v18 == ++v31)
    {
      v10 = 1.0;
      v14 = v18;
      goto LABEL_35;
    }
  }
  if (u_charType(*(unsigned __int16 *)(v64 + 2 * v31)) == 12 || v32 - 8232 < 2 || v32 == 65279)
    goto LABEL_33;
  v32 = *(unsigned __int16 *)(v64 + 2 * v31);
LABEL_84:
  if (v32 == 43)
  {
    v14 = v31 + 1;
    v10 = 1.0;
  }
  else
  {
    if (v32 == 45)
      v10 = -1.0;
    else
      v10 = 1.0;
    if (v32 == 45)
      v14 = v31 + 1;
    else
      v14 = v31;
  }
  if (v18 - v14 < 2)
    goto LABEL_41;
LABEL_35:
  if (v18 <= v14)
    goto LABEL_154;
  if (*(_WORD *)(v64 + 2 * v14) != 48)
    goto LABEL_41;
  if (v18 <= v14 + 1)
    goto LABEL_154;
  if ((*(unsigned __int16 *)(v64 + 2 * (v14 + 1)) | 0x20) == 0x78)
  {
    v14 += 2;
    v34 = 16;
  }
  else
  {
LABEL_41:
    v34 = 10;
  }
LABEL_42:
  if (v14 >= v18)
    goto LABEL_61;
  v35 = *(unsigned __int16 *)(v64 + 2 * v14);
  if ((v35 - 48) < 0xA)
  {
    v36 = -48;
    goto LABEL_45;
  }
  if ((v35 - 65) >= 0x1A)
  {
    if ((v35 - 97) <= 0x19)
    {
      v36 = -87;
      goto LABEL_45;
    }
    goto LABEL_61;
  }
  v36 = -55;
LABEL_45:
  v37 = v36 + v35;
  if (v37 >= v34)
  {
LABEL_61:
    v41 = NAN;
    goto LABEL_107;
  }
  v38 = (double)v34 * 0.0 + (double)v37;
  for (i = v14 + 1; v18 != i; ++i)
  {
    v62 = *(unsigned __int16 *)(v64 + 2 * i);
    if ((v62 - 48) >= 0xA)
    {
      if ((v62 - 65) < 0x1A)
      {
        v9 = 4294967241;
      }
      else
      {
        v9 = (v62 - 97);
        if (v9 > 0x19)
          goto LABEL_48;
        v9 = 4294967209;
      }
    }
    else
    {
      v9 = 4294967248;
    }
    v63 = v9 + v62;
    if (v63 >= v34)
      goto LABEL_48;
    v38 = v38 * (double)v34 + (double)v63;
  }
  i = v18;
LABEL_48:
  if (v38 >= 9.00719925e15)
  {
    v17 = (v34 - 2) >> 1;
    switch((int)v17)
    {
      case 0:
      case 3:
      case 7:
        if (v18 < (int)v14)
          goto LABEL_154;
        v17 = (int)v14;
        v40 = i - (int)v14;
        v14 = v18 - (int)v14;
        if (v40 == -1)
        {
          v40 = v14;
        }
        else if (v14 < v40)
        {
          goto LABEL_154;
        }
        v38 = JSC::parseIntOverflow(v64 + 2 * v17, v40, v34);
        break;
      case 4:
        if (v18 < (int)v14)
          goto LABEL_154;
        v17 = (int)v14;
        v14 = i - (int)v14;
        if (v14 == -1)
        {
          v14 = v18 - v17;
        }
        else if (v18 - v17 < v14)
        {
          goto LABEL_154;
        }
        var48[0] = 0;
        fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)(v64 + 2 * v17), (unsigned __int16 *)(v64 + 2 * v17 + 2 * v14), (double *)var48, 0x2E00000005);
        v38 = *(double *)var48;
        break;
      default:
        break;
    }
  }
  v41 = v10 * v38;
LABEL_131:
  v58 = (int)v41;
  if (v41 == (double)(int)v58 && ((_DWORD)v58 || (*(_QWORD *)&v41 & 0x8000000000000000) == 0))
    return v58 | 0xFFFE000000000000;
  if ((*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v41 != (double)(int)v58)
    goto LABEL_107;
  if ((_DWORD)v58)
    return v58 | 0xFFFE000000000000;
  v52 = v41;
  if ((*(_QWORD *)&v41 & 0x8000000000000000) == 0)
    return v58 | 0xFFFE000000000000;
  else
    return *(_QWORD *)&v52 + 0x2000000000000;
}

unint64_t operationParseIntDoubleNoRadix(uint64_t a1, double a2)
{
  double v3;
  uint64_t v4;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  double v20;
  unint64_t i;
  int v22;
  int v23;
  int v24;
  double v25;
  double v26;
  int v27;
  int v28;
  int v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  BOOL v57;
  int v59;
  int v60;
  int v61;
  WTF::StringImpl *v62;
  unint64_t var58[12];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var58[11];
  if (a2 == 0.0)
  {
    v3 = 0.0;
LABEL_8:
    v4 = (int)v3;
    if ((double)(int)v4 == v3 && ((*(_QWORD *)&v3 & 0x8000000000000000) == 0 || (_DWORD)v4)
      || (*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (double)(int)v4 == v3
      && ((*(_QWORD *)&v3 & 0x8000000000000000) == 0 || (_DWORD)v4))
    {
      return v4 | 0xFFFE000000000000;
    }
    else
    {
      return *(_QWORD *)&v3 + 0x2000000000000;
    }
  }
  if (fabs(a2) <= 9.00719925e15 && (a2 >= 0.000001 || a2 <= -1.0))
  {
    v3 = trunc(a2);
    goto LABEL_8;
  }
  WTF::String::number(a2, (int **)&v62);
  v14 = v62;
  if (!v62)
    goto LABEL_119;
  v15 = *((_QWORD *)v62 + 1);
  v16 = *((unsigned int *)v62 + 1);
  if ((*((_BYTE *)v62 + 16) & 4) == 0)
  {
    if (!(_DWORD)v16)
    {
      v40 = 0;
      v7 = 10;
      v20 = 1.0;
      goto LABEL_103;
    }
    v37 = 0;
    while (1)
    {
      v38 = *(unsigned __int16 *)(v15 + 2 * v37);
      if (v38 > 0xFF)
      {
        if (u_charType(*(unsigned __int16 *)(v15 + 2 * v37)) != 12 && v38 - 8232 >= 2 && v38 != 65279)
        {
          v38 = *(unsigned __int16 *)(v15 + 2 * v37);
LABEL_151:
          if (v38 == 43)
          {
            v40 = v37 + 1;
            v20 = 1.0;
          }
          else
          {
            if (v38 == 45)
              v20 = -1.0;
            else
              v20 = 1.0;
            if (v38 == 45)
              v40 = v37 + 1;
            else
              v40 = v37;
          }
LABEL_96:
          i = v16 - v40;
          if (v16 - v40 < 2)
            goto LABEL_102;
          if (v16 <= v40)
            goto LABEL_132;
          if (*(_WORD *)(v15 + 2 * v40) != 48)
            goto LABEL_102;
          i = v40 + 1;
          if (v40 + 1 >= v16)
            goto LABEL_132;
          if ((*(unsigned __int16 *)(v15 + 2 * i) | 0x20) == 0x78)
          {
            v40 += 2;
            v7 = 16;
          }
          else
          {
LABEL_102:
            v7 = 10;
          }
LABEL_103:
          if (v40 < v16)
          {
            v41 = *(unsigned __int16 *)(v15 + 2 * v40);
            if ((v41 - 48) >= 0xA)
            {
              if ((v41 - 65) < 0x1A)
              {
                v42 = -55;
                goto LABEL_106;
              }
              if ((v41 - 97) <= 0x19)
              {
                v42 = -87;
                goto LABEL_106;
              }
            }
            else
            {
              v42 = -48;
LABEL_106:
              v43 = v42 + v41;
              if (v43 < v7)
              {
                v26 = (double)(int)v7 * 0.0 + (double)v43;
                for (i = v40 + 1; v16 != i; ++i)
                {
                  v59 = *(unsigned __int16 *)(v15 + 2 * i);
                  if ((v59 - 48) >= 0xA)
                  {
                    if ((v59 - 65) < 0x1A)
                    {
                      v60 = -55;
                    }
                    else
                    {
                      if ((v59 - 97) > 0x19)
                        goto LABEL_109;
                      v60 = -87;
                    }
                  }
                  else
                  {
                    v60 = -48;
                  }
                  v61 = v60 + v59;
                  if (v61 >= (int)v7)
                    goto LABEL_109;
                  v26 = v26 * (double)(int)v7 + (double)v61;
                }
                i = v16;
LABEL_109:
                if (v26 >= 9.00719925e15)
                {
                  v13 = (v7 - 2) >> 1;
                  switch((int)v13)
                  {
                    case 0:
                    case 3:
                    case 7:
                      if (v16 < (int)v40)
                        goto LABEL_132;
                      v13 = (int)v40;
                      v44 = i - (int)v40;
                      v45 = v16 - (int)v40;
                      if (v44 == -1)
                      {
                        v44 = v45;
                      }
                      else if (v45 < v44)
                      {
                        goto LABEL_132;
                      }
                      v26 = JSC::parseIntOverflow(v15 + 2 * v13, v44, v7);
                      break;
                    case 4:
                      if (v16 < (int)v40)
                        goto LABEL_132;
                      v13 = (int)v40;
                      v54 = i - (int)v40;
                      i = v16 - v13;
                      if (v54 == -1)
                        goto LABEL_133;
                      if (i >= v54)
                        goto LABEL_131;
                      goto LABEL_132;
                    default:
                      goto LABEL_57;
                  }
                }
                goto LABEL_57;
              }
            }
          }
LABEL_119:
          v25 = NAN;
          goto LABEL_120;
        }
      }
      else if (*(_WORD *)(v15 + 2 * v37) > 0x20u || ((1 << v38) & 0x100001A00) == 0)
      {
        v57 = *(_WORD *)(v15 + 2 * v37) == 160 || v38 == 13;
        if (!v57 && v38 != 10)
          goto LABEL_151;
      }
      if (v16 == ++v37)
      {
        v20 = 1.0;
        v40 = v16;
        goto LABEL_96;
      }
    }
  }
  v17 = 0;
  if (!(_DWORD)v16)
  {
    v7 = 10;
    v20 = 1.0;
LABEL_31:
    if (v17 >= v16)
      goto LABEL_119;
    v22 = *(unsigned __int8 *)(v15 + v17);
    if ((v22 - 48) >= 0xA)
    {
      if ((v22 - 65) < 0x1A)
      {
        v23 = -55;
      }
      else
      {
        if ((v22 - 97) > 0x19)
          goto LABEL_119;
        v23 = -87;
      }
    }
    else
    {
      v23 = -48;
    }
    v24 = v23 + v22;
    v25 = NAN;
    if (v24 < (int)v7 && v24 != -1)
    {
      v26 = (double)(int)v7 * 0.0 + (double)v24;
      i = v17 + 1;
      if (v17 + 1 == v16)
      {
LABEL_55:
        i = *((unsigned int *)v62 + 1);
      }
      else
      {
        while (1)
        {
          v27 = *(unsigned __int8 *)(v15 + i);
          if ((v27 - 48) >= 0xA)
          {
            if ((v27 - 65) < 0x1A)
            {
              v28 = -55;
            }
            else
            {
              if ((v27 - 97) > 0x19)
                break;
              v28 = -87;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v28 + v27;
          if (v29 >= (int)v7 || v29 == -1)
            break;
          v26 = v26 * (double)(int)v7 + (double)v29;
          if (v16 == ++i)
            goto LABEL_55;
        }
      }
      if (v26 >= 9.00719925e15)
      {
        v13 = (v7 - 2) >> 1;
        switch((int)v13)
        {
          case 0:
          case 3:
          case 7:
            if (v16 < (int)v17)
              goto LABEL_132;
            v13 = (int)v17;
            v34 = i - (int)v17;
            v35 = v16 - (int)v17;
            if (v34 == -1)
            {
              v34 = v35;
            }
            else if (v35 < v34)
            {
              goto LABEL_132;
            }
            v26 = JSC::parseIntOverflow(v15 + v13, v34, v7);
            break;
          case 4:
            if (v16 < (int)v17)
              goto LABEL_132;
            v13 = (int)v17;
            v33 = i - (int)v17;
            i = v16 - v13;
            if (v33 == -1)
            {
              v33 = v16 - v13;
            }
            else if (i < v33)
            {
              goto LABEL_132;
            }
            var58[0] = 0;
            fast_float::from_chars_advanced<double,char>((unsigned __int8 *)(v15 + v13), (unsigned __int8 *)(v15 + v13 + v33), var58, 0x2E00000005);
            goto LABEL_73;
          default:
            goto LABEL_57;
        }
      }
      goto LABEL_57;
    }
    goto LABEL_120;
  }
  v13 = *((_QWORD *)v62 + 1);
  v18 = *((unsigned int *)v62 + 1);
  while (1)
  {
    v19 = *(unsigned __int8 *)(v13 + v17);
    if ((v19 - 9) < 5)
      goto LABEL_22;
    if (*(unsigned __int8 *)(v13 + v17) <= 0x2Au)
    {
      if (v19 != 32)
        goto LABEL_65;
      goto LABEL_22;
    }
    if (v19 == 43)
    {
      ++v17;
LABEL_65:
      v20 = 1.0;
      goto LABEL_27;
    }
    if (v19 == 45)
      break;
    v13 = *((_QWORD *)v62 + 1);
    v18 = *((unsigned int *)v62 + 1);
    if (v19 != 160)
      goto LABEL_65;
LABEL_22:
    if (v18 == ++v17)
    {
      v20 = 1.0;
      v17 = v18;
      goto LABEL_27;
    }
  }
  ++v17;
  v20 = -1.0;
LABEL_27:
  i = v16 - v17;
  if (v16 - v17 < 2)
    goto LABEL_30;
  if (v16 > v17)
  {
    if (*(_BYTE *)(v15 + v17) != 48)
      goto LABEL_30;
    i = v17 + 1;
    if (v17 + 1 < v16)
    {
      if ((*(unsigned __int8 *)(v15 + i) | 0x20) == 0x78)
      {
        v17 += 2;
        v7 = 16;
        goto LABEL_31;
      }
LABEL_30:
      v7 = 10;
      goto LABEL_31;
    }
  }
LABEL_132:
  __break(1u);
LABEL_133:
  v54 = i;
LABEL_131:
  var58[0] = 0;
  fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)(v15 + 2 * v13), (unsigned __int16 *)(v15 + 2 * v13 + 2 * v54), (double *)var58, 0x2E00000005);
LABEL_73:
  v26 = *(double *)var58;
LABEL_57:
  v25 = v20 * v26;
  v31 = (int)v25;
  if (v25 == (double)(int)v31 && ((_DWORD)v31 || (*(_QWORD *)&v25 & 0x8000000000000000) == 0))
  {
LABEL_60:
    v32 = v31 | 0xFFFE000000000000;
    goto LABEL_122;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v25 == (double)(int)v31)
  {
    if ((_DWORD)v31)
      goto LABEL_60;
    v36 = v25;
    if ((*(_QWORD *)&v25 & 0x8000000000000000) == 0)
      goto LABEL_60;
    goto LABEL_121;
  }
LABEL_120:
  v36 = v25;
LABEL_121:
  v32 = *(_QWORD *)&v36 + 0x2000000000000;
LABEL_122:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return v32;
}

unint64_t operationParseIntString(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  double v10;
  int v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v30;
  unsigned int v31;
  int v33;
  int v34;
  int v35;
  int v36;
  double v37;
  unint64_t i;
  double v39;
  unint64_t v40;
  char *v43;
  uint64_t v44;
  BOOL v45;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  double v52;
  double v53;
  int v54;
  int v55;
  int v56;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t var58[12];

  v11 = a3;
  v12 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v12 + 40) = var58[11];
  v13 = *(int **)(a2 + 8);
  if ((v13 & 1) != 0)
  {
    if ((v13 & 2) != 0)
    {
      v18 = *(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL;
      v21 = *(_QWORD *)(v18 + 8);
      if (v21
        && (v9 = *(unsigned int *)(v21 + 4),
            v22 = *(_QWORD *)(a2 + 24),
            v23 = v22 >> 16,
            v9 > (v22 >> 16)))
      {
        v24 = *(unsigned int *)(v21 + 16);
        v15 = *(_QWORD *)(v21 + 8);
        v25 = *(_DWORD *)(a2 + 16);
        if ((int)v9 - (int)v23 > v25 || (v25 = v9 - v23, (_DWORD)v23))
        {
          v26 = (v24 >> 2) & 1;
          v27 = (v22 >> 16);
          v17 = v25;
          v9 -= v23;
          if ((_DWORD)v26)
          {
            if (v9 < v25)
              goto LABEL_165;
            v15 += v27;
            v17 = v25 | 0x100000000;
          }
          else
          {
            if (v9 < v25)
              goto LABEL_165;
            v15 += 2 * v27;
          }
        }
        else
        {
          v9 = v9 & 0xFFFFFFFEFFFFFFFFLL | (((v24 >> 2) & 1) << 32);
          v17 = v9;
        }
      }
      else
      {
        v15 = (unint64_t)&str_77_5;
        v17 = 0x100000000;
      }
      goto LABEL_5;
    }
    v13 = *JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
    if (v13)
      goto LABEL_3;
LABEL_19:
    v15 = 0;
    v16 = 1;
    goto LABEL_4;
  }
  if (!v13)
    goto LABEL_19;
LABEL_3:
  v14 = v13[4];
  v15 = *((_QWORD *)v13 + 1);
  LODWORD(v13) = v13[1];
  v16 = (v14 >> 2) & 1;
LABEL_4:
  v17 = v13 | (unint64_t)(v16 << 32);
LABEL_5:
  v18 = *(unsigned int *)(v12 + 80);
  if ((_DWORD)v18)
  {
    v28 = *(_DWORD *)(v12 + 80);
    v9 = v28 & 0x27;
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
    {
      v43 = (char *)v15;
      v44 = v17;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v17 = v44;
      v15 = (unint64_t)v43;
    }
    v18 = *(_QWORD *)(v12 + 16);
    if (v18)
      return 0;
  }
  v19 = v17;
  if ((v17 & 0x100000000) == 0)
  {
    v64 = v15;
    v10 = 1.0;
    if (!(_DWORD)v17)
    {
      v15 = 0;
      goto LABEL_35;
    }
    v30 = 0;
    while (1)
    {
      v31 = *(unsigned __int16 *)(v64 + 2 * v30);
      if (v31 > 0xFF)
      {
        if (u_charType(*(unsigned __int16 *)(v64 + 2 * v30)) != 12 && v31 - 8232 >= 2 && v31 != 65279)
        {
          v31 = *(unsigned __int16 *)(v64 + 2 * v30);
LABEL_91:
          if (v31 == 43)
          {
            v15 = v30 + 1;
          }
          else
          {
            if (v31 == 45)
              v10 = -1.0;
            else
              v10 = 1.0;
            if (v31 == 45)
              v15 = v30 + 1;
            else
              v15 = v30;
          }
LABEL_35:
          if ((v11 | 0x10) != 0x10 || v19 - v15 < 2)
            goto LABEL_42;
          if (v19 > v15)
          {
            if (*(_WORD *)(v64 + 2 * v15) != 48)
              goto LABEL_42;
            if (v19 > v15 + 1)
            {
              if ((*(unsigned __int16 *)(v64 + 2 * (v15 + 1)) | 0x20) == 0x78)
              {
                v15 += 2;
                v33 = 16;
                goto LABEL_46;
              }
LABEL_42:
              if (v11)
                v33 = v11;
              else
                v33 = 10;
              if ((v33 - 37) >= 0xFFFFFFDD)
              {
LABEL_46:
                if (v15 < v19)
                {
                  v34 = *(unsigned __int16 *)(v64 + 2 * v15);
                  if ((v34 - 48) >= 0xA)
                  {
                    if ((v34 - 65) < 0x1A)
                    {
                      v35 = -55;
                      goto LABEL_49;
                    }
                    if ((v34 - 97) <= 0x19)
                    {
                      v35 = -87;
                      goto LABEL_49;
                    }
                  }
                  else
                  {
                    v35 = -48;
LABEL_49:
                    v36 = v35 + v34;
                    if (v36 < v33)
                    {
                      v37 = (double)v33 * 0.0 + (double)v36;
                      for (i = v15 + 1; v19 != i; ++i)
                      {
                        v62 = *(unsigned __int16 *)(v64 + 2 * i);
                        if ((v62 - 48) >= 0xA)
                        {
                          if ((v62 - 65) < 0x1A)
                          {
                            v9 = 4294967241;
                          }
                          else
                          {
                            v9 = (v62 - 97);
                            if (v9 > 0x19)
                              goto LABEL_52;
                            v9 = 4294967209;
                          }
                        }
                        else
                        {
                          v9 = 4294967248;
                        }
                        v63 = v9 + v62;
                        if (v63 >= v33)
                          goto LABEL_52;
                        v37 = v37 * (double)v33 + (double)v63;
                      }
                      i = v19;
LABEL_52:
                      if (v37 >= 9.00719925e15)
                      {
                        v18 = (v33 - 2);
                        switch(v33)
                        {
                          case 2:
                          case 4:
                          case 8:
                            goto LABEL_60;
                          case 3:
                          case 5:
                          case 6:
                          case 7:
                          case 9:
                            break;
                          case 10:
                            if (v19 < (int)v15)
                              goto LABEL_165;
                            v18 = (int)v15;
                            v15 = i - (int)v15;
                            if (v15 == -1)
                            {
                              v15 = v19 - v18;
                            }
                            else if (v19 - v18 < v15)
                            {
                              goto LABEL_165;
                            }
                            var58[0] = 0;
                            fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)(v64 + 2 * v18), (unsigned __int16 *)(v64 + 2 * v18 + 2 * v15), (double *)var58, 0x2E00000005);
                            v37 = *(double *)var58;
                            break;
                          default:
                            if (v33 != 16 && v33 != 32)
                              break;
LABEL_60:
                            if (v19 < (int)v15)
                              goto LABEL_165;
                            v18 = (int)v15;
                            v40 = i - (int)v15;
                            v15 = v19 - (int)v15;
                            if (v40 == -1)
                            {
                              v40 = v15;
                            }
                            else if (v15 < v40)
                            {
                              goto LABEL_165;
                            }
                            v37 = JSC::parseIntOverflow(v64 + 2 * v18, v40, v33);
                            break;
                        }
                      }
                      v39 = v10 * v37;
                      goto LABEL_142;
                    }
                  }
                }
              }
              v39 = NAN;
              goto LABEL_118;
            }
          }
LABEL_165:
          __break(1u);
LABEL_166:
          v59 = v18;
LABEL_156:
          var58[0] = 0;
          fast_float::from_chars_advanced<double,char>((unsigned __int8 *)(v15 + v9), (unsigned __int8 *)(v15 + v9 + v59), var58, 0x2E00000005);
          v53 = *(double *)var58;
          goto LABEL_141;
        }
      }
      else if (*(_WORD *)(v64 + 2 * v30) > 0x20u || ((1 << v31) & 0x100001A00) == 0)
      {
        v45 = *(_WORD *)(v64 + 2 * v30) == 160 || v31 == 13;
        if (!v45 && v31 != 10)
          goto LABEL_91;
      }
      if (v19 == ++v30)
      {
        v15 = v19;
        goto LABEL_35;
      }
    }
  }
  v10 = 1.0;
  v20 = 0;
  if (!v19)
    goto LABEL_105;
  while (1)
  {
    v47 = *(unsigned __int8 *)(v15 + v20);
    v9 = (v47 - 9);
    if (v9 >= 5)
      break;
LABEL_99:
    if (v19 == ++v20)
    {
      v20 = v19;
      goto LABEL_105;
    }
  }
  if (*(unsigned __int8 *)(v15 + v20) <= 0x2Au)
  {
    if (v47 != 32)
      goto LABEL_105;
    goto LABEL_99;
  }
  if (v47 == 43)
  {
    ++v20;
    goto LABEL_105;
  }
  if (v47 != 45)
  {
    if (v47 != 160)
      goto LABEL_105;
    goto LABEL_99;
  }
  ++v20;
  v10 = -1.0;
LABEL_105:
  if ((v11 | 0x10) != 0x10)
    goto LABEL_109;
  v18 = v19 - v20;
  if (v19 - v20 < 2)
    goto LABEL_109;
  if (v19 <= v20)
    goto LABEL_165;
  if (*(_BYTE *)(v15 + v20) != 48)
    goto LABEL_109;
  v18 = v20 + 1;
  if (v19 <= v20 + 1)
    goto LABEL_165;
  if ((*(unsigned __int8 *)(v15 + v18) | 0x20) == 0x78)
  {
    v20 += 2;
    v48 = 16;
    goto LABEL_113;
  }
LABEL_109:
  if (v11)
    v48 = v11;
  else
    v48 = 10;
  if ((v48 - 37) < 0xFFFFFFDD)
  {
LABEL_123:
    v39 = NAN;
    goto LABEL_118;
  }
LABEL_113:
  if (v20 >= v19)
    goto LABEL_123;
  v49 = *(unsigned __int8 *)(v15 + v20);
  if ((v49 - 48) >= 0xA)
  {
    if ((v49 - 65) < 0x1A)
    {
      v50 = -55;
      goto LABEL_116;
    }
    if ((v49 - 97) <= 0x19)
    {
      v50 = -87;
      goto LABEL_116;
    }
    goto LABEL_123;
  }
  v50 = -48;
LABEL_116:
  v51 = v50 + v49;
  v39 = NAN;
  if (v51 >= v48 || v51 == -1)
  {
LABEL_118:
    v52 = v39;
    return *(_QWORD *)&v52 + 0x2000000000000;
  }
  v53 = (double)v48 * 0.0 + (double)v51;
  v18 = v20 + 1;
  if (v20 + 1 == v19)
  {
LABEL_139:
    v18 = v19;
  }
  else
  {
    while (1)
    {
      v54 = *(unsigned __int8 *)(v15 + v18);
      if ((v54 - 48) >= 0xA)
      {
        if ((v54 - 65) < 0x1A)
        {
          v55 = -55;
        }
        else
        {
          if ((v54 - 97) > 0x19)
            break;
          v55 = -87;
        }
      }
      else
      {
        v55 = -48;
      }
      v56 = v55 + v54;
      if (v56 >= v48 || v56 == -1)
        break;
      v53 = v53 * (double)v48 + (double)v56;
      if (v19 == ++v18)
        goto LABEL_139;
    }
  }
  if (v53 >= 9.00719925e15)
  {
    v9 = (v48 - 2);
    switch(v48)
    {
      case 2:
      case 4:
      case 8:
        goto LABEL_161;
      case 3:
      case 5:
      case 6:
      case 7:
      case 9:
        break;
      case 10:
        if (v19 < (int)v20)
          goto LABEL_165;
        v9 = (int)v20;
        v59 = v18 - (int)v20;
        v18 = v19 - v9;
        if (v59 == -1)
          goto LABEL_166;
        if (v18 >= v59)
          goto LABEL_156;
        goto LABEL_165;
      default:
        if (v48 != 16 && v48 != 32)
          break;
LABEL_161:
        if (v19 < (int)v20)
          goto LABEL_165;
        v9 = (int)v20;
        v60 = v18 - (int)v20;
        v61 = v19 - (int)v20;
        if (v60 == -1)
        {
          v60 = v61;
        }
        else if (v61 < v60)
        {
          goto LABEL_165;
        }
        v53 = JSC::parseIntOverflow(v15 + v9, v60, v48);
        break;
    }
  }
LABEL_141:
  v39 = v10 * v53;
LABEL_142:
  v58 = (int)v39;
  if (v39 == (double)(int)v58 && ((_DWORD)v58 || (*(_QWORD *)&v39 & 0x8000000000000000) == 0))
    return v58 | 0xFFFE000000000000;
  if ((*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v39 != (double)(int)v58)
    goto LABEL_118;
  if ((_DWORD)v58)
    return v58 | 0xFFFE000000000000;
  v52 = v39;
  if ((*(_QWORD *)&v39 & 0x8000000000000000) == 0)
    return v58 | 0xFFFE000000000000;
  else
    return *(_QWORD *)&v52 + 0x2000000000000;
}

unsigned __int8 *operationParseIntGeneric(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t i;
  double v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *result;
  double v31;
  uint64_t v32;
  unint64_t v33;
  int v35;
  int v36;
  int v37;
  int v38;
  double v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  double v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  BOOL v53;
  int v55;
  int v56;
  int v57;
  int v58;
  double v59;
  double v60;
  double v61;
  int v62;
  int v63;
  int v64;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  double v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  char *v80;
  unsigned __int8 *v81;
  unint64_t var58[12];

  v11 = a3;
  v12 = a2;
  v14 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v14 + 40) = var58[11];
  if (!(a2 >> 49) || (_DWORD)a3 != 10)
    goto LABEL_3;
  *(double *)a9.i64 = (double)(int)a2;
  if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = a2 - 0x2000000000000;
  if (*(double *)a9.i64 == 0.0)
  {
    v31 = 0.0;
LABEL_40:
    v32 = (int)v31;
    if ((double)(int)v32 == v31 && ((*(_QWORD *)&v31 & 0x8000000000000000) == 0 || (_DWORD)v32)
      || (*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (double)(int)v32 == v31
      && ((*(_QWORD *)&v31 & 0x8000000000000000) == 0 || (_DWORD)v32))
    {
      return (unsigned __int8 *)(v32 | 0xFFFE000000000000);
    }
    else
    {
      return (unsigned __int8 *)(*(_QWORD *)&v31 + 0x2000000000000);
    }
  }
  if (fabs(*(double *)a9.i64) <= 9.00719925e15 && (*(double *)a9.i64 >= 0.000001 || *(double *)a9.i64 <= -1.0))
  {
    v31 = trunc(*(double *)a9.i64);
    goto LABEL_40;
  }
LABEL_3:
  v81 = (unsigned __int8 *)a2;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
  {
    result = JSC::JSValue::toStringSlowCase(&v81, (uint64_t)a1, 0, a4, a5, a6, a7, a8);
    v12 = (unint64_t)result;
    if (!result)
      return result;
  }
  v15 = *(int **)(v12 + 8);
  if ((v15 & 1) != 0)
  {
    if ((v15 & 2) != 0)
    {
      v22 = *(_QWORD *)((*(_QWORD *)(v12 + 20) & 0xFFFFFFFFFLL) + 8);
      if (v22
        && (v23 = *(unsigned int *)(v22 + 4),
            v24 = *(_QWORD *)(v12 + 24),
            i = v24 >> 16,
            v23 > (v24 >> 16)))
      {
        v25 = *(unsigned int *)(v22 + 16);
        v17 = *(char **)(v22 + 8);
        v26 = *(_DWORD *)(v12 + 16);
        if ((int)v23 - (int)i > v26 || (v26 = v23 - i, (_DWORD)i))
        {
          v27 = (v24 >> 16);
          v19 = v26;
          v28 = v23 - i;
          if (((v25 >> 2) & 1) != 0)
          {
            if (v28 < v26)
              goto LABEL_213;
            v17 += v27;
            v19 = v26 | 0x100000000;
          }
          else
          {
            if (v28 < v26)
              goto LABEL_213;
            v17 += 2 * v27;
          }
        }
        else
        {
          i = v25 >> 2;
          v19 = v23 & 0xFFFFFFFEFFFFFFFFLL | (((v25 >> 2) & 1) << 32);
        }
      }
      else
      {
        v19 = 0x100000000;
        v17 = &str_77_5;
      }
      goto LABEL_9;
    }
    v15 = *JSC::JSRopeString::resolveRope(v12, a1, a3, a4, a9, a5, a6, a7, a8);
    if (v15)
      goto LABEL_7;
LABEL_25:
    v17 = 0;
    v18 = 1;
    goto LABEL_8;
  }
  if (!v15)
    goto LABEL_25;
LABEL_7:
  v16 = v15[4];
  v17 = (char *)*((_QWORD *)v15 + 1);
  LODWORD(v15) = v15[1];
  v18 = (v16 >> 2) & 1;
LABEL_8:
  v19 = v15 | (unint64_t)(v18 << 32);
LABEL_9:
  if (*(_DWORD *)(v14 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v20 = v19;
  if ((v19 & 0x100000000) != 0)
  {
    v10 = 1.0;
    v21 = 0;
    if (!(_DWORD)v19)
      goto LABEL_140;
    while (1)
    {
      v55 = v17[v21];
      i = (v55 - 9);
      if (i >= 5)
      {
        if (v17[v21] > 0x2Au)
        {
          if (v55 == 43)
          {
            ++v21;
            goto LABEL_140;
          }
          if (v55 == 45)
          {
            ++v21;
            v10 = -1.0;
LABEL_140:
            if ((v11 | 0x10) != 0x10)
              goto LABEL_144;
            v28 = v19 - v21;
            if (v28 < 2)
              goto LABEL_144;
            if (v19 > v21)
            {
              if (v17[v21] != 48)
                goto LABEL_144;
              v28 = v21 + 1;
              if (v19 > v21 + 1)
              {
                if ((v17[v28] | 0x20) == 0x78)
                {
                  v21 += 2;
                  v28 = 16;
                  goto LABEL_148;
                }
LABEL_144:
                if (v11)
                  v28 = v11;
                else
                  v28 = 10;
                if ((v28 - 37) >= 0xFFFFFFDD)
                {
LABEL_148:
                  if (v21 < v19)
                  {
                    v56 = v17[v21];
                    if ((v56 - 48) < 0xA)
                    {
                      v57 = -48;
LABEL_151:
                      v58 = v57 + v56;
                      v59 = NAN;
                      if (v58 >= (int)v28 || v58 == -1)
                      {
LABEL_153:
                        v60 = v59;
                        return (unsigned __int8 *)(*(_QWORD *)&v60 + 0x2000000000000);
                      }
                      v61 = (double)(int)v28;
                      v40 = (double)(int)v28 * 0.0 + (double)v58;
                      i = v21 + 1;
                      if (v21 + 1 == v19)
                      {
LABEL_174:
                        i = v19;
                      }
                      else
                      {
                        while (1)
                        {
                          v62 = v17[i];
                          if ((v62 - 48) >= 0xA)
                          {
                            if ((v62 - 65) < 0x1A)
                            {
                              v63 = -55;
                            }
                            else
                            {
                              if ((v62 - 97) > 0x19)
                                break;
                              v63 = -87;
                            }
                          }
                          else
                          {
                            v63 = -48;
                          }
                          v64 = v63 + v62;
                          if (v64 >= (int)v28 || v64 == -1)
                            break;
                          v40 = v40 * v61 + (double)v64;
                          if (v19 == ++i)
                            goto LABEL_174;
                        }
                      }
                      if (v40 >= 9.00719925e15)
                      {
                        switch((int)v28)
                        {
                          case 2:
                          case 4:
                          case 8:
                            goto LABEL_195;
                          case 3:
                          case 5:
                          case 6:
                          case 7:
                          case 9:
                            goto LABEL_176;
                          case 10:
                            if (v19 < (unint64_t)(int)v21)
                              goto LABEL_213;
                            v28 = (int)v21;
                            v67 = i - (int)v21;
                            i = v19 - v28;
                            if (v67 == -1)
                              goto LABEL_214;
                            if (i >= v67)
                              goto LABEL_190;
                            goto LABEL_213;
                          default:
                            if ((_DWORD)v28 != 16 && (_DWORD)v28 != 32)
                              goto LABEL_176;
LABEL_195:
                            if (v19 < (unint64_t)(int)v21)
                              goto LABEL_213;
                            v68 = (int)v21;
                            i -= (int)v21;
                            v69 = v19 - (uint64_t)(int)v21;
                            if (i == -1)
                            {
                              i = v69;
                            }
                            else if (v69 < i)
                            {
                              goto LABEL_213;
                            }
                            v70 = (unsigned __int8 *)&v17[v68 - 1 + i];
                            if (v70 < (unsigned __int8 *)&v17[v68])
                            {
                              v40 = 0.0;
                              goto LABEL_176;
                            }
                            v71 = 1.0;
                            v40 = 0.0;
                            break;
                        }
                        while (1)
                        {
                          v72 = *v70;
                          if (v71 == INFINITY)
                          {
                            if (v72 != 48)
                              goto LABEL_223;
                          }
                          else
                          {
                            v73 = v72 - 48;
                            v74 = v72 - 65;
                            if ((v72 - 97) <= 0x19)
                              v75 = v72 - 87;
                            else
                              v75 = -1;
                            v76 = v72 - 55;
                            if (v74 > 0x19)
                              v76 = v75;
                            if (v73 <= 9)
                              v76 = v73;
                            if (v76 >= (int)v28)
                              v76 = -1;
                            v40 = v40 + (double)v76 * v71;
                          }
                          v71 = v71 * v61;
                          if (--v70 < (unsigned __int8 *)&v17[v68])
                            goto LABEL_176;
                        }
                      }
                      goto LABEL_176;
                    }
                    if ((v56 - 65) < 0x1A)
                    {
                      v57 = -55;
                      goto LABEL_151;
                    }
                    if ((v56 - 97) <= 0x19)
                    {
                      v57 = -87;
                      goto LABEL_151;
                    }
                  }
                }
                goto LABEL_158;
              }
            }
LABEL_213:
            __break(1u);
LABEL_214:
            v67 = i;
LABEL_190:
            var58[0] = 0;
            fast_float::from_chars_advanced<double,char>((unsigned __int8 *)&v17[v28], (unsigned __int8 *)&v17[v28 + v67], var58, 0x2E00000005);
            v40 = *(double *)var58;
            goto LABEL_176;
          }
          if (v55 != 160)
            goto LABEL_140;
        }
        else if (v55 != 32)
        {
          goto LABEL_140;
        }
      }
      if (v19 == ++v21)
      {
        v21 = v19;
        goto LABEL_140;
      }
    }
  }
  v80 = v17;
  v10 = 1.0;
  if (!(_DWORD)v19)
  {
    v28 = 0;
    goto LABEL_53;
  }
  v33 = 0;
  while (1)
  {
    v17 = (char *)*(unsigned __int16 *)&v80[2 * v33];
    if (v17 > 0xFF)
      break;
    if (*(_WORD *)&v80[2 * v33] > 0x20u || ((1 << (char)v17) & 0x100001A00) == 0)
    {
      v53 = *(_WORD *)&v80[2 * v33] == 160 || (_DWORD)v17 == 13;
      if (!v53 && (_DWORD)v17 != 10)
        goto LABEL_126;
    }
LABEL_51:
    if (v20 == ++v33)
    {
      v28 = v20;
      goto LABEL_53;
    }
  }
  if (u_charType(*(unsigned __int16 *)&v80[2 * v33]) == 12
    || ((_DWORD)v17 - 8232) < 2
    || (_DWORD)v17 == 65279)
  {
    goto LABEL_51;
  }
  v17 = (char *)*(unsigned __int16 *)&v80[2 * v33];
LABEL_126:
  if ((_DWORD)v17 == 43)
  {
    v28 = v33 + 1;
  }
  else
  {
    if ((_DWORD)v17 == 45)
      v10 = -1.0;
    else
      v10 = 1.0;
    if ((_DWORD)v17 == 45)
      v28 = v33 + 1;
    else
      v28 = v33;
  }
  if ((v11 | 0x10) != 0x10 || v20 - v28 < 2)
    goto LABEL_60;
LABEL_53:
  if (v20 <= v28)
    goto LABEL_213;
  if (*(_WORD *)&v80[2 * v28] != 48)
    goto LABEL_60;
  if (v20 <= v28 + 1)
    goto LABEL_213;
  if ((*(unsigned __int16 *)&v80[2 * v28 + 2] | 0x20) == 0x78)
  {
    v28 += 2;
    v35 = 16;
  }
  else
  {
LABEL_60:
    if (v11)
      v35 = v11;
    else
      v35 = 10;
    if ((v35 - 37) < 0xFFFFFFDD)
      goto LABEL_158;
  }
  if (v28 >= v20)
    goto LABEL_158;
  v36 = *(unsigned __int16 *)&v80[2 * v28];
  if ((v36 - 48) >= 0xA)
  {
    if ((v36 - 65) < 0x1A)
    {
      v37 = -55;
    }
    else
    {
      if ((v36 - 97) > 0x19)
        goto LABEL_158;
      v37 = -87;
    }
  }
  else
  {
    v37 = -48;
  }
  v38 = v37 + v36;
  if (v38 >= v35)
  {
LABEL_158:
    v59 = NAN;
    goto LABEL_153;
  }
  v39 = (double)v35;
  v40 = (double)v35 * 0.0 + (double)v38;
  for (i = v28 + 1; v20 != i; ++i)
  {
    v77 = *(unsigned __int16 *)&v80[2 * i];
    if ((v77 - 48) >= 0xA)
    {
      if ((v77 - 65) < 0x1A)
      {
        v78 = -55;
      }
      else
      {
        if ((v77 - 97) > 0x19)
          goto LABEL_70;
        v78 = -87;
      }
    }
    else
    {
      v78 = -48;
    }
    v79 = v78 + v77;
    if (v79 >= v35)
      goto LABEL_70;
    v40 = v40 * v39 + (double)v79;
  }
  i = v20;
LABEL_70:
  if (v40 >= 9.00719925e15)
  {
    switch(v35)
    {
      case 2:
      case 4:
      case 8:
        goto LABEL_72;
      case 3:
      case 5:
      case 6:
      case 7:
      case 9:
        goto LABEL_176;
      case 10:
        if (v20 < (int)v28)
          goto LABEL_213;
        v50 = (int)v28;
        v28 = i - (int)v28;
        i = v20 - v50;
        if (v28 == -1)
        {
          v28 = v20 - v50;
        }
        else if (i < v28)
        {
          goto LABEL_213;
        }
        var58[0] = 0;
        fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)&v80[2 * v50], (unsigned __int16 *)&v80[2 * v50 + 2 * v28], (double *)var58, 0x2E00000005);
        v40 = *(double *)var58;
        goto LABEL_176;
      default:
        if (v35 != 16 && v35 != 32)
          goto LABEL_176;
LABEL_72:
        if (v20 < (int)v28)
          goto LABEL_213;
        v41 = (int)v28;
        i -= (int)v28;
        v28 = v20 - (int)v28;
        if (i == -1)
        {
          i = v28;
        }
        else if (v28 < i)
        {
          goto LABEL_213;
        }
        v42 = (unint64_t)&v80[2 * v41];
        v43 = (unsigned __int16 *)(v42 + 2 * i - 2);
        v40 = 0.0;
        if ((unint64_t)v43 < v42)
          goto LABEL_176;
        v44 = 1.0;
        break;
    }
    do
    {
      v45 = *v43;
      if (v44 == INFINITY)
      {
        if (v45 != 48)
        {
LABEL_223:
          v40 = INFINITY;
          break;
        }
      }
      else
      {
        v46 = v45 - 48;
        v47 = v45 - 65;
        if ((v45 - 97) <= 0x19)
          v48 = v45 - 87;
        else
          v48 = -1;
        v49 = v45 - 55;
        if (v47 > 0x19)
          v49 = v48;
        if (v46 <= 9)
          v49 = v46;
        if (v49 >= v35)
          v49 = -1;
        v40 = v40 + (double)v49 * v44;
      }
      v44 = v44 * v39;
      --v43;
    }
    while ((unint64_t)v43 >= v42);
  }
LABEL_176:
  v59 = v10 * v40;
  v66 = (int)(v10 * v40);
  if (v10 * v40 == (double)(int)v66 && ((_DWORD)v66 || (*(_QWORD *)&v59 & 0x8000000000000000) == 0))
    return (unsigned __int8 *)(v66 | 0xFFFE000000000000);
  if (COERCE_UNSIGNED_INT64(fabs(v10 * v40)) > 0x7FEFFFFFFFFFFFFFLL || v59 != (double)(int)v66)
    goto LABEL_153;
  if ((_DWORD)v66)
    return (unsigned __int8 *)(v66 | 0xFFFE000000000000);
  v60 = v10 * v40;
  if ((*(_QWORD *)&v59 & 0x8000000000000000) == 0)
    return (unsigned __int8 *)(v66 | 0xFFFE000000000000);
  else
    return (unsigned __int8 *)(*(_QWORD *)&v60 + 0x2000000000000);
}

unint64_t operationParseIntDouble(uint64_t a1, unsigned int a2, double a3)
{
  double v3;
  double v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  double v18;
  unint64_t v19;
  unint64_t i;
  int v21;
  int v22;
  int v23;
  int v24;
  double v25;
  double v26;
  double v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  double v33;
  uint64_t v34;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  double v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  unint64_t v56;
  unsigned int v57;
  BOOL v61;
  int v63;
  int v64;
  int v65;
  int v66;
  double v67;
  double v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  unint64_t v73;
  unsigned __int16 *v74;
  double v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  WTF::StringImpl *v83;
  unint64_t var58[12];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var58[11];
  if (a2 == 10)
  {
    if (a3 == 0.0)
    {
      v6 = 0.0;
LABEL_9:
      v7 = (int)v6;
      if ((double)(int)v7 == v6 && ((*(_QWORD *)&v6 & 0x8000000000000000) == 0 || (_DWORD)v7)
        || (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (double)(int)v7 == v6
        && ((*(_QWORD *)&v6 & 0x8000000000000000) == 0 || (_DWORD)v7))
      {
        return v7 | 0xFFFE000000000000;
      }
      else
      {
        return *(_QWORD *)&v6 + 0x2000000000000;
      }
    }
    if (fabs(a3) <= 9.00719925e15 && (a3 >= 0.000001 || a3 <= -1.0))
    {
      v6 = trunc(a3);
      goto LABEL_9;
    }
  }
  WTF::String::number(a3, (int **)&v83);
  v17 = v83;
  v18 = 1.0;
  if (!v83)
  {
    i = 0;
    v19 = 0;
LABEL_25:
    if ((a2 | 0x10) == 0x10)
    {
      v16 = i - (_QWORD)v17;
      if (i - (unint64_t)v17 >= 2)
      {
        if (i <= (unint64_t)v17)
          goto LABEL_91;
        if (*((_BYTE *)v17 + v19) != 48)
          goto LABEL_31;
        v16 = (uint64_t)v17 + 1;
        if ((unint64_t)v17 + 1 >= i)
        {
LABEL_91:
          __break(1u);
LABEL_92:
          v44 = i;
LABEL_93:
          var58[0] = 0;
          fast_float::from_chars_advanced<double,char>((unsigned __int8 *)(v19 + v16), (unsigned __int8 *)(v19 + v16 + v44), var58, 0x2E00000005);
          v27 = *(double *)var58;
          goto LABEL_94;
        }
        if ((*(unsigned __int8 *)(v19 + v16) | 0x20) == 0x78)
        {
          v17 = (WTF::StringImpl *)((char *)v17 + 2);
          v16 = 16;
LABEL_35:
          if ((unint64_t)v17 < i)
          {
            v22 = *((unsigned __int8 *)v17 + v19);
            if ((v22 - 48) < 0xA)
            {
              v23 = -48;
              goto LABEL_38;
            }
            if ((v22 - 65) < 0x1A)
            {
              v23 = -55;
LABEL_38:
              v24 = v23 + v22;
              v25 = NAN;
              if (v24 >= (int)v16 || v24 == -1)
                goto LABEL_57;
              v26 = (double)(int)v16;
              v27 = (double)(int)v16 * 0.0 + (double)v24;
              v28 = (char *)v17 + 1;
              if ((WTF::StringImpl *)((char *)v17 + 1) == (WTF::StringImpl *)i)
              {
LABEL_59:
                v28 = (char *)i;
              }
              else
              {
                while (1)
                {
                  v29 = v28[v19];
                  if ((v29 - 48) >= 0xA)
                  {
                    if ((v29 - 65) < 0x1A)
                    {
                      v30 = -55;
                    }
                    else
                    {
                      if ((v29 - 97) > 0x19)
                        break;
                      v30 = -87;
                    }
                  }
                  else
                  {
                    v30 = -48;
                  }
                  v31 = v30 + v29;
                  if (v31 >= (int)v16 || v31 == -1)
                    break;
                  v27 = v27 * v26 + (double)v31;
                  if ((char *)i == ++v28)
                    goto LABEL_59;
                }
              }
              if (v27 < 9.00719925e15)
              {
LABEL_61:
                v25 = v18 * v27;
                goto LABEL_62;
              }
              v3 = v18;
              switch((int)v16)
              {
                case 2:
                case 4:
                case 8:
                  goto LABEL_88;
                case 3:
                case 5:
                case 6:
                case 7:
                case 9:
                  goto LABEL_61;
                case 10:
                  if (i < (int)v17)
                    goto LABEL_91;
                  v16 = (int)v17;
                  v44 = (unint64_t)&v28[-(int)v17];
                  i -= v16;
                  if (v44 == -1)
                    goto LABEL_92;
                  if (i < v44)
                    goto LABEL_91;
                  goto LABEL_93;
                default:
                  if ((_DWORD)v16 != 16 && (_DWORD)v16 != 32)
                    goto LABEL_61;
LABEL_88:
                  if (i < (int)v17)
                    goto LABEL_91;
                  v45 = (int)v17;
                  v46 = &v28[-(int)v17];
                  v47 = i - (int)v17;
                  if (v46 == (char *)-1)
                  {
                    v46 = (char *)v47;
                  }
                  else if (v47 < (unint64_t)v46)
                  {
                    goto LABEL_91;
                  }
                  v48 = v19 + v45;
                  v49 = &v46[v19 - 1 + v45];
                  if ((unint64_t)v49 >= v48)
                  {
                    v50 = 1.0;
                    v27 = 0.0;
                    while (1)
                    {
                      v51 = *v49;
                      if (v50 == INFINITY)
                      {
                        if (v51 != 48)
                        {
                          v27 = INFINITY;
                          goto LABEL_61;
                        }
                      }
                      else
                      {
                        v52 = v51 - 48;
                        v53 = v51 - 65;
                        if ((v51 - 97) <= 0x19)
                          v54 = v51 - 87;
                        else
                          v54 = -1;
                        v55 = v51 - 55;
                        if (v53 > 0x19)
                          v55 = v54;
                        if (v52 <= 9)
                          v55 = v52;
                        if (v55 >= (int)v16)
                          v55 = -1;
                        v27 = v27 + (double)v55 * v50;
                      }
                      v50 = v50 * v26;
                      if ((unint64_t)--v49 < v48)
                        goto LABEL_61;
                    }
                  }
                  v27 = 0.0;
                  break;
              }
LABEL_94:
              v18 = v3;
              goto LABEL_61;
            }
            if ((v22 - 97) <= 0x19)
            {
              v23 = -87;
              goto LABEL_38;
            }
          }
LABEL_56:
          v25 = NAN;
          goto LABEL_57;
        }
      }
    }
LABEL_31:
    if (a2)
      v16 = a2;
    else
      v16 = 10;
    if ((v16 - 37) < 0xFFFFFFDD)
      goto LABEL_56;
    goto LABEL_35;
  }
  v19 = *((_QWORD *)v83 + 1);
  i = *((unsigned int *)v83 + 1);
  if ((*((_BYTE *)v83 + 16) & 4) != 0)
  {
    if (!(_DWORD)i)
    {
      i = 0;
      v17 = 0;
      goto LABEL_25;
    }
    v17 = 0;
    while (1)
    {
      v21 = *((unsigned __int8 *)v17 + v19);
      if ((v21 - 9) >= 5)
      {
        if (*((unsigned __int8 *)v17 + v19) > 0x2Au)
        {
          if (v21 == 43)
          {
            v17 = (WTF::StringImpl *)((char *)v17 + 1);
            goto LABEL_25;
          }
          if (v21 == 45)
          {
            v17 = (WTF::StringImpl *)((char *)v17 + 1);
            v18 = -1.0;
            goto LABEL_25;
          }
          v18 = 1.0;
          if (v21 != 160)
            goto LABEL_25;
        }
        else if (v21 != 32)
        {
          goto LABEL_25;
        }
      }
      v17 = (WTF::StringImpl *)((char *)v17 + 1);
      if ((WTF::StringImpl *)i == v17)
      {
        v17 = (WTF::StringImpl *)*((unsigned int *)v83 + 1);
        goto LABEL_25;
      }
    }
  }
  v81 = *((_QWORD *)v83 + 1);
  v3 = 1.0;
  v82 = *((unsigned int *)v83 + 1);
  if (!(_DWORD)i)
  {
    v19 = 0;
    goto LABEL_146;
  }
  v56 = 0;
  while (1)
  {
    v57 = *(unsigned __int16 *)(v81 + 2 * v56);
    if (v57 > 0xFF)
      break;
    if (*(_WORD *)(v81 + 2 * v56) > 0x20u || ((1 << v57) & 0x100001A00) == 0)
    {
      v61 = *(_WORD *)(v81 + 2 * v56) == 160 || v57 == 13;
      if (!v61 && v57 != 10)
        goto LABEL_211;
    }
LABEL_127:
    if (v82 == ++v56)
    {
      v19 = v82;
      goto LABEL_146;
    }
  }
  if (u_charType(*(unsigned __int16 *)(v81 + 2 * v56)) == 12 || v57 - 8232 < 2 || v57 == 65279)
    goto LABEL_127;
  v57 = *(unsigned __int16 *)(v81 + 2 * v56);
LABEL_211:
  if (v57 == 43)
  {
    v19 = v56 + 1;
  }
  else
  {
    if (v57 == 45)
      v3 = -1.0;
    else
      v3 = 1.0;
    if (v57 == 45)
      v19 = v56 + 1;
    else
      v19 = v56;
  }
LABEL_146:
  if ((a2 | 0x10) != 0x10 || v82 - v19 < 2)
    goto LABEL_153;
  if (v82 <= v19)
    goto LABEL_91;
  if (*(_WORD *)(v81 + 2 * v19) != 48)
    goto LABEL_153;
  i = v82;
  if (v19 + 1 >= v82)
    goto LABEL_91;
  if ((*(unsigned __int16 *)(v81 + 2 * (v19 + 1)) | 0x20) == 0x78)
  {
    v19 += 2;
    v63 = 16;
    goto LABEL_157;
  }
LABEL_153:
  if (a2)
    v63 = a2;
  else
    v63 = 10;
  if ((v63 - 37) < 0xFFFFFFDD)
    goto LABEL_181;
LABEL_157:
  if (v19 >= v82)
    goto LABEL_181;
  v64 = *(unsigned __int16 *)(v81 + 2 * v19);
  if ((v64 - 48) < 0xA)
  {
    v65 = -48;
    goto LABEL_160;
  }
  if ((v64 - 65) >= 0x1A)
  {
    if ((v64 - 97) <= 0x19)
    {
      v65 = -87;
      goto LABEL_160;
    }
    goto LABEL_181;
  }
  v65 = -55;
LABEL_160:
  v66 = v65 + v64;
  if (v66 >= v63)
  {
LABEL_181:
    v25 = NAN;
    goto LABEL_57;
  }
  v67 = (double)v63;
  v68 = (double)v63 * 0.0 + (double)v66;
  for (i = v19 + 1; v82 != i; ++i)
  {
    v70 = *(unsigned __int16 *)(v81 + 2 * i);
    if ((v70 - 48) >= 0xA)
    {
      if ((v70 - 65) < 0x1A)
      {
        v71 = -55;
      }
      else
      {
        if ((v70 - 97) > 0x19)
          goto LABEL_163;
        v71 = -87;
      }
    }
    else
    {
      v71 = -48;
    }
    v72 = v71 + v70;
    if (v72 >= v63)
      goto LABEL_163;
    v68 = v68 * v67 + (double)v72;
  }
  i = v82;
LABEL_163:
  if (v68 < 9.00719925e15)
    goto LABEL_208;
  v16 = (v63 - 2);
  switch(v63)
  {
    case 2:
    case 4:
    case 8:
      goto LABEL_184;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
      goto LABEL_208;
    case 10:
      if (v82 < (int)v19)
        goto LABEL_91;
      v69 = (int)v19;
      v19 = i - (int)v19;
      i = v82 - v69;
      if (v19 == -1)
      {
        v19 = v82 - v69;
      }
      else if (i < v19)
      {
        goto LABEL_91;
      }
      var58[0] = 0;
      fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)(v81 + 2 * v69), (unsigned __int16 *)(v81 + 2 * v69 + 2 * v19), (double *)var58, 0x2E00000005);
      v68 = *(double *)var58;
      goto LABEL_208;
    default:
      if (v63 != 16 && v63 != 32)
        goto LABEL_208;
LABEL_184:
      v16 = v82;
      if (v82 < (int)v19)
        goto LABEL_91;
      v16 = (int)v19;
      i -= (int)v19;
      v19 = v82 - (int)v19;
      if (i == -1)
      {
        i = v19;
      }
      else if (v19 < i)
      {
        goto LABEL_91;
      }
      v73 = v81 + 2 * v16;
      v74 = (unsigned __int16 *)(v73 + 2 * i - 2);
      v68 = 0.0;
      if ((unint64_t)v74 < v73)
        goto LABEL_208;
      v75 = 1.0;
      break;
  }
  while (2)
  {
    v76 = *v74;
    if (v75 != INFINITY)
    {
      v77 = v76 - 48;
      v78 = v76 - 65;
      if ((v76 - 97) <= 0x19)
        v79 = v76 - 87;
      else
        v79 = -1;
      v80 = v76 - 55;
      if (v78 > 0x19)
        v80 = v79;
      if (v77 <= 9)
        v80 = v77;
      if (v80 >= v63)
        v80 = -1;
      v68 = v68 + (double)v80 * v75;
LABEL_204:
      v75 = v75 * v67;
      if ((unint64_t)--v74 < v73)
        goto LABEL_208;
      continue;
    }
    break;
  }
  if (v76 == 48)
    goto LABEL_204;
  v68 = INFINITY;
LABEL_208:
  v25 = v3 * v68;
LABEL_62:
  v34 = (int)v25;
  if (v25 == (double)(int)v34 && ((_DWORD)v34 || (*(_QWORD *)&v25 & 0x8000000000000000) == 0))
  {
LABEL_65:
    v8 = v34 | 0xFFFE000000000000;
    goto LABEL_66;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v25 == (double)(int)v34)
  {
    if ((_DWORD)v34)
      goto LABEL_65;
    v33 = v25;
    if ((*(_QWORD *)&v25 & 0x8000000000000000) == 0)
      goto LABEL_65;
    goto LABEL_58;
  }
LABEL_57:
  v33 = v25;
LABEL_58:
  v8 = *(_QWORD *)&v33 + 0x2000000000000;
LABEL_66:
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  return v8;
}

unint64_t operationParseIntInt32(uint64_t a1, WTF::String *this, unsigned int a3)
{
  double v3;
  unint64_t v4;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  double v15;
  unint64_t v16;
  unint64_t i;
  int v18;
  int v19;
  int v20;
  int v21;
  double v22;
  double v23;
  double v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  double v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  double v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  unsigned int v55;
  BOOL v59;
  int v61;
  int v62;
  int v63;
  int v64;
  double v65;
  double v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  unsigned __int16 *v72;
  double v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  WTF::StringImpl *v81;
  unint64_t var58[12];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var58[11];
  if (a3 == 10)
    return this | 0xFFFE000000000000;
  WTF::String::number((unint64_t)this, (uint64_t *)&v81);
  v14 = v81;
  v15 = 1.0;
  if (!v81)
  {
    i = 0;
    v16 = 0;
LABEL_15:
    if ((a3 | 0x10) == 0x10)
    {
      v13 = i - (_QWORD)v14;
      if (i - (unint64_t)v14 >= 2)
      {
        if (i <= (unint64_t)v14)
          goto LABEL_76;
        if (*((_BYTE *)v14 + v16) != 48)
          goto LABEL_21;
        v13 = (uint64_t)v14 + 1;
        if ((unint64_t)v14 + 1 >= i)
        {
LABEL_76:
          __break(1u);
LABEL_77:
          v42 = i;
LABEL_78:
          var58[0] = 0;
          fast_float::from_chars_advanced<double,char>((unsigned __int8 *)(v16 + v13), (unsigned __int8 *)(v16 + v13 + v42), var58, 0x2E00000005);
          v24 = *(double *)var58;
          goto LABEL_79;
        }
        if ((*(unsigned __int8 *)(v16 + v13) | 0x20) == 0x78)
        {
          v14 = (WTF::StringImpl *)((char *)v14 + 2);
          v13 = 16;
LABEL_25:
          if ((unint64_t)v14 < i)
          {
            v19 = *((unsigned __int8 *)v14 + v16);
            if ((v19 - 48) < 0xA)
            {
              v20 = -48;
              goto LABEL_28;
            }
            if ((v19 - 65) < 0x1A)
            {
              v20 = -55;
LABEL_28:
              v21 = v20 + v19;
              v22 = NAN;
              if (v21 >= (int)v13 || v21 == -1)
                goto LABEL_47;
              v23 = (double)(int)v13;
              v24 = (double)(int)v13 * 0.0 + (double)v21;
              v25 = (char *)v14 + 1;
              if ((WTF::StringImpl *)((char *)v14 + 1) == (WTF::StringImpl *)i)
              {
LABEL_49:
                v25 = (char *)i;
              }
              else
              {
                while (1)
                {
                  v26 = v25[v16];
                  if ((v26 - 48) >= 0xA)
                  {
                    if ((v26 - 65) < 0x1A)
                    {
                      v27 = -55;
                    }
                    else
                    {
                      if ((v26 - 97) > 0x19)
                        break;
                      v27 = -87;
                    }
                  }
                  else
                  {
                    v27 = -48;
                  }
                  v28 = v27 + v26;
                  if (v28 >= (int)v13 || v28 == -1)
                    break;
                  v24 = v24 * v23 + (double)v28;
                  if ((char *)i == ++v25)
                    goto LABEL_49;
                }
              }
              if (v24 < 9.00719925e15)
              {
LABEL_51:
                v22 = v15 * v24;
                goto LABEL_52;
              }
              v3 = v15;
              switch((int)v13)
              {
                case 2:
                case 4:
                case 8:
                  goto LABEL_73;
                case 3:
                case 5:
                case 6:
                case 7:
                case 9:
                  goto LABEL_51;
                case 10:
                  if (i < (int)v14)
                    goto LABEL_76;
                  v13 = (int)v14;
                  v42 = (unint64_t)&v25[-(int)v14];
                  i -= v13;
                  if (v42 == -1)
                    goto LABEL_77;
                  if (i < v42)
                    goto LABEL_76;
                  goto LABEL_78;
                default:
                  if ((_DWORD)v13 != 16 && (_DWORD)v13 != 32)
                    goto LABEL_51;
LABEL_73:
                  if (i < (int)v14)
                    goto LABEL_76;
                  v43 = (int)v14;
                  v44 = &v25[-(int)v14];
                  v45 = i - (int)v14;
                  if (v44 == (char *)-1)
                  {
                    v44 = (char *)v45;
                  }
                  else if (v45 < (unint64_t)v44)
                  {
                    goto LABEL_76;
                  }
                  v46 = v16 + v43;
                  v47 = &v44[v16 - 1 + v43];
                  if ((unint64_t)v47 >= v46)
                  {
                    v48 = 1.0;
                    v24 = 0.0;
                    while (1)
                    {
                      v49 = *v47;
                      if (v48 == INFINITY)
                      {
                        if (v49 != 48)
                        {
                          v24 = INFINITY;
                          goto LABEL_51;
                        }
                      }
                      else
                      {
                        v50 = v49 - 48;
                        v51 = v49 - 65;
                        if ((v49 - 97) <= 0x19)
                          v52 = v49 - 87;
                        else
                          v52 = -1;
                        v53 = v49 - 55;
                        if (v51 > 0x19)
                          v53 = v52;
                        if (v50 <= 9)
                          v53 = v50;
                        if (v53 >= (int)v13)
                          v53 = -1;
                        v24 = v24 + (double)v53 * v48;
                      }
                      v48 = v48 * v23;
                      if ((unint64_t)--v47 < v46)
                        goto LABEL_51;
                    }
                  }
                  v24 = 0.0;
                  break;
              }
LABEL_79:
              v15 = v3;
              goto LABEL_51;
            }
            if ((v19 - 97) <= 0x19)
            {
              v20 = -87;
              goto LABEL_28;
            }
          }
LABEL_46:
          v22 = NAN;
          goto LABEL_47;
        }
      }
    }
LABEL_21:
    if (a3)
      v13 = a3;
    else
      v13 = 10;
    if ((v13 - 37) < 0xFFFFFFDD)
      goto LABEL_46;
    goto LABEL_25;
  }
  v16 = *((_QWORD *)v81 + 1);
  i = *((unsigned int *)v81 + 1);
  if ((*((_BYTE *)v81 + 16) & 4) != 0)
  {
    if (!(_DWORD)i)
    {
      i = 0;
      v14 = 0;
      goto LABEL_15;
    }
    v14 = 0;
    while (1)
    {
      v18 = *((unsigned __int8 *)v14 + v16);
      if ((v18 - 9) >= 5)
      {
        if (*((unsigned __int8 *)v14 + v16) > 0x2Au)
        {
          if (v18 == 43)
          {
            v14 = (WTF::StringImpl *)((char *)v14 + 1);
            goto LABEL_15;
          }
          if (v18 == 45)
          {
            v14 = (WTF::StringImpl *)((char *)v14 + 1);
            v15 = -1.0;
            goto LABEL_15;
          }
          v15 = 1.0;
          if (v18 != 160)
            goto LABEL_15;
        }
        else if (v18 != 32)
        {
          goto LABEL_15;
        }
      }
      v14 = (WTF::StringImpl *)((char *)v14 + 1);
      if ((WTF::StringImpl *)i == v14)
      {
        v14 = (WTF::StringImpl *)*((unsigned int *)v81 + 1);
        goto LABEL_15;
      }
    }
  }
  v79 = *((_QWORD *)v81 + 1);
  v3 = 1.0;
  v80 = *((unsigned int *)v81 + 1);
  if (!(_DWORD)i)
  {
    v16 = 0;
    goto LABEL_130;
  }
  v54 = 0;
  while (1)
  {
    v55 = *(unsigned __int16 *)(v79 + 2 * v54);
    if (v55 > 0xFF)
      break;
    if (*(_WORD *)(v79 + 2 * v54) > 0x20u || ((1 << v55) & 0x100001A00) == 0)
    {
      v59 = *(_WORD *)(v79 + 2 * v54) == 160 || v55 == 13;
      if (!v59 && v55 != 10)
        goto LABEL_195;
    }
LABEL_111:
    if (v80 == ++v54)
    {
      v16 = v80;
      goto LABEL_130;
    }
  }
  if (u_charType(*(unsigned __int16 *)(v79 + 2 * v54)) == 12 || v55 - 8232 < 2 || v55 == 65279)
    goto LABEL_111;
  v55 = *(unsigned __int16 *)(v79 + 2 * v54);
LABEL_195:
  if (v55 == 43)
  {
    v16 = v54 + 1;
  }
  else
  {
    if (v55 == 45)
      v3 = -1.0;
    else
      v3 = 1.0;
    if (v55 == 45)
      v16 = v54 + 1;
    else
      v16 = v54;
  }
LABEL_130:
  if ((a3 | 0x10) != 0x10 || v80 - v16 < 2)
    goto LABEL_137;
  if (v80 <= v16)
    goto LABEL_76;
  if (*(_WORD *)(v79 + 2 * v16) != 48)
    goto LABEL_137;
  i = v80;
  if (v16 + 1 >= v80)
    goto LABEL_76;
  if ((*(unsigned __int16 *)(v79 + 2 * (v16 + 1)) | 0x20) == 0x78)
  {
    v16 += 2;
    v61 = 16;
    goto LABEL_141;
  }
LABEL_137:
  if (a3)
    v61 = a3;
  else
    v61 = 10;
  if ((v61 - 37) < 0xFFFFFFDD)
    goto LABEL_165;
LABEL_141:
  if (v16 >= v80)
    goto LABEL_165;
  v62 = *(unsigned __int16 *)(v79 + 2 * v16);
  if ((v62 - 48) < 0xA)
  {
    v63 = -48;
    goto LABEL_144;
  }
  if ((v62 - 65) >= 0x1A)
  {
    if ((v62 - 97) <= 0x19)
    {
      v63 = -87;
      goto LABEL_144;
    }
    goto LABEL_165;
  }
  v63 = -55;
LABEL_144:
  v64 = v63 + v62;
  if (v64 >= v61)
  {
LABEL_165:
    v22 = NAN;
    goto LABEL_47;
  }
  v65 = (double)v61;
  v66 = (double)v61 * 0.0 + (double)v64;
  for (i = v16 + 1; v80 != i; ++i)
  {
    v68 = *(unsigned __int16 *)(v79 + 2 * i);
    if ((v68 - 48) >= 0xA)
    {
      if ((v68 - 65) < 0x1A)
      {
        v69 = -55;
      }
      else
      {
        if ((v68 - 97) > 0x19)
          goto LABEL_147;
        v69 = -87;
      }
    }
    else
    {
      v69 = -48;
    }
    v70 = v69 + v68;
    if (v70 >= v61)
      goto LABEL_147;
    v66 = v66 * v65 + (double)v70;
  }
  i = v80;
LABEL_147:
  if (v66 < 9.00719925e15)
    goto LABEL_192;
  v13 = (v61 - 2);
  switch(v61)
  {
    case 2:
    case 4:
    case 8:
      goto LABEL_168;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
      goto LABEL_192;
    case 10:
      if (v80 < (int)v16)
        goto LABEL_76;
      v67 = (int)v16;
      v16 = i - (int)v16;
      i = v80 - v67;
      if (v16 == -1)
      {
        v16 = v80 - v67;
      }
      else if (i < v16)
      {
        goto LABEL_76;
      }
      var58[0] = 0;
      fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)(v79 + 2 * v67), (unsigned __int16 *)(v79 + 2 * v67 + 2 * v16), (double *)var58, 0x2E00000005);
      v66 = *(double *)var58;
      goto LABEL_192;
    default:
      if (v61 != 16 && v61 != 32)
        goto LABEL_192;
LABEL_168:
      v13 = v80;
      if (v80 < (int)v16)
        goto LABEL_76;
      v13 = (int)v16;
      i -= (int)v16;
      v16 = v80 - (int)v16;
      if (i == -1)
      {
        i = v16;
      }
      else if (v16 < i)
      {
        goto LABEL_76;
      }
      v71 = v79 + 2 * v13;
      v72 = (unsigned __int16 *)(v71 + 2 * i - 2);
      v66 = 0.0;
      if ((unint64_t)v72 < v71)
        goto LABEL_192;
      v73 = 1.0;
      break;
  }
  while (2)
  {
    v74 = *v72;
    if (v73 != INFINITY)
    {
      v75 = v74 - 48;
      v76 = v74 - 65;
      if ((v74 - 97) <= 0x19)
        v77 = v74 - 87;
      else
        v77 = -1;
      v78 = v74 - 55;
      if (v76 > 0x19)
        v78 = v77;
      if (v75 <= 9)
        v78 = v75;
      if (v78 >= v61)
        v78 = -1;
      v66 = v66 + (double)v78 * v73;
LABEL_188:
      v73 = v73 * v65;
      if ((unint64_t)--v72 < v71)
        goto LABEL_192;
      continue;
    }
    break;
  }
  if (v74 == 48)
    goto LABEL_188;
  v66 = INFINITY;
LABEL_192:
  v22 = v3 * v66;
LABEL_52:
  v31 = (int)v22;
  if (v22 == (double)(int)v31 && ((_DWORD)v31 || (*(_QWORD *)&v22 & 0x8000000000000000) == 0))
  {
LABEL_55:
    v4 = v31 | 0xFFFE000000000000;
    goto LABEL_56;
  }
  if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v22 == (double)(int)v31)
  {
    if ((_DWORD)v31)
      goto LABEL_55;
    v30 = v22;
    if ((*(_QWORD *)&v22 & 0x8000000000000000) == 0)
      goto LABEL_55;
    goto LABEL_48;
  }
LABEL_47:
  v30 = v22;
LABEL_48:
  v4 = *(_QWORD *)&v30 + 0x2000000000000;
LABEL_56:
  v32 = v81;
  v81 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v4;
}

BOOL operationRegExpTestString(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10)
{
  uint64_t v13;
  uint64_t v14;
  int **v15;
  JSC::VM *v16;
  unint64_t v17;
  int *v19;
  unint64_t v20;
  __int16 v21;
  uint64_t v22;
  unint64_t *v23;
  int *v24;
  unsigned int v25;
  _BOOL8 v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int8 *v49;
  void *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  int v55;
  double v56;
  double v57;
  int v58;
  int v59;
  double v60;
  _DWORD *v61;
  int v62;
  int v63;
  void **v64;
  int *v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  void *v69;
  unint64_t v70;
  double v71;
  uint64_t v72;
  BOOL hasExceptionsAfterHandlingTraps;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  JSC::VM *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  double v95;
  unint64_t v96;
  __int128 v97;
  void *v98;
  uint64_t v99;
  JSC::JSGlobalObject **v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD var60[13];

  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v13 + 40) = var60[12];
  v14 = *(_QWORD *)(a2 + 16);
  v15 = (int **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    v15 = JSC::JSRopeString::resolveRope(a3, (JSC::JSGlobalObject *)a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v54 = *(_DWORD *)(v13 + 80);
    if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      goto LABEL_74;
  }
  v96 = a3;
  v16 = *(JSC::VM **)(a1 + 56);
  v17 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)&v97 = v17;
  if (v17 >= 0xFFFE000000000000 && (v17 & 0x80000000) == 0)
  {
    v19 = *v15;
    if (*v15)
      LODWORD(v19) = v19[1];
    if (v19 < v17)
      goto LABEL_68;
  }
  else
  {
    if (v17 < 0xFFFE000000000000)
    {
      if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v97, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
      else
        *(_QWORD *)&v71 = v17 - 0x2000000000000;
      HIDWORD(a10) = 0;
      v56 = trunc(v71 + 0.0);
    }
    else
    {
      v56 = (double)(int)v17;
    }
    if (*((_DWORD *)v16 + 20)
      && (v95 = v56,
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16, a2, a3, a4, a5, a6, a7, a8),
          v56 = v95,
          hasExceptionsAfterHandlingTraps)
      || (!*v15 ? (v57 = 0.0) : (LODWORD(a10) = (*v15)[1], v57 = (double)*(unint64_t *)&a10), v56 > v57))
    {
LABEL_68:
      LODWORD(v17) = -1;
      goto LABEL_12;
    }
    if (v56 <= 0.0)
      v56 = 0.0;
    LODWORD(v17) = v56;
  }
LABEL_12:
  if (*(_DWORD *)(v13 + 80))
  {
    v55 = *(_DWORD *)(v13 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      goto LABEL_60;
  }
  v20 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  v21 = *(_WORD *)((v14 & 0xFFFFFFFFFFFFFFFCLL) + 18);
  if ((v21 & 2) != 0 || (v21 & 0x80) != 0)
  {
    if ((_DWORD)v17 == -1)
    {
      *(_QWORD *)&v97 = *(_QWORD *)(a1 + 56);
      if ((*(_BYTE *)(a2 + 16) & 1) != 0)
        JSC::throwTypeError(a1, (JSC::VM **)&v97, (uint64_t)"Attempted to assign to readonly property.", 42);
      else
        *(_QWORD *)(a2 + 24) = 0xFFFE000000000000;
LABEL_60:
      v45 = -1;
      return v45 != -1;
    }
    v22 = *(_QWORD *)(a1 + 56);
    v23 = (unint64_t *)(v22 + 90552);
    var60[0] = a1;
    v24 = *v15;
    if (*v15)
    {
      v25 = v24[4];
      v26 = (v25 & 4) == 0;
      v27 = *((_QWORD *)v24 + 1);
      LODWORD(v24) = v24[1];
      v28 = (v25 >> 2) & 1;
    }
    else
    {
      v26 = 0;
      v27 = 0;
      LOBYTE(v28) = 1;
    }
    v29 = *(unsigned __int8 *)(v20 + 16);
    if (v29 == 1)
    {
      v30 = *(_QWORD *)(v20 + 40);
      if (v26)
      {
        v72 = *(_QWORD *)(v30 + 72);
        if (v72 && *(_DWORD *)(v72 + 4))
          goto LABEL_21;
      }
      else
      {
        v31 = *(_QWORD *)(v30 + 56);
        if (v31 && *(_DWORD *)(v31 + 4))
        {
LABEL_21:
          v100 = (JSC::JSGlobalObject **)var60;
          v101 = v22;
          v102 = v20;
          goto LABEL_22;
        }
      }
    }
    else if (v29 == 2 || !*(_BYTE *)(v20 + 16))
    {
      goto LABEL_82;
    }
    *(_QWORD *)&v97 = v27;
    DWORD2(v97) = (_DWORD)v24;
    BYTE12(v97) = v28;
    LOBYTE(v98) = 1;
    JSC::RegExp::compileMatchOnly(v20, v22, v26, &v97);
    v29 = *(unsigned __int8 *)(v20 + 16);
LABEL_82:
    v100 = (JSC::JSGlobalObject **)var60;
    v101 = v22;
    v102 = v20;
    if (v29 != 1)
    {
      if (!v29)
        goto LABEL_117;
      goto LABEL_87;
    }
    v30 = *(_QWORD *)(v20 + 40);
LABEL_22:
    v32 = *(unsigned __int8 *)(v30 + 104);
    v98 = 0;
    v99 = 0;
    v33 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)&v97 = v22;
    *((_QWORD *)&v97 + 1) = v33;
    *v23 = v20;
    if (!v32)
      goto LABEL_23;
    v49 = (unsigned __int8 *)(v22 + 93049);
    if (__ldaxr((unsigned __int8 *)(v22 + 93049)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v49))
    {
LABEL_46:
      v51 = *(void **)(v22 + 93056);
      if (!v51)
      {
        v51 = (void *)WTF::fastMalloc((WTF *)0x2000);
        bzero(v51, 0x2000uLL);
        v81 = *(_QWORD *)(v22 + 93056);
        *(_QWORD *)(v22 + 93056) = v51;
        if (v81)
        {
          WTF::fastFree(v81, v74, v75, v76, v77, v78, v79, v80);
          v51 = *(void **)(v22 + 93056);
        }
      }
      v98 = v51;
      LODWORD(v99) = 0x2000;
LABEL_23:
      v34 = *v15;
      if (*v15)
      {
        if ((v34[4] & 4) == 0)
        {
          v37 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, __int128 *))(*(_QWORD *)(v20 + 40) + 64))(*((_QWORD *)v34 + 1), v17, v34[1], 0, &v97);
LABEL_27:
          v45 = v37;
          v46 = v38;
          if (!v98)
            goto LABEL_28;
          v52 = (unsigned __int8 *)(v97 + 93049);
          v53 = __ldxr((unsigned __int8 *)(v97 + 93049));
          if (v53 == 1)
          {
            if (!__stlxr(0, v52))
            {
LABEL_28:
              if (!HIDWORD(v99))
                *(_QWORD *)(v97 + 90552) = 0;
              if (v45 != -2)
              {
                if (!*(_DWORD *)(v22 + 80))
                  goto LABEL_142;
LABEL_31:
                v58 = *(_DWORD *)(v22 + 80);
                if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, v39, v40, v41, v42, v43, v44);
                if (*(_QWORD *)(v22 + 16))
                {
                  v46 = 0;
                  v45 = -1;
                }
                else
                {
LABEL_142:
                  if (v45 != -1)
                  {
                    *(_QWORD *)(a1 + 2152) = v20;
                    *(_QWORD *)(a1 + 2144) = v96;
                    *(_QWORD *)(a1 + 2120) = v45;
                    *(_QWORD *)(a1 + 2128) = v46;
                    *(_BYTE *)(a1 + 2136) = 0;
                    if (*(_DWORD *)(v22 + 760) >= *(unsigned __int8 *)(a1 + 7))
                      JSC::Heap::writeBarrierSlowPath(v22 + 192, a1);
                  }
                }
                if (*(_DWORD *)(v13 + 80))
                {
                  v59 = *(_DWORD *)(v13 + 80);
                  if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v39, v40, v41, v42, v43, v44);
                  if (*(_QWORD *)(v13 + 16))
                    goto LABEL_74;
                }
                *(_QWORD *)&v97 = *(_QWORD *)(a1 + 56);
                if ((*(_BYTE *)(a2 + 16) & 1) != 0)
                {
                  JSC::throwTypeError(a1, (JSC::VM **)&v97, (uint64_t)"Attempted to assign to readonly property.", 42);
                  return v45 != -1;
                }
                if (HIDWORD(v46))
                {
                  v60 = (double)v46;
                }
                else
                {
                  if ((v46 & 0x80000000) == 0)
                  {
                    v47 = v46 | 0xFFFE000000000000;
LABEL_40:
                    *(_QWORD *)(a2 + 24) = v47;
                    return v45 != -1;
                  }
                  v60 = (double)v46;
                }
                v47 = *(_QWORD *)&v60 + 0x2000000000000;
                goto LABEL_40;
              }
              JSC::RegExp::byteCodeCompileIfNecessary((JSC::RegExp *)v20, (JSC::VM *)v22);
              if (!*(_BYTE *)(v20 + 16))
              {
LABEL_117:
                v45 = JSC::RegExp::matchInline<(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int)::{lambda(void)#1}::operator()(&v100);
                v46 = v82;
                goto LABEL_31;
              }
LABEL_87:
              *(_QWORD *)&v97 = &v98;
              *((_QWORD *)&v97 + 1) = 32;
              v61 = *(_DWORD **)(v20 + 48);
              if (v61 && v61[5])
                v62 = *v61 + 2 * *(_DWORD *)(v20 + 24);
              else
                v62 = 2 * *(_DWORD *)(v20 + 24);
              v63 = v62 + 2;
              v64 = &v98;
              if ((v62 + 2) >= 0x21)
              {
                WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v97, v63);
                v64 = (void **)v97;
              }
              HIDWORD(v97) = v63;
              *v23 = v20;
              v65 = *v15;
              if (*v15)
              {
                v66 = *((_QWORD *)v65 + 1);
                v67 = v65[1] | ((unint64_t)((v65[4] >> 2) & 1) << 32);
              }
              else
              {
                v66 = 0;
                v67 = 0x100000000;
              }
              v68 = JSC::Yarr::interpret(*(_QWORD *)(v20 + 32), v66, v67, v17, (uint64_t)v64, a6, a7, a8);
              *v23 = 0;
              if ((v68 & 0x80000000) != 0)
              {
                v46 = 0;
                v45 = -1;
              }
              else
              {
                v45 = v68;
                v46 = *((unsigned int *)v64 + 1);
              }
              v70 = v97;
              if (&v98 != (void **)v97 && (_QWORD)v97)
              {
                *(_QWORD *)&v97 = 0;
                DWORD2(v97) = 0;
                WTF::fastFree(v70, v69, v39, v40, v41, v42, v43, v44);
              }
              goto LABEL_31;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v52, 0, v39, v40, v41, v42, v43, v44);
          goto LABEL_28;
        }
        v35 = *((_QWORD *)v34 + 1);
        v36 = v34[1];
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
      v37 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, __int128 *))(*(_QWORD *)(v20 + 40) + 48))(v35, v17, v36, 0, &v97);
      goto LABEL_27;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v49);
    goto LABEL_46;
  }
  v83 = *(JSC::VM **)(a1 + 56);
  v84 = JSC::RegExp::match((JSC::RegExp *)(v14 & 0xFFFFFFFFFFFFFFFCLL), (JSC::JSGlobalObject *)a1, (const WTF::String *)v15, 0, a5, a6, a7, a8);
  v92 = v84;
  v93 = v85;
  if (*((_DWORD *)v83 + 20))
  {
    v45 = -1;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v83, v85, v86, v87, v88, v89, v90, v91))
      return v45 != -1;
    v94 = v96;
    if (v92 == -1)
      return v45 != -1;
    goto LABEL_123;
  }
  v94 = v96;
  if (v84 == -1)
  {
LABEL_74:
    v45 = -1;
    return v45 != -1;
  }
LABEL_123:
  *(_QWORD *)(a1 + 2152) = v20;
  *(_QWORD *)(a1 + 2144) = v94;
  *(_QWORD *)(a1 + 2120) = v92;
  *(_QWORD *)(a1 + 2128) = v93;
  *(_BYTE *)(a1 + 2136) = 0;
  if (*((_DWORD *)v83 + 190) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v83 + 192, a1);
  v45 = v92;
  return v45 != -1;
}

BOOL operationRegExpTest(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10)
{
  unsigned __int8 *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int **v16;
  JSC::VM *v17;
  unint64_t v18;
  int *v19;
  unint64_t v20;
  __int16 v21;
  uint64_t v22;
  unint64_t *v23;
  int *v24;
  unsigned int v25;
  _BOOL8 v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  void *v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  int v63;
  double v64;
  double v65;
  int v66;
  int v67;
  double v68;
  _DWORD *v69;
  int v70;
  int v71;
  void **v72;
  int *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  void *v77;
  unint64_t v78;
  double v79;
  uint64_t (*v80)(__int128 *);
  _QWORD *v81;
  uint64_t v82;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  JSC::VM *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  double v108;
  __int128 v109;
  void *v110;
  uint64_t v111;
  JSC::JSGlobalObject **v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD var60[13];

  v10 = (unsigned __int8 *)a3;
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v13 + 40) = var60[12];
  if ((a3 & 0xFFFE000000000002) == 0)
  {
    v14 = v13;
    if (*(_BYTE *)(a3 + 5) == 2)
      goto LABEL_3;
    goto LABEL_47;
  }
  if (a3 < 0xFFFE000000000000)
  {
    if (a3 - 0x2000000000000 >= 0xFFFC000000000000)
    {
LABEL_47:
      switch(a3)
      {
        case 2uLL:
          v10 = *(unsigned __int8 **)(v13 + 42016);
          goto LABEL_44;
        case 6uLL:
          v10 = *(unsigned __int8 **)(v13 + 41992);
          goto LABEL_44;
        case 7uLL:
          v10 = *(unsigned __int8 **)(v13 + 42064);
          goto LABEL_44;
        case 0xAuLL:
          v10 = *(unsigned __int8 **)(v13 + 42032);
          goto LABEL_44;
        default:
          v50 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x40);
          if (v50)
          {
            if (*(_BYTE *)(v50 + 5) != 1)
            {
              v51 = *(_QWORD *)(v50 + 64);
              if (v51)
              {
                if ((*(_QWORD *)(v51 + 88) & 0xFFFFFFFFFFFFFFF7) == 2)
                {
                  v52 = *(_QWORD *)(v51 + 40);
                  if (v52 == 1)
                    v53 = 0;
                  else
                    v53 = v52;
                  v54 = *(_QWORD *)(a1 + 512);
                  if ((v54 & 1) != 0)
                  {
                    v80 = *(uint64_t (**)(__int128 *))(v54 & 0xFFFFFFFFFFFFFFFCLL);
                    if ((a1 & 8) != 0)
                      v81 = (_QWORD *)(a1 - 16);
                    else
                      v81 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
                    *(_QWORD *)&v109 = *v81;
                    *((_QWORD *)&v109 + 1) = a1;
                    v110 = (void *)(a1 + 512);
                    v54 = v80(&v109);
                  }
                  if (v54 == v53)
                  {
                    v94 = *(_QWORD *)(v50 + 64);
                    if (v94)
                    {
                      v95 = *(_QWORD *)(v94 + 16);
                      if (v95 >= 2)
                      {
                        v10 = (unsigned __int8 *)v95;
                        goto LABEL_61;
                      }
                    }
                  }
                }
              }
            }
          }
          v55 = v10[5];
          if (v55 < 0x17)
          {
            if (v55 == 2)
            {
LABEL_61:
              if (*(_DWORD *)(v13 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, a3, a4, a5, a6, a7, a8))
              {
                return 0;
              }
              goto LABEL_44;
            }
            v56 = JSC::JSCell::toStringSlowCase((JSC::JSCell *)v10, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8);
          }
          else
          {
            v56 = JSC::JSObject::toString((JSC::JSObject *)v10, (JSC::JSGlobalObject *)a1, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
          }
          v10 = (unsigned __int8 *)v56;
          goto LABEL_61;
      }
    }
    v49 = JSC::numberToString((JSC *)v13, (JSC::VM *)0xA, COERCE_DOUBLE(a3 - 0x2000000000000), a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v49 = JSC::int32ToString(v13, (JSC::VM *)a3, (const WTF::String *)0xA, a4, a5, a6, a7, a8);
  }
  v10 = (unsigned __int8 *)v49;
LABEL_44:
  if (v10)
  {
    v14 = *(_QWORD *)(a1 + 56);
LABEL_3:
    v15 = *(_QWORD *)(a2 + 16);
    v16 = (int **)(v10 + 8);
    if ((v10[8] & 1) != 0)
      v16 = JSC::JSRopeString::resolveRope((unint64_t)v10, (JSC::JSGlobalObject *)a1, a3, a4, a9, a5, a6, a7, a8);
    if (*(_DWORD *)(v14 + 80))
    {
      v62 = *(_DWORD *)(v14 + 80);
      if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v14 + 16))
        goto LABEL_86;
    }
    v17 = *(JSC::VM **)(a1 + 56);
    v18 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)&v109 = v18;
    if (v18 < 0xFFFE000000000000 || (v18 & 0x80000000) != 0)
    {
      if (v18 < 0xFFFE000000000000)
      {
        if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v109, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
        else
          *(_QWORD *)&v79 = v18 - 0x2000000000000;
        HIDWORD(a10) = 0;
        v64 = trunc(v79 + 0.0);
      }
      else
      {
        v64 = (double)(int)v18;
      }
      if (!*((_DWORD *)v17 + 20)
        || (v108 = v64,
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v17, a2, a3, a4, a5, a6, a7, a8),
            v64 = v108,
            !hasExceptionsAfterHandlingTraps))
      {
        if (*v16)
        {
          LODWORD(a10) = (*v16)[1];
          v65 = (double)*(unint64_t *)&a10;
        }
        else
        {
          v65 = 0.0;
        }
        if (v64 <= v65)
        {
          if (v64 <= 0.0)
            v64 = 0.0;
          LODWORD(v18) = v64;
LABEL_11:
          if (*(_DWORD *)(v14 + 80))
          {
            v63 = *(_DWORD *)(v14 + 80);
            if ((v63 & 0x27) != 0 && (v63 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v14 + 16))
              goto LABEL_86;
          }
          v20 = v15 & 0xFFFFFFFFFFFFFFFCLL;
          v21 = *(_WORD *)((v15 & 0xFFFFFFFFFFFFFFFCLL) + 18);
          if ((v21 & 2) == 0 && (v21 & 0x80) == 0)
          {
            v96 = *(JSC::VM **)(a1 + 56);
            v97 = JSC::RegExp::match((JSC::RegExp *)(v15 & 0xFFFFFFFFFFFFFFFCLL), (JSC::JSGlobalObject *)a1, (const WTF::String *)v16, 0, a5, a6, a7, a8);
            v105 = v97;
            v106 = v98;
            if (*((_DWORD *)v96 + 20))
            {
              v45 = -1;
              if (JSC::VM::hasExceptionsAfterHandlingTraps(v96, v98, v99, v100, v101, v102, v103, v104) || v105 == -1)
                return v45 != -1;
LABEL_157:
              *(_QWORD *)(a1 + 2152) = v20;
              *(_QWORD *)(a1 + 2144) = v10;
              *(_QWORD *)(a1 + 2120) = v105;
              *(_QWORD *)(a1 + 2128) = v106;
              *(_BYTE *)(a1 + 2136) = 0;
              if (*((_DWORD *)v96 + 190) >= *(unsigned __int8 *)(a1 + 7))
                JSC::Heap::writeBarrierSlowPath((uint64_t)v96 + 192, a1);
              v45 = v105;
              return v45 != -1;
            }
            if (v97 != -1)
              goto LABEL_157;
LABEL_86:
            v45 = -1;
            return v45 != -1;
          }
          if ((_DWORD)v18 == -1)
          {
            *(_QWORD *)&v109 = *(_QWORD *)(a1 + 56);
            if ((*(_BYTE *)(a2 + 16) & 1) != 0)
              JSC::throwTypeError(a1, (JSC::VM **)&v109, (uint64_t)"Attempted to assign to readonly property.", 42);
            else
              *(_QWORD *)(a2 + 24) = 0xFFFE000000000000;
            goto LABEL_86;
          }
          v22 = *(_QWORD *)(a1 + 56);
          v23 = (unint64_t *)(v22 + 90552);
          var60[0] = a1;
          v24 = *v16;
          if (*v16)
          {
            v25 = v24[4];
            v26 = (v25 & 4) == 0;
            v27 = *((_QWORD *)v24 + 1);
            LODWORD(v24) = v24[1];
            v28 = (v25 >> 2) & 1;
          }
          else
          {
            v26 = 0;
            v27 = 0;
            LOBYTE(v28) = 1;
          }
          v29 = *(unsigned __int8 *)(v20 + 16);
          v107 = (unint64_t *)(v22 + 90552);
          if (v29 == 1)
          {
            v30 = *(_QWORD *)(v20 + 40);
            if (v26)
            {
              v82 = *(_QWORD *)(v30 + 72);
              if (v82 && *(_DWORD *)(v82 + 4))
                goto LABEL_20;
            }
            else
            {
              v31 = *(_QWORD *)(v30 + 56);
              if (v31 && *(_DWORD *)(v31 + 4))
              {
LABEL_20:
                v112 = (JSC::JSGlobalObject **)var60;
                v113 = v22;
                v114 = v20;
                goto LABEL_21;
              }
            }
          }
          else if (v29 == 2 || !*(_BYTE *)(v20 + 16))
          {
            goto LABEL_107;
          }
          *(_QWORD *)&v109 = v27;
          DWORD2(v109) = (_DWORD)v24;
          BYTE12(v109) = v28;
          LOBYTE(v110) = 1;
          JSC::RegExp::compileMatchOnly(v20, v22, v26, &v109);
          v23 = (unint64_t *)(v22 + 90552);
          v29 = *(unsigned __int8 *)(v20 + 16);
LABEL_107:
          v112 = (JSC::JSGlobalObject **)var60;
          v113 = v22;
          v114 = v20;
          if (v29 != 1)
          {
            if (!v29)
              goto LABEL_146;
            goto LABEL_112;
          }
          v30 = *(_QWORD *)(v20 + 40);
LABEL_21:
          v32 = *(unsigned __int8 *)(v30 + 104);
          v110 = 0;
          v111 = 0;
          v33 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)&v109 = v22;
          *((_QWORD *)&v109 + 1) = v33;
          *v23 = v20;
          if (!v32)
            goto LABEL_22;
          v57 = (unsigned __int8 *)(v22 + 93049);
          if (__ldaxr((unsigned __int8 *)(v22 + 93049)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v57))
          {
LABEL_69:
            v59 = (void *)v23[313];
            if (!v59)
            {
              v84 = v23;
              v59 = (void *)WTF::fastMalloc((WTF *)0x2000);
              bzero(v59, 0x2000uLL);
              v92 = v84[313];
              v84[313] = (unint64_t)v59;
              if (v92)
              {
                WTF::fastFree(v92, v85, v86, v87, v88, v89, v90, v91);
                v59 = *(void **)(v22 + 93056);
              }
            }
            v110 = v59;
            LODWORD(v111) = 0x2000;
LABEL_22:
            v34 = *v16;
            if (*v16)
            {
              if ((v34[4] & 4) == 0)
              {
                v37 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, __int128 *))(*(_QWORD *)(v20 + 40)
                                                                                            + 64))(*((_QWORD *)v34 + 1), v18, v34[1], 0, &v109);
LABEL_26:
                v45 = v37;
                v46 = v38;
                if (!v110)
                  goto LABEL_27;
                v60 = (unsigned __int8 *)(v109 + 93049);
                v61 = __ldxr((unsigned __int8 *)(v109 + 93049));
                if (v61 == 1)
                {
                  if (!__stlxr(0, v60))
                  {
LABEL_27:
                    if (!HIDWORD(v111))
                      *(_QWORD *)(v109 + 90552) = 0;
                    if (v45 != -2)
                    {
                      if (!*(_DWORD *)(v22 + 80))
                        goto LABEL_178;
LABEL_30:
                      v66 = *(_DWORD *)(v22 + 80);
                      if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, v39, v40, v41, v42, v43, v44);
                      if (*(_QWORD *)(v22 + 16))
                      {
                        v46 = 0;
                        v45 = -1;
                      }
                      else
                      {
LABEL_178:
                        if (v45 != -1)
                        {
                          *(_QWORD *)(a1 + 2152) = v20;
                          *(_QWORD *)(a1 + 2144) = v10;
                          *(_QWORD *)(a1 + 2120) = v45;
                          *(_QWORD *)(a1 + 2128) = v46;
                          *(_BYTE *)(a1 + 2136) = 0;
                          if (*(_DWORD *)(v22 + 760) >= *(unsigned __int8 *)(a1 + 7))
                            JSC::Heap::writeBarrierSlowPath(v22 + 192, a1);
                        }
                      }
                      if (*(_DWORD *)(v14 + 80))
                      {
                        v67 = *(_DWORD *)(v14 + 80);
                        if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v39, v40, v41, v42, v43, v44);
                        if (*(_QWORD *)(v14 + 16))
                        {
                          v45 = -1;
                          return v45 != -1;
                        }
                      }
                      *(_QWORD *)&v109 = *(_QWORD *)(a1 + 56);
                      if ((*(_BYTE *)(a2 + 16) & 1) != 0)
                      {
                        JSC::throwTypeError(a1, (JSC::VM **)&v109, (uint64_t)"Attempted to assign to readonly property.", 42);
                        return v45 != -1;
                      }
                      if (HIDWORD(v46))
                      {
                        v68 = (double)v46;
                      }
                      else
                      {
                        if ((v46 & 0x80000000) == 0)
                        {
                          v47 = v46 | 0xFFFE000000000000;
LABEL_39:
                          *(_QWORD *)(a2 + 24) = v47;
                          return v45 != -1;
                        }
                        v68 = (double)v46;
                      }
                      v47 = *(_QWORD *)&v68 + 0x2000000000000;
                      goto LABEL_39;
                    }
                    JSC::RegExp::byteCodeCompileIfNecessary((JSC::RegExp *)v20, (JSC::VM *)v22);
                    if (!*(_BYTE *)(v20 + 16))
                    {
LABEL_146:
                      v45 = JSC::RegExp::matchInline<(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int)::{lambda(void)#1}::operator()(&v112);
                      v46 = v93;
                      goto LABEL_30;
                    }
LABEL_112:
                    *(_QWORD *)&v109 = &v110;
                    *((_QWORD *)&v109 + 1) = 32;
                    v69 = *(_DWORD **)(v20 + 48);
                    if (v69 && v69[5])
                      v70 = *v69 + 2 * *(_DWORD *)(v20 + 24);
                    else
                      v70 = 2 * *(_DWORD *)(v20 + 24);
                    v71 = v70 + 2;
                    v72 = &v110;
                    if ((v70 + 2) >= 0x21)
                    {
                      WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v109, v71);
                      v72 = (void **)v109;
                    }
                    HIDWORD(v109) = v71;
                    *v107 = v20;
                    v73 = *v16;
                    if (*v16)
                    {
                      v74 = *((_QWORD *)v73 + 1);
                      v75 = v73[1] | ((unint64_t)((v73[4] >> 2) & 1) << 32);
                    }
                    else
                    {
                      v74 = 0;
                      v75 = 0x100000000;
                    }
                    v76 = JSC::Yarr::interpret(*(_QWORD *)(v20 + 32), v74, v75, v18, (uint64_t)v72, a6, a7, a8);
                    *v107 = 0;
                    if ((v76 & 0x80000000) != 0)
                    {
                      v46 = 0;
                      v45 = -1;
                    }
                    else
                    {
                      v45 = v76;
                      v46 = *((unsigned int *)v72 + 1);
                    }
                    v78 = v109;
                    if (&v110 != (void **)v109 && (_QWORD)v109)
                    {
                      *(_QWORD *)&v109 = 0;
                      DWORD2(v109) = 0;
                      WTF::fastFree(v78, v77, v39, v40, v41, v42, v43, v44);
                    }
                    goto LABEL_30;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v60, 0, v39, v40, v41, v42, v43, v44);
                goto LABEL_27;
              }
              v35 = *((_QWORD *)v34 + 1);
              v36 = v34[1];
            }
            else
            {
              v35 = 0;
              v36 = 0;
            }
            v37 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, __int128 *))(*(_QWORD *)(v20 + 40) + 48))(v35, v18, v36, 0, &v109);
            goto LABEL_26;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v57);
          v23 = (unint64_t *)(v22 + 90552);
          goto LABEL_69;
        }
      }
    }
    else
    {
      v19 = *v16;
      if (*v16)
        LODWORD(v19) = v19[1];
      if (v19 >= v18)
        goto LABEL_11;
    }
    LODWORD(v18) = -1;
    goto LABEL_11;
  }
  return 0;
}

unsigned __int8 *operationRegExpTestGeneric(JSC::JSGlobalObject *a1, JSC::RegExpObject *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10)
{
  JSC::VM **v11;
  unsigned __int8 *result;
  unsigned __int8 *v14;
  JSC::VM *var28[6];

  v11 = (JSC::VM **)*((_QWORD *)a1 + 7);
  v11[5] = var28[5];
  v14 = a3;
  var28[0] = (JSC::VM *)v11;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0 || *((_BYTE *)a2 + 5) != 59)
  {
    JSC::throwTypeError(a1, var28);
    return 0;
  }
  else
  {
    if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && a3[5] == 2)
      return (unsigned __int8 *)(JSC::RegExpObject::match(a2, a1, (JSC::JSString *)a3, a4, a5, a6, a7, a8, a9, a10) != -1);
    result = JSC::JSValue::toStringSlowCase(&v14, (uint64_t)a1, 0, a4, a5, a6, a7, a8);
    a3 = result;
    if (result)
      return (unsigned __int8 *)(JSC::RegExpObject::match(a2, a1, (JSC::JSString *)a3, a4, a5, a6, a7, a8, a9, a10) != -1);
  }
  return result;
}

JSC::JSBigInt *operationSubHeapBigInt(JSC::JSBigInt *a1, uint64_t a2, uint64_t a3)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  return JSC::JSBigInt::subImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3);
}

JSC::JSBigInt *operationBitNotHeapBigInt(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  if (*(_BYTE *)(a2 + 16))
    return JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, a2, (JSC::VM *)*(unsigned int *)(a2 + 8), a4);
  else
    return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, a2, 0, a4);
}

JSC::JSBigInt *operationMulHeapBigInt(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::JSBigInt::multiplyImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::VM **)a1, a2, a3, a4);
}

JSC::JSBigInt *operationModHeapBigInt(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::JSBigInt::remainderImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::VM **)a1, a2, a3, a4, a5, a6, a7, a8);
}

JSC::JSBigInt *operationDivHeapBigInt(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::JSBigInt::divideImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, a4, a5, a6, a7, a8);
}

JSC::JSBigInt *operationPowHeapBigInt(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::JSBigInt::exponentiateImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, a4, a5, a6, a7, a8);
}

JSC::JSBigInt *operationBitAndHeapBigInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::JSBigInt::bitwiseAndImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, a4, a5, a6, a7, a8);
}

JSC::JSBigInt *operationBitLShiftHeapBigInt(JSC::JSBigInt *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  if (*(_DWORD *)(a2 + 8) && *(_DWORD *)(a3 + 8))
  {
    if (*(_BYTE *)(a3 + 16))
      return JSC::JSBigInt::rightShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, a4);
    else
      return JSC::JSBigInt::leftShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, a4);
  }
  return (JSC::JSBigInt *)a2;
}

JSC::JSBigInt *operationAddHeapBigInt(JSC::JSBigInt *a1, uint64_t a2, uint64_t a3)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  return JSC::JSBigInt::addImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3);
}

JSC::JSBigInt *operationBitRShiftHeapBigInt(JSC::JSBigInt *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  if (*(_DWORD *)(a2 + 8) && *(_DWORD *)(a3 + 8))
  {
    if (*(_BYTE *)(a3 + 16))
      return JSC::JSBigInt::leftShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, a4);
    else
      return JSC::JSBigInt::rightShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, a4);
  }
  return (JSC::JSBigInt *)a2;
}

JSC::JSBigInt *operationBitOrHeapBigInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::JSBigInt::bitwiseOrImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, a4, a5, a6, a7, a8);
}

JSC::JSBigInt *operationBitXorHeapBigInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::JSBigInt::bitwiseXorImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t operationCompareStrictEqCell(JSC::JSGlobalObject *a1, const WTF::StringImpl **this, const WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  uint64_t result;
  WTF *v12;
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  v9 = *((unsigned __int8 *)this + 5);
  if (v9 != 2)
  {
    if (v9 == 3 && *((_BYTE *)a3 + 5) == 3)
    {
      LODWORD(result) = JSC::JSBigInt::equals((JSC::JSBigInt *)this, (JSC::JSBigInt *)a3, (JSC::JSBigInt *)a3);
      return result;
    }
    goto LABEL_3;
  }
  if (*((_BYTE *)a3 + 5) != 2)
  {
LABEL_3:
    LODWORD(result) = this == a3;
    return result;
  }
  v12 = this[1];
  if ((v12 & 1) != 0 || (a3[1] & 1) != 0)
    LODWORD(result) = JSC::JSString::equalSlowCase((JSC::JSString *)this, a1, (JSC::JSString *)a3, a4, a5, a6, a7, a8, a9);
  else
    LODWORD(result) = WTF::equal(v12, a3[1], (const WTF::StringImpl *)a3);
  return result;
}

uint64_t operationSameValue(JSC::JSGlobalObject *a1, JSC::JSBigInt *this, const WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  BOOL v10;
  uint64_t result;
  WTF *v13;
  double v14;
  double v15;
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  if (this == (JSC::JSBigInt *)a3)
  {
    LODWORD(result) = 1;
    return result;
  }
  if ((unint64_t)this >> 49)
  {
    if ((unint64_t)a3 >> 49)
    {
      v14 = (double)(int)this;
      if ((unint64_t)this <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v14 = (char *)this - 0x2000000000000;
      v15 = (double)(int)a3;
      if ((unint64_t)a3 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v15 = a3 - 0x400000000000;
      v10 = *(_QWORD *)&v14 == *(_QWORD *)&v15;
      goto LABEL_7;
    }
LABEL_23:
    LODWORD(result) = 0;
    return result;
  }
  if ((((unint64_t)a3 | (unint64_t)this) & 0xFFFE000000000002) != 0)
    goto LABEL_23;
  v9 = *((unsigned __int8 *)this + 5);
  if (v9 != 2)
  {
    if (v9 == 3 && *((_BYTE *)a3 + 5) == 3)
    {
      LODWORD(result) = JSC::JSBigInt::equals(this, (JSC::JSBigInt *)a3, (JSC::JSBigInt *)a3);
      return result;
    }
    goto LABEL_6;
  }
  if (*((_BYTE *)a3 + 5) != 2)
  {
LABEL_6:
    v10 = this == (JSC::JSBigInt *)a3;
LABEL_7:
    LODWORD(result) = v10;
    return result;
  }
  v13 = (WTF *)*((_QWORD *)this + 1);
  if ((v13 & 1) != 0 || (a3[1] & 1) != 0)
    LODWORD(result) = JSC::JSString::equalSlowCase(this, a1, (JSC::JSString *)a3, a4, a5, a6, a7, a8, a9);
  else
    LODWORD(result) = WTF::equal(v13, a3[1], (const WTF::StringImpl *)a3);
  return result;
}

uint64_t operationToPrimitive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t vars0;

  v8 = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  if ((a2 & 0xFFFE000000000002) == 0)
    return JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, 0, a4, a5, a6, a7, a8);
  return v8;
}

unsigned __int8 *operationToPropertyKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  int v11;
  int v13;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *var28[6];

  v8 = a2;
  v10 = *(_QWORD *)(a1 + 56);
  *(unsigned __int8 **)(v10 + 40) = var28[5];
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v11 = *(unsigned __int8 *)(a2 + 5);
    if (v11 == 2 || v11 == 4)
      return (unsigned __int8 *)v8;
    v8 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  var28[0] = (unsigned __int8 *)v8;
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_11;
  v15 = *(_DWORD *)(v10 + 80);
  if ((v15 & 0x27) != 0 && (v15 & 0x20) == 0)
  {
    v16 = (unsigned __int8 *)v8;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v8 = (uint64_t)v16;
  }
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_11:
  if ((v8 & 0xFFFE000000000002) != 0)
    return JSC::JSValue::toStringSlowCase(var28, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 *)(v8 + 5);
  if (v13 != 2 && v13 != 4)
    return JSC::JSValue::toStringSlowCase(var28, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  return (unsigned __int8 *)v8;
}

unsigned __int8 *operationToPropertyKeyOrNumber(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  int v11;
  int v13;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *var28[6];

  v8 = a2;
  v9 = *(_QWORD *)(a1 + 56);
  *(unsigned __int8 **)(v9 + 40) = var28[5];
  if (a2 >> 49)
    return (unsigned __int8 *)v8;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v11 = *(unsigned __int8 *)(a2 + 5);
    if (v11 == 2 || v11 == 4)
      return (unsigned __int8 *)v8;
    v8 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  var28[0] = (unsigned __int8 *)v8;
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_11;
  v15 = *(_DWORD *)(v9 + 80);
  if ((v15 & 0x27) != 0 && (v15 & 0x20) == 0)
  {
    v16 = (unsigned __int8 *)v8;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v8 = (unint64_t)v16;
  }
  if (*(_QWORD *)(v9 + 16))
    return 0;
LABEL_11:
  if ((v8 & 0xFFFE000000000002) != 0)
    return JSC::JSValue::toStringSlowCase(var28, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v13 = *(unsigned __int8 *)(v8 + 5);
  if (v13 != 2 && v13 != 4)
    return JSC::JSValue::toStringSlowCase(var28, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  return (unsigned __int8 *)v8;
}

unint64_t operationToNumber(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  double v9;
  uint64_t v10;
  JSC::JSObject *var18[4];

  *(JSC::JSObject **)(*((_QWORD *)a1 + 7) + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v9 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v9 = (char *)a2 - 0x2000000000000;
  }
  if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v10 = (int)v9, v9 == (double)(int)v10)
    && ((_DWORD)v10 || (*(_QWORD *)&v9 & 0x8000000000000000) == 0))
  {
    return v10 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v9 + 0x2000000000000;
  }
}

unint64_t operationToNumberString(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  int **v10;
  int *v11;
  unint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  int v22;
  double v23;
  int v24;
  int v25;
  int v26;
  BOOL v28;
  int v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unint64_t var38[8];

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = var38[7];
  v10 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v10 = JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
    v26 = *(_DWORD *)(v9 + 80);
    if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v11 = *v10;
  if (!*v10)
  {
LABEL_62:
    v23 = 0.0;
    goto LABEL_63;
  }
  v12 = v11[1];
  if ((_DWORD)v12 == 1)
  {
    v16 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    if ((v11[4] & 4) != 0)
      v17 = *v16;
    else
      v17 = *(unsigned __int16 *)v16;
    v18 = v17 - 48;
    if (v18 <= 9)
      return v18 | 0xFFFE000000000000;
    if (v17 <= 0xFF)
    {
      if (v17 > 0x20u || ((1 << v17) & 0x100001A00) == 0)
      {
        v28 = v17 == 160 || v17 == 13;
        if (!v28 && v17 != 10)
          return 0x7FFA000000000000;
      }
    }
    else if (u_charType(v17) != 12 && v17 - 8232 >= 2 && v17 != 65279)
    {
      return 0x7FFA000000000000;
    }
    return 0xFFFE000000000000;
  }
  if ((_DWORD)v12 != 2)
  {
    v13 = v11[4];
    v14 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    goto LABEL_8;
  }
  v13 = v11[4];
  v14 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((v13 & 4) != 0)
    v24 = *v14;
  else
    v24 = *(unsigned __int16 *)v14;
  if (v24 == 45)
  {
    v25 = WTF::StringImpl::at((WTF::StringImpl *)v11, 1u);
    if (v25 == 48)
      return 0x8002000000000000;
    if ((v25 - 48) <= 9)
    {
      v18 = (48 - v25);
      return v18 | 0xFFFE000000000000;
    }
    return 0x7FFA000000000000;
  }
LABEL_8:
  if ((v13 & 4) != 0)
  {
    if ((_DWORD)v12 != 2)
    {
      if ((_DWORD)v12)
      {
LABEL_11:
        v15 = 0;
        while (1)
        {
          v30 = v14[v15];
          if ((v30 - 9) >= 5 && v30 != 32 && v30 != 160)
            break;
          if (v12 == ++v15)
            goto LABEL_62;
        }
        v31 = v12 - v15;
        v41 = &v14[v15];
        v42 = v12 - v15;
        if (v12 - v15 >= 3 && v30 == 48)
        {
          v33 = (unint64_t)&v14[v15];
          v39 = v14[v15 + 1] & 0xDF;
          if (v39 != 66)
          {
            if (v39 == 88)
            {
              v40 = v14[v15 + 2];
              if ((v40 - 48) < 0xA || (v40 | 0x20u) - 97 <= 5)
              {
                JSC::jsHexIntegerLiteral<unsigned char>((unint64_t *)&v41);
                goto LABEL_122;
              }
            }
            else if (v39 == 79 && (v14[v15 + 2] & 0xF8) == 0x30)
            {
              JSC::jsOctalIntegerLiteral<unsigned char>((unint64_t *)&v41);
              goto LABEL_122;
            }
LABEL_126:
            JSC::jsStrDecimalLiteral<unsigned char>(&v41);
            goto LABEL_122;
          }
LABEL_128:
          if ((*(_BYTE *)(v33 + 2) & 0xFE) == 0x30)
          {
            JSC::jsBinaryIntegerLiteral<unsigned char>((unint64_t *)&v41);
            goto LABEL_122;
          }
          goto LABEL_126;
        }
        var38[0] = 0;
        v32 = fast_float::from_chars_advanced<double,char>(&v14[v15], &v14[v12], var38, 0x2E00000005);
        v33 = v32 - v14 - v15;
        if (v32 - v14 != v15)
        {
          v34 = v31 - v33;
          if (v31 >= v33)
          {
            v23 = *(double *)var38;
LABEL_79:
            v41 = &v14[v15 + v33];
            v42 = v34;
LABEL_80:
            if (!v34)
              goto LABEL_63;
            v35 = v41;
            while (1)
            {
              v36 = *v35;
              if ((v36 - 9) >= 5 && v36 != 32 && v36 != 160)
                goto LABEL_69;
              ++v35;
              if (!--v34)
                goto LABEL_63;
            }
          }
          __break(1u);
          goto LABEL_128;
        }
        v37 = v14[v15];
        if (v37 == 43)
        {
          v34 = v31 - 9;
          if (v31 - 9 <= 0xFFFFFFFFFFFFFFF7
            && v14[v15 + 1] == 73
            && v14[v15 + 2] == 110
            && v14[v15 + 3] == 102
            && v14[v15 + 4] == 105
            && v14[v15 + 5] == 110
            && v14[v15 + 6] == 105
            && v14[v15 + 7] == 116
            && v14[v15 + 8] == 121)
          {
            v38 = 0x7FF0000000000000;
LABEL_120:
            v23 = *(double *)&v38;
            v33 = 9;
            goto LABEL_79;
          }
        }
        else
        {
          if (v37 != 45)
          {
            if (v37 == 73)
            {
              v34 = v31 - 8;
              if (v31 >= 8
                && v14[v15 + 1] == 110
                && v14[v15 + 2] == 102
                && v14[v15 + 3] == 105
                && v14[v15 + 4] == 110
                && v14[v15 + 5] == 105
                && v14[v15 + 6] == 116
                && v14[v15 + 7] == 121)
              {
                v23 = INFINITY;
                v33 = 8;
                goto LABEL_79;
              }
            }
            goto LABEL_121;
          }
          v34 = v31 - 9;
          if (v31 - 9 <= 0xFFFFFFFFFFFFFFF7
            && v14[v15 + 1] == 73
            && v14[v15 + 2] == 110
            && v14[v15 + 3] == 102
            && v14[v15 + 4] == 105
            && v14[v15 + 5] == 110
            && v14[v15 + 6] == 105
            && v14[v15 + 7] == 116
            && v14[v15 + 8] == 121)
          {
            v38 = 0xFFF0000000000000;
            goto LABEL_120;
          }
        }
LABEL_121:
        v23 = NAN;
LABEL_122:
        v34 = v42;
        goto LABEL_80;
      }
      goto LABEL_62;
    }
    if (*v14 != 45)
      goto LABEL_11;
    v22 = v14[1];
  }
  else
  {
    if ((_DWORD)v12 != 2 || *(_WORD *)v14 != 45)
    {
      v23 = JSC::toDouble<char16_t>((uint64_t)v14, v12);
      goto LABEL_63;
    }
    v22 = *((unsigned __int16 *)v14 + 1);
  }
  if (v22 == 48)
  {
    v23 = -0.0;
  }
  else
  {
    if ((v22 - 48) > 9)
    {
LABEL_69:
      v23 = NAN;
      goto LABEL_63;
    }
    v23 = (double)(48 - v22);
  }
LABEL_63:
  if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v18 = (int)v23;
    if (v23 == (double)(int)v18 && ((_DWORD)v18 || (*(_QWORD *)&v23 & 0x8000000000000000) == 0))
      return v18 | 0xFFFE000000000000;
  }
  return *(_QWORD *)&v23 + 0x2000000000000;
}

unint64_t operationToNumeric(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  JSC::JSGlobalObject *v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v17;
  double v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  JSC::JSGlobalObject *v23;
  double v24;
  uint64_t v25;
  JSC::JSObject *var18[4];

  v9 = a2;
  v10 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v10 + 40) = var18[3];
  if (a2 >> 49)
    return v9;
  v12 = a1;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v13 = *(unsigned __int8 *)(a2 + 5);
    if (v13 == 3)
      return v9;
    v25 = v10;
    if (v13 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
      if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v15 = (int)v14, v14 == (double)(int)v15)
        && ((_DWORD)v15 || (*(_QWORD *)&v14 & 0x8000000000000000) == 0))
      {
        return v15 | 0xFFFE000000000000;
      }
      else
      {
        return *(_QWORD *)&v14 + 0x2000000000000;
      }
    }
    v17 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    v12 = a1;
    v9 = v17;
    v10 = v25;
  }
  var18[0] = (JSC::JSObject *)v9;
  if (*(_DWORD *)(v10 + 80))
  {
    v22 = v9;
    v23 = v12;
    v20 = *(_DWORD *)(v10 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v12 = v23;
    v9 = v22;
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (v9 - 0x2000000000000 < 0xFFFC000000000000)
    return v9;
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      return v9;
    goto LABEL_19;
  }
  if (v9 < 0xFFFE000000000000)
  {
LABEL_19:
    JSC::JSValue::toNumberSlowCase(var18, v12, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_20;
  }
  v18 = (double)(int)v9;
LABEL_20:
  if (*(_DWORD *)(v10 + 80))
  {
    v24 = v18;
    v21 = *(_DWORD *)(v10 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v18 = v24;
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v19 = (int)v18, v18 == (double)(int)v19)
    && ((_DWORD)v19 || (*(_QWORD *)&v18 & 0x8000000000000000) == 0))
  {
    return v19 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v18 + 0x2000000000000;
  }
}

unint64_t operationCallNumberConstructor(JSC::JSGlobalObject *a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  JSC::JSGlobalObject *v12;
  int v13;
  double v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  double v19;
  uint64_t v20;
  int v21;
  int v22;
  JSC::JSGlobalObject *v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  JSC::JSObject *var18[4];

  v9 = this;
  v10 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v10 + 40) = var18[3];
  if ((unint64_t)this >> 49)
    goto LABEL_2;
  v12 = a1;
  if ((this & 0xFFFE000000000002) == 0)
  {
    v13 = *(unsigned __int8 *)(this + 5);
    if (v13 == 3)
      goto LABEL_2;
    v27 = v10;
    if (v13 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)this, a1, a3, a4, a5, a6, a7, a8, a9);
      if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v15 = (int)v14, v14 == (double)(int)v15)
        && ((_DWORD)v15 || (*(_QWORD *)&v14 & 0x8000000000000000) == 0))
      {
        v9 = v15 | 0xFFFE000000000000;
      }
      else
      {
        v9 = *(_QWORD *)&v14 + 0x2000000000000;
      }
      goto LABEL_2;
    }
    v18 = JSC::JSCell::toPrimitive(this, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    v12 = a1;
    v9 = v18;
    v10 = v27;
  }
  var18[0] = (JSC::JSObject *)v9;
  if (*(_DWORD *)(v10 + 80))
  {
    v23 = v12;
    v25 = v9;
    v21 = *(_DWORD *)(v10 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v9 = v25;
    v12 = v23;
    if (*(_QWORD *)(v10 + 16))
    {
LABEL_40:
      v9 = 0;
      goto LABEL_2;
    }
  }
  if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      if (v9 >= 0xFFFE000000000000)
      {
        v19 = (double)(int)v9;
LABEL_28:
        if (!*(_DWORD *)(v10 + 80))
          goto LABEL_32;
        v26 = v19;
        v22 = *(_DWORD *)(v10 + 80);
        if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v19 = v26;
        if (!*(_QWORD *)(v10 + 16))
        {
LABEL_32:
          if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v20 = (int)v19, v19 == (double)(int)v20)
            && ((_DWORD)v20 || (*(_QWORD *)&v19 & 0x8000000000000000) == 0))
          {
            v9 = v20 | 0xFFFE000000000000;
          }
          else
          {
            v9 = *(_QWORD *)&v19 + 0x2000000000000;
          }
          goto LABEL_2;
        }
        goto LABEL_40;
      }
LABEL_27:
      JSC::JSValue::toNumberSlowCase(var18, v12, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_28;
    }
    if (*(_BYTE *)(v9 + 5) != 3)
      goto LABEL_27;
  }
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_48;
LABEL_2:
  v16 = *(_DWORD *)(v10 + 80);
  if ((v16 & 0x27) != 0 && (v16 & 0x20) == 0)
  {
    v24 = v9;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v9 = v24;
  }
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_48:
  if (!(v9 >> 49))
    return JSC::JSBigInt::toNumberHeap((JSC::JSBigInt *)v9, (JSC::JSBigInt *)this);
  return v9;
}

uint64_t operationPutByIdWithThisStrict(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  const char *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  int v60;
  char v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  JSC::VM *var38[8];

  v13 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v13 + 40) = var38[7];
  if ((a5 & 1) != 0)
    v14 = a5 & 0xFFFFFFFFFFFFFFFELL;
  else
    v14 = *(_QWORD *)(a5 + 8);
  v15 = *(_DWORD *)(v14 + 16);
  if ((v15 & 0x20) != 0)
  {
    v16 = *(_DWORD *)v14 + 2;
LABEL_8:
    *(_DWORD *)v14 = v16;
    goto LABEL_9;
  }
  if ((v15 & 0x10) != 0)
  {
    *(_DWORD *)v14 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v13 + 41912), v14, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, v59);
    v14 = v59[0];
  }
  v16 = *(_DWORD *)v14;
  *(_DWORD *)v14 += 2;
  if (v16)
    goto LABEL_8;
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
LABEL_9:
  v64 = 0;
  v65 = a2;
  v59[0] = 0;
  v59[1] = a3;
  v60 = -1;
  v61 = v61 & 0xF8 | 1;
  v62 = 0;
  v63 = 1;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    JSC::JSValue::putToPrimitive((JSC::JSValue *)&v65, a1, v14, (unint64_t)a4, (uint64_t)v59, a6, a7, a8);
    goto LABEL_66;
  }
  v17 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if ((*(_WORD *)(v17 + 0xC) & 0x400) != 0)
  {
    (*(void (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, const JSC::PropertyTable *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v14, a4, v59);
    goto LABEL_66;
  }
  v18 = *((_QWORD *)a1 + 7);
  v19 = *(_DWORD *)(v14 + 16);
  if ((v19 & 0x20) != 0)
    goto LABEL_15;
  v20 = *(_BYTE **)(v14 + 8);
  v21 = *(unsigned int *)(v14 + 4);
  if ((v19 & 4) != 0)
  {
    if (!(_DWORD)v21)
      goto LABEL_15;
    v22 = *v20 - 48;
    if (v22 > 9 || v21 >= 2 && *v20 == 48)
      goto LABEL_15;
    v46 = v20 + 1;
    v47 = v21 - 1;
    while (v47)
    {
      if (v22 <= 0x19999999)
      {
        v48 = *v46 - 48;
        if (v48 <= 9)
        {
          v36 = __CFADD__(v48, 10 * v22);
          v22 = v48 + 10 * v22;
          ++v46;
          --v47;
          if (!v36)
            continue;
        }
      }
      goto LABEL_15;
    }
  }
  else
  {
    if (!(_DWORD)v21)
      goto LABEL_15;
    v22 = *(unsigned __int16 *)v20 - 48;
    if (v22 > 9 || *(_WORD *)v20 == 48 && v21 > 1)
      goto LABEL_15;
    v33 = (unsigned __int16 *)(v20 + 2);
    v34 = v21 - 1;
    while (v34)
    {
      if (v22 <= 0x19999999)
      {
        v35 = *v33 - 48;
        if (v35 <= 9)
        {
          v36 = __CFADD__(v35, 10 * v22);
          v22 = v35 + 10 * v22;
          ++v33;
          --v34;
          if (!v36)
            continue;
        }
      }
      goto LABEL_15;
    }
  }
  if (v22 != -1)
  {
    if (a2 == a3 || (a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 32 && *(_QWORD *)(a3 + 16) == a2)
      (*(void (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0x50))(a2, a1);
    else
      JSC::ordinarySetSlow((unint64_t)a1, a2, (WTF::StringImpl *)v14, (uint64_t)a4, a3, 1, a7, a8);
    goto LABEL_66;
  }
LABEL_15:
  if (*(_QWORD *)(*(_QWORD *)(v18 + 41952) + 16) != v14)
  {
    v23 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
    if ((v23 & 0x10) == 0)
    {
      v24 = (_DWORD *)a2;
      while ((*(_WORD *)(v17 + 12) & 0x800) == 0 && (v24 == (_DWORD *)a2 || (*(_WORD *)(v17 + 12) & 0x400) == 0))
      {
        v25 = *(_DWORD **)(v17 + 48);
        if (!v25)
          v25 = (_DWORD *)*((_QWORD *)v24 + 2);
        if (v25 == (_DWORD *)2)
        {
          if (a3 == a2 || (a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 32 && *(_QWORD *)(a3 + 16) == a2)
          {
            if ((*(_BYTE *)(a2 + 6) & 0x20) == 0 || (v23 & 0x400000) != 0)
            {
              var38[0] = *((JSC::VM **)a1 + 7);
              v37 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a2, v18, v14, (uint64_t)a4, 0, (uint64_t)v59, a7, a8, a9);
              if (v26 && (v61 & 1) != 0)
                JSC::throwTypeError((unint64_t)a1, var38, (uint64_t)v37, (uint64_t)v26);
            }
            else
            {
              JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)a2, (unint64_t)a1, v14, (uint64_t)a4, (uint64_t)v59, a9, a6, a7, a8);
            }
          }
          else
          {
            JSC::JSObject::definePropertyOnReceiver((unint64_t)a1, v14, (uint64_t)a4, (uint64_t)v59, a5, a6, a7, a8, a9);
          }
          goto LABEL_66;
        }
        v17 = 16 * (*v25 & 0xFFFFFFFE);
        v24 = v25;
        if ((*(_BYTE *)(v17 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow((unsigned __int8 *)a2, (unint64_t)a1, v14, a4, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v59, a6, a7, a8, a9);
LABEL_66:
  v49 = *(_QWORD *)(v13 + 16);
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v26, v27, v28, v29, v30, v31, v32);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v14 -= 2;
  }
  return v49;
}

uint64_t operationPutByIdWithThis(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  const char *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  int v60;
  char v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  JSC::VM *var38[8];

  v13 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v13 + 40) = var38[7];
  if ((a5 & 1) != 0)
    v14 = a5 & 0xFFFFFFFFFFFFFFFELL;
  else
    v14 = *(_QWORD *)(a5 + 8);
  v15 = *(_DWORD *)(v14 + 16);
  if ((v15 & 0x20) != 0)
  {
    v16 = *(_DWORD *)v14 + 2;
LABEL_8:
    *(_DWORD *)v14 = v16;
    goto LABEL_9;
  }
  if ((v15 & 0x10) != 0)
  {
    *(_DWORD *)v14 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v13 + 41912), v14, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, v59);
    v14 = v59[0];
  }
  v16 = *(_DWORD *)v14;
  *(_DWORD *)v14 += 2;
  if (v16)
    goto LABEL_8;
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
LABEL_9:
  v64 = 0;
  v65 = a2;
  v59[0] = 0;
  v59[1] = a3;
  v60 = -1;
  v61 &= 0xF8u;
  v62 = 0;
  v63 = 1;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    JSC::JSValue::putToPrimitive((JSC::JSValue *)&v65, a1, v14, (unint64_t)a4, (uint64_t)v59, a6, a7, a8);
    goto LABEL_66;
  }
  v17 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if ((*(_WORD *)(v17 + 0xC) & 0x400) != 0)
  {
    (*(void (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, const JSC::PropertyTable *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v14, a4, v59);
    goto LABEL_66;
  }
  v18 = *((_QWORD *)a1 + 7);
  v19 = *(_DWORD *)(v14 + 16);
  if ((v19 & 0x20) != 0)
    goto LABEL_15;
  v20 = *(_BYTE **)(v14 + 8);
  v21 = *(unsigned int *)(v14 + 4);
  if ((v19 & 4) != 0)
  {
    if (!(_DWORD)v21)
      goto LABEL_15;
    v22 = *v20 - 48;
    if (v22 > 9 || v21 >= 2 && *v20 == 48)
      goto LABEL_15;
    v46 = v20 + 1;
    v47 = v21 - 1;
    while (v47)
    {
      if (v22 <= 0x19999999)
      {
        v48 = *v46 - 48;
        if (v48 <= 9)
        {
          v36 = __CFADD__(v48, 10 * v22);
          v22 = v48 + 10 * v22;
          ++v46;
          --v47;
          if (!v36)
            continue;
        }
      }
      goto LABEL_15;
    }
  }
  else
  {
    if (!(_DWORD)v21)
      goto LABEL_15;
    v22 = *(unsigned __int16 *)v20 - 48;
    if (v22 > 9 || *(_WORD *)v20 == 48 && v21 > 1)
      goto LABEL_15;
    v33 = (unsigned __int16 *)(v20 + 2);
    v34 = v21 - 1;
    while (v34)
    {
      if (v22 <= 0x19999999)
      {
        v35 = *v33 - 48;
        if (v35 <= 9)
        {
          v36 = __CFADD__(v35, 10 * v22);
          v22 = v35 + 10 * v22;
          ++v33;
          --v34;
          if (!v36)
            continue;
        }
      }
      goto LABEL_15;
    }
  }
  if (v22 != -1)
  {
    if (a2 == a3 || (a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 32 && *(_QWORD *)(a3 + 16) == a2)
      (*(void (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0x50))(a2, a1);
    else
      JSC::ordinarySetSlow((unint64_t)a1, a2, (WTF::StringImpl *)v14, (uint64_t)a4, a3, 0, a7, a8);
    goto LABEL_66;
  }
LABEL_15:
  if (*(_QWORD *)(*(_QWORD *)(v18 + 41952) + 16) != v14)
  {
    v23 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
    if ((v23 & 0x10) == 0)
    {
      v24 = (_DWORD *)a2;
      while ((*(_WORD *)(v17 + 12) & 0x800) == 0 && (v24 == (_DWORD *)a2 || (*(_WORD *)(v17 + 12) & 0x400) == 0))
      {
        v25 = *(_DWORD **)(v17 + 48);
        if (!v25)
          v25 = (_DWORD *)*((_QWORD *)v24 + 2);
        if (v25 == (_DWORD *)2)
        {
          if (a3 == a2 || (a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 32 && *(_QWORD *)(a3 + 16) == a2)
          {
            if ((*(_BYTE *)(a2 + 6) & 0x20) == 0 || (v23 & 0x400000) != 0)
            {
              var38[0] = *((JSC::VM **)a1 + 7);
              v37 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a2, v18, v14, (uint64_t)a4, 0, (uint64_t)v59, a7, a8, a9);
              if (v26 && (v61 & 1) != 0)
                JSC::throwTypeError((unint64_t)a1, var38, (uint64_t)v37, (uint64_t)v26);
            }
            else
            {
              JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)a2, (unint64_t)a1, v14, (uint64_t)a4, (uint64_t)v59, a9, a6, a7, a8);
            }
          }
          else
          {
            JSC::JSObject::definePropertyOnReceiver((unint64_t)a1, v14, (uint64_t)a4, (uint64_t)v59, a5, a6, a7, a8, a9);
          }
          goto LABEL_66;
        }
        v17 = 16 * (*v25 & 0xFFFFFFFE);
        v24 = v25;
        if ((*(_BYTE *)(v17 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow((unsigned __int8 *)a2, (unint64_t)a1, v14, a4, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v59, a6, a7, a8, a9);
LABEL_66:
  v49 = *(_QWORD *)(v13 + 16);
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v26, v27, v28, v29, v30, v31, v32);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v14 -= 2;
  }
  return v49;
}

uint64_t operationPutByValWithThisStrict(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  const char *v30;
  int v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int8 *v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  _DWORD *v97;
  WTF::StringImpl *v98;
  _QWORD *v99;
  uint64_t v100;
  WTF::StringImpl **v101;
  WTF::StringImpl **v102;
  WTF::StringImpl *v103;
  int v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131[2];
  int v132;
  char v133;
  __int16 v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *var58[12];

  v10 = a4;
  v14 = *(_QWORD *)(a1 + 56);
  *(unsigned __int8 **)(v14 + 40) = var58[11];
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_112;
  if (*(_BYTE *)(a4 + 5) != 2)
  {
    v10 = JSC::JSCell::toPrimitive(a4, (JSC::VM **)a1, (JSC::Structure *)2, a4, (uint64_t)a5, a6, a7, a8);
LABEL_112:
    var58[0] = (unsigned __int8 *)v10;
    if (*(_DWORD *)(v14 + 80))
    {
      v113 = *(_DWORD *)(v14 + 80);
      if ((v113 & 0x27) != 0 && (v113 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(v14 + 16))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 8);
        if (!v15)
          goto LABEL_7;
        goto LABEL_5;
      }
    }
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      v83 = *(unsigned __int8 *)(v10 + 5);
      if (v83 == 2)
      {
LABEL_120:
        if (*(_DWORD *)(v14 + 80))
        {
          v114 = *(_DWORD *)(v14 + 80);
          if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
          if (*(_QWORD *)(v14 + 16))
            goto LABEL_147;
        }
        v15 = *(_QWORD *)(v10 + 8);
        v93 = *(_QWORD *)(a1 + 56);
        if ((v15 & 1) == 0)
        {
          if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
          {
            v94 = *(WTF::StringImpl **)(v93 + 64768);
            if (v94 != (WTF::StringImpl *)v15)
            {
              *(_DWORD *)v15 += 2;
              *(_QWORD *)(v93 + 64768) = v15;
              if (v94)
              {
                if (*(_DWORD *)v94 == 2)
                {
                  WTF::StringImpl::~StringImpl(v94, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
                }
                else
                {
                  *(_DWORD *)v94 -= 2;
                }
              }
              v95 = *(WTF::StringImpl **)(v10 + 8);
              if (v95)
              {
                if ((*((_BYTE *)v95 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v95 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v95, (const WTF::StringImpl *)a3, a4, (uint64_t)a5, a6, a7, a8, (WTF *)v131);
                  v95 = v131[0];
                }
              }
              v96 = *(WTF::StringImpl **)(v93 + 64776);
              *(_QWORD *)(v93 + 64776) = v95;
              if (v96)
              {
                if (*(_DWORD *)v96 == 2)
                {
                  WTF::StringImpl::~StringImpl(v96, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
                }
                else
                {
                  *(_DWORD *)v96 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
            {
              v97 = *(_DWORD **)(v93 + 64776);
              *v97 += 2;
              __dmb(0xAu);
              v98 = *(WTF::StringImpl **)(v10 + 8);
              *(_QWORD *)(v10 + 8) = v97;
              v131[0] = v98;
              v99 = (_QWORD *)(v93 + 808);
              v100 = *(unsigned int *)(v93 + 820);
              if ((_DWORD)v100 == *(_DWORD *)(v93 + 816))
              {
                v102 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, v100 + 1, (unint64_t)v131);
                v100 = *(unsigned int *)(v93 + 820);
                v101 = (WTF::StringImpl **)(*(_QWORD *)(v93 + 808) + 8 * v100);
                v98 = *v102;
              }
              else
              {
                v101 = (WTF::StringImpl **)(*v99 + 8 * v100);
                v102 = v131;
              }
              *v102 = 0;
              *v101 = v98;
              *(_DWORD *)(v93 + 820) = v100 + 1;
              v103 = v131[0];
              v131[0] = 0;
              if (v103)
              {
                if (*(_DWORD *)v103 == 2)
                {
                  WTF::StringImpl::~StringImpl(v103, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
                }
                else
                {
                  *(_DWORD *)v103 -= 2;
                }
              }
            }
            v15 = *(_QWORD *)(v93 + 64776);
          }
          goto LABEL_5;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, (JSC::JSGlobalObject *)a1);
        if (*(_DWORD *)(v93 + 80))
        {
          v104 = *(_DWORD *)(v93 + 80);
          if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v93 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
          if (*(_QWORD *)(v93 + 16))
          {
LABEL_81:
            v32 = v131[0];
            if (v131[0])
            {
              v15 = 0;
              v31 = *(_DWORD *)v131[0];
LABEL_42:
              v33 = v31 - 2;
              if (v33)
              {
                *(_DWORD *)v32 = v33;
                goto LABEL_7;
              }
              goto LABEL_118;
            }
LABEL_147:
            v15 = 0;
            goto LABEL_7;
          }
        }
LABEL_40:
        v15 = (unint64_t)v131[0];
        if (!v131[0])
          goto LABEL_7;
        v31 = *(_DWORD *)v131[0] + 2;
        *(_DWORD *)v131[0] = v31;
        v32 = (WTF::StringImpl *)v15;
        goto LABEL_42;
      }
      if (v83 == 4)
      {
        v15 = *(_QWORD *)(v10 + 8);
        v84 = *(_DWORD *)v15;
        *(_DWORD *)v15 += 4;
        v16 = v84 + 2;
        if (v16)
          goto LABEL_6;
        v32 = (WTF::StringImpl *)v15;
LABEL_118:
        WTF::StringImpl::~StringImpl(v32, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        goto LABEL_7;
      }
    }
    v10 = (uint64_t)JSC::JSValue::toStringSlowCase(var58, a1, (JSC::Structure *)1, a4, (uint64_t)a5, a6, a7, a8);
    goto LABEL_120;
  }
  v15 = *(_QWORD *)(a4 + 8);
  if ((v15 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a4, (JSC::JSGlobalObject *)a1);
    if (*(_DWORD *)(v14 + 80))
    {
      v70 = *(_DWORD *)(v14 + 80);
      if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(v14 + 16))
        goto LABEL_81;
    }
    goto LABEL_40;
  }
  if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
  {
    v34 = *(WTF::StringImpl **)(v14 + 64768);
    if (v34 != (WTF::StringImpl *)v15)
    {
      *(_DWORD *)v15 += 2;
      *(_QWORD *)(v14 + 64768) = v15;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
      v35 = *(WTF::StringImpl **)(v10 + 8);
      if (v35)
      {
        if ((*((_BYTE *)v35 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v35 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v35, (const WTF::StringImpl *)a3, a4, (uint64_t)a5, a6, a7, a8, (WTF *)v131);
          v35 = v131[0];
        }
      }
      v36 = *(WTF::StringImpl **)(v14 + 64776);
      *(_QWORD *)(v14 + 64776) = v35;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::~StringImpl(v36, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        }
        else
        {
          *(_DWORD *)v36 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
    {
      v37 = *(_DWORD **)(v14 + 64776);
      *v37 += 2;
      __dmb(0xAu);
      v38 = *(WTF::StringImpl **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v37;
      v131[0] = v38;
      v39 = (_QWORD *)(v14 + 808);
      v40 = *(unsigned int *)(v14 + 820);
      if ((_DWORD)v40 == *(_DWORD *)(v14 + 816))
      {
        v42 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)v131);
        v40 = *(unsigned int *)(v14 + 820);
        v41 = (WTF::StringImpl **)(*(_QWORD *)(v14 + 808) + 8 * v40);
        v38 = *v42;
      }
      else
      {
        v41 = (WTF::StringImpl **)(*v39 + 8 * v40);
        v42 = v131;
      }
      *v42 = 0;
      *v41 = v38;
      *(_DWORD *)(v14 + 820) = v40 + 1;
      v43 = v131[0];
      v131[0] = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::~StringImpl(v43, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
        }
        else
        {
          *(_DWORD *)v43 -= 2;
        }
      }
    }
    v15 = *(_QWORD *)(v14 + 64776);
  }
LABEL_5:
  v16 = *(_DWORD *)v15 + 2;
LABEL_6:
  *(_DWORD *)v15 = v16;
LABEL_7:
  if (!*(_DWORD *)(v14 + 80))
    goto LABEL_8;
  v52 = *(_DWORD *)(v14 + 80);
  if ((v52 & 0x27) != 0 && (v52 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
  v53 = *(_QWORD *)(v14 + 16);
  if (!v53)
  {
LABEL_8:
    v136 = 0;
    v137 = a2;
    v131[0] = 0;
    v131[1] = (WTF::StringImpl *)a3;
    v132 = -1;
    v133 = v133 & 0xF8 | 1;
    v134 = 0;
    v135 = 1;
    if ((a2 & 0xFFFE000000000002) != 0)
    {
      JSC::JSValue::putToPrimitive((JSC::JSValue *)&v137, (JSC::JSGlobalObject *)a1, v15, (unint64_t)a5, (uint64_t)v131, a6, a7, a8);
    }
    else
    {
      v17 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
      if ((*(_WORD *)(v17 + 0xC) & 0x400) == 0)
      {
        v18 = *(_QWORD *)(a1 + 56);
        if (!v15)
          goto LABEL_15;
        v19 = *(_DWORD *)(v15 + 16);
        if ((v19 & 0x20) != 0)
          goto LABEL_15;
        v20 = *(_BYTE **)(v15 + 8);
        v21 = *(unsigned int *)(v15 + 4);
        if ((v19 & 4) != 0)
        {
          if (!(_DWORD)v21)
            goto LABEL_15;
          v22 = *v20 - 48;
          if (v22 > 9 || v21 >= 2 && *v20 == 48)
            goto LABEL_15;
          v71 = v20 + 1;
          v72 = v21 - 1;
          while (v72)
          {
            if (v22 <= 0x19999999)
            {
              v73 = *v71 - 48;
              if (v73 <= 9)
              {
                v29 = __CFADD__(v73, 10 * v22);
                v22 = v73 + 10 * v22;
                ++v71;
                --v72;
                if (!v29)
                  continue;
              }
            }
            goto LABEL_15;
          }
        }
        else
        {
          if (!(_DWORD)v21)
            goto LABEL_15;
          v22 = *(unsigned __int16 *)v20 - 48;
          if (v22 > 9 || *(_WORD *)v20 == 48 && v21 > 1)
            goto LABEL_15;
          v26 = (unsigned __int16 *)(v20 + 2);
          v27 = v21 - 1;
          while (v27)
          {
            if (v22 <= 0x19999999)
            {
              v28 = *v26 - 48;
              if (v28 <= 9)
              {
                v29 = __CFADD__(v28, 10 * v22);
                v22 = v28 + 10 * v22;
                ++v26;
                --v27;
                if (!v29)
                  continue;
              }
            }
            goto LABEL_15;
          }
        }
        if (v22 != -1)
        {
          if (a2 == a3 || (a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 32 && *(_QWORD *)(a3 + 16) == a2)
            (*(void (**)(uint64_t, unint64_t))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0x50))(a2, a1);
          else
            JSC::ordinarySetSlow(a1, a2, (WTF::StringImpl *)v15, (uint64_t)a5, a3, 1, a7, a8);
          goto LABEL_101;
        }
LABEL_15:
        if (*(_QWORD *)(*(_QWORD *)(v18 + 41952) + 16) != v15)
        {
          v23 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
          if ((v23 & 0x10) == 0)
          {
            v24 = (_DWORD *)a2;
            while ((*(_WORD *)(v17 + 12) & 0x800) == 0 && (v24 == (_DWORD *)a2 || (*(_WORD *)(v17 + 12) & 0x400) == 0))
            {
              v25 = *(_DWORD **)(v17 + 48);
              if (!v25)
                v25 = (_DWORD *)*((_QWORD *)v24 + 2);
              if (v25 == (_DWORD *)2)
              {
                if (a3 == a2
                  || (a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 32 && *(_QWORD *)(a3 + 16) == a2)
                {
                  if ((*(_BYTE *)(a2 + 6) & 0x20) == 0 || (v23 & 0x400000) != 0)
                  {
                    var58[0] = *(unsigned __int8 **)(a1 + 56);
                    v30 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a2, v18, v15, (uint64_t)a5, 0, (uint64_t)v131, a7, a8, a9);
                    if (a2 && (v133 & 1) != 0)
                      JSC::throwTypeError(a1, (JSC::VM **)var58, (uint64_t)v30, a2);
                  }
                  else
                  {
                    JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)a2, a1, v15, (uint64_t)a5, (uint64_t)v131, a9, a6, a7, a8);
                  }
                }
                else
                {
                  JSC::JSObject::definePropertyOnReceiver(a1, v15, (uint64_t)a5, (uint64_t)v131, (uint64_t)a5, a6, a7, a8, a9);
                }
                goto LABEL_101;
              }
              v17 = 16 * (*v25 & 0xFFFFFFFE);
              v24 = v25;
              if ((*(_BYTE *)(v17 + 0x10) & 0x10) != 0)
                break;
            }
          }
        }
        JSC::JSObject::putInlineSlow((unsigned __int8 *)a2, a1, v15, a5, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v131, a6, a7, a8, a9);
        goto LABEL_101;
      }
      (*(void (**)(uint64_t, unint64_t, unint64_t, const JSC::PropertyTable *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v15, a5, v131);
    }
LABEL_101:
    v53 = *(_QWORD *)(v14 + 16);
  }
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  return v53;
}

uint64_t operationPutByValWithThis(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  const char *v30;
  int v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int8 *v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  _DWORD *v97;
  WTF::StringImpl *v98;
  _QWORD *v99;
  uint64_t v100;
  WTF::StringImpl **v101;
  WTF::StringImpl **v102;
  WTF::StringImpl *v103;
  int v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131[2];
  int v132;
  char v133;
  __int16 v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *var58[12];

  v10 = a4;
  v14 = *(_QWORD *)(a1 + 56);
  *(unsigned __int8 **)(v14 + 40) = var58[11];
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_112;
  if (*(_BYTE *)(a4 + 5) != 2)
  {
    v10 = JSC::JSCell::toPrimitive(a4, (JSC::VM **)a1, (JSC::Structure *)2, a4, (uint64_t)a5, a6, a7, a8);
LABEL_112:
    var58[0] = (unsigned __int8 *)v10;
    if (*(_DWORD *)(v14 + 80))
    {
      v113 = *(_DWORD *)(v14 + 80);
      if ((v113 & 0x27) != 0 && (v113 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(v14 + 16))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 8);
        if (!v15)
          goto LABEL_7;
        goto LABEL_5;
      }
    }
    if ((v10 & 0xFFFE000000000002) == 0)
    {
      v83 = *(unsigned __int8 *)(v10 + 5);
      if (v83 == 2)
      {
LABEL_120:
        if (*(_DWORD *)(v14 + 80))
        {
          v114 = *(_DWORD *)(v14 + 80);
          if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
          if (*(_QWORD *)(v14 + 16))
            goto LABEL_147;
        }
        v15 = *(_QWORD *)(v10 + 8);
        v93 = *(_QWORD *)(a1 + 56);
        if ((v15 & 1) == 0)
        {
          if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
          {
            v94 = *(WTF::StringImpl **)(v93 + 64768);
            if (v94 != (WTF::StringImpl *)v15)
            {
              *(_DWORD *)v15 += 2;
              *(_QWORD *)(v93 + 64768) = v15;
              if (v94)
              {
                if (*(_DWORD *)v94 == 2)
                {
                  WTF::StringImpl::~StringImpl(v94, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
                }
                else
                {
                  *(_DWORD *)v94 -= 2;
                }
              }
              v95 = *(WTF::StringImpl **)(v10 + 8);
              if (v95)
              {
                if ((*((_BYTE *)v95 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v95 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v95, (const WTF::StringImpl *)a3, a4, (uint64_t)a5, a6, a7, a8, (WTF *)v131);
                  v95 = v131[0];
                }
              }
              v96 = *(WTF::StringImpl **)(v93 + 64776);
              *(_QWORD *)(v93 + 64776) = v95;
              if (v96)
              {
                if (*(_DWORD *)v96 == 2)
                {
                  WTF::StringImpl::~StringImpl(v96, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
                }
                else
                {
                  *(_DWORD *)v96 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
            {
              v97 = *(_DWORD **)(v93 + 64776);
              *v97 += 2;
              __dmb(0xAu);
              v98 = *(WTF::StringImpl **)(v10 + 8);
              *(_QWORD *)(v10 + 8) = v97;
              v131[0] = v98;
              v99 = (_QWORD *)(v93 + 808);
              v100 = *(unsigned int *)(v93 + 820);
              if ((_DWORD)v100 == *(_DWORD *)(v93 + 816))
              {
                v102 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, v100 + 1, (unint64_t)v131);
                v100 = *(unsigned int *)(v93 + 820);
                v101 = (WTF::StringImpl **)(*(_QWORD *)(v93 + 808) + 8 * v100);
                v98 = *v102;
              }
              else
              {
                v101 = (WTF::StringImpl **)(*v99 + 8 * v100);
                v102 = v131;
              }
              *v102 = 0;
              *v101 = v98;
              *(_DWORD *)(v93 + 820) = v100 + 1;
              v103 = v131[0];
              v131[0] = 0;
              if (v103)
              {
                if (*(_DWORD *)v103 == 2)
                {
                  WTF::StringImpl::~StringImpl(v103, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
                }
                else
                {
                  *(_DWORD *)v103 -= 2;
                }
              }
            }
            v15 = *(_QWORD *)(v93 + 64776);
          }
          goto LABEL_5;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, (JSC::JSGlobalObject *)a1);
        if (*(_DWORD *)(v93 + 80))
        {
          v104 = *(_DWORD *)(v93 + 80);
          if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v93 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
          if (*(_QWORD *)(v93 + 16))
          {
LABEL_81:
            v32 = v131[0];
            if (v131[0])
            {
              v15 = 0;
              v31 = *(_DWORD *)v131[0];
LABEL_42:
              v33 = v31 - 2;
              if (v33)
              {
                *(_DWORD *)v32 = v33;
                goto LABEL_7;
              }
              goto LABEL_118;
            }
LABEL_147:
            v15 = 0;
            goto LABEL_7;
          }
        }
LABEL_40:
        v15 = (unint64_t)v131[0];
        if (!v131[0])
          goto LABEL_7;
        v31 = *(_DWORD *)v131[0] + 2;
        *(_DWORD *)v131[0] = v31;
        v32 = (WTF::StringImpl *)v15;
        goto LABEL_42;
      }
      if (v83 == 4)
      {
        v15 = *(_QWORD *)(v10 + 8);
        v84 = *(_DWORD *)v15;
        *(_DWORD *)v15 += 4;
        v16 = v84 + 2;
        if (v16)
          goto LABEL_6;
        v32 = (WTF::StringImpl *)v15;
LABEL_118:
        WTF::StringImpl::~StringImpl(v32, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        goto LABEL_7;
      }
    }
    v10 = (uint64_t)JSC::JSValue::toStringSlowCase(var58, a1, (JSC::Structure *)1, a4, (uint64_t)a5, a6, a7, a8);
    goto LABEL_120;
  }
  v15 = *(_QWORD *)(a4 + 8);
  if ((v15 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a4, (JSC::JSGlobalObject *)a1);
    if (*(_DWORD *)(v14 + 80))
    {
      v70 = *(_DWORD *)(v14 + 80);
      if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(v14 + 16))
        goto LABEL_81;
    }
    goto LABEL_40;
  }
  if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
  {
    v34 = *(WTF::StringImpl **)(v14 + 64768);
    if (v34 != (WTF::StringImpl *)v15)
    {
      *(_DWORD *)v15 += 2;
      *(_QWORD *)(v14 + 64768) = v15;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
      v35 = *(WTF::StringImpl **)(v10 + 8);
      if (v35)
      {
        if ((*((_BYTE *)v35 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v35 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v35, (const WTF::StringImpl *)a3, a4, (uint64_t)a5, a6, a7, a8, (WTF *)v131);
          v35 = v131[0];
        }
      }
      v36 = *(WTF::StringImpl **)(v14 + 64776);
      *(_QWORD *)(v14 + 64776) = v35;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::~StringImpl(v36, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        }
        else
        {
          *(_DWORD *)v36 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
    {
      v37 = *(_DWORD **)(v14 + 64776);
      *v37 += 2;
      __dmb(0xAu);
      v38 = *(WTF::StringImpl **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v37;
      v131[0] = v38;
      v39 = (_QWORD *)(v14 + 808);
      v40 = *(unsigned int *)(v14 + 820);
      if ((_DWORD)v40 == *(_DWORD *)(v14 + 816))
      {
        v42 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)v131);
        v40 = *(unsigned int *)(v14 + 820);
        v41 = (WTF::StringImpl **)(*(_QWORD *)(v14 + 808) + 8 * v40);
        v38 = *v42;
      }
      else
      {
        v41 = (WTF::StringImpl **)(*v39 + 8 * v40);
        v42 = v131;
      }
      *v42 = 0;
      *v41 = v38;
      *(_DWORD *)(v14 + 820) = v40 + 1;
      v43 = v131[0];
      v131[0] = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::~StringImpl(v43, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
        }
        else
        {
          *(_DWORD *)v43 -= 2;
        }
      }
    }
    v15 = *(_QWORD *)(v14 + 64776);
  }
LABEL_5:
  v16 = *(_DWORD *)v15 + 2;
LABEL_6:
  *(_DWORD *)v15 = v16;
LABEL_7:
  if (!*(_DWORD *)(v14 + 80))
    goto LABEL_8;
  v52 = *(_DWORD *)(v14 + 80);
  if ((v52 & 0x27) != 0 && (v52 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
  v53 = *(_QWORD *)(v14 + 16);
  if (!v53)
  {
LABEL_8:
    v136 = 0;
    v137 = a2;
    v131[0] = 0;
    v131[1] = (WTF::StringImpl *)a3;
    v132 = -1;
    v133 &= 0xF8u;
    v134 = 0;
    v135 = 1;
    if ((a2 & 0xFFFE000000000002) != 0)
    {
      JSC::JSValue::putToPrimitive((JSC::JSValue *)&v137, (JSC::JSGlobalObject *)a1, v15, (unint64_t)a5, (uint64_t)v131, a6, a7, a8);
    }
    else
    {
      v17 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
      if ((*(_WORD *)(v17 + 0xC) & 0x400) == 0)
      {
        v18 = *(_QWORD *)(a1 + 56);
        if (!v15)
          goto LABEL_15;
        v19 = *(_DWORD *)(v15 + 16);
        if ((v19 & 0x20) != 0)
          goto LABEL_15;
        v20 = *(_BYTE **)(v15 + 8);
        v21 = *(unsigned int *)(v15 + 4);
        if ((v19 & 4) != 0)
        {
          if (!(_DWORD)v21)
            goto LABEL_15;
          v22 = *v20 - 48;
          if (v22 > 9 || v21 >= 2 && *v20 == 48)
            goto LABEL_15;
          v71 = v20 + 1;
          v72 = v21 - 1;
          while (v72)
          {
            if (v22 <= 0x19999999)
            {
              v73 = *v71 - 48;
              if (v73 <= 9)
              {
                v29 = __CFADD__(v73, 10 * v22);
                v22 = v73 + 10 * v22;
                ++v71;
                --v72;
                if (!v29)
                  continue;
              }
            }
            goto LABEL_15;
          }
        }
        else
        {
          if (!(_DWORD)v21)
            goto LABEL_15;
          v22 = *(unsigned __int16 *)v20 - 48;
          if (v22 > 9 || *(_WORD *)v20 == 48 && v21 > 1)
            goto LABEL_15;
          v26 = (unsigned __int16 *)(v20 + 2);
          v27 = v21 - 1;
          while (v27)
          {
            if (v22 <= 0x19999999)
            {
              v28 = *v26 - 48;
              if (v28 <= 9)
              {
                v29 = __CFADD__(v28, 10 * v22);
                v22 = v28 + 10 * v22;
                ++v26;
                --v27;
                if (!v29)
                  continue;
              }
            }
            goto LABEL_15;
          }
        }
        if (v22 != -1)
        {
          if (a2 == a3 || (a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 32 && *(_QWORD *)(a3 + 16) == a2)
            (*(void (**)(uint64_t, unint64_t))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0x50))(a2, a1);
          else
            JSC::ordinarySetSlow(a1, a2, (WTF::StringImpl *)v15, (uint64_t)a5, a3, 0, a7, a8);
          goto LABEL_101;
        }
LABEL_15:
        if (*(_QWORD *)(*(_QWORD *)(v18 + 41952) + 16) != v15)
        {
          v23 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
          if ((v23 & 0x10) == 0)
          {
            v24 = (_DWORD *)a2;
            while ((*(_WORD *)(v17 + 12) & 0x800) == 0 && (v24 == (_DWORD *)a2 || (*(_WORD *)(v17 + 12) & 0x400) == 0))
            {
              v25 = *(_DWORD **)(v17 + 48);
              if (!v25)
                v25 = (_DWORD *)*((_QWORD *)v24 + 2);
              if (v25 == (_DWORD *)2)
              {
                if (a3 == a2
                  || (a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 32 && *(_QWORD *)(a3 + 16) == a2)
                {
                  if ((*(_BYTE *)(a2 + 6) & 0x20) == 0 || (v23 & 0x400000) != 0)
                  {
                    var58[0] = *(unsigned __int8 **)(a1 + 56);
                    v30 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a2, v18, v15, (uint64_t)a5, 0, (uint64_t)v131, a7, a8, a9);
                    if (a2 && (v133 & 1) != 0)
                      JSC::throwTypeError(a1, (JSC::VM **)var58, (uint64_t)v30, a2);
                  }
                  else
                  {
                    JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)a2, a1, v15, (uint64_t)a5, (uint64_t)v131, a9, a6, a7, a8);
                  }
                }
                else
                {
                  JSC::JSObject::definePropertyOnReceiver(a1, v15, (uint64_t)a5, (uint64_t)v131, (uint64_t)a5, a6, a7, a8, a9);
                }
                goto LABEL_101;
              }
              v17 = 16 * (*v25 & 0xFFFFFFFE);
              v24 = v25;
              if ((*(_BYTE *)(v17 + 0x10) & 0x10) != 0)
                break;
            }
          }
        }
        JSC::JSObject::putInlineSlow((unsigned __int8 *)a2, a1, v15, a5, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v131, a6, a7, a8, a9);
        goto LABEL_101;
      }
      (*(void (**)(uint64_t, unint64_t, unint64_t, const JSC::PropertyTable *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v15, a5, v131);
    }
LABEL_101:
    v53 = *(_QWORD *)(v14 + 16);
  }
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, (WTF::AtomStringImpl *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  return v53;
}

uint64_t operationDefineDataProperty(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, WTF::StringImpl *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __int16 v9;
  uint64_t v11;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t (*v19)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  _QWORD *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  _DWORD *v83;
  WTF::StringImpl *v84;
  _QWORD *v85;
  uint64_t v86;
  WTF::StringImpl **v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  int v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t vars0;

  v9 = a5;
  v11 = a3;
  v14 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v14 + 40) = vars0;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_78;
  if (*(_BYTE *)(a3 + 5) != 2)
  {
    v11 = JSC::JSCell::toPrimitive(a3, (JSC::VM **)a1, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
LABEL_78:
    v117 = (unsigned __int8 *)v11;
    if (*(_DWORD *)(v14 + 80))
    {
      v99 = *(_DWORD *)(v14 + 80);
      if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v14 + 16))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 8);
        if (!v15)
          goto LABEL_7;
        goto LABEL_5;
      }
    }
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      v69 = *(unsigned __int8 *)(v11 + 5);
      if (v69 == 2)
      {
LABEL_86:
        if (*(_DWORD *)(v14 + 80))
        {
          v100 = *(_DWORD *)(v14 + 80);
          if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v14 + 16))
            goto LABEL_113;
        }
        v15 = *(_QWORD *)(v11 + 8);
        v79 = *(_QWORD *)(a1 + 56);
        if ((v15 & 1) == 0)
        {
          if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
          {
            v80 = *(WTF::StringImpl **)(v79 + 64768);
            if (v80 != (WTF::StringImpl *)v15)
            {
              *(_DWORD *)v15 += 2;
              *(_QWORD *)(v79 + 64768) = v15;
              if (v80)
              {
                if (*(_DWORD *)v80 == 2)
                {
                  WTF::StringImpl::~StringImpl(v80, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
                }
                else
                {
                  *(_DWORD *)v80 -= 2;
                }
              }
              v81 = *(WTF::StringImpl **)(v11 + 8);
              if (v81)
              {
                if ((*((_BYTE *)v81 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v81 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v81, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v118);
                  v81 = v118;
                }
              }
              v82 = *(WTF::StringImpl **)(v79 + 64776);
              *(_QWORD *)(v79 + 64776) = v81;
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                {
                  WTF::StringImpl::~StringImpl(v82, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
                }
                else
                {
                  *(_DWORD *)v82 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
            {
              v83 = *(_DWORD **)(v79 + 64776);
              *v83 += 2;
              __dmb(0xAu);
              v84 = *(WTF::StringImpl **)(v11 + 8);
              *(_QWORD *)(v11 + 8) = v83;
              v118 = v84;
              v85 = (_QWORD *)(v79 + 808);
              v86 = *(unsigned int *)(v79 + 820);
              if ((_DWORD)v86 == *(_DWORD *)(v79 + 816))
              {
                v88 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v118);
                v86 = *(unsigned int *)(v79 + 820);
                v87 = (WTF::StringImpl **)(*(_QWORD *)(v79 + 808) + 8 * v86);
                v84 = *v88;
              }
              else
              {
                v87 = (WTF::StringImpl **)(*v85 + 8 * v86);
                v88 = &v118;
              }
              *v88 = 0;
              *v87 = v84;
              *(_DWORD *)(v79 + 820) = v86 + 1;
              v89 = v118;
              v118 = 0;
              if (v89)
              {
                if (*(_DWORD *)v89 == 2)
                {
                  WTF::StringImpl::~StringImpl(v89, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
                }
                else
                {
                  *(_DWORD *)v89 -= 2;
                }
              }
            }
            v15 = *(_QWORD *)(v79 + 64776);
          }
          goto LABEL_5;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, (JSC::JSGlobalObject *)a1);
        if (*(_DWORD *)(v79 + 80))
        {
          v90 = *(_DWORD *)(v79 + 80);
          if ((v90 & 0x27) != 0 && (v90 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v79 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v79 + 16))
          {
LABEL_65:
            v31 = v118;
            if (v118)
            {
              v15 = 0;
              v30 = *(_DWORD *)v118;
LABEL_35:
              v32 = v30 - 2;
              if (v32)
              {
                *(_DWORD *)v31 = v32;
                goto LABEL_7;
              }
              goto LABEL_84;
            }
LABEL_113:
            v15 = 0;
            goto LABEL_7;
          }
        }
LABEL_33:
        v15 = (unint64_t)v118;
        if (!v118)
          goto LABEL_7;
        v30 = *(_DWORD *)v118 + 2;
        *(_DWORD *)v118 = v30;
        v31 = (WTF::StringImpl *)v15;
        goto LABEL_35;
      }
      if (v69 == 4)
      {
        v15 = *(_QWORD *)(v11 + 8);
        v70 = *(_DWORD *)v15;
        *(_DWORD *)v15 += 4;
        v16 = v70 + 2;
        if (v16)
          goto LABEL_6;
        v31 = (WTF::StringImpl *)v15;
LABEL_84:
        WTF::StringImpl::~StringImpl(v31, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_7;
      }
    }
    v11 = (uint64_t)JSC::JSValue::toStringSlowCase(&v117, a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_86;
  }
  v15 = *(_QWORD *)(a3 + 8);
  if ((v15 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a3, (JSC::JSGlobalObject *)a1);
    if (*(_DWORD *)(v14 + 80))
    {
      v68 = *(_DWORD *)(v14 + 80);
      if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v14 + 16))
        goto LABEL_65;
    }
    goto LABEL_33;
  }
  if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
  {
    v33 = *(WTF::StringImpl **)(v14 + 64768);
    if (v33 != (WTF::StringImpl *)v15)
    {
      *(_DWORD *)v15 += 2;
      *(_QWORD *)(v14 + 64768) = v15;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      v34 = *(WTF::StringImpl **)(v11 + 8);
      if (v34)
      {
        if ((*((_BYTE *)v34 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v34 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v34, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v118);
          v34 = v118;
        }
      }
      v35 = *(WTF::StringImpl **)(v14 + 64776);
      *(_QWORD *)(v14 + 64776) = v34;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
        }
        else
        {
          *(_DWORD *)v35 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
    {
      v36 = *(_DWORD **)(v14 + 64776);
      *v36 += 2;
      __dmb(0xAu);
      v37 = *(WTF::StringImpl **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v36;
      v118 = v37;
      v38 = (_QWORD *)(v14 + 808);
      v39 = *(unsigned int *)(v14 + 820);
      if ((_DWORD)v39 == *(_DWORD *)(v14 + 816))
      {
        v41 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v118);
        v39 = *(unsigned int *)(v14 + 820);
        v40 = (WTF::StringImpl **)(*(_QWORD *)(v14 + 808) + 8 * v39);
        v37 = *v41;
      }
      else
      {
        v40 = (WTF::StringImpl **)(*v38 + 8 * v39);
        v41 = &v118;
      }
      *v41 = 0;
      *v40 = v37;
      *(_DWORD *)(v14 + 820) = v39 + 1;
      v42 = v118;
      v118 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::~StringImpl(v42, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
    }
    v15 = *(_QWORD *)(v14 + 64776);
  }
LABEL_5:
  v16 = *(_DWORD *)v15 + 2;
LABEL_6:
  *(_DWORD *)v15 = v16;
LABEL_7:
  if (!*(_DWORD *)(v14 + 80))
    goto LABEL_8;
  v51 = *(_DWORD *)(v14 + 80);
  if ((v51 & 0x27) != 0 && (v51 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
  v20 = *(_QWORD *)(v14 + 16);
  if (!v20)
  {
LABEL_8:
    v118 = 0;
    v119 = 0;
    v120 = 0;
    a9.n128_u64[0] = 14;
    v121 = 14;
    if ((v9 & 0xC) == 8)
    {
      v17 = 0;
      v18 = 14;
    }
    else
    {
      if ((v9 & 0xC) == 4)
        v18 = 10;
      else
        v18 = 14;
      v17 = 2;
      v121 = v18 | 0x200000000;
    }
    if ((v9 & 3) == 1)
    {
      v18 &= 7u;
    }
    else
    {
      if ((v9 & 3) == 2)
      {
LABEL_14:
        if ((v9 & 0x40) != 0)
          v118 = a4;
        if ((v9 & 0x30) == 0x10)
        {
          v18 &= ~2u;
        }
        else
        {
          if ((v9 & 0x30) == 0x20)
            goto LABEL_21;
          v18 |= 2u;
        }
        LODWORD(v121) = v18;
        HIDWORD(v121) = v17 | 1;
LABEL_21:
        if ((v9 & 0x80) != 0)
        {
          v119 = 10;
          v18 = v18 & 0xFFFFFFED | 0x10;
          LODWORD(v121) = v18;
          if ((v9 & 0x100) == 0)
            goto LABEL_23;
        }
        else if ((v9 & 0x100) == 0)
        {
LABEL_23:
          v19 = *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90);
          if (v19 == JSC::JSObject::defineOwnProperty)
            JSC::JSObject::defineOwnProperty(a2, (JSC::JSGlobalObject *)a1, v15, (uint64_t)&v118, 1, a6, a7, a8, a9);
          else
            ((void (*)(WTF::AtomStringImpl *, uint64_t, unint64_t, WTF::StringImpl **, uint64_t))v19)(a2, a1, v15, &v118, 1);
          v20 = *(_QWORD *)(v14 + 16);
          goto LABEL_27;
        }
        v120 = 10;
        LODWORD(v121) = v18 & 0xFFFFFFED | 0x10;
        goto LABEL_23;
      }
      v18 |= 8u;
    }
    v17 |= 4u;
    v121 = __PAIR64__(v17, v18);
    goto LABEL_14;
  }
LABEL_27:
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  return v20;
}

uint64_t operationDefineDataPropertyString(JSC::JSGlobalObject *a1, WTF::AtomStringImpl *a2, JSC::JSRopeString *a3, WTF::StringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __int16 v9;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t (*v18)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  _QWORD *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t vars0;

  v9 = a5;
  v14 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v14 + 40) = vars0;
  v15 = *((_QWORD *)a3 + 1);
  if ((v15 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(a3, a1);
    if (!*(_DWORD *)(v14 + 80))
      goto LABEL_30;
    v75 = *(_DWORD *)(v14 + 80);
    if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
    {
      v30 = v76;
      if (!v76)
      {
        v15 = 0;
        goto LABEL_4;
      }
      v15 = 0;
      v29 = *(_DWORD *)v76;
    }
    else
    {
LABEL_30:
      v15 = (unint64_t)v76;
      if (!v76)
        goto LABEL_4;
      v29 = *(_DWORD *)v76 + 2;
      *(_DWORD *)v76 = v29;
      v30 = (WTF::StringImpl *)v15;
    }
    v31 = v29 - 2;
    if (v31)
    {
      *(_DWORD *)v30 = v31;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v30, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
  {
    v32 = *(WTF::StringImpl **)(v14 + 64768);
    if (v32 != (WTF::StringImpl *)v15)
    {
      *(_DWORD *)v15 += 2;
      *(_QWORD *)(v14 + 64768) = v15;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
        {
          WTF::StringImpl::~StringImpl(v32, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
        }
        else
        {
          *(_DWORD *)v32 -= 2;
        }
      }
      v33 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
      if (v33)
      {
        if ((*((_BYTE *)v33 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v33 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v33, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v76);
          v33 = v76;
        }
      }
      v34 = *(WTF::StringImpl **)(v14 + 64776);
      *(_QWORD *)(v14 + 64776) = v33;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*((_QWORD *)a3 + 1) + 16) & 0x10) == 0)
    {
      v35 = *(_DWORD **)(v14 + 64776);
      *v35 += 2;
      __dmb(0xAu);
      v36 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v35;
      v76 = v36;
      v37 = (_QWORD *)(v14 + 808);
      v38 = *(unsigned int *)(v14 + 820);
      if ((_DWORD)v38 == *(_DWORD *)(v14 + 816))
      {
        v40 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v76);
        v38 = *(unsigned int *)(v14 + 820);
        v39 = (WTF::StringImpl **)(*(_QWORD *)(v14 + 808) + 8 * v38);
        v36 = *v40;
      }
      else
      {
        v39 = (WTF::StringImpl **)(*v37 + 8 * v38);
        v40 = &v76;
      }
      *v40 = 0;
      *v39 = v36;
      *(_DWORD *)(v14 + 820) = v38 + 1;
      v41 = v76;
      v76 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
        {
          WTF::StringImpl::~StringImpl(v41, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
        }
        else
        {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
    v15 = *(_QWORD *)(v14 + 64776);
  }
  *(_DWORD *)v15 += 2;
LABEL_4:
  if (!*(_DWORD *)(v14 + 80))
    goto LABEL_5;
  v58 = *(_DWORD *)(v14 + 80);
  if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(v14 + 16);
  if (!v19)
  {
LABEL_5:
    v76 = 0;
    v77 = 0;
    v78 = 0;
    a9.n128_u64[0] = 14;
    v79 = 14;
    if ((v9 & 0xC) == 8)
    {
      v16 = 0;
      v17 = 14;
    }
    else
    {
      if ((v9 & 0xC) == 4)
        v17 = 10;
      else
        v17 = 14;
      v16 = 2;
      v79 = v17 | 0x200000000;
    }
    if ((v9 & 3) == 1)
    {
      v17 &= 7u;
    }
    else
    {
      if ((v9 & 3) == 2)
      {
LABEL_11:
        if ((v9 & 0x40) != 0)
          v76 = a4;
        if ((v9 & 0x30) == 0x10)
        {
          v17 &= ~2u;
        }
        else
        {
          if ((v9 & 0x30) == 0x20)
            goto LABEL_18;
          v17 |= 2u;
        }
        LODWORD(v79) = v17;
        HIDWORD(v79) = v16 | 1;
LABEL_18:
        if ((v9 & 0x80) != 0)
        {
          v77 = 10;
          v17 = v17 & 0xFFFFFFED | 0x10;
          LODWORD(v79) = v17;
          if ((v9 & 0x100) == 0)
            goto LABEL_20;
        }
        else if ((v9 & 0x100) == 0)
        {
LABEL_20:
          v18 = *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90);
          if (v18 == JSC::JSObject::defineOwnProperty)
            JSC::JSObject::defineOwnProperty(a2, a1, v15, (uint64_t)&v76, 1, a6, a7, a8, a9);
          else
            ((void (*)(WTF::AtomStringImpl *, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **, uint64_t))v18)(a2, a1, v15, &v76, 1);
          v19 = *(_QWORD *)(v14 + 16);
          goto LABEL_24;
        }
        v78 = 10;
        LODWORD(v79) = v17 & 0xFFFFFFED | 0x10;
        goto LABEL_20;
      }
      v17 |= 8u;
    }
    v16 |= 4u;
    v79 = __PAIR64__(v16, v17);
    goto LABEL_11;
  }
LABEL_24:
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  return v19;
}

uint64_t operationDefineDataPropertyStringIdent(JSC::JSGlobalObject *a1, WTF::AtomStringImpl *a2, WTF::StringImpl *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __int16 v9;
  WTF::StringImpl *v11;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t (*v19)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t vars0;

  v9 = a5;
  v11 = this;
  v14 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v14 + 40) = vars0;
  v15 = *((_DWORD *)this + 4);
  if ((v15 & 0x20) != 0)
  {
    v16 = *(_DWORD *)this + 2;
LABEL_5:
    *(_DWORD *)v11 = v16;
    goto LABEL_6;
  }
  if ((v15 & 0x10) != 0)
  {
    *(_DWORD *)this += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v14 + 41912), (unint64_t)this, this, a4, a5, a6, a7, a8, &v44);
    v11 = v44;
  }
  v16 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  if (v16)
    goto LABEL_5;
  WTF::StringImpl::~StringImpl(v11, a2, (uint64_t)this, a4, a5, a6, a7, a8);
  WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
LABEL_6:
  v44 = 0;
  v45 = 0;
  v46 = 0;
  a9.n128_u64[0] = 14;
  v47 = 14;
  if ((v9 & 0xC) == 8)
  {
    v17 = 0;
    v18 = 14;
  }
  else
  {
    if ((v9 & 0xC) == 4)
      v18 = 10;
    else
      v18 = 14;
    v17 = 2;
    v47 = v18 | 0x200000000;
  }
  if ((v9 & 3) == 1)
  {
    v18 &= 7u;
LABEL_10:
    v17 |= 4u;
    v47 = __PAIR64__(v17, v18);
    goto LABEL_11;
  }
  if ((v9 & 3) != 2)
  {
    v18 |= 8u;
    goto LABEL_10;
  }
LABEL_11:
  if ((v9 & 0x40) != 0)
    v44 = (WTF::StringImpl *)a4;
  if ((v9 & 0x30) == 0x10)
  {
    v18 &= ~2u;
LABEL_15:
    LODWORD(v47) = v18;
    HIDWORD(v47) = v17 | 1;
    goto LABEL_16;
  }
  if ((v9 & 0x30) != 0x20)
  {
    v18 |= 2u;
    goto LABEL_15;
  }
LABEL_16:
  if ((v9 & 0x80) != 0)
  {
    v45 = 10;
    v18 = v18 & 0xFFFFFFED | 0x10;
    LODWORD(v47) = v18;
  }
  if ((v9 & 0x100) != 0)
  {
    v46 = 10;
    LODWORD(v47) = v18 & 0xFFFFFFED | 0x10;
  }
  v19 = *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90);
  if (v19 == JSC::JSObject::defineOwnProperty)
    JSC::JSObject::defineOwnProperty(a2, a1, (unint64_t)v11, (uint64_t)&v44, 1, a6, a7, a8, a9);
  else
    ((void (*)(WTF::AtomStringImpl *, JSC::JSGlobalObject *, WTF::StringImpl *, WTF::StringImpl **, uint64_t))v19)(a2, a1, v11, &v44, 1);
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::~StringImpl(v11, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  else
  {
    *(_DWORD *)v11 -= 2;
  }
  return *(_QWORD *)(v14 + 16);
}

uint64_t operationDefineDataPropertySymbol(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  unsigned int v12;
  uint64_t (*v13)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  v10 = *(WTF::StringImpl **)(a3 + 8);
  *(_DWORD *)v10 += 4;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  a9.n128_u64[0] = 14;
  v43 = 14;
  if ((a5 & 0xC) == 8)
  {
    v11 = 0;
    v12 = 14;
  }
  else
  {
    if ((a5 & 0xC) == 4)
      v12 = 10;
    else
      v12 = 14;
    v11 = 2;
    v43 = v12 | 0x200000000;
  }
  if ((a5 & 3) == 1)
  {
    v12 &= 7u;
LABEL_5:
    v11 |= 4u;
    v43 = __PAIR64__(v11, v12);
    goto LABEL_7;
  }
  if ((a5 & 3) != 2)
  {
    v12 |= 8u;
    goto LABEL_5;
  }
LABEL_7:
  if ((a5 & 0x40) != 0)
    v40 = a4;
  if ((a5 & 0x30) == 0x10)
  {
    v12 &= ~2u;
  }
  else
  {
    if ((a5 & 0x30) == 0x20)
      goto LABEL_14;
    v12 |= 2u;
  }
  LODWORD(v43) = v12;
  HIDWORD(v43) = v11 | 1;
LABEL_14:
  if ((a5 & 0x80) != 0)
  {
    v41 = 10;
    v12 = v12 & 0xFFFFFFED | 0x10;
    LODWORD(v43) = v12;
    if ((a5 & 0x100) == 0)
      goto LABEL_16;
  }
  else if ((a5 & 0x100) == 0)
  {
    goto LABEL_16;
  }
  v42 = 10;
  LODWORD(v43) = v12 & 0xFFFFFFED | 0x10;
LABEL_16:
  v13 = *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90);
  if (v13 == JSC::JSObject::defineOwnProperty)
    JSC::JSObject::defineOwnProperty(a2, a1, (unint64_t)v10, (uint64_t)&v40, 1, a6, a7, a8, a9);
  else
    ((void (*)(JSC::JSObject *, JSC::JSGlobalObject *, WTF::StringImpl *, uint64_t *, uint64_t))v13)(a2, a1, v10, &v40, 1);
  v21 = *(_DWORD *)v10 - 2;
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl(v10, v14, v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    v21 = *(_DWORD *)v10;
  }
  else
  {
    *(_DWORD *)v10 = v21;
  }
  v22 = v21 - 2;
  if (v22)
  {
    *(_DWORD *)v10 = v22;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v10, v14, v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
  }
  return *(_QWORD *)(v9 + 16);
}

uint64_t operationDefineAccessorProperty(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __int16 v9;
  uint64_t v12;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t (*v20)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  _DWORD *v84;
  WTF::StringImpl *v85;
  _QWORD *v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  WTF::StringImpl **v89;
  WTF::StringImpl *v90;
  int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t vars0;

  v9 = a6;
  v12 = a3;
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v15 + 40) = vars0;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_78;
  if (*(_BYTE *)(a3 + 5) != 2)
  {
    v12 = JSC::JSCell::toPrimitive(a3, (JSC::VM **)a1, (JSC::Structure *)2, a4, a5, a6, a7, a8);
LABEL_78:
    v118 = (unsigned __int8 *)v12;
    if (*(_DWORD *)(v15 + 80))
    {
      v100 = *(_DWORD *)(v15 + 80);
      if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v15 + 16))
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v15 + 41952) + 8);
        if (!v16)
          goto LABEL_7;
        goto LABEL_5;
      }
    }
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      v70 = *(unsigned __int8 *)(v12 + 5);
      if (v70 == 2)
      {
LABEL_86:
        if (*(_DWORD *)(v15 + 80))
        {
          v101 = *(_DWORD *)(v15 + 80);
          if ((v101 & 0x27) != 0 && (v101 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v15 + 16))
            goto LABEL_113;
        }
        v16 = *(_QWORD *)(v12 + 8);
        v80 = *(_QWORD *)(a1 + 56);
        if ((v16 & 1) == 0)
        {
          if ((*(_BYTE *)(v16 + 16) & 0x10) == 0)
          {
            v81 = *(WTF::StringImpl **)(v80 + 64768);
            if (v81 != (WTF::StringImpl *)v16)
            {
              *(_DWORD *)v16 += 2;
              *(_QWORD *)(v80 + 64768) = v16;
              if (v81)
              {
                if (*(_DWORD *)v81 == 2)
                {
                  WTF::StringImpl::~StringImpl(v81, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
                }
                else
                {
                  *(_DWORD *)v81 -= 2;
                }
              }
              v82 = *(WTF::StringImpl **)(v12 + 8);
              if (v82)
              {
                if ((*((_BYTE *)v82 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v82 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v82, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v119);
                  v82 = v119;
                }
              }
              v83 = *(WTF::StringImpl **)(v80 + 64776);
              *(_QWORD *)(v80 + 64776) = v82;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                {
                  WTF::StringImpl::~StringImpl(v83, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
                }
                else
                {
                  *(_DWORD *)v83 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
            {
              v84 = *(_DWORD **)(v80 + 64776);
              *v84 += 2;
              __dmb(0xAu);
              v85 = *(WTF::StringImpl **)(v12 + 8);
              *(_QWORD *)(v12 + 8) = v84;
              v119 = v85;
              v86 = (_QWORD *)(v80 + 808);
              v87 = *(unsigned int *)(v80 + 820);
              if ((_DWORD)v87 == *(_DWORD *)(v80 + 816))
              {
                v89 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v87 + 1, (unint64_t)&v119);
                v87 = *(unsigned int *)(v80 + 820);
                v88 = (WTF::StringImpl **)(*(_QWORD *)(v80 + 808) + 8 * v87);
                v85 = *v89;
              }
              else
              {
                v88 = (WTF::StringImpl **)(*v86 + 8 * v87);
                v89 = &v119;
              }
              *v89 = 0;
              *v88 = v85;
              *(_DWORD *)(v80 + 820) = v87 + 1;
              v90 = v119;
              v119 = 0;
              if (v90)
              {
                if (*(_DWORD *)v90 == 2)
                {
                  WTF::StringImpl::~StringImpl(v90, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
                }
                else
                {
                  *(_DWORD *)v90 -= 2;
                }
              }
            }
            v16 = *(_QWORD *)(v80 + 64776);
          }
          goto LABEL_5;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, (JSC::JSGlobalObject *)a1);
        if (*(_DWORD *)(v80 + 80))
        {
          v91 = *(_DWORD *)(v80 + 80);
          if ((v91 & 0x27) != 0 && (v91 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v80 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v80 + 16))
          {
LABEL_65:
            v32 = v119;
            if (v119)
            {
              v16 = 0;
              v31 = *(_DWORD *)v119;
LABEL_35:
              v33 = v31 - 2;
              if (v33)
              {
                *(_DWORD *)v32 = v33;
                goto LABEL_7;
              }
              goto LABEL_84;
            }
LABEL_113:
            v16 = 0;
            goto LABEL_7;
          }
        }
LABEL_33:
        v16 = (unint64_t)v119;
        if (!v119)
          goto LABEL_7;
        v31 = *(_DWORD *)v119 + 2;
        *(_DWORD *)v119 = v31;
        v32 = (WTF::StringImpl *)v16;
        goto LABEL_35;
      }
      if (v70 == 4)
      {
        v16 = *(_QWORD *)(v12 + 8);
        v71 = *(_DWORD *)v16;
        *(_DWORD *)v16 += 4;
        v17 = v71 + 2;
        if (v17)
          goto LABEL_6;
        v32 = (WTF::StringImpl *)v16;
LABEL_84:
        WTF::StringImpl::~StringImpl(v32, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        goto LABEL_7;
      }
    }
    v12 = (uint64_t)JSC::JSValue::toStringSlowCase(&v118, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_86;
  }
  v16 = *(_QWORD *)(a3 + 8);
  if ((v16 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a3, (JSC::JSGlobalObject *)a1);
    if (*(_DWORD *)(v15 + 80))
    {
      v69 = *(_DWORD *)(v15 + 80);
      if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v15 + 16))
        goto LABEL_65;
    }
    goto LABEL_33;
  }
  if ((*(_BYTE *)(v16 + 16) & 0x10) == 0)
  {
    v34 = *(WTF::StringImpl **)(v15 + 64768);
    if (v34 != (WTF::StringImpl *)v16)
    {
      *(_DWORD *)v16 += 2;
      *(_QWORD *)(v15 + 64768) = v16;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
      v35 = *(WTF::StringImpl **)(v12 + 8);
      if (v35)
      {
        if ((*((_BYTE *)v35 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v35 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v35, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v119);
          v35 = v119;
        }
      }
      v36 = *(WTF::StringImpl **)(v15 + 64776);
      *(_QWORD *)(v15 + 64776) = v35;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::~StringImpl(v36, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)v36 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
    {
      v37 = *(_DWORD **)(v15 + 64776);
      *v37 += 2;
      __dmb(0xAu);
      v38 = *(WTF::StringImpl **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v37;
      v119 = v38;
      v39 = (_QWORD *)(v15 + 808);
      v40 = *(unsigned int *)(v15 + 820);
      if ((_DWORD)v40 == *(_DWORD *)(v15 + 816))
      {
        v42 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)&v119);
        v40 = *(unsigned int *)(v15 + 820);
        v41 = (WTF::StringImpl **)(*(_QWORD *)(v15 + 808) + 8 * v40);
        v38 = *v42;
      }
      else
      {
        v41 = (WTF::StringImpl **)(*v39 + 8 * v40);
        v42 = &v119;
      }
      *v42 = 0;
      *v41 = v38;
      *(_DWORD *)(v15 + 820) = v40 + 1;
      v43 = v119;
      v119 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
        }
        else
        {
          *(_DWORD *)v43 -= 2;
        }
      }
    }
    v16 = *(_QWORD *)(v15 + 64776);
  }
LABEL_5:
  v17 = *(_DWORD *)v16 + 2;
LABEL_6:
  *(_DWORD *)v16 = v17;
LABEL_7:
  if (!*(_DWORD *)(v15 + 80))
    goto LABEL_8;
  v52 = *(_DWORD *)(v15 + 80);
  if ((v52 & 0x27) != 0 && (v52 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
  v21 = *(_QWORD *)(v15 + 16);
  if (!v21)
  {
LABEL_8:
    v119 = 0;
    v120 = 0;
    v121 = 0;
    a9.n128_u64[0] = 14;
    v122 = 14;
    if ((v9 & 0xC) == 8)
    {
      v18 = 0;
      v19 = 14;
    }
    else
    {
      if ((v9 & 0xC) == 4)
        v19 = 10;
      else
        v19 = 14;
      v18 = 2;
      v122 = v19 | 0x200000000;
    }
    if ((v9 & 3) == 1)
    {
      v19 &= 7u;
    }
    else
    {
      if ((v9 & 3) == 2)
      {
LABEL_14:
        if ((v9 & 0x40) != 0)
          v119 = (WTF::StringImpl *)10;
        if ((v9 & 0x30) == 0x10)
        {
          v19 &= ~2u;
        }
        else
        {
          if ((v9 & 0x30) == 0x20)
            goto LABEL_21;
          v19 |= 2u;
        }
        LODWORD(v122) = v19;
        HIDWORD(v122) = v18 | 1;
LABEL_21:
        if ((v9 & 0x80) != 0)
        {
          v120 = a4;
          v19 = v19 & 0xFFFFFFED | 0x10;
          LODWORD(v122) = v19;
          if ((v9 & 0x100) == 0)
            goto LABEL_23;
        }
        else if ((v9 & 0x100) == 0)
        {
LABEL_23:
          v20 = *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90);
          if (v20 == JSC::JSObject::defineOwnProperty)
            JSC::JSObject::defineOwnProperty(a2, (JSC::JSGlobalObject *)a1, v16, (uint64_t)&v119, 1, a6, a7, a8, a9);
          else
            ((void (*)(WTF::AtomStringImpl *, uint64_t, unint64_t, WTF::StringImpl **, uint64_t))v20)(a2, a1, v16, &v119, 1);
          v21 = *(_QWORD *)(v15 + 16);
          goto LABEL_27;
        }
        v121 = a5;
        LODWORD(v122) = v19 & 0xFFFFFFED | 0x10;
        goto LABEL_23;
      }
      v19 |= 8u;
    }
    v18 |= 4u;
    v122 = __PAIR64__(v18, v19);
    goto LABEL_14;
  }
LABEL_27:
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  return v21;
}

uint64_t operationDefineAccessorPropertyString(JSC::JSGlobalObject *a1, WTF::AtomStringImpl *a2, JSC::JSRopeString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __int16 v9;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t (*v19)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  _QWORD *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t vars0;

  v9 = a6;
  v15 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v15 + 40) = vars0;
  v16 = *((_QWORD *)a3 + 1);
  if ((v16 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(a3, a1);
    if (!*(_DWORD *)(v15 + 80))
      goto LABEL_30;
    v76 = *(_DWORD *)(v15 + 80);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v15 + 16))
    {
      v31 = v77;
      if (!v77)
      {
        v16 = 0;
        goto LABEL_4;
      }
      v16 = 0;
      v30 = *(_DWORD *)v77;
    }
    else
    {
LABEL_30:
      v16 = (unint64_t)v77;
      if (!v77)
        goto LABEL_4;
      v30 = *(_DWORD *)v77 + 2;
      *(_DWORD *)v77 = v30;
      v31 = (WTF::StringImpl *)v16;
    }
    v32 = v30 - 2;
    if (v32)
    {
      *(_DWORD *)v31 = v32;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v31, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v16 + 16) & 0x10) == 0)
  {
    v33 = *(WTF::StringImpl **)(v15 + 64768);
    if (v33 != (WTF::StringImpl *)v16)
    {
      *(_DWORD *)v16 += 2;
      *(_QWORD *)(v15 + 64768) = v16;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      v34 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
      if (v34)
      {
        if ((*((_BYTE *)v34 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v34 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v34, a3, a4, a5, a6, a7, a8, (WTF *)&v77);
          v34 = v77;
        }
      }
      v35 = *(WTF::StringImpl **)(v15 + 64776);
      *(_QWORD *)(v15 + 64776) = v34;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
        }
        else
        {
          *(_DWORD *)v35 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*((_QWORD *)a3 + 1) + 16) & 0x10) == 0)
    {
      v36 = *(_DWORD **)(v15 + 64776);
      *v36 += 2;
      __dmb(0xAu);
      v37 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v36;
      v77 = v37;
      v38 = (_QWORD *)(v15 + 808);
      v39 = *(unsigned int *)(v15 + 820);
      if ((_DWORD)v39 == *(_DWORD *)(v15 + 816))
      {
        v41 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v77);
        v39 = *(unsigned int *)(v15 + 820);
        v40 = (WTF::StringImpl **)(*(_QWORD *)(v15 + 808) + 8 * v39);
        v37 = *v41;
      }
      else
      {
        v40 = (WTF::StringImpl **)(*v38 + 8 * v39);
        v41 = &v77;
      }
      *v41 = 0;
      *v40 = v37;
      *(_DWORD *)(v15 + 820) = v39 + 1;
      v42 = v77;
      v77 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::~StringImpl(v42, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
    }
    v16 = *(_QWORD *)(v15 + 64776);
  }
  *(_DWORD *)v16 += 2;
LABEL_4:
  if (!*(_DWORD *)(v15 + 80))
    goto LABEL_5;
  v59 = *(_DWORD *)(v15 + 80);
  if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  v20 = *(_QWORD *)(v15 + 16);
  if (!v20)
  {
LABEL_5:
    v77 = 0;
    v78 = 0;
    v79 = 0;
    a9.n128_u64[0] = 14;
    v80 = 14;
    if ((v9 & 0xC) == 8)
    {
      v17 = 0;
      v18 = 14;
    }
    else
    {
      if ((v9 & 0xC) == 4)
        v18 = 10;
      else
        v18 = 14;
      v17 = 2;
      v80 = v18 | 0x200000000;
    }
    if ((v9 & 3) == 1)
    {
      v18 &= 7u;
    }
    else
    {
      if ((v9 & 3) == 2)
      {
LABEL_11:
        if ((v9 & 0x40) != 0)
          v77 = (WTF::StringImpl *)10;
        if ((v9 & 0x30) == 0x10)
        {
          v18 &= ~2u;
        }
        else
        {
          if ((v9 & 0x30) == 0x20)
            goto LABEL_18;
          v18 |= 2u;
        }
        LODWORD(v80) = v18;
        HIDWORD(v80) = v17 | 1;
LABEL_18:
        if ((v9 & 0x80) != 0)
        {
          v78 = a4;
          v18 = v18 & 0xFFFFFFED | 0x10;
          LODWORD(v80) = v18;
          if ((v9 & 0x100) == 0)
            goto LABEL_20;
        }
        else if ((v9 & 0x100) == 0)
        {
LABEL_20:
          v19 = *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90);
          if (v19 == JSC::JSObject::defineOwnProperty)
            JSC::JSObject::defineOwnProperty(a2, a1, v16, (uint64_t)&v77, 1, a6, a7, a8, a9);
          else
            ((void (*)(WTF::AtomStringImpl *, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **, uint64_t))v19)(a2, a1, v16, &v77, 1);
          v20 = *(_QWORD *)(v15 + 16);
          goto LABEL_24;
        }
        v79 = a5;
        LODWORD(v80) = v18 & 0xFFFFFFED | 0x10;
        goto LABEL_20;
      }
      v18 |= 8u;
    }
    v17 |= 4u;
    v80 = __PAIR64__(v17, v18);
    goto LABEL_11;
  }
LABEL_24:
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  return v20;
}

uint64_t operationDefineAccessorPropertyStringIdent(JSC::JSGlobalObject *a1, WTF::AtomStringImpl *a2, WTF::StringImpl *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __int16 v9;
  WTF::StringImpl *v12;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t (*v20)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t vars0;

  v9 = a6;
  v12 = this;
  v15 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v15 + 40) = vars0;
  v16 = *((_DWORD *)this + 4);
  if ((v16 & 0x20) != 0)
  {
    v17 = *(_DWORD *)this + 2;
LABEL_6:
    *(_DWORD *)v12 = v17;
    goto LABEL_7;
  }
  if ((v16 & 0x10) != 0)
  {
    *(_DWORD *)this += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v15 + 41912), (unint64_t)this, this, a4, a5, a6, a7, a8, &v45);
    v12 = (WTF::StringImpl *)v45;
  }
  v17 = *(_DWORD *)v12;
  *(_DWORD *)v12 += 2;
  if (v17)
    goto LABEL_6;
  WTF::StringImpl::~StringImpl(v12, a2, (uint64_t)this, a4, a5, a6, a7, a8);
  WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
LABEL_7:
  v45 = 0;
  v46 = 0;
  v47 = 0;
  a9.n128_u64[0] = 14;
  v48 = 14;
  if ((v9 & 0xC) == 8)
  {
    v18 = 0;
    v19 = 14;
  }
  else
  {
    if ((v9 & 0xC) == 4)
      v19 = 10;
    else
      v19 = 14;
    v18 = 2;
    v48 = v19 | 0x200000000;
  }
  if ((v9 & 3) == 1)
  {
    v19 &= 7u;
LABEL_11:
    v18 |= 4u;
    v48 = __PAIR64__(v18, v19);
    goto LABEL_13;
  }
  if ((v9 & 3) != 2)
  {
    v19 |= 8u;
    goto LABEL_11;
  }
LABEL_13:
  if ((v9 & 0x40) != 0)
    v45 = 10;
  if ((v9 & 0x30) == 0x10)
  {
    v19 &= ~2u;
  }
  else
  {
    if ((v9 & 0x30) == 0x20)
      goto LABEL_20;
    v19 |= 2u;
  }
  LODWORD(v48) = v19;
  HIDWORD(v48) = v18 | 1;
LABEL_20:
  if ((v9 & 0x80) != 0)
  {
    v46 = a4;
    v19 = v19 & 0xFFFFFFED | 0x10;
    LODWORD(v48) = v19;
    if ((v9 & 0x100) == 0)
      goto LABEL_22;
  }
  else if ((v9 & 0x100) == 0)
  {
    goto LABEL_22;
  }
  v47 = a5;
  LODWORD(v48) = v19 & 0xFFFFFFED | 0x10;
LABEL_22:
  v20 = *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90);
  if (v20 == JSC::JSObject::defineOwnProperty)
    JSC::JSObject::defineOwnProperty(a2, a1, (unint64_t)v12, (uint64_t)&v45, 1, a6, a7, a8, a9);
  else
    ((void (*)(WTF::AtomStringImpl *, JSC::JSGlobalObject *, WTF::StringImpl *, uint64_t *, uint64_t))v20)(a2, a1, v12, &v45, 1);
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::~StringImpl(v12, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
  }
  else
  {
    *(_DWORD *)v12 -= 2;
  }
  return *(_QWORD *)(v15 + 16);
}

uint64_t operationDefineAccessorPropertySymbol(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  unsigned int v12;
  uint64_t (*v13)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  v10 = *(WTF::StringImpl **)(a3 + 8);
  *(_DWORD *)v10 += 4;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  a9.n128_u64[0] = 14;
  v43 = 14;
  if ((a6 & 0xC) == 8)
  {
    v11 = 0;
    v12 = 14;
  }
  else
  {
    if ((a6 & 0xC) == 4)
      v12 = 10;
    else
      v12 = 14;
    v11 = 2;
    v43 = v12 | 0x200000000;
  }
  if ((a6 & 3) == 1)
  {
    v12 &= 7u;
LABEL_5:
    v11 |= 4u;
    v43 = __PAIR64__(v11, v12);
    goto LABEL_7;
  }
  if ((a6 & 3) != 2)
  {
    v12 |= 8u;
    goto LABEL_5;
  }
LABEL_7:
  if ((a6 & 0x40) != 0)
    v40 = 10;
  if ((a6 & 0x30) == 0x10)
  {
    v12 &= ~2u;
  }
  else
  {
    if ((a6 & 0x30) == 0x20)
      goto LABEL_14;
    v12 |= 2u;
  }
  LODWORD(v43) = v12;
  HIDWORD(v43) = v11 | 1;
LABEL_14:
  if ((a6 & 0x80) != 0)
  {
    v41 = a4;
    v12 = v12 & 0xFFFFFFED | 0x10;
    LODWORD(v43) = v12;
    if ((a6 & 0x100) == 0)
      goto LABEL_16;
  }
  else if ((a6 & 0x100) == 0)
  {
    goto LABEL_16;
  }
  v42 = a5;
  LODWORD(v43) = v12 & 0xFFFFFFED | 0x10;
LABEL_16:
  v13 = *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90);
  if (v13 == JSC::JSObject::defineOwnProperty)
    JSC::JSObject::defineOwnProperty(a2, a1, (unint64_t)v10, (uint64_t)&v40, 1, a6, a7, a8, a9);
  else
    ((void (*)(JSC::JSObject *, JSC::JSGlobalObject *, WTF::StringImpl *, uint64_t *, uint64_t))v13)(a2, a1, v10, &v40, 1);
  v21 = *(_DWORD *)v10 - 2;
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl(v10, v14, v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    v21 = *(_DWORD *)v10;
  }
  else
  {
    *(_DWORD *)v10 = v21;
  }
  v22 = v21 - 2;
  if (v22)
  {
    *(_DWORD *)v10 = v22;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v10, v14, v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
  }
  return *(_QWORD *)(v9 + 16);
}

unint64_t operationNewArray(JSC *a1, JSC::JSGlobalObject *a2, JSC::Structure *a3, const JSC::JSValue *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  *((_QWORD *)a3 - 1) = 8 * (_QWORD)a4;
  result = JSC::constructArray(a1, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)a3 - 1) = 0;
  return result;
}

unint64_t operationNewEmptyArray(JSC::JSArray *a1, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t result;
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  result = JSC::JSArray::tryCreate(a1, a2, 0, a5, a6, a7, a8, a9, a3);
  if (!result)
  {
    result = 260;
    __break(0xC471u);
  }
  return result;
}

unint64_t operationNewArrayWithSize(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  unint64_t *v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t SlowCase;
  unint64_t v28;
  unsigned int *v29;
  _DWORD *v30;
  unint64_t result;
  int v32;
  const void *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  __n128 *v39;
  uint64_t v40;
  unint64_t v41;
  JSC::Heap **v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  JSC::Exception *v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  unint64_t Slow;
  __n128 *v61;
  __n128 *v62;
  __n128 *v63;
  unint64_t OutOfMemoryError;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  JSC::Exception *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t (*v83)(_QWORD *);
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  WTF::StringImpl *v102;
  _QWORD var68[14];

  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v10 + 40) = var68[13];
  if ((a3 & 0x80000000) != 0)
  {
    v40 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v40 = 0x3A00000002;
    *(_QWORD *)(v40 + 8) = "Array length must be a positive integer of safe magnitude.";
    *(_DWORD *)(v40 + 16) = 4;
    v102 = (WTF::StringImpl *)v40;
    v41 = *(_QWORD *)(a1 + 128);
    v42 = *(JSC::Heap ***)(a1 + 56);
    if ((v41 & 1) != 0)
    {
      v83 = *(uint64_t (**)(_QWORD *))(v41 & 0xFFFFFFFFFFFFFFFCLL);
      v84 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v84 = (_QWORD *)(a1 - 16);
      var68[0] = *v84;
      var68[1] = a1;
      var68[2] = a1 + 128;
      v41 = v83(var68);
    }
    v43 = JSC::ErrorInstance::create(v42, v41, &v102, 0, 0, 0, 2, 1);
    v50 = (JSC::Exception *)v43;
    if ((v43 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C)))
    {
      v50 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v43, 0, v44, v45, v46, v47, v48);
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v50, v49, v44, v45, v46, v47, v48);
    v58 = v102;
    v102 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
      {
        WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
        WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
      }
      else
      {
        *(_DWORD *)v58 -= 2;
      }
    }
    return 0;
  }
  v13 = (unint64_t *)(v10 + 37584);
  if (!a4)
  {
    v14 = a3;
    v15 = *(unsigned __int16 *)(a2 + 24);
    if (v15 == 65534
      || (v15 == 0xFFFF ? (v16 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84)) : (v16 = *(unsigned __int16 *)(a2 + 24)),
          v16 < 64))
    {
      v17 = 0;
    }
    else if ((v16 - 63) >= 5)
    {
      v34 = (v16 - 64) | ((v16 - 64) >> 1) | (((v16 - 64) | ((v16 - 64) >> 1)) >> 2);
      v35 = v34 | (v34 >> 4) | ((v34 | (v34 >> 4)) >> 8);
      v17 = (v35 | HIWORD(v35)) + 1;
    }
    else
    {
      v17 = 4;
    }
    v18 = *(_BYTE *)(a2 + 8) & 0xE;
    if (v18 <= 9)
    {
      if (a3 <= 0x10000000)
      {
        if (v15 == 65534)
          goto LABEL_14;
        if (v15 == 0xFFFF)
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
        if (v15 < 64)
        {
LABEL_14:
          v19 = 0;
        }
        else if ((v15 - 63) >= 5)
        {
          v36 = (v15 - 64) | ((v15 - 64) >> 1) | (((v15 - 64) | ((v15 - 64) >> 1)) >> 2);
          v37 = v36 | (v36 >> 4) | ((v36 | (v36 >> 4)) >> 8);
          v19 = (v37 | HIWORD(v37)) + 1;
        }
        else
        {
          v19 = 4;
        }
        if (a3 <= 3)
          LODWORD(v20) = 3;
        else
          LODWORD(v20) = a3;
        if ((_DWORD)a3)
          v20 = v20;
        else
          v20 = 5;
        v21 = v19 + v20;
        v22 = 8 * v21;
        if (v21 > 9)
        {
          if (v21 > 0x3EB)
            v23 = v22 + 8;
          else
            v23 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                  + (((unint64_t)(v22 + 23) >> 2) & 0x7FFFFFFFCLL));
        }
        else
        {
          v23 = (v22 + 23) & 0x1FFFFFFFF0;
        }
        v24 = v23 - 8 * v19 - 8;
        a3 = (v24 & 0x7FFFFFFF8) + 8 * v17 + 8;
        if (a3 <= 0x1F60
          && (v25 = *(_QWORD *)(v10 + ((((v24 & 0x7FFFFFFF8) + 8 * v17 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
        {
          v26 = *(unsigned int *)(v25 + 60);
          SlowCase = *(_QWORD *)(v25 + 24);
          if (SlowCase >= *(_QWORD *)(v25 + 32))
          {
            SlowCase = *(_QWORD *)(v25 + 40);
            if ((SlowCase & 1) == 0)
            {
              v73 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v25 + 48);
              *(_QWORD *)(v25 + 32) = SlowCase + HIDWORD(v73);
              *(_QWORD *)(v25 + 40) = SlowCase + (int)v73;
              *(_QWORD *)(v25 + 24) = SlowCase + v26;
LABEL_28:
              v28 = v24 >> 3;
              if ((v24 >> 3) >= 0x10000001)
              {
                __break(0xC471u);
                JUMPOUT(0x19848A430);
              }
              v29 = (unsigned int *)(SlowCase + 8 * v17);
              v30 = v29 + 2;
              *v29 = v14;
              v29[1] = v28;
              if (v18 == 6)
              {
                if (v28 > 0x63)
                {
                  v33 = &memset_pattern_2;
                }
                else
                {
                  if (!(_DWORD)v28)
                    goto LABEL_33;
                  v33 = &unk_199124A40;
                }
                memset_pattern16(v29 + 2, v33, v24 & 0x7FFFFFFF8);
              }
              else if (v28 > 0x63)
              {
                v39 = (__n128 *)(v29 + 2);
                a9.n128_u64[0] = 0;
                while (v39 != (__n128 *)((char *)v30 + (v24 & 0x7FFFFFFC0)))
                {
                  *v39 = a9;
                  v39[1] = a9;
                  v39[2] = a9;
                  v39[3] = a9;
                  v39 += 4;
                }
                while (v39 != (__n128 *)((char *)v30 + (v24 & 0x7FFFFFFF8)))
                {
                  v39->n128_u64[0] = 0;
                  v39 = (__n128 *)((char *)v39 + 8);
                }
              }
              else if ((_DWORD)v28)
              {
                bzero(v29 + 2, v24 & 0x7FFFFFFF8);
              }
LABEL_33:
              result = *v13;
              if (*v13 >= v13[1])
              {
                result = v13[2];
                if ((result & 1) != 0)
                {
                  JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
                  result = JSC::LocalAllocator::allocateSlowCase(v10 + 37560, v10 + 192, 16, 0, 0, v87, v88, v89);
LABEL_35:
                  *(_DWORD *)result = 0;
                  v32 = *(_DWORD *)(a2 + 8);
                  *(_DWORD *)result = a2 >> 4;
                  *(_DWORD *)(result + 4) = v32;
                  *(_QWORD *)(result + 8) = v30;
                  if (!*(_BYTE *)(v10 + 755))
                    return result;
                  goto LABEL_36;
                }
                v72 = *(_QWORD *)(result + 8) ^ v13[3];
                v13[1] = result + HIDWORD(v72);
                v13[2] = result + (int)v72;
              }
              *v13 = result + 16;
              goto LABEL_35;
            }
            v101 = v17;
            v90 = *(unsigned int *)(v25 + 60);
            JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, 0, a5, a6, a7, a8);
            v13 = (unint64_t *)(v10 + 37584);
            v91 = v90;
            v17 = v101;
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v25, v10 + 192, v91, 0, 1, v92, v93, v94);
          }
          else
          {
            *(_QWORD *)(v25 + 24) = SlowCase + v26;
          }
        }
        else
        {
          SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v10 + 6648, (JSC *)v10, a3, 0, a5, a6, a7, a8);
        }
        if (SlowCase)
          goto LABEL_28;
      }
      goto LABEL_79;
    }
    v59 = *(_QWORD *)(v10 + 6768);
    if (v59)
    {
      Slow = *(_QWORD *)(v59 + 24);
      if (Slow >= *(_QWORD *)(v59 + 32))
      {
        v85 = *(unsigned int *)(v59 + 60);
        v61 = *(__n128 **)(v59 + 40);
        if ((v61 & 1) == 0)
        {
          v86 = v61->n128_u64[1] ^ *(_QWORD *)(v59 + 48);
          *(_QWORD *)(v59 + 32) = (char *)v61 + HIDWORD(v86);
          *(_QWORD *)(v59 + 40) = (char *)v61 + (int)v86;
          *(_QWORD *)(v59 + 24) = (char *)v61 + v85;
          Slow = (unint64_t)v61;
          goto LABEL_73;
        }
        JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, 0, a5, a6, a7, a8);
        Slow = JSC::LocalAllocator::allocateSlowCase(v59, v10 + 192, v85, 0, 1, v98, v99, v100);
      }
      else
      {
        *(_QWORD *)(v59 + 24) = Slow + *(unsigned int *)(v59 + 60);
      }
    }
    else
    {
      Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 6648, (JSC *)v10, 0x38uLL, 0, a5, a6, a7, a8);
    }
    if (!Slow)
    {
LABEL_79:
      OutOfMemoryError = JSC::createOutOfMemoryError(a1, (JSC::JSGlobalObject *)a2);
      v71 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v71 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)OutOfMemoryError, 0, v65, v66, v67, v68, v69);
      }
      JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)a1, v71, v70, v65, v66, v67, v68, v69);
      return 0;
    }
    v61 = (__n128 *)Slow;
LABEL_73:
    *(_QWORD *)Slow = v14 | 0x400000000;
    v62 = v61;
    v63 = v61;
    a9.n128_u64[0] = 0;
    while (v61 != v63)
    {
      *v61 = a9;
      v61[1] = a9;
      v61[2] = a9;
      v61[3] = a9;
      v61 += 4;
    }
    while (v61 != v62)
    {
      v61->n128_u64[0] = 0;
      v61 = (__n128 *)((char *)v61 + 8);
    }
    *(_OWORD *)(Slow + 8) = 0u;
    v30 = (_DWORD *)(Slow + 8);
    *((_OWORD *)v30 + 1) = 0u;
    *((_OWORD *)v30 + 2) = 0u;
    goto LABEL_33;
  }
  result = *v13;
  if (*v13 >= *(_QWORD *)(v10 + 37592))
  {
    result = *(_QWORD *)(v10 + 37600);
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v10 + 37560, v10 + 192, 16, 0, 0, v95, v96, v97);
    }
    else
    {
      v82 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v10 + 37608);
      *(_QWORD *)(v10 + 37592) = result + HIDWORD(v82);
      *(_QWORD *)(v10 + 37600) = result + (int)v82;
      *v13 = result + 16;
    }
  }
  else
  {
    *v13 = result + 16;
  }
  *(_DWORD *)result = 0;
  v38 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v38;
  *(_QWORD *)(result + 8) = a4;
  if (*(_BYTE *)(v10 + 755))
LABEL_36:
    __dmb(0xAu);
  return result;
}

unint64_t JSC::JSArray::createWithButterfly(uint64_t a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  uint64_t v21;

  v8 = *(_QWORD *)(a1 + 37584);
  if (v8 < *(_QWORD *)(a1 + 37592))
    goto LABEL_2;
  v8 = *(_QWORD *)(a1 + 37600);
  if ((v8 & 1) == 0)
  {
    v11 = *(_QWORD *)(v8 + 8) ^ *(_QWORD *)(a1 + 37608);
    *(_QWORD *)(a1 + 37592) = v8 + HIDWORD(v11);
    *(_QWORD *)(a1 + 37600) = v8 + (int)v11;
LABEL_2:
    *(_QWORD *)(a1 + 37584) = v8 + 16;
    goto LABEL_3;
  }
  v12 = a1 + 37560;
  v13 = a1 + 192;
  v21 = a1;
  v14 = a4;
  v15 = a3;
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v12, v13, 16, (uint64_t)a2, 0, v17, v18, v19);
  a3 = v15;
  a4 = v14;
  v8 = SlowCase;
  a1 = v21;
LABEL_3:
  *(_DWORD *)v8 = 0;
  v9 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v8 = a3 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = a4;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return v8;
}

unint64_t operationNewArrayWithSizeAndHint(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  unint64_t *v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t SlowCase;
  unint64_t v29;
  unsigned int *v30;
  _DWORD *v31;
  unint64_t result;
  int v33;
  const void *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  __n128 *v40;
  uint64_t v41;
  const WTF::String *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  unint64_t Slow;
  __n128 *v59;
  __n128 *v60;
  __n128 *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  WTF::StringImpl *v90;
  _QWORD var58[12];

  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v10 + 40) = var58[11];
  var58[0] = v10;
  if ((a3 & 0x80000000) != 0)
  {
    v41 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v41 = 0x3A00000002;
    *(_QWORD *)(v41 + 8) = "Array length must be a positive integer of safe magnitude.";
    *(_DWORD *)(v41 + 16) = 4;
    v90 = (WTF::StringImpl *)v41;
    v43 = JSC::createRangeError((unint64_t)a1, &v90, v42);
    JSC::VM::throwException((JSC::VM *)v10, a1, v43, v44, v45, v46, v47, v48);
    v56 = v90;
    v90 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
      {
        WTF::StringImpl::~StringImpl(v56, v49, v50, v51, v52, v53, v54, v55);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v56 -= 2;
      }
    }
    return 0;
  }
  v13 = (unint64_t *)(v10 + 37584);
  if (!a5)
  {
    v14 = a3;
    v15 = *(unsigned __int16 *)(a2 + 24);
    if (v15 == 65534
      || (v15 == 0xFFFF ? (v16 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84)) : (v16 = *(unsigned __int16 *)(a2 + 24)),
          v16 < 64))
    {
      v17 = 0;
    }
    else if ((v16 - 63) >= 5)
    {
      v35 = (v16 - 64) | ((v16 - 64) >> 1) | (((v16 - 64) | ((v16 - 64) >> 1)) >> 2);
      v36 = v35 | (v35 >> 4) | ((v35 | (v35 >> 4)) >> 8);
      v17 = (v36 | HIWORD(v36)) + 1;
    }
    else
    {
      v17 = 4;
    }
    v18 = *(_BYTE *)(a2 + 8) & 0xE;
    if (v18 <= 9)
    {
      if (a4 <= 0x10000000)
      {
        if (v15 == 65534)
          goto LABEL_14;
        if (v15 == 0xFFFF)
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
        if (v15 < 64)
        {
LABEL_14:
          v19 = 0;
        }
        else if ((v15 - 63) >= 5)
        {
          v37 = (v15 - 64) | ((v15 - 64) >> 1) | (((v15 - 64) | ((v15 - 64) >> 1)) >> 2);
          v38 = v37 | (v37 >> 4) | ((v37 | (v37 >> 4)) >> 8);
          v19 = (v38 | HIWORD(v38)) + 1;
        }
        else
        {
          v19 = 4;
        }
        v20 = v19;
        if (a4 <= 3)
          LODWORD(v21) = 3;
        else
          LODWORD(v21) = a4;
        if ((_DWORD)a4)
          v21 = v21;
        else
          v21 = 5;
        v22 = v21 + v19;
        v23 = 8 * v22;
        if (v22 > 9)
        {
          if (v22 > 0x3EB)
            v24 = v23 + 8;
          else
            v24 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                  + (((unint64_t)(v23 + 23) >> 2) & 0x7FFFFFFFCLL));
        }
        else
        {
          v24 = (v23 + 23) & 0x1FFFFFFFF0;
        }
        v25 = v24 - 8 * v20 - 8;
        a3 = (v25 & 0x7FFFFFFF8) + 8 * v17 + 8;
        if (a3 <= 0x1F60
          && (v26 = *(_QWORD *)(v10 + ((((v25 & 0x7FFFFFFF8) + 8 * v17 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
        {
          v27 = *(unsigned int *)(v26 + 60);
          SlowCase = *(_QWORD *)(v26 + 24);
          if (SlowCase >= *(_QWORD *)(v26 + 32))
          {
            SlowCase = *(_QWORD *)(v26 + 40);
            if ((SlowCase & 1) == 0)
            {
              v63 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v26 + 48);
              *(_QWORD *)(v26 + 32) = SlowCase + HIDWORD(v63);
              *(_QWORD *)(v26 + 40) = SlowCase + (int)v63;
              *(_QWORD *)(v26 + 24) = SlowCase + v27;
LABEL_28:
              v29 = v25 >> 3;
              if ((v25 >> 3) >= 0x10000001)
              {
                __break(0xC471u);
                JUMPOUT(0x19848AC14);
              }
              v30 = (unsigned int *)(SlowCase + 8 * v17);
              v31 = v30 + 2;
              *v30 = v14;
              v30[1] = v29;
              if (v18 == 6)
              {
                if (v29 > 0x63)
                {
                  v34 = &memset_pattern_2;
                }
                else
                {
                  if (!(_DWORD)v29)
                    goto LABEL_33;
                  v34 = &unk_199124A40;
                }
                memset_pattern16(v30 + 2, v34, v25 & 0x7FFFFFFF8);
              }
              else if (v29 > 0x63)
              {
                v40 = (__n128 *)(v30 + 2);
                a9.n128_u64[0] = 0;
                while (v40 != (__n128 *)((char *)v31 + (v25 & 0x7FFFFFFC0)))
                {
                  *v40 = a9;
                  v40[1] = a9;
                  v40[2] = a9;
                  v40[3] = a9;
                  v40 += 4;
                }
                while (v40 != (__n128 *)((char *)v31 + (v25 & 0x7FFFFFFF8)))
                {
                  v40->n128_u64[0] = 0;
                  v40 = (__n128 *)((char *)v40 + 8);
                }
              }
              else if ((_DWORD)v29)
              {
                bzero(v30 + 2, v25 & 0x7FFFFFFF8);
              }
LABEL_33:
              result = *v13;
              if (*v13 >= v13[1])
              {
                result = v13[2];
                if ((result & 1) != 0)
                {
                  JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
                  result = JSC::LocalAllocator::allocateSlowCase(v10 + 37560, v10 + 192, 16, 0, 0, v75, v76, v77);
LABEL_35:
                  *(_DWORD *)result = 0;
                  v33 = *(_DWORD *)(a2 + 8);
                  *(_DWORD *)result = a2 >> 4;
                  *(_DWORD *)(result + 4) = v33;
                  *(_QWORD *)(result + 8) = v31;
                  if (!*(_BYTE *)(v10 + 755))
                    return result;
                  goto LABEL_36;
                }
                v62 = *(_QWORD *)(result + 8) ^ v13[3];
                v13[1] = result + HIDWORD(v62);
                v13[2] = result + (int)v62;
              }
              *v13 = result + 16;
              goto LABEL_35;
            }
            v89 = v17;
            v78 = *(unsigned int *)(v26 + 60);
            JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, a4, 0, a6, a7, a8);
            v13 = (unint64_t *)(v10 + 37584);
            v79 = v78;
            v17 = v89;
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v26, v10 + 192, v79, 0, 1, v80, v81, v82);
          }
          else
          {
            *(_QWORD *)(v26 + 24) = SlowCase + v27;
          }
        }
        else
        {
          SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v10 + 6648, (JSC *)v10, a3, 0, 0, a6, a7, a8);
        }
        if (SlowCase)
          goto LABEL_28;
      }
      goto LABEL_76;
    }
    v57 = *(_QWORD *)(v10 + 6768);
    if (v57)
    {
      Slow = *(_QWORD *)(v57 + 24);
      if (Slow >= *(_QWORD *)(v57 + 32))
      {
        v73 = *(unsigned int *)(v57 + 60);
        v59 = *(__n128 **)(v57 + 40);
        if ((v59 & 1) == 0)
        {
          v74 = v59->n128_u64[1] ^ *(_QWORD *)(v57 + 48);
          *(_QWORD *)(v57 + 32) = (char *)v59 + HIDWORD(v74);
          *(_QWORD *)(v57 + 40) = (char *)v59 + (int)v74;
          *(_QWORD *)(v57 + 24) = (char *)v59 + v73;
          Slow = (unint64_t)v59;
          goto LABEL_70;
        }
        JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, a4, 0, a6, a7, a8);
        Slow = JSC::LocalAllocator::allocateSlowCase(v57, v10 + 192, v73, 0, 1, v86, v87, v88);
      }
      else
      {
        *(_QWORD *)(v57 + 24) = Slow + *(unsigned int *)(v57 + 60);
      }
    }
    else
    {
      Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 6648, (JSC *)v10, 0x38uLL, 0, 0, a6, a7, a8);
    }
    if (!Slow)
    {
LABEL_76:
      JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)var58);
      return 0;
    }
    v59 = (__n128 *)Slow;
LABEL_70:
    *(_QWORD *)Slow = v14 | 0x400000000;
    v60 = v59;
    v61 = v59;
    a9.n128_u64[0] = 0;
    while (v59 != v61)
    {
      *v59 = a9;
      v59[1] = a9;
      v59[2] = a9;
      v59[3] = a9;
      v59 += 4;
    }
    while (v59 != v60)
    {
      v59->n128_u64[0] = 0;
      v59 = (__n128 *)((char *)v59 + 8);
    }
    *(_OWORD *)(Slow + 8) = 0u;
    v31 = (_DWORD *)(Slow + 8);
    *((_OWORD *)v31 + 1) = 0u;
    *((_OWORD *)v31 + 2) = 0u;
    goto LABEL_33;
  }
  result = *v13;
  if (*v13 >= *(_QWORD *)(v10 + 37592))
  {
    result = *(_QWORD *)(v10 + 37600);
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v10 + 37560, v10 + 192, 16, 0, 0, v83, v84, v85);
    }
    else
    {
      v72 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v10 + 37608);
      *(_QWORD *)(v10 + 37592) = result + HIDWORD(v72);
      *(_QWORD *)(v10 + 37600) = result + (int)v72;
      *v13 = result + 16;
    }
  }
  else
  {
    *v13 = result + 16;
  }
  *(_DWORD *)result = 0;
  v39 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v39;
  *(_QWORD *)(result + 8) = a5;
  if (*(_BYTE *)(v10 + 755))
LABEL_36:
    __dmb(0xAu);
  return result;
}

uint64_t operationNewArrayBuffer(JSC::CommonSlowPaths *a1, JSC::VM *a2, JSC::Structure *a3, JSC::JSImmutableButterfly *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  return JSC::CommonSlowPaths::allocateNewArrayBuffer(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::CommonSlowPaths::allocateNewArrayBuffer(JSC::CommonSlowPaths *this, JSC::VM *a2, JSC::Structure *a3, JSC::JSImmutableButterfly *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::CommonSlowPaths *v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char *v20;
  char *v21;
  JSC::VM *v23;
  uint64_t SlowCase;

  v9 = this;
  v10 = (uint64_t *)((char *)this + 37584);
  v11 = *((unsigned __int8 *)a3 + 4);
  if ((v11 & 0x10) != 0)
    v12 = ((v11 & 0xE) + 10) >> 1;
  else
    v12 = (v11 >> 1) & 7;
  v13 = *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v12 + 852);
  if (v13)
    v14 = 16 * (v13 & 0xFFFFFFFE);
  else
    v14 = 0;
  v15 = (char *)a3 + 16;
  v16 = *v10;
  if ((unint64_t)*v10 < *((_QWORD *)this + 4699))
    goto LABEL_8;
  v16 = *((_QWORD *)this + 4700);
  if ((v16 & 1) == 0)
  {
    v19 = *(_QWORD *)(v16 + 8) ^ *((_QWORD *)this + 4701);
    *((_QWORD *)this + 4699) = v16 + HIDWORD(v19);
    *((_QWORD *)this + 4700) = v16 + (int)v19;
LABEL_8:
    *v10 = v16 + 16;
    goto LABEL_9;
  }
  v20 = (char *)this + 37560;
  v21 = (char *)this + 192;
  v23 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v20, v21, 16, 0, 0);
  a2 = v23;
  v9 = this;
  v16 = SlowCase;
LABEL_9:
  *(_DWORD *)v16 = 0;
  v17 = *(_DWORD *)(v14 + 8);
  *(_DWORD *)v16 = v14 >> 4;
  *(_DWORD *)(v16 + 4) = v17;
  *(_QWORD *)(v16 + 8) = v15;
  if (*((_BYTE *)v9 + 755))
    __dmb(0xAu);
  if ((JSC::VM *)v14 != a2)
    JSC::JSObject::switchToSlowPutArrayStorage((unsigned __int8 *)v16, v9, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  return v16;
}

JSC::JSCell *operationNewInt8ArrayWithSize(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  uint64_t v11;
  const WTF::String *v12;
  unint64_t RangeError;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *var18[4];

  v9 = (WTF::StringImpl **)*((_QWORD *)a1 + 7);
  v9[5] = var18[3];
  if ((a3 & 0x8000000000000000) != 0)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v11 = 0x1C00000002;
    *(_QWORD *)(v11 + 8) = "Requested length is negative";
    *(_DWORD *)(v11 + 16) = 4;
    var18[0] = (WTF::StringImpl *)v11;
    RangeError = JSC::createRangeError((unint64_t)a1, var18, v12);
    JSC::VM::throwException((JSC::VM *)v9, a1, RangeError, v14, v15, v16, v17, v18);
    v26 = var18[0];
    var18[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    return 0;
  }
  else if (a4)
  {
    return JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createWithFastVector(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    return (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::create(a1, a2, a3, 0, a5, a6, a7, a8);
  }
}

unint64_t operationNewInt8ArrayWithOneArgument(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD var38[8];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var38[7];
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 38 && *(_BYTE *)(*(_QWORD *)(a2 + 16) + 64))
  {
    v11 = *(_QWORD *)(a1 + 1680);
    if ((v11 & 1) == 0)
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v17 = (uint64_t *)(a1 - 16);
    v15 = *v17;
    v16 = a1 + 1680;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a1 + 1664);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v14 = (uint64_t *)(a1 - 16);
    v15 = *v14;
    v16 = a1 + 1664;
LABEL_9:
    var38[0] = v15;
    var38[1] = a1;
    var38[2] = v16;
    v11 = v13(var38);
  }
  return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
}

unint64_t JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM **a1, uint64_t a2, uint64_t this, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  unsigned int v13;
  JSC::JSObject *v14;
  uint64_t v15;
  unint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::VM *v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t Uninitialized;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  JSC::VM *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  JSC::JSArrayBufferView *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int8x16_t v85;
  int v86;
  JSC::JSObject *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  _BYTE *v92;
  uint64_t v93;
  unsigned int v94;
  unsigned __int16 *v95;
  uint64_t v96;
  unsigned int v97;
  BOOL v98;
  int v99;
  unsigned int *v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const WTF::String *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unsigned __int16 *v119;
  uint64_t v120;
  unsigned int v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned __int8 *v135;
  int v136;
  double v137;
  const unsigned __int8 *v138;
  unsigned __int8 *v139;
  uint64_t v140;
  unsigned int v141;
  JSC::VM *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  unsigned __int8 *v149;
  uint64_t v150;
  unsigned int v151;
  JSC::VM *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  int v159;
  char *v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  JSC::JSArrayBufferView *v165;
  uint64_t v166;
  int v167;
  char v168;
  JSC::VM *v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  JSC::VM *v173;
  JSC::JSObject *v174;
  JSC::JSObject *v175;
  char v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v11 = a1[7];
  v173 = v11;
  v174 = (JSC::JSObject *)this;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_25;
  v13 = *(unsigned __int8 *)(this + 5);
  if (v13 != 38)
  {
    if (v13 >= 0x17)
    {
      if (v13 - 39 <= 0xA)
      {
        v26 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)this, a2, this, a4, a5, a6, a7, a8);
        Uninitialized = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v26, v27, v28, v29, v30, v31);
        if (!Uninitialized)
          return 0;
        v39 = Uninitialized;
        LOBYTE(v175) = 0;
        v176 = 0;
        if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(this, (unint64_t *)&v175, v33, v34, v35, v36, v37, v38))
        {
          v41 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
          v42 = (unint64_t)a1;
          v43 = 72;
LABEL_23:
          JSC::throwTypeError(v42, &v173, (uint64_t)v41, v43);
          return 0;
        }
        if (*(unsigned __int8 *)(this + 5) - 39 >= 9)
        {
          v41 = "Content types of source and new typed array are different";
          v42 = (unint64_t)a1;
          v43 = 58;
          goto LABEL_23;
        }
        v57 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setFromTypedArray(v39, (unint64_t)a1, 0, this, 0, v26, 1, v40);
LABEL_34:
        if (v57)
          return v39;
        else
          return 0;
      }
      v52 = v11;
      if (this)
      {
        v52 = v11;
        if (v13 == 36)
        {
          if (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)this, a2, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8))
          {
            if ((*(_BYTE *)(this + 4) & 0xE) != 0)
              v53 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
            else
              v53 = 0;
LABEL_32:
            v54 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v53, a4, a5, a6, a7, a8);
            if (!v54)
              return 0;
            v39 = v54;
            v57 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setFromArrayLike(v54, (unint64_t)a1, 0, this, 0, v53, v55, v56);
            goto LABEL_34;
          }
          v52 = a1[7];
        }
      }
      v163 = 0xFFFFFFFF00000000;
      v165 = 0;
      v166 = 0;
      v164 = this;
      v167 = 196608;
      v168 = 0;
      v171 = 0;
      v172 = 0;
      v169 = v11;
      ++*((_DWORD *)v11 + 1);
      v170 = 1;
      v160 = (char *)v11 + 41952;
      v60 = *(_QWORD *)(*((_QWORD *)v11 + 5244) + 1768);
      v61 = this + 6;
      v62 = v60 >> 4;
      if ((*(_BYTE *)(this + 6) & 8) == 0)
      {
        v63 = (JSC::JSArrayBufferView *)this;
        while (1)
        {
          v64 = *(_DWORD *)v63 & 0xFFFFFFFE;
          v65 = 16 * v64;
          if ((_DWORD)v62)
          {
            if ((v62 & ~*(_DWORD *)(16 * v64 + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v65, v52, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (v66)
              {
                v175 = (JSC::JSObject *)v60;
                v67 = JSC::PropertyTable::get(v66, (uint64_t *)&v175);
                a6 = v67;
                if ((_DWORD)v67 != -1)
                {
                  a5 = HIDWORD(v67);
                  if ((int)v67 <= 63)
                  {
                    v78 = (uint64_t)v63 + 16;
                    v79 = v67 << 32;
                  }
                  else
                  {
                    v78 = *((_QWORD *)v63 + 1) - 8;
                    v79 = 0x3F00000000 - (v67 << 32);
                  }
                  a4 = *(_QWORD *)(v78 + (v79 >> 29));
                  if ((a4 & 0xFFFE000000000002) == 0)
                  {
                    v80 = *(unsigned __int8 *)(a4 + 5);
                    if (v80 == 5)
                    {
                      v100 = (unsigned int *)v63;
                      goto LABEL_129;
                    }
                    if (v80 == 6)
                    {
                      v103 = *(_DWORD *)(v65 + 16) & 3;
                      v104 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v106 = *(_QWORD *)(a4 + 24);
                        v105 = *(_QWORD *)(a4 + 32);
                        v161 = *(WTF::StringImpl **)(a4 + 8);
                        v162 = v104;
                        LODWORD(v163) = HIDWORD(v67);
                        v165 = v63;
                        goto LABEL_141;
                      }
                      v161 = *(WTF::StringImpl **)(a4 + 8);
                      v162 = v104;
                      LODWORD(v163) = HIDWORD(v67);
                      v165 = v63;
                      goto LABEL_172;
                    }
                  }
                  v161 = (WTF::StringImpl *)a4;
                  v165 = v63;
LABEL_84:
                  v163 = __PAIR64__(a6, a5);
                  LOWORD(v167) = 257;
                  goto LABEL_85;
                }
              }
            }
          }
          if ((*(_BYTE *)v61 & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v63, v52, v60, (uint64_t)&v161) & 1) != 0)
          {
            goto LABEL_85;
          }
          v68 = *(_QWORD *)(v65 + 48);
          if (!v68)
            v68 = *((_QWORD *)v63 + 2);
          if ((v68 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v68 + 5) < 0x17u)
            break;
          v61 = v68 + 6;
          v63 = (JSC::JSArrayBufferView *)v68;
          if ((*(_BYTE *)(v68 + 6) & 8) != 0)
            goto LABEL_59;
        }
        if (!v60)
          goto LABEL_85;
        v91 = *(_DWORD *)(v60 + 16);
        if ((v91 & 0x20) != 0)
          goto LABEL_85;
        v92 = *(_BYTE **)(v60 + 8);
        v93 = *(unsigned int *)(v60 + 4);
        if ((v91 & 4) != 0)
        {
          if (!(_DWORD)v93)
            goto LABEL_85;
          v94 = *v92 - 48;
          if (v94 > 9 || v93 >= 2 && *v92 == 48)
            goto LABEL_85;
          v139 = v92 + 1;
          v140 = v93 - 1;
          while (v140)
          {
            if (v94 <= 0x19999999)
            {
              v141 = *v139 - 48;
              if (v141 <= 9)
              {
                v98 = __CFADD__(v141, 10 * v94);
                v94 = v141 + 10 * v94;
                ++v139;
                --v140;
                if (!v98)
                  continue;
              }
            }
            goto LABEL_85;
          }
        }
        else
        {
          if (!(_DWORD)v93)
            goto LABEL_85;
          v94 = *(unsigned __int16 *)v92 - 48;
          if (v94 > 9 || *(_WORD *)v92 == 48 && v93 > 1)
            goto LABEL_85;
          v95 = (unsigned __int16 *)(v92 + 2);
          v96 = v93 - 1;
          while (v96)
          {
            if (v94 <= 0x19999999)
            {
              v97 = *v95 - 48;
              if (v97 <= 9)
              {
                v98 = __CFADD__(v97, 10 * v94);
                v94 = v97 + 10 * v94;
                ++v95;
                --v96;
                if (!v98)
                  continue;
              }
            }
            goto LABEL_85;
          }
        }
        if (v94 != -1)
        {
          v142 = a1[7];
          v143 = v94;
          v144 = this;
          while (1)
          {
            v145 = 16 * (*(_DWORD *)v144 & 0xFFFFFFFE);
            v146 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v145 + 0x4C) + 0x70))(v144, a1, v143, &v161);
            if (*((_DWORD *)v142 + 20))
            {
              if (((JSC::VM::hasExceptionsAfterHandlingTraps(v142, a2, this, a4, a5, a6, a7, a8) | v146) & 1) != 0)
                break;
            }
            else if ((v146 & 1) != 0)
            {
              break;
            }
            if (BYTE2(v167) == 3)
            {
              if (v168)
                break;
              v147 = *(unsigned __int8 *)(v144 + 5);
              if (v147 != 61)
              {
LABEL_241:
                if ((v147 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v144, a2, this, a4, a5, a6, a7, a8) <= v143)
                {
                  break;
                }
              }
            }
            else
            {
              v147 = *(unsigned __int8 *)(v144 + 5);
              if (v147 != 61)
                goto LABEL_241;
              if (BYTE2(v167) == 1)
                break;
            }
            if ((*(_WORD *)(v145 + 12) & 0x800) == 0 || BYTE2(v167) == 3)
            {
              v148 = *(_QWORD *)(16 * (*(_DWORD *)v144 & 0xFFFFFFFE) + 0x30);
              if (!v148)
                v148 = *(_QWORD *)(v144 + 16);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v144 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v148 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v144 & 0xFFFFFFFE)
                                                                                        + 0x4C)
                                                                      + 0xB0))(v144, a1);
              }
              else
              {
                v148 = *(_QWORD *)(16 * (*(_DWORD *)v144 & 0xFFFFFFFE) + 0x30);
                if (!v148)
                  v148 = *(_QWORD *)(v144 + 16);
              }
              if (*((_DWORD *)v142 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v142, a2, this, a4, a5, a6, a7, a8))
              {
                break;
              }
            }
            if ((v148 & 0xFFFE000000000002) == 0)
            {
              v144 = v148;
              if (*(unsigned __int8 *)(v148 + 5) > 0x16u)
                continue;
            }
            break;
          }
        }
LABEL_85:
        v24 = v173;
        if (*((_DWORD *)v173 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v173, a2, this, a4, a5, a6, a7, a8))
          goto LABEL_153;
        if (v170)
        {
          v81 = *((_DWORD *)v169 + 1);
          if (!v81)
          {
            __break(0xC471u);
            JUMPOUT(0x19848BA1CLL);
          }
          *((_DWORD *)v169 + 1) = v81 - 1;
          v169 = 0;
          v170 = 0;
        }
        v84 = JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v160 + 2712), a4, a5, a6, a7, a8);
        if (*((_DWORD *)v24 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v24, v82, v83, a4, a5, a6, a7, a8))
            goto LABEL_153;
        }
        if ((v84 & 0xFFFFFFFFFFFFFFF7) == 2)
        {
          v86 = BYTE1(v167);
        }
        else if (v84 != JSC::JSGlobalObject::arrayProtoValuesFunction(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                 + 0x28))
               || (v86 = BYTE1(v167), (BYTE1(v167) & 0xFE) == 2)
               || v168
               || (*(_BYTE *)(this + 4) & 0xEu) > 9
               || ((v101 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2216),
                    (v101 & 1) != 0)
                 ? (v102 = (v101 >> 1) & 3)
                 : (v102 = *(unsigned __int8 *)(v101 + 4)),
                   v102 == 2))
        {
          v24 = (JSC::VM *)JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>((JSC::JSGlobalObject *)a1, a2, this, v84, a5, a6, a7, a8);
          v53 = 0;
          v90 = 0;
          goto LABEL_121;
        }
        if (v86)
        {
          if (v86 == 1)
          {
            v87 = v161;
          }
          else if (v86 == 2)
          {
            v87 = (JSC::JSObject *)JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v161, (JSC::JSGlobalObject *)a1, v83, a4, a5, a6, a7, a8);
          }
          else
          {
            v87 = (JSC::JSObject *)JSC::PropertySlot::customGetter((uint64_t)&v161, a1[7], *(WTF::StringImpl **)(*(_QWORD *)v160 + 1768));
          }
          v175 = v87;
          if (*((_DWORD *)v24 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v24, v82, v83, a4, a5, a6, a7, a8))
          {
LABEL_153:
            v53 = 0;
LABEL_154:
            v90 = 0;
            v24 = 0;
LABEL_121:
            if (v170)
            {
              v99 = *((_DWORD *)v169 + 1);
              if (!v99)
              {
                __break(0xC471u);
                JUMPOUT(0x19848BA3CLL);
              }
              *((_DWORD *)v169 + 1) = v99 - 1;
            }
            if (!v90)
              return (unint64_t)v24;
            goto LABEL_32;
          }
          v53 = JSC::JSValue::toLength(&v175, (JSC::JSGlobalObject *)a1, v83, a4, a5, a6, a7, a8, v85);
          if (*((_DWORD *)v24 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v24, v88, v89, a4, a5, a6, a7, a8))
            goto LABEL_154;
        }
        else
        {
          v53 = 0;
        }
        v90 = 1;
        goto LABEL_121;
      }
      v68 = this;
LABEL_59:
      if (v60)
      {
        v69 = *(_DWORD *)(v60 + 16);
        if ((v69 & 0x20) == 0)
        {
          v70 = *(_BYTE **)(v60 + 8);
          v71 = *(unsigned int *)(v60 + 4);
          if ((v69 & 4) != 0)
          {
            if ((_DWORD)v71)
            {
              v72 = *v70 - 48;
              if (v72 <= 9 && (v71 < 2 || *v70 != 48))
              {
                v149 = v70 + 1;
                v150 = v71 - 1;
                while (v150)
                {
                  if (v72 <= 0x19999999)
                  {
                    v151 = *v149 - 48;
                    if (v151 <= 9)
                    {
                      v98 = __CFADD__(v151, 10 * v72);
                      v72 = v151 + 10 * v72;
                      ++v149;
                      --v150;
                      if (!v98)
                        continue;
                    }
                  }
                  goto LABEL_64;
                }
LABEL_280:
                if (v72 != -1)
                {
                  v152 = a1[7];
                  v153 = v72;
                  v154 = this;
                  while (1)
                  {
                    v155 = 16 * (*(_DWORD *)v154 & 0xFFFFFFFE);
                    v156 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v155 + 0x4C) + 0x70))(v154, a1, v153, &v161);
                    if (*((_DWORD *)v152 + 20))
                    {
                      if (((JSC::VM::hasExceptionsAfterHandlingTraps(v152, a2, this, a4, a5, a6, a7, a8) | v156) & 1) != 0)
                        goto LABEL_85;
                    }
                    else if ((v156 & 1) != 0)
                    {
                      goto LABEL_85;
                    }
                    if (BYTE2(v167) == 3)
                    {
                      if (v168)
                        goto LABEL_85;
                      v157 = *(unsigned __int8 *)(v154 + 5);
                      if (v157 != 61)
                      {
LABEL_286:
                        if ((v157 - 39) <= 0xA
                          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v154, a2, this, a4, a5, a6, a7, a8) <= v153)
                        {
                          goto LABEL_85;
                        }
                      }
                    }
                    else
                    {
                      v157 = *(unsigned __int8 *)(v154 + 5);
                      if (v157 != 61)
                        goto LABEL_286;
                      if (BYTE2(v167) == 1)
                        goto LABEL_85;
                    }
                    if ((*(_WORD *)(v155 + 12) & 0x800) == 0 || BYTE2(v167) == 3)
                    {
                      v158 = *(_QWORD *)(16 * (*(_DWORD *)v154 & 0xFFFFFFFE) + 0x30);
                      if (!v158)
                        v158 = *(_QWORD *)(v154 + 16);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v154 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v158 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v154 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0xB0))(v154, a1);
                      }
                      else
                      {
                        v158 = *(_QWORD *)(16 * (*(_DWORD *)v154 & 0xFFFFFFFE) + 0x30);
                        if (!v158)
                          v158 = *(_QWORD *)(v154 + 16);
                      }
                      if (*((_DWORD *)v152 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v152, a2, this, a4, a5, a6, a7, a8))
                      {
                        goto LABEL_85;
                      }
                    }
                    if ((v158 & 0xFFFE000000000002) == 0)
                    {
                      v154 = v158;
                      if (*(unsigned __int8 *)(v158 + 5) > 0x16u)
                        continue;
                    }
                    goto LABEL_85;
                  }
                }
              }
            }
          }
          else if ((_DWORD)v71)
          {
            v72 = *(unsigned __int16 *)v70 - 48;
            if (v72 <= 9 && (*(_WORD *)v70 != 48 || v71 <= 1))
            {
              v119 = (unsigned __int16 *)(v70 + 2);
              v120 = v71 - 1;
              while (v120)
              {
                if (v72 <= 0x19999999)
                {
                  v121 = *v119 - 48;
                  if (v121 <= 9)
                  {
                    v98 = __CFADD__(v121, 10 * v72);
                    v72 = v121 + 10 * v72;
                    ++v119;
                    --v120;
                    if (!v98)
                      continue;
                  }
                }
                goto LABEL_64;
              }
              goto LABEL_280;
            }
          }
        }
      }
LABEL_64:
      v52 = a1[7];
      while (1)
      {
        v73 = 16 * (*(_DWORD *)v68 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v68 + 6) & 8) != 0)
        {
          v159 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x4C) + 0x68))(v68, a1, v60, &v161);
          if (*((_DWORD *)v52 + 20))
          {
            if (((JSC::VM::hasExceptionsAfterHandlingTraps(v52, a2, this, a4, a5, a6, a7, a8) | v159) & 1) != 0)
              goto LABEL_85;
          }
          else if ((v159 & 1) != 0)
          {
            goto LABEL_85;
          }
          if (BYTE2(v167) == 3)
          {
            if (v168)
              goto LABEL_85;
            v132 = *(unsigned __int8 *)(v68 + 5);
            if (v132 != 61)
            {
LABEL_196:
              if (!v60)
                goto LABEL_71;
              if ((v132 - 50) < 0xFFFFFFF5)
                goto LABEL_71;
              v133 = *(_DWORD *)(v60 + 16);
              if ((v133 & 0x20) != 0)
                goto LABEL_71;
              v134 = *(unsigned int *)(v60 + 4);
              if (!(_DWORD)v134)
                goto LABEL_71;
              v135 = *(unsigned __int8 **)(v60 + 8);
              if ((v133 & 4) == 0)
              {
                v136 = *(unsigned __int16 *)v135;
                if ((_DWORD)v134 == 1)
                  goto LABEL_202;
                if (v136 == 45)
                {
                  v136 = *((unsigned __int16 *)v135 + 1);
                  goto LABEL_207;
                }
                if ((v136 - 48) >= 0xA && ((_DWORD)v134 != 8 || v136 != 73))
                {
LABEL_221:
                  if ((_DWORD)v134 != 3 || v136 != 78)
                    goto LABEL_71;
                }
LABEL_213:
                v61 = v61 & 0xFFFFFF0000000000 | v134 | ((unint64_t)((v133 >> 2) & 1) << 32);
                JSC::jsToNumber(v135, v61);
                WTF::numberToString(&v175, v137);
                if (WTF::equal(v60, (unint64_t)&v175, v138))
                  goto LABEL_85;
                goto LABEL_71;
              }
              v136 = *v135;
              if ((_DWORD)v134 == 1)
              {
LABEL_202:
                if ((v136 - 48) < 0xA)
                  goto LABEL_85;
                goto LABEL_71;
              }
              if (v136 == 45)
              {
                v136 = v135[1];
LABEL_207:
                if ((v136 - 48) < 0xA)
                {
                  if ((_DWORD)v134 == 2)
                    goto LABEL_85;
                  goto LABEL_213;
                }
                if ((_DWORD)v134 != 9)
                  goto LABEL_71;
              }
              else
              {
                if ((v136 - 48) < 0xA)
                  goto LABEL_213;
                if ((_DWORD)v134 != 8)
                  goto LABEL_221;
              }
              if (v136 != 73)
                goto LABEL_71;
              goto LABEL_213;
            }
          }
          else
          {
            v132 = *(unsigned __int8 *)(v68 + 5);
            if (v132 != 61)
              goto LABEL_196;
            if (BYTE2(v167) == 1)
              goto LABEL_85;
          }
        }
        else
        {
          if ((_DWORD)v62)
          {
            if ((v62 & ~*(_DWORD *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE)), v52, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (v74)
              {
                v175 = (JSC::JSObject *)v60;
                v75 = JSC::PropertyTable::get(v74, (uint64_t *)&v175);
                a6 = v75;
                if ((_DWORD)v75 != -1)
                {
                  a5 = HIDWORD(v75);
                  if ((int)v75 <= 63)
                  {
                    v116 = v68 + 16;
                    v117 = v75 << 32;
                  }
                  else
                  {
                    v116 = *(_QWORD *)(v68 + 8) - 8;
                    v117 = 0x3F00000000 - (v75 << 32);
                  }
                  a4 = *(_QWORD *)(v116 + (v117 >> 29));
                  if ((a4 & 0xFFFE000000000002) == 0)
                  {
                    v118 = *(unsigned __int8 *)(a4 + 5);
                    if (v118 != 5)
                    {
                      if (v118 != 6)
                        goto LABEL_160;
                      v103 = *(_DWORD *)(v73 + 16) & 3;
                      v130 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v106 = *(_QWORD *)(a4 + 24);
                        v105 = *(_QWORD *)(a4 + 32);
                        v161 = *(WTF::StringImpl **)(a4 + 8);
                        v162 = v130;
                        LODWORD(v163) = HIDWORD(v75);
                        v165 = (JSC::JSArrayBufferView *)v68;
LABEL_141:
                        BYTE1(v167) = 3;
                        if (v103 != 2)
                          LOBYTE(v167) = 1;
                        HIBYTE(v167) = 1;
                        v171 = v106;
                        v172 = v105;
                        goto LABEL_85;
                      }
                      v161 = *(WTF::StringImpl **)(a4 + 8);
                      v162 = v130;
                      LODWORD(v163) = HIDWORD(v75);
                      v165 = (JSC::JSArrayBufferView *)v68;
LABEL_172:
                      BYTE1(v167) = 3;
                      if (v103 != 2)
                        LOBYTE(v167) = 1;
                      goto LABEL_85;
                    }
                    v100 = (unsigned int *)v68;
LABEL_129:
                    JSC::JSObject::fillGetterPropertySlot(v100, (uint64_t)v52, (uint64_t)&v161, a4, a5, a6);
                    goto LABEL_85;
                  }
LABEL_160:
                  v161 = (WTF::StringImpl *)a4;
                  v165 = (JSC::JSArrayBufferView *)v68;
                  goto LABEL_84;
                }
              }
            }
          }
          if ((*(_BYTE *)(v68 + 6) & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v68, v52, v60, (uint64_t)&v161) & 1) != 0)
          {
            goto LABEL_85;
          }
        }
LABEL_71:
        if ((*(_WORD *)(v73 + 12) & 0x800) == 0)
        {
          v76 = *(_DWORD *)v68;
LABEL_73:
          v77 = *(_QWORD *)(16 * (v76 & 0xFFFFFFFE) + 0x30);
          if (!v77)
            v77 = *(_QWORD *)(v68 + 16);
          goto LABEL_75;
        }
        v76 = *(_DWORD *)v68;
        if (BYTE2(v167) == 3)
          goto LABEL_73;
        v131 = 16 * (v76 & 0xFFFFFFFE);
        if ((*(_WORD *)(v131 + 12) & 0x800) != 0)
        {
          v77 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v131 + 76) + 0xB0))(v68, a1);
        }
        else
        {
          v77 = *(_QWORD *)(v131 + 48);
          if (!v77)
            v77 = *(_QWORD *)(v68 + 16);
        }
        if (*((_DWORD *)v52 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v52, a2, this, a4, a5, a6, a7, a8))
          goto LABEL_85;
LABEL_75:
        if ((v77 & 0xFFFE000000000002) == 0)
        {
          v68 = v77;
          if (*(unsigned __int8 *)(v77 + 5) > 0x16u)
            continue;
        }
        goto LABEL_85;
      }
    }
LABEL_25:
    v51 = JSC::JSValue::toTypedArrayIndex(&v174, (JSC::JSGlobalObject *)a1, (uint64_t)"length", 7, a5, a6, a7, a8, a9);
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v44, v45, v46, v47, v48, v49, v50))
      return JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::create((JSC::JSGlobalObject *)a1, a2, v51, v46, v47, v48, v49, v50);
    return 0;
  }
  v14 = *(JSC::JSObject **)(this + 16);
  if (v14)
    *(_DWORD *)v14 += 2;
  v175 = v14;
  v15 = *((_QWORD *)v14 + 2);
  if (!v15
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError((unint64_t)a1, &v173, (uint64_t)"Buffer is already detached", 27);
LABEL_16:
    v24 = 0;
    v175 = 0;
    goto LABEL_13;
  }
  a6 = a6;
  if ((_BYTE)a6)
  {
    v16 = a5 & 0xFFFFFFFFFFFFFF00;
    goto LABEL_12;
  }
  if (!*((_BYTE *)v14 + 64))
  {
    a5 = *((_QWORD *)v14 + 6) - a4;
    v16 = a5 & 0xFFFFFFFFFFFFFF00;
    a6 = 1;
    goto LABEL_12;
  }
  v58 = *((_QWORD *)v14 + 4);
  if (v58)
    v59 = *(_QWORD *)(v58 + 32);
  else
    v59 = *((_QWORD *)v14 + 6);
  if (v59 < a4)
  {
    v107 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v107 = 0x3000000002;
    *(_QWORD *)(v107 + 8) = "byteOffset exceeds source ArrayBuffer byteLength";
    *(_DWORD *)(v107 + 16) = 4;
    v161 = (WTF::StringImpl *)v107;
    v109 = JSC::createRangeError((unint64_t)a1, &v161, v108);
    JSC::VM::throwException(v11, (JSC::JSGlobalObject *)a1, v109, v110, v111, v112, v113, v114);
    v115 = v161;
    v161 = 0;
    if (v115)
    {
      if (*(_DWORD *)v115 == 2)
      {
        WTF::StringImpl::~StringImpl(v115, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
      }
      else
      {
        *(_DWORD *)v115 -= 2;
      }
    }
    goto LABEL_16;
  }
  v16 = 0;
  LOBYTE(a5) = 0;
  a6 = 0;
LABEL_12:
  v24 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::create((JSC::JSGlobalObject *)a1, a2, (uint64_t)&v175, a4, a5 | v16, a6, (__n128)a9, a7, a8);
  v14 = v175;
  v175 = 0;
  if (v14)
LABEL_13:
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v14, v17, v18, v19, v20, v21, v22, v23);
  return (unint64_t)v24;
}

unint64_t operationNewUint8ArrayWithSize(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t SlowCase;
  JSC::Heap *v12;
  int v13;
  uint64_t v14;
  const WTF::String *v15;
  unint64_t RangeError;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  JSC::Heap *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *var38[8];

  v9 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v9 + 40) = var38[7];
  if ((a3 & 0x8000000000000000) != 0)
  {
    v14 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v14 = 0x1C00000002;
    *(_QWORD *)(v14 + 8) = "Requested length is negative";
    *(_DWORD *)(v14 + 16) = 4;
    var38[0] = (WTF::StringImpl *)v14;
    RangeError = JSC::createRangeError((unint64_t)a1, var38, v15);
    JSC::VM::throwException((JSC::VM *)v9, a1, RangeError, v17, v18, v19, v20, v21);
    v29 = var38[0];
    var38[0] = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v22, v23, v24, v25, v26, v27, v28);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
    return 0;
  }
  else if (a4)
  {
    if (a3 >= 0x3E9)
    {
      __break(0xC471u);
      JUMPOUT(0x19848C28CLL);
    }
    if (!a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19848C2ACLL);
    }
    v12 = *(JSC::Heap **)(v9 + 40864);
    if (!v12)
    {
      v43 = a4;
      v44 = a3;
      v45 = a2;
      v46 = JSC::GCClient::Heap::uint8ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
      a2 = v45;
      a3 = v44;
      a4 = v43;
      v12 = v46;
    }
    SlowCase = *((_QWORD *)v12 + 3);
    if (SlowCase >= *((_QWORD *)v12 + 4))
    {
      v30 = a2;
      v31 = a3;
      v32 = a4;
      v51 = (uint64_t)v12;
      SlowCase = *((_QWORD *)v12 + 5);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v9, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v51, v9 + 192, 48, 0, 0, v48, v49, v50);
      }
      else
      {
        v33 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v12 + 6);
        *((_QWORD *)v12 + 4) = SlowCase + HIDWORD(v33);
        *((_QWORD *)v12 + 5) = SlowCase + (int)v33;
        *((_QWORD *)v12 + 3) = SlowCase + 48;
      }
      a4 = v32;
      a3 = v31;
      a2 = v30;
    }
    else
    {
      *((_QWORD *)v12 + 3) = SlowCase + 48;
    }
    *(_DWORD *)SlowCase = 0;
    v13 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)SlowCase = a2 >> 4;
    *(_DWORD *)(SlowCase + 4) = v13;
    *(_QWORD *)(SlowCase + 8) = 0;
    *(_QWORD *)(SlowCase + 16) = 0;
    *(_QWORD *)(SlowCase + 24) = a3;
    *(_QWORD *)(SlowCase + 32) = 0;
    *(_BYTE *)(SlowCase + 40) = 16;
    if (*(_BYTE *)(v9 + 755))
    {
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = 0;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      {
        v47 = a4;
        JSC::Heap::writeBarrierSlowPath(v9 + 192, SlowCase);
        a4 = v47;
      }
      __dmb(0xAu);
    }
    else if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    {
      v34 = a4;
      JSC::Heap::writeBarrierSlowPath(v9 + 192, SlowCase);
      a4 = v34;
    }
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      a4 = (a4 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)(SlowCase + 16) = a4;
    JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v9);
  }
  else
  {
    return JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::create(a1, a2, a3, 0, a5, a6, a7, a8);
  }
  return SlowCase;
}

unint64_t operationNewUint8ArrayWithOneArgument(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD var38[8];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var38[7];
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 38 && *(_BYTE *)(*(_QWORD *)(a2 + 16) + 64))
  {
    v11 = *(_QWORD *)(a1 + 1704);
    if ((v11 & 1) == 0)
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v17 = (uint64_t *)(a1 - 16);
    v15 = *v17;
    v16 = a1 + 1704;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a1 + 1688);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v14 = (uint64_t *)(a1 - 16);
    v15 = *v14;
    v16 = a1 + 1688;
LABEL_9:
    var38[0] = v15;
    var38[1] = a1;
    var38[2] = v16;
    v11 = v13(var38);
  }
  return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
}

unint64_t JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>(JSC::VM **a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v11;
  unsigned int v13;
  JSC::ArrayBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::VM *v24;
  BOOL v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t Uninitialized;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  JSC::VM *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  _BYTE *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int8x16_t v91;
  int v92;
  JSC::ArrayBuffer *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned int v100;
  unsigned __int16 *v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  int v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  const WTF::String *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned __int16 *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  unsigned __int8 *v141;
  int v142;
  double v143;
  const unsigned __int8 *v144;
  unsigned __int8 *v145;
  uint64_t v146;
  unsigned int v147;
  JSC::VM *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  unsigned __int8 *v155;
  uint64_t v156;
  unsigned int v157;
  JSC::VM *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  char *v166;
  WTF::StringImpl *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  char v174;
  JSC::VM *v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  JSC::VM *v179;
  JSC::JSObject *v180;
  JSC::ArrayBuffer *v181;
  char v182;
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  v11 = a1[7];
  v179 = v11;
  v180 = (JSC::JSObject *)a3;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_28;
  v13 = *(unsigned __int8 *)(a3 + 5);
  if (v13 == 38)
  {
    v14 = *(JSC::ArrayBuffer **)(a3 + 16);
    if (v14)
      *(_DWORD *)v14 += 2;
    v181 = v14;
    v15 = *((_QWORD *)v14 + 2);
    if (v15
      && (!qword_1ECF4C038
       || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
       || (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      a6 = a6;
      if ((_BYTE)a6)
      {
        v16 = a5 & 0xFFFFFFFFFFFFFF00;
        goto LABEL_13;
      }
      if (!*((_BYTE *)v14 + 64))
      {
        a5 = *((_QWORD *)v14 + 6) - a4;
        v16 = a5 & 0xFFFFFFFFFFFFFF00;
        a6 = 1;
        goto LABEL_13;
      }
      v62 = *((_QWORD *)v14 + 4);
      if (v62)
        v63 = *(_QWORD *)(v62 + 32);
      else
        v63 = *((_QWORD *)v14 + 6);
      if (v63 >= a4)
      {
        v16 = 0;
        LOBYTE(a5) = 0;
        a6 = 0;
LABEL_13:
        v24 = (JSC::VM *)JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::create((JSC::JSGlobalObject *)a1, a2, (uint64_t)&v181, a4, a5 | v16, a6, a9, a7, a8);
        v14 = v181;
        v181 = 0;
        if (!v14)
          return (unint64_t)v24;
        goto LABEL_14;
      }
      v109 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v109 = 0x3000000002;
      *(_QWORD *)(v109 + 8) = "byteOffset exceeds source ArrayBuffer byteLength";
      *(_DWORD *)(v109 + 16) = 4;
      v167 = (WTF::StringImpl *)v109;
      v111 = JSC::createRangeError((unint64_t)a1, &v167, v110);
      JSC::VM::throwException(v11, (JSC::JSGlobalObject *)a1, v111, v112, v113, v114, v115, v116);
      v117 = v167;
      v167 = 0;
      if (v117)
      {
        if (*(_DWORD *)v117 == 2)
        {
          WTF::StringImpl::~StringImpl(v117, v17, v18, v19, v20, v21, v22, v23);
          WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
        }
        else
        {
          *(_DWORD *)v117 -= 2;
        }
      }
    }
    else
    {
      JSC::throwTypeError((unint64_t)a1, &v179, (uint64_t)"Buffer is already detached", 27);
    }
    v24 = 0;
    v181 = 0;
LABEL_14:
    v25 = *(_DWORD *)v14 == 2;
    *(_DWORD *)v14 -= 2;
    if (v25)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v14, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    return (unint64_t)v24;
  }
  if (v13 < 0x17)
  {
LABEL_28:
    v53 = JSC::JSValue::toTypedArrayIndex(&v180, (JSC::JSGlobalObject *)a1, (uint64_t)"length", 7, a5, a6, a7, a8, (int8x16_t)a9);
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v46, v47, v48, v49, v50, v51, v52))
      return JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::create((JSC::JSGlobalObject *)a1, a2, v53, v48, v49, v50, v51, v52);
    return 0;
  }
  if (v13 - 39 <= 0xA)
  {
    if ((*(_BYTE *)(a3 + 40) & 7u) > 2)
    {
      LOBYTE(v181) = 0;
      v182 = 0;
      v64 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a3, (uint64_t)&v181, a3, a4, a5, a6, a7, a8);
      if (v65)
        v35 = v64;
      else
        v35 = 0;
    }
    else
    {
      v35 = *(_QWORD *)(a3 + 24);
    }
    Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v35, a4, a5, a6, a7, a8);
    if (Uninitialized)
    {
      v43 = Uninitialized;
      LOBYTE(v181) = 0;
      v182 = 0;
      if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a3, (unint64_t *)&v181, v37, v38, v39, v40, v41, v42))
      {
        v59 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v60 = (unint64_t)a1;
        v61 = 72;
      }
      else
      {
        if (*(unsigned __int8 *)(a3 + 5) - 39 < 9)
        {
          v45 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setFromTypedArray(v43, (JSC::JSGlobalObject *)a1, 0, a3, 0, v35, 1, v44);
          goto LABEL_25;
        }
        v59 = "Content types of source and new typed array are different";
        v60 = (unint64_t)a1;
        v61 = 58;
      }
      JSC::throwTypeError(v60, &v179, (uint64_t)v59, v61);
    }
    return 0;
  }
  v54 = v11;
  if (a3)
  {
    v54 = v11;
    if (v13 == 36)
    {
      if (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)a3, a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8))
      {
        if ((*(_BYTE *)(a3 + 4) & 0xE) != 0)
          v55 = *(unsigned int *)(*(_QWORD *)(a3 + 8) - 8);
        else
          v55 = 0;
        goto LABEL_37;
      }
      v54 = a1[7];
    }
  }
  v169 = 0xFFFFFFFF00000000;
  v171 = 0;
  v172 = 0;
  v170 = a3;
  v173 = 196608;
  v174 = 0;
  v177 = 0;
  v178 = 0;
  v175 = v11;
  ++*((_DWORD *)v11 + 1);
  v176 = 1;
  v166 = (char *)v11 + 41952;
  v66 = *(_QWORD *)(*((_QWORD *)v11 + 5244) + 1768);
  v67 = a3 + 6;
  v68 = v66 >> 4;
  if ((*(_BYTE *)(a3 + 6) & 8) != 0)
  {
    v74 = a3;
LABEL_68:
    if (v66)
    {
      v75 = *(_DWORD *)(v66 + 16);
      if ((v75 & 0x20) == 0)
      {
        v76 = *(_BYTE **)(v66 + 8);
        v77 = *(unsigned int *)(v66 + 4);
        if ((v75 & 4) != 0)
        {
          if ((_DWORD)v77)
          {
            v78 = *v76 - 48;
            if (v78 <= 9 && (v77 < 2 || *v76 != 48))
            {
              v155 = v76 + 1;
              v156 = v77 - 1;
              while (v156)
              {
                if (v78 <= 0x19999999)
                {
                  v157 = *v155 - 48;
                  if (v157 <= 9)
                  {
                    v104 = __CFADD__(v157, 10 * v78);
                    v78 = v157 + 10 * v78;
                    ++v155;
                    --v156;
                    if (!v104)
                      continue;
                  }
                }
                goto LABEL_73;
              }
LABEL_283:
              if (v78 != -1)
              {
                v158 = a1[7];
                v159 = v78;
                v160 = a3;
                while (1)
                {
                  v161 = 16 * (*(_DWORD *)v160 & 0xFFFFFFFE);
                  v162 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v161 + 0x4C) + 0x70))(v160, a1, v159, &v167);
                  if (*((_DWORD *)v158 + 20))
                  {
                    if (((JSC::VM::hasExceptionsAfterHandlingTraps(v158, a2, a3, a4, a5, a6, a7, a8) | v162) & 1) != 0)
                      goto LABEL_94;
                  }
                  else if ((v162 & 1) != 0)
                  {
                    goto LABEL_94;
                  }
                  if (BYTE2(v173) == 3)
                  {
                    if (v174)
                      goto LABEL_94;
                    v163 = *(unsigned __int8 *)(v160 + 5);
                    if (v163 != 61)
                    {
LABEL_289:
                      if ((v163 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v160, a2, a3, a4, a5, a6, a7, a8) <= v159)
                      {
                        goto LABEL_94;
                      }
                    }
                  }
                  else
                  {
                    v163 = *(unsigned __int8 *)(v160 + 5);
                    if (v163 != 61)
                      goto LABEL_289;
                    if (BYTE2(v173) == 1)
                      goto LABEL_94;
                  }
                  if ((*(_WORD *)(v161 + 12) & 0x800) == 0 || BYTE2(v173) == 3)
                  {
                    v164 = *(_QWORD *)(16 * (*(_DWORD *)v160 & 0xFFFFFFFE) + 0x30);
                    if (!v164)
                      v164 = *(_QWORD *)(v160 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v160 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v164 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v160 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v160, a1);
                    }
                    else
                    {
                      v164 = *(_QWORD *)(16 * (*(_DWORD *)v160 & 0xFFFFFFFE) + 0x30);
                      if (!v164)
                        v164 = *(_QWORD *)(v160 + 16);
                    }
                    if (*((_DWORD *)v158 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v158, a2, a3, a4, a5, a6, a7, a8))
                    {
                      goto LABEL_94;
                    }
                  }
                  if ((v164 & 0xFFFE000000000002) == 0)
                  {
                    v160 = v164;
                    if (*(unsigned __int8 *)(v164 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_94;
                }
              }
            }
          }
        }
        else if ((_DWORD)v77)
        {
          v78 = *(unsigned __int16 *)v76 - 48;
          if (v78 <= 9 && (*(_WORD *)v76 != 48 || v77 <= 1))
          {
            v133 = (unsigned __int16 *)(v76 + 2);
            v134 = v77 - 1;
            while (v134)
            {
              if (v78 <= 0x19999999)
              {
                v135 = *v133 - 48;
                if (v135 <= 9)
                {
                  v104 = __CFADD__(v135, 10 * v78);
                  v78 = v135 + 10 * v78;
                  ++v133;
                  --v134;
                  if (!v104)
                    continue;
                }
              }
              goto LABEL_73;
            }
            goto LABEL_283;
          }
        }
      }
    }
LABEL_73:
    v54 = a1[7];
    while (1)
    {
      v79 = 16 * (*(_DWORD *)v74 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v74 + 6) & 8) != 0)
      {
        v165 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x4C) + 0x68))(v74, a1, v66, &v167);
        if (*((_DWORD *)v54 + 20))
        {
          if (((JSC::VM::hasExceptionsAfterHandlingTraps(v54, a2, a3, a4, a5, a6, a7, a8) | v165) & 1) != 0)
            goto LABEL_94;
        }
        else if ((v165 & 1) != 0)
        {
          goto LABEL_94;
        }
        if (BYTE2(v173) == 3)
        {
          if (v174)
            goto LABEL_94;
          v138 = *(unsigned __int8 *)(v74 + 5);
          if (v138 != 61)
          {
LABEL_202:
            if (!v66)
              goto LABEL_80;
            if ((v138 - 50) < 0xFFFFFFF5)
              goto LABEL_80;
            v139 = *(_DWORD *)(v66 + 16);
            if ((v139 & 0x20) != 0)
              goto LABEL_80;
            v140 = *(unsigned int *)(v66 + 4);
            if (!(_DWORD)v140)
              goto LABEL_80;
            v141 = *(unsigned __int8 **)(v66 + 8);
            if ((v139 & 4) == 0)
            {
              v142 = *(unsigned __int16 *)v141;
              if ((_DWORD)v140 == 1)
                goto LABEL_208;
              if (v142 == 45)
              {
                v142 = *((unsigned __int16 *)v141 + 1);
                goto LABEL_213;
              }
              if ((v142 - 48) >= 0xA && ((_DWORD)v140 != 8 || v142 != 73))
              {
LABEL_227:
                if ((_DWORD)v140 != 3 || v142 != 78)
                  goto LABEL_80;
              }
LABEL_219:
              v67 = v67 & 0xFFFFFF0000000000 | v140 | ((unint64_t)((v139 >> 2) & 1) << 32);
              JSC::jsToNumber(v141, v67);
              WTF::numberToString(&v181, v143);
              if (WTF::equal(v66, (unint64_t)&v181, v144))
                goto LABEL_94;
              goto LABEL_80;
            }
            v142 = *v141;
            if ((_DWORD)v140 == 1)
            {
LABEL_208:
              if ((v142 - 48) < 0xA)
                goto LABEL_94;
              goto LABEL_80;
            }
            if (v142 == 45)
            {
              v142 = v141[1];
LABEL_213:
              if ((v142 - 48) < 0xA)
              {
                if ((_DWORD)v140 == 2)
                  goto LABEL_94;
                goto LABEL_219;
              }
              if ((_DWORD)v140 != 9)
                goto LABEL_80;
            }
            else
            {
              if ((v142 - 48) < 0xA)
                goto LABEL_219;
              if ((_DWORD)v140 != 8)
                goto LABEL_227;
            }
            if (v142 != 73)
              goto LABEL_80;
            goto LABEL_219;
          }
        }
        else
        {
          v138 = *(unsigned __int8 *)(v74 + 5);
          if (v138 != 61)
            goto LABEL_202;
          if (BYTE2(v173) == 1)
            goto LABEL_94;
        }
      }
      else
      {
        if ((_DWORD)v68)
        {
          if ((v68 & ~*(_DWORD *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x20)) == 0)
          {
            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE)), v54, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            if (v80)
            {
              v181 = (JSC::ArrayBuffer *)v66;
              v81 = JSC::PropertyTable::get(v80, (uint64_t *)&v181);
              a6 = v81;
              if ((_DWORD)v81 != -1)
              {
                a5 = HIDWORD(v81);
                if ((int)v81 <= 63)
                {
                  v130 = v74 + 16;
                  v131 = v81 << 32;
                }
                else
                {
                  v130 = *(_QWORD *)(v74 + 8) - 8;
                  v131 = 0x3F00000000 - (v81 << 32);
                }
                a4 = *(_QWORD *)(v130 + (v131 >> 29));
                if ((a4 & 0xFFFE000000000002) == 0)
                {
                  v132 = *(unsigned __int8 *)(a4 + 5);
                  if (v132 != 5)
                  {
                    if (v132 != 6)
                      goto LABEL_167;
                    v118 = *(_DWORD *)(v79 + 16) & 3;
                    v136 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v121 = *(_QWORD *)(a4 + 24);
                      v120 = *(_QWORD *)(a4 + 32);
                      v167 = *(WTF::StringImpl **)(a4 + 8);
                      v168 = v136;
                      LODWORD(v169) = HIDWORD(v81);
                      v171 = v74;
LABEL_150:
                      BYTE1(v173) = 3;
                      if (v118 != 2)
                        LOBYTE(v173) = 1;
                      HIBYTE(v173) = 1;
                      v177 = v121;
                      v178 = v120;
                      goto LABEL_94;
                    }
                    v167 = *(WTF::StringImpl **)(a4 + 8);
                    v168 = v136;
                    LODWORD(v169) = HIDWORD(v81);
                    v171 = v74;
LABEL_179:
                    BYTE1(v173) = 3;
                    if (v118 != 2)
                      LOBYTE(v173) = 1;
                    goto LABEL_94;
                  }
                  v106 = (unsigned int *)v74;
LABEL_136:
                  JSC::JSObject::fillGetterPropertySlot(v106, (uint64_t)v54, (uint64_t)&v167, a4, a5, a6);
                  goto LABEL_94;
                }
LABEL_167:
                v167 = (WTF::StringImpl *)a4;
                v171 = v74;
                goto LABEL_93;
              }
            }
          }
        }
        if ((*(_BYTE *)(v74 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v74, v54, v66, (uint64_t)&v167) & 1) != 0)
        {
          goto LABEL_94;
        }
      }
LABEL_80:
      if ((*(_WORD *)(v79 + 12) & 0x800) == 0)
      {
        v82 = *(_DWORD *)v74;
LABEL_82:
        v83 = *(_QWORD *)(16 * (v82 & 0xFFFFFFFE) + 0x30);
        if (!v83)
          v83 = *(_QWORD *)(v74 + 16);
        goto LABEL_84;
      }
      v82 = *(_DWORD *)v74;
      if (BYTE2(v173) == 3)
        goto LABEL_82;
      v137 = 16 * (v82 & 0xFFFFFFFE);
      if ((*(_WORD *)(v137 + 12) & 0x800) != 0)
      {
        v83 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v137 + 76) + 0xB0))(v74, a1);
      }
      else
      {
        v83 = *(_QWORD *)(v137 + 48);
        if (!v83)
          v83 = *(_QWORD *)(v74 + 16);
      }
      if (*((_DWORD *)v54 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v54, a2, a3, a4, a5, a6, a7, a8))
        goto LABEL_94;
LABEL_84:
      if ((v83 & 0xFFFE000000000002) == 0)
      {
        v74 = v83;
        if (*(unsigned __int8 *)(v83 + 5) > 0x16u)
          continue;
      }
      goto LABEL_94;
    }
  }
  v69 = a3;
  while (1)
  {
    v70 = *(_DWORD *)v69 & 0xFFFFFFFE;
    v71 = 16 * v70;
    if ((_DWORD)v68)
    {
      if ((v68 & ~*(_DWORD *)(16 * v70 + 0x20)) == 0)
      {
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v71, v54, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (v72)
        {
          v181 = (JSC::ArrayBuffer *)v66;
          v73 = JSC::PropertyTable::get(v72, (uint64_t *)&v181);
          a6 = v73;
          if ((_DWORD)v73 != -1)
          {
            a5 = HIDWORD(v73);
            if ((int)v73 <= 63)
            {
              v84 = v69 + 16;
              v85 = v73 << 32;
            }
            else
            {
              v84 = *(_QWORD *)(v69 + 8) - 8;
              v85 = 0x3F00000000 - (v73 << 32);
            }
            a4 = *(_QWORD *)(v84 + (v85 >> 29));
            if ((a4 & 0xFFFE000000000002) == 0)
            {
              v86 = *(unsigned __int8 *)(a4 + 5);
              if (v86 == 5)
              {
                v106 = (unsigned int *)v69;
                goto LABEL_136;
              }
              if (v86 == 6)
              {
                v118 = *(_DWORD *)(v71 + 16) & 3;
                v119 = *(_QWORD *)(a4 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v121 = *(_QWORD *)(a4 + 24);
                  v120 = *(_QWORD *)(a4 + 32);
                  v167 = *(WTF::StringImpl **)(a4 + 8);
                  v168 = v119;
                  LODWORD(v169) = HIDWORD(v73);
                  v171 = v69;
                  goto LABEL_150;
                }
                v167 = *(WTF::StringImpl **)(a4 + 8);
                v168 = v119;
                LODWORD(v169) = HIDWORD(v73);
                v171 = v69;
                goto LABEL_179;
              }
            }
            v167 = (WTF::StringImpl *)a4;
            v171 = v69;
LABEL_93:
            v169 = __PAIR64__(a6, a5);
            LOWORD(v173) = 257;
            goto LABEL_94;
          }
        }
      }
    }
    if ((*(_BYTE *)v67 & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v69, v54, v66, (uint64_t)&v167) & 1) != 0)
    {
      goto LABEL_94;
    }
    v74 = *(_QWORD *)(v71 + 48);
    if (!v74)
      v74 = *(_QWORD *)(v69 + 16);
    if ((v74 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v74 + 5) < 0x17u)
      break;
    v67 = v74 + 6;
    v69 = v74;
    if ((*(_BYTE *)(v74 + 6) & 8) != 0)
      goto LABEL_68;
  }
  if (!v66)
    goto LABEL_94;
  v97 = *(_DWORD *)(v66 + 16);
  if ((v97 & 0x20) != 0)
    goto LABEL_94;
  v98 = *(_BYTE **)(v66 + 8);
  v99 = *(unsigned int *)(v66 + 4);
  if ((v97 & 4) != 0)
  {
    if (!(_DWORD)v99)
      goto LABEL_94;
    v100 = *v98 - 48;
    if (v100 > 9 || v99 >= 2 && *v98 == 48)
      goto LABEL_94;
    v145 = v98 + 1;
    v146 = v99 - 1;
    while (v146)
    {
      if (v100 <= 0x19999999)
      {
        v147 = *v145 - 48;
        if (v147 <= 9)
        {
          v104 = __CFADD__(v147, 10 * v100);
          v100 = v147 + 10 * v100;
          ++v145;
          --v146;
          if (!v104)
            continue;
        }
      }
      goto LABEL_94;
    }
  }
  else
  {
    if (!(_DWORD)v99)
      goto LABEL_94;
    v100 = *(unsigned __int16 *)v98 - 48;
    if (v100 > 9 || *(_WORD *)v98 == 48 && v99 > 1)
      goto LABEL_94;
    v101 = (unsigned __int16 *)(v98 + 2);
    v102 = v99 - 1;
    while (v102)
    {
      if (v100 <= 0x19999999)
      {
        v103 = *v101 - 48;
        if (v103 <= 9)
        {
          v104 = __CFADD__(v103, 10 * v100);
          v100 = v103 + 10 * v100;
          ++v101;
          --v102;
          if (!v104)
            continue;
        }
      }
      goto LABEL_94;
    }
  }
  if (v100 != -1)
  {
    v148 = a1[7];
    v149 = v100;
    v150 = a3;
    while (1)
    {
      v151 = 16 * (*(_DWORD *)v150 & 0xFFFFFFFE);
      v152 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v151 + 0x4C)
                                                                                                  + 0x70))(v150, a1, v149, &v167);
      if (*((_DWORD *)v148 + 20))
      {
        if (((JSC::VM::hasExceptionsAfterHandlingTraps(v148, a2, a3, a4, a5, a6, a7, a8) | v152) & 1) != 0)
          break;
      }
      else if ((v152 & 1) != 0)
      {
        break;
      }
      if (BYTE2(v173) == 3)
      {
        if (v174)
          break;
        v153 = *(unsigned __int8 *)(v150 + 5);
        if (v153 != 61)
        {
LABEL_247:
          if ((v153 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v150, a2, a3, a4, a5, a6, a7, a8) <= v149)
          {
            break;
          }
        }
      }
      else
      {
        v153 = *(unsigned __int8 *)(v150 + 5);
        if (v153 != 61)
          goto LABEL_247;
        if (BYTE2(v173) == 1)
          break;
      }
      if ((*(_WORD *)(v151 + 12) & 0x800) == 0 || BYTE2(v173) == 3)
      {
        v154 = *(_QWORD *)(16 * (*(_DWORD *)v150 & 0xFFFFFFFE) + 0x30);
        if (!v154)
          v154 = *(_QWORD *)(v150 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v150 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v154 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                * *(unsigned int *)(16
                                                                                  * (*(_DWORD *)v150 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0xB0))(v150, a1);
        }
        else
        {
          v154 = *(_QWORD *)(16 * (*(_DWORD *)v150 & 0xFFFFFFFE) + 0x30);
          if (!v154)
            v154 = *(_QWORD *)(v150 + 16);
        }
        if (*((_DWORD *)v148 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v148, a2, a3, a4, a5, a6, a7, a8))
          break;
      }
      if ((v154 & 0xFFFE000000000002) == 0)
      {
        v150 = v154;
        if (*(unsigned __int8 *)(v154 + 5) > 0x16u)
          continue;
      }
      break;
    }
  }
LABEL_94:
  v24 = v179;
  if (*((_DWORD *)v179 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v179, a2, a3, a4, a5, a6, a7, a8))
    goto LABEL_160;
  if (v176)
  {
    v87 = *((_DWORD *)v175 + 1);
    if (!v87)
    {
      __break(0xC471u);
      JUMPOUT(0x19848CDF0);
    }
    *((_DWORD *)v175 + 1) = v87 - 1;
    v175 = 0;
    v176 = 0;
  }
  v90 = JSC::JSObject::get((unsigned int *)a3, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v166 + 2712), a4, a5, a6, a7, a8);
  if (*((_DWORD *)v24 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v24, v88, v89, a4, a5, a6, a7, a8))
      goto LABEL_160;
  }
  if ((v90 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v92 = BYTE1(v173);
  }
  else if (v90 != JSC::JSGlobalObject::arrayProtoValuesFunction(*(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28))
         || (v92 = BYTE1(v173), (BYTE1(v173) & 0xFE) == 2)
         || v174
         || (*(_BYTE *)(a3 + 4) & 0xEu) > 9
         || ((v107 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) + 2216), (v107 & 1) != 0)
           ? (v108 = (v107 >> 1) & 3)
           : (v108 = *(unsigned __int8 *)(v107 + 4)),
             v108 == 2))
  {
    v24 = (JSC::VM *)JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>((JSC::JSGlobalObject *)a1, a2, (JSC::JSObject *)a3, v90, a5, a6, a7, a8);
    v55 = 0;
    v96 = 0;
    goto LABEL_130;
  }
  switch(v92)
  {
    case 0:
      v55 = 0;
      goto LABEL_129;
    case 1:
      v93 = v167;
      break;
    case 2:
      v93 = (JSC::ArrayBuffer *)JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v167, (JSC::JSGlobalObject *)a1, v89, a4, a5, a6, a7, a8);
      break;
    default:
      v93 = (JSC::ArrayBuffer *)JSC::PropertySlot::customGetter((uint64_t)&v167, a1[7], *(WTF::StringImpl **)(*(_QWORD *)v166 + 1768));
      break;
  }
  v181 = v93;
  if (!*((_DWORD *)v24 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v24, v88, v89, a4, a5, a6, a7, a8))
  {
    v55 = JSC::JSValue::toLength(&v181, (JSC::JSGlobalObject *)a1, v89, a4, a5, a6, a7, a8, v91);
    if (*((_DWORD *)v24 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v24, v94, v95, a4, a5, a6, a7, a8))
      goto LABEL_161;
LABEL_129:
    v96 = 1;
    goto LABEL_130;
  }
LABEL_160:
  v55 = 0;
LABEL_161:
  v96 = 0;
  v24 = 0;
LABEL_130:
  if (v176)
  {
    v105 = *((_DWORD *)v175 + 1);
    if (!v105)
    {
      __break(0xC471u);
      JUMPOUT(0x19848CE10);
    }
    *((_DWORD *)v175 + 1) = v105 - 1;
  }
  if (v96)
  {
LABEL_37:
    v56 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v55, a4, a5, a6, a7, a8);
    if (v56)
    {
      v43 = v56;
      v45 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setFromArrayLike(v56, (JSC::JSGlobalObject *)a1, 0, a3, 0, v55, v57, v58);
LABEL_25:
      if (v45)
        return v43;
      else
        return 0;
    }
    return 0;
  }
  return (unint64_t)v24;
}

unint64_t operationNewUint8ClampedArrayWithSize(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  JSC::Heap *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  JSC::Heap **v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  JSC::Exception *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(_QWORD *);
  _QWORD *v45;
  unint64_t v46;
  JSC::Heap *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t SlowCase;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  WTF::StringImpl *v56;
  _QWORD var38[8];

  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v9 + 40) = var38[7];
  if ((a3 & 0x8000000000000000) == 0)
  {
    v10 = a4;
    if (!a4)
      return JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::create((JSC::JSGlobalObject *)a1, a2, a3, 0, a5, a6, a7, a8);
    if (a3 >= 0x3E9)
    {
      __break(0xC471u);
      JUMPOUT(0x19848D6C4);
    }
    if (!a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19848D6E4);
    }
    v11 = *(JSC::Heap **)(v9 + 40872);
    if (!v11)
    {
      v54 = a3;
      v46 = a2;
      v47 = JSC::GCClient::Heap::uint8ClampedArraySpaceSlow((JSC::Heap **)(v9 + 37552));
      a2 = v46;
      a3 = v54;
      v11 = v47;
    }
    v12 = v9 + 192;
    v13 = *((_QWORD *)v11 + 3);
    if (v13 >= *((_QWORD *)v11 + 4))
    {
      v13 = *((_QWORD *)v11 + 5);
      if ((v13 & 1) != 0)
      {
        v55 = a3;
        v53 = a2;
        v48 = (uint64_t)v11;
        JSC::sanitizeStackForVM((JSC *)v9, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v48, v9 + 192, 48, 0, 0, v49, v50, v51);
        a3 = v55;
        v13 = SlowCase;
        a2 = v53;
        v12 = v9 + 192;
        goto LABEL_9;
      }
      v43 = *(_QWORD *)(v13 + 8) ^ *((_QWORD *)v11 + 6);
      *((_QWORD *)v11 + 4) = v13 + HIDWORD(v43);
      *((_QWORD *)v11 + 5) = v13 + (int)v43;
    }
    *((_QWORD *)v11 + 3) = v13 + 48;
LABEL_9:
    *(_DWORD *)v13 = 0;
    v14 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)v13 = a2 >> 4;
    *(_DWORD *)(v13 + 4) = v14;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = a3;
    *(_QWORD *)(v13 + 32) = 0;
    *(_BYTE *)(v13 + 40) = 16;
    if (*(_BYTE *)(v9 + 755))
    {
      __dmb(0xAu);
      *(_QWORD *)(v13 + 8) = 0;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v13 + 7))
        JSC::Heap::writeBarrierSlowPath(v12, v13);
      __dmb(0xAu);
    }
    else if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v13 + 7))
    {
      JSC::Heap::writeBarrierSlowPath(v12, v13);
    }
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v10 = (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)(v13 + 16) = v10;
    JSC::JSArrayBufferView::finishCreation(v13, (JSC::VM *)v9);
    return v13;
  }
  v15 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v15 = 0x1C00000002;
  *(_QWORD *)(v15 + 8) = "Requested length is negative";
  *(_DWORD *)(v15 + 16) = 4;
  v56 = (WTF::StringImpl *)v15;
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(JSC::Heap ***)(a1 + 56);
  if ((v16 & 1) != 0)
  {
    v44 = *(uint64_t (**)(_QWORD *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v45 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v45 = (_QWORD *)(a1 - 16);
    var38[0] = *v45;
    var38[1] = a1;
    var38[2] = a1 + 128;
    v16 = v44(var38);
  }
  v18 = JSC::ErrorInstance::create(v17, v16, &v56, 0, 0, 0, 2, 1);
  v25 = (JSC::Exception *)v18;
  if ((v18 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)))
  {
    v25 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v18, 0, v19, v20, v21, v22, v23);
  }
  JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)a1, v25, v24, v19, v20, v21, v22, v23);
  v33 = v56;
  v56 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  return 0;
}

unint64_t operationNewUint8ClampedArrayWithOneArgument(unint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD var38[8];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var38[7];
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 38 && *(_BYTE *)(*(_QWORD *)(a2 + 16) + 64))
  {
    v11 = *(_QWORD *)(a1 + 1728);
    if ((v11 & 1) == 0)
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(a1, v11, a2, 0, 0, 0, a8, a9, a3);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v17 = (uint64_t *)(a1 - 16);
    v15 = *v17;
    v16 = a1 + 1728;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a1 + 1712);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v14 = (uint64_t *)(a1 - 16);
    v15 = *v14;
    v16 = a1 + 1712;
LABEL_9:
    var38[0] = v15;
    var38[1] = a1;
    var38[2] = v16;
    v11 = v13(var38);
  }
  return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(a1, v11, a2, 0, 0, 0, a8, a9, a3);
}

unint64_t JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  unsigned int v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::VM *v23;
  unint64_t v24;
  unint64_t Uninitialized;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  JSC::JSArrayBufferView *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  int v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _BYTE *v101;
  uint64_t v102;
  unsigned int v103;
  unsigned __int16 *v104;
  uint64_t v105;
  unsigned int v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unsigned int *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int8x16_t v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int8x16_t **v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  BOOL v134;
  int v135;
  int v136;
  _BYTE *v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  int v153;
  unsigned int v154;
  int v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  unsigned int v164;
  uint64_t v165;
  unsigned __int8 *v166;
  int v167;
  unint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  size_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unsigned __int8 *v178;
  JSC::VM **v179;
  uint64_t v180;
  int v181;
  int v182;
  JSC::VM **p_dst;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  char v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int16 *v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t (*v196)(JSC::VM **);
  JSC::VM **v197;
  double v198;
  double v199;
  int v200;
  uint64_t v201;
  unint64_t v202;
  JSC::Heap **v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  double v210;
  JSC::Exception *v211;
  WTF::StringImpl *v212;
  int v213;
  int v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t (*v224)(JSC::VM **);
  JSC::VM **v225;
  unsigned __int8 *v226;
  uint64_t v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  char v234;
  int v235;
  uint64_t v236;
  int v237;
  char v238;
  int v239;
  unint64_t v240;
  unint64_t v241;
  char v242;
  unsigned __int8 *v243;
  uint64_t v244;
  unsigned int v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  char v251;
  int v252;
  uint64_t v253;
  int v254;
  char v255;
  unint64_t v256;
  unint64_t v257;
  char v258;
  int v259;
  unint64_t v260;
  char v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t (*v265)(_QWORD);
  uint64_t v266;
  unint64_t v267;
  _DWORD *v268;
  _DWORD *v269;
  uint64_t v270;
  int v271;
  char v272;
  uint64_t v273;
  char v274;
  int8x16_t **v275;
  uint64_t v276;
  JSC::VM *v277;
  JSC::JSObject *v278;
  JSC::VM *__dst;
  unint64_t v280;
  unint64_t v281;
  char __s[8];
  uint64_t v283;

  v283 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 56);
  v277 = (JSC::VM *)v11;
  v278 = (JSC::JSObject *)a3;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_20;
  v13 = *(unsigned __int8 *)(a3 + 5);
  if (v13 == 38)
  {
    v14 = *(uint64_t (**)(_QWORD))(a3 + 16);
    if (v14)
      *(_DWORD *)v14 += 2;
    v265 = v14;
    v15 = *((_QWORD *)v14 + 2);
    if (!v15
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError(a1, &v277, (uint64_t)"Buffer is already detached", 27);
LABEL_10:
      v23 = 0;
      v265 = 0;
LABEL_61:
      v134 = *(_DWORD *)v14 == 2;
      *(_DWORD *)v14 -= 2;
      if (v134)
      {
        JSC::ArrayBuffer::~ArrayBuffer((JSC::ArrayBuffer *)v14, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      return (unint64_t)v23;
    }
    a6 = a6;
    if ((_BYTE)a6)
    {
      v62 = a5 & 0xFFFFFFFFFFFFFF00;
    }
    else if (*((_BYTE *)v14 + 64))
    {
      v72 = *((_QWORD *)v14 + 4);
      if (v72)
        v73 = *(_QWORD *)(v72 + 32);
      else
        v73 = *((_QWORD *)v14 + 6);
      if (v73 < a4)
      {
        v201 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v201 = 0x3000000002;
        *(_QWORD *)(v201 + 8) = "byteOffset exceeds source ArrayBuffer byteLength";
        *(_DWORD *)(v201 + 16) = 4;
        *(_QWORD *)__s = v201;
        v202 = *(_QWORD *)(a1 + 128);
        v203 = *(JSC::Heap ***)(a1 + 56);
        if ((v202 & 1) != 0)
        {
          v224 = *(uint64_t (**)(JSC::VM **))(v202 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a1 & 8) != 0)
            v225 = (JSC::VM **)(a1 - 16);
          else
            v225 = (JSC::VM **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          __dst = *v225;
          v280 = a1;
          v281 = a1 + 128;
          v202 = v224(&__dst);
        }
        v204 = JSC::ErrorInstance::create(v203, v202, (WTF::StringImpl **)__s, 0, 0, 0, 2, 1);
        v211 = (JSC::Exception *)v204;
        if ((v204 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v204 & 0xFFFFFFFE) + 0x4C)))
        {
          v211 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v204, 0, v205, v206, v207, v208, v209);
        }
        JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v211, v210, v205, v206, v207, v208, v209);
        v212 = *(WTF::StringImpl **)__s;
        *(_QWORD *)__s = 0;
        if (v212)
        {
          if (*(_DWORD *)v212 == 2)
          {
            WTF::StringImpl::~StringImpl(v212, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
            WTF::fastFree(v215, v216, v217, v218, v219, v220, v221, v222);
          }
          else
          {
            *(_DWORD *)v212 -= 2;
          }
        }
        goto LABEL_10;
      }
      v62 = 0;
      LOBYTE(a5) = 0;
      a6 = 0;
    }
    else
    {
      a5 = *((_QWORD *)v14 + 6) - a4;
      v62 = a5 & 0xFFFFFFFFFFFFFF00;
      a6 = 1;
    }
    v23 = (JSC::VM *)JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::create(a1, a2, (uint64_t)&v265, a4, a5 | v62, a6, a9, a7, a8);
    v14 = v265;
    v265 = 0;
    if (!v14)
      return (unint64_t)v23;
    goto LABEL_61;
  }
  if (v13 < 0x17)
  {
LABEL_20:
    v43 = JSC::JSValue::toTypedArrayIndex(&v278, (JSC::JSGlobalObject *)a1, (uint64_t)"length", 7, a5, a6, a7, a8, (int8x16_t)a9);
    if (!*(_DWORD *)(v11 + 80))
      return JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::create((JSC::JSGlobalObject *)a1, a2, v43, v38, v39, v40, v41, v42);
    v59 = *(_DWORD *)(v11 + 80);
    if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v37, v38, v39, v40, v41, v42);
    if (!*(_QWORD *)(v11 + 16))
      return JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::create((JSC::JSGlobalObject *)a1, a2, v43, v38, v39, v40, v41, v42);
    return 0;
  }
  if (v13 - 39 <= 0xA)
  {
    if ((*(_BYTE *)(a3 + 40) & 7u) > 2)
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v280) = 0;
      v60 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a3, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
      if (v61)
        v24 = v60;
      else
        v24 = 0;
    }
    else
    {
      v24 = *(_QWORD *)(a3 + 24);
    }
    Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v24, a4, a5, a6, a7, a8);
    if (!Uninitialized)
      return 0;
    v32 = Uninitialized;
    LOBYTE(__dst) = 0;
    LOBYTE(v280) = 0;
    if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a3, (unint64_t *)&__dst, v26, v27, v28, v29, v30, v31))
    {
      v34 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
      v35 = a1;
      v36 = 72;
LABEL_18:
      JSC::throwTypeError(v35, &v277, (uint64_t)v34, v36);
      return 0;
    }
    if (*(unsigned __int8 *)(a3 + 5) - 39 >= 9)
    {
      v34 = "Content types of source and new typed array are different";
      v35 = a1;
      v36 = 58;
      goto LABEL_18;
    }
    v58 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setFromTypedArray(v32, a1, 0, a3, 0, v24, 1, v33);
LABEL_43:
    if (v58)
      return v32;
    else
      return 0;
  }
  v44 = v11;
  if (a3)
  {
    v44 = v11;
    if (v13 == 36)
    {
      v45 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
      v46 = *(_QWORD *)(v45 + 2216);
      v47 = (v46 & 1) != 0 ? (v46 >> 1) & 3 : *(unsigned __int8 *)(v46 + 4);
      v44 = v11;
      if (v47 != 2)
      {
        v44 = v11;
        if (*(_BYTE *)(*(_QWORD *)(v45 + 2048) + 4) != 2)
        {
          v48 = *(_QWORD *)(v45 + 2304);
          v49 = (v48 & 1) != 0 ? (v48 >> 1) & 3 : *(unsigned __int8 *)(v48 + 4);
          v44 = v11;
          if (v49 != 2)
          {
            v50 = *(unsigned __int8 *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 8);
            v51 = (v50 >> 1) & 7;
            if ((v50 & 0x10) != 0)
              v51 = ((v50 & 0xE) + 10) >> 1;
            v52 = *(_DWORD *)(v45 + 4 * v51 + 852);
            if (v52)
              v53 = 16 * (v52 & 0xFFFFFFFE);
            else
              v53 = 0;
            if (v53 == 16 * (*(_DWORD *)a3 & 0xFFFFFFFE))
              goto LABEL_37;
            v44 = v11;
            if ((v50 & 0x20) == 0)
            {
              v74 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x30);
              if (!v74)
                v74 = *(_QWORD *)(a3 + 16);
              v44 = v11;
              if (v74 == *(_QWORD *)(v45 + 672))
              {
                if (JSC::JSObject::getDirectOffset((_DWORD *)a3, *(JSC::VM **)(v45 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 56) + 41952) + 2712), (const JSC::PropertyTable *)a4, a5, a6, a7, a8) == -1)
                {
LABEL_37:
                  if ((*(_BYTE *)(a3 + 4) & 0xE) != 0)
                    v54 = *(unsigned int *)(*(_QWORD *)(a3 + 8) - 8);
                  else
                    v54 = 0;
LABEL_39:
                  v55 = (JSC::JSArrayBufferView *)JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v54, a4, a5, a6, a7, a8);
                  if (!v55)
                    return 0;
                  v32 = (uint64_t)v55;
                  v58 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setFromArrayLike(v55, (JSC::JSGlobalObject *)a1, 0, a3, 0, v54, v56, v57);
                  goto LABEL_43;
                }
                v44 = *(_QWORD *)(a1 + 56);
              }
            }
          }
        }
      }
    }
  }
  v267 = 0xFFFFFFFF00000000;
  v269 = 0;
  v270 = 0;
  v268 = (_DWORD *)a3;
  v271 = 196608;
  v272 = 0;
  v275 = 0;
  v276 = 0;
  v273 = v11;
  ++*(_DWORD *)(v11 + 4);
  v274 = 1;
  v264 = v11 + 41952;
  v75 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768);
  v76 = (_BYTE *)(a3 + 6);
  v77 = v75 >> 4;
  if ((*(_BYTE *)(a3 + 6) & 8) == 0)
  {
    v78 = a3;
    while (1)
    {
      v79 = *(_DWORD *)v78 & 0xFFFFFFFE;
      v80 = 16 * v79;
      if (!(_DWORD)v77 || (v77 & ~*(_DWORD *)(16 * v79 + 0x20)) != 0)
        goto LABEL_106;
      v81 = *(_QWORD *)(16 * v79 + 0x58);
      if (!v81)
      {
        v82 = *(_QWORD *)(16 * v79 + 0x40);
        if (!v82 || *(_BYTE *)(v82 + 5) != 1 && *(_DWORD *)(v82 + 80) < 2u)
          goto LABEL_106;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v80, (JSC::VM *)v44, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v81)
          goto LABEL_106;
      }
      if (!*(_DWORD *)(v81 + 24))
        goto LABEL_106;
      v83 = *(_QWORD *)(v81 + 16);
      v84 = v83 & 0xFFFFFFFFFFFFFFFELL;
      v85 = *(unsigned int *)(v81 + 8);
      v86 = *(_DWORD *)(v75 + 16);
      if ((v83 & 1) != 0)
      {
        if ((v86 & 0x20) != 0)
          v86 = *(_DWORD *)(v75 + 32);
        v87 = *(_DWORD *)(v81 + 12);
        v88 = (v86 >> 8) & *(_QWORD *)&v87;
        v89 = *(unsigned __int8 *)(v84 + v88);
        if (!*(_BYTE *)(v84 + v88))
          goto LABEL_106;
        v90 = v84 + v85;
        v91 = 1;
        while (1)
        {
          v92 = *(_QWORD *)(v90 + 8 * (v89 - 1));
          if (v75 == (v92 & 0xFFFFFFFFFFFFLL))
            break;
          v88 = ((_DWORD)v88 + v91) & v87;
          v89 = *(unsigned __int8 *)(v84 + v88);
          ++v91;
          if (!*(_BYTE *)(v84 + v88))
            goto LABEL_106;
        }
        a6 = (v92 >> 16) & 0xFF00000000 | HIBYTE(v92);
      }
      else
      {
        if ((v86 & 0x20) != 0)
          v86 = *(_DWORD *)(v75 + 32);
        v93 = *(_DWORD *)(v81 + 12);
        v94 = v93 & (v86 >> 8);
        v95 = *(_DWORD *)(v84 + 4 * v94);
        if (!v95)
          goto LABEL_106;
        v96 = v84 + 4 * v85;
        v97 = 1;
        while (1)
        {
          v98 = (v95 - 1);
          if (v75 == *(_QWORD *)(v96 + 16 * v98))
            break;
          v94 = (v94 + v97) & v93;
          v95 = *(_DWORD *)(v84 + 4 * v94);
          ++v97;
          if (!v95)
            goto LABEL_106;
        }
        a6 = *(unsigned int *)(v96 + 16 * v98 + 8) | ((unint64_t)*(unsigned __int8 *)(v96 + 16 * v98 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v108 = v78 + 16;
          v109 = a6 << 32;
        }
        else
        {
          v108 = *(_QWORD *)(v78 + 8) - 8;
          v109 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v108 + (v109 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v110 = *(unsigned __int8 *)(a4 + 5);
          if (v110 != 5)
          {
            if (v110 != 6)
              goto LABEL_134;
            v124 = *(_DWORD *)(v80 + 16) & 3;
            v125 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v127 = *(int8x16_t ***)(a4 + 24);
              v126 = *(_QWORD *)(a4 + 32);
              v265 = *(uint64_t (**)(_QWORD))(a4 + 8);
              v266 = v125;
              LODWORD(v267) = HIDWORD(a6);
              v269 = (_DWORD *)v78;
              goto LABEL_162;
            }
            v265 = *(uint64_t (**)(_QWORD))(a4 + 8);
            v266 = v125;
            LODWORD(v267) = HIDWORD(a6);
            v269 = (_DWORD *)v78;
LABEL_341:
            BYTE1(v271) = 3;
            if (v124 != 2)
              LOBYTE(v271) = 1;
            goto LABEL_138;
          }
          v111 = (unsigned int *)v78;
LABEL_137:
          JSC::JSObject::fillGetterPropertySlot(v111, v44, (uint64_t)&v265, a4, a5, a6);
          goto LABEL_138;
        }
LABEL_134:
        v265 = (uint64_t (*)(_QWORD))a4;
        v269 = (_DWORD *)v78;
LABEL_135:
        v267 = __PAIR64__(a6, a5);
        LOWORD(v271) = 257;
        goto LABEL_138;
      }
LABEL_106:
      if ((*v76 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v78, (JSC::VM *)v44, v75, (uint64_t)&v265) & 1) != 0)
      {
        goto LABEL_138;
      }
      v99 = *(_QWORD *)(v80 + 48);
      if (!v99)
        v99 = *(_QWORD *)(v78 + 16);
      if ((v99 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v99 + 5) < 0x17u)
      {
        if (!v75)
          goto LABEL_138;
        v100 = *(_DWORD *)(v75 + 16);
        if ((v100 & 0x20) != 0)
          goto LABEL_138;
        v101 = *(_BYTE **)(v75 + 8);
        v102 = *(unsigned int *)(v75 + 4);
        if ((v100 & 4) != 0)
        {
          if (!(_DWORD)v102)
            goto LABEL_138;
          v103 = *v101 - 48;
          if (v103 > 9 || v102 >= 2 && *v101 == 48)
            goto LABEL_138;
          v226 = v101 + 1;
          v227 = v102 - 1;
          while (v227)
          {
            if (v103 <= 0x19999999)
            {
              v228 = *v226 - 48;
              if (v228 <= 9)
              {
                v107 = __CFADD__(v228, 10 * v103);
                v103 = v228 + 10 * v103;
                ++v226;
                --v227;
                if (!v107)
                  continue;
              }
            }
            goto LABEL_138;
          }
        }
        else
        {
          if (!(_DWORD)v102)
            goto LABEL_138;
          v103 = *(unsigned __int16 *)v101 - 48;
          if (v103 > 9 || *(_WORD *)v101 == 48 && v102 > 1)
            goto LABEL_138;
          v104 = (unsigned __int16 *)(v101 + 2);
          v105 = v102 - 1;
          while (v105)
          {
            if (v103 <= 0x19999999)
            {
              v106 = *v104 - 48;
              if (v106 <= 9)
              {
                v107 = __CFADD__(v106, 10 * v103);
                v103 = v106 + 10 * v103;
                ++v104;
                --v105;
                if (!v107)
                  continue;
              }
            }
            goto LABEL_138;
          }
        }
        if (v103 == -1)
          goto LABEL_138;
        v229 = v103;
        v230 = *(_QWORD *)(a1 + 56);
        v231 = a3;
        while (1)
        {
          v232 = 16 * (*(_DWORD *)v231 & 0xFFFFFFFE);
          v233 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(_QWORD)))(16 * *(unsigned int *)(v232 + 0x4C) + 0x70))(v231, a1, v229, &v265);
          v234 = v233;
          if (*(_DWORD *)(v230 + 80))
          {
            v237 = *(_DWORD *)(v230 + 80);
            if ((v237 & 0x27) != 0 && (v237 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v230 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v230 + 16))
              v238 = 1;
            else
              v238 = v234;
            if ((v238 & 1) != 0)
              goto LABEL_138;
          }
          else if ((v233 & 1) != 0)
          {
            goto LABEL_138;
          }
          if (BYTE2(v271) == 3)
          {
            if (v272)
              goto LABEL_138;
            v235 = *(unsigned __int8 *)(v231 + 5);
            if (v235 == 61)
              goto LABEL_410;
          }
          else
          {
            v235 = *(unsigned __int8 *)(v231 + 5);
            if (v235 == 61)
            {
              if (BYTE2(v271) == 1)
                goto LABEL_138;
              goto LABEL_410;
            }
          }
          if ((v235 - 39) <= 0xA)
          {
            if ((*(_BYTE *)(v231 + 40) & 7u) > 2)
            {
              LOBYTE(__dst) = 0;
              LOBYTE(v280) = 0;
              v241 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v231, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
              v240 = v242 ? v241 : 0;
            }
            else
            {
              v240 = *(_QWORD *)(v231 + 24);
            }
            if (v240 <= v229)
              goto LABEL_138;
          }
LABEL_410:
          if ((*(_WORD *)(v232 + 12) & 0x800) == 0 || BYTE2(v271) == 3)
          {
            v236 = *(_QWORD *)(16 * (*(_DWORD *)v231 & 0xFFFFFFFE) + 0x30);
            if (!v236)
              v236 = *(_QWORD *)(v231 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v231 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v236 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v231 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v231, a1);
            }
            else
            {
              v236 = *(_QWORD *)(16 * (*(_DWORD *)v231 & 0xFFFFFFFE) + 0x30);
              if (!v236)
                v236 = *(_QWORD *)(v231 + 16);
            }
            if (*(_DWORD *)(v230 + 80))
            {
              v239 = *(_DWORD *)(v230 + 80);
              if ((v239 & 0x27) != 0 && (v239 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v230 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v230 + 16))
                goto LABEL_138;
            }
          }
          if ((v236 & 0xFFFE000000000002) == 0)
          {
            v231 = v236;
            if (*(unsigned __int8 *)(v236 + 5) > 0x16u)
              continue;
          }
          goto LABEL_138;
        }
      }
      v76 = (_BYTE *)(v99 + 6);
      v78 = v99;
      if ((*(_BYTE *)(v99 + 6) & 8) != 0)
        goto LABEL_191;
    }
  }
  v99 = a3;
LABEL_191:
  if (v75)
  {
    v136 = *(_DWORD *)(v75 + 16);
    if ((v136 & 0x20) == 0)
    {
      v137 = *(_BYTE **)(v75 + 8);
      v138 = *(unsigned int *)(v75 + 4);
      if ((v136 & 4) != 0)
      {
        if ((_DWORD)v138)
        {
          v139 = *v137 - 48;
          if (v139 <= 9 && (v138 < 2 || *v137 != 48))
          {
            v243 = v137 + 1;
            v244 = v138 - 1;
            while (v244)
            {
              if (v139 <= 0x19999999)
              {
                v245 = *v243 - 48;
                if (v245 <= 9)
                {
                  v107 = __CFADD__(v245, 10 * v139);
                  v139 = v245 + 10 * v139;
                  ++v243;
                  --v244;
                  if (!v107)
                    continue;
                }
              }
              goto LABEL_196;
            }
LABEL_459:
            if (v139 != -1)
            {
              v246 = v139;
              v247 = *(_QWORD *)(a1 + 56);
              v248 = a3;
              while (1)
              {
                v249 = 16 * (*(_DWORD *)v248 & 0xFFFFFFFE);
                v250 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(_QWORD)))(16 * *(unsigned int *)(v249 + 0x4C) + 0x70))(v248, a1, v246, &v265);
                v251 = v250;
                if (*(_DWORD *)(v247 + 80))
                {
                  v254 = *(_DWORD *)(v247 + 80);
                  if ((v254 & 0x27) != 0 && (v254 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v247 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v247 + 16))
                    v255 = 1;
                  else
                    v255 = v251;
                  if ((v255 & 1) != 0)
                    goto LABEL_138;
                }
                else if ((v250 & 1) != 0)
                {
                  goto LABEL_138;
                }
                if (BYTE2(v271) == 3)
                {
                  if (v272)
                    goto LABEL_138;
                  v252 = *(unsigned __int8 *)(v248 + 5);
                  if (v252 == 61)
                    goto LABEL_466;
                }
                else
                {
                  v252 = *(unsigned __int8 *)(v248 + 5);
                  if (v252 == 61)
                  {
                    if (BYTE2(v271) == 1)
                      goto LABEL_138;
                    goto LABEL_466;
                  }
                }
                if ((v252 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v248 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    LOBYTE(v280) = 0;
                    v257 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v248, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                    v256 = v258 ? v257 : 0;
                  }
                  else
                  {
                    v256 = *(_QWORD *)(v248 + 24);
                  }
                  if (v256 <= v246)
                    goto LABEL_138;
                }
LABEL_466:
                if ((*(_WORD *)(v249 + 12) & 0x800) == 0 || BYTE2(v271) == 3)
                {
                  v253 = *(_QWORD *)(16 * (*(_DWORD *)v248 & 0xFFFFFFFE) + 0x30);
                  if (!v253)
                    v253 = *(_QWORD *)(v248 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v248 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v253 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v248 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v248, a1);
                  }
                  else
                  {
                    v253 = *(_QWORD *)(16 * (*(_DWORD *)v248 & 0xFFFFFFFE) + 0x30);
                    if (!v253)
                      v253 = *(_QWORD *)(v248 + 16);
                  }
                  if (*(_DWORD *)(v247 + 80))
                  {
                    v259 = *(_DWORD *)(v247 + 80);
                    if ((v259 & 0x27) != 0 && (v259 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v247 + 64), 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v247 + 16))
                      goto LABEL_138;
                  }
                }
                if ((v253 & 0xFFFE000000000002) == 0)
                {
                  v248 = v253;
                  if (*(unsigned __int8 *)(v253 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_138;
              }
            }
          }
        }
      }
      else if ((_DWORD)v138)
      {
        v139 = *(unsigned __int16 *)v137 - 48;
        if (v139 <= 9 && (*(_WORD *)v137 != 48 || v138 <= 1))
        {
          v193 = (unsigned __int16 *)(v137 + 2);
          v194 = v138 - 1;
          while (v194)
          {
            if (v139 <= 0x19999999)
            {
              v195 = *v193 - 48;
              if (v195 <= 9)
              {
                v107 = __CFADD__(v195, 10 * v139);
                v139 = v195 + 10 * v139;
                ++v193;
                --v194;
                if (!v107)
                  continue;
              }
            }
            goto LABEL_196;
          }
          goto LABEL_459;
        }
      }
    }
  }
LABEL_196:
  v44 = *(_QWORD *)(a1 + 56);
  while (1)
  {
    v140 = 16 * (*(_DWORD *)v99 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v99 + 6) & 8) == 0)
      break;
    v261 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(_QWORD)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v99 & 0xFFFFFFFE) + 0x4C) + 0x68))(v99, a1, v75, &v265);
    if (*(_DWORD *)(v44 + 80))
    {
      v187 = *(_DWORD *)(v44 + 80);
      if ((v187 & 0x27) != 0 && (v187 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v44 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v188 = v261;
      if (*(_QWORD *)(v44 + 16))
        v188 = 1;
      if ((v188 & 1) != 0)
        goto LABEL_138;
    }
    else if ((v261 & 1) != 0)
    {
      goto LABEL_138;
    }
    if (BYTE2(v271) == 3)
    {
      if (v272)
        goto LABEL_138;
      v163 = *(unsigned __int8 *)(v99 + 5);
      if (v163 == 61)
        goto LABEL_226;
    }
    else
    {
      v163 = *(unsigned __int8 *)(v99 + 5);
      if (v163 == 61)
      {
        if (BYTE2(v271) == 1)
          goto LABEL_138;
        goto LABEL_226;
      }
    }
    if (!v75)
      goto LABEL_226;
    if ((v163 - 50) < 0xFFFFFFF5)
      goto LABEL_226;
    v164 = *(_DWORD *)(v75 + 16);
    if ((v164 & 0x20) != 0)
      goto LABEL_226;
    v165 = *(unsigned int *)(v75 + 4);
    if (!(_DWORD)v165)
      goto LABEL_226;
    v166 = *(unsigned __int8 **)(v75 + 8);
    if ((v164 & 4) != 0)
    {
      v167 = *v166;
      if ((_DWORD)v165 == 1)
      {
LABEL_255:
        if ((v167 - 48) < 0xA)
          goto LABEL_138;
        goto LABEL_226;
      }
      if (v167 == 45)
      {
        v167 = v166[1];
        goto LABEL_259;
      }
      if ((v167 - 48) < 0xA)
        goto LABEL_270;
      if ((_DWORD)v165 == 8)
        goto LABEL_269;
    }
    else
    {
      v167 = *(unsigned __int16 *)v166;
      if ((_DWORD)v165 == 1)
        goto LABEL_255;
      if (v167 == 45)
      {
        v167 = *((unsigned __int16 *)v166 + 1);
LABEL_259:
        if ((v167 - 48) < 0xA)
        {
          if ((_DWORD)v165 == 2)
            goto LABEL_138;
          goto LABEL_270;
        }
        if ((_DWORD)v165 != 9)
          goto LABEL_226;
LABEL_269:
        if (v167 != 73)
          goto LABEL_226;
        goto LABEL_270;
      }
      if ((v167 - 48) < 0xA || (_DWORD)v165 == 8 && v167 == 73)
        goto LABEL_270;
    }
    if ((_DWORD)v165 != 3 || v167 != 78)
      goto LABEL_226;
LABEL_270:
    v260 = v260 & 0xFFFFFF0000000000 | v165 | ((unint64_t)((v164 >> 2) & 1) << 32);
    JSC::jsToNumber(v166, v260);
    v169 = (v168 >> 52) & 0x7FF;
    if ((_DWORD)v169 == 2047)
    {
      if ((v168 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", 3);
        v170 = &__s[3];
      }
      else
      {
        if ((v168 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v176 = &__s[1];
        }
        else
        {
          v176 = __s;
        }
        *(_QWORD *)v176 = 0x7974696E69666E49;
        v170 = v176 + 8;
      }
      goto LABEL_284;
    }
    v171 = v168 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v168 & 0x8000000000000000) != 0 && v171)
    {
      __s[0] = 45;
      v172 = &__s[1];
    }
    else
    {
      if (!v171)
      {
        __s[0] = 48;
        v170 = &__s[1];
        goto LABEL_284;
      }
      v172 = __s;
    }
    v262 = (uint64_t)v172;
    v173 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v168 & 0x800FFFFFFFFFFFFFLL, v169);
    v170 = WTF::dragonbox::detail::to_shortest(v173, v174, v262, v175);
LABEL_284:
    *v170 = 0;
    v263 = strlen(__s);
    memcpy(&__dst, __s, v263);
    *((_BYTE *)&__dst + v263) = 0;
    v177 = *(unsigned int *)(v75 + 4);
    v178 = *(unsigned __int8 **)(v75 + 8);
    if ((*(_BYTE *)(v75 + 16) & 4) != 0)
    {
      if ((_DWORD)v177)
      {
        p_dst = &__dst;
        v184 = *(unsigned int *)(v75 + 4);
        do
        {
          v186 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v185 = v186;
          if (!v186 || *v178 != v185)
            goto LABEL_226;
          ++v178;
        }
        while (--v184);
      }
    }
    else if ((_DWORD)v177)
    {
      v179 = &__dst;
      v180 = *(unsigned int *)(v75 + 4);
      do
      {
        v182 = *(unsigned __int8 *)v179;
        v179 = (JSC::VM **)((char *)v179 + 1);
        v181 = v182;
        if (!v182 || *(unsigned __int16 *)v178 != v181)
          goto LABEL_226;
        v178 += 2;
      }
      while (--v180);
    }
    if (!*((_BYTE *)&__dst + v177))
      goto LABEL_138;
LABEL_226:
    if ((*(_WORD *)(v140 + 12) & 0x800) == 0)
    {
      v159 = *(_DWORD *)v99;
LABEL_228:
      v160 = *(_QWORD *)(16 * (v159 & 0xFFFFFFFE) + 0x30);
      if (!v160)
        v160 = *(_QWORD *)(v99 + 16);
      goto LABEL_230;
    }
    v159 = *(_DWORD *)v99;
    if (BYTE2(v271) == 3)
      goto LABEL_228;
    v161 = 16 * (v159 & 0xFFFFFFFE);
    if ((*(_WORD *)(v161 + 12) & 0x800) != 0)
    {
      v160 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v161 + 76) + 0xB0))(v99, a1);
    }
    else
    {
      v160 = *(_QWORD *)(v161 + 48);
      if (!v160)
        v160 = *(_QWORD *)(v99 + 16);
    }
    if (*(_DWORD *)(v44 + 80))
    {
      v162 = *(_DWORD *)(v44 + 80);
      if ((v162 & 0x27) != 0 && (v162 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v44 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v44 + 16))
        goto LABEL_138;
    }
LABEL_230:
    if ((v160 & 0xFFFE000000000002) == 0)
    {
      v99 = v160;
      if (*(unsigned __int8 *)(v160 + 5) > 0x16u)
        continue;
    }
    goto LABEL_138;
  }
  if (!(_DWORD)v77 || (v77 & ~*(_DWORD *)(16 * (*(_DWORD *)v99 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_225;
  v141 = *(_QWORD *)(16 * (*(_DWORD *)v99 & 0xFFFFFFFE) + 0x58);
  if (!v141)
  {
    v142 = *(_QWORD *)(16 * (*(_DWORD *)v99 & 0xFFFFFFFE) + 0x40);
    if (!v142 || *(_BYTE *)(v142 + 5) != 1 && *(_DWORD *)(v142 + 80) < 2u)
      goto LABEL_225;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v99 & 0xFFFFFFFE)), (JSC::VM *)v44, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v141)
      goto LABEL_225;
  }
  if (!*(_DWORD *)(v141 + 24))
    goto LABEL_225;
  v143 = *(_QWORD *)(v141 + 16);
  v144 = v143 & 0xFFFFFFFFFFFFFFFELL;
  v145 = *(unsigned int *)(v141 + 8);
  v146 = *(_DWORD *)(v75 + 16);
  if ((v143 & 1) != 0)
  {
    if ((v146 & 0x20) != 0)
      v146 = *(_DWORD *)(v75 + 32);
    v147 = *(_DWORD *)(v141 + 12);
    v148 = (v146 >> 8) & *(_QWORD *)&v147;
    v149 = *(unsigned __int8 *)(v144 + v148);
    if (*(_BYTE *)(v144 + v148))
    {
      v150 = v144 + v145;
      v151 = 1;
      while (1)
      {
        v152 = *(_QWORD *)(v150 + 8 * (v149 - 1));
        if (v75 == (v152 & 0xFFFFFFFFFFFFLL))
          break;
        v148 = ((_DWORD)v148 + v151) & v147;
        v149 = *(unsigned __int8 *)(v144 + v148);
        ++v151;
        if (!*(_BYTE *)(v144 + v148))
          goto LABEL_225;
      }
      a6 = (v152 >> 16) & 0xFF00000000 | HIBYTE(v152);
      goto LABEL_222;
    }
    goto LABEL_225;
  }
  if ((v146 & 0x20) != 0)
    v146 = *(_DWORD *)(v75 + 32);
  v153 = *(_DWORD *)(v141 + 12);
  v154 = v153 & (v146 >> 8);
  v155 = *(_DWORD *)(v144 + 4 * v154);
  if (!v155)
    goto LABEL_225;
  v156 = v144 + 4 * v145;
  v157 = 1;
  while (1)
  {
    v158 = (v155 - 1);
    if (v75 == *(_QWORD *)(v156 + 16 * v158))
      break;
    v154 = (v154 + v157) & v153;
    v155 = *(_DWORD *)(v144 + 4 * v154);
    ++v157;
    if (!v155)
      goto LABEL_225;
  }
  a6 = *(unsigned int *)(v156 + 16 * v158 + 8) | ((unint64_t)*(unsigned __int8 *)(v156 + 16 * v158 + 12) << 32);
LABEL_222:
  if ((_DWORD)a6 == -1)
  {
LABEL_225:
    if ((*(_BYTE *)(v99 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v99, (JSC::VM *)v44, v75, (uint64_t)&v265) & 1) != 0)
    {
      goto LABEL_138;
    }
    goto LABEL_226;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v191 = v99 + 16;
    v192 = a6 << 32;
  }
  else
  {
    v191 = *(_QWORD *)(v99 + 8) - 8;
    v192 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v191 + (v192 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_353:
    v265 = (uint64_t (*)(_QWORD))a4;
    v269 = (_DWORD *)v99;
    goto LABEL_135;
  }
  v200 = *(unsigned __int8 *)(a4 + 5);
  if (v200 == 5)
  {
    v111 = (unsigned int *)v99;
    goto LABEL_137;
  }
  if (v200 != 6)
    goto LABEL_353;
  v124 = *(_DWORD *)(v140 + 16) & 3;
  v223 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v265 = *(uint64_t (**)(_QWORD))(a4 + 8);
    v266 = v223;
    LODWORD(v267) = HIDWORD(a6);
    v269 = (_DWORD *)v99;
    goto LABEL_341;
  }
  v127 = *(int8x16_t ***)(a4 + 24);
  v126 = *(_QWORD *)(a4 + 32);
  v265 = *(uint64_t (**)(_QWORD))(a4 + 8);
  v266 = v223;
  LODWORD(v267) = HIDWORD(a6);
  v269 = (_DWORD *)v99;
LABEL_162:
  BYTE1(v271) = 3;
  if (v124 != 2)
    LOBYTE(v271) = 1;
  HIBYTE(v271) = 1;
  v275 = v127;
  v276 = v126;
LABEL_138:
  v23 = v277;
  if (*((_DWORD *)v277 + 20))
  {
    v189 = *((_DWORD *)v277 + 20);
    if ((v189 & 0x27) != 0 && (v189 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v277 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v23 + 2))
      goto LABEL_362;
  }
  if (v274)
  {
    v112 = *(_DWORD *)(v273 + 4);
    if (!v112)
    {
      __break(0xC471u);
      JUMPOUT(0x19848E8C4);
    }
    *(_DWORD *)(v273 + 4) = v112 - 1;
    v273 = 0;
    v274 = 0;
  }
  v114 = JSC::JSObject::get((unsigned int *)a3, a1, *(_QWORD *)(*(_QWORD *)v264 + 2712), a4, a5, a6, a7, a8);
  if (!*((_DWORD *)v23 + 20))
    goto LABEL_143;
  v190 = *((_DWORD *)v23 + 20);
  if ((v190 & 0x27) != 0 && (v190 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v23 + 64), 7u, v113, a4, a5, a6, a7, a8);
  if (*((_QWORD *)v23 + 2))
  {
LABEL_362:
    v54 = 0;
  }
  else
  {
LABEL_143:
    if ((v114 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v116 = BYTE1(v271);
      goto LABEL_145;
    }
    v118 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    v119 = *(_QWORD *)(v118 + 528);
    if ((v119 & 1) != 0)
    {
      v196 = *(uint64_t (**)(JSC::VM **))(v119 & 0xFFFFFFFFFFFFFFFCLL);
      v197 = (JSC::VM **)(v118 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v118 & 8) != 0)
        v197 = (JSC::VM **)(v118 - 16);
      __dst = *v197;
      v280 = v118;
      v281 = v118 + 528;
      v119 = v196(&__dst);
    }
    if (v119 != v114
      || (v116 = BYTE1(v271), (BYTE1(v271) & 0xFE) == 2)
      || v272
      || (*(_BYTE *)(a3 + 4) & 0xEu) > 9
      || ((v120 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) + 2216), (v120 & 1) != 0)
        ? (v121 = (v120 >> 1) & 3)
        : (v121 = *(unsigned __int8 *)(v120 + 4)),
          v121 == 2))
    {
      v23 = JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>((JSC::JSGlobalObject *)a1, a2, (JSC::JSObject *)a3, v114, a5, a6, a7, a8);
      v54 = 0;
      v122 = 0;
      goto LABEL_184;
    }
LABEL_145:
    if (!v116)
    {
      v54 = 0;
      goto LABEL_183;
    }
    if (v116 == 1)
    {
      v117 = (unint64_t)v265;
    }
    else
    {
      if (v116 == 2)
      {
        v123 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v265, (JSC::JSGlobalObject *)a1, v113, a4, a5, a6, a7, a8);
      }
      else
      {
        v128 = *(WTF::StringImpl **)(*(_QWORD *)v264 + 1768);
        v129 = (unint64_t)v269;
        v130 = *(_QWORD *)(16 * (*v269 & 0xFFFFFFFE) + 0x28);
        if ((v267 & 0x20) != 0)
          v129 = (unint64_t)v268;
        if (HIBYTE(v271) != 1)
          goto LABEL_177;
        if ((v129 & 0xFFFE000000000002) != 0)
          goto LABEL_391;
        v131 = *(unsigned int *)(16 * (*(_DWORD *)v129 & 0xFFFFFFFE) + 0x4C);
        v132 = *(_DWORD *)(16 * (*(_DWORD *)v129 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v131)
        {
          v133 = 16 * v131;
          if (v275 != (int8x16_t **)v133)
          {
            do
            {
              v133 = *(_QWORD *)(v133 + 16);
              v132 = v133 != 0;
              v134 = (int8x16_t **)v133 == v275 || v133 == 0;
            }
            while (!v134);
          }
        }
        if (!v132)
        {
LABEL_391:
          __dst = *(JSC::VM **)(a1 + 56);
          v123 = JSC::throwDOMAttributeGetterTypeError(v130, &__dst, v275, v128);
        }
        else
        {
LABEL_177:
          v123 = v265(v130);
        }
      }
      v117 = v123;
    }
    *(_QWORD *)__s = v117;
    if (*((_DWORD *)v23 + 20))
    {
      v213 = *((_DWORD *)v23 + 20);
      if ((v213 & 0x27) != 0 && (v213 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v23 + 64), 7u, v113, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v23 + 2))
        goto LABEL_362;
    }
    if (v117 < 0xFFFE000000000000)
    {
      if (v117 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase((JSC::JSObject **)__s, (JSC::JSGlobalObject *)a1, v113, a4, a5, a6, a7, a8, v115);
      else
        *(_QWORD *)&v198 = v117 - 0x2000000000000;
      v199 = trunc(v198 + 0.0);
      if (v199 <= 0.0)
      {
        v54 = 0;
      }
      else
      {
        if (v199 > 9.00719925e15)
          v199 = 9.00719925e15;
        v54 = (unint64_t)v199;
      }
    }
    else
    {
      v54 = v117 & ~((int)v117 >> 31);
    }
    if (!*((_DWORD *)v23 + 20))
      goto LABEL_183;
    v214 = *((_DWORD *)v23 + 20);
    if ((v214 & 0x27) != 0 && (v214 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v23 + 64), 7u, v113, a4, a5, a6, a7, a8);
    if (!*((_QWORD *)v23 + 2))
    {
LABEL_183:
      v122 = 1;
      goto LABEL_184;
    }
  }
  v122 = 0;
  v23 = 0;
LABEL_184:
  if (v274)
  {
    v135 = *(_DWORD *)(v273 + 4);
    if (!v135)
    {
      __break(0xC471u);
      JUMPOUT(0x19848E8A4);
    }
    *(_DWORD *)(v273 + 4) = v135 - 1;
  }
  if (v122)
    goto LABEL_39;
  return (unint64_t)v23;
}

unint64_t operationNewInt16ArrayWithSize(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  JSC::Heap **v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  JSC::Exception *v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::JSGlobalObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t OutOfMemoryError;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  JSC::Exception *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v63)(unint64_t *);
  unint64_t *v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  char v69;
  uint64_t v70;
  uint64_t vars0;

  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v9 + 40) = vars0;
  if ((a3 & 0x8000000000000000) != 0)
  {
    v16 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v16 = 0x1C00000002;
    *(_QWORD *)(v16 + 8) = "Requested length is negative";
    *(_DWORD *)(v16 + 16) = 4;
    v65 = (WTF::StringImpl *)v16;
    v17 = *(_QWORD *)(a1 + 128);
    v18 = *(JSC::Heap ***)(a1 + 56);
    if ((v17 & 1) != 0)
    {
      v63 = *(uint64_t (**)(unint64_t *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
      v64 = (unint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v64 = (unint64_t *)(a1 - 16);
      v66 = *v64;
      v67 = a1;
      *(_QWORD *)&v68 = a1 + 128;
      v17 = v63(&v66);
    }
    v19 = JSC::ErrorInstance::create(v18, v17, &v65, 0, 0, 0, 2, 1);
    v26 = (JSC::Exception *)v19;
    if ((v19 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C)))
    {
      v26 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v19, 0, v20, v21, v22, v23, v24);
    }
    JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)a1, v26, v25, v20, v21, v22, v23, v24);
    v34 = v65;
    v65 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    return 0;
  }
  v10 = a4;
  if (!a4)
  {
    JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v66, (JSC *)v9, a2, a3, 2, 0, a7, a8);
    if (v66)
    {
      v13 = JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::Heap **)v9, (JSC::VM *)0x30, v36, v37, v38, v39, v40, v41);
      v42 = *(_DWORD *)(v66 + 8);
      *(_DWORD *)v13 = v66 >> 4;
      *(_DWORD *)(v13 + 4) = v42;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_OWORD *)(v13 + 24) = v68;
      *(_BYTE *)(v13 + 40) = v69;
      v43 = v70;
      v44 = v9 + 192;
      if (*(_BYTE *)(v9 + 755))
      {
        __dmb(0xAu);
        *(_QWORD *)(v13 + 8) = v43;
        if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v13 + 7))
          JSC::Heap::writeBarrierSlowPath(v44, v13);
        __dmb(0xAu);
      }
      else
      {
        *(_QWORD *)(v13 + 8) = v70;
        if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v13 + 7))
          JSC::Heap::writeBarrierSlowPath(v44, v13);
      }
      v45 = v67;
      if (v67 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v45 = (v67 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)(v13 + 16) = v45;
      goto LABEL_27;
    }
    OutOfMemoryError = JSC::createOutOfMemoryError(a1, v35);
    v53 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v53 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v47, v48, v49, v50, v51);
    }
    JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)a1, v53, v52, v47, v48, v49, v50, v51);
    return 0;
  }
  if (a3 >= 0x3E9)
  {
    __break(0xC471u);
    JUMPOUT(0x19848F3D4);
  }
  if (!a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19848F3F4);
  }
  v13 = JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::Heap **)v9, (JSC::VM *)0x30, a3, a4, a5, a6, a7, a8);
  v14 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v13 = a2 >> 4;
  *(_DWORD *)(v13 + 4) = v14;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = a3;
  *(_QWORD *)(v13 + 32) = 0;
  *(_BYTE *)(v13 + 40) = 16;
  v15 = v9 + 192;
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(v13 + 8) = 0;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v13 + 7))
      JSC::Heap::writeBarrierSlowPath(v15, v13);
    __dmb(0xAu);
  }
  else if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v13 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v15, v13);
  }
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v10 = (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(v13 + 16) = v10;
LABEL_27:
  JSC::JSArrayBufferView::finishCreation(v13, (JSC::VM *)v9);
  return v13;
}

unint64_t operationNewInt16ArrayWithOneArgument(uint64_t a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD var38[8];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var38[7];
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 38 && *(_BYTE *)(*(_QWORD *)(a2 + 16) + 64))
  {
    v11 = *(_QWORD *)(a1 + 1752);
    if ((v11 & 1) == 0)
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v17 = (uint64_t *)(a1 - 16);
    v15 = *v17;
    v16 = a1 + 1752;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a1 + 1736);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v14 = (uint64_t *)(a1 - 16);
    v15 = *v14;
    v16 = a1 + 1736;
LABEL_9:
    var38[0] = v15;
    var38[1] = a1;
    var38[2] = v16;
    v11 = v13(var38);
  }
  return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
}

unint64_t JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::VM **a1, uint64_t a2, uint64_t this, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  unsigned int v13;
  JSC::JSObject *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::VM *v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t Uninitialized;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  const WTF::String *v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  JSC::VM *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  JSC::JSArrayBufferView *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  _BYTE *v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int8x16_t v104;
  int v105;
  JSC::JSObject *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  _BYTE *v111;
  uint64_t v112;
  unsigned int v113;
  unsigned __int16 *v114;
  uint64_t v115;
  unsigned int v116;
  BOOL v117;
  int v118;
  unsigned int *v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned __int16 *v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned __int8 *v137;
  int v138;
  double v139;
  const unsigned __int8 *v140;
  unsigned __int8 *v141;
  uint64_t v142;
  unsigned int v143;
  JSC::VM *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  unsigned int v153;
  JSC::VM *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  char *v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  JSC::JSArrayBufferView *v167;
  uint64_t v168;
  int v169;
  char v170;
  JSC::VM *v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  JSC::VM *v175;
  JSC::JSObject *v176;
  JSC::JSObject *v177;
  char v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v11 = a1[7];
  v175 = v11;
  v176 = (JSC::JSObject *)this;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_26;
  v13 = *(unsigned __int8 *)(this + 5);
  if (v13 != 38)
  {
    if (v13 >= 0x17)
    {
      if (v13 - 39 <= 0xA)
      {
        v27 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)this, a2, this, a4, a5, a6, a7, a8);
        Uninitialized = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v27, v28, v29, v30, v31, v32);
        if (!Uninitialized)
          return 0;
        v40 = Uninitialized;
        LOBYTE(v177) = 0;
        v178 = 0;
        if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(this, (unint64_t *)&v177, v34, v35, v36, v37, v38, v39))
        {
          v42 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
          v43 = (unint64_t)a1;
          v44 = 72;
LABEL_24:
          JSC::throwTypeError(v43, &v175, (uint64_t)v42, v44);
          return 0;
        }
        if (*(unsigned __int8 *)(this + 5) - 39 >= 9)
        {
          v42 = "Content types of source and new typed array are different";
          v43 = (unint64_t)a1;
          v44 = 58;
          goto LABEL_24;
        }
        v68 = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setFromTypedArray(v40, (unint64_t)a1, 0, this, 0, v27, 1, v41);
LABEL_39:
        if (v68)
          return v40;
        else
          return 0;
      }
      v63 = v11;
      if (this)
      {
        v63 = v11;
        if (v13 == 36)
        {
          if (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)this, a2, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8))
          {
            if ((*(_BYTE *)(this + 4) & 0xE) != 0)
              v64 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
            else
              v64 = 0;
LABEL_37:
            v65 = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v64, a4, a5, a6, a7, a8);
            if (!v65)
              return 0;
            v40 = v65;
            v68 = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setFromArrayLike(v65, (unint64_t)a1, 0, this, 0, v64, v66, v67);
            goto LABEL_39;
          }
          v63 = a1[7];
        }
      }
      v165 = 0xFFFFFFFF00000000;
      v167 = 0;
      v168 = 0;
      v166 = this;
      v169 = 196608;
      v170 = 0;
      v173 = 0;
      v174 = 0;
      v171 = v11;
      ++*((_DWORD *)v11 + 1);
      v172 = 1;
      v162 = (char *)v11 + 41952;
      v79 = *(_QWORD *)(*((_QWORD *)v11 + 5244) + 1768);
      v80 = this + 6;
      v81 = v79 >> 4;
      if ((*(_BYTE *)(this + 6) & 8) == 0)
      {
        v82 = (JSC::JSArrayBufferView *)this;
        while (1)
        {
          v83 = *(_DWORD *)v82 & 0xFFFFFFFE;
          v84 = 16 * v83;
          if ((_DWORD)v81)
          {
            if ((v81 & ~*(_DWORD *)(16 * v83 + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v84, v63, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (v85)
              {
                v177 = (JSC::JSObject *)v79;
                v86 = JSC::PropertyTable::get(v85, (uint64_t *)&v177);
                a6 = v86;
                if ((_DWORD)v86 != -1)
                {
                  a5 = HIDWORD(v86);
                  if ((int)v86 <= 63)
                  {
                    v97 = (uint64_t)v82 + 16;
                    v98 = v86 << 32;
                  }
                  else
                  {
                    v97 = *((_QWORD *)v82 + 1) - 8;
                    v98 = 0x3F00000000 - (v86 << 32);
                  }
                  a4 = *(_QWORD *)(v97 + (v98 >> 29));
                  if ((a4 & 0xFFFE000000000002) == 0)
                  {
                    v99 = *(unsigned __int8 *)(a4 + 5);
                    if (v99 == 5)
                    {
                      v119 = (unsigned int *)v82;
                      goto LABEL_135;
                    }
                    if (v99 == 6)
                    {
                      v122 = *(_DWORD *)(v84 + 16) & 3;
                      v123 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v125 = *(_QWORD *)(a4 + 24);
                        v124 = *(_QWORD *)(a4 + 32);
                        v163 = *(WTF::StringImpl **)(a4 + 8);
                        v164 = v123;
                        LODWORD(v165) = HIDWORD(v86);
                        v167 = v82;
                        goto LABEL_147;
                      }
                      v163 = *(WTF::StringImpl **)(a4 + 8);
                      v164 = v123;
                      LODWORD(v165) = HIDWORD(v86);
                      v167 = v82;
                      goto LABEL_176;
                    }
                  }
                  v163 = (WTF::StringImpl *)a4;
                  v167 = v82;
LABEL_90:
                  v165 = __PAIR64__(a6, a5);
                  LOWORD(v169) = 257;
                  goto LABEL_91;
                }
              }
            }
          }
          if ((*(_BYTE *)v80 & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v82, v63, v79, (uint64_t)&v163) & 1) != 0)
          {
            goto LABEL_91;
          }
          v87 = *(_QWORD *)(v84 + 48);
          if (!v87)
            v87 = *((_QWORD *)v82 + 2);
          if ((v87 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v87 + 5) < 0x17u)
            break;
          v80 = v87 + 6;
          v82 = (JSC::JSArrayBufferView *)v87;
          if ((*(_BYTE *)(v87 + 6) & 8) != 0)
            goto LABEL_65;
        }
        if (!v79)
          goto LABEL_91;
        v110 = *(_DWORD *)(v79 + 16);
        if ((v110 & 0x20) != 0)
          goto LABEL_91;
        v111 = *(_BYTE **)(v79 + 8);
        v112 = *(unsigned int *)(v79 + 4);
        if ((v110 & 4) != 0)
        {
          if (!(_DWORD)v112)
            goto LABEL_91;
          v113 = *v111 - 48;
          if (v113 > 9 || v112 >= 2 && *v111 == 48)
            goto LABEL_91;
          v141 = v111 + 1;
          v142 = v112 - 1;
          while (v142)
          {
            if (v113 <= 0x19999999)
            {
              v143 = *v141 - 48;
              if (v143 <= 9)
              {
                v117 = __CFADD__(v143, 10 * v113);
                v113 = v143 + 10 * v113;
                ++v141;
                --v142;
                if (!v117)
                  continue;
              }
            }
            goto LABEL_91;
          }
        }
        else
        {
          if (!(_DWORD)v112)
            goto LABEL_91;
          v113 = *(unsigned __int16 *)v111 - 48;
          if (v113 > 9 || *(_WORD *)v111 == 48 && v112 > 1)
            goto LABEL_91;
          v114 = (unsigned __int16 *)(v111 + 2);
          v115 = v112 - 1;
          while (v115)
          {
            if (v113 <= 0x19999999)
            {
              v116 = *v114 - 48;
              if (v116 <= 9)
              {
                v117 = __CFADD__(v116, 10 * v113);
                v113 = v116 + 10 * v113;
                ++v114;
                --v115;
                if (!v117)
                  continue;
              }
            }
            goto LABEL_91;
          }
        }
        if (v113 != -1)
        {
          v144 = a1[7];
          v145 = v113;
          v146 = this;
          while (1)
          {
            v147 = 16 * (*(_DWORD *)v146 & 0xFFFFFFFE);
            v148 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v147 + 0x4C) + 0x70))(v146, a1, v145, &v163);
            if (*((_DWORD *)v144 + 20))
            {
              if (((JSC::VM::hasExceptionsAfterHandlingTraps(v144, a2, this, a4, a5, a6, a7, a8) | v148) & 1) != 0)
                break;
            }
            else if ((v148 & 1) != 0)
            {
              break;
            }
            if (BYTE2(v169) == 3)
            {
              if (v170)
                break;
              v149 = *(unsigned __int8 *)(v146 + 5);
              if (v149 != 61)
              {
LABEL_244:
                if ((v149 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v146, a2, this, a4, a5, a6, a7, a8) <= v145)
                {
                  break;
                }
              }
            }
            else
            {
              v149 = *(unsigned __int8 *)(v146 + 5);
              if (v149 != 61)
                goto LABEL_244;
              if (BYTE2(v169) == 1)
                break;
            }
            if ((*(_WORD *)(v147 + 12) & 0x800) == 0 || BYTE2(v169) == 3)
            {
              v150 = *(_QWORD *)(16 * (*(_DWORD *)v146 & 0xFFFFFFFE) + 0x30);
              if (!v150)
                v150 = *(_QWORD *)(v146 + 16);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v146 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v150 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v146 & 0xFFFFFFFE)
                                                                                        + 0x4C)
                                                                      + 0xB0))(v146, a1);
              }
              else
              {
                v150 = *(_QWORD *)(16 * (*(_DWORD *)v146 & 0xFFFFFFFE) + 0x30);
                if (!v150)
                  v150 = *(_QWORD *)(v146 + 16);
              }
              if (*((_DWORD *)v144 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v144, a2, this, a4, a5, a6, a7, a8))
              {
                break;
              }
            }
            if ((v150 & 0xFFFE000000000002) == 0)
            {
              v146 = v150;
              if (*(unsigned __int8 *)(v150 + 5) > 0x16u)
                continue;
            }
            break;
          }
        }
LABEL_91:
        v25 = v175;
        if (*((_DWORD *)v175 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v175, a2, this, a4, a5, a6, a7, a8))
          goto LABEL_157;
        if (v172)
        {
          v100 = *((_DWORD *)v171 + 1);
          if (!v100)
          {
            __break(0xC471u);
            JUMPOUT(0x19848FED8);
          }
          *((_DWORD *)v171 + 1) = v100 - 1;
          v171 = 0;
          v172 = 0;
        }
        v103 = JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v162 + 2712), a4, a5, a6, a7, a8);
        if (*((_DWORD *)v25 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v25, v101, v102, a4, a5, a6, a7, a8))
            goto LABEL_157;
        }
        if ((v103 & 0xFFFFFFFFFFFFFFF7) == 2)
        {
          v105 = BYTE1(v169);
        }
        else if (v103 != JSC::JSGlobalObject::arrayProtoValuesFunction(*(_QWORD *)(16
                                                                                  * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                  + 0x28))
               || (v105 = BYTE1(v169), (BYTE1(v169) & 0xFE) == 2)
               || v170
               || (*(_BYTE *)(this + 4) & 0xEu) > 9
               || ((v120 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2216),
                    (v120 & 1) != 0)
                 ? (v121 = (v120 >> 1) & 3)
                 : (v121 = *(unsigned __int8 *)(v120 + 4)),
                   v121 == 2))
        {
          v25 = (JSC::VM *)JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::JSGlobalObject *)a1, a2, (JSC::JSObject *)this, v103, a5, a6, a7, a8);
          v64 = 0;
          v109 = 0;
          goto LABEL_127;
        }
        if (v105)
        {
          if (v105 == 1)
          {
            v106 = v163;
          }
          else if (v105 == 2)
          {
            v106 = (JSC::JSObject *)JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v163, (JSC::JSGlobalObject *)a1, v102, a4, a5, a6, a7, a8);
          }
          else
          {
            v106 = (JSC::JSObject *)JSC::PropertySlot::customGetter((uint64_t)&v163, a1[7], *(WTF::StringImpl **)(*(_QWORD *)v162 + 1768));
          }
          v177 = v106;
          if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25, v101, v102, a4, a5, a6, a7, a8))
          {
LABEL_157:
            v64 = 0;
LABEL_158:
            v109 = 0;
            v25 = 0;
LABEL_127:
            if (v172)
            {
              v118 = *((_DWORD *)v171 + 1);
              if (!v118)
              {
                __break(0xC471u);
                JUMPOUT(0x19848FEF8);
              }
              *((_DWORD *)v171 + 1) = v118 - 1;
            }
            if (!v109)
              return (unint64_t)v25;
            goto LABEL_37;
          }
          v64 = JSC::JSValue::toLength(&v177, (JSC::JSGlobalObject *)a1, v102, a4, a5, a6, a7, a8, v104);
          if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25, v107, v108, a4, a5, a6, a7, a8))
            goto LABEL_158;
        }
        else
        {
          v64 = 0;
        }
        v109 = 1;
        goto LABEL_127;
      }
      v87 = this;
LABEL_65:
      if (v79)
      {
        v88 = *(_DWORD *)(v79 + 16);
        if ((v88 & 0x20) == 0)
        {
          v89 = *(_BYTE **)(v79 + 8);
          v90 = *(unsigned int *)(v79 + 4);
          if ((v88 & 4) != 0)
          {
            if ((_DWORD)v90)
            {
              v91 = *v89 - 48;
              if (v91 <= 9 && (v90 < 2 || *v89 != 48))
              {
                v151 = v89 + 1;
                v152 = v90 - 1;
                while (v152)
                {
                  if (v91 <= 0x19999999)
                  {
                    v153 = *v151 - 48;
                    if (v153 <= 9)
                    {
                      v117 = __CFADD__(v153, 10 * v91);
                      v91 = v153 + 10 * v91;
                      ++v151;
                      --v152;
                      if (!v117)
                        continue;
                    }
                  }
                  goto LABEL_70;
                }
LABEL_283:
                if (v91 != -1)
                {
                  v154 = a1[7];
                  v155 = v91;
                  v156 = this;
                  while (1)
                  {
                    v157 = 16 * (*(_DWORD *)v156 & 0xFFFFFFFE);
                    v158 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v157 + 0x4C) + 0x70))(v156, a1, v155, &v163);
                    if (*((_DWORD *)v154 + 20))
                    {
                      if (((JSC::VM::hasExceptionsAfterHandlingTraps(v154, a2, this, a4, a5, a6, a7, a8) | v158) & 1) != 0)
                        goto LABEL_91;
                    }
                    else if ((v158 & 1) != 0)
                    {
                      goto LABEL_91;
                    }
                    if (BYTE2(v169) == 3)
                    {
                      if (v170)
                        goto LABEL_91;
                      v159 = *(unsigned __int8 *)(v156 + 5);
                      if (v159 != 61)
                      {
LABEL_289:
                        if ((v159 - 39) <= 0xA
                          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v156, a2, this, a4, a5, a6, a7, a8) <= v155)
                        {
                          goto LABEL_91;
                        }
                      }
                    }
                    else
                    {
                      v159 = *(unsigned __int8 *)(v156 + 5);
                      if (v159 != 61)
                        goto LABEL_289;
                      if (BYTE2(v169) == 1)
                        goto LABEL_91;
                    }
                    if ((*(_WORD *)(v157 + 12) & 0x800) == 0 || BYTE2(v169) == 3)
                    {
                      v160 = *(_QWORD *)(16 * (*(_DWORD *)v156 & 0xFFFFFFFE) + 0x30);
                      if (!v160)
                        v160 = *(_QWORD *)(v156 + 16);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v156 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v160 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v156 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0xB0))(v156, a1);
                      }
                      else
                      {
                        v160 = *(_QWORD *)(16 * (*(_DWORD *)v156 & 0xFFFFFFFE) + 0x30);
                        if (!v160)
                          v160 = *(_QWORD *)(v156 + 16);
                      }
                      if (*((_DWORD *)v154 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v154, a2, this, a4, a5, a6, a7, a8))
                      {
                        goto LABEL_91;
                      }
                    }
                    if ((v160 & 0xFFFE000000000002) == 0)
                    {
                      v156 = v160;
                      if (*(unsigned __int8 *)(v160 + 5) > 0x16u)
                        continue;
                    }
                    goto LABEL_91;
                  }
                }
              }
            }
          }
          else if ((_DWORD)v90)
          {
            v91 = *(unsigned __int16 *)v89 - 48;
            if (v91 <= 9 && (*(_WORD *)v89 != 48 || v90 <= 1))
            {
              v129 = (unsigned __int16 *)(v89 + 2);
              v130 = v90 - 1;
              while (v130)
              {
                if (v91 <= 0x19999999)
                {
                  v131 = *v129 - 48;
                  if (v131 <= 9)
                  {
                    v117 = __CFADD__(v131, 10 * v91);
                    v91 = v131 + 10 * v91;
                    ++v129;
                    --v130;
                    if (!v117)
                      continue;
                  }
                }
                goto LABEL_70;
              }
              goto LABEL_283;
            }
          }
        }
      }
LABEL_70:
      v63 = a1[7];
      while (1)
      {
        v92 = 16 * (*(_DWORD *)v87 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v87 + 6) & 8) != 0)
        {
          v161 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v87 & 0xFFFFFFFE) + 0x4C) + 0x68))(v87, a1, v79, &v163);
          if (*((_DWORD *)v63 + 20))
          {
            if (((JSC::VM::hasExceptionsAfterHandlingTraps(v63, a2, this, a4, a5, a6, a7, a8) | v161) & 1) != 0)
              goto LABEL_91;
          }
          else if ((v161 & 1) != 0)
          {
            goto LABEL_91;
          }
          if (BYTE2(v169) == 3)
          {
            if (v170)
              goto LABEL_91;
            v134 = *(unsigned __int8 *)(v87 + 5);
            if (v134 != 61)
            {
LABEL_199:
              if (!v79)
                goto LABEL_77;
              if ((v134 - 50) < 0xFFFFFFF5)
                goto LABEL_77;
              v135 = *(_DWORD *)(v79 + 16);
              if ((v135 & 0x20) != 0)
                goto LABEL_77;
              v136 = *(unsigned int *)(v79 + 4);
              if (!(_DWORD)v136)
                goto LABEL_77;
              v137 = *(unsigned __int8 **)(v79 + 8);
              if ((v135 & 4) == 0)
              {
                v138 = *(unsigned __int16 *)v137;
                if ((_DWORD)v136 == 1)
                  goto LABEL_205;
                if (v138 == 45)
                {
                  v138 = *((unsigned __int16 *)v137 + 1);
                  goto LABEL_210;
                }
                if ((v138 - 48) >= 0xA && ((_DWORD)v136 != 8 || v138 != 73))
                {
LABEL_224:
                  if ((_DWORD)v136 != 3 || v138 != 78)
                    goto LABEL_77;
                }
LABEL_216:
                v80 = v80 & 0xFFFFFF0000000000 | v136 | ((unint64_t)((v135 >> 2) & 1) << 32);
                JSC::jsToNumber(v137, v80);
                WTF::numberToString(&v177, v139);
                if (WTF::equal(v79, (unint64_t)&v177, v140))
                  goto LABEL_91;
                goto LABEL_77;
              }
              v138 = *v137;
              if ((_DWORD)v136 == 1)
              {
LABEL_205:
                if ((v138 - 48) < 0xA)
                  goto LABEL_91;
                goto LABEL_77;
              }
              if (v138 == 45)
              {
                v138 = v137[1];
LABEL_210:
                if ((v138 - 48) < 0xA)
                {
                  if ((_DWORD)v136 == 2)
                    goto LABEL_91;
                  goto LABEL_216;
                }
                if ((_DWORD)v136 != 9)
                  goto LABEL_77;
              }
              else
              {
                if ((v138 - 48) < 0xA)
                  goto LABEL_216;
                if ((_DWORD)v136 != 8)
                  goto LABEL_224;
              }
              if (v138 != 73)
                goto LABEL_77;
              goto LABEL_216;
            }
          }
          else
          {
            v134 = *(unsigned __int8 *)(v87 + 5);
            if (v134 != 61)
              goto LABEL_199;
            if (BYTE2(v169) == 1)
              goto LABEL_91;
          }
        }
        else
        {
          if ((_DWORD)v81)
          {
            if ((v81 & ~*(_DWORD *)(16 * (*(_DWORD *)v87 & 0xFFFFFFFE) + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v87 & 0xFFFFFFFE)), v63, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (v93)
              {
                v177 = (JSC::JSObject *)v79;
                v94 = JSC::PropertyTable::get(v93, (uint64_t *)&v177);
                a6 = v94;
                if ((_DWORD)v94 != -1)
                {
                  a5 = HIDWORD(v94);
                  if ((int)v94 <= 63)
                  {
                    v126 = v87 + 16;
                    v127 = v94 << 32;
                  }
                  else
                  {
                    v126 = *(_QWORD *)(v87 + 8) - 8;
                    v127 = 0x3F00000000 - (v94 << 32);
                  }
                  a4 = *(_QWORD *)(v126 + (v127 >> 29));
                  if ((a4 & 0xFFFE000000000002) == 0)
                  {
                    v128 = *(unsigned __int8 *)(a4 + 5);
                    if (v128 != 5)
                    {
                      if (v128 != 6)
                        goto LABEL_164;
                      v122 = *(_DWORD *)(v92 + 16) & 3;
                      v132 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v125 = *(_QWORD *)(a4 + 24);
                        v124 = *(_QWORD *)(a4 + 32);
                        v163 = *(WTF::StringImpl **)(a4 + 8);
                        v164 = v132;
                        LODWORD(v165) = HIDWORD(v94);
                        v167 = (JSC::JSArrayBufferView *)v87;
LABEL_147:
                        BYTE1(v169) = 3;
                        if (v122 != 2)
                          LOBYTE(v169) = 1;
                        HIBYTE(v169) = 1;
                        v173 = v125;
                        v174 = v124;
                        goto LABEL_91;
                      }
                      v163 = *(WTF::StringImpl **)(a4 + 8);
                      v164 = v132;
                      LODWORD(v165) = HIDWORD(v94);
                      v167 = (JSC::JSArrayBufferView *)v87;
LABEL_176:
                      BYTE1(v169) = 3;
                      if (v122 != 2)
                        LOBYTE(v169) = 1;
                      goto LABEL_91;
                    }
                    v119 = (unsigned int *)v87;
LABEL_135:
                    JSC::JSObject::fillGetterPropertySlot(v119, (uint64_t)v63, (uint64_t)&v163, a4, a5, a6);
                    goto LABEL_91;
                  }
LABEL_164:
                  v163 = (WTF::StringImpl *)a4;
                  v167 = (JSC::JSArrayBufferView *)v87;
                  goto LABEL_90;
                }
              }
            }
          }
          if ((*(_BYTE *)(v87 + 6) & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v87, v63, v79, (uint64_t)&v163) & 1) != 0)
          {
            goto LABEL_91;
          }
        }
LABEL_77:
        if ((*(_WORD *)(v92 + 12) & 0x800) == 0)
        {
          v95 = *(_DWORD *)v87;
LABEL_79:
          v96 = *(_QWORD *)(16 * (v95 & 0xFFFFFFFE) + 0x30);
          if (!v96)
            v96 = *(_QWORD *)(v87 + 16);
          goto LABEL_81;
        }
        v95 = *(_DWORD *)v87;
        if (BYTE2(v169) == 3)
          goto LABEL_79;
        v133 = 16 * (v95 & 0xFFFFFFFE);
        if ((*(_WORD *)(v133 + 12) & 0x800) != 0)
        {
          v96 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v133 + 76) + 0xB0))(v87, a1);
        }
        else
        {
          v96 = *(_QWORD *)(v133 + 48);
          if (!v96)
            v96 = *(_QWORD *)(v87 + 16);
        }
        if (*((_DWORD *)v63 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v63, a2, this, a4, a5, a6, a7, a8))
          goto LABEL_91;
LABEL_81:
        if ((v96 & 0xFFFE000000000002) == 0)
        {
          v87 = v96;
          if (*(unsigned __int8 *)(v96 + 5) > 0x16u)
            continue;
        }
        goto LABEL_91;
      }
    }
LABEL_26:
    v52 = JSC::JSValue::toTypedArrayIndex(&v176, (JSC::JSGlobalObject *)a1, (uint64_t)"length", 7, a5, a6, a7, a8, a9);
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v45, v46, v47, v48, v49, v50, v51))
      return JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::create((JSC::JSGlobalObject *)a1, a2, v52, v47, v48, v49, v50, v51);
    return 0;
  }
  v14 = *(JSC::JSObject **)(this + 16);
  if (v14)
    *(_DWORD *)v14 += 2;
  v177 = v14;
  v15 = *((_QWORD *)v14 + 2);
  if (!v15
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError((unint64_t)a1, &v175, (uint64_t)"Buffer is already detached", 27);
LABEL_17:
    v25 = 0;
    v177 = 0;
    goto LABEL_14;
  }
  a6 = a6;
  if ((_BYTE)a6)
  {
    v17 = a5 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    if (!*((_BYTE *)v14 + 64))
    {
      v16 = *((_QWORD *)v14 + 6) - a4;
      if ((v16 & 1) == 0)
      {
        a5 = v16 >> 1;
        v17 = (v16 >> 1) & 0x7FFFFFFFFFFFFF00;
        a6 = 1;
        goto LABEL_13;
      }
      v53 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v53 = 0x4D00000002;
      v55 = "ArrayBuffer length minus the byteOffset is not a multiple of the element size";
      goto LABEL_29;
    }
    v77 = *((_QWORD *)v14 + 4);
    if (v77)
      v78 = *(_QWORD *)(v77 + 32);
    else
      v78 = *((_QWORD *)v14 + 6);
    if (v78 < a4)
    {
      v53 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v53 = 0x3000000002;
      v55 = "byteOffset exceeds source ArrayBuffer byteLength";
LABEL_29:
      *(_QWORD *)(v53 + 8) = v55;
      *(_DWORD *)(v53 + 16) = 4;
      v163 = (WTF::StringImpl *)v53;
      v56 = JSC::createRangeError((unint64_t)a1, &v163, v54);
      JSC::VM::throwException(v11, (JSC::JSGlobalObject *)a1, v56, v57, v58, v59, v60, v61);
      v62 = v163;
      v163 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
        {
          WTF::StringImpl::~StringImpl(v62, v18, v19, v20, v21, v22, v23, v24);
          WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
        }
        else
        {
          *(_DWORD *)v62 -= 2;
        }
      }
      goto LABEL_17;
    }
    v17 = 0;
    LOBYTE(a5) = 0;
    a6 = 0;
  }
LABEL_13:
  v25 = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::create((JSC::JSGlobalObject *)a1, a2, (uint64_t)&v177, a4, a5 | v17, a6, (__n128)a9, a7, a8);
  v14 = v177;
  v177 = 0;
  if (v14)
LABEL_14:
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v14, v18, v19, v20, v21, v22, v23, v24);
  return (unint64_t)v25;
}

unint64_t operationNewUint16ArrayWithSize(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  JSC::Heap *v13;
  uint64_t v14;
  unint64_t SlowCase;
  int v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Heap **v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  JSC::Exception *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t (*v46)(_QWORD *);
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  _QWORD var48[10];

  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v9 + 40) = var48[9];
  if ((a3 & 0x8000000000000000) == 0)
  {
    v10 = a4;
    if (!a4)
      return JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::create((JSC::JSGlobalObject *)a1, a2, a3, 0, a5, a6, a7, a8);
    if (a3 >= 0x3E9)
    {
      __break(0xC471u);
      JUMPOUT(0x1984907DCLL);
    }
    if (!a2)
    {
      __break(0xC471u);
      JUMPOUT(0x1984907FCLL);
    }
    v13 = *(JSC::Heap **)(v9 + 40880);
    if (!v13)
      v13 = JSC::GCClient::Heap::uint16ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
    v14 = v9 + 192;
    SlowCase = *((_QWORD *)v13 + 3);
    if (SlowCase >= *((_QWORD *)v13 + 4))
    {
      SlowCase = *((_QWORD *)v13 + 5);
      if ((SlowCase & 1) != 0)
      {
        v48 = (uint64_t)v13;
        JSC::sanitizeStackForVM((JSC *)v9, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v48, v9 + 192, 48, 0, 0, v49, v50, v51);
        v14 = v9 + 192;
        goto LABEL_9;
      }
      v45 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v13 + 6);
      *((_QWORD *)v13 + 4) = SlowCase + HIDWORD(v45);
      *((_QWORD *)v13 + 5) = SlowCase + (int)v45;
    }
    *((_QWORD *)v13 + 3) = SlowCase + 48;
LABEL_9:
    *(_DWORD *)SlowCase = 0;
    v16 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)SlowCase = a2 >> 4;
    *(_DWORD *)(SlowCase + 4) = v16;
    *(_QWORD *)(SlowCase + 8) = 0;
    *(_QWORD *)(SlowCase + 16) = 0;
    *(_QWORD *)(SlowCase + 24) = a3;
    *(_QWORD *)(SlowCase + 32) = 0;
    *(_BYTE *)(SlowCase + 40) = 16;
    if (*(_BYTE *)(v9 + 755))
    {
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = 0;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v14, SlowCase);
      __dmb(0xAu);
    }
    else if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    {
      JSC::Heap::writeBarrierSlowPath(v14, SlowCase);
    }
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v10 = (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)(SlowCase + 16) = v10;
    JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v9);
    return SlowCase;
  }
  v17 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v17 = 0x1C00000002;
  *(_QWORD *)(v17 + 8) = "Requested length is negative";
  *(_DWORD *)(v17 + 16) = 4;
  v52 = (WTF::StringImpl *)v17;
  v18 = *(_QWORD *)(a1 + 128);
  v19 = *(JSC::Heap ***)(a1 + 56);
  if ((v18 & 1) != 0)
  {
    v46 = *(uint64_t (**)(_QWORD *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
    v47 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v47 = (_QWORD *)(a1 - 16);
    var48[0] = *v47;
    var48[1] = a1;
    var48[2] = a1 + 128;
    v18 = v46(var48);
  }
  v20 = JSC::ErrorInstance::create(v19, v18, &v52, 0, 0, 0, 2, 1);
  v27 = (JSC::Exception *)v20;
  if ((v20 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C)))
  {
    v27 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v20, 0, v21, v22, v23, v24, v25);
  }
  JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)a1, v27, v26, v21, v22, v23, v24, v25);
  v35 = v52;
  v52 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  return 0;
}

unint64_t operationNewUint16ArrayWithOneArgument(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD var38[8];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var38[7];
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 38 && *(_BYTE *)(*(_QWORD *)(a2 + 16) + 64))
  {
    v11 = *(_QWORD *)(a1 + 1776);
    if ((v11 & 1) == 0)
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v17 = (uint64_t *)(a1 - 16);
    v15 = *v17;
    v16 = a1 + 1776;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a1 + 1760);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v14 = (uint64_t *)(a1 - 16);
    v15 = *v14;
    v16 = a1 + 1760;
LABEL_9:
    var38[0] = v15;
    var38[1] = a1;
    var38[2] = v16;
    v11 = v13(var38);
  }
  return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
}

unint64_t JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::VM **a1, uint64_t a2, uint64_t this, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v11;
  unsigned int v13;
  JSC::ArrayBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::VM *v25;
  BOOL v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t Uninitialized;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  const WTF::String *v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  JSC::VM *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  JSC::JSArrayBufferView *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int8x16_t v113;
  int v114;
  JSC::ArrayBuffer *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  _BYTE *v120;
  uint64_t v121;
  unsigned int v122;
  unsigned __int16 *v123;
  uint64_t v124;
  unsigned int v125;
  BOOL v126;
  int v127;
  unsigned int *v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unsigned __int16 *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned __int8 *v146;
  int v147;
  double v148;
  const unsigned __int8 *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unsigned int v152;
  JSC::VM *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unsigned int v162;
  JSC::VM *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t v169;
  int v170;
  char *v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  JSC::JSArrayBufferView *v176;
  uint64_t v177;
  int v178;
  char v179;
  JSC::VM *v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  JSC::VM *v184;
  JSC::JSObject *v185;
  JSC::ArrayBuffer *v186;
  char v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v11 = a1[7];
  v184 = v11;
  v185 = (JSC::JSObject *)this;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_27;
  v13 = *(unsigned __int8 *)(this + 5);
  if (v13 == 38)
  {
    v14 = *(JSC::ArrayBuffer **)(this + 16);
    if (v14)
      *(_DWORD *)v14 += 2;
    v186 = v14;
    v15 = *((_QWORD *)v14 + 2);
    if (!v15
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError((unint64_t)a1, &v184, (uint64_t)"Buffer is already detached", 27);
LABEL_18:
      v25 = 0;
      v186 = 0;
LABEL_14:
      v26 = *(_DWORD *)v14 == 2;
      *(_DWORD *)v14 -= 2;
      if (v26)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v14, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      return (unint64_t)v25;
    }
    a6 = a6;
    if ((_BYTE)a6)
    {
      v17 = a5 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      if (!*((_BYTE *)v14 + 64))
      {
        v16 = *((_QWORD *)v14 + 6) - a4;
        if ((v16 & 1) == 0)
        {
          a5 = v16 >> 1;
          v17 = (v16 >> 1) & 0x7FFFFFFFFFFFFF00;
          a6 = 1;
          goto LABEL_13;
        }
        v62 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v62 = 0x4D00000002;
        v64 = "ArrayBuffer length minus the byteOffset is not a multiple of the element size";
        goto LABEL_30;
      }
      v86 = *((_QWORD *)v14 + 4);
      if (v86)
        v87 = *(_QWORD *)(v86 + 32);
      else
        v87 = *((_QWORD *)v14 + 6);
      if (v87 < a4)
      {
        v62 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v62 = 0x3000000002;
        v64 = "byteOffset exceeds source ArrayBuffer byteLength";
LABEL_30:
        *(_QWORD *)(v62 + 8) = v64;
        *(_DWORD *)(v62 + 16) = 4;
        v172 = (WTF::StringImpl *)v62;
        v65 = JSC::createRangeError((unint64_t)a1, &v172, v63);
        JSC::VM::throwException(v11, (JSC::JSGlobalObject *)a1, v65, v66, v67, v68, v69, v70);
        v71 = v172;
        v172 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
          {
            WTF::StringImpl::~StringImpl(v71, (WTF::AtomStringImpl *)v18, v19, v20, v21, v22, v23, v24);
            WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
          }
          else
          {
            *(_DWORD *)v71 -= 2;
          }
        }
        goto LABEL_18;
      }
      v17 = 0;
      LOBYTE(a5) = 0;
      a6 = 0;
    }
LABEL_13:
    v25 = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::create((JSC::JSGlobalObject *)a1, a2, (uint64_t)&v186, a4, a5 | v17, a6, a9, a7, a8);
    v14 = v186;
    v186 = 0;
    if (!v14)
      return (unint64_t)v25;
    goto LABEL_14;
  }
  if (v13 < 0x17)
  {
LABEL_27:
    v61 = JSC::JSValue::toTypedArrayIndex(&v185, (JSC::JSGlobalObject *)a1, (uint64_t)"length", 7, a5, a6, a7, a8, (int8x16_t)a9);
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v54, v55, v56, v57, v58, v59, v60))
      return JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::create((JSC::JSGlobalObject *)a1, a2, v61, v56, v57, v58, v59, v60);
    return 0;
  }
  if (v13 - 39 <= 0xA)
  {
    v36 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)this, a2, this, a4, a5, a6, a7, a8);
    Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v36, v37, v38, v39, v40, v41);
    if (!Uninitialized)
      return 0;
    v49 = Uninitialized;
    LOBYTE(v186) = 0;
    v187 = 0;
    if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(this, (unint64_t *)&v186, v43, v44, v45, v46, v47, v48))
    {
      v51 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
      v52 = (unint64_t)a1;
      v53 = 72;
LABEL_25:
      JSC::throwTypeError(v52, &v184, (uint64_t)v51, v53);
      return 0;
    }
    if (*(unsigned __int8 *)(this + 5) - 39 >= 9)
    {
      v51 = "Content types of source and new typed array are different";
      v52 = (unint64_t)a1;
      v53 = 58;
      goto LABEL_25;
    }
    v77 = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setFromTypedArray(v49, (unint64_t)a1, 0, this, 0, v36, 1, v50);
LABEL_40:
    if (v77)
      return v49;
    else
      return 0;
  }
  v72 = v11;
  if (this)
  {
    v72 = v11;
    if (v13 == 36)
    {
      if (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)this, a2, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8))
      {
        if ((*(_BYTE *)(this + 4) & 0xE) != 0)
          v73 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
        else
          v73 = 0;
LABEL_38:
        v74 = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v73, a4, a5, a6, a7, a8);
        if (!v74)
          return 0;
        v49 = v74;
        v77 = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setFromArrayLike(v74, (unint64_t)a1, 0, this, 0, v73, v75, v76);
        goto LABEL_40;
      }
      v72 = a1[7];
    }
  }
  v174 = 0xFFFFFFFF00000000;
  v176 = 0;
  v177 = 0;
  v175 = this;
  v178 = 196608;
  v179 = 0;
  v182 = 0;
  v183 = 0;
  v180 = v11;
  ++*((_DWORD *)v11 + 1);
  v181 = 1;
  v171 = (char *)v11 + 41952;
  v88 = *(_QWORD *)(*((_QWORD *)v11 + 5244) + 1768);
  v89 = this + 6;
  v90 = v88 >> 4;
  if ((*(_BYTE *)(this + 6) & 8) != 0)
  {
    v96 = this;
LABEL_66:
    if (v88)
    {
      v97 = *(_DWORD *)(v88 + 16);
      if ((v97 & 0x20) == 0)
      {
        v98 = *(_BYTE **)(v88 + 8);
        v99 = *(unsigned int *)(v88 + 4);
        if ((v97 & 4) != 0)
        {
          if ((_DWORD)v99)
          {
            v100 = *v98 - 48;
            if (v100 <= 9 && (v99 < 2 || *v98 != 48))
            {
              v160 = v98 + 1;
              v161 = v99 - 1;
              while (v161)
              {
                if (v100 <= 0x19999999)
                {
                  v162 = *v160 - 48;
                  if (v162 <= 9)
                  {
                    v126 = __CFADD__(v162, 10 * v100);
                    v100 = v162 + 10 * v100;
                    ++v160;
                    --v161;
                    if (!v126)
                      continue;
                  }
                }
                goto LABEL_71;
              }
LABEL_284:
              if (v100 != -1)
              {
                v163 = a1[7];
                v164 = v100;
                v165 = this;
                while (1)
                {
                  v166 = 16 * (*(_DWORD *)v165 & 0xFFFFFFFE);
                  v167 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v166 + 0x4C) + 0x70))(v165, a1, v164, &v172);
                  if (*((_DWORD *)v163 + 20))
                  {
                    if (((JSC::VM::hasExceptionsAfterHandlingTraps(v163, a2, this, a4, a5, a6, a7, a8) | v167) & 1) != 0)
                      goto LABEL_92;
                  }
                  else if ((v167 & 1) != 0)
                  {
                    goto LABEL_92;
                  }
                  if (BYTE2(v178) == 3)
                  {
                    if (v179)
                      goto LABEL_92;
                    v168 = *(unsigned __int8 *)(v165 + 5);
                    if (v168 != 61)
                    {
LABEL_290:
                      if ((v168 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v165, a2, this, a4, a5, a6, a7, a8) <= v164)
                      {
                        goto LABEL_92;
                      }
                    }
                  }
                  else
                  {
                    v168 = *(unsigned __int8 *)(v165 + 5);
                    if (v168 != 61)
                      goto LABEL_290;
                    if (BYTE2(v178) == 1)
                      goto LABEL_92;
                  }
                  if ((*(_WORD *)(v166 + 12) & 0x800) == 0 || BYTE2(v178) == 3)
                  {
                    v169 = *(_QWORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0x30);
                    if (!v169)
                      v169 = *(_QWORD *)(v165 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v169 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v165 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v165, a1);
                    }
                    else
                    {
                      v169 = *(_QWORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0x30);
                      if (!v169)
                        v169 = *(_QWORD *)(v165 + 16);
                    }
                    if (*((_DWORD *)v163 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v163, a2, this, a4, a5, a6, a7, a8))
                    {
                      goto LABEL_92;
                    }
                  }
                  if ((v169 & 0xFFFE000000000002) == 0)
                  {
                    v165 = v169;
                    if (*(unsigned __int8 *)(v169 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_92;
                }
              }
            }
          }
        }
        else if ((_DWORD)v99)
        {
          v100 = *(unsigned __int16 *)v98 - 48;
          if (v100 <= 9 && (*(_WORD *)v98 != 48 || v99 <= 1))
          {
            v138 = (unsigned __int16 *)(v98 + 2);
            v139 = v99 - 1;
            while (v139)
            {
              if (v100 <= 0x19999999)
              {
                v140 = *v138 - 48;
                if (v140 <= 9)
                {
                  v126 = __CFADD__(v140, 10 * v100);
                  v100 = v140 + 10 * v100;
                  ++v138;
                  --v139;
                  if (!v126)
                    continue;
                }
              }
              goto LABEL_71;
            }
            goto LABEL_284;
          }
        }
      }
    }
LABEL_71:
    v72 = a1[7];
    while (1)
    {
      v101 = 16 * (*(_DWORD *)v96 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v96 + 6) & 8) != 0)
      {
        v170 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x4C) + 0x68))(v96, a1, v88, &v172);
        if (*((_DWORD *)v72 + 20))
        {
          if (((JSC::VM::hasExceptionsAfterHandlingTraps(v72, a2, this, a4, a5, a6, a7, a8) | v170) & 1) != 0)
            goto LABEL_92;
        }
        else if ((v170 & 1) != 0)
        {
          goto LABEL_92;
        }
        if (BYTE2(v178) == 3)
        {
          if (v179)
            goto LABEL_92;
          v143 = *(unsigned __int8 *)(v96 + 5);
          if (v143 != 61)
          {
LABEL_200:
            if (!v88)
              goto LABEL_78;
            if ((v143 - 50) < 0xFFFFFFF5)
              goto LABEL_78;
            v144 = *(_DWORD *)(v88 + 16);
            if ((v144 & 0x20) != 0)
              goto LABEL_78;
            v145 = *(unsigned int *)(v88 + 4);
            if (!(_DWORD)v145)
              goto LABEL_78;
            v146 = *(unsigned __int8 **)(v88 + 8);
            if ((v144 & 4) == 0)
            {
              v147 = *(unsigned __int16 *)v146;
              if ((_DWORD)v145 == 1)
                goto LABEL_206;
              if (v147 == 45)
              {
                v147 = *((unsigned __int16 *)v146 + 1);
                goto LABEL_211;
              }
              if ((v147 - 48) >= 0xA && ((_DWORD)v145 != 8 || v147 != 73))
              {
LABEL_225:
                if ((_DWORD)v145 != 3 || v147 != 78)
                  goto LABEL_78;
              }
LABEL_217:
              v89 = v89 & 0xFFFFFF0000000000 | v145 | ((unint64_t)((v144 >> 2) & 1) << 32);
              JSC::jsToNumber(v146, v89);
              WTF::numberToString(&v186, v148);
              if (WTF::equal(v88, (unint64_t)&v186, v149))
                goto LABEL_92;
              goto LABEL_78;
            }
            v147 = *v146;
            if ((_DWORD)v145 == 1)
            {
LABEL_206:
              if ((v147 - 48) < 0xA)
                goto LABEL_92;
              goto LABEL_78;
            }
            if (v147 == 45)
            {
              v147 = v146[1];
LABEL_211:
              if ((v147 - 48) < 0xA)
              {
                if ((_DWORD)v145 == 2)
                  goto LABEL_92;
                goto LABEL_217;
              }
              if ((_DWORD)v145 != 9)
                goto LABEL_78;
            }
            else
            {
              if ((v147 - 48) < 0xA)
                goto LABEL_217;
              if ((_DWORD)v145 != 8)
                goto LABEL_225;
            }
            if (v147 != 73)
              goto LABEL_78;
            goto LABEL_217;
          }
        }
        else
        {
          v143 = *(unsigned __int8 *)(v96 + 5);
          if (v143 != 61)
            goto LABEL_200;
          if (BYTE2(v178) == 1)
            goto LABEL_92;
        }
      }
      else
      {
        if ((_DWORD)v90)
        {
          if ((v90 & ~*(_DWORD *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x20)) == 0)
          {
            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE)), v72, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            if (v102)
            {
              v186 = (JSC::ArrayBuffer *)v88;
              v103 = JSC::PropertyTable::get(v102, (uint64_t *)&v186);
              a6 = v103;
              if ((_DWORD)v103 != -1)
              {
                a5 = HIDWORD(v103);
                if ((int)v103 <= 63)
                {
                  v135 = v96 + 16;
                  v136 = v103 << 32;
                }
                else
                {
                  v135 = *(_QWORD *)(v96 + 8) - 8;
                  v136 = 0x3F00000000 - (v103 << 32);
                }
                a4 = *(_QWORD *)(v135 + (v136 >> 29));
                if ((a4 & 0xFFFE000000000002) == 0)
                {
                  v137 = *(unsigned __int8 *)(a4 + 5);
                  if (v137 != 5)
                  {
                    if (v137 != 6)
                      goto LABEL_165;
                    v131 = *(_DWORD *)(v101 + 16) & 3;
                    v141 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v134 = *(_QWORD *)(a4 + 24);
                      v133 = *(_QWORD *)(a4 + 32);
                      v172 = *(WTF::StringImpl **)(a4 + 8);
                      v173 = v141;
                      LODWORD(v174) = HIDWORD(v103);
                      v176 = (JSC::JSArrayBufferView *)v96;
LABEL_148:
                      BYTE1(v178) = 3;
                      if (v131 != 2)
                        LOBYTE(v178) = 1;
                      HIBYTE(v178) = 1;
                      v182 = v134;
                      v183 = v133;
                      goto LABEL_92;
                    }
                    v172 = *(WTF::StringImpl **)(a4 + 8);
                    v173 = v141;
                    LODWORD(v174) = HIDWORD(v103);
                    v176 = (JSC::JSArrayBufferView *)v96;
LABEL_177:
                    BYTE1(v178) = 3;
                    if (v131 != 2)
                      LOBYTE(v178) = 1;
                    goto LABEL_92;
                  }
                  v128 = (unsigned int *)v96;
LABEL_136:
                  JSC::JSObject::fillGetterPropertySlot(v128, (uint64_t)v72, (uint64_t)&v172, a4, a5, a6);
                  goto LABEL_92;
                }
LABEL_165:
                v172 = (WTF::StringImpl *)a4;
                v176 = (JSC::JSArrayBufferView *)v96;
                goto LABEL_91;
              }
            }
          }
        }
        if ((*(_BYTE *)(v96 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v96, v72, v88, (uint64_t)&v172) & 1) != 0)
        {
          goto LABEL_92;
        }
      }
LABEL_78:
      if ((*(_WORD *)(v101 + 12) & 0x800) == 0)
      {
        v104 = *(_DWORD *)v96;
LABEL_80:
        v105 = *(_QWORD *)(16 * (v104 & 0xFFFFFFFE) + 0x30);
        if (!v105)
          v105 = *(_QWORD *)(v96 + 16);
        goto LABEL_82;
      }
      v104 = *(_DWORD *)v96;
      if (BYTE2(v178) == 3)
        goto LABEL_80;
      v142 = 16 * (v104 & 0xFFFFFFFE);
      if ((*(_WORD *)(v142 + 12) & 0x800) != 0)
      {
        v105 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v142 + 76) + 0xB0))(v96, a1);
      }
      else
      {
        v105 = *(_QWORD *)(v142 + 48);
        if (!v105)
          v105 = *(_QWORD *)(v96 + 16);
      }
      if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72, a2, this, a4, a5, a6, a7, a8))
        goto LABEL_92;
LABEL_82:
      if ((v105 & 0xFFFE000000000002) == 0)
      {
        v96 = v105;
        if (*(unsigned __int8 *)(v105 + 5) > 0x16u)
          continue;
      }
      goto LABEL_92;
    }
  }
  v91 = (JSC::JSArrayBufferView *)this;
  while (1)
  {
    v92 = *(_DWORD *)v91 & 0xFFFFFFFE;
    v93 = 16 * v92;
    if ((_DWORD)v90)
    {
      if ((v90 & ~*(_DWORD *)(16 * v92 + 0x20)) == 0)
      {
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v93, v72, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (v94)
        {
          v186 = (JSC::ArrayBuffer *)v88;
          v95 = JSC::PropertyTable::get(v94, (uint64_t *)&v186);
          a6 = v95;
          if ((_DWORD)v95 != -1)
          {
            a5 = HIDWORD(v95);
            if ((int)v95 <= 63)
            {
              v106 = (uint64_t)v91 + 16;
              v107 = v95 << 32;
            }
            else
            {
              v106 = *((_QWORD *)v91 + 1) - 8;
              v107 = 0x3F00000000 - (v95 << 32);
            }
            a4 = *(_QWORD *)(v106 + (v107 >> 29));
            if ((a4 & 0xFFFE000000000002) == 0)
            {
              v108 = *(unsigned __int8 *)(a4 + 5);
              if (v108 == 5)
              {
                v128 = (unsigned int *)v91;
                goto LABEL_136;
              }
              if (v108 == 6)
              {
                v131 = *(_DWORD *)(v93 + 16) & 3;
                v132 = *(_QWORD *)(a4 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v134 = *(_QWORD *)(a4 + 24);
                  v133 = *(_QWORD *)(a4 + 32);
                  v172 = *(WTF::StringImpl **)(a4 + 8);
                  v173 = v132;
                  LODWORD(v174) = HIDWORD(v95);
                  v176 = v91;
                  goto LABEL_148;
                }
                v172 = *(WTF::StringImpl **)(a4 + 8);
                v173 = v132;
                LODWORD(v174) = HIDWORD(v95);
                v176 = v91;
                goto LABEL_177;
              }
            }
            v172 = (WTF::StringImpl *)a4;
            v176 = v91;
LABEL_91:
            v174 = __PAIR64__(a6, a5);
            LOWORD(v178) = 257;
            goto LABEL_92;
          }
        }
      }
    }
    if ((*(_BYTE *)v89 & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v91, v72, v88, (uint64_t)&v172) & 1) != 0)
    {
      goto LABEL_92;
    }
    v96 = *(_QWORD *)(v93 + 48);
    if (!v96)
      v96 = *((_QWORD *)v91 + 2);
    if ((v96 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v96 + 5) < 0x17u)
      break;
    v89 = v96 + 6;
    v91 = (JSC::JSArrayBufferView *)v96;
    if ((*(_BYTE *)(v96 + 6) & 8) != 0)
      goto LABEL_66;
  }
  if (!v88)
    goto LABEL_92;
  v119 = *(_DWORD *)(v88 + 16);
  if ((v119 & 0x20) != 0)
    goto LABEL_92;
  v120 = *(_BYTE **)(v88 + 8);
  v121 = *(unsigned int *)(v88 + 4);
  if ((v119 & 4) != 0)
  {
    if (!(_DWORD)v121)
      goto LABEL_92;
    v122 = *v120 - 48;
    if (v122 > 9 || v121 >= 2 && *v120 == 48)
      goto LABEL_92;
    v150 = v120 + 1;
    v151 = v121 - 1;
    while (v151)
    {
      if (v122 <= 0x19999999)
      {
        v152 = *v150 - 48;
        if (v152 <= 9)
        {
          v126 = __CFADD__(v152, 10 * v122);
          v122 = v152 + 10 * v122;
          ++v150;
          --v151;
          if (!v126)
            continue;
        }
      }
      goto LABEL_92;
    }
  }
  else
  {
    if (!(_DWORD)v121)
      goto LABEL_92;
    v122 = *(unsigned __int16 *)v120 - 48;
    if (v122 > 9 || *(_WORD *)v120 == 48 && v121 > 1)
      goto LABEL_92;
    v123 = (unsigned __int16 *)(v120 + 2);
    v124 = v121 - 1;
    while (v124)
    {
      if (v122 <= 0x19999999)
      {
        v125 = *v123 - 48;
        if (v125 <= 9)
        {
          v126 = __CFADD__(v125, 10 * v122);
          v122 = v125 + 10 * v122;
          ++v123;
          --v124;
          if (!v126)
            continue;
        }
      }
      goto LABEL_92;
    }
  }
  if (v122 != -1)
  {
    v153 = a1[7];
    v154 = v122;
    v155 = this;
    while (1)
    {
      v156 = 16 * (*(_DWORD *)v155 & 0xFFFFFFFE);
      v157 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v156 + 0x4C)
                                                                                                  + 0x70))(v155, a1, v154, &v172);
      if (*((_DWORD *)v153 + 20))
      {
        if (((JSC::VM::hasExceptionsAfterHandlingTraps(v153, a2, this, a4, a5, a6, a7, a8) | v157) & 1) != 0)
          break;
      }
      else if ((v157 & 1) != 0)
      {
        break;
      }
      if (BYTE2(v178) == 3)
      {
        if (v179)
          break;
        v158 = *(unsigned __int8 *)(v155 + 5);
        if (v158 != 61)
        {
LABEL_245:
          if ((v158 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v155, a2, this, a4, a5, a6, a7, a8) <= v154)
          {
            break;
          }
        }
      }
      else
      {
        v158 = *(unsigned __int8 *)(v155 + 5);
        if (v158 != 61)
          goto LABEL_245;
        if (BYTE2(v178) == 1)
          break;
      }
      if ((*(_WORD *)(v156 + 12) & 0x800) == 0 || BYTE2(v178) == 3)
      {
        v159 = *(_QWORD *)(16 * (*(_DWORD *)v155 & 0xFFFFFFFE) + 0x30);
        if (!v159)
          v159 = *(_QWORD *)(v155 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v155 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v159 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                * *(unsigned int *)(16
                                                                                  * (*(_DWORD *)v155 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0xB0))(v155, a1);
        }
        else
        {
          v159 = *(_QWORD *)(16 * (*(_DWORD *)v155 & 0xFFFFFFFE) + 0x30);
          if (!v159)
            v159 = *(_QWORD *)(v155 + 16);
        }
        if (*((_DWORD *)v153 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v153, a2, this, a4, a5, a6, a7, a8))
          break;
      }
      if ((v159 & 0xFFFE000000000002) == 0)
      {
        v155 = v159;
        if (*(unsigned __int8 *)(v159 + 5) > 0x16u)
          continue;
      }
      break;
    }
  }
LABEL_92:
  v25 = v184;
  if (*((_DWORD *)v184 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v184, a2, this, a4, a5, a6, a7, a8))
    goto LABEL_158;
  if (v181)
  {
    v109 = *((_DWORD *)v180 + 1);
    if (!v109)
    {
      __break(0xC471u);
      JUMPOUT(0x19849130CLL);
    }
    *((_DWORD *)v180 + 1) = v109 - 1;
    v180 = 0;
    v181 = 0;
  }
  v112 = JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v171 + 2712), a4, a5, a6, a7, a8);
  if (*((_DWORD *)v25 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v25, v110, v111, a4, a5, a6, a7, a8))
      goto LABEL_158;
  }
  if ((v112 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v114 = BYTE1(v178);
  }
  else if (v112 != JSC::JSGlobalObject::arrayProtoValuesFunction(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                            + 0x28))
         || (v114 = BYTE1(v178), (BYTE1(v178) & 0xFE) == 2)
         || v179
         || (*(_BYTE *)(this + 4) & 0xEu) > 9
         || ((v129 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2216), (v129 & 1) != 0)
           ? (v130 = (v129 >> 1) & 3)
           : (v130 = *(unsigned __int8 *)(v129 + 4)),
             v130 == 2))
  {
    v25 = (JSC::VM *)JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>((JSC::JSGlobalObject *)a1, a2, (JSC::JSObject *)this, v112, a5, a6, a7, a8);
    v73 = 0;
    v118 = 0;
    goto LABEL_128;
  }
  switch(v114)
  {
    case 0:
      v73 = 0;
      goto LABEL_127;
    case 1:
      v115 = v172;
      break;
    case 2:
      v115 = (JSC::ArrayBuffer *)JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v172, (JSC::JSGlobalObject *)a1, v111, a4, a5, a6, a7, a8);
      break;
    default:
      v115 = (JSC::ArrayBuffer *)JSC::PropertySlot::customGetter((uint64_t)&v172, a1[7], *(WTF::StringImpl **)(*(_QWORD *)v171 + 1768));
      break;
  }
  v186 = v115;
  if (!*((_DWORD *)v25 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v25, v110, v111, a4, a5, a6, a7, a8))
  {
    v73 = JSC::JSValue::toLength(&v186, (JSC::JSGlobalObject *)a1, v111, a4, a5, a6, a7, a8, v113);
    if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25, v116, v117, a4, a5, a6, a7, a8))
      goto LABEL_159;
LABEL_127:
    v118 = 1;
    goto LABEL_128;
  }
LABEL_158:
  v73 = 0;
LABEL_159:
  v118 = 0;
  v25 = 0;
LABEL_128:
  if (v181)
  {
    v127 = *((_DWORD *)v180 + 1);
    if (!v127)
    {
      __break(0xC471u);
      JUMPOUT(0x19849132CLL);
    }
    *((_DWORD *)v180 + 1) = v127 - 1;
  }
  if (v118)
    goto LABEL_38;
  return (unint64_t)v25;
}

JSC::JSCell *operationNewInt32ArrayWithSize(JSC::JSGlobalObject *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  uint64_t v11;
  const WTF::String *v12;
  unint64_t RangeError;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *var18[4];

  v9 = (WTF::StringImpl **)*((_QWORD *)a1 + 7);
  v9[5] = var18[3];
  if ((a3 & 0x8000000000000000) != 0)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v11 = 0x1C00000002;
    *(_QWORD *)(v11 + 8) = "Requested length is negative";
    *(_DWORD *)(v11 + 16) = 4;
    var18[0] = (WTF::StringImpl *)v11;
    RangeError = JSC::createRangeError((unint64_t)a1, var18, v12);
    JSC::VM::throwException((JSC::VM *)v9, a1, RangeError, v14, v15, v16, v17, v18);
    v26 = var18[0];
    var18[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    return 0;
  }
  else if (a4)
  {
    return JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createWithFastVector(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    return (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::create(a1, (uint64_t)a2, a3, 0, a5, a6, a7, a8);
  }
}

unint64_t operationNewInt32ArrayWithOneArgument(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD var38[8];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var38[7];
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 38 && *(_BYTE *)(*(_QWORD *)(a2 + 16) + 64))
  {
    v11 = *(_QWORD *)(a1 + 1800);
    if ((v11 & 1) == 0)
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v17 = (uint64_t *)(a1 - 16);
    v15 = *v17;
    v16 = a1 + 1800;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a1 + 1784);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v14 = (uint64_t *)(a1 - 16);
    v15 = *v14;
    v16 = a1 + 1784;
LABEL_9:
    var38[0] = v15;
    var38[1] = a1;
    var38[2] = v16;
    v11 = v13(var38);
  }
  return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
}

unint64_t JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::VM **a1, uint64_t a2, uint64_t this, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v11;
  unsigned int v13;
  JSC::ArrayBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::VM *v25;
  BOOL v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::VM *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  const WTF::String *v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t Uninitialized;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  JSC::JSArrayBufferView *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int8x16_t v113;
  int v114;
  JSC::ArrayBuffer *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  _BYTE *v120;
  uint64_t v121;
  unsigned int v122;
  unsigned __int16 *v123;
  uint64_t v124;
  unsigned int v125;
  BOOL v126;
  int v127;
  unsigned int *v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unsigned __int16 *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned __int8 *v146;
  int v147;
  double v148;
  const unsigned __int8 *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unsigned int v152;
  JSC::VM *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unsigned int v162;
  JSC::VM *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t v169;
  int v170;
  char *v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  JSC::JSArrayBufferView *v176;
  uint64_t v177;
  int v178;
  char v179;
  JSC::VM *v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  JSC::VM *v184;
  JSC::JSObject *v185;
  JSC::ArrayBuffer *v186;
  char v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v11 = a1[7];
  v184 = v11;
  v185 = (JSC::JSObject *)this;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_29;
  v13 = *(unsigned __int8 *)(this + 5);
  if (v13 == 38)
  {
    v14 = *(JSC::ArrayBuffer **)(this + 16);
    if (v14)
      *(_DWORD *)v14 += 2;
    v186 = v14;
    v15 = *((_QWORD *)v14 + 2);
    if (!v15
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError((unint64_t)a1, &v184, (uint64_t)"Buffer is already detached", 27);
LABEL_35:
      v25 = 0;
      v186 = 0;
LABEL_14:
      v26 = *(_DWORD *)v14 == 2;
      *(_DWORD *)v14 -= 2;
      if (v26)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v14, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      return (unint64_t)v25;
    }
    a6 = a6;
    if ((_BYTE)a6)
    {
      v17 = a5 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      if (!*((_BYTE *)v14 + 64))
      {
        v16 = *((_QWORD *)v14 + 6) - a4;
        if ((v16 & 3) == 0)
        {
          a5 = v16 >> 2;
          v17 = (v16 >> 2) & 0x3FFFFFFFFFFFFF00;
          a6 = 1;
          goto LABEL_13;
        }
        v51 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v51 = 0x4D00000002;
        v53 = "ArrayBuffer length minus the byteOffset is not a multiple of the element size";
        goto LABEL_32;
      }
      v86 = *((_QWORD *)v14 + 4);
      if (v86)
        v87 = *(_QWORD *)(v86 + 32);
      else
        v87 = *((_QWORD *)v14 + 6);
      if (v87 < a4)
      {
        v51 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v51 = 0x3000000002;
        v53 = "byteOffset exceeds source ArrayBuffer byteLength";
LABEL_32:
        *(_QWORD *)(v51 + 8) = v53;
        *(_DWORD *)(v51 + 16) = 4;
        v172 = (WTF::StringImpl *)v51;
        v54 = JSC::createRangeError((unint64_t)a1, &v172, v52);
        JSC::VM::throwException(v11, (JSC::JSGlobalObject *)a1, v54, v55, v56, v57, v58, v59);
        v60 = v172;
        v172 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::~StringImpl(v60, (WTF::AtomStringImpl *)v18, v19, v20, v21, v22, v23, v24);
            WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
          }
          else
          {
            *(_DWORD *)v60 -= 2;
          }
        }
        goto LABEL_35;
      }
      v17 = 0;
      LOBYTE(a5) = 0;
      a6 = 0;
    }
LABEL_13:
    v25 = (JSC::VM *)JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::create((JSC::JSGlobalObject *)a1, a2, (uint64_t)&v186, a4, a5 | v17, a6, a9, a7, a8);
    v14 = v186;
    v186 = 0;
    if (!v14)
      return (unint64_t)v25;
    goto LABEL_14;
  }
  if (v13 < 0x17)
  {
LABEL_29:
    v50 = JSC::JSValue::toTypedArrayIndex(&v185, (JSC::JSGlobalObject *)a1, (uint64_t)"length", 7, a5, a6, a7, a8, (int8x16_t)a9);
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v43, v44, v45, v46, v47, v48, v49))
      return JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::create((JSC::JSGlobalObject *)a1, a2, v50, v45, v46, v47, v48, v49);
    return 0;
  }
  if (v13 - 39 <= 0xA)
  {
    v61 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)this, a2, this, a4, a5, a6, a7, a8);
    Uninitialized = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v61, v62, v63, v64, v65, v66);
    if (Uninitialized)
    {
      v41 = Uninitialized;
      LOBYTE(v186) = 0;
      v187 = 0;
      if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(this, (unint64_t *)&v186, v68, v69, v70, v71, v72, v73))
      {
        v75 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v76 = (unint64_t)a1;
        v77 = 72;
      }
      else
      {
        if (*(unsigned __int8 *)(this + 5) - 39 < 9)
        {
          v42 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setFromTypedArray(v41, (JSC::JSGlobalObject *)a1, 0, this, 0, v61, 1, v74);
LABEL_26:
          if (v42)
            return v41;
          else
            return 0;
        }
        v75 = "Content types of source and new typed array are different";
        v76 = (unint64_t)a1;
        v77 = 58;
      }
      JSC::throwTypeError(v76, &v184, (uint64_t)v75, v77);
    }
    return 0;
  }
  v36 = v11;
  if (this)
  {
    v36 = v11;
    if (v13 == 36)
    {
      if (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)this, a2, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8))
      {
        if ((*(_BYTE *)(this + 4) & 0xE) != 0)
          v37 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
        else
          v37 = 0;
        goto LABEL_24;
      }
      v36 = a1[7];
    }
  }
  v174 = 0xFFFFFFFF00000000;
  v176 = 0;
  v177 = 0;
  v175 = this;
  v178 = 196608;
  v179 = 0;
  v182 = 0;
  v183 = 0;
  v180 = v11;
  ++*((_DWORD *)v11 + 1);
  v181 = 1;
  v171 = (char *)v11 + 41952;
  v88 = *(_QWORD *)(*((_QWORD *)v11 + 5244) + 1768);
  v89 = this + 6;
  v90 = v88 >> 4;
  if ((*(_BYTE *)(this + 6) & 8) != 0)
  {
    v96 = this;
LABEL_66:
    if (v88)
    {
      v97 = *(_DWORD *)(v88 + 16);
      if ((v97 & 0x20) == 0)
      {
        v98 = *(_BYTE **)(v88 + 8);
        v99 = *(unsigned int *)(v88 + 4);
        if ((v97 & 4) != 0)
        {
          if ((_DWORD)v99)
          {
            v100 = *v98 - 48;
            if (v100 <= 9 && (v99 < 2 || *v98 != 48))
            {
              v160 = v98 + 1;
              v161 = v99 - 1;
              while (v161)
              {
                if (v100 <= 0x19999999)
                {
                  v162 = *v160 - 48;
                  if (v162 <= 9)
                  {
                    v126 = __CFADD__(v162, 10 * v100);
                    v100 = v162 + 10 * v100;
                    ++v160;
                    --v161;
                    if (!v126)
                      continue;
                  }
                }
                goto LABEL_71;
              }
LABEL_284:
              if (v100 != -1)
              {
                v163 = a1[7];
                v164 = v100;
                v165 = this;
                while (1)
                {
                  v166 = 16 * (*(_DWORD *)v165 & 0xFFFFFFFE);
                  v167 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v166 + 0x4C) + 0x70))(v165, a1, v164, &v172);
                  if (*((_DWORD *)v163 + 20))
                  {
                    if (((JSC::VM::hasExceptionsAfterHandlingTraps(v163, a2, this, a4, a5, a6, a7, a8) | v167) & 1) != 0)
                      goto LABEL_92;
                  }
                  else if ((v167 & 1) != 0)
                  {
                    goto LABEL_92;
                  }
                  if (BYTE2(v178) == 3)
                  {
                    if (v179)
                      goto LABEL_92;
                    v168 = *(unsigned __int8 *)(v165 + 5);
                    if (v168 != 61)
                    {
LABEL_290:
                      if ((v168 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v165, a2, this, a4, a5, a6, a7, a8) <= v164)
                      {
                        goto LABEL_92;
                      }
                    }
                  }
                  else
                  {
                    v168 = *(unsigned __int8 *)(v165 + 5);
                    if (v168 != 61)
                      goto LABEL_290;
                    if (BYTE2(v178) == 1)
                      goto LABEL_92;
                  }
                  if ((*(_WORD *)(v166 + 12) & 0x800) == 0 || BYTE2(v178) == 3)
                  {
                    v169 = *(_QWORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0x30);
                    if (!v169)
                      v169 = *(_QWORD *)(v165 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v169 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v165 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v165, a1);
                    }
                    else
                    {
                      v169 = *(_QWORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0x30);
                      if (!v169)
                        v169 = *(_QWORD *)(v165 + 16);
                    }
                    if (*((_DWORD *)v163 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v163, a2, this, a4, a5, a6, a7, a8))
                    {
                      goto LABEL_92;
                    }
                  }
                  if ((v169 & 0xFFFE000000000002) == 0)
                  {
                    v165 = v169;
                    if (*(unsigned __int8 *)(v169 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_92;
                }
              }
            }
          }
        }
        else if ((_DWORD)v99)
        {
          v100 = *(unsigned __int16 *)v98 - 48;
          if (v100 <= 9 && (*(_WORD *)v98 != 48 || v99 <= 1))
          {
            v138 = (unsigned __int16 *)(v98 + 2);
            v139 = v99 - 1;
            while (v139)
            {
              if (v100 <= 0x19999999)
              {
                v140 = *v138 - 48;
                if (v140 <= 9)
                {
                  v126 = __CFADD__(v140, 10 * v100);
                  v100 = v140 + 10 * v100;
                  ++v138;
                  --v139;
                  if (!v126)
                    continue;
                }
              }
              goto LABEL_71;
            }
            goto LABEL_284;
          }
        }
      }
    }
LABEL_71:
    v36 = a1[7];
    while (1)
    {
      v101 = 16 * (*(_DWORD *)v96 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v96 + 6) & 8) != 0)
      {
        v170 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x4C) + 0x68))(v96, a1, v88, &v172);
        if (*((_DWORD *)v36 + 20))
        {
          if (((JSC::VM::hasExceptionsAfterHandlingTraps(v36, a2, this, a4, a5, a6, a7, a8) | v170) & 1) != 0)
            goto LABEL_92;
        }
        else if ((v170 & 1) != 0)
        {
          goto LABEL_92;
        }
        if (BYTE2(v178) == 3)
        {
          if (v179)
            goto LABEL_92;
          v143 = *(unsigned __int8 *)(v96 + 5);
          if (v143 != 61)
          {
LABEL_200:
            if (!v88)
              goto LABEL_78;
            if ((v143 - 50) < 0xFFFFFFF5)
              goto LABEL_78;
            v144 = *(_DWORD *)(v88 + 16);
            if ((v144 & 0x20) != 0)
              goto LABEL_78;
            v145 = *(unsigned int *)(v88 + 4);
            if (!(_DWORD)v145)
              goto LABEL_78;
            v146 = *(unsigned __int8 **)(v88 + 8);
            if ((v144 & 4) == 0)
            {
              v147 = *(unsigned __int16 *)v146;
              if ((_DWORD)v145 == 1)
                goto LABEL_206;
              if (v147 == 45)
              {
                v147 = *((unsigned __int16 *)v146 + 1);
                goto LABEL_211;
              }
              if ((v147 - 48) >= 0xA && ((_DWORD)v145 != 8 || v147 != 73))
              {
LABEL_225:
                if ((_DWORD)v145 != 3 || v147 != 78)
                  goto LABEL_78;
              }
LABEL_217:
              v89 = v89 & 0xFFFFFF0000000000 | v145 | ((unint64_t)((v144 >> 2) & 1) << 32);
              JSC::jsToNumber(v146, v89);
              WTF::numberToString(&v186, v148);
              if (WTF::equal(v88, (unint64_t)&v186, v149))
                goto LABEL_92;
              goto LABEL_78;
            }
            v147 = *v146;
            if ((_DWORD)v145 == 1)
            {
LABEL_206:
              if ((v147 - 48) < 0xA)
                goto LABEL_92;
              goto LABEL_78;
            }
            if (v147 == 45)
            {
              v147 = v146[1];
LABEL_211:
              if ((v147 - 48) < 0xA)
              {
                if ((_DWORD)v145 == 2)
                  goto LABEL_92;
                goto LABEL_217;
              }
              if ((_DWORD)v145 != 9)
                goto LABEL_78;
            }
            else
            {
              if ((v147 - 48) < 0xA)
                goto LABEL_217;
              if ((_DWORD)v145 != 8)
                goto LABEL_225;
            }
            if (v147 != 73)
              goto LABEL_78;
            goto LABEL_217;
          }
        }
        else
        {
          v143 = *(unsigned __int8 *)(v96 + 5);
          if (v143 != 61)
            goto LABEL_200;
          if (BYTE2(v178) == 1)
            goto LABEL_92;
        }
      }
      else
      {
        if ((_DWORD)v90)
        {
          if ((v90 & ~*(_DWORD *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x20)) == 0)
          {
            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE)), v36, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            if (v102)
            {
              v186 = (JSC::ArrayBuffer *)v88;
              v103 = JSC::PropertyTable::get(v102, (uint64_t *)&v186);
              a6 = v103;
              if ((_DWORD)v103 != -1)
              {
                a5 = HIDWORD(v103);
                if ((int)v103 <= 63)
                {
                  v135 = v96 + 16;
                  v136 = v103 << 32;
                }
                else
                {
                  v135 = *(_QWORD *)(v96 + 8) - 8;
                  v136 = 0x3F00000000 - (v103 << 32);
                }
                a4 = *(_QWORD *)(v135 + (v136 >> 29));
                if ((a4 & 0xFFFE000000000002) == 0)
                {
                  v137 = *(unsigned __int8 *)(a4 + 5);
                  if (v137 != 5)
                  {
                    if (v137 != 6)
                      goto LABEL_164;
                    v131 = *(_DWORD *)(v101 + 16) & 3;
                    v141 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v134 = *(_QWORD *)(a4 + 24);
                      v133 = *(_QWORD *)(a4 + 32);
                      v172 = *(WTF::StringImpl **)(a4 + 8);
                      v173 = v141;
                      LODWORD(v174) = HIDWORD(v103);
                      v176 = (JSC::JSArrayBufferView *)v96;
LABEL_147:
                      BYTE1(v178) = 3;
                      if (v131 != 2)
                        LOBYTE(v178) = 1;
                      HIBYTE(v178) = 1;
                      v182 = v134;
                      v183 = v133;
                      goto LABEL_92;
                    }
                    v172 = *(WTF::StringImpl **)(a4 + 8);
                    v173 = v141;
                    LODWORD(v174) = HIDWORD(v103);
                    v176 = (JSC::JSArrayBufferView *)v96;
LABEL_177:
                    BYTE1(v178) = 3;
                    if (v131 != 2)
                      LOBYTE(v178) = 1;
                    goto LABEL_92;
                  }
                  v128 = (unsigned int *)v96;
LABEL_134:
                  JSC::JSObject::fillGetterPropertySlot(v128, (uint64_t)v36, (uint64_t)&v172, a4, a5, a6);
                  goto LABEL_92;
                }
LABEL_164:
                v172 = (WTF::StringImpl *)a4;
                v176 = (JSC::JSArrayBufferView *)v96;
                goto LABEL_91;
              }
            }
          }
        }
        if ((*(_BYTE *)(v96 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v96, v36, v88, (uint64_t)&v172) & 1) != 0)
        {
          goto LABEL_92;
        }
      }
LABEL_78:
      if ((*(_WORD *)(v101 + 12) & 0x800) == 0)
      {
        v104 = *(_DWORD *)v96;
LABEL_80:
        v105 = *(_QWORD *)(16 * (v104 & 0xFFFFFFFE) + 0x30);
        if (!v105)
          v105 = *(_QWORD *)(v96 + 16);
        goto LABEL_82;
      }
      v104 = *(_DWORD *)v96;
      if (BYTE2(v178) == 3)
        goto LABEL_80;
      v142 = 16 * (v104 & 0xFFFFFFFE);
      if ((*(_WORD *)(v142 + 12) & 0x800) != 0)
      {
        v105 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v142 + 76) + 0xB0))(v96, a1);
      }
      else
      {
        v105 = *(_QWORD *)(v142 + 48);
        if (!v105)
          v105 = *(_QWORD *)(v96 + 16);
      }
      if (*((_DWORD *)v36 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v36, a2, this, a4, a5, a6, a7, a8))
        goto LABEL_92;
LABEL_82:
      if ((v105 & 0xFFFE000000000002) == 0)
      {
        v96 = v105;
        if (*(unsigned __int8 *)(v105 + 5) > 0x16u)
          continue;
      }
      goto LABEL_92;
    }
  }
  v91 = (JSC::JSArrayBufferView *)this;
  while (1)
  {
    v92 = *(_DWORD *)v91 & 0xFFFFFFFE;
    v93 = 16 * v92;
    if ((_DWORD)v90)
    {
      if ((v90 & ~*(_DWORD *)(16 * v92 + 0x20)) == 0)
      {
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v93, v36, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (v94)
        {
          v186 = (JSC::ArrayBuffer *)v88;
          v95 = JSC::PropertyTable::get(v94, (uint64_t *)&v186);
          a6 = v95;
          if ((_DWORD)v95 != -1)
          {
            a5 = HIDWORD(v95);
            if ((int)v95 <= 63)
            {
              v106 = (uint64_t)v91 + 16;
              v107 = v95 << 32;
            }
            else
            {
              v106 = *((_QWORD *)v91 + 1) - 8;
              v107 = 0x3F00000000 - (v95 << 32);
            }
            a4 = *(_QWORD *)(v106 + (v107 >> 29));
            if ((a4 & 0xFFFE000000000002) == 0)
            {
              v108 = *(unsigned __int8 *)(a4 + 5);
              if (v108 == 5)
              {
                v128 = (unsigned int *)v91;
                goto LABEL_134;
              }
              if (v108 == 6)
              {
                v131 = *(_DWORD *)(v93 + 16) & 3;
                v132 = *(_QWORD *)(a4 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v134 = *(_QWORD *)(a4 + 24);
                  v133 = *(_QWORD *)(a4 + 32);
                  v172 = *(WTF::StringImpl **)(a4 + 8);
                  v173 = v132;
                  LODWORD(v174) = HIDWORD(v95);
                  v176 = v91;
                  goto LABEL_147;
                }
                v172 = *(WTF::StringImpl **)(a4 + 8);
                v173 = v132;
                LODWORD(v174) = HIDWORD(v95);
                v176 = v91;
                goto LABEL_177;
              }
            }
            v172 = (WTF::StringImpl *)a4;
            v176 = v91;
LABEL_91:
            v174 = __PAIR64__(a6, a5);
            LOWORD(v178) = 257;
            goto LABEL_92;
          }
        }
      }
    }
    if ((*(_BYTE *)v89 & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v91, v36, v88, (uint64_t)&v172) & 1) != 0)
    {
      goto LABEL_92;
    }
    v96 = *(_QWORD *)(v93 + 48);
    if (!v96)
      v96 = *((_QWORD *)v91 + 2);
    if ((v96 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v96 + 5) < 0x17u)
      break;
    v89 = v96 + 6;
    v91 = (JSC::JSArrayBufferView *)v96;
    if ((*(_BYTE *)(v96 + 6) & 8) != 0)
      goto LABEL_66;
  }
  if (!v88)
    goto LABEL_92;
  v119 = *(_DWORD *)(v88 + 16);
  if ((v119 & 0x20) != 0)
    goto LABEL_92;
  v120 = *(_BYTE **)(v88 + 8);
  v121 = *(unsigned int *)(v88 + 4);
  if ((v119 & 4) != 0)
  {
    if (!(_DWORD)v121)
      goto LABEL_92;
    v122 = *v120 - 48;
    if (v122 > 9 || v121 >= 2 && *v120 == 48)
      goto LABEL_92;
    v150 = v120 + 1;
    v151 = v121 - 1;
    while (v151)
    {
      if (v122 <= 0x19999999)
      {
        v152 = *v150 - 48;
        if (v152 <= 9)
        {
          v126 = __CFADD__(v152, 10 * v122);
          v122 = v152 + 10 * v122;
          ++v150;
          --v151;
          if (!v126)
            continue;
        }
      }
      goto LABEL_92;
    }
  }
  else
  {
    if (!(_DWORD)v121)
      goto LABEL_92;
    v122 = *(unsigned __int16 *)v120 - 48;
    if (v122 > 9 || *(_WORD *)v120 == 48 && v121 > 1)
      goto LABEL_92;
    v123 = (unsigned __int16 *)(v120 + 2);
    v124 = v121 - 1;
    while (v124)
    {
      if (v122 <= 0x19999999)
      {
        v125 = *v123 - 48;
        if (v125 <= 9)
        {
          v126 = __CFADD__(v125, 10 * v122);
          v122 = v125 + 10 * v122;
          ++v123;
          --v124;
          if (!v126)
            continue;
        }
      }
      goto LABEL_92;
    }
  }
  if (v122 != -1)
  {
    v153 = a1[7];
    v154 = v122;
    v155 = this;
    while (1)
    {
      v156 = 16 * (*(_DWORD *)v155 & 0xFFFFFFFE);
      v157 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v156 + 0x4C)
                                                                                                  + 0x70))(v155, a1, v154, &v172);
      if (*((_DWORD *)v153 + 20))
      {
        if (((JSC::VM::hasExceptionsAfterHandlingTraps(v153, a2, this, a4, a5, a6, a7, a8) | v157) & 1) != 0)
          break;
      }
      else if ((v157 & 1) != 0)
      {
        break;
      }
      if (BYTE2(v178) == 3)
      {
        if (v179)
          break;
        v158 = *(unsigned __int8 *)(v155 + 5);
        if (v158 != 61)
        {
LABEL_245:
          if ((v158 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v155, a2, this, a4, a5, a6, a7, a8) <= v154)
          {
            break;
          }
        }
      }
      else
      {
        v158 = *(unsigned __int8 *)(v155 + 5);
        if (v158 != 61)
          goto LABEL_245;
        if (BYTE2(v178) == 1)
          break;
      }
      if ((*(_WORD *)(v156 + 12) & 0x800) == 0 || BYTE2(v178) == 3)
      {
        v159 = *(_QWORD *)(16 * (*(_DWORD *)v155 & 0xFFFFFFFE) + 0x30);
        if (!v159)
          v159 = *(_QWORD *)(v155 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v155 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v159 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                * *(unsigned int *)(16
                                                                                  * (*(_DWORD *)v155 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0xB0))(v155, a1);
        }
        else
        {
          v159 = *(_QWORD *)(16 * (*(_DWORD *)v155 & 0xFFFFFFFE) + 0x30);
          if (!v159)
            v159 = *(_QWORD *)(v155 + 16);
        }
        if (*((_DWORD *)v153 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v153, a2, this, a4, a5, a6, a7, a8))
          break;
      }
      if ((v159 & 0xFFFE000000000002) == 0)
      {
        v155 = v159;
        if (*(unsigned __int8 *)(v159 + 5) > 0x16u)
          continue;
      }
      break;
    }
  }
LABEL_92:
  v25 = v184;
  if (*((_DWORD *)v184 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v184, a2, this, a4, a5, a6, a7, a8))
    goto LABEL_157;
  if (v181)
  {
    v109 = *((_DWORD *)v180 + 1);
    if (!v109)
    {
      __break(0xC471u);
      JUMPOUT(0x1984924C8);
    }
    *((_DWORD *)v180 + 1) = v109 - 1;
    v180 = 0;
    v181 = 0;
  }
  v112 = JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v171 + 2712), a4, a5, a6, a7, a8);
  if (*((_DWORD *)v25 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v25, v110, v111, a4, a5, a6, a7, a8))
      goto LABEL_157;
  }
  if ((v112 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v114 = BYTE1(v178);
  }
  else if (v112 != JSC::JSGlobalObject::arrayProtoValuesFunction(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                            + 0x28))
         || (v114 = BYTE1(v178), (BYTE1(v178) & 0xFE) == 2)
         || v179
         || (*(_BYTE *)(this + 4) & 0xEu) > 9
         || ((v129 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2216), (v129 & 1) != 0)
           ? (v130 = (v129 >> 1) & 3)
           : (v130 = *(unsigned __int8 *)(v129 + 4)),
             v130 == 2))
  {
    v25 = (JSC::VM *)JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>((JSC::JSGlobalObject *)a1, a2, (JSC::JSObject *)this, v112, a5, a6, a7, a8);
    v37 = 0;
    v118 = 0;
    goto LABEL_128;
  }
  switch(v114)
  {
    case 0:
      v37 = 0;
      goto LABEL_127;
    case 1:
      v115 = v172;
      break;
    case 2:
      v115 = (JSC::ArrayBuffer *)JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v172, (JSC::JSGlobalObject *)a1, v111, a4, a5, a6, a7, a8);
      break;
    default:
      v115 = (JSC::ArrayBuffer *)JSC::PropertySlot::customGetter((uint64_t)&v172, a1[7], *(WTF::StringImpl **)(*(_QWORD *)v171 + 1768));
      break;
  }
  v186 = v115;
  if (!*((_DWORD *)v25 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v25, v110, v111, a4, a5, a6, a7, a8))
  {
    v37 = JSC::JSValue::toLength(&v186, (JSC::JSGlobalObject *)a1, v111, a4, a5, a6, a7, a8, v113);
    if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25, v116, v117, a4, a5, a6, a7, a8))
      goto LABEL_158;
LABEL_127:
    v118 = 1;
    goto LABEL_128;
  }
LABEL_157:
  v37 = 0;
LABEL_158:
  v118 = 0;
  v25 = 0;
LABEL_128:
  if (v181)
  {
    v127 = *((_DWORD *)v180 + 1);
    if (!v127)
    {
      __break(0xC471u);
      JUMPOUT(0x1984924E8);
    }
    *((_DWORD *)v180 + 1) = v127 - 1;
  }
  if (v118)
  {
LABEL_24:
    v38 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v37, a4, a5, a6, a7, a8);
    if (v38)
    {
      v41 = v38;
      v42 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setFromArrayLike(v38, (JSC::JSGlobalObject *)a1, 0, this, 0, v37, v39, v40);
      goto LABEL_26;
    }
    return 0;
  }
  return (unint64_t)v25;
}

unint64_t operationNewUint32ArrayWithSize(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  uint64_t v11;
  const WTF::String *v12;
  unint64_t RangeError;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *var18[4];

  v9 = (WTF::StringImpl **)*((_QWORD *)a1 + 7);
  v9[5] = var18[3];
  if ((a3 & 0x8000000000000000) != 0)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v11 = 0x1C00000002;
    *(_QWORD *)(v11 + 8) = "Requested length is negative";
    *(_DWORD *)(v11 + 16) = 4;
    var18[0] = (WTF::StringImpl *)v11;
    RangeError = JSC::createRangeError((unint64_t)a1, var18, v12);
    JSC::VM::throwException((JSC::VM *)v9, a1, RangeError, v14, v15, v16, v17, v18);
    v26 = var18[0];
    var18[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    return 0;
  }
  else if (a4)
  {
    return JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createWithFastVector((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    return JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::create(a1, a2, a3, 0, a5, a6, a7, a8);
  }
}

unint64_t operationNewUint32ArrayWithOneArgument(unint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD var38[8];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var38[7];
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 38 && *(_BYTE *)(*(_QWORD *)(a2 + 16) + 64))
  {
    v11 = *(_QWORD *)(a1 + 1824);
    if ((v11 & 1) == 0)
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(a1, v11, a2, 0, 0, 0, a8, a9, a3);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v17 = (uint64_t *)(a1 - 16);
    v15 = *v17;
    v16 = a1 + 1824;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a1 + 1808);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v14 = (uint64_t *)(a1 - 16);
    v15 = *v14;
    v16 = a1 + 1808;
LABEL_9:
    var38[0] = v15;
    var38[1] = a1;
    var38[2] = v16;
    v11 = v13(var38);
  }
  return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(a1, v11, a2, 0, 0, 0, a8, a9, a3);
}

unint64_t JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(unint64_t a1, uint64_t a2, uint64_t this, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  JSC::Heap **v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::Heap *v31;
  unint64_t SlowCase;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  JSC::ArrayBuffer *v48;
  _QWORD *v49;
  _QWORD *Allocator;
  const char *v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  unint64_t v56;
  JSC::Heap **v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  JSC::Exception *v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  JSC::VM *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  JSC::Heap **v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  JSC::Exception *v109;
  unint64_t v110;
  uint64_t (*v111)(unint64_t *);
  unint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t (*v116)(unint64_t *);
  unint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  JSC::JSArrayBufferView *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  int v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  _BYTE *v149;
  uint64_t v150;
  unsigned int v151;
  unsigned __int16 *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  JSC::VM *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  int8x16_t v162;
  int v163;
  WTF::StringImpl *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  unsigned int *v169;
  uint64_t v170;
  unsigned int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t Uninitialized;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const WTF::String *v194;
  unint64_t RangeError;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  _BYTE *v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  unsigned __int16 *v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  unsigned int v219;
  uint64_t v220;
  unsigned __int8 *v221;
  int v222;
  double v223;
  const unsigned __int8 *v224;
  unsigned __int8 *v225;
  uint64_t v226;
  unsigned int v227;
  JSC::VM *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  uint64_t v234;
  unsigned __int8 *v235;
  uint64_t v236;
  unsigned int v237;
  JSC::VM *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  uint64_t v244;
  int v245;
  WTF::StringImpl *v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  JSC::JSArrayBufferView *v250;
  uint64_t v251;
  int v252;
  char v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  JSC::VM *v259;
  JSC::JSObject *v260;
  WTF::StringImpl *v261;
  unint64_t v262;
  unint64_t v263;
  __int128 v264;
  char v265;
  uint64_t v266;
  uint64_t v267;

  v267 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 56);
  v259 = (JSC::VM *)v11;
  v260 = (JSC::JSObject *)this;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_97;
  v13 = (JSC::Heap **)(v11 + 40888);
  v14 = *(unsigned __int8 *)(this + 5);
  if (v14 == 38)
  {
    v15 = *(_QWORD *)(this + 16);
    if (v15)
      *(_DWORD *)v15 += 2;
    v258 = v15;
    v16 = *(_QWORD *)(v15 + 16);
    if (v16
      && (!qword_1ECF4C038
       || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
       || (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      v17 = a6;
      if ((_BYTE)a6)
      {
        v19 = a5 & 0xFFFFFFFFFFFFFF00;
      }
      else if (*(_BYTE *)(v15 + 64))
      {
        v114 = *(_QWORD *)(v15 + 32);
        if (v114)
          v115 = *(_QWORD *)(v114 + 32);
        else
          v115 = *(_QWORD *)(v15 + 48);
        if (v115 < a4)
        {
          v193 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v193 = 0x3000000002;
          *(_QWORD *)(v193 + 8) = "byteOffset exceeds source ArrayBuffer byteLength";
          *(_DWORD *)(v193 + 16) = 4;
          v262 = v193;
          RangeError = JSC::createRangeError(a1, (WTF::StringImpl **)&v262, v194);
          JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, RangeError, v196, v197, v198, v199, v200);
          v66 = (WTF::StringImpl *)v262;
          v262 = 0;
          if (v66)
          {
LABEL_69:
            if (*(_DWORD *)v66 == 2)
            {
              WTF::StringImpl::~StringImpl(v66, (WTF::AtomStringImpl *)v24, v25, v26, v27, v28, v29, v30);
              WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
            }
            else
            {
              *(_DWORD *)v66 -= 2;
            }
          }
LABEL_60:
          SlowCase = 0;
LABEL_37:
          v37 = *(_DWORD *)v15 == 2;
          *(_DWORD *)v15 -= 2;
          if (v37)
          {
            JSC::ArrayBuffer::~ArrayBuffer((JSC::ArrayBuffer *)v15, (void *)v24, v25, v26, v27, v28, v29, v30);
            WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
          }
          return SlowCase;
        }
        v19 = 0;
        LOBYTE(a5) = 0;
        v17 = 0;
      }
      else
      {
        v18 = *(_QWORD *)(v15 + 48) - a4;
        if ((v18 & 3) != 0)
        {
          v99 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v99 = 0x4D00000002;
          *(_QWORD *)(v99 + 8) = "ArrayBuffer length minus the byteOffset is not a multiple of the element size";
          *(_DWORD *)(v99 + 16) = 4;
          v246 = (WTF::StringImpl *)v99;
          v100 = *(_QWORD *)(a1 + 128);
          v101 = *(JSC::Heap ***)(a1 + 56);
          if ((v100 & 1) != 0)
          {
            v116 = *(uint64_t (**)(unint64_t *))(v100 & 0xFFFFFFFFFFFFFFFCLL);
            if ((a1 & 8) != 0)
              v117 = (unint64_t *)(a1 - 16);
            else
              v117 = (unint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
            v262 = *v117;
            v263 = a1;
            *(_QWORD *)&v264 = a1 + 128;
            v100 = v116(&v262);
          }
          v102 = JSC::ErrorInstance::create(v101, v100, &v246, 0, 0, 0, 2, 1);
          v109 = (JSC::Exception *)v102;
          if ((v102 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v102 & 0xFFFFFFFE) + 0x4C)))
          {
            v109 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v102, 0, v103, v104, v105, v106, v107);
          }
          JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v109, v108, v103, v104, v105, v106, v107);
          v66 = v246;
          v246 = 0;
          if (!v66)
            goto LABEL_60;
          goto LABEL_69;
        }
        a5 = v18 >> 2;
        v19 = (v18 >> 2) & 0x3FFFFFFFFFFFFF00;
        v17 = 1;
      }
      v246 = (WTF::StringImpl *)v11;
      if (!qword_1ECF4C038
        || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
        || (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
      {
        if (*(_BYTE *)(v15 + 64) && (v113 = *(_QWORD *)(v15 + 32)) != 0)
          v20 = *(_QWORD *)(v113 + 32);
        else
          v20 = *(_QWORD *)(v15 + 48);
        v21 = v20 >= a4;
        v22 = v20 - a4;
        if (!v21 || (v23 = a5 | v19, v17) && v23 > v22 >> 2)
        {
          v54 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v54 = 0x1D00000002;
          v55 = "Length out of range of buffer";
        }
        else
        {
          if ((a4 & 3) == 0)
          {
            JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v262, (JSC *)v11, a2, (uint64_t)&v258, a4, v23, v17, a8, a9);
            v31 = *v13;
            if (!*v13)
              v31 = JSC::GCClient::Heap::uint32ArraySpaceSlow((JSC::Heap **)(v11 + 37552));
            SlowCase = *((_QWORD *)v31 + 3);
            if (SlowCase >= *((_QWORD *)v31 + 4))
            {
              SlowCase = *((_QWORD *)v31 + 5);
              if ((SlowCase & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v24, v25, v26, v27, v28, v29, v30);
                SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v31, v11 + 192, 48, 0, 0, v118, v119, v120);
LABEL_27:
                *(_DWORD *)SlowCase = 0;
                v33 = *(_DWORD *)(v262 + 8);
                *(_DWORD *)SlowCase = v262 >> 4;
                *(_DWORD *)(SlowCase + 4) = v33;
                *(_QWORD *)(SlowCase + 8) = 0;
                *(_QWORD *)(SlowCase + 16) = 0;
                *(_OWORD *)(SlowCase + 24) = v264;
                *(_BYTE *)(SlowCase + 40) = v265;
                v34 = v266;
                if (*(_BYTE *)(v11 + 755))
                {
                  __dmb(0xAu);
                  *(_QWORD *)(SlowCase + 8) = v34;
                  if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
                    JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
                  __dmb(0xAu);
                }
                else
                {
                  *(_QWORD *)(SlowCase + 8) = v266;
                  if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
                    JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
                }
                v35 = v263;
                if (v263 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                  v35 = (v263 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                *(_QWORD *)(SlowCase + 16) = v35;
                if (*(_BYTE *)(v11 + 755))
                  __dmb(0xAu);
                v36 = *(unsigned __int8 *)(SlowCase + 40);
                if (v36 == 16)
                  goto LABEL_37;
                v47 = v36 - 88;
                if ((v36 - 88) <= 0x35)
                {
                  if (((1 << v47) & 0x3D) != 0)
                  {
                    v48 = *(JSC::ArrayBuffer **)(*(_QWORD *)(SlowCase + 8) - 8);
LABEL_43:
                    JSC::Heap::addReference((JSC::Heap *)(v11 + 192), (JSC::JSCell *)SlowCase, v48);
                    goto LABEL_37;
                  }
                  if (((1 << v47) & 0x3D000000000000) != 0)
                  {
                    v48 = *(JSC::ArrayBuffer **)(SlowCase + 48);
                    goto LABEL_43;
                  }
                }
                if (v36 != 48)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198493440);
                }
                if ((SlowCase & 8) != 0)
                  v24 = (SlowCase - 112) | 1;
                else
                  v24 = SlowCase & 0xFFFFFFFFFFFFC000;
                if ((v24 & 1) != 0)
                  v49 = (_QWORD *)(v24 + 47);
                else
                  v49 = (_QWORD *)(*(_QWORD *)v24 + 32);
                Allocator = (_QWORD *)v49[2];
                if (!Allocator)
                  Allocator = (_QWORD *)JSC::WeakSet::findAllocator(v49, v24);
                v49[2] = *Allocator;
                *Allocator = SlowCase;
                Allocator[1] = v11 + 736;
                Allocator[2] = JSC::JSArrayBufferView::finalize;
                goto LABEL_37;
              }
              v110 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v31 + 6);
              *((_QWORD *)v31 + 4) = SlowCase + HIDWORD(v110);
              *((_QWORD *)v31 + 5) = SlowCase + (int)v110;
            }
            *((_QWORD *)v31 + 3) = SlowCase + 48;
            goto LABEL_27;
          }
          v54 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v54 = 0x1A00000002;
          v55 = "Byte offset is not aligned";
        }
        *(_QWORD *)(v54 + 8) = v55;
        *(_DWORD *)(v54 + 16) = 4;
        v261 = (WTF::StringImpl *)v54;
        v56 = *(_QWORD *)(a1 + 128);
        v57 = *(JSC::Heap ***)(a1 + 56);
        if ((v56 & 1) != 0)
        {
          v111 = *(uint64_t (**)(unint64_t *))(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a1 & 8) != 0)
            v112 = (unint64_t *)(a1 - 16);
          else
            v112 = (unint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          v262 = *v112;
          v263 = a1;
          *(_QWORD *)&v264 = a1 + 128;
          v56 = v111(&v262);
        }
        v58 = JSC::ErrorInstance::create(v57, v56, &v261, 0, 0, 0, 2, 1);
        v65 = (JSC::Exception *)v58;
        if ((v58 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x4C)))
        {
          v65 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v58, 0, v59, v60, v61, v62, v63);
        }
        JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v65, v64, v59, v60, v61, v62, v63);
        v66 = v261;
        v261 = 0;
        if (v66)
          goto LABEL_69;
        goto LABEL_60;
      }
      v51 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
      v52 = &v246;
      v53 = 72;
    }
    else
    {
      v51 = "Buffer is already detached";
      v52 = &v259;
      v53 = 27;
    }
    JSC::throwTypeError(a1, v52, (uint64_t)v51, v53);
    goto LABEL_60;
  }
  if (v14 < 0x17)
  {
LABEL_97:
    v98 = JSC::JSValue::toTypedArrayIndex(&v260, (JSC::JSGlobalObject *)a1, (uint64_t)"length", 7, a5, a6, a7, a8, (int8x16_t)a9);
    if (!*(_DWORD *)(v11 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v91, v92, v93, v94, v95, v96, v97))
    {
      return JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::create((JSC::JSGlobalObject *)a1, a2, v98, v93, v94, v95, v96, v97);
    }
    return 0;
  }
  if (v14 - 39 <= 0xA)
  {
    v176 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)this, a2, this, a4, a5, a6, a7, a8);
    Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v176, v177, v178, v179, v180, v181);
    if (Uninitialized)
    {
      v89 = Uninitialized;
      LOBYTE(v262) = 0;
      LOBYTE(v263) = 0;
      if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(this, &v262, v183, v184, v185, v186, v187, v188))
      {
        v190 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v191 = a1;
        v192 = 72;
      }
      else
      {
        if (*(unsigned __int8 *)(this + 5) - 39 < 9)
        {
          v90 = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setFromTypedArray(v89, a1, 0, this, 0, v176, 1, v189);
LABEL_94:
          if (v90)
            return v89;
          else
            return 0;
        }
        v190 = "Content types of source and new typed array are different";
        v191 = a1;
        v192 = 58;
      }
      JSC::throwTypeError(v191, &v259, (uint64_t)v190, v192);
    }
    return 0;
  }
  v75 = (JSC::VM *)v11;
  if (this)
  {
    v75 = (JSC::VM *)v11;
    if (v14 == 36)
    {
      v76 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
      v77 = *(_QWORD *)(v76 + 2216);
      v78 = (v77 & 1) != 0 ? (v77 >> 1) & 3 : *(unsigned __int8 *)(v77 + 4);
      v75 = (JSC::VM *)v11;
      if (v78 != 2)
      {
        v75 = (JSC::VM *)v11;
        if (*(_BYTE *)(*(_QWORD *)(v76 + 2048) + 4) != 2)
        {
          v79 = *(_QWORD *)(v76 + 2304);
          v80 = (v79 & 1) != 0 ? (v79 >> 1) & 3 : *(unsigned __int8 *)(v79 + 4);
          v75 = (JSC::VM *)v11;
          if (v80 != 2)
          {
            v81 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
            v82 = (v81 >> 1) & 7;
            if ((v81 & 0x10) != 0)
              v82 = ((v81 & 0xE) + 10) >> 1;
            v83 = *(_DWORD *)(v76 + 4 * v82 + 852);
            if (v83)
              v84 = 16 * (v83 & 0xFFFFFFFE);
            else
              v84 = 0;
            if (v84 == 16 * (*(_DWORD *)this & 0xFFFFFFFE))
              goto LABEL_90;
            v75 = (JSC::VM *)v11;
            if ((v81 & 0x20) == 0)
            {
              v121 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
              if (!v121)
                v121 = *(_QWORD *)(this + 16);
              v75 = (JSC::VM *)v11;
              if (v121 == *(_QWORD *)(v76 + 672))
              {
                if (JSC::JSObject::getDirectOffset((_DWORD *)this, *(JSC::VM **)(v76 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v76 + 56) + 41952) + 2712), (const JSC::PropertyTable *)a4, a5, a6, a7, a8) == -1)
                {
LABEL_90:
                  if ((*(_BYTE *)(this + 4) & 0xE) != 0)
                    v85 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
                  else
                    v85 = 0;
                  goto LABEL_92;
                }
                v75 = *(JSC::VM **)(a1 + 56);
              }
            }
          }
        }
      }
    }
  }
  v248 = 0xFFFFFFFF00000000;
  v250 = 0;
  v251 = 0;
  v249 = this;
  v252 = 196608;
  v253 = 0;
  v256 = 0;
  v257 = 0;
  v254 = v11;
  ++*(_DWORD *)(v11 + 4);
  v255 = 1;
  v122 = v11 + 40888;
  v123 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768);
  v124 = this + 6;
  v125 = v123 >> 4;
  if ((*(_BYTE *)(this + 6) & 8) != 0)
  {
    v140 = this;
LABEL_250:
    if (v123)
    {
      v201 = *(_DWORD *)(v123 + 16);
      if ((v201 & 0x20) == 0)
      {
        v202 = *(_BYTE **)(v123 + 8);
        v203 = *(unsigned int *)(v123 + 4);
        if ((v201 & 4) != 0)
        {
          if ((_DWORD)v203)
          {
            v204 = *v202 - 48;
            if (v204 <= 9 && (v203 < 2 || *v202 != 48))
            {
              v235 = v202 + 1;
              v236 = v203 - 1;
              while (v236)
              {
                if (v204 <= 0x19999999)
                {
                  v237 = *v235 - 48;
                  if (v237 <= 9)
                  {
                    v21 = __CFADD__(v237, 10 * v204);
                    v204 = v237 + 10 * v204;
                    ++v235;
                    --v236;
                    if (!v21)
                      continue;
                  }
                }
                goto LABEL_255;
              }
LABEL_401:
              if (v204 != -1)
              {
                v238 = *(JSC::VM **)(a1 + 56);
                v239 = v204;
                v240 = this;
                while (1)
                {
                  v241 = 16 * (*(_DWORD *)v240 & 0xFFFFFFFE);
                  v242 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v241 + 0x4C) + 0x70))(v240, a1, v239, &v246);
                  if (*((_DWORD *)v238 + 20))
                  {
                    if (((JSC::VM::hasExceptionsAfterHandlingTraps(v238, a2, this, a4, a5, a6, a7, a8) | v242) & 1) != 0)
                      goto LABEL_195;
                  }
                  else if ((v242 & 1) != 0)
                  {
                    goto LABEL_195;
                  }
                  if (BYTE2(v252) == 3)
                  {
                    if (v253)
                      goto LABEL_195;
                    v243 = *(unsigned __int8 *)(v240 + 5);
                    if (v243 != 61)
                    {
LABEL_407:
                      if ((v243 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v240, a2, this, a4, a5, a6, a7, a8) <= v239)
                      {
                        goto LABEL_195;
                      }
                    }
                  }
                  else
                  {
                    v243 = *(unsigned __int8 *)(v240 + 5);
                    if (v243 != 61)
                      goto LABEL_407;
                    if (BYTE2(v252) == 1)
                      goto LABEL_195;
                  }
                  if ((*(_WORD *)(v241 + 12) & 0x800) == 0 || BYTE2(v252) == 3)
                  {
                    v244 = *(_QWORD *)(16 * (*(_DWORD *)v240 & 0xFFFFFFFE) + 0x30);
                    if (!v244)
                      v244 = *(_QWORD *)(v240 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v240 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v244 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)v240 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0xB0))(v240, a1);
                    }
                    else
                    {
                      v244 = *(_QWORD *)(16 * (*(_DWORD *)v240 & 0xFFFFFFFE) + 0x30);
                      if (!v244)
                        v244 = *(_QWORD *)(v240 + 16);
                    }
                    if (*((_DWORD *)v238 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v238, a2, this, a4, a5, a6, a7, a8))
                    {
                      goto LABEL_195;
                    }
                  }
                  if ((v244 & 0xFFFE000000000002) == 0)
                  {
                    v240 = v244;
                    if (*(unsigned __int8 *)(v244 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_195;
                }
              }
            }
          }
        }
        else if ((_DWORD)v203)
        {
          v204 = *(unsigned __int16 *)v202 - 48;
          if (v204 <= 9 && (*(_WORD *)v202 != 48 || v203 <= 1))
          {
            v213 = (unsigned __int16 *)(v202 + 2);
            v214 = v203 - 1;
            while (v214)
            {
              if (v204 <= 0x19999999)
              {
                v215 = *v213 - 48;
                if (v215 <= 9)
                {
                  v21 = __CFADD__(v215, 10 * v204);
                  v204 = v215 + 10 * v204;
                  ++v213;
                  --v214;
                  if (!v21)
                    continue;
                }
              }
              goto LABEL_255;
            }
            goto LABEL_401;
          }
        }
      }
    }
LABEL_255:
    v75 = *(JSC::VM **)(a1 + 56);
    while (1)
    {
      v205 = 16 * (*(_DWORD *)v140 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v140 + 6) & 8) != 0)
      {
        v245 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v140 & 0xFFFFFFFE) + 0x4C) + 0x68))(v140, a1, v123, &v246);
        if (*((_DWORD *)v75 + 20))
        {
          if (((JSC::VM::hasExceptionsAfterHandlingTraps(v75, a2, this, a4, a5, a6, a7, a8) | v245) & 1) != 0)
            goto LABEL_195;
        }
        else if ((v245 & 1) != 0)
        {
          goto LABEL_195;
        }
        if (BYTE2(v252) == 3)
        {
          if (v253)
            goto LABEL_195;
          v218 = *(unsigned __int8 *)(v140 + 5);
          if (v218 != 61)
          {
LABEL_316:
            if (!v123)
              goto LABEL_262;
            if ((v218 - 50) < 0xFFFFFFF5)
              goto LABEL_262;
            v219 = *(_DWORD *)(v123 + 16);
            if ((v219 & 0x20) != 0)
              goto LABEL_262;
            v220 = *(unsigned int *)(v123 + 4);
            if (!(_DWORD)v220)
              goto LABEL_262;
            v221 = *(unsigned __int8 **)(v123 + 8);
            if ((v219 & 4) == 0)
            {
              v222 = *(unsigned __int16 *)v221;
              if ((_DWORD)v220 == 1)
                goto LABEL_322;
              if (v222 == 45)
              {
                v222 = *((unsigned __int16 *)v221 + 1);
                goto LABEL_327;
              }
              if ((v222 - 48) >= 0xA && ((_DWORD)v220 != 8 || v222 != 73))
              {
LABEL_341:
                if ((_DWORD)v220 != 3 || v222 != 78)
                  goto LABEL_262;
              }
LABEL_334:
              v124 = v124 & 0xFFFFFF0000000000 | v220 | ((unint64_t)((v219 >> 2) & 1) << 32);
              JSC::jsToNumber(v221, v124);
              WTF::numberToString(&v262, v223);
              if (WTF::equal(v123, (unint64_t)&v262, v224))
                goto LABEL_195;
              goto LABEL_262;
            }
            v222 = *v221;
            if ((_DWORD)v220 == 1)
            {
LABEL_322:
              if ((v222 - 48) < 0xA)
                goto LABEL_195;
              goto LABEL_262;
            }
            if (v222 == 45)
            {
              v222 = v221[1];
LABEL_327:
              if ((v222 - 48) < 0xA)
              {
                if ((_DWORD)v220 == 2)
                  goto LABEL_195;
                goto LABEL_334;
              }
              if ((_DWORD)v220 != 9)
                goto LABEL_262;
            }
            else
            {
              if ((v222 - 48) < 0xA)
                goto LABEL_334;
              if ((_DWORD)v220 != 8)
                goto LABEL_341;
            }
            if (v222 != 73)
              goto LABEL_262;
            goto LABEL_334;
          }
        }
        else
        {
          v218 = *(unsigned __int8 *)(v140 + 5);
          if (v218 != 61)
            goto LABEL_316;
          if (BYTE2(v252) == 1)
            goto LABEL_195;
        }
      }
      else
      {
        if ((_DWORD)v125)
        {
          if ((v125 & ~*(_DWORD *)(16 * (*(_DWORD *)v140 & 0xFFFFFFFE) + 0x20)) == 0)
          {
            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v140 & 0xFFFFFFFE)), v75, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            if (v206)
            {
              v262 = v123;
              v207 = JSC::PropertyTable::get(v206, (uint64_t *)&v262);
              a6 = v207;
              if ((_DWORD)v207 != -1)
              {
                a5 = HIDWORD(v207);
                if ((int)v207 <= 63)
                {
                  v210 = v140 + 16;
                  v211 = v207 << 32;
                }
                else
                {
                  v210 = *(_QWORD *)(v140 + 8) - 8;
                  v211 = 0x3F00000000 - (v207 << 32);
                }
                a4 = *(_QWORD *)(v210 + (v211 >> 29));
                if ((a4 & 0xFFFE000000000002) == 0)
                {
                  v212 = *(unsigned __int8 *)(a4 + 5);
                  if (v212 != 5)
                  {
                    if (v212 != 6)
                      goto LABEL_274;
                    v172 = *(_DWORD *)(v205 + 16) & 3;
                    v216 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v175 = *(_QWORD *)(a4 + 24);
                      v174 = *(_QWORD *)(a4 + 32);
                      v246 = *(WTF::StringImpl **)(a4 + 8);
                      v247 = v216;
                      LODWORD(v248) = HIDWORD(v207);
                      v250 = (JSC::JSArrayBufferView *)v140;
LABEL_236:
                      BYTE1(v252) = 3;
                      if (v172 != 2)
                        LOBYTE(v252) = 1;
                      HIBYTE(v252) = 1;
                      v256 = v175;
                      v257 = v174;
                      goto LABEL_195;
                    }
                    v246 = *(WTF::StringImpl **)(a4 + 8);
                    v247 = v216;
                    LODWORD(v248) = HIDWORD(v207);
                    v250 = (JSC::JSArrayBufferView *)v140;
LABEL_294:
                    BYTE1(v252) = 3;
                    if (v172 != 2)
                      LOBYTE(v252) = 1;
                    goto LABEL_195;
                  }
                  v169 = (unsigned int *)v140;
LABEL_225:
                  JSC::JSObject::fillGetterPropertySlot(v169, (uint64_t)v75, (uint64_t)&v246, a4, a5, a6);
                  goto LABEL_195;
                }
LABEL_274:
                v246 = (WTF::StringImpl *)a4;
                v250 = (JSC::JSArrayBufferView *)v140;
                goto LABEL_194;
              }
            }
          }
        }
        if ((*(_BYTE *)(v140 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v140, v75, v123, (uint64_t)&v246) & 1) != 0)
        {
          goto LABEL_195;
        }
      }
LABEL_262:
      if ((*(_WORD *)(v205 + 12) & 0x800) == 0)
      {
        v208 = *(_DWORD *)v140;
LABEL_264:
        v209 = *(_QWORD *)(16 * (v208 & 0xFFFFFFFE) + 0x30);
        if (!v209)
          v209 = *(_QWORD *)(v140 + 16);
        goto LABEL_266;
      }
      v208 = *(_DWORD *)v140;
      if (BYTE2(v252) == 3)
        goto LABEL_264;
      v217 = 16 * (v208 & 0xFFFFFFFE);
      if ((*(_WORD *)(v217 + 12) & 0x800) != 0)
      {
        v209 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v217 + 76) + 0xB0))(v140, a1);
      }
      else
      {
        v209 = *(_QWORD *)(v217 + 48);
        if (!v209)
          v209 = *(_QWORD *)(v140 + 16);
      }
      if (*((_DWORD *)v75 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v75, a2, this, a4, a5, a6, a7, a8))
        goto LABEL_195;
LABEL_266:
      if ((v209 & 0xFFFE000000000002) == 0)
      {
        v140 = v209;
        if (*(unsigned __int8 *)(v209 + 5) > 0x16u)
          continue;
      }
      goto LABEL_195;
    }
  }
  v126 = (JSC::JSArrayBufferView *)this;
  while (1)
  {
    v127 = *(_DWORD *)v126 & 0xFFFFFFFE;
    v128 = 16 * v127;
    if (!(_DWORD)v125 || (v125 & ~*(_DWORD *)(16 * v127 + 0x20)) != 0)
      goto LABEL_153;
    v129 = *(_QWORD *)(16 * v127 + 0x58);
    if (!v129)
    {
      v141 = *(_QWORD *)(16 * v127 + 0x40);
      if (!v141 || *(_BYTE *)(v141 + 5) != 1 && *(_DWORD *)(v141 + 80) < 2u)
        goto LABEL_153;
      JSC::Structure::materializePropertyTable((JSC::Structure *)v128, v75, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      if (!v129)
        goto LABEL_153;
    }
    if (!*(_DWORD *)(v129 + 24))
      goto LABEL_153;
    v130 = *(_QWORD *)(v129 + 16);
    v131 = v130 & 0xFFFFFFFFFFFFFFFELL;
    v132 = *(unsigned int *)(v129 + 8);
    v133 = *(_DWORD *)(v123 + 16);
    if ((v130 & 1) != 0)
    {
      if ((v133 & 0x20) != 0)
        v133 = *(_DWORD *)(v123 + 32);
      v134 = *(_DWORD *)(v129 + 12);
      v135 = (v133 >> 8) & *(_QWORD *)&v134;
      v136 = *(unsigned __int8 *)(v131 + v135);
      if (!*(_BYTE *)(v131 + v135))
        goto LABEL_153;
      v137 = v131 + v132;
      v138 = 1;
      while (1)
      {
        v139 = *(_QWORD *)(v137 + 8 * (v136 - 1));
        if (v123 == (v139 & 0xFFFFFFFFFFFFLL))
          break;
        v135 = ((_DWORD)v135 + v138) & v134;
        v136 = *(unsigned __int8 *)(v131 + v135);
        ++v138;
        if (!*(_BYTE *)(v131 + v135))
          goto LABEL_153;
      }
      a6 = (v139 >> 16) & 0xFF00000000 | HIBYTE(v139);
    }
    else
    {
      if ((v133 & 0x20) != 0)
        v133 = *(_DWORD *)(v123 + 32);
      v142 = *(_DWORD *)(v129 + 12);
      v143 = v142 & (v133 >> 8);
      v144 = *(_DWORD *)(v131 + 4 * v143);
      if (!v144)
        goto LABEL_153;
      v145 = v131 + 4 * v132;
      v146 = 1;
      while (1)
      {
        v147 = (v144 - 1);
        if (v123 == *(_QWORD *)(v145 + 16 * v147))
          break;
        v143 = (v143 + v146) & v142;
        v144 = *(_DWORD *)(v131 + 4 * v143);
        ++v146;
        if (!v144)
          goto LABEL_153;
      }
      a6 = *(unsigned int *)(v145 + 16 * v147 + 8) | ((unint64_t)*(unsigned __int8 *)(v145 + 16 * v147 + 12) << 32);
    }
    if ((_DWORD)a6 != -1)
    {
      a5 = HIDWORD(a6);
      if ((int)a6 <= 63)
      {
        v155 = (uint64_t)v126 + 16;
        v156 = a6 << 32;
      }
      else
      {
        v155 = *((_QWORD *)v126 + 1) - 8;
        v156 = 0x3F00000000 - (a6 << 32);
      }
      a4 = *(_QWORD *)(v155 + (v156 >> 29));
      if ((a4 & 0xFFFE000000000002) == 0)
      {
        v157 = *(unsigned __int8 *)(a4 + 5);
        if (v157 == 5)
        {
          v169 = (unsigned int *)v126;
          goto LABEL_225;
        }
        if (v157 == 6)
        {
          v172 = *(_DWORD *)(v128 + 16) & 3;
          v173 = *(_QWORD *)(a4 + 16);
          if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
          {
            v175 = *(_QWORD *)(a4 + 24);
            v174 = *(_QWORD *)(a4 + 32);
            v246 = *(WTF::StringImpl **)(a4 + 8);
            v247 = v173;
            LODWORD(v248) = HIDWORD(a6);
            v250 = v126;
            goto LABEL_236;
          }
          v246 = *(WTF::StringImpl **)(a4 + 8);
          v247 = v173;
          LODWORD(v248) = HIDWORD(a6);
          v250 = v126;
          goto LABEL_294;
        }
      }
      v246 = (WTF::StringImpl *)a4;
      v250 = v126;
LABEL_194:
      v248 = __PAIR64__(a6, a5);
      LOWORD(v252) = 257;
      goto LABEL_195;
    }
LABEL_153:
    if ((*(_BYTE *)v124 & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v126, v75, v123, (uint64_t)&v246) & 1) != 0)
    {
      goto LABEL_195;
    }
    v140 = *(_QWORD *)(v128 + 48);
    if (!v140)
      v140 = *((_QWORD *)v126 + 2);
    if ((v140 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v140 + 5) < 0x17u)
      break;
    v124 = v140 + 6;
    v126 = (JSC::JSArrayBufferView *)v140;
    if ((*(_BYTE *)(v140 + 6) & 8) != 0)
      goto LABEL_250;
  }
  if (!v123)
    goto LABEL_195;
  v148 = *(_DWORD *)(v123 + 16);
  if ((v148 & 0x20) != 0)
    goto LABEL_195;
  v149 = *(_BYTE **)(v123 + 8);
  v150 = *(unsigned int *)(v123 + 4);
  if ((v148 & 4) != 0)
  {
    if (!(_DWORD)v150)
      goto LABEL_195;
    v151 = *v149 - 48;
    if (v151 > 9 || v150 >= 2 && *v149 == 48)
      goto LABEL_195;
    v225 = v149 + 1;
    v226 = v150 - 1;
    while (v226)
    {
      if (v151 <= 0x19999999)
      {
        v227 = *v225 - 48;
        if (v227 <= 9)
        {
          v21 = __CFADD__(v227, 10 * v151);
          v151 = v227 + 10 * v151;
          ++v225;
          --v226;
          if (!v21)
            continue;
        }
      }
      goto LABEL_195;
    }
  }
  else
  {
    if (!(_DWORD)v150)
      goto LABEL_195;
    v151 = *(unsigned __int16 *)v149 - 48;
    if (v151 > 9 || *(_WORD *)v149 == 48 && v150 > 1)
      goto LABEL_195;
    v152 = (unsigned __int16 *)(v149 + 2);
    v153 = v150 - 1;
    while (v153)
    {
      if (v151 <= 0x19999999)
      {
        v154 = *v152 - 48;
        if (v154 <= 9)
        {
          v21 = __CFADD__(v154, 10 * v151);
          v151 = v154 + 10 * v151;
          ++v152;
          --v153;
          if (!v21)
            continue;
        }
      }
      goto LABEL_195;
    }
  }
  if (v151 != -1)
  {
    v228 = *(JSC::VM **)(a1 + 56);
    v229 = v151;
    v230 = this;
    while (1)
    {
      v231 = 16 * (*(_DWORD *)v230 & 0xFFFFFFFE);
      v232 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v231 + 0x4C) + 0x70))(v230, a1, v229, &v246);
      if (*((_DWORD *)v228 + 20))
      {
        if (((JSC::VM::hasExceptionsAfterHandlingTraps(v228, a2, this, a4, a5, a6, a7, a8) | v232) & 1) != 0)
          break;
      }
      else if ((v232 & 1) != 0)
      {
        break;
      }
      if (BYTE2(v252) == 3)
      {
        if (v253)
          break;
        v233 = *(unsigned __int8 *)(v230 + 5);
        if (v233 != 61)
        {
LABEL_362:
          if ((v233 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v230, a2, this, a4, a5, a6, a7, a8) <= v229)
          {
            break;
          }
        }
      }
      else
      {
        v233 = *(unsigned __int8 *)(v230 + 5);
        if (v233 != 61)
          goto LABEL_362;
        if (BYTE2(v252) == 1)
          break;
      }
      if ((*(_WORD *)(v231 + 12) & 0x800) == 0 || BYTE2(v252) == 3)
      {
        v234 = *(_QWORD *)(16 * (*(_DWORD *)v230 & 0xFFFFFFFE) + 0x30);
        if (!v234)
          v234 = *(_QWORD *)(v230 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v230 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v234 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v230 & 0xFFFFFFFE)
                                                                                        + 0x4C)
                                                                      + 0xB0))(v230, a1);
        }
        else
        {
          v234 = *(_QWORD *)(16 * (*(_DWORD *)v230 & 0xFFFFFFFE) + 0x30);
          if (!v234)
            v234 = *(_QWORD *)(v230 + 16);
        }
        if (*((_DWORD *)v228 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v228, a2, this, a4, a5, a6, a7, a8))
          break;
      }
      if ((v234 & 0xFFFE000000000002) == 0)
      {
        v230 = v234;
        if (*(unsigned __int8 *)(v234 + 5) > 0x16u)
          continue;
      }
      break;
    }
  }
LABEL_195:
  v158 = v259;
  if (*((_DWORD *)v259 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v259, a2, this, a4, a5, a6, a7, a8))
    goto LABEL_278;
  if (v255)
  {
    v159 = *(_DWORD *)(v254 + 4);
    if (!v159)
    {
      __break(0xC471u);
      JUMPOUT(0x198493D18);
    }
    *(_DWORD *)(v254 + 4) = v159 - 1;
    v254 = 0;
    v255 = 0;
  }
  SlowCase = JSC::JSObject::get((unsigned int *)this, a1, *(_QWORD *)(*(_QWORD *)(v122 + 1064) + 2712), a4, a5, a6, a7, a8);
  if (*((_DWORD *)v158 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v158, v160, v161, a4, a5, a6, a7, a8))
    {
LABEL_278:
      v85 = 0;
      goto LABEL_279;
    }
  }
  if ((SlowCase & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v163 = BYTE1(v252);
    goto LABEL_202;
  }
  if (SlowCase != JSC::JSGlobalObject::arrayProtoValuesFunction(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28))
    || (v163 = BYTE1(v252), (BYTE1(v252) & 0xFE) == 2)
    || v253
    || (*(_BYTE *)(this + 4) & 0xEu) > 9
    || ((v170 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2216), (v170 & 1) != 0)
      ? (v171 = (v170 >> 1) & 3)
      : (v171 = *(unsigned __int8 *)(v170 + 4)),
        v171 == 2))
  {
    SlowCase = JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>((JSC::JSGlobalObject *)a1, a2, (JSC::JSObject *)this, SlowCase, a5, a6, a7, a8);
    v85 = 0;
    v167 = 0;
    goto LABEL_217;
  }
LABEL_202:
  switch(v163)
  {
    case 0:
      v85 = 0;
LABEL_216:
      v167 = 1;
      goto LABEL_217;
    case 1:
      v164 = v246;
      break;
    case 2:
      v164 = (WTF::StringImpl *)JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v246, (JSC::JSGlobalObject *)a1, v161, a4, a5, a6, a7, a8);
      break;
    default:
      v164 = (WTF::StringImpl *)JSC::PropertySlot::customGetter((uint64_t)&v246, *(JSC::VM **)(a1 + 56), *(WTF::StringImpl **)(*(_QWORD *)(v122 + 1064) + 1768));
      break;
  }
  v262 = (unint64_t)v164;
  if (*((_DWORD *)v158 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v158, v160, v161, a4, a5, a6, a7, a8))
    goto LABEL_278;
  v85 = JSC::JSValue::toLength((JSC::JSObject **)&v262, (JSC::JSGlobalObject *)a1, v161, a4, a5, a6, a7, a8, v162);
  if (!*((_DWORD *)v158 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v158, v165, v166, a4, a5, a6, a7, a8))
    goto LABEL_216;
LABEL_279:
  v167 = 0;
  SlowCase = 0;
LABEL_217:
  if (v255)
  {
    v168 = *(_DWORD *)(v254 + 4);
    if (!v168)
    {
      __break(0xC471u);
      JUMPOUT(0x198493D38);
    }
    *(_DWORD *)(v254 + 4) = v168 - 1;
  }
  if (v167)
  {
LABEL_92:
    v86 = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v85, a4, a5, a6, a7, a8);
    if (v86)
    {
      v89 = v86;
      v90 = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setFromArrayLike(v86, (JSC::JSGlobalObject *)a1, 0, (JSC::JSObject *)this, 0, v85, v87, v88);
      goto LABEL_94;
    }
    return 0;
  }
  return SlowCase;
}

unint64_t operationNewFloat32ArrayWithSize(JSC::JSGlobalObject *a1, WTF::StringImpl *a2, unint64_t a3, WTF::StringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t SlowCase;
  JSC::Heap *v12;
  JSC::JSCell *v13;
  unint64_t v14;
  uint64_t v15;
  const WTF::String *v16;
  unint64_t RangeError;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43[4];
  char v44;
  uint64_t v45;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (!a4)
      return JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create(a1, (uint64_t)a2, a3, 0, a5, a6, a7, a8);
    v43[0] = a2;
    v43[1] = a4;
    v43[2] = (WTF::StringImpl *)a3;
    v43[3] = 0;
    v44 = 16;
    v45 = 0;
    if (a3 >= 0x3E9)
    {
      __break(0xC471u);
      JUMPOUT(0x1984944B8);
    }
    if (!a2)
    {
      __break(0xC471u);
      JUMPOUT(0x1984944D8);
    }
    v12 = *(JSC::Heap **)(v9 + 40464);
    if (!v12)
      v12 = JSC::GCClient::Heap::float32ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
    SlowCase = *((_QWORD *)v12 + 3);
    if (SlowCase >= *((_QWORD *)v12 + 4))
    {
      SlowCase = *((_QWORD *)v12 + 5);
      if ((SlowCase & 1) != 0)
      {
        v39 = (uint64_t)v12;
        JSC::sanitizeStackForVM((JSC *)v9, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v39, v9 + 192, 48, 0, 0, v40, v41, v42);
        goto LABEL_11;
      }
      v14 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v12 + 6);
      *((_QWORD *)v12 + 4) = SlowCase + HIDWORD(v14);
      *((_QWORD *)v12 + 5) = SlowCase + (int)v14;
    }
    *((_QWORD *)v12 + 3) = SlowCase + 48;
LABEL_11:
    *(_DWORD *)SlowCase = 0;
    v13 = JSC::JSArrayBufferView::JSArrayBufferView((JSC::JSCell *)SlowCase, v9, (uint64_t)v43);
    JSC::JSArrayBufferView::finishCreation((unint64_t)v13, (JSC::VM *)v9);
    return SlowCase;
  }
  v15 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v15 = 0x1C00000002;
  *(_QWORD *)(v15 + 8) = "Requested length is negative";
  *(_DWORD *)(v15 + 16) = 4;
  v43[0] = (WTF::StringImpl *)v15;
  RangeError = JSC::createRangeError((unint64_t)a1, v43, v16);
  JSC::VM::throwException((JSC::VM *)v9, a1, RangeError, v18, v19, v20, v21, v22);
  v30 = v43[0];
  v43[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  return 0;
}

unint64_t operationNewFloat32ArrayWithOneArgument(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD var38[8];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var38[7];
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 38 && *(_BYTE *)(*(_QWORD *)(a2 + 16) + 64))
  {
    v11 = *(_QWORD *)(a1 + 1848);
    if ((v11 & 1) == 0)
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v17 = (uint64_t *)(a1 - 16);
    v15 = *v17;
    v16 = a1 + 1848;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a1 + 1832);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v14 = (uint64_t *)(a1 - 16);
    v15 = *v14;
    v16 = a1 + 1832;
LABEL_9:
    var38[0] = v15;
    var38[1] = a1;
    var38[2] = v16;
    v11 = v13(var38);
  }
  return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
}

unint64_t JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM **a1, uint64_t a2, uint64_t this, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v11;
  unsigned int v13;
  JSC::ArrayBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::VM *v25;
  BOOL v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::VM *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  const WTF::String *v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  JSC::JSArrayBufferView *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  _BYTE *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int v97;
  JSC::ArrayBuffer *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  _BYTE *v103;
  uint64_t v104;
  unsigned int v105;
  unsigned __int16 *v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  int v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t Uninitialized;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unsigned __int16 *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned __int8 *v146;
  int v147;
  double v148;
  const unsigned __int8 *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unsigned int v152;
  JSC::VM *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unsigned int v162;
  JSC::VM *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t v169;
  int v170;
  char *v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  JSC::JSArrayBufferView *v176;
  uint64_t v177;
  int v178;
  char v179;
  JSC::VM *v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  JSC::VM *v184;
  JSC::JSObject *v185;
  JSC::ArrayBuffer *v186;
  char v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v11 = a1[7];
  v184 = v11;
  v185 = (JSC::JSObject *)this;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v13 = *(unsigned __int8 *)(this + 5);
  if (v13 == 38)
  {
    v14 = *(JSC::ArrayBuffer **)(this + 16);
    if (v14)
      *(_DWORD *)v14 += 2;
    v186 = v14;
    v15 = *((_QWORD *)v14 + 2);
    if (!v15
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError((unint64_t)a1, &v184, (uint64_t)"Buffer is already detached", 27);
LABEL_18:
      v25 = 0;
      v186 = 0;
LABEL_14:
      v26 = *(_DWORD *)v14 == 2;
      *(_DWORD *)v14 -= 2;
      if (v26)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v14, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      return (unint64_t)v25;
    }
    a6 = a6;
    if ((_BYTE)a6)
    {
      v17 = a5 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      if (!*((_BYTE *)v14 + 64))
      {
        v16 = *((_QWORD *)v14 + 6) - a4;
        if ((v16 & 3) == 0)
        {
          a5 = v16 >> 2;
          v17 = (v16 >> 2) & 0x3FFFFFFFFFFFFF00;
          a6 = 1;
          goto LABEL_13;
        }
        v51 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v51 = 0x4D00000002;
        v53 = "ArrayBuffer length minus the byteOffset is not a multiple of the element size";
        goto LABEL_35;
      }
      v69 = *((_QWORD *)v14 + 4);
      if (v69)
        v70 = *(_QWORD *)(v69 + 32);
      else
        v70 = *((_QWORD *)v14 + 6);
      if (v70 < a4)
      {
        v51 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v51 = 0x3000000002;
        v53 = "byteOffset exceeds source ArrayBuffer byteLength";
LABEL_35:
        *(_QWORD *)(v51 + 8) = v53;
        *(_DWORD *)(v51 + 16) = 4;
        v172 = (WTF::StringImpl *)v51;
        v54 = JSC::createRangeError((unint64_t)a1, &v172, v52);
        JSC::VM::throwException(v11, (JSC::JSGlobalObject *)a1, v54, v55, v56, v57, v58, v59);
        v60 = v172;
        v172 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::~StringImpl(v60, (WTF::AtomStringImpl *)v18, v19, v20, v21, v22, v23, v24);
            WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
          }
          else
          {
            *(_DWORD *)v60 -= 2;
          }
        }
        goto LABEL_18;
      }
      v17 = 0;
      LOBYTE(a5) = 0;
      a6 = 0;
    }
LABEL_13:
    v25 = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create((JSC::JSGlobalObject *)a1, a2, (uint64_t)&v186, a4, a5 | v17, a6, a9, a7, a8);
    v14 = v186;
    v186 = 0;
    if (!v14)
      return (unint64_t)v25;
    goto LABEL_14;
  }
  if (v13 < 0x17)
  {
LABEL_32:
    v50 = JSC::JSValue::toTypedArrayIndex(&v185, (JSC::JSGlobalObject *)a1, (uint64_t)"length", 7, a5, a6, a7, a8, (int8x16_t)a9);
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v43, v44, v45, v46, v47, v48, v49))
      return JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create((JSC::JSGlobalObject *)a1, a2, v50, v45, v46, v47, v48, v49);
    return 0;
  }
  if (v13 - 39 <= 0xA)
  {
    v111 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)this, a2, this, a4, a5, a6, a7, a8);
    Uninitialized = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v111, v112, v113, v114, v115, v116);
    if (Uninitialized)
    {
      v41 = Uninitialized;
      LOBYTE(v186) = 0;
      v187 = 0;
      if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(this, (unint64_t *)&v186, v118, v119, v120, v121, v122, v123))
      {
        v125 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v126 = (unint64_t)a1;
        v127 = 72;
      }
      else
      {
        if (*(unsigned __int8 *)(this + 5) - 39 < 9)
        {
          JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setFromTypedArray(v41, (JSC::JSGlobalObject *)a1, 0, this, 0, v111, 1, v124);
LABEL_29:
          if (v42)
            return v41;
          else
            return 0;
        }
        v125 = "Content types of source and new typed array are different";
        v126 = (unint64_t)a1;
        v127 = 58;
      }
      JSC::throwTypeError(v126, &v184, (uint64_t)v125, v127);
    }
    return 0;
  }
  v36 = v11;
  if (this)
  {
    v36 = v11;
    if (v13 == 36)
    {
      if (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)this, a2, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8))
      {
        if ((*(_BYTE *)(this + 4) & 0xE) != 0)
          v37 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
        else
          v37 = 0;
        goto LABEL_27;
      }
      v36 = a1[7];
    }
  }
  v174 = 0xFFFFFFFF00000000;
  v176 = 0;
  v177 = 0;
  v175 = this;
  v178 = 196608;
  v179 = 0;
  v182 = 0;
  v183 = 0;
  v180 = v11;
  ++*((_DWORD *)v11 + 1);
  v181 = 1;
  v171 = (char *)v11 + 41952;
  v71 = *(_QWORD *)(*((_QWORD *)v11 + 5244) + 1768);
  v72 = this + 6;
  v73 = v71 >> 4;
  if ((*(_BYTE *)(this + 6) & 8) != 0)
  {
    v79 = this;
LABEL_58:
    if (v71)
    {
      v80 = *(_DWORD *)(v71 + 16);
      if ((v80 & 0x20) == 0)
      {
        v81 = *(_BYTE **)(v71 + 8);
        v82 = *(unsigned int *)(v71 + 4);
        if ((v80 & 4) != 0)
        {
          if ((_DWORD)v82)
          {
            v83 = *v81 - 48;
            if (v83 <= 9 && (v82 < 2 || *v81 != 48))
            {
              v160 = v81 + 1;
              v161 = v82 - 1;
              while (v161)
              {
                if (v83 <= 0x19999999)
                {
                  v162 = *v160 - 48;
                  if (v162 <= 9)
                  {
                    v109 = __CFADD__(v162, 10 * v83);
                    v83 = v162 + 10 * v83;
                    ++v160;
                    --v161;
                    if (!v109)
                      continue;
                  }
                }
                goto LABEL_63;
              }
LABEL_283:
              if (v83 != -1)
              {
                v163 = a1[7];
                v164 = v83;
                v165 = this;
                while (1)
                {
                  v166 = 16 * (*(_DWORD *)v165 & 0xFFFFFFFE);
                  v167 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v166 + 0x4C) + 0x70))(v165, a1, v164, &v172);
                  if (*((_DWORD *)v163 + 20))
                  {
                    if (((JSC::VM::hasExceptionsAfterHandlingTraps(v163, a2, this, a4, a5, a6, a7, a8) | v167) & 1) != 0)
                      goto LABEL_84;
                  }
                  else if ((v167 & 1) != 0)
                  {
                    goto LABEL_84;
                  }
                  if (BYTE2(v178) == 3)
                  {
                    if (v179)
                      goto LABEL_84;
                    v168 = *(unsigned __int8 *)(v165 + 5);
                    if (v168 != 61)
                    {
LABEL_289:
                      if ((v168 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v165, a2, this, a4, a5, a6, a7, a8) <= v164)
                      {
                        goto LABEL_84;
                      }
                    }
                  }
                  else
                  {
                    v168 = *(unsigned __int8 *)(v165 + 5);
                    if (v168 != 61)
                      goto LABEL_289;
                    if (BYTE2(v178) == 1)
                      goto LABEL_84;
                  }
                  if ((*(_WORD *)(v166 + 12) & 0x800) == 0 || BYTE2(v178) == 3)
                  {
                    v169 = *(_QWORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0x30);
                    if (!v169)
                      v169 = *(_QWORD *)(v165 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v169 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v165 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v165, a1);
                    }
                    else
                    {
                      v169 = *(_QWORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0x30);
                      if (!v169)
                        v169 = *(_QWORD *)(v165 + 16);
                    }
                    if (*((_DWORD *)v163 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v163, a2, this, a4, a5, a6, a7, a8))
                    {
                      goto LABEL_84;
                    }
                  }
                  if ((v169 & 0xFFFE000000000002) == 0)
                  {
                    v165 = v169;
                    if (*(unsigned __int8 *)(v169 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_84;
                }
              }
            }
          }
        }
        else if ((_DWORD)v82)
        {
          v83 = *(unsigned __int16 *)v81 - 48;
          if (v83 <= 9 && (*(_WORD *)v81 != 48 || v82 <= 1))
          {
            v138 = (unsigned __int16 *)(v81 + 2);
            v139 = v82 - 1;
            while (v139)
            {
              if (v83 <= 0x19999999)
              {
                v140 = *v138 - 48;
                if (v140 <= 9)
                {
                  v109 = __CFADD__(v140, 10 * v83);
                  v83 = v140 + 10 * v83;
                  ++v138;
                  --v139;
                  if (!v109)
                    continue;
                }
              }
              goto LABEL_63;
            }
            goto LABEL_283;
          }
        }
      }
    }
LABEL_63:
    v36 = a1[7];
    while (1)
    {
      v84 = 16 * (*(_DWORD *)v79 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v79 + 6) & 8) != 0)
      {
        v170 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v79 & 0xFFFFFFFE) + 0x4C) + 0x68))(v79, a1, v71, &v172);
        if (*((_DWORD *)v36 + 20))
        {
          if (((JSC::VM::hasExceptionsAfterHandlingTraps(v36, a2, this, a4, a5, a6, a7, a8) | v170) & 1) != 0)
            goto LABEL_84;
        }
        else if ((v170 & 1) != 0)
        {
          goto LABEL_84;
        }
        if (BYTE2(v178) == 3)
        {
          if (v179)
            goto LABEL_84;
          v143 = *(unsigned __int8 *)(v79 + 5);
          if (v143 != 61)
          {
LABEL_199:
            if (!v71)
              goto LABEL_70;
            if ((v143 - 50) < 0xFFFFFFF5)
              goto LABEL_70;
            v144 = *(_DWORD *)(v71 + 16);
            if ((v144 & 0x20) != 0)
              goto LABEL_70;
            v145 = *(unsigned int *)(v71 + 4);
            if (!(_DWORD)v145)
              goto LABEL_70;
            v146 = *(unsigned __int8 **)(v71 + 8);
            if ((v144 & 4) == 0)
            {
              v147 = *(unsigned __int16 *)v146;
              if ((_DWORD)v145 == 1)
                goto LABEL_205;
              if (v147 == 45)
              {
                v147 = *((unsigned __int16 *)v146 + 1);
                goto LABEL_210;
              }
              if ((v147 - 48) >= 0xA && ((_DWORD)v145 != 8 || v147 != 73))
              {
LABEL_224:
                if ((_DWORD)v145 != 3 || v147 != 78)
                  goto LABEL_70;
              }
LABEL_216:
              v72 = v72 & 0xFFFFFF0000000000 | v145 | ((unint64_t)((v144 >> 2) & 1) << 32);
              JSC::jsToNumber(v146, v72);
              WTF::numberToString(&v186, v148);
              if (WTF::equal(v71, (unint64_t)&v186, v149))
                goto LABEL_84;
              goto LABEL_70;
            }
            v147 = *v146;
            if ((_DWORD)v145 == 1)
            {
LABEL_205:
              if ((v147 - 48) < 0xA)
                goto LABEL_84;
              goto LABEL_70;
            }
            if (v147 == 45)
            {
              v147 = v146[1];
LABEL_210:
              if ((v147 - 48) < 0xA)
              {
                if ((_DWORD)v145 == 2)
                  goto LABEL_84;
                goto LABEL_216;
              }
              if ((_DWORD)v145 != 9)
                goto LABEL_70;
            }
            else
            {
              if ((v147 - 48) < 0xA)
                goto LABEL_216;
              if ((_DWORD)v145 != 8)
                goto LABEL_224;
            }
            if (v147 != 73)
              goto LABEL_70;
            goto LABEL_216;
          }
        }
        else
        {
          v143 = *(unsigned __int8 *)(v79 + 5);
          if (v143 != 61)
            goto LABEL_199;
          if (BYTE2(v178) == 1)
            goto LABEL_84;
        }
      }
      else
      {
        if ((_DWORD)v73)
        {
          if ((v73 & ~*(_DWORD *)(16 * (*(_DWORD *)v79 & 0xFFFFFFFE) + 0x20)) == 0)
          {
            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v79 & 0xFFFFFFFE)), v36, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            if (v85)
            {
              v186 = (JSC::ArrayBuffer *)v71;
              v86 = JSC::PropertyTable::get(v85, (uint64_t *)&v186);
              a6 = v86;
              if ((_DWORD)v86 != -1)
              {
                a5 = HIDWORD(v86);
                if ((int)v86 <= 63)
                {
                  v135 = v79 + 16;
                  v136 = v86 << 32;
                }
                else
                {
                  v135 = *(_QWORD *)(v79 + 8) - 8;
                  v136 = 0x3F00000000 - (v86 << 32);
                }
                a4 = *(_QWORD *)(v135 + (v136 >> 29));
                if ((a4 & 0xFFFE000000000002) == 0)
                {
                  v137 = *(unsigned __int8 *)(a4 + 5);
                  if (v137 != 5)
                  {
                    if (v137 != 6)
                      goto LABEL_162;
                    v131 = *(_DWORD *)(v84 + 16) & 3;
                    v141 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v134 = *(_QWORD *)(a4 + 24);
                      v133 = *(_QWORD *)(a4 + 32);
                      v172 = *(WTF::StringImpl **)(a4 + 8);
                      v173 = v141;
                      LODWORD(v174) = HIDWORD(v86);
                      v176 = (JSC::JSArrayBufferView *)v79;
LABEL_146:
                      BYTE1(v178) = 3;
                      if (v131 != 2)
                        LOBYTE(v178) = 1;
                      HIBYTE(v178) = 1;
                      v182 = v134;
                      v183 = v133;
                      goto LABEL_84;
                    }
                    v172 = *(WTF::StringImpl **)(a4 + 8);
                    v173 = v141;
                    LODWORD(v174) = HIDWORD(v86);
                    v176 = (JSC::JSArrayBufferView *)v79;
LABEL_175:
                    BYTE1(v178) = 3;
                    if (v131 != 2)
                      LOBYTE(v178) = 1;
                    goto LABEL_84;
                  }
                  v128 = (unsigned int *)v79;
LABEL_131:
                  JSC::JSObject::fillGetterPropertySlot(v128, (uint64_t)v36, (uint64_t)&v172, a4, a5, a6);
                  goto LABEL_84;
                }
LABEL_162:
                v172 = (WTF::StringImpl *)a4;
                v176 = (JSC::JSArrayBufferView *)v79;
                goto LABEL_83;
              }
            }
          }
        }
        if ((*(_BYTE *)(v79 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v79, v36, v71, (uint64_t)&v172) & 1) != 0)
        {
          goto LABEL_84;
        }
      }
LABEL_70:
      if ((*(_WORD *)(v84 + 12) & 0x800) == 0)
      {
        v87 = *(_DWORD *)v79;
LABEL_72:
        v88 = *(_QWORD *)(16 * (v87 & 0xFFFFFFFE) + 0x30);
        if (!v88)
          v88 = *(_QWORD *)(v79 + 16);
        goto LABEL_74;
      }
      v87 = *(_DWORD *)v79;
      if (BYTE2(v178) == 3)
        goto LABEL_72;
      v142 = 16 * (v87 & 0xFFFFFFFE);
      if ((*(_WORD *)(v142 + 12) & 0x800) != 0)
      {
        v88 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v142 + 76) + 0xB0))(v79, a1);
      }
      else
      {
        v88 = *(_QWORD *)(v142 + 48);
        if (!v88)
          v88 = *(_QWORD *)(v79 + 16);
      }
      if (*((_DWORD *)v36 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v36, a2, this, a4, a5, a6, a7, a8))
        goto LABEL_84;
LABEL_74:
      if ((v88 & 0xFFFE000000000002) == 0)
      {
        v79 = v88;
        if (*(unsigned __int8 *)(v88 + 5) > 0x16u)
          continue;
      }
      goto LABEL_84;
    }
  }
  v74 = (JSC::JSArrayBufferView *)this;
  while (1)
  {
    v75 = *(_DWORD *)v74 & 0xFFFFFFFE;
    v76 = 16 * v75;
    if ((_DWORD)v73)
    {
      if ((v73 & ~*(_DWORD *)(16 * v75 + 0x20)) == 0)
      {
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v76, v36, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (v77)
        {
          v186 = (JSC::ArrayBuffer *)v71;
          v78 = JSC::PropertyTable::get(v77, (uint64_t *)&v186);
          a6 = v78;
          if ((_DWORD)v78 != -1)
          {
            a5 = HIDWORD(v78);
            if ((int)v78 <= 63)
            {
              v89 = (uint64_t)v74 + 16;
              v90 = v78 << 32;
            }
            else
            {
              v89 = *((_QWORD *)v74 + 1) - 8;
              v90 = 0x3F00000000 - (v78 << 32);
            }
            a4 = *(_QWORD *)(v89 + (v90 >> 29));
            if ((a4 & 0xFFFE000000000002) == 0)
            {
              v91 = *(unsigned __int8 *)(a4 + 5);
              if (v91 == 5)
              {
                v128 = (unsigned int *)v74;
                goto LABEL_131;
              }
              if (v91 == 6)
              {
                v131 = *(_DWORD *)(v76 + 16) & 3;
                v132 = *(_QWORD *)(a4 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v134 = *(_QWORD *)(a4 + 24);
                  v133 = *(_QWORD *)(a4 + 32);
                  v172 = *(WTF::StringImpl **)(a4 + 8);
                  v173 = v132;
                  LODWORD(v174) = HIDWORD(v78);
                  v176 = v74;
                  goto LABEL_146;
                }
                v172 = *(WTF::StringImpl **)(a4 + 8);
                v173 = v132;
                LODWORD(v174) = HIDWORD(v78);
                v176 = v74;
                goto LABEL_175;
              }
            }
            v172 = (WTF::StringImpl *)a4;
            v176 = v74;
LABEL_83:
            v174 = __PAIR64__(a6, a5);
            LOWORD(v178) = 257;
            goto LABEL_84;
          }
        }
      }
    }
    if ((*(_BYTE *)v72 & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v74, v36, v71, (uint64_t)&v172) & 1) != 0)
    {
      goto LABEL_84;
    }
    v79 = *(_QWORD *)(v76 + 48);
    if (!v79)
      v79 = *((_QWORD *)v74 + 2);
    if ((v79 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v79 + 5) < 0x17u)
      break;
    v72 = v79 + 6;
    v74 = (JSC::JSArrayBufferView *)v79;
    if ((*(_BYTE *)(v79 + 6) & 8) != 0)
      goto LABEL_58;
  }
  if (!v71)
    goto LABEL_84;
  v102 = *(_DWORD *)(v71 + 16);
  if ((v102 & 0x20) != 0)
    goto LABEL_84;
  v103 = *(_BYTE **)(v71 + 8);
  v104 = *(unsigned int *)(v71 + 4);
  if ((v102 & 4) != 0)
  {
    if (!(_DWORD)v104)
      goto LABEL_84;
    v105 = *v103 - 48;
    if (v105 > 9 || v104 >= 2 && *v103 == 48)
      goto LABEL_84;
    v150 = v103 + 1;
    v151 = v104 - 1;
    while (v151)
    {
      if (v105 <= 0x19999999)
      {
        v152 = *v150 - 48;
        if (v152 <= 9)
        {
          v109 = __CFADD__(v152, 10 * v105);
          v105 = v152 + 10 * v105;
          ++v150;
          --v151;
          if (!v109)
            continue;
        }
      }
      goto LABEL_84;
    }
  }
  else
  {
    if (!(_DWORD)v104)
      goto LABEL_84;
    v105 = *(unsigned __int16 *)v103 - 48;
    if (v105 > 9 || *(_WORD *)v103 == 48 && v104 > 1)
      goto LABEL_84;
    v106 = (unsigned __int16 *)(v103 + 2);
    v107 = v104 - 1;
    while (v107)
    {
      if (v105 <= 0x19999999)
      {
        v108 = *v106 - 48;
        if (v108 <= 9)
        {
          v109 = __CFADD__(v108, 10 * v105);
          v105 = v108 + 10 * v105;
          ++v106;
          --v107;
          if (!v109)
            continue;
        }
      }
      goto LABEL_84;
    }
  }
  if (v105 != -1)
  {
    v153 = a1[7];
    v154 = v105;
    v155 = this;
    while (1)
    {
      v156 = 16 * (*(_DWORD *)v155 & 0xFFFFFFFE);
      v157 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v156 + 0x4C)
                                                                                                  + 0x70))(v155, a1, v154, &v172);
      if (*((_DWORD *)v153 + 20))
      {
        if (((JSC::VM::hasExceptionsAfterHandlingTraps(v153, a2, this, a4, a5, a6, a7, a8) | v157) & 1) != 0)
          break;
      }
      else if ((v157 & 1) != 0)
      {
        break;
      }
      if (BYTE2(v178) == 3)
      {
        if (v179)
          break;
        v158 = *(unsigned __int8 *)(v155 + 5);
        if (v158 != 61)
        {
LABEL_244:
          if ((v158 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v155, a2, this, a4, a5, a6, a7, a8) <= v154)
          {
            break;
          }
        }
      }
      else
      {
        v158 = *(unsigned __int8 *)(v155 + 5);
        if (v158 != 61)
          goto LABEL_244;
        if (BYTE2(v178) == 1)
          break;
      }
      if ((*(_WORD *)(v156 + 12) & 0x800) == 0 || BYTE2(v178) == 3)
      {
        v159 = *(_QWORD *)(16 * (*(_DWORD *)v155 & 0xFFFFFFFE) + 0x30);
        if (!v159)
          v159 = *(_QWORD *)(v155 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v155 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v159 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                * *(unsigned int *)(16
                                                                                  * (*(_DWORD *)v155 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0xB0))(v155, a1);
        }
        else
        {
          v159 = *(_QWORD *)(16 * (*(_DWORD *)v155 & 0xFFFFFFFE) + 0x30);
          if (!v159)
            v159 = *(_QWORD *)(v155 + 16);
        }
        if (*((_DWORD *)v153 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v153, a2, this, a4, a5, a6, a7, a8))
          break;
      }
      if ((v159 & 0xFFFE000000000002) == 0)
      {
        v155 = v159;
        if (*(unsigned __int8 *)(v159 + 5) > 0x16u)
          continue;
      }
      break;
    }
  }
LABEL_84:
  v25 = v184;
  if (*((_DWORD *)v184 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v184, a2, this, a4, a5, a6, a7, a8))
    goto LABEL_155;
  if (v181)
  {
    v92 = *((_DWORD *)v180 + 1);
    if (!v92)
    {
      __break(0xC471u);
      JUMPOUT(0x198494FF4);
    }
    *((_DWORD *)v180 + 1) = v92 - 1;
    v180 = 0;
    v181 = 0;
  }
  v95 = JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v171 + 2712), a4, a5, a6, a7, a8);
  if (*((_DWORD *)v25 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v25, v93, v94, a4, a5, a6, a7, a8))
      goto LABEL_155;
  }
  if ((v95 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v97 = BYTE1(v178);
  }
  else if (v95 != JSC::JSGlobalObject::arrayProtoValuesFunction(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28))
         || (v97 = BYTE1(v178), (BYTE1(v178) & 0xFE) == 2)
         || v179
         || (*(_BYTE *)(this + 4) & 0xEu) > 9
         || ((v129 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2216), (v129 & 1) != 0)
           ? (v130 = (v129 >> 1) & 3)
           : (v130 = *(unsigned __int8 *)(v129 + 4)),
             v130 == 2))
  {
    v25 = (JSC::VM *)JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>((JSC::JSGlobalObject *)a1, a2, (JSC::JSObject *)this, v95, a5, a6, a7, a8);
    v37 = 0;
    v101 = 0;
    goto LABEL_121;
  }
  switch(v97)
  {
    case 0:
      v37 = 0;
      goto LABEL_120;
    case 1:
      v98 = v172;
      break;
    case 2:
      v98 = (JSC::ArrayBuffer *)JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v172, (JSC::JSGlobalObject *)a1, v94, a4, a5, a6, a7, a8);
      break;
    default:
      v98 = (JSC::ArrayBuffer *)JSC::PropertySlot::customGetter((uint64_t)&v172, a1[7], *(WTF::StringImpl **)(*(_QWORD *)v171 + 1768));
      break;
  }
  v186 = v98;
  if (!*((_DWORD *)v25 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v25, v93, v94, a4, a5, a6, a7, a8))
  {
    v37 = JSC::JSValue::toLength(&v186, (JSC::JSGlobalObject *)a1, v94, a4, a5, a6, a7, a8, v96);
    if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25, v99, v100, a4, a5, a6, a7, a8))
      goto LABEL_156;
LABEL_120:
    v101 = 1;
    goto LABEL_121;
  }
LABEL_155:
  v37 = 0;
LABEL_156:
  v101 = 0;
  v25 = 0;
LABEL_121:
  if (v181)
  {
    v110 = *((_DWORD *)v180 + 1);
    if (!v110)
    {
      __break(0xC471u);
      JUMPOUT(0x198495014);
    }
    *((_DWORD *)v180 + 1) = v110 - 1;
  }
  if (v101)
  {
LABEL_27:
    v38 = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v37, a4, a5, a6, a7, a8);
    if (v38)
    {
      v41 = v38;
      v42 = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setFromArrayLike(v38, (JSC::JSGlobalObject *)a1, 0, this, 0, v37, v39, v40);
      goto LABEL_29;
    }
    return 0;
  }
  return (unint64_t)v25;
}

JSC::JSCell *operationNewFloat64ArrayWithSize(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t vars0;

  v8 = *(JSC::VM **)(a1 + 56);
  *((_QWORD *)v8 + 5) = vars0;
  return JSC::DFG::newTypedArrayWithSize<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>((JSC::Heap ***)a1, v8, a2, a3, a4, a6, a7, a8);
}

JSC::JSCell *JSC::DFG::newTypedArrayWithSize<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::Heap ***a1, JSC::VM *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  const WTF::String *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;

  if ((a4 & 0x8000000000000000) != 0)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v11 = 0x1C00000002;
    *(_QWORD *)(v11 + 8) = "Requested length is negative";
    *(_DWORD *)(v11 + 16) = 4;
    v35 = (WTF::StringImpl *)v11;
    v13 = JSC::createRangeError((unint64_t)a1, &v35, v12);
    JSC::VM::throwException(a2, (JSC::JSGlobalObject *)a1, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    return 0;
  }
  else if (a5)
  {
    return JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createWithFastVector(a1[7], a3, a4, a5, a5, a6, a7, a8);
  }
  else
  {
    return (JSC::JSCell *)JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::create((JSC::JSGlobalObject *)a1, a3, a4, a4, 0, a6, a7, a8);
  }
}

unint64_t operationNewFloat64ArrayWithOneArgument(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD var38[8];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var38[7];
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 38 && *(_BYTE *)(*(_QWORD *)(a2 + 16) + 64))
  {
    v11 = *(_QWORD *)(a1 + 1872);
    if ((v11 & 1) == 0)
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v17 = (uint64_t *)(a1 - 16);
    v15 = *v17;
    v16 = a1 + 1872;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a1 + 1856);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v14 = (uint64_t *)(a1 - 16);
    v15 = *v14;
    v16 = a1 + 1856;
LABEL_9:
    var38[0] = v15;
    var38[1] = a1;
    var38[2] = v16;
    v11 = v13(var38);
  }
  return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>((JSC::VM **)a1, v11, a2, 0, 0, 0, a8, a9, a3);
}

unint64_t JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::VM **a1, uint64_t a2, uint64_t this, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v11;
  unsigned int v13;
  JSC::ArrayBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::JSCell *v25;
  BOOL v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::JSCell *Uninitialized;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  const WTF::String *v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  JSC::VM *v72;
  unint64_t v73;
  JSC::JSCell *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  JSC::JSArrayBufferView *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int8x16_t v113;
  int v114;
  JSC::ArrayBuffer *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  _BYTE *v120;
  uint64_t v121;
  unsigned int v122;
  unsigned __int16 *v123;
  uint64_t v124;
  unsigned int v125;
  BOOL v126;
  int v127;
  unsigned int *v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unsigned __int16 *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned __int8 *v146;
  int v147;
  double v148;
  const unsigned __int8 *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unsigned int v152;
  JSC::VM *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unsigned int v162;
  JSC::VM *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t v169;
  int v170;
  char *v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  JSC::JSArrayBufferView *v176;
  uint64_t v177;
  int v178;
  char v179;
  JSC::VM *v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  JSC::VM *v184;
  JSC::JSObject *v185;
  JSC::ArrayBuffer *v186;
  char v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v11 = a1[7];
  v184 = v11;
  v185 = (JSC::JSObject *)this;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_27;
  v13 = *(unsigned __int8 *)(this + 5);
  if (v13 == 38)
  {
    v14 = *(JSC::ArrayBuffer **)(this + 16);
    if (v14)
      *(_DWORD *)v14 += 2;
    v186 = v14;
    v15 = *((_QWORD *)v14 + 2);
    if (!v15
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError((unint64_t)a1, &v184, (uint64_t)"Buffer is already detached", 27);
LABEL_19:
      v25 = 0;
      v186 = 0;
LABEL_14:
      v26 = *(_DWORD *)v14 == 2;
      *(_DWORD *)v14 -= 2;
      if (v26)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v14, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      return (unint64_t)v25;
    }
    a6 = a6;
    if ((_BYTE)a6)
    {
      v17 = a5 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      if (!*((_BYTE *)v14 + 64))
      {
        v16 = *((_QWORD *)v14 + 6) - a4;
        if ((v16 & 7) == 0)
        {
          a5 = v16 >> 3;
          v17 = (v16 >> 3) & 0x1FFFFFFFFFFFFF00;
          a6 = 1;
          goto LABEL_13;
        }
        v62 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v62 = 0x4D00000002;
        v64 = "ArrayBuffer length minus the byteOffset is not a multiple of the element size";
        goto LABEL_30;
      }
      v86 = *((_QWORD *)v14 + 4);
      if (v86)
        v87 = *(_QWORD *)(v86 + 32);
      else
        v87 = *((_QWORD *)v14 + 6);
      if (v87 < a4)
      {
        v62 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v62 = 0x3000000002;
        v64 = "byteOffset exceeds source ArrayBuffer byteLength";
LABEL_30:
        *(_QWORD *)(v62 + 8) = v64;
        *(_DWORD *)(v62 + 16) = 4;
        v172 = (WTF::StringImpl *)v62;
        v65 = JSC::createRangeError((unint64_t)a1, &v172, v63);
        JSC::VM::throwException(v11, (JSC::JSGlobalObject *)a1, v65, v66, v67, v68, v69, v70);
        v71 = v172;
        v172 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
          {
            WTF::StringImpl::~StringImpl(v71, (WTF::AtomStringImpl *)v18, v19, v20, v21, v22, v23, v24);
            WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
          }
          else
          {
            *(_DWORD *)v71 -= 2;
          }
        }
        goto LABEL_19;
      }
      v17 = 0;
      LOBYTE(a5) = 0;
      a6 = 0;
    }
LABEL_13:
    v25 = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::create((JSC::JSGlobalObject *)a1, a2, (uint64_t)&v186, a4, a5 | v17, a6, a9, a7, a8);
    v14 = v186;
    v186 = 0;
    if (!v14)
      return (unint64_t)v25;
    goto LABEL_14;
  }
  if (v13 < 0x17)
  {
LABEL_27:
    v61 = JSC::JSValue::toTypedArrayIndex(&v185, (JSC::JSGlobalObject *)a1, (uint64_t)"length", 7, a5, a6, a7, a8, (int8x16_t)a9);
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v54, v55, v56, v57, v58, v59, v60))
      return JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::create((JSC::JSGlobalObject *)a1, a2, v61, v56, v57, v58, v59, v60);
    return 0;
  }
  if (v13 - 39 <= 0xA)
  {
    v36 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)this, a2, this, a4, a5, a6, a7, a8);
    Uninitialized = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v36, v37, v38, v39, v40, v41);
    if (!Uninitialized)
      return 0;
    v49 = (uint64_t)Uninitialized;
    LOBYTE(v186) = 0;
    v187 = 0;
    if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(this, (unint64_t *)&v186, v43, v44, v45, v46, v47, v48))
    {
      v51 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
      v52 = (unint64_t)a1;
      v53 = 72;
LABEL_25:
      JSC::throwTypeError(v52, &v184, (uint64_t)v51, v53);
      return 0;
    }
    if (*(unsigned __int8 *)(this + 5) - 39 >= 9)
    {
      v51 = "Content types of source and new typed array are different";
      v52 = (unint64_t)a1;
      v53 = 58;
      goto LABEL_25;
    }
    v77 = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setFromTypedArray(v49, (unint64_t)a1, 0, this, 0, v36, 1, v50);
LABEL_40:
    if (v77)
      return v49;
    else
      return 0;
  }
  v72 = v11;
  if (this)
  {
    v72 = v11;
    if (v13 == 36)
    {
      if (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)this, a2, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8))
      {
        if ((*(_BYTE *)(this + 4) & 0xE) != 0)
          v73 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
        else
          v73 = 0;
LABEL_38:
        v74 = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v73, a4, a5, a6, a7, a8);
        if (!v74)
          return 0;
        v49 = (uint64_t)v74;
        v77 = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setFromArrayLike((uint64_t)v74, (unint64_t)a1, 0, this, 0, v73, v75, v76);
        goto LABEL_40;
      }
      v72 = a1[7];
    }
  }
  v174 = 0xFFFFFFFF00000000;
  v176 = 0;
  v177 = 0;
  v175 = this;
  v178 = 196608;
  v179 = 0;
  v182 = 0;
  v183 = 0;
  v180 = v11;
  ++*((_DWORD *)v11 + 1);
  v181 = 1;
  v171 = (char *)v11 + 41952;
  v88 = *(_QWORD *)(*((_QWORD *)v11 + 5244) + 1768);
  v89 = this + 6;
  v90 = v88 >> 4;
  if ((*(_BYTE *)(this + 6) & 8) != 0)
  {
    v96 = this;
LABEL_66:
    if (v88)
    {
      v97 = *(_DWORD *)(v88 + 16);
      if ((v97 & 0x20) == 0)
      {
        v98 = *(_BYTE **)(v88 + 8);
        v99 = *(unsigned int *)(v88 + 4);
        if ((v97 & 4) != 0)
        {
          if ((_DWORD)v99)
          {
            v100 = *v98 - 48;
            if (v100 <= 9 && (v99 < 2 || *v98 != 48))
            {
              v160 = v98 + 1;
              v161 = v99 - 1;
              while (v161)
              {
                if (v100 <= 0x19999999)
                {
                  v162 = *v160 - 48;
                  if (v162 <= 9)
                  {
                    v126 = __CFADD__(v162, 10 * v100);
                    v100 = v162 + 10 * v100;
                    ++v160;
                    --v161;
                    if (!v126)
                      continue;
                  }
                }
                goto LABEL_71;
              }
LABEL_284:
              if (v100 != -1)
              {
                v163 = a1[7];
                v164 = v100;
                v165 = this;
                while (1)
                {
                  v166 = 16 * (*(_DWORD *)v165 & 0xFFFFFFFE);
                  v167 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v166 + 0x4C) + 0x70))(v165, a1, v164, &v172);
                  if (*((_DWORD *)v163 + 20))
                  {
                    if (((JSC::VM::hasExceptionsAfterHandlingTraps(v163, a2, this, a4, a5, a6, a7, a8) | v167) & 1) != 0)
                      goto LABEL_92;
                  }
                  else if ((v167 & 1) != 0)
                  {
                    goto LABEL_92;
                  }
                  if (BYTE2(v178) == 3)
                  {
                    if (v179)
                      goto LABEL_92;
                    v168 = *(unsigned __int8 *)(v165 + 5);
                    if (v168 != 61)
                    {
LABEL_290:
                      if ((v168 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v165, a2, this, a4, a5, a6, a7, a8) <= v164)
                      {
                        goto LABEL_92;
                      }
                    }
                  }
                  else
                  {
                    v168 = *(unsigned __int8 *)(v165 + 5);
                    if (v168 != 61)
                      goto LABEL_290;
                    if (BYTE2(v178) == 1)
                      goto LABEL_92;
                  }
                  if ((*(_WORD *)(v166 + 12) & 0x800) == 0 || BYTE2(v178) == 3)
                  {
                    v169 = *(_QWORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0x30);
                    if (!v169)
                      v169 = *(_QWORD *)(v165 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v169 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v165 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v165, a1);
                    }
                    else
                    {
                      v169 = *(_QWORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0x30);
                      if (!v169)
                        v169 = *(_QWORD *)(v165 + 16);
                    }
                    if (*((_DWORD *)v163 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v163, a2, this, a4, a5, a6, a7, a8))
                    {
                      goto LABEL_92;
                    }
                  }
                  if ((v169 & 0xFFFE000000000002) == 0)
                  {
                    v165 = v169;
                    if (*(unsigned __int8 *)(v169 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_92;
                }
              }
            }
          }
        }
        else if ((_DWORD)v99)
        {
          v100 = *(unsigned __int16 *)v98 - 48;
          if (v100 <= 9 && (*(_WORD *)v98 != 48 || v99 <= 1))
          {
            v138 = (unsigned __int16 *)(v98 + 2);
            v139 = v99 - 1;
            while (v139)
            {
              if (v100 <= 0x19999999)
              {
                v140 = *v138 - 48;
                if (v140 <= 9)
                {
                  v126 = __CFADD__(v140, 10 * v100);
                  v100 = v140 + 10 * v100;
                  ++v138;
                  --v139;
                  if (!v126)
                    continue;
                }
              }
              goto LABEL_71;
            }
            goto LABEL_284;
          }
        }
      }
    }
LABEL_71:
    v72 = a1[7];
    while (1)
    {
      v101 = 16 * (*(_DWORD *)v96 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v96 + 6) & 8) != 0)
      {
        v170 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x4C) + 0x68))(v96, a1, v88, &v172);
        if (*((_DWORD *)v72 + 20))
        {
          if (((JSC::VM::hasExceptionsAfterHandlingTraps(v72, a2, this, a4, a5, a6, a7, a8) | v170) & 1) != 0)
            goto LABEL_92;
        }
        else if ((v170 & 1) != 0)
        {
          goto LABEL_92;
        }
        if (BYTE2(v178) == 3)
        {
          if (v179)
            goto LABEL_92;
          v143 = *(unsigned __int8 *)(v96 + 5);
          if (v143 != 61)
          {
LABEL_200:
            if (!v88)
              goto LABEL_78;
            if ((v143 - 50) < 0xFFFFFFF5)
              goto LABEL_78;
            v144 = *(_DWORD *)(v88 + 16);
            if ((v144 & 0x20) != 0)
              goto LABEL_78;
            v145 = *(unsigned int *)(v88 + 4);
            if (!(_DWORD)v145)
              goto LABEL_78;
            v146 = *(unsigned __int8 **)(v88 + 8);
            if ((v144 & 4) == 0)
            {
              v147 = *(unsigned __int16 *)v146;
              if ((_DWORD)v145 == 1)
                goto LABEL_206;
              if (v147 == 45)
              {
                v147 = *((unsigned __int16 *)v146 + 1);
                goto LABEL_211;
              }
              if ((v147 - 48) >= 0xA && ((_DWORD)v145 != 8 || v147 != 73))
              {
LABEL_225:
                if ((_DWORD)v145 != 3 || v147 != 78)
                  goto LABEL_78;
              }
LABEL_217:
              v89 = v89 & 0xFFFFFF0000000000 | v145 | ((unint64_t)((v144 >> 2) & 1) << 32);
              JSC::jsToNumber(v146, v89);
              WTF::numberToString(&v186, v148);
              if (WTF::equal(v88, (unint64_t)&v186, v149))
                goto LABEL_92;
              goto LABEL_78;
            }
            v147 = *v146;
            if ((_DWORD)v145 == 1)
            {
LABEL_206:
              if ((v147 - 48) < 0xA)
                goto LABEL_92;
              goto LABEL_78;
            }
            if (v147 == 45)
            {
              v147 = v146[1];
LABEL_211:
              if ((v147 - 48) < 0xA)
              {
                if ((_DWORD)v145 == 2)
                  goto LABEL_92;
                goto LABEL_217;
              }
              if ((_DWORD)v145 != 9)
                goto LABEL_78;
            }
            else
            {
              if ((v147 - 48) < 0xA)
                goto LABEL_217;
              if ((_DWORD)v145 != 8)
                goto LABEL_225;
            }
            if (v147 != 73)
              goto LABEL_78;
            goto LABEL_217;
          }
        }
        else
        {
          v143 = *(unsigned __int8 *)(v96 + 5);
          if (v143 != 61)
            goto LABEL_200;
          if (BYTE2(v178) == 1)
            goto LABEL_92;
        }
      }
      else
      {
        if ((_DWORD)v90)
        {
          if ((v90 & ~*(_DWORD *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x20)) == 0)
          {
            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE)), v72, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            if (v102)
            {
              v186 = (JSC::ArrayBuffer *)v88;
              v103 = JSC::PropertyTable::get(v102, (uint64_t *)&v186);
              a6 = v103;
              if ((_DWORD)v103 != -1)
              {
                a5 = HIDWORD(v103);
                if ((int)v103 <= 63)
                {
                  v135 = v96 + 16;
                  v136 = v103 << 32;
                }
                else
                {
                  v135 = *(_QWORD *)(v96 + 8) - 8;
                  v136 = 0x3F00000000 - (v103 << 32);
                }
                a4 = *(_QWORD *)(v135 + (v136 >> 29));
                if ((a4 & 0xFFFE000000000002) == 0)
                {
                  v137 = *(unsigned __int8 *)(a4 + 5);
                  if (v137 != 5)
                  {
                    if (v137 != 6)
                      goto LABEL_165;
                    v131 = *(_DWORD *)(v101 + 16) & 3;
                    v141 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v134 = *(_QWORD *)(a4 + 24);
                      v133 = *(_QWORD *)(a4 + 32);
                      v172 = *(WTF::StringImpl **)(a4 + 8);
                      v173 = v141;
                      LODWORD(v174) = HIDWORD(v103);
                      v176 = (JSC::JSArrayBufferView *)v96;
LABEL_148:
                      BYTE1(v178) = 3;
                      if (v131 != 2)
                        LOBYTE(v178) = 1;
                      HIBYTE(v178) = 1;
                      v182 = v134;
                      v183 = v133;
                      goto LABEL_92;
                    }
                    v172 = *(WTF::StringImpl **)(a4 + 8);
                    v173 = v141;
                    LODWORD(v174) = HIDWORD(v103);
                    v176 = (JSC::JSArrayBufferView *)v96;
LABEL_177:
                    BYTE1(v178) = 3;
                    if (v131 != 2)
                      LOBYTE(v178) = 1;
                    goto LABEL_92;
                  }
                  v128 = (unsigned int *)v96;
LABEL_136:
                  JSC::JSObject::fillGetterPropertySlot(v128, (uint64_t)v72, (uint64_t)&v172, a4, a5, a6);
                  goto LABEL_92;
                }
LABEL_165:
                v172 = (WTF::StringImpl *)a4;
                v176 = (JSC::JSArrayBufferView *)v96;
                goto LABEL_91;
              }
            }
          }
        }
        if ((*(_BYTE *)(v96 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v96, v72, v88, (uint64_t)&v172) & 1) != 0)
        {
          goto LABEL_92;
        }
      }
LABEL_78:
      if ((*(_WORD *)(v101 + 12) & 0x800) == 0)
      {
        v104 = *(_DWORD *)v96;
LABEL_80:
        v105 = *(_QWORD *)(16 * (v104 & 0xFFFFFFFE) + 0x30);
        if (!v105)
          v105 = *(_QWORD *)(v96 + 16);
        goto LABEL_82;
      }
      v104 = *(_DWORD *)v96;
      if (BYTE2(v178) == 3)
        goto LABEL_80;
      v142 = 16 * (v104 & 0xFFFFFFFE);
      if ((*(_WORD *)(v142 + 12) & 0x800) != 0)
      {
        v105 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v142 + 76) + 0xB0))(v96, a1);
      }
      else
      {
        v105 = *(_QWORD *)(v142 + 48);
        if (!v105)
          v105 = *(_QWORD *)(v96 + 16);
      }
      if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72, a2, this, a4, a5, a6, a7, a8))
        goto LABEL_92;
LABEL_82:
      if ((v105 & 0xFFFE000000000002) == 0)
      {
        v96 = v105;
        if (*(unsigned __int8 *)(v105 + 5) > 0x16u)
          continue;
      }
      goto LABEL_92;
    }
  }
  v91 = (JSC::JSArrayBufferView *)this;
  while (1)
  {
    v92 = *(_DWORD *)v91 & 0xFFFFFFFE;
    v93 = 16 * v92;
    if ((_DWORD)v90)
    {
      if ((v90 & ~*(_DWORD *)(16 * v92 + 0x20)) == 0)
      {
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v93, v72, this, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (v94)
        {
          v186 = (JSC::ArrayBuffer *)v88;
          v95 = JSC::PropertyTable::get(v94, (uint64_t *)&v186);
          a6 = v95;
          if ((_DWORD)v95 != -1)
          {
            a5 = HIDWORD(v95);
            if ((int)v95 <= 63)
            {
              v106 = (uint64_t)v91 + 16;
              v107 = v95 << 32;
            }
            else
            {
              v106 = *((_QWORD *)v91 + 1) - 8;
              v107 = 0x3F00000000 - (v95 << 32);
            }
            a4 = *(_QWORD *)(v106 + (v107 >> 29));
            if ((a4 & 0xFFFE000000000002) == 0)
            {
              v108 = *(unsigned __int8 *)(a4 + 5);
              if (v108 == 5)
              {
                v128 = (unsigned int *)v91;
                goto LABEL_136;
              }
              if (v108 == 6)
              {
                v131 = *(_DWORD *)(v93 + 16) & 3;
                v132 = *(_QWORD *)(a4 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v134 = *(_QWORD *)(a4 + 24);
                  v133 = *(_QWORD *)(a4 + 32);
                  v172 = *(WTF::StringImpl **)(a4 + 8);
                  v173 = v132;
                  LODWORD(v174) = HIDWORD(v95);
                  v176 = v91;
                  goto LABEL_148;
                }
                v172 = *(WTF::StringImpl **)(a4 + 8);
                v173 = v132;
                LODWORD(v174) = HIDWORD(v95);
                v176 = v91;
                goto LABEL_177;
              }
            }
            v172 = (WTF::StringImpl *)a4;
            v176 = v91;
LABEL_91:
            v174 = __PAIR64__(a6, a5);
            LOWORD(v178) = 257;
            goto LABEL_92;
          }
        }
      }
    }
    if ((*(_BYTE *)v89 & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v91, v72, v88, (uint64_t)&v172) & 1) != 0)
    {
      goto LABEL_92;
    }
    v96 = *(_QWORD *)(v93 + 48);
    if (!v96)
      v96 = *((_QWORD *)v91 + 2);
    if ((v96 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v96 + 5) < 0x17u)
      break;
    v89 = v96 + 6;
    v91 = (JSC::JSArrayBufferView *)v96;
    if ((*(_BYTE *)(v96 + 6) & 8) != 0)
      goto LABEL_66;
  }
  if (!v88)
    goto LABEL_92;
  v119 = *(_DWORD *)(v88 + 16);
  if ((v119 & 0x20) != 0)
    goto LABEL_92;
  v120 = *(_BYTE **)(v88 + 8);
  v121 = *(unsigned int *)(v88 + 4);
  if ((v119 & 4) != 0)
  {
    if (!(_DWORD)v121)
      goto LABEL_92;
    v122 = *v120 - 48;
    if (v122 > 9 || v121 >= 2 && *v120 == 48)
      goto LABEL_92;
    v150 = v120 + 1;
    v151 = v121 - 1;
    while (v151)
    {
      if (v122 <= 0x19999999)
      {
        v152 = *v150 - 48;
        if (v152 <= 9)
        {
          v126 = __CFADD__(v152, 10 * v122);
          v122 = v152 + 10 * v122;
          ++v150;
          --v151;
          if (!v126)
            continue;
        }
      }
      goto LABEL_92;
    }
  }
  else
  {
    if (!(_DWORD)v121)
      goto LABEL_92;
    v122 = *(unsigned __int16 *)v120 - 48;
    if (v122 > 9 || *(_WORD *)v120 == 48 && v121 > 1)
      goto LABEL_92;
    v123 = (unsigned __int16 *)(v120 + 2);
    v124 = v121 - 1;
    while (v124)
    {
      if (v122 <= 0x19999999)
      {
        v125 = *v123 - 48;
        if (v125 <= 9)
        {
          v126 = __CFADD__(v125, 10 * v122);
          v122 = v125 + 10 * v122;
          ++v123;
          --v124;
          if (!v126)
            continue;
        }
      }
      goto LABEL_92;
    }
  }
  if (v122 != -1)
  {
    v153 = a1[7];
    v154 = v122;
    v155 = this;
    while (1)
    {
      v156 = 16 * (*(_DWORD *)v155 & 0xFFFFFFFE);
      v157 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v156 + 0x4C)
                                                                                                  + 0x70))(v155, a1, v154, &v172);
      if (*((_DWORD *)v153 + 20))
      {
        if (((JSC::VM::hasExceptionsAfterHandlingTraps(v153, a2, this, a4, a5, a6, a7, a8) | v157) & 1) != 0)
          break;
      }
      else if ((v157 & 1) != 0)
      {
        break;
      }
      if (BYTE2(v178) == 3)
      {
        if (v179)
          break;
        v158 = *(unsigned __int8 *)(v155 + 5);
        if (v158 != 61)
        {
LABEL_245:
          if ((v158 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v155, a2, this, a4, a5, a6, a7, a8) <= v154)
          {
            break;
          }
        }
      }
      else
      {
        v158 = *(unsigned __int8 *)(v155 + 5);
        if (v158 != 61)
          goto LABEL_245;
        if (BYTE2(v178) == 1)
          break;
      }
      if ((*(_WORD *)(v156 + 12) & 0x800) == 0 || BYTE2(v178) == 3)
      {
        v159 = *(_QWORD *)(16 * (*(_DWORD *)v155 & 0xFFFFFFFE) + 0x30);
        if (!v159)
          v159 = *(_QWORD *)(v155 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v155 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v159 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                * *(unsigned int *)(16
                                                                                  * (*(_DWORD *)v155 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0xB0))(v155, a1);
        }
        else
        {
          v159 = *(_QWORD *)(16 * (*(_DWORD *)v155 & 0xFFFFFFFE) + 0x30);
          if (!v159)
            v159 = *(_QWORD *)(v155 + 16);
        }
        if (*((_DWORD *)v153 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v153, a2, this, a4, a5, a6, a7, a8))
          break;
      }
      if ((v159 & 0xFFFE000000000002) == 0)
      {
        v155 = v159;
        if (*(unsigned __int8 *)(v159 + 5) > 0x16u)
          continue;
      }
      break;
    }
  }
LABEL_92:
  v25 = v184;
  if (*((_DWORD *)v184 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v184, a2, this, a4, a5, a6, a7, a8))
    goto LABEL_158;
  if (v181)
  {
    v109 = *((_DWORD *)v180 + 1);
    if (!v109)
    {
      __break(0xC471u);
      JUMPOUT(0x19849621CLL);
    }
    *((_DWORD *)v180 + 1) = v109 - 1;
    v180 = 0;
    v181 = 0;
  }
  v112 = JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v171 + 2712), a4, a5, a6, a7, a8);
  if (*((_DWORD *)v25 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v25, v110, v111, a4, a5, a6, a7, a8))
      goto LABEL_158;
  }
  if ((v112 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v114 = BYTE1(v178);
  }
  else if (v112 != JSC::JSGlobalObject::arrayProtoValuesFunction(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                            + 0x28))
         || (v114 = BYTE1(v178), (BYTE1(v178) & 0xFE) == 2)
         || v179
         || (*(_BYTE *)(this + 4) & 0xEu) > 9
         || ((v129 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2216), (v129 & 1) != 0)
           ? (v130 = (v129 >> 1) & 3)
           : (v130 = *(unsigned __int8 *)(v129 + 4)),
             v130 == 2))
  {
    v25 = JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>((JSC::JSGlobalObject *)a1, a2, (JSC::JSObject *)this, v112, a5, a6, a7, a8);
    v73 = 0;
    v118 = 0;
    goto LABEL_128;
  }
  switch(v114)
  {
    case 0:
      v73 = 0;
      goto LABEL_127;
    case 1:
      v115 = v172;
      break;
    case 2:
      v115 = (JSC::ArrayBuffer *)JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v172, (JSC::JSGlobalObject *)a1, v111, a4, a5, a6, a7, a8);
      break;
    default:
      v115 = (JSC::ArrayBuffer *)JSC::PropertySlot::customGetter((uint64_t)&v172, a1[7], *(WTF::StringImpl **)(*(_QWORD *)v171 + 1768));
      break;
  }
  v186 = v115;
  if (!*((_DWORD *)v25 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v25, v110, v111, a4, a5, a6, a7, a8))
  {
    v73 = JSC::JSValue::toLength(&v186, (JSC::JSGlobalObject *)a1, v111, a4, a5, a6, a7, a8, v113);
    if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25, v116, v117, a4, a5, a6, a7, a8))
      goto LABEL_159;
LABEL_127:
    v118 = 1;
    goto LABEL_128;
  }
LABEL_158:
  v73 = 0;
LABEL_159:
  v118 = 0;
  v25 = 0;
LABEL_128:
  if (v181)
  {
    v127 = *((_DWORD *)v180 + 1);
    if (!v127)
    {
      __break(0xC471u);
      JUMPOUT(0x19849623CLL);
    }
    *((_DWORD *)v180 + 1) = v127 - 1;
  }
  if (v118)
    goto LABEL_38;
  return (unint64_t)v25;
}

unint64_t operationNewBigInt64ArrayWithSize(unint64_t a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  unint64_t SlowCase;
  JSC::JSCell *v12;
  uint64_t v13;
  unint64_t v14;
  JSC::Heap **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  JSC::Exception *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(JSC::VM **);
  JSC::VM **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  JSC::VM *v49;
  JSC::JSGlobalObject *v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t vars0;

  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v9 + 40) = vars0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (!a4)
      return JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::create((JSC::JSGlobalObject *)a1, (uint64_t)a2, a3, 0, a5, a6, a7, a8);
    v49 = a2;
    v50 = (JSC::JSGlobalObject *)a4;
    v51 = (_QWORD *)a3;
    v52 = 0;
    v53 = 16;
    v54 = 0;
    if (a3 >= 0x3E9)
    {
      __break(0xC471u);
      JUMPOUT(0x198496A7CLL);
    }
    if (!a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198496A9CLL);
    }
    v10 = *(_QWORD **)(v9 + 40344);
    if (!v10)
      v10 = (_QWORD *)JSC::GCClient::Heap::bigInt64ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
    SlowCase = v10[3];
    if (SlowCase >= v10[4])
    {
      SlowCase = v10[5];
      if ((SlowCase & 1) != 0)
      {
        v44 = (uint64_t)v10;
        JSC::sanitizeStackForVM((JSC *)v9, a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v44, v9 + 192, 48, 0, 0, v45, v46, v47);
        goto LABEL_9;
      }
      v41 = *(_QWORD *)(SlowCase + 8) ^ v10[6];
      v10[4] = SlowCase + HIDWORD(v41);
      v10[5] = SlowCase + (int)v41;
    }
    v10[3] = SlowCase + 48;
LABEL_9:
    *(_DWORD *)SlowCase = 0;
    v12 = JSC::JSArrayBufferView::JSArrayBufferView((JSC::JSCell *)SlowCase, v9, (uint64_t)&v49);
    JSC::JSArrayBufferView::finishCreation((unint64_t)v12, (JSC::VM *)v9);
    return SlowCase;
  }
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1C00000002;
  *(_QWORD *)(v13 + 8) = "Requested length is negative";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v14 = *(_QWORD *)(a1 + 128);
  v15 = *(JSC::Heap ***)(a1 + 56);
  if ((v14 & 1) != 0)
  {
    v42 = *(uint64_t (**)(JSC::VM **))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    v43 = (JSC::VM **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v43 = (JSC::VM **)(a1 - 16);
    v49 = *v43;
    v50 = (JSC::JSGlobalObject *)a1;
    v51 = (_QWORD *)(a1 + 128);
    v14 = v42(&v49);
  }
  v16 = JSC::ErrorInstance::create(v15, v14, &v48, 0, 0, 0, 2, 1);
  v23 = (JSC::Exception *)v16;
  if ((v16 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C)))
  {
    v23 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v16, 0, v17, v18, v19, v20, v21);
  }
  JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)a1, v23, v22, v17, v18, v19, v20, v21);
  v31 = v48;
  v48 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  return 0;
}

unint64_t operationNewBigInt64ArrayWithOneArgument(unint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD var38[8];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var38[7];
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 38 && *(_BYTE *)(*(_QWORD *)(a2 + 16) + 64))
  {
    v11 = *(_QWORD *)(a1 + 1896);
    if ((v11 & 1) == 0)
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(a1, v11, a2, 0, 0, 0, a8, a9, a3);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v17 = (uint64_t *)(a1 - 16);
    v15 = *v17;
    v16 = a1 + 1896;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a1 + 1880);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v14 = (uint64_t *)(a1 - 16);
    v15 = *v14;
    v16 = a1 + 1880;
LABEL_9:
    var38[0] = v15;
    var38[1] = a1;
    var38[2] = v16;
    v11 = v13(var38);
  }
  return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(a1, v11, a2, 0, 0, 0, a8, a9, a3);
}

unint64_t JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  unsigned int v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::VM *v23;
  unint64_t v24;
  unint64_t Uninitialized;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  const char *v74;
  unint64_t v75;
  JSC::Heap **v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  JSC::Exception *v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t (*v96)(JSC::VM **);
  JSC::VM **v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  int v117;
  unsigned int v118;
  int v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  _BYTE *v125;
  uint64_t v126;
  unsigned int v127;
  unsigned __int16 *v128;
  uint64_t v129;
  unsigned int v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int8x16_t v139;
  int v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int8x16_t **v151;
  WTF::StringImpl *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  BOOL v158;
  int v159;
  int v160;
  _BYTE *v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  unint64_t v176;
  int v177;
  unsigned int v178;
  int v179;
  unint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  unsigned __int8 *v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  unint64_t v197;
  size_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unsigned __int8 *v202;
  JSC::VM **v203;
  uint64_t v204;
  int v205;
  int v206;
  JSC::VM **p_dst;
  uint64_t v208;
  int v209;
  int v210;
  int v211;
  char v212;
  int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int16 *v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t (*v220)(JSC::VM **);
  JSC::VM **v221;
  double v222;
  double v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  unsigned __int8 *v228;
  uint64_t v229;
  unsigned int v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  char v236;
  int v237;
  uint64_t v238;
  int v239;
  char v240;
  int v241;
  unint64_t v242;
  unint64_t v243;
  char v244;
  unsigned __int8 *v245;
  uint64_t v246;
  unsigned int v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  char v253;
  int v254;
  uint64_t v255;
  int v256;
  char v257;
  unint64_t v258;
  unint64_t v259;
  char v260;
  int v261;
  unint64_t v262;
  char v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t (*v267)(_QWORD);
  uint64_t v268;
  unint64_t v269;
  _DWORD *v270;
  _DWORD *v271;
  uint64_t v272;
  int v273;
  char v274;
  uint64_t v275;
  char v276;
  int8x16_t **v277;
  uint64_t v278;
  JSC::VM *v279;
  JSC::JSObject *v280;
  JSC::VM *__dst;
  unint64_t v282;
  unint64_t v283;
  char __s[8];
  uint64_t v285;

  v285 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 56);
  v279 = (JSC::VM *)v11;
  v280 = (JSC::JSObject *)a3;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_18;
  v13 = *(unsigned __int8 *)(a3 + 5);
  if (v13 == 38)
  {
    v14 = *(uint64_t (**)(_QWORD))(a3 + 16);
    if (v14)
      *(_DWORD *)v14 += 2;
    v267 = v14;
    v15 = *((_QWORD *)v14 + 2);
    if (!v15
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError(a1, &v279, (uint64_t)"Buffer is already detached", 27);
LABEL_10:
      v23 = 0;
      v267 = 0;
LABEL_62:
      v158 = *(_DWORD *)v14 == 2;
      *(_DWORD *)v14 -= 2;
      if (v158)
      {
        JSC::ArrayBuffer::~ArrayBuffer((JSC::ArrayBuffer *)v14, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      return (unint64_t)v23;
    }
    a6 = a6;
    if ((_BYTE)a6)
    {
      v62 = a5 & 0xFFFFFFFFFFFFFF00;
      goto LABEL_61;
    }
    if (*((_BYTE *)v14 + 64))
    {
      v94 = *((_QWORD *)v14 + 4);
      if (v94)
        v95 = *(_QWORD *)(v94 + 32);
      else
        v95 = *((_QWORD *)v14 + 6);
      if (v95 >= a4)
      {
        v62 = 0;
        LOBYTE(a5) = 0;
        a6 = 0;
LABEL_61:
        v23 = (JSC::VM *)JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::create(a1, a2, (uint64_t)&v267, a4, a5 | v62, a6, a9, a7, a8);
        v14 = v267;
        v267 = 0;
        if (!v14)
          return (unint64_t)v23;
        goto LABEL_62;
      }
      v73 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v73 = 0x3000000002;
      v74 = "byteOffset exceeds source ArrayBuffer byteLength";
    }
    else
    {
      v63 = *((_QWORD *)v14 + 6) - a4;
      if ((v63 & 7) == 0)
      {
        a5 = v63 >> 3;
        v62 = (v63 >> 3) & 0x1FFFFFFFFFFFFF00;
        a6 = 1;
        goto LABEL_61;
      }
      v73 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v73 = 0x4D00000002;
      v74 = "ArrayBuffer length minus the byteOffset is not a multiple of the element size";
    }
    *(_QWORD *)(v73 + 8) = v74;
    *(_DWORD *)(v73 + 16) = 4;
    *(_QWORD *)__s = v73;
    v75 = *(_QWORD *)(a1 + 128);
    v76 = *(JSC::Heap ***)(a1 + 56);
    if ((v75 & 1) != 0)
    {
      v96 = *(uint64_t (**)(JSC::VM **))(v75 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v97 = (JSC::VM **)(a1 - 16);
      else
        v97 = (JSC::VM **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      __dst = *v97;
      v282 = a1;
      v283 = a1 + 128;
      v75 = v96(&__dst);
    }
    v77 = JSC::ErrorInstance::create(v76, v75, (WTF::StringImpl **)__s, 0, 0, 0, 2, 1);
    v84 = (JSC::Exception *)v77;
    if ((v77 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v77 & 0xFFFFFFFE) + 0x4C)))
    {
      v84 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v77, 0, v78, v79, v80, v81, v82);
    }
    JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v84, v83, v78, v79, v80, v81, v82);
    v85 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
      {
        WTF::StringImpl::~StringImpl(v85, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
      }
      else
      {
        *(_DWORD *)v85 -= 2;
      }
    }
    goto LABEL_10;
  }
  if (v13 < 0x17)
  {
LABEL_18:
    v43 = JSC::JSValue::toTypedArrayIndex(&v280, (JSC::JSGlobalObject *)a1, (uint64_t)"length", 7, a5, a6, a7, a8, (int8x16_t)a9);
    if (!*(_DWORD *)(v11 + 80))
      return JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::create((JSC::JSGlobalObject *)a1, a2, v43, v38, v39, v40, v41, v42);
    v59 = *(_DWORD *)(v11 + 80);
    if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v37, v38, v39, v40, v41, v42);
    if (!*(_QWORD *)(v11 + 16))
      return JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::create((JSC::JSGlobalObject *)a1, a2, v43, v38, v39, v40, v41, v42);
    return 0;
  }
  if (v13 - 39 <= 0xA)
  {
    if ((*(_BYTE *)(a3 + 40) & 7u) > 2)
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v282) = 0;
      v60 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a3, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
      if (v61)
        v24 = v60;
      else
        v24 = 0;
    }
    else
    {
      v24 = *(_QWORD *)(a3 + 24);
    }
    Uninitialized = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v24, a4, a5, a6, a7, a8);
    if (!Uninitialized)
      return 0;
    v32 = Uninitialized;
    LOBYTE(__dst) = 0;
    LOBYTE(v282) = 0;
    if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a3, (unint64_t *)&__dst, v26, v27, v28, v29, v30, v31))
    {
      v34 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
      v35 = a1;
      v36 = 72;
LABEL_44:
      JSC::throwTypeError(v35, &v279, (uint64_t)v34, v36);
      return 0;
    }
    if ((*(_BYTE *)(a3 + 5) & 0xFE) != 0x30)
    {
      v34 = "Content types of source and new typed array are different";
      v35 = a1;
      v36 = 58;
      goto LABEL_44;
    }
    v58 = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromTypedArray(v32, a1, 0, a3, 0, v24, 1, v33);
LABEL_39:
    if (v58)
      return v32;
    else
      return 0;
  }
  v44 = v11;
  if (a3)
  {
    v44 = v11;
    if (v13 == 36)
    {
      v45 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
      v46 = *(_QWORD *)(v45 + 2216);
      v47 = (v46 & 1) != 0 ? (v46 >> 1) & 3 : *(unsigned __int8 *)(v46 + 4);
      v44 = v11;
      if (v47 != 2)
      {
        v44 = v11;
        if (*(_BYTE *)(*(_QWORD *)(v45 + 2048) + 4) != 2)
        {
          v48 = *(_QWORD *)(v45 + 2304);
          v49 = (v48 & 1) != 0 ? (v48 >> 1) & 3 : *(unsigned __int8 *)(v48 + 4);
          v44 = v11;
          if (v49 != 2)
          {
            v50 = *(unsigned __int8 *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 8);
            v51 = (v50 >> 1) & 7;
            if ((v50 & 0x10) != 0)
              v51 = ((v50 & 0xE) + 10) >> 1;
            v52 = *(_DWORD *)(v45 + 4 * v51 + 852);
            if (v52)
              v53 = 16 * (v52 & 0xFFFFFFFE);
            else
              v53 = 0;
            if (v53 == 16 * (*(_DWORD *)a3 & 0xFFFFFFFE))
              goto LABEL_35;
            v44 = v11;
            if ((v50 & 0x20) == 0)
            {
              v98 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x30);
              if (!v98)
                v98 = *(_QWORD *)(a3 + 16);
              v44 = v11;
              if (v98 == *(_QWORD *)(v45 + 672))
              {
                if (JSC::JSObject::getDirectOffset((_DWORD *)a3, *(JSC::VM **)(v45 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 56) + 41952) + 2712), (const JSC::PropertyTable *)a4, a5, a6, a7, a8) == -1)
                {
LABEL_35:
                  if ((*(_BYTE *)(a3 + 4) & 0xE) != 0)
                    v54 = *(unsigned int *)(*(_QWORD *)(a3 + 8) - 8);
                  else
                    v54 = 0;
                  goto LABEL_37;
                }
                v44 = *(_QWORD *)(a1 + 56);
              }
            }
          }
        }
      }
    }
  }
  v269 = 0xFFFFFFFF00000000;
  v271 = 0;
  v272 = 0;
  v270 = (_DWORD *)a3;
  v273 = 196608;
  v274 = 0;
  v277 = 0;
  v278 = 0;
  v275 = v11;
  ++*(_DWORD *)(v11 + 4);
  v276 = 1;
  v266 = v11 + 41952;
  v99 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768);
  v100 = (_BYTE *)(a3 + 6);
  v101 = v99 >> 4;
  if ((*(_BYTE *)(a3 + 6) & 8) == 0)
  {
    v102 = a3;
    while (1)
    {
      v103 = *(_DWORD *)v102 & 0xFFFFFFFE;
      v104 = 16 * v103;
      if (!(_DWORD)v101 || (v101 & ~*(_DWORD *)(16 * v103 + 0x20)) != 0)
        goto LABEL_118;
      v105 = *(_QWORD *)(16 * v103 + 0x58);
      if (!v105)
      {
        v106 = *(_QWORD *)(16 * v103 + 0x40);
        if (!v106 || *(_BYTE *)(v106 + 5) != 1 && *(_DWORD *)(v106 + 80) < 2u)
          goto LABEL_118;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v104, (JSC::VM *)v44, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v105)
          goto LABEL_118;
      }
      if (!*(_DWORD *)(v105 + 24))
        goto LABEL_118;
      v107 = *(_QWORD *)(v105 + 16);
      v108 = v107 & 0xFFFFFFFFFFFFFFFELL;
      v109 = *(unsigned int *)(v105 + 8);
      v110 = *(_DWORD *)(v99 + 16);
      if ((v107 & 1) != 0)
      {
        if ((v110 & 0x20) != 0)
          v110 = *(_DWORD *)(v99 + 32);
        v111 = *(_DWORD *)(v105 + 12);
        v112 = (v110 >> 8) & *(_QWORD *)&v111;
        v113 = *(unsigned __int8 *)(v108 + v112);
        if (!*(_BYTE *)(v108 + v112))
          goto LABEL_118;
        v114 = v108 + v109;
        v115 = 1;
        while (1)
        {
          v116 = *(_QWORD *)(v114 + 8 * (v113 - 1));
          if (v99 == (v116 & 0xFFFFFFFFFFFFLL))
            break;
          v112 = ((_DWORD)v112 + v115) & v111;
          v113 = *(unsigned __int8 *)(v108 + v112);
          ++v115;
          if (!*(_BYTE *)(v108 + v112))
            goto LABEL_118;
        }
        a6 = (v116 >> 16) & 0xFF00000000 | HIBYTE(v116);
      }
      else
      {
        if ((v110 & 0x20) != 0)
          v110 = *(_DWORD *)(v99 + 32);
        v117 = *(_DWORD *)(v105 + 12);
        v118 = v117 & (v110 >> 8);
        v119 = *(_DWORD *)(v108 + 4 * v118);
        if (!v119)
          goto LABEL_118;
        v120 = v108 + 4 * v109;
        v121 = 1;
        while (1)
        {
          v122 = (v119 - 1);
          if (v99 == *(_QWORD *)(v120 + 16 * v122))
            break;
          v118 = (v118 + v121) & v117;
          v119 = *(_DWORD *)(v108 + 4 * v118);
          ++v121;
          if (!v119)
            goto LABEL_118;
        }
        a6 = *(unsigned int *)(v120 + 16 * v122 + 8) | ((unint64_t)*(unsigned __int8 *)(v120 + 16 * v122 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v132 = v102 + 16;
          v133 = a6 << 32;
        }
        else
        {
          v132 = *(_QWORD *)(v102 + 8) - 8;
          v133 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v132 + (v133 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v134 = *(unsigned __int8 *)(a4 + 5);
          if (v134 != 5)
          {
            if (v134 != 6)
              goto LABEL_146;
            v148 = *(_DWORD *)(v104 + 16) & 3;
            v149 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v151 = *(int8x16_t ***)(a4 + 24);
              v150 = *(_QWORD *)(a4 + 32);
              v267 = *(uint64_t (**)(_QWORD))(a4 + 8);
              v268 = v149;
              LODWORD(v269) = HIDWORD(a6);
              v271 = (_DWORD *)v102;
              goto LABEL_175;
            }
            v267 = *(uint64_t (**)(_QWORD))(a4 + 8);
            v268 = v149;
            LODWORD(v269) = HIDWORD(a6);
            v271 = (_DWORD *)v102;
LABEL_355:
            BYTE1(v273) = 3;
            if (v148 != 2)
              LOBYTE(v273) = 1;
            goto LABEL_150;
          }
          v135 = (unsigned int *)v102;
LABEL_149:
          JSC::JSObject::fillGetterPropertySlot(v135, v44, (uint64_t)&v267, a4, a5, a6);
          goto LABEL_150;
        }
LABEL_146:
        v267 = (uint64_t (*)(_QWORD))a4;
        v271 = (_DWORD *)v102;
LABEL_147:
        v269 = __PAIR64__(a6, a5);
        LOWORD(v273) = 257;
        goto LABEL_150;
      }
LABEL_118:
      if ((*v100 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v102, (JSC::VM *)v44, v99, (uint64_t)&v267) & 1) != 0)
      {
        goto LABEL_150;
      }
      v123 = *(_QWORD *)(v104 + 48);
      if (!v123)
        v123 = *(_QWORD *)(v102 + 16);
      if ((v123 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v123 + 5) < 0x17u)
      {
        if (!v99)
          goto LABEL_150;
        v124 = *(_DWORD *)(v99 + 16);
        if ((v124 & 0x20) != 0)
          goto LABEL_150;
        v125 = *(_BYTE **)(v99 + 8);
        v126 = *(unsigned int *)(v99 + 4);
        if ((v124 & 4) != 0)
        {
          if (!(_DWORD)v126)
            goto LABEL_150;
          v127 = *v125 - 48;
          if (v127 > 9 || v126 >= 2 && *v125 == 48)
            goto LABEL_150;
          v228 = v125 + 1;
          v229 = v126 - 1;
          while (v229)
          {
            if (v127 <= 0x19999999)
            {
              v230 = *v228 - 48;
              if (v230 <= 9)
              {
                v131 = __CFADD__(v230, 10 * v127);
                v127 = v230 + 10 * v127;
                ++v228;
                --v229;
                if (!v131)
                  continue;
              }
            }
            goto LABEL_150;
          }
        }
        else
        {
          if (!(_DWORD)v126)
            goto LABEL_150;
          v127 = *(unsigned __int16 *)v125 - 48;
          if (v127 > 9 || *(_WORD *)v125 == 48 && v126 > 1)
            goto LABEL_150;
          v128 = (unsigned __int16 *)(v125 + 2);
          v129 = v126 - 1;
          while (v129)
          {
            if (v127 <= 0x19999999)
            {
              v130 = *v128 - 48;
              if (v130 <= 9)
              {
                v131 = __CFADD__(v130, 10 * v127);
                v127 = v130 + 10 * v127;
                ++v128;
                --v129;
                if (!v131)
                  continue;
              }
            }
            goto LABEL_150;
          }
        }
        if (v127 == -1)
          goto LABEL_150;
        v231 = v127;
        v232 = *(_QWORD *)(a1 + 56);
        v233 = a3;
        while (1)
        {
          v234 = 16 * (*(_DWORD *)v233 & 0xFFFFFFFE);
          v235 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(_QWORD)))(16 * *(unsigned int *)(v234 + 0x4C) + 0x70))(v233, a1, v231, &v267);
          v236 = v235;
          if (*(_DWORD *)(v232 + 80))
          {
            v239 = *(_DWORD *)(v232 + 80);
            if ((v239 & 0x27) != 0 && (v239 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v232 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v232 + 16))
              v240 = 1;
            else
              v240 = v236;
            if ((v240 & 1) != 0)
              goto LABEL_150;
          }
          else if ((v235 & 1) != 0)
          {
            goto LABEL_150;
          }
          if (BYTE2(v273) == 3)
          {
            if (v274)
              goto LABEL_150;
            v237 = *(unsigned __int8 *)(v233 + 5);
            if (v237 == 61)
              goto LABEL_414;
          }
          else
          {
            v237 = *(unsigned __int8 *)(v233 + 5);
            if (v237 == 61)
            {
              if (BYTE2(v273) == 1)
                goto LABEL_150;
              goto LABEL_414;
            }
          }
          if ((v237 - 39) <= 0xA)
          {
            if ((*(_BYTE *)(v233 + 40) & 7u) > 2)
            {
              LOBYTE(__dst) = 0;
              LOBYTE(v282) = 0;
              v243 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v233, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
              v242 = v244 ? v243 : 0;
            }
            else
            {
              v242 = *(_QWORD *)(v233 + 24);
            }
            if (v242 <= v231)
              goto LABEL_150;
          }
LABEL_414:
          if ((*(_WORD *)(v234 + 12) & 0x800) == 0 || BYTE2(v273) == 3)
          {
            v238 = *(_QWORD *)(16 * (*(_DWORD *)v233 & 0xFFFFFFFE) + 0x30);
            if (!v238)
              v238 = *(_QWORD *)(v233 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v233 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v238 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v233 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v233, a1);
            }
            else
            {
              v238 = *(_QWORD *)(16 * (*(_DWORD *)v233 & 0xFFFFFFFE) + 0x30);
              if (!v238)
                v238 = *(_QWORD *)(v233 + 16);
            }
            if (*(_DWORD *)(v232 + 80))
            {
              v241 = *(_DWORD *)(v232 + 80);
              if ((v241 & 0x27) != 0 && (v241 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v232 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v232 + 16))
                goto LABEL_150;
            }
          }
          if ((v238 & 0xFFFE000000000002) == 0)
          {
            v233 = v238;
            if (*(unsigned __int8 *)(v238 + 5) > 0x16u)
              continue;
          }
          goto LABEL_150;
        }
      }
      v100 = (_BYTE *)(v123 + 6);
      v102 = v123;
      if ((*(_BYTE *)(v123 + 6) & 8) != 0)
        goto LABEL_204;
    }
  }
  v123 = a3;
LABEL_204:
  if (v99)
  {
    v160 = *(_DWORD *)(v99 + 16);
    if ((v160 & 0x20) == 0)
    {
      v161 = *(_BYTE **)(v99 + 8);
      v162 = *(unsigned int *)(v99 + 4);
      if ((v160 & 4) != 0)
      {
        if ((_DWORD)v162)
        {
          v163 = *v161 - 48;
          if (v163 <= 9 && (v162 < 2 || *v161 != 48))
          {
            v245 = v161 + 1;
            v246 = v162 - 1;
            while (v246)
            {
              if (v163 <= 0x19999999)
              {
                v247 = *v245 - 48;
                if (v247 <= 9)
                {
                  v131 = __CFADD__(v247, 10 * v163);
                  v163 = v247 + 10 * v163;
                  ++v245;
                  --v246;
                  if (!v131)
                    continue;
                }
              }
              goto LABEL_209;
            }
LABEL_462:
            if (v163 != -1)
            {
              v248 = v163;
              v249 = *(_QWORD *)(a1 + 56);
              v250 = a3;
              while (1)
              {
                v251 = 16 * (*(_DWORD *)v250 & 0xFFFFFFFE);
                v252 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(_QWORD)))(16 * *(unsigned int *)(v251 + 0x4C) + 0x70))(v250, a1, v248, &v267);
                v253 = v252;
                if (*(_DWORD *)(v249 + 80))
                {
                  v256 = *(_DWORD *)(v249 + 80);
                  if ((v256 & 0x27) != 0 && (v256 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v249 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v249 + 16))
                    v257 = 1;
                  else
                    v257 = v253;
                  if ((v257 & 1) != 0)
                    goto LABEL_150;
                }
                else if ((v252 & 1) != 0)
                {
                  goto LABEL_150;
                }
                if (BYTE2(v273) == 3)
                {
                  if (v274)
                    goto LABEL_150;
                  v254 = *(unsigned __int8 *)(v250 + 5);
                  if (v254 == 61)
                    goto LABEL_469;
                }
                else
                {
                  v254 = *(unsigned __int8 *)(v250 + 5);
                  if (v254 == 61)
                  {
                    if (BYTE2(v273) == 1)
                      goto LABEL_150;
                    goto LABEL_469;
                  }
                }
                if ((v254 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v250 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    LOBYTE(v282) = 0;
                    v259 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v250, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                    v258 = v260 ? v259 : 0;
                  }
                  else
                  {
                    v258 = *(_QWORD *)(v250 + 24);
                  }
                  if (v258 <= v248)
                    goto LABEL_150;
                }
LABEL_469:
                if ((*(_WORD *)(v251 + 12) & 0x800) == 0 || BYTE2(v273) == 3)
                {
                  v255 = *(_QWORD *)(16 * (*(_DWORD *)v250 & 0xFFFFFFFE) + 0x30);
                  if (!v255)
                    v255 = *(_QWORD *)(v250 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v250 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v255 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v250 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v250, a1);
                  }
                  else
                  {
                    v255 = *(_QWORD *)(16 * (*(_DWORD *)v250 & 0xFFFFFFFE) + 0x30);
                    if (!v255)
                      v255 = *(_QWORD *)(v250 + 16);
                  }
                  if (*(_DWORD *)(v249 + 80))
                  {
                    v261 = *(_DWORD *)(v249 + 80);
                    if ((v261 & 0x27) != 0 && (v261 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v249 + 64), 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v249 + 16))
                      goto LABEL_150;
                  }
                }
                if ((v255 & 0xFFFE000000000002) == 0)
                {
                  v250 = v255;
                  if (*(unsigned __int8 *)(v255 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_150;
              }
            }
          }
        }
      }
      else if ((_DWORD)v162)
      {
        v163 = *(unsigned __int16 *)v161 - 48;
        if (v163 <= 9 && (*(_WORD *)v161 != 48 || v162 <= 1))
        {
          v217 = (unsigned __int16 *)(v161 + 2);
          v218 = v162 - 1;
          while (v218)
          {
            if (v163 <= 0x19999999)
            {
              v219 = *v217 - 48;
              if (v219 <= 9)
              {
                v131 = __CFADD__(v219, 10 * v163);
                v163 = v219 + 10 * v163;
                ++v217;
                --v218;
                if (!v131)
                  continue;
              }
            }
            goto LABEL_209;
          }
          goto LABEL_462;
        }
      }
    }
  }
LABEL_209:
  v44 = *(_QWORD *)(a1 + 56);
  while (1)
  {
    v164 = 16 * (*(_DWORD *)v123 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v123 + 6) & 8) == 0)
      break;
    v263 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(_QWORD)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v123 & 0xFFFFFFFE) + 0x4C) + 0x68))(v123, a1, v99, &v267);
    if (*(_DWORD *)(v44 + 80))
    {
      v211 = *(_DWORD *)(v44 + 80);
      if ((v211 & 0x27) != 0 && (v211 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v44 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v212 = v263;
      if (*(_QWORD *)(v44 + 16))
        v212 = 1;
      if ((v212 & 1) != 0)
        goto LABEL_150;
    }
    else if ((v263 & 1) != 0)
    {
      goto LABEL_150;
    }
    if (BYTE2(v273) == 3)
    {
      if (v274)
        goto LABEL_150;
      v187 = *(unsigned __int8 *)(v123 + 5);
      if (v187 == 61)
        goto LABEL_239;
    }
    else
    {
      v187 = *(unsigned __int8 *)(v123 + 5);
      if (v187 == 61)
      {
        if (BYTE2(v273) == 1)
          goto LABEL_150;
        goto LABEL_239;
      }
    }
    if (!v99)
      goto LABEL_239;
    if ((v187 - 50) < 0xFFFFFFF5)
      goto LABEL_239;
    v188 = *(_DWORD *)(v99 + 16);
    if ((v188 & 0x20) != 0)
      goto LABEL_239;
    v189 = *(unsigned int *)(v99 + 4);
    if (!(_DWORD)v189)
      goto LABEL_239;
    v190 = *(unsigned __int8 **)(v99 + 8);
    if ((v188 & 4) != 0)
    {
      v191 = *v190;
      if ((_DWORD)v189 == 1)
      {
LABEL_268:
        if ((v191 - 48) < 0xA)
          goto LABEL_150;
        goto LABEL_239;
      }
      if (v191 == 45)
      {
        v191 = v190[1];
        goto LABEL_272;
      }
      if ((v191 - 48) < 0xA)
        goto LABEL_283;
      if ((_DWORD)v189 == 8)
        goto LABEL_282;
    }
    else
    {
      v191 = *(unsigned __int16 *)v190;
      if ((_DWORD)v189 == 1)
        goto LABEL_268;
      if (v191 == 45)
      {
        v191 = *((unsigned __int16 *)v190 + 1);
LABEL_272:
        if ((v191 - 48) < 0xA)
        {
          if ((_DWORD)v189 == 2)
            goto LABEL_150;
          goto LABEL_283;
        }
        if ((_DWORD)v189 != 9)
          goto LABEL_239;
LABEL_282:
        if (v191 != 73)
          goto LABEL_239;
        goto LABEL_283;
      }
      if ((v191 - 48) < 0xA || (_DWORD)v189 == 8 && v191 == 73)
        goto LABEL_283;
    }
    if ((_DWORD)v189 != 3 || v191 != 78)
      goto LABEL_239;
LABEL_283:
    v262 = v262 & 0xFFFFFF0000000000 | v189 | ((unint64_t)((v188 >> 2) & 1) << 32);
    JSC::jsToNumber(v190, v262);
    v193 = (v192 >> 52) & 0x7FF;
    if ((_DWORD)v193 == 2047)
    {
      if ((v192 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", 3);
        v194 = &__s[3];
      }
      else
      {
        if ((v192 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v200 = &__s[1];
        }
        else
        {
          v200 = __s;
        }
        *(_QWORD *)v200 = 0x7974696E69666E49;
        v194 = v200 + 8;
      }
      goto LABEL_297;
    }
    v195 = v192 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v192 & 0x8000000000000000) != 0 && v195)
    {
      __s[0] = 45;
      v196 = &__s[1];
    }
    else
    {
      if (!v195)
      {
        __s[0] = 48;
        v194 = &__s[1];
        goto LABEL_297;
      }
      v196 = __s;
    }
    v264 = (uint64_t)v196;
    v197 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v192 & 0x800FFFFFFFFFFFFFLL, v193);
    v194 = WTF::dragonbox::detail::to_shortest(v197, v198, v264, v199);
LABEL_297:
    *v194 = 0;
    v265 = strlen(__s);
    memcpy(&__dst, __s, v265);
    *((_BYTE *)&__dst + v265) = 0;
    v201 = *(unsigned int *)(v99 + 4);
    v202 = *(unsigned __int8 **)(v99 + 8);
    if ((*(_BYTE *)(v99 + 16) & 4) != 0)
    {
      if ((_DWORD)v201)
      {
        p_dst = &__dst;
        v208 = *(unsigned int *)(v99 + 4);
        do
        {
          v210 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v209 = v210;
          if (!v210 || *v202 != v209)
            goto LABEL_239;
          ++v202;
        }
        while (--v208);
      }
    }
    else if ((_DWORD)v201)
    {
      v203 = &__dst;
      v204 = *(unsigned int *)(v99 + 4);
      do
      {
        v206 = *(unsigned __int8 *)v203;
        v203 = (JSC::VM **)((char *)v203 + 1);
        v205 = v206;
        if (!v206 || *(unsigned __int16 *)v202 != v205)
          goto LABEL_239;
        v202 += 2;
      }
      while (--v204);
    }
    if (!*((_BYTE *)&__dst + v201))
      goto LABEL_150;
LABEL_239:
    if ((*(_WORD *)(v164 + 12) & 0x800) == 0)
    {
      v183 = *(_DWORD *)v123;
LABEL_241:
      v184 = *(_QWORD *)(16 * (v183 & 0xFFFFFFFE) + 0x30);
      if (!v184)
        v184 = *(_QWORD *)(v123 + 16);
      goto LABEL_243;
    }
    v183 = *(_DWORD *)v123;
    if (BYTE2(v273) == 3)
      goto LABEL_241;
    v185 = 16 * (v183 & 0xFFFFFFFE);
    if ((*(_WORD *)(v185 + 12) & 0x800) != 0)
    {
      v184 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v185 + 76) + 0xB0))(v123, a1);
    }
    else
    {
      v184 = *(_QWORD *)(v185 + 48);
      if (!v184)
        v184 = *(_QWORD *)(v123 + 16);
    }
    if (*(_DWORD *)(v44 + 80))
    {
      v186 = *(_DWORD *)(v44 + 80);
      if ((v186 & 0x27) != 0 && (v186 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v44 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v44 + 16))
        goto LABEL_150;
    }
LABEL_243:
    if ((v184 & 0xFFFE000000000002) == 0)
    {
      v123 = v184;
      if (*(unsigned __int8 *)(v184 + 5) > 0x16u)
        continue;
    }
    goto LABEL_150;
  }
  if (!(_DWORD)v101 || (v101 & ~*(_DWORD *)(16 * (*(_DWORD *)v123 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_238;
  v165 = *(_QWORD *)(16 * (*(_DWORD *)v123 & 0xFFFFFFFE) + 0x58);
  if (!v165)
  {
    v166 = *(_QWORD *)(16 * (*(_DWORD *)v123 & 0xFFFFFFFE) + 0x40);
    if (!v166 || *(_BYTE *)(v166 + 5) != 1 && *(_DWORD *)(v166 + 80) < 2u)
      goto LABEL_238;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v123 & 0xFFFFFFFE)), (JSC::VM *)v44, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v165)
      goto LABEL_238;
  }
  if (!*(_DWORD *)(v165 + 24))
    goto LABEL_238;
  v167 = *(_QWORD *)(v165 + 16);
  v168 = v167 & 0xFFFFFFFFFFFFFFFELL;
  v169 = *(unsigned int *)(v165 + 8);
  v170 = *(_DWORD *)(v99 + 16);
  if ((v167 & 1) != 0)
  {
    if ((v170 & 0x20) != 0)
      v170 = *(_DWORD *)(v99 + 32);
    v171 = *(_DWORD *)(v165 + 12);
    v172 = (v170 >> 8) & *(_QWORD *)&v171;
    v173 = *(unsigned __int8 *)(v168 + v172);
    if (*(_BYTE *)(v168 + v172))
    {
      v174 = v168 + v169;
      v175 = 1;
      while (1)
      {
        v176 = *(_QWORD *)(v174 + 8 * (v173 - 1));
        if (v99 == (v176 & 0xFFFFFFFFFFFFLL))
          break;
        v172 = ((_DWORD)v172 + v175) & v171;
        v173 = *(unsigned __int8 *)(v168 + v172);
        ++v175;
        if (!*(_BYTE *)(v168 + v172))
          goto LABEL_238;
      }
      a6 = (v176 >> 16) & 0xFF00000000 | HIBYTE(v176);
      goto LABEL_235;
    }
    goto LABEL_238;
  }
  if ((v170 & 0x20) != 0)
    v170 = *(_DWORD *)(v99 + 32);
  v177 = *(_DWORD *)(v165 + 12);
  v178 = v177 & (v170 >> 8);
  v179 = *(_DWORD *)(v168 + 4 * v178);
  if (!v179)
    goto LABEL_238;
  v180 = v168 + 4 * v169;
  v181 = 1;
  while (1)
  {
    v182 = (v179 - 1);
    if (v99 == *(_QWORD *)(v180 + 16 * v182))
      break;
    v178 = (v178 + v181) & v177;
    v179 = *(_DWORD *)(v168 + 4 * v178);
    ++v181;
    if (!v179)
      goto LABEL_238;
  }
  a6 = *(unsigned int *)(v180 + 16 * v182 + 8) | ((unint64_t)*(unsigned __int8 *)(v180 + 16 * v182 + 12) << 32);
LABEL_235:
  if ((_DWORD)a6 == -1)
  {
LABEL_238:
    if ((*(_BYTE *)(v123 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v123, (JSC::VM *)v44, v99, (uint64_t)&v267) & 1) != 0)
    {
      goto LABEL_150;
    }
    goto LABEL_239;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v215 = v123 + 16;
    v216 = a6 << 32;
  }
  else
  {
    v215 = *(_QWORD *)(v123 + 8) - 8;
    v216 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v215 + (v216 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_367:
    v267 = (uint64_t (*)(_QWORD))a4;
    v271 = (_DWORD *)v123;
    goto LABEL_147;
  }
  v224 = *(unsigned __int8 *)(a4 + 5);
  if (v224 == 5)
  {
    v135 = (unsigned int *)v123;
    goto LABEL_149;
  }
  if (v224 != 6)
    goto LABEL_367;
  v148 = *(_DWORD *)(v164 + 16) & 3;
  v227 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v267 = *(uint64_t (**)(_QWORD))(a4 + 8);
    v268 = v227;
    LODWORD(v269) = HIDWORD(a6);
    v271 = (_DWORD *)v123;
    goto LABEL_355;
  }
  v151 = *(int8x16_t ***)(a4 + 24);
  v150 = *(_QWORD *)(a4 + 32);
  v267 = *(uint64_t (**)(_QWORD))(a4 + 8);
  v268 = v227;
  LODWORD(v269) = HIDWORD(a6);
  v271 = (_DWORD *)v123;
LABEL_175:
  BYTE1(v273) = 3;
  if (v148 != 2)
    LOBYTE(v273) = 1;
  HIBYTE(v273) = 1;
  v277 = v151;
  v278 = v150;
LABEL_150:
  v23 = v279;
  if (*((_DWORD *)v279 + 20))
  {
    v213 = *((_DWORD *)v279 + 20);
    if ((v213 & 0x27) != 0 && (v213 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v279 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v23 + 2))
      goto LABEL_371;
  }
  if (v276)
  {
    v136 = *(_DWORD *)(v275 + 4);
    if (!v136)
    {
      __break(0xC471u);
      JUMPOUT(0x198497D3CLL);
    }
    *(_DWORD *)(v275 + 4) = v136 - 1;
    v275 = 0;
    v276 = 0;
  }
  v138 = JSC::JSObject::get((unsigned int *)a3, a1, *(_QWORD *)(*(_QWORD *)v266 + 2712), a4, a5, a6, a7, a8);
  if (!*((_DWORD *)v23 + 20))
    goto LABEL_155;
  v214 = *((_DWORD *)v23 + 20);
  if ((v214 & 0x27) != 0 && (v214 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v23 + 64), 7u, v137, a4, a5, a6, a7, a8);
  if (*((_QWORD *)v23 + 2))
  {
LABEL_371:
    v54 = 0;
  }
  else
  {
LABEL_155:
    if ((v138 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v140 = BYTE1(v273);
      goto LABEL_157;
    }
    v142 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    v143 = *(_QWORD *)(v142 + 528);
    if ((v143 & 1) != 0)
    {
      v220 = *(uint64_t (**)(JSC::VM **))(v143 & 0xFFFFFFFFFFFFFFFCLL);
      v221 = (JSC::VM **)(v142 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v142 & 8) != 0)
        v221 = (JSC::VM **)(v142 - 16);
      __dst = *v221;
      v282 = v142;
      v283 = v142 + 528;
      v143 = v220(&__dst);
    }
    if (v143 != v138
      || (v140 = BYTE1(v273), (BYTE1(v273) & 0xFE) == 2)
      || v274
      || (*(_BYTE *)(a3 + 4) & 0xEu) > 9
      || ((v144 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) + 2216), (v144 & 1) != 0)
        ? (v145 = (v144 >> 1) & 3)
        : (v145 = *(unsigned __int8 *)(v144 + 4)),
          v145 == 2))
    {
      v23 = (JSC::VM *)JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>((JSC::JSGlobalObject *)a1, a2, (JSC::JSObject *)a3, v138, a5, a6, a7, a8);
      v54 = 0;
      v146 = 0;
      goto LABEL_197;
    }
LABEL_157:
    if (!v140)
    {
      v54 = 0;
      goto LABEL_196;
    }
    if (v140 == 1)
    {
      v141 = (unint64_t)v267;
    }
    else
    {
      if (v140 == 2)
      {
        v147 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v267, (JSC::JSGlobalObject *)a1, v137, a4, a5, a6, a7, a8);
      }
      else
      {
        v152 = *(WTF::StringImpl **)(*(_QWORD *)v266 + 1768);
        v153 = (unint64_t)v271;
        v154 = *(_QWORD *)(16 * (*v271 & 0xFFFFFFFE) + 0x28);
        if ((v269 & 0x20) != 0)
          v153 = (unint64_t)v270;
        if (HIBYTE(v273) != 1)
          goto LABEL_190;
        if ((v153 & 0xFFFE000000000002) != 0)
          goto LABEL_395;
        v155 = *(unsigned int *)(16 * (*(_DWORD *)v153 & 0xFFFFFFFE) + 0x4C);
        v156 = *(_DWORD *)(16 * (*(_DWORD *)v153 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v155)
        {
          v157 = 16 * v155;
          if (v277 != (int8x16_t **)v157)
          {
            do
            {
              v157 = *(_QWORD *)(v157 + 16);
              v156 = v157 != 0;
              v158 = (int8x16_t **)v157 == v277 || v157 == 0;
            }
            while (!v158);
          }
        }
        if (!v156)
        {
LABEL_395:
          __dst = *(JSC::VM **)(a1 + 56);
          v147 = JSC::throwDOMAttributeGetterTypeError(v154, &__dst, v277, v152);
        }
        else
        {
LABEL_190:
          v147 = v267(v154);
        }
      }
      v141 = v147;
    }
    *(_QWORD *)__s = v141;
    if (*((_DWORD *)v23 + 20))
    {
      v225 = *((_DWORD *)v23 + 20);
      if ((v225 & 0x27) != 0 && (v225 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v23 + 64), 7u, v137, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v23 + 2))
        goto LABEL_371;
    }
    if (v141 < 0xFFFE000000000000)
    {
      if (v141 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase((JSC::JSObject **)__s, (JSC::JSGlobalObject *)a1, v137, a4, a5, a6, a7, a8, v139);
      else
        *(_QWORD *)&v222 = v141 - 0x2000000000000;
      v223 = trunc(v222 + 0.0);
      if (v223 <= 0.0)
      {
        v54 = 0;
      }
      else
      {
        if (v223 > 9.00719925e15)
          v223 = 9.00719925e15;
        v54 = (unint64_t)v223;
      }
    }
    else
    {
      v54 = v141 & ~((int)v141 >> 31);
    }
    if (!*((_DWORD *)v23 + 20))
      goto LABEL_196;
    v226 = *((_DWORD *)v23 + 20);
    if ((v226 & 0x27) != 0 && (v226 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v23 + 64), 7u, v137, a4, a5, a6, a7, a8);
    if (!*((_QWORD *)v23 + 2))
    {
LABEL_196:
      v146 = 1;
      goto LABEL_197;
    }
  }
  v146 = 0;
  v23 = 0;
LABEL_197:
  if (v276)
  {
    v159 = *(_DWORD *)(v275 + 4);
    if (!v159)
    {
      __break(0xC471u);
      JUMPOUT(0x198497D1CLL);
    }
    *(_DWORD *)(v275 + 4) = v159 - 1;
  }
  if (v146)
  {
LABEL_37:
    v55 = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v54, a4, a5, a6, a7, a8);
    if (v55)
    {
      v32 = v55;
      v58 = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromArrayLike(v55, (JSC::JSGlobalObject *)a1, 0, (JSC::JSObject *)a3, 0, v54, v56, v57);
      goto LABEL_39;
    }
    return 0;
  }
  return (unint64_t)v23;
}

unint64_t operationNewBigUint64ArrayWithSize(unint64_t a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  unint64_t SlowCase;
  JSC::JSCell *v12;
  uint64_t v13;
  unint64_t v14;
  JSC::Heap **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  JSC::Exception *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(JSC::VM **);
  JSC::VM **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  JSC::VM *v49;
  JSC::JSGlobalObject *v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t vars0;

  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v9 + 40) = vars0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (!a4)
      return JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::create((JSC::JSGlobalObject *)a1, (uint64_t)a2, a3, 0, a5, a6, a7, a8);
    v49 = a2;
    v50 = (JSC::JSGlobalObject *)a4;
    v51 = (_QWORD *)a3;
    v52 = 0;
    v53 = 16;
    v54 = 0;
    if (a3 >= 0x3E9)
    {
      __break(0xC471u);
      JUMPOUT(0x1984985BCLL);
    }
    if (!a2)
    {
      __break(0xC471u);
      JUMPOUT(0x1984985DCLL);
    }
    v10 = *(_QWORD **)(v9 + 40360);
    if (!v10)
      v10 = (_QWORD *)JSC::GCClient::Heap::bigUint64ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
    SlowCase = v10[3];
    if (SlowCase >= v10[4])
    {
      SlowCase = v10[5];
      if ((SlowCase & 1) != 0)
      {
        v44 = (uint64_t)v10;
        JSC::sanitizeStackForVM((JSC *)v9, a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v44, v9 + 192, 48, 0, 0, v45, v46, v47);
        goto LABEL_9;
      }
      v41 = *(_QWORD *)(SlowCase + 8) ^ v10[6];
      v10[4] = SlowCase + HIDWORD(v41);
      v10[5] = SlowCase + (int)v41;
    }
    v10[3] = SlowCase + 48;
LABEL_9:
    *(_DWORD *)SlowCase = 0;
    v12 = JSC::JSArrayBufferView::JSArrayBufferView((JSC::JSCell *)SlowCase, v9, (uint64_t)&v49);
    JSC::JSArrayBufferView::finishCreation((unint64_t)v12, (JSC::VM *)v9);
    return SlowCase;
  }
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1C00000002;
  *(_QWORD *)(v13 + 8) = "Requested length is negative";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v14 = *(_QWORD *)(a1 + 128);
  v15 = *(JSC::Heap ***)(a1 + 56);
  if ((v14 & 1) != 0)
  {
    v42 = *(uint64_t (**)(JSC::VM **))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    v43 = (JSC::VM **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v43 = (JSC::VM **)(a1 - 16);
    v49 = *v43;
    v50 = (JSC::JSGlobalObject *)a1;
    v51 = (_QWORD *)(a1 + 128);
    v14 = v42(&v49);
  }
  v16 = JSC::ErrorInstance::create(v15, v14, &v48, 0, 0, 0, 2, 1);
  v23 = (JSC::Exception *)v16;
  if ((v16 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C)))
  {
    v23 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v16, 0, v17, v18, v19, v20, v21);
  }
  JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)a1, v23, v22, v17, v18, v19, v20, v21);
  v31 = v48;
  v48 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  return 0;
}

unint64_t operationNewBigUint64ArrayWithOneArgument(unint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD var38[8];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var38[7];
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 38 && *(_BYTE *)(*(_QWORD *)(a2 + 16) + 64))
  {
    v11 = *(_QWORD *)(a1 + 1920);
    if ((v11 & 1) == 0)
      return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(a1, v11, a2, 0, 0, 0, a8, a9, a3);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v17 = (uint64_t *)(a1 - 16);
    v15 = *v17;
    v16 = a1 + 1920;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a1 + 1904);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v14 = (uint64_t *)(a1 - 16);
    v15 = *v14;
    v16 = a1 + 1904;
LABEL_9:
    var38[0] = v15;
    var38[1] = a1;
    var38[2] = v16;
    v11 = v13(var38);
  }
  return JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(a1, v11, a2, 0, 0, 0, a8, a9, a3);
}

unint64_t JSC::constructGenericTypedArrayViewWithArguments<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  unsigned int v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::VM *v23;
  unint64_t v24;
  unint64_t Uninitialized;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  const char *v74;
  unint64_t v75;
  JSC::Heap **v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  JSC::Exception *v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t (*v96)(JSC::VM **);
  JSC::VM **v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  int v117;
  unsigned int v118;
  int v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  _BYTE *v125;
  uint64_t v126;
  unsigned int v127;
  unsigned __int16 *v128;
  uint64_t v129;
  unsigned int v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int8x16_t v139;
  int v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int8x16_t **v151;
  WTF::StringImpl *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  BOOL v158;
  int v159;
  int v160;
  _BYTE *v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  unint64_t v176;
  int v177;
  unsigned int v178;
  int v179;
  unint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  unsigned __int8 *v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  unint64_t v197;
  size_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unsigned __int8 *v202;
  JSC::VM **v203;
  uint64_t v204;
  int v205;
  int v206;
  JSC::VM **p_dst;
  uint64_t v208;
  int v209;
  int v210;
  int v211;
  char v212;
  int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int16 *v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t (*v220)(JSC::VM **);
  JSC::VM **v221;
  double v222;
  double v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  unsigned __int8 *v228;
  uint64_t v229;
  unsigned int v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  char v236;
  int v237;
  uint64_t v238;
  int v239;
  char v240;
  int v241;
  unint64_t v242;
  unint64_t v243;
  char v244;
  unsigned __int8 *v245;
  uint64_t v246;
  unsigned int v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  char v253;
  int v254;
  uint64_t v255;
  int v256;
  char v257;
  unint64_t v258;
  unint64_t v259;
  char v260;
  int v261;
  unint64_t v262;
  char v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t (*v267)(_QWORD);
  uint64_t v268;
  unint64_t v269;
  _DWORD *v270;
  _DWORD *v271;
  uint64_t v272;
  int v273;
  char v274;
  uint64_t v275;
  char v276;
  int8x16_t **v277;
  uint64_t v278;
  JSC::VM *v279;
  JSC::JSObject *v280;
  JSC::VM *__dst;
  unint64_t v282;
  unint64_t v283;
  char __s[8];
  uint64_t v285;

  v285 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 56);
  v279 = (JSC::VM *)v11;
  v280 = (JSC::JSObject *)a3;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_18;
  v13 = *(unsigned __int8 *)(a3 + 5);
  if (v13 == 38)
  {
    v14 = *(uint64_t (**)(_QWORD))(a3 + 16);
    if (v14)
      *(_DWORD *)v14 += 2;
    v267 = v14;
    v15 = *((_QWORD *)v14 + 2);
    if (!v15
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError(a1, &v279, (uint64_t)"Buffer is already detached", 27);
LABEL_10:
      v23 = 0;
      v267 = 0;
LABEL_62:
      v158 = *(_DWORD *)v14 == 2;
      *(_DWORD *)v14 -= 2;
      if (v158)
      {
        JSC::ArrayBuffer::~ArrayBuffer((JSC::ArrayBuffer *)v14, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      return (unint64_t)v23;
    }
    a6 = a6;
    if ((_BYTE)a6)
    {
      v62 = a5 & 0xFFFFFFFFFFFFFF00;
      goto LABEL_61;
    }
    if (*((_BYTE *)v14 + 64))
    {
      v94 = *((_QWORD *)v14 + 4);
      if (v94)
        v95 = *(_QWORD *)(v94 + 32);
      else
        v95 = *((_QWORD *)v14 + 6);
      if (v95 >= a4)
      {
        v62 = 0;
        LOBYTE(a5) = 0;
        a6 = 0;
LABEL_61:
        v23 = (JSC::VM *)JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::create(a1, a2, (uint64_t)&v267, a4, a5 | v62, a6, a9, a7, a8);
        v14 = v267;
        v267 = 0;
        if (!v14)
          return (unint64_t)v23;
        goto LABEL_62;
      }
      v73 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v73 = 0x3000000002;
      v74 = "byteOffset exceeds source ArrayBuffer byteLength";
    }
    else
    {
      v63 = *((_QWORD *)v14 + 6) - a4;
      if ((v63 & 7) == 0)
      {
        a5 = v63 >> 3;
        v62 = (v63 >> 3) & 0x1FFFFFFFFFFFFF00;
        a6 = 1;
        goto LABEL_61;
      }
      v73 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v73 = 0x4D00000002;
      v74 = "ArrayBuffer length minus the byteOffset is not a multiple of the element size";
    }
    *(_QWORD *)(v73 + 8) = v74;
    *(_DWORD *)(v73 + 16) = 4;
    *(_QWORD *)__s = v73;
    v75 = *(_QWORD *)(a1 + 128);
    v76 = *(JSC::Heap ***)(a1 + 56);
    if ((v75 & 1) != 0)
    {
      v96 = *(uint64_t (**)(JSC::VM **))(v75 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v97 = (JSC::VM **)(a1 - 16);
      else
        v97 = (JSC::VM **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      __dst = *v97;
      v282 = a1;
      v283 = a1 + 128;
      v75 = v96(&__dst);
    }
    v77 = JSC::ErrorInstance::create(v76, v75, (WTF::StringImpl **)__s, 0, 0, 0, 2, 1);
    v84 = (JSC::Exception *)v77;
    if ((v77 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v77 & 0xFFFFFFFE) + 0x4C)))
    {
      v84 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v77, 0, v78, v79, v80, v81, v82);
    }
    JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)a1, v84, v83, v78, v79, v80, v81, v82);
    v85 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
      {
        WTF::StringImpl::~StringImpl(v85, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
      }
      else
      {
        *(_DWORD *)v85 -= 2;
      }
    }
    goto LABEL_10;
  }
  if (v13 < 0x17)
  {
LABEL_18:
    v43 = JSC::JSValue::toTypedArrayIndex(&v280, (JSC::JSGlobalObject *)a1, (uint64_t)"length", 7, a5, a6, a7, a8, (int8x16_t)a9);
    if (!*(_DWORD *)(v11 + 80))
      return JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::create((JSC::JSGlobalObject *)a1, a2, v43, v38, v39, v40, v41, v42);
    v59 = *(_DWORD *)(v11 + 80);
    if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v37, v38, v39, v40, v41, v42);
    if (!*(_QWORD *)(v11 + 16))
      return JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::create((JSC::JSGlobalObject *)a1, a2, v43, v38, v39, v40, v41, v42);
    return 0;
  }
  if (v13 - 39 <= 0xA)
  {
    if ((*(_BYTE *)(a3 + 40) & 7u) > 2)
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v282) = 0;
      v60 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a3, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
      if (v61)
        v24 = v60;
      else
        v24 = 0;
    }
    else
    {
      v24 = *(_QWORD *)(a3 + 24);
    }
    Uninitialized = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v24, a4, a5, a6, a7, a8);
    if (!Uninitialized)
      return 0;
    v32 = Uninitialized;
    LOBYTE(__dst) = 0;
    LOBYTE(v282) = 0;
    if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a3, (unint64_t *)&__dst, v26, v27, v28, v29, v30, v31))
    {
      v34 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
      v35 = a1;
      v36 = 72;
LABEL_44:
      JSC::throwTypeError(v35, &v279, (uint64_t)v34, v36);
      return 0;
    }
    if ((*(_BYTE *)(a3 + 5) & 0xFE) != 0x30)
    {
      v34 = "Content types of source and new typed array are different";
      v35 = a1;
      v36 = 58;
      goto LABEL_44;
    }
    v58 = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setFromTypedArray(v32, a1, 0, a3, 0, v24, 1, v33);
LABEL_39:
    if (v58)
      return v32;
    else
      return 0;
  }
  v44 = v11;
  if (a3)
  {
    v44 = v11;
    if (v13 == 36)
    {
      v45 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
      v46 = *(_QWORD *)(v45 + 2216);
      v47 = (v46 & 1) != 0 ? (v46 >> 1) & 3 : *(unsigned __int8 *)(v46 + 4);
      v44 = v11;
      if (v47 != 2)
      {
        v44 = v11;
        if (*(_BYTE *)(*(_QWORD *)(v45 + 2048) + 4) != 2)
        {
          v48 = *(_QWORD *)(v45 + 2304);
          v49 = (v48 & 1) != 0 ? (v48 >> 1) & 3 : *(unsigned __int8 *)(v48 + 4);
          v44 = v11;
          if (v49 != 2)
          {
            v50 = *(unsigned __int8 *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 8);
            v51 = (v50 >> 1) & 7;
            if ((v50 & 0x10) != 0)
              v51 = ((v50 & 0xE) + 10) >> 1;
            v52 = *(_DWORD *)(v45 + 4 * v51 + 852);
            if (v52)
              v53 = 16 * (v52 & 0xFFFFFFFE);
            else
              v53 = 0;
            if (v53 == 16 * (*(_DWORD *)a3 & 0xFFFFFFFE))
              goto LABEL_35;
            v44 = v11;
            if ((v50 & 0x20) == 0)
            {
              v98 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x30);
              if (!v98)
                v98 = *(_QWORD *)(a3 + 16);
              v44 = v11;
              if (v98 == *(_QWORD *)(v45 + 672))
              {
                if (JSC::JSObject::getDirectOffset((_DWORD *)a3, *(JSC::VM **)(v45 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 56) + 41952) + 2712), (const JSC::PropertyTable *)a4, a5, a6, a7, a8) == -1)
                {
LABEL_35:
                  if ((*(_BYTE *)(a3 + 4) & 0xE) != 0)
                    v54 = *(unsigned int *)(*(_QWORD *)(a3 + 8) - 8);
                  else
                    v54 = 0;
                  goto LABEL_37;
                }
                v44 = *(_QWORD *)(a1 + 56);
              }
            }
          }
        }
      }
    }
  }
  v269 = 0xFFFFFFFF00000000;
  v271 = 0;
  v272 = 0;
  v270 = (_DWORD *)a3;
  v273 = 196608;
  v274 = 0;
  v277 = 0;
  v278 = 0;
  v275 = v11;
  ++*(_DWORD *)(v11 + 4);
  v276 = 1;
  v266 = v11 + 41952;
  v99 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768);
  v100 = (_BYTE *)(a3 + 6);
  v101 = v99 >> 4;
  if ((*(_BYTE *)(a3 + 6) & 8) == 0)
  {
    v102 = a3;
    while (1)
    {
      v103 = *(_DWORD *)v102 & 0xFFFFFFFE;
      v104 = 16 * v103;
      if (!(_DWORD)v101 || (v101 & ~*(_DWORD *)(16 * v103 + 0x20)) != 0)
        goto LABEL_118;
      v105 = *(_QWORD *)(16 * v103 + 0x58);
      if (!v105)
      {
        v106 = *(_QWORD *)(16 * v103 + 0x40);
        if (!v106 || *(_BYTE *)(v106 + 5) != 1 && *(_DWORD *)(v106 + 80) < 2u)
          goto LABEL_118;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v104, (JSC::VM *)v44, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v105)
          goto LABEL_118;
      }
      if (!*(_DWORD *)(v105 + 24))
        goto LABEL_118;
      v107 = *(_QWORD *)(v105 + 16);
      v108 = v107 & 0xFFFFFFFFFFFFFFFELL;
      v109 = *(unsigned int *)(v105 + 8);
      v110 = *(_DWORD *)(v99 + 16);
      if ((v107 & 1) != 0)
      {
        if ((v110 & 0x20) != 0)
          v110 = *(_DWORD *)(v99 + 32);
        v111 = *(_DWORD *)(v105 + 12);
        v112 = (v110 >> 8) & *(_QWORD *)&v111;
        v113 = *(unsigned __int8 *)(v108 + v112);
        if (!*(_BYTE *)(v108 + v112))
          goto LABEL_118;
        v114 = v108 + v109;
        v115 = 1;
        while (1)
        {
          v116 = *(_QWORD *)(v114 + 8 * (v113 - 1));
          if (v99 == (v116 & 0xFFFFFFFFFFFFLL))
            break;
          v112 = ((_DWORD)v112 + v115) & v111;
          v113 = *(unsigned __int8 *)(v108 + v112);
          ++v115;
          if (!*(_BYTE *)(v108 + v112))
            goto LABEL_118;
        }
        a6 = (v116 >> 16) & 0xFF00000000 | HIBYTE(v116);
      }
      else
      {
        if ((v110 & 0x20) != 0)
          v110 = *(_DWORD *)(v99 + 32);
        v117 = *(_DWORD *)(v105 + 12);
        v118 = v117 & (v110 >> 8);
        v119 = *(_DWORD *)(v108 + 4 * v118);
        if (!v119)
          goto LABEL_118;
        v120 = v108 + 4 * v109;
        v121 = 1;
        while (1)
        {
          v122 = (v119 - 1);
          if (v99 == *(_QWORD *)(v120 + 16 * v122))
            break;
          v118 = (v118 + v121) & v117;
          v119 = *(_DWORD *)(v108 + 4 * v118);
          ++v121;
          if (!v119)
            goto LABEL_118;
        }
        a6 = *(unsigned int *)(v120 + 16 * v122 + 8) | ((unint64_t)*(unsigned __int8 *)(v120 + 16 * v122 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v132 = v102 + 16;
          v133 = a6 << 32;
        }
        else
        {
          v132 = *(_QWORD *)(v102 + 8) - 8;
          v133 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v132 + (v133 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v134 = *(unsigned __int8 *)(a4 + 5);
          if (v134 != 5)
          {
            if (v134 != 6)
              goto LABEL_146;
            v148 = *(_DWORD *)(v104 + 16) & 3;
            v149 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v151 = *(int8x16_t ***)(a4 + 24);
              v150 = *(_QWORD *)(a4 + 32);
              v267 = *(uint64_t (**)(_QWORD))(a4 + 8);
              v268 = v149;
              LODWORD(v269) = HIDWORD(a6);
              v271 = (_DWORD *)v102;
              goto LABEL_175;
            }
            v267 = *(uint64_t (**)(_QWORD))(a4 + 8);
            v268 = v149;
            LODWORD(v269) = HIDWORD(a6);
            v271 = (_DWORD *)v102;
LABEL_355:
            BYTE1(v273) = 3;
            if (v148 != 2)
              LOBYTE(v273) = 1;
            goto LABEL_150;
          }
          v135 = (unsigned int *)v102;
LABEL_149:
          JSC::JSObject::fillGetterPropertySlot(v135, v44, (uint64_t)&v267, a4, a5, a6);
          goto LABEL_150;
        }
LABEL_146:
        v267 = (uint64_t (*)(_QWORD))a4;
        v271 = (_DWORD *)v102;
LABEL_147:
        v269 = __PAIR64__(a6, a5);
        LOWORD(v273) = 257;
        goto LABEL_150;
      }
LABEL_118:
      if ((*v100 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v102, (JSC::VM *)v44, v99, (uint64_t)&v267) & 1) != 0)
      {
        goto LABEL_150;
      }
      v123 = *(_QWORD *)(v104 + 48);
      if (!v123)
        v123 = *(_QWORD *)(v102 + 16);
      if ((v123 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v123 + 5) < 0x17u)
      {
        if (!v99)
          goto LABEL_150;
        v124 = *(_DWORD *)(v99 + 16);
        if ((v124 & 0x20) != 0)
          goto LABEL_150;
        v125 = *(_BYTE **)(v99 + 8);
        v126 = *(unsigned int *)(v99 + 4);
        if ((v124 & 4) != 0)
        {
          if (!(_DWORD)v126)
            goto LABEL_150;
          v127 = *v125 - 48;
          if (v127 > 9 || v126 >= 2 && *v125 == 48)
            goto LABEL_150;
          v228 = v125 + 1;
          v229 = v126 - 1;
          while (v229)
          {
            if (v127 <= 0x19999999)
            {
              v230 = *v228 - 48;
              if (v230 <= 9)
              {
                v131 = __CFADD__(v230, 10 * v127);
                v127 = v230 + 10 * v127;
                ++v228;
                --v229;
                if (!v131)
                  continue;
              }
            }
            goto LABEL_150;
          }
        }
        else
        {
          if (!(_DWORD)v126)
            goto LABEL_150;
          v127 = *(unsigned __int16 *)v125 - 48;
          if (v127 > 9 || *(_WORD *)v125 == 48 && v126 > 1)
            goto LABEL_150;
          v128 = (unsigned __int16 *)(v125 + 2);
          v129 = v126 - 1;
          while (v129)
          {
            if (v127 <= 0x19999999)
            {
              v130 = *v128 - 48;
              if (v130 <= 9)
              {
                v131 = __CFADD__(v130, 10 * v127);
                v127 = v130 + 10 * v127;
                ++v128;
                --v129;
                if (!v131)
                  continue;
              }
            }
            goto LABEL_150;
          }
        }
        if (v127 == -1)
          goto LABEL_150;
        v231 = v127;
        v232 = *(_QWORD *)(a1 + 56);
        v233 = a3;
        while (1)
        {
          v234 = 16 * (*(_DWORD *)v233 & 0xFFFFFFFE);
          v235 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(_QWORD)))(16 * *(unsigned int *)(v234 + 0x4C) + 0x70))(v233, a1, v231, &v267);
          v236 = v235;
          if (*(_DWORD *)(v232 + 80))
          {
            v239 = *(_DWORD *)(v232 + 80);
            if ((v239 & 0x27) != 0 && (v239 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v232 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v232 + 16))
              v240 = 1;
            else
              v240 = v236;
            if ((v240 & 1) != 0)
              goto LABEL_150;
          }
          else if ((v235 & 1) != 0)
          {
            goto LABEL_150;
          }
          if (BYTE2(v273) == 3)
          {
            if (v274)
              goto LABEL_150;
            v237 = *(unsigned __int8 *)(v233 + 5);
            if (v237 == 61)
              goto LABEL_414;
          }
          else
          {
            v237 = *(unsigned __int8 *)(v233 + 5);
            if (v237 == 61)
            {
              if (BYTE2(v273) == 1)
                goto LABEL_150;
              goto LABEL_414;
            }
          }
          if ((v237 - 39) <= 0xA)
          {
            if ((*(_BYTE *)(v233 + 40) & 7u) > 2)
            {
              LOBYTE(__dst) = 0;
              LOBYTE(v282) = 0;
              v243 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v233, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
              v242 = v244 ? v243 : 0;
            }
            else
            {
              v242 = *(_QWORD *)(v233 + 24);
            }
            if (v242 <= v231)
              goto LABEL_150;
          }
LABEL_414:
          if ((*(_WORD *)(v234 + 12) & 0x800) == 0 || BYTE2(v273) == 3)
          {
            v238 = *(_QWORD *)(16 * (*(_DWORD *)v233 & 0xFFFFFFFE) + 0x30);
            if (!v238)
              v238 = *(_QWORD *)(v233 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v233 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v238 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v233 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v233, a1);
            }
            else
            {
              v238 = *(_QWORD *)(16 * (*(_DWORD *)v233 & 0xFFFFFFFE) + 0x30);
              if (!v238)
                v238 = *(_QWORD *)(v233 + 16);
            }
            if (*(_DWORD *)(v232 + 80))
            {
              v241 = *(_DWORD *)(v232 + 80);
              if ((v241 & 0x27) != 0 && (v241 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v232 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v232 + 16))
                goto LABEL_150;
            }
          }
          if ((v238 & 0xFFFE000000000002) == 0)
          {
            v233 = v238;
            if (*(unsigned __int8 *)(v238 + 5) > 0x16u)
              continue;
          }
          goto LABEL_150;
        }
      }
      v100 = (_BYTE *)(v123 + 6);
      v102 = v123;
      if ((*(_BYTE *)(v123 + 6) & 8) != 0)
        goto LABEL_204;
    }
  }
  v123 = a3;
LABEL_204:
  if (v99)
  {
    v160 = *(_DWORD *)(v99 + 16);
    if ((v160 & 0x20) == 0)
    {
      v161 = *(_BYTE **)(v99 + 8);
      v162 = *(unsigned int *)(v99 + 4);
      if ((v160 & 4) != 0)
      {
        if ((_DWORD)v162)
        {
          v163 = *v161 - 48;
          if (v163 <= 9 && (v162 < 2 || *v161 != 48))
          {
            v245 = v161 + 1;
            v246 = v162 - 1;
            while (v246)
            {
              if (v163 <= 0x19999999)
              {
                v247 = *v245 - 48;
                if (v247 <= 9)
                {
                  v131 = __CFADD__(v247, 10 * v163);
                  v163 = v247 + 10 * v163;
                  ++v245;
                  --v246;
                  if (!v131)
                    continue;
                }
              }
              goto LABEL_209;
            }
LABEL_462:
            if (v163 != -1)
            {
              v248 = v163;
              v249 = *(_QWORD *)(a1 + 56);
              v250 = a3;
              while (1)
              {
                v251 = 16 * (*(_DWORD *)v250 & 0xFFFFFFFE);
                v252 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(_QWORD)))(16 * *(unsigned int *)(v251 + 0x4C) + 0x70))(v250, a1, v248, &v267);
                v253 = v252;
                if (*(_DWORD *)(v249 + 80))
                {
                  v256 = *(_DWORD *)(v249 + 80);
                  if ((v256 & 0x27) != 0 && (v256 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v249 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v249 + 16))
                    v257 = 1;
                  else
                    v257 = v253;
                  if ((v257 & 1) != 0)
                    goto LABEL_150;
                }
                else if ((v252 & 1) != 0)
                {
                  goto LABEL_150;
                }
                if (BYTE2(v273) == 3)
                {
                  if (v274)
                    goto LABEL_150;
                  v254 = *(unsigned __int8 *)(v250 + 5);
                  if (v254 == 61)
                    goto LABEL_469;
                }
                else
                {
                  v254 = *(unsigned __int8 *)(v250 + 5);
                  if (v254 == 61)
                  {
                    if (BYTE2(v273) == 1)
                      goto LABEL_150;
                    goto LABEL_469;
                  }
                }
                if ((v254 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v250 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    LOBYTE(v282) = 0;
                    v259 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v250, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                    v258 = v260 ? v259 : 0;
                  }
                  else
                  {
                    v258 = *(_QWORD *)(v250 + 24);
                  }
                  if (v258 <= v248)
                    goto LABEL_150;
                }
LABEL_469:
                if ((*(_WORD *)(v251 + 12) & 0x800) == 0 || BYTE2(v273) == 3)
                {
                  v255 = *(_QWORD *)(16 * (*(_DWORD *)v250 & 0xFFFFFFFE) + 0x30);
                  if (!v255)
                    v255 = *(_QWORD *)(v250 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v250 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v255 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v250 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v250, a1);
                  }
                  else
                  {
                    v255 = *(_QWORD *)(16 * (*(_DWORD *)v250 & 0xFFFFFFFE) + 0x30);
                    if (!v255)
                      v255 = *(_QWORD *)(v250 + 16);
                  }
                  if (*(_DWORD *)(v249 + 80))
                  {
                    v261 = *(_DWORD *)(v249 + 80);
                    if ((v261 & 0x27) != 0 && (v261 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v249 + 64), 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v249 + 16))
                      goto LABEL_150;
                  }
                }
                if ((v255 & 0xFFFE000000000002) == 0)
                {
                  v250 = v255;
                  if (*(unsigned __int8 *)(v255 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_150;
              }
            }
          }
        }
      }
      else if ((_DWORD)v162)
      {
        v163 = *(unsigned __int16 *)v161 - 48;
        if (v163 <= 9 && (*(_WORD *)v161 != 48 || v162 <= 1))
        {
          v217 = (unsigned __int16 *)(v161 + 2);
          v218 = v162 - 1;
          while (v218)
          {
            if (v163 <= 0x19999999)
            {
              v219 = *v217 - 48;
              if (v219 <= 9)
              {
                v131 = __CFADD__(v219, 10 * v163);
                v163 = v219 + 10 * v163;
                ++v217;
                --v218;
                if (!v131)
                  continue;
              }
            }
            goto LABEL_209;
          }
          goto LABEL_462;
        }
      }
    }
  }
LABEL_209:
  v44 = *(_QWORD *)(a1 + 56);
  while (1)
  {
    v164 = 16 * (*(_DWORD *)v123 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v123 + 6) & 8) == 0)
      break;
    v263 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t (**)(_QWORD)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v123 & 0xFFFFFFFE) + 0x4C) + 0x68))(v123, a1, v99, &v267);
    if (*(_DWORD *)(v44 + 80))
    {
      v211 = *(_DWORD *)(v44 + 80);
      if ((v211 & 0x27) != 0 && (v211 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v44 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v212 = v263;
      if (*(_QWORD *)(v44 + 16))
        v212 = 1;
      if ((v212 & 1) != 0)
        goto LABEL_150;
    }
    else if ((v263 & 1) != 0)
    {
      goto LABEL_150;
    }
    if (BYTE2(v273) == 3)
    {
      if (v274)
        goto LABEL_150;
      v187 = *(unsigned __int8 *)(v123 + 5);
      if (v187 == 61)
        goto LABEL_239;
    }
    else
    {
      v187 = *(unsigned __int8 *)(v123 + 5);
      if (v187 == 61)
      {
        if (BYTE2(v273) == 1)
          goto LABEL_150;
        goto LABEL_239;
      }
    }
    if (!v99)
      goto LABEL_239;
    if ((v187 - 50) < 0xFFFFFFF5)
      goto LABEL_239;
    v188 = *(_DWORD *)(v99 + 16);
    if ((v188 & 0x20) != 0)
      goto LABEL_239;
    v189 = *(unsigned int *)(v99 + 4);
    if (!(_DWORD)v189)
      goto LABEL_239;
    v190 = *(unsigned __int8 **)(v99 + 8);
    if ((v188 & 4) != 0)
    {
      v191 = *v190;
      if ((_DWORD)v189 == 1)
      {
LABEL_268:
        if ((v191 - 48) < 0xA)
          goto LABEL_150;
        goto LABEL_239;
      }
      if (v191 == 45)
      {
        v191 = v190[1];
        goto LABEL_272;
      }
      if ((v191 - 48) < 0xA)
        goto LABEL_283;
      if ((_DWORD)v189 == 8)
        goto LABEL_282;
    }
    else
    {
      v191 = *(unsigned __int16 *)v190;
      if ((_DWORD)v189 == 1)
        goto LABEL_268;
      if (v191 == 45)
      {
        v191 = *((unsigned __int16 *)v190 + 1);
LABEL_272:
        if ((v191 - 48) < 0xA)
        {
          if ((_DWORD)v189 == 2)
            goto LABEL_150;
          goto LABEL_283;
        }
        if ((_DWORD)v189 != 9)
          goto LABEL_239;
LABEL_282:
        if (v191 != 73)
          goto LABEL_239;
        goto LABEL_283;
      }
      if ((v191 - 48) < 0xA || (_DWORD)v189 == 8 && v191 == 73)
        goto LABEL_283;
    }
    if ((_DWORD)v189 != 3 || v191 != 78)
      goto LABEL_239;
LABEL_283:
    v262 = v262 & 0xFFFFFF0000000000 | v189 | ((unint64_t)((v188 >> 2) & 1) << 32);
    JSC::jsToNumber(v190, v262);
    v193 = (v192 >> 52) & 0x7FF;
    if ((_DWORD)v193 == 2047)
    {
      if ((v192 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", 3);
        v194 = &__s[3];
      }
      else
      {
        if ((v192 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v200 = &__s[1];
        }
        else
        {
          v200 = __s;
        }
        *(_QWORD *)v200 = 0x7974696E69666E49;
        v194 = v200 + 8;
      }
      goto LABEL_297;
    }
    v195 = v192 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v192 & 0x8000000000000000) != 0 && v195)
    {
      __s[0] = 45;
      v196 = &__s[1];
    }
    else
    {
      if (!v195)
      {
        __s[0] = 48;
        v194 = &__s[1];
        goto LABEL_297;
      }
      v196 = __s;
    }
    v264 = (uint64_t)v196;
    v197 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v192 & 0x800FFFFFFFFFFFFFLL, v193);
    v194 = WTF::dragonbox::detail::to_shortest(v197, v198, v264, v199);
LABEL_297:
    *v194 = 0;
    v265 = strlen(__s);
    memcpy(&__dst, __s, v265);
    *((_BYTE *)&__dst + v265) = 0;
    v201 = *(unsigned int *)(v99 + 4);
    v202 = *(unsigned __int8 **)(v99 + 8);
    if ((*(_BYTE *)(v99 + 16) & 4) != 0)
    {
      if ((_DWORD)v201)
      {
        p_dst = &__dst;
        v208 = *(unsigned int *)(v99 + 4);
        do
        {
          v210 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v209 = v210;
          if (!v210 || *v202 != v209)
            goto LABEL_239;
          ++v202;
        }
        while (--v208);
      }
    }
    else if ((_DWORD)v201)
    {
      v203 = &__dst;
      v204 = *(unsigned int *)(v99 + 4);
      do
      {
        v206 = *(unsigned __int8 *)v203;
        v203 = (JSC::VM **)((char *)v203 + 1);
        v205 = v206;
        if (!v206 || *(unsigned __int16 *)v202 != v205)
          goto LABEL_239;
        v202 += 2;
      }
      while (--v204);
    }
    if (!*((_BYTE *)&__dst + v201))
      goto LABEL_150;
LABEL_239:
    if ((*(_WORD *)(v164 + 12) & 0x800) == 0)
    {
      v183 = *(_DWORD *)v123;
LABEL_241:
      v184 = *(_QWORD *)(16 * (v183 & 0xFFFFFFFE) + 0x30);
      if (!v184)
        v184 = *(_QWORD *)(v123 + 16);
      goto LABEL_243;
    }
    v183 = *(_DWORD *)v123;
    if (BYTE2(v273) == 3)
      goto LABEL_241;
    v185 = 16 * (v183 & 0xFFFFFFFE);
    if ((*(_WORD *)(v185 + 12) & 0x800) != 0)
    {
      v184 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v185 + 76) + 0xB0))(v123, a1);
    }
    else
    {
      v184 = *(_QWORD *)(v185 + 48);
      if (!v184)
        v184 = *(_QWORD *)(v123 + 16);
    }
    if (*(_DWORD *)(v44 + 80))
    {
      v186 = *(_DWORD *)(v44 + 80);
      if ((v186 & 0x27) != 0 && (v186 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v44 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v44 + 16))
        goto LABEL_150;
    }
LABEL_243:
    if ((v184 & 0xFFFE000000000002) == 0)
    {
      v123 = v184;
      if (*(unsigned __int8 *)(v184 + 5) > 0x16u)
        continue;
    }
    goto LABEL_150;
  }
  if (!(_DWORD)v101 || (v101 & ~*(_DWORD *)(16 * (*(_DWORD *)v123 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_238;
  v165 = *(_QWORD *)(16 * (*(_DWORD *)v123 & 0xFFFFFFFE) + 0x58);
  if (!v165)
  {
    v166 = *(_QWORD *)(16 * (*(_DWORD *)v123 & 0xFFFFFFFE) + 0x40);
    if (!v166 || *(_BYTE *)(v166 + 5) != 1 && *(_DWORD *)(v166 + 80) < 2u)
      goto LABEL_238;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v123 & 0xFFFFFFFE)), (JSC::VM *)v44, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v165)
      goto LABEL_238;
  }
  if (!*(_DWORD *)(v165 + 24))
    goto LABEL_238;
  v167 = *(_QWORD *)(v165 + 16);
  v168 = v167 & 0xFFFFFFFFFFFFFFFELL;
  v169 = *(unsigned int *)(v165 + 8);
  v170 = *(_DWORD *)(v99 + 16);
  if ((v167 & 1) != 0)
  {
    if ((v170 & 0x20) != 0)
      v170 = *(_DWORD *)(v99 + 32);
    v171 = *(_DWORD *)(v165 + 12);
    v172 = (v170 >> 8) & *(_QWORD *)&v171;
    v173 = *(unsigned __int8 *)(v168 + v172);
    if (*(_BYTE *)(v168 + v172))
    {
      v174 = v168 + v169;
      v175 = 1;
      while (1)
      {
        v176 = *(_QWORD *)(v174 + 8 * (v173 - 1));
        if (v99 == (v176 & 0xFFFFFFFFFFFFLL))
          break;
        v172 = ((_DWORD)v172 + v175) & v171;
        v173 = *(unsigned __int8 *)(v168 + v172);
        ++v175;
        if (!*(_BYTE *)(v168 + v172))
          goto LABEL_238;
      }
      a6 = (v176 >> 16) & 0xFF00000000 | HIBYTE(v176);
      goto LABEL_235;
    }
    goto LABEL_238;
  }
  if ((v170 & 0x20) != 0)
    v170 = *(_DWORD *)(v99 + 32);
  v177 = *(_DWORD *)(v165 + 12);
  v178 = v177 & (v170 >> 8);
  v179 = *(_DWORD *)(v168 + 4 * v178);
  if (!v179)
    goto LABEL_238;
  v180 = v168 + 4 * v169;
  v181 = 1;
  while (1)
  {
    v182 = (v179 - 1);
    if (v99 == *(_QWORD *)(v180 + 16 * v182))
      break;
    v178 = (v178 + v181) & v177;
    v179 = *(_DWORD *)(v168 + 4 * v178);
    ++v181;
    if (!v179)
      goto LABEL_238;
  }
  a6 = *(unsigned int *)(v180 + 16 * v182 + 8) | ((unint64_t)*(unsigned __int8 *)(v180 + 16 * v182 + 12) << 32);
LABEL_235:
  if ((_DWORD)a6 == -1)
  {
LABEL_238:
    if ((*(_BYTE *)(v123 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v123, (JSC::VM *)v44, v99, (uint64_t)&v267) & 1) != 0)
    {
      goto LABEL_150;
    }
    goto LABEL_239;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v215 = v123 + 16;
    v216 = a6 << 32;
  }
  else
  {
    v215 = *(_QWORD *)(v123 + 8) - 8;
    v216 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v215 + (v216 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_367:
    v267 = (uint64_t (*)(_QWORD))a4;
    v271 = (_DWORD *)v123;
    goto LABEL_147;
  }
  v224 = *(unsigned __int8 *)(a4 + 5);
  if (v224 == 5)
  {
    v135 = (unsigned int *)v123;
    goto LABEL_149;
  }
  if (v224 != 6)
    goto LABEL_367;
  v148 = *(_DWORD *)(v164 + 16) & 3;
  v227 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v267 = *(uint64_t (**)(_QWORD))(a4 + 8);
    v268 = v227;
    LODWORD(v269) = HIDWORD(a6);
    v271 = (_DWORD *)v123;
    goto LABEL_355;
  }
  v151 = *(int8x16_t ***)(a4 + 24);
  v150 = *(_QWORD *)(a4 + 32);
  v267 = *(uint64_t (**)(_QWORD))(a4 + 8);
  v268 = v227;
  LODWORD(v269) = HIDWORD(a6);
  v271 = (_DWORD *)v123;
LABEL_175:
  BYTE1(v273) = 3;
  if (v148 != 2)
    LOBYTE(v273) = 1;
  HIBYTE(v273) = 1;
  v277 = v151;
  v278 = v150;
LABEL_150:
  v23 = v279;
  if (*((_DWORD *)v279 + 20))
  {
    v213 = *((_DWORD *)v279 + 20);
    if ((v213 & 0x27) != 0 && (v213 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v279 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v23 + 2))
      goto LABEL_371;
  }
  if (v276)
  {
    v136 = *(_DWORD *)(v275 + 4);
    if (!v136)
    {
      __break(0xC471u);
      JUMPOUT(0x19849987CLL);
    }
    *(_DWORD *)(v275 + 4) = v136 - 1;
    v275 = 0;
    v276 = 0;
  }
  v138 = JSC::JSObject::get((unsigned int *)a3, a1, *(_QWORD *)(*(_QWORD *)v266 + 2712), a4, a5, a6, a7, a8);
  if (!*((_DWORD *)v23 + 20))
    goto LABEL_155;
  v214 = *((_DWORD *)v23 + 20);
  if ((v214 & 0x27) != 0 && (v214 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v23 + 64), 7u, v137, a4, a5, a6, a7, a8);
  if (*((_QWORD *)v23 + 2))
  {
LABEL_371:
    v54 = 0;
  }
  else
  {
LABEL_155:
    if ((v138 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v140 = BYTE1(v273);
      goto LABEL_157;
    }
    v142 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    v143 = *(_QWORD *)(v142 + 528);
    if ((v143 & 1) != 0)
    {
      v220 = *(uint64_t (**)(JSC::VM **))(v143 & 0xFFFFFFFFFFFFFFFCLL);
      v221 = (JSC::VM **)(v142 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v142 & 8) != 0)
        v221 = (JSC::VM **)(v142 - 16);
      __dst = *v221;
      v282 = v142;
      v283 = v142 + 528;
      v143 = v220(&__dst);
    }
    if (v143 != v138
      || (v140 = BYTE1(v273), (BYTE1(v273) & 0xFE) == 2)
      || v274
      || (*(_BYTE *)(a3 + 4) & 0xEu) > 9
      || ((v144 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) + 2216), (v144 & 1) != 0)
        ? (v145 = (v144 >> 1) & 3)
        : (v145 = *(unsigned __int8 *)(v144 + 4)),
          v145 == 2))
    {
      v23 = (JSC::VM *)JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>((JSC::JSGlobalObject *)a1, a2, (JSC::JSObject *)a3, v138, a5, a6, a7, a8);
      v54 = 0;
      v146 = 0;
      goto LABEL_197;
    }
LABEL_157:
    if (!v140)
    {
      v54 = 0;
      goto LABEL_196;
    }
    if (v140 == 1)
    {
      v141 = (unint64_t)v267;
    }
    else
    {
      if (v140 == 2)
      {
        v147 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v267, (JSC::JSGlobalObject *)a1, v137, a4, a5, a6, a7, a8);
      }
      else
      {
        v152 = *(WTF::StringImpl **)(*(_QWORD *)v266 + 1768);
        v153 = (unint64_t)v271;
        v154 = *(_QWORD *)(16 * (*v271 & 0xFFFFFFFE) + 0x28);
        if ((v269 & 0x20) != 0)
          v153 = (unint64_t)v270;
        if (HIBYTE(v273) != 1)
          goto LABEL_190;
        if ((v153 & 0xFFFE000000000002) != 0)
          goto LABEL_395;
        v155 = *(unsigned int *)(16 * (*(_DWORD *)v153 & 0xFFFFFFFE) + 0x4C);
        v156 = *(_DWORD *)(16 * (*(_DWORD *)v153 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v155)
        {
          v157 = 16 * v155;
          if (v277 != (int8x16_t **)v157)
          {
            do
            {
              v157 = *(_QWORD *)(v157 + 16);
              v156 = v157 != 0;
              v158 = (int8x16_t **)v157 == v277 || v157 == 0;
            }
            while (!v158);
          }
        }
        if (!v156)
        {
LABEL_395:
          __dst = *(JSC::VM **)(a1 + 56);
          v147 = JSC::throwDOMAttributeGetterTypeError(v154, &__dst, v277, v152);
        }
        else
        {
LABEL_190:
          v147 = v267(v154);
        }
      }
      v141 = v147;
    }
    *(_QWORD *)__s = v141;
    if (*((_DWORD *)v23 + 20))
    {
      v225 = *((_DWORD *)v23 + 20);
      if ((v225 & 0x27) != 0 && (v225 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v23 + 64), 7u, v137, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v23 + 2))
        goto LABEL_371;
    }
    if (v141 < 0xFFFE000000000000)
    {
      if (v141 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase((JSC::JSObject **)__s, (JSC::JSGlobalObject *)a1, v137, a4, a5, a6, a7, a8, v139);
      else
        *(_QWORD *)&v222 = v141 - 0x2000000000000;
      v223 = trunc(v222 + 0.0);
      if (v223 <= 0.0)
      {
        v54 = 0;
      }
      else
      {
        if (v223 > 9.00719925e15)
          v223 = 9.00719925e15;
        v54 = (unint64_t)v223;
      }
    }
    else
    {
      v54 = v141 & ~((int)v141 >> 31);
    }
    if (!*((_DWORD *)v23 + 20))
      goto LABEL_196;
    v226 = *((_DWORD *)v23 + 20);
    if ((v226 & 0x27) != 0 && (v226 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v23 + 64), 7u, v137, a4, a5, a6, a7, a8);
    if (!*((_QWORD *)v23 + 2))
    {
LABEL_196:
      v146 = 1;
      goto LABEL_197;
    }
  }
  v146 = 0;
  v23 = 0;
LABEL_197:
  if (v276)
  {
    v159 = *(_DWORD *)(v275 + 4);
    if (!v159)
    {
      __break(0xC471u);
      JUMPOUT(0x19849985CLL);
    }
    *(_DWORD *)(v275 + 4) = v159 - 1;
  }
  if (v146)
  {
LABEL_37:
    v55 = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::createUninitialized((JSC::JSGlobalObject *)a1, a2, v54, a4, a5, a6, a7, a8);
    if (v55)
    {
      v32 = v55;
      v58 = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromArrayLike(v55, (JSC::JSGlobalObject *)a1, 0, (JSC::JSObject *)a3, 0, v54, v56, v57);
      goto LABEL_39;
    }
    return 0;
  }
  return (unint64_t)v23;
}

unint64_t operationNewArrayIterator(JSC::JSArrayIterator *a1, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  return JSC::JSArrayIterator::createWithInitialValues(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t operationNewMapIterator(JSC::JSMapIterator *a1, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  return JSC::JSMapIterator::createWithInitialValues(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t operationNewSetIterator(JSC::JSSetIterator *a1, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  return JSC::JSSetIterator::createWithInitialValues(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t operationCreateActivationDirect(JSC *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  return JSC::JSLexicalEnvironment::create(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

unint64_t JSC::JSLexicalEnvironment::create(JSC *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v10;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];

  v10 = a4;
  v14 = 8 * (*(_DWORD *)(a4 + 16) + 1) + 47;
  v15 = v14 & 0xFFFFFFFF0;
  if ((v14 & 0xFFFFFFFF0) <= 0x1F60 && (v16 = *(_QWORD *)((char *)a1 + ((v14 >> 1) & 0x7FFFFFFF8) + 19168)) != 0)
  {
    v17 = *(unsigned int *)(v16 + 60);
    SlowCase = *(_QWORD *)(v16 + 24);
    if (SlowCase < *(_QWORD *)(v16 + 32))
    {
LABEL_4:
      *(_QWORD *)(v16 + 24) = SlowCase + v17;
      goto LABEL_5;
    }
    SlowCase = *(_QWORD *)(v16 + 40);
    if ((SlowCase & 1) == 0)
    {
      v26 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v16 + 32) = SlowCase + HIDWORD(v26);
      *(_QWORD *)(v16 + 40) = SlowCase + (int)v26;
      goto LABEL_4;
    }
    JSC::sanitizeStackForVM(a1, a2, v15, a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, (uint64_t)a1 + 192, v17, 0, 0, v27, v28, v29);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a1 + 19080, a1, v15, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x19849A148);
    }
  }
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v19 = *((_DWORD *)a2 + 2);
  *(_DWORD *)SlowCase = (unint64_t)a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v19;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = a3;
  *(_QWORD *)(SlowCase + 24) = v10;
  v20 = *(_QWORD *)(v10 + 40);
  if ((v20 & 1) != 0)
    v21 = (v20 >> 1) & 3;
  else
    v21 = *(unsigned __int8 *)(v20 + 4);
  if (v21 != 2)
  {
    v30[0] = &off_1E3583C90;
    v30[1] = "Allocated a scope";
    JSC::InferredValue<JSC::JSScope>::notifyWriteSlow((uint64_t *)(v10 + 40), a1, v10, SlowCase, v30, a6, a7, a8, a9);
    v10 = *(_QWORD *)(SlowCase + 24);
  }
  v22 = *(_DWORD *)(v10 + 16);
  if (v22 != -1)
  {
    v23 = (v22 + 1) - 1;
    do
      *(_QWORD *)(SlowCase + 32 + 8 * v23) = a5;
    while ((unint64_t)v23--);
  }
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return SlowCase;
}

unint64_t operationCreateDirectArguments(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t vars0;

  v8 = a3;
  *(_QWORD *)(a1 + 40) = vars0;
  if (a3 <= a4)
    v11 = a4;
  else
    v11 = a3;
  v12 = JSC::allocateCell<JSC::DirectArguments>((JSC *)a1, (JSC::VM *)(8 * v11 + 48), a3, a4, a5, a6, a7, a8);
  v13 = v12;
  v14 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v12 = a2 >> 4;
  *(_DWORD *)(v12 + 4) = v14;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 32) = v8;
  *(_DWORD *)(v12 + 36) = v11;
  *(_QWORD *)(v12 + 40) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  if (v11)
    memset_pattern16((void *)(v12 + 48), &memset_pattern_3, 8 * v11);
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v13 + 7))
    JSC::Heap::writeBarrierSlowPath(a1 + 192, v13);
  return v13;
}

unint64_t operationCreateScopedArguments(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unint64_t SlowCase;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  JSC *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  JSC::VM *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t vars0;

  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v8 + 40) = vars0;
  v9 = *(_QWORD *)(*(_QWORD *)(a6 + 24) + 32);
  if (v9)
    *(_BYTE *)(v9 + 12) = 1;
  v10 = *(_DWORD *)(v9 + 8);
  v11 = a4 >= v10;
  v12 = a4 - v10;
  if (v12 == 0 || !v11)
  {
    SlowCase = 0;
    goto LABEL_5;
  }
  v20 = (JSC::VM *)a2;
  v21 = a5;
  v22 = a6;
  v23 = a4;
  v24 = a3;
  v25 = 8 * v12;
  if (v12 <= 0x3EC)
  {
    v26 = *(_QWORD *)(v8 + (((unint64_t)(v25 + 15) >> 1) & 0x7FFFFFFF8) + 6736);
    if (v26)
    {
      v27 = *(unsigned int *)(v26 + 60);
      v28 = *(_QWORD *)(v26 + 24);
      if (v28 >= *(_QWORD *)(v26 + 32))
      {
        v49 = *(_QWORD *)(v26 + 40);
        if ((v49 & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v8, (JSC::VM *)a2, v25, a4, a5, a6, a7, a8);
          SlowCase = JSC::LocalAllocator::allocateSlowCase(v26, v8 + 192, v27, 0, 0, v51, v52, v53);
          goto LABEL_18;
        }
        SlowCase = *(_QWORD *)(v26 + 40);
        v50 = *(_QWORD *)(v49 + 8) ^ *(_QWORD *)(v26 + 48);
        *(_QWORD *)(v26 + 32) = SlowCase + HIDWORD(v50);
        *(_QWORD *)(v26 + 40) = SlowCase + (int)v50;
        v29 = SlowCase + v27;
      }
      else
      {
        SlowCase = *(_QWORD *)(v26 + 24);
        v29 = v28 + v27;
      }
      *(_QWORD *)(v26 + 24) = v29;
LABEL_18:
      a3 = v24;
      a4 = v23;
      a6 = v22;
      a5 = v21;
      a2 = (unint64_t)v20;
      goto LABEL_5;
    }
  }
  SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v8 + 6648, (JSC *)v8, v25, 0, a5, a6, a7, a8);
  a3 = v24;
  a4 = v23;
  a6 = v22;
  a5 = v21;
  a2 = (unint64_t)v20;
  if (!SlowCase)
  {
    __break(0xC471u);
    JUMPOUT(0x19849A544);
  }
LABEL_5:
  v14 = v8 + 192;
  v15 = *(_QWORD *)(v8 + 39520);
  if (v15 < *(_QWORD *)(v8 + 39528))
  {
LABEL_6:
    *(_QWORD *)(v8 + 39520) = v15 + 64;
    goto LABEL_7;
  }
  v15 = *(_QWORD *)(v8 + 39536);
  if ((v15 & 1) == 0)
  {
    v19 = *(_QWORD *)(v15 + 8) ^ *(_QWORD *)(v8 + 39544);
    *(_QWORD *)(v8 + 39528) = v15 + HIDWORD(v19);
    *(_QWORD *)(v8 + 39536) = v15 + (int)v19;
    goto LABEL_6;
  }
  v36 = v8 + 39496;
  v37 = SlowCase;
  v38 = (JSC *)v8;
  v39 = v8;
  v40 = a3;
  v41 = a4;
  v42 = a6;
  v43 = a5;
  v44 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM(v38, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  v48 = JSC::LocalAllocator::allocateSlowCase(v36, v14, 64, 0, 0, v45, v46, v47);
  a2 = (unint64_t)v44;
  a5 = v43;
  a6 = v42;
  LODWORD(a4) = v41;
  a3 = v40;
  v8 = v39;
  v15 = v48;
  SlowCase = v37;
LABEL_7:
  *(_DWORD *)v15 = 0;
  v16 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v15 = a2 >> 4;
  *(_DWORD *)(v15 + 4) = v16;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_WORD *)(v15 + 24) = 0;
  *(_DWORD *)(v15 + 28) = a4;
  *(_QWORD *)(v15 + 32) = a5;
  *(_QWORD *)(v15 + 40) = v9;
  *(_QWORD *)(v15 + 48) = a6;
  *(_QWORD *)(v15 + 56) = SlowCase;
  if (*(_BYTE *)(v8 + 755))
    __dmb(0xAu);
  v17 = *(unsigned int *)(v9 + 8);
  if (a4 > v17)
  {
    v30 = 0;
    v31 = a4 - v17;
    v32 = a3 + 8 * v17;
    do
    {
      v33 = *(_QWORD *)(v32 + 8 * v30);
      v34 = v15;
      *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v30) = v33;
      if (v33)
        v35 = (v33 & 0xFFFE000000000002) == 0;
      else
        v35 = 0;
      if (v35 && *(_DWORD *)(v8 + 760) >= *(unsigned __int8 *)(v15 + 7))
        JSC::Heap::writeBarrierSlowPath(v14, v15);
      ++v30;
      v15 = v34;
    }
    while (v31 != (_DWORD)v30);
  }
  return v15;
}

unint64_t operationCreateClonedArguments(JSC::VM *a1, JSC::JSGlobalObject *a2, uint64_t a3, JSC::JSFunction *a4, JSC::Structure *a5, uint64_t a6, JSC::Butterfly *a7, uint64_t a8, __n128 a9)
{
  int v9;
  JSC::ClonedArguments *v12;
  unint64_t Empty;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t vars0;

  v9 = (int)a4;
  v12 = (JSC::ClonedArguments *)*((_QWORD *)a1 + 7);
  *((_QWORD *)v12 + 5) = vars0;
  Empty = JSC::ClonedArguments::createEmpty(v12, a1, a2, a5, a4, a6, a7, a8, a9);
  v19 = Empty;
  if (v9 && Empty)
  {
    v20 = (v9 - 1);
    v21 = (unint64_t *)(a3 + 8 * v20);
    do
    {
      v22 = *v21--;
      JSC::JSObject::putDirectIndex(v19, (unint64_t)a1, (JSC::VM *)v20, v22, v14, v15, v16, v17, v18);
      v20 = (v20 - 1);
    }
    while ((_DWORD)v20 != -1);
  }
  return v19;
}

unint64_t operationCreateDirectArgumentsDuringExit(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  JSC::Structure *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v11 = a1 + 192;
  ++*(_DWORD *)(a1 + 916);
  v12 = (uint64_t *)(a2 + 8);
  if (!a2)
    v12 = (uint64_t *)(vars0 + 16);
  v13 = *v12;
  v14 = (JSC::Structure *)(a4 - 1);
  v15 = *(_DWORD *)(v13 + 28) - 1;
  if (v14 <= v15)
    v16 = v15;
  else
    v16 = v14;
  v17 = *(_DWORD *)(*(_QWORD *)(v13 + 8) + 836);
  if (v17)
    v18 = 16 * (v17 & 0xFFFFFFFE);
  else
    v18 = 0;
  v19 = JSC::DirectArguments::create((JSC::DirectArguments *)a1, v18, v14, v16, a5, a6, a7, a8);
  v20 = v19;
  *(_QWORD *)(v19 + 24) = a3;
  if (a3 && v19 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v19 + 7))
    JSC::Heap::writeBarrierSlowPath(v11, v19);
  if (a2)
  {
    v21 = *(_QWORD *)(a2 + 24);
    *((_QWORD *)&v23 + 1) = (16 * v21) >> 56;
    *(_QWORD *)&v23 = v21 << 12;
    v22 = v23 >> 44;
    if (!(_DWORD)v14)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    if (!(_DWORD)v14)
      goto LABEL_24;
  }
  v24 = vars0 + 8 * v22 + 48;
  v25 = (_DWORD)v14 - 1;
  do
  {
    v26 = *(_QWORD *)(v24 + 8 * v25);
    *(_QWORD *)(v20 + 48 + 8 * v25) = v26;
    if (v26)
      v27 = (v26 & 0xFFFE000000000002) == 0;
    else
      v27 = 0;
    if (v27 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v20 + 7))
      JSC::Heap::writeBarrierSlowPath(v11, v20);
  }
  while ((unint64_t)v25--);
LABEL_24:
  --*(_DWORD *)(a1 + 916);
  return v20;
}

unint64_t operationCreateClonedArgumentsDuringExit(uint64_t a1, uint64_t a2, JSC::Structure *a3, int a4, __n128 a5, uint64_t a6, uint64_t a7, JSC::Butterfly *a8, uint64_t a9)
{
  uint64_t v13;
  unint64_t v14;
  int v15;
  JSC::JSGlobalObject *v16;
  unint64_t Empty;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  __int128 v30;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  ++*(_DWORD *)(a1 + 916);
  v13 = vars0 + 16;
  if (a2)
    v13 = a2 + 8;
  v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
  v15 = *(_DWORD *)(v14 + 844);
  if (v15)
    v16 = (JSC::JSGlobalObject *)(16 * (v15 & 0xFFFFFFFE));
  else
    v16 = 0;
  Empty = JSC::ClonedArguments::createEmpty((JSC::ClonedArguments *)a1, 0, v16, a3, (JSC::JSFunction *)(a4 - 1), 0, a8, a9, a5);
  if (!Empty)
    JSC::handleResourceExhaustion("./dfg/DFGOperations.cpp", 2309, "JSC::OperationReturnType<JSCell *> JSC::DFG::operationCreateClonedArgumentsDuringExit(VM *, InlineCallFrame *, JSFunction *, uint32_t)", "result", (WTF *)0x1F, "MemoryExhaustion", "Crash intentionally because memory is exhausted.");
  v23 = Empty;
  if (a2)
  {
    v29 = *(_QWORD *)(a2 + 24);
    *((_QWORD *)&v30 + 1) = (16 * v29) >> 56;
    *(_QWORD *)&v30 = v29 << 12;
    v24 = v30 >> 44;
  }
  else
  {
    v24 = 0;
  }
  if (a4 != 1)
  {
    v25 = (a4 - 2);
    v26 = (unint64_t *)(8 * v24 + 8 * v25 + vars0 + 48);
    do
    {
      v27 = *v26--;
      JSC::JSObject::putDirectIndex(v23, v14, (JSC::VM *)v25, v27, v18, v19, v20, v21, v22);
      v25 = (v25 - 1);
    }
    while ((_DWORD)v25 != -1);
  }
  --*(_DWORD *)(a1 + 916);
  return v23;
}

unint64_t operationCreateRest(uint64_t a1, uint64_t a2, unsigned int a3, const JSC::JSValue *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::JSGlobalObject *v9;
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  v8 = *(_DWORD *)(a1 + 908);
  if (v8)
    v9 = (JSC::JSGlobalObject *)(16 * (v8 & 0xFFFFFFFE));
  else
    v9 = 0;
  return JSC::constructArray((JSC *)a1, v9, (JSC::Structure *)(a2 + 8 * a3), a4, a5, a6, a7, a8);
}

uint64_t operationTypeOfIsObject(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD var28[6];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var28[5];
  if ((a2 & 0xFFFE000000000002) != 0)
    return a2 == 2;
  v2 = *(unsigned __int8 *)(a2 + 5);
  if (v2 <= 0x16)
    return a2 == 2;
  if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0xA) & 1) != 0
    && *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) == a1)
  {
    return 0;
  }
  if ((v2 & 0xFE) == 0x1A)
    return 0;
  if ((*(_BYTE *)(a2 + 6) & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(var28, a2);
    if (LOBYTE(var28[0]))
      return 0;
  }
  return 1;
}

BOOL operationTypeOfIsFunction(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD var28[6];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var28[5];
  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned __int8 *)(a2 + 5);
  if (v2 < 0x17
    || (*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0xA) & 1) != 0
    && *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) == a1)
  {
    return 0;
  }
  if ((v2 & 0xFE) == 0x1A)
    return 1;
  if ((*(_BYTE *)(a2 + 6) & 4) == 0)
    return 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                        + 0x38))(var28, a2);
  return LOBYTE(var28[0]) != 0;
}

BOOL operationObjectIsCallable(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD var28[6];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var28[5];
  v2 = *(unsigned __int8 *)(a2 + 5);
  if (v2 < 0x17)
    return 0;
  if ((v2 & 0xFE) == 0x1A)
    return 1;
  if ((*(_BYTE *)(a2 + 6) & 4) == 0)
    return 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                        + 0x38))(var28, a2);
  return LOBYTE(var28[0]) != 0;
}

BOOL operationIsConstructor(uint64_t a1, uint64_t a2)
{
  _QWORD var18[4];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var18[3];
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) < 0x17u)
    return 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                        + 0x40))(var18, a2);
  return LOBYTE(var18[0]) != 0;
}

BOOL JSC::JSValue::isConstructor(JSC::JSValue *this)
{
  uint64_t v1;
  _QWORD v3[3];

  v1 = *(_QWORD *)this;
  if ((v1 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v1 + 5) < 0x17u)
    return 0;
  (*(void (**)(_QWORD *__return_ptr))(16 * *(unsigned int *)(16 * (*(_DWORD *)v1 & 0xFFFFFFFE) + 0x4C)
                                               + 0x40))(v3);
  return LOBYTE(v3[0]) != 0;
}

uint64_t operationTypeOfObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD var28[6];

  v2 = *(_QWORD *)(a1 + 56);
  v3 = v2 + 42000;
  *(_QWORD *)(v2 + 40) = var28[5];
  if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0xA) & 1) != 0
    && *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) == a1)
  {
    v3 = v2 + 42032;
  }
  else
  {
    v4 = *(unsigned __int8 *)(a2 + 5);
    if (v4 < 0x17
      || (v4 & 0xFE) != 0x1A
      && ((*(_BYTE *)(a2 + 6) & 4) == 0
       || ((*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0x38))(var28, a2), !LOBYTE(var28[0]))))
    {
      v3 = v2 + 42024;
    }
  }
  return *(_QWORD *)v3;
}

uint64_t operationAllocateSimplePropertyStorageWithInitialCapacity(JSC *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  v9 = *((_QWORD *)a1 + 844);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 60);
    SlowCase = *(_QWORD *)(v9 + 24);
    if (SlowCase >= *(_QWORD *)(v9 + 32))
    {
      SlowCase = *(_QWORD *)(v9 + 40);
      if ((SlowCase & 1) != 0)
      {
        v14 = (uint64_t)a1 + 192;
        JSC::sanitizeStackForVM(a1, a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v9, v14, v10, 0, 0, v15, v16, v17);
        return SlowCase + 40;
      }
      v13 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v9 + 48);
      *(_QWORD *)(v9 + 32) = SlowCase + HIDWORD(v13);
      *(_QWORD *)(v9 + 40) = SlowCase + (int)v13;
    }
    *(_QWORD *)(v9 + 24) = SlowCase + v10;
    return SlowCase + 40;
  }
  SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a1 + 6648, a1, 0x20uLL, 0, a5, a6, a7, a8);
  if (SlowCase)
    return SlowCase + 40;
  result = 110;
  __break(0xC471u);
  return result;
}

uint64_t operationAllocateSimplePropertyStorage(JSC *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t SlowCase;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  v10 = 8 * (_QWORD)a2;
  if ((unint64_t)(8 * (_QWORD)a2) <= 0x1F60
    && (v11 = *((_QWORD *)a1 + ((unint64_t)(v10 + 15) >> 4) + 842)) != 0)
  {
    v12 = *(unsigned int *)(v11 + 60);
    SlowCase = *(_QWORD *)(v11 + 24);
    if (SlowCase >= *(_QWORD *)(v11 + 32))
    {
      SlowCase = *(_QWORD *)(v11 + 40);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM(a1, a2, v10, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v11, (uint64_t)a1 + 192, v12, 0, 0, v16, v17, v18);
        return SlowCase + 8 * (_QWORD)a2 + 8;
      }
      v15 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 48);
      *(_QWORD *)(v11 + 32) = SlowCase + HIDWORD(v15);
      *(_QWORD *)(v11 + 40) = SlowCase + (int)v15;
    }
    *(_QWORD *)(v11 + 24) = SlowCase + v12;
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a1 + 6648, a1, v10, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x19849AE70);
    }
  }
  return SlowCase + 8 * (_QWORD)a2 + 8;
}

unint64_t operationAllocateComplexPropertyStorageWithInitialCapacity(JSC *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t Slow;
  uint64_t *v23;
  unint64_t SlowCase;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  __n128 *v28;
  uint64_t v30;
  uint64_t v31;
  __n128 *v32;
  __n128 *v33;
  __n128 *v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
    v30 = *((_QWORD *)a1 + 844);
    if (v30)
    {
      v31 = *(unsigned int *)(v30 + 60);
      SlowCase = *(_QWORD *)(v30 + 24);
      if (SlowCase >= *(_QWORD *)(v30 + 32))
      {
        v32 = *(__n128 **)(v30 + 40);
        if ((v32 & 1) == 0)
        {
          v40 = v32->n128_u64[1] ^ *(_QWORD *)(v30 + 48);
          *(_QWORD *)(v30 + 32) = (char *)v32 + HIDWORD(v40);
          *(_QWORD *)(v30 + 40) = (char *)v32 + (int)v40;
          *(_QWORD *)(v30 + 24) = (char *)v32 + v31;
          SlowCase = (unint64_t)v32;
LABEL_29:
          v33 = v32 + 2;
          v34 = v32;
          a9.n128_u64[0] = 0;
          while (v32 != v34)
          {
            *v32 = a9;
            v32[1] = a9;
            v32[2] = a9;
            v32[3] = a9;
            v32 += 4;
          }
          while (v32 != v33)
          {
            v32->n128_u64[0] = 0;
            v32 = (__n128 *)((char *)v32 + 8);
          }
          return SlowCase + 40;
        }
        JSC::sanitizeStackForVM(a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v30, (uint64_t)a1 + 192, v31, 0, 1, v48, v49, v50);
      }
      else
      {
        *(_QWORD *)(v30 + 24) = SlowCase + v31;
      }
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a1 + 6648, a1, 0x20uLL, 0, a5, a6, a7, a8);
    }
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x19849B258);
    }
    v32 = (__n128 *)SlowCase;
    goto LABEL_29;
  }
  v11 = *(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
  v12 = v11 & 0xE;
  if (v12 >= 0xA)
    v13 = *(unsigned int *)(v10 + 8);
  else
    v13 = 0;
  v14 = v11 & 0xF;
  if ((v14 - 3) >= 7)
  {
    if ((v14 - 10) >= 4)
    {
      v15 = 0;
      if (v12)
        goto LABEL_7;
      goto LABEL_37;
    }
    v15 = 8 * *(unsigned int *)(v10 - 4) + 16;
  }
  else
  {
    v15 = 8 * *(unsigned int *)(v10 - 4);
  }
  if (v12)
  {
LABEL_7:
    v16 = 8 * v13 + 32;
    goto LABEL_8;
  }
LABEL_37:
  if (*(unsigned __int8 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 9) - 39 >= 0xB)
  {
    v17 = 0;
    v16 = 8 * v13 + 32;
    goto LABEL_9;
  }
  v16 = 8 * v13 + 32;
  if ((*(_BYTE *)(a2 + 40) & 0x40) == 0)
  {
    v17 = 0;
    goto LABEL_9;
  }
LABEL_8:
  v17 = 8;
LABEL_9:
  v18 = v17 + v15;
  v19 = v17 + v15 + v16;
  if (v19 > 0x1F60 || (v20 = *(_QWORD *)((char *)a1 + (((v19 + 15) >> 1) & 0x3FFFFFFFF8) + 6736)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a1 + 6648, a1, v19, 0, a5, a6, a7, a8);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x19849B144);
    }
    goto LABEL_13;
  }
  v21 = *(unsigned int *)(v20 + 60);
  Slow = *(_QWORD *)(v20 + 24);
  if (Slow >= *(_QWORD *)(v20 + 32))
  {
    Slow = *(_QWORD *)(v20 + 40);
    if ((Slow & 1) != 0)
    {
      v51 = v15;
      v52 = *(_QWORD *)(a2 + 8);
      v41 = v13;
      v42 = v20;
      v15 = *(unsigned int *)(v20 + 60);
      JSC::sanitizeStackForVM(a1, (JSC::VM *)a2, v19, a4, a5, a6, a7, a8);
      v43 = v42;
      v13 = v41;
      v44 = v15;
      LOBYTE(v15) = v51;
      v10 = v52;
      Slow = JSC::LocalAllocator::allocateSlowCase(v43, (uint64_t)a1 + 192, v44, 0, 0, v45, v46, v47);
      goto LABEL_13;
    }
    v39 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v20 + 48);
    *(_QWORD *)(v20 + 32) = Slow + HIDWORD(v39);
    *(_QWORD *)(v20 + 40) = Slow + (int)v39;
  }
  *(_QWORD *)(v20 + 24) = Slow + v21;
LABEL_13:
  if ((v15 & 7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19849B17CLL);
  }
  v23 = (uint64_t *)(v10 - 8);
  SlowCase = Slow + 8 * v13;
  v25 = SlowCase + 32;
  if (v18 > 0xF0)
  {
    v35 = v18 + v25;
    v36 = (v18 & 0x1FFFFFFFE0) + v25;
    while (v25 != v36)
    {
      a9 = *(__n128 *)v23;
      v37 = *((_OWORD *)v23 + 1);
      v23 += 4;
      *(__n128 *)v25 = a9;
      *(_OWORD *)(v25 + 16) = v37;
      v25 += 32;
    }
    while (v25 != v35)
    {
      v38 = *v23++;
      *(_QWORD *)v25 = v38;
      v25 += 8;
    }
  }
  else if (v18 >= 8)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      *(_QWORD *)(v25 + 8 * v26) = v23[v26];
      v26 = v27++;
    }
    while (v18 >> 3 > v26);
  }
  v28 = (__n128 *)SlowCase;
  a9.n128_u64[0] = 0;
  while (v28 != (__n128 *)SlowCase)
  {
    *v28 = a9;
    v28[1] = a9;
    v28[2] = a9;
    v28[3] = a9;
    v28 += 4;
  }
  while (v28 != (__n128 *)(SlowCase + 32))
  {
    v28->n128_u64[0] = 0;
    v28 = (__n128 *)((char *)v28 + 8);
  }
  return SlowCase + 40;
}

unint64_t operationAllocateComplexPropertyStorage(JSC::VM *a1, JSC::JSObject *a2, unint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;
  unint64_t v11;
  unsigned int v13;
  unsigned int v14;
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  v10 = *(unsigned __int16 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x18);
  if (v10 == 65534)
    goto LABEL_5;
  if (v10 == 0xFFFF)
    v10 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x40) + 84);
  if (v10 < 64)
  {
LABEL_5:
    v11 = 0;
  }
  else if ((v10 - 63) >= 5)
  {
    v13 = (v10 - 64) | ((v10 - 64) >> 1) | (((v10 - 64) | ((v10 - 64) >> 1)) >> 2);
    v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
    v11 = (v14 | HIWORD(v14)) + 1;
  }
  else
  {
    v11 = 4;
  }
  return JSC::JSObject::allocateMoreOutOfLineStorage(a2, a1, v11, a3, a6, a7, a8, a9, a4);
}

unsigned int *operationEnsureInt32(JSC::VM *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  if (*(unsigned __int8 *)(a2 + 5) < 0x17u)
    return 0;
  if ((*(_BYTE *)(a2 + 4) & 0x1E) == 4)
    return *(unsigned int **)(a2 + 8);
  return JSC::JSObject::tryMakeWritableInt32Slow((unsigned int *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
}

unsigned int *operationEnsureDouble(JSC::VM *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  if (*(unsigned __int8 *)(a2 + 5) < 0x17u)
    return 0;
  if ((*(_BYTE *)(a2 + 4) & 0x1E) == 6)
    return *(unsigned int **)(a2 + 8);
  return JSC::JSObject::tryMakeWritableDoubleSlow((JSC::JSObject *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
}

unsigned int *operationEnsureContiguous(JSC::VM *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  if (*(unsigned __int8 *)(a2 + 5) < 0x17u)
    return 0;
  if ((*(_BYTE *)(a2 + 4) & 0x1E) == 8)
    return *(unsigned int **)(a2 + 8);
  return JSC::JSObject::tryMakeWritableContiguousSlow((JSC::JSObject *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
}

JSC::Butterfly *operationEnsureArrayStorage(JSC::VM *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  if (*(unsigned __int8 *)(a2 + 5) < 0x17u)
    return 0;
  if ((*(_BYTE *)(a2 + 4) & 0xEu) < 0xA)
    return JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
  return *(JSC::Butterfly **)(a2 + 8);
}

uint64_t operationHasIndexedProperty(uint64_t a1, unint64_t a2, unint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int hasProperty;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  const JSC::PropertyTable *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *var28[6];

  v10 = *(_QWORD *)(a1 + 56);
  *(WTF::StringImpl **)(v10 + 40) = var28[5];
  if (*(unsigned __int8 *)(a2 + 5) <= 0x16u)
    a2 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, (JSC::SymbolObject **)a1, a3, a4, a5, a6, a7, a8);
  if ((a3 & 0x80000000) == 0)
    return JSC::JSObject::hasProperty((JSC::JSObject *)a2, (JSC::JSGlobalObject *)a1, a3);
  if ((_DWORD)a3 == -1)
  {
    if ((*(_BYTE *)(a2 + 5) & 0xFE) == 0x24 && a2 != 0)
    {
      v15 = *(_QWORD **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
      v16 = v15[288];
      v17 = (v16 & 1) != 0 ? (v16 >> 1) & 3 : *(unsigned __int8 *)(v16 + 4);
      if (v17 != 2)
      {
        v18 = v15[287];
        v19 = (v18 & 1) != 0 ? (v18 >> 1) & 3 : *(unsigned __int8 *)(v18 + 4);
        if (v19 != 2)
        {
          v20 = *(unsigned __int8 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
          v21 = (v20 & 0x10) != 0 ? ((v20 & 0xE) + 10) >> 1 : (v20 >> 1) & 7;
          v22 = *((_DWORD *)v15 + v21 + 213);
          v23 = v22 ? 16 * (v22 & 0xFFFFFFFE) : 0;
          if (v23 == 16 * (*(_DWORD *)a2 & 0xFFFFFFFE))
            return 0;
          v46 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
          if (!v46)
            v46 = *(_QWORD *)(a2 + 16);
          if (v46 == v15[84] && !*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x20))
            return 0;
        }
      }
    }
    return JSC::JSObject::hasProperty(a2, a1, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 40), a4, a5, a6, a7, a8);
  }
  v24 = a2;
  JSC::Identifier::from((uint64_t **)v10, a3, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)var28);
  hasProperty = JSC::JSObject::hasProperty(v24, a1, (unint64_t)var28[0], v25, v26, v27, v28, v29);
  v37 = var28[0];
  var28[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  return hasProperty;
}

uint64_t operationHasEnumerableIndexedProperty(uint64_t a1, uint64_t a2, unint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  JSC::JSObject *v12;
  unsigned int hasEnumerableProperty;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *var28[6];

  v11 = *(_QWORD *)(a1 + 56);
  *(WTF::StringImpl **)(v11 + 40) = var28[5];
  v12 = (JSC::JSObject *)a2;
  if (*(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v12 = (JSC::JSObject *)JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, (JSC::SymbolObject **)a1, a3, a4, a5, a6, a7, a8);
    if ((a3 & 0x80000000) == 0)
      return JSC::JSObject::hasEnumerableProperty(v12, (JSC::JSGlobalObject *)a1, a3);
  }
  else if ((a3 & 0x80000000) == 0)
  {
    return JSC::JSObject::hasEnumerableProperty(v12, (JSC::JSGlobalObject *)a1, a3);
  }
  if ((_DWORD)a3 == -1)
  {
    if ((*(_BYTE *)(a2 + 5) & 0xFE) == 0x24)
    {
      v16 = *(_QWORD **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
      v17 = v16[288];
      v18 = (v17 & 1) != 0 ? (v17 >> 1) & 3 : *(unsigned __int8 *)(v17 + 4);
      if (v18 != 2)
      {
        v19 = v16[287];
        v20 = (v19 & 1) != 0 ? (v19 >> 1) & 3 : *(unsigned __int8 *)(v19 + 4);
        if (v20 != 2)
        {
          v21 = *(unsigned __int8 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
          v22 = (v21 & 0x10) != 0 ? ((v21 & 0xE) + 10) >> 1 : (v21 >> 1) & 7;
          v23 = *((_DWORD *)v16 + v22 + 213);
          v24 = v23 ? 16 * (v23 & 0xFFFFFFFE) : 0;
          if (v24 == 16 * (*(_DWORD *)a2 & 0xFFFFFFFE))
            return 0;
          v47 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
          if (!v47)
            v47 = *(_QWORD *)(a2 + 16);
          if (v47 == v16[84] && !*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x20))
            return 0;
        }
      }
    }
    return JSC::JSObject::hasProperty((unint64_t)v12, a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 40), a4, a5, a6, a7, a8);
  }
  v25 = (unint64_t)v12;
  JSC::Identifier::from((uint64_t **)v11, a3, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)var28);
  hasEnumerableProperty = JSC::JSObject::hasEnumerableProperty(v25, a1, (unint64_t)var28[0], v26, v27, v28, v29, v30);
  v38 = var28[0];
  var28[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  return hasEnumerableProperty;
}

unint64_t operationGetPropertyEnumerator(JSC::JSGlobalObject *a1, unint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  int v20;
  int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  unsigned int *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  JSC::VM *v36;
  unint64_t i;
  unsigned int v38;
  uint64_t v39;
  JSC::JSObject *v40;
  int v41;
  JSC::VM *v42;
  BOOL v43;
  unint64_t v44;
  JSC::StructureChain *v45;
  _DWORD *v46;
  uint64_t v47;
  WTF *v48;
  JSC::VM *v50;
  unsigned int *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  JSC::VM *v57;
  unint64_t v58;
  uint64_t v59;
  WTF::StringImpl **v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  JSC::Structure *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int v87;
  int v88;
  uint64_t v89;
  _QWORD *v90;
  unsigned int v91;
  unsigned int v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  WTF *v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  unsigned int v103[2];
  uint64_t vars0;

  v8 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v8 + 40) = vars0;
  v98 = a2;
  if ((a2 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v9 = a2;
    if ((a2 & 0xFFFE000000000002) != 0)
    {
      v73 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v98, a1, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else
    {
      if (*(unsigned __int8 *)(a2 + 5) > 0x16u)
      {
LABEL_4:
        if (*(_DWORD *)(v8 + 80))
        {
          v87 = *(_DWORD *)(v8 + 80);
          if ((v87 & 0x27) != 0 && (v87 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v8 + 16))
            return 0;
        }
        v11 = *((_QWORD *)a1 + 7);
        if ((*(_BYTE *)(v9 + 4) & 0xFu) >= 2)
        {
          switch(*(_BYTE *)(v9 + 4) & 0xF)
          {
            case 3:
              goto LABEL_6;
            case 4:
            case 5:
            case 8:
            case 9:
              v74 = *(_QWORD **)(v9 + 8);
              LODWORD(v75) = *((_DWORD *)v74 - 2);
              if (!(_DWORD)v75)
                goto LABEL_6;
              v76 = *((unsigned int *)v74 - 2);
              v77 = (JSC::Structure *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE));
              if (*((_BYTE *)v77 + 9) == 36)
              {
                v78 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28);
                v79 = *(unsigned __int8 *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 8);
                v80 = (v79 >> 1) & 7;
                if ((v79 & 0x10) != 0)
                  v80 = ((v79 & 0xE) + 10) >> 1;
                v81 = *(_DWORD *)(v78 + 4 * v80 + 852);
                if (v81)
                  v82 = 16 * (v81 & 0xFFFFFFFE);
                else
                  v82 = 0;
                if ((JSC::Structure *)v82 == v77)
                {
                  v83 = *(_QWORD *)(v78 + 2304);
                  v84 = (v83 & 1) != 0 ? (v83 >> 1) & 3 : *(unsigned __int8 *)(v83 + 4);
                  if (v84 != 2)
                    goto LABEL_120;
                }
              }
              else
              {
                LOBYTE(v79) = *(_BYTE *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 8);
              }
              if ((v79 & 0x20) != 0)
                goto LABEL_6;
              v85 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28);
              if (v85)
              {
                if (*(_BYTE *)(*(_QWORD *)(v85 + 2048) + 4) == 2)
                  goto LABEL_6;
              }
              if ((JSC::Structure::holesMustForwardToPrototypeSlow(v77, (JSC::JSObject *)v9) & 1) != 0)
                goto LABEL_6;
              do
              {
LABEL_120:
                if (!*v74++)
                  goto LABEL_6;
                --v76;
              }
              while (v76);
              goto LABEL_122;
            case 6:
            case 7:
              v96 = *(_QWORD *)(v9 + 8);
              v75 = *(unsigned int *)(v96 - 8);
              if (!(_DWORD)v75
                || (JSC::Structure::holesMustForwardToPrototype((JSC::Structure *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE)), (JSC::JSObject *)v9) & 1) != 0)
              {
                goto LABEL_6;
              }
              v97 = v75;
              do
              {
                v96 += 8;
                --v97;
              }
              while (v97);
              goto LABEL_122;
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
              v90 = *(_QWORD **)(v9 + 8);
              if (*v90)
                goto LABEL_6;
              v91 = *((_DWORD *)v90 - 2);
              v92 = *((_DWORD *)v90 - 1);
              v75 = v92 >= v91 ? v91 : v92;
              if (!(_DWORD)v75
                || (JSC::Structure::holesMustForwardToPrototype((JSC::Structure *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE)), (JSC::JSObject *)v9) & 1) != 0)
              {
                goto LABEL_6;
              }
              v93 = v90 + 2;
              v94 = v75;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x19849BF30);
          }
          while (*v93++)
          {
            if (!--v94)
            {
LABEL_122:
              v103[1] = v75;
              v13 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
              goto LABEL_27;
            }
          }
        }
LABEL_6:
        v103[1] = 0;
        v12 = *(_DWORD *)v9 & 0xFFFFFFFE;
        v13 = 16 * v12;
        v14 = *(_QWORD *)(16 * v12 + 0x40);
        if (!v14)
          goto LABEL_27;
        if (*(_BYTE *)(v14 + 5) == 1)
          goto LABEL_27;
        v15 = *(_QWORD *)(v14 + 8);
        if (!v15)
          goto LABEL_27;
        if ((v15 & 1) == 0)
          return v15;
        v16 = *(_QWORD *)(16 * v12 + 0x38);
        v17 = *(unsigned __int8 *)(16 * v12 + 9);
        if (v16)
        {
          if (v17 < 0x17)
          {
            if (v17 == 2)
            {
              v18 = *((_QWORD *)a1 + 149);
            }
            else if (v17 == 3)
            {
              v18 = *((_QWORD *)a1 + 151);
            }
            else
            {
              v18 = *((_QWORD *)a1 + 152);
            }
          }
          else
          {
            v18 = *(_QWORD *)(16 * v12 + 0x30);
            if (!v18)
              v18 = *(_QWORD *)(v9 + 16);
          }
          v19 = *(int **)(v16 + 8);
          v20 = *v19;
          if (*v19)
          {
            v21 = v19 + 1;
            while (v18 != 2 && *(_DWORD *)v18 == v20)
            {
              v22 = *(_QWORD *)(16 * (v20 & 0xFFFFFFFE) + 0x30);
              if (!v22)
                v22 = *(_QWORD *)(v18 + 16);
              v23 = *v21++;
              v20 = v23;
              v18 = v22;
              if (!v23)
                goto LABEL_23;
            }
          }
          else
          {
            v22 = v18;
LABEL_23:
            if (v22 == 2)
            {
LABEL_24:
              v24 = *(_QWORD *)(16 * v12 + 0x40);
              if (v24)
              {
                if (*(_BYTE *)(v24 + 5) != 1)
                {
                  v15 = *(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFFELL;
                  if (v15)
                    return v15;
                }
              }
LABEL_27:
              v103[0] = 0;
              v25 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
              *(_DWORD *)v25 = 1;
              *((_QWORD *)v25 + 1) = (char *)v25 + 24;
              *((_QWORD *)v25 + 2) = 20;
              v99 = v25;
              v100 = 0;
              v101 = v11;
              v102 = 258;
              JSC::getEnumerablePropertyNames(a1, (JSC::JSGlobalObject *)v9, (JSC::JSObject *)&v99, (JSC::PropertyNameArray *)&v103[1], v103, v26);
              if (*(_DWORD *)(v11 + 80))
              {
                v88 = *(_DWORD *)(v11 + 80);
                if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v28, v29, v30, v31, v32, v33);
                if (*(_QWORD *)(v11 + 16))
                {
                  v15 = 0;
LABEL_61:
                  if (v100)
                    WTF::fastFree(v100 - 16, v27, v28, v29, v30, v31, v32, v33);
                  v48 = v99;
                  v99 = 0;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 1)
                    {
                      v59 = *((unsigned int *)v48 + 5);
                      if ((_DWORD)v59)
                      {
                        v60 = (WTF::StringImpl **)*((_QWORD *)v48 + 1);
                        v61 = 8 * v59;
                        do
                        {
                          v62 = *v60;
                          *v60 = 0;
                          if (v62)
                          {
                            if (*(_DWORD *)v62 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v62, (WTF::AtomStringImpl *)v27, v28, v29, v30, v31, v32, v33);
                              WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
                            }
                            else
                            {
                              *(_DWORD *)v62 -= 2;
                            }
                          }
                          ++v60;
                          v61 -= 8;
                        }
                        while (v61);
                      }
                      v71 = *((_QWORD *)v48 + 1);
                      if ((WTF *)((char *)v48 + 24) != (WTF *)v71 && v71 != 0)
                      {
                        *((_QWORD *)v48 + 1) = 0;
                        *((_DWORD *)v48 + 4) = 0;
                        WTF::fastFree(v71, v27, v28, v29, v30, v31, v32, v33);
                      }
                      WTF::fastFree((unint64_t)v48, v27, v28, v29, v30, v31, v32, v33);
                    }
                    else
                    {
                      --*(_DWORD *)v48;
                    }
                  }
                  return v15;
                }
              }
              v35 = 0;
              v36 = (JSC::VM *)*((_QWORD *)a1 + 7);
              for (i = v9; ; i = (unint64_t)v40)
              {
                v38 = *(unsigned __int8 *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 9);
                v39 = -1;
                if (v38 == 32 || v38 == 61)
                  break;
                if (v38 < 0x17)
                {
                  if (v38 == 2)
                  {
                    v40 = (JSC::JSObject *)*((_QWORD *)a1 + 149);
                  }
                  else if (v38 == 3)
                  {
                    v40 = (JSC::JSObject *)*((_QWORD *)a1 + 151);
                  }
                  else
                  {
                    v40 = (JSC::JSObject *)*((_QWORD *)a1 + 152);
                  }
                }
                else
                {
                  v40 = *(JSC::JSObject **)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x30);
                  if (!v40)
                    v40 = *(JSC::JSObject **)(i + 16);
                }
                if (v40 == (JSC::JSObject *)2)
                {
                  v39 = v35;
                  break;
                }
                v41 = *(_DWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x10);
                if ((v41 & 3) != 0)
                {
                  if ((v41 & 0x800000) != 0)
                    break;
                  v89 = v35;
                  JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)v40 & 0xFFFFFFFE), v36, v40, v29, v30, v31, v32, v33);
                  v35 = v89;
                }
                ++v35;
              }
              v42 = (JSC::VM *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE));
              v43 = (*((_DWORD *)v42 + 4) & 0x28) != 0x20 || (*((_DWORD *)v42 + 4) & 3) == 2;
              if (v43 || (*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 2) != 0)
              {
                *(_QWORD *)v103 = 0;
              }
              else
              {
                v28 = v103[1];
                if (v103[1])
                  goto LABEL_46;
              }
              if (!*((_DWORD *)v99 + 5))
              {
                v15 = *(_QWORD *)(v11 + 41832);
                if (v15)
                  goto LABEL_48;
                v44 = JSC::VM::emptyPropertyNameEnumeratorSlow((JSC::VM *)v11);
LABEL_47:
                v15 = v44;
LABEL_48:
                if (!v103[1] && v39 != -1 && (JSC::VM *)v13 == v42)
                {
                  v45 = (JSC::StructureChain *)JSC::Structure::prototypeChain((JSC::Structure *)v13, (JSC::VM *)v11, a1, (JSC::JSObject *)v9, v30, v31, v32, v33);
                  if ((*(_BYTE *)(v13 + 16) & 3) == 0
                    && (*(_BYTE *)(v13 + 8) & 0xE) == 0
                    && (*(_WORD *)(v13 + 12) & 6) == 0)
                  {
                    v29 = (uint64_t)v45;
                    v46 = *(_DWORD **)(*(_QWORD *)(v13 + 56) + 8);
                    while (*v46)
                    {
                      v47 = 16 * (*v46 & 0xFFFFFFFE);
                      if ((*(_BYTE *)(v47 + 0x10) & 3) == 0 && (*(_BYTE *)(16 * (*v46 & 0xFFFFFFFE) + 8) & 0xE) == 0)
                      {
                        ++v46;
                        if ((*(_WORD *)(v47 + 12) & 6) == 0)
                          continue;
                      }
                      goto LABEL_61;
                    }
                    JSC::Structure::setCachedPropertyNameEnumerator((JSC::Structure *)v13, (JSC::VM *)v11, v15, v45, v30, v31, v32, v33);
                  }
                }
                goto LABEL_61;
              }
              LODWORD(v28) = 0;
LABEL_46:
              v44 = JSC::JSPropertyNameEnumerator::create((_QWORD *)v11, v42, v28, v103[0], (uint64_t)&v99, v31, v32, v33, v34);
              goto LABEL_47;
            }
          }
        }
        if (v17 < 0x17)
        {
          if (v17 == 2)
          {
            v50 = (JSC::VM *)*((_QWORD *)a1 + 149);
          }
          else if (v17 == 3)
          {
            v50 = (JSC::VM *)*((_QWORD *)a1 + 151);
          }
          else
          {
            v50 = (JSC::VM *)*((_QWORD *)a1 + 152);
          }
        }
        else
        {
          v50 = *(JSC::VM **)(16 * v12 + 0x30);
          if (!v50)
            v50 = *(JSC::VM **)(v9 + 16);
        }
        *(_QWORD *)(16 * v12 + 0x38) = 0;
        v51 = *(unsigned int **)(v14 + 16);
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 16) = 0;
        if (v51)
        {
          v52 = (uint64_t *)(v51 + 2);
          v53 = *v51;
          if ((_DWORD)v53)
          {
            v54 = 24 * v53;
            do
            {
              v55 = (uint64_t *)v52[1];
              if (v55)
              {
                v56 = *v52;
                *v55 = *v52;
                *(_QWORD *)(v56 + 8) = v55;
                *v52 = 0;
                v52[1] = 0;
              }
              v52 += 3;
              v54 -= 24;
            }
            while (v54);
          }
          WTF::fastFree((unint64_t)v51, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        if (v50 == (JSC::VM *)2)
          v57 = 0;
        else
          v57 = v50;
        v58 = JSC::StructureChain::create((JSC::StructureChain *)v11, v57, a3, (uint64_t)a4, a5, a6, a7, a8);
        *(_QWORD *)(16 * v12 + 0x38) = v58;
        if ((_DWORD)v12 && v58 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(16 * v12 + 7))
          JSC::Heap::writeBarrierSlowPath(v11 + 192, 16 * v12);
        goto LABEL_24;
      }
      v73 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, (JSC::SymbolObject **)a1, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v9 = v73;
    goto LABEL_4;
  }
  v15 = *(_QWORD *)(v8 + 41832);
  if (!v15)
    return JSC::VM::emptyPropertyNameEnumeratorSlow((JSC::VM *)v8);
  return v15;
}

unint64_t JSC::propertyNameEnumerator(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  JSC::Structure *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  unsigned int *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  JSC::VM *v35;
  JSC::JSGlobalObject *i;
  unsigned int v37;
  uint64_t v38;
  JSC::JSObject *v39;
  int v40;
  JSC::Structure *v41;
  BOOL v42;
  unint64_t v43;
  JSC::StructureChain *v44;
  WTF *v45;
  JSC::VM *v47;
  unsigned int *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  JSC::VM *v54;
  unint64_t v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  JSC::Structure *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  unsigned int v97[2];

  v10 = *((_QWORD *)this + 7);
  if ((*((_BYTE *)a2 + 4) & 0xFu) >= 2)
  {
    switch(*((_BYTE *)a2 + 4) & 0xF)
    {
      case 3:
        goto LABEL_2;
      case 4:
      case 5:
      case 8:
      case 9:
        v70 = (_QWORD *)*((_QWORD *)a2 + 1);
        LODWORD(v71) = *((_DWORD *)v70 - 2);
        if (!(_DWORD)v71)
          goto LABEL_2;
        v72 = *((unsigned int *)v70 - 2);
        v73 = (JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE));
        if (*((_BYTE *)v73 + 9) == 36)
        {
          v74 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
          v75 = *(unsigned __int8 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
          v76 = (v75 >> 1) & 7;
          if ((v75 & 0x10) != 0)
            v76 = ((v75 & 0xE) + 10) >> 1;
          v77 = *(_DWORD *)(v74 + 4 * v76 + 852);
          if (v77)
            v78 = 16 * (v77 & 0xFFFFFFFE);
          else
            v78 = 0;
          if ((JSC::Structure *)v78 == v73)
          {
            v79 = *(_QWORD *)(v74 + 2304);
            v80 = (v79 & 1) != 0 ? (v79 >> 1) & 3 : *(unsigned __int8 *)(v79 + 4);
            if (v80 != 2)
              goto LABEL_105;
          }
        }
        else
        {
          LOBYTE(v75) = *(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
        }
        if ((v75 & 0x20) != 0)
          goto LABEL_2;
        v81 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
        if (v81)
        {
          if (*(_BYTE *)(*(_QWORD *)(v81 + 2048) + 4) == 2)
            goto LABEL_2;
        }
        if ((JSC::Structure::holesMustForwardToPrototypeSlow(v73, a2) & 1) != 0)
          goto LABEL_2;
        do
        {
LABEL_105:
          if (!*v70++)
            goto LABEL_2;
          --v72;
        }
        while (v72);
        goto LABEL_107;
      case 6:
      case 7:
        v91 = *((_QWORD *)a2 + 1);
        v71 = *(unsigned int *)(v91 - 8);
        if (!(_DWORD)v71
          || (JSC::Structure::holesMustForwardToPrototype((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), a2) & 1) != 0)
        {
          goto LABEL_2;
        }
        v92 = v71;
        do
        {
          v91 += 8;
          --v92;
        }
        while (v92);
        goto LABEL_107;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        v85 = (_QWORD *)*((_QWORD *)a2 + 1);
        if (*v85)
          goto LABEL_2;
        v86 = *((_DWORD *)v85 - 2);
        v87 = *((_DWORD *)v85 - 1);
        v71 = v87 >= v86 ? v86 : v87;
        if (!(_DWORD)v71
          || (JSC::Structure::holesMustForwardToPrototype((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), a2) & 1) != 0)
        {
          goto LABEL_2;
        }
        v88 = v85 + 2;
        v89 = v71;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19849C600);
    }
    while (*v88++)
    {
      if (!--v89)
      {
LABEL_107:
        v97[1] = v71;
        v12 = (JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE));
        goto LABEL_23;
      }
    }
  }
LABEL_2:
  v97[1] = 0;
  v11 = *(_DWORD *)a2 & 0xFFFFFFFE;
  v12 = (JSC::Structure *)(16 * v11);
  v13 = *(_QWORD *)(16 * v11 + 0x40);
  if (!v13)
    goto LABEL_23;
  if (*(_BYTE *)(v13 + 5) == 1)
    goto LABEL_23;
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14)
    goto LABEL_23;
  if ((v14 & 1) == 0)
    return v14;
  v15 = *(_QWORD *)(16 * v11 + 0x38);
  v16 = *(unsigned __int8 *)(16 * v11 + 9);
  if (!v15)
    goto LABEL_55;
  if (v16 < 0x17)
  {
    if (v16 == 2)
    {
      v17 = *((_QWORD *)this + 149);
    }
    else if (v16 == 3)
    {
      v17 = *((_QWORD *)this + 151);
    }
    else
    {
      v17 = *((_QWORD *)this + 152);
    }
  }
  else
  {
    v17 = *(_QWORD *)(16 * v11 + 0x30);
    if (!v17)
      v17 = *((_QWORD *)a2 + 2);
  }
  v18 = *(int **)(v15 + 8);
  v19 = *v18;
  if (*v18)
  {
    v20 = v18 + 1;
    while (v17 != 2 && *(_DWORD *)v17 == v19)
    {
      v21 = *(_QWORD *)(16 * (v19 & 0xFFFFFFFE) + 0x30);
      if (!v21)
        v21 = *(_QWORD *)(v17 + 16);
      v22 = *v20++;
      v19 = v22;
      v17 = v21;
      if (!v22)
        goto LABEL_19;
    }
LABEL_55:
    if (v16 < 0x17)
    {
      if (v16 == 2)
      {
        v47 = (JSC::VM *)*((_QWORD *)this + 149);
      }
      else if (v16 == 3)
      {
        v47 = (JSC::VM *)*((_QWORD *)this + 151);
      }
      else
      {
        v47 = (JSC::VM *)*((_QWORD *)this + 152);
      }
    }
    else
    {
      v47 = *(JSC::VM **)(16 * v11 + 0x30);
      if (!v47)
        v47 = (JSC::VM *)*((_QWORD *)a2 + 2);
    }
    *(_QWORD *)(16 * v11 + 0x38) = 0;
    v48 = *(unsigned int **)(v13 + 16);
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    if (v48)
    {
      v49 = (uint64_t *)(v48 + 2);
      v50 = *v48;
      if ((_DWORD)v50)
      {
        v51 = 24 * v50;
        do
        {
          v52 = (uint64_t *)v49[1];
          if (v52)
          {
            v53 = *v49;
            *v52 = *v49;
            *(_QWORD *)(v53 + 8) = v52;
            *v49 = 0;
            v49[1] = 0;
          }
          v49 += 3;
          v51 -= 24;
        }
        while (v51);
      }
      WTF::fastFree((unint64_t)v48, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    if (v47 == (JSC::VM *)2)
      v54 = 0;
    else
      v54 = v47;
    v55 = JSC::StructureChain::create((JSC::StructureChain *)v10, v54, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(16 * v11 + 0x38) = v55;
    if ((_DWORD)v11 && v55 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(16 * v11 + 7))
      JSC::Heap::writeBarrierSlowPath(v10 + 192, 16 * v11);
    goto LABEL_20;
  }
  v21 = v17;
LABEL_19:
  if (v21 != 2)
    goto LABEL_55;
LABEL_20:
  v23 = *(_QWORD *)(16 * v11 + 0x40);
  if (v23)
  {
    if (*(_BYTE *)(v23 + 5) != 1)
    {
      v14 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFFELL;
      if (v14)
        return v14;
    }
  }
LABEL_23:
  v97[0] = 0;
  v24 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v24 = 1;
  *((_QWORD *)v24 + 1) = (char *)v24 + 24;
  *((_QWORD *)v24 + 2) = 20;
  v93 = v24;
  v94 = 0;
  v95 = v10;
  v96 = 258;
  JSC::getEnumerablePropertyNames(this, a2, (JSC::JSObject *)&v93, (JSC::PropertyNameArray *)&v97[1], v97, v25);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_24;
  v83 = *(_DWORD *)(v10 + 80);
  if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v27, v28, v29, v30, v31, v32);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_24:
    v34 = 0;
    v35 = (JSC::VM *)*((_QWORD *)this + 7);
    for (i = a2; ; i = v39)
    {
      v37 = *(unsigned __int8 *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 9);
      v38 = -1;
      if (v37 == 32 || v37 == 61)
        break;
      if (v37 < 0x17)
      {
        if (v37 == 2)
        {
          v39 = (JSC::JSObject *)*((_QWORD *)this + 149);
        }
        else if (v37 == 3)
        {
          v39 = (JSC::JSObject *)*((_QWORD *)this + 151);
        }
        else
        {
          v39 = (JSC::JSObject *)*((_QWORD *)this + 152);
        }
      }
      else
      {
        v39 = *(JSC::JSObject **)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x30);
        if (!v39)
          v39 = (JSC::JSObject *)*((_QWORD *)i + 2);
      }
      if (v39 == (JSC::JSObject *)2)
      {
        v38 = v34;
        break;
      }
      v40 = *(_DWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x10);
      if ((v40 & 3) != 0)
      {
        if ((v40 & 0x800000) != 0)
          break;
        v84 = v34;
        JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)v39 & 0xFFFFFFFE), v35, v39, v28, v29, v30, v31, v32);
        v34 = v84;
      }
      ++v34;
    }
    v41 = (JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE));
    v42 = (*((_DWORD *)v41 + 4) & 0x28) != 0x20 || (*((_DWORD *)v41 + 4) & 3) == 2;
    if (v42 || (*(_WORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0xC) & 2) != 0)
    {
      *(_QWORD *)v97 = 0;
    }
    else
    {
      v27 = v97[1];
      if (v97[1])
        goto LABEL_42;
    }
    if (!*((_DWORD *)v93 + 5))
    {
      v14 = *(_QWORD *)(v10 + 41832);
      if (v14)
        goto LABEL_44;
      v43 = JSC::VM::emptyPropertyNameEnumeratorSlow((JSC::VM *)v10);
LABEL_43:
      v14 = v43;
LABEL_44:
      if (!v97[1] && v38 != -1 && v12 == v41)
      {
        v44 = (JSC::StructureChain *)JSC::Structure::prototypeChain(v12, (JSC::VM *)v10, this, a2, v29, v30, v31, v32);
        if (JSC::Structure::canCachePropertyNameEnumerator((uint64_t)v12))
          JSC::Structure::setCachedPropertyNameEnumerator(v12, (JSC::VM *)v10, v14, v44, v29, v30, v31, v32);
      }
      goto LABEL_49;
    }
    LODWORD(v27) = 0;
LABEL_42:
    v43 = JSC::JSPropertyNameEnumerator::create((_QWORD *)v10, v41, v27, v97[0], (uint64_t)&v93, v30, v31, v32, v33);
    goto LABEL_43;
  }
  v14 = 0;
LABEL_49:
  if (v94)
    WTF::fastFree(v94 - 16, v26, v27, v28, v29, v30, v31, v32);
  v45 = v93;
  v93 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
    {
      v56 = *((unsigned int *)v45 + 5);
      if ((_DWORD)v56)
      {
        v57 = (WTF::StringImpl **)*((_QWORD *)v45 + 1);
        v58 = 8 * v56;
        do
        {
          v59 = *v57;
          *v57 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
            {
              WTF::StringImpl::~StringImpl(v59, (WTF::AtomStringImpl *)v26, v27, v28, v29, v30, v31, v32);
              WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
            }
            else
            {
              *(_DWORD *)v59 -= 2;
            }
          }
          ++v57;
          v58 -= 8;
        }
        while (v58);
      }
      v68 = *((_QWORD *)v45 + 1);
      if ((WTF *)((char *)v45 + 24) != (WTF *)v68 && v68 != 0)
      {
        *((_QWORD *)v45 + 1) = 0;
        *((_DWORD *)v45 + 4) = 0;
        WTF::fastFree(v68, v26, v27, v28, v29, v30, v31, v32);
      }
      WTF::fastFree((unint64_t)v45, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      --*(_DWORD *)v45;
    }
  }
  return v14;
}

unint64_t operationGetPropertyEnumeratorCell(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  uint64_t v10;
  uint64_t vars0;

  v8 = a2;
  v10 = *((_QWORD *)this + 7);
  *(_QWORD *)(v10 + 40) = vars0;
  if (*((unsigned __int8 *)a2 + 5) <= 0x16u)
    v8 = (JSC::JSGlobalObject *)JSC::JSCell::toObjectSlow(a2, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    return JSC::propertyNameEnumerator(this, v8, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
}

uint64_t operationEnumeratorNextUpdateIndexAndMode(JSC::JSGlobalObject *a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  char v11;
  _DWORD *v12;
  JSC::VM *v14;
  JSC::JSRopeString *v15;
  unint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  int v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  char v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  WTF::StringImpl *v41;
  int v42;
  unint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  _QWORD *v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  BOOL v75;
  char v76;
  int v77;
  char v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  JSC::VMTraps *v95;
  JSC::VM *v96;
  WTF::StringImpl *v97[2];
  unint64_t v98;
  _DWORD *v99;
  _DWORD *v100;
  uint64_t v101;
  __int16 v102;
  __int16 v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t vars0;

  LODWORD(v8) = (_DWORD)a3;
  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2)
    return v8;
  v11 = (char)a4;
  v12 = (_DWORD *)a2;
  v97[0] = (WTF::StringImpl *)a2;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v43 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)v97, a1, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned __int8 *)(a2 + 5) > 0x16u)
      goto LABEL_4;
    v43 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, (JSC::SymbolObject **)a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v12 = (_DWORD *)v43;
LABEL_4:
  if (*(_DWORD *)(v9 + 80))
  {
    v70 = *(_DWORD *)(v9 + 80);
    if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v14 = (JSC::VM *)*((_QWORD *)a1 + 7);
  LODWORD(v8) = v8 + 1;
  switch(v11)
  {
    case 0:
      LODWORD(v8) = 0;
      goto LABEL_24;
    case 1:
LABEL_24:
      LODWORD(v21) = *(_DWORD *)(a5 + 20);
      if (v8 >= v21)
        goto LABEL_25;
      v8 = v8;
      v96 = (JSC::VM *)*((_QWORD *)a1 + 7);
      break;
    case 2:
    case 4:
      goto LABEL_6;
    default:
      __break(0xC471u);
      JUMPOUT(0x19849CDA0);
  }
  while (1)
  {
    v22 = *((_QWORD *)a1 + 7);
    v98 = 0xFFFFFFFF00000000;
    v99 = v12;
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 2;
    v104 = 0;
    LOBYTE(v105) = 0;
    v106 = 0;
    v95 = (JSC::VMTraps *)(v22 + 64);
    v23 = (uint64_t *)v12;
    v107 = 0;
    v108 = 0;
    while (1)
    {
      v24 = 16 * (*(_DWORD *)v23 & 0xFFFFFFFE);
      v25 = (*(uint64_t (**)(uint64_t *, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v24 + 0x4C) + 0x70))(v23, a1, v8, v97);
      v26 = v25;
      if (*(_DWORD *)(v22 + 80))
        break;
      if ((v25 & 1) != 0)
      {
        if (!*(_DWORD *)(v22 + 80))
          goto LABEL_41;
        LOBYTE(v39) = 1;
LABEL_97:
        v77 = *(_DWORD *)(v22 + 80);
        if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v95, 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v22 + 16))
          v78 = 0;
        else
          v78 = v39;
        if ((v78 & 1) == 0)
          goto LABEL_102;
        goto LABEL_41;
      }
LABEL_32:
      if (v103 == 3)
      {
        if (v104)
          goto LABEL_50;
        v27 = *((unsigned __int8 *)v23 + 5);
        if (v27 == 61)
          goto LABEL_35;
      }
      else
      {
        v27 = *((unsigned __int8 *)v23 + 5);
        if (v27 == 61)
        {
          if (v103 == 1)
            goto LABEL_50;
          goto LABEL_35;
        }
      }
      if ((v27 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v23, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) <= v8)
      {
        goto LABEL_50;
      }
LABEL_35:
      if ((*(_WORD *)(v24 + 12) & 0x800) == 0 || v103 == 3)
      {
        v28 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x30);
        if (!v28)
          v28 = v23[2];
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v28 = (*(uint64_t (**)(uint64_t *, JSC::JSGlobalObject *))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v23 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v23, a1);
        }
        else
        {
          v28 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x30);
          if (!v28)
            v28 = v23[2];
        }
        if (*(_DWORD *)(v22 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
LABEL_50:
          v39 = 0;
          goto LABEL_51;
        }
      }
      if ((v28 & 0xFFFE000000000002) == 0)
      {
        v23 = (uint64_t *)v28;
        if (*(unsigned __int8 *)(v28 + 5) > 0x16u)
          continue;
      }
      goto LABEL_50;
    }
    v73 = *(_DWORD *)(v22 + 80);
    if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
      JSC::VMTraps::handleTraps(v95, 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v74 = *(_QWORD *)(v22 + 16);
    v75 = v74 == 0;
    if (v74)
      v76 = 1;
    else
      v76 = v26;
    if ((v76 & 1) == 0)
      goto LABEL_32;
    v39 = v75;
LABEL_51:
    if (*(_DWORD *)(v22 + 80))
      goto LABEL_97;
    if (!v39)
    {
LABEL_102:
      v29 = 0;
      goto LABEL_43;
    }
LABEL_41:
    if ((v98 & 4) != 0)
    {
      v29 = (int)v100;
      if (v100)
        v29 = (*(unsigned __int16 *)(16 * (*v100 & 0xFFFFFFFE) + 0xC) >> 12) & 1;
    }
    else
    {
      v29 = 1;
    }
LABEL_43:
    v14 = v96;
    if (v106)
    {
      v30 = *(_DWORD *)(v105 + 4);
      if (!v30)
      {
        __break(0xC471u);
        JUMPOUT(0x19849CCD8);
      }
      *(_DWORD *)(v105 + 4) = v30 - 1;
    }
    if (v29)
    {
      LODWORD(v21) = *(_DWORD *)(a5 + 20);
      goto LABEL_25;
    }
    if (*((_DWORD *)v96 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v96, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      break;
    }
    ++v8;
    v21 = *(unsigned int *)(a5 + 20);
    if (v8 >= v21)
    {
      v14 = v96;
LABEL_25:
      if (v8 < v21 || !*(_DWORD *)(a5 + 28))
        break;
      LODWORD(v8) = 0;
LABEL_6:
      if (v8 >= *(_DWORD *)(a5 + 28))
        break;
LABEL_7:
      v15 = *(JSC::JSRopeString **)(*(_QWORD *)(a5 + 8) + 8 * v8);
      if (!v15 || v8 < *(_DWORD *)(a5 + 24) && *v12 == *(_DWORD *)(a5 + 16))
        break;
      v16 = *((_QWORD *)v15 + 1);
      v17 = *((_QWORD *)a1 + 7);
      if ((v16 & 1) != 0)
      {
        JSC::JSRopeString::resolveRopeToAtomString(v15, a1);
        if (*(_DWORD *)(v17 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          v41 = v97[0];
          if (!v97[0])
          {
            v16 = 0;
            goto LABEL_13;
          }
          v16 = 0;
          v40 = *(_DWORD *)v97[0];
        }
        else
        {
          v16 = (unint64_t)v97[0];
          if (!v97[0])
            goto LABEL_13;
          v40 = *(_DWORD *)v97[0] + 2;
          *(_DWORD *)v97[0] = v40;
          v41 = (WTF::StringImpl *)v16;
        }
        v42 = v40 - 2;
        if (v42)
        {
          *(_DWORD *)v41 = v42;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v41, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        }
        goto LABEL_13;
      }
      if ((*(_BYTE *)(v16 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v16 += 2;
      }
      else
      {
        v44 = *(WTF::StringImpl **)(v17 + 64768);
        if (v44 != (WTF::StringImpl *)v16)
        {
          *(_DWORD *)v16 += 2;
          *(_QWORD *)(v17 + 64768) = v16;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
            {
              WTF::StringImpl::~StringImpl(v44, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
            }
            else
            {
              *(_DWORD *)v44 -= 2;
            }
          }
          v45 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
          if (v45)
          {
            if ((*((_BYTE *)v45 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v45 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v45, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v97);
              v45 = v97[0];
            }
          }
          v46 = *(WTF::StringImpl **)(v17 + 64776);
          *(_QWORD *)(v17 + 64776) = v45;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
            {
              WTF::StringImpl::~StringImpl(v46, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
            }
            else
            {
              *(_DWORD *)v46 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*((_QWORD *)v15 + 1) + 16) & 0x10) == 0)
        {
          v47 = *(WTF::StringImpl **)(v17 + 64776);
          *(_DWORD *)v47 += 2;
          v97[0] = v47;
          __dmb(0xAu);
          v48 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
          *((WTF::StringImpl **)v15 + 1) = v97[0];
          v97[0] = v48;
          v49 = (_QWORD *)(v17 + 808);
          v50 = *(unsigned int *)(v17 + 820);
          if ((_DWORD)v50 == *(_DWORD *)(v17 + 816))
          {
            v52 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)v97);
            v50 = *(unsigned int *)(v17 + 820);
            v51 = (WTF::StringImpl **)(*(_QWORD *)(v17 + 808) + 8 * v50);
            v48 = *v52;
          }
          else
          {
            v51 = (WTF::StringImpl **)(*v49 + 8 * v50);
            v52 = v97;
          }
          *v52 = 0;
          *v51 = v48;
          *(_DWORD *)(v17 + 820) = v50 + 1;
          v53 = v97[0];
          v97[0] = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
            {
              WTF::StringImpl::~StringImpl(v53, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
            }
            else
            {
              *(_DWORD *)v53 -= 2;
            }
          }
        }
        v16 = *(_QWORD *)(v17 + 64776);
        *(_DWORD *)v16 += 2;
      }
LABEL_13:
      if (*((_DWORD *)v14 + 20))
      {
        v72 = *((_DWORD *)v14 + 20);
        if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v14 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*((_QWORD *)v14 + 2))
        {
          v18 = v14;
          goto LABEL_87;
        }
      }
      v18 = v14;
      if ((JSC::JSObject::hasEnumerableProperty((unint64_t)v12, (uint64_t)a1, v16, (uint64_t)a4, a5, a6, a7, a8) & 1) != 0)
      {
        v19 = 8;
      }
      else if (*((_DWORD *)v14 + 20)
             && JSC::VM::hasExceptionsAfterHandlingTraps(v14, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
LABEL_87:
        v19 = 1;
      }
      else
      {
        v19 = 0;
        LODWORD(v8) = v8 + 1;
      }
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
      if (v19)
        break;
      v14 = v18;
      if (v8 >= *(_DWORD *)(a5 + 28))
        break;
      goto LABEL_7;
    }
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v71 = *(_DWORD *)(v9 + 80);
    if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  return v8;
}

uint64_t operationEnumeratorNextUpdatePropertyName(uint64_t a1, unint64_t a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int *v18;
  _BYTE *v19;
  int **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _BYTE *v56;
  unsigned __int8 *v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t SlowCase;
  _QWORD var68[14];

  var68[2] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v8 + 40) = var68[13];
  if ((_DWORD)a3 == 1)
  {
    if (*(_DWORD *)(a4 + 20) > a2)
    {
      v9 = (uint64_t *)(v8 + 39696);
      if (a2 <= 0xFF)
      {
        v10 = (int **)(v8 + 16 * a2 + 44272);
        v18 = *v10;
        if (*v10)
          goto LABEL_17;
        v54 = 0;
        do
        {
          v55 = (a2 % 0xA) | 0x30;
          *((_BYTE *)&var68[1] + v54-- + 4) = (a2 % 0xA) | 0x30;
          v17 = a2 > 9;
          a2 = a2 / 0xAuLL;
        }
        while (v17);
        if (v54 + 14 < 15)
        {
          if (v54)
          {
            if ((unint64_t)-v54 >> 31)
              goto LABEL_73;
            v18 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v54));
            v56 = v18 + 5;
            *v18 = 2;
            v18[1] = -(int)v54;
            *((_QWORD *)v18 + 1) = v18 + 5;
            v18[4] = 4;
            if (v54 == -1)
              *v56 = v55;
            else
              memcpy(v56, (char *)&var68[1] + v54 + 5, -v54);
LABEL_51:
            v21 = (WTF::StringImpl *)*v10;
            goto LABEL_13;
          }
LABEL_64:
          v18 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          goto LABEL_51;
        }
      }
      else
      {
        v10 = (int **)(v8 + 60656);
        v11 = 9 * ((~((_DWORD)a2 << 15) + a2) ^ ((~((_DWORD)a2 << 15) + a2) >> 10));
        v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
        v13 = (v12 ^ BYTE2(v12));
        v14 = (_DWORD *)(v8 + 60656 + 16 * v13);
        if (*v14 == (_DWORD)a2)
        {
          v18 = v10[2 * v13 + 1];
          if (v18)
            goto LABEL_17;
        }
        v15 = 0;
        *v14 = a2;
        do
        {
          v16 = (a2 % 0xA) | 0x30;
          *((_BYTE *)&var68[1] + v15-- + 4) = (a2 % 0xA) | 0x30;
          v17 = a2 > 9;
          a2 = a2 / 0xAuLL;
        }
        while (v17);
        if (v15 + 14 < 15)
        {
          if (!v15)
          {
            v18 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
LABEL_12:
            v20 = &v10[2 * v13];
            v22 = (WTF::StringImpl *)v20[1];
            v10 = v20 + 1;
            v21 = v22;
LABEL_13:
            *v10 = v18;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
              {
                WTF::StringImpl::~StringImpl(v21, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
              }
              else
              {
                *(_DWORD *)v21 -= 2;
              }
              v18 = *v10;
              if (!*v10)
              {
LABEL_19:
                v23 = *v18;
                *v18 += 2;
                if (v23)
                {
                  *v18 = v23;
                }
                else
                {
                  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
                }
                v24 = v18[1];
                if (v24 == 1)
                {
                  v25 = v18[4];
                  v57 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
                  if ((v25 & 4) != 0)
                  {
                    v58 = *v57;
                  }
                  else
                  {
                    v58 = *(unsigned __int16 *)v57;
                    if (v58 > 0xFF)
                    {
LABEL_24:
                      *v18 += 2;
                      v26 = v18;
                      if ((v25 & 3) == 2)
                      {
                        v26 = v18;
                        do
                        {
                          v26 = (int *)*((_QWORD *)v26 + 3);
                          v25 = v26[4];
                        }
                        while ((v25 & 3) == 2);
                      }
                      if ((v25 & 8) != 0)
                      {
                        a4 = 0;
                      }
                      else
                      {
                        v26[4] = v25 | 8;
                        a4 = (unint64_t)v26[1] << ((v25 & 4) == 0);
                      }
                      v27 = v8 + 192;
                      v28 = *v9;
                      if ((unint64_t)*v9 >= *(_QWORD *)(v8 + 39704))
                      {
                        v28 = *(_QWORD *)(v8 + 39712);
                        if ((v28 & 1) != 0)
                        {
                          v60 = a4;
                          JSC::sanitizeStackForVM((JSC *)v8, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          SlowCase = JSC::LocalAllocator::allocateSlowCase(v8 + 39672, v8 + 192, 16, 0, 0, v61, v62, v63);
                          a4 = v60;
                          v28 = SlowCase;
                          v27 = v8 + 192;
                          goto LABEL_29;
                        }
                        v59 = *(_QWORD *)(v28 + 8) ^ *(_QWORD *)(v8 + 39720);
                        *(_QWORD *)(v8 + 39704) = v28 + HIDWORD(v59);
                        *(_QWORD *)(v8 + 39712) = v28 + (int)v59;
                      }
                      *v9 = v28 + 16;
LABEL_29:
                      *(_DWORD *)v28 = *(_QWORD *)(v8 + 41512) >> 4;
                      *(_DWORD *)(v28 + 4) = 17302016;
                      *(_QWORD *)(v28 + 8) = v18;
                      if (*(_BYTE *)(v8 + 755))
                        __dmb(0xAu);
                      if (a4 >= 0x101)
                        JSC::Heap::reportExtraMemoryAllocatedSlowCase(v27, 0, v28, a4, a5, a6, a7, a8);
                      goto LABEL_33;
                    }
                  }
                  v28 = *(_QWORD *)(v8 + 8 * v58 + 42216);
                }
                else
                {
                  if (v24)
                  {
                    v25 = v18[4];
                    goto LABEL_24;
                  }
                  v28 = *(_QWORD *)(v8 + 41968);
                }
LABEL_33:
                if (*v18 == 2)
                {
                  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
                }
                else
                {
                  *v18 -= 2;
                }
                return v28;
              }
            }
LABEL_17:
            if ((v18[4] & 0x10) != 0)
            {
              *v18 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v8 + 41912), (unint64_t)v18, a3, a4, a5, a6, a7, a8, var68);
              v18 = (int *)var68[0];
            }
            goto LABEL_19;
          }
          if (!((unint64_t)-v15 >> 31))
          {
            v18 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v15));
            v19 = v18 + 5;
            *v18 = 2;
            v18[1] = -(int)v15;
            *((_QWORD *)v18 + 1) = v18 + 5;
            v18[4] = 4;
            if (v15 == -1)
              *v19 = v16;
            else
              memcpy(v19, (char *)&var68[1] + v15 + 5, -v15);
            goto LABEL_12;
          }
LABEL_73:
          __break(0xC471u);
          JUMPOUT(0x19849D3F8);
        }
      }
      __break(1u);
      goto LABEL_64;
    }
    return *(_QWORD *)(v8 + 42208);
  }
  if (*(_DWORD *)(a4 + 28) <= a2)
    return *(_QWORD *)(v8 + 42208);
  v28 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * a2);
  if (!v28)
    return *(_QWORD *)(v8 + 42208);
  return v28;
}

uint64_t operationEnumeratorRecoverNameAndGetByVal(JSC::JSGlobalObject *a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  JSC::JSRopeString *v11;
  unint64_t v12;
  int v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  _QWORD *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *var38[8];

  v8 = (unint64_t)a2;
  v10 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v10 + 40) = var38[7];
  if (*(_DWORD *)(a4 + 28) <= a3)
    v11 = 0;
  else
    v11 = *(JSC::JSRopeString **)(*(_QWORD *)(a4 + 8) + 8 * a3);
  v12 = *((_QWORD *)v11 + 1);
  if ((v12 & 1) == 0)
  {
    if ((*(_BYTE *)(v12 + 16) & 0x10) == 0)
    {
      v25 = *(WTF::StringImpl **)(v10 + 64768);
      if (v25 != (WTF::StringImpl *)v12)
      {
        *(_DWORD *)v12 += 2;
        *(_QWORD *)(v10 + 64768) = v12;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::~StringImpl(v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
        v26 = (WTF::StringImpl *)*((_QWORD *)v11 + 1);
        if (v26)
        {
          if ((*((_BYTE *)v26 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v26 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v26, a3, a4, a5, a6, a7, a8, (WTF *)var38);
            v26 = var38[0];
          }
        }
        v27 = *(WTF::StringImpl **)(v10 + 64776);
        *(_QWORD *)(v10 + 64776) = v26;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*((_QWORD *)v11 + 1) + 16) & 0x10) == 0)
      {
        v28 = *(_DWORD **)(v10 + 64776);
        *v28 += 2;
        __dmb(0xAu);
        v29 = (WTF::StringImpl *)*((_QWORD *)v11 + 1);
        *((_QWORD *)v11 + 1) = v28;
        var38[0] = v29;
        v30 = (_QWORD *)(v10 + 808);
        v31 = *(unsigned int *)(v10 + 820);
        if ((_DWORD)v31 == *(_DWORD *)(v10 + 816))
        {
          v33 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)var38);
          v31 = *(unsigned int *)(v10 + 820);
          v32 = (WTF::StringImpl **)(*(_QWORD *)(v10 + 808) + 8 * v31);
          v29 = *v33;
        }
        else
        {
          v32 = (WTF::StringImpl **)(*v30 + 8 * v31);
          v33 = var38;
        }
        *v33 = 0;
        *v32 = v29;
        *(_DWORD *)(v10 + 820) = v31 + 1;
        v34 = var38[0];
        var38[0] = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
          {
            WTF::StringImpl::~StringImpl(v34, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
          }
          else
          {
            *(_DWORD *)v34 -= 2;
          }
        }
      }
      v12 = *(_QWORD *)(v10 + 64776);
    }
    v13 = *(_DWORD *)v12;
    *(_DWORD *)v12 += 2;
    goto LABEL_6;
  }
  JSC::JSRopeString::resolveRopeToAtomString(v11, a1);
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v24 = var38[0];
    if (!var38[0])
    {
      v12 = 0;
      goto LABEL_8;
    }
    v12 = 0;
    v23 = *(_DWORD *)var38[0] - 2;
  }
  else
  {
    v12 = (unint64_t)var38[0];
    if (!var38[0])
      goto LABEL_8;
    v23 = *(_DWORD *)var38[0];
    *(_DWORD *)var38[0] += 2;
    v24 = (WTF::StringImpl *)v12;
  }
  if (v23)
  {
    *(_DWORD *)v24 = v23;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v24, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
  }
  if (v12)
  {
    v13 = *(_DWORD *)v12 - 2;
LABEL_6:
    if (v13)
    {
      *(_DWORD *)v12 = v13;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
LABEL_8:
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  var38[0] = (WTF::StringImpl *)v8;
  if ((v8 & 0xFFFE000000000002) != 0)
  {
    v43 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)var38, a1, a3, a4, a5, a6, a7, a8);
    goto LABEL_38;
  }
  if (*(unsigned __int8 *)(v8 + 5) <= 0x16u)
  {
    v43 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, (JSC::SymbolObject **)a1, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
LABEL_38:
    v8 = v43;
  }
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  return JSC::JSObject::get((unsigned int *)v8, (uint64_t)a1, v12, a4, a5, a6, a7, a8);
}

uint64_t operationEnumeratorInByVal(JSC::JSGlobalObject *a1, JSC::JSObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 hasProperty;
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  if ((_DWORD)a5 != 1 || ((unint64_t)a2 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)a2 + 5) < 0x17u)
  {
    if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x19849D778);
    }
    hasProperty = JSC::CommonSlowPaths::opInByVal(a1, (unint64_t)a2, a3, 0, a5, a6, a7, a8);
  }
  else
  {
    hasProperty = JSC::JSObject::hasProperty(a2, a1, a4);
  }
  if (hasProperty)
    return 7;
  else
    return 6;
}

BOOL JSC::CommonSlowPaths::opInByVal(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  int v14;
  uint64_t hasProperty;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  _QWORD *v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::VM *v80;
  int v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  _DWORD *v86;
  WTF::StringImpl *v87;
  _QWORD *v88;
  uint64_t v89;
  WTF::StringImpl **v90;
  WTF::StringImpl **v91;
  WTF::StringImpl *v92;
  int v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v127;

  v10 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v17 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v17 = 0x1100000002;
    *(_QWORD *)(v17 + 8) = "is not an Object.";
    *(_DWORD *)(v17 + 16) = 4;
    v127 = (WTF::StringImpl *)v17;
    v25 = JSC::createError(a1, a2, &v127, JSC::invalidParameterInSourceAppender);
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
    if ((v25 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C)))
    {
      v25 = JSC::Exception::create(v10, (JSC::VM *)v25, 0, v20, v21, v22, v23, v24);
    }
    JSC::VM::throwException((JSC::VM *)v10, a1, (JSC::Exception *)v25);
    return 0;
  }
  v11 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    if ((a3 & 0x80000000) == 0)
      goto LABEL_23;
LABEL_5:
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v11 + 5) == 2)
      {
        v13 = *(_QWORD *)(v11 + 8);
        if ((v13 & 1) == 0)
        {
          if ((*(_BYTE *)(v13 + 16) & 0x10) == 0)
          {
            v45 = *(WTF::StringImpl **)(v10 + 64768);
            if (v45 != (WTF::StringImpl *)v13)
            {
              *(_DWORD *)v13 += 2;
              *(_QWORD *)(v10 + 64768) = v13;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                {
                  WTF::StringImpl::~StringImpl(v45, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
                }
                else
                {
                  *(_DWORD *)v45 -= 2;
                }
              }
              v46 = *(WTF::StringImpl **)(v11 + 8);
              if (v46)
              {
                if ((*((_BYTE *)v46 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v46 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v46, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v127);
                  v46 = v127;
                }
              }
              v47 = *(WTF::StringImpl **)(v10 + 64776);
              *(_QWORD *)(v10 + 64776) = v46;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                {
                  WTF::StringImpl::~StringImpl(v47, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
                }
                else
                {
                  *(_DWORD *)v47 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
            {
              v48 = *(_DWORD **)(v10 + 64776);
              *v48 += 2;
              __dmb(0xAu);
              v49 = *(WTF::StringImpl **)(v11 + 8);
              *(_QWORD *)(v11 + 8) = v48;
              v127 = v49;
              v50 = (_QWORD *)(v10 + 808);
              v51 = *(unsigned int *)(v10 + 820);
              if ((_DWORD)v51 == *(_DWORD *)(v10 + 816))
              {
                v53 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)&v127);
                v51 = *(unsigned int *)(v10 + 820);
                v52 = (WTF::StringImpl **)(*(_QWORD *)(v10 + 808) + 8 * v51);
                v49 = *v53;
              }
              else
              {
                v52 = (WTF::StringImpl **)(*v50 + 8 * v51);
                v53 = &v127;
              }
              *v53 = 0;
              *v52 = v49;
              *(_DWORD *)(v10 + 820) = v51 + 1;
              v54 = v127;
              v127 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                {
                  WTF::StringImpl::~StringImpl(v54, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
                }
                else
                {
                  *(_DWORD *)v54 -= 2;
                }
              }
            }
            v13 = *(_QWORD *)(v10 + 64776);
          }
          goto LABEL_9;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, a1);
        if (!*(_DWORD *)(v10 + 80))
          goto LABEL_35;
        v80 = (JSC::VM *)v10;
        goto LABEL_67;
      }
      v11 = JSC::JSCell::toPrimitive(v11, (JSC::VM **)a1, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
    }
    v126 = v11;
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 8);
      if (v13)
      {
LABEL_9:
        v14 = *(_DWORD *)v13 + 2;
LABEL_10:
        *(_DWORD *)v13 = v14;
      }
      if (!*(_DWORD *)(v10 + 80))
        goto LABEL_12;
LABEL_11:
      v63 = *(_DWORD *)(v10 + 80);
      if ((v63 & 0x27) != 0 && (v63 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
        hasProperty = 0;
      else
LABEL_12:
        hasProperty = JSC::JSObject::hasProperty(a2, (uint64_t)a1, v13, a4, a5, a6, a7, a8);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v13 -= 2;
        }
      }
      return hasProperty;
    }
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      v81 = *(unsigned __int8 *)(v11 + 5);
      if (v81 == 2)
        goto LABEL_74;
      if (v81 == 4)
      {
        v13 = *(_QWORD *)(v11 + 8);
        v93 = *(_DWORD *)v13;
        *(_DWORD *)v13 += 4;
        v14 = v93 + 2;
        if (v14)
          goto LABEL_10;
        v36 = (WTF::StringImpl *)v13;
LABEL_93:
        WTF::StringImpl::~StringImpl(v36, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        goto LABEL_11;
      }
    }
    v11 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v126, a1, 1);
LABEL_74:
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
LABEL_102:
      v13 = 0;
      goto LABEL_11;
    }
    v13 = *(_QWORD *)(v11 + 8);
    v82 = *((_QWORD *)a1 + 7);
    if ((v13 & 1) == 0)
    {
      if ((*(_BYTE *)(v13 + 16) & 0x10) == 0)
      {
        v83 = *(WTF::StringImpl **)(v82 + 64768);
        if (v83 != (WTF::StringImpl *)v13)
        {
          *(_DWORD *)v13 += 2;
          *(_QWORD *)(v82 + 64768) = v13;
          if (v83)
          {
            if (*(_DWORD *)v83 == 2)
            {
              WTF::StringImpl::~StringImpl(v83, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
            }
            else
            {
              *(_DWORD *)v83 -= 2;
            }
          }
          v84 = *(WTF::StringImpl **)(v11 + 8);
          if (v84)
          {
            if ((*((_BYTE *)v84 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v84 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v84, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v127);
              v84 = v127;
            }
          }
          v85 = *(WTF::StringImpl **)(v82 + 64776);
          *(_QWORD *)(v82 + 64776) = v84;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
            {
              WTF::StringImpl::~StringImpl(v85, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
            }
            else
            {
              *(_DWORD *)v85 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
        {
          v86 = *(_DWORD **)(v82 + 64776);
          *v86 += 2;
          __dmb(0xAu);
          v87 = *(WTF::StringImpl **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = v86;
          v127 = v87;
          v88 = (_QWORD *)(v82 + 808);
          v89 = *(unsigned int *)(v82 + 820);
          if ((_DWORD)v89 == *(_DWORD *)(v82 + 816))
          {
            v91 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v127);
            v89 = *(unsigned int *)(v82 + 820);
            v90 = (WTF::StringImpl **)(*(_QWORD *)(v82 + 808) + 8 * v89);
            v87 = *v91;
          }
          else
          {
            v90 = (WTF::StringImpl **)(*v88 + 8 * v89);
            v91 = &v127;
          }
          *v91 = 0;
          *v90 = v87;
          *(_DWORD *)(v82 + 820) = v89 + 1;
          v92 = v127;
          v127 = 0;
          if (v92)
          {
            if (*(_DWORD *)v92 == 2)
            {
              WTF::StringImpl::~StringImpl(v92, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
            }
            else
            {
              *(_DWORD *)v92 -= 2;
            }
          }
        }
        v13 = *(_QWORD *)(v82 + 64776);
      }
      goto LABEL_9;
    }
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, a1);
    if (!*(_DWORD *)(v82 + 80))
    {
LABEL_35:
      v13 = (unint64_t)v127;
      if (!v127)
        goto LABEL_11;
      v35 = *(_DWORD *)v127;
      *(_DWORD *)v127 += 2;
      v36 = (WTF::StringImpl *)v13;
LABEL_37:
      if (v35)
      {
        *(_DWORD *)v36 = v35;
        goto LABEL_11;
      }
      goto LABEL_93;
    }
    v80 = (JSC::VM *)v82;
LABEL_67:
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v80, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v36 = v127;
      if (v127)
      {
        v13 = 0;
        v35 = *(_DWORD *)v127 - 2;
        goto LABEL_37;
      }
      goto LABEL_102;
    }
    goto LABEL_35;
  }
  *(_QWORD *)&v12 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_5;
  a3 = v12;
  if (v12 != (double)a3)
    goto LABEL_5;
LABEL_23:
  if (a4)
  {
    *(_DWORD *)a4 = *(_DWORD *)a2;
    if ((*(_BYTE *)(a2 + 4) & 0xEu) >= 0xA)
    {
      v26 = *(_QWORD *)(a2 + 8);
      if (*(_DWORD *)(v26 - 4) <= a3)
        goto LABEL_33;
    }
    else
    {
      if ((*(_BYTE *)(a2 + 4) & 0xE) == 0)
        goto LABEL_33;
      v26 = *(_QWORD *)(a2 + 8);
    }
    if (*(_DWORD *)(v26 - 8) > a3)
      return JSC::JSObject::hasProperty((JSC::JSObject *)a2, a1, a3);
LABEL_33:
    *((_DWORD *)a4 + 1) |= 2u;
  }
  return JSC::JSObject::hasProperty((JSC::JSObject *)a2, a1, a3);
}

uint64_t operationEnumeratorHasOwnProperty(JSC::JSGlobalObject *a1, unsigned __int8 *a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  _QWORD *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  WTF::StringImpl *v73;
  unsigned __int8 *v74;
  WTF::StringImpl *v75[6];
  int v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t vars0;

  v9 = a2;
  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = vars0;
  v74 = a2;
  v12 = (unint64_t)a2 & 0xFFFE000000000002;
  if (((unint64_t)a2 & 0xFFFE000000000002) == 0 && (_DWORD)a5 == 1 && a2[5] >= 0x17u)
  {
    v75[2] = (WTF::StringImpl *)0xFFFFFFFF00000000;
    v75[4] = 0;
    v75[5] = 0;
    v75[3] = (WTF::StringImpl *)a2;
    v76 = 0x20000;
    v77 = 0;
    LOBYTE(v78) = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v13 = (*(uint64_t (**)(unsigned __int8 *, JSC::JSGlobalObject *, JSC::Symbol *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x70))(a2, a1, a4, v75);
    if (v79)
    {
      v14 = *(_DWORD *)(v78 + 4);
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x19849E1D0);
      }
      *(_DWORD *)(v78 + 4) = v14 - 1;
    }
    if (v13)
      return 7;
    else
      return 6;
  }
  if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19849E12CLL);
  }
  v16 = *(WTF::StringImpl **)(a3 + 8);
  if ((v16 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a3, a1);
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_29;
    v72 = *(_DWORD *)(v11 + 80);
    if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
    {
      v16 = 0;
      v26 = v75[0];
      v73 = 0;
      if (!v75[0])
        goto LABEL_15;
    }
    else
    {
LABEL_29:
      v16 = v75[0];
      if (!v75[0])
      {
        v73 = 0;
        goto LABEL_15;
      }
      *(_DWORD *)v75[0] += 2;
      v73 = v16;
      v26 = v16;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_15;
  }
  if ((*((_BYTE *)v16 + 16) & 0x10) == 0)
  {
    v27 = *(WTF::StringImpl **)(v11 + 64768);
    if (v27 != v16)
    {
      *(_DWORD *)v16 += 2;
      *(_QWORD *)(v11 + 64768) = v16;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
        }
        else
        {
          *(_DWORD *)v27 -= 2;
        }
      }
      v28 = *(WTF::StringImpl **)(a3 + 8);
      if (v28)
      {
        if ((*((_BYTE *)v28 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v28 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v28, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v75);
          v28 = v75[0];
        }
      }
      v29 = *(WTF::StringImpl **)(v11 + 64776);
      *(_QWORD *)(v11 + 64776) = v28;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::~StringImpl(v29, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
        }
        else
        {
          *(_DWORD *)v29 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(a3 + 8) + 16) & 0x10) == 0)
    {
      v30 = *(_DWORD **)(v11 + 64776);
      *v30 += 2;
      __dmb(0xAu);
      v31 = *(WTF::StringImpl **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v30;
      v75[0] = v31;
      v32 = (_QWORD *)(v11 + 808);
      v33 = *(unsigned int *)(v11 + 820);
      if ((_DWORD)v33 == *(_DWORD *)(v11 + 816))
      {
        v35 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v32, v33 + 1, (unint64_t)v75);
        v33 = *(unsigned int *)(v11 + 820);
        v34 = (WTF::StringImpl **)(*(_QWORD *)(v11 + 808) + 8 * v33);
        v31 = *v35;
      }
      else
      {
        v34 = (WTF::StringImpl **)(*v32 + 8 * v33);
        v35 = v75;
      }
      *v35 = 0;
      *v34 = v31;
      *(_DWORD *)(v11 + 820) = v33 + 1;
      v36 = v75[0];
      v75[0] = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::~StringImpl(v36, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
        }
        else
        {
          *(_DWORD *)v36 -= 2;
        }
      }
    }
    v16 = *(WTF::StringImpl **)(v11 + 64776);
  }
  *(_DWORD *)v16 += 2;
  v73 = v16;
LABEL_15:
  if (*(_DWORD *)(v11 + 80))
  {
    v54 = *(_DWORD *)(v11 + 80);
    if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_57;
  }
  if (v12)
  {
    v45 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v74, a1, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_49;
  }
  if (v9[5] <= 0x16u)
  {
    v45 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v9, (JSC::SymbolObject **)a1, a3, a4, a5, a6, a7, a8);
LABEL_49:
    v9 = (unsigned __int8 *)v45;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v55 = *(_DWORD *)(v11 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
    {
LABEL_57:
      v15 = 0;
      goto LABEL_23;
    }
  }
  if (JSC::objectPrototypeHasOwnProperty(a1, (JSC::JSGlobalObject *)v9, (uint64_t)&v73, (uint64_t)a4, a5, a6, a7, a8))
    v15 = 7;
  else
    v15 = 6;
  v16 = v73;
LABEL_23:
  v73 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  return v15;
}

uint64_t operationEnumeratorRecoverNameAndPutByVal(JSC::JSGlobalObject *a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v12;
  JSC::JSRopeString *v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  int v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  _QWORD *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71[2];
  int v72;
  char v73;
  __int16 v74;
  char v75;
  uint64_t v76;
  _QWORD var48[10];

  v8 = a4;
  v12 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v12 + 40) = var48[9];
  if (*(_DWORD *)(a6 + 28) <= a5)
    v13 = 0;
  else
    v13 = *(JSC::JSRopeString **)(*(_QWORD *)(a6 + 8) + 8 * a5);
  v14 = *((_QWORD *)v13 + 1);
  if ((v14 & 1) == 0)
  {
    if ((*(_BYTE *)(v14 + 16) & 0x10) == 0)
    {
      v27 = *(WTF::StringImpl **)(v12 + 64768);
      if (v27 != (WTF::StringImpl *)v14)
      {
        *(_DWORD *)v14 += 2;
        *(_QWORD *)(v12 + 64768) = v14;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
        v28 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
        if (v28)
        {
          if ((*((_BYTE *)v28 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v28 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v28, a3, a4, a5, a6, a7, a8, (WTF *)v71);
            v28 = v71[0];
          }
        }
        v29 = *(WTF::StringImpl **)(v12 + 64776);
        *(_QWORD *)(v12 + 64776) = v28;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
          {
            WTF::StringImpl::~StringImpl(v29, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
          }
          else
          {
            *(_DWORD *)v29 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*((_QWORD *)v13 + 1) + 16) & 0x10) == 0)
      {
        v30 = *(_DWORD **)(v12 + 64776);
        *v30 += 2;
        __dmb(0xAu);
        v31 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = v30;
        v71[0] = v31;
        v32 = (_QWORD *)(v12 + 808);
        v33 = *(unsigned int *)(v12 + 820);
        if ((_DWORD)v33 == *(_DWORD *)(v12 + 816))
        {
          v35 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v32, v33 + 1, (unint64_t)v71);
          v33 = *(unsigned int *)(v12 + 820);
          v34 = (WTF::StringImpl **)(*(_QWORD *)(v12 + 808) + 8 * v33);
          v31 = *v35;
        }
        else
        {
          v34 = (WTF::StringImpl **)(*v32 + 8 * v33);
          v35 = v71;
        }
        *v35 = 0;
        *v34 = v31;
        *(_DWORD *)(v12 + 820) = v33 + 1;
        v36 = v71[0];
        v71[0] = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::~StringImpl(v36, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
      }
      v14 = *(_QWORD *)(v12 + 64776);
    }
    v15 = *(_DWORD *)v14;
    *(_DWORD *)v14 += 2;
    if (v15)
      goto LABEL_6;
LABEL_17:
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    goto LABEL_7;
  }
  JSC::JSRopeString::resolveRopeToAtomString(v13, a1);
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_13;
  v62 = *(_DWORD *)(v12 + 80);
  if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 16))
  {
    v18 = v71[0];
    if (!v71[0])
    {
      v14 = 0;
      goto LABEL_7;
    }
    v14 = 0;
    v17 = *(_DWORD *)v71[0] - 2;
    if (*(_DWORD *)v71[0] == 2)
    {
LABEL_48:
      WTF::StringImpl::~StringImpl(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      if (!v14)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else
  {
LABEL_13:
    v14 = (uint64_t)v71[0];
    if (!v71[0])
      goto LABEL_7;
    v17 = *(_DWORD *)v71[0];
    *(_DWORD *)v71[0] += 2;
    v18 = (WTF::StringImpl *)v14;
    if (!v17)
      goto LABEL_48;
  }
  *(_DWORD *)v18 = v17;
  if (!v14)
    goto LABEL_7;
LABEL_16:
  v15 = *(_DWORD *)v14 - 2;
  if (*(_DWORD *)v14 == 2)
    goto LABEL_17;
LABEL_6:
  *(_DWORD *)v14 = v15;
LABEL_7:
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_8;
  v45 = *(_DWORD *)(v12 + 80);
  if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = *(_QWORD *)(v12 + 16);
  if (!result)
  {
LABEL_8:
    v76 = 0;
    var48[0] = a2;
    v71[0] = 0;
    v71[1] = a2;
    v72 = -1;
    v73 = v73 & 0xF8 | v8;
    v74 = 0;
    v75 = 1;
    if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
      JSC::JSValue::putToPrimitive((JSC::JSValue *)var48, a1, v14, (unint64_t)a3, (uint64_t)v71, a6, a7, a8);
    else
      (*(void (**)(WTF::AtomStringImpl *, JSC::JSGlobalObject *, uint64_t, const WTF::StringImpl *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v14, a3, v71);
    return *(_QWORD *)(v12 + 16);
  }
  return result;
}

unint64_t operationNewRegexpWithLastIndex(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  uint64_t v21;
  uint64_t vars0;

  v9 = (uint64_t)a2;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = (unint64_t *)(v10 + 39344);
  *(_QWORD *)(v10 + 40) = vars0;
  v12 = *(_DWORD *)(a1 + 976);
  if (v12)
    v13 = 16 * (v12 & 0xFFFFFFFE);
  else
    v13 = 0;
  v14 = *v11;
  if (*v11 < *(_QWORD *)(v10 + 39352))
    goto LABEL_5;
  v14 = *(_QWORD *)(v10 + 39360);
  if ((v14 & 1) == 0)
  {
    v16 = *(_QWORD *)(v14 + 8) ^ *(_QWORD *)(v10 + 39368);
    *(_QWORD *)(v10 + 39352) = v14 + HIDWORD(v16);
    *(_QWORD *)(v10 + 39360) = v14 + (int)v16;
LABEL_5:
    *v11 = v14 + 32;
    goto LABEL_6;
  }
  v21 = v13;
  JSC::sanitizeStackForVM((JSC *)v10, a2, v13, (uint64_t)a2, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39320, v10 + 192, 32, 0, 0, v17, v18, v19);
  v13 = v21;
  v9 = (uint64_t)a2;
  v14 = SlowCase;
LABEL_6:
  *(_DWORD *)v14 = 0;
  JSC::RegExpObject::RegExpObject(v14, v10, v13, v9, 1);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v14 + 24) = a3;
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v14 + 7))
    JSC::Heap::writeBarrierSlowPath(v10 + 192, v14);
  return v14;
}

int *operationResolveRope(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int *result;
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  result = *(int **)(a2 + 8);
  if ((result & 1) != 0)
    return *JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
  return result;
}

unint64_t operationResolveRopeString(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
  return a2;
}

uint64_t operationStringValueOf(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM **v2;
  uint64_t v3;
  int v4;
  JSC::VM *var18[4];

  v2 = (JSC::VM **)*((_QWORD *)a1 + 7);
  v2[5] = var18[3];
  var18[0] = (JSC::VM *)v2;
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_5;
  v3 = a2;
  v4 = *(unsigned __int8 *)(a2 + 5);
  if (v4 != 2)
  {
    if ((v4 & 0xFE) == 0x4C)
      return *(_QWORD *)(a2 + 16);
LABEL_5:
    JSC::throwTypeError(a1, var18);
    return 0;
  }
  return v3;
}

uint64_t operationStringReplaceStringString(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  uint64_t v15;
  int **v16;
  int **v17;
  uint64_t *v18;
  uint64_t v19;
  int *v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  float v32;
  uint64_t v33;
  unsigned int v34;
  int *v35;
  unsigned int v36;
  uint64_t v37;
  double v38;
  double v39;
  float v40;
  int *v41;
  int8x16_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  int8x16_t *v88;
  uint64_t v89;
  unint64_t v90;
  int *v91;
  char v92;
  int v93;
  int *v94;
  WTF::AtomStringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  int *v122[2];
  WTF::StringImpl *v123;
  int8x16_t *v124;
  unint64_t v125;
  WTF::StringImpl *v126;
  _QWORD v127[3];
  WTF::StringImpl *v128;
  uint64_t v129;
  unsigned int v130[2];
  uint64_t v131;
  uint64_t vars0;
  StringView v133;

  v131 = *MEMORY[0x1E0C80C00];
  v15 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v15 + 40) = vars0;
  v16 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v16 = JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v15 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v17 = (int **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    v17 = JSC::JSRopeString::resolveRope(a3, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v15 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v18 = (uint64_t *)(a4 + 8);
  if ((*(_BYTE *)(a4 + 8) & 1) != 0)
    v18 = (uint64_t *)JSC::JSRopeString::resolveRope(a4, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v15 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v19 = *((_QWORD *)a1 + 7);
  v129 = v19;
  v127[0] = 0;
  v20 = *v16;
  if (*v16)
  {
    v21 = *((unsigned __int8 *)v20 + 16);
    v22 = *((_QWORD *)v20 + 1);
    LODWORD(v20) = v20[1];
    v127[0] = v22;
    v23 = (v21 >> 2) & 1;
  }
  else
  {
    LOBYTE(v23) = 1;
  }
  LODWORD(v127[1]) = (_DWORD)v20;
  BYTE4(v127[1]) = v23;
  v24 = *(_QWORD *)(v19 + 93360);
  if ((v24 & 1) != 0)
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 & 0xFFFFFFFFFFFFFFFCLL))(v19, v19 + 93360);
  v25 = *v17;
  if (*v17)
  {
    v26 = v25[4];
    v27 = *((_QWORD *)v25 + 1);
    LODWORD(v25) = v25[1];
    v28 = (v26 >> 2) & 1;
  }
  else
  {
    v27 = 0;
    LODWORD(v28) = 1;
  }
  LODWORD(v133.m_characters) = (_DWORD)v25;
  HIDWORD(v133.m_characters) = v28;
  *(_QWORD *)&v133.m_length = 0;
  v29 = WTF::StringView::find((uint64_t)v127, v24, v27, v133, *(double *)a9.i64, a10, a11);
  v33 = a2;
  if (v29 != -1)
  {
    v34 = v29;
    v35 = *v17;
    if (*v17)
      LODWORD(v35) = v35[1];
    v36 = v29 + (_DWORD)v35;
    v37 = WTF::String::find((uint64_t)v18, 0x24u, 0, v30, v31, v32);
    if (v37 == -1)
    {
      v41 = *v16;
      if (*v16)
      {
        v42 = (int8x16_t *)*((_QWORD *)v41 + 1);
        v43 = v41[1];
        v44 = (unint64_t)((v41[4] >> 2) & 1) << 32;
        v45 = v44 | v43;
        v46 = v44 | v34;
        if (v43 > v34)
          v47 = v46;
        else
          v47 = v45;
        v48 = v45;
        if ((_DWORD)v43)
          v49 = (char *)v42;
        else
          v49 = &str_77_5;
        if (!(_DWORD)v43)
          v47 = 0x100000000;
        v127[0] = v49;
        v127[1] = v47;
      }
      else
      {
        v42 = 0;
        LODWORD(v43) = 0;
        v48 = 0x100000000;
        v127[0] = &str_77_5;
        v127[1] = 0x100000000;
      }
      if (v48 <= v36)
      {
        v43 = 0x100000000;
        v42 = (int8x16_t *)&str_77_5;
        goto LABEL_37;
      }
      LODWORD(v43) = v43 - v36;
      if (v48 - v36 <= v43)
      {
        LODWORD(v43) = v48 - v36;
        if (!v36)
        {
          v43 = v48;
          goto LABEL_37;
        }
      }
      v43 = v43;
      v50 = v48 - (unint64_t)v36;
      if ((v48 & 0x100000000) != 0)
      {
        if (v50 >= v43)
        {
          v42 = (int8x16_t *)((char *)v42 + v36);
          v43 = v43 | 0x100000000;
LABEL_37:
          v124 = v42;
          v125 = v43;
          WTF::tryMakeString<WTF::StringView,WTF::String,WTF::StringView>((char *)v127, v18, &v124, v122);
          v128 = (WTF::StringImpl *)v122[0];
          if (v122[0])
            goto LABEL_38;
          JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v129);
          return 0;
        }
      }
      else if (v50 >= v43)
      {
        v42 = (int8x16_t *)((char *)v42 + 2 * v36);
        goto LABEL_37;
      }
      __break(1u);
    }
    memset(v127, 0, 21);
    v130[0] = v34;
    v130[1] = v36;
    v74 = *v18;
    if (*v18)
    {
      v75 = *(_QWORD *)(v74 + 8);
      v76 = *(unsigned int *)(v74 + 4) | ((unint64_t)((*(_DWORD *)(v74 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v75 = 0;
      v76 = 0x100000000;
    }
    v77 = *v16;
    if (*v16)
    {
      v78 = *((_QWORD *)v77 + 1);
      v79 = v77[1] | ((unint64_t)((v77[4] >> 2) & 1) << 32);
    }
    else
    {
      v78 = 0;
      v79 = 0x100000000;
    }
    JSC::substituteBackreferencesSlow((uint64_t)v127, v75, v76, v78, v79, v130, 0, v37, v38, v39, v40);
    if ((v127[2] & 0x80000000) == 0)
    {
      v86 = *v16;
      if (*v16 && (v87 = v86[1], (_DWORD)v87))
      {
        v88 = (int8x16_t *)*((_QWORD *)v86 + 1);
        v89 = (v86[4] >> 2) & 1;
        v90 = v87 <= v34
            ? v87 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v89 & 1) << 32)
            : (v89 << 32) | v34;
      }
      else
      {
        v90 = 0x100000000;
        v88 = (int8x16_t *)&str_77_5;
      }
      v124 = v88;
      v125 = v90;
      WTF::StringBuilder::toString((WTF::StringBuilder *)v127, v80, v81, v82, v83, v84, v85, &v123);
      v119 = 0;
      v91 = *v16;
      if (*v16)
      {
        v92 = *((_BYTE *)v91 + 16);
        v93 = v91[1];
        v119 = *((_QWORD *)v91 + 1);
        v120 = v93;
        v121 = (v92 & 4) != 0;
        LODWORD(v91) = v91[1];
      }
      else
      {
        v120 = 0;
        v121 = 1;
      }
      v122[0] = (int *)WTF::StringView::substring((const char *)&v119, v36, v91 - v36);
      v122[1] = v94;
      WTF::tryMakeString<WTF::StringView,WTF::String,WTF::StringView>((char *)&v124, (uint64_t *)&v123, (int8x16_t **)v122, (int **)&v126);
      v102 = v126;
      v128 = v126;
      v126 = 0;
      v103 = v123;
      v123 = 0;
      if (v103)
      {
        if (*(_DWORD *)v103 == 2)
        {
          WTF::StringImpl::~StringImpl(v103, v95, v96, v97, v98, v99, v100, v101);
          WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        }
        else
        {
          *(_DWORD *)v103 -= 2;
        }
      }
      if (v102)
      {
        WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v127, v95, v96, v97, v98, v99, v100, v101);
LABEL_38:
        v33 = JSC::jsString(v19, (JSC::VM *)&v128, v51, v52, v53, v54, v55, v56);
        v64 = v128;
        v128 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
          {
            WTF::StringImpl::~StringImpl(v64, v57, v58, v59, v60, v61, v62, v63);
            WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
          }
          else
          {
            *(_DWORD *)v64 -= 2;
          }
        }
        return v33;
      }
    }
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v129);
    WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v127, v112, v113, v114, v115, v116, v117, v118);
    return 0;
  }
  return v33;
}

uint64_t operationStringReplaceStringStringWithoutSubstitution(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  uint64_t v15;
  int **v16;
  int **v17;
  uint64_t *v18;
  uint64_t v19;
  int *v20;
  unsigned int v21;
  char *v22;
  int v23;
  uint64_t v24;
  int *v25;
  unint64_t v26;
  StringView v27;
  uint64_t result;
  uint64_t v29;
  int *v30;
  unsigned int v31;
  int *v32;
  int8x16_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int8x16_t *v65[2];
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  char *v68;
  uint64_t v69;
  _QWORD var58[12];

  v15 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v15 + 40) = var58[11];
  v16 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v16 = JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v15 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v17 = (int **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    v17 = JSC::JSRopeString::resolveRope(a3, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v15 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v18 = (uint64_t *)(a4 + 8);
  if ((*(_BYTE *)(a4 + 8) & 1) != 0)
    v18 = (uint64_t *)JSC::JSRopeString::resolveRope(a4, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v15 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v19 = *((_QWORD *)a1 + 7);
  var58[0] = v19;
  v68 = 0;
  v20 = *v16;
  if (*v16)
  {
    v21 = *((unsigned __int8 *)v20 + 16);
    v22 = (char *)*((_QWORD *)v20 + 1);
    LODWORD(v20) = v20[1];
    v68 = v22;
    v23 = (v21 >> 2) & 1;
  }
  else
  {
    LOBYTE(v23) = 1;
  }
  LODWORD(v69) = (_DWORD)v20;
  BYTE4(v69) = v23;
  v24 = *(_QWORD *)(v19 + 93360);
  if ((v24 & 1) != 0)
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 & 0xFFFFFFFFFFFFFFFCLL))(v19, v19 + 93360);
  v25 = *v17;
  if (*v17)
  {
    v26 = *((_QWORD *)v25 + 1);
    LODWORD(v27.m_characters) = v25[1];
    HIDWORD(v27.m_characters) = (v25[4] >> 2) & 1;
  }
  else
  {
    v26 = 0;
    v27.m_characters = (void *)0x100000000;
  }
  *(_QWORD *)&v27.m_length = 0;
  result = WTF::StringView::find((uint64_t)&v68, v24, v26, v27, *(double *)a9.i64, a10, a11);
  v29 = a2;
  if (result == -1)
    return v29;
  v30 = *v17;
  if (*v17)
    LODWORD(v30) = v30[1];
  v31 = (_DWORD)v30 + result;
  v32 = *v16;
  if (*v16)
  {
    v33 = (int8x16_t *)*((_QWORD *)v32 + 1);
    v34 = ((unint64_t)v32[4] >> 2) & 1;
    v35 = v32[1];
    v36 = v35 & 0xFFFFFFFEFFFFFFFFLL | (v34 << 32);
    if (v35 > result)
      v37 = (v34 << 32) | result;
    else
      v37 = v35 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)v32[4] >> 2) & 1) << 32);
    v38 = v35 | (v34 << 32);
    v39 = &str_77_5;
    if ((_DWORD)v35)
    {
      v38 = v36;
      v39 = (char *)v33;
      v40 = v37;
    }
    else
    {
      v40 = 0x100000000;
    }
    v68 = v39;
    v69 = v40;
  }
  else
  {
    v33 = 0;
    LODWORD(v35) = 0;
    v38 = 0x100000000;
    v68 = &str_77_5;
    v69 = 0x100000000;
  }
  if (v38 <= v31)
  {
    v35 = 0x100000000;
    v33 = (int8x16_t *)&str_77_5;
    goto LABEL_35;
  }
  LODWORD(v35) = v35 - v31;
  if (v38 - v31 <= v35)
  {
    LODWORD(v35) = v38 - v31;
    if (!v31)
    {
      v35 = v38;
      goto LABEL_35;
    }
  }
  v41 = v31;
  v35 = v35;
  v42 = v38 - (unint64_t)v31;
  if ((v38 & 0x100000000) != 0)
  {
    if (v42 >= v35)
    {
      v33 = (int8x16_t *)((char *)v33 + v41);
      v35 = v35 | 0x100000000;
LABEL_35:
      v65[0] = v33;
      v65[1] = (int8x16_t *)v35;
      WTF::tryMakeString<WTF::StringView,WTF::String,WTF::StringView>((char *)&v68, v18, v65, (int **)&v66);
      v67 = v66;
      if (v66)
      {
        v29 = JSC::jsString(v19, (JSC::VM *)&v67, v43, v44, v45, v46, v47, v48);
        v56 = v67;
        v67 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
          {
            WTF::StringImpl::~StringImpl(v56, v49, v50, v51, v52, v53, v54, v55);
            WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
          }
          else
          {
            *(_DWORD *)v56 -= 2;
          }
        }
        return v29;
      }
      JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)var58);
      return 0;
    }
  }
  else if (v42 >= v35)
  {
    v33 = (int8x16_t *)((char *)v33 + 2 * v41);
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

unint64_t operationStringReplaceStringEmptyString(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  uint64_t v14;
  int **v15;
  int **v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  JSC::JSGlobalObject *v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int (*v29)(uint64_t, uint64_t, int, int);
  uint64_t Common;
  unsigned int v31;
  int *v32;
  int8x16_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  JSC::VM *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  int8x8_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint16x4_t *v79;
  uint64_t v80;
  unint64_t v81;
  unsigned __int16 *v82;
  unsigned int v83;
  uint64_t v84;
  int8x16_t v85;
  int8x16_t v86;
  uint16x4_t *v87;
  unint64_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  uint16x8_t v95;
  uint32x4_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  uint32x4_t v100;
  int8x16_t v101;
  int8x16_t v102;
  uint32x4_t v103;
  int8x16_t v104;
  int8x16_t v105;
  uint32x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  uint64_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t *v112;
  uint64_t v113;
  int8x16_t v114;
  unint64_t OutOfMemoryError;
  double v116;
  int v117;
  int v118;
  WTF::StringImpl *v119;
  unint64_t v120;
  uint64_t v121;
  int (*v122)(uint64_t, uint64_t, int, int);
  int v123;
  uint64_t vars0;
  StringView v125;
  StringView v126;

  v14 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v14 + 40) = vars0;
  v15 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v15 = JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v14 + 80))
  {
    v117 = *(_DWORD *)(v14 + 80);
    if ((v117 & 0x27) != 0 && (v117 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      return 0;
  }
  v16 = (int **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    v16 = JSC::JSRopeString::resolveRope(a3, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v14 + 80))
  {
    v118 = *(_DWORD *)(v14 + 80);
    if ((v118 & 0x27) != 0 && (v118 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      return 0;
  }
  v17 = *v15;
  if (*v15)
  {
    v18 = *((_QWORD *)v17 + 1);
    v19 = v17[1] | ((unint64_t)((v17[4] >> 2) & 1) << 32);
  }
  else
  {
    v18 = 0;
    v19 = 0x100000000;
  }
  v20 = (JSC::JSGlobalObject *)(v14 + 93360);
  v21 = *(_QWORD *)(v14 + 93360);
  if ((v21 & 1) != 0)
    v21 = (*(uint64_t (**)(uint64_t))(v21 & 0xFFFFFFFFFFFFFFFCLL))(v14);
  v22 = *v16;
  if (!*v16)
  {
    LODWORD(Common) = 0;
    goto LABEL_25;
  }
  v23 = v22[1];
  if (!(_DWORD)v23)
  {
    LODWORD(Common) = 0;
LABEL_24:
    LODWORD(v22) = v22[1];
    goto LABEL_25;
  }
  v24 = v22[4];
  v25 = *((_QWORD *)v22 + 1);
  if ((v19 & 0x80000000) == 0 && (v23 & 0x80000000) == 0)
  {
    v26 = (v24 >> 2) & 1;
    if ((int)v23 <= 250)
      v27 = 250;
    else
      v27 = v23;
    v28 = v27 - 250;
    if ((v19 & 0x100000000) == 0)
    {
      if ((_DWORD)v26)
      {
        v119 = (WTF::StringImpl *)v21;
        v120 = v25;
        v121 = v23;
        v123 = v28;
        if (v23 > 6)
        {
          v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,char16_t>::initialSearch;
        }
        else if ((_DWORD)v23 == 1)
        {
          v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,char16_t>::singleCharSearch;
        }
        else
        {
          v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,char16_t>::linearSearch;
        }
      }
      else
      {
        v119 = (WTF::StringImpl *)v21;
        v120 = v25;
        v121 = v23;
        v123 = v28;
        if (v23 > 6)
        {
          v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,char16_t>::initialSearch;
        }
        else if ((_DWORD)v23 == 1)
        {
          v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,char16_t>::singleCharSearch;
        }
        else
        {
          v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,char16_t>::linearSearch;
        }
      }
      goto LABEL_58;
    }
    if ((_DWORD)v26)
    {
      v119 = (WTF::StringImpl *)v21;
      v120 = v25;
      v121 = v23;
      v123 = v28;
      if (v23 > 6)
      {
        v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::initialSearch;
      }
      else if ((_DWORD)v23 == 1)
      {
        v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::singleCharSearch;
      }
      else
      {
        v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::linearSearch;
      }
LABEL_58:
      v122 = v29;
      Common = v29((uint64_t)&v119, v18, v19, 0);
      goto LABEL_59;
    }
    v119 = (WTF::StringImpl *)v21;
    v120 = v25;
    v121 = v23;
    v60 = v25 + 2 * v23;
    v123 = v28;
    if ((v25 & 7) != 0)
    {
      v61 = 0;
      v62 = 2 * v23 - 2;
      v63 = v25 + 2;
      v64 = v25;
      do
      {
        v65 = *(unsigned __int16 *)v64;
        v64 += 2;
        *(_QWORD *)&v61 |= v65;
        if ((v63 & 7) == 0)
          break;
        v66 = v62;
        v62 -= 2;
        v63 += 2;
      }
      while (v66);
    }
    else
    {
      v61 = 0;
      v64 = v25;
    }
    v76 = v60 & 0xFFFFFFFFFFFFFFF8;
    if (v64 >= (v60 & 0xFFFFFFFFFFFFFFF8))
    {
      v79 = (uint16x4_t *)v64;
      goto LABEL_79;
    }
    v77 = v64 + 8;
    if (v76 > v64 + 8)
      v77 = v60 & 0xFFFFFFFFFFFFFFF8;
    v78 = v77 + ~v64;
    if (v78 >= 0x18)
    {
      v109 = (v78 >> 3) + 1;
      v79 = (uint16x4_t *)(v64 + 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL));
      v110 = 0uLL;
      v111 = (int8x16_t)(unint64_t)v61;
      v112 = (int8x16_t *)(v64 + 16);
      v113 = v109 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v111 = vorrq_s8(v112[-1], v111);
        v110 = vorrq_s8(*v112, v110);
        v112 += 2;
        v113 -= 4;
      }
      while (v113);
      v114 = vorrq_s8(v110, v111);
      v61 = vorr_s8(*(int8x8_t *)v114.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL));
      if (v109 == (v109 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_79:
        if (v79 != (uint16x4_t *)v60)
        {
          v81 = v25 + 2 * v23 - (_QWORD)v79 - 2;
          if (v81 >= 0x1E)
          {
            v84 = (v81 >> 1) + 1;
            v85 = 0uLL;
            v86 = (int8x16_t)(unint64_t)v61;
            v82 = (unsigned __int16 *)v79 + (v84 & 0xFFFFFFFFFFFFFFF0);
            v87 = v79 + 2;
            v88 = v84 & 0xFFFFFFFFFFFFFFF0;
            v89 = 0uLL;
            v90 = 0uLL;
            v91 = 0uLL;
            v92 = 0uLL;
            v93 = 0uLL;
            v94 = 0uLL;
            do
            {
              v95 = *(uint16x8_t *)v87[-2].i8;
              v96 = vmovl_u16(*(uint16x4_t *)v95.i8);
              v97.i64[0] = v96.u32[0];
              v97.i64[1] = v96.u32[1];
              v98 = v97;
              v97.i64[0] = v96.u32[2];
              v97.i64[1] = v96.u32[3];
              v99 = v97;
              v100 = vmovl_high_u16(v95);
              v97.i64[0] = v100.u32[0];
              v97.i64[1] = v100.u32[1];
              v101 = v97;
              v97.i64[0] = v100.u32[2];
              v97.i64[1] = v100.u32[3];
              v102 = v97;
              v103 = vmovl_u16(*v87);
              v97.i64[0] = v103.u32[0];
              v97.i64[1] = v103.u32[1];
              v104 = v97;
              v97.i64[0] = v103.u32[2];
              v97.i64[1] = v103.u32[3];
              v105 = v97;
              v106 = vmovl_high_u16(*(uint16x8_t *)v87->i8);
              v97.i64[0] = v106.u32[0];
              v97.i64[1] = v106.u32[1];
              v107 = v97;
              v97.i64[0] = v106.u32[2];
              v97.i64[1] = v106.u32[3];
              v90 = vorrq_s8(v90, v102);
              v89 = vorrq_s8(v89, v101);
              v85 = vorrq_s8(v85, v99);
              v86 = vorrq_s8(v86, v98);
              v94 = vorrq_s8(v94, v97);
              v93 = vorrq_s8(v93, v107);
              v92 = vorrq_s8(v92, v105);
              v91 = vorrq_s8(v91, v104);
              v87 += 4;
              v88 -= 16;
            }
            while (v88);
            v108 = vorrq_s8(vorrq_s8(vorrq_s8(v91, v86), vorrq_s8(v93, v89)), vorrq_s8(vorrq_s8(v92, v85), vorrq_s8(v94, v90)));
            v61 = vorr_s8(*(int8x8_t *)v108.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL));
            if (v84 == (v84 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_83;
          }
          else
          {
            v82 = (unsigned __int16 *)v79;
          }
          do
          {
            v83 = *v82++;
            *(_QWORD *)&v61 |= v83;
          }
          while (v82 != (unsigned __int16 *)v60);
        }
LABEL_83:
        if ((*(_QWORD *)&v61 & 0xFF00FF00FF00FF00) != 0)
        {
          v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,unsigned char>::failSearch;
        }
        else if ((int)v23 > 6)
        {
          v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,unsigned char>::initialSearch;
        }
        else if ((_DWORD)v23 == 1)
        {
          v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,unsigned char>::singleCharSearch;
        }
        else
        {
          v29 = (int (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,unsigned char>::linearSearch;
        }
        goto LABEL_58;
      }
    }
    else
    {
      v79 = (uint16x4_t *)v64;
    }
    do
    {
      v80 = (uint64_t)*v79++;
      *(_QWORD *)&v61 |= v80;
    }
    while ((unint64_t)v79 < v76);
    goto LABEL_79;
  }
  v126.m_characters = (void *)(v23 & 0xFFFFFFFEFFFFFFFFLL | (((v24 >> 2) & 1) << 32));
  v125.m_characters = (void *)v19;
  *(_QWORD *)&v125.m_length = v25;
  *(_QWORD *)&v126.m_length = 0;
  Common = WTF::findCommon(v18, v125, v126, *(double *)a9.i64, a10, a11);
LABEL_59:
  if (Common == -1)
    return a2;
  v22 = *v16;
  if (*v16)
    goto LABEL_24;
LABEL_25:
  v31 = (_DWORD)v22 + Common;
  v32 = *v15;
  if (*v15)
  {
    v33 = (int8x16_t *)*((_QWORD *)v32 + 1);
    v34 = v32[1];
    v35 = ((unint64_t)v32[4] >> 2) & 1;
    v36 = v35 << 32;
    v37 = v34 & 0xFFFFFFFEFFFFFFFFLL | ((v35 & 1) << 32);
    v38 = (v35 << 32) | Common;
    if (v34 <= Common)
      v38 = v37;
    if ((_DWORD)v34)
    {
      v36 = v37;
      v39 = (JSC::VM *)v33;
    }
    else
    {
      v39 = (JSC::VM *)&str_77_5;
    }
    if (!(_DWORD)v34)
      v38 = 0x100000000;
    v40 = v38;
  }
  else
  {
    v33 = 0;
    LODWORD(v34) = 0;
    v36 = 0x100000000;
    v38 = 0x100000000;
    v40 = 0x100000000;
    v39 = (JSC::VM *)&str_77_5;
  }
  if (v36 <= v31)
  {
    v43 = 0x100000000;
    v33 = (int8x16_t *)&str_77_5;
    goto LABEL_45;
  }
  v41 = v34 - v31;
  if (v36 - v31 <= v34 - v31)
  {
    v41 = v36 - v31;
    if (!v31)
    {
      v43 = v36;
      goto LABEL_45;
    }
  }
  v42 = v31;
  v43 = v41;
  v44 = v36 - (unint64_t)v31;
  if ((v36 & 0x100000000) == 0)
  {
    if (v44 >= v41)
    {
      v33 = (int8x16_t *)((char *)v33 + 2 * v42);
      goto LABEL_45;
    }
LABEL_116:
    __break(1u);
LABEL_117:
    v39 = (JSC::VM *)JSC::Exception::create(v14, v39, 0, v40, (uint64_t)v33, v43, a7, a8);
    goto LABEL_108;
  }
  if (v44 < v41)
    goto LABEL_116;
  v33 = (int8x16_t *)((char *)v33 + v42);
  v43 = v41 | 0x100000000;
LABEL_45:
  if (((v43 | v38) & 0x80000000) != 0 || __OFADD__((_DWORD)v38, (_DWORD)v43))
  {
    v119 = 0;
  }
  else
  {
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((v38 + v43), HIDWORD(v38) & HIDWORD(v43), (int8x16_t *)v39, v40, v33, v43, (int **)&v119);
    if (v119)
    {
      v58 = JSC::jsString(v14, (JSC::VM *)&v119, v45, v46, v47, v48, v49, v50);
      goto LABEL_49;
    }
  }
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v20);
  v39 = (JSC::VM *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    goto LABEL_117;
  }
LABEL_108:
  JSC::VM::throwException((JSC::VM *)v14, a1, v39, v116, v40, (uint64_t)v33, v43, a7, a8);
  v58 = 0;
LABEL_49:
  v59 = v119;
  v119 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  return v58;
}

uint64_t operationStringReplaceStringStringWithTable8(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, WTF::String *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9, int16x8_t a10, int16x8_t a11)
{
  uint64_t v16;
  int **v17;
  int **v18;
  uint64_t *v19;
  JSC::VM *v20;
  int *v21;
  int16x8_t *v22;
  unsigned int v23;
  int v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int16x8_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int16x8_t *v33;
  uint16x8_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int16x8_t *v40;
  unsigned int v41;
  int8x16_t *v42;
  int v43;
  __int32 v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint8x8_t *v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int16x8_t *v69;
  unsigned int v70;
  int16x8_t *v71;
  __int32 v72;
  __int32 v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  double v79;
  double v80;
  float v81;
  int *v82;
  int8x16_t *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  JSC::JSGlobalObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t OutOfMemoryError;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  JSC::Exception *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  int8x16_t *v138;
  uint64_t v139;
  unint64_t v140;
  int *v141;
  char v142;
  int v143;
  int *v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF::AtomStringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  BOOL v173;
  int *v174[2];
  WTF::StringImpl *v175;
  int8x16_t *v176;
  unint64_t v177;
  WTF::StringImpl *v178;
  _QWORD v179[3];
  WTF::StringImpl *v180;
  JSC::VM *v181;
  unsigned int v182[2];
  uint64_t v183;
  uint64_t vars0;

  v183 = *MEMORY[0x1E0C80C00];
  v16 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v16 + 40) = vars0;
  v17 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v17 = JSC::JSRopeString::resolveRope(a2, a1, a3, (uint64_t)this, (int8x16_t)a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v16 + 80))
  {
    v59 = *(_DWORD *)(v16 + 80);
    if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, (uint64_t)this, a5, a6, a7, a8);
    if (*(_QWORD *)(v16 + 16))
      return 0;
  }
  v18 = (int **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    v18 = JSC::JSRopeString::resolveRope(a3, a1, a3, (uint64_t)this, (int8x16_t)a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v16 + 80))
  {
    v60 = *(_DWORD *)(v16 + 80);
    if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, (uint64_t)this, a5, a6, a7, a8);
    if (*(_QWORD *)(v16 + 16))
      return 0;
  }
  v19 = (uint64_t *)((char *)this + 8);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    v19 = (uint64_t *)JSC::JSRopeString::resolveRope((unint64_t)this, a1, a3, (uint64_t)this, (int8x16_t)a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v16 + 80))
  {
    v61 = *(_DWORD *)(v16 + 80);
    if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, (uint64_t)this, a5, a6, a7, a8);
    if (*(_QWORD *)(v16 + 16))
      return 0;
  }
  v20 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v181 = v20;
  v21 = *v17;
  if (*v17)
  {
    v22 = (int16x8_t *)*((_QWORD *)v21 + 1);
    v23 = v21[1];
    v24 = (v21[4] >> 2) & 1;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v24 = 1;
  }
  v25 = *v18;
  if (!*v18)
  {
    LODWORD(v57) = 0;
    LODWORD(v26) = 0;
    goto LABEL_131;
  }
  v26 = v25[1];
  v27 = a2;
  if (v26 > v23)
    return v27;
  if (!(_DWORD)v26)
  {
    LODWORD(v57) = 0;
    goto LABEL_131;
  }
  v28 = v25[4];
  v29 = (int16x8_t *)*((_QWORD *)v25 + 1);
  if (!v24)
  {
    v30 = (unint64_t)v22 + 2 * v23 + -2 * v26;
    v27 = a2;
    if ((v28 & 4) == 0)
    {
      if ((unint64_t)v22 <= v30)
      {
        v69 = (int16x8_t *)((char *)v29 + 2 * v26);
        v70 = 31 - __clz(v26 - 1);
        v71 = v22;
        while (1)
        {
          if ((_DWORD)v26 == 1)
          {
            v72 = v71->u16[0];
            v73 = v29->u16[0];
LABEL_115:
            if (v72 == v73)
            {
LABEL_196:
              v76 = (char *)v71 - (char *)v22;
              goto LABEL_129;
            }
          }
          else
          {
            switch(v70)
            {
              case 0u:
                v72 = v71->i32[0];
                v73 = v29->i32[0];
                goto LABEL_115;
              case 1u:
                if (v71->i32[0] != v29->i32[0])
                  goto LABEL_116;
                v72 = *(__int32 *)((char *)&v71->i32[-1] + 2 * v26);
                v73 = v69[-1].i32[3];
                goto LABEL_115;
              case 2u:
                if (v71->i64[0] == v29->i64[0] && *(uint64_t *)((char *)&v71->i64[-1] + 2 * v26) == v69[-1].i64[1])
                  goto LABEL_196;
                goto LABEL_116;
              case 3u:
                a11 = v69[-1];
                a10 = vceqq_s16(*(int16x8_t *)((char *)v71 + 2 * v26 - 16), a11);
                a9 = (int16x8_t)vandq_s8((int8x16_t)a10, (int8x16_t)vceqq_s16(*v71, *v29));
                a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                if (a9.i32[0])
                  goto LABEL_196;
                goto LABEL_116;
              default:
                a10 = *v29;
                a9 = vceqq_s16(*v71, *v29);
                a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                if (!a9.i32[0])
                  goto LABEL_116;
                if (v26 < 8)
                  goto LABEL_196;
                v169 = v26 & 7;
                break;
            }
            while (1)
            {
              v170 = 2 * v169;
              a10 = *(int16x8_t *)((char *)v29 + v170);
              a9 = vceqq_s16(*(int16x8_t *)((char *)v71 + v170), a10);
              a9.i16[0] = vminvq_u16((uint16x8_t)a9);
              if (!a9.i32[0])
                break;
              v169 += 8;
              if (v169 >= v26)
                goto LABEL_196;
            }
          }
LABEL_116:
          v71 = (int16x8_t *)((char *)v71 + 2 * *(unsigned __int8 *)(a5 + v71->u8[2 * v26 - 2]));
          if ((unint64_t)v71 > v30)
            return a2;
        }
      }
      return v27;
    }
    if ((unint64_t)v22 > v30)
      return v27;
    v31 = v26 - 1;
    if (v26 >= 8)
    {
      a9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v29->i8);
      v32 = 2 * v31;
      v33 = v22;
      do
      {
        v34 = (uint16x8_t)vceqq_s16(*v33, a9);
        v34.i16[0] = vminvq_u16(v34);
        v35 = v26 & 7;
        if (v34.i32[0])
        {
          while (1)
          {
            a11 = *(int16x8_t *)((char *)v33 + 2 * v35);
            a10 = vceqq_s16(a11, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v29->i8[v35]));
            a10.i16[0] = vminvq_u16((uint16x8_t)a10);
            if (!a10.i32[0])
              break;
            v35 += 8;
            if (v35 >= v26)
              goto LABEL_128;
          }
        }
        v33 = (int16x8_t *)((char *)v33 + 2 * *(unsigned __int8 *)(a5 + v33->u8[v32]));
      }
      while ((unint64_t)v33 <= v30);
      return a2;
    }
    if (v26 < 4)
    {
      if (v26 < 2)
      {
        v74 = v29->u8[0];
        v75 = 2 * v31;
        v33 = v22;
        while (v33->u16[0] != v74)
        {
          v33 = (int16x8_t *)((char *)v33 + 2 * *(unsigned __int8 *)(a5 + v33->u8[v75]));
          if ((unint64_t)v33 > v30)
            return a2;
        }
      }
      else
      {
        v52 = *(unsigned __int16 *)((char *)v29->u16 + (v26 & 1));
        v53 = (v29->u16[0] | (v29->u16[0] << 8)) & 0xFF00FF;
        v54 = (v52 | (v52 << 8)) & 0xFF00FF;
        v55 = 2 * v31;
        v33 = v22;
        while (v53 != v33->i32[0] || v54 != *(__int32 *)((char *)v33->i32 + 2 * (v26 & 1)))
        {
          v33 = (int16x8_t *)((char *)v33 + 2 * *(unsigned __int8 *)(a5 + v33->u8[v55]));
          if ((unint64_t)v33 > v30)
            return a2;
        }
      }
    }
    else
    {
      v46 = (v29->u32[0] | ((unint64_t)v29->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v47 = (v46 | (v46 << 8)) & 0xFF00FF00FF00FFLL;
      v48 = (*(unsigned int *)((char *)v29->u32 + (v26 & 3)) | ((unint64_t)*(unsigned int *)((char *)v29->u32
                                                                                                  + (v26 & 3)) << 16)) & 0xFFFF0000FFFFLL;
      v49 = (v48 | (v48 << 8)) & 0xFF00FF00FF00FFLL;
      v50 = 2 * v31;
      v33 = v22;
      while (v47 != v33->i64[0] || v49 != *(uint64_t *)((char *)v33->i64 + 2 * (v26 & 3)))
      {
        v33 = (int16x8_t *)((char *)v33 + 2 * *(unsigned __int8 *)(a5 + v33->u8[v50]));
        if ((unint64_t)v33 > v30)
          return a2;
      }
    }
LABEL_128:
    v76 = (char *)v33 - (char *)v22;
LABEL_129:
    v57 = v76 >> 1;
    goto LABEL_130;
  }
  v36 = (unint64_t)v22->u64 + v23 - v26;
  v27 = a2;
  if ((v28 & 4) != 0)
  {
    if ((unint64_t)v22 > v36)
      return v27;
    v37 = v26 - 1;
    if ((_DWORD)v26 != 1)
    {
      v38 = __clz(v26 - 1);
      v39 = 32 - v38;
      v40 = (int16x8_t *)((char *)v29 + v26);
      v41 = 31 - v38;
      v42 = (int8x16_t *)v22;
      while (1)
      {
        if (v39 == 3)
        {
          if (v42->i32[0] == v29->i32[0])
          {
            v43 = *(__int32 *)((char *)&v42->i32[-1] + v26);
            v44 = v40[-1].i32[3];
LABEL_33:
            if (v43 == v44)
              goto LABEL_62;
          }
        }
        else
        {
          switch(v41)
          {
            case 0u:
              v43 = v42->u16[0];
              v44 = v29->u16[0];
              goto LABEL_33;
            case 1u:
              if (v42->u16[0] != v29->u16[0])
                goto LABEL_34;
              v43 = *(unsigned __int16 *)((char *)&v42->u16[-1] + v26);
              v44 = v40[-1].u16[7];
              goto LABEL_33;
            case 3u:
              if (v42->i64[0] == v29->i64[0] && *(uint64_t *)((char *)&v42->i64[-1] + v26) == v40[-1].i64[1])
                goto LABEL_62;
              goto LABEL_34;
            case 4u:
              a11 = v40[-1];
              a10 = (int16x8_t)vceqq_s8(*(int8x16_t *)((char *)&v42[-1] + v26), (int8x16_t)a11);
              a9 = (int16x8_t)vandq_s8((int8x16_t)a10, vceqq_s8(*v42, *(int8x16_t *)v29));
              a9.i8[0] = vminvq_u8((uint8x16_t)a9);
              if (a9.i32[0])
                goto LABEL_62;
              goto LABEL_34;
            default:
              a10 = *v29;
              a9 = (int16x8_t)vceqq_s8(*v42, *(int8x16_t *)v29);
              a9.i8[0] = vminvq_u8((uint8x16_t)a9);
              if (!a9.i32[0])
                goto LABEL_34;
              v45 = v26 & 0xF;
              if (v26 < 0x10)
                goto LABEL_62;
              break;
          }
          while (1)
          {
            a10 = *(int16x8_t *)((char *)v29 + v45);
            a9 = (int16x8_t)vceqq_s8(*(int8x16_t *)((char *)v42 + v45), (int8x16_t)a10);
            a9.i8[0] = vminvq_u8((uint8x16_t)a9);
            if (!a9.i32[0])
              break;
            v45 += 16;
            if (v45 >= v26)
              goto LABEL_62;
          }
        }
LABEL_34:
        v42 = (int8x16_t *)((char *)v42 + *(unsigned __int8 *)(a5 + v42->u8[v37]));
        if ((unint64_t)v42 > v36)
          return a2;
      }
    }
    v58 = v29->u8[0];
    v42 = (int8x16_t *)v22;
    while (v42->u8[0] != v58)
    {
      v42 = (int8x16_t *)((char *)v42 + *(unsigned __int8 *)(a5 + v42->u8[v37]));
      if ((unint64_t)v42 > v36)
        return a2;
    }
LABEL_62:
    v57 = (char *)v42 - (char *)v22;
LABEL_130:
    v27 = a2;
    if (v57 == -1)
      return v27;
LABEL_131:
    v77 = v57 + v26;
    v78 = WTF::String::find((uint64_t)v19, 0x24u, 0, *(double *)a9.i64, *(double *)a10.i64, *(float *)a11.i32);
    if (v78 == -1)
    {
      v82 = *v17;
      if (*v17)
      {
        v83 = (int8x16_t *)*((_QWORD *)v82 + 1);
        v84 = v82[1];
        v85 = (unint64_t)((v82[4] >> 2) & 1) << 32;
        v86 = v85 | v84;
        v87 = v85 | v57;
        if (v84 > v57)
          v88 = v87;
        else
          v88 = v86;
        v89 = v86;
        if ((_DWORD)v84)
          v90 = (char *)v83;
        else
          v90 = &str_77_5;
        if (!(_DWORD)v84)
          v88 = 0x100000000;
        v179[0] = v90;
        v179[1] = v88;
      }
      else
      {
        v83 = 0;
        LODWORD(v84) = 0;
        v89 = 0x100000000;
        v179[0] = &str_77_5;
        v179[1] = 0x100000000;
      }
      if (v89 <= v77)
      {
        v84 = 0x100000000;
        v83 = (int8x16_t *)&str_77_5;
        goto LABEL_149;
      }
      LODWORD(v84) = v84 - v77;
      if (v89 - v77 <= v84)
      {
        LODWORD(v84) = v89 - v77;
        if (!v77)
        {
          v84 = v89;
          goto LABEL_149;
        }
      }
      v84 = v84;
      v91 = v89 - (unint64_t)v77;
      if ((v89 & 0x100000000) != 0)
      {
        if (v91 >= v84)
        {
          v83 = (int8x16_t *)((char *)v83 + v77);
          v84 = v84 | 0x100000000;
LABEL_149:
          v176 = v83;
          v177 = v84;
          WTF::tryMakeString<WTF::StringView,WTF::String,WTF::StringView>((char *)v179, v19, &v176, v174);
          v180 = (WTF::StringImpl *)v174[0];
          if (v174[0])
            goto LABEL_150;
          OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v92);
          v123 = (JSC::Exception *)OutOfMemoryError;
          if ((OutOfMemoryError & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                    + 0x4C)))
          {
            v123 = (JSC::Exception *)JSC::Exception::create((uint64_t)v20, (JSC::VM *)OutOfMemoryError, 0, v117, v118, v119, v120, v121);
          }
          JSC::VM::throwException(v20, a1, v123, v122, v117, v118, v119, v120, v121);
          return 0;
        }
      }
      else if (v91 >= v84)
      {
        v83 = (int8x16_t *)((char *)v83 + 2 * v77);
        goto LABEL_149;
      }
      __break(1u);
    }
    memset(v179, 0, 21);
    v182[0] = v57;
    v182[1] = v77;
    v124 = *v19;
    if (*v19)
    {
      v125 = *(_QWORD *)(v124 + 8);
      v126 = *(unsigned int *)(v124 + 4) | ((unint64_t)((*(_DWORD *)(v124 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v125 = 0;
      v126 = 0x100000000;
    }
    v127 = *v17;
    if (*v17)
    {
      v128 = *((_QWORD *)v127 + 1);
      v129 = v127[1] | ((unint64_t)((v127[4] >> 2) & 1) << 32);
    }
    else
    {
      v128 = 0;
      v129 = 0x100000000;
    }
    JSC::substituteBackreferencesSlow((uint64_t)v179, v125, v126, v128, v129, v182, 0, v78, v79, v80, v81);
    if ((v179[2] & 0x80000000) == 0)
    {
      v136 = *v17;
      if (*v17 && (v137 = v136[1], (_DWORD)v137))
      {
        v138 = (int8x16_t *)*((_QWORD *)v136 + 1);
        v139 = (v136[4] >> 2) & 1;
        if (v137 <= v57)
          v140 = v137 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v139 & 1) << 32);
        else
          v140 = (v139 << 32) | v57;
      }
      else
      {
        v140 = 0x100000000;
        v138 = (int8x16_t *)&str_77_5;
      }
      v176 = v138;
      v177 = v140;
      WTF::StringBuilder::toString((WTF::StringBuilder *)v179, v130, v131, v132, v133, v134, v135, &v175);
      v171 = 0;
      v141 = *v17;
      if (*v17)
      {
        v142 = *((_BYTE *)v141 + 16);
        v143 = v141[1];
        v171 = *((_QWORD *)v141 + 1);
        v172 = v143;
        v173 = (v142 & 4) != 0;
        LODWORD(v141) = v141[1];
      }
      else
      {
        v172 = 0;
        v173 = 1;
      }
      v174[0] = (int *)WTF::StringView::substring((const char *)&v171, v77, v141 - v77);
      v174[1] = v144;
      WTF::tryMakeString<WTF::StringView,WTF::String,WTF::StringView>((char *)&v176, (uint64_t *)&v175, (int8x16_t **)v174, (int **)&v178);
      v152 = v178;
      v180 = v178;
      v178 = 0;
      v153 = v175;
      v175 = 0;
      if (v153)
      {
        if (*(_DWORD *)v153 == 2)
        {
          WTF::StringImpl::~StringImpl(v153, v145, v146, v147, v148, v149, v150, v151);
          WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
        }
        else
        {
          *(_DWORD *)v153 -= 2;
        }
      }
      if (v152)
      {
        WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v179, v145, v146, v147, v148, v149, v150, v151);
LABEL_150:
        v27 = JSC::jsString((uint64_t)v20, (JSC::VM *)&v180, v93, v94, v95, v96, v97, v98);
        v106 = v180;
        v180 = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 2)
          {
            WTF::StringImpl::~StringImpl(v106, v99, v100, v101, v102, v103, v104, v105);
            WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
          }
          else
          {
            *(_DWORD *)v106 -= 2;
          }
        }
        return v27;
      }
    }
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v181);
    WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v179, v162, v163, v164, v165, v166, v167, v168);
    return 0;
  }
  if ((unint64_t)v22 <= v36)
  {
    v62 = (uint8x8_t *)v22;
    while (1)
    {
      if (v26 < 8)
      {
        if (v26 < 4)
        {
          if (v26 < 2)
          {
            if (v29->i16[0] == v62->u8[0])
              goto LABEL_104;
          }
          else if (((v62->u16[0] | (v62->u16[0] << 8)) & 0xFF00FF) == v29->i32[0]
                 && ((*(unsigned __int16 *)((char *)v62->u16 + (v26 & 1)) | (*(unsigned __int16 *)((char *)v62->u16
                                                                                                 + (v26 & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)v29->i32 + 2 * (v26 & 1)))
          {
LABEL_104:
            v57 = (char *)v62 - (char *)v22;
            goto LABEL_130;
          }
        }
        else
        {
          v64 = (v62->u32[0] | ((unint64_t)v62->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v65 = (*(unsigned int *)((char *)v62->u32 + (v26 & 3)) | ((unint64_t)*(unsigned int *)((char *)v62->u32 + (v26 & 3)) << 16)) & 0xFFFF0000FFFFLL;
          v66 = (v65 | (v65 << 8)) & 0xFF00FF00FF00FFLL;
          if (((v64 | (v64 << 8)) & 0xFF00FF00FF00FFLL) == v29->i64[0]
            && v66 == *(uint64_t *)((char *)v29->i64 + 2 * (v26 & 3)))
          {
            goto LABEL_104;
          }
        }
      }
      else
      {
        a10 = *v29;
        a9 = vceqq_s16(*v29, (int16x8_t)vmovl_u8(*v62));
        a9.i16[0] = vminvq_u16((uint16x8_t)a9);
        if (a9.i32[0])
        {
          v63 = v26 & 7;
          while (1)
          {
            a10 = *(int16x8_t *)((char *)v29 + 2 * v63);
            a9 = vceqq_s16(a10, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v62 + v63)));
            a9.i16[0] = vminvq_u16((uint16x8_t)a9);
            if (!a9.i32[0])
              break;
            v63 += 8;
            if (v63 >= v26)
              goto LABEL_104;
          }
        }
      }
      v62 = (uint8x8_t *)((char *)v62 + *(unsigned __int8 *)(a5 + v62->u8[v26 - 1]));
      if ((unint64_t)v62 > v36)
        return a2;
    }
  }
  return v27;
}

uint64_t operationStringReplaceStringStringWithoutSubstitutionWithTable8(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v14;
  int **v15;
  int **v16;
  uint64_t *v17;
  uint64_t v18;
  int8x16_t *v19;
  unsigned int v20;
  int v21;
  JSC::VM *v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int16x8_t *v27;
  unint64_t v28;
  unint64_t v29;
  int16x8_t v30;
  uint64_t v31;
  int16x8_t *v32;
  uint16x8_t v33;
  unsigned int v34;
  uint16x8_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int8x16_t *v40;
  unsigned int v41;
  int8x16_t *v42;
  int v43;
  __int32 v44;
  uint8x16_t v45;
  uint8x16_t v46;
  unsigned int v47;
  uint8x16_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  int v56;
  int v57;
  int v59;
  int v60;
  int v61;
  int v62;
  char *v63;
  uint8x8_t *v64;
  uint16x8_t v65;
  unsigned int v66;
  uint16x8_t v67;
  unint64_t v68;
  int16x8_t *v69;
  unsigned int v70;
  uint64_t v71;
  uint16x8_t v72;
  __int32 v73;
  __int32 v74;
  uint16x8_t v75;
  unsigned int v76;
  uint16x8_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  JSC::JSGlobalObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t OutOfMemoryError;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  JSC::Exception *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int *v123;
  __int32 v124;
  int v125;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t *v131;
  int8x16_t *v132[2];
  char *v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *var48[10];

  v14 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v14 + 40) = var48[9];
  v15 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v15 = JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v14 + 80))
  {
    v60 = *(_DWORD *)(v14 + 80);
    if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      return 0;
  }
  v16 = (int **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    v16 = JSC::JSRopeString::resolveRope(a3, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v14 + 80))
  {
    v61 = *(_DWORD *)(v14 + 80);
    if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      return 0;
  }
  v17 = (uint64_t *)(a4 + 8);
  if ((*(_BYTE *)(a4 + 8) & 1) != 0)
    v17 = (uint64_t *)JSC::JSRopeString::resolveRope(a4, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v14 + 80))
  {
    v62 = *(_DWORD *)(v14 + 80);
    if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
    {
      v131 = v17;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v17 = v131;
    }
    if (*(_QWORD *)(v14 + 16))
      return 0;
  }
  v18 = (uint64_t)*v15;
  if (*v15)
  {
    v19 = *(int8x16_t **)(v18 + 8);
    v20 = *(_DWORD *)(v18 + 4);
    v21 = (*(_DWORD *)(v18 + 16) >> 2) & 1;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 1;
  }
  v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
  i = (uint64_t)*v16;
  if (!*v16)
  {
    LODWORD(v24) = 0;
    if (v18)
      goto LABEL_113;
    goto LABEL_170;
  }
  v24 = *(unsigned int *)(i + 4);
  v25 = a2;
  if (v24 <= v20)
  {
    if (!(_DWORD)v24)
    {
      LODWORD(i) = 0;
      if (v18)
        goto LABEL_113;
      goto LABEL_170;
    }
    v26 = *(_DWORD *)(i + 16);
    v27 = *(int16x8_t **)(i + 8);
    if (v21)
    {
      v36 = (unint64_t)v19->u64 + v20 - v24;
      v25 = a2;
      if ((v26 & 4) == 0)
      {
        if ((unint64_t)v19 > v36)
          return v25;
        v63 = (char *)(v24 - 1);
        if (v24 < 8)
          goto LABEL_142;
        v64 = (uint8x8_t *)v19;
        do
        {
          v65 = (uint16x8_t)vceqq_s16(*v27, (int16x8_t)vmovl_u8(*v64));
          v65.i16[0] = vminvq_u16(v65);
          v66 = v24 & 7;
          if (v65.i32[0])
          {
            while (1)
            {
              v67 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v27 + 2 * v66), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v64 + v66)));
              v67.i16[0] = vminvq_u16(v67);
              if (!v67.i32[0])
                break;
              v66 += 8;
              if (v66 >= v24)
                goto LABEL_179;
            }
          }
          v64 = (uint8x8_t *)((char *)v64 + *(unsigned __int8 *)(a5 + v63[(_QWORD)v64]));
        }
        while ((unint64_t)v64 <= v36);
        return a2;
      }
      if ((unint64_t)v19 <= v36)
      {
        v37 = v24 - 1;
        if ((_DWORD)v24 != 1)
        {
          v38 = __clz(v24 - 1);
          v39 = 32 - v38;
          v40 = (int8x16_t *)&v27->i8[v24];
          v41 = 31 - v38;
          v42 = v19;
          while (1)
          {
            if (v39 == 3)
            {
              if (v42->i32[0] == v27->i32[0])
              {
                v43 = *(__int32 *)((char *)&v42->i32[-1] + v24);
                v44 = v40[-1].i32[3];
LABEL_33:
                if (v43 == v44)
                  goto LABEL_49;
              }
            }
            else
            {
              switch(v41)
              {
                case 0u:
                  v43 = v42->u16[0];
                  v44 = v27->u16[0];
                  goto LABEL_33;
                case 1u:
                  if (v42->u16[0] != v27->u16[0])
                    goto LABEL_34;
                  v43 = *(unsigned __int16 *)((char *)&v42->u16[-1] + v24);
                  v44 = v40[-1].u16[7];
                  goto LABEL_33;
                case 3u:
                  if (v42->i64[0] == v27->i64[0] && *(uint64_t *)((char *)&v42->i64[-1] + v24) == v40[-1].i64[1])
                    goto LABEL_49;
                  goto LABEL_34;
                case 4u:
                  v45 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v42[-1] + v24), v40[-1]), vceqq_s8(*v42, *(int8x16_t *)v27));
                  v45.i8[0] = vminvq_u8(v45);
                  if (v45.i32[0])
                    goto LABEL_49;
                  goto LABEL_34;
                default:
                  v46 = (uint8x16_t)vceqq_s8(*v42, *(int8x16_t *)v27);
                  v46.i8[0] = vminvq_u8(v46);
                  if (!v46.i32[0])
                    goto LABEL_34;
                  v47 = v24 & 0xF;
                  if (v24 < 0x10)
                    goto LABEL_49;
                  break;
              }
              while (1)
              {
                v48 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v42 + v47), *(int8x16_t *)((char *)v27 + v47));
                v48.i8[0] = vminvq_u8(v48);
                if (!v48.i32[0])
                  break;
                v47 += 16;
                if (v47 >= v24)
                  goto LABEL_49;
              }
            }
LABEL_34:
            v42 = (int8x16_t *)((char *)v42 + *(unsigned __int8 *)(a5 + v42->u8[v37]));
            if ((unint64_t)v42 > v36)
              return a2;
          }
        }
        v59 = v27->u8[0];
        v42 = v19;
        do
        {
          if (v42->u8[0] == v59)
          {
LABEL_49:
            i = (char *)v42 - (char *)v19;
            goto LABEL_111;
          }
          v42 = (int8x16_t *)((char *)v42 + *(unsigned __int8 *)(a5 + v42->u8[v37]));
        }
        while ((unint64_t)v42 <= v36);
        return a2;
      }
    }
    else
    {
      v28 = (unint64_t)v19 + 2 * v20 + -2 * v24;
      v25 = a2;
      if ((v26 & 4) == 0)
      {
        if ((unint64_t)v19 > v28)
          return v25;
        v68 = v24 - 1;
        if ((_DWORD)v24 != 1)
        {
          v69 = (int16x8_t *)((char *)v27 + 2 * v24);
          v70 = 31 - __clz(v24 - 1);
          v71 = 2 * v68;
          v32 = (int16x8_t *)v19;
          do
          {
            switch(v70)
            {
              case 0u:
                v73 = v32->i32[0];
                v74 = v27->i32[0];
                goto LABEL_101;
              case 1u:
                if (v32->i32[0] != v27->i32[0])
                  goto LABEL_102;
                v73 = *(__int32 *)((char *)&v32->i32[-1] + 2 * v24);
                v74 = v69[-1].i32[3];
LABEL_101:
                if (v73 != v74)
                  goto LABEL_102;
                goto LABEL_110;
              case 2u:
                if (v32->i64[0] == v27->i64[0] && *(uint64_t *)((char *)&v32->i64[-1] + 2 * v24) == v69[-1].i64[1])
                  goto LABEL_110;
                goto LABEL_102;
              case 3u:
                v72 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v32 + 2 * v24 - 16), v69[-1]), (int8x16_t)vceqq_s16(*v32, *v27));
                v72.i16[0] = vminvq_u16(v72);
                if (v72.i32[0])
                  goto LABEL_110;
                goto LABEL_102;
              default:
                v75 = (uint16x8_t)vceqq_s16(*v32, *v27);
                v75.i16[0] = vminvq_u16(v75);
                if (!v75.i32[0])
                  goto LABEL_102;
                v76 = v24 & 7;
                if (v24 < 8)
                  goto LABEL_110;
                break;
            }
            while (1)
            {
              v77 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v32 + 2 * v76), *(int16x8_t *)((char *)v27 + 2 * v76));
              v77.i16[0] = vminvq_u16(v77);
              if (!v77.i32[0])
                break;
              v76 += 8;
              if (v76 >= v24)
                goto LABEL_110;
            }
LABEL_102:
            v32 = (int16x8_t *)((char *)v32 + 2 * *(unsigned __int8 *)(a5 + v32->u8[v71]));
          }
          while ((unint64_t)v32 <= v28);
          return a2;
        }
        v128 = v27->u16[0];
        v129 = 2 * v68;
        v32 = (int16x8_t *)v19;
        while (v32->u16[0] != v128)
        {
          v32 = (int16x8_t *)((char *)v32 + 2 * *(unsigned __int8 *)(a5 + v32->u8[v129]));
          if ((unint64_t)v32 > v28)
            return a2;
        }
        goto LABEL_110;
      }
      if ((unint64_t)v19 <= v28)
      {
        v29 = v24 - 1;
        if (v24 >= 8)
        {
          v30 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v27->i8);
          v31 = 2 * v29;
          v32 = (int16x8_t *)v19;
          do
          {
            v33 = (uint16x8_t)vceqq_s16(*v32, v30);
            v33.i16[0] = vminvq_u16(v33);
            v34 = v24 & 7;
            if (v33.i32[0])
            {
              while (1)
              {
                v35 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v32 + 2 * v34), (int16x8_t)vmovl_u8(*(uint8x8_t *)&v27->i8[v34]));
                v35.i16[0] = vminvq_u16(v35);
                if (!v35.i32[0])
                  break;
                v34 += 8;
                if (v34 >= v24)
                  goto LABEL_110;
              }
            }
            v32 = (int16x8_t *)((char *)v32 + 2 * *(unsigned __int8 *)(a5 + v32->u8[v31]));
          }
          while ((unint64_t)v32 <= v28);
          return a2;
        }
        if (v24 < 4)
        {
          v55 = 2 * v29;
          if (v24 < 2)
          {
            v127 = v27->u8[0];
            v32 = (int16x8_t *)v19;
            while (v32->u16[0] != v127)
            {
              v32 = (int16x8_t *)((char *)v32 + 2 * *(unsigned __int8 *)(a5 + v32->u8[v55]));
              if ((unint64_t)v32 > v28)
                return a2;
            }
          }
          else
          {
            v56 = (v27->u16[0] | (v27->u16[0] << 8)) & 0xFF00FF;
            v57 = (*(unsigned __int16 *)((char *)v27->u16 + (v24 & 1)) | (*(unsigned __int16 *)((char *)v27->u16
                                                                                              + (v24 & 1)) << 8)) & 0xFF00FF;
            v32 = (int16x8_t *)v19;
            while (v56 != v32->i32[0] || v57 != *(__int32 *)((char *)v32->i32 + 2 * (v24 & 1)))
            {
              v32 = (int16x8_t *)((char *)v32 + 2 * *(unsigned __int8 *)(a5 + v32->u8[v55]));
              if ((unint64_t)v32 > v28)
                return a2;
            }
          }
        }
        else
        {
          v49 = (v27->u32[0] | ((unint64_t)v27->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v50 = (v49 | (v49 << 8)) & 0xFF00FF00FF00FFLL;
          v51 = (*(unsigned int *)((char *)v27->u32 + (v24 & 3)) | ((unint64_t)*(unsigned int *)((char *)v27->u32 + (v24 & 3)) << 16)) & 0xFFFF0000FFFFLL;
          v52 = (v51 | (v51 << 8)) & 0xFF00FF00FF00FFLL;
          v53 = 2 * v29;
          v32 = (int16x8_t *)v19;
          while (v50 != v32->i64[0] || v52 != *(uint64_t *)((char *)v32->i64 + 2 * (v24 & 3)))
          {
            v32 = (int16x8_t *)((char *)v32 + 2 * *(unsigned __int8 *)(a5 + v32->u8[v53]));
            if ((unint64_t)v32 > v28)
              return a2;
          }
        }
LABEL_110:
        for (i = ((char *)v32 - (char *)v19) >> 1; ; i = (char *)v64 - (char *)v19)
        {
LABEL_111:
          v25 = a2;
          if (i == -1)
            return v25;
          if (v18)
          {
LABEL_113:
            v19 = *(int8x16_t **)(v18 + 8);
            v78 = *(unsigned int *)(v18 + 4);
            v79 = (unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32;
            v80 = v79 | v78;
            v81 = v79 | i;
            if (v78 > i)
              v82 = v81;
            else
              v82 = v80;
            v18 = v80;
            if ((_DWORD)v78)
              v63 = (char *)v19;
            else
              v63 = &str_77_5;
            if (!(_DWORD)v78)
              v82 = 0x100000000;
            v133 = v63;
            v134 = v82;
          }
          else
          {
LABEL_170:
            v19 = 0;
            LODWORD(v78) = 0;
            v63 = &str_77_5;
            v18 = 0x100000000;
            v133 = &str_77_5;
            v134 = 0x100000000;
          }
          v27 = (int16x8_t *)(v24 + i);
          if (v18 <= v27)
          {
            v24 = 0x100000000;
            v19 = (int8x16_t *)&str_77_5;
            goto LABEL_132;
          }
          v83 = v78 - (_DWORD)v27;
          if ((int)v18 - (int)v27 <= v83)
          {
            v83 = v18 - (_DWORD)v27;
            if (!(_DWORD)v27)
              break;
          }
          v24 = v83;
          v36 = v18 - (unint64_t)v27;
          if ((v18 & 0x100000000) != 0)
          {
            if (v36 >= v24)
            {
              v19 = (int8x16_t *)&v27->i8[(_QWORD)v19];
              v24 |= 0x100000000uLL;
              goto LABEL_132;
            }
          }
          else if (v36 >= v24)
          {
            v19 = (int8x16_t *)((char *)v19 + 2 * (_QWORD)v27);
            goto LABEL_132;
          }
          __break(1u);
LABEL_142:
          if (v24 < 4)
          {
            if (v24 < 2)
            {
              v130 = v27->u16[0];
              v64 = (uint8x8_t *)v19;
              while (v130 != v64->u8[0])
              {
                v64 = (uint8x8_t *)((char *)v64 + *(unsigned __int8 *)(a5 + v63[(_QWORD)v64]));
                if ((unint64_t)v64 > v36)
                  return a2;
              }
            }
            else
            {
              v123 = (__int32 *)((char *)v27->i32 + 2 * (v24 & 1));
              v124 = v27->i32[0];
              v125 = *v123;
              v64 = (uint8x8_t *)v19;
              while (((v64->u16[0] | (v64->u16[0] << 8)) & 0xFF00FF) != v124
                   || ((*(unsigned __int16 *)((char *)v64->u16 + (v24 & 1)) | (*(unsigned __int16 *)((char *)v64->u16 + (v24 & 1)) << 8)) & 0xFF00FF) != v125)
              {
                v64 = (uint8x8_t *)((char *)v64 + *(unsigned __int8 *)(a5 + v63[(_QWORD)v64]));
                if ((unint64_t)v64 > v36)
                  return a2;
              }
            }
          }
          else
          {
            v116 = (uint64_t *)((char *)v27->i64 + 2 * (v24 & 3));
            v117 = v27->i64[0];
            v118 = *v116;
            v64 = (uint8x8_t *)v19;
            while (1)
            {
              v119 = (v64->u32[0] | ((unint64_t)v64->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              v120 = (*(unsigned int *)((char *)v64->u32 + (v24 & 3)) | ((unint64_t)*(unsigned int *)((char *)v64->u32 + (v24 & 3)) << 16)) & 0xFFFF0000FFFFLL;
              v121 = (v120 | (v120 << 8)) & 0xFF00FF00FF00FFLL;
              if (((v119 | (v119 << 8)) & 0xFF00FF00FF00FFLL) == v117 && v121 == v118)
                break;
              v64 = (uint8x8_t *)((char *)v64 + *(unsigned __int8 *)(a5 + v63[(_QWORD)v64]));
              if ((unint64_t)v64 > v36)
                return a2;
            }
          }
LABEL_179:
          ;
        }
        v24 = v18;
LABEL_132:
        v132[0] = v19;
        v132[1] = (int8x16_t *)v24;
        WTF::tryMakeString<WTF::StringView,WTF::String,WTF::StringView>((char *)&v133, v17, v132, (int **)&v135);
        var48[0] = v135;
        if (v135)
        {
          v25 = JSC::jsString((uint64_t)v22, (JSC::VM *)var48, v85, v86, v87, v88, v89, v90);
          v98 = var48[0];
          var48[0] = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2)
            {
              WTF::StringImpl::~StringImpl(v98, v91, v92, v93, v94, v95, v96, v97);
              WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
            }
            else
            {
              *(_DWORD *)v98 -= 2;
            }
          }
        }
        else
        {
          OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v84);
          v115 = (JSC::Exception *)OutOfMemoryError;
          if ((OutOfMemoryError & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                    + 0x4C)))
          {
            v115 = (JSC::Exception *)JSC::Exception::create((uint64_t)v22, (JSC::VM *)OutOfMemoryError, 0, v109, v110, v111, v112, v113);
          }
          JSC::VM::throwException(v22, a1, v115, v114, v109, v110, v111, v112, v113);
          return 0;
        }
      }
    }
  }
  return v25;
}

uint64_t operationStringReplaceStringEmptyStringWithTable8(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v11;
  uint64_t v13;
  int **v14;
  int **v15;
  int *v16;
  int8x16_t *v17;
  unint64_t v18;
  int *v19;
  int8x16_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int16x8_t v25;
  uint64_t v26;
  int16x8_t *v27;
  uint16x8_t v28;
  unsigned int v29;
  uint16x8_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int8x16_t *v35;
  unsigned int v36;
  int8x16_t *v37;
  int v38;
  __int32 v39;
  uint8x16_t v40;
  uint8x16_t v41;
  unsigned int v42;
  uint8x16_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint16x8_t v65;
  unsigned int v66;
  uint16x8_t v67;
  uint64_t v68;
  int16x8_t *v69;
  int16x8_t *v70;
  uint16x8_t v71;
  __int32 v72;
  __int32 v73;
  uint16x8_t v74;
  unsigned int v75;
  uint16x8_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v86;
  int *v87;
  __int32 v88;
  int v89;
  int **v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  int8x16_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::VM *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t OutOfMemoryError;
  double v131;
  int v132;
  int v133;
  WTF::StringImpl *var48[10];

  v11 = a2;
  v13 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v13 + 40) = var48[9];
  v14 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v14 = JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v61 = *(_DWORD *)(v13 + 80);
    if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  v15 = (int **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    v15 = JSC::JSRopeString::resolveRope(a3, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v63 = *(_DWORD *)(v13 + 80);
    if ((v63 & 0x27) != 0 && (v63 & 0x20) == 0)
    {
      v91 = v15;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v15 = v91;
    }
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  v16 = *v14;
  if (*v14)
  {
    v17 = (int8x16_t *)*((_QWORD *)v16 + 1);
    v18 = v16[1] | ((unint64_t)((v16[4] >> 2) & 1) << 32);
  }
  else
  {
    v17 = 0;
    v18 = 0x100000000;
  }
  v19 = *v15;
  if (*v15)
  {
    v20 = (int8x16_t *)*((_QWORD *)v19 + 1);
    v21 = v19[1] | ((unint64_t)((v19[4] >> 2) & 1) << 32);
  }
  else
  {
    v20 = 0;
    v21 = 0x100000000;
  }
  if (v21 > v18)
    return v11;
  if (!(_DWORD)v21)
  {
    LODWORD(v44) = 0;
    goto LABEL_133;
  }
  v22 = v21 & 0x100000000;
  if ((v18 & 0x100000000) != 0)
  {
    v31 = (unint64_t)v17->u64 + v18 - v21;
    if (v22)
    {
      if (v31 < (unint64_t)v17)
        return v11;
      v32 = v21 - 1;
      if ((_DWORD)v21 != 1)
      {
        v33 = __clz(v21 - 1);
        v34 = 32 - v33;
        v35 = (int8x16_t *)((char *)v20 + v21);
        a2 = v21 & 0xF;
        v36 = 31 - v33;
        v37 = v17;
        while (1)
        {
          if (v34 == 3)
          {
            if (v37->i32[0] == v20->i32[0])
            {
              v38 = *(__int32 *)((char *)&v37->i32[-1] + v21);
              v39 = v35[-1].i32[3];
LABEL_31:
              if (v38 == v39)
                goto LABEL_47;
            }
          }
          else
          {
            switch(v36)
            {
              case 0u:
                v38 = v37->u16[0];
                v39 = v20->u16[0];
                goto LABEL_31;
              case 1u:
                if (v37->u16[0] != v20->u16[0])
                  goto LABEL_32;
                v38 = *(unsigned __int16 *)((char *)&v37->u16[-1] + v21);
                v39 = v35[-1].u16[7];
                goto LABEL_31;
              case 3u:
                if (v37->i64[0] == v20->i64[0]
                  && *(uint64_t *)((char *)&v37->i64[-1] + v21) == v35[-1].i64[1])
                {
                  goto LABEL_47;
                }
                goto LABEL_32;
              case 4u:
                v40 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v37[-1] + v21), v35[-1]), vceqq_s8(*v37, *v20));
                v40.i8[0] = vminvq_u8(v40);
                if (v40.i32[0])
                  goto LABEL_47;
                goto LABEL_32;
              default:
                v41 = (uint8x16_t)vceqq_s8(*v37, *v20);
                v41.i8[0] = vminvq_u8(v41);
                if (!v41.i32[0])
                  goto LABEL_32;
                v42 = v21 & 0xF;
                if (v21 < 0x10)
                  goto LABEL_47;
                break;
            }
            while (1)
            {
              v43 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v37 + v42), *(int8x16_t *)((char *)v20 + v42));
              v43.i8[0] = vminvq_u8(v43);
              if (!v43.i32[0])
                break;
              v42 += 16;
              if (v42 >= v21)
                goto LABEL_47;
            }
          }
LABEL_32:
          v37 = (int8x16_t *)((char *)v37 + *(unsigned __int8 *)(a4 + v37->u8[v32]));
          if ((unint64_t)v37 > v31)
            return v11;
        }
      }
      v60 = v20->u8[0];
      v37 = v17;
      while (v37->u8[0] != v60)
      {
        v37 = (int8x16_t *)((char *)v37 + *(unsigned __int8 *)(a4 + v37->u8[v32]));
        if ((unint64_t)v37 > v31)
          return v11;
      }
    }
    else
    {
      if (v31 < (unint64_t)v17)
        return v11;
      v64 = v21 - 1;
      if (v21 >= 8)
      {
        v37 = v17;
        do
        {
          v65 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v20, (int16x8_t)vmovl_u8(*(uint8x8_t *)v37->i8));
          v65.i16[0] = vminvq_u16(v65);
          v66 = v21 & 7;
          if (v65.i32[0])
          {
            while (1)
            {
              v67 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v20 + 2 * v66), (int16x8_t)vmovl_u8(*(uint8x8_t *)&v37->i8[v66]));
              v67.i16[0] = vminvq_u16(v67);
              if (!v67.i32[0])
                break;
              v66 += 8;
              if (v66 >= v21)
                goto LABEL_47;
            }
          }
          v37 = (int8x16_t *)((char *)v37 + *(unsigned __int8 *)(a4 + v37->u8[v64]));
        }
        while ((unint64_t)v37 <= v31);
        return v11;
      }
      if (v21 < 4)
      {
        if (v21 < 2)
        {
          v133 = v20->u16[0];
          v37 = v17;
          while (v133 != v37->u8[0])
          {
            v37 = (int8x16_t *)((char *)v37 + *(unsigned __int8 *)(a4 + v37->u8[v64]));
            if ((unint64_t)v37 > v31)
              return v11;
          }
        }
        else
        {
          v86 = v21 & 1;
          v87 = (__int32 *)((char *)v20->i32 + 2 * v86);
          v88 = v20->i32[0];
          v89 = *v87;
          v37 = v17;
          while (1)
          {
            a2 = (*(unsigned __int16 *)((char *)v37->u16 + v86) | (*(unsigned __int16 *)((char *)v37->u16 + v86) << 8)) & 0xFF00FF;
            if (((v37->u16[0] | (v37->u16[0] << 8)) & 0xFF00FF) == v88 && (_DWORD)a2 == v89)
              break;
            v37 = (int8x16_t *)((char *)v37 + *(unsigned __int8 *)(a4 + v37->u8[v64]));
            if ((unint64_t)v37 > v31)
              return v11;
          }
        }
      }
      else
      {
        v78 = v21 & 3;
        v79 = (uint64_t *)((char *)v20->i64 + 2 * v78);
        v80 = v20->i64[0];
        v81 = *v79;
        v37 = v17;
        while (1)
        {
          v82 = (v37->u32[0] | ((unint64_t)v37->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v83 = (*(unsigned int *)((char *)v37->u32 + v78) | ((unint64_t)*(unsigned int *)((char *)v37->u32 + v78) << 16)) & 0xFFFF0000FFFFLL;
          v84 = (v83 | (v83 << 8)) & 0xFF00FF00FF00FFLL;
          if (((v82 | (v82 << 8)) & 0xFF00FF00FF00FFLL) == v80 && v84 == v81)
            break;
          v37 = (int8x16_t *)((char *)v37 + *(unsigned __int8 *)(a4 + v37->u8[v64]));
          if ((unint64_t)v37 > v31)
            return v11;
        }
      }
    }
LABEL_47:
    v44 = (char *)v37 - (char *)v17;
    goto LABEL_132;
  }
  v23 = (unint64_t)v17 + 2 * v18 + -2 * v21;
  if (v22)
  {
    if (v23 >= (unint64_t)v17)
    {
      v24 = v21 - 1;
      if (v21 >= 8)
      {
        v25 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v20->i8);
        v26 = 2 * v24;
        v27 = (int16x8_t *)v17;
        do
        {
          v28 = (uint16x8_t)vceqq_s16(*v27, v25);
          v28.i16[0] = vminvq_u16(v28);
          v29 = v21 & 7;
          if (v28.i32[0])
          {
            while (1)
            {
              v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v27 + 2 * v29), (int16x8_t)vmovl_u8(*(uint8x8_t *)&v20->i8[v29]));
              v30.i16[0] = vminvq_u16(v30);
              if (!v30.i32[0])
                break;
              v29 += 8;
              if (v29 >= v21)
                goto LABEL_130;
            }
          }
          v27 = (int16x8_t *)((char *)v27 + 2 * *(unsigned __int8 *)(a4 + v27->u8[v26]));
        }
        while ((unint64_t)v27 <= v23);
        return v11;
      }
      if (v21 < 4)
      {
        if (v21 < 2)
        {
          v92 = v20->u8[0];
          v93 = 2 * v24;
          v27 = (int16x8_t *)v17;
          while (v27->u16[0] != v92)
          {
            v27 = (int16x8_t *)((char *)v27 + 2 * *(unsigned __int8 *)(a4 + v27->u8[v93]));
            if ((unint64_t)v27 > v23)
              return v11;
          }
        }
        else
        {
          v53 = v21 & 1;
          v54 = *(unsigned __int16 *)((char *)v20->u16 + v53);
          v55 = (v20->u16[0] | (v20->u16[0] << 8)) & 0xFF00FF;
          v56 = (v54 | (v54 << 8)) & 0xFF00FF;
          v57 = 2 * v53;
          v58 = 2 * v24;
          v27 = (int16x8_t *)v17;
          while (v55 != v27->i32[0] || v56 != *(__int32 *)((char *)v27->i32 + v57))
          {
            v27 = (int16x8_t *)((char *)v27 + 2 * *(unsigned __int8 *)(a4 + v27->u8[v58]));
            if ((unint64_t)v27 > v23)
              return v11;
          }
        }
      }
      else
      {
        v45 = v21 & 3;
        v46 = (v20->u32[0] | ((unint64_t)v20->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v47 = (v46 | (v46 << 8)) & 0xFF00FF00FF00FFLL;
        v48 = (*(unsigned int *)((char *)v20->u32 + v45) | ((unint64_t)*(unsigned int *)((char *)v20->u32 + v45) << 16)) & 0xFFFF0000FFFFLL;
        v49 = (v48 | (v48 << 8)) & 0xFF00FF00FF00FFLL;
        v50 = 2 * v45;
        v51 = 2 * v24;
        v27 = (int16x8_t *)v17;
        while (v47 != v27->i64[0] || v49 != *(uint64_t *)((char *)v27->i64 + v50))
        {
          v27 = (int16x8_t *)((char *)v27 + 2 * *(unsigned __int8 *)(a4 + v27->u8[v51]));
          if ((unint64_t)v27 > v23)
            return v11;
        }
      }
LABEL_130:
      v77 = (char *)v27 - (char *)v17;
      goto LABEL_131;
    }
    return v11;
  }
  if (v23 < (unint64_t)v17)
    return v11;
  v68 = 2 * (v21 - 1);
  if ((_DWORD)v21 != 1)
  {
    v69 = (int16x8_t *)((char *)v20 + 2 * v21);
    a2 = 31 - __clz(v21 - 1);
    v70 = (int16x8_t *)v17;
    do
    {
      switch((int)a2)
      {
        case 0:
          v72 = v70->i32[0];
          v73 = v20->i32[0];
          goto LABEL_96;
        case 1:
          if (v70->i32[0] != v20->i32[0])
            goto LABEL_97;
          v72 = *(__int32 *)((char *)&v70->i32[-1] + 2 * v21);
          v73 = v69[-1].i32[3];
LABEL_96:
          if (v72 != v73)
            goto LABEL_97;
          goto LABEL_105;
        case 2:
          if (v70->i64[0] == v20->i64[0]
            && *(uint64_t *)((char *)&v70->i64[-1] + 2 * v21) == v69[-1].i64[1])
          {
            goto LABEL_105;
          }
          goto LABEL_97;
        case 3:
          v71 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v70 + 2 * v21 - 16), v69[-1]), (int8x16_t)vceqq_s16(*v70, *(int16x8_t *)v20));
          v71.i16[0] = vminvq_u16(v71);
          if (v71.i32[0])
            goto LABEL_105;
          goto LABEL_97;
        default:
          v74 = (uint16x8_t)vceqq_s16(*v70, *(int16x8_t *)v20);
          v74.i16[0] = vminvq_u16(v74);
          if (!v74.i32[0])
            goto LABEL_97;
          v75 = v21 & 7;
          if (v21 < 8)
            goto LABEL_105;
          break;
      }
      while (1)
      {
        v76 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v70 + 2 * v75), *(int16x8_t *)((char *)v20 + 2 * v75));
        v76.i16[0] = vminvq_u16(v76);
        if (!v76.i32[0])
          break;
        v75 += 8;
        if (v75 >= v21)
          goto LABEL_105;
      }
LABEL_97:
      v70 = (int16x8_t *)((char *)v70 + 2 * *(unsigned __int8 *)(a4 + v70->u8[v68]));
    }
    while ((unint64_t)v70 <= v23);
    return v11;
  }
  v132 = v20->u16[0];
  v70 = (int16x8_t *)v17;
  while (v70->u16[0] != v132)
  {
    v70 = (int16x8_t *)((char *)v70 + 2 * *(unsigned __int8 *)(a4 + v70->u8[v68]));
    if ((unint64_t)v70 > v23)
      return v11;
  }
LABEL_105:
  v77 = (char *)v70 - (char *)v17;
LABEL_131:
  v44 = v77 >> 1;
LABEL_132:
  if (v44 == -1)
    return v11;
LABEL_133:
  if (v19)
    LODWORD(v19) = v19[1];
  v94 = (_DWORD)v19 + v44;
  if (v16)
  {
    v95 = (int8x16_t *)*((_QWORD *)v16 + 1);
    v96 = v16[1];
    v97 = ((unint64_t)v16[4] >> 2) & 1;
    v98 = v97 << 32;
    v99 = v96 & 0xFFFFFFFEFFFFFFFFLL | ((v97 & 1) << 32);
    v100 = (v97 << 32) | v44;
    if (v96 <= v44)
      v100 = v99;
    if ((_DWORD)v96)
      v101 = v99;
    else
      v101 = v98;
    if ((_DWORD)v96)
      v102 = (JSC::VM *)v95;
    else
      v102 = (JSC::VM *)&str_77_5;
    if (!(_DWORD)v96)
      v100 = 0x100000000;
    v103 = v100;
  }
  else
  {
    v95 = 0;
    LODWORD(v96) = 0;
    v101 = 0x100000000;
    v100 = 0x100000000;
    v103 = 0x100000000;
    v102 = (JSC::VM *)&str_77_5;
  }
  if (v101 <= v94)
  {
    v106 = 0x100000000;
    v95 = (int8x16_t *)&str_77_5;
    goto LABEL_157;
  }
  v104 = v96 - v94;
  if (v101 - v94 <= v96 - v94)
  {
    v104 = v101 - v94;
    if (!v94)
    {
      v106 = v101;
      goto LABEL_157;
    }
  }
  v105 = v94;
  v106 = v104;
  v107 = v101 - (unint64_t)v94;
  if ((v101 & 0x100000000) == 0)
  {
    if (v107 >= v104)
    {
      v95 = (int8x16_t *)((char *)v95 + 2 * v105);
      goto LABEL_157;
    }
LABEL_170:
    __break(1u);
LABEL_171:
    v102 = (JSC::VM *)JSC::Exception::create(v13, v102, 0, v103, (uint64_t)v95, v106, a7, a8);
    goto LABEL_169;
  }
  if (v107 < v104)
    goto LABEL_170;
  v95 = (int8x16_t *)((char *)v95 + v105);
  v106 = v104 | 0x100000000;
LABEL_157:
  if (((v106 | v100) & 0x80000000) != 0 || __OFADD__((_DWORD)v100, (_DWORD)v106))
  {
    var48[0] = 0;
  }
  else
  {
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((v100 + v106), HIDWORD(v100) & HIDWORD(v106), (int8x16_t *)v102, v103, v95, v106, (int **)var48);
    if (var48[0])
    {
      v62 = JSC::jsString(v13, (JSC::VM *)var48, v108, v109, v110, v111, v112, v113);
      goto LABEL_161;
    }
  }
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, (JSC::JSGlobalObject *)a2);
  v102 = (JSC::VM *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    goto LABEL_171;
  }
LABEL_169:
  JSC::VM::throwException((JSC::VM *)v13, a1, v102, v131, v103, (uint64_t)v95, v106, a7, a8);
  v62 = 0;
LABEL_161:
  v121 = var48[0];
  var48[0] = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
    {
      WTF::StringImpl::~StringImpl(v121, v114, v115, v116, v117, v118, v119, v120);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v121 -= 2;
    }
  }
  return v62;
}

uint64_t operationStringReplaceStringGeneric(JSC::JSGlobalObject *a1, int **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  uint64_t v15;
  int **v16;
  int **v17;
  int v19;
  int v20;
  int **v21;
  uint64_t vars0;

  v15 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v15 + 40) = vars0;
  v16 = a2 + 1;
  if (((_BYTE)a2[1] & 1) != 0)
    v16 = JSC::JSRopeString::resolveRope((unint64_t)a2, a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v15 + 80))
  {
    v19 = *(_DWORD *)(v15 + 80);
    if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v15 + 16))
      return 0;
  }
  v17 = (int **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    v17 = JSC::JSRopeString::resolveRope(a3, a1, a3, a4, a9, (uint64_t)v17, a6, a7, a8);
  if (!*(_DWORD *)(v15 + 80))
    return JSC::replaceUsingStringSearch((JSC::VM *)v15, a1, (const WTF::String *)a2, (JSC::JSString *)v16, (uint64_t)v17, a4, 0, a8, a9, a10, a11);
  v20 = *(_DWORD *)(v15 + 80);
  if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
  {
    v21 = v17;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, (uint64_t)v17, a6, a7, a8);
    v17 = v21;
  }
  if (*(_QWORD *)(v15 + 16))
    return 0;
  else
    return JSC::replaceUsingStringSearch((JSC::VM *)v15, a1, (const WTF::String *)a2, (JSC::JSString *)v16, (uint64_t)v17, a4, 0, a8, a9, a10, a11);
}

uint64_t JSC::replaceUsingStringSearch(JSC::VM *a1, JSC::JSGlobalObject *a2, const WTF::String *a3, JSC::JSString *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  JSC::JSString *v14;
  uint64_t v15;
  JSC::JSGlobalObject *v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  WTF::StringImpl *v32;
  uint64_t Common;
  uint64_t v34;
  int8x16_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  JSC::JSGlobalObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  WTF::StringImpl *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _DWORD *v109;
  int v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  WTF::StringImpl *v117;
  int v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  unsigned int v123;
  WTF::StringImpl *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  StringView v131;
  uint64_t v132;
  int v133;
  _DWORD *v134;
  JSC::JSGlobalObject *v135;
  int v136;
  uint64_t *v137;
  uint64_t v138;
  char v139;
  _DWORD *v140;
  uint64_t v141;
  int v142;
  BOOL v143;
  unsigned int v144;
  int v145;
  WTF *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  BOOL v152;
  int v153;
  unint64_t OutOfMemoryError;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  JSC::Exception *v161;
  int v162;
  WTF::StringImpl *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  _BYTE *v174;
  int v175;
  _BYTE *v176;
  WTF::StringImpl *v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  WTF *v180;
  int v183;
  uint64_t v184;
  size_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  size_t v189;
  uint64_t v190;
  int *v191;
  JSC *v192;
  unsigned int v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  BOOL v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  uint64_t v208;
  WTF::StringImpl *v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  int v245;
  size_t v246;
  uint64_t v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _BOOL4 v258;
  WTF::StringImpl **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  WTF::StringImpl *v267;
  unint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _BOOL4 v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unsigned int v292;
  uint64_t v293;
  unint64_t v294;
  _WORD *v295;
  uint64_t v296;
  _OWORD *v297;
  uint64_t v298;
  _WORD *v299;
  char *v300;
  __int16 v301;
  char *v302;
  int8x16_t v303;
  int8x16_t v304;
  __int128 v305;
  char *v306;
  char *v307;
  char *v308;
  unint64_t v309;
  const WTF::String *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  JSC::JSString *v316;
  const WTF::String *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  JSC::JSString *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  _DWORD *v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  _DWORD *v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  JSC::JSGlobalObject *v343;
  unint64_t v344;
  uint64_t v345;
  _DWORD *v346;
  uint64_t v347;
  WTF *v348;
  WTF::StringImpl *v349;
  _DWORD *v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  WTF *v367;
  uint64_t v368;
  unint64_t v369;
  JSC::VM *v370;
  JSC *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  JSC::JSGlobalObject *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  void *v397;
  WTF::StringImpl *v398;
  WTF::StringImpl *v399;
  int v400;
  uint64_t v401;
  unsigned int v402;
  int *v403;
  int v404;
  uint64_t v405;
  WTF::AtomStringImpl *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  WTF::StringImpl *v413;
  int *v414;
  JSC::VM *v415;
  JSC *v416;
  const WTF::String *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  JSC::VM *v424;
  JSC *v425;
  JSC::JSString *v426;
  JSC::JSString *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  JSC::JSGlobalObject *v432;
  JSC::JSGlobalObject *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _DWORD *v448;
  uint64_t (*v449)(void);
  unint64_t v450;
  void *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  void *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  void *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  WTF::StringImpl **v474;
  unint64_t v475;
  void *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  void *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  WTF::AtomStringImpl *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  _BOOL4 v500;
  unsigned int *v501;
  int v502;
  unsigned int v503;
  int v504;
  unsigned int v505;
  char *v506;
  char *v507;
  int8x16_t v508;
  int8x16_t v509;
  __int128 v510;
  char *v511;
  char *v512;
  char *v513;
  __int16 v514;
  uint64_t v515;
  WTF::StringImpl *v516;
  uint64_t v517;
  WTF::StringImpl *v518;
  uint64_t v519;
  JSC::MarkedVectorBase *v520;
  WTF *v521;
  WTF::StringImpl *v522;
  WTF::StringImpl *v523;
  _OWORD v524[5];
  uint64_t v525;
  WTF *v526;
  uint64_t v527;
  _BYTE v528[128];
  WTF::StringImpl *v529[4];
  int v530;
  uint64_t v531;
  unint64_t v532;
  WTF::StringImpl *v533;
  uint64_t v534[3];
  _DWORD *v535;
  uint64_t v536[7];
  char v537;
  int v538;
  uint64_t (*v539)(void);
  unsigned int v540;
  char v541;
  __int128 v542;
  WTF::StringImpl *v543;
  JSC::VM *v544;
  JSC::JSGlobalObject *v545;
  unint64_t v546;
  int *v547;
  WTF::StringImpl *v548;
  WTF::StringImpl *v549;
  WTF::StringImpl *v550;
  WTF::StringImpl *v551;
  int v552;
  char v553;
  _QWORD v554[3];
  StringView v555;
  StringView v556;
  StringView v557;
  int8x16x2_t v558;
  int8x16x2_t v559;
  int8x16x2_t v560;
  int8x16x2_t v561;

  LODWORD(v12) = a7;
  v13 = (uint64_t *)a5;
  v14 = a4;
  v15 = (uint64_t)a3;
  v16 = a1;
  v554[1] = *MEMORY[0x1E0C80C00];
  v545 = a2;
  v546 = a6;
  v544 = a1;
  v17 = 0xFFFE000000000002;
  LOBYTE(v542) = 0;
  LOBYTE(v534[0]) = 0;
  v541 = 0;
  v533 = 0;
  if ((a6 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v529[0]) = 0;
  }
  else
  {
    v18 = *(unsigned __int8 *)(a6 + 5);
    if (v18 == 2)
    {
      v19 = *(WTF::StringImpl **)(a6 + 8);
      if ((v19 & 1) != 0)
        v19 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(a6, a2, (uint64_t)a3, (uint64_t)a4, a9, a5, a6, a7, a8);
      if (v19)
        *(_DWORD *)v19 += 2;
      v533 = v19;
      goto LABEL_8;
    }
    if (v18 == 26)
    {
      v48 = *(_QWORD *)(a6 + 24);
      if ((v48 & 1) != 0)
        v48 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v48 + 5) == 8)
      {
        LOBYTE(v529[0]) = 1;
        v529[1] = *(WTF::StringImpl **)(v48 + 40);
        LOBYTE(v529[2]) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a6 & 0xFFFFFFFE)
                                                                                     + 0x4C));
      }
      else
      {
        LOBYTE(v529[0]) = 2;
        v49 = *(WTF::StringImpl **)(a6 + 16);
        v529[1] = (WTF::StringImpl *)v48;
        v529[2] = v49;
      }
    }
    else
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, unint64_t))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a6 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0x38))(v529, a6);
    }
  }
  a9.i64[0] = (uint64_t)v529[0];
  v542 = *(_OWORD *)v529;
  v543 = v529[2];
  if (!LOBYTE(v529[0]))
  {
    a2 = v545;
    if ((v546 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v546 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v546, v545, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)v529);
    }
    else
    {
      v50 = *(WTF::StringImpl **)(v546 + 8);
      if ((v50 & 1) != 0)
        v50 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v546, v545, (uint64_t)a3, (uint64_t)a4, *(int8x16_t *)v529, a5, a6, a7, a8);
      if (v50)
        *(_DWORD *)v50 += 2;
      v529[0] = v50;
    }
    v51 = v529[0];
    v529[0] = 0;
    v52 = v533;
    v533 = v51;
    if (v52)
    {
      v53 = *(_DWORD *)v52 - 2;
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
        v52 = v529[0];
        v529[0] = 0;
        if (!v52)
          goto LABEL_8;
        v53 = *(_DWORD *)v52 - 2;
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::~StringImpl(v52, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
          goto LABEL_8;
        }
      }
      *(_DWORD *)v52 = v53;
    }
LABEL_8:
    if (*((_DWORD *)v16 + 20))
    {
      v153 = *((_DWORD *)v16 + 20);
      if ((v153 & 0x27) != 0 && (v153 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v16 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v16 + 2))
        goto LABEL_203;
    }
    goto LABEL_9;
  }
  if (LOBYTE(v529[0]) == 2)
  {
    v529[0] = (WTF::StringImpl *)v546;
    LODWORD(v526) = 3;
    std::optional<JSC::CachedCall>::emplace[abi:sn180100]<JSC::JSGlobalObject *&,JSC::JSFunction *,int,void>((JSC::CachedCall *)v534, &v545, v529, (unsigned int *)&v526, a5, a6, a7, a8);
    if (*((_DWORD *)v16 + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v16, v336, v337, v338, v339, v340, v341, v342))
        goto LABEL_203;
    }
  }
LABEL_9:
  if ((v12 & 1) != 0 || !v533)
  {
    v532 = 0;
    v529[0] = 0;
    v97 = *(_QWORD *)v14;
    if (*(_QWORD *)v14)
    {
      v98 = *(unsigned __int8 *)(v97 + 16);
      v99 = *(WTF::StringImpl **)(v97 + 8);
      LODWORD(v97) = *(_DWORD *)(v97 + 4);
      v529[0] = v99;
      v100 = (v98 >> 2) & 1;
    }
    else
    {
      LOBYTE(v100) = 1;
    }
    LODWORD(v529[1]) = v97;
    BYTE4(v529[1]) = v100;
    Common = (uint64_t)v16 + 93360;
    v101 = *((_QWORD *)v16 + 11670);
    if ((v101 & 1) != 0)
      v101 = (*(uint64_t (**)(JSC::JSGlobalObject *, uint64_t))(v101 & 0xFFFFFFFFFFFFFFFCLL))(v16, (uint64_t)v16 + 93360);
    v102 = *v13;
    if (*v13)
    {
      v103 = *(unsigned int *)(v102 + 16);
      v104 = *(_QWORD *)(v102 + 8);
      LODWORD(v102) = *(_DWORD *)(v102 + 4);
      v105 = (v103 >> 2) & 1;
    }
    else
    {
      v104 = 0;
      LODWORD(v105) = 1;
    }
    LODWORD(v556.m_characters) = v102;
    HIDWORD(v556.m_characters) = v105;
    *(_QWORD *)&v556.m_length = 0;
    v106 = WTF::StringView::find((uint64_t)v529, v101, v104, v556, *(double *)a9.i64, a10, a11);
    v532 = v106;
    if (v106 != -1)
    {
      a4 = (JSC::JSString *)v106;
      v531 = 0;
      v107 = *v13;
      if (*v13)
        LODWORD(v107) = *(_DWORD *)(v107 + 4);
      v17 = v107;
      v522 = (WTF::StringImpl *)&v529[2];
      v529[0] = (WTF::StringImpl *)&v529[2];
      v35.i64[0] = 16;
      v529[1] = (WTF::StringImpl *)16;
      v521 = (WTF *)v528;
      v526 = (WTF *)v528;
      v527 = 16;
      v520 = (JSC::MarkedVectorBase *)v524;
      v11 = (uint64_t)v16;
      goto LABEL_132;
    }
    goto LABEL_66;
  }
  v16 = v545;
  v12 = *((_QWORD *)v545 + 7);
  v550 = (WTF::StringImpl *)v12;
  v20 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    v21 = *(_QWORD *)(v20 + 8);
    v22 = *(unsigned int *)(v20 + 4);
    v23 = ((unint64_t)*(unsigned int *)(v20 + 16) >> 2) & 1;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 1;
  }
  v24 = *(_QWORD *)(v12 + 93360);
  if ((v24 & 1) != 0)
    v24 = (*(uint64_t (**)(uint64_t))(v24 & 0xFFFFFFFFFFFFFFFCLL))(v12);
  v25 = *v13;
  if (*v13)
  {
    v26 = *(unsigned int *)(v25 + 4);
    if ((_DWORD)v26)
    {
      v27 = *(unsigned int *)(v25 + 16);
      v28 = *(_QWORD *)(v25 + 8);
      if (((v26 | v22) & 0x80000000) != 0)
      {
        LODWORD(v555.m_characters) = v22;
        HIDWORD(v555.m_characters) = v23;
        v557.m_characters = (void *)(v26 & 0xFFFFFFFEFFFFFFFFLL | (((v27 >> 2) & 1) << 32));
        *(_QWORD *)&v555.m_length = v28;
        *(_QWORD *)&v557.m_length = 0;
        Common = WTF::findCommon(v21, v555, v557, *(double *)a9.i64, a10, a11);
      }
      else
      {
        v29 = (v27 >> 2) & 1;
        if ((int)v26 <= 250)
          v30 = 250;
        else
          v30 = v26;
        v31 = v30 - 250;
        if (v23)
        {
          if ((_DWORD)v29)
          {
            v529[0] = (WTF::StringImpl *)v24;
            v529[1] = (WTF::StringImpl *)v28;
            v529[2] = (WTF::StringImpl *)v26;
            v530 = v31;
            if (v26 > 6)
            {
              v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::initialSearch;
            }
            else if ((_DWORD)v26 == 1)
            {
              v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::singleCharSearch;
            }
            else
            {
              v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::linearSearch;
            }
          }
          else
          {
            v529[0] = (WTF::StringImpl *)v24;
            v529[1] = (WTF::StringImpl *)v28;
            v529[2] = (WTF::StringImpl *)v26;
            v72 = v28 + 2 * v26;
            v530 = v31;
            if ((v28 & 7) != 0)
            {
              v73 = 0;
              v74 = 2 * v26 - 2;
              v75 = v28 + 2;
              do
              {
                v76 = *(unsigned __int16 *)v28;
                v28 += 2;
                v73 |= v76;
                if ((v75 & 7) == 0)
                  break;
                v77 = v74;
                v74 -= 2;
                v75 += 2;
              }
              while (v77);
            }
            else
            {
              v73 = 0;
            }
            while (v28 < (v72 & 0xFFFFFFFFFFFFFFF8))
            {
              v95 = *(_QWORD *)v28;
              v28 += 8;
              v73 |= v95;
            }
            while (v28 != v72)
            {
              v96 = *(unsigned __int16 *)v28;
              v28 += 2;
              v73 |= v96;
            }
            if ((v73 & 0xFF00FF00FF00FF00) != 0)
            {
              v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<char16_t,unsigned char>::failSearch;
            }
            else if ((int)v26 > 6)
            {
              v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<char16_t,unsigned char>::initialSearch;
            }
            else if ((_DWORD)v26 == 1)
            {
              v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<char16_t,unsigned char>::singleCharSearch;
            }
            else
            {
              v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<char16_t,unsigned char>::linearSearch;
            }
          }
        }
        else if ((_DWORD)v29)
        {
          v529[0] = (WTF::StringImpl *)v24;
          v529[1] = (WTF::StringImpl *)v28;
          v529[2] = (WTF::StringImpl *)v26;
          v530 = v31;
          if (v26 > 6)
          {
            v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<unsigned char,char16_t>::initialSearch;
          }
          else if ((_DWORD)v26 == 1)
          {
            v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<unsigned char,char16_t>::singleCharSearch;
          }
          else
          {
            v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<unsigned char,char16_t>::linearSearch;
          }
        }
        else
        {
          v529[0] = (WTF::StringImpl *)v24;
          v529[1] = (WTF::StringImpl *)v28;
          v529[2] = (WTF::StringImpl *)v26;
          v530 = v31;
          if (v26 > 6)
          {
            v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<char16_t,char16_t>::initialSearch;
          }
          else if ((_DWORD)v26 == 1)
          {
            v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<char16_t,char16_t>::singleCharSearch;
          }
          else
          {
            v32 = (WTF::StringImpl *)WTF::AdaptiveStringSearcher<char16_t,char16_t>::linearSearch;
          }
        }
        v529[3] = v32;
        Common = ((int (*)(uint64_t, uint64_t, int, int))v32)((uint64_t)v529, v21, v22, 0);
      }
      if (Common == -1)
        goto LABEL_66;
      v25 = *v13;
      if (!*v13)
        goto LABEL_28;
    }
    else
    {
      Common = 0;
    }
    LODWORD(v25) = *(_DWORD *)(v25 + 4);
  }
  else
  {
    Common = 0;
  }
LABEL_28:
  v15 = Common + v25;
  v34 = WTF::String::find((uint64_t)&v533, 0x24u, 0, *(double *)a9.i64, a10, a11);
  if (v34 != -1)
  {
    v529[0] = 0;
    v529[1] = 0;
    *(WTF::StringImpl **)((char *)&v529[1] + 5) = 0;
    v554[0] = __PAIR64__(v15, Common);
    if (v533)
    {
      v354 = *((_QWORD *)v533 + 1);
      v355 = *((unsigned int *)v533 + 1) | ((unint64_t)((*((_DWORD *)v533 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v354 = 0;
      v355 = 0x100000000;
    }
    v356 = *(_QWORD *)v14;
    if (*(_QWORD *)v14)
    {
      v357 = *(_QWORD *)(v356 + 8);
      v358 = *(unsigned int *)(v356 + 4) | ((unint64_t)((*(_DWORD *)(v356 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v357 = 0;
      v358 = 0x100000000;
    }
    JSC::substituteBackreferencesSlow((uint64_t)v529, v354, v355, v357, v358, (unsigned int *)v554, 0, v34, *(double *)v35.i64, *(double *)&v36, *(float *)&v37);
    if (((uint64_t)v529[2] & 0x80000000) == 0)
    {
      v365 = *(_QWORD *)v14;
      if (*(_QWORD *)v14 && (v366 = *(unsigned int *)(v365 + 4), (_DWORD)v366))
      {
        v367 = *(WTF **)(v365 + 8);
        v368 = (*(_DWORD *)(v365 + 16) >> 2) & 1;
        if (v366 <= Common)
          v369 = v366 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v368 & 1) << 32);
        else
          v369 = (v368 << 32) | Common;
      }
      else
      {
        v369 = 0x100000000;
        v367 = (WTF *)&str_77_5;
      }
      v526 = v367;
      v527 = v369;
      WTF::StringBuilder::toString((WTF::StringBuilder *)v529, v359, v360, v361, v362, v363, v364, &v547);
      v551 = 0;
      v401 = *(_QWORD *)v14;
      if (*(_QWORD *)v14)
      {
        v402 = *(unsigned __int8 *)(v401 + 16);
        v403 = *(int **)(v401 + 8);
        LODWORD(v401) = *(_DWORD *)(v401 + 4);
        v551 = (WTF::StringImpl *)v403;
        v404 = (v402 >> 2) & 1;
      }
      else
      {
        LOBYTE(v404) = 1;
      }
      v552 = v401;
      v553 = v404;
      v523 = (WTF::StringImpl *)WTF::StringView::substring((const char *)&v551, v15, (int)v401 - (int)v15);
      *(_QWORD *)&v524[0] = v405;
      WTF::tryMakeString<WTF::StringView,WTF::String,WTF::StringView>((char *)&v526, (uint64_t *)&v547, (int8x16_t **)&v523, (int **)&v548);
      v413 = (WTF::StringImpl *)v547;
      v414 = (int *)v548;
      v548 = 0;
      v549 = (WTF::StringImpl *)v414;
      v547 = 0;
      if (v413)
      {
        if (*(_DWORD *)v413 == 2)
        {
          WTF::StringImpl::~StringImpl(v413, v406, v407, v408, v409, v410, v411, v412);
          WTF::fastFree(v466, v467, v468, v469, v470, v471, v472, v473);
        }
        else
        {
          *(_DWORD *)v413 -= 2;
        }
      }
      if (v414)
      {
        WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v529, v406, v407, v408, v409, v410, v411, v412);
LABEL_63:
        v15 = JSC::jsString(v12, (JSC::VM *)&v549, v55, v56, v57, v58, v59, v60);
        v61 = v549;
        v549 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
          {
            WTF::StringImpl::~StringImpl(v61, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_90;
          }
          *(_DWORD *)v61 -= 2;
        }
        goto LABEL_66;
      }
    }
    JSC::throwOutOfMemoryError(v16, (JSC::JSGlobalObject *)&v550);
    WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v529, v491, v492, v493, v494, v495, v496, v497);
LABEL_203:
    v15 = 0;
    goto LABEL_66;
  }
  v38 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    v39 = *(WTF **)(v38 + 8);
    v40 = *(unsigned int *)(v38 + 4);
    v41 = (unint64_t)((*(_DWORD *)(v38 + 16) >> 2) & 1) << 32;
    v42 = v41 | v40;
    v43 = v41 | Common;
    if (v40 > Common)
      v44 = v43;
    else
      v44 = v42;
    v45 = v42;
    if ((_DWORD)v40)
      v46 = v39;
    else
      v46 = (WTF::StringImpl *)&str_77_5;
    if (!(_DWORD)v40)
      v44 = 0x100000000;
    v529[0] = v46;
    v529[1] = (WTF::StringImpl *)v44;
  }
  else
  {
    v39 = 0;
    LODWORD(v40) = 0;
    v45 = 0x100000000;
    v529[0] = (WTF::StringImpl *)&str_77_5;
    v529[1] = (WTF::StringImpl *)0x100000000;
  }
  if (v45 <= v15)
  {
    v40 = 0x100000000;
    v39 = (WTF *)&str_77_5;
    goto LABEL_62;
  }
  LODWORD(v40) = v40 - v15;
  if ((int)v45 - (int)v15 <= v40)
  {
    LODWORD(v40) = v45 - v15;
    if (!(_DWORD)v15)
    {
      v40 = v45;
      goto LABEL_62;
    }
  }
  v40 = v40;
  v47 = v45 - (unint64_t)v15;
  if ((v45 & 0x100000000) != 0)
  {
    if (v47 >= v40)
    {
      v39 = (WTF *)((char *)v39 + v15);
      v40 = v40 | 0x100000000;
LABEL_62:
      v526 = v39;
      v527 = v40;
      WTF::tryMakeString<WTF::StringView,WTF::String,WTF::StringView>((char *)v529, (uint64_t *)&v533, (int8x16_t **)&v526, (int **)&v523);
      v549 = v523;
      if (v523)
        goto LABEL_63;
      OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v16, v54);
      v161 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v161 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)OutOfMemoryError, 0, v155, v156, v157, v158, v159);
      }
      JSC::VM::throwException((JSC::VM *)v12, v16, v161, v160, v155, v156, v157, v158, v159);
      goto LABEL_203;
    }
  }
  else if (v47 >= v40)
  {
    v39 = (WTF *)((char *)v39 + 2 * v15);
    goto LABEL_62;
  }
LABEL_442:
  __break(1u);
LABEL_443:
  v347 = HIDWORD(v527);
  if (HIDWORD(v527) == (_DWORD)v527)
  {
    WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String&>((uint64_t)&v526, (unint64_t)&v533);
  }
  else
  {
    v348 = v526;
    v349 = v533;
    if (v533)
      *(_DWORD *)v533 += 2;
    *((_QWORD *)v348 + v347) = v349;
    HIDWORD(v527) = v347 + 1;
  }
  while (1)
  {
    v531 = v22;
    if (!(_DWORD)v12)
      break;
    v523 = 0;
    v122 = *(_QWORD *)v14;
    if (*(_QWORD *)v14)
    {
      v123 = *(unsigned __int8 *)(v122 + 16);
      v124 = *(WTF::StringImpl **)(v122 + 8);
      LODWORD(v122) = *(_DWORD *)(v122 + 4);
      v523 = v124;
      v125 = (v123 >> 2) & 1;
    }
    else
    {
      LOBYTE(v125) = 1;
    }
    LODWORD(v524[0]) = v122;
    BYTE4(v524[0]) = v125;
    v126 = *(_QWORD *)Common;
    if ((*(_QWORD *)Common & 1) != 0)
      v126 = (*(uint64_t (**)(JSC::JSGlobalObject *, uint64_t))(v126 & 0xFFFFFFFFFFFFFFFCLL))(v16, Common);
    v127 = *v13;
    if (*v13)
    {
      v128 = *(unsigned int *)(v127 + 16);
      v129 = *(_QWORD *)(v127 + 8);
      v127 = *(unsigned int *)(v127 + 4);
      v130 = (v128 >> 2) & 1;
    }
    else
    {
      v129 = 0;
      v130 = 1;
    }
    *(_QWORD *)&v131.m_length = v531;
    if (!(_DWORD)v17)
      *(_QWORD *)&v131.m_length = v531 + 1;
    v131.m_characters = (void *)(v127 | (v130 << 32));
    a4 = (JSC::JSString *)WTF::StringView::find((uint64_t)&v523, v126, v129, v131, *(double *)v35.i64, *(double *)&v36, *(float *)&v37);
    v532 = (unint64_t)a4;
    if (a4 == (JSC::JSString *)-1)
      break;
LABEL_132:
    if ((_BYTE)v542)
    {
      v550 = 0;
      if (v541)
      {
        v22 = (uint64_t)JSC::jsSubstring(v16, (uint64_t)v545, (JSC::JSGlobalObject *)v15, a4, v17, a6, a7, a8, v35);
        if (*(_DWORD *)(v11 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          goto LABEL_500;
        }
        if (!v541)
          goto LABEL_442;
        v343 = v545;
        v344 = v532 | 0xFFFE000000000000;
        if ((v532 & 0x80000000) != 0)
          v344 = COERCE__INT64((double)v532) + 0x2000000000000;
        *(double *)v35.i64 = (double)v532;
        v345 = COERCE__INT64((double)v532) + 0x2000000000000;
        if (!HIDWORD(v532))
          v345 = v344;
        v517 = v345;
        v346 = v535;
        v523 = (WTF::StringImpl *)v535;
        if (v540 <= 4)
        {
          if (v539)
            v519 = vmEntryToJavaScriptWith3Arguments(v539, (uint64_t)v535, v536[0], v536[1], 10, v22, v345, v15);
          else
            v519 = 0;
          *((_BYTE *)v346 + 93120) = 1;
          if (v346[20]
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v346, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
          {
LABEL_549:
            v519 = 0;
            goto LABEL_439;
          }
          if (v519)
            goto LABEL_439;
        }
        v537 = 0;
        v538 = 0;
        v536[3] = 10;
        JSC::CachedCall::appendArgument(v534, v22, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        JSC::CachedCall::appendArgument(v534, v517, v434, v435, v436, v437, v438, v439);
        JSC::CachedCall::appendArgument(v534, v15, v440, v441, v442, v443, v444, v445);
        if (v537)
        {
          JSC::throwOutOfMemoryError(v343, (JSC::JSGlobalObject *)&v523);
          goto LABEL_549;
        }
        v448 = v535;
        v449 = v539;
        if (v539)
          goto LABEL_503;
        v501 = v535 + 20;
        v502 = v535[20];
        if ((v502 & 0x20) == 0)
        {
          do
            v503 = __ldaxr(v501);
          while (__stlxr(v503 | 0x20, v501));
        }
        JSC::CachedCall::relink((JSC::CachedCall *)v534, v446, v447, (uint64_t)a4, a5, a6, a7, a8);
        if (*v501
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v448, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          v504 = 0;
          v449 = 0;
          v515 = *((_QWORD *)v448 + 2);
        }
        else
        {
          v504 = 1;
          v449 = v539;
        }
        if ((v502 & 0x20) == 0)
        {
          do
            v505 = __ldaxr(v501);
          while (__stlxr(v505 & 0xFFFFFFDF, v501));
        }
        if (v504)
LABEL_503:
          v515 = vmEntryToJavaScript((uint64_t)v449, (JSC::VM *)v448, (uint64_t)v536, (uint64_t)a4, a5, a6, a7, a8);
        *((_BYTE *)v448 + 93120) = 1;
        v519 = v515;
LABEL_439:
        v550 = (WTF::StringImpl *)v519;
        if (*((_DWORD *)v544 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v544, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          goto LABEL_500;
        }
      }
      else
      {
        LOBYTE(v523) = 0;
        *(_QWORD *)&v524[0] = 0x800000000;
        *((_QWORD *)&v524[0] + 1) = (char *)&v524[1] + 8;
        memset(&v524[1], 0, 64);
        v525 = 0;
        v379 = JSC::jsSubstring(v16, (uint64_t)v545, (JSC::JSGlobalObject *)v15, a4, *(unsigned int *)(*v13 + 4), a6, a7, a8, (int8x16_t)0);
        if (*(_DWORD *)(v11 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v372, v373, v374, v375, v376, v377, v378))
        {
          goto LABEL_553;
        }
        JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v523, (uint64_t)v379, v373, v374, v375, v376, v377, v378);
        v386 = v532 | 0xFFFE000000000000;
        if ((v532 & 0x80000000) != 0)
          v386 = COERCE__INT64((double)v532) + 0x2000000000000;
        v387 = HIDWORD(v532) ? COERCE__INT64((double)v532) + 0x2000000000000 : v386;
        JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v523, v387, v380, v381, v382, v383, v384, v385);
        JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v523, v15, v388, v389, v390, v391, v392, v393);
        v551 = (WTF::StringImpl *)*((_QWORD *)&v524[0] + 1);
        v552 = v524[0];
        v550 = (WTF::StringImpl *)JSC::call((uint64_t *)v545, v546, (unsigned __int8 *)&v542, 10, (uint64_t)&v551, v394, v395, v396);
        if (*(_DWORD *)(v11 + 80))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v397, v373, v374, v375, v376, v377, v378))
          {
LABEL_553:
            JSC::MarkedVectorBase::~MarkedVectorBase(v520, v397, v373, v374, v375, v376, v377, v378);
            goto LABEL_500;
          }
        }
        JSC::MarkedVectorBase::~MarkedVectorBase(v520, v397, v373, v374, v375, v376, v377, v378);
      }
      JSC::JSValue::toWTFString((JSC::JSValue *)&v550, v545, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v523, v35);
      v398 = v523;
      v523 = 0;
      v399 = v533;
      v533 = v398;
      if (v399)
      {
        v400 = *(_DWORD *)v399 - 2;
        if (*(_DWORD *)v399 != 2)
          goto LABEL_480;
        WTF::StringImpl::~StringImpl(v399, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v450, v451, v452, v453, v454, v455, v456, v457);
        v399 = v523;
        v523 = 0;
        if (v399)
        {
          v400 = *(_DWORD *)v399 - 2;
          if (*(_DWORD *)v399 == 2)
          {
            WTF::StringImpl::~StringImpl(v399, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v458, v459, v460, v461, v462, v463, v464, v465);
          }
          else
          {
LABEL_480:
            *(_DWORD *)v399 = v400;
          }
        }
      }
      v11 = (uint64_t)v544;
      if (*((_DWORD *)v544 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v544, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        goto LABEL_500;
      }
    }
    v108 = HIDWORD(v529[1]);
    if (HIDWORD(v529[1]) == LODWORD(v529[1]))
    {
      if (!WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)v529, (int *)&v531, (int *)&v532, (uint64_t)a4, a5, a6, a7, a8))goto LABEL_498;
      v111 = v532;
    }
    else
    {
      v109 = (_DWORD *)((char *)v529[0] + 8 * HIDWORD(v529[1]));
      v110 = v531;
      v111 = v532;
      *v109 = v531;
      v109[1] = v111;
      if (v110 == (_DWORD)v111)
        *(_QWORD *)v109 = 0;
      HIDWORD(v529[1]) = v108 + 1;
    }
    v22 = v111 + v17;
    if ((_BYTE)v542)
      goto LABEL_443;
    v523 = 0;
    *(_QWORD *)&v524[0] = 0;
    *(_QWORD *)((char *)v524 + 5) = 0;
    v551 = (WTF::StringImpl *)__PAIR64__(v22, v111);
    v112 = *(_QWORD *)v14;
    if (*(_QWORD *)v14)
    {
      v113 = *(unsigned int *)(v112 + 16);
      v114 = *(_QWORD *)(v112 + 8);
      v112 = *(unsigned int *)(v112 + 4);
      v115 = (v113 >> 2) & 1;
    }
    else
    {
      v114 = 0;
      v115 = 1;
    }
    JSC::substituteBackreferences((uint64_t)&v523, (WTF::AtomStringImpl *)&v533, v114, v112 | (v115 << 32), (unsigned int *)&v551, 0, a7, a8, (uint16x8_t)v35, *(double *)&v36, *(float *)&v37);
    v116 = DWORD2(v524[0]);
    if ((DWORD2(v524[0]) & 0x80000000) != 0)
    {
      JSC::throwOutOfMemoryError(v545, (JSC::JSGlobalObject *)&v544);
    }
    else
    {
      v117 = v523;
      if (v523
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v523, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8), WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v523), (v117 = v523) != 0))
      {
        *(_DWORD *)v117 += 2;
      }
      v550 = v117;
      v118 = HIDWORD(v527);
      if (HIDWORD(v527) == (_DWORD)v527)
      {
        WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v526, (unint64_t)&v550);
      }
      else
      {
        v550 = 0;
        *((_QWORD *)v526 + HIDWORD(v527)) = v117;
        HIDWORD(v527) = v118 + 1;
      }
      v119 = v550;
      v550 = 0;
      if (v119)
      {
        if (*(_DWORD *)v119 == 2)
        {
          WTF::StringImpl::~StringImpl(v119, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
        }
        else
        {
          *(_DWORD *)v119 -= 2;
        }
      }
    }
    v120 = *(WTF::StringImpl **)&v524[0];
    *(_QWORD *)&v524[0] = 0;
    if (v120)
    {
      if (*(_DWORD *)v120 == 2)
      {
        WTF::StringImpl::~StringImpl(v120, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
      }
      else
      {
        *(_DWORD *)v120 -= 2;
      }
    }
    v121 = v523;
    v523 = 0;
    if (v121)
    {
      if (*(_DWORD *)v121 == 2)
      {
        WTF::StringImpl::~StringImpl(v121, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v226, v227, v228, v229, v230, v231, v232, v233);
      }
      else
      {
        *(_DWORD *)v121 -= 2;
      }
    }
    if (v116 < 0)
      goto LABEL_500;
  }
  v132 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
    LODWORD(v132) = *(_DWORD *)(v132 + 4);
  LODWORD(v523) = v132;
  if (HIDWORD(v529[1]) == LODWORD(v529[1]))
  {
    if (WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned int>((uint64_t)v529, (int *)&v531, (int *)&v523, (uint64_t)a4, a5, a6, a7, a8))
    {
      Common = (uint64_t)v529[0];
      LODWORD(v22) = HIDWORD(v529[1]);
      goto LABEL_171;
    }
LABEL_498:
    v432 = v545;
    v433 = (JSC::JSGlobalObject *)&v544;
    goto LABEL_499;
  }
  LODWORD(v22) = HIDWORD(v529[1]) + 1;
  Common = (uint64_t)v529[0];
  v133 = v531;
  v134 = (_DWORD *)((char *)v529[0] + 8 * HIDWORD(v529[1]));
  *v134 = v531;
  v134[1] = v132;
  if ((_DWORD)v132 == v133)
    *(_QWORD *)v134 = 0;
  HIDWORD(v529[1]) = v22;
LABEL_171:
  v135 = v545;
  v13 = (uint64_t *)v526;
  v136 = HIDWORD(v527);
  v137 = (uint64_t *)*((_QWORD *)v545 + 7);
  v554[0] = v137;
  if ((_DWORD)v22 == 1 && !HIDWORD(v527))
  {
    v242 = (uint64_t)v137;
    v243 = *(_QWORD *)v14;
    if (*(_QWORD *)v14)
      v244 = *(_DWORD *)(v243 + 4);
    else
      v244 = 0;
    v245 = *(_DWORD *)(Common + 4) - *(_DWORD *)Common;
    if (*(int *)Common <= 0 && v245 >= v244)
      goto LABEL_250;
    if (v245 >= v244)
      v246 = v244;
    else
      v246 = v245;
    if ((_DWORD)v246)
    {
      v247 = *(_DWORD *)Common & ~(*(int *)Common >> 31);
      if ((*(_DWORD *)(v243 + 16) & 4) != 0)
      {
        if (v246 <= 0xC)
        {
          WTF::StringImpl::create((_BYTE *)(*(_QWORD *)(v243 + 8) + v247), v246, (uint64_t *)&v551);
LABEL_317:
          v523 = v551;
          v178 = v242;
          goto LABEL_247;
        }
      }
      else if (v246 <= 6)
      {
        WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v243 + 8) + 2 * v247), v246, (uint64_t *)&v551);
        goto LABEL_317;
      }
      v350 = (_DWORD *)v243;
      if ((*(_DWORD *)(v243 + 16) & 3) == 2)
        v350 = *(_DWORD **)(v243 + 24);
      v351 = WTF::fastCompactMalloc((WTF *)0x20);
      v352 = *(_DWORD *)(v243 + 16);
      v353 = *(_QWORD *)(v243 + 8);
      *v350 += 2;
      *(_DWORD *)v351 = 2;
      *(_DWORD *)(v351 + 4) = v246;
      if ((v352 & 4) != 0)
      {
        *(_QWORD *)(v351 + 8) = v353 + v247;
        *(_DWORD *)(v351 + 16) = 6;
      }
      else
      {
        *(_QWORD *)(v351 + 8) = v353 + 2 * v247;
        *(_DWORD *)(v351 + 16) = 2;
      }
      *(_QWORD *)(v351 + 24) = v350;
      v551 = (WTF::StringImpl *)v351;
      goto LABEL_317;
    }
    WTF::StringImpl::s_emptyAtomString += 2;
    v551 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    goto LABEL_317;
  }
  v17 = SHIDWORD(v527);
  if ((_DWORD)v22 == 2 && HIDWORD(v527) == 1)
  {
    v184 = *(unsigned int *)Common;
    v183 = *(_DWORD *)(Common + 4);
    v185 = (v183 - v184);
    if (v183 == (_DWORD)v184)
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      v523 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      goto LABEL_265;
    }
    v186 = *(_QWORD *)v14;
    if ((*(_DWORD *)(*(_QWORD *)v14 + 16) & 4) != 0)
    {
      if (v185 <= 0xC)
      {
        WTF::StringImpl::create((_BYTE *)(*(_QWORD *)(v186 + 8) + v184), v185, (uint64_t *)&v523);
        goto LABEL_265;
      }
    }
    else if (v185 <= 6)
    {
      WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v186 + 8) + 2 * v184), v185, (uint64_t *)&v523);
      goto LABEL_265;
    }
    v329 = *(_DWORD **)v14;
    if ((*(_DWORD *)(*(_QWORD *)v14 + 16) & 3) == 2)
      v329 = *(_DWORD **)(v186 + 24);
    v330 = WTF::fastCompactMalloc((WTF *)0x20);
    v331 = *(_DWORD *)(v186 + 16);
    v332 = *(_QWORD *)(v186 + 8);
    *v329 += 2;
    *(_DWORD *)v330 = 2;
    *(_DWORD *)(v330 + 4) = v185;
    if ((v331 & 4) != 0)
    {
      *(_QWORD *)(v330 + 8) = v332 + v184;
      *(_DWORD *)(v330 + 16) = 6;
    }
    else
    {
      *(_QWORD *)(v330 + 8) = v332 + 2 * v184;
      *(_DWORD *)(v330 + 16) = 2;
    }
    *(_QWORD *)(v330 + 24) = v329;
    v523 = (WTF::StringImpl *)v330;
LABEL_265:
    v548 = v523;
    v188 = *(unsigned int *)(Common + 8);
    v187 = *(_DWORD *)(Common + 12);
    v189 = (v187 - v188);
    if (v187 == (_DWORD)v188)
    {
      v191 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v190 = *(_QWORD *)v14;
      if ((*(_DWORD *)(v190 + 16) & 4) != 0)
      {
        if (v189 <= 0xC)
        {
          WTF::StringImpl::create((_BYTE *)(*(_QWORD *)(v190 + 8) + v188), v189, (uint64_t *)&v523);
LABEL_269:
          v191 = (int *)v523;
          goto LABEL_270;
        }
      }
      else if (v189 <= 6)
      {
        WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v190 + 8) + 2 * v188), v189, (uint64_t *)&v523);
        goto LABEL_269;
      }
      v333 = (_DWORD *)v190;
      if ((*(_DWORD *)(v190 + 16) & 3) == 2)
        v333 = *(_DWORD **)(v190 + 24);
      v191 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      v334 = *(_DWORD *)(v190 + 16);
      v335 = *(_QWORD *)(v190 + 8);
      *v333 += 2;
      *v191 = 2;
      v191[1] = v189;
      if ((v334 & 4) != 0)
      {
        *((_QWORD *)v191 + 1) = v335 + v188;
        v191[4] = 6;
      }
      else
      {
        *((_QWORD *)v191 + 1) = v335 + 2 * v188;
        v191[4] = 2;
      }
      *((_QWORD *)v191 + 3) = v333;
    }
LABEL_270:
    v547 = v191;
    v192 = (JSC *)*((_QWORD *)v135 + 7);
    v549 = v192;
    if (v548)
      v193 = *((_DWORD *)v548 + 1);
    else
      v193 = 0;
    v194 = *v13;
    if (*v13)
      v195 = *(_DWORD *)(v194 + 4);
    else
      v195 = 0;
    if (v191)
      v196 = v191[1];
    else
      v196 = 0;
    if (v193)
    {
      if (v195)
      {
        if (v196)
        {
          if (((v196 | v195) & 0x80000000) == 0)
          {
            v197 = __OFADD__(v195, v196);
            if ((v193 & 0x80000000) == 0 && !v197 && !__OFADD__(v193, v195 + v196))
            {
              if (v193 + (unint64_t)v195 + v196 + 20 < 0x40)
              {
                WTF::tryMakeString<WTF::String,WTF::String,WTF::String>((uint64_t)&v548, v13, (uint64_t *)&v547, (int **)&v523);
                v204 = (int *)v523;
                if (v523)
                {
                  v523 = 0;
                  v551 = (WTF::StringImpl *)v204;
                  v15 = JSC::JSString::create((uint64_t)v192, (JSC::VM *)&v551, v198, v199, v200, v201, v202, v203);
                  v205 = v551;
                  v551 = 0;
                  if (v205)
                  {
                    if (*(_DWORD *)v205 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v205, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                      WTF::fastFree(v475, v476, v477, v478, v479, v480, v481, v482);
                    }
                    else
                    {
                      *(_DWORD *)v205 -= 2;
                    }
                  }
                }
                else
                {
                  JSC::throwOutOfMemoryError(v135, (JSC::JSGlobalObject *)&v549);
                  v15 = 0;
                }
                v206 = v523;
                v523 = 0;
                if (v206)
                {
LABEL_290:
                  if (*(_DWORD *)v206 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v206, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    WTF::fastFree(v276, v277, v278, v279, v280, v281, v282, v283);
                  }
                  else
                  {
                    *(_DWORD *)v206 -= 2;
                  }
                }
LABEL_292:
                v207 = (WTF::StringImpl *)v547;
                v547 = 0;
                if (v207)
                {
                  if (*(_DWORD *)v207 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v207, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                    WTF::fastFree(v268, v269, v270, v271, v272, v273, v274, v275);
                  }
                  else
                  {
                    *(_DWORD *)v207 -= 2;
                  }
                }
                v179 = v548;
                v548 = 0;
                if (v179)
                  goto LABEL_248;
                goto LABEL_250;
              }
              v309 = JSC::jsString(v192, (JSC::VM *)&v548, a3, (uint64_t)a4, a5, a6, a7, a8);
              v316 = (JSC::JSString *)JSC::jsString(v192, (JSC::VM *)v13, v310, v311, v312, v313, v314, v315);
              v323 = JSC::jsString(v192, (JSC::VM *)&v547, v317, v318, v319, v320, v321, v322);
              v328 = JSC::JSRopeString::create(v192, v309, v316, v323, v324, v325, v326, v327);
LABEL_401:
              v15 = v328;
              goto LABEL_292;
            }
          }
          v474 = &v549;
LABEL_515:
          JSC::throwOutOfMemoryError(v135, (JSC::JSGlobalObject *)v474);
          v15 = 0;
          goto LABEL_292;
        }
        v523 = v192;
        if (v548)
        {
          v498 = *((unsigned int *)v548 + 1);
          if ((_DWORD)v498)
          {
            if (v194)
            {
              v499 = *(unsigned int *)(v194 + 4);
              if ((_DWORD)v499)
              {
                v500 = __OFADD__((_DWORD)v498, (_DWORD)v499);
                if (((v499 | v498) & 0x80000000) == 0 && !v500)
                {
                  if ((unint64_t)(v498 + v499 + 20) < 0x30)
                  {
                    v259 = &v548;
                    v260 = v13;
LABEL_332:
                    WTF::tryMakeString<WTF::String,WTF::String>((uint64_t)v259, v260, (int **)&v551);
                    if (v551)
                    {
                      v550 = v551;
                      v551 = 0;
                      v15 = JSC::JSString::create((uint64_t)v192, (JSC::VM *)&v550, v261, v262, v263, v264, v265, v266);
                      v267 = v550;
                      v550 = 0;
                      if (v267)
                      {
                        if (*(_DWORD *)v267 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v267, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                          WTF::fastFree(v483, v484, v485, v486, v487, v488, v489, v490);
                        }
                        else
                        {
                          *(_DWORD *)v267 -= 2;
                        }
                      }
                    }
                    else
                    {
                      JSC::throwOutOfMemoryError(v135, (JSC::JSGlobalObject *)&v523);
                      v15 = 0;
                    }
                    v206 = v551;
                    v551 = 0;
                    if (v206)
                      goto LABEL_290;
                    goto LABEL_292;
                  }
                  v423 = JSC::jsString(v192, (JSC::VM *)&v548, a3, (uint64_t)a4, a5, a6, a7, a8);
                  v425 = v192;
                  v424 = (JSC::VM *)v13;
LABEL_494:
                  v426 = (JSC::JSString *)JSC::jsString(v425, v424, v417, v418, v419, v420, v421, v422);
                  v328 = JSC::JSRopeString::create(v192, v423, v426, v427, v428, v429, v430, v431);
                  goto LABEL_401;
                }
LABEL_543:
                v474 = &v523;
                goto LABEL_515;
              }
            }
            goto LABEL_540;
          }
        }
LABEL_541:
        v371 = v192;
        v370 = (JSC::VM *)v13;
        goto LABEL_469;
      }
      v523 = v192;
      if (v548)
      {
        v256 = *((unsigned int *)v548 + 1);
        if ((_DWORD)v256)
        {
          if (!v191 || (v257 = v191[1], !(_DWORD)v257))
          {
LABEL_540:
            v370 = (JSC::VM *)&v548;
            goto LABEL_468;
          }
          v258 = __OFADD__((_DWORD)v256, (_DWORD)v257);
          if (((v257 | v256) & 0x80000000) != 0 || v258)
            goto LABEL_543;
          if ((unint64_t)(v256 + v257 + 20) < 0x30)
          {
            v259 = &v548;
            v260 = (uint64_t *)&v547;
            goto LABEL_332;
          }
          v415 = (JSC::VM *)&v548;
          v416 = v192;
          goto LABEL_493;
        }
      }
    }
    else
    {
      v523 = v192;
      if (v194)
      {
        v284 = *(unsigned int *)(v194 + 4);
        if ((_DWORD)v284)
        {
          if (!v191)
            goto LABEL_541;
          v285 = v191[1];
          if (!(_DWORD)v285)
            goto LABEL_541;
          v286 = __OFADD__((_DWORD)v284, (_DWORD)v285);
          if (((v285 | v284) & 0x80000000) != 0 || v286)
            goto LABEL_543;
          if ((unint64_t)(v284 + v285 + 20) < 0x30)
          {
            v260 = (uint64_t *)&v547;
            v259 = (WTF::StringImpl **)v13;
            goto LABEL_332;
          }
          v416 = v192;
          v415 = (JSC::VM *)v13;
LABEL_493:
          v423 = JSC::jsString(v416, v415, a3, (uint64_t)a4, a5, a6, a7, a8);
          v424 = (JSC::VM *)&v547;
          v425 = v192;
          goto LABEL_494;
        }
      }
    }
    v370 = (JSC::VM *)&v547;
LABEL_468:
    v371 = v192;
LABEL_469:
    v328 = JSC::jsString(v371, v370, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_401;
  }
  if ((int)v22 < 1)
  {
    v139 = 0;
    v138 = 0;
  }
  else
  {
    LODWORD(v138) = 0;
    v139 = 0;
    v140 = (_DWORD *)(Common + 4);
    v141 = v22;
    do
    {
      v142 = *v140 - *(v140 - 1);
      v143 = __OFADD__((_DWORD)v138, v142);
      v144 = v138 + v142;
      if (v143)
        v139 = 1;
      if (v143)
        v138 = v138;
      else
        v138 = v144;
      v140 += 2;
      --v141;
    }
    while (v141);
  }
  v145 = 1;
  if (SHIDWORD(v527) >= 1)
  {
    v146 = v526;
    v147 = HIDWORD(v527);
    v148 = v138;
    do
    {
      v149 = *(_QWORD *)v146;
      if (*(_QWORD *)v146)
      {
        v150 = *(unsigned int *)(v149 + 4);
        v138 = v150 + (int)v148;
        v151 = (unint64_t)(v138 + 0x80000000) >> 32;
        if ((_DWORD)v150)
          v152 = v151 == 0;
        else
          v152 = 0;
        if (v152 || (!v151 ? (v138 = v138) : (v139 = 1, v138 = v148), (_DWORD)v150))
        {
          if ((*(_BYTE *)(v149 + 16) & 4) == 0)
            v145 = 0;
        }
      }
      else
      {
        v138 = v148;
      }
      v146 = (WTF *)((char *)v146 + 8);
      v148 = v138;
      --v147;
    }
    while (v147);
  }
  if (v139)
    goto LABEL_526;
  if (!(_DWORD)v138)
  {
    v15 = v137[5246];
    goto LABEL_250;
  }
  v520 = (JSC::MarkedVectorBase *)v137;
  if (*(_QWORD *)v14)
    v162 = (*(unsigned __int8 *)(*(_QWORD *)v14 + 16) >> 2) & 1;
  else
    v162 = 1;
  if ((v162 & v145) == 1)
  {
    if ((v138 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v138 + 20), &v523);
      v163 = v523;
      if (v523)
      {
        v16 = (WTF::StringImpl *)((char *)v523 + 20);
        *(_DWORD *)v523 = 2;
        *((_DWORD *)v163 + 1) = v138;
        *((_QWORD *)v163 + 1) = (char *)v163 + 20;
        v518 = v163;
        *((_DWORD *)v163 + 4) = 4;
        if ((int)v22 <= (int)v17)
          v164 = v17;
        else
          v164 = v22;
        if ((int)v164 >= 1)
        {
          v11 = 0;
          LODWORD(v12) = 0;
          v22 = (int)v22;
          Common += 4;
          do
          {
            if (v11 < (int)v22)
            {
              v165 = *(_QWORD *)v14;
              if (*(_QWORD *)v14
                && (v166 = *(unsigned int *)(v165 + 4),
                    v167 = *(unsigned int *)(Common - 4),
                    v166 > v167))
              {
                v168 = *(unsigned int *)(v165 + 16);
                a2 = *(JSC::JSGlobalObject **)(v165 + 8);
                v169 = *(_DWORD *)Common - v167;
                if ((int)v166 - (int)v167 > v169 || (v169 = v166 - v167, (_DWORD)v167))
                {
                  v170 = (v168 >> 2) & 1;
                  v171 = v166 - v167;
                  v15 = v169;
                  if ((_DWORD)v170)
                  {
                    if (v171 < v169)
                      goto LABEL_442;
                    a2 = (JSC::JSGlobalObject *)((char *)a2 + v167);
                    LODWORD(v15) = v169;
                  }
                  else
                  {
                    if (v171 < v169)
                      goto LABEL_442;
                    a2 = (JSC::JSGlobalObject *)((char *)a2 + 2 * v167);
                  }
                }
                else
                {
                  v15 = v166 & 0xFFFFFFFEFFFFFFFFLL | (((v168 >> 2) & 1) << 32);
                }
                v172 = (char *)v16 + (int)v12;
                if ((_DWORD)v15 == 1)
                {
                  *v172 = *(_BYTE *)a2;
                  LODWORD(v15) = 1;
                }
                else if ((_DWORD)v15)
                {
                  memcpy(v172, a2, v15);
                }
              }
              else
              {
                LODWORD(v15) = 0;
              }
              LODWORD(v12) = v15 + v12;
            }
            if (v11 < v17)
            {
              v173 = v13[v11];
              if (v173)
              {
                v174 = *(_BYTE **)(v173 + 8);
                v175 = *(_DWORD *)(v173 + 4);
                v176 = (char *)v16 + (int)v12;
                if (v175 == 1)
                {
                  *v176 = *v174;
                  v175 = 1;
                }
                else if (v175)
                {
                  memcpy(v176, v174, *(unsigned int *)(v173 + 4));
                }
              }
              else
              {
                v175 = 0;
              }
              LODWORD(v12) = v175 + v12;
            }
            ++v11;
            Common += 8;
          }
          while (v164 != v11);
        }
        v177 = v518;
        goto LABEL_246;
      }
    }
LABEL_526:
    v433 = (JSC::JSGlobalObject *)v554;
    v432 = v135;
LABEL_499:
    JSC::throwOutOfMemoryError(v432, v433);
LABEL_500:
    v15 = 0;
    goto LABEL_250;
  }
  if (v138 > 0x7FFFFFEF)
    goto LABEL_526;
  WTF::tryFastCompactMalloc((WTF *)(2 * v138 + 20), &v523);
  v516 = v523;
  if (!v523)
    goto LABEL_526;
  v16 = (WTF::StringImpl *)((char *)v523 + 20);
  *(_DWORD *)v523 = 2;
  *((_DWORD *)v516 + 1) = v138;
  *((_QWORD *)v516 + 1) = (char *)v516 + 20;
  *((_DWORD *)v516 + 4) = 0;
  if ((int)v22 <= (int)v17)
    v17 = v17;
  else
    v17 = v22;
  if ((int)v17 >= 1)
  {
    v287 = 0;
    v11 = 0;
    v15 = v136;
    v22 = (int)v22;
    *(_QWORD *)&v36 = 0;
    do
    {
      if (v287 < (int)v22)
      {
        v288 = *(_QWORD *)v14;
        if (*(_QWORD *)v14
          && (v289 = *(unsigned int *)(v288 + 4),
              v290 = *(unsigned int *)(Common + 8 * v287),
              v289 > v290))
        {
          v291 = *(unsigned int *)(v288 + 16);
          a2 = *(JSC::JSGlobalObject **)(v288 + 8);
          v292 = *(_DWORD *)(Common + 8 * v287 + 4) - v290;
          if ((int)v289 - (int)v290 > v292 || (v292 = v289 - v290, (_DWORD)v290))
          {
            v293 = (v291 >> 2) & 1;
            v294 = v289 - v290;
            v12 = v292;
            if ((_DWORD)v293)
            {
              if (v294 < v292)
                goto LABEL_442;
              a2 = (JSC::JSGlobalObject *)((char *)a2 + v290);
              v12 = v292 | 0x100000000;
            }
            else
            {
              if (v294 < v292)
                goto LABEL_442;
              a2 = (JSC::JSGlobalObject *)((char *)a2 + 2 * v290);
            }
          }
          else
          {
            v12 = v289 & 0xFFFFFFFEFFFFFFFFLL | (((v291 >> 2) & 1) << 32);
          }
          v295 = (_WORD *)((char *)v16 + 2 * (int)v11);
          if ((v12 & 0x100000000) != 0)
          {
            if (v12 < 0x40)
            {
              v506 = (char *)v16 + 2 * (int)v11;
            }
            else
            {
              v506 = (char *)&v295[v12 & 0xFFFFFFC0];
              v507 = (char *)v16 + 2 * (int)v11;
              do
              {
                v35 = *(int8x16_t *)a2;
                v508 = *((int8x16_t *)a2 + 1);
                v37 = *((_OWORD *)a2 + 2);
                v509 = *((int8x16_t *)a2 + 3);
                a2 = (JSC::JSGlobalObject *)((char *)a2 + 64);
                v559.val[1] = 0uLL;
                v559.val[0] = v509;
                v510 = 0u;
                v561.val[0] = v508;
                v36 = 0u;
                v511 = v507;
                vst2q_s8(v511, *(int8x16x2_t *)v35.i8);
                v511 += 32;
                v561.val[1] = 0u;
                vst2q_s8(v511, v561);
                v512 = v507 + 64;
                vst2q_s8(v512, *(int8x16x2_t *)&v37);
                v513 = v507 + 96;
                vst2q_s8(v513, v559);
                v507 += 128;
              }
              while (v507 != v506);
            }
            while (v506 != (char *)&v295[v12])
            {
              v514 = *(unsigned __int8 *)a2;
              a2 = (JSC::JSGlobalObject *)((char *)a2 + 1);
              *(_WORD *)v506 = v514;
              v506 += 2;
            }
          }
          else if ((_DWORD)v12 == 1)
          {
            *v295 = *(_WORD *)a2;
            LODWORD(v12) = 1;
          }
          else if ((_DWORD)v12)
          {
            memcpy(v295, a2, 2 * v12);
          }
        }
        else
        {
          LODWORD(v12) = 0;
        }
        v11 = (v12 + v11);
      }
      if (v287 < v15)
      {
        v296 = v13[v287];
        if (v296)
        {
          v297 = *(_OWORD **)(v296 + 8);
          v298 = *(unsigned int *)(v296 + 4);
          v299 = (_WORD *)((char *)v16 + 2 * (int)v11);
          if ((*(_BYTE *)(v296 + 16) & 4) != 0)
          {
            if (v298 >= 0x40)
            {
              v300 = (char *)&v299[v298 & 0xFFFFFFC0];
              v302 = (char *)v16 + 2 * (int)v11;
              do
              {
                v35 = *(int8x16_t *)v297;
                v303 = *((int8x16_t *)v297 + 1);
                v37 = v297[2];
                v304 = *((int8x16_t *)v297 + 3);
                v297 += 4;
                v560.val[1] = 0u;
                v560.val[0] = v304;
                v305 = 0u;
                v558.val[0] = v303;
                v36 = 0u;
                v306 = v302;
                vst2q_s8(v306, *(int8x16x2_t *)v35.i8);
                v306 += 32;
                v558.val[1] = 0u;
                vst2q_s8(v306, v558);
                v307 = v302 + 64;
                vst2q_s8(v307, *(int8x16x2_t *)&v37);
                v308 = v302 + 96;
                vst2q_s8(v308, v560);
                v302 += 128;
              }
              while (v302 != v300);
            }
            else
            {
              v300 = (char *)v16 + 2 * (int)v11;
            }
            while (v300 != (char *)&v299[v298])
            {
              v301 = *(unsigned __int8 *)v297;
              v297 = (_OWORD *)((char *)v297 + 1);
              *(_WORD *)v300 = v301;
              v300 += 2;
            }
          }
          else if ((_DWORD)v298 == 1)
          {
            *v299 = *(_WORD *)v297;
            LODWORD(v298) = 1;
          }
          else if ((_DWORD)v298)
          {
            memcpy(v299, v297, 2 * v298);
          }
        }
        else
        {
          LODWORD(v298) = 0;
        }
        v11 = (v298 + v11);
      }
      ++v287;
    }
    while (v287 != v17);
  }
  v177 = v516;
LABEL_246:
  v523 = v177;
  v178 = (uint64_t)v520;
LABEL_247:
  v15 = JSC::jsString(v178, (JSC::VM *)&v523, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v179 = v523;
  v523 = 0;
  if (!v179)
    goto LABEL_250;
LABEL_248:
  if (*(_DWORD *)v179 == 2)
  {
    WTF::StringImpl::~StringImpl(v179, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
  }
  else
  {
    *(_DWORD *)v179 -= 2;
  }
LABEL_250:
  v180 = v526;
  if (HIDWORD(v527))
  {
    v208 = 8 * HIDWORD(v527);
    do
    {
      v209 = *(WTF::StringImpl **)v180;
      *(_QWORD *)v180 = 0;
      if (v209)
      {
        if (*(_DWORD *)v209 == 2)
        {
          WTF::StringImpl::~StringImpl(v209, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
        }
        else
        {
          *(_DWORD *)v209 -= 2;
        }
      }
      v180 = (WTF *)((char *)v180 + 8);
      v208 -= 8;
    }
    while (v208);
    v180 = v526;
  }
  if (v521 != v180 && v180 != 0)
  {
    v526 = 0;
    LODWORD(v527) = 0;
    WTF::fastFree((unint64_t)v180, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  v78 = v529[0];
  if (v522 != v529[0] && v529[0] != 0)
  {
    v529[0] = 0;
    LODWORD(v529[1]) = 0;
LABEL_90:
    WTF::fastFree((unint64_t)v78, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
LABEL_66:
  v62 = v533;
  v533 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  if (v541)
    JSC::CachedCall::~CachedCall((JSC::CachedCall *)v534, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  return v15;
}

unint64_t operationStringSubstr(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  WTF::StringImpl *v16;
  unsigned __int8 v17;
  unint64_t v18;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  int v40;
  JSC::VM *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t SlowCase;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  int v68;
  _BYTE v69[2];
  _QWORD var38[8];

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = var38[7];
  if (!(_DWORD)a4)
    return *(_QWORD *)(v9 + 41968);
  v10 = a4;
  v11 = a3;
  v13 = (uint64_t)a1;
  v14 = *(_QWORD *)(a2 + 8);
  if (!(_DWORD)a3)
  {
    v24 = (_DWORD *)(a2 + 16);
    if ((v14 & 1) == 0)
      v24 = (_DWORD *)(v14 + 4);
    if (*v24 == (_DWORD)a4)
      return a2;
  }
  if ((v14 & 2) != 0)
  {
    v25 = *(_DWORD *)(a2 + 26);
    a2 = *(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL;
    v11 = v25 + a3;
  }
  else if ((v14 & 1) != 0)
  {
    JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
    if (*(_DWORD *)(v9 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v13, a3, a4, a5, a6, a7, a8))
        return 0;
    }
  }
  if (!v11)
  {
    v23 = *(_QWORD *)(a2 + 8);
    if (v23)
      LODWORD(v23) = *(_DWORD *)(v23 + 4);
    if ((_DWORD)v23 == v10)
      return a2;
  }
  v15 = (unint64_t *)(v9 + 39696);
  if (v10 == 1)
  {
    v16 = *(WTF::StringImpl **)(a2 + 8);
    if (!v16 || *((_DWORD *)v16 + 1) <= v11)
    {
      v17 = 0;
      return *(_QWORD *)(v9 + 8 * v17 + 42216);
    }
    v63 = WTF::StringImpl::at(v16, v11);
    if (v63 <= 0xFF)
    {
      v17 = v63;
      return *(_QWORD *)(v9 + 8 * v17 + 42216);
    }
LABEL_13:
    v20 = (unint64_t *)(v9 + 39432);
    v21 = *(_QWORD *)(a2 + 8);
    if (v21)
    {
      v22 = 3;
      if ((*(_BYTE *)(v21 + 16) & 4) != 0)
        v22 = 7;
    }
    else
    {
      v22 = 7;
    }
    v18 = *v20;
    if (*v20 >= *(_QWORD *)(v9 + 39440))
    {
      v18 = *(_QWORD *)(v9 + 39448);
      if ((v18 & 1) != 0)
      {
        v66 = v22;
        JSC::sanitizeStackForVM((JSC *)v9, (JSC::VM *)v13, a3, a4, a5, a6, a7, a8);
        v15 = (unint64_t *)(v9 + 39696);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v9 + 39408, v9 + 192, 32, 0, 0, v55, v56, v57);
        v22 = v66;
        v18 = SlowCase;
LABEL_18:
        *(_DWORD *)v18 = v15[227] >> 4;
        *(_DWORD *)(v18 + 4) = 17302016;
        *(_QWORD *)(v18 + 8) = v22;
        *(_DWORD *)(v18 + 16) = v10;
        *(_DWORD *)(v18 + 20) = a2;
        *(_WORD *)(v18 + 24) = WORD2(a2);
        *(_WORD *)(v18 + 26) = v11;
        *(_DWORD *)(v18 + 28) = HIWORD(v11);
        if (*(_BYTE *)(v9 + 755))
          __dmb(0xAu);
        return v18;
      }
      v52 = *(_QWORD *)(v18 + 8) ^ *(_QWORD *)(v9 + 39456);
      *(_QWORD *)(v9 + 39440) = v18 + HIDWORD(v52);
      *(_QWORD *)(v9 + 39448) = v18 + (int)v52;
    }
    *v20 = v18 + 32;
    goto LABEL_18;
  }
  if (v10 != 2)
    goto LABEL_13;
  v26 = *(WTF::StringImpl **)(a2 + 8);
  if (!v26)
  {
    v28 = 0;
    goto LABEL_34;
  }
  v27 = *((_DWORD *)v26 + 1);
  if (v27 > v11)
  {
    v28 = WTF::StringImpl::at(v26, v11);
    v26 = *(WTF::StringImpl **)(a2 + 8);
    if (!v26)
      goto LABEL_34;
    v27 = *((_DWORD *)v26 + 1);
  }
  else
  {
    v28 = 0;
  }
  v13 = v11 + 1;
  if (v27 > v13)
  {
    v64 = v28;
    LODWORD(v26) = WTF::StringImpl::at(v26, v13);
    v28 = v64;
  }
  else
  {
    LODWORD(v26) = 0;
  }
LABEL_34:
  if ((v26 | v28) > 0x7F)
    goto LABEL_13;
  v69[0] = v28;
  v69[1] = (_BYTE)v26;
  v67[0] = v69;
  v67[1] = 2;
  v29 = ((_DWORD)v26 << 11) ^ ((v28 - 1640531527) << 16) ^ (v28 - 1640531527);
  v30 = (v29 + (v29 >> 11)) ^ (8 * (v29 + (v29 >> 11)));
  v31 = (v30 + (v30 >> 5)) ^ (4 * (v30 + (v30 >> 5)));
  v32 = ((v31 + (v31 >> 15)) ^ ((v31 + (v31 >> 15)) << 10)) & 0xFFFFFF;
  if (v32)
    v33 = v32;
  else
    v33 = 0x800000;
  v68 = v33;
  v34 = v9 + 81168;
  v35 = v33 & 0x1FF;
  v36 = *(_QWORD *)(v9 + 81168 + 8 * v35);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 8);
    v38 = (v37 & 1) != 0 ? 0 : (WTF::StringImpl *)v37;
    v39 = *((_DWORD *)v38 + 4);
    v40 = v39 < 0x100 ? WTF::StringImpl::hashSlowCase(v38) : v39 >> 8;
    if (v40 == v33 && WTF::equalInternal<unsigned char>((uint64_t)v38, (unint64_t)v69, 2))
      return *(_QWORD *)(v34 + 8 * v35);
  }
  WTF::AtomStringImpl::add(v67, a4, a5, a6, a7, a8, var38);
  v48 = var38[0];
  v49 = *(_DWORD *)(var38[0] + 16);
  v50 = var38[0];
  if ((v49 & 3) == 2)
  {
    v50 = var38[0];
    do
    {
      v50 = *(_QWORD *)(v50 + 24);
      v49 = *(_DWORD *)(v50 + 16);
    }
    while ((v49 & 3) == 2);
  }
  if ((v49 & 8) != 0)
  {
    v51 = 0;
  }
  else
  {
    *(_DWORD *)(v50 + 16) = v49 | 8;
    v51 = (unint64_t)*(unsigned int *)(v50 + 4) << ((v49 & 4) == 0);
  }
  v18 = *v15;
  if (*v15 >= *(_QWORD *)(v9 + 39704))
  {
    v65 = v48;
    v53 = *(_QWORD *)(v9 + 39712);
    if ((v53 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v9, v41, v42, v43, v44, v45, v46, v47);
      v18 = JSC::LocalAllocator::allocateSlowCase(v9 + 39672, v9 + 192, 16, 0, 0, v60, v61, v62);
      v15 = (unint64_t *)(v9 + 39696);
    }
    else
    {
      v18 = *(_QWORD *)(v9 + 39712);
      v15 = (unint64_t *)(v9 + 39696);
      v54 = *(_QWORD *)(v53 + 8) ^ *(_QWORD *)(v9 + 39720);
      *(_QWORD *)(v9 + 39704) = v18 + HIDWORD(v54);
      *(_QWORD *)(v9 + 39712) = v18 + (int)v54;
      *(_QWORD *)(v9 + 39696) = v18 + 16;
    }
    v48 = v65;
  }
  else
  {
    *v15 = v18 + 16;
  }
  *(_DWORD *)v18 = v15[227] >> 4;
  *(_DWORD *)(v18 + 4) = 17302016;
  *(_QWORD *)(v18 + 8) = v48;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  if (v51 >= 0x101)
  {
    v59 = v18;
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v9 + 192, 0, v18, v51, v44, v45, v46, v47);
    v18 = v59;
  }
  *(_QWORD *)(v34 + 8 * v35) = v18;
  return v18;
}

JSC::JSGlobalObject *JSC::jsSubstring(JSC *this, uint64_t a2, JSC::JSGlobalObject *a3, JSC::JSString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v10;
  unsigned int v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  unint64_t *v14;
  WTF::StringImpl *v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  int v38;
  JSC::VM *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t SlowCase;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  int v67;
  _BYTE v68[2];
  uint64_t v69;

  if (!(_DWORD)a5)
    return (JSC::JSGlobalObject *)*((_QWORD *)this + 5246);
  v10 = a5;
  v11 = a4;
  v12 = a3;
  v13 = *((_QWORD *)a3 + 1);
  if (!(_DWORD)a4)
  {
    v23 = (_DWORD *)((char *)a3 + 16);
    if ((v13 & 1) == 0)
      v23 = (_DWORD *)(v13 + 4);
    if (*v23 == (_DWORD)a5)
      return v12;
  }
  if ((v13 & 2) != 0)
  {
    v12 = (JSC::JSGlobalObject *)(*(_QWORD *)((_BYTE *)a3 + 20) & 0xFFFFFFFFFLL);
    v11 = *(_DWORD *)((char *)a3 + 26) + (_DWORD)a4;
  }
  else if ((v13 & 1) != 0)
  {
    JSC::JSRopeString::resolveRope((unint64_t)a3, (JSC::JSGlobalObject *)a2, (uint64_t)a3, (uint64_t)a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)this + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        return 0;
    }
  }
  if (!v11)
  {
    v22 = *((_QWORD *)v12 + 1);
    if (v22)
      LODWORD(v22) = *(_DWORD *)(v22 + 4);
    if ((_DWORD)v22 == v10)
      return v12;
  }
  v14 = (unint64_t *)((char *)this + 39696);
  if (v10 == 1)
  {
    v15 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
    if (!v15 || *((_DWORD *)v15 + 1) <= v11)
    {
      v16 = 0;
      return (JSC::JSGlobalObject *)*((_QWORD *)this + v16 + 5277);
    }
    v62 = WTF::StringImpl::at(v15, v11);
    if (v62 <= 0xFF)
    {
      v16 = v62;
      return (JSC::JSGlobalObject *)*((_QWORD *)this + v16 + 5277);
    }
LABEL_13:
    v19 = (unint64_t *)((char *)this + 39432);
    v20 = *((_QWORD *)v12 + 1);
    if (v20)
    {
      v21 = 3;
      if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        v21 = 7;
    }
    else
    {
      v21 = 7;
    }
    v17 = *v19;
    if (*v19 >= *((_QWORD *)this + 4930))
    {
      v17 = *((_QWORD *)this + 4931);
      if ((v17 & 1) != 0)
      {
        v65 = v21;
        JSC::sanitizeStackForVM(this, (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v14 = (unint64_t *)((char *)this + 39696);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 39408, (uint64_t)this + 192, 32, 0, 0, v53, v54, v55);
        v21 = v65;
        v17 = SlowCase;
LABEL_18:
        *(_DWORD *)v17 = v14[227] >> 4;
        *(_DWORD *)(v17 + 4) = 17302016;
        *(_QWORD *)(v17 + 8) = v21;
        *(_DWORD *)(v17 + 16) = v10;
        *(_DWORD *)(v17 + 20) = (_DWORD)v12;
        *(_WORD *)(v17 + 24) = WORD2(v12);
        *(_WORD *)(v17 + 26) = v11;
        *(_DWORD *)(v17 + 28) = HIWORD(v11);
        if (*((_BYTE *)this + 755))
          __dmb(0xAu);
        return (JSC::JSGlobalObject *)v17;
      }
      v50 = *(_QWORD *)(v17 + 8) ^ *((_QWORD *)this + 4932);
      *((_QWORD *)this + 4930) = v17 + HIDWORD(v50);
      *((_QWORD *)this + 4931) = v17 + (int)v50;
    }
    *v19 = v17 + 32;
    goto LABEL_18;
  }
  if (v10 != 2)
    goto LABEL_13;
  v24 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
  if (!v24)
  {
    v26 = 0;
    goto LABEL_34;
  }
  v25 = *((_DWORD *)v24 + 1);
  if (v25 > v11)
  {
    v26 = WTF::StringImpl::at(v24, v11);
    v24 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
    if (!v24)
      goto LABEL_34;
    v25 = *((_DWORD *)v24 + 1);
  }
  else
  {
    v26 = 0;
  }
  a2 = v11 + 1;
  if (v25 > a2)
  {
    v63 = v26;
    LODWORD(v24) = WTF::StringImpl::at(v24, a2);
    v26 = v63;
  }
  else
  {
    LODWORD(v24) = 0;
  }
LABEL_34:
  if ((v24 | v26) > 0x7F)
    goto LABEL_13;
  v68[0] = v26;
  v68[1] = (_BYTE)v24;
  v66[0] = v68;
  v66[1] = 2;
  v27 = ((v26 - 1640531527) << 16) ^ ((_DWORD)v24 << 11) ^ (v26 - 1640531527);
  v28 = (v27 + (v27 >> 11)) ^ (8 * (v27 + (v27 >> 11)));
  v29 = (v28 + (v28 >> 5)) ^ (4 * (v28 + (v28 >> 5)));
  v30 = ((v29 + (v29 >> 15)) ^ ((v29 + (v29 >> 15)) << 10)) & 0xFFFFFF;
  if (v30)
    v31 = v30;
  else
    v31 = 0x800000;
  v67 = v31;
  v32 = (char *)this + 81168;
  v33 = v31 & 0x1FF;
  v34 = *((_QWORD *)this + v33 + 10146);
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 8);
    v36 = (v35 & 1) != 0 ? 0 : (WTF::StringImpl *)v35;
    v37 = *((_DWORD *)v36 + 4);
    v38 = v37 < 0x100 ? WTF::StringImpl::hashSlowCase(v36) : v37 >> 8;
    if (v38 == v31 && WTF::equalInternal<unsigned char>((uint64_t)v36, (unint64_t)v68, 2))
      return *(JSC::JSGlobalObject **)&v32[8 * v33];
  }
  WTF::AtomStringImpl::add(v66, (uint64_t)a4, a5, a6, a7, a8, &v69);
  v46 = v69;
  v47 = *(_DWORD *)(v69 + 16);
  v48 = v69;
  if ((v47 & 3) == 2)
  {
    v48 = v69;
    do
    {
      v48 = *(_QWORD *)(v48 + 24);
      v47 = *(_DWORD *)(v48 + 16);
    }
    while ((v47 & 3) == 2);
  }
  if ((v47 & 8) != 0)
  {
    v49 = 0;
  }
  else
  {
    *(_DWORD *)(v48 + 16) = v47 | 8;
    v49 = (unint64_t)*(unsigned int *)(v48 + 4) << ((v47 & 4) == 0);
  }
  v17 = *v14;
  if (*v14 >= *((_QWORD *)this + 4963))
  {
    v64 = v46;
    v51 = *((_QWORD *)this + 4964);
    if ((v51 & 1) != 0)
    {
      JSC::sanitizeStackForVM(this, v39, v40, v41, v42, v43, v44, v45);
      v17 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 39672, (uint64_t)this + 192, 16, 0, 0, v59, v60, v61);
      v14 = (unint64_t *)((char *)this + 39696);
    }
    else
    {
      v17 = *((_QWORD *)this + 4964);
      v14 = (unint64_t *)((char *)this + 39696);
      v52 = *(_QWORD *)(v51 + 8) ^ *((_QWORD *)this + 4965);
      *((_QWORD *)this + 4963) = v17 + HIDWORD(v52);
      *((_QWORD *)this + 4964) = v17 + (int)v52;
      *((_QWORD *)this + 4962) = v17 + 16;
    }
    v46 = v64;
  }
  else
  {
    *v14 = v17 + 16;
  }
  *(_DWORD *)v17 = v14[227] >> 4;
  *(_DWORD *)(v17 + 4) = 17302016;
  *(_QWORD *)(v17 + 8) = v46;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if (v49 >= 0x101)
  {
    v57 = (char *)this + 192;
    v58 = v17;
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v57, 0, v17, v49, v42, v43, v44, v45);
    v17 = v58;
  }
  *(_QWORD *)&v32[8 * v33] = v17;
  return (JSC::JSGlobalObject *)v17;
}

unint64_t operationStringSlice(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  unint64_t *v19;
  WTF::StringImpl *v20;
  unsigned __int8 v21;
  unint64_t SlowCase;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  int v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  _QWORD v67[2];
  int v68;
  _BYTE v69[2];
  _QWORD var38[8];

  v9 = a2;
  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v10 + 40) = var38[7];
  v11 = *(_QWORD *)(a2 + 8);
  v12 = (int *)(a2 + 16);
  if ((v11 & 1) == 0)
    v12 = (int *)(v11 + 4);
  v13 = *v12;
  if (v13 >= (int)a3)
    v14 = a3;
  else
    v14 = v13;
  if ((int)a3 < 0)
    v15 = (v13 + a3) & ~((v13 + (int)a3) >> 31);
  else
    v15 = v14;
  v16 = v13 & ~(v13 >> 31);
  v17 = v16 - v15;
  if (v16 <= (int)v15)
    return *(_QWORD *)(v10 + 41968);
  if (v15)
    v18 = 0;
  else
    v18 = v13 == v17;
  if (v18)
    return v9;
  if ((v11 & 2) != 0)
  {
    v9 = *(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL;
    v15 += *(_DWORD *)(a2 + 26);
  }
  else if ((v11 & 1) != 0)
  {
    JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
    if (*(_DWORD *)(v10 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, a3, a4, a5, a6, a7, a8))
        return 0;
    }
  }
  if (!v15)
  {
    v27 = *(_QWORD *)(v9 + 8);
    if (v27)
      LODWORD(v27) = *(_DWORD *)(v27 + 4);
    if ((_DWORD)v27 == v17)
      return v9;
  }
  v19 = (unint64_t *)(v10 + 39696);
  if (v17 == 1)
  {
    v20 = *(WTF::StringImpl **)(v9 + 8);
    if (!v20 || *((_DWORD *)v20 + 1) <= v15)
    {
      v21 = 0;
      return *(_QWORD *)(v10 + 8 * v21 + 42216);
    }
    v64 = WTF::StringImpl::at(v20, v15);
    if (v64 <= 0xFF)
    {
      v21 = v64;
      return *(_QWORD *)(v10 + 8 * v21 + 42216);
    }
LABEL_24:
    v24 = (unint64_t *)(v10 + 39432);
    v25 = *(_QWORD *)(v9 + 8);
    if (v25)
    {
      if ((*(_BYTE *)(v25 + 16) & 4) != 0)
        v26 = 7;
      else
        v26 = 3;
    }
    else
    {
      v26 = 7;
    }
    SlowCase = *v24;
    if (*v24 >= *(_QWORD *)(v10 + 39440))
    {
      SlowCase = *(_QWORD *)(v10 + 39448);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
        v19 = (unint64_t *)(v10 + 39696);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39408, v10 + 192, 32, 0, 0, v57, v58, v59);
LABEL_30:
        *(_DWORD *)SlowCase = v19[227] >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        *(_QWORD *)(SlowCase + 8) = v26;
        *(_DWORD *)(SlowCase + 16) = v17;
        *(_DWORD *)(SlowCase + 20) = v9;
        *(_WORD *)(SlowCase + 24) = WORD2(v9);
        *(_WORD *)(SlowCase + 26) = v15;
        *(_DWORD *)(SlowCase + 28) = HIWORD(v15);
        if (*(_BYTE *)(v10 + 755))
          __dmb(0xAu);
        return SlowCase;
      }
      v54 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39456);
      *(_QWORD *)(v10 + 39440) = SlowCase + HIDWORD(v54);
      *(_QWORD *)(v10 + 39448) = SlowCase + (int)v54;
    }
    *v24 = SlowCase + 32;
    goto LABEL_30;
  }
  if (v17 != 2)
    goto LABEL_24;
  v28 = *(WTF::StringImpl **)(v9 + 8);
  if (!v28)
  {
    v30 = 0;
    goto LABEL_42;
  }
  v29 = *((_DWORD *)v28 + 1);
  if (v29 > v15)
  {
    v30 = WTF::StringImpl::at(v28, v15);
    v28 = *(WTF::StringImpl **)(v9 + 8);
    if (!v28)
      goto LABEL_42;
    v29 = *((_DWORD *)v28 + 1);
  }
  else
  {
    v30 = 0;
  }
  a2 = v15 + 1;
  if (v29 > a2)
  {
    v65 = v30;
    LODWORD(v28) = WTF::StringImpl::at(v28, a2);
    v30 = v65;
  }
  else
  {
    LODWORD(v28) = 0;
  }
LABEL_42:
  if ((v28 | v30) > 0x7F)
    goto LABEL_24;
  v69[0] = v30;
  v69[1] = (_BYTE)v28;
  v67[0] = v69;
  v67[1] = 2;
  v31 = ((_DWORD)v28 << 11) ^ ((v30 - 1640531527) << 16) ^ (v30 - 1640531527);
  v32 = (v31 + (v31 >> 11)) ^ (8 * (v31 + (v31 >> 11)));
  v33 = (v32 + (v32 >> 5)) ^ (4 * (v32 + (v32 >> 5)));
  v34 = ((v33 + (v33 >> 15)) ^ ((v33 + (v33 >> 15)) << 10)) & 0xFFFFFF;
  if (v34)
    v35 = v34;
  else
    v35 = 0x800000;
  v68 = v35;
  v36 = v10 + 81168;
  v37 = v35 & 0x1FF;
  v38 = *(_QWORD *)(v10 + 81168 + 8 * v37);
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 8);
    v40 = (v39 & 1) != 0 ? 0 : (WTF::StringImpl *)v39;
    v41 = *((_DWORD *)v40 + 4);
    v42 = v41 < 0x100 ? WTF::StringImpl::hashSlowCase(v40) : v41 >> 8;
    if (v42 == v35 && WTF::equalInternal<unsigned char>((uint64_t)v40, (unint64_t)v69, 2))
      return *(_QWORD *)(v36 + 8 * v37);
  }
  WTF::AtomStringImpl::add(v67, a4, a5, a6, a7, a8, var38);
  v50 = var38[0];
  v51 = *(_DWORD *)(var38[0] + 16);
  v52 = var38[0];
  if ((v51 & 3) == 2)
  {
    v52 = var38[0];
    do
    {
      v52 = *(_QWORD *)(v52 + 24);
      v51 = *(_DWORD *)(v52 + 16);
    }
    while ((v51 & 3) == 2);
  }
  if ((v51 & 8) != 0)
  {
    v53 = 0;
  }
  else
  {
    *(_DWORD *)(v52 + 16) = v51 | 8;
    v53 = (unint64_t)*(unsigned int *)(v52 + 4) << ((v51 & 4) == 0);
  }
  SlowCase = *v19;
  if (*v19 >= *(_QWORD *)(v10 + 39704))
  {
    v66 = v50;
    v55 = *(_QWORD *)(v10 + 39712);
    if ((v55 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v10, v43, v44, v45, v46, v47, v48, v49);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v61, v62, v63);
      v19 = (unint64_t *)(v10 + 39696);
    }
    else
    {
      SlowCase = *(_QWORD *)(v10 + 39712);
      v19 = (unint64_t *)(v10 + 39696);
      v56 = *(_QWORD *)(v55 + 8) ^ *(_QWORD *)(v10 + 39720);
      *(_QWORD *)(v10 + 39704) = SlowCase + HIDWORD(v56);
      *(_QWORD *)(v10 + 39712) = SlowCase + (int)v56;
      *(_QWORD *)(v10 + 39696) = SlowCase + 16;
    }
    v50 = v66;
  }
  else
  {
    *v19 = SlowCase + 16;
  }
  *(_DWORD *)SlowCase = v19[227] >> 4;
  *(_DWORD *)(SlowCase + 4) = 17302016;
  *(_QWORD *)(SlowCase + 8) = v50;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (v53 >= 0x101)
  {
    v60 = SlowCase;
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v10 + 192, 0, SlowCase, v53, v46, v47, v48, v49);
    SlowCase = v60;
  }
  *(_QWORD *)(v36 + 8 * v37) = SlowCase;
  return SlowCase;
}

unint64_t operationStringSliceWithEnd(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  signed int v16;
  unsigned int v17;
  BOOL v18;
  unint64_t *v19;
  WTF::StringImpl *v20;
  unsigned __int8 v21;
  unint64_t SlowCase;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  int v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  _QWORD v67[2];
  int v68;
  _BYTE v69[2];
  _QWORD var38[8];

  v9 = a2;
  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v10 + 40) = var38[7];
  v11 = *(_QWORD *)(a2 + 8);
  v12 = (int *)(a2 + 16);
  if ((v11 & 1) == 0)
    v12 = (int *)(v11 + 4);
  v13 = *v12;
  if (v13 >= (int)a3)
    v14 = a3;
  else
    v14 = v13;
  if ((int)a3 < 0)
    v15 = (v13 + a3) & ~((v13 + (int)a3) >> 31);
  else
    v15 = v14;
  if (v13 >= (int)a4)
    v16 = a4;
  else
    v16 = v13;
  if ((int)a4 < 0)
    v16 = (v13 + a4) & ~((v13 + (int)a4) >> 31);
  v17 = v16 - v15;
  if (v16 <= (int)v15)
    return *(_QWORD *)(v10 + 41968);
  if (v15)
    v18 = 0;
  else
    v18 = v13 == v17;
  if (v18)
    return v9;
  if ((v11 & 2) != 0)
  {
    v9 = *(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL;
    v15 += *(_DWORD *)(a2 + 26);
  }
  else if ((v11 & 1) != 0)
  {
    JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
    if (*(_DWORD *)(v10 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, a3, a4, a5, a6, a7, a8))
        return 0;
    }
  }
  if (!v15)
  {
    v27 = *(_QWORD *)(v9 + 8);
    if (v27)
      LODWORD(v27) = *(_DWORD *)(v27 + 4);
    if ((_DWORD)v27 == v17)
      return v9;
  }
  v19 = (unint64_t *)(v10 + 39696);
  if (v17 == 1)
  {
    v20 = *(WTF::StringImpl **)(v9 + 8);
    if (!v20 || *((_DWORD *)v20 + 1) <= v15)
    {
      v21 = 0;
      return *(_QWORD *)(v10 + 8 * v21 + 42216);
    }
    v64 = WTF::StringImpl::at(v20, v15);
    if (v64 <= 0xFF)
    {
      v21 = v64;
      return *(_QWORD *)(v10 + 8 * v21 + 42216);
    }
LABEL_29:
    v24 = (unint64_t *)(v10 + 39432);
    v25 = *(_QWORD *)(v9 + 8);
    if (v25)
    {
      if ((*(_BYTE *)(v25 + 16) & 4) != 0)
        v26 = 7;
      else
        v26 = 3;
    }
    else
    {
      v26 = 7;
    }
    SlowCase = *v24;
    if (*v24 >= *(_QWORD *)(v10 + 39440))
    {
      SlowCase = *(_QWORD *)(v10 + 39448);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
        v19 = (unint64_t *)(v10 + 39696);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39408, v10 + 192, 32, 0, 0, v57, v58, v59);
LABEL_35:
        *(_DWORD *)SlowCase = v19[227] >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        *(_QWORD *)(SlowCase + 8) = v26;
        *(_DWORD *)(SlowCase + 16) = v17;
        *(_DWORD *)(SlowCase + 20) = v9;
        *(_WORD *)(SlowCase + 24) = WORD2(v9);
        *(_WORD *)(SlowCase + 26) = v15;
        *(_DWORD *)(SlowCase + 28) = HIWORD(v15);
        if (*(_BYTE *)(v10 + 755))
          __dmb(0xAu);
        return SlowCase;
      }
      v54 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39456);
      *(_QWORD *)(v10 + 39440) = SlowCase + HIDWORD(v54);
      *(_QWORD *)(v10 + 39448) = SlowCase + (int)v54;
    }
    *v24 = SlowCase + 32;
    goto LABEL_35;
  }
  if (v17 != 2)
    goto LABEL_29;
  v28 = *(WTF::StringImpl **)(v9 + 8);
  if (!v28)
  {
    v30 = 0;
    goto LABEL_47;
  }
  v29 = *((_DWORD *)v28 + 1);
  if (v29 > v15)
  {
    v30 = WTF::StringImpl::at(v28, v15);
    v28 = *(WTF::StringImpl **)(v9 + 8);
    if (!v28)
      goto LABEL_47;
    v29 = *((_DWORD *)v28 + 1);
  }
  else
  {
    v30 = 0;
  }
  a2 = v15 + 1;
  if (v29 > a2)
  {
    v65 = v30;
    LODWORD(v28) = WTF::StringImpl::at(v28, a2);
    v30 = v65;
  }
  else
  {
    LODWORD(v28) = 0;
  }
LABEL_47:
  if ((v28 | v30) > 0x7F)
    goto LABEL_29;
  v69[0] = v30;
  v69[1] = (_BYTE)v28;
  v67[0] = v69;
  v67[1] = 2;
  v31 = ((_DWORD)v28 << 11) ^ ((v30 - 1640531527) << 16) ^ (v30 - 1640531527);
  v32 = (v31 + (v31 >> 11)) ^ (8 * (v31 + (v31 >> 11)));
  v33 = (v32 + (v32 >> 5)) ^ (4 * (v32 + (v32 >> 5)));
  v34 = ((v33 + (v33 >> 15)) ^ ((v33 + (v33 >> 15)) << 10)) & 0xFFFFFF;
  if (v34)
    v35 = v34;
  else
    v35 = 0x800000;
  v68 = v35;
  v36 = v10 + 81168;
  v37 = v35 & 0x1FF;
  v38 = *(_QWORD *)(v10 + 81168 + 8 * v37);
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 8);
    v40 = (v39 & 1) != 0 ? 0 : (WTF::StringImpl *)v39;
    v41 = *((_DWORD *)v40 + 4);
    v42 = v41 < 0x100 ? WTF::StringImpl::hashSlowCase(v40) : v41 >> 8;
    if (v42 == v35 && WTF::equalInternal<unsigned char>((uint64_t)v40, (unint64_t)v69, 2))
      return *(_QWORD *)(v36 + 8 * v37);
  }
  WTF::AtomStringImpl::add(v67, a4, a5, a6, a7, a8, var38);
  v50 = var38[0];
  v51 = *(_DWORD *)(var38[0] + 16);
  v52 = var38[0];
  if ((v51 & 3) == 2)
  {
    v52 = var38[0];
    do
    {
      v52 = *(_QWORD *)(v52 + 24);
      v51 = *(_DWORD *)(v52 + 16);
    }
    while ((v51 & 3) == 2);
  }
  if ((v51 & 8) != 0)
  {
    v53 = 0;
  }
  else
  {
    *(_DWORD *)(v52 + 16) = v51 | 8;
    v53 = (unint64_t)*(unsigned int *)(v52 + 4) << ((v51 & 4) == 0);
  }
  SlowCase = *v19;
  if (*v19 >= *(_QWORD *)(v10 + 39704))
  {
    v66 = v50;
    v55 = *(_QWORD *)(v10 + 39712);
    if ((v55 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v10, v43, v44, v45, v46, v47, v48, v49);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v61, v62, v63);
      v19 = (unint64_t *)(v10 + 39696);
    }
    else
    {
      SlowCase = *(_QWORD *)(v10 + 39712);
      v19 = (unint64_t *)(v10 + 39696);
      v56 = *(_QWORD *)(v55 + 8) ^ *(_QWORD *)(v10 + 39720);
      *(_QWORD *)(v10 + 39704) = SlowCase + HIDWORD(v56);
      *(_QWORD *)(v10 + 39712) = SlowCase + (int)v56;
      *(_QWORD *)(v10 + 39696) = SlowCase + 16;
    }
    v50 = v66;
  }
  else
  {
    *v19 = SlowCase + 16;
  }
  *(_DWORD *)SlowCase = v19[227] >> 4;
  *(_DWORD *)(SlowCase + 4) = 17302016;
  *(_QWORD *)(SlowCase + 8) = v50;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (v53 >= 0x101)
  {
    v60 = SlowCase;
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v10 + 192, 0, SlowCase, v53, v46, v47, v48, v49);
    SlowCase = v60;
  }
  *(_QWORD *)(v36 + 8 * v37) = SlowCase;
  return SlowCase;
}

uint64_t operationStringSubstring(JSC *a1, int *a2, int a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t result;
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  v9 = *((_QWORD *)a2 + 1);
  if ((v9 & 1) != 0)
    v10 = a2 + 4;
  else
    v10 = (int *)(v9 + 4);
  v11 = *v10;
  if (v11 < 0)
  {
    result = 100;
    __break(0xC471u);
  }
  else
  {
    v12 = a3 & ~(a3 >> 31);
    if (v11 >= v12)
      v13 = v12;
    else
      v13 = v11;
    return (uint64_t)JSC::jsSubstring(a1, (JSC::JSGlobalObject *)a2, (JSC::JSString *)v13, (v11 - v13), a6, a7, a8, a9, a4);
  }
  return result;
}

unint64_t operationStringSubstringWithEnd(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  signed int *v12;
  signed int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  unint64_t *v20;
  WTF::StringImpl *v21;
  unsigned __int8 v22;
  unint64_t SlowCase;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  int v43;
  JSC::VM *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  _QWORD v68[2];
  int v69;
  _BYTE v70[2];
  _QWORD var38[8];

  v9 = a2;
  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v10 + 40) = var38[7];
  v11 = *(_QWORD *)(a2 + 8);
  v12 = (signed int *)(a2 + 16);
  if ((v11 & 1) == 0)
    v12 = (signed int *)(v11 + 4);
  v13 = *v12;
  if (v13 < 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1984A4AA8);
  }
  v14 = a3 & ~((int)a3 >> 31);
  if (v13 < (int)v14)
    v14 = v13;
  v15 = a4 & ~((int)a4 >> 31);
  if (v13 < v15)
    v15 = v13;
  if (v14 > v15)
    v16 = v14;
  else
    v16 = v15;
  if (v14 > v15)
    v17 = v15;
  else
    v17 = v14;
  v18 = v16 - v17;
  if (v16 == v17)
    return *(_QWORD *)(v10 + 41968);
  if (v17)
    v19 = 0;
  else
    v19 = v13 == v18;
  if (v19)
    return v9;
  if ((v11 & 2) != 0)
  {
    v9 = *(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL;
    v17 += *(_DWORD *)(a2 + 26);
  }
  else if ((v11 & 1) != 0)
  {
    JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
    if (*(_DWORD *)(v10 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, a3, a4, a5, a6, a7, a8))
        return 0;
    }
  }
  if (!v17)
  {
    v28 = *(_QWORD *)(v9 + 8);
    if (v28)
      LODWORD(v28) = *(_DWORD *)(v28 + 4);
    if ((_DWORD)v28 == v18)
      return v9;
  }
  v20 = (unint64_t *)(v10 + 39696);
  if (v18 == 1)
  {
    v21 = *(WTF::StringImpl **)(v9 + 8);
    if (!v21 || *((_DWORD *)v21 + 1) <= v17)
    {
      v22 = 0;
      return *(_QWORD *)(v10 + 8 * v22 + 42216);
    }
    v65 = WTF::StringImpl::at(v21, v17);
    if (v65 <= 0xFF)
    {
      v22 = v65;
      return *(_QWORD *)(v10 + 8 * v22 + 42216);
    }
LABEL_29:
    v25 = (unint64_t *)(v10 + 39432);
    v26 = *(_QWORD *)(v9 + 8);
    if (v26)
    {
      if ((*(_BYTE *)(v26 + 16) & 4) != 0)
        v27 = 7;
      else
        v27 = 3;
    }
    else
    {
      v27 = 7;
    }
    SlowCase = *v25;
    if (*v25 >= *(_QWORD *)(v10 + 39440))
    {
      SlowCase = *(_QWORD *)(v10 + 39448);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
        v20 = (unint64_t *)(v10 + 39696);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39408, v10 + 192, 32, 0, 0, v58, v59, v60);
LABEL_35:
        *(_DWORD *)SlowCase = v20[227] >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        *(_QWORD *)(SlowCase + 8) = v27;
        *(_DWORD *)(SlowCase + 16) = v18;
        *(_DWORD *)(SlowCase + 20) = v9;
        *(_WORD *)(SlowCase + 24) = WORD2(v9);
        *(_WORD *)(SlowCase + 26) = v17;
        *(_DWORD *)(SlowCase + 28) = HIWORD(v17);
        if (*(_BYTE *)(v10 + 755))
          __dmb(0xAu);
        return SlowCase;
      }
      v55 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39456);
      *(_QWORD *)(v10 + 39440) = SlowCase + HIDWORD(v55);
      *(_QWORD *)(v10 + 39448) = SlowCase + (int)v55;
    }
    *v25 = SlowCase + 32;
    goto LABEL_35;
  }
  if (v18 != 2)
    goto LABEL_29;
  v29 = *(WTF::StringImpl **)(v9 + 8);
  if (!v29)
  {
    v31 = 0;
    goto LABEL_47;
  }
  v30 = *((_DWORD *)v29 + 1);
  if (v30 > v17)
  {
    v31 = WTF::StringImpl::at(v29, v17);
    v29 = *(WTF::StringImpl **)(v9 + 8);
    if (!v29)
      goto LABEL_47;
    v30 = *((_DWORD *)v29 + 1);
  }
  else
  {
    v31 = 0;
  }
  a2 = v17 + 1;
  if (v30 > a2)
  {
    v66 = v31;
    LODWORD(v29) = WTF::StringImpl::at(v29, a2);
    v31 = v66;
  }
  else
  {
    LODWORD(v29) = 0;
  }
LABEL_47:
  if ((v29 | v31) > 0x7F)
    goto LABEL_29;
  v70[0] = v31;
  v70[1] = (_BYTE)v29;
  v68[0] = v70;
  v68[1] = 2;
  v32 = ((v31 - 1640531527) << 16) ^ ((_DWORD)v29 << 11) ^ (v31 - 1640531527);
  v33 = (v32 + (v32 >> 11)) ^ (8 * (v32 + (v32 >> 11)));
  v34 = (v33 + (v33 >> 5)) ^ (4 * (v33 + (v33 >> 5)));
  v35 = ((v34 + (v34 >> 15)) ^ ((v34 + (v34 >> 15)) << 10)) & 0xFFFFFF;
  if (v35)
    v36 = v35;
  else
    v36 = 0x800000;
  v69 = v36;
  v37 = v10 + 81168;
  v38 = v36 & 0x1FF;
  v39 = *(_QWORD *)(v10 + 81168 + 8 * v38);
  if (v39)
  {
    v40 = *(_QWORD *)(v39 + 8);
    v41 = (v40 & 1) != 0 ? 0 : (WTF::StringImpl *)v40;
    v42 = *((_DWORD *)v41 + 4);
    v43 = v42 < 0x100 ? WTF::StringImpl::hashSlowCase(v41) : v42 >> 8;
    if (v43 == v36 && WTF::equalInternal<unsigned char>((uint64_t)v41, (unint64_t)v70, 2))
      return *(_QWORD *)(v37 + 8 * v38);
  }
  WTF::AtomStringImpl::add(v68, a4, a5, a6, a7, a8, var38);
  v51 = var38[0];
  v52 = *(_DWORD *)(var38[0] + 16);
  v53 = var38[0];
  if ((v52 & 3) == 2)
  {
    v53 = var38[0];
    do
    {
      v53 = *(_QWORD *)(v53 + 24);
      v52 = *(_DWORD *)(v53 + 16);
    }
    while ((v52 & 3) == 2);
  }
  if ((v52 & 8) != 0)
  {
    v54 = 0;
  }
  else
  {
    *(_DWORD *)(v53 + 16) = v52 | 8;
    v54 = (unint64_t)*(unsigned int *)(v53 + 4) << ((v52 & 4) == 0);
  }
  SlowCase = *v20;
  if (*v20 >= *(_QWORD *)(v10 + 39704))
  {
    v67 = v51;
    v56 = *(_QWORD *)(v10 + 39712);
    if ((v56 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v10, v44, v45, v46, v47, v48, v49, v50);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v62, v63, v64);
      v20 = (unint64_t *)(v10 + 39696);
    }
    else
    {
      SlowCase = *(_QWORD *)(v10 + 39712);
      v20 = (unint64_t *)(v10 + 39696);
      v57 = *(_QWORD *)(v56 + 8) ^ *(_QWORD *)(v10 + 39720);
      *(_QWORD *)(v10 + 39704) = SlowCase + HIDWORD(v57);
      *(_QWORD *)(v10 + 39712) = SlowCase + (int)v57;
      *(_QWORD *)(v10 + 39696) = SlowCase + 16;
    }
    v51 = v67;
  }
  else
  {
    *v20 = SlowCase + 16;
  }
  *(_DWORD *)SlowCase = v20[227] >> 4;
  *(_DWORD *)(SlowCase + 4) = 17302016;
  *(_QWORD *)(SlowCase + 8) = v51;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (v54 >= 0x101)
  {
    v61 = SlowCase;
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v10 + 192, 0, SlowCase, v54, v47, v48, v49, v50);
    SlowCase = v61;
  }
  *(_QWORD *)(v37 + 8 * v38) = SlowCase;
  return SlowCase;
}

WTF::String *operationToLowerCase(JSC::JSGlobalObject *a1, WTF::String *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  uint64_t v11;
  int **v12;
  int *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::String *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl *var38[8];

  v9 = a3;
  v11 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v11 + 40) = var38[7];
  v12 = (int **)((char *)this + 8);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    v12 = JSC::JSRopeString::resolveRope((unint64_t)this, a1, a3, a4, a9, a5, a6, a7, a8);
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_4;
  v33 = *(_DWORD *)(v11 + 80);
  if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v11 + 16))
    return 0;
LABEL_4:
  v13 = *v12;
  if (!*v12 || !v13[1])
    return *(WTF::String **)(v11 + 41968);
  if ((v13[4] & 4) != 0)
    WTF::String::convertToLowercaseWithoutLocaleStartingAtFailingIndex8Bit((uint64_t)v12, v9, (uint64_t *)var38);
  else
    WTF::StringImpl::convertToLowercaseWithoutLocale((WTF::StringImpl *)v13, (uint64_t *)var38);
  v21 = var38[0];
  v22 = (WTF::StringImpl *)*v12;
  v23 = this;
  if (var38[0] != v22)
  {
    v23 = (WTF::String *)JSC::jsString(v11, (JSC::VM *)var38, v15, v16, v17, v18, v19, v20);
    v21 = var38[0];
  }
  var38[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  return v23;
}

uint64_t operationStringLocaleCompare(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  int **v12;
  int **v13;
  uint64_t v14;
  int *v15;
  uint8x8_t *v16;
  unint64_t v17;
  int *v18;
  int16x8_t *v19;
  unint64_t v20;
  JSC::VM *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint8x8_t *v30;
  int16x8_t *v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  unsigned int v41;
  uint8x16_t v42;
  int v43;
  int v45;
  uint64_t (*v46)(int8x16_t *);
  uint64_t *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  const WTF::String *v52;
  unint64_t Error;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint8x8_t *v92;
  unint64_t v93;
  int8x16_t v94;
  uint64_t v95;
  int8x16_t v96;
  unint64_t v97;
  int v98;
  unsigned __int8 *v99[2];
  unsigned __int8 *var60[13];

  v11 = *(_QWORD *)(a1 + 56);
  *(unsigned __int8 **)(v11 + 40) = var60[12];
  v12 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v12 = JSC::JSRopeString::resolveRope(a2, (JSC::JSGlobalObject *)a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v43 = *(_DWORD *)(v11 + 80);
    if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v13 = (int **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    v13 = JSC::JSRopeString::resolveRope(a3, (JSC::JSGlobalObject *)a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v45 = *(_DWORD *)(v11 + 80);
    if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v14 = *(_QWORD *)(a1 + 288);
  if ((v14 & 1) != 0)
  {
    v46 = *(uint64_t (**)(int8x16_t *))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v47 = (uint64_t *)(a1 - 16);
    else
      v47 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v96.i64[0] = *v47;
    v96.i64[1] = a1;
    v97 = a1 + 288;
    v14 = v46(&v96);
  }
  v15 = *v12;
  if (*v12)
  {
    v16 = (uint8x8_t *)*((_QWORD *)v15 + 1);
    v17 = v15[1] | ((unint64_t)((v15[4] >> 2) & 1) << 32);
  }
  else
  {
    v16 = 0;
    v17 = 0x100000000;
  }
  v18 = *v13;
  if (*v13)
  {
    v19 = (int16x8_t *)*((_QWORD *)v18 + 1);
    v20 = v18[1] | ((unint64_t)((v18[4] >> 2) & 1) << 32);
  }
  else
  {
    v19 = 0;
    v20 = 0x100000000;
  }
  var60[0] = (unsigned __int8 *)v16;
  var60[1] = (unsigned __int8 *)v17;
  v99[0] = (unsigned __int8 *)v19;
  v99[1] = (unsigned __int8 *)v20;
  v21 = *(JSC::VM **)(a1 + 56);
  v98 = 0;
  v22 = *(unsigned __int8 *)(v14 + 51);
  if (v22 == 2)
  {
    v48 = v14;
    v92 = v16;
    v93 = v17;
    v91 = v20;
    v49 = JSC::IntlCollator::updateCanDoASCIIUCADUCETComparison(void)const::$_0::operator()(v14);
    v20 = v91;
    v16 = v92;
    v17 = v93;
    v22 = v49;
    *(_BYTE *)(v48 + 51) = v49;
  }
  v23 = v17 & 0x100000000;
  v24 = v20 & 0x100000000;
  if (v22 != 1)
  {
    if (v23 && v24 && WTF::StringView::containsOnlyASCII(var60) && WTF::StringView::containsOnlyASCII(v99))
    {
      v50 = ucol_strcollUTF8();
      if (v98 < 1)
      {
        return v50;
      }
      else
      {
        v51 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v51 = 0x1A00000002;
        *(_QWORD *)(v51 + 8) = "Failed to compare strings.";
        *(_DWORD *)(v51 + 16) = 4;
        v96.i64[0] = v51;
        Error = JSC::createError(a1, (WTF::StringImpl **)&v96, v52);
        JSC::VM::throwException(v21, (JSC::JSGlobalObject *)a1, Error, v54, v55, v56, v57, v58);
        v66 = (WTF::StringImpl *)v96.i64[0];
        v96.i64[0] = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
          {
            WTF::StringImpl::~StringImpl(v66, v59, v60, v61, v62, v63, v64, v65);
            WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
          }
          else
          {
            *(_DWORD *)v66 -= 2;
          }
        }
        return 0;
      }
    }
    goto LABEL_94;
  }
  v25 = v17;
  if (v23)
  {
    if (!v24)
    {
      v69 = JSC::compareASCIIWithUCADUCET<unsigned char,char16_t>(v16, v17, v19, v20);
      v36 = v69 & 0xFFFFFF00;
      v38 = v69 & 0xFFFFFFFF00000000;
      goto LABEL_91;
    }
    if ((_DWORD)v17 == (_DWORD)v20)
    {
      if ((_DWORD)v17 == 1)
      {
        v27 = v16->u8[0];
        v28 = v19->u8[0];
      }
      else
      {
        if (!(_DWORD)v17)
        {
          v38 = 0x100000000;
          LOBYTE(v37) = 0;
          v36 = 0;
          goto LABEL_90;
        }
        v26 = 32 - __clz(v17 - 1);
        if (v26 != 3)
        {
          switch(v26)
          {
            case 1u:
              v27 = v16->u16[0];
              v28 = v19->u16[0];
              goto LABEL_23;
            case 2u:
              if (v16->u16[0] != v19->u16[0])
                goto LABEL_24;
              v27 = *(unsigned __int16 *)((char *)&v16->u16[-1] + v17);
              v28 = *(unsigned __int16 *)((char *)&v19->u16[-1] + v17);
              goto LABEL_23;
            case 4u:
              if (*v16 == v19->i64[0]
                && *(_QWORD *)((char *)&v16[-1] + v17) == *(uint64_t *)((char *)&v19->i64[-1]
                                                                                   + v17))
              {
                goto LABEL_39;
              }
              goto LABEL_24;
            case 5u:
              v39 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v16[-2].i8[v17], *(int8x16_t *)((char *)&v19[-1] + v17)), vceqq_s8(*(int8x16_t *)v16->i8, *(int8x16_t *)v19));
              v39.i8[0] = vminvq_u8(v39);
              if (v39.i32[0])
                goto LABEL_39;
              goto LABEL_24;
            default:
              v40 = (uint8x16_t)vceqq_s8(*(int8x16_t *)v16->i8, *(int8x16_t *)v19);
              v40.i8[0] = vminvq_u8(v40);
              if (!v40.i32[0])
                goto LABEL_24;
              if (v17 < 0x10)
                goto LABEL_39;
              v41 = v17 & 0xF;
              v38 = 0x100000000;
              break;
          }
          while (1)
          {
            v42 = (uint8x16_t)vceqq_s8(*(int8x16_t *)&v16->i8[v41], *(int8x16_t *)((char *)v19 + v41));
            v42.i8[0] = vminvq_u8(v42);
            if (!v42.i32[0])
              goto LABEL_24;
            LOBYTE(v37) = 0;
            v36 = 0;
            v41 += 16;
            if (v41 >= v17)
              goto LABEL_90;
          }
        }
        if (v16->i32[0] != v19->i32[0])
          goto LABEL_24;
        v27 = *(__int32 *)((char *)&v16->i32[-1] + v17);
        v28 = *(__int32 *)((char *)&v19->i32[-1] + v17);
      }
LABEL_23:
      if (v27 == v28)
      {
LABEL_39:
        LOBYTE(v37) = 0;
        v36 = 0;
        goto LABEL_89;
      }
    }
LABEL_24:
    if (v20 >= (unint64_t)v17)
      v29 = v17;
    else
      v29 = v20;
    if (v29)
    {
      v30 = v16;
      v31 = v19;
      do
      {
        v32 = v30->u8[0];
        v30 = (uint8x8_t *)((char *)v30 + 1);
        v33 = JSC::ducetLevel1Weights[v32];
        if (!JSC::ducetLevel1Weights[v32])
          goto LABEL_67;
        v34 = JSC::ducetLevel1Weights[v31->u8[0]];
        if (!JSC::ducetLevel1Weights[v31->u8[0]])
          goto LABEL_67;
        v35 = v33 > v34;
        if (v33 != v34)
          goto LABEL_85;
        v31 = (int16x8_t *)((char *)v31 + 1);
      }
      while (--v29);
    }
    if ((_DWORD)v17 == (_DWORD)v20)
    {
      if ((_DWORD)v17)
      {
        while (1)
        {
          v71 = v16->u8[0];
          v16 = (uint8x8_t *)((char *)v16 + 1);
          v70 = v71;
          v72 = v19->u8[0];
          v19 = (int16x8_t *)((char *)v19 + 1);
          LODWORD(v70) = JSC::ducetLevel3Weights[v70];
          v73 = JSC::ducetLevel3Weights[v72];
          v35 = v70 > v73;
          if ((_DWORD)v70 != v73)
            break;
          if (!--v25)
            goto LABEL_84;
        }
LABEL_85:
        if (v35)
          LODWORD(v37) = 1;
        else
          LODWORD(v37) = -1;
        v36 = v37 & 0xFFFFFF00;
      }
      else
      {
LABEL_84:
        LOBYTE(v37) = 0;
        v36 = 0;
      }
    }
    else
    {
      if (v20 < v17)
      {
        v36 = 0;
        v37 = JSC::ducetLevel1Weights[v16->u8[v20]] != 0;
        v38 = v37 << 32;
LABEL_90:
        LOBYTE(v69) = v36 | v37;
        goto LABEL_91;
      }
      if (!JSC::ducetLevel1Weights[v19->u8[v17]])
      {
LABEL_67:
        v38 = 0;
        LOBYTE(v37) = 0;
        v36 = 0;
        goto LABEL_90;
      }
      v36 = -256;
      LOBYTE(v37) = -1;
    }
LABEL_89:
    v38 = 0x100000000;
    goto LABEL_90;
  }
  if (v24)
    v68 = JSC::compareASCIIWithUCADUCET<char16_t,unsigned char>((int16x8_t *)v16, v17, (uint8x8_t *)v19, v20);
  else
    v68 = (uint64_t)JSC::compareASCIIWithUCADUCET<char16_t,char16_t>((int16x8_t *)v16, v17, v19, v20);
  v36 = v68 & 0xFFFFFF00;
  v38 = v68 & 0xFFFFFFFF00000000;
  LOBYTE(v69) = v68;
LABEL_91:
  if ((v38 & 0xFF00000000) == 0)
  {
LABEL_94:
    WTF::StringView::upconvertedCharacters<32ul>((int8x16_t **)var60, &v96);
    WTF::StringView::upconvertedCharacters<32ul>((int8x16_t **)v99, &v94);
    v67 = ucol_strcoll();
    v81 = v94.i64[0];
    if (&v95 != (uint64_t *)v94.i64[0] && v94.i64[0])
    {
      v94.i64[0] = 0;
      v94.i32[2] = 0;
      WTF::fastFree(v81, v74, v75, v76, v77, v78, v79, v80);
    }
    v82 = v96.i64[0];
    if (&v97 != (unint64_t *)v96.i64[0])
    {
      if (v96.i64[0])
      {
        v96.i64[0] = 0;
        v96.i32[2] = 0;
        WTF::fastFree(v82, v74, v75, v76, v77, v78, v79, v80);
      }
    }
    return v67;
  }
  return v36 | v69;
}

uint64_t operationStringIndexOf(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  unint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  unint64_t v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t (*v23)(uint64_t, uint64_t, int, int);
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, int, int);
  int v54;
  uint64_t vars0;
  StringView v56;
  StringView v57;

  v12 = (unint64_t)a1;
  v13 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v13 + 40) = vars0;
  v14 = *(int **)(a2 + 8);
  if ((v14 & 1) == 0)
  {
    if (v14)
    {
LABEL_3:
      v15 = (char *)*((_QWORD *)v14 + 1);
      v16 = v14[1] | ((unint64_t)((v14[4] >> 2) & 1) << 32);
      goto LABEL_4;
    }
    goto LABEL_70;
  }
  if ((v14 & 2) == 0)
  {
    v14 = *JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
    if (v14)
      goto LABEL_3;
LABEL_70:
    v15 = 0;
    v16 = 0x100000000;
    goto LABEL_4;
  }
  v25 = *(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL;
  v26 = *(_QWORD *)(v25 + 8);
  if (v26
    && (v27 = *(unsigned int *)(v26 + 4),
        v28 = *(_QWORD *)(a2 + 24),
        v29 = v28 >> 16,
        v27 > (v28 >> 16)))
  {
    v30 = *(unsigned int *)(v26 + 16);
    v15 = *(char **)(v26 + 8);
    v31 = *(_DWORD *)(a2 + 16);
    if ((int)v27 - (int)v29 > v31 || (v31 = v27 - v29, (_DWORD)v29))
    {
      v32 = (v28 >> 16);
      v16 = v31;
      v33 = v27 - v29;
      if (((v30 >> 2) & 1) != 0)
      {
        if (v33 < v31)
          goto LABEL_91;
        v15 += v32;
        v16 = v31 | 0x100000000;
      }
      else
      {
        if (v33 < v31)
          goto LABEL_91;
        v15 += 2 * v32;
      }
    }
    else
    {
      v16 = v27 & 0xFFFFFFFEFFFFFFFFLL | (((v30 >> 2) & 1) << 32);
    }
  }
  else
  {
    v16 = 0x100000000;
    v15 = &str_77_5;
  }
LABEL_4:
  if (*(_DWORD *)(v13 + 80))
  {
    LODWORD(v25) = *(_DWORD *)(v13 + 80);
    if ((v25 & 0x27) != 0)
      goto LABEL_92;
    goto LABEL_85;
  }
  while (1)
  {
    v17 = *(int **)(a3 + 8);
    if ((v17 & 1) == 0)
    {
      if (v17)
      {
LABEL_7:
        v12 = *((_QWORD *)v17 + 1);
        v18 = v17[1] | ((unint64_t)((v17[4] >> 2) & 1) << 32);
        goto LABEL_8;
      }
LABEL_72:
      v12 = 0;
      v18 = 0x100000000;
      goto LABEL_8;
    }
    if ((v17 & 2) == 0)
    {
      v17 = *JSC::JSRopeString::resolveRope(a3, (JSC::JSGlobalObject *)v12, a3, a4, a9, a5, a6, a7, a8);
      if (v17)
        goto LABEL_7;
      goto LABEL_72;
    }
    v25 = *(_QWORD *)(a3 + 20) & 0xFFFFFFFFFLL;
    v34 = *(_QWORD *)(v25 + 8);
    if (v34)
    {
      v12 = *(_QWORD *)(v34 + 8);
      v35 = *(unsigned int *)(v34 + 4) | ((unint64_t)((*(_DWORD *)(v34 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v12 = 0;
      v35 = 0x100000000;
    }
    v36 = *(_QWORD *)(a3 + 24);
    v37 = v36 >> 16;
    if (v35 <= (v36 >> 16))
    {
      v18 = 0x100000000;
      v12 = (unint64_t)&str_77_5;
      goto LABEL_8;
    }
    v38 = *(_DWORD *)(a3 + 16);
    if (v35 - (v36 >> 16) <= v38)
    {
      v38 = v35 - (v36 >> 16);
      if (!(_DWORD)v37)
      {
        v18 = v35;
        goto LABEL_8;
      }
    }
    v39 = (v36 >> 16);
    v18 = v38;
    v40 = v35 - (unint64_t)v37;
    if ((v35 & 0x100000000) != 0)
      break;
    if (v40 >= v38)
    {
      v12 += 2 * v39;
      goto LABEL_8;
    }
LABEL_91:
    __break(1u);
LABEL_92:
    if ((v25 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
LABEL_85:
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if (v40 < v38)
    goto LABEL_91;
  v12 += v39;
  v18 = v38 | 0x100000000;
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_9;
LABEL_8:
  v49 = *(_DWORD *)(v13 + 80);
  if ((v49 & 0x27) != 0 && (v49 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v13 + 16))
    return 0;
LABEL_9:
  v19 = *(_QWORD *)(v13 + 93360);
  if ((v19 & 1) != 0)
    v19 = (*(uint64_t (**)(uint64_t))(v19 & 0xFFFFFFFFFFFFFFFCLL))(v13);
  if ((_DWORD)v18)
  {
    if (((v18 | v16) & 0x80000000) != 0)
    {
      v56.m_characters = (void *)v16;
      *(_QWORD *)&v56.m_length = v12;
      v57.m_characters = (void *)v18;
      *(_QWORD *)&v57.m_length = 0;
      LODWORD(result) = WTF::findCommon((uint64_t)v15, v56, v57, *(double *)a9.i64, a10, a11);
    }
    else
    {
      v20 = v18 & 0x100000000;
      if ((int)v18 <= 250)
        v21 = 250;
      else
        v21 = v18;
      v22 = v21 - 250;
      if ((v16 & 0x100000000) != 0)
      {
        if (v20)
        {
          v50 = v19;
          v51 = v12;
          v52 = v18;
          v54 = v22;
          if (v18 > 6)
          {
            v23 = (uint64_t (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::initialSearch;
          }
          else if ((_DWORD)v18 == 1)
          {
            v23 = WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::singleCharSearch;
          }
          else
          {
            v23 = (uint64_t (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,unsigned char>::linearSearch;
          }
        }
        else
        {
          v50 = v19;
          v51 = v12;
          v52 = v18;
          v41 = v12 + 2 * v18;
          v54 = v22;
          if ((v12 & 7) != 0)
          {
            v42 = 0;
            v43 = 2 * v18 - 2;
            v44 = v12 + 2;
            do
            {
              v45 = *(unsigned __int16 *)v12;
              v12 += 2;
              v42 |= v45;
              if ((v44 & 7) == 0)
                break;
              v46 = v43;
              v43 -= 2;
              v44 += 2;
            }
            while (v46);
          }
          else
          {
            v42 = 0;
          }
          while (v12 < (v41 & 0xFFFFFFFFFFFFFFF8))
          {
            v47 = *(_QWORD *)v12;
            v12 += 8;
            v42 |= v47;
          }
          while (v12 != v41)
          {
            v48 = *(unsigned __int16 *)v12;
            v12 += 2;
            v42 |= v48;
          }
          if ((v42 & 0xFF00FF00FF00FF00) != 0)
          {
            v23 = (uint64_t (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,unsigned char>::failSearch;
          }
          else if ((int)v18 > 6)
          {
            v23 = (uint64_t (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,unsigned char>::initialSearch;
          }
          else if ((_DWORD)v18 == 1)
          {
            v23 = WTF::AdaptiveStringSearcher<char16_t,unsigned char>::singleCharSearch;
          }
          else
          {
            v23 = (uint64_t (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,unsigned char>::linearSearch;
          }
        }
      }
      else if (v20)
      {
        v50 = v19;
        v51 = v12;
        v52 = v18;
        v54 = v22;
        if (v18 > 6)
        {
          v23 = (uint64_t (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,char16_t>::initialSearch;
        }
        else if ((_DWORD)v18 == 1)
        {
          v23 = (uint64_t (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,char16_t>::singleCharSearch;
        }
        else
        {
          v23 = (uint64_t (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<unsigned char,char16_t>::linearSearch;
        }
      }
      else
      {
        v50 = v19;
        v51 = v12;
        v52 = v18;
        v54 = v22;
        if (v18 > 6)
        {
          v23 = (uint64_t (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,char16_t>::initialSearch;
        }
        else if ((_DWORD)v18 == 1)
        {
          v23 = (uint64_t (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,char16_t>::singleCharSearch;
        }
        else
        {
          v23 = (uint64_t (*)(uint64_t, uint64_t, int, int))WTF::AdaptiveStringSearcher<char16_t,char16_t>::linearSearch;
        }
      }
      v53 = v23;
      LODWORD(result) = v23((uint64_t)&v50, (uint64_t)v15, v16, 0);
    }
  }
  else
  {
    LODWORD(result) = 0;
  }
  return result;
}

uint64_t operationStringIndexOfWithOneChar(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  unsigned int v11;
  uint64_t v12;
  int *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  char *i;
  int16x8_t v35;
  int16x8_t *v36;
  int8x16_t v37;
  int16x8_t *v38;
  char *v39;
  unint64_t v40;
  uint64_t vars0;

  v11 = a3;
  v12 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v12 + 40) = vars0;
  v13 = *(int **)(a2 + 8);
  if ((v13 & 1) == 0)
  {
    if (v13)
    {
LABEL_3:
      v14 = (char *)*((_QWORD *)v13 + 1);
      v15 = v13[1] | ((unint64_t)((v13[4] >> 2) & 1) << 32);
      goto LABEL_4;
    }
    goto LABEL_25;
  }
  if ((v13 & 2) == 0)
  {
    v13 = *JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
    if (v13)
      goto LABEL_3;
LABEL_25:
    v14 = 0;
    v15 = 0x100000000;
    goto LABEL_4;
  }
  v20 = *(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL;
  v21 = *(_QWORD *)(v20 + 8);
  if (!v21
    || (v22 = *(unsigned int *)(v21 + 4),
        v23 = *(_QWORD *)(a2 + 24),
        v24 = v23 >> 16,
        v22 <= (v23 >> 16)))
  {
    v14 = &str_77_5;
    v15 = 0x100000000;
    goto LABEL_4;
  }
  v25 = *(unsigned int *)(v21 + 16);
  v14 = *(char **)(v21 + 8);
  v26 = *(_DWORD *)(a2 + 16);
  if ((int)v22 - (int)v24 > v26 || (v26 = v22 - v24, (_DWORD)v24))
  {
    v27 = (v25 >> 2) & 1;
    v28 = (v23 >> 16);
    v15 = v26;
    v29 = v22 - v24;
    if ((_DWORD)v27)
    {
      if (v29 >= v26)
      {
        v14 += v28;
        v15 = v26 | 0x100000000;
        goto LABEL_4;
      }
LABEL_50:
      __break(1u);
LABEL_51:
      if ((v20 & 0x20) == 0)
      {
        v40 = v15;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v15 = v40;
      }
      goto LABEL_48;
    }
    if (v29 < v26)
      goto LABEL_50;
    v14 += 2 * v28;
  }
  else
  {
    v15 = v22 & 0xFFFFFFFEFFFFFFFFLL | (((v25 >> 2) & 1) << 32);
  }
LABEL_4:
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_5;
  LODWORD(v20) = *(_DWORD *)(v12 + 80);
  if ((v20 & 0x27) != 0)
    goto LABEL_51;
LABEL_48:
  if (*(_QWORD *)(v12 + 16))
    return 0;
LABEL_5:
  if ((v15 & 0x100000000) != 0)
  {
    if ((unsigned __int16)v11 <= 0xFFu && (_DWORD)v15)
    {
      v16 = 16;
      if (v15 < 0x10uLL)
        v16 = v15;
      v17 = v16;
      v18 = (unsigned __int8 *)v14;
      do
      {
        if (*v18 == v11)
          goto LABEL_30;
        ++v18;
        --v17;
      }
      while (v17);
      if (v15 >= 0x11uLL)
      {
        v18 = (unsigned __int8 *)memchr(&v14[v16], v11, v15 - v16);
        if (v18)
        {
LABEL_30:
          LODWORD(v30) = (_DWORD)v18 - (_DWORD)v14;
          return v30;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!(_DWORD)v15)
    return 0xFFFFFFFFLL;
  v31 = v15;
  v32 = (unsigned __int16 *)&v14[2 * v15];
  if (v31 > 0x1F)
  {
    v35 = vdupq_n_s16(v11);
    v36 = (int16x8_t *)v14;
    do
    {
      v37 = (int8x16_t)vceqq_s16(*v36, v35);
      LOWORD(a11) = vmaxvq_u16((uint16x8_t)v37);
      if (a11 != 0.0)
        goto LABEL_44;
      v38 = v36 + 1;
      v39 = &v36[1].i8[14];
      ++v36;
    }
    while (v39 < (char *)v32);
    if (v38 < (int16x8_t *)v32)
    {
      v37 = (int8x16_t)vceqq_s16(*((int16x8_t *)v32 - 1), v35);
      v35.i16[0] = vmaxvq_u16((uint16x8_t)v37);
      if (v35.i32[0])
      {
        v36 = (int16x8_t *)(v32 - 8);
LABEL_44:
        i = &v36->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v37))];
        goto LABEL_45;
      }
    }
    return 0xFFFFFFFFLL;
  }
  v33 = 2 * v31;
  result = 0xFFFFFFFFLL;
  for (i = v14; *(unsigned __int16 *)i != (unsigned __int16)v11; i += 2)
  {
    v33 -= 2;
    if (!v33)
      return result;
  }
LABEL_45:
  if (i == (char *)v32)
    return 0xFFFFFFFFLL;
  return ((i - v14) >> 1);
}

uint64_t operationStringIndexOfWithIndex(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  int v11;
  JSC::JSGlobalObject *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  char *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD var50[11];
  StringView v42;

  v11 = a4;
  v13 = (JSC::JSGlobalObject *)result;
  v14 = *(_QWORD *)(result + 56);
  *(_QWORD *)(v14 + 40) = var50[10];
  v15 = *(_QWORD *)(a2 + 8);
  if ((v15 & 1) == 0)
  {
    if (v15)
    {
LABEL_3:
      v16 = *(unsigned int *)(v15 + 16);
      v17 = *(char **)(v15 + 8);
      LODWORD(v15) = *(_DWORD *)(v15 + 4);
      v18 = (v16 >> 2) & 1;
LABEL_4:
      v19 = v15 | (unint64_t)(v18 << 32);
      goto LABEL_5;
    }
LABEL_42:
    v17 = 0;
    v18 = 1;
    goto LABEL_4;
  }
  if ((v15 & 2) == 0)
  {
    result = (uint64_t)JSC::JSRopeString::resolveRope(a2, (JSC::JSGlobalObject *)result, a3, a4, a9, a5, a6, a7, a8);
    v15 = *(_QWORD *)result;
    if (*(_QWORD *)result)
      goto LABEL_3;
    goto LABEL_42;
  }
  v26 = *(_QWORD *)((*(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL) + 8);
  if (v26
    && (v27 = *(unsigned int *)(v26 + 4),
        v28 = *(_QWORD *)(a2 + 24),
        v29 = v28 >> 16,
        v27 > (v28 >> 16)))
  {
    v30 = *(unsigned int *)(v26 + 16);
    v17 = *(char **)(v26 + 8);
    v31 = *(_DWORD *)(a2 + 16);
    if ((int)v27 - (int)v29 > v31 || (v31 = v27 - v29, (_DWORD)v29))
    {
      v32 = (v28 >> 16);
      v19 = v31;
      v33 = v27 - v29;
      if (((v30 >> 2) & 1) != 0)
      {
        if (v33 < v31)
          goto LABEL_56;
        v17 += v32;
        v19 = v31 | 0x100000000;
      }
      else
      {
        if (v33 < v31)
          goto LABEL_56;
        v17 += 2 * v32;
      }
    }
    else
    {
      v19 = v27 & 0xFFFFFFFEFFFFFFFFLL | (((v30 >> 2) & 1) << 32);
    }
  }
  else
  {
    v19 = 0x100000000;
    v17 = &str_77_5;
  }
LABEL_5:
  var50[0] = v17;
  var50[1] = v19;
  if (*(_DWORD *)(v14 + 80))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, a2, a3, a4, a5, a6, a7, a8);
    if ((_DWORD)result)
      return 0;
  }
  v20 = *(int **)(a3 + 8);
  if ((v20 & 1) != 0)
  {
    if ((v20 & 2) == 0)
    {
      v20 = *JSC::JSRopeString::resolveRope(a3, v13, a3, a4, a9, a5, a6, a7, a8);
      if (v20)
        goto LABEL_8;
LABEL_44:
      v21 = 0;
      v22 = 0x100000000;
      goto LABEL_9;
    }
    v34 = *(_QWORD *)((*(_QWORD *)(a3 + 20) & 0xFFFFFFFFFLL) + 8);
    if (v34)
    {
      v21 = *(char **)(v34 + 8);
      v35 = *(unsigned int *)(v34 + 4) | ((unint64_t)((*(_DWORD *)(v34 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v21 = 0;
      v35 = 0x100000000;
    }
    v36 = *(_QWORD *)(a3 + 24);
    v37 = v36 >> 16;
    if (v35 <= (v36 >> 16))
    {
      v22 = 0x100000000;
      v21 = &str_77_5;
      goto LABEL_9;
    }
    v38 = *(_DWORD *)(a3 + 16);
    if (v35 - (v36 >> 16) <= v38)
    {
      v38 = v35 - (v36 >> 16);
      if (!(_DWORD)v37)
      {
        v22 = v35;
        goto LABEL_9;
      }
    }
    v39 = (v36 >> 16);
    v22 = v38;
    v40 = v35 - (unint64_t)v37;
    if ((v35 & 0x100000000) != 0)
    {
      if (v40 >= v38)
      {
        v21 += v39;
        v22 = v38 | 0x100000000;
        goto LABEL_9;
      }
    }
    else if (v40 >= v38)
    {
      v21 += 2 * v39;
      goto LABEL_9;
    }
LABEL_56:
    __break(1u);
    return result;
  }
  if (!v20)
    goto LABEL_44;
LABEL_8:
  v21 = (char *)*((_QWORD *)v20 + 1);
  v22 = v20[1] | ((unint64_t)((v20[4] >> 2) & 1) << 32);
LABEL_9:
  if (*(_DWORD *)(v14 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v19 >= v11)
    v23 = v11;
  else
    v23 = v19;
  if (v11 >= 0)
    v24 = v23;
  else
    v24 = 0;
  if ((int)v24 + (int)v22 > v19)
    return 0xFFFFFFFFLL;
  v25 = *(_QWORD *)(v14 + 93360);
  if ((v25 & 1) != 0)
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 & 0xFFFFFFFFFFFFFFFCLL))(v14, v14 + 93360);
  v42.m_characters = (void *)v22;
  *(_QWORD *)&v42.m_length = v24;
  result = WTF::StringView::find((uint64_t)var50, v25, (unint64_t)v21, v42, *(double *)a9.i64, a10, a11);
  if (result == -1)
    return 0xFFFFFFFFLL;
  else
    return result;
}

uint64_t operationStringIndexOfWithIndexWithOneChar(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  unsigned __int16 v11;
  int v12;
  uint64_t v13;
  int *v14;
  char *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD var40[9];

  v11 = a4;
  v12 = a3;
  v13 = *(_QWORD *)(result + 56);
  *(_QWORD *)(v13 + 40) = var40[8];
  v14 = *(int **)(a2 + 8);
  if ((v14 & 1) == 0)
  {
    if (v14)
      goto LABEL_3;
LABEL_26:
    v15 = 0;
    v16 = 0x100000000;
    goto LABEL_4;
  }
  if ((v14 & 2) != 0)
  {
    v19 = *(_QWORD *)((*(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL) + 8);
    if (v19)
    {
      v15 = *(char **)(v19 + 8);
      v20 = *(unsigned int *)(v19 + 4) | ((unint64_t)((*(_DWORD *)(v19 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v15 = 0;
      v20 = 0x100000000;
    }
    v21 = *(_QWORD *)(a2 + 24);
    v22 = v21 >> 16;
    if (v20 <= (v21 >> 16))
    {
      v16 = 0x100000000;
      v15 = &str_77_5;
      goto LABEL_4;
    }
    v23 = *(_DWORD *)(a2 + 16);
    if (v20 - (v21 >> 16) <= v23)
    {
      v23 = v20 - (v21 >> 16);
      if (!(_DWORD)v22)
      {
        v16 = v20;
        goto LABEL_4;
      }
    }
    v24 = (v21 >> 16);
    v16 = v23;
    v25 = v20 - (unint64_t)v22;
    if ((v20 & 0x100000000) != 0)
    {
      if (v25 >= v23)
      {
        v15 += v24;
        v16 = v23 | 0x100000000;
        goto LABEL_4;
      }
    }
    else if (v25 >= v23)
    {
      v15 += 2 * v24;
      goto LABEL_4;
    }
    __break(1u);
    return result;
  }
  v14 = *JSC::JSRopeString::resolveRope(a2, (JSC::JSGlobalObject *)result, a3, a4, a9, a5, a6, a7, a8);
  if (!v14)
    goto LABEL_26;
LABEL_3:
  v15 = (char *)*((_QWORD *)v14 + 1);
  v16 = v14[1] | ((unint64_t)((v14[4] >> 2) & 1) << 32);
LABEL_4:
  var40[0] = v15;
  var40[1] = v16;
  if (*(_DWORD *)(v13 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v16 >= v12)
    v17 = v12;
  else
    v17 = v16;
  if (v12 >= 0)
    v18 = v17;
  else
    v18 = 0;
  if (v18 >= v16)
    return 0xFFFFFFFFLL;
  result = WTF::StringView::find((uint64_t)var40, v11, v18, *(double *)a9.i64, a10, a11);
  if (result == -1)
    return 0xFFFFFFFFLL;
  else
    return result;
}

uint64_t operationInt32ToString(unint64_t a1, JSC::VM *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v10;
  unint64_t v11;
  JSC::Heap **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD *);
  _QWORD *v37;
  WTF::StringImpl *v38;
  _QWORD var38[8];

  v8 = *(JSC::VM **)(a1 + 56);
  *((_QWORD *)v8 + 5) = var38[7];
  if (((_DWORD)a3 - 37) > 0xFFFFFFDC)
    return JSC::int32ToString((uint64_t)v8, a2, a3, a4, a5, a6, a7, a8);
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x3200000002;
  *(_QWORD *)(v10 + 8) = "toString() radix argument must be between 2 and 36";
  *(_DWORD *)(v10 + 16) = 4;
  v38 = (WTF::StringImpl *)v10;
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(JSC::Heap ***)(a1 + 56);
  if ((v11 & 1) != 0)
  {
    v36 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v37 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v37 = (_QWORD *)(a1 - 16);
    var38[0] = *v37;
    var38[1] = a1;
    var38[2] = a1 + 128;
    v11 = v36(var38);
  }
  v13 = JSC::ErrorInstance::create(v12, v11, &v38, 0, 0, 0, 2, 1);
  JSC::VM::throwException(v8, (JSC::JSGlobalObject *)a1, v13, v14, v15, v16, v17, v18);
  v26 = v38;
  v38 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  return 0;
}

size_t operationInt52ToString(unint64_t a1, int64_t a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v8;
  uint64_t v10;
  unint64_t v11;
  JSC::Heap **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD *);
  _QWORD *v37;
  WTF::StringImpl *v38;
  _QWORD var38[8];

  v8 = *(JSC **)(a1 + 56);
  *((_QWORD *)v8 + 5) = var38[7];
  if (((_DWORD)a3 - 37) > 0xFFFFFFDC)
    return JSC::int52ToString(v8, a2, a3, a4, a5, a6, a7, a8);
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x3200000002;
  *(_QWORD *)(v10 + 8) = "toString() radix argument must be between 2 and 36";
  *(_DWORD *)(v10 + 16) = 4;
  v38 = (WTF::StringImpl *)v10;
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(JSC::Heap ***)(a1 + 56);
  if ((v11 & 1) != 0)
  {
    v36 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v37 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v37 = (_QWORD *)(a1 - 16);
    var38[0] = *v37;
    var38[1] = a1;
    var38[2] = a1 + 128;
    v11 = v36(var38);
  }
  v13 = JSC::ErrorInstance::create(v12, v11, &v38, 0, 0, 0, 2, 1);
  JSC::VM::throwException(v8, (JSC::JSGlobalObject *)a1, v13, v14, v15, v16, v17, v18);
  v26 = v38;
  v38 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  return 0;
}

uint64_t operationDoubleToString(unint64_t a1, JSC::VM *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC *v9;
  uint64_t v11;
  unint64_t v12;
  JSC::Heap **v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD *);
  _QWORD *v38;
  WTF::StringImpl *v39;
  _QWORD var38[8];

  v9 = *(JSC **)(a1 + 56);
  *((_QWORD *)v9 + 5) = var38[7];
  if (((_DWORD)a2 - 37) > 0xFFFFFFDC)
    return JSC::numberToString(v9, a2, a9, a3, a4, a5, a6, a7, a8);
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x3200000002;
  *(_QWORD *)(v11 + 8) = "toString() radix argument must be between 2 and 36";
  *(_DWORD *)(v11 + 16) = 4;
  v39 = (WTF::StringImpl *)v11;
  v12 = *(_QWORD *)(a1 + 128);
  v13 = *(JSC::Heap ***)(a1 + 56);
  if ((v12 & 1) != 0)
  {
    v37 = *(uint64_t (**)(_QWORD *))(v12 & 0xFFFFFFFFFFFFFFFCLL);
    v38 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v38 = (_QWORD *)(a1 - 16);
    var38[0] = *v38;
    var38[1] = a1;
    var38[2] = a1 + 128;
    v12 = v37(var38);
  }
  v14 = JSC::ErrorInstance::create(v13, v12, &v39, 0, 0, 0, 2, 1);
  JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a1, v14, v15, v16, v17, v18, v19);
  v27 = v39;
  v39 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  return 0;
}

uint64_t operationInt32ToStringWithValidRadix(uint64_t result, WTF::String *this, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t SlowCase;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t *v27;
  int v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  int *v52;
  _BYTE *v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *var68[14];

  v8 = this;
  var68[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(result + 56);
  *(WTF::StringImpl **)(v9 + 40) = var68[13];
  if ((_DWORD)a3 != 10)
  {
    if (this < a3)
      return *(_QWORD *)(v9 + 8 * JSC::radixDigits[(int)this] + 42216);
LABEL_50:
    JSC::toStringWithRadixInternal(var68, (int)this, a3);
    SlowCase = JSC::jsNontrivialString(v9, (JSC::VM *)var68, v65, v66, v67, v68, v69, v70);
    v78 = var68[0];
    var68[0] = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
      {
        WTF::StringImpl::~StringImpl(v78, v71, v72, v73, v74, v75, v76, v77);
        WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
      }
      else
      {
        *(_DWORD *)v78 -= 2;
      }
    }
    return SlowCase;
  }
  if (this > 0xFF)
  {
    v10 = v9 + 48368;
    v11 = 9 * ((~((_DWORD)this << 15) + (_DWORD)this) ^ ((~((_DWORD)this << 15) + (_DWORD)this) >> 10));
    v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
    v13 = (v12 ^ BYTE2(v12));
    v14 = (_DWORD *)(v9 + 48368 + 24 * (v12 ^ BYTE2(v12)));
    if (*v14 == (_DWORD)this)
    {
      v15 = *(WTF::StringImpl **)(v10 + 24 * (v12 ^ BYTE2(v12)) + 8);
      if (v15)
      {
        SlowCase = *(_QWORD *)(v10 + 24 * v13 + 16);
        if (SlowCase)
          return SlowCase;
LABEL_16:
        v27 = (uint64_t *)(v9 + 39696);
        *(_DWORD *)v15 += 2;
        v28 = *((_DWORD *)v15 + 4);
        v29 = v15;
        if ((v28 & 3) == 2)
        {
          v29 = v15;
          do
          {
            v29 = (WTF::StringImpl *)*((_QWORD *)v29 + 3);
            v28 = *((_DWORD *)v29 + 4);
          }
          while ((v28 & 3) == 2);
        }
        if ((v28 & 8) != 0)
        {
          v30 = 0;
        }
        else
        {
          *((_DWORD *)v29 + 4) = v28 | 8;
          v30 = (unint64_t)*((unsigned int *)v29 + 1) << ((v28 & 4) == 0);
        }
        v31 = v9 + 192;
        SlowCase = *v27;
        if ((unint64_t)*v27 >= *(_QWORD *)(v9 + 39704))
        {
          v63 = v15;
          SlowCase = *(_QWORD *)(v9 + 39712);
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM((JSC *)v9, this, (uint64_t)a3, a4, a5, a6, a7, a8);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v9 + 39672, v9 + 192, 16, 0, 0, v79, v80, v81);
          }
          else
          {
            v64 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v9 + 39720);
            *(_QWORD *)(v9 + 39704) = SlowCase + HIDWORD(v64);
            *(_QWORD *)(v9 + 39712) = SlowCase + (int)v64;
            *v27 = SlowCase + 16;
          }
          v31 = v9 + 192;
          v15 = v63;
        }
        else
        {
          *v27 = SlowCase + 16;
        }
        *(_DWORD *)SlowCase = *(_QWORD *)(v9 + 41512) >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        *(_QWORD *)(SlowCase + 8) = v15;
        if (*(_BYTE *)(v9 + 755))
          __dmb(0xAu);
        if (v30 >= 0x101)
          JSC::Heap::reportExtraMemoryAllocatedSlowCase(v31, 0, SlowCase, v30, a5, a6, a7, a8);
        *(_QWORD *)(v10 + 24 * v13 + 16) = SlowCase;
        return SlowCase;
      }
    }
    *v14 = (_DWORD)this;
    WTF::String::number((unint64_t)this, (uint64_t *)var68);
    v21 = v10 + 24 * v13;
    v22 = var68[0];
    var68[0] = 0;
    v25 = *(WTF::StringImpl **)(v21 + 8);
    v24 = (WTF::StringImpl **)(v21 + 8);
    v23 = v25;
    *v24 = v22;
    if (v25)
    {
      v26 = *(_DWORD *)v23 - 2;
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, this, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
        v23 = var68[0];
        var68[0] = 0;
        if (!v23)
          goto LABEL_15;
        v26 = *(_DWORD *)v23 - 2;
        if (*(_DWORD *)v23 == 2)
        {
          WTF::StringImpl::~StringImpl(v23, this, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
          goto LABEL_15;
        }
      }
      *(_DWORD *)v23 = v26;
    }
LABEL_15:
    v15 = *v24;
    goto LABEL_16;
  }
  v17 = (JSC::VM *)(v9 + 44272 + 16 * this);
  if (*(_QWORD *)v17)
  {
LABEL_8:
    v18 = v9 + 44272 + 16 * v8;
    v20 = *(_QWORD *)(v18 + 8);
    v19 = (uint64_t *)(v18 + 8);
    SlowCase = v20;
    if (!v20)
    {
      SlowCase = JSC::jsNontrivialString((JSC *)v9, v17, a3, a4, a5, a6, a7, a8);
      *v19 = SlowCase;
    }
    return SlowCase;
  }
  v48 = 0;
  v49 = this;
  do
  {
    v50 = (v49 % 0xA) | 0x30;
    *((_BYTE *)&var68[1] + v48-- + 4) = (v49 % 0xA) | 0x30;
    v51 = v49 > 9;
    v49 /= 0xAu;
  }
  while (v51);
  if (v48 + 14 >= 15)
  {
    __break(1u);
    goto LABEL_50;
  }
  if (!v48)
  {
    v52 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_37;
  }
  if (!((unint64_t)-v48 >> 31))
  {
    v52 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v48));
    v53 = v52 + 5;
    *v52 = 2;
    v52[1] = -(int)v48;
    *((_QWORD *)v52 + 1) = v52 + 5;
    v52[4] = 4;
    if (v48 == -1)
      *v53 = v50;
    else
      memcpy(v53, (char *)&var68[1] + v48 + 5, -v48);
LABEL_37:
    v54 = *(WTF::StringImpl **)v17;
    *(_QWORD *)v17 = v52;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::~StringImpl(v54, this, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
    }
    goto LABEL_8;
  }
  __break(0xC471u);
  return result;
}

size_t operationInt52ToStringWithValidRadix(uint64_t a1, int64_t a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v8;
  uint64_t vars0;

  v8 = *(JSC **)(a1 + 56);
  *((_QWORD *)v8 + 5) = vars0;
  return JSC::int52ToString(v8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t operationDoubleToStringWithValidRadix(uint64_t a1, JSC::VM *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC *v9;
  uint64_t vars0;

  v9 = *(JSC **)(a1 + 56);
  *((_QWORD *)v9 + 5) = vars0;
  return JSC::numberToString(v9, a2, a9, a3, a4, a5, a6, a7, a8);
}

unint64_t operationFunctionToString(JSC::JSGlobalObject *a1, JSC::JSFunction *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  return JSC::JSFunction::toString(a2, a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t operationFunctionBind(JSC::VM **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  JSC::VM *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  int v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  unsigned __int16 *v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  BOOL v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned int v78;
  JSC::VM *v79;
  JSC::JSObject *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD var88[18];

  var88[3] = *MEMORY[0x1E0C80C00];
  v10 = a1[7];
  *((_QWORD *)v10 + 5) = var88[17];
  v79 = v10;
  v11 = *(unsigned __int8 *)(a2 + 5);
  if (v11 < 0x17
    || (v12 = a6, v13 = a5, v14 = a4, v15 = a3, (v11 & 0xFE) != 0x1A)
    && ((*(_BYTE *)(a2 + 6) & 4) == 0
     || ((*(void (**)(JSC::JSObject **__return_ptr, uint64_t))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0x38))(&v80, a2), !(_BYTE)v80)))
  {
    JSC::throwTypeError((unint64_t)a1, &v79, (uint64_t)"|this| is not a function inside Function.prototype.bind", 56);
    return 0;
  }
  v18 = v14 != 0;
  if (v13)
    ++v18;
  if (v12)
    v19 = v18 + 1;
  else
    v19 = v18;
  var88[0] = v14;
  var88[1] = v13;
  var88[2] = v12;
  if ((_DWORD)v19)
    v20 = (char *)var88;
  else
    v20 = 0;
  if ((_DWORD)v19)
    v21 = v19;
  else
    v21 = 0;
  if (*(_BYTE *)(a2 + 5) != 26
    || ((v22 = *(_QWORD *)(a2 + 24), (v22 & 1) != 0)
      ? (v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 48))
      : (v23 = *(_QWORD *)(a2 + 24)),
        *(_BYTE *)(v23 + 5) == 8
     && &JSC::JSBoundFunction::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C))))
  {
LABEL_27:
    v27 = *(_QWORD *)(*((_QWORD *)v10 + 5244) + 1768);
    v82 = 0xFFFFFFFF00000000;
    v84 = 0;
    v85 = 0;
    v83 = a2;
    v86 = 0x20000;
    v87 = 0;
    LOBYTE(v88) = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v28 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
    v29 = *(uint64_t (**)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(16 * *(unsigned int *)(v28 + 0x4C) + 0x68);
    if (v29 != JSC::JSObject::getOwnPropertySlot)
    {
      LODWORD(v27) = ((uint64_t (*)(uint64_t, JSC::VM **, unint64_t, JSC::JSObject **))v29)(a2, a1, v27, &v80);
      goto LABEL_38;
    }
    v30 = a1[7];
    if (!(v27 >> 4)
      || ((v27 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x20)) != 0
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), a1[7], a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v31)|| (v92 = v27, v32 = JSC::PropertyTable::get(v31, (uint64_t *)&v92), a6 = v32, (_DWORD)v32 == -1))
    {
      if ((*(_BYTE *)(a2 + 6) & 0x20) == 0
        || (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a2, v30, v27, (uint64_t)&v80) & 1) == 0)
      {
        v36 = (uint64_t *)((char *)v10 + 41952);
        if (v27)
        {
          v37 = *(_DWORD *)(v27 + 16);
          if ((v37 & 0x20) != 0)
            goto LABEL_48;
          v38 = *(_BYTE **)(v27 + 8);
          v39 = *(unsigned int *)(v27 + 4);
          if ((v37 & 4) != 0)
          {
            if (!(_DWORD)v39
              || (v72 = *v38 - 48, v72 > 9)
              || (v39 >= 2 ? (v75 = *v38 == 48) : (v75 = 0), v75))
            {
LABEL_107:
              v41 = 0;
              v73 = 0;
              v74 = 0;
            }
            else
            {
              v76 = v38 + 1;
              v77 = v39 - 1;
              while (v77)
              {
                if (v72 > 0x19999999)
                  goto LABEL_107;
                v78 = *v76 - 48;
                if (v78 > 9)
                  goto LABEL_107;
                v41 = 0;
                v73 = 0;
                v74 = 0;
                v67 = __CFADD__(v78, 10 * v72);
                v72 = v78 + 10 * v72;
                ++v76;
                --v77;
                if (v67)
                  goto LABEL_108;
              }
              v41 = 0x100000000;
              if (v72 == -1)
              {
                v41 = 0;
                v73 = 0;
              }
              else
              {
                v73 = v72;
              }
              v74 = v72 == -1 ? 0 : v72 & 0xFFFFFF00;
            }
LABEL_108:
            a3 = v74 | v73;
            v36 = (uint64_t *)((char *)v10 + 41952);
          }
          else
          {
            if (!(_DWORD)v39
              || (v40 = *(unsigned __int16 *)v38 - 48, v40 > 9)
              || (*(_WORD *)v38 == 48 ? (v63 = v39 > 1) : (v63 = 0), v63))
            {
LABEL_45:
              v41 = 0;
              v42 = 0;
              v43 = 0;
            }
            else
            {
              v64 = (unsigned __int16 *)(v38 + 2);
              v65 = v39 - 1;
              while (v65)
              {
                if (v40 > 0x19999999)
                  goto LABEL_45;
                v66 = *v64 - 48;
                if (v66 > 9)
                  goto LABEL_45;
                v41 = 0;
                v42 = 0;
                v43 = 0;
                v67 = __CFADD__(v66, 10 * v40);
                v40 = v66 + 10 * v40;
                ++v64;
                --v65;
                if (v67)
                  goto LABEL_46;
              }
              v41 = 0x100000000;
              if (v40 == -1)
              {
                v41 = 0;
                v42 = 0;
              }
              else
              {
                v42 = v40;
              }
              v43 = v40 == -1 ? 0 : v40 & 0xFFFFFF00;
            }
LABEL_46:
            a3 = v43 | v42;
          }
          if ((v41 & 0x100000000) != 0)
            LODWORD(v27) = JSC::JSObject::getOwnPropertySlotByIndex(a2, (uint64_t)a1, (const WTF::StringImpl *)a3, (uint64_t)&v80, a5, a6, a7, a8);
          else
LABEL_48:
            LODWORD(v27) = 0;
        }
        goto LABEL_49;
      }
    }
    else
    {
      a5 = HIDWORD(v32);
      if ((int)v32 <= 63)
      {
        v33 = a2 + 16;
        v34 = v32 << 32;
      }
      else
      {
        v33 = *(_QWORD *)(a2 + 8) - 8;
        v34 = 0x3F00000000 - (v32 << 32);
      }
      a4 = *(_QWORD *)(v33 + (v34 >> 29));
      if ((a4 & 0xFFFE000000000002) != 0)
      {
LABEL_37:
        v80 = (JSC::JSObject *)a4;
        v84 = a2;
        v82 = __PAIR64__(v32, HIDWORD(v32));
        LODWORD(v27) = 1;
        LOWORD(v86) = 257;
LABEL_38:
        v36 = (uint64_t *)((char *)v10 + 41952);
LABEL_49:
        if (v89)
        {
          v44 = *(_DWORD *)(v88 + 4);
          if (!v44)
          {
            __break(0xC471u);
            JUMPOUT(0x1984A6E24);
          }
          *(_DWORD *)(v88 + 4) = v44 - 1;
        }
        if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, a2, a3, a4, a5, a6, a7, a8))
          return 0;
        v45 = *v36;
        v25 = 0.0;
        if ((_DWORD)v27)
        {
          v80 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)a2, (uint64_t)a1, *(_QWORD *)(v45 + 1768), a4, a5, a6, a7, a8);
          if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v46, v47, v48, v49, v50, v51, v52))
            return 0;
          v56 = JSC::JSValue::toIntegerOrInfinity(&v80, (JSC::JSGlobalObject *)a1, v47, v48, v49, v50, v51, v52, v53);
          if (*((_DWORD *)v10 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, v54, v55, a4, a5, a6, a7, a8))
              return 0;
          }
          if (v56 <= (double)v19)
            v25 = 0.0;
          else
            v25 = v56 - (double)v19;
          v45 = *v36;
        }
        v24 = JSC::JSObject::get((unsigned int *)a2, (uint64_t)a1, *(_QWORD *)(v45 + 1968), a4, a5, a6, a7, a8);
        if (!*((_DWORD *)v10 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v10, v57, v58, v59, v60, v61, v62, a8))
        {
          if ((v24 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v24 + 5) != 2)
            v24 = v36[2];
          goto LABEL_24;
        }
        return 0;
      }
      v35 = *(unsigned __int8 *)(a4 + 5);
      if (v35 != 5)
      {
        if (v35 == 6)
        {
          v68 = *(_DWORD *)(v28 + 16) & 3;
          v69 = *(_QWORD *)(a4 + 16);
          if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
          {
            v71 = *(_QWORD *)(a4 + 24);
            v70 = *(_QWORD *)(a4 + 32);
            v80 = *(JSC::JSObject **)(a4 + 8);
            v81 = v69;
            LODWORD(v82) = HIDWORD(v32);
            v84 = a2;
            BYTE1(v86) = 3;
            LODWORD(v27) = 1;
            if (v68 != 2)
              LOBYTE(v86) = 1;
            HIBYTE(v86) = 1;
            v90 = v71;
            v91 = v70;
          }
          else
          {
            v80 = *(JSC::JSObject **)(a4 + 8);
            v81 = v69;
            LODWORD(v82) = HIDWORD(v32);
            v84 = a2;
            LODWORD(v27) = 1;
            BYTE1(v86) = 3;
            if (v68 != 2)
              LOBYTE(v86) = 1;
          }
          goto LABEL_38;
        }
        goto LABEL_37;
      }
      JSC::JSObject::fillGetterPropertySlot((unsigned int *)a2, (uint64_t)v30, (uint64_t)&v80, a4, SHIDWORD(v32), v32);
    }
    LODWORD(v27) = 1;
    goto LABEL_38;
  }
  v24 = 0;
  v25 = NAN;
  if ((v22 & 1) != 0)
  {
    v26 = v22 & 0xFFFFFFFFFFFFFFFELL;
    if (v26)
    {
      if ((*(_BYTE *)(v26 + 64) & 0xC) != 0)
        goto LABEL_27;
      v24 = 0;
      v25 = NAN;
    }
  }
LABEL_24:
  *(double *)a9.i64 = v25;
  return JSC::JSBoundFunction::create(v10, (unint64_t)a1, (JSC::ExecutableBase *)a2, v15, v20, v21, v24, a8, a9);
}

double JSC::JSValue::toIntegerOrInfinity(JSC::JSObject **this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v11;
  double v12;

  v9 = *this;
  if ((unint64_t)*this >= 0xFFFE000000000000)
    return (double)(int)v9;
  v11 = (unint64_t)v9 - 0x2000000000000;
  if (v11 > 0xFFFBFFFFFFFFFFFFLL)
    JSC::JSValue::toNumberSlowCase(this, a2, a3, a4, a5, a6, a7, a8, a9);
  else
    v12 = *(double *)&v11;
  return trunc(v12 + 0.0);
}

uint64_t operationNewBoundFunction(WTF::AtomStringImpl *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t vars0;

  v8 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v8 + 40) = vars0;
  v9 = a4 != 0;
  if (a5)
    ++v9;
  if (a6)
    v10 = v9 + 1;
  else
    v10 = v9;
  return JSC::JSBoundFunction::createRaw(v8, a1, a2, v10, a3, a4, a5, a6);
}

uint64_t operationSingleCharacterString(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *var18[4];

  *(WTF::StringImpl **)(a1 + 40) = var18[3];
  if (a2 <= 0xFFu)
    return *(_QWORD *)(a1 + 8 * a2 + 42216);
  v6 = WTF::fastCompactMalloc((WTF *)0x16);
  *(_QWORD *)v6 = 0x100000002;
  *(_WORD *)(v6 + 20) = a2;
  *(_QWORD *)(v6 + 8) = v6 + 20;
  *(_DWORD *)(v6 + 16) = 0;
  var18[0] = (WTF::StringImpl *)v6;
  v4 = JSC::JSString::create(a1, (JSC::VM *)var18, v7, v8, v9, v10, v11, v12);
  v20 = var18[0];
  var18[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  return v4;
}

unint64_t operationNewSymbol(JSC::Symbol *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  return JSC::Symbol::create(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t operationNewSymbolWithStringDescription(JSC::JSGlobalObject *a1, unint64_t a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  int **v11;
  char v12;
  int v14;
  int **v15;
  uint64_t vars0;

  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v10 + 40) = vars0;
  v12 = *(_BYTE *)(a2 + 8);
  v11 = (int **)(a2 + 8);
  if ((v12 & 1) != 0)
    v11 = JSC::JSRopeString::resolveRope(a2, a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (!*(_DWORD *)(v10 + 80))
    return JSC::Symbol::createWithDescription((JSC::Symbol *)v10, (JSC::VM *)v11, a3, a4, a5, a6, a7, a8);
  v14 = *(_DWORD *)(v10 + 80);
  if ((v14 & 0x27) != 0 && (v14 & 0x20) == 0)
  {
    v15 = v11;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v11 = v15;
  }
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::Symbol::createWithDescription((JSC::Symbol *)v10, (JSC::VM *)v11, a3, a4, a5, a6, a7, a8);
}

unint64_t operationNewSymbolWithDescription(WTF::AtomStringImpl *a1, unint64_t a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  WTF::AtomStringImpl *v12;
  int *v13;
  WTF::StringImpl *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  _QWORD var28[6];

  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v10 + 40) = var28[5];
  var28[0] = a2;
  if (a2 == 10)
    return JSC::Symbol::create((JSC::Symbol *)v10, (JSC::VM *)0xA, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = a1;
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 2)
  {
    v13 = *(int **)(a2 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *JSC::JSRopeString::resolveRope(a2, a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (!v13)
        goto LABEL_8;
    }
    else if (!v13)
    {
LABEL_8:
      v25 = (WTF::StringImpl *)v13;
      goto LABEL_9;
    }
    *v13 += 2;
    goto LABEL_8;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)var28, a1, a3, a4, a5, a6, a7, a8, (int **)&v25);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_10;
LABEL_9:
  v24 = *(_DWORD *)(v10 + 80);
  if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    v11 = 0;
  else
LABEL_10:
    v11 = JSC::Symbol::createWithDescription((JSC::Symbol *)v10, (JSC::VM *)&v25, a3, a4, a5, a6, a7, a8);
  v14 = v25;
  v25 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v12, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return v11;
}

unint64_t operationNewStringObject(JSC *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t SlowCase;
  unint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  JSC *v21;
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  v8 = (uint64_t)a1 + 192;
  v9 = *((_QWORD *)a1 + 4973);
  if (v9 < *((_QWORD *)a1 + 4974))
    goto LABEL_2;
  v9 = *((_QWORD *)a1 + 4975);
  if ((v9 & 1) == 0)
  {
    v12 = *(_QWORD *)(v9 + 8) ^ *((_QWORD *)a1 + 4976);
    *((_QWORD *)a1 + 4974) = v9 + HIDWORD(v12);
    *((_QWORD *)a1 + 4975) = v9 + (int)v12;
LABEL_2:
    *((_QWORD *)a1 + 4973) = v9 + 32;
    goto LABEL_3;
  }
  v13 = (uint64_t)a1 + 39760;
  v20 = (uint64_t)a1 + 192;
  v21 = a1;
  v18 = a3;
  v19 = a2;
  JSC::sanitizeStackForVM(a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v13, v20, 32, 0, 0, v14, v15, v16);
  a3 = v18;
  a2 = v19;
  v9 = SlowCase;
  v8 = v20;
  a1 = v21;
LABEL_3:
  *(_DWORD *)v9 = 0;
  v10 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v9 = a3 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v9 + 16) = a2;
  if (a2
    && ((unint64_t)a2 & 0xFFFE000000000002) == 0
    && *((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(v9 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v8, v9);
  }
  return v9;
}

unsigned __int8 *operationToStringOnCell(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unsigned __int8 *var18[4];

  *(unsigned __int8 **)(*(_QWORD *)(a1 + 56) + 40) = var18[3];
  var18[0] = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return JSC::JSValue::toStringSlowCase(var18, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v8 = a2;
  if (a2[5] != 2)
    return JSC::JSValue::toStringSlowCase(var18, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  return v8;
}

unsigned __int8 *operationToString(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unsigned __int8 *var18[4];

  *(unsigned __int8 **)(*(_QWORD *)(a1 + 56) + 40) = var18[3];
  var18[0] = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return JSC::JSValue::toStringSlowCase(var18, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v8 = a2;
  if (a2[5] != 2)
    return JSC::JSValue::toStringSlowCase(var18, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  return v8;
}

unsigned __int8 *operationCallStringConstructorOnCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::stringConstructor(a1, a2, a3, a4, a5, a6, a7, a8);
}

unsigned __int8 *operationCallStringConstructor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::stringConstructor(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t operationMakeRope2(JSC::JSGlobalObject *a1, unint64_t a2, int *a3, JSC::JSString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSRopeString *v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  _BOOL4 v16;
  _QWORD var18[4];

  v8 = (JSC::JSRopeString *)*((_QWORD *)a1 + 7);
  *((_QWORD *)v8 + 5) = var18[3];
  var18[0] = v8;
  v9 = *(_QWORD *)(a2 + 8);
  if ((v9 & 1) != 0)
    v10 = (int *)(a2 + 16);
  else
    v10 = (int *)(v9 + 4);
  v11 = *v10;
  if (v11)
  {
    v12 = *((_QWORD *)a3 + 1);
    if ((v12 & 1) != 0)
      v13 = a3 + 4;
    else
      v13 = (int *)(v12 + 4);
    v14 = *v13;
    if (v14)
    {
      v15 = v14 | v11;
      v16 = __OFADD__(v11, v14);
      if (v15 < 0 || v16)
      {
        JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)var18);
        return 0;
      }
      else
      {
        return JSC::JSRopeString::create(v8, a2, (JSC::JSString *)a3, a4, a5, a6, a7, a8);
      }
    }
    else
    {
      return a2;
    }
  }
  return (uint64_t)a3;
}

unint64_t operationMakeRope3(JSC::JSGlobalObject *a1, int *a2, int *a3, int *a4, JSC::JSString *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSRopeString *v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  uint64_t v24;
  int *v25;
  int v26;
  int v27;
  _BOOL4 v28;
  unint64_t OutOfMemoryError;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  JSC::Exception *v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  int *v41;
  int v42;
  int v43;
  _BOOL4 v44;
  JSC::JSRopeString *v45;
  int v46;
  _BOOL4 v47;
  _QWORD var18[4];

  v9 = (JSC::JSRopeString *)*((_QWORD *)a1 + 7);
  *((_QWORD *)v9 + 5) = var18[3];
  v10 = *((_QWORD *)a2 + 1);
  if ((v10 & 1) != 0)
    v11 = a2 + 4;
  else
    v11 = (int *)(v10 + 4);
  v12 = *v11;
  if (v12)
  {
    v13 = *((_QWORD *)a3 + 1);
    if ((v13 & 1) != 0)
      v14 = a3 + 4;
    else
      v14 = (int *)(v13 + 4);
    v15 = *v14;
    if (v15)
    {
      v16 = *((_QWORD *)a4 + 1);
      if ((v16 & 1) != 0)
        v17 = a4 + 4;
      else
        v17 = (int *)(v16 + 4);
      v18 = *v17;
      if (v18)
      {
        if (((v18 | v15) & 0x80000000) == 0)
        {
          v19 = __OFADD__(v15, v18);
          v20 = v15 + v18;
          v21 = v19;
          if ((v12 & 0x80000000) == 0 && !v21 && !__OFADD__(v12, v20))
            return JSC::JSRopeString::create(v9, (unint64_t)a2, (JSC::JSString *)a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, (JSC::JSGlobalObject *)a2);
        v36 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v36 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)OutOfMemoryError, 0, v30, v31, v32, v33, v34);
        }
        JSC::VM::throwException(v9, a1, v36, v35, v30, v31, v32, v33, v34);
        return 0;
      }
      var18[0] = v9;
      v46 = v15 | v12;
      v47 = __OFADD__(v12, v15);
      if ((v46 & 0x80000000) == 0 && !v47)
      {
        v45 = v9;
        return JSC::JSRopeString::create(v45, (unint64_t)a2, (JSC::JSString *)a3, (JSC::JSString *)a4, (uint64_t)a5, a6, a7, a8);
      }
      goto LABEL_62;
    }
    var18[0] = v9;
    v24 = *((_QWORD *)a4 + 1);
    if ((v24 & 1) != 0)
      v25 = a4 + 4;
    else
      v25 = (int *)(v24 + 4);
    v26 = *v25;
    if (v26)
    {
      v27 = v26 | v12;
      v28 = __OFADD__(v12, v26);
      if (v27 < 0 || v28)
      {
        JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)var18);
        return 0;
      }
      else
      {
        return JSC::JSRopeString::create(v9, (unint64_t)a2, (JSC::JSString *)a4, (JSC::JSString *)a4, (uint64_t)a5, a6, a7, a8);
      }
    }
    return (unint64_t)a2;
  }
  else
  {
    var18[0] = v9;
    v37 = *((_QWORD *)a3 + 1);
    if ((v37 & 1) != 0)
      v38 = a3 + 4;
    else
      v38 = (int *)(v37 + 4);
    v39 = *v38;
    if (v39)
    {
      v40 = *((_QWORD *)a4 + 1);
      if ((v40 & 1) != 0)
        v41 = a4 + 4;
      else
        v41 = (int *)(v40 + 4);
      v42 = *v41;
      if (!v42)
        return (unint64_t)a3;
      v43 = v42 | v39;
      v44 = __OFADD__(v39, v42);
      if ((v43 & 0x80000000) == 0 && !v44)
      {
        v45 = v9;
        a2 = a3;
        a3 = a4;
        return JSC::JSRopeString::create(v45, (unint64_t)a2, (JSC::JSString *)a3, (JSC::JSString *)a4, (uint64_t)a5, a6, a7, a8);
      }
LABEL_62:
      JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)var18);
      return 0;
    }
  }
  return (unint64_t)a4;
}

uint64_t operationStrCat2(JSC::JSRopeString **a1, unsigned __int8 *a2, uint64_t a3, JSC::JSString *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::JSRopeString *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  _BOOL4 v19;
  int v21;
  int v22;
  JSC::VM *v23;
  unint64_t OutOfMemoryError;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  JSC::Exception *v31;
  unsigned __int8 *var38[8];

  v8 = a3;
  v10 = a1[7];
  *((unsigned __int8 **)v10 + 5) = var38[7];
  var38[0] = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0 || (v11 = a2, a2[5] != 2))
    v11 = JSC::JSValue::toStringSlowCase(var38, (uint64_t)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  if (*((_DWORD *)v10 + 20))
  {
    v21 = *((_DWORD *)v10 + 20);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::JSRopeString *)((char *)v10 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    a2 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
    if (a2)
      return 0;
  }
  var38[0] = (unsigned __int8 *)v8;
  if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    v8 = (unint64_t)JSC::JSValue::toStringSlowCase(var38, (uint64_t)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  if (*((_DWORD *)v10 + 20))
  {
    v22 = *((_DWORD *)v10 + 20);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::JSRopeString *)((char *)v10 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    a2 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
    if (a2)
      return 0;
  }
  v12 = *((_QWORD *)v11 + 1);
  if ((v12 & 1) != 0)
    v13 = (int *)(v11 + 16);
  else
    v13 = (int *)(v12 + 4);
  v14 = *v13;
  if (v14)
  {
    v15 = *(_QWORD *)(v8 + 8);
    if ((v15 & 1) != 0)
      v16 = (int *)(v8 + 16);
    else
      v16 = (int *)(v15 + 4);
    v17 = *v16;
    if (v17)
    {
      v18 = v17 | v14;
      v19 = __OFADD__(v14, v17);
      if (v18 < 0 || v19)
      {
        v23 = a1[7];
        OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, (JSC::JSGlobalObject *)a2);
        v31 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v31 = (JSC::Exception *)JSC::Exception::create((uint64_t)v23, (JSC::VM *)OutOfMemoryError, 0, v25, v26, v27, v28, v29);
        }
        JSC::VM::throwException(v23, (JSC::JSGlobalObject *)a1, v31, v30, v25, v26, v27, v28, v29);
        return 0;
      }
      else
      {
        return JSC::JSRopeString::create(a1[7], (unint64_t)v11, (JSC::JSString *)v8, a4, a5, a6, a7, a8);
      }
    }
    else
    {
      return (uint64_t)v11;
    }
  }
  return v8;
}

unint64_t operationStrCat3(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, JSC::JSString *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  unint64_t v17;
  int *v18;
  int v19;
  unint64_t v20;
  int *v21;
  int v22;
  BOOL v23;
  unint64_t *v24;
  int v25;
  int v26;
  int v27;
  unint64_t result;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  int v33;
  _BOOL4 v34;
  unint64_t OutOfMemoryError;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  JSC::Exception *v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  uint64_t v50;
  int *v51;
  int v52;
  int v53;
  _BOOL4 v54;
  int v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *var58[12];

  v8 = (unint64_t)a4;
  v9 = a3;
  v11 = *((_QWORD *)a1 + 7);
  *(unsigned __int8 **)(v11 + 40) = var58[11];
  var58[0] = (unsigned __int8 *)a2;
  if ((a2 & 0xFFFE000000000002) != 0 || (v12 = a2, *(_BYTE *)(a2 + 5) != 2))
    v12 = (unint64_t)JSC::JSValue::toStringSlowCase(var58, (uint64_t)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v43 = *(_DWORD *)(v11 + 80);
    if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    a2 = *(_QWORD *)(v11 + 16);
    if (a2)
      return 0;
  }
  var58[0] = (unsigned __int8 *)v9;
  if ((v9 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v9 + 5) != 2)
    v9 = (unint64_t)JSC::JSValue::toStringSlowCase(var58, (uint64_t)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v44 = *(_DWORD *)(v11 + 80);
    if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    a2 = *(_QWORD *)(v11 + 16);
    if (a2)
      return 0;
  }
  var58[0] = (unsigned __int8 *)v8;
  if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    v8 = (unint64_t)JSC::JSValue::toStringSlowCase(var58, (uint64_t)a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v45 = *(_DWORD *)(v11 + 80);
    if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    a2 = *(_QWORD *)(v11 + 16);
    if (a2)
      return 0;
  }
  v13 = *((_QWORD *)a1 + 7);
  v14 = *(_QWORD *)(v12 + 8);
  v15 = (int *)(v12 + 16);
  if ((v14 & 1) == 0)
    v15 = (int *)(v14 + 4);
  v16 = *v15;
  if (v16)
  {
    v17 = *(_QWORD *)(v9 + 8);
    v18 = (int *)(v9 + 16);
    if ((v17 & 1) == 0)
      v18 = (int *)(v17 + 4);
    v19 = *v18;
    if (*v18)
    {
      v20 = *(_QWORD *)(v8 + 8);
      v21 = (int *)(v8 + 16);
      if ((v20 & 1) == 0)
        v21 = (int *)(v20 + 4);
      v22 = *v21;
      if (v22)
      {
        if (((v22 | v19) & 0x80000000) == 0)
        {
          v23 = __OFADD__(v19, v22);
          if ((v16 & 0x80000000) == 0 && !v23 && !__OFADD__(v16, v19 + v22))
          {
            if ((v14 & 1) != 0)
              v14 = (v14 >> 2) & 1;
            else
              LODWORD(v14) = (*(unsigned __int8 *)(v14 + 16) >> 2) & 1;
            v24 = (unint64_t *)(v13 + 39432);
            if ((v17 & 1) != 0)
              v17 = (v17 >> 2) & 1;
            else
              LODWORD(v17) = (*(unsigned __int8 *)(v17 + 16) >> 2) & 1;
            v25 = v19 + v16;
            if ((v20 & 1) != 0)
              v20 = (v20 >> 2) & 1;
            else
              LODWORD(v20) = (*(unsigned __int8 *)(v20 + 16) >> 2) & 1;
            v26 = v25 + v22;
            v27 = v14 & v17 & v20;
            result = *v24;
            if (*v24 >= *(_QWORD *)(v13 + 39440))
            {
              result = *(_QWORD *)(v13 + 39448);
              if ((result & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v13, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                result = JSC::LocalAllocator::allocateSlowCase(v13 + 39408, v13 + 192, 32, 0, 0, v57, v58, v59);
                goto LABEL_34;
              }
              v46 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v13 + 39456);
              *(_QWORD *)(v13 + 39440) = result + HIDWORD(v46);
              *(_QWORD *)(v13 + 39448) = result + (int)v46;
            }
            *v24 = result + 32;
LABEL_34:
            *(_DWORD *)result = *(_QWORD *)(v13 + 41512) >> 4;
            *(_DWORD *)(result + 4) = 17302016;
            v29 = 5;
            if (!v27)
              v29 = 1;
            *(_QWORD *)(result + 8) = v29 | v12;
            *(_DWORD *)(result + 16) = v26;
            *(_DWORD *)(result + 20) = v9;
            *(_WORD *)(result + 24) = WORD2(v9);
            *(_WORD *)(result + 26) = v8;
            *(_DWORD *)(result + 28) = v8 >> 16;
            if (*(_BYTE *)(v13 + 755))
              __dmb(0xAu);
            return result;
          }
        }
        OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, (JSC::JSGlobalObject *)a2);
        v42 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v42 = (JSC::Exception *)JSC::Exception::create(v13, (JSC::VM *)OutOfMemoryError, 0, v36, v37, v38, v39, v40);
        }
        JSC::VM::throwException((JSC::VM *)v13, a1, v42, v41, v36, v37, v38, v39, v40);
      }
      else
      {
        var58[0] = *((unsigned __int8 **)a1 + 7);
        v55 = v19 | v16;
        v56 = __OFADD__(v16, v19);
        if ((v55 & 0x80000000) == 0 && !v56)
          return JSC::JSRopeString::create((JSC::JSRopeString *)v13, v12, (JSC::JSString *)v9, a4, a5, a6, a7, a8);
        JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)var58);
      }
      return 0;
    }
    var58[0] = *((unsigned __int8 **)a1 + 7);
    v30 = *(_QWORD *)(v8 + 8);
    if ((v30 & 1) != 0)
      v31 = (int *)(v8 + 16);
    else
      v31 = (int *)(v30 + 4);
    v32 = *v31;
    if (v32)
    {
      v33 = v32 | v16;
      v34 = __OFADD__(v16, v32);
      if (v33 < 0 || v34)
      {
        JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)var58);
        return 0;
      }
      else
      {
        return JSC::JSRopeString::create((JSC::JSRopeString *)v13, v12, (JSC::JSString *)v8, a4, a5, a6, a7, a8);
      }
    }
    return v12;
  }
  else
  {
    var58[0] = *((unsigned __int8 **)a1 + 7);
    v47 = *(_QWORD *)(v9 + 8);
    if ((v47 & 1) != 0)
      v48 = (int *)(v9 + 16);
    else
      v48 = (int *)(v47 + 4);
    v49 = *v48;
    if (v49)
    {
      v50 = *(_QWORD *)(v8 + 8);
      if ((v50 & 1) != 0)
        v51 = (int *)(v8 + 16);
      else
        v51 = (int *)(v50 + 4);
      v52 = *v51;
      if (v52)
      {
        v53 = v52 | v49;
        v54 = __OFADD__(v49, v52);
        if (v53 < 0 || v54)
        {
          JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)var58);
          return 0;
        }
        else
        {
          return JSC::JSRopeString::create((JSC::JSRopeString *)v13, v9, (JSC::JSString *)v8, a4, a5, a6, a7, a8);
        }
      }
      else
      {
        return v9;
      }
    }
    return v8;
  }
}

JSC::VM *operationMakeAtomString1(JSC::VM **a1, JSC::VM *a2, int8x16_t a3, uint64_t a4, JSC::JSString *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v9;
  uint64_t vars0;

  v9 = a1[7];
  *((_QWORD *)v9 + 5) = vars0;
  return JSC::jsAtomString(a1, v9, a2, a5, a6, a7, a8, a9, a3);
}

JSC::VM *JSC::jsAtomString(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::VM *a3, JSC::JSString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  WTF::AtomStringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unint64_t v16;
  JSC::VM *result;
  unint64_t v18;
  WTF *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unsigned int v52;
  unsigned int v53;
  WTF::StringImpl **v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unsigned int v67;
  unsigned int v68;
  WTF::StringImpl **p_dst;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  int v81;
  JSC::VM *v82;
  int v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  JSC::VM *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  _DWORD *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  int v127;
  JSC::VM **v128;
  JSC::VM *v129;
  JSC::VM *v130;
  WTF::StringImpl *__dst;
  uint64_t v132;
  int v133;
  uint64_t v134;

  v11 = (WTF::AtomStringImpl *)this;
  v134 = *MEMORY[0x1E0C80C00];
  v130 = a3;
  v12 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
  if ((v12 & 1) != 0)
  {
    v18 = *((unsigned int *)a3 + 4);
    if (v18 <= 0x40)
    {
      v128 = &v129;
      v129 = a3;
      if ((v12 & 2) != 0)
      {
        v36 = *(_QWORD *)((_BYTE *)a3 + 20) & 0xFFFFFFFFFLL;
        __dst = 0;
        v37 = *(_QWORD *)(v36 + 8);
        if (v37)
        {
          v38 = *(unsigned __int8 *)(v37 + 16);
          v39 = *(WTF::StringImpl **)(v37 + 8);
          LODWORD(v37) = *(_DWORD *)(v37 + 4);
          __dst = v39;
          v40 = (v38 >> 2) & 1;
        }
        else
        {
          LOBYTE(v40) = 1;
        }
        LODWORD(v132) = v37;
        BYTE4(v132) = v40;
        v42 = WTF::StringView::substring((const char *)&__dst, *(_DWORD *)((char *)a3 + 26), v18);
        if ((v41 & 0xFF00000000) == 0)
        {
          WTF::HashTranslatorCharBuffer<char16_t>::HashTranslatorCharBuffer((uint64_t)&__dst, (uint64_t)v42, v41);
          if (v132 == 1)
          {
            v16 = *(unsigned __int16 *)__dst;
            if (v16 <= 0xFF)
              return (JSC::VM *)*((_QWORD *)a2 + v16 + 5277);
          }
          else if (!v132)
          {
            return (JSC::VM *)*((_QWORD *)a2 + 5246);
          }
          v28 = (char *)a2 + 81168;
          v63 = v133;
          v30 = v133 & 0x1FF;
          v64 = *((_QWORD *)a2 + v30 + 10146);
          if (v64)
          {
            v65 = *(_QWORD *)(v64 + 8);
            v66 = (v65 & 1) != 0 ? 0 : (WTF::StringImpl *)v65;
            v67 = *((_DWORD *)v66 + 4);
            if (v67 < 0x100)
            {
              v68 = WTF::StringImpl::hashSlowCase(v66);
              v63 = v133;
            }
            else
            {
              v68 = v67 >> 8;
            }
            if (v68 == v63 && (WTF::equal(v66, __dst, v132) & 1) != 0)
              return *(JSC::VM **)&v28[8 * v30];
          }
          p_dst = &__dst;
LABEL_105:
          result = (JSC::VM *)_ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringEENKUlS3_RT_E0_clIN3WTF24HashTranslatorCharBufferIDsEEEEDaS3_S7_((uint64_t **)&v128, (uint64_t)a2, p_dst, v23, v24, v25, v26, v27);
          if (!result)
            return result;
          goto LABEL_106;
        }
        WTF::HashTranslatorCharBuffer<unsigned char>::HashTranslatorCharBuffer((uint64_t)&__dst, (uint64_t)v42, v41);
        if (v132 != 1)
        {
          if (!v132)
            return (JSC::VM *)*((_QWORD *)a2 + 5246);
          v28 = (char *)a2 + 81168;
          v48 = v133;
          v30 = v133 & 0x1FF;
          v49 = *((_QWORD *)a2 + v30 + 10146);
          if (v49)
          {
            v50 = *(_QWORD *)(v49 + 8);
            v51 = (v50 & 1) != 0 ? 0 : (WTF::StringImpl *)v50;
            v52 = *((_DWORD *)v51 + 4);
            if (v52 < 0x100)
            {
              v53 = WTF::StringImpl::hashSlowCase(v51);
              v48 = v133;
            }
            else
            {
              v53 = v52 >> 8;
            }
            if (v53 == v48 && WTF::equalInternal<unsigned char>((uint64_t)v51, (unint64_t)__dst, v132))
              return *(JSC::VM **)&v28[8 * v30];
          }
          v54 = &__dst;
          goto LABEL_40;
        }
        v85 = __dst;
      }
      else
      {
        v19 = (WTF *)*((_QWORD *)a2 + 1);
        v20 = (unint64_t)v12 & 0xFFFFFFFFFFFFFFF8;
        v21 = (char *)(*(_QWORD *)((_BYTE *)a3 + 20) & 0xFFFFFFFFFLL);
        v22 = *((_QWORD *)a3 + 3) >> 16;
        if ((v12 & 4) == 0)
        {
          JSC::JSRopeString::resolveToBuffer<char16_t>(v20, (uint64_t)v21, v22, (char *)&__dst, v18, (unint64_t)v19, a7, a8, a9);
          WTF::HashTranslatorCharBuffer<char16_t>::HashTranslatorCharBuffer((uint64_t)&v125, (uint64_t)&__dst, v18);
          if (v126 == 1)
          {
            v16 = *(unsigned __int16 *)v125;
            if (v16 <= 0xFF)
              return (JSC::VM *)*((_QWORD *)a2 + v16 + 5277);
          }
          else if (!v126)
          {
            return (JSC::VM *)*((_QWORD *)a2 + 5246);
          }
          v28 = (char *)a2 + 81168;
          v29 = v127;
          v30 = v127 & 0x1FF;
          v31 = *((_QWORD *)a2 + v30 + 10146);
          if (v31)
          {
            v32 = *(_QWORD *)(v31 + 8);
            v33 = (v32 & 1) != 0 ? 0 : (WTF::StringImpl *)v32;
            v34 = *((_DWORD *)v33 + 4);
            if (v34 < 0x100)
            {
              v35 = WTF::StringImpl::hashSlowCase(v33);
              v29 = v127;
            }
            else
            {
              v35 = v34 >> 8;
            }
            if (v35 == v29 && (WTF::equal(v33, v125, v126) & 1) != 0)
              return *(JSC::VM **)&v28[8 * v30];
          }
          p_dst = &v125;
          goto LABEL_105;
        }
        JSC::JSRopeString::resolveToBuffer<unsigned char>(v20, v21, v22, (uint64_t)&__dst, v18, v19, a7, a8);
        WTF::HashTranslatorCharBuffer<unsigned char>::HashTranslatorCharBuffer((uint64_t)&v125, (uint64_t)&__dst, v18);
        if (v126 != 1)
        {
          if (!v126)
            return (JSC::VM *)*((_QWORD *)a2 + 5246);
          v28 = (char *)a2 + 81168;
          v56 = v127;
          v30 = v127 & 0x1FF;
          v57 = *((_QWORD *)a2 + v30 + 10146);
          if (v57)
          {
            v58 = *(_QWORD *)(v57 + 8);
            v59 = (v58 & 1) != 0 ? 0 : (WTF::StringImpl *)v58;
            v60 = *((_DWORD *)v59 + 4);
            if (v60 < 0x100)
            {
              v61 = WTF::StringImpl::hashSlowCase(v59);
              v56 = v127;
            }
            else
            {
              v61 = v60 >> 8;
            }
            if (v61 == v56 && WTF::equalInternal<unsigned char>((uint64_t)v59, (unint64_t)v125, v126))
              return *(JSC::VM **)&v28[8 * v30];
          }
          v54 = &v125;
LABEL_40:
          result = (JSC::VM *)_ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringEENKUlS3_RT_E0_clIN3WTF24HashTranslatorCharBufferIhEEEEDaS3_S7_((uint64_t **)&v128, (uint64_t)a2, v54, v43, v44, v45, v46, v47);
          if (!result)
            return result;
LABEL_106:
          *(_QWORD *)&v28[8 * v30] = result;
          return result;
        }
        v85 = v125;
      }
      v16 = *(unsigned __int8 *)v85;
      return (JSC::VM *)*((_QWORD *)a2 + v16 + 5277);
    }
    v82 = this[7];
    JSC::JSRopeString::resolveRopeToAtomString(a3, (JSC::JSGlobalObject *)this);
    if (*((_DWORD *)v82 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v82, (uint64_t)v11, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v84 = __dst;
      if (__dst)
      {
        v12 = 0;
        v83 = *(_DWORD *)__dst - 2;
        goto LABEL_100;
      }
    }
    else
    {
      v12 = __dst;
      if (__dst)
      {
        v83 = *(_DWORD *)__dst;
        *(_DWORD *)__dst += 2;
        v84 = v12;
LABEL_100:
        if (v83)
        {
          *(_DWORD *)v84 = v83;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v84, v11, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
        }
        if (!v12)
          return v130;
        v62 = *(_DWORD *)v12 - 2;
        goto LABEL_57;
      }
    }
    return v130;
  }
  v13 = *((unsigned int *)v12 + 1);
  if (v13 > 0x40)
  {
    if ((*((_BYTE *)v12 + 16) & 0x10) == 0)
    {
      v103 = this[7];
      if (*((WTF::StringImpl **)v103 + 8096) != v12)
      {
        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v103 + 8096, *((WTF::AtomStringImpl **)a3 + 1), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v104 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
        if (v104)
        {
          if ((*((_BYTE *)v104 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v104 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v104, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&__dst);
            v104 = __dst;
          }
        }
        v105 = (WTF::StringImpl *)*((_QWORD *)v103 + 8097);
        *((_QWORD *)v103 + 8097) = v104;
        if (v105)
        {
          if (*(_DWORD *)v105 == 2)
          {
            WTF::StringImpl::~StringImpl(v105, v11, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
          }
          else
          {
            *(_DWORD *)v105 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*((_QWORD *)a3 + 1) + 16) & 0x10) == 0)
      {
        v106 = (_DWORD *)*((_QWORD *)v103 + 8097);
        *v106 += 2;
        __dmb(0xAu);
        v107 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
        *((_QWORD *)a3 + 1) = v106;
        __dst = v107;
        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v103 + 192, (unint64_t)&__dst);
        v108 = __dst;
        __dst = 0;
        if (v108)
        {
          if (*(_DWORD *)v108 == 2)
          {
            WTF::StringImpl::~StringImpl(v108, v11, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
          }
          else
          {
            *(_DWORD *)v108 -= 2;
          }
        }
      }
      v12 = (WTF::StringImpl *)*((_QWORD *)v103 + 8097);
    }
    v62 = *(_DWORD *)v12;
    *(_DWORD *)v12 += 2;
LABEL_57:
    if (v62)
    {
      *(_DWORD *)v12 = v62;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v12, v11, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
    return v130;
  }
  __dst = (WTF::StringImpl *)&v130;
  if (!v12)
    return (JSC::VM *)*((_QWORD *)a2 + 5246);
  v14 = *((_DWORD *)v12 + 4);
  v15 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
  if ((v14 & 4) != 0)
  {
    if (v14 >= 0x100)
      v55 = v14 >> 8;
    else
      v55 = WTF::StringImpl::hashSlowCase(v12);
    if ((_DWORD)v13 == 1)
    {
      v16 = *v15;
      return (JSC::VM *)*((_QWORD *)a2 + v16 + 5277);
    }
    if (!(_DWORD)v13)
      return (JSC::VM *)*((_QWORD *)a2 + 5246);
    v70 = (char *)a2 + 81168;
    v71 = v55 & 0x1FF;
    v77 = *((_QWORD *)a2 + v71 + 10146);
    if (v77)
    {
      v78 = *(_QWORD *)(v77 + 8);
      v79 = (v78 & 1) != 0 ? 0 : (WTF::StringImpl *)v78;
      v80 = *((_DWORD *)v79 + 4);
      v81 = v80 < 0x100 ? WTF::StringImpl::hashSlowCase(v79) : v80 >> 8;
      if (v81 == v55 && WTF::equalInternal<unsigned char>((uint64_t)v79, (unint64_t)v15, v13))
        return *(JSC::VM **)&v70[8 * v71];
    }
    result = (JSC::VM *)_ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringEENKUlS3_RT_E_clIN3WTF24HashTranslatorCharBufferIhEEEEDaS3_S7_((uint64_t **)&__dst, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (result)
LABEL_96:
      *(_QWORD *)&v70[8 * v71] = result;
  }
  else
  {
    if (v14 >= 0x100)
      v94 = v14 >> 8;
    else
      v94 = WTF::StringImpl::hashSlowCase(v12);
    if ((_DWORD)v13 == 1)
    {
      v16 = *(unsigned __int16 *)v15;
      if (v16 <= 0xFF)
        return (JSC::VM *)*((_QWORD *)a2 + v16 + 5277);
    }
    else if (!(_DWORD)v13)
    {
      return (JSC::VM *)*((_QWORD *)a2 + 5246);
    }
    v70 = (char *)a2 + 81168;
    v71 = v94 & 0x1FF;
    v72 = *((_QWORD *)a2 + v71 + 10146);
    if (v72)
    {
      v73 = *(_QWORD *)(v72 + 8);
      v74 = (v73 & 1) != 0 ? 0 : (WTF::StringImpl *)v73;
      v75 = *((_DWORD *)v74 + 4);
      v76 = v75 < 0x100 ? WTF::StringImpl::hashSlowCase(v74) : v75 >> 8;
      if (v76 == v94 && (WTF::equal(v74, v15, v13) & 1) != 0)
        return *(JSC::VM **)&v70[8 * v71];
    }
    result = (JSC::VM *)_ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringEENKUlS3_RT_E_clIN3WTF24HashTranslatorCharBufferIhEEEEDaS3_S7_((uint64_t **)&__dst, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (result)
      goto LABEL_96;
  }
  return result;
}

JSC::VM *operationMakeAtomString2(JSC::JSRopeString **a1, uint64_t a2, JSC::JSString *a3, int8x16_t a4, uint64_t a5, JSC::JSString *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v9;
  uint64_t vars0;

  v9 = a1[7];
  *((_QWORD *)v9 + 5) = vars0;
  return JSC::jsAtomString(a1, v9, a2, a3, a6, a7, a8, a9, a4);
}

JSC::VM *JSC::jsAtomString(JSC::JSRopeString **this, JSC::JSGlobalObject *a2, uint64_t a3, JSC::JSString *a4, JSC::JSString *a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t StatusReg;
  JSC::JSGlobalObject *v13;
  uint64_t v14;
  int *v15;
  int v16;
  JSC::VM *v17;
  uint64_t v18;
  unsigned int *v19;
  int *v20;
  int v21;
  _BOOL4 v22;
  unint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t SlowCase;
  uint64_t casual;
  uint64_t v43;
  int *v44;
  int v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unsigned int v62;
  unsigned int v63;
  _opaque_pthread_t *v64;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t *v70;
  int *v71;
  unint64_t v72;
  char *stackaddr_np;
  _opaque_pthread_t *v75;
  unint64_t v76;
  int v77;
  _opaque_pthread_t *v78;
  rlim_t rlim_cur;
  unint64_t v80;
  unint64_t v81;
  unsigned __int8 *v82;
  unsigned int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::AtomStringImpl *v117;
  const WTF::StringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  JSC::JSRopeString *v125;
  int v126;
  unint64_t v127;
  WTF *v128;
  rlim_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  WTF::StringImpl *v147;
  _QWORD *v148;
  unsigned __int128 v149;
  char v150;
  char *v151;
  char *v152;
  unsigned __int128 v153;
  char v154;
  _QWORD *v155;
  unsigned __int128 v156;
  char v157;
  unint64_t v158;
  WTF::StringImpl *v159;
  _DWORD *v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  char *v163;
  char *v164;
  unsigned __int128 v165;
  char v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v192;
  unint64_t v193;
  int v194;
  JSC::JSGlobalObject *v195;
  _QWORD v196[2];
  rlimit v197;
  int v198;
  char v199;
  _QWORD __dst[18];

  v13 = a2;
  __dst[16] = *MEMORY[0x1E0C80C00];
  v195 = a2;
  v14 = *(_QWORD *)(a3 + 8);
  v15 = (int *)(a3 + 16);
  if ((v14 & 1) == 0)
    v15 = (int *)(v14 + 4);
  v16 = *v15;
  if (*v15)
  {
    v17 = (JSC::VM *)a3;
    v18 = *((_QWORD *)a4 + 1);
    v19 = (unsigned int *)((char *)a4 + 16);
    v20 = (int *)(v18 + 4);
    if ((v18 & 1) != 0)
      v20 = (int *)((char *)a4 + 16);
    v21 = *v20;
    if (v21)
    {
      v22 = __OFADD__(v16, v21);
      if ((v21 | v16) < 0 || v22)
      {
        JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)this, (JSC::JSGlobalObject *)&v195);
      }
      else
      {
        v23 = (v21 + v16);
        if (v23 < 0x41)
        {
          v24 = (char *)a2 + 41968;
          if ((v14 & 1) != 0)
          {
            if ((v14 & 4) == 0)
              goto LABEL_164;
          }
          else if ((*(_BYTE *)(v14 + 16) & 4) == 0)
          {
            goto LABEL_164;
          }
          if ((v18 & 1) == 0)
          {
            v25 = *(_DWORD *)(v18 + 16);
            if ((v25 & 4) != 0)
            {
              if ((v14 & 1) != 0)
              {
                v128 = (WTF *)*((_QWORD *)a2 + 1);
                v197.rlim_cur = 0;
                LODWORD(v197.rlim_max) = 0;
                BYTE4(v197.rlim_max) = 1;
                if (v18)
                {
                  v129 = *(_QWORD *)(v18 + 8);
                  v130 = *(_DWORD *)(v18 + 4);
                  v197.rlim_cur = v129;
                  LODWORD(v197.rlim_max) = v130;
                  BYTE4(v197.rlim_max) = (v25 & 4) != 0;
                }
                WTF::StringView::getCharacters<unsigned char>(&v197, (char *)__dst + *(unsigned int *)(a3 + 16));
                v133 = *((_QWORD *)v17 + 1);
                if ((v133 & 2) != 0)
                {
                  v134 = *(_QWORD *)((*(_QWORD *)((_BYTE *)v17 + 20) & 0xFFFFFFFFFLL) + 8);
                  v135 = (*(unsigned __int8 *)(v134 + 16) >> 2) & 1;
                  v136 = *(_DWORD *)(v134 + 4);
                  v192 = *(_QWORD **)(v134 + 8);
                  LODWORD(v193) = v136;
                  BYTE4(v193) = v135;
                  v196[0] = WTF::StringView::substring((const char *)&v192, *(_DWORD *)((char *)v17 + 26), *((_DWORD *)v17 + 4));
                  v196[1] = v137;
                  WTF::StringView::getCharacters<unsigned char>(v196, (char *)__dst);
                }
                else
                {
                  JSC::JSRopeString::resolveToBuffer<unsigned char>(v133 & 0xFFFFFFFFFFFFFFF8, (char *)(*(_QWORD *)((_BYTE *)v17 + 20) & 0xFFFFFFFFFLL), *((_QWORD *)v17 + 3) >> 16, (uint64_t)__dst, *((unsigned int *)v17 + 4), v128, v131, v132);
                }
              }
              else
              {
                if (v14)
                {
                  a2 = *(JSC::JSGlobalObject **)(v14 + 8);
                  v26 = *(unsigned int *)(v14 + 4);
                  if ((*(_BYTE *)(v14 + 16) & 4) != 0)
                  {
                    if ((_DWORD)v26 == 1)
                    {
                      LOBYTE(__dst[0]) = *(_BYTE *)a2;
                      LODWORD(v26) = 1;
                    }
                    else if ((_DWORD)v26)
                    {
                      memcpy(__dst, a2, *(unsigned int *)(v14 + 4));
                    }
                  }
                  else
                  {
                    v148 = __dst;
                    if (v26 >= 0x10)
                    {
                      do
                      {
                        v149 = (unsigned __int128)vld2q_s8((const char *)a2);
                        a2 = (JSC::JSGlobalObject *)((char *)a2 + 32);
                        *(_OWORD *)v148 = v149;
                        v148 += 2;
                      }
                      while (v148 != (_QWORD *)((char *)__dst + (v26 & 0xFFFFFFF0)));
                      v148 = (_QWORD *)((char *)__dst + (v26 & 0xFFFFFFF0));
                    }
                    while (v148 != (_QWORD *)((char *)__dst + v26))
                    {
                      v150 = *(_BYTE *)a2;
                      a2 = (JSC::JSGlobalObject *)((char *)a2 + 2);
                      *(_BYTE *)v148 = v150;
                      v148 = (_QWORD *)((char *)v148 + 1);
                    }
                  }
                  v18 = *((_QWORD *)a4 + 1);
                  if (!v18)
                    goto LABEL_27;
                  v25 = *(_DWORD *)(v18 + 16);
                }
                else
                {
                  LODWORD(v26) = 0;
                }
                a2 = *(JSC::JSGlobalObject **)(v18 + 8);
                a3 = *(unsigned int *)(v18 + 4);
                v27 = (char *)__dst + v26;
                if ((v25 & 4) != 0)
                {
                  if ((_DWORD)a3 == 1)
                  {
LABEL_26:
                    *v27 = *(_BYTE *)a2;
                    goto LABEL_27;
                  }
                  if ((_DWORD)a3)
                  {
                    memcpy(v27, a2, a3);
                    v28 = -1640531527;
                    v192 = __dst;
                    v193 = v23;
                    if (v23 >= 2)
                    {
LABEL_28:
                      v29 = 0;
                      do
                      {
                        v30 = (*((unsigned __int8 *)__dst + v29 + 1) << 11) ^ ((v28 + *((unsigned __int8 *)__dst + v29)) << 16) ^ (v28 + *((unsigned __int8 *)__dst + v29));
                        v28 = v30 + (v30 >> 11);
                        v31 = v29 + 3;
                        v29 += 2;
                      }
                      while (v31 < v23);
                    }
LABEL_30:
                    if ((v23 & 1) != 0)
                      v28 = ((v28 + *((unsigned __int8 *)__dst + v23 - 1)) ^ ((v28
                                                                             + *((unsigned __int8 *)__dst + v23 - 1)) << 11))
                          + (((v28 + *((unsigned __int8 *)__dst + v23 - 1)) ^ ((v28
                                                                              + *((unsigned __int8 *)__dst + v23 - 1)) << 11)) >> 17);
                    v32 = (v28 ^ (8 * v28)) + ((v28 ^ (8 * v28)) >> 5);
                    v33 = (v32 ^ (4 * v32)) + ((v32 ^ (4 * v32)) >> 15);
                    v34 = (v33 ^ (v33 << 10)) & 0xFFFFFF;
                    if (!v34)
                      v34 = 0x800000;
                    v194 = v34;
                    if ((_DWORD)v23 != 1)
                    {
                      if ((_DWORD)v23)
                      {
                        v19 = (unsigned int *)((char *)v13 + 81168);
                        v9 = v34 & 0x1FF;
                        v35 = *((_QWORD *)v13 + v9 + 10146);
                        if (v35)
                        {
                          v36 = *(_QWORD *)(v35 + 8);
                          v37 = (v36 & 1) != 0 ? 0 : (WTF::StringImpl *)v36;
                          v38 = *((_DWORD *)v37 + 4);
                          if (v38 < 0x100)
                          {
                            v39 = WTF::StringImpl::hashSlowCase(v37);
                            v34 = v194;
                          }
                          else
                          {
                            v39 = v38 >> 8;
                          }
                          if (v39 == v34
                            && WTF::equalInternal<unsigned char>((uint64_t)v37, (unint64_t)v192, v193))
                          {
                            return *(JSC::VM **)&v19[2 * v9];
                          }
                        }
                        if (!v192)
                          goto LABEL_116;
                        if (!v193)
                        {
                          v44 = &WTF::StringImpl::s_emptyAtomString;
                          WTF::StringImpl::s_emptyAtomString += 2;
LABEL_104:
                          v68 = v44[1];
                          if (v68 == 1)
                          {
                            v69 = v44[4];
                            v82 = (unsigned __int8 *)*((_QWORD *)v44 + 1);
                            if ((v69 & 4) != 0)
                            {
                              v83 = *v82;
                            }
                            else
                            {
                              v83 = *(unsigned __int16 *)v82;
                              if (v83 > 0xFF)
                              {
LABEL_107:
                                v70 = (uint64_t *)((char *)v13 + 39696);
                                v71 = v44;
                                if ((v69 & 3) == 2)
                                {
                                  v71 = v44;
                                  do
                                  {
                                    v71 = (int *)*((_QWORD *)v71 + 3);
                                    v69 = v71[4];
                                  }
                                  while ((v69 & 3) == 2);
                                }
                                if ((v69 & 8) != 0)
                                {
                                  v72 = 0;
                                }
                                else
                                {
                                  v71[4] = v69 | 8;
                                  v72 = (unint64_t)v71[1] << ((v69 & 4) == 0);
                                }
                                SlowCase = *v70;
                                if ((unint64_t)*v70 >= *((_QWORD *)v13 + 4963))
                                {
                                  SlowCase = *((_QWORD *)v13 + 4964);
                                  if ((SlowCase & 1) != 0)
                                  {
                                    JSC::sanitizeStackForVM(v13, a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
                                    SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v13 + 39672, (uint64_t)v13 + 192, 16, 0, 0, v114, v115, v116);
                                    goto LABEL_112;
                                  }
                                  v92 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v13 + 4965);
                                  *((_QWORD *)v13 + 4963) = SlowCase + HIDWORD(v92);
                                  *((_QWORD *)v13 + 4964) = SlowCase + (int)v92;
                                }
                                *v70 = SlowCase + 16;
LABEL_112:
                                *(_DWORD *)SlowCase = *((_QWORD *)v13 + 5189) >> 4;
                                *(_DWORD *)(SlowCase + 4) = 17302016;
                                *(_QWORD *)(SlowCase + 8) = v44;
                                if (*((_BYTE *)v13 + 755))
                                  __dmb(0xAu);
                                if (v72 >= 0x101)
                                  JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v13 + 192, 0, SlowCase, v72, (uint64_t)a5, a6, a7, a8);
                                goto LABEL_118;
                              }
                            }
                            v24 = (char *)v13 + 8 * v83 + 42216;
                          }
                          else if (v68)
                          {
                            v69 = v44[4];
                            goto LABEL_107;
                          }
                          SlowCase = *(_QWORD *)v24;
                          if (*v44 == 2)
                          {
                            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
                            WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                          }
                          else
                          {
                            *v44 -= 2;
                          }
LABEL_117:
                          if (!SlowCase)
                            return (JSC::VM *)SlowCase;
LABEL_118:
                          *(_QWORD *)&v19[2 * v9] = SlowCase;
                          return (JSC::VM *)SlowCase;
                        }
                        v10 = WTF::AtomStringTableLocker::s_stringTableLock;
                        if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
                        {
                          __clrex();
                        }
                        else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
                        {
                          goto LABEL_50;
                        }
                        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_50:
                        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                        casual = *(_QWORD *)(StatusReg + 736);
                        if (casual)
                          goto LABEL_51;
                        v59 = atomic_load(&WTF::initialize(void)::onceKey);
                        if (v59 != -1)
                        {
                          v197.rlim_cur = (rlim_t)&v199;
                          v196[0] = &v197;
                          std::__call_once(&WTF::initialize(void)::onceKey, v196, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
                        }
                        v57 = *(_QWORD *)(StatusReg + 752);
                        if (!v57)
                          goto LABEL_177;
                        v58 = (_BYTE *)(v57 + 9408);
                        *(_BYTE *)(v57 + 9408) = 1;
                        v60 = *(unsigned int *)(v57 + 9424);
                        if ((_DWORD)v60)
                        {
                          *(_DWORD *)(v57 + 9424) = v60 - *(_DWORD *)(v57 + 9428);
                          casual = *(_QWORD *)(v57 + 9416) - v60;
LABEL_91:
                          *v58 = 0;
LABEL_92:
                          *(_OWORD *)casual = 0u;
                          *(_OWORD *)(casual + 16) = 0u;
                          *(_QWORD *)(casual + 96) = 0;
                          *(_OWORD *)(casual + 64) = 0u;
                          *(_OWORD *)(casual + 80) = 0u;
                          *(_OWORD *)(casual + 32) = 0u;
                          *(_OWORD *)(casual + 48) = 0u;
                          *(_DWORD *)casual = 1;
                          *(_OWORD *)(casual + 8) = 0u;
                          v61 = (unint64_t *)(casual + 8);
                          *(_OWORD *)(casual + 24) = 0u;
                          do
                          {
                            v62 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
                            v63 = v62 + 1;
                          }
                          while (__stlxr(v63, (unsigned int *)&WTF::ThreadLike::s_uid));
                          *(_DWORD *)(casual + 48) = v63;
                          *(_QWORD *)(casual + 52) = 0;
                          *(_QWORD *)(casual + 68) = 0;
                          *(_QWORD *)(casual + 60) = 0;
                          *(_DWORD *)(casual + 76) = 0;
                          *(_QWORD *)(casual + 88) = 0;
                          *(_QWORD *)(casual + 96) = 0;
                          v64 = pthread_self();
                          if (__ldaxr(v61))
                          {
                            __clrex();
                          }
                          else if (!__stxr(1uLL, v61))
                          {
LABEL_97:
                            *(_QWORD *)(casual + 40) = v64;
                            *(_DWORD *)(casual + 52) = pthread_mach_thread_np(v64);
                            v66 = __ldxr(v61);
                            if (v66 == 1)
                            {
                              if (!__stlxr(0, v61))
                                goto LABEL_123;
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::WordLock::unlockSlow((WTF::WordLock *)(casual + 8));
LABEL_123:
                            stackaddr_np = *(char **)(casual + 16);
                            if (!stackaddr_np)
                            {
                              v77 = pthread_main_np();
                              v78 = pthread_self();
                              stackaddr_np = (char *)pthread_get_stackaddr_np(v78);
                              if (v77)
                              {
                                getrlimit(3, &v197);
                                if (v197.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                                  rlim_cur = 0x800000;
                                else
                                  rlim_cur = v197.rlim_cur;
                              }
                              else
                              {
                                rlim_cur = pthread_get_stacksize_np(v78);
                              }
                              *(_QWORD *)(casual + 16) = stackaddr_np;
                              *(_QWORD *)(casual + 24) = &stackaddr_np[-rlim_cur];
                            }
                            *(_QWORD *)(casual + 80) = stackaddr_np;
                            *(_QWORD *)(casual + 56) = casual + 64;
                            v75 = pthread_self();
                            if (pthread_equal(v75, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
                            {
                              v76 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
                              if (v76 != -1)
                              {
                                v197.rlim_cur = (rlim_t)&v199;
                                v196[0] = &v197;
                                std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, v196, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
                              }
                              *(_QWORD *)(casual + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
                            }
                            *(_QWORD *)(StatusReg + 736) = casual;
                            pthread_key_init_np();
LABEL_51:
                            WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(casual + 56), (uint64_t)&v192, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (uint64_t)&v197);
                            v43 = *(unsigned int *)v197.rlim_cur;
                            v44 = (int *)(16 * v43);
                            if ((_BYTE)v198)
                            {
                              v45 = __ldxr(v10);
                              if (v45 == 1)
                                goto LABEL_53;
                            }
                            else
                            {
                              *v44 += 2;
                              v67 = __ldxr(v10);
                              if (v67 == 1)
                              {
LABEL_53:
                                if (!__stlxr(0, v10))
                                {
LABEL_103:
                                  if ((_DWORD)v43)
                                    goto LABEL_104;
LABEL_116:
                                  SlowCase = *(_QWORD *)v24;
                                  goto LABEL_117;
                                }
LABEL_102:
                                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
                                goto LABEL_103;
                              }
                            }
                            __clrex();
                            goto LABEL_102;
                          }
                          WTF::WordLock::lockSlow((WTF::WordLock *)(casual + 8));
                          goto LABEL_97;
                        }
                        v80 = *(_QWORD *)(v57 + 9448);
                        v52 = *(_QWORD *)(v57 + 9432);
                        if (v80)
                        {
LABEL_141:
                          v81 = __clz(v80);
                          *(_QWORD *)(v57 + 9448) = v80 & ~(0x8000000000000000 >> v81);
                          casual = v52 + 16 * v81;
                          goto LABEL_91;
                        }
LABEL_158:
                        if (v58[5] == 6)
                        {
                          v93 = *(_DWORD *)(v57 + 9444);
                          v94 = *(unsigned int *)(v57 + 9440);
                          if (v94 < v93)
                          {
                            *(_QWORD *)&v58[8 * v94 + 56] = 0;
                            v95 = (unint64_t *)(v57 + 8 * v94 + 9472);
                            v96 = v93 - 1 - v94;
                            while (v96)
                            {
                              v52 += 1024;
                              v98 = *v95++;
                              v97 = v98;
                              LODWORD(v94) = v94 + 1;
                              --v96;
                              if (v98)
                              {
                                v80 = __rbit64(v97);
                                *(_DWORD *)(v57 + 9440) = v94;
                                *(_QWORD *)(v57 + 9432) = v52;
                                goto LABEL_141;
                              }
                            }
                            *(_DWORD *)(v57 + 9440) = v93;
                          }
                        }
                        *v58 = 0;
LABEL_177:
                        casual = bmalloc_allocate_casual(104, 1);
                        goto LABEL_92;
                      }
                      return *(JSC::VM **)v24;
                    }
                    v127 = LOBYTE(__dst[0]);
                    return (JSC::VM *)*((_QWORD *)v13 + v127 + 5277);
                  }
                }
                else
                {
                  v151 = &v27[a3];
                  if (a3 >= 0x10)
                  {
                    v152 = &v27[a3 & 0xFFFFFFF0];
                    do
                    {
                      v153 = (unsigned __int128)vld2q_s8((const char *)a2);
                      a2 = (JSC::JSGlobalObject *)((char *)a2 + 32);
                      *(_OWORD *)v27 = v153;
                      v27 += 16;
                    }
                    while (v27 != v152);
                    v27 = v152;
                  }
                  while (v27 != v151)
                  {
                    v154 = *(_BYTE *)a2;
                    a2 = (JSC::JSGlobalObject *)((char *)a2 + 2);
                    *v27++ = v154;
                  }
                }
              }
LABEL_27:
              v28 = -1640531527;
              v192 = __dst;
              v193 = v23;
              if (v23 >= 2)
                goto LABEL_28;
              goto LABEL_30;
            }
LABEL_164:
            _ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringES5_ENKUlS5_S5_PT_jE_clIDsEEDaS5_S5_S7_j(*((_QWORD *)a2 + 1), a3, (uint64_t)a4, (char *)__dst, v23, a6, a7, a8);
            WTF::HashTranslatorCharBuffer<char16_t>::HashTranslatorCharBuffer((uint64_t)&v197, (uint64_t)__dst, v23);
            if (!v197.rlim_max)
              return *(JSC::VM **)v24;
            if (v197.rlim_max != 1 || (v127 = *(unsigned __int16 *)v197.rlim_cur, v127 > 0xFF))
            {
              v105 = (char *)v13 + 81168;
              v106 = v198;
              v107 = v198 & 0x1FF;
              v108 = *((_QWORD *)v13 + v107 + 10146);
              if (v108)
              {
                v109 = *(_QWORD *)(v108 + 8);
                v110 = (v109 & 1) != 0 ? 0 : (WTF::StringImpl *)v109;
                v111 = *((_DWORD *)v110 + 4);
                if (v111 < 0x100)
                {
                  v112 = WTF::StringImpl::hashSlowCase(v110);
                  v106 = v198;
                }
                else
                {
                  v112 = v111 >> 8;
                }
                if (v112 == v106 && (WTF::equal(v110, v197.rlim_cur, v197.rlim_max) & 1) != 0)
                  return *(JSC::VM **)&v105[8 * v107];
              }
              v113 = _ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringES5_ENKUlS3_RT_E_clIN3WTF24HashTranslatorCharBufferIDsEEEEDaS3_S7_((uint64_t)v13, &v197, v99, v100, v101, v102, v103, v104);
              SlowCase = v113;
              if (v113)
                *(_QWORD *)&v105[8 * v107] = v113;
              return (JSC::VM *)SlowCase;
            }
            return (JSC::VM *)*((_QWORD *)v13 + v127 + 5277);
          }
          if ((v18 & 4) == 0)
            goto LABEL_164;
          v46 = (WTF *)*((_QWORD *)a2 + 1);
          if ((v14 & 1) != 0)
          {
            JSC::JSRopeString::resolveToBufferSlow<unsigned char>(a3, a4, 0, (uint64_t)__dst, v23, *((_QWORD *)a2 + 1), a7, a8);
            goto LABEL_27;
          }
          if (v14)
          {
            a2 = *(JSC::JSGlobalObject **)(v14 + 8);
            v47 = *(unsigned int *)(v14 + 4);
            if ((*(_BYTE *)(v14 + 16) & 4) != 0)
            {
              if ((_DWORD)v47 == 1)
              {
                LOBYTE(__dst[0]) = *(_BYTE *)a2;
                LODWORD(v47) = 1;
              }
              else if ((_DWORD)v47)
              {
                memcpy(__dst, a2, *(unsigned int *)(v14 + 4));
                v48 = *((_QWORD *)a4 + 1);
                if ((v48 & 2) != 0)
                {
LABEL_64:
                  v49 = *(_QWORD *)((*(_QWORD *)((_BYTE *)a4 + 20) & 0xFFFFFFFFFLL) + 8);
                  v50 = *(unsigned int *)(v49 + 4);
                  v51 = *((_QWORD *)a4 + 3);
                  v52 = v51 >> 16;
                  if (v50 <= (v51 >> 16))
                    goto LABEL_27;
                  v53 = *(unsigned int *)(v49 + 16);
                  a2 = *(JSC::JSGlobalObject **)(v49 + 8);
                  v54 = *v19;
                  if ((int)v50 - (int)v52 > *v19 || (v54 = v50 - v52, (_DWORD)v52))
                  {
                    v55 = (v53 >> 2) & 1;
                    v56 = (v51 >> 16);
                    v57 = v54;
                    v58 = (_BYTE *)(v50 - v52);
                    if ((_DWORD)v55)
                    {
                      if ((unint64_t)v58 >= v54)
                      {
                        a2 = (JSC::JSGlobalObject *)((char *)a2 + v56);
                        v57 = v54 | 0x100000000;
                        goto LABEL_70;
                      }
LABEL_157:
                      __break(1u);
                      goto LABEL_158;
                    }
                    if ((unint64_t)v58 < v54)
                      goto LABEL_157;
                    a2 = (JSC::JSGlobalObject *)((char *)a2 + 2 * v56);
                  }
                  else
                  {
                    v57 = v50 & 0xFFFFFFFEFFFFFFFFLL | (((v53 >> 2) & 1) << 32);
                  }
LABEL_70:
                  v27 = (char *)__dst + v47;
                  if ((v57 & 0x100000000) != 0)
                  {
                    if ((_DWORD)v57 == 1)
                      goto LABEL_26;
                    if ((_DWORD)v57)
                      memcpy(v27, a2, v57);
                  }
                  else
                  {
                    v163 = &v27[v57];
                    if (v57 >= 0x10)
                    {
                      v164 = &v27[v57 & 0xFFFFFFF0];
                      do
                      {
                        v165 = (unsigned __int128)vld2q_s8((const char *)a2);
                        a2 = (JSC::JSGlobalObject *)((char *)a2 + 32);
                        *(_OWORD *)v27 = v165;
                        v27 += 16;
                      }
                      while (v27 != v164);
                      v27 = v164;
                    }
                    while (v27 != v163)
                    {
                      v166 = *(_BYTE *)a2;
                      a2 = (JSC::JSGlobalObject *)((char *)a2 + 2);
                      *v27++ = v166;
                    }
                  }
                  goto LABEL_27;
                }
LABEL_82:
                JSC::JSRopeString::resolveToBuffer<unsigned char>(v48 & 0xFFFFFFFFFFFFFFF8, (char *)(*(_QWORD *)((_BYTE *)a4 + 20) & 0xFFFFFFFFFLL), *((_QWORD *)a4 + 3) >> 16, (uint64_t)__dst + v47, *((unsigned int *)a4 + 4), v46, a7, a8);
                goto LABEL_27;
              }
            }
            else
            {
              v155 = __dst;
              if (v47 >= 0x10)
              {
                do
                {
                  v156 = (unsigned __int128)vld2q_s8((const char *)a2);
                  a2 = (JSC::JSGlobalObject *)((char *)a2 + 32);
                  *(_OWORD *)v155 = v156;
                  v155 += 2;
                }
                while (v155 != (_QWORD *)((char *)__dst + (v47 & 0xFFFFFFF0)));
                v155 = (_QWORD *)((char *)__dst + (v47 & 0xFFFFFFF0));
              }
              while (v155 != (_QWORD *)((char *)__dst + v47))
              {
                v157 = *(_BYTE *)a2;
                a2 = (JSC::JSGlobalObject *)((char *)a2 + 2);
                *(_BYTE *)v155 = v157;
                v155 = (_QWORD *)((char *)v155 + 1);
              }
            }
          }
          else
          {
            LODWORD(v47) = 0;
          }
          v48 = *((_QWORD *)a4 + 1);
          if ((v48 & 2) != 0)
            goto LABEL_64;
          goto LABEL_82;
        }
        SlowCase = JSC::JSRopeString::create(this[7], a3, a4, a4, (uint64_t)a5, a6, a7, a8);
        if (!*((_DWORD *)v13 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v13, (uint64_t)v117, (uint64_t)v118, v119, v120, v121, v122, v123))
        {
          v124 = *(WTF::StringImpl **)(SlowCase + 8);
          v125 = this[7];
          if ((v124 & 1) != 0)
          {
            JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)SlowCase, (JSC::JSGlobalObject *)this);
            if (*((_DWORD *)v125 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v125, (uint64_t)v117, (uint64_t)v118, v119, v120, v121, v122, v123))
            {
              v147 = (WTF::StringImpl *)__dst[0];
              if (!__dst[0])
                goto LABEL_195;
              v124 = 0;
              v146 = *(_DWORD *)__dst[0] - 2;
            }
            else
            {
              v124 = (WTF::StringImpl *)__dst[0];
              if (!__dst[0])
                goto LABEL_195;
              v146 = *(_DWORD *)__dst[0];
              *(_DWORD *)__dst[0] += 2;
              v147 = v124;
            }
            if (v146)
            {
              *(_DWORD *)v147 = v146;
            }
            else
            {
              WTF::StringImpl::~StringImpl(v147, v117, (uint64_t)v118, v119, v120, v121, v122, v123);
              WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
            }
            if (!v124)
            {
LABEL_195:
              if (!*((_DWORD *)v13 + 20)
                || !JSC::VM::hasExceptionsAfterHandlingTraps(v13, (uint64_t)v117, (uint64_t)v118, v119, v120, v121, v122, v123))
              {
                return (JSC::VM *)SlowCase;
              }
              return 0;
            }
            v126 = *(_DWORD *)v124 - 2;
          }
          else
          {
            if ((*((_BYTE *)v124 + 16) & 0x10) == 0)
            {
              if (*((WTF::StringImpl **)v125 + 8096) != v124)
              {
                WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v125 + 8096, *(WTF::AtomStringImpl **)(SlowCase + 8), (uint64_t)v118, v119, v120, v121, v122, v123);
                v158 = *(_QWORD *)(SlowCase + 8);
                if (v158)
                {
                  if ((*(_BYTE *)(v158 + 16) & 0x10) != 0)
                  {
                    *(_DWORD *)v158 += 2;
                  }
                  else
                  {
                    WTF::AtomStringImpl::addSlowCase(v158, v118, v119, v120, v121, v122, v123, (WTF *)__dst);
                    v158 = __dst[0];
                  }
                }
                v159 = (WTF::StringImpl *)*((_QWORD *)v125 + 8097);
                *((_QWORD *)v125 + 8097) = v158;
                if (v159)
                {
                  if (*(_DWORD *)v159 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v159, v117, (uint64_t)v118, v119, v120, v121, v122, v123);
                    WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
                  }
                  else
                  {
                    *(_DWORD *)v159 -= 2;
                  }
                }
              }
              if ((*(_BYTE *)(*(_QWORD *)(SlowCase + 8) + 16) & 0x10) == 0)
              {
                v160 = (_DWORD *)*((_QWORD *)v125 + 8097);
                *v160 += 2;
                __dmb(0xAu);
                v161 = *(_QWORD *)(SlowCase + 8);
                *(_QWORD *)(SlowCase + 8) = v160;
                __dst[0] = v161;
                JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v125 + 192, (unint64_t)__dst);
                v162 = (WTF::StringImpl *)__dst[0];
                __dst[0] = 0;
                if (v162)
                {
                  if (*(_DWORD *)v162 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v162, v117, (uint64_t)v118, v119, v120, v121, v122, v123);
                    WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
                  }
                  else
                  {
                    *(_DWORD *)v162 -= 2;
                  }
                }
              }
              v124 = (WTF::StringImpl *)*((_QWORD *)v125 + 8097);
            }
            v126 = *(_DWORD *)v124;
            *(_DWORD *)v124 += 2;
          }
          if (v126)
          {
            *(_DWORD *)v124 = v126;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v124, v117, (uint64_t)v118, v119, v120, v121, v122, v123);
            WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
            v13 = v195;
          }
          goto LABEL_195;
        }
      }
      return 0;
    }
  }
  else
  {
    a3 = (uint64_t)a4;
  }
  return JSC::jsAtomString(this, a2, (JSC::VM *)a3, a4, (uint64_t)a5, a6, a7, a8, a9);
}

JSC::VM *operationMakeAtomString3(JSC *this, JSC::VM *a2, size_t a3, JSC::JSString *a4, JSC::JSString *a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSString *v9;
  int *v10;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  int *v20;
  int v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  size_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t SlowCase;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t *v59;
  int *v60;
  unint64_t v61;
  unsigned __int8 *v63;
  unsigned int v64;
  unint64_t OutOfMemoryError;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  JSC::Exception *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  JSC::JSGlobalObject *v82;
  WTF::AtomStringImpl *v83;
  const WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  WTF::StringImpl *v115;
  unint64_t v116;
  WTF::StringImpl *v117;
  _DWORD *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unsigned __int128 v130;
  char v131;
  _BYTE *v132;
  _BYTE *v133;
  unsigned __int128 v134;
  char v135;
  _BYTE *v136;
  _BYTE *v137;
  unsigned __int128 v138;
  char v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  int v158;
  unsigned int *v159;
  uint64_t v160;
  int v161;
  _QWORD __dst[28];

  v9 = a4;
  v10 = (int *)a3;
  __dst[16] = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)this + 7);
  *(_QWORD *)(v12 + 40) = __dst[27];
  v13 = *((_QWORD *)a2 + 1);
  v14 = (int *)((char *)a2 + 16);
  if ((v13 & 1) == 0)
    v14 = (int *)(v13 + 4);
  v15 = *v14;
  if (!*v14)
  {
    v82 = (JSC::JSGlobalObject *)v12;
    return JSC::jsAtomString((JSC::JSRopeString **)this, v82, a3, a4, a5, a6, a7, a8, a9);
  }
  a3 = (size_t)a2;
  v16 = *((_QWORD *)v10 + 1);
  v17 = v10 + 4;
  if ((v16 & 1) == 0)
    v17 = (int *)(v16 + 4);
  v18 = *v17;
  if (!*v17)
  {
    v82 = (JSC::JSGlobalObject *)v12;
    return JSC::jsAtomString((JSC::JSRopeString **)this, v82, a3, a4, a5, a6, a7, a8, a9);
  }
  v19 = *((_QWORD *)a4 + 1);
  v20 = (int *)((char *)a4 + 16);
  if ((v19 & 1) == 0)
    v20 = (int *)(v19 + 4);
  v21 = *v20;
  if (!v21)
  {
    v82 = (JSC::JSGlobalObject *)v12;
    a4 = (JSC::JSString *)v10;
    return JSC::jsAtomString((JSC::JSRopeString **)this, v82, a3, a4, a5, a6, a7, a8, a9);
  }
  if ((v21 | v18) < 0
    || (!__OFADD__(v18, v21) ? (v22 = 0) : (v22 = 1), v15 < 0 || (v22 & 1) != 0 || __OFADD__(v15, v18 + v21)))
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, a2);
    v72 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v72 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)OutOfMemoryError, 0, v66, v67, v68, v69, v70);
    }
    JSC::VM::throwException((JSC::VM *)v12, this, v72, v71, v66, v67, v68, v69, v70);
    return 0;
  }
  v23 = (v18 + v15 + v21);
  if (v23 >= 0x41)
  {
    SlowCase = JSC::JSRopeString::create((JSC::JSRopeString *)v12, (unint64_t)a2, (JSC::JSString *)v10, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v83, (uint64_t)v84, v85, v86, v87, v88, v89))
    {
      return 0;
    }
    v90 = *(WTF::StringImpl **)(SlowCase + 8);
    v91 = *((_QWORD *)this + 7);
    if ((v90 & 1) != 0)
    {
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)SlowCase, this);
      if (*(_DWORD *)(v91 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v91, (uint64_t)v83, (uint64_t)v84, v85, v86, v87, v88, v89))
      {
        v115 = (WTF::StringImpl *)__dst[0];
        if (!__dst[0])
          goto LABEL_134;
        v90 = 0;
        v114 = *(_DWORD *)__dst[0] - 2;
      }
      else
      {
        v90 = (WTF::StringImpl *)__dst[0];
        if (!__dst[0])
          goto LABEL_134;
        v114 = *(_DWORD *)__dst[0];
        *(_DWORD *)__dst[0] += 2;
        v115 = v90;
      }
      if (v114)
      {
        *(_DWORD *)v115 = v114;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v115, v83, (uint64_t)v84, v85, v86, v87, v88, v89);
        WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
      }
      if (!v90)
      {
LABEL_134:
        if (!*(_DWORD *)(v12 + 80)
          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v83, (uint64_t)v84, v85, v86, v87, v88, v89))
        {
          return (JSC::VM *)SlowCase;
        }
        return 0;
      }
      v92 = *(_DWORD *)v90 - 2;
    }
    else
    {
      if ((*((_BYTE *)v90 + 16) & 0x10) == 0)
      {
        if (*(WTF::StringImpl **)(v91 + 64768) != v90)
        {
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v91 + 64768), *(WTF::AtomStringImpl **)(SlowCase + 8), (uint64_t)v84, v85, v86, v87, v88, v89);
          v116 = *(_QWORD *)(SlowCase + 8);
          if (v116)
          {
            if ((*(_BYTE *)(v116 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v116 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(v116, v84, v85, v86, v87, v88, v89, (WTF *)__dst);
              v116 = __dst[0];
            }
          }
          v117 = *(WTF::StringImpl **)(v91 + 64776);
          *(_QWORD *)(v91 + 64776) = v116;
          if (v117)
          {
            if (*(_DWORD *)v117 == 2)
            {
              WTF::StringImpl::~StringImpl(v117, v83, (uint64_t)v84, v85, v86, v87, v88, v89);
              WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
            }
            else
            {
              *(_DWORD *)v117 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(SlowCase + 8) + 16) & 0x10) == 0)
        {
          v118 = *(_DWORD **)(v91 + 64776);
          *v118 += 2;
          __dmb(0xAu);
          v119 = *(_QWORD *)(SlowCase + 8);
          *(_QWORD *)(SlowCase + 8) = v118;
          __dst[0] = v119;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v91 + 192, (unint64_t)__dst);
          v120 = (WTF::StringImpl *)__dst[0];
          __dst[0] = 0;
          if (v120)
          {
            if (*(_DWORD *)v120 == 2)
            {
              WTF::StringImpl::~StringImpl(v120, v83, (uint64_t)v84, v85, v86, v87, v88, v89);
              WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
            }
            else
            {
              *(_DWORD *)v120 -= 2;
            }
          }
        }
        v90 = *(WTF::StringImpl **)(v91 + 64776);
      }
      v92 = *(_DWORD *)v90;
      *(_DWORD *)v90 += 2;
    }
    if (v92)
    {
      *(_DWORD *)v90 = v92;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v90, v83, (uint64_t)v84, v85, v86, v87, v88, v89);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    goto LABEL_134;
  }
  v24 = v12 + 41968;
  if ((v13 & 1) != 0)
  {
    if ((v13 & 4) == 0)
      goto LABEL_78;
  }
  else if ((*(_BYTE *)(v13 + 16) & 4) == 0)
  {
    goto LABEL_78;
  }
  if ((v16 & 1) != 0)
  {
    if ((v16 & 4) != 0)
    {
LABEL_22:
      if ((v19 & 1) != 0)
      {
        if ((v19 & 4) != 0)
          goto LABEL_24;
      }
      else if ((*(_BYTE *)(v19 + 16) & 4) != 0)
      {
LABEL_24:
        if (((v16 | v13 | v19) & 1) != 0)
        {
          JSC::JSRopeString::resolveToBufferSlow<unsigned char>((uint64_t)a2, v10, (size_t)a4, (uint64_t)__dst, v23, *(_QWORD *)(v12 + 8), a7, a8);
        }
        else
        {
          if (v13)
          {
            a2 = *(JSC::VM **)(v13 + 8);
            v25 = *(unsigned int *)(v13 + 4);
            if ((*(_BYTE *)(v13 + 16) & 4) != 0)
            {
              if ((_DWORD)v25 == 1)
              {
                LOBYTE(__dst[0]) = *(_BYTE *)a2;
                LODWORD(v25) = 1;
              }
              else if ((_DWORD)v25)
              {
                memcpy(__dst, a2, v25);
              }
            }
            else
            {
              v129 = __dst;
              if (v25 >= 0x10)
              {
                do
                {
                  v130 = (unsigned __int128)vld2q_s8((const char *)a2);
                  a2 = (JSC::VM *)((char *)a2 + 32);
                  *(_OWORD *)v129 = v130;
                  v129 += 2;
                }
                while (v129 != (_QWORD *)((char *)__dst + (v25 & 0xFFFFFFF0)));
                v129 = (_QWORD *)((char *)__dst + (v25 & 0xFFFFFFF0));
              }
              while (v129 != (_QWORD *)((char *)__dst + v25))
              {
                v131 = *(_BYTE *)a2;
                a2 = (JSC::VM *)((char *)a2 + 2);
                *(_BYTE *)v129 = v131;
                v129 = (_QWORD *)((char *)v129 + 1);
              }
            }
          }
          else
          {
            LODWORD(v25) = 0;
          }
          v26 = *((_QWORD *)v10 + 1);
          if (v26)
          {
            a2 = *(JSC::VM **)(v26 + 8);
            v27 = *(unsigned int *)(v26 + 4);
            v28 = (char *)__dst + v25;
            if ((*(_BYTE *)(v26 + 16) & 4) != 0)
            {
              if ((_DWORD)v27 == 1)
              {
                *v28 = *(_BYTE *)a2;
                LODWORD(v27) = 1;
              }
              else if ((_DWORD)v27)
              {
                memcpy(v28, a2, v27);
              }
            }
            else
            {
              v132 = &v28[v27];
              if (v27 >= 0x10)
              {
                v133 = &v28[v27 & 0xFFFFFFF0];
                do
                {
                  v134 = (unsigned __int128)vld2q_s8((const char *)a2);
                  a2 = (JSC::VM *)((char *)a2 + 32);
                  *(_OWORD *)v28 = v134;
                  v28 += 16;
                }
                while (v28 != v133);
                v28 = v133;
              }
              while (v28 != v132)
              {
                v135 = *(_BYTE *)a2;
                a2 = (JSC::VM *)((char *)a2 + 2);
                *v28++ = v135;
              }
            }
          }
          else
          {
            LODWORD(v27) = 0;
          }
          v29 = *((_QWORD *)v9 + 1);
          if (v29)
          {
            a2 = *(JSC::VM **)(v29 + 8);
            a3 = *(unsigned int *)(v29 + 4);
            v30 = (char *)__dst + v25 + v27;
            if ((*(_BYTE *)(v29 + 16) & 4) != 0)
            {
              if ((_DWORD)a3 == 1)
              {
                *v30 = *(_BYTE *)a2;
              }
              else if ((_DWORD)a3)
              {
                memcpy(v30, a2, a3);
              }
            }
            else
            {
              v136 = &v30[a3];
              if (a3 >= 0x10)
              {
                v137 = &v30[a3 & 0xFFFFFFF0];
                do
                {
                  v138 = (unsigned __int128)vld2q_s8((const char *)a2);
                  a2 = (JSC::VM *)((char *)a2 + 32);
                  *(_OWORD *)v30 = v138;
                  v30 += 16;
                }
                while (v30 != v137);
                v30 = v137;
              }
              while (v30 != v136)
              {
                v139 = *(_BYTE *)a2;
                a2 = (JSC::VM *)((char *)a2 + 2);
                *v30++ = v139;
              }
            }
          }
        }
        v31 = -1640531527;
        v156 = __dst;
        v157 = v23;
        if (v23 >= 2)
        {
          v32 = 0;
          do
          {
            v33 = ((v31 + *((unsigned __int8 *)__dst + v32)) << 16) ^ (*((unsigned __int8 *)__dst + v32 + 1) << 11) ^ (v31 + *((unsigned __int8 *)__dst + v32));
            v31 = v33 + (v33 >> 11);
            v34 = v32 + 3;
            v32 += 2;
          }
          while (v34 < v23);
        }
        if ((v23 & 1) != 0)
          v31 = ((v31 + *((unsigned __int8 *)__dst + v23 - 1)) ^ ((v31 + *((unsigned __int8 *)__dst + v23 - 1)) << 11))
              + (((v31 + *((unsigned __int8 *)__dst + v23 - 1)) ^ ((v31 + *((unsigned __int8 *)__dst + v23 - 1)) << 11)) >> 17);
        v35 = (v31 ^ (8 * v31)) + ((v31 ^ (8 * v31)) >> 5);
        v36 = (v35 ^ (4 * v35)) + ((v35 ^ (4 * v35)) >> 15);
        v37 = (v36 ^ (v36 << 10)) & 0xFFFFFF;
        if (!v37)
          v37 = 0x800000;
        v158 = v37;
        if ((_DWORD)v23 != 1)
        {
          if ((_DWORD)v23)
          {
            v38 = v12 + 81168;
            v39 = v37 & 0x1FF;
            v40 = *(_QWORD *)(v12 + 81168 + 8 * v39);
            if (v40)
            {
              v41 = *(_QWORD *)(v40 + 8);
              v42 = (v41 & 1) != 0 ? 0 : (WTF::StringImpl *)v41;
              v43 = *((_DWORD *)v42 + 4);
              if (v43 < 0x100)
              {
                v44 = WTF::StringImpl::hashSlowCase(v42);
                v37 = v158;
              }
              else
              {
                v44 = v43 >> 8;
              }
              if (v44 == v37 && WTF::equalInternal<unsigned char>((uint64_t)v42, (unint64_t)v156, v157))
                return *(JSC::VM **)(v38 + 8 * v39);
            }
            if (!v156)
              goto LABEL_98;
            if (!v157)
            {
              v49 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
LABEL_86:
              v57 = v49[1];
              if (v57 == 1)
              {
                v58 = v49[4];
                v63 = (unsigned __int8 *)*((_QWORD *)v49 + 1);
                if ((v58 & 4) != 0)
                {
                  v64 = *v63;
                }
                else
                {
                  v64 = *(unsigned __int16 *)v63;
                  if (v64 > 0xFF)
                  {
LABEL_89:
                    v59 = (unint64_t *)(v12 + 39696);
                    v60 = v49;
                    if ((v58 & 3) == 2)
                    {
                      v60 = v49;
                      do
                      {
                        v60 = (int *)*((_QWORD *)v60 + 3);
                        v58 = v60[4];
                      }
                      while ((v58 & 3) == 2);
                    }
                    if ((v58 & 8) != 0)
                    {
                      v61 = 0;
                    }
                    else
                    {
                      v60[4] = v58 | 8;
                      v61 = (unint64_t)v60[1] << ((v58 & 4) == 0);
                    }
                    SlowCase = *v59;
                    if (*v59 >= *(_QWORD *)(v12 + 39704))
                    {
                      SlowCase = *(_QWORD *)(v12 + 39712);
                      if ((SlowCase & 1) != 0)
                      {
                        JSC::sanitizeStackForVM((JSC *)v12, a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
                        SlowCase = JSC::LocalAllocator::allocateSlowCase(v12 + 39672, v12 + 192, 16, 0, 0, v111, v112, v113);
                        goto LABEL_94;
                      }
                      v81 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v12 + 39720);
                      *(_QWORD *)(v12 + 39704) = SlowCase + HIDWORD(v81);
                      *(_QWORD *)(v12 + 39712) = SlowCase + (int)v81;
                    }
                    *v59 = SlowCase + 16;
LABEL_94:
                    *(_DWORD *)SlowCase = *(_QWORD *)(v12 + 41512) >> 4;
                    *(_DWORD *)(SlowCase + 4) = 17302016;
                    *(_QWORD *)(SlowCase + 8) = v49;
                    if (*(_BYTE *)(v12 + 755))
                      __dmb(0xAu);
                    if (v61 >= 0x101)
                      JSC::Heap::reportExtraMemoryAllocatedSlowCase(v12 + 192, 0, SlowCase, v61, (uint64_t)a5, a6, a7, a8);
                    goto LABEL_100;
                  }
                }
                v24 = v12 + 8 * v64 + 42216;
              }
              else if (v57)
              {
                v58 = v49[4];
                goto LABEL_89;
              }
              SlowCase = *(_QWORD *)v24;
              if (*v49 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v49, a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
                WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
              }
              else
              {
                *v49 -= 2;
              }
LABEL_99:
              if (!SlowCase)
                return (JSC::VM *)SlowCase;
LABEL_100:
              *(_QWORD *)(v38 + 8 * v39) = SlowCase;
              return (JSC::VM *)SlowCase;
            }
            if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
            {
              __clrex();
            }
            else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
            {
LABEL_60:
              v47 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v47)
                v47 = WTF::Thread::initializeCurrentTLS(0);
              WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v47 + 56), (uint64_t)&v156, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (uint64_t)&v159);
              v48 = *v159;
              v49 = (int *)(16 * v48);
              if (!(_BYTE)v161)
                *v49 += 2;
              v50 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
              if (v50 == 1)
              {
                if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
                {
LABEL_85:
                  if ((_DWORD)v48)
                    goto LABEL_86;
LABEL_98:
                  SlowCase = *(_QWORD *)v24;
                  goto LABEL_99;
                }
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
              goto LABEL_85;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
            goto LABEL_60;
          }
          return *(JSC::VM **)v24;
        }
        v93 = LOBYTE(__dst[0]);
        return *(JSC::VM **)(v12 + 8 * v93 + 42216);
      }
    }
  }
  else if ((*(_BYTE *)(v16 + 16) & 4) != 0)
  {
    goto LABEL_22;
  }
LABEL_78:
  _ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringES5_S5_ENKUlS5_S5_S5_PT_jE_clIDsEEDaS5_S5_S5_S7_j(v12, (uint64_t)a2, (uint64_t)v10, (uint64_t)a4, (char *)__dst, v23, a7, a8);
  WTF::HashTranslatorCharBuffer<char16_t>::HashTranslatorCharBuffer((uint64_t)&v159, (uint64_t)__dst, v23);
  if (v160 == 1)
  {
    v93 = *(unsigned __int16 *)v159;
    if (v93 <= 0xFF)
      return *(JSC::VM **)(v12 + 8 * v93 + 42216);
  }
  else if (!v160)
  {
    return *(JSC::VM **)v24;
  }
  v94 = v12 + 81168;
  v95 = v161;
  v96 = v161 & 0x1FF;
  v97 = *(_QWORD *)(v12 + 81168 + 8 * v96);
  if (v97)
  {
    v98 = *(_QWORD *)(v97 + 8);
    v99 = (v98 & 1) != 0 ? 0 : (WTF::StringImpl *)v98;
    v100 = *((_DWORD *)v99 + 4);
    if (v100 < 0x100)
    {
      v101 = WTF::StringImpl::hashSlowCase(v99);
      v95 = v161;
    }
    else
    {
      v101 = v100 >> 8;
    }
    if (v101 == v95 && (WTF::equal(v99, v159, v160) & 1) != 0)
      return *(JSC::VM **)(v94 + 8 * v96);
  }
  v102 = _ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringES5_ENKUlS3_RT_E_clIN3WTF24HashTranslatorCharBufferIDsEEEEDaS3_S7_(v12, &v159, v51, v52, v53, v54, v55, v56);
  SlowCase = v102;
  if (v102)
    *(_QWORD *)(v94 + 8 * v96) = v102;
  return (JSC::VM *)SlowCase;
}

uint64_t operationFindSwitchImmTargetForDouble(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int *v4;
  _DWORD *v5;
  int v6;
  BOOL v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t result;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v4 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(vars0 + 16) + 120) + 280);
  if (*v4 <= a3)
  {
    result = 146;
    __break(0xC471u);
  }
  else
  {
    v5 = v4 + 2;
    v6 = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
    if (COERCE_DOUBLE(a2 - 0x2000000000000) == (double)v6
      && (v7 = __OFSUB__(v6, a4), v8 = v6 - a4, v8 < 0 == v7)
      && (v9 = *(_DWORD **)&v5[4 * a3]) != 0
      && *v9 > v8)
    {
      v10 = &v9[2 * v8];
    }
    else
    {
      v10 = &v5[4 * a3];
    }
    return *((_QWORD *)v10 + 1);
  }
  return result;
}

uint64_t operationSwitchString(JSC::JSGlobalObject *a1, int a2, unsigned int *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  int **v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  int **v42;
  BOOL v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  _DWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t vars0;

  LODWORD(v10) = a2;
  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = vars0;
  v12 = (int **)(a4 + 8);
  if ((*(_BYTE *)(a4 + 8) & 1) != 0)
  {
    v41 = a4;
    v42 = JSC::JSRopeString::resolveRope(a4, a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    a4 = v41;
    v12 = v42;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v44 = *(_DWORD *)(v11 + 80);
    if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
    {
      v45 = a4;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      a4 = v45;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v13 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(vars0 + 16) + 120) + 288);
  if (*v13 <= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x1984AA088);
  }
  v10 = v10;
  v14 = v13 + 2;
  v15 = *(_QWORD *)a3;
  v16 = a3[2];
  if (*(_QWORD *)a3)
  {
    v17 = (WTF::StringImpl *)*v12;
    v18 = v16 - 1;
    v19 = a3[4];
    v20 = *((_DWORD *)v17 + 4);
    if (v20 < 0x100)
    {
      v36 = v17;
      v37 = a4;
      v38 = v17;
      v39 = v14;
      v40 = WTF::StringImpl::hashSlowCase(v36);
      v14 = v39;
      v17 = v38;
      a4 = v37;
      v21 = v40;
      v15 = *(_QWORD *)a3;
    }
    else
    {
      v21 = v20 >> 8;
    }
    v22 = (v21 ^ v19) & v18;
    v23 = v15 + 16 * v22;
    v24 = *(WTF **)v23;
    if (!*(_QWORD *)v23)
    {
LABEL_19:
      v16 = a3[2];
      v23 = v15 + 16 * v16;
      goto LABEL_20;
    }
    v25 = -1;
    while (1)
    {
      v26 = *((_DWORD *)v24 + 4);
      if (v26 < 0x100)
      {
        v48 = v17;
        v50 = v10;
        v46 = v11;
        v28 = a4;
        v29 = v14;
        v30 = v21;
        v27 = WTF::StringImpl::hashSlowCase(v24);
        v21 = v30;
        v14 = v29;
        a4 = v28;
        v11 = v46;
        v17 = v48;
        v10 = v50;
      }
      else
      {
        v27 = v26 >> 8;
      }
      if (++v25 > ((v22 + (_DWORD)v16 - ((v27 ^ v19) & v18)) & v18))
      {
        v15 = *(_QWORD *)a3;
        goto LABEL_19;
      }
      if (v27 == (_DWORD)v21)
      {
        v47 = v21;
        v49 = v14;
        v51 = a4;
        v43 = WTF::equal(*(WTF **)v23, v17, (const WTF::StringImpl *)a3);
        v15 = *(_QWORD *)a3;
        if (v43)
        {
          v16 = a3[2];
          v14 = v49;
          goto LABEL_20;
        }
        v14 = v49;
        a4 = v51;
        v21 = v47;
      }
      else
      {
        v15 = *(_QWORD *)a3;
      }
      v22 = (v22 + 1) & v18;
      v23 = v15 + 16 * v22;
      v24 = *(WTF **)v23;
      if (!*(_QWORD *)v23)
        goto LABEL_19;
    }
  }
  v23 = 16 * v16;
LABEL_20:
  v31 = v15 + 16 * v16;
  v32 = *(unsigned int **)&v14[2 * v10];
  v33 = *v32;
  if (v23 == v31)
  {
    v34 = a3[3];
    if (v33 <= v34)
    {
      __break(0xC471u);
      JUMPOUT(0x1984AA0A8);
    }
  }
  else
  {
    v34 = *(_DWORD *)(v23 + 12);
    if (v33 <= v34)
    {
      __break(0xC471u);
      JUMPOUT(0x1984A9FD0);
    }
  }
  return *(_QWORD *)&v32[2 * v34 + 2];
}

uint64_t operationCompareStringImplLess(WTF *a1, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return WTF::codePointCompare(a1, a2, a3) >> 31;
}

BOOL operationCompareStringImplLessEq(WTF *a1, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return (int)WTF::codePointCompare(a1, a2, a3) < 1;
}

BOOL operationCompareStringImplGreater(WTF *a1, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return (int)WTF::codePointCompare(a1, a2, a3) > 0;
}

BOOL operationCompareStringImplGreaterEq(WTF *a1, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return (int)WTF::codePointCompare(a1, a2, a3) >= 0;
}

uint64_t operationCompareStringLess(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int **v11;
  int *v12;
  int *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned __int16 *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned __int8 *v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  v11 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v11 = JSC::JSRopeString::resolveRope(a2, a1, a3, a4, a9, a5, a6, a7, a8);
  v12 = *(int **)(a3 + 8);
  if ((v12 & 1) == 0)
  {
    v13 = *v11;
    if (*v11)
      goto LABEL_5;
LABEL_23:
    if (v12)
    {
      if (v12[1])
        v27 = -1;
      else
        v27 = 0;
      return (v27 >> 31) & 1;
    }
LABEL_27:
    v27 = 0;
    return (v27 >> 31) & 1;
  }
  v12 = *JSC::JSRopeString::resolveRope(a3, a1, a3, a4, a9, a5, a6, a7, a8);
  v13 = *v11;
  if (!*v11)
    goto LABEL_23;
LABEL_5:
  if (!v12)
    goto LABEL_27;
  v14 = v12[4];
  v15 = v13[1];
  v16 = v12[1];
  if (v16 >= v15)
    v17 = v15;
  else
    v17 = v16;
  if ((v13[4] & 4) == 0)
  {
    if ((v14 & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        v29 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
        v30 = (unsigned __int16 *)*((_QWORD *)v13 + 1);
        do
        {
          v31 = *v30;
          v32 = *v29;
          v22 = v31 > v32;
          if (v31 != v32)
            goto LABEL_43;
          ++v30;
          ++v29;
        }
        while (--v17);
      }
    }
    else if ((_DWORD)v17)
    {
      v18 = (unsigned __int16 *)*((_QWORD *)v12 + 1);
      v19 = (unsigned __int16 *)*((_QWORD *)v13 + 1);
      while (1)
      {
        v20 = *v19;
        v21 = *v18;
        v22 = v20 > v21;
        if (v20 != v21)
          break;
        ++v19;
        ++v18;
        if (!--v17)
          goto LABEL_38;
      }
LABEL_43:
      v27 = 0xFFFFFFFFLL;
      if (v22)
        v27 = 1;
      return (v27 >> 31) & 1;
    }
LABEL_38:
    v37 = 0xFFFFFFFFLL;
    if (v16 < v15)
      v37 = 1;
    if (v15 == v16)
      v27 = 0;
    else
      v27 = v37;
    return (v27 >> 31) & 1;
  }
  if ((v14 & 4) != 0)
  {
    if ((_DWORD)v17)
    {
      v33 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
      v34 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
      while (1)
      {
        v35 = *v34;
        v36 = *v33;
        v22 = v35 > v36;
        if (v35 != v36)
          goto LABEL_43;
        ++v34;
        ++v33;
        if (!--v17)
          goto LABEL_38;
      }
    }
    goto LABEL_38;
  }
  if (!(_DWORD)v17)
    goto LABEL_38;
  v23 = (unsigned __int16 *)*((_QWORD *)v12 + 1);
  v24 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  while (1)
  {
    v25 = *v24;
    v26 = *v23;
    if (v26 != v25)
      break;
    ++v24;
    ++v23;
    if (!--v17)
      goto LABEL_38;
  }
  v27 = 0xFFFFFFFFLL;
  if (v26 < v25)
    v27 = 1;
  return (v27 >> 31) & 1;
}

uint64_t operationCompareStringLessEq(JSC::JSGlobalObject *a1, unint64_t a2, WTF *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int **v11;
  int **v12;
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  v11 = (int **)((char *)this + 8);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    v11 = JSC::JSRopeString::resolveRope((unint64_t)this, a1, (uint64_t)this, a4, a9, a5, a6, a7, a8);
  v12 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v12 = JSC::JSRopeString::resolveRope(a2, a1, (uint64_t)this, a4, a9, a5, a6, a7, a8);
  return WTF::codePointCompareLessThan((WTF *)v11, (const WTF::String *)v12, this) ^ 1;
}

uint64_t operationCompareStringGreater(JSC::JSGlobalObject *a1, unint64_t a2, WTF *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int **v11;
  int **v12;
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  v11 = (int **)((char *)this + 8);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    v11 = JSC::JSRopeString::resolveRope((unint64_t)this, a1, (uint64_t)this, a4, a9, a5, a6, a7, a8);
  v12 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v12 = JSC::JSRopeString::resolveRope(a2, a1, (uint64_t)this, a4, a9, a5, a6, a7, a8);
  return WTF::codePointCompareLessThan((WTF *)v11, (const WTF::String *)v12, this);
}

uint64_t operationCompareStringGreaterEq(JSC::JSGlobalObject *a1, WTF *this, int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int **v11;
  int **v12;
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  v11 = (int **)((char *)this + 8);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    v11 = JSC::JSRopeString::resolveRope((unint64_t)this, a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v12 = a3 + 1;
  if (((_BYTE)a3[1] & 1) != 0)
    v12 = JSC::JSRopeString::resolveRope((unint64_t)a3, a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  return WTF::codePointCompareLessThan((WTF *)v11, (const WTF::String *)v12, (const WTF::String *)a3) ^ 1;
}

uint64_t operationNotifyWrite(JSC::VM *a1, uint64_t *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t vars0;

  *((_QWORD *)a1 + 5) = vars0;
  JSC::WatchpointSet::touch(a2, a1, a3, a4, a5, a6, a7, a8, a9);
  return *((_QWORD *)a1 + 2);
}

uint64_t *JSC::WatchpointSet::touch(uint64_t *this, JSC::VM *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  _QWORD v9[2];

  v9[0] = &off_1E3583C90;
  v9[1] = "Executed NotifyWrite";
  if (*((_BYTE *)this + 4))
  {
    if (*((_BYTE *)this + 4) == 1)
      return JSC::WatchpointSet::fireAllSlow((uint64_t)this, a2, v9, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    __dmb(0xAu);
    *((_BYTE *)this + 4) = 1;
    __dmb(0xAu);
  }
  return this;
}

uint64_t operationThrowStackOverflowForVarargs(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *var18[4];

  v8 = *(_QWORD *)(a1 + 56);
  *(JSC::VM **)(v8 + 40) = var18[3];
  var18[0] = (JSC::VM *)v8;
  JSC::throwStackOverflowError(a1, var18, a3, a4, a5, a6, a7, a8);
  return *(_QWORD *)(v8 + 16);
}

uint64_t operationSizeOfVarargs(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  JSC::JSObject *v15;
  uint64_t v16;
  unint64_t InvalidFunctionApplyParameterError;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  JSC::JSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v36;
  int8x16_t v37;
  int v38;
  unint64_t v39;
  int v40;
  JSC::VM *v41;
  JSC::JSObject *var28[6];

  v10 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v10 + 40) = var28[5];
  v41 = (JSC::VM *)v10;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2)
      return 0;
LABEL_31:
    InvalidFunctionApplyParameterError = JSC::createInvalidFunctionApplyParameterError((uint64_t)a1, a2);
    JSC::VM::throwException((JSC::VM *)v10, a1, InvalidFunctionApplyParameterError, v18, v19, v20, v21, v22);
    return 0;
  }
  v11 = a3;
  v12 = *(unsigned __int8 *)(a2 + 5);
  if (v12 <= 0x20)
  {
    if (v12 == 19)
    {
      LODWORD(v13) = *(_DWORD *)(a2 + 8);
      goto LABEL_5;
    }
    if (v12 - 2 >= 3)
    {
LABEL_16:
      if (v12 <= 0x16)
      {
        __break(0xC471u);
        JUMPOUT(0x1984AA79CLL);
      }
      if (v12 == 36)
      {
        if ((*(_BYTE *)(a2 + 4) & 0xE) == 0)
        {
          LODWORD(v13) = 0;
          goto LABEL_5;
        }
        v13 = *(unsigned int *)(*(_QWORD *)(a2 + 8) - 8);
        goto LABEL_20;
      }
      if (v12 != 35)
      {
        if (v12 == 33)
        {
          v26 = *(_QWORD *)(a2 + 40);
          if (v26
            && (!qword_1ECF4C038
             || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
             || (v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
          {
            var28[0] = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)a2, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1768), a4, a5, a6, a7, a8);
            if (*(_DWORD *)(v10 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v36, a3, a4, a5, a6, a7, a8))
            {
              LODWORD(v13) = 0;
            }
            else
            {
              LODWORD(v13) = JSC::JSValue::toUInt32(var28, a1, a3, a4, a5, a6, a7, a8, v37);
            }
          }
          else
          {
            LODWORD(v13) = *(_DWORD *)(a2 + 32);
          }
        }
        else
        {
          if (v12 != 34)
            goto LABEL_39;
          LODWORD(v13) = JSC::ScopedArguments::length((JSC::ScopedArguments *)a2, a1, a3, a4, a5, a6, a7, a8);
        }
        v13 = v13;
        goto LABEL_20;
      }
      if ((*(_BYTE *)((16 * *(unsigned int *)a2) | 0x12) & 0x20) == 0)
      {
        v25 = *(JSC::JSObject **)(*(_QWORD *)(a2 + 8) - 16);
        var28[0] = v25;
        if ((unint64_t)v25 >= 0xFFFE000000000000)
        {
          v13 = v25 & ~((int)v25 >> 31);
          goto LABEL_20;
        }
        goto LABEL_40;
      }
LABEL_39:
      var28[0] = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)a2, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1768), a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v10 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v24, a3, a4, a5, a6, a7, a8))
      {
        v13 = 0;
LABEL_20:
        if (v13 > 0xFFFFFFFE)
          LODWORD(v13) = -1;
        goto LABEL_5;
      }
LABEL_40:
      v13 = JSC::JSValue::toLength(var28, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_20;
    }
    goto LABEL_31;
  }
  if (v12 == 35)
  {
    if ((*(_BYTE *)((16 * *(unsigned int *)a2) | 0x12) & 0x20) != 0)
    {
      var28[0] = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)a2, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1768), a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v10 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v27, a3, a4, a5, a6, a7, a8))
      {
        goto LABEL_64;
      }
    }
    else
    {
      v15 = *(JSC::JSObject **)(*(_QWORD *)(a2 + 8) - 16);
      var28[0] = v15;
      if ((unint64_t)v15 >= 0xFFFE000000000000)
      {
        LODWORD(v13) = v15 & ~((int)v15 >> 31);
        goto LABEL_5;
      }
    }
    LODWORD(v13) = JSC::JSValue::toLength(var28, a1, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  if (v12 != 33)
  {
    if (v12 == 34)
    {
      LODWORD(v13) = JSC::ScopedArguments::length((JSC::ScopedArguments *)a2, a1, a3, a4, a5, a6, a7, a8);
      goto LABEL_5;
    }
    goto LABEL_16;
  }
  v16 = *(_QWORD *)(a2 + 40);
  if (!v16
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    LODWORD(v13) = *(_DWORD *)(a2 + 32);
    goto LABEL_5;
  }
  v13 = JSC::JSObject::get((unsigned int *)a2, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1768), a4, a5, a6, a7, a8);
  var28[0] = (JSC::JSObject *)v13;
  if (*(_DWORD *)(v10 + 80))
  {
    v39 = v13;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v28, a3, a4, a5, a6, a7, a8);
    v13 = v39;
    if (hasExceptionsAfterHandlingTraps)
      goto LABEL_64;
  }
  if (v13 >= 0xFFFE000000000000)
    goto LABEL_5;
  v30 = v13 - 0x2000000000000;
  if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    JSC::JSValue::toNumberSlowCase(var28, a1, a3, a4, a5, a6, a7, a8, v29);
    v30 = v34;
  }
  v31 = (v30 >> 52) & 0x7FF;
  if ((v31 - 1023) > 0x53)
  {
LABEL_64:
    LODWORD(v13) = 0;
    goto LABEL_5;
  }
  v32 = v30 >> (51 - (v30 >> 52));
  if (v31 > 0x433)
    LODWORD(v32) = v30 << ((v30 >> 52) - 51);
  if (v31 >= 0x41F)
    v33 = v32;
  else
    v33 = (((1 << ((v30 >> 52) + 1)) - 1) & v32) + (1 << ((v30 >> 52) + 1));
  if ((v30 & 0x8000000000000000) == 0)
    LODWORD(v13) = v33;
  else
    LODWORD(v13) = -v33;
LABEL_5:
  if (*(_DWORD *)(v10 + 80))
  {
    v23 = *(_DWORD *)(v10 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
    {
      v40 = v13;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      LODWORD(v13) = v40;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (v13 > 0x10000)
  {
    v38 = v13;
    JSC::throwStackOverflowError((unint64_t)a1, &v41, a3, a4, a5, a6, a7, a8);
    LODWORD(v13) = v38;
  }
  if (v13 >= v11)
    return v13 - v11;
  else
    return 0;
}

uint64_t operationHasOwnProperty(JSC::VM **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t (*v15)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v40;
  int v41;
  int v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned __int16 *v62;
  uint64_t v63;
  unsigned int v64;
  BOOL v65;
  unsigned __int16 *v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  _DWORD *v88;
  WTF::StringImpl *v89;
  _QWORD *v90;
  uint64_t v91;
  WTF::StringImpl **v92;
  WTF::StringImpl **v93;
  WTF::StringImpl *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unsigned int OwnPropertySlotByIndex;
  int v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  JSC::VM *v126;
  unsigned __int8 *v127;
  uint64_t v128;
  unsigned int v129;
  unsigned __int8 *v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  JSC::VM *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  _DWORD *v138;
  WTF::StringImpl *v139;
  _QWORD *v140;
  uint64_t v141;
  WTF::StringImpl **v142;
  WTF::StringImpl **v143;
  WTF::StringImpl *v144;
  int v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF::StringImpl *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  char v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 *var48[10];

  v8 = a3;
  v11 = a1[7];
  *((unsigned __int8 **)v11 + 5) = var48[9];
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_187;
  if (*(_BYTE *)(a3 + 5) != 2)
  {
    v8 = JSC::JSCell::toPrimitive(a3, a1, (JSC::Structure *)2, a4, a5, a6, a7, a8);
LABEL_187:
    var48[0] = (unsigned __int8 *)v8;
    if (*((_DWORD *)v11 + 20))
    {
      v162 = *((_DWORD *)v11 + 20);
      if ((v162 & 0x27) != 0 && (v162 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v11 + 2))
      {
        v12 = *(_QWORD *)(*((_QWORD *)v11 + 5244) + 8);
        if (!v12)
          goto LABEL_7;
        goto LABEL_5;
      }
    }
    if ((v8 & 0xFFFE000000000002) == 0)
    {
      v133 = *(unsigned __int8 *)(v8 + 5);
      if (v133 == 2)
        goto LABEL_190;
      if (v133 == 4)
      {
        v12 = *(_QWORD *)(v8 + 8);
        v145 = *(_DWORD *)v12;
        *(_DWORD *)v12 += 4;
        v13 = v145 + 2;
        if (v13)
          goto LABEL_6;
        v40 = (WTF::StringImpl *)v12;
LABEL_209:
        WTF::StringImpl::~StringImpl(v40, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
        goto LABEL_7;
      }
    }
    v8 = (uint64_t)JSC::JSValue::toStringSlowCase(var48, (uint64_t)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_190:
    if (*((_DWORD *)v11 + 20))
    {
      v163 = *((_DWORD *)v11 + 20);
      if ((v163 & 0x27) != 0 && (v163 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v11 + 2))
        goto LABEL_220;
    }
    v12 = *(_QWORD *)(v8 + 8);
    v134 = a1[7];
    if ((v12 & 1) == 0)
    {
      if ((*(_BYTE *)(v12 + 16) & 0x10) == 0)
      {
        v135 = (WTF::StringImpl *)*((_QWORD *)v134 + 8096);
        if (v135 != (WTF::StringImpl *)v12)
        {
          *(_DWORD *)v12 += 2;
          *((_QWORD *)v134 + 8096) = v12;
          if (v135)
          {
            if (*(_DWORD *)v135 == 2)
            {
              WTF::StringImpl::~StringImpl(v135, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
            }
            else
            {
              *(_DWORD *)v135 -= 2;
            }
          }
          v136 = *(WTF::StringImpl **)(v8 + 8);
          if (v136)
          {
            if ((*((_BYTE *)v136 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v136 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v136, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v180);
              v136 = v180;
            }
          }
          v137 = (WTF::StringImpl *)*((_QWORD *)v134 + 8097);
          *((_QWORD *)v134 + 8097) = v136;
          if (v137)
          {
            if (*(_DWORD *)v137 == 2)
            {
              WTF::StringImpl::~StringImpl(v137, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
            }
            else
            {
              *(_DWORD *)v137 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v8 + 8) + 16) & 0x10) == 0)
        {
          v138 = (_DWORD *)*((_QWORD *)v134 + 8097);
          *v138 += 2;
          __dmb(0xAu);
          v139 = *(WTF::StringImpl **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = v138;
          v180 = v139;
          v140 = (_QWORD *)((char *)v134 + 808);
          v141 = *((unsigned int *)v134 + 205);
          if ((_DWORD)v141 == *((_DWORD *)v134 + 204))
          {
            v143 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v140, v141 + 1, (unint64_t)&v180);
            v141 = *((unsigned int *)v134 + 205);
            v142 = (WTF::StringImpl **)(*((_QWORD *)v134 + 101) + 8 * v141);
            v139 = *v143;
          }
          else
          {
            v142 = (WTF::StringImpl **)(*v140 + 8 * v141);
            v143 = &v180;
          }
          *v143 = 0;
          *v142 = v139;
          *((_DWORD *)v134 + 205) = v141 + 1;
          v144 = v180;
          v180 = 0;
          if (v144)
          {
            if (*(_DWORD *)v144 == 2)
            {
              WTF::StringImpl::~StringImpl(v144, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
            }
            else
            {
              *(_DWORD *)v144 -= 2;
            }
          }
        }
        v12 = *((_QWORD *)v134 + 8097);
      }
      goto LABEL_5;
    }
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a1);
    if (!*((_DWORD *)v134 + 20))
      goto LABEL_43;
    v126 = v134;
LABEL_154:
    if (!JSC::VM::hasExceptionsAfterHandlingTraps(v126, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_43;
    v40 = v180;
    if (v180)
    {
      v12 = 0;
      v39 = *(_DWORD *)v180;
LABEL_45:
      v41 = v39 - 2;
      if (v41)
      {
        *(_DWORD *)v40 = v41;
        goto LABEL_7;
      }
      goto LABEL_209;
    }
LABEL_220:
    v12 = 0;
    goto LABEL_7;
  }
  v12 = *(_QWORD *)(a3 + 8);
  if ((v12 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)a3, (JSC::JSGlobalObject *)a1);
    if (!*((_DWORD *)v11 + 20))
    {
LABEL_43:
      v12 = (unint64_t)v180;
      if (!v180)
        goto LABEL_7;
      v39 = *(_DWORD *)v180 + 2;
      *(_DWORD *)v180 = v39;
      v40 = (WTF::StringImpl *)v12;
      goto LABEL_45;
    }
    v126 = v11;
    goto LABEL_154;
  }
  if ((*(_BYTE *)(v12 + 16) & 0x10) == 0)
  {
    v85 = (WTF::StringImpl *)*((_QWORD *)v11 + 8096);
    if (v85 != (WTF::StringImpl *)v12)
    {
      *(_DWORD *)v12 += 2;
      *((_QWORD *)v11 + 8096) = v12;
      if (v85)
      {
        if (*(_DWORD *)v85 == 2)
        {
          WTF::StringImpl::~StringImpl(v85, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
        }
        else
        {
          *(_DWORD *)v85 -= 2;
        }
      }
      v86 = *(WTF::StringImpl **)(v8 + 8);
      if (v86)
      {
        if ((*((_BYTE *)v86 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v86 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v86, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v180);
          v86 = v180;
        }
      }
      v87 = (WTF::StringImpl *)*((_QWORD *)v11 + 8097);
      *((_QWORD *)v11 + 8097) = v86;
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
        {
          WTF::StringImpl::~StringImpl(v87, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
        }
        else
        {
          *(_DWORD *)v87 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 8) + 16) & 0x10) == 0)
    {
      v88 = (_DWORD *)*((_QWORD *)v11 + 8097);
      *v88 += 2;
      __dmb(0xAu);
      v89 = *(WTF::StringImpl **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v88;
      v180 = v89;
      v90 = (_QWORD *)((char *)v11 + 808);
      v91 = *((unsigned int *)v11 + 205);
      if ((_DWORD)v91 == *((_DWORD *)v11 + 204))
      {
        v93 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v90, v91 + 1, (unint64_t)&v180);
        v91 = *((unsigned int *)v11 + 205);
        v92 = (WTF::StringImpl **)(*((_QWORD *)v11 + 101) + 8 * v91);
        v89 = *v93;
      }
      else
      {
        v92 = (WTF::StringImpl **)(*v90 + 8 * v91);
        v93 = &v180;
      }
      *v93 = 0;
      *v92 = v89;
      *((_DWORD *)v11 + 205) = v91 + 1;
      v94 = v180;
      v180 = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
        {
          WTF::StringImpl::~StringImpl(v94, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        }
        else
        {
          *(_DWORD *)v94 -= 2;
        }
      }
    }
    v12 = *((_QWORD *)v11 + 8097);
  }
LABEL_5:
  v13 = *(_DWORD *)v12 + 2;
LABEL_6:
  *(_DWORD *)v12 = v13;
LABEL_7:
  if (*((_DWORD *)v11 + 20))
  {
    v107 = *((_DWORD *)v11 + 20);
    if ((v107 & 0x27) != 0 && (v107 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v11 + 2))
    {
      v59 = 0;
      goto LABEL_88;
    }
  }
  v182 = 0xFFFFFFFF00000000;
  v184 = 0;
  v185 = 0;
  v183 = a2;
  v186 = 0x20000;
  v187 = 0;
  LOBYTE(v188) = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  v14 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  v15 = *(uint64_t (**)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(16 * *(unsigned int *)(v14 + 0x4C) + 0x68);
  if (v15 != JSC::JSObject::getOwnPropertySlot)
  {
    OwnPropertySlotByIndex = ((uint64_t (*)(uint64_t, JSC::VM **, unint64_t, WTF::StringImpl **))v15)(a2, a1, v12, &v180);
LABEL_185:
    v32 = OwnPropertySlotByIndex;
    goto LABEL_56;
  }
  v16 = a1[7];
  if (!(v12 >> 4)
    || ((v12 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x20)) != 0)
  {
    goto LABEL_49;
  }
  v17 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x58);
  if (!v17)
  {
    v28 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x40);
    if (!v28 || *(_BYTE *)(v28 + 5) != 1 && *(_DWORD *)(v28 + 80) < 2u)
      goto LABEL_49;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), a1[7], 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v17)
      goto LABEL_49;
  }
  if (!*(_DWORD *)(v17 + 24))
    goto LABEL_49;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = *(unsigned int *)(v17 + 8);
  v21 = *(_DWORD *)(v12 + 16);
  if ((v18 & 1) != 0)
  {
    if ((v21 & 0x20) != 0)
      v21 = *(_DWORD *)(v12 + 32);
    v22 = *(_DWORD *)(v17 + 12);
    v23 = (v21 >> 8) & *(_QWORD *)&v22;
    v24 = *(unsigned __int8 *)(v19 + v23);
    if (*(_BYTE *)(v19 + v23))
    {
      v25 = v19 + v20;
      v26 = 1;
      while (1)
      {
        v27 = *(_QWORD *)(v25 + 8 * (v24 - 1));
        if (v12 == (v27 & 0xFFFFFFFFFFFFLL))
          break;
        v23 = ((_DWORD)v23 + v26) & v22;
        v24 = *(unsigned __int8 *)(v19 + v23);
        ++v26;
        if (!*(_BYTE *)(v19 + v23))
          goto LABEL_49;
      }
      a6 = (v27 >> 16) & 0xFF00000000 | HIBYTE(v27);
      goto LABEL_26;
    }
LABEL_49:
    if ((*(_BYTE *)(a2 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a2, v16, v12, (uint64_t)&v180) & 1) != 0)
    {
      goto LABEL_112;
    }
    if (v12)
    {
      v42 = *(_DWORD *)(v12 + 16);
      if ((v42 & 0x20) == 0)
      {
        v43 = *(_BYTE **)(v12 + 8);
        v44 = *(unsigned int *)(v12 + 4);
        if ((v42 & 4) != 0)
        {
          if (!(_DWORD)v44)
            goto LABEL_55;
          a3 = *v43 - 48;
          if (a3 > 9 || v44 >= 2 && *v43 == 48)
            goto LABEL_55;
          v130 = v43 + 1;
          v131 = v44 - 1;
          while (v131)
          {
            if (a3 > 0x19999999)
              goto LABEL_55;
            v132 = *v130 - 48;
            if (v132 > 9)
              goto LABEL_55;
            v32 = 0;
            v65 = __CFADD__(v132, 10 * a3);
            a3 = v132 + 10 * (_DWORD)a3;
            ++v130;
            --v131;
            if (v65)
              goto LABEL_56;
          }
        }
        else
        {
          if (!(_DWORD)v44)
            goto LABEL_55;
          a3 = *(unsigned __int16 *)v43 - 48;
          if (a3 > 9 || *(_WORD *)v43 == 48 && v44 > 1)
            goto LABEL_55;
          v66 = (unsigned __int16 *)(v43 + 2);
          v67 = v44 - 1;
          while (v67)
          {
            if (a3 > 0x19999999)
              goto LABEL_55;
            v68 = *v66 - 48;
            if (v68 > 9)
              goto LABEL_55;
            v32 = 0;
            v65 = __CFADD__(v68, 10 * a3);
            a3 = v68 + 10 * (_DWORD)a3;
            ++v66;
            --v67;
            if (v65)
              goto LABEL_56;
          }
        }
        if ((_DWORD)a3 != -1)
        {
          OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex(a2, (uint64_t)a1, (const WTF::StringImpl *)a3, (uint64_t)&v180, a5, a6, a7, a8);
          goto LABEL_185;
        }
      }
    }
LABEL_55:
    v32 = 0;
    goto LABEL_56;
  }
  if ((v21 & 0x20) != 0)
    v21 = *(_DWORD *)(v12 + 32);
  v33 = *(_DWORD *)(v17 + 12);
  v34 = v33 & (v21 >> 8);
  v35 = *(_DWORD *)(v19 + 4 * v34);
  if (!v35)
    goto LABEL_49;
  v36 = v19 + 4 * v20;
  v37 = 1;
  while (1)
  {
    v38 = (v35 - 1);
    if (v12 == *(_QWORD *)(v36 + 16 * v38))
      break;
    v34 = (v34 + v37) & v33;
    v35 = *(_DWORD *)(v19 + 4 * v34);
    ++v37;
    if (!v35)
      goto LABEL_49;
  }
  a6 = *(unsigned int *)(v36 + 16 * v38 + 8) | ((unint64_t)*(unsigned __int8 *)(v36 + 16 * v38 + 12) << 32);
LABEL_26:
  if ((_DWORD)a6 == -1)
    goto LABEL_49;
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v29 = a2 + 16;
    v30 = a6 << 32;
  }
  else
  {
    v29 = *(_QWORD *)(a2 + 8) - 8;
    v30 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v29 + (v30 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v31 = *(unsigned __int8 *)(a4 + 5);
  if (v31 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a2, (uint64_t)v16, (uint64_t)&v180, a4, SHIDWORD(a6), a6);
LABEL_112:
    v32 = 1;
    goto LABEL_56;
  }
  if (v31 != 6)
  {
LABEL_32:
    v180 = (WTF::StringImpl *)a4;
    v184 = a2;
    v182 = __PAIR64__(a6, HIDWORD(a6));
    v32 = 1;
    LOWORD(v186) = 257;
    goto LABEL_56;
  }
  v95 = *(_DWORD *)(v14 + 16) & 3;
  v96 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v98 = *(_QWORD *)(a4 + 24);
    v97 = *(_QWORD *)(a4 + 32);
    v180 = *(WTF::StringImpl **)(a4 + 8);
    v181 = v96;
    LODWORD(v182) = HIDWORD(a6);
    v184 = a2;
    BYTE1(v186) = 3;
    v32 = 1;
    if (v95 != 2)
      LOBYTE(v186) = 1;
    HIBYTE(v186) = 1;
    v190 = v98;
    v191 = v97;
  }
  else
  {
    v180 = *(WTF::StringImpl **)(a4 + 8);
    v181 = v96;
    LODWORD(v182) = HIDWORD(a6);
    v184 = a2;
    v32 = 1;
    BYTE1(v186) = 3;
    if (v95 != 2)
      LOBYTE(v186) = 1;
  }
LABEL_56:
  if (!*((_DWORD *)v11 + 20))
    goto LABEL_57;
  v109 = *((_DWORD *)v11 + 20);
  if ((v109 & 0x27) != 0 && (v109 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (!*((_QWORD *)v11 + 2))
  {
LABEL_57:
    if ((*((_QWORD *)v11 + 11634) & 1) != 0)
      v45 = 0;
    else
      v45 = *((_QWORD *)v11 + 11634);
    if (v12)
    {
      v46 = *(_DWORD *)(v12 + 16);
      if ((v46 & 0x20) == 0)
      {
        v47 = *(_BYTE **)(v12 + 8);
        v48 = *(unsigned int *)(v12 + 4);
        if ((v46 & 4) != 0)
        {
          if (!(_DWORD)v48)
            goto LABEL_65;
          v49 = *v47 - 48;
          if (v49 > 9 || v48 >= 2 && *v47 == 48)
            goto LABEL_65;
          v127 = v47 + 1;
          v128 = v48 - 1;
          while (v128)
          {
            if (v49 <= 0x19999999)
            {
              v129 = *v127 - 48;
              if (v129 <= 9)
              {
                v65 = __CFADD__(v129, 10 * v49);
                v49 = v129 + 10 * v49;
                ++v127;
                --v128;
                if (!v65)
                  continue;
              }
            }
            goto LABEL_65;
          }
        }
        else
        {
          if (!(_DWORD)v48)
            goto LABEL_65;
          v49 = *(unsigned __int16 *)v47 - 48;
          if (v49 > 9 || *(_WORD *)v47 == 48 && v48 > 1)
            goto LABEL_65;
          v62 = (unsigned __int16 *)(v47 + 2);
          v63 = v48 - 1;
          while (v63)
          {
            if (v49 <= 0x19999999)
            {
              v64 = *v62 - 48;
              if (v64 <= 9)
              {
                v65 = __CFADD__(v64, 10 * v49);
                v49 = v64 + 10 * v49;
                ++v62;
                --v63;
                if (!v65)
                  continue;
              }
            }
            goto LABEL_65;
          }
        }
        if (v49 != -1)
        {
LABEL_84:
          v59 = v32;
          goto LABEL_85;
        }
      }
    }
LABEL_65:
    if (BYTE1(v186))
      v50 = v186 == 1;
    else
      v50 = 1;
    if (v50 && *(_BYTE *)(a2 + 5) != 32)
    {
      v51 = *(_DWORD *)a2 & 0xFFFFFFFE;
      v52 = *(unsigned __int16 *)(16 * v51 + 0xC);
      if ((v52 & 8) == 0 && (*(_DWORD *)(16 * v51 + 0x10) & 3) != 2 && ((v52 & 0x10) == 0 || (v52 & 0x20) != 0))
      {
        v53 = (v52 >> 7) & 1;
        if (BYTE1(v186))
          LOBYTE(v53) = 0;
        if ((v53 & 1) == 0 && (*(_DWORD *)(16 * v51 + 0x10) & 3) == 0)
        {
          v54 = *(_DWORD *)(v12 + 16);
          if (v54 < 0x100)
            LOWORD(v55) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v12);
          else
            v55 = v54 >> 8;
          v56 = ((_WORD)v55 + (_WORD)v51) & 0x7FF;
          *(_DWORD *)v12 += 2;
          v57 = *(WTF::StringImpl **)(v45 + 16 * v56);
          *(_QWORD *)(v45 + 16 * v56) = v12;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
            {
              WTF::StringImpl::~StringImpl(v57, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
            }
            else
            {
              *(_DWORD *)v57 -= 2;
            }
          }
          v58 = v45 + 16 * v56;
          *(_DWORD *)(v58 + 8) = v51;
          *(_BYTE *)(v58 + 12) = v32;
        }
      }
    }
    goto LABEL_84;
  }
  v59 = 0;
LABEL_85:
  if (v189)
  {
    v60 = *(_DWORD *)(v188 + 4);
    if (!v60)
    {
      __break(0xC471u);
      JUMPOUT(0x1984AB124);
    }
    *(_DWORD *)(v188 + 4) = v60 - 1;
  }
LABEL_88:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return v59;
}

uint64_t operationNumberIsInteger(uint64_t a1, unint64_t a2)
{
  _BOOL8 v3;
  _BOOL8 v4;
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  v3 = trunc(COERCE_DOUBLE(a2 - 0x2000000000000)) == COERCE_DOUBLE(a2 - 0x2000000000000)
    && ((a2 - 0x2000000000000) & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000;
  v4 = a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL && v3;
  return a2 > 0xFFFDFFFFFFFFFFFFLL || v4;
}

uint64_t operationNumberIsNaN()
{
  return 0;
}

uint64_t operationIsNaN(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *var18[4];

  *(JSC::JSObject **)(*((_QWORD *)a1 + 7) + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 < 0xFFFE000000000000 && (unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  return 0;
}

unint64_t operationToIntegerOrInfinityDouble(double a1)
{
  double v1;
  uint64_t v2;

  v1 = trunc(a1 + 0.0);
  if ((*(_QWORD *)&v1 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v2 = (int)v1, v1 == (double)(int)v2)
    && ((_DWORD)v2 || (*(_QWORD *)&v1 & 0x8000000000000000) == 0))
  {
    return v2 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v1 + 0x2000000000000;
  }
}

unint64_t operationToIntegerOrInfinityUntyped(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  double v9;
  uint64_t v10;
  double v12;
  JSC::JSObject *var18[4];

  *(JSC::JSObject **)(*((_QWORD *)a1 + 7) + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 < 0xFFFE000000000000)
  {
    if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
    else
      *(_QWORD *)&v12 = (char *)a2 - 0x2000000000000;
    v9 = trunc(v12 + 0.0);
  }
  else
  {
    v9 = (double)(int)a2;
  }
  if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v10 = (int)v9, v9 == (double)(int)v10)
    && ((_DWORD)v10 || (*(_QWORD *)&v9 & 0x8000000000000000) == 0))
  {
    return v10 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v9 + 0x2000000000000;
  }
}

unint64_t operationToLengthDouble(double a1)
{
  double v1;
  uint64_t v2;

  v1 = trunc(a1 + 0.0);
  if (v1 <= 0.0)
    return 0xFFFE000000000000;
  if (v1 > 9.00719925e15)
    v1 = 9.00719925e15;
  if ((*(_QWORD *)&v1 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v2 = (int)v1, v1 == (double)(int)v2)
    && ((_DWORD)v2 || (*(_QWORD *)&v1 & 0x8000000000000000) == 0))
  {
    return v2 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v1 + 0x2000000000000;
  }
}

unint64_t operationToLengthUntyped(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  double v11;
  double v12;
  double v13;
  JSC::JSObject *var8[2];

  *(JSC::JSObject **)(*((_QWORD *)a1 + 7) + 40) = var8[1];
  var8[0] = a2;
  if ((unint64_t)a2 < 0xFFFE000000000000)
  {
    if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(var8, a1, a3, a4, a5, a6, a7, a8, a9);
    else
      *(_QWORD *)&v11 = (char *)a2 - 0x2000000000000;
    v12 = trunc(v11 + 0.0);
    if (v12 <= 0.0)
    {
      v9 = 0;
      return v9 | 0xFFFE000000000000;
    }
    if (v12 > 9.00719925e15)
      v12 = 9.00719925e15;
    v9 = (unint64_t)v12;
    if ((unint64_t)v12 >> 32)
    {
      v13 = (double)v9;
      return *(_QWORD *)&v13 + 0x2000000000000;
    }
  }
  else
  {
    v9 = a2 & ~((int)a2 >> 31);
  }
  if ((v9 & 0x80000000) != 0)
  {
    v13 = (double)v9;
    return *(_QWORD *)&v13 + 0x2000000000000;
  }
  return v9 | 0xFFFE000000000000;
}

uint64_t operationArrayIndexOfString(JSC::JSGlobalObject *a1, uint64_t a2, _QWORD *a3, int a4, int16x8_t a5, uint64_t a6, uint64_t a7, _UNKNOWN *__ptr32 *a8)
{
  uint64_t v8;
  int v9;
  JSC::JSGlobalObject *v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  int *v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  _WORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int8x16_t *v55;
  unsigned int v56;
  int8x16_t *v57;
  unsigned int v58;
  int v59;
  unsigned __int8 *v60;
  int v61;
  BOOL v62;
  BOOL v63;
  char *v65;
  uint64_t v66;
  JSC::JSGlobalObject *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int16x8_t *v73;
  unsigned int v74;
  uint8x8_t *v75;
  unsigned int v76;
  uint8x8_t *v77;
  unsigned int v78;
  int16x8_t *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int16x8_t *v90;
  int16x8_t *v91;
  int v92;
  int v93;
  int v94;
  __int32 v95;
  uint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  unsigned int v106;
  int v107;
  __int32 v108;
  uint64_t v109;
  int v110;
  int v111;
  unsigned int v112;
  JSC::JSGlobalObject *v113;
  uint64_t v114;
  _DWORD *v115;
  _UNKNOWN *__ptr32 *v116;
  char *v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  _WORD *v121;
  _WORD *v122;
  _WORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  JSC::JSGlobalObject *v127;
  JSC::JSGlobalObject *v128;
  JSC::JSGlobalObject *v129;
  _DWORD *v130;
  _DWORD *v131;
  _DWORD *v132;
  uint64_t v133;
  _QWORD v134[5];
  uint64_t v135;
  uint64_t v136;
  _QWORD var70[15];

  v8 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v8 + 40) = var70[14];
  v9 = *(_DWORD *)(a2 - 8);
  if (v9 > a4)
  {
    v12 = a1;
    v13 = a3 + 2;
    v14 = a4;
    v15 = &v136;
    v16 = &v135;
    v17 = &str_77_5;
    while (1)
    {
      v18 = *(_QWORD *)(a2 + 8 * v14);
      if (v18)
        v19 = (v18 & 0xFFFE000000000002) == 0;
      else
        v19 = 0;
      if (!v19 || *(_BYTE *)(v18 + 5) != 2)
        goto LABEL_17;
      if ((_QWORD *)v18 == a3)
        return v14;
      v20 = *(_QWORD *)(v18 + 8);
      v21 = (unsigned int *)(v18 + 16);
      v22 = (int *)(v20 + 4);
      if ((v20 & 1) != 0)
        v22 = (int *)(v18 + 16);
      v23 = *v22;
      v24 = a3[1];
      v25 = (v24 & 1) != 0 ? v13 : (_DWORD *)(v24 + 4);
      if (v23 == *v25)
        break;
LABEL_16:
      if (!*(_DWORD *)(v8 + 80))
        goto LABEL_17;
      LODWORD(v40) = *(_DWORD *)(v8 + 80);
      if ((v40 & 0x27) != 0)
        goto LABEL_179;
LABEL_112:
      if (*(_QWORD *)(v8 + 16))
      {
        LODWORD(v14) = 0;
        return v14;
      }
LABEL_17:
      if (v9 == (_DWORD)++v14)
        goto LABEL_66;
    }
    v26 = *((_QWORD *)v12 + 7);
    if ((v20 & 1) != 0)
    {
      if ((v20 & 2) != 0)
      {
        v41 = *(_QWORD *)((*(_QWORD *)(v18 + 20) & 0xFFFFFFFFFLL) + 8);
        if (v41
          && (v42 = *(unsigned int *)(v41 + 4),
              v43 = *(_QWORD *)(v18 + 24),
              v44 = v43 >> 16,
              v42 > (v43 >> 16)))
        {
          v45 = *(unsigned int *)(v41 + 16);
          v16 = *(uint64_t **)(v41 + 8);
          v46 = *v21;
          if ((int)v42 - (int)v44 > *v21 || (v46 = v42 - v44, (_DWORD)v44))
          {
            v40 = (v43 >> 16);
            v30 = v46;
            v47 = v42 - v44;
            if (((v45 >> 2) & 1) != 0)
            {
              if (v47 < v46)
                goto LABEL_178;
              v31 = *(_QWORD *)(v18 + 20) & 0xFFFFFFFFFLL;
              v27 = (_WORD *)((char *)v16 + v40);
              v30 |= 0x100000000uLL;
              v16 = &v135;
            }
            else
            {
              if (v47 < v46)
                goto LABEL_178;
              v31 = *(_QWORD *)(v18 + 20) & 0xFFFFFFFFFLL;
              v27 = (_WORD *)v16 + v40;
              v16 = &v135;
            }
          }
          else
          {
            v30 = v42 & 0xFFFFFFFEFFFFFFFFLL | (((v45 >> 2) & 1) << 32);
            v31 = *(_QWORD *)(v18 + 20) & 0xFFFFFFFFFLL;
            v27 = v16;
            v16 = &v135;
          }
        }
        else
        {
          v30 = 0x100000000;
          v27 = v17;
          v31 = *(_QWORD *)(v18 + 20) & 0xFFFFFFFFFLL;
        }
      }
      else
      {
        v65 = v17;
        v130 = v13;
        v66 = v8;
        v67 = v12;
        v68 = (unint64_t)*JSC::JSRopeString::resolveRope(v18, v12, (uint64_t)var70, (uint64_t)v15, (int8x16_t)a5, (uint64_t)v16, 32, (uint64_t)a8, (uint64_t)v134);
        if (v68)
        {
          v69 = *(unsigned int *)(v68 + 16);
          v27 = *(_WORD **)(v68 + 8);
          v68 = *(unsigned int *)(v68 + 4);
          v70 = (v69 >> 2) & 1;
        }
        else
        {
          v27 = 0;
          v70 = 1;
        }
        v17 = v65;
        v30 = v68 | (v70 << 32);
        v31 = v18;
        v8 = v66;
        v12 = v67;
        v13 = v130;
        v15 = &v136;
        v16 = &v135;
        a8 = &jpt_1984ABF04;
      }
    }
    else
    {
      if (v20)
      {
        v27 = *(_WORD **)(v20 + 8);
        v28 = *(unsigned int *)(v20 + 4);
        v29 = ((unint64_t)*(unsigned int *)(v20 + 16) >> 2) & 1;
      }
      else
      {
        v27 = 0;
        v28 = 0;
        v29 = 1;
      }
      v30 = v28 | (v29 << 32);
      v31 = *(_QWORD *)(a2 + 8 * v14);
    }
    if (*(_DWORD *)(v26 + 80))
    {
      v92 = *(_DWORD *)(v26 + 80);
      if ((v92 & 0x27) != 0 && (v92 & 0x20) == 0)
      {
        v125 = v31;
        v128 = v12;
        v118 = v8;
        v119 = v13;
        v122 = v27;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v26 + 64), 7u, (uint64_t)var70, (uint64_t)v15, (uint64_t)v16, 32, (uint64_t)a8, (uint64_t)v134);
        v27 = v122;
        v31 = v125;
        v17 = &str_77_5;
        a8 = &jpt_1984ABF04;
        v16 = &v135;
        v15 = &v136;
        v13 = v119;
        v12 = v128;
        v8 = v118;
      }
      if (*(_QWORD *)(v26 + 16))
      {
        var70[2] = v31;
        goto LABEL_16;
      }
    }
    v32 = a3[1];
    if ((v32 & 1) != 0)
    {
      if ((v32 & 2) != 0)
      {
        v133 = *(_QWORD *)((char *)a3 + 20) & 0xFFFFFFFFFLL;
        v48 = *(_QWORD *)(v133 + 8);
        if (v48
          && (v49 = *(unsigned int *)(v48 + 4),
              v50 = a3[3],
              v51 = v50 >> 16,
              v49 > (v50 >> 16)))
        {
          v16 = (uint64_t *)v27;
          v15 = (_QWORD *)v31;
          v52 = *(unsigned int *)(v48 + 16);
          v34 = *(char **)(v48 + 8);
          v53 = *v13;
          if ((v49 - v51) > *v13 || (v53 = v49 - v51, (_DWORD)v51))
          {
            v54 = (v50 >> 16);
            v36 = v53;
            v40 = v49 - v51;
            if (((v52 >> 2) & 1) != 0)
            {
              if (v40 < v53)
                goto LABEL_178;
              v34 += v54;
              v36 = v53 | 0x100000000;
            }
            else
            {
              if (v40 < v53)
                goto LABEL_178;
              v34 += 2 * v54;
            }
          }
          else
          {
            v36 = v49 & 0xFFFFFFFEFFFFFFFFLL | (((v52 >> 2) & 1) << 32);
          }
          v15 = &v136;
          v27 = v16;
          v16 = &v135;
        }
        else
        {
          v36 = 0x100000000;
          v34 = v17;
        }
LABEL_28:
        if (*(_DWORD *)(v26 + 80))
        {
          v93 = *(_DWORD *)(v26 + 80);
          if ((v93 & 0x27) != 0 && (v93 & 0x20) == 0)
          {
            v129 = v12;
            v132 = v13;
            v120 = v8;
            v123 = v27;
            v126 = v31;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v26 + 64), 7u, (uint64_t)var70, (uint64_t)v15, (uint64_t)v16, 32, (uint64_t)a8, (uint64_t)v134);
            v27 = v123;
            v31 = v126;
            v17 = &str_77_5;
            a8 = &jpt_1984ABF04;
            v16 = &v135;
            v15 = &v136;
            v12 = v129;
            v13 = v132;
            v8 = v120;
          }
          if (*(_QWORD *)(v26 + 16))
            goto LABEL_38;
        }
        var70[1] = v18;
        var70[0] = a3;
        if (v23)
          v37 = v27 == (_WORD *)v34;
        else
          v37 = 1;
        if (v37)
          return v14;
        v38 = v27;
        v39 = v36 & 0x100000000;
        LOBYTE(v40) = v36;
        if ((v30 & 0x100000000) != 0)
        {
          if (v39)
          {
            if (!(_DWORD)v30 || !(_DWORD)v36)
              goto LABEL_178;
            if (*(unsigned __int8 *)v27 != *v34)
              goto LABEL_38;
            v55 = (int8x16_t *)((char *)v27 + 1);
            v56 = v36 - 1;
            v57 = (int8x16_t *)(v34 + 1);
            if ((_DWORD)v36 != 2)
            {
              if ((_DWORD)v36 == 1)
                return v14;
              v58 = 32 - __clz(v36 - 2);
              if (v58 != 3)
              {
                v81 = v31;
                switch(v58)
                {
                  case 1u:
                    v63 = v55->u16[0] == v57->u16[0];
                    goto LABEL_117;
                  case 2u:
                    if (v55->u16[0] != v57->u16[0])
                      goto LABEL_38;
                    v59 = *(unsigned __int16 *)((char *)v38 + v36 - 2);
                    v61 = *(unsigned __int16 *)&v34[v36 - 2];
                    goto LABEL_57;
                  case 4u:
                    if (v55->i64[0] != v57->i64[0])
                      goto LABEL_38;
                    v82 = *(_QWORD *)((char *)v38 + v36 - 8);
                    v83 = (unsigned __int8 *)&v34[v36];
                    goto LABEL_108;
                  case 5u:
                    a5 = (int16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)v38 + v36 - 16), *(int8x16_t *)&v34[v36 - 16]), vceqq_s8(*(int8x16_t *)((char *)v38 + 1), *(int8x16_t *)(v34 + 1)));
                    a5.i8[0] = vminvq_u8((uint8x16_t)a5);
                    v63 = a5.i32[0] != 0;
                    goto LABEL_117;
                  default:
                    a5 = (int16x8_t)vceqq_s8(*v55, *v57);
                    a5.i8[0] = vminvq_u8((uint8x16_t)a5);
                    if (!a5.i32[0])
                      goto LABEL_38;
                    if (v56 < 0x10)
                      goto LABEL_104;
                    v106 = v56 & 0xF;
                    break;
                }
                while (1)
                {
                  a5 = (int16x8_t)vceqq_s8(*(int8x16_t *)((char *)v55 + v106), *(int8x16_t *)((char *)v57 + v106));
                  a5.i8[0] = vminvq_u8((uint8x16_t)a5);
                  if (!a5.i32[0])
                    break;
                  v106 += 16;
                  if (v106 >= v56)
                    goto LABEL_104;
                }
LABEL_171:
                v134[4] = v133;
                v134[3] = v31;
                goto LABEL_16;
              }
              if (v55->i32[0] != v57->i32[0])
                goto LABEL_38;
              v59 = *(_DWORD *)((char *)v38 + v36 - 4);
              v60 = (unsigned __int8 *)&v34[v36];
LABEL_56:
              v61 = *((_DWORD *)v60 - 1);
LABEL_57:
              v62 = v59 == v61;
              goto LABEL_58;
            }
            if (v36 == 1)
              goto LABEL_178;
            v104 = v55->u8[0];
            v105 = v57->u8[0];
          }
          else
          {
            if (!(_DWORD)v30 || !(_DWORD)v36)
              goto LABEL_178;
            if (*(_WORD *)v34 != *(unsigned __int8 *)v27)
              goto LABEL_38;
            v77 = (uint8x8_t *)((char *)v27 + 1);
            v78 = v36 - 1;
            v79 = (int16x8_t *)(v34 + 2);
            if ((v36 - 1) >= 8)
            {
              a5 = vceqq_s16(*v79, (int16x8_t)vmovl_u8(*v77));
              a5.i16[0] = vminvq_u16((uint16x8_t)a5);
              if (!a5.i32[0])
                goto LABEL_38;
              v80 = v78 & 7;
              while (1)
              {
                a5 = vceqq_s16(*(int16x8_t *)((char *)v79 + 2 * v80), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v77 + v80)));
                a5.i16[0] = vminvq_u16((uint16x8_t)a5);
                if (!a5.i32[0])
                  goto LABEL_171;
                v80 += 8;
                if (v80 >= v78)
                  goto LABEL_104;
              }
            }
            if (v78 >= 4)
            {
              v84 = (v77->u32[0] | ((unint64_t)v77->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              v19 = ((v84 | (v84 << 8)) & 0xFF00FF00FF00FFLL) == v79->i64[0];
              v85 = v78 & 3;
              v86 = (*(unsigned int *)((char *)v77->u32 + v85) | ((unint64_t)*(unsigned int *)((char *)v77->u32 + v85) << 16)) & 0xFFFF0000FFFFLL;
              v87 = (v86 | (v86 << 8)) & 0xFF00FF00FF00FFLL;
              v88 = *(uint64_t *)((char *)v79->i64 + 2 * v85);
              v62 = v19 && v87 == v88;
              goto LABEL_58;
            }
            if (v78 >= 2)
            {
              v94 = (v77->u16[0] | (v77->u16[0] << 8)) & 0xFF00FF;
              v95 = v79->i32[0];
              v96 = v78 & 1;
              v97 = (*(unsigned __int16 *)((char *)v77->u16 + v96) | (*(unsigned __int16 *)((char *)v77->u16 + v96) << 8)) & 0xFF00FF;
              v98 = *(__int32 *)((char *)v79->i32 + 2 * v96);
              v62 = v94 == v95 && v97 == v98;
              goto LABEL_58;
            }
            if ((_DWORD)v36 != 2)
              return v14;
            v105 = v77->u8[0];
            v104 = v79->u16[0];
          }
          v62 = v104 == v105;
LABEL_58:
          v63 = v62;
LABEL_61:
          v136 = v133;
          v135 = v31;
          if (v63)
            return v14;
          goto LABEL_16;
        }
        if (!v39)
        {
          if (!(_DWORD)v30 || !(_DWORD)v36)
          {
LABEL_178:
            __break(1u);
LABEL_179:
            if ((v40 & 0x20) == 0)
            {
              v113 = v12;
              v114 = v8;
              v115 = v13;
              v116 = a8;
              v117 = v17;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)var70, (uint64_t)v15, (uint64_t)v16, 32, (uint64_t)a8, (uint64_t)v134);
              v17 = v117;
              a8 = v116;
              v16 = &v135;
              v15 = &v136;
              v13 = v115;
              v12 = v113;
              v8 = v114;
            }
            goto LABEL_112;
          }
          if (*v27 != *(_WORD *)v34)
          {
LABEL_38:
            v134[0] = v133;
            goto LABEL_16;
          }
          v89 = v36 - 1;
          if ((_DWORD)v36 == 1)
            return v14;
          v81 = v31;
          v90 = (int16x8_t *)(v38 + 1);
          v91 = (int16x8_t *)(v34 + 2);
          if ((_DWORD)v36 != 2)
          {
            switch(31 - __clz(v36 - 2))
            {
              case 0u:
                v63 = v90->i32[0] == v91->i32[0];
                goto LABEL_117;
              case 1u:
                if (v90->i32[0] != v91->i32[0])
                  goto LABEL_38;
                v59 = *(_DWORD *)&v38[v36 - 2];
                v60 = (unsigned __int8 *)&v34[2 * v36];
                goto LABEL_56;
              case 2u:
                if (v90->i64[0] != v91->i64[0])
                  goto LABEL_38;
                v82 = *(_QWORD *)&v38[v36 - 4];
                v83 = (unsigned __int8 *)&v34[2 * v36];
LABEL_108:
                v62 = v82 == *((_QWORD *)v83 - 1);
                goto LABEL_58;
              case 3u:
                a5 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v38[v36 - 8], *(int16x8_t *)&v34[2 * v36 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v38 + 1), *(int16x8_t *)(v34 + 2)));
                a5.i16[0] = vminvq_u16((uint16x8_t)a5);
                v63 = a5.i32[0] != 0;
                goto LABEL_117;
              default:
                a5 = vceqq_s16(*v90, *v91);
                a5.i16[0] = vminvq_u16((uint16x8_t)a5);
                if (!a5.i32[0])
                  goto LABEL_38;
                if (v89 < 8)
                  goto LABEL_104;
                v112 = v89 & 7;
                break;
            }
            while (1)
            {
              a5 = vceqq_s16(*(int16x8_t *)((char *)v90 + 2 * v112), *(int16x8_t *)((char *)v91 + 2 * v112));
              a5.i16[0] = vminvq_u16((uint16x8_t)a5);
              if (!a5.i32[0])
                break;
              v112 += 8;
              if (v112 >= v89)
              {
LABEL_104:
                v134[2] = v133;
                v134[1] = v31;
                return v14;
              }
            }
            goto LABEL_171;
          }
          v63 = v90->u16[0] == v91->u16[0];
          v15 = &v136;
          v16 = &v135;
LABEL_117:
          v31 = v81;
          goto LABEL_61;
        }
        if (!(_DWORD)v30 || !(_DWORD)v36)
          goto LABEL_178;
        if (*v27 != *v34)
          goto LABEL_38;
        v73 = (int16x8_t *)(v27 + 1);
        v74 = v36 - 1;
        v75 = (uint8x8_t *)(v34 + 1);
        if ((v36 - 1) >= 8)
        {
          a5 = vceqq_s16(*v73, (int16x8_t)vmovl_u8(*v75));
          a5.i16[0] = vminvq_u16((uint16x8_t)a5);
          if (!a5.i32[0])
            goto LABEL_38;
          v76 = v74 & 7;
          while (1)
          {
            a5 = vceqq_s16(*(int16x8_t *)((char *)v73 + 2 * v76), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v75 + v76)));
            a5.i16[0] = vminvq_u16((uint16x8_t)a5);
            if (!a5.i32[0])
              goto LABEL_171;
            v76 += 8;
            if (v76 >= v74)
              goto LABEL_104;
          }
        }
        if (v74 >= 4)
        {
          v99 = (v75->u32[0] | ((unint64_t)v75->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v19 = ((v99 | (v99 << 8)) & 0xFF00FF00FF00FFLL) == v73->i64[0];
          v100 = v74 & 3;
          v101 = (*(unsigned int *)((char *)v75->u32 + v100) | ((unint64_t)*(unsigned int *)((char *)v75->u32
                                                                                                  + v100) << 16)) & 0xFFFF0000FFFFLL;
          v102 = (v101 | (v101 << 8)) & 0xFF00FF00FF00FFLL;
          v103 = *(uint64_t *)((char *)v73->i64 + 2 * v100);
          v62 = v19 && v102 == v103;
          goto LABEL_58;
        }
        if (v74 >= 2)
        {
          v107 = (v75->u16[0] | (v75->u16[0] << 8)) & 0xFF00FF;
          v108 = v73->i32[0];
          v109 = v74 & 1;
          v110 = (*(unsigned __int16 *)((char *)v75->u16 + v109) | (*(unsigned __int16 *)((char *)v75->u16 + v109) << 8)) & 0xFF00FF;
          v111 = *(__int32 *)((char *)v73->i32 + 2 * v109);
          v62 = v107 == v108 && v110 == v111;
          goto LABEL_58;
        }
        if ((_DWORD)v36 != 2)
          return v14;
        v61 = v75->u8[0];
        v59 = v73->u16[0];
        goto LABEL_57;
      }
      v121 = v27;
      v124 = v31;
      v127 = v12;
      v131 = v13;
      v71 = v8;
      v32 = (unint64_t)*JSC::JSRopeString::resolveRope((unint64_t)a3, v12, (uint64_t)var70, (uint64_t)v15, (int8x16_t)a5, (uint64_t)v16, 32, (uint64_t)a8, (uint64_t)v134);
      if (v32)
      {
        v72 = *(unsigned int *)(v32 + 16);
        v34 = *(char **)(v32 + 8);
        v32 = *(unsigned int *)(v32 + 4);
        v35 = (v72 >> 2) & 1;
      }
      else
      {
        v34 = 0;
        v35 = 1;
      }
      v8 = v71;
      v12 = v127;
      v13 = v131;
      v15 = &v136;
      v16 = &v135;
      a8 = &jpt_1984ABF04;
      v17 = &str_77_5;
      v27 = v121;
      v31 = v124;
    }
    else if (v32)
    {
      v33 = *(unsigned int *)(v32 + 16);
      v34 = *(char **)(v32 + 8);
      v32 = *(unsigned int *)(v32 + 4);
      v35 = (v33 >> 2) & 1;
    }
    else
    {
      v34 = 0;
      v35 = 1;
    }
    v36 = v32 | (v35 << 32);
    v133 = (uint64_t)a3;
    goto LABEL_28;
  }
LABEL_66:
  LODWORD(v14) = -1;
  return v14;
}

uint64_t operationArrayIndexOfValueInt32OrContiguous(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSBigInt *this, JSC::JSBigInt **a4, uint64_t a5, uint64_t a6, uint64_t a7, _UNKNOWN *__ptr32 *a8, int16x8_t a9)
{
  unint64_t v9;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  unsigned int *v20;
  int *v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int8x16_t *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  char *v54;
  int v55;
  BOOL v56;
  BOOL v57;
  uint64_t v58;
  int v60;
  uint64_t v62;
  unint64_t v63;
  int v64;
  BOOL v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  const WTF::StringImpl *v70;
  double v71;
  uint64_t v72;
  JSC::JSGlobalObject *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int16x8_t *v79;
  unsigned int v80;
  uint8x8_t *v81;
  unsigned int v82;
  uint8x8_t *v83;
  unsigned int v84;
  int16x8_t *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int16x8_t *v97;
  int16x8_t *v98;
  int v99;
  int v100;
  int v101;
  __int32 v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  __int32 v115;
  uint64_t v116;
  int v117;
  int v118;
  _BOOL4 v119;
  uint64_t v120;
  uint64_t v121;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  int64x2_t v128;
  int8x8_t v129;
  int64x2_t *v130;
  char *v131;
  uint32x2_t v132;
  BOOL v133;
  uint64_t v134;
  _DWORD *v135;
  uint64_t v136;
  uint64_t v137;
  JSC::JSGlobalObject *v138;
  _UNKNOWN *__ptr32 *v139;
  uint64_t v140;
  JSC::JSGlobalObject *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  JSC::JSGlobalObject *v146;
  JSC::JSGlobalObject *v147;
  _DWORD *v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  JSC::JSBigInt *v156;
  uint64_t v157;
  JSC::JSBigInt *v158;
  JSC::JSBigInt *v159;
  _QWORD var68[14];

  v11 = a1;
  v12 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v12 + 40) = var68[13];
  if (((unint64_t)this & 0xFFFE000000000002) != 0)
  {
    v14 = *(_DWORD *)(a2 - 8);
    if (v14 <= (int)a4)
      return 0xFFFFFFFFLL;
    goto LABEL_71;
  }
  v13 = *((unsigned __int8 *)this + 5);
  v14 = *(_DWORD *)(a2 - 8);
  if ((_DWORD)v13 != 2)
  {
    if (v14 <= (int)a4)
      return 0xFFFFFFFFLL;
    if (v13 >= 0x17)
    {
      v127 = v14 - (_DWORD)a4;
      if (v14 - (int)a4 < 0)
      {
LABEL_234:
        __break(1u);
      }
      else
      {
        v9 = a2 + 8 * (int)a4;
        v13 = v9 + 8 * (int)v127;
        if (v127 >= 0x20)
        {
          v128 = vdupq_n_s64((unint64_t)this);
          do
          {
            v129 = (int8x8_t)vmovn_s64(vceqq_s64(*(int64x2_t *)v9, v128));
            if (v129)
              goto LABEL_222;
            v130 = (int64x2_t *)(v9 + 16);
            v131 = (char *)(v9 + 24);
            v9 += 16;
          }
          while ((unint64_t)v131 < v13);
          if ((unint64_t)v130 < v13)
          {
            v129 = (int8x8_t)vmovn_s64(vceqq_s64(*(int64x2_t *)(v13 - 16), v128));
            v9 = v13;
            if (v129)
            {
              v9 = v13 - 16;
LABEL_222:
              v132 = (uint32x2_t)vorn_s8((int8x8_t)0x100000000, v129);
              v9 += 8 * vpmin_u32(v132, v132).u8[0];
            }
LABEL_223:
            if (v9)
              v133 = v9 == v13;
            else
              v133 = 1;
            if (v133)
              return 0xFFFFFFFFLL;
            else
              return ((v9 - a2) >> 3);
          }
LABEL_239:
          v9 = v13;
          goto LABEL_223;
        }
      }
      if (v14 != (_DWORD)a4)
      {
        v134 = 8 * v14 - 8 * (int)a4;
        while (*(JSC::JSBigInt **)v9 != this)
        {
          v9 += 8;
          v134 -= 8;
          if (!v134)
            goto LABEL_239;
        }
        goto LABEL_223;
      }
      goto LABEL_239;
    }
LABEL_71:
    v60 = v14 - (_DWORD)a4;
    if (v14 > (int)a4)
    {
      v62 = (int)a4;
      v58 = 0xFFFFFFFFLL;
      while (1)
      {
        v63 = *(_QWORD *)(a2 + 8 * v62);
        if (!v63)
          goto LABEL_86;
        if ((unint64_t)this >= 0xFFFE000000000000)
        {
          if (v63 >= 0xFFFE000000000000)
          {
LABEL_171:
            v65 = v63 == (_QWORD)this;
            goto LABEL_81;
          }
        }
        else if (!((unint64_t)this >> 49))
        {
          goto LABEL_77;
        }
        if (v63 >> 49)
        {
          *(double *)a9.i64 = (double)(int)this;
          if ((unint64_t)this <= 0xFFFDFFFFFFFFFFFFLL)
            a9.i64[0] = (uint64_t)this - 0x2000000000000;
          v71 = (double)(int)v63;
          if (v63 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v71 = v63 - 0x2000000000000;
          v65 = *(double *)a9.i64 == v71;
          goto LABEL_81;
        }
LABEL_77:
        if (((v63 | (unint64_t)this) & 0xFFFE000000000002) != 0)
          goto LABEL_171;
        v64 = *((unsigned __int8 *)this + 5);
        if (v64 != 2)
        {
          if (v64 == 3 && *(_BYTE *)(v63 + 5) == 3)
          {
            v125 = a2;
            v126 = v12;
            v66 = JSC::JSBigInt::equals(this, *(JSC::JSBigInt **)(a2 + 8 * v62), (JSC::JSBigInt *)v63);
            a2 = v125;
            v12 = v126;
            goto LABEL_84;
          }
LABEL_80:
          v65 = this == (JSC::JSBigInt *)v63;
LABEL_81:
          v66 = v65;
          goto LABEL_84;
        }
        if (*(_BYTE *)(v63 + 5) != 2)
          goto LABEL_80;
        v67 = a2;
        v68 = v12;
        v69 = (WTF *)*((_QWORD *)this + 1);
        if ((v69 & 1) != 0
          || (v70 = *(const WTF::StringImpl **)(v63 + 8), (v70 & 1) != 0))
        {
          v66 = JSC::JSString::equalSlowCase(this, a1, (JSC::JSString *)v63, (uint64_t)a4, a5, a6, a7, (uint64_t)a8, (int8x16_t)a9);
        }
        else
        {
          v66 = WTF::equal(v69, v70, (const WTF::StringImpl *)v63);
        }
        v12 = v68;
        a2 = v67;
LABEL_84:
        if (*(_DWORD *)(v12 + 80))
        {
          v119 = v66;
          v120 = v12;
          v121 = a2;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, v63, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
          a2 = v121;
          v12 = v120;
          v123 = hasExceptionsAfterHandlingTraps;
          v66 = v119;
          if (v123)
            return 0;
        }
        if (v66)
          return v62;
LABEL_86:
        ++v62;
        if (!--v60)
          return v58;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (v14 <= (int)a4)
  {
LABEL_67:
    LODWORD(v16) = -1;
    return v16;
  }
  v15 = (_DWORD *)((char *)this + 16);
  v16 = (int)a4;
  a4 = &v159;
  while (1)
  {
    v17 = *(_QWORD *)(a2 + 8 * v16);
    v18 = v17 && (v17 & 0xFFFE000000000002) == 0;
    if (v18 && *(_BYTE *)(v17 + 5) == 2)
      break;
LABEL_19:
    if (v14 == (_DWORD)++v16)
      goto LABEL_67;
  }
  if ((JSC::JSBigInt *)v17 == this)
    return v16;
  v19 = *(_QWORD *)(v17 + 8);
  v20 = (unsigned int *)(v17 + 16);
  v21 = (int *)(v19 + 4);
  if ((v19 & 1) != 0)
    v21 = (int *)(v17 + 16);
  v22 = *v21;
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) != 0)
    v24 = v15;
  else
    v24 = (_DWORD *)(v23 + 4);
  if (v22 != *v24)
    goto LABEL_18;
  v25 = *((_QWORD *)v11 + 7);
  if ((v19 & 1) != 0)
  {
    if ((v19 & 2) != 0)
    {
      v38 = *(_QWORD *)((*(_QWORD *)(v17 + 20) & 0xFFFFFFFFFLL) + 8);
      if (v38
        && (v39 = *(unsigned int *)(v38 + 4),
            v40 = *(_QWORD *)(v17 + 24),
            v41 = v40 >> 16,
            v39 > (v40 >> 16)))
      {
        v42 = *(unsigned int *)(v38 + 16);
        v26 = *(char **)(v38 + 8);
        v43 = *v20;
        if ((int)v39 - (int)v41 > *v20 || (v43 = v39 - v41, (_DWORD)v41))
        {
          v13 = (v40 >> 16);
          v29 = v43;
          v9 = v39 - v41;
          if (((v42 >> 2) & 1) != 0)
          {
            if (v9 < v43)
              goto LABEL_234;
            v30 = *(_QWORD *)(v17 + 20) & 0xFFFFFFFFFLL;
            v26 += v13;
            v29 |= 0x100000000uLL;
          }
          else
          {
            if (v9 < v43)
              goto LABEL_234;
            v30 = *(_QWORD *)(v17 + 20) & 0xFFFFFFFFFLL;
            v26 += 2 * v13;
          }
        }
        else
        {
          v29 = v39 & 0xFFFFFFFEFFFFFFFFLL | (((v42 >> 2) & 1) << 32);
          v30 = *(_QWORD *)(v17 + 20) & 0xFFFFFFFFFLL;
        }
      }
      else
      {
        v29 = 0x100000000;
        v26 = &str_77_5;
        v30 = *(_QWORD *)(v17 + 20) & 0xFFFFFFFFFLL;
      }
    }
    else
    {
      v148 = v15;
      v152 = a2;
      v72 = v12;
      v73 = v11;
      v74 = (unint64_t)*JSC::JSRopeString::resolveRope(v17, v11, (uint64_t)var68, (uint64_t)&v159, (int8x16_t)a9, (uint64_t)&v158, (uint64_t)&v157, 32, (uint64_t)a8);
      if (v74)
      {
        v75 = *(unsigned int *)(v74 + 16);
        v26 = *(char **)(v74 + 8);
        v74 = *(unsigned int *)(v74 + 4);
        v76 = (v75 >> 2) & 1;
      }
      else
      {
        v26 = 0;
        v76 = 1;
      }
      v29 = v74 | (v76 << 32);
      v30 = v17;
      v12 = v72;
      v15 = v148;
      a2 = v152;
      v11 = v73;
      a4 = &v159;
      a8 = &jpt_1984ACBC0;
    }
  }
  else
  {
    if (v19)
    {
      v26 = *(char **)(v19 + 8);
      v27 = *(unsigned int *)(v19 + 4);
      v28 = ((unint64_t)*(unsigned int *)(v19 + 16) >> 2) & 1;
    }
    else
    {
      v26 = 0;
      v27 = 0;
      v28 = 1;
    }
    v29 = v27 | (v28 << 32);
    v30 = *(_QWORD *)(a2 + 8 * v16);
  }
  if (*(_DWORD *)(v25 + 80))
  {
    v99 = *(_DWORD *)(v25 + 80);
    if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
    {
      v150 = v15;
      v154 = a2;
      v140 = v12;
      v141 = v11;
      v144 = v30;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v25 + 64), 7u, (uint64_t)var68, (uint64_t)&v159, (uint64_t)&v158, (uint64_t)&v157, 32, (uint64_t)a8);
      v30 = v144;
      a8 = &jpt_1984ACBC0;
      a4 = &v159;
      v15 = v150;
      a2 = v154;
      v11 = v141;
      v12 = v140;
    }
    if (*(_QWORD *)(v25 + 16))
    {
      var68[1] = v30;
      goto LABEL_18;
    }
  }
  v31 = *((_QWORD *)this + 1);
  if ((v31 & 1) == 0)
  {
    if (v31)
    {
      v32 = *(unsigned int *)(v31 + 16);
      v33 = *(char **)(v31 + 8);
      v31 = *(unsigned int *)(v31 + 4);
      v34 = (v32 >> 2) & 1;
    }
    else
    {
      v33 = 0;
      v34 = 1;
    }
LABEL_29:
    v35 = v31 | (v34 << 32);
    v156 = this;
    goto LABEL_30;
  }
  if ((v31 & 2) == 0)
  {
    v143 = v30;
    v146 = v11;
    v149 = v15;
    v153 = a2;
    v77 = v12;
    v31 = (unint64_t)*JSC::JSRopeString::resolveRope((unint64_t)this, v11, (uint64_t)var68, (uint64_t)&v159, (int8x16_t)a9, (uint64_t)&v158, (uint64_t)&v157, 32, (uint64_t)a8);
    if (v31)
    {
      v78 = *(unsigned int *)(v31 + 16);
      v33 = *(char **)(v31 + 8);
      v31 = *(unsigned int *)(v31 + 4);
      v34 = (v78 >> 2) & 1;
    }
    else
    {
      v33 = 0;
      v34 = 1;
    }
    v12 = v77;
    v15 = v149;
    a2 = v153;
    a4 = &v159;
    a8 = &jpt_1984ACBC0;
    v30 = v143;
    v11 = v146;
    goto LABEL_29;
  }
  v156 = (JSC::JSBigInt *)(*(_QWORD *)((_BYTE *)this + 20) & 0xFFFFFFFFFLL);
  v44 = *((_QWORD *)v156 + 1);
  if (v44
    && (v45 = *(unsigned int *)(v44 + 4),
        v46 = *((_QWORD *)this + 3),
        v9 = v46 >> 16,
        v45 > (v46 >> 16)))
  {
    v47 = *(unsigned int *)(v44 + 16);
    v33 = *(char **)(v44 + 8);
    v48 = *v15;
    if ((v45 - v9) > *v15 || (v48 = v45 - v9, (_DWORD)v9))
    {
      v49 = (v46 >> 16);
      v35 = v48;
      v13 = v45 - v9;
      if (((v47 >> 2) & 1) != 0)
      {
        if (v13 < v48)
          goto LABEL_234;
        v33 += v49;
        v35 = v48 | 0x100000000;
      }
      else
      {
        if (v13 < v48)
          goto LABEL_234;
        v33 += 2 * v49;
      }
    }
    else
    {
      v35 = v45 & 0xFFFFFFFEFFFFFFFFLL | (((v47 >> 2) & 1) << 32);
    }
  }
  else
  {
    v35 = 0x100000000;
    v33 = &str_77_5;
  }
LABEL_30:
  if (*(_DWORD *)(v25 + 80))
  {
    v100 = *(_DWORD *)(v25 + 80);
    if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
    {
      v151 = v15;
      v155 = a2;
      v142 = v12;
      v145 = v30;
      v147 = v11;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v25 + 64), 7u, (uint64_t)var68, (uint64_t)&v159, (uint64_t)&v158, (uint64_t)&v157, 32, (uint64_t)a8);
      v30 = v145;
      v11 = v147;
      a8 = &jpt_1984ACBC0;
      a4 = &v159;
      v15 = v151;
      a2 = v155;
      v12 = v142;
    }
    if (*(_QWORD *)(v25 + 16))
      goto LABEL_18;
  }
  var68[0] = v17;
  v159 = this;
  if (v22)
    v36 = v26 == v33;
  else
    v36 = 1;
  if (v36)
    return v16;
  v9 = v29;
  v37 = v35 & 0x100000000;
  v13 = v35;
  if ((v29 & 0x100000000) != 0)
  {
    if (v37)
    {
      if (!(_DWORD)v29 || !(_DWORD)v35)
        goto LABEL_234;
      if (*v26 != *v33)
        goto LABEL_18;
      v50 = (int8x16_t *)(v26 + 1);
      v51 = v35 - 1;
      v9 = (unint64_t)(v33 + 1);
      if ((_DWORD)v35 != 2)
      {
        if ((_DWORD)v35 == 1)
          return v16;
        v52 = 32 - __clz(v35 - 2);
        if (v52 != 3)
        {
          v87 = v30;
          switch(v52)
          {
            case 1u:
              v57 = v50->u16[0] == *(unsigned __int16 *)v9;
              goto LABEL_148;
            case 2u:
              if (v50->u16[0] != *(unsigned __int16 *)v9)
                goto LABEL_18;
              v53 = *(unsigned __int16 *)&v26[v35 - 2];
              v55 = *(unsigned __int16 *)&v33[v35 - 2];
              goto LABEL_59;
            case 4u:
              if (v50->i64[0] != *(_QWORD *)v9)
                goto LABEL_18;
              v88 = *(_QWORD *)&v26[v35 - 8];
              v89 = &v33[v35];
              goto LABEL_138;
            case 5u:
              a9 = (int16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v26[v35 - 16], *(int8x16_t *)&v33[v35 - 16]), vceqq_s8(*(int8x16_t *)(v26 + 1), *(int8x16_t *)(v33 + 1)));
              a9.i8[0] = vminvq_u8((uint8x16_t)a9);
              v57 = a9.i32[0] != 0;
              goto LABEL_148;
            default:
              a9 = (int16x8_t)vceqq_s8(*v50, *(int8x16_t *)v9);
              a9.i8[0] = vminvq_u8((uint8x16_t)a9);
              if (!a9.i32[0])
                goto LABEL_18;
              if (v51 < 0x10)
                return v16;
              v113 = v51 & 0xF;
              break;
          }
          while (1)
          {
            a9 = (int16x8_t)vceqq_s8(*(int8x16_t *)((char *)v50 + v113), *(int8x16_t *)(v9 + v113));
            a9.i8[0] = vminvq_u8((uint8x16_t)a9);
            if (!a9.i32[0])
              break;
            v113 += 16;
            if (v113 >= v51)
              return v16;
          }
          goto LABEL_18;
        }
        if (v50->i32[0] != *(_DWORD *)v9)
          goto LABEL_18;
        v53 = *(_DWORD *)&v26[v35 - 4];
        v54 = &v33[v35];
LABEL_58:
        v55 = *((_DWORD *)v54 - 1);
LABEL_59:
        v56 = v53 == v55;
        goto LABEL_60;
      }
      if (v35 == 1)
        goto LABEL_234;
      v111 = v50->u8[0];
      v112 = *(unsigned __int8 *)v9;
LABEL_183:
      v56 = v111 == v112;
LABEL_60:
      v57 = v56;
LABEL_63:
      v158 = v156;
      v157 = v30;
      if (v57)
        return v16;
      goto LABEL_18;
    }
    if (!(_DWORD)v29 || !(_DWORD)v35)
      goto LABEL_234;
    if (*(_WORD *)v33 == *v26)
    {
      v83 = (uint8x8_t *)(v26 + 1);
      v84 = v35 - 1;
      v85 = (int16x8_t *)(v33 + 2);
      if ((v35 - 1) >= 8)
      {
        a9 = vceqq_s16(*v85, (int16x8_t)vmovl_u8(*v83));
        a9.i16[0] = vminvq_u16((uint16x8_t)a9);
        if (a9.i32[0])
        {
          v86 = v84 & 7;
          while (1)
          {
            a9 = vceqq_s16(*(int16x8_t *)((char *)v85 + 2 * v86), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v83 + v86)));
            a9.i16[0] = vminvq_u16((uint16x8_t)a9);
            if (!a9.i32[0])
              break;
            v86 += 8;
            if (v86 >= v84)
              return v16;
          }
        }
        goto LABEL_18;
      }
      if (v84 >= 4)
      {
        v91 = (v83->u32[0] | ((unint64_t)v83->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v18 = ((v91 | (v91 << 8)) & 0xFF00FF00FF00FFLL) == v85->i64[0];
        v92 = v84 & 3;
        v93 = (*(unsigned int *)((char *)v83->u32 + v92) | ((unint64_t)*(unsigned int *)((char *)v83->u32 + v92) << 16)) & 0xFFFF0000FFFFLL;
        v94 = (v93 | (v93 << 8)) & 0xFF00FF00FF00FFLL;
        v95 = *(uint64_t *)((char *)v85->i64 + 2 * v92);
        v56 = v18 && v94 == v95;
        goto LABEL_60;
      }
      if (v84 >= 2)
      {
        v101 = (v83->u16[0] | (v83->u16[0] << 8)) & 0xFF00FF;
        v102 = v85->i32[0];
        v103 = v84 & 1;
        v104 = (*(unsigned __int16 *)((char *)v83->u16 + v103) | (*(unsigned __int16 *)((char *)v83->u16 + v103) << 8)) & 0xFF00FF;
        v105 = *(__int32 *)((char *)v85->i32 + 2 * v103);
        v56 = v101 == v102 && v104 == v105;
        goto LABEL_60;
      }
      if ((_DWORD)v35 != 2)
        return v16;
      v112 = v83->u8[0];
      v111 = v85->u16[0];
      goto LABEL_183;
    }
  }
  else if (v37)
  {
    if (!(_DWORD)v29 || !(_DWORD)v35)
      goto LABEL_234;
    if (*(_WORD *)v26 == *v33)
    {
      v79 = (int16x8_t *)(v26 + 2);
      v80 = v35 - 1;
      v81 = (uint8x8_t *)(v33 + 1);
      if ((v35 - 1) >= 8)
      {
        a9 = vceqq_s16(*v79, (int16x8_t)vmovl_u8(*v81));
        a9.i16[0] = vminvq_u16((uint16x8_t)a9);
        if (a9.i32[0])
        {
          v82 = v80 & 7;
          while (1)
          {
            a9 = vceqq_s16(*(int16x8_t *)((char *)v79 + 2 * v82), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v81 + v82)));
            a9.i16[0] = vminvq_u16((uint16x8_t)a9);
            if (!a9.i32[0])
              break;
            v82 += 8;
            if (v82 >= v80)
              return v16;
          }
        }
        goto LABEL_18;
      }
      if (v80 >= 4)
      {
        v106 = (v81->u32[0] | ((unint64_t)v81->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v18 = ((v106 | (v106 << 8)) & 0xFF00FF00FF00FFLL) == v79->i64[0];
        v107 = v80 & 3;
        v108 = (*(unsigned int *)((char *)v81->u32 + v107) | ((unint64_t)*(unsigned int *)((char *)v81->u32 + v107) << 16)) & 0xFFFF0000FFFFLL;
        v109 = (v108 | (v108 << 8)) & 0xFF00FF00FF00FFLL;
        v110 = *(uint64_t *)((char *)v79->i64 + 2 * v107);
        v56 = v18 && v109 == v110;
        goto LABEL_60;
      }
      if (v80 >= 2)
      {
        v114 = (v81->u16[0] | (v81->u16[0] << 8)) & 0xFF00FF;
        v115 = v79->i32[0];
        v116 = v80 & 1;
        v117 = (*(unsigned __int16 *)((char *)v81->u16 + v116) | (*(unsigned __int16 *)((char *)v81->u16 + v116) << 8)) & 0xFF00FF;
        v118 = *(__int32 *)((char *)v79->i32 + 2 * v116);
        v56 = v114 == v115 && v117 == v118;
        goto LABEL_60;
      }
      if ((_DWORD)v35 != 2)
        return v16;
      v55 = v81->u8[0];
      v53 = v79->u16[0];
      goto LABEL_59;
    }
  }
  else
  {
    if (!(_DWORD)v29 || !(_DWORD)v35)
      goto LABEL_234;
    if (*(unsigned __int16 *)v26 == *(unsigned __int16 *)v33)
    {
      v96 = v35 - 1;
      if ((_DWORD)v35 == 1)
        return v16;
      v87 = v30;
      v97 = (int16x8_t *)(v26 + 2);
      v98 = (int16x8_t *)(v33 + 2);
      if ((_DWORD)v35 != 2)
      {
        switch(31 - __clz(v35 - 2))
        {
          case 0u:
            v57 = v97->i32[0] == v98->i32[0];
            goto LABEL_148;
          case 1u:
            if (v97->i32[0] != v98->i32[0])
              goto LABEL_18;
            v53 = *(_DWORD *)&v26[2 * v35 - 4];
            v54 = &v33[2 * v35];
            goto LABEL_58;
          case 2u:
            if (v97->i64[0] != v98->i64[0])
              goto LABEL_18;
            v88 = *(_QWORD *)&v26[2 * v35 - 8];
            v89 = &v33[2 * v35];
LABEL_138:
            v56 = v88 == *((_QWORD *)v89 - 1);
            goto LABEL_60;
          case 3u:
            a9 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v26[2 * v35 - 16], *(int16x8_t *)&v33[2 * v35 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v26 + 2), *(int16x8_t *)(v33 + 2)));
            a9.i16[0] = vminvq_u16((uint16x8_t)a9);
            v57 = a9.i32[0] != 0;
            goto LABEL_148;
          default:
            a9 = vceqq_s16(*v97, *v98);
            a9.i16[0] = vminvq_u16((uint16x8_t)a9);
            if (!a9.i32[0])
              goto LABEL_18;
            if (v96 < 8)
              return v16;
            v124 = v96 & 7;
            break;
        }
        while (1)
        {
          a9 = vceqq_s16(*(int16x8_t *)((char *)v97 + 2 * v124), *(int16x8_t *)((char *)v98 + 2 * v124));
          a9.i16[0] = vminvq_u16((uint16x8_t)a9);
          if (!a9.i32[0])
            break;
          v124 += 8;
          if (v124 >= v96)
            return v16;
        }
        goto LABEL_18;
      }
      v57 = v97->u16[0] == v98->u16[0];
      a4 = &v159;
LABEL_148:
      v30 = v87;
      goto LABEL_63;
    }
  }
LABEL_18:
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_19;
  v90 = *(_DWORD *)(v12 + 80);
  if ((v90 & 0x27) != 0 && (v90 & 0x20) == 0)
  {
    v135 = v15;
    v136 = a2;
    v137 = v12;
    v138 = v11;
    v139 = a8;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)var68, (uint64_t)&v159, (uint64_t)&v158, (uint64_t)&v157, 32, (uint64_t)a8);
    a8 = v139;
    a4 = &v159;
    v15 = v135;
    v11 = v138;
    a2 = v136;
    v12 = v137;
  }
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_19;
  LODWORD(v16) = 0;
  return v16;
}

uint64_t operationArrayIndexOfValueDouble(uint64_t a1, unint64_t a2, int a3)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!(a2 >> 49))
    return 0xFFFFFFFFLL;
  v3 = (double)(int)a2;
  if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v3 = a2 - 0x2000000000000;
  v4 = *(int *)(a1 - 8);
  if ((int)v4 <= a3)
    return 0xFFFFFFFFLL;
  v5 = a3;
  v6 = 0xFFFFFFFFLL;
  while (*(double *)(a1 + 8 * v5) != v3)
  {
    if (v4 == ++v5)
      return v6;
  }
  return v5;
}

uint64_t operationArrayIndexOfNonStringIdentityValueContiguous(uint64_t a1, unint64_t a2, int a3, double a4, int8x8_t a5)
{
  int64x2_t *v5;
  int64x2_t *v6;
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t v9;
  int64x2_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint32x2_t v14;

  v6 = (int64x2_t *)*(int *)(a1 - 8);
  if ((int)v6 <= a3)
    return 0xFFFFFFFFLL;
  v7 = (_DWORD)v6 - a3;
  if ((int)v6 - a3 < 0)
  {
    __break(1u);
LABEL_15:
    v8 = v6;
  }
  else
  {
    v8 = (int64x2_t *)(a1 + 8 * a3);
    v5 = (int64x2_t *)((char *)v8 + 8 * (int)v7);
    if (v7 <= 0x1F)
    {
      v13 = 8 * (_QWORD)v6 - 8 * a3;
      v12 = 0xFFFFFFFFLL;
      while (v8->i64[0] != a2)
      {
        v8 = (int64x2_t *)((char *)v8 + 8);
        v13 -= 8;
        if (!v13)
          return v12;
      }
      goto LABEL_17;
    }
    v9 = vdupq_n_s64(a2);
    while (1)
    {
      a5 = (int8x8_t)vmovn_s64(vceqq_s64(*v8, v9));
      if (*(double *)&a5 != 0.0)
        break;
      v10 = v8 + 1;
      v11 = &v8[1].i8[8];
      ++v8;
      if (v11 >= (char *)v5)
      {
        if (v10 < v5)
        {
          v6 = v5 - 1;
          a5 = (int8x8_t)vmovn_s64(vceqq_s64(v5[-1], v9));
          if (*(double *)&a5 != 0.0)
            goto LABEL_15;
        }
        return 0xFFFFFFFFLL;
      }
    }
  }
  v14 = (uint32x2_t)vorn_s8((int8x8_t)0x100000000, a5);
  v8 = (int64x2_t *)((char *)v8 + 8 * vpmin_u32(v14, v14).u8[0]);
LABEL_17:
  v12 = 0xFFFFFFFFLL;
  if (v8 != v5)
    return (((unint64_t)v8 - a1) >> 3);
  return v12;
}

uint64_t operationLoadVarargs(JSC::JSGlobalObject *a1, int a2, uint64_t this, unint64_t a4, int a5, unsigned int a6)
{
  uint64_t v11;
  JSC::JSValue *v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _BOOL4 IndexQuicklyForTypedArray;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t vars0;

  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = vars0;
  if (a2 >= 0x40000000)
  {
    v18 = *(_QWORD *)(vars0 + 16);
    if ((a2 - 0x40000000) >= *(_DWORD *)(v18 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1984AD868);
    }
    v12 = (JSC::JSValue *)(*(_QWORD *)(v18 + 160) + 8 * (a2 - 0x40000000));
  }
  else
  {
    v12 = (JSC::JSValue *)(vars0 + 8 * a2);
  }
  v13 = (a5 - 1);
  if ((this & 0xFFFE000000000002) == 0 && a5 != 1)
  {
    switch(*(_BYTE *)(this + 5))
    {
      case '!':
        JSC::DirectArguments::copyToArguments((JSC::DirectArguments *)this, a1, v12, a4, a5 - 1);
        goto LABEL_7;
      case '"':
        JSC::ScopedArguments::copyToArguments((JSC::ScopedArguments *)this, a1, v12, a4, a5 - 1);
        goto LABEL_7;
      case '#':
        JSC::ClonedArguments::copyToArguments(this, a1, v12, a4, a5 - 1);
        goto LABEL_7;
      case '$':
        JSC::JSArray::copyToArguments(this, a1, v12, a4, a5 - 1);
        goto LABEL_7;
      default:
        if (*(_BYTE *)(this + 5) == 19)
        {
          v15 = (char *)(this + 16);
          v16 = (a5 - 1);
          do
          {
            if (a4 >= *(_DWORD *)(this + 8))
            {
              v17 = 10;
            }
            else if ((*(_BYTE *)(this + 4) & 0xE) == 6)
            {
              v17 = *(_QWORD *)&v15[8 * a4] + 0x2000000000000;
            }
            else
            {
              v17 = *(_QWORD *)&v15[8 * a4];
            }
            *(_QWORD *)v12 = v17;
            v12 = (JSC::JSValue *)((char *)v12 + 8);
            LODWORD(a4) = a4 + 1;
            --v16;
          }
          while (v16);
          goto LABEL_7;
        }
        v23 = 0;
        v24 = a4;
        break;
    }
    do
    {
      v25 = v24 + v23;
      v26 = *(_QWORD *)(this + 8);
      v27 = *(_BYTE *)(this + 4) & 0xF;
      if ((v27 - 8) >= 2)
      {
        switch(*(_BYTE *)(this + 4) & 0xF)
        {
          case 0:
          case 1:
            v46 = v24 + v23;
            v43 = a4;
            v42 = v23;
            IndexQuicklyForTypedArray = JSC::JSObject::canGetIndexQuicklyForTypedArray((JSC::JSObject *)this, v24 + v23);
            v23 = v42;
            LODWORD(a4) = v43;
            if (!IndexQuicklyForTypedArray)
              goto LABEL_31;
            v26 = *(_QWORD *)(this + 8);
            v27 = *(_BYTE *)(this + 4) & 0xF;
            break;
          case 3:
            goto LABEL_31;
          case 4:
          case 5:
            goto LABEL_29;
          case 6:
          case 7:
            if (*(_DWORD *)(v26 - 4) > v25)
              goto LABEL_38;
            goto LABEL_31;
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
            if (*(_DWORD *)(v26 - 4) > v25 && *(_QWORD *)(v26 + 8 * v25 + 16))
              goto LABEL_38;
            goto LABEL_31;
          default:
            __break(0xC471u);
            JUMPOUT(0x1984AD860);
        }
      }
      else
      {
LABEL_29:
        if (*(_DWORD *)(v26 - 4) <= v25 || !*(_QWORD *)(v26 + 8 * v25))
        {
LABEL_31:
          if (v13 > v23)
          {
            v28 = v23 + a4;
            v29 = v13 - v23;
            do
            {
              v45 = v29;
              v30 = JSC::JSObject::get((JSC::JSObject *)this, a1, v28);
              v38 = v45;
              if (*(_DWORD *)(v11 + 80))
              {
                v44 = v30;
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v31, v32, v33, v34, v35, v36, v37);
                v30 = v44;
                v38 = v45;
                if (hasExceptionsAfterHandlingTraps)
                  break;
              }
              *(_QWORD *)v12 = v30;
              v12 = (JSC::JSValue *)((char *)v12 + 8);
              v28 = (v28 + 1);
              v29 = v38 - 1;
            }
            while (v29);
          }
          break;
        }
LABEL_38:
        v42 = v23;
        v46 = v24 + v23;
        v43 = a4;
      }
      if ((v27 - 8) >= 2)
      {
        switch(v27)
        {
          case 0:
          case 1:
            v39 = JSC::JSObject::getIndexQuicklyForTypedArray(this, v46, 0);
            break;
          case 4:
          case 5:
            v39 = *(unsigned int *)(v26 + 8 * v46) | 0xFFFE000000000000;
            break;
          case 6:
          case 7:
            v39 = *(_QWORD *)(v26 + 8 * v46) + 0x2000000000000;
            break;
          case 10:
          case 11:
          case 12:
          case 13:
            v39 = *(_QWORD *)(v26 + 8 * v46 + 16);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1984AD8A0);
        }
      }
      else
      {
        v39 = *(_QWORD *)(v26 + 8 * v46);
      }
      *(_QWORD *)v12 = v39;
      v12 = (JSC::JSValue *)((char *)v12 + 8);
      v23 = v42 + 1;
      LODWORD(a4) = v43;
    }
    while (v13 != v42 + 1);
  }
LABEL_7:
  if (v13 < a6)
  {
    v19 = a6 - a5 + 1;
    v20 = a5 + a2;
    do
    {
      if (v20 - 1 >= 0x40000000)
      {
        v22 = *(_QWORD *)(vars0 + 16);
        if ((v20 - 1073741825) >= *(_DWORD *)(v22 + 172))
        {
          __break(0xC471u);
          JUMPOUT(0x1984AD880);
        }
        v21 = (_QWORD *)(*(_QWORD *)(v22 + 160) + 8 * (v20 - 1073741825));
      }
      else
      {
        v21 = (_QWORD *)(vars0 + 8 * (v20 - 1));
      }
      *v21 = 10;
      ++v20;
      --v19;
    }
    while (v19);
  }
  return *(_QWORD *)(v11 + 16);
}

double operationFModOnInts(int a1, int a2)
{
  return fmod((double)a1, (double)a2);
}

uint64_t operationStringFromCharCode(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *var18[4];

  v3 = *(_QWORD *)(a1 + 56);
  *(WTF::StringImpl **)(v3 + 40) = var18[3];
  if (a2 <= 0xFFu)
    return *(_QWORD *)(v3 + 8 * a2 + 42216);
  v6 = WTF::fastCompactMalloc((WTF *)0x16);
  *(_QWORD *)v6 = 0x100000002;
  *(_WORD *)(v6 + 20) = a2;
  *(_QWORD *)(v6 + 8) = v6 + 20;
  *(_DWORD *)(v6 + 16) = 0;
  var18[0] = (WTF::StringImpl *)v6;
  v4 = JSC::JSString::create(v3, (JSC::VM *)var18, v7, v8, v9, v10, v11, v12);
  v20 = var18[0];
  var18[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  return v4;
}

uint64_t operationStringFromCharCodeUntyped(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::JSObject *v43;
  WTF::StringImpl *var28[6];

  LOWORD(v9) = (_WORD)a2;
  v10 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v10 + 40) = var28[5];
  v43 = a2;
  if ((unint64_t)a2 < 0xFFFE000000000000)
  {
    v30 = (unint64_t)a2 - 0x2000000000000;
    if ((unint64_t)a2 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase(&v43, a1, a3, a4, a5, a6, a7, a8, a9);
      v30 = v34;
    }
    v31 = (v30 >> 52) & 0x7FF;
    if ((v31 - 1023) >= 0x54)
    {
      LOBYTE(v9) = 0;
      v11 = *((_QWORD *)a1 + 7);
      return *(_QWORD *)(v11 + 8 * v9 + 42216);
    }
    v32 = v30 >> (51 - (v30 >> 52));
    if (v31 > 0x433)
      LODWORD(v32) = v30 << ((v30 >> 52) - 51);
    if (v31 >= 0x41F)
      v33 = v32;
    else
      v33 = (((1 << ((v30 >> 52) + 1)) - 1) & v32) + (1 << ((v30 >> 52) + 1));
    if ((v30 & 0x8000000000000000) == 0)
      LOWORD(v9) = v33;
    else
      v9 = -v33;
    v11 = *((_QWORD *)a1 + 7);
  }
  else
  {
    v11 = v10;
  }
  if ((unsigned __int16)v9 <= 0xFFu)
    return *(_QWORD *)(v11 + 8 * v9 + 42216);
  v14 = WTF::fastCompactMalloc((WTF *)0x16);
  *(_QWORD *)v14 = 0x100000002;
  *(_WORD *)(v14 + 20) = v9;
  *(_QWORD *)(v14 + 8) = v14 + 20;
  *(_DWORD *)(v14 + 16) = 0;
  var28[0] = (WTF::StringImpl *)v14;
  v12 = JSC::JSString::create(v11, (JSC::VM *)var28, v15, v16, v17, v18, v19, v20);
  v28 = var28[0];
  var28[0] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  return v12;
}

unint64_t operationNewRawObject(uint64_t a1, unint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v11;
  int v12;
  uint64_t v13;
  unint64_t result;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t var38[8];

  *(_QWORD *)(a1 + 40) = var38[7];
  if (!a4)
  {
    v11 = *(unsigned __int16 *)(a2 + 24);
    if ((v11 == 65534
       || (v11 == 0xFFFF ? (v12 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84)) : (v12 = *(unsigned __int16 *)(a2 + 24)),
           v12 <= 63))
      && (*(_BYTE *)(a2 + 8) & 0xE) == 0)
    {
      a4 = 0;
    }
    else
    {
      if (a3 >= 0x10000001)
      {
        __break(0xC471u);
        JUMPOUT(0x1984ADD00);
      }
      LODWORD(var38[0]) = 0;
      HIDWORD(var38[0]) = a3;
      if (v11 == 65534)
        goto LABEL_12;
      if (v11 == 0xFFFF)
        v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
      if (v11 < 64)
      {
LABEL_12:
        v13 = 0;
      }
      else if ((v11 - 63) >= 5)
      {
        v16 = (v11 - 64) | ((v11 - 64) >> 1) | (((v11 - 64) | ((v11 - 64) >> 1)) >> 2);
        v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
        v13 = (v17 | HIWORD(v17)) + 1;
      }
      else
      {
        v13 = 4;
      }
      a4 = (JSC::Structure *)JSC::Butterfly::create((JSC *)a1, a9, 0, 0, v13, (*(_BYTE *)(a2 + 8) & 0xE) != 0, var38, 8 * a3, a8);
    }
  }
  if (*(_BYTE *)(a2 + 9) != 36)
    return JSC::JSFinalObject::createWithButterfly((JSC::JSFinalObject *)a1, a2, a4, a4, a5, a6, a7, a8);
  result = *(_QWORD *)(a1 + 37584);
  if (result < *(_QWORD *)(a1 + 37592))
    goto LABEL_16;
  result = *(_QWORD *)(a1 + 37600);
  if ((result & 1) == 0)
  {
    v18 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(a1 + 37608);
    *(_QWORD *)(a1 + 37592) = result + HIDWORD(v18);
    *(_QWORD *)(a1 + 37600) = result + (int)v18;
LABEL_16:
    *(_QWORD *)(a1 + 37584) = result + 16;
    goto LABEL_17;
  }
  v19 = a4;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase(a1 + 37560, a1 + 192, 16, 0, 0, v20, v21, v22);
  a4 = v19;
LABEL_17:
  *(_DWORD *)result = 0;
  v15 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v15;
  *(_QWORD *)(result + 8) = a4;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::Butterfly::create(JSC *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8, uint64_t a9)
{
  int v10;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  __n128 *v19;
  uint64_t result;
  __n128 *v21;
  __n128 *v22;
  unint64_t v23;
  char *v24;

  v10 = a6;
  v14 = 8;
  if (!(_DWORD)a6)
    v14 = 0;
  v15 = v14 + 8 * (a5 + a4) + a8;
  if (v15 <= 0x1F60 && (v16 = *((_QWORD *)a1 + ((v15 + 15) >> 4) + 842)) != 0)
  {
    v17 = *(unsigned int *)(v16 + 60);
    SlowCase = *(_QWORD *)(v16 + 24);
    if (SlowCase >= *(_QWORD *)(v16 + 32))
    {
      SlowCase = *(_QWORD *)(v16 + 40);
      if ((SlowCase & 1) == 0)
      {
        v23 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 48);
        *(_QWORD *)(v16 + 32) = SlowCase + HIDWORD(v23);
        *(_QWORD *)(v16 + 40) = SlowCase + (int)v23;
        *(_QWORD *)(v16 + 24) = SlowCase + v17;
        goto LABEL_8;
      }
      v24 = (char *)a1 + 192;
      JSC::sanitizeStackForVM(a1, a1, v15, a5, a6, (uint64_t)a7, a8, a9);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, v24, v17, 0, 1);
    }
    else
    {
      *(_QWORD *)(v16 + 24) = SlowCase + v17;
    }
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a1 + 6648, a1, v15, 0, a6, (uint64_t)a7, a8, a9);
  }
  if (!SlowCase)
  {
    result = 115;
    __break(0xC471u);
    return result;
  }
LABEL_8:
  v19 = (__n128 *)(SlowCase + 8 * a4 + 8 * a5);
  if (v10)
    v19->n128_u64[0] = *a7;
  result = (uint64_t)&v19->n128_i64[1];
  v21 = (__n128 *)((char *)v19 - 8 * a5);
  v22 = (__n128 *)((char *)v21 + ((8 * a5) & 0xFFFFFFFFFFFFFFC0));
  a2.n128_u64[0] = 0;
  while (v21 != v22)
  {
    *v21 = a2;
    v21[1] = a2;
    v21[2] = a2;
    v21[3] = a2;
    v21 += 4;
  }
  while (v21 != v19)
  {
    v21->n128_u64[0] = 0;
    v21 = (__n128 *)((char *)v21 + 8);
  }
  return result;
}

unint64_t JSC::JSFinalObject::createWithButterfly(JSC::JSFinalObject *this, unint64_t a2, JSC::Structure *a3, JSC::Butterfly *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t result;
  unint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t SlowCase;
  JSC::VM *v22;
  JSC::Structure *v23;
  uint64_t Slow;
  JSC::Structure *v25;

  v10 = (JSC::VM *)(8 * *(unsigned __int8 *)(a2 + 14));
  v11 = *(_QWORD *)((char *)this + ((((unint64_t)v10 + 31) >> 1) & 0x7F8) + 15024);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 60);
    v13 = *(_QWORD *)(v11 + 24);
    if (v13 >= *(_QWORD *)(v11 + 32))
    {
      v13 = *(_QWORD *)(v11 + 40);
      if ((v13 & 1) != 0)
      {
        v25 = a3;
        v17 = v10;
        JSC::sanitizeStackForVM(this, v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v11, (uint64_t)this + 192, v12, 0, 0, v18, v19, v20);
        v10 = v17;
        a3 = v25;
        v13 = SlowCase;
        goto LABEL_4;
      }
      v16 = *(_QWORD *)(v13 + 8) ^ *(_QWORD *)(v11 + 48);
      *(_QWORD *)(v11 + 32) = v13 + HIDWORD(v16);
      *(_QWORD *)(v11 + 40) = v13 + (int)v16;
    }
    *(_QWORD *)(v11 + 24) = v13 + v12;
  }
  else
  {
    v22 = v10;
    v23 = a3;
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)this + 14936, this, ((_WORD)v10 + 31) & 0xFF0, 0, a5, a6, a7, a8);
    v10 = v22;
    a3 = v23;
    v13 = Slow;
    if (!Slow)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
LABEL_4:
  *(_DWORD *)v13 = 0;
  v14 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v13 = a2 >> 4;
  *(_DWORD *)(v13 + 4) = v14;
  *(_QWORD *)(v13 + 8) = a3;
  bzero((void *)(v13 + 16), (size_t)v10);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return v13;
}

unint64_t operationNewObjectWithButterfly(JSC::JSFinalObject *this, unint64_t a2, JSC::Structure *a3, JSC::Butterfly *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *SlowCase;
  __n128 *v18;
  __n128 *v19;
  unint64_t result;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  JSC::Structure *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t vars0;

  *((_QWORD *)this + 5) = vars0;
  if (!a3)
  {
    v11 = *(unsigned __int16 *)(a2 + 24);
    if (v11 == 65534)
      goto LABEL_6;
    if (v11 == 0xFFFF)
      v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
    if (v11 < 64)
    {
LABEL_6:
      v12 = 0;
    }
    else
    {
      if ((v11 - 63) > 4)
      {
        v22 = (v11 - 64) | ((v11 - 64) >> 1) | (((v11 - 64) | ((v11 - 64) >> 1)) >> 2);
        v23 = v22 | (v22 >> 4) | ((v22 | (v22 >> 4)) >> 8);
        v24 = v23 | HIWORD(v23);
        v12 = v24 + 1;
        v13 = 8 * v12;
        v14 = (char *)this + 6648;
        if (v24 > 0x3EB)
          goto LABEL_27;
        goto LABEL_10;
      }
      v12 = 4;
    }
    v13 = 8 * v12;
    v14 = (char *)this + 6648;
LABEL_10:
    v15 = *(_QWORD *)((char *)this + (((v13 + 15) >> 1) & 0x7FFFFFFF8) + 6736);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 + 60);
      SlowCase = *(__n128 **)(v15 + 24);
      if ((unint64_t)SlowCase >= *(_QWORD *)(v15 + 32))
      {
        SlowCase = *(__n128 **)(v15 + 40);
        if ((SlowCase & 1) == 0)
        {
          v26 = SlowCase->n128_u64[1] ^ *(_QWORD *)(v15 + 48);
          *(_QWORD *)(v15 + 32) = (char *)SlowCase + HIDWORD(v26);
          *(_QWORD *)(v15 + 40) = (char *)SlowCase + (int)v26;
          *(_QWORD *)(v15 + 24) = (char *)SlowCase + v16;
LABEL_14:
          a3 = (JSC::Structure *)&SlowCase->n128_i8[8 * v12 + 8];
          v18 = (__n128 *)((char *)SlowCase + v13);
          v19 = (__n128 *)((char *)SlowCase + (v13 & 0x7FFFFFFC0));
          a9.n128_u64[0] = 0;
          while (SlowCase != v19)
          {
            *SlowCase = a9;
            SlowCase[1] = a9;
            SlowCase[2] = a9;
            SlowCase[3] = a9;
            SlowCase += 4;
          }
          while (SlowCase != v18)
          {
            SlowCase->n128_u64[0] = 0;
            SlowCase = (__n128 *)((char *)SlowCase + 8);
          }
          goto LABEL_19;
        }
        JSC::sanitizeStackForVM(this, (JSC::VM *)a2, 0, (uint64_t)a4, a5, a6, a7, a8);
        SlowCase = (__n128 *)JSC::LocalAllocator::allocateSlowCase(v15, (uint64_t)this + 192, v16, 0, 1, v31, v32, v33);
      }
      else
      {
        *(_QWORD *)(v15 + 24) = (char *)SlowCase + v16;
      }
LABEL_13:
      if (!SlowCase)
      {
        result = 115;
        __break(0xC471u);
        return result;
      }
      goto LABEL_14;
    }
LABEL_27:
    SlowCase = (__n128 *)JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v14, this, v13, 0, a5, a6, a7, a8);
    goto LABEL_13;
  }
LABEL_19:
  if (*(_BYTE *)(a2 + 9) != 36)
    return JSC::JSFinalObject::createWithButterfly(this, a2, a3, a4, a5, a6, a7, a8);
  result = *((_QWORD *)this + 4698);
  if (result < *((_QWORD *)this + 4699))
    goto LABEL_21;
  result = *((_QWORD *)this + 4700);
  if ((result & 1) == 0)
  {
    v25 = *(_QWORD *)(result + 8) ^ *((_QWORD *)this + 4701);
    *((_QWORD *)this + 4699) = result + HIDWORD(v25);
    *((_QWORD *)this + 4700) = result + (int)v25;
LABEL_21:
    *((_QWORD *)this + 4698) = result + 16;
    goto LABEL_22;
  }
  v27 = a3;
  JSC::sanitizeStackForVM(this, (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 37560, (uint64_t)this + 192, 16, 0, 0, v28, v29, v30);
  a3 = v27;
LABEL_22:
  *(_DWORD *)result = 0;
  v21 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v21;
  *(_QWORD *)(result + 8) = a3;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

unint64_t operationNewObjectWithButterflyWithIndexingHeaderAndVectorLength(JSC::JSFinalObject *this, unint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t result;
  int v16;
  unint64_t v17;
  JSC::Structure *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t var38[8];

  *((_QWORD *)this + 5) = var38[7];
  if (a3 >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x1984AE490);
  }
  LODWORD(var38[0]) = 0;
  HIDWORD(var38[0]) = a3;
  if (a4)
  {
    *((_QWORD *)a4 - 1) = var38[0];
  }
  else
  {
    v11 = *(unsigned __int16 *)(a2 + 24);
    if (v11 == 65534)
      goto LABEL_8;
    if (v11 == 0xFFFF)
      v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
    if (v11 < 64)
    {
LABEL_8:
      v12 = 0;
    }
    else if ((v11 - 63) >= 5)
    {
      v13 = (v11 - 64) | ((v11 - 64) >> 1) | (((v11 - 64) | ((v11 - 64) >> 1)) >> 2);
      v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
      v12 = (v14 | HIWORD(v14)) + 1;
    }
    else
    {
      v12 = 4;
    }
    a4 = (JSC::Structure *)JSC::Butterfly::create(this, a9, 0, 0, v12, 1, var38, 8 * a3, a8);
  }
  if (*(_BYTE *)(a2 + 9) != 36)
    return JSC::JSFinalObject::createWithButterfly(this, a2, a4, a4, a5, a6, a7, a8);
  result = *((_QWORD *)this + 4698);
  if (result < *((_QWORD *)this + 4699))
    goto LABEL_15;
  result = *((_QWORD *)this + 4700);
  if ((result & 1) == 0)
  {
    v17 = *(_QWORD *)(result + 8) ^ *((_QWORD *)this + 4701);
    *((_QWORD *)this + 4699) = result + HIDWORD(v17);
    *((_QWORD *)this + 4700) = result + (int)v17;
LABEL_15:
    *((_QWORD *)this + 4698) = result + 16;
    goto LABEL_16;
  }
  v18 = a4;
  JSC::sanitizeStackForVM(this, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 37560, (uint64_t)this + 192, 16, 0, 0, v19, v20, v21);
  a4 = v18;
LABEL_16:
  *(_DWORD *)result = 0;
  v16 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v16;
  *(_QWORD *)(result + 8) = a4;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

unint64_t operationNewArrayWithSpreadSlow(unint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9;
  JSC::JSGlobalObject *v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  JSC::JSGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int32x4_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t OutOfMemoryError;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  JSC::Exception *v53;
  int v55;
  JSC::VMTraps *v56;
  JSC::JSGlobalObject *v57;
  uint64_t vars0;

  v9 = a3;
  v10 = a2;
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v12 + 40) = vars0;
  v13 = a3;
  *((_QWORD *)a2 - 1) = 8 * a3;
  if ((_DWORD)a3)
  {
    LODWORD(a3) = 0;
    v14 = 0;
    v15 = a2;
    v16 = v13;
    do
    {
      v18 = *(_QWORD *)v15;
      v15 = (JSC::JSGlobalObject *)((char *)v15 + 8);
      v17 = v18;
      if ((v18 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 19)
      {
        if ((_DWORD)a3 == -1)
          v14 = 1;
        a3 = (a3 + 1);
      }
      else
      {
        v19 = *(_DWORD *)(v17 + 8);
        v20 = __CFADD__((_DWORD)a3, v19);
        v21 = a3 + v19;
        if (v20)
          v14 = 1;
        if (v20)
          a3 = a3;
        else
          a3 = v21;
      }
      --v16;
    }
    while (v16);
    if (v14 || a3 >> 27)
      goto LABEL_49;
  }
  v22 = *(_DWORD *)(a1 + 908);
  v23 = v22 ? 16 * (v22 & 0xFFFFFFFE) : 0;
  v24 = JSC::JSArray::tryCreate((JSC::JSArray *)v12, v23, (JSC::Structure *)a3, a4, a5, a6, a7, a8, a9);
  if (!v24)
  {
LABEL_49:
    OutOfMemoryError = JSC::createOutOfMemoryError(a1, a2);
    v53 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v53 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)OutOfMemoryError, 0, v47, v48, v49, v50, v51);
    }
    JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, v53, v52, v47, v48, v49, v50, v51);
    goto LABEL_52;
  }
  v32 = v24;
  if (*(_DWORD *)(v12 + 80))
  {
    v55 = *(_DWORD *)(v12 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v25, v26, v27, v28, v29, v30);
    if (*(_QWORD *)(v12 + 16))
    {
LABEL_52:
      v32 = 0;
      goto LABEL_53;
    }
  }
  if (!v9)
    goto LABEL_53;
  v33 = 0;
  v34 = 0;
  v56 = (JSC::VMTraps *)(v12 + 64);
  v57 = v10;
  while (1)
  {
    v35 = *((_QWORD *)v10 + v33);
    if ((v35 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v35 + 5) == 19)
      break;
    v42 = v34;
    JSC::JSObject::putDirectIndex(v32, a1, (JSC::VM *)v34, *((_QWORD *)v10 + v33), v27, v28, v29, v30, v31);
    if (*(_DWORD *)(v12 + 80))
    {
      v45 = *(_DWORD *)(v12 + 80);
      if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v56, 7u, v43, v44, v27, v28, v29, v30);
      v42 = v34;
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_52;
    }
    v34 = (v42 + 1);
LABEL_40:
    if (++v33 == v13)
      goto LABEL_53;
  }
  if (!*(_DWORD *)(v35 + 8))
    goto LABEL_40;
  v36 = 0;
  v37 = v35 + 16;
  while (1)
  {
    v38 = (*(_BYTE *)(v35 + 4) & 0xE) == 6 ? *(_QWORD *)(v37 + 8 * v36) + 0x2000000000000 : *(_QWORD *)(v37 + 8 * v36);
    JSC::JSObject::putDirectIndex(v32, a1, (JSC::VM *)(v34 + v36), v38, v27, v28, v29, v30, v31);
    if (*(_DWORD *)(v12 + 80))
    {
      v41 = *(_DWORD *)(v12 + 80);
      if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v56, 7u, v39, v40, v27, v28, v29, v30);
      if (*(_QWORD *)(v12 + 16))
        break;
    }
    if (++v36 >= (unint64_t)*(unsigned int *)(v35 + 8))
    {
      v34 = (v34 + v36);
      v10 = v57;
      goto LABEL_40;
    }
  }
  v32 = 0;
  v10 = v57;
LABEL_53:
  *((_QWORD *)v10 - 1) = 0;
  return v32;
}

unint64_t operationCreateImmutableButterfly(JSC::JSGlobalObject *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t Slow;
  unint64_t OutOfMemoryError;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  JSC::Exception *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  if (a2 > 0x10000000)
    goto LABEL_14;
  v10 = (int)a2;
  v11 = *(_QWORD *)(v9 + 41656);
  v12 = 8 * a2;
  v13 = (v12 + 31) & 0xFFFFFFFF0;
  if (v13 > 0x1F60 || (v14 = *(_QWORD *)(v9 + (((v12 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v9 + 10792, (JSC *)v9, v13, 0, a5, a6, a7, a8);
    goto LABEL_13;
  }
  v15 = *(unsigned int *)(v14 + 60);
  v16 = *(_QWORD *)(v14 + 24);
  if (v16 >= *(_QWORD *)(v14 + 32))
  {
    v16 = *(_QWORD *)(v14 + 40);
    if ((v16 & 1) == 0)
    {
      v28 = *(_QWORD *)(v16 + 8) ^ *(_QWORD *)(v14 + 48);
      *(_QWORD *)(v14 + 32) = v16 + HIDWORD(v28);
      *(_QWORD *)(v14 + 40) = v16 + (int)v28;
      *(_QWORD *)(v14 + 24) = v16 + v15;
      goto LABEL_6;
    }
    v29 = *(_QWORD *)(v9 + 41656);
    v30 = *(_QWORD *)(v9 + (((v12 + 31) >> 1) & 0x7FFFFFFF8) + 10880);
    JSC::sanitizeStackForVM((JSC *)v9, a2, v13, a4, a5, a6, a7, a8);
    v31 = v30;
    v11 = v29;
    Slow = JSC::LocalAllocator::allocateSlowCase(v31, v9 + 192, v15, 0, 1, v32, v33, v34);
LABEL_13:
    v16 = Slow;
    if (!Slow)
      goto LABEL_14;
LABEL_6:
    *(_DWORD *)v16 = 0;
    v17 = *(_DWORD *)(v11 + 8);
    *(_DWORD *)v16 = v11 >> 4;
    *(_DWORD *)(v16 + 4) = v17;
    *(_DWORD *)(v16 + 8) = v10;
    *(_DWORD *)(v16 + 12) = v10;
    if (v10 && (*(_BYTE *)(v16 + 4) & 0xE) == 8)
      bzero((void *)(v16 + 16), v12);
    if (*(_BYTE *)(v9 + 755))
      __dmb(0xAu);
    return v16;
  }
  *(_QWORD *)(v14 + 24) = v16 + v15;
  if (v16)
    goto LABEL_6;
LABEL_14:
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, a2);
  v27 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v27 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v21, v22, v23, v24, v25);
  }
  JSC::VM::throwException((JSC::VM *)v9, a1, v27, v26, v21, v22, v23, v24, v25);
  return 0;
}

unint64_t operationSpreadGeneric(JSC::JSImmutableButterfly *a1, JSC::ScopedArguments *this, JSC::JSString *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  int8x16_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::VM *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  unsigned int v71;
  double v72;
  double v73;
  unint64_t SlowCase;
  double v75;
  double v76;
  int v77;
  unint64_t OutOfMemoryError;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  JSC::Exception *v85;
  unint64_t v86;
  unint64_t Slow;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t DirectIndex;
  uint64_t v92;
  unint64_t v93;
  double v94;
  JSC::ScopedArguments **v95;
  uint64_t (*v96)(JSC::VM **);
  JSC::VM **v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t i;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  double v112;
  int v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  JSC::ScopedArguments **v126;
  int v127;
  JSC::VM *v128;
  uint64_t v129;
  JSC::ScopedArguments **v130;
  uint64_t v131;
  JSC::ScopedArguments *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t vars0;

  v10 = (unint64_t)a1;
  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = vars0;
  v12 = *((unsigned __int8 *)this + 5);
  if (v12 != 36)
  {
    v29 = 0;
    if (*((unsigned __int8 *)this + 5) <= 0x22u)
    {
      switch(v12)
      {
        case 2:
          v70 = *((_QWORD *)a1 + 280);
          if ((v70 & 1) != 0)
            v71 = (v70 >> 1) & 3;
          else
            v71 = *(unsigned __int8 *)(v70 + 4);
          if (v71 == 2)
            break;
          v35 = JSC::JSImmutableButterfly::createFromString(a1, this, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_43:
          v29 = v35;
          goto LABEL_36;
        case 33:
          if (JSC::DirectArguments::isIteratorProtocolFastAndNonObservable(this))
          {
            v35 = JSC::JSImmutableButterfly::createFromDirectArguments((JSC::JSImmutableButterfly *)v10, this, a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_43;
          }
          break;
        case 34:
          if (JSC::ScopedArguments::isIteratorProtocolFastAndNonObservable(this))
          {
            v35 = JSC::JSImmutableButterfly::createFromScopedArguments((JSC::JSImmutableButterfly *)v10, this, a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_43;
          }
          break;
        default:
          goto LABEL_36;
      }
    }
    else
    {
      if (v12 != 35)
        goto LABEL_36;
      if (JSC::ClonedArguments::isIteratorProtocolFastAndNonObservable(this))
      {
        v35 = JSC::JSImmutableButterfly::createFromClonedArguments((JSC::JSImmutableButterfly *)v10, this, a3, (uint64_t)a4, a5, a6, a7, a8, v34);
        goto LABEL_43;
      }
    }
LABEL_128:
    v29 = 0;
    goto LABEL_36;
  }
  v13 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v14 = *(_QWORD *)(v13 + 2216);
  if ((v14 & 1) != 0)
    v15 = (v14 >> 1) & 3;
  else
    v15 = *(unsigned __int8 *)(v14 + 4);
  if (v15 == 2 || *(_BYTE *)(*(_QWORD *)(v13 + 2048) + 4) == 2)
    goto LABEL_128;
  v16 = *(_QWORD *)(v13 + 2304);
  v17 = (v16 & 1) != 0 ? (v16 >> 1) & 3 : *(unsigned __int8 *)(v16 + 4);
  if (v17 == 2)
    goto LABEL_128;
  v18 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
  v19 = (v18 >> 1) & 7;
  if ((v18 & 0x10) != 0)
    v19 = ((v18 & 0xE) + 10) >> 1;
  v20 = *(_DWORD *)(v13 + 4 * v19 + 852);
  if (v20)
    v21 = 16 * (v20 & 0xFFFFFFFE);
  else
    v21 = 0;
  v22 = v11;
  if (v21 != 16 * (*(_DWORD *)this & 0xFFFFFFFE))
  {
    if ((v18 & 0x20) != 0)
      goto LABEL_128;
    v99 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
    if (!v99)
      v99 = *((_QWORD *)this + 2);
    if (v99 != *(_QWORD *)(v13 + 672)
      || JSC::JSObject::getDirectOffset(this, *(JSC::VM **)(v13 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 56) + 41952) + 2712), a4, a5, a6, a7, a8) != -1)
    {
      goto LABEL_128;
    }
    v22 = *(_QWORD *)(v10 + 56);
  }
  v23 = *((_BYTE *)this + 4) & 0xE;
  if ((*((_BYTE *)this + 4) & 0xE) != 0)
  {
    LODWORD(v24) = *(_DWORD *)(*((_QWORD *)this + 1) - 8);
    if (v24 > 0x10000000)
      goto LABEL_125;
  }
  else
  {
    LODWORD(v24) = 0;
  }
  v25 = *(_QWORD *)(v22 + 41656);
  v26 = (8 * v24);
  a3 = (JSC::JSString *)((v26 + 31) & 0x1FFFFFFF0);
  if ((unint64_t)a3 <= 0x1F60 && (v27 = *(_QWORD *)(v22 + (((v26 + 31) >> 1) & 0xFFFFFFF8) + 10880)) != 0)
  {
    v28 = *(unsigned int *)(v27 + 60);
    v29 = *(_QWORD *)(v27 + 24);
    if (v29 < *(_QWORD *)(v27 + 32))
    {
      *(_QWORD *)(v27 + 24) = v29 + v28;
      goto LABEL_21;
    }
    v29 = *(_QWORD *)(v27 + 40);
    if ((v29 & 1) == 0)
    {
      v86 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(v27 + 48);
      *(_QWORD *)(v27 + 32) = v29 + HIDWORD(v86);
      *(_QWORD *)(v27 + 40) = v29 + (int)v86;
      *(_QWORD *)(v27 + 24) = v29 + v28;
      goto LABEL_22;
    }
    v113 = v24;
    v24 = *(_QWORD *)(v22 + (((v26 + 31) >> 1) & 0xFFFFFFF8) + 10880);
    v114 = v10;
    v115 = *((_BYTE *)this + 4) & 0xE;
    v116 = *(unsigned int *)(v27 + 60);
    JSC::sanitizeStackForVM((JSC *)v22, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v117 = v24;
    LODWORD(v24) = v113;
    v118 = v116;
    v23 = v115;
    v10 = v114;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v117, v22 + 192, v118, 0, 1, v119, v120, v121);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v22 + 10792, (JSC *)v22, (unint64_t)a3, 0, a5, a6, a7, a8);
  }
  v29 = SlowCase;
LABEL_21:
  if (!v29)
  {
LABEL_125:
    OutOfMemoryError = JSC::createOutOfMemoryError(v10, this);
    v85 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v85 = (JSC::Exception *)JSC::Exception::create(v22, (JSC::VM *)OutOfMemoryError, 0, v79, v80, v81, v82, v83);
    }
    JSC::VM::throwException((JSC::VM *)v22, (JSC::JSGlobalObject *)v10, v85, v84, v79, v80, v81, v82, v83);
    goto LABEL_128;
  }
LABEL_22:
  *(_DWORD *)v29 = 0;
  v30 = *(_DWORD *)(v25 + 8);
  *(_DWORD *)v29 = v25 >> 4;
  *(_DWORD *)(v29 + 4) = v30;
  *(_DWORD *)(v29 + 8) = v24;
  *(_DWORD *)(v29 + 12) = v24;
  if ((_DWORD)v24 && (*(_BYTE *)(v29 + 4) & 0xE) == 8)
    bzero((void *)(v29 + 16), v26);
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  if ((_DWORD)v24)
  {
    if (v23 == 4 || v23 == 8)
    {
      v31 = 0;
      v24 = v24;
      do
      {
        v32 = *(_QWORD *)(*((_QWORD *)this + 1) + v31);
        if (!v32)
          v32 = 10;
        if ((*(_BYTE *)(v29 + 4) & 0xE) == 6)
        {
          v72 = (double)(int)v32;
          if (v32 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v72 = v32 - 0x2000000000000;
          *(double *)(v29 + v31 + 16) = v72;
        }
        else
        {
          *(_QWORD *)(v29 + v31 + 16) = v32;
          if ((v32 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v22 + 760) >= *(unsigned __int8 *)(v29 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v22 + 192, v29);
          }
        }
        v31 += 8;
        --v24;
      }
      while (v24);
    }
    else if (v23 == 6)
    {
      v36 = 0;
      v37 = 8 * v24;
      do
      {
        v38 = *(_QWORD *)(*((_QWORD *)this + 1) + v36) + 0x2000000000000;
        if ((*(_BYTE *)(v29 + 4) & 0xE) == 6)
        {
          v73 = (double)*(int *)(*((_QWORD *)this + 1) + v36);
          if (v38 <= 0xFFFDFFFFFFFFFFFFLL)
            v73 = *(double *)(*((_QWORD *)this + 1) + v36);
          *(double *)(v29 + v36 + 16) = v73;
        }
        else
        {
          *(_QWORD *)(v29 + v36 + 16) = v38;
          if (v38)
            v39 = (v38 & 0xFFFE000000000002) == 0;
          else
            v39 = 0;
          if (v39 && *(_DWORD *)(v22 + 760) >= *(unsigned __int8 *)(v29 + 7))
            JSC::Heap::writeBarrierSlowPath(v22 + 192, v29);
        }
        v36 += 8;
      }
      while (v37 != v36);
    }
    else
    {
      v88 = 0;
      v89 = 16;
      while (1)
      {
        v90 = v10;
        DirectIndex = JSC::JSObject::getDirectIndex(this, (uint64_t ***)v10, v88);
        v93 = DirectIndex ? DirectIndex : 10;
        if (*(_DWORD *)(v22 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, v92, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          break;
        }
        if ((*(_BYTE *)(v29 + 4) & 0xE) == 6)
        {
          v94 = (double)(int)v93;
          if (v93 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v94 = v93 - 0x2000000000000;
          *(double *)(v29 + v89) = v94;
        }
        else
        {
          *(_QWORD *)(v29 + v89) = v93;
          if ((v93 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v22 + 760) >= *(unsigned __int8 *)(v29 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v22 + 192, v29);
          }
        }
        ++v88;
        v89 += 8;
        v10 = v90;
        if (v24 == v88)
          goto LABEL_36;
      }
      v29 = 0;
      v10 = v90;
    }
  }
LABEL_36:
  if (*(_DWORD *)(v11 + 80))
  {
    v77 = *(_DWORD *)(v11 + 80);
    if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (!v29)
  {
    v40 = *(_QWORD *)(v10 + 1960);
    if (*(_DWORD *)v40 <= 0x40u)
    {
      __break(0xC471u);
      JUMPOUT(0x1984AF2A4);
    }
    v41 = *(_QWORD *)(v40 + 520);
    if ((v41 & 1) != 0)
    {
      v95 = (JSC::ScopedArguments **)(v40 + 520);
      v96 = *(uint64_t (**)(JSC::VM **))(v41 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v10 & 8) != 0)
        v97 = (JSC::VM **)(v10 - 16);
      else
        v97 = (JSC::VM **)(v10 & 0xFFFFFFFFFFFFC000 | 8);
      v128 = *v97;
      v129 = v10;
      v130 = v95;
      v41 = v96(&v128);
    }
    if (*(_BYTE *)(v41 + 5) == 26)
    {
      v42 = *(_QWORD *)(v41 + 24);
      if ((v42 & 1) != 0)
        v42 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v42 + 5) == 8)
      {
        LOBYTE(v137) = 1;
        v138 = *(_QWORD *)(v42 + 40);
        LOBYTE(v139) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE)
                                                                                  + 0x4C));
      }
      else
      {
        LOBYTE(v137) = 2;
        v43 = *(_QWORD *)(v41 + 16);
        v138 = v42;
        v139 = v43;
      }
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0x38))(&v137, v41);
    }
    LOBYTE(v128) = 0;
    v130 = &v132;
    v131 = 0;
    v133 = 0u;
    v134 = 0u;
    v135 = 0u;
    v136 = 0;
    v132 = this;
    v129 = 0x800000001;
    v126 = &v132;
    v127 = 1;
    v51 = JSC::call((uint64_t *)v10, v41, (unsigned __int8 *)&v137, 2, (uint64_t)&v126, a6, a7, a8);
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v44, v45, v46, v47, v48, v49, v50))
    {
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v129, v44, v45, v46, v47, v48, v49, v50);
      return 0;
    }
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v129, v44, v45, v46, v47, v48, v49, v50);
    v128 = (JSC::VM *)v11;
    v58 = *(_BYTE *)(v51 + 4) & 0xE;
    if ((*(_BYTE *)(v51 + 4) & 0xE) != 0)
    {
      LODWORD(v59) = *(_DWORD *)(*(_QWORD *)(v51 + 8) - 8);
      if (v59 > 0x10000000)
        goto LABEL_151;
    }
    else
    {
      LODWORD(v59) = 0;
    }
    v60 = *(_QWORD *)(v11 + 41656);
    v61 = (8 * v59) + 31;
    v62 = v61 & 0x1FFFFFFF0;
    if ((v61 & 0x1FFFFFFF0) <= 0x1F60 && (v63 = *(_QWORD *)(v11 + ((v61 >> 1) & 0xFFFFFFF8) + 10880)) != 0)
    {
      v29 = *(_QWORD *)(v63 + 24);
      if (v29 < *(_QWORD *)(v63 + 32))
      {
        *(_QWORD *)(v63 + 24) = v29 + *(unsigned int *)(v63 + 60);
        goto LABEL_69;
      }
      v125 = *(unsigned int *)(v63 + 60);
      v29 = *(_QWORD *)(v63 + 40);
      if ((v29 & 1) == 0)
      {
        v98 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(v63 + 48);
        *(_QWORD *)(v63 + 32) = v29 + HIDWORD(v98);
        *(_QWORD *)(v63 + 40) = v29 + (int)v98;
        *(_QWORD *)(v63 + 24) = v29 + v125;
LABEL_70:
        *(_DWORD *)v29 = 0;
        v64 = *(_DWORD *)(v60 + 8);
        *(_DWORD *)v29 = v60 >> 4;
        *(_DWORD *)(v29 + 4) = v64;
        *(_DWORD *)(v29 + 8) = v59;
        *(_DWORD *)(v29 + 12) = v59;
        if ((_DWORD)v59 && (*(_BYTE *)(v29 + 4) & 0xE) == 8)
          bzero((void *)(v29 + 16), (8 * v59));
        if (*(_BYTE *)(v11 + 755))
          __dmb(0xAu);
        if (!(_DWORD)v59)
          return v29;
        if (v58 == 4 || v58 == 8)
        {
          v65 = 0;
          v59 = v59;
          do
          {
            v66 = *(_QWORD *)(*(_QWORD *)(v51 + 8) + v65);
            if (!v66)
              v66 = 10;
            if ((*(_BYTE *)(v29 + 4) & 0xE) == 6)
            {
              v75 = (double)(int)v66;
              if (v66 <= 0xFFFDFFFFFFFFFFFFLL)
                *(_QWORD *)&v75 = v66 - 0x2000000000000;
              *(double *)(v29 + v65 + 16) = v75;
            }
            else
            {
              *(_QWORD *)(v29 + v65 + 16) = v66;
              if ((v66 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v29 + 7))
              {
                JSC::Heap::writeBarrierSlowPath(v11 + 192, v29);
              }
            }
            v65 += 8;
            --v59;
          }
          while (v59);
          return v29;
        }
        if (v58 == 6)
        {
          v67 = 0;
          do
          {
            v68 = *(_QWORD *)(*(_QWORD *)(v51 + 8) + v67) + 0x2000000000000;
            if ((*(_BYTE *)(v29 + 4) & 0xE) == 6)
            {
              v76 = (double)*(int *)(*(_QWORD *)(v51 + 8) + v67);
              if (v68 <= 0xFFFDFFFFFFFFFFFFLL)
                v76 = *(double *)(*(_QWORD *)(v51 + 8) + v67);
              *(double *)(v29 + v67 + 16) = v76;
            }
            else
            {
              *(_QWORD *)(v29 + v67 + 16) = v68;
              if (v68)
                v69 = (v68 & 0xFFFE000000000002) == 0;
              else
                v69 = 0;
              if (v69 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v29 + 7))
                JSC::Heap::writeBarrierSlowPath(v11 + 192, v29);
            }
            v67 += 8;
          }
          while (8 * v59 != v67);
          return v29;
        }
        v100 = 0;
        for (i = 16; ; i += 8)
        {
          v102 = v10;
          v103 = JSC::JSObject::getDirectIndex((JSC::JSObject *)v51, (uint64_t ***)v10, v100);
          v111 = v103 ? v103 : 10;
          if (*((_DWORD *)v128 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v128, v104, v105, v106, v107, v108, v109, v110))
          {
            break;
          }
          if ((*(_BYTE *)(v29 + 4) & 0xE) == 6)
          {
            v112 = (double)(int)v111;
            if (v111 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v112 = v111 - 0x2000000000000;
            *(double *)(v29 + i) = v112;
          }
          else
          {
            *(_QWORD *)(v29 + i) = v111;
            if ((v111 & 0xFFFE000000000002) == 0
              && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v29 + 7))
            {
              JSC::Heap::writeBarrierSlowPath(v11 + 192, v29);
            }
          }
          ++v100;
          v10 = v102;
          if (v59 == v100)
            return v29;
        }
        return 0;
      }
      JSC::sanitizeStackForVM((JSC *)v11, v52, v62, v53, v54, v55, v56, v57);
      Slow = JSC::LocalAllocator::allocateSlowCase(v63, v11 + 192, v125, 0, 1, v122, v123, v124);
    }
    else
    {
      Slow = JSC::CompleteSubspace::tryAllocateSlow(v11 + 10792, (JSC *)v11, v62, 0, v54, v55, v56, v57);
    }
    v29 = Slow;
LABEL_69:
    if (v29)
      goto LABEL_70;
LABEL_151:
    JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)v10, (JSC::JSGlobalObject *)&v128);
    return 0;
  }
  return v29;
}

unint64_t operationSpreadFastArray(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  double v26;
  double v27;
  unint64_t SlowCase;
  unint64_t v29;
  unint64_t v30;
  JSC::VM *v31;
  uint64_t i;
  uint64_t DirectIndex;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD var58[12];

  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v10 + 40) = var58[11];
  var58[0] = v10;
  v11 = *(_BYTE *)(a2 + 4) & 0xE;
  if ((*(_BYTE *)(a2 + 4) & 0xE) != 0)
  {
    LODWORD(v12) = *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8);
    if (v12 > 0x10000000)
    {
LABEL_42:
      JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)var58);
      return 0;
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  v13 = *(_QWORD *)(v10 + 41656);
  v14 = (8 * v12);
  v15 = (v14 + 31) & 0x1FFFFFFF0;
  if (v15 <= 0x1F60 && (v16 = *(_QWORD *)(v10 + (((v14 + 31) >> 1) & 0xFFFFFFF8) + 10880)) != 0)
  {
    v17 = *(unsigned int *)(v16 + 60);
    v18 = *(_QWORD *)(v16 + 24);
    if (v18 < *(_QWORD *)(v16 + 32))
    {
      *(_QWORD *)(v16 + 24) = v18 + v17;
      goto LABEL_7;
    }
    v18 = *(_QWORD *)(v16 + 40);
    if ((v18 & 1) == 0)
    {
      v29 = *(_QWORD *)(v18 + 8) ^ *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v16 + 32) = v18 + HIDWORD(v29);
      *(_QWORD *)(v16 + 40) = v18 + (int)v29;
      *(_QWORD *)(v16 + 24) = v18 + v17;
      goto LABEL_8;
    }
    v43 = v12;
    v12 = *(unsigned int *)(v16 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, v15, a4, a5, a6, a7, a8);
    v44 = v12;
    LODWORD(v12) = v43;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, v10 + 192, v44, 0, 1, v45, v46, v47);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v10 + 10792, (JSC *)v10, v15, 0, a5, a6, a7, a8);
  }
  v18 = SlowCase;
LABEL_7:
  if (!v18)
    goto LABEL_42;
LABEL_8:
  *(_DWORD *)v18 = 0;
  v19 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)v18 = v13 >> 4;
  *(_DWORD *)(v18 + 4) = v19;
  *(_DWORD *)(v18 + 8) = v12;
  *(_DWORD *)(v18 + 12) = v12;
  if ((_DWORD)v12 && (*(_BYTE *)(v18 + 4) & 0xE) == 8)
    bzero((void *)(v18 + 16), v14);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if ((_DWORD)v12)
  {
    if (v11 == 4 || v11 == 8)
    {
      v20 = 0;
      v12 = v12;
      do
      {
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + v20);
        if (!v21)
          v21 = 10;
        if ((*(_BYTE *)(v18 + 4) & 0xE) == 6)
        {
          v26 = (double)(int)v21;
          if (v21 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v26 = v21 - 0x2000000000000;
          *(double *)(v18 + v20 + 16) = v26;
        }
        else
        {
          *(_QWORD *)(v18 + v20 + 16) = v21;
          if ((v21 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v18 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v10 + 192, v18);
          }
        }
        v20 += 8;
        --v12;
      }
      while (v12);
      return v18;
    }
    if (v11 == 6)
    {
      v23 = 0;
      do
      {
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + v23) + 0x2000000000000;
        if ((*(_BYTE *)(v18 + 4) & 0xE) == 6)
        {
          v27 = (double)*(int *)(*(_QWORD *)(a2 + 8) + v23);
          if (v24 <= 0xFFFDFFFFFFFFFFFFLL)
            v27 = *(double *)(*(_QWORD *)(a2 + 8) + v23);
          *(double *)(v18 + v23 + 16) = v27;
        }
        else
        {
          *(_QWORD *)(v18 + v23 + 16) = v24;
          if (v24)
            v25 = (v24 & 0xFFFE000000000002) == 0;
          else
            v25 = 0;
          if (v25 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v18 + 7))
            JSC::Heap::writeBarrierSlowPath(v10 + 192, v18);
        }
        v23 += 8;
      }
      while (8 * v12 != v23);
      return v18;
    }
    v30 = 0;
    v31 = (JSC::VM *)var58[0];
    for (i = 16; ; i += 8)
    {
      DirectIndex = JSC::JSObject::getDirectIndex((JSC::JSObject *)a2, (uint64_t ***)a1, v30);
      v41 = DirectIndex ? DirectIndex : 10;
      if (*((_DWORD *)v31 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v31, v34, v35, v36, v37, v38, v39, v40))
        break;
      if ((*(_BYTE *)(v18 + 4) & 0xE) == 6)
      {
        v42 = (double)(int)v41;
        if (v41 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v42 = v41 - 0x2000000000000;
        *(double *)(v18 + i) = v42;
      }
      else
      {
        *(_QWORD *)(v18 + i) = v41;
        if ((v41 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v18 + 7))
          JSC::Heap::writeBarrierSlowPath(v10 + 192, v18);
      }
      if (v12 == ++v30)
        return v18;
    }
    return 0;
  }
  return v18;
}

unint64_t operationNewArrayWithSpeciesInt32(JSC::VM **a1, JSC::Structure *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unsigned int v10;
  JSC::VM *v14;
  unsigned int v15;
  int isArraySlow;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  const WTF::String *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 isConstructor;
  uint64_t v52;
  unint64_t v53;
  JSC::JSString *v54;
  uint64_t v55;
  unsigned int v56;
  _BYTE *v57;
  WTF *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  WTF *v74;
  int v75;
  unsigned int v76;
  int v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  _WORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 *v98;
  uint64_t v99;
  unsigned int v100;
  BOOL v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char OwnStaticPropertySlot;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  _BYTE *v119;
  uint64_t v120;
  JSC::VM *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  unsigned __int16 *v133;
  uint64_t v134;
  unsigned int v135;
  char v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t Index;
  int v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _BYTE *v148;
  uint64_t v149;
  unsigned __int16 *v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  unsigned __int8 *v160;
  int v161;
  double v162;
  const unsigned __int8 *v163;
  unsigned __int8 *v164;
  uint64_t v165;
  unsigned int v166;
  JSC::VM *v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  int v171;
  uint64_t v172;
  unsigned __int8 *v173;
  uint64_t v174;
  unsigned int v175;
  JSC::VM *v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t v182;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  JSC::JSString *v188;
  JSC::JSString *v189;
  uint64_t v190;
  WTF *v191;
  WTF *v192;
  WTF *v193;
  WTF *v194;
  JSC::VM *v195;
  JSC::JSString *v196;
  _BYTE *v197;
  uint64_t v198;
  unint64_t v199;
  JSC::JSString *v200;
  unint64_t v201;
  _QWORD v202[2];
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  uint64_t v208;
  _BYTE *v209;
  _BYTE v210[64];
  uint64_t v211;
  uint64_t v212;
  uint64_t vars0;

  v10 = a4;
  v212 = *MEMORY[0x1E0C80C00];
  v14 = a1[7];
  *((_QWORD *)v14 + 5) = vars0;
  v195 = v14;
  v196 = (JSC::JSString *)10;
  if ((a3 & 0xFFFE000000000002) != 0 || (v15 = *(unsigned __int8 *)(a3 + 5), v15 < 0x17))
  {
LABEL_31:
    isArraySlow = 0;
    goto LABEL_5;
  }
  if (v15 - 36 >= 2)
  {
    if (v15 == 61)
    {
      isArraySlow = JSC::isArraySlow((JSC *)a1, (JSC::JSGlobalObject *)a3, (JSC::ProxyObject *)a3);
      goto LABEL_5;
    }
    goto LABEL_31;
  }
  isArraySlow = 1;
LABEL_5:
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (!isArraySlow)
    goto LABEL_17;
  v17 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  v18 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x30);
  if (!v18)
    v18 = *(_QWORD *)(a3 + 16);
  v21 = v18 == *(_QWORD *)(v17 + 672)
     && ((v19 = *(_QWORD *)(v17 + 2280), (v19 & 1) != 0)
       ? (v20 = (v19 >> 1) & 3)
       : (v20 = *(unsigned __int8 *)(v19 + 4)),
         v20 == 1)
     && ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x12) & 0x20) == 0
      || JSC::JSObject::getDirectOffset((_DWORD *)a3, v14, *(_QWORD *)(*((_QWORD *)v14 + 5244) + 1080), (const JSC::PropertyTable *)a4, a5, a6, a7, a8) == -1);
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v21)
    goto LABEL_17;
  v196 = (JSC::JSString *)JSC::JSObject::get((unsigned int *)a3, (uint64_t)a1, *(_QWORD *)(*((_QWORD *)v14 + 5244) + 1080), a4, a5, a6, a7, a8);
  if (*((_DWORD *)v14 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v14, v44, v45, v46, v47, v48, v49, v50))
      return 0;
  }
  isConstructor = JSC::JSValue::isConstructor((JSC::JSValue *)&v196);
  v54 = v196;
  if (isConstructor
    && *(JSC::VM ***)(16 * (*(_DWORD *)v196 & 0xFFFFFFFE) + 0x28) != a1
    && &JSC::ArrayConstructor::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v196 & 0xFFFFFFFE) + 0x4C)))
  {
    goto LABEL_17;
  }
  if (((unint64_t)v196 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)v196 + 5) < 0x17u)
  {
LABEL_103:
    if (v54 == (JSC::JSString *)10)
      goto LABEL_17;
    LOBYTE(v207) = 0;
    v208 = 0x800000000;
    memset(v210, 0, sizeof(v210));
    v209 = &v210[8];
    v211 = 0;
    if ((int)a2 < 0)
      v90 = COERCE__INT64((double)(unint64_t)(int)a2) + 0x2000000000000;
    else
      v90 = (int)a2 | 0xFFFE000000000000;
    JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v207, v90, v53, a4, a5, a6, a7, a8);
    v197 = v209;
    LODWORD(v198) = v208;
    v26 = JSC::construct((unint64_t)a1, (uint64_t)v196, (uint64_t)&v197, (uint64_t)"Species construction did not get a valid constructor", 53);
    if (!*((_DWORD *)v14 + 20)
      || !JSC::VM::hasExceptionsAfterHandlingTraps(v14, (uint64_t)v91, v92, v93, v94, v95, v96, v97))
    {
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v208, v91, v92, v93, v94, v95, v96, v97);
      return v26;
    }
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v208, v91, v92, v93, v94, v95, v96, v97);
    return 0;
  }
  v53 = *(_QWORD *)(*((_QWORD *)v14 + 5244) + 2752);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v199 = 0xFFFFFFFF00000000;
  LOBYTE(v203) = 0;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v201 = 0;
  memset(v202, 0, 13);
  v200 = v196;
  v55 = (uint64_t)a1[7];
  v56 = *((unsigned __int8 *)v196 + 5);
  if (v56 <= 0x16)
  {
    if (v56 != 2)
    {
LABEL_162:
      v131 = v53;
      v132 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v196, (unint64_t)a1);
      if (!v132)
        goto LABEL_89;
      v54 = (JSC::JSString *)v132;
      v55 = (uint64_t)a1[7];
      v53 = v131;
      goto LABEL_48;
    }
    v9 = (unint64_t)a1[7];
    v137 = v53;
    if (*(_QWORD *)(*(_QWORD *)(v55 + 41952) + 1768) == v53)
    {
      v138 = *((_QWORD *)v196 + 1);
      if ((v138 & 1) != 0)
        v139 = (unsigned int *)((char *)v196 + 16);
      else
        v139 = (unsigned int *)(v138 + 4);
      v140 = *v139;
      if ((v140 & 0x80000000) != 0)
      {
        *(double *)a9.i64 = (double)v140;
        Index = COERCE__INT64((double)v140) + 0x2000000000000;
      }
      else
      {
        Index = v140 | 0xFFFE000000000000;
      }
      v142 = 14;
      goto LABEL_191;
    }
    if (v53)
    {
      v147 = *(_DWORD *)(v53 + 16);
      if ((v147 & 0x20) == 0)
      {
        v148 = *(_BYTE **)(v53 + 8);
        v149 = *(unsigned int *)(v53 + 4);
        if ((v147 & 4) != 0)
        {
          if (!(_DWORD)v149)
            goto LABEL_204;
          v53 = *v148 - 48;
          if (v53 > 9 || v149 >= 2 && *v148 == 48)
            goto LABEL_204;
          v184 = v148 + 1;
          v185 = v149 - 1;
          while (v185)
          {
            if (v53 > 0x19999999)
              goto LABEL_204;
            v186 = *v184 - 48;
            if (v186 > 9)
              goto LABEL_204;
            v143 = 0;
            v101 = __CFADD__(v186, 10 * v53);
            v53 = v186 + 10 * (_DWORD)v53;
            ++v184;
            --v185;
            if (v101)
              goto LABEL_192;
          }
        }
        else
        {
          if (!(_DWORD)v149)
            goto LABEL_204;
          v53 = *(unsigned __int16 *)v148 - 48;
          if (v53 > 9)
            goto LABEL_204;
          if (*(_WORD *)v148 == 48 && v149 > 1)
            goto LABEL_204;
          v151 = (unsigned __int16 *)(v148 + 2);
          v152 = v149 - 1;
          while (v152)
          {
            if (v53 > 0x19999999)
              goto LABEL_204;
            v153 = *v151 - 48;
            if (v153 > 9)
              goto LABEL_204;
            v143 = 0;
            v101 = __CFADD__(v153, 10 * v53);
            v53 = v153 + 10 * (_DWORD)v53;
            ++v151;
            --v152;
            if (v101)
              goto LABEL_192;
          }
        }
        if ((_DWORD)v53 != -1)
        {
          v187 = *((_QWORD *)v196 + 1);
          v188 = (v187 & 1) != 0 ? (JSC::JSString *)((char *)v196 + 16) : (JSC::JSString *)(v187 + 4);
          if (*(_DWORD *)v188 > v53)
          {
            Index = JSC::JSString::getIndex(v196, (JSC::JSGlobalObject *)a1, v53, a4, a5, a6, a7, a8, a9);
            if (!*(_DWORD *)(v55 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v55, v52, v53, a4, a5, a6, a7, a8))
            {
              v142 = 10;
LABEL_191:
              v197 = (_BYTE *)Index;
              LODWORD(v199) = v142;
              v201 = 0;
              v143 = 1;
              BYTE1(v202[1]) = 1;
              goto LABEL_192;
            }
          }
        }
      }
    }
LABEL_204:
    v143 = 0;
LABEL_192:
    if (*(_DWORD *)(v55 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v55, v52, v53, a4, a5, a6, a7, a8))
      goto LABEL_89;
    v53 = v137;
    if ((v143 & 1) != 0)
      goto LABEL_96;
    goto LABEL_162;
  }
LABEL_48:
  v57 = (char *)v54 + 6;
  v58 = (WTF *)(v53 >> 4);
  v59 = (unint64_t)v54;
  if ((*((_BYTE *)v54 + 6) & 8) == 0)
  {
    v9 = (unint64_t)v54;
    do
    {
      v60 = *(_DWORD *)v9 & 0xFFFFFFFE;
      v61 = 16 * v60;
      if (!(_DWORD)v58 || (v58 & ~*(_DWORD *)(16 * v60 + 0x20)) != 0)
        goto LABEL_61;
      v62 = *(_QWORD *)(16 * v60 + 0x58);
      if (!v62)
      {
        v73 = *(_QWORD *)(16 * v60 + 0x40);
        if (!v73 || *(_BYTE *)(v73 + 5) != 1 && *(_DWORD *)(v73 + 80) < 2u)
          goto LABEL_61;
        v189 = v54;
        v191 = (WTF *)v53;
        v74 = v58;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v61, (JSC::VM *)v55, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        v58 = v74;
        v54 = v189;
        v53 = (unint64_t)v191;
        if (!v62)
          goto LABEL_61;
      }
      if (!*(_DWORD *)(v62 + 24))
        goto LABEL_61;
      v63 = *(_QWORD *)(v62 + 16);
      v64 = v63 & 0xFFFFFFFFFFFFFFFELL;
      v65 = *(unsigned int *)(v62 + 8);
      v66 = *(_DWORD *)(v53 + 16);
      if ((v63 & 1) != 0)
      {
        if ((v66 & 0x20) != 0)
          v66 = *(_DWORD *)(v53 + 32);
        v67 = *(_DWORD *)(v62 + 12);
        v68 = (v66 >> 8) & *(_QWORD *)&v67;
        v69 = *(unsigned __int8 *)(v64 + v68);
        if (!*(_BYTE *)(v64 + v68))
          goto LABEL_61;
        v70 = v64 + v65;
        v71 = 1;
        while (1)
        {
          v72 = *(_QWORD *)(v70 + 8 * (v69 - 1));
          if (v53 == (v72 & 0xFFFFFFFFFFFFLL))
            break;
          v68 = ((_DWORD)v68 + v71) & v67;
          v69 = *(unsigned __int8 *)(v64 + v68);
          ++v71;
          if (!*(_BYTE *)(v64 + v68))
            goto LABEL_61;
        }
        a6 = (v72 >> 16) & 0xFF00000000 | HIBYTE(v72);
      }
      else
      {
        if ((v66 & 0x20) != 0)
          v66 = *(_DWORD *)(v53 + 32);
        v75 = *(_DWORD *)(v62 + 12);
        v76 = v75 & (v66 >> 8);
        v77 = *(_DWORD *)(v64 + 4 * v76);
        if (!v77)
          goto LABEL_61;
        v78 = v64 + 4 * v65;
        v79 = 1;
        while (1)
        {
          v80 = (v77 - 1);
          if (v53 == *(_QWORD *)(v78 + 16 * v80))
            break;
          v76 = (v76 + v79) & v75;
          v77 = *(_DWORD *)(v64 + 4 * v76);
          ++v79;
          if (!v77)
            goto LABEL_61;
        }
        a6 = *(unsigned int *)(v78 + 16 * v80 + 8) | ((unint64_t)*(unsigned __int8 *)(v78 + 16 * v80 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v86 = v9 + 16;
          v87 = a6 << 32;
        }
        else
        {
          v86 = *(_QWORD *)(v9 + 8) - 8;
          v87 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v86 + (v87 >> 29));
        if ((a4 & 0xFFFE000000000002) != 0)
          goto LABEL_95;
        v88 = *(unsigned __int8 *)(a4 + 5);
        if (v88 == 5)
        {
          v112 = v53;
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)v9, v55, (uint64_t)&v197, a4, SHIDWORD(a6), a6);
          v53 = v112;
          goto LABEL_96;
        }
        if (v88 != 6)
        {
LABEL_95:
          v197 = (_BYTE *)a4;
          v201 = v9;
          v199 = __PAIR64__(a6, HIDWORD(a6));
          LOWORD(v202[1]) = 257;
          goto LABEL_96;
        }
        v113 = *(_DWORD *)(v61 + 16) & 3;
        v114 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v116 = *(_QWORD *)(a4 + 24);
          v115 = *(_QWORD *)(a4 + 32);
          v197 = *(_BYTE **)(a4 + 8);
          v198 = v114;
          LODWORD(v199) = HIDWORD(a6);
          v201 = v9;
          BYTE1(v202[1]) = 3;
          if (v113 != 2)
            LOBYTE(v202[1]) = 1;
          BYTE3(v202[1]) = 1;
          v205 = v116;
          v206 = v115;
          goto LABEL_96;
        }
        v197 = *(_BYTE **)(a4 + 8);
        v198 = v114;
        LODWORD(v199) = HIDWORD(a6);
        v201 = v9;
LABEL_179:
        BYTE1(v202[1]) = 3;
        if (v113 != 2)
          LOBYTE(v202[1]) = 1;
        goto LABEL_96;
      }
LABEL_61:
      if ((*v57 & 0x20) != 0)
      {
        v110 = v53;
        v193 = v58;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v9, (JSC::VM *)v55, v53, (uint64_t)&v197);
        v58 = v193;
        v53 = v110;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_96;
      }
      v59 = *(_QWORD *)(v61 + 48);
      if (!v59)
        v59 = *(_QWORD *)(v9 + 16);
      if ((v59 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v59 + 5) < 0x17u)
      {
        if (!v53)
          goto LABEL_89;
        v81 = *(_DWORD *)(v53 + 16);
        if ((v81 & 0x20) != 0)
          goto LABEL_89;
        v82 = *(_WORD **)(v53 + 8);
        v83 = *(unsigned int *)(v53 + 4);
        if ((v81 & 4) == 0)
        {
          if ((_DWORD)v83)
          {
            v84 = (unsigned __int16)*v82 - 48;
            if (v84 <= 9)
            {
              v192 = (WTF *)v53;
              if (*v82 != 48 || v83 <= 1)
              {
                v98 = v82 + 1;
                v99 = v83 - 1;
                v85 = 10;
                while (v99)
                {
                  if (v84 <= 0x19999999)
                  {
                    v100 = *v98 - 48;
                    if (v100 <= 9)
                    {
                      v101 = __CFADD__(v100, 10 * v84);
                      v84 = v100 + 10 * (_DWORD)v84;
                      ++v98;
                      --v99;
                      if (!v101)
                        continue;
                    }
                  }
                  goto LABEL_98;
                }
                goto LABEL_271;
              }
            }
          }
          goto LABEL_89;
        }
        v192 = (WTF *)v53;
        if (!(_DWORD)v83)
          goto LABEL_89;
        v84 = *(unsigned __int8 *)v82 - 48;
        if (v84 > 9 || v83 >= 2 && *(_BYTE *)v82 == 48)
          goto LABEL_89;
        v164 = (unsigned __int8 *)v82 + 1;
        v165 = v83 - 1;
        while (v165)
        {
          if (v84 > 0x19999999)
            goto LABEL_89;
          v166 = *v164 - 48;
          if (v166 > 9)
            goto LABEL_89;
          v101 = __CFADD__(v166, 10 * v84);
          v84 = v166 + 10 * (_DWORD)v84;
          ++v164;
          --v165;
          v85 = 10;
          if (v101)
            goto LABEL_98;
        }
LABEL_271:
        if ((_DWORD)v84 == -1)
        {
LABEL_89:
          v85 = 10;
          goto LABEL_98;
        }
        v167 = a1[7];
        while (2)
        {
          v168 = 16 * (*(_DWORD *)v54 & 0xFFFFFFFE);
          v170 = (*(uint64_t (**)(JSC::JSString *, JSC::VM **, uint64_t, _BYTE **))(16
                                                                                           * *(unsigned int *)(v168 + 0x4C)
                                                                                           + 0x70))(v54, a1, v84, &v197);
          if (*((_DWORD *)v167 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v167, v52, v169, a4, a5, a6, a7, a8))
            goto LABEL_89;
          v53 = (unint64_t)v192;
          if ((v170 & 1) != 0)
            goto LABEL_96;
          if (BYTE2(v202[1]) == 3)
          {
            if (BYTE4(v202[1]))
              goto LABEL_89;
            v171 = *((unsigned __int8 *)v54 + 5);
            if (v171 != 61)
              goto LABEL_277;
          }
          else
          {
            v171 = *((unsigned __int8 *)v54 + 5);
            if (v171 == 61)
            {
              if (BYTE2(v202[1]) == 1)
                goto LABEL_89;
            }
            else
            {
LABEL_277:
              if ((v171 - 39) <= 0xA
                && JSC::JSArrayBufferView::length(v54, v52, (uint64_t)v192, a4, a5, a6, a7, a8) <= v84)
              {
                goto LABEL_89;
              }
            }
          }
          if ((*(_WORD *)(v168 + 12) & 0x800) == 0 || BYTE2(v202[1]) == 3)
          {
            v172 = *(_QWORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x30);
            if (!v172)
              v172 = *((_QWORD *)v54 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v172 = (*(uint64_t (**)(JSC::JSString *, JSC::VM **, unint64_t))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0xB0))(v54, a1, v53);
            }
            else
            {
              v172 = *(_QWORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x30);
              if (!v172)
                v172 = *((_QWORD *)v54 + 2);
            }
            if (*((_DWORD *)v167 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v167, v52, v53, a4, a5, a6, a7, a8))
              goto LABEL_89;
          }
          if ((v172 & 0xFFFE000000000002) != 0)
            goto LABEL_89;
          v54 = (JSC::JSString *)v172;
          v85 = 10;
          if (*(unsigned __int8 *)(v172 + 5) <= 0x16u)
            goto LABEL_98;
          continue;
        }
      }
      v57 = (_BYTE *)(v59 + 6);
      v9 = v59;
    }
    while ((*(_BYTE *)(v59 + 6) & 8) == 0);
  }
  v117 = (int)v58;
  v190 = v59;
  v194 = (WTF *)v53;
  if (v53)
  {
    v118 = *(_DWORD *)(v53 + 16);
    if ((v118 & 0x20) == 0)
    {
      v119 = *(_BYTE **)(v53 + 8);
      v120 = *(unsigned int *)(v53 + 4);
      if ((v118 & 4) != 0)
      {
        if ((_DWORD)v120)
        {
          v9 = *v119 - 48;
          if (v9 <= 9 && (v120 < 2 || *v119 != 48))
          {
            v173 = v119 + 1;
            v174 = v120 - 1;
            while (v174)
            {
              if (v9 <= 0x19999999)
              {
                v175 = *v173 - 48;
                if (v175 <= 9)
                {
                  v101 = __CFADD__(v175, 10 * v9);
                  v9 = v175 + 10 * (_DWORD)v9;
                  ++v173;
                  --v174;
                  if (!v101)
                    continue;
                }
              }
              goto LABEL_136;
            }
LABEL_317:
            if ((_DWORD)v9 != -1)
            {
              v176 = a1[7];
              while (1)
              {
                v177 = 16 * (*(_DWORD *)v54 & 0xFFFFFFFE);
                v178 = (*(uint64_t (**)(JSC::JSString *, JSC::VM **, unint64_t, _BYTE **))(16 * *(unsigned int *)(v177 + 0x4C) + 0x70))(v54, a1, v9, &v197);
                v180 = v178;
                if (*((_DWORD *)v176 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v176, v52, v179, a4, a5, a6, a7, a8);
                  v53 = (unint64_t)v194;
                  if (((hasExceptionsAfterHandlingTraps | v180) & 1) != 0)
                  {
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_96;
                    goto LABEL_89;
                  }
                }
                else
                {
                  v53 = (unint64_t)v194;
                  if ((v178 & 1) != 0)
                    goto LABEL_96;
                }
                if (BYTE2(v202[1]) == 3)
                {
                  if (BYTE4(v202[1]))
                    goto LABEL_89;
                  v181 = *((unsigned __int8 *)v54 + 5);
                  if (v181 == 61)
                    goto LABEL_324;
                }
                else
                {
                  v181 = *((unsigned __int8 *)v54 + 5);
                  if (v181 == 61)
                  {
                    if (BYTE2(v202[1]) == 1)
                      goto LABEL_89;
                    goto LABEL_324;
                  }
                }
                if ((v181 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length(v54, v52, v53, a4, a5, a6, a7, a8) <= v9)
                {
                  goto LABEL_89;
                }
LABEL_324:
                if ((*(_WORD *)(v177 + 12) & 0x800) == 0 || BYTE2(v202[1]) == 3)
                {
                  v182 = *(_QWORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x30);
                  if (!v182)
                    v182 = *((_QWORD *)v54 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v182 = (*(uint64_t (**)(JSC::JSString *, JSC::VM **, unint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v54, a1, v53);
                  }
                  else
                  {
                    v182 = *(_QWORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x30);
                    if (!v182)
                      v182 = *((_QWORD *)v54 + 2);
                  }
                  if (*((_DWORD *)v176 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v176, v52, v53, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_89;
                  }
                }
                if ((v182 & 0xFFFE000000000002) != 0)
                  goto LABEL_89;
                v54 = (JSC::JSString *)v182;
                v85 = 10;
                if (*(unsigned __int8 *)(v182 + 5) <= 0x16u)
                  goto LABEL_98;
              }
            }
          }
        }
      }
      else if ((_DWORD)v120)
      {
        v9 = *(unsigned __int16 *)v119 - 48;
        if (v9 <= 9 && (*(_WORD *)v119 != 48 || v120 <= 1))
        {
          v133 = (unsigned __int16 *)(v119 + 2);
          v134 = v120 - 1;
          while (v134)
          {
            if (v9 <= 0x19999999)
            {
              v135 = *v133 - 48;
              if (v135 <= 9)
              {
                v101 = __CFADD__(v135, 10 * v9);
                v9 = v135 + 10 * (_DWORD)v9;
                ++v133;
                --v134;
                if (!v101)
                  continue;
              }
            }
            goto LABEL_136;
          }
          goto LABEL_317;
        }
      }
    }
  }
LABEL_136:
  v121 = a1[7];
  while (1)
  {
    v122 = *(_DWORD *)v190 & 0xFFFFFFFE;
    v123 = 16 * v122;
    if ((*(_BYTE *)(v190 + 6) & 8) == 0)
      break;
    v156 = (*(uint64_t (**)(uint64_t, JSC::VM **, WTF *, _BYTE **))(16 * *(unsigned int *)(16 * v122 + 0x4C)
                                                                           + 0x68))(v190, a1, v194, &v197);
    if (*((_DWORD *)v121 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v121, v52, v155, a4, a5, a6, a7, a8))
      goto LABEL_89;
    v53 = (unint64_t)v194;
    if ((v156 & 1) != 0)
      goto LABEL_96;
    if (BYTE2(v202[1]) == 3)
    {
      if (BYTE4(v202[1]))
        goto LABEL_89;
      v157 = *(unsigned __int8 *)(v190 + 5);
      if (v157 != 61)
      {
LABEL_229:
        if (!v194)
          goto LABEL_143;
        if ((v157 - 50) < 0xFFFFFFF5)
          goto LABEL_143;
        v158 = *((_DWORD *)v194 + 4);
        if ((v158 & 0x20) != 0)
          goto LABEL_143;
        v159 = *((unsigned int *)v194 + 1);
        if (!(_DWORD)v159)
          goto LABEL_143;
        v160 = (unsigned __int8 *)*((_QWORD *)v194 + 1);
        if ((v158 & 4) == 0)
        {
          v161 = *(unsigned __int16 *)v160;
          if ((_DWORD)v159 == 1)
            goto LABEL_235;
          if (v161 == 45)
          {
            v161 = *((unsigned __int16 *)v160 + 1);
            goto LABEL_240;
          }
          if ((v161 - 48) >= 0xA && ((_DWORD)v159 != 8 || v161 != 73))
          {
LABEL_255:
            if ((_DWORD)v159 != 3 || v161 != 78)
              goto LABEL_143;
          }
LABEL_246:
          v9 = v9 & 0xFFFFFF0000000000 | v159 | ((unint64_t)((v158 >> 2) & 1) << 32);
          JSC::jsToNumber(v160, v9);
          WTF::numberToString(&v207, v162);
          if (WTF::equal((unint64_t)v194, (unint64_t)&v207, v163))
            goto LABEL_89;
          goto LABEL_143;
        }
        v161 = *v160;
        if ((_DWORD)v159 == 1)
        {
LABEL_235:
          if ((v161 - 48) < 0xA)
            goto LABEL_89;
          goto LABEL_143;
        }
        if (v161 == 45)
        {
          v161 = v160[1];
LABEL_240:
          if ((v161 - 48) < 0xA)
          {
            if ((_DWORD)v159 == 2)
              goto LABEL_89;
            goto LABEL_246;
          }
          if ((_DWORD)v159 != 9)
            goto LABEL_143;
        }
        else
        {
          if ((v161 - 48) < 0xA)
            goto LABEL_246;
          if ((_DWORD)v159 != 8)
            goto LABEL_255;
        }
        if (v161 != 73)
          goto LABEL_143;
        goto LABEL_246;
      }
    }
    else
    {
      v157 = *(unsigned __int8 *)(v190 + 5);
      if (v157 != 61)
        goto LABEL_229;
      if (BYTE2(v202[1]) == 1)
        goto LABEL_89;
    }
LABEL_143:
    if ((*(_WORD *)(v123 + 12) & 0x800) != 0)
    {
      v126 = *(_DWORD *)v190;
      if (BYTE2(v202[1]) != 3)
      {
        v154 = 16 * (v126 & 0xFFFFFFFE);
        if ((*(_WORD *)(v154 + 12) & 0x800) != 0)
        {
          v127 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v154 + 76) + 0xB0))(v190, a1);
        }
        else
        {
          v127 = *(_QWORD *)(v154 + 48);
          if (!v127)
            v127 = *(_QWORD *)(v190 + 16);
        }
        if (*((_DWORD *)v121 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v121, v52, v53, a4, a5, a6, a7, a8))
          goto LABEL_89;
        goto LABEL_147;
      }
    }
    else
    {
      v126 = *(_DWORD *)v190;
    }
    v127 = *(_QWORD *)(16 * (v126 & 0xFFFFFFFE) + 0x30);
    if (!v127)
      v127 = *(_QWORD *)(v190 + 16);
LABEL_147:
    if ((v127 & 0xFFFE000000000002) != 0)
      goto LABEL_89;
    v190 = v127;
    v85 = 10;
    if (*(unsigned __int8 *)(v127 + 5) <= 0x16u)
      goto LABEL_98;
  }
  if (!v117
    || (v117 & ~*(_DWORD *)(16 * v122 + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v122), v121, v53, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v124)|| (v207 = v194, v125 = JSC::PropertyTable::get(v124, (uint64_t *)&v207), a6 = v125, (_DWORD)v125 == -1))
  {
    if ((*(_BYTE *)(v190 + 6) & 0x20) != 0)
    {
      v136 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v190, v121, (unint64_t)v194, (uint64_t)&v197);
      v53 = (unint64_t)v194;
      if ((v136 & 1) != 0)
        goto LABEL_96;
    }
    goto LABEL_143;
  }
  a5 = HIDWORD(v125);
  if ((int)v125 <= 63)
  {
    v128 = v190 + 16;
    v129 = v125 << 32;
  }
  else
  {
    v128 = *(_QWORD *)(v190 + 8) - 8;
    v129 = 0x3F00000000 - (v125 << 32);
  }
  a4 = *(_QWORD *)(v128 + (v129 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_159:
    v197 = (_BYTE *)a4;
    v201 = v190;
    v199 = __PAIR64__(v125, HIDWORD(v125));
    LOWORD(v202[1]) = 257;
    goto LABEL_160;
  }
  v130 = *(unsigned __int8 *)(a4 + 5);
  if (v130 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v190, (uint64_t)v121, (uint64_t)&v197, a4, SHIDWORD(v125), v125);
    goto LABEL_160;
  }
  if (v130 != 6)
    goto LABEL_159;
  v113 = *(_DWORD *)(v123 + 16) & 3;
  v144 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v197 = *(_BYTE **)(a4 + 8);
    v198 = v144;
    LODWORD(v199) = HIDWORD(v125);
    v53 = (unint64_t)v194;
    v201 = v190;
    goto LABEL_179;
  }
  v146 = *(_QWORD *)(a4 + 24);
  v145 = *(_QWORD *)(a4 + 32);
  v197 = *(_BYTE **)(a4 + 8);
  v198 = v144;
  LODWORD(v199) = HIDWORD(v125);
  v201 = v190;
  BYTE1(v202[1]) = 3;
  if (v113 != 2)
    LOBYTE(v202[1]) = 1;
  BYTE3(v202[1]) = 1;
  v205 = v146;
  v206 = v145;
LABEL_160:
  v53 = (unint64_t)v194;
LABEL_96:
  if (BYTE1(v202[1]) == 1)
  {
    v85 = (uint64_t)v197;
  }
  else if (BYTE1(v202[1]) == 2)
  {
    v85 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v197, (JSC::JSGlobalObject *)a1, v53, a4, a5, a6, a7, a8);
  }
  else
  {
    v85 = JSC::PropertySlot::customGetter((uint64_t)&v197, a1[7], (WTF::StringImpl *)v53);
  }
LABEL_98:
  if (v204)
  {
    v89 = *(_DWORD *)(v203 + 4);
    if (!v89)
    {
      __break(0xC471u);
      JUMPOUT(0x1984B0308);
    }
    *(_DWORD *)(v203 + 4) = v89 - 1;
  }
  v196 = (JSC::JSString *)v85;
  if (*((_DWORD *)v14 + 20))
  {
    if (!JSC::VM::hasExceptionsAfterHandlingTraps(v14, v52, v53, a4, a5, a6, a7, a8))
    {
      v85 = (uint64_t)v196;
      goto LABEL_102;
    }
    return 0;
  }
LABEL_102:
  v54 = (JSC::JSString *)v85;
  if (v85 != 2)
    goto LABEL_103;
LABEL_17:
  if ((a2 & 0x80000000) != 0)
  {
    v28 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v28 = 0x3A00000002;
    *(_QWORD *)(v28 + 8) = "Array length must be a positive integer of safe magnitude.";
    *(_DWORD *)(v28 + 16) = 4;
    v207 = (WTF::StringImpl *)v28;
    v30 = JSC::createRangeError((unint64_t)a1, &v207, v29);
    JSC::VM::throwException(v195, (JSC::JSGlobalObject *)a1, v30, v31, v32, v33, v34, v35);
    v43 = v207;
    v207 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
      }
      else
      {
        *(_DWORD *)v43 -= 2;
      }
    }
    return 0;
  }
  v22 = 5;
  LODWORD(v23) = (v10 >> 1) & 7;
  if ((v10 & 0x10) != 0)
    v23 = ((v10 & 0xE) + 10) >> 1;
  else
    v23 = v23;
  if (!(a2 >> 27))
    v22 = v23;
  v24 = *((_DWORD *)a1 + v22 + 223);
  if (v24)
    v25 = 16 * (v24 & 0xFFFFFFFE);
  else
    v25 = 0;
  v26 = JSC::JSArray::tryCreate(v14, v25, a2, a4, a5, a6, a7, a8, (__n128)a9);
  if (!v26)
    JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v195);
  return v26;
}

unint64_t operationNewArrayWithSpecies(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unsigned int v9;
  uint64_t v12;
  double v13;
  unsigned int v14;
  int isArraySlow;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  JSC::JSGlobalObject *v26;
  unint64_t v27;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  JSC::Heap **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  JSC::JSCell *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  JSC::VM *v52;
  unsigned int v53;
  _BYTE *v54;
  JSC::VMTraps *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  char OwnStaticPropertySlot;
  unint64_t OutOfMemoryError;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  JSC::Exception *v87;
  int v88;
  _WORD *v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unsigned __int16 *v96;
  uint64_t v97;
  unsigned int v98;
  BOOL v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  BOOL v126;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int8x16_t **v131;
  int v132;
  unint64_t v133;
  int v134;
  _BYTE *v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  int v153;
  unsigned int v154;
  int v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  unsigned __int8 *v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  unint64_t v175;
  size_t v176;
  char *v177;
  char *v178;
  int v179;
  uint64_t v180;
  unsigned __int8 *v181;
  JSC::VM **v182;
  uint64_t v183;
  int v184;
  int v185;
  JSC::VM **p_dst;
  uint64_t v187;
  int v188;
  int v189;
  int v190;
  uint64_t (*v191)(JSC::VM **);
  JSC::VM **v192;
  int v193;
  int v194;
  unint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  double v200;
  unsigned __int16 *v201;
  uint64_t v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unsigned int *v209;
  uint64_t v210;
  WTF::StringImpl *Index;
  int v212;
  char v213;
  int v214;
  _BYTE *v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  int8x16_t **v220;
  unsigned __int16 *v222;
  uint64_t v223;
  unsigned int v224;
  int v225;
  unsigned __int8 *v226;
  uint64_t v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  int v233;
  uint64_t v234;
  int v235;
  int v236;
  unint64_t v237;
  unint64_t v238;
  unsigned __int8 *v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  char v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  char v250;
  unint64_t v251;
  int v252;
  unint64_t v253;
  unsigned __int8 *v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t v257;
  _DWORD *v258;
  int v259;
  unint64_t v260;
  JSC::VMTraps *v261;
  JSC::VMTraps *v262;
  JSC::VMTraps *v263;
  JSC::VMTraps *v264;
  JSC::VMTraps *v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  WTF::StringImpl *v271;
  uint64_t v272;
  unint64_t v273;
  _DWORD *v274;
  _DWORD *v275;
  _QWORD v276[2];
  uint64_t v277;
  char v278;
  int8x16_t **v279;
  uint64_t v280;
  JSC::VM *v281;
  JSC::VM *__dst;
  unint64_t v283;
  _QWORD *v284;
  _QWORD v285[13];
  char __s[8];
  int v287;
  uint64_t v288;
  uint64_t vars0;

  v9 = a4;
  v288 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v12 + 40) = vars0;
  *(double *)a9.i64 = (double)(int)a2;
  if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v13 = a2 - 0x2000000000000;
  else
    v13 = (double)(int)a2;
  v270 = 10;
  if ((a3 & 0xFFFE000000000002) != 0 || (v14 = *(unsigned __int8 *)(a3 + 5), v14 < 0x17))
  {
LABEL_9:
    isArraySlow = 0;
    goto LABEL_10;
  }
  if (v14 - 36 >= 2)
  {
    if (v14 == 61)
    {
      isArraySlow = JSC::isArraySlow((JSC *)a1, (JSC::JSGlobalObject *)a3, (JSC::ProxyObject *)a3);
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  isArraySlow = 1;
LABEL_10:
  if (*(_DWORD *)(v12 + 80))
  {
    v29 = *(_DWORD *)(v12 + 80);
    if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  v16 = (unint64_t)v13;
  if (!isArraySlow)
    goto LABEL_22;
  v17 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
  v18 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x30);
  if (!v18)
    v18 = *(_QWORD *)(a3 + 16);
  v21 = v18 == *(_QWORD *)(v17 + 672)
     && ((v19 = *(_QWORD *)(v17 + 2280), (v19 & 1) != 0)
       ? (v20 = (v19 >> 1) & 3)
       : (v20 = *(unsigned __int8 *)(v19 + 4)),
         v20 == 1)
     && ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x12) & 0x20) == 0
      || JSC::JSObject::getDirectOffset((_DWORD *)a3, (JSC::VM *)v12, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1080), (const JSC::PropertyTable *)a4, a5, a6, a7, a8) == -1);
  if (*(_DWORD *)(v12 + 80))
  {
    v30 = *(_DWORD *)(v12 + 80);
    if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v21)
    goto LABEL_22;
  v50 = JSC::JSObject::get((unsigned int *)a3, a1, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1080), a4, a5, a6, a7, a8);
  v270 = v50;
  if (*(_DWORD *)(v12 + 80))
  {
    v193 = *(_DWORD *)(v12 + 80);
    if ((v193 & 0x27) != 0 && (v193 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v49, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if ((v50 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v50 + 5) >= 0x17u)
  {
    (*(void (**)(JSC::VM **__return_ptr, uint64_t))(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE)
                                                                              + 0x4C)
                                                            + 0x40))(&__dst, v50);
    v50 = v270;
    if ((_BYTE)__dst)
    {
      if (*(_QWORD *)(16 * (*(_DWORD *)v270 & 0xFFFFFFFE) + 0x28) != a1
        && &JSC::ArrayConstructor::s_info == (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)v270 & 0xFFFFFFFE) + 0x4C)))
      {
        goto LABEL_22;
      }
    }
  }
  if ((v50 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v50 + 5) < 0x17u)
  {
LABEL_127:
    if (v50 == 10)
      goto LABEL_22;
    LOBYTE(__dst) = 0;
    HIDWORD(v283) = 8;
    memset(v285, 0, 72);
    v284 = &v285[1];
    if (HIDWORD(v16))
    {
      v200 = (double)v16;
    }
    else
    {
      if ((v16 & 0x80000000) == 0)
      {
        v110 = v16 | 0xFFFE000000000000;
        goto LABEL_131;
      }
      v200 = (double)v16;
    }
    v110 = *(_QWORD *)&v200 + 0x2000000000000;
LABEL_131:
    v285[1] = v110;
    LODWORD(v283) = 1;
    *(_QWORD *)__s = &v285[1];
    v287 = 1;
    v281 = *(JSC::VM **)(a1 + 56);
    if ((v50 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v271) = 0;
    }
    else
    {
      if (*(_BYTE *)(v50 + 5) == 26)
        JSC::JSFunction::getConstructData((uint64_t *)&v271, (uint64_t *)v50, v48);
      else
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v50 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0x40))(&v271, v50);
      if ((_BYTE)v271)
      {
        v27 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), (WTF::Thread *)v50, (unsigned __int8 *)&v271, (uint64_t)__s, (WTF *)v50, v111, v112, v113);
        goto LABEL_136;
      }
    }
    JSC::throwTypeError(a1, &v281, (uint64_t)"Species construction did not get a valid constructor", 53);
    v27 = 0;
LABEL_136:
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_137;
    v194 = *(_DWORD *)(v12 + 80);
    if ((v194 & 0x27) != 0 && (v194 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v115, v116, v117, v118, v119, v120);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_137:
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v283, v114, v115, v116, v117, v118, v119, v120);
      return v27;
    }
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v283, v114, v115, v116, v117, v118, v119, v120);
    return 0;
  }
  v51 = *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 2752);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v273 = 0xFFFFFFFF00000000;
  LOBYTE(v277) = 0;
  v278 = 0;
  v279 = 0;
  v280 = 0;
  v275 = 0;
  memset(v276, 0, 13);
  v274 = (_DWORD *)v50;
  v52 = *(JSC::VM **)(a1 + 56);
  v53 = *(unsigned __int8 *)(v50 + 5);
  if (v53 > 0x16)
    goto LABEL_54;
  if (v53 == 2)
  {
    v205 = *(_QWORD *)(a1 + 56);
    v206 = *(_QWORD *)(*((_QWORD *)v52 + 5244) + 1768);
    v207 = v51;
    if (v206 == v51)
    {
      v208 = *(_QWORD *)(v50 + 8);
      if ((v208 & 1) != 0)
        v209 = (unsigned int *)(v50 + 16);
      else
        v209 = (unsigned int *)(v208 + 4);
      v210 = *v209;
      if ((v210 & 0x80000000) != 0)
      {
        *(double *)a9.i64 = (double)v210;
        Index = (WTF::StringImpl *)(COERCE__INT64((double)v210) + 0x2000000000000);
      }
      else
      {
        Index = (WTF::StringImpl *)(v210 | 0xFFFE000000000000);
      }
      v212 = 14;
      goto LABEL_338;
    }
    if (v51)
    {
      v214 = *(_DWORD *)(v51 + 16);
      if ((v214 & 0x20) == 0)
      {
        v215 = *(_BYTE **)(v51 + 8);
        v216 = *(unsigned int *)(v51 + 4);
        if ((v214 & 4) != 0)
        {
          if (!(_DWORD)v216)
            goto LABEL_344;
          v49 = *v215 - 48;
          if (v49 > 9 || v216 >= 2 && *v215 == 48)
            goto LABEL_344;
          v254 = v215 + 1;
          v255 = v216 - 1;
          while (v255)
          {
            if (v49 > 0x19999999)
              goto LABEL_344;
            v256 = *v254 - 48;
            if (v256 > 9)
              goto LABEL_344;
            v213 = 0;
            v99 = __CFADD__(v256, 10 * v49);
            v49 = v256 + 10 * (_DWORD)v49;
            ++v254;
            --v255;
            if (v99)
              goto LABEL_345;
          }
        }
        else
        {
          if (!(_DWORD)v216)
            goto LABEL_344;
          v49 = *(unsigned __int16 *)v215 - 48;
          if (v49 > 9)
            goto LABEL_344;
          if (*(_WORD *)v215 == 48 && v216 > 1)
            goto LABEL_344;
          v222 = (unsigned __int16 *)(v215 + 2);
          v223 = v216 - 1;
          while (v223)
          {
            if (v49 > 0x19999999)
              goto LABEL_344;
            v224 = *v222 - 48;
            if (v224 > 9)
              goto LABEL_344;
            v213 = 0;
            v99 = __CFADD__(v224, 10 * v49);
            v49 = v224 + 10 * (_DWORD)v49;
            ++v222;
            --v223;
            if (v99)
              goto LABEL_345;
          }
        }
        if ((_DWORD)v49 != -1)
        {
          v257 = *(_QWORD *)(v50 + 8);
          v258 = (_DWORD *)((v257 & 1) != 0 ? v50 + 16 : v257 + 4);
          if (*v258 > v49)
          {
            Index = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v50, (JSC::JSGlobalObject *)a1, v49, a4, a5, a6, a7, a8, a9);
            if (!*(_DWORD *)(v205 + 80))
              goto LABEL_511;
            v259 = *(_DWORD *)(v205 + 80);
            if ((v259 & 0x27) != 0 && (v259 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v205 + 64), 7u, v49, a4, a5, a6, a7, a8);
            if (!*(_QWORD *)(v205 + 16))
            {
LABEL_511:
              v212 = 10;
LABEL_338:
              v271 = Index;
              LODWORD(v273) = v212;
              v275 = 0;
              v213 = 1;
              BYTE1(v276[1]) = 1;
              goto LABEL_345;
            }
          }
        }
      }
    }
LABEL_344:
    v213 = 0;
LABEL_345:
    if (*(_DWORD *)(v205 + 80))
    {
      v225 = *(_DWORD *)(v205 + 80);
      if ((v225 & 0x27) != 0 && (v225 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v205 + 64), 7u, v49, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v205 + 16))
        goto LABEL_102;
    }
    v51 = v207;
    if ((v213 & 1) != 0)
      goto LABEL_120;
  }
  v195 = v51;
  v196 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v270, a1);
  if (!v196)
    goto LABEL_102;
  v50 = v196;
  v52 = *(JSC::VM **)(a1 + 56);
  v51 = v195;
LABEL_54:
  v54 = (_BYTE *)(v50 + 6);
  v55 = (JSC::VMTraps *)(v51 >> 4);
  v56 = v50;
  if ((*(_BYTE *)(v50 + 6) & 8) == 0)
  {
    v57 = v50;
    do
    {
      v58 = *(_DWORD *)v57 & 0xFFFFFFFE;
      v59 = 16 * v58;
      if (!(_DWORD)v55 || (v55 & ~*(_DWORD *)(16 * v58 + 0x20)) != 0)
        goto LABEL_83;
      v60 = *(_QWORD *)(16 * v58 + 0x58);
      if (!v60)
      {
        v61 = *(_QWORD *)(16 * v58 + 0x40);
        if (!v61 || *(_BYTE *)(v61 + 5) != 1 && *(_DWORD *)(v61 + 80) < 2u)
          goto LABEL_83;
        v262 = v55;
        v266 = v51;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v59, v52, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        v55 = v262;
        v51 = v266;
        if (!v60)
          goto LABEL_83;
      }
      if (!*(_DWORD *)(v60 + 24))
        goto LABEL_83;
      v62 = *(_QWORD *)(v60 + 16);
      v63 = v62 & 0xFFFFFFFFFFFFFFFELL;
      v64 = *(unsigned int *)(v60 + 8);
      v65 = *(_DWORD *)(v51 + 16);
      if ((v62 & 1) != 0)
      {
        if ((v65 & 0x20) != 0)
          v65 = *(_DWORD *)(v51 + 32);
        v66 = *(_DWORD *)(v60 + 12);
        v67 = (v65 >> 8) & *(_QWORD *)&v66;
        v68 = *(unsigned __int8 *)(v63 + v67);
        if (!*(_BYTE *)(v63 + v67))
          goto LABEL_83;
        v69 = v63 + v64;
        v70 = 1;
        while (1)
        {
          v71 = *(_QWORD *)(v69 + 8 * (v68 - 1));
          if (v51 == (v71 & 0xFFFFFFFFFFFFLL))
            break;
          v67 = ((_DWORD)v67 + v70) & v66;
          v68 = *(unsigned __int8 *)(v63 + v67);
          ++v70;
          if (!*(_BYTE *)(v63 + v67))
            goto LABEL_83;
        }
        a6 = (v71 >> 16) & 0xFF00000000 | HIBYTE(v71);
      }
      else
      {
        if ((v65 & 0x20) != 0)
          v65 = *(_DWORD *)(v51 + 32);
        v72 = *(_DWORD *)(v60 + 12);
        v73 = v72 & (v65 >> 8);
        v74 = *(_DWORD *)(v63 + 4 * v73);
        if (!v74)
          goto LABEL_83;
        v75 = v63 + 4 * v64;
        v76 = 1;
        while (1)
        {
          v77 = (v74 - 1);
          if (v51 == *(_QWORD *)(v75 + 16 * v77))
            break;
          v73 = (v73 + v76) & v72;
          v74 = *(_DWORD *)(v63 + 4 * v73);
          ++v76;
          if (!v74)
            goto LABEL_83;
        }
        a6 = *(unsigned int *)(v75 + 16 * v77 + 8) | ((unint64_t)*(unsigned __int8 *)(v75 + 16 * v77 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v93 = v57 + 16;
          v94 = a6 << 32;
        }
        else
        {
          v93 = *(_QWORD *)(v57 + 8) - 8;
          v94 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v93 + (v94 >> 29));
        if ((a4 & 0xFFFE000000000002) != 0)
          goto LABEL_109;
        v95 = *(unsigned __int8 *)(a4 + 5);
        if (v95 == 5)
        {
          v108 = v51;
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)v57, (uint64_t)v52, (uint64_t)&v271, a4, SHIDWORD(a6), a6);
          v51 = v108;
          goto LABEL_120;
        }
        if (v95 != 6)
        {
LABEL_109:
          v271 = (WTF::StringImpl *)a4;
          v275 = (_DWORD *)v57;
          v273 = __PAIR64__(a6, HIDWORD(a6));
          LOWORD(v276[1]) = 257;
          goto LABEL_120;
        }
        v128 = *(_DWORD *)(v59 + 16) & 3;
        v129 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v131 = *(int8x16_t ***)(a4 + 24);
          v130 = *(_QWORD *)(a4 + 32);
          v271 = *(WTF::StringImpl **)(a4 + 8);
          v272 = v129;
          LODWORD(v273) = HIDWORD(a6);
          v275 = (_DWORD *)v57;
          BYTE1(v276[1]) = 3;
          if (v128 != 2)
            LOBYTE(v276[1]) = 1;
          BYTE3(v276[1]) = 1;
          v279 = v131;
          v280 = v130;
          goto LABEL_120;
        }
        v271 = *(WTF::StringImpl **)(a4 + 8);
        v272 = v129;
        LODWORD(v273) = HIDWORD(a6);
        v275 = (_DWORD *)v57;
        BYTE1(v276[1]) = 3;
        if (v128 == 2)
          goto LABEL_120;
LABEL_321:
        LOBYTE(v276[1]) = 1;
        goto LABEL_120;
      }
LABEL_83:
      if ((*v54 & 0x20) != 0)
      {
        v78 = v51;
        v263 = v55;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v57, v52, v51, (uint64_t)&v271);
        v55 = v263;
        v51 = v78;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_120;
      }
      v56 = *(_QWORD *)(v59 + 48);
      if (!v56)
        v56 = *(_QWORD *)(v57 + 16);
      if ((v56 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v56 + 5) < 0x17u)
      {
        if (!v51)
          goto LABEL_102;
        v88 = *(_DWORD *)(v51 + 16);
        if ((v88 & 0x20) != 0)
          goto LABEL_102;
        v89 = *(_WORD **)(v51 + 8);
        v90 = *(unsigned int *)(v51 + 4);
        if ((v88 & 4) == 0)
        {
          if ((_DWORD)v90)
          {
            v91 = (unsigned __int16)*v89 - 48;
            if (v91 <= 9)
            {
              v267 = v51;
              if (*v89 != 48 || v90 <= 1)
              {
                v96 = v89 + 1;
                v97 = v90 - 1;
                v92 = 10;
                while (v97)
                {
                  if (v91 <= 0x19999999)
                  {
                    v98 = *v96 - 48;
                    if (v98 <= 9)
                    {
                      v99 = __CFADD__(v98, 10 * v91);
                      v91 = v98 + 10 * v91;
                      ++v96;
                      --v97;
                      if (!v99)
                        continue;
                    }
                  }
                  goto LABEL_122;
                }
                goto LABEL_393;
              }
            }
          }
          goto LABEL_102;
        }
        v267 = v51;
        if (!(_DWORD)v90)
          goto LABEL_102;
        v91 = *(unsigned __int8 *)v89 - 48;
        if (v91 > 9 || v90 >= 2 && *(_BYTE *)v89 == 48)
          goto LABEL_102;
        v226 = (unsigned __int8 *)v89 + 1;
        v227 = v90 - 1;
        while (v227)
        {
          if (v91 > 0x19999999)
            goto LABEL_102;
          v228 = *v226 - 48;
          if (v228 > 9)
            goto LABEL_102;
          v99 = __CFADD__(v228, 10 * v91);
          v91 = v228 + 10 * v91;
          ++v226;
          --v227;
          v92 = 10;
          if (v99)
            goto LABEL_122;
        }
LABEL_393:
        if (v91 == -1)
        {
LABEL_102:
          v92 = 10;
          goto LABEL_122;
        }
        v229 = v91;
        v230 = *(_QWORD *)(a1 + 56);
        v264 = (JSC::VMTraps *)(v230 + 64);
        while (2)
        {
          v231 = 16 * (*(_DWORD *)v50 & 0xFFFFFFFE);
          v232 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v231 + 0x4C) + 0x70))(v50, a1, v229, &v271);
          if (*(_DWORD *)(v230 + 80))
          {
            v235 = *(_DWORD *)(v230 + 80);
            if ((v235 & 0x27) != 0 && (v235 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v264, 7u, v49, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v230 + 16))
              goto LABEL_102;
          }
          v51 = v267;
          if ((v232 & 1) != 0)
            goto LABEL_120;
          if (BYTE2(v276[1]) == 3)
          {
            if (BYTE4(v276[1]))
              goto LABEL_102;
            v233 = *(unsigned __int8 *)(v50 + 5);
            if (v233 != 61)
              goto LABEL_399;
          }
          else
          {
            v233 = *(unsigned __int8 *)(v50 + 5);
            if (v233 == 61)
            {
              if (BYTE2(v276[1]) == 1)
                goto LABEL_102;
            }
            else
            {
LABEL_399:
              if ((v233 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v50 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  LOBYTE(v283) = 0;
                  v238 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v50, (uint64_t)&__dst, v49, a4, a5, a6, a7, a8);
                  v237 = (_BYTE)v48 ? v238 : 0;
                }
                else
                {
                  v237 = *(_QWORD *)(v50 + 24);
                }
                if (v237 <= v229)
                  goto LABEL_102;
              }
            }
          }
          if ((*(_WORD *)(v231 + 12) & 0x800) == 0 || BYTE2(v276[1]) == 3)
          {
            v234 = *(_QWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x30);
            if (!v234)
              v234 = *(_QWORD *)(v50 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v234 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v50 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v50, a1);
            }
            else
            {
              v234 = *(_QWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x30);
              if (!v234)
                v234 = *(_QWORD *)(v50 + 16);
            }
            if (*(_DWORD *)(v230 + 80))
            {
              v236 = *(_DWORD *)(v230 + 80);
              if ((v236 & 0x27) != 0 && (v236 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v264, 7u, v49, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v230 + 16))
                goto LABEL_102;
            }
          }
          if ((v234 & 0xFFFE000000000002) != 0)
            goto LABEL_102;
          v50 = v234;
          v92 = 10;
          if (*(unsigned __int8 *)(v234 + 5) <= 0x16u)
            goto LABEL_122;
          continue;
        }
      }
      v54 = (_BYTE *)(v56 + 6);
      v57 = v56;
    }
    while ((*(_BYTE *)(v56 + 6) & 8) == 0);
  }
  v132 = (int)v55;
  v268 = v56;
  v133 = v51;
  if (v51)
  {
    v134 = *(_DWORD *)(v51 + 16);
    if ((v134 & 0x20) == 0)
    {
      v135 = *(_BYTE **)(v51 + 8);
      v136 = *(unsigned int *)(v51 + 4);
      if ((v134 & 4) != 0)
      {
        if ((_DWORD)v136)
        {
          v137 = *v135 - 48;
          if (v137 <= 9 && (v136 < 2 || *v135 != 48))
          {
            v239 = v135 + 1;
            v240 = v136 - 1;
            while (v240)
            {
              if (v137 <= 0x19999999)
              {
                v241 = *v239 - 48;
                if (v241 <= 9)
                {
                  v99 = __CFADD__(v241, 10 * v137);
                  v137 = v241 + 10 * v137;
                  ++v239;
                  --v240;
                  if (!v99)
                    continue;
                }
              }
              goto LABEL_168;
            }
LABEL_448:
            if (v137 != -1)
            {
              v242 = *(_QWORD *)(a1 + 56);
              v265 = (JSC::VMTraps *)(v242 + 64);
              v269 = v137;
              while (1)
              {
                v243 = 16 * (*(_DWORD *)v50 & 0xFFFFFFFE);
                v244 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v243 + 0x4C) + 0x70))(v50, a1, v269, &v271);
                v245 = v244;
                if (*(_DWORD *)(v242 + 80))
                {
                  v248 = *(_DWORD *)(v242 + 80);
                  if ((v248 & 0x27) != 0 && (v248 & 0x20) == 0)
                    JSC::VMTraps::handleTraps(v265, 7u, v49, a4, a5, a6, a7, a8);
                  v249 = *(_QWORD *)(v242 + 16);
                  if (v249)
                    v250 = 1;
                  else
                    v250 = v245;
                  if ((v250 & 1) != 0)
                  {
                    v51 = v133;
                    if (!v249)
                      goto LABEL_120;
                    goto LABEL_102;
                  }
                }
                else
                {
                  v51 = v133;
                  if ((v244 & 1) != 0)
                    goto LABEL_120;
                }
                if (BYTE2(v276[1]) == 3)
                {
                  if (BYTE4(v276[1]))
                    goto LABEL_102;
                  v246 = *(unsigned __int8 *)(v50 + 5);
                  if (v246 == 61)
                    goto LABEL_455;
                }
                else
                {
                  v246 = *(unsigned __int8 *)(v50 + 5);
                  if (v246 == 61)
                  {
                    if (BYTE2(v276[1]) == 1)
                      goto LABEL_102;
                    goto LABEL_455;
                  }
                }
                if ((v246 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v50 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    LOBYTE(v283) = 0;
                    v253 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v50, (uint64_t)&__dst, v49, a4, a5, a6, a7, a8);
                    v251 = (_BYTE)v48 ? v253 : 0;
                  }
                  else
                  {
                    v251 = *(_QWORD *)(v50 + 24);
                  }
                  if (v251 <= v269)
                    goto LABEL_102;
                }
LABEL_455:
                if ((*(_WORD *)(v243 + 12) & 0x800) == 0 || BYTE2(v276[1]) == 3)
                {
                  v247 = *(_QWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x30);
                  if (!v247)
                    v247 = *(_QWORD *)(v50 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v247 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v50, a1);
                  }
                  else
                  {
                    v247 = *(_QWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x30);
                    if (!v247)
                      v247 = *(_QWORD *)(v50 + 16);
                  }
                  if (*(_DWORD *)(v242 + 80))
                  {
                    v252 = *(_DWORD *)(v242 + 80);
                    if ((v252 & 0x27) != 0 && (v252 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v265, 7u, v49, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v242 + 16))
                      goto LABEL_102;
                  }
                }
                if ((v247 & 0xFFFE000000000002) != 0)
                  goto LABEL_102;
                v50 = v247;
                v92 = 10;
                if (*(unsigned __int8 *)(v247 + 5) <= 0x16u)
                  goto LABEL_122;
              }
            }
          }
        }
      }
      else if ((_DWORD)v136)
      {
        v137 = *(unsigned __int16 *)v135 - 48;
        if (v137 <= 9 && (*(_WORD *)v135 != 48 || v136 <= 1))
        {
          v201 = (unsigned __int16 *)(v135 + 2);
          v202 = v136 - 1;
          while (v202)
          {
            if (v137 <= 0x19999999)
            {
              v203 = *v201 - 48;
              if (v203 <= 9)
              {
                v99 = __CFADD__(v203, 10 * v137);
                v137 = v203 + 10 * v137;
                ++v201;
                --v202;
                if (!v99)
                  continue;
              }
            }
            goto LABEL_168;
          }
          goto LABEL_448;
        }
      }
    }
  }
LABEL_168:
  v138 = *(_QWORD *)(a1 + 56);
  v261 = (JSC::VMTraps *)(v138 + 64);
  while (1)
  {
    v139 = *(_DWORD *)v268 & 0xFFFFFFFE;
    v140 = 16 * v139;
    if ((*(_BYTE *)(v268 + 6) & 8) == 0)
      break;
    v164 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * v139 + 0x4C) + 0x68))(v268, a1, v133, &v271);
    if (*(_DWORD *)(v138 + 80))
    {
      v190 = *(_DWORD *)(v138 + 80);
      if ((v190 & 0x27) != 0 && (v190 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v261, 7u, v49, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v138 + 16))
        goto LABEL_102;
    }
    v51 = v133;
    if ((v164 & 1) != 0)
      goto LABEL_120;
    if (BYTE2(v276[1]) == 3)
    {
      if (BYTE4(v276[1]))
        goto LABEL_102;
      v165 = *(unsigned __int8 *)(v268 + 5);
      if (v165 == 61)
        goto LABEL_198;
    }
    else
    {
      v165 = *(unsigned __int8 *)(v268 + 5);
      if (v165 == 61)
      {
        if (BYTE2(v276[1]) == 1)
          goto LABEL_102;
        goto LABEL_198;
      }
    }
    if (!v133)
      goto LABEL_198;
    if ((v165 - 50) < 0xFFFFFFF5)
      goto LABEL_198;
    v166 = *(_DWORD *)(v133 + 16);
    if ((v166 & 0x20) != 0)
      goto LABEL_198;
    v167 = *(unsigned int *)(v133 + 4);
    if (!(_DWORD)v167)
      goto LABEL_198;
    v168 = *(unsigned __int8 **)(v133 + 8);
    if ((v166 & 4) != 0)
    {
      v169 = *v168;
      if ((_DWORD)v167 == 1)
      {
LABEL_225:
        if ((v169 - 48) < 0xA)
          goto LABEL_102;
        goto LABEL_198;
      }
      if (v169 == 45)
      {
        v169 = v168[1];
        goto LABEL_229;
      }
      if ((v169 - 48) < 0xA)
        goto LABEL_240;
      if ((_DWORD)v167 == 8)
        goto LABEL_239;
    }
    else
    {
      v169 = *(unsigned __int16 *)v168;
      if ((_DWORD)v167 == 1)
        goto LABEL_225;
      if (v169 == 45)
      {
        v169 = *((unsigned __int16 *)v168 + 1);
LABEL_229:
        if ((v169 - 48) < 0xA)
        {
          if ((_DWORD)v167 == 2)
            goto LABEL_102;
          goto LABEL_240;
        }
        if ((_DWORD)v167 != 9)
          goto LABEL_198;
LABEL_239:
        if (v169 != 73)
          goto LABEL_198;
        goto LABEL_240;
      }
      if ((v169 - 48) < 0xA || (_DWORD)v167 == 8 && v169 == 73)
        goto LABEL_240;
    }
    if ((_DWORD)v167 != 3 || v169 != 78)
      goto LABEL_198;
LABEL_240:
    v260 = v260 & 0xFFFFFF0000000000 | v167 | ((unint64_t)((v166 >> 2) & 1) << 32);
    JSC::jsToNumber(v168, v260);
    v171 = (v170 >> 52) & 0x7FF;
    if ((_DWORD)v171 == 2047)
    {
      if ((v170 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", 3);
        v172 = &__s[3];
      }
      else
      {
        if ((v170 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v178 = &__s[1];
        }
        else
        {
          v178 = __s;
        }
        *(_QWORD *)v178 = 0x7974696E69666E49;
        v172 = v178 + 8;
      }
      goto LABEL_254;
    }
    v173 = v170 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v170 & 0x8000000000000000) != 0 && v173)
    {
      __s[0] = 45;
      v174 = &__s[1];
    }
    else
    {
      if (!v173)
      {
        __s[0] = 48;
        v172 = &__s[1];
        goto LABEL_254;
      }
      v174 = __s;
    }
    v175 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v170 & 0x800FFFFFFFFFFFFFLL, v171);
    v172 = WTF::dragonbox::detail::to_shortest(v175, v176, (uint64_t)v174, v177);
LABEL_254:
    *v172 = 0;
    v179 = strlen(__s);
    memcpy(&__dst, __s, v179);
    *((_BYTE *)&__dst + v179) = 0;
    v180 = *(unsigned int *)(v133 + 4);
    v181 = *(unsigned __int8 **)(v133 + 8);
    if ((*(_BYTE *)(v133 + 16) & 4) != 0)
    {
      if ((_DWORD)v180)
      {
        p_dst = &__dst;
        v187 = *(unsigned int *)(v133 + 4);
        do
        {
          v189 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v188 = v189;
          if (!v189 || *v181 != v188)
            goto LABEL_198;
          ++v181;
        }
        while (--v187);
      }
    }
    else if ((_DWORD)v180)
    {
      v182 = &__dst;
      v183 = *(unsigned int *)(v133 + 4);
      do
      {
        v185 = *(unsigned __int8 *)v182;
        v182 = (JSC::VM **)((char *)v182 + 1);
        v184 = v185;
        if (!v185 || *(unsigned __int16 *)v181 != v184)
          goto LABEL_198;
        v181 += 2;
      }
      while (--v183);
    }
    if (!*((_BYTE *)&__dst + v180))
      goto LABEL_102;
LABEL_198:
    if ((*(_WORD *)(v140 + 12) & 0x800) != 0)
    {
      v159 = *(_DWORD *)v268;
      if (BYTE2(v276[1]) != 3)
      {
        v162 = 16 * (v159 & 0xFFFFFFFE);
        if ((*(_WORD *)(v162 + 12) & 0x800) != 0)
        {
          v160 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v162 + 76) + 0xB0))(v268, a1);
        }
        else
        {
          v160 = *(_QWORD *)(v162 + 48);
          if (!v160)
            v160 = *(_QWORD *)(v268 + 16);
        }
        if (*(_DWORD *)(v138 + 80))
        {
          v163 = *(_DWORD *)(v138 + 80);
          if ((v163 & 0x27) != 0 && (v163 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v261, 7u, v49, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v138 + 16))
            goto LABEL_102;
        }
        goto LABEL_202;
      }
    }
    else
    {
      v159 = *(_DWORD *)v268;
    }
    v160 = *(_QWORD *)(16 * (v159 & 0xFFFFFFFE) + 0x30);
    if (!v160)
      v160 = *(_QWORD *)(v268 + 16);
LABEL_202:
    if ((v160 & 0xFFFE000000000002) != 0)
      goto LABEL_102;
    v268 = v160;
    v92 = 10;
    if (*(unsigned __int8 *)(v160 + 5) <= 0x16u)
      goto LABEL_122;
  }
  if (!v132 || (v132 & ~*(_DWORD *)(16 * v139 + 0x20)) != 0)
    goto LABEL_197;
  v141 = *(_QWORD *)(16 * v139 + 0x58);
  if (!v141)
  {
    v142 = *(_QWORD *)(16 * v139 + 0x40);
    if (!v142 || *(_BYTE *)(v142 + 5) != 1 && *(_DWORD *)(v142 + 80) < 2u)
      goto LABEL_197;
    JSC::Structure::materializePropertyTable((JSC::Structure *)v140, (JSC::VM *)v138, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v141)
      goto LABEL_197;
  }
  if (!*(_DWORD *)(v141 + 24))
    goto LABEL_197;
  v143 = *(_QWORD *)(v141 + 16);
  v144 = v143 & 0xFFFFFFFFFFFFFFFELL;
  v145 = *(unsigned int *)(v141 + 8);
  v146 = *(_DWORD *)(v133 + 16);
  if ((v143 & 1) != 0)
  {
    if ((v146 & 0x20) != 0)
      v146 = *(_DWORD *)(v133 + 32);
    v147 = *(_DWORD *)(v141 + 12);
    v148 = (v146 >> 8) & *(_QWORD *)&v147;
    v149 = *(unsigned __int8 *)(v144 + v148);
    if (*(_BYTE *)(v144 + v148))
    {
      v150 = v144 + v145;
      v151 = 1;
      while (1)
      {
        v152 = *(_QWORD *)(v150 + 8 * (v149 - 1));
        if (v133 == (v152 & 0xFFFFFFFFFFFFLL))
          break;
        v148 = ((_DWORD)v148 + v151) & v147;
        v149 = *(unsigned __int8 *)(v144 + v148);
        ++v151;
        if (!*(_BYTE *)(v144 + v148))
          goto LABEL_197;
      }
      a6 = (v152 >> 16) & 0xFF00000000 | HIBYTE(v152);
      goto LABEL_194;
    }
    goto LABEL_197;
  }
  if ((v146 & 0x20) != 0)
    v146 = *(_DWORD *)(v133 + 32);
  v153 = *(_DWORD *)(v141 + 12);
  v154 = v153 & (v146 >> 8);
  v155 = *(_DWORD *)(v144 + 4 * v154);
  if (!v155)
    goto LABEL_197;
  v156 = v144 + 4 * v145;
  v157 = 1;
  while (1)
  {
    v158 = (v155 - 1);
    if (v133 == *(_QWORD *)(v156 + 16 * v158))
      break;
    v154 = (v154 + v157) & v153;
    v155 = *(_DWORD *)(v144 + 4 * v154);
    ++v157;
    if (!v155)
      goto LABEL_197;
  }
  a6 = *(unsigned int *)(v156 + 16 * v158 + 8) | ((unint64_t)*(unsigned __int8 *)(v156 + 16 * v158 + 12) << 32);
LABEL_194:
  if ((_DWORD)a6 == -1)
  {
LABEL_197:
    if ((*(_BYTE *)(v268 + 6) & 0x20) != 0)
    {
      v161 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v268, (JSC::VM *)v138, v133, (uint64_t)&v271);
      v51 = v133;
      if ((v161 & 1) != 0)
        goto LABEL_120;
    }
    goto LABEL_198;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v198 = v268 + 16;
    v199 = a6 << 32;
  }
  else
  {
    v198 = *(_QWORD *)(v268 + 8) - 8;
    v199 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v198 + (v199 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_326:
    v271 = (WTF::StringImpl *)a4;
    v275 = (_DWORD *)v268;
    v273 = __PAIR64__(a6, HIDWORD(a6));
    LOWORD(v276[1]) = 257;
    goto LABEL_330;
  }
  v204 = *(unsigned __int8 *)(a4 + 5);
  if (v204 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v268, v138, (uint64_t)&v271, a4, SHIDWORD(a6), a6);
    goto LABEL_330;
  }
  if (v204 != 6)
    goto LABEL_326;
  v217 = *(_DWORD *)(v140 + 16) & 3;
  v218 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v271 = *(WTF::StringImpl **)(a4 + 8);
    v272 = v218;
    LODWORD(v273) = HIDWORD(a6);
    v275 = (_DWORD *)v268;
    BYTE1(v276[1]) = 3;
    v51 = v133;
    if (v217 == 2)
      goto LABEL_120;
    goto LABEL_321;
  }
  v220 = *(int8x16_t ***)(a4 + 24);
  v219 = *(_QWORD *)(a4 + 32);
  v271 = *(WTF::StringImpl **)(a4 + 8);
  v272 = v218;
  LODWORD(v273) = HIDWORD(a6);
  v275 = (_DWORD *)v268;
  BYTE1(v276[1]) = 3;
  if (v217 != 2)
    LOBYTE(v276[1]) = 1;
  BYTE3(v276[1]) = 1;
  v279 = v220;
  v280 = v219;
LABEL_330:
  v51 = v133;
LABEL_120:
  if (BYTE1(v276[1]) == 1)
  {
    v92 = (uint64_t)v271;
  }
  else if (BYTE1(v276[1]) == 2)
  {
    v92 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v271, (JSC::JSGlobalObject *)a1, v49, a4, a5, a6, a7, a8);
  }
  else
  {
    v121 = (unint64_t)v275;
    v122 = *(_QWORD *)(16 * (*v275 & 0xFFFFFFFE) + 0x28);
    if ((v273 & 0x20) != 0)
      v121 = (unint64_t)v274;
    if (BYTE3(v276[1]) != 1)
      goto LABEL_155;
    if ((v121 & 0xFFFE000000000002) != 0)
      goto LABEL_379;
    v123 = *(unsigned int *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0x4C);
    v124 = *(_DWORD *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0x4C) != 0;
    v125 = 16 * v123;
    if ((_DWORD)v123)
      v126 = v279 == (int8x16_t **)v125;
    else
      v126 = 1;
    if (!v126)
    {
      do
      {
        v125 = *(_QWORD *)(v125 + 16);
        v124 = v125 != 0;
      }
      while ((int8x16_t **)v125 != v279 && v125 != 0);
    }
    if (!v124)
    {
LABEL_379:
      __dst = *(JSC::VM **)(a1 + 56);
      v92 = JSC::throwDOMAttributeGetterTypeError(v122, &__dst, v279, (WTF::StringImpl *)v51);
    }
    else
    {
LABEL_155:
      v92 = ((uint64_t (*)(unint64_t))v271)(v122);
    }
  }
LABEL_122:
  if (v278)
  {
    v109 = *(_DWORD *)(v277 + 4);
    if (!v109)
    {
      __break(0xC471u);
      JUMPOUT(0x1984B1C24);
    }
    *(_DWORD *)(v277 + 4) = v109 - 1;
  }
  v270 = v92;
  if (*(_DWORD *)(v12 + 80))
  {
    v197 = *(_DWORD *)(v12 + 80);
    if ((v197 & 0x27) != 0 && (v197 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v49, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v12 + 16))
    {
      v92 = v270;
      goto LABEL_126;
    }
    return 0;
  }
LABEL_126:
  v50 = v92;
  if (v92 != 2)
    goto LABEL_127;
LABEL_22:
  if (HIDWORD(v16))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x3A00000002;
    *(_QWORD *)(v31 + 8) = "Array length must be a positive integer of safe magnitude.";
    *(_DWORD *)(v31 + 16) = 4;
    v271 = (WTF::StringImpl *)v31;
    v32 = *(_QWORD *)(a1 + 128);
    v33 = *(JSC::Heap ***)(a1 + 56);
    if ((v32 & 1) != 0)
    {
      v191 = *(uint64_t (**)(JSC::VM **))(v32 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v192 = (JSC::VM **)(a1 - 16);
      else
        v192 = (JSC::VM **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      __dst = *v192;
      v283 = a1;
      v284 = (_QWORD *)(a1 + 128);
      v32 = v191(&__dst);
    }
    v34 = JSC::ErrorInstance::create(v33, v32, &v271, 0, 0, 0, 2, 1);
    JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, v34, v35, v36, v37, v38, v39);
    v47 = v271;
    v271 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
    return 0;
  }
  v22 = 5;
  LODWORD(v23) = (v9 >> 1) & 7;
  if ((v9 & 0x10) != 0)
    v23 = ((v9 & 0xE) + 10) >> 1;
  else
    v23 = v23;
  if (!(v16 >> 27))
    v22 = v23;
  v24 = *(_DWORD *)(a1 + 4 * v22 + 892);
  if (v24)
    v25 = 16 * (v24 & 0xFFFFFFFE);
  else
    v25 = 0;
  v27 = JSC::JSArray::tryCreate((JSC::JSArray *)v12, v25, (JSC::Structure *)v13, a4, a5, a6, a7, a8, (__n128)a9);
  if (!v27)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError(a1, v26);
    v87 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v87 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)OutOfMemoryError, 0, v81, v82, v83, v84, v85);
    }
    JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, v87, v86, v81, v82, v83, v84, v85);
    return 0;
  }
  return v27;
}

uint64_t operationProcessTypeProfilerLogDFG(uint64_t a1)
{
  JSC::TypeProfilerLog *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *var18[4];

  *(WTF::StringImpl **)(a1 + 40) = var18[3];
  v2 = *(JSC::TypeProfilerLog **)(a1 + 93176);
  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x2100000002;
  *(_QWORD *)(v3 + 8) = "Log Full, called from inside DFG.";
  *(_DWORD *)(v3 + 16) = 4;
  var18[0] = (WTF::StringImpl *)v3;
  JSC::TypeProfilerLog::processLogEntries(v2, (JSC::VM *)a1, (const WTF::String *)var18, v4, v5, v6, v7, v8);
  v16 = var18[0];
  var18[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  return *(_QWORD *)(a1 + 16);
}

unint64_t operationResolveScopeForHoistingFuncDeclInEval(JSC::JSScope *a1, WTF::AtomStringImpl *a2, WTF::StringImpl *this, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  uint64_t v11;
  int v12;
  int v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *var28[6];

  v8 = this;
  v11 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v11 + 40) = var28[5];
  v12 = *((_DWORD *)this + 4);
  if ((v12 & 0x20) != 0)
  {
    v13 = *(_DWORD *)this + 2;
LABEL_6:
    *(_DWORD *)v8 = v13;
    goto LABEL_7;
  }
  if ((v12 & 0x10) != 0)
  {
    *(_DWORD *)this += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v11 + 41912), (unint64_t)this, this, (uint64_t)a4, a5, a6, a7, a8, var28);
    v8 = var28[0];
  }
  v13 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 2;
  if (v13)
    goto LABEL_6;
  WTF::StringImpl::~StringImpl(v8, a2, (uint64_t)this, (uint64_t)a4, a5, a6, a7, a8);
  WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
LABEL_7:
  var28[0] = v8;
  v21 = JSC::JSScope::resolveScopeForHoistingFuncDeclInEval(a1, a2, (JSC::JSScope *)var28, a4, a5, a6, a7, a8);
  v22 = var28[0];
  var28[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  return v21;
}

unsigned int *operationResolveScope(JSC::JSScope *a1, WTF::AtomStringImpl *a2, WTF::StringImpl *this, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  uint64_t v11;
  int v12;
  int v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *var28[6];

  v8 = this;
  v11 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v11 + 40) = var28[5];
  v12 = *((_DWORD *)this + 4);
  if ((v12 & 0x20) != 0)
  {
    v13 = *(_DWORD *)this + 2;
LABEL_5:
    *(_DWORD *)v8 = v13;
    goto LABEL_6;
  }
  if ((v12 & 0x10) != 0)
  {
    *(_DWORD *)this += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v11 + 41912), (unint64_t)this, this, (uint64_t)a4, a5, a6, a7, a8, var28);
    v8 = var28[0];
  }
  v13 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 2;
  if (v13)
    goto LABEL_5;
  WTF::StringImpl::~StringImpl(v8, a2, (uint64_t)this, (uint64_t)a4, a5, a6, a7, a8);
  WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
LABEL_6:
  var28[0] = v8;
  v21 = JSC::JSScope::resolve(a1, (unsigned int **)a2, (JSC::JSScope *)var28, a4, a5, a6, a7, a8);
  v22 = var28[0];
  var28[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  return v21;
}

uint64_t operationGetDynamicVar(JSC::JSGlobalObject *a1, WTF::AtomStringImpl *a2, WTF::StringImpl *this, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  WTF::AtomStringImpl *v9;
  uint64_t v11;
  int v12;
  int v13;
  JSC::VM *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t UndefinedVariableError;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl *v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned __int16 *v57;
  uint64_t v58;
  unsigned int v59;
  BOOL v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int8x16_t **v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  BOOL v89;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  BOOL v96;
  int v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  WTF::AtomStringImpl *v117;
  int v118;
  unsigned int v119;
  int v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unsigned __int16 *v127;
  uint64_t v128;
  unsigned int v129;
  WTF::AtomStringImpl *v130;
  char OwnStaticPropertySlot;
  uint64_t v132;
  JSC::VM *v133;
  uint64_t v134;
  JSC::VM *v135;
  int v136;
  unsigned int v137;
  uint64_t v138;
  unsigned __int8 *v139;
  int v140;
  double v141;
  const unsigned __int8 *v142;
  BOOL v143;
  unsigned __int8 *v144;
  uint64_t v145;
  unsigned int v146;
  JSC::VM *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v155;
  uint64_t v156;
  unsigned int v157;
  JSC::VM *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  BOOL v165;
  unint64_t v166;
  int v167;
  int v168;
  WTF::StringImpl *v169;
  uint64_t (*v170)(unint64_t);
  uint64_t v171;
  unint64_t v172;
  WTF::AtomStringImpl *v173;
  _DWORD *v174;
  _QWORD v175[2];
  uint64_t v176;
  char v177;
  int8x16_t **v178;
  uint64_t v179;
  JSC::VM *varE0[29];

  v168 = a4;
  v8 = this;
  v9 = a2;
  varE0[16] = *(JSC::VM **)MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v11 + 40) = varE0[28];
  v12 = *((_DWORD *)this + 4);
  if ((v12 & 0x20) != 0)
  {
    v13 = *(_DWORD *)this + 2;
LABEL_5:
    *(_DWORD *)v8 = v13;
    goto LABEL_6;
  }
  if ((v12 & 0x10) != 0)
  {
    *(_DWORD *)this += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v11 + 41912), (unint64_t)this, this, a4, a5, a6, a7, a8, varE0);
    v8 = varE0[0];
  }
  v13 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 2;
  if (v13)
    goto LABEL_5;
  WTF::StringImpl::~StringImpl(v8, a2, (uint64_t)this, a4, a5, a6, a7, a8);
  WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
LABEL_6:
  v169 = v8;
  v172 = 0xFFFFFFFF00000000;
  LOBYTE(v176) = 0;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v174 = 0;
  memset(v175, 0, 13);
  v173 = v9;
  v14 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v15 = (unint64_t)v8 >> 4;
  v16 = (uint64_t)v9;
  v17 = (char *)v9 + 6;
  if ((*((_BYTE *)v9 + 6) & 8) == 0)
  {
    v18 = (uint64_t)v9;
    do
    {
      v19 = *(_DWORD *)v18 & 0xFFFFFFFE;
      v20 = 16 * v19;
      if (!(_DWORD)v15 || (v15 & ~*(_DWORD *)(16 * v19 + 0x20)) != 0)
        goto LABEL_19;
      v21 = *(_QWORD *)(16 * v19 + 0x58);
      if (!v21)
      {
        v32 = *(_QWORD *)(16 * v19 + 0x40);
        if (!v32 || *(_BYTE *)(v32 + 5) != 1 && *(_DWORD *)(v32 + 80) < 2u)
          goto LABEL_19;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v20, v14, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v21)
          goto LABEL_19;
      }
      if (!*(_DWORD *)(v21 + 24))
        goto LABEL_19;
      v22 = *(_QWORD *)(v21 + 16);
      v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
      v24 = *(unsigned int *)(v21 + 8);
      v25 = *((_DWORD *)v8 + 4);
      if ((v22 & 1) != 0)
      {
        if ((v25 & 0x20) != 0)
          v25 = *((_DWORD *)v8 + 8);
        v26 = *(_DWORD *)(v21 + 12);
        v27 = (v25 >> 8) & *(_QWORD *)&v26;
        v28 = *(unsigned __int8 *)(v23 + v27);
        if (!*(_BYTE *)(v23 + v27))
          goto LABEL_19;
        v29 = v23 + v24;
        v30 = 1;
        while (1)
        {
          v31 = *(_QWORD *)(v29 + 8 * (v28 - 1));
          if (v8 == (JSC::VM *)(v31 & 0xFFFFFFFFFFFFLL))
            break;
          v27 = ((_DWORD)v27 + v30) & v26;
          v28 = *(unsigned __int8 *)(v23 + v27);
          ++v30;
          if (!*(_BYTE *)(v23 + v27))
            goto LABEL_19;
        }
        a6 = (v31 >> 16) & 0xFF00000000 | HIBYTE(v31);
      }
      else
      {
        if ((v25 & 0x20) != 0)
          v25 = *((_DWORD *)v8 + 8);
        v33 = *(_DWORD *)(v21 + 12);
        v34 = v33 & (v25 >> 8);
        v35 = *(_DWORD *)(v23 + 4 * v34);
        if (!v35)
          goto LABEL_19;
        v36 = v23 + 4 * v24;
        v37 = 1;
        while (1)
        {
          v38 = (v35 - 1);
          if (v8 == *(JSC::VM **)(v36 + 16 * v38))
            break;
          v34 = (v34 + v37) & v33;
          v35 = *(_DWORD *)(v23 + 4 * v34);
          ++v37;
          if (!v35)
            goto LABEL_19;
        }
        a6 = *(unsigned int *)(v36 + 16 * v38 + 8) | ((unint64_t)*(unsigned __int8 *)(v36 + 16 * v38 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v54 = v18 + 16;
          v55 = a6 << 32;
        }
        else
        {
          v54 = *(_QWORD *)(v18 + 8) - 8;
          v55 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v54 + (v55 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v56 = *(unsigned __int8 *)(a4 + 5);
          if (v56 != 5)
          {
            if (v56 != 6)
              goto LABEL_67;
            v80 = *(_DWORD *)(v20 + 16) & 3;
            v81 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v83 = *(int8x16_t ***)(a4 + 24);
              v82 = *(_QWORD *)(a4 + 32);
              v170 = *(uint64_t (**)(unint64_t))(a4 + 8);
              v171 = v81;
              LODWORD(v172) = HIDWORD(a6);
              v174 = (_DWORD *)v18;
              goto LABEL_100;
            }
            v170 = *(uint64_t (**)(unint64_t))(a4 + 8);
            v171 = v81;
            LODWORD(v172) = HIDWORD(a6);
            v174 = (_DWORD *)v18;
LABEL_192:
            v43 = 1;
            BYTE1(v175[1]) = 3;
            if (v80 != 2)
              LOBYTE(v175[1]) = 1;
            goto LABEL_46;
          }
          v77 = (unsigned int *)v18;
          a2 = v14;
LABEL_88:
          JSC::JSObject::fillGetterPropertySlot(v77, (uint64_t)a2, (uint64_t)&v170, a4, a5, a6);
LABEL_89:
          v43 = 1;
          goto LABEL_46;
        }
LABEL_67:
        v170 = (uint64_t (*)(unint64_t))a4;
        v174 = (_DWORD *)v18;
LABEL_68:
        v172 = __PAIR64__(a6, a5);
        v43 = 1;
        LOWORD(v175[1]) = 257;
        goto LABEL_46;
      }
LABEL_19:
      if ((*v17 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v14, (unint64_t)v8, (uint64_t)&v170) & 1) != 0)
      {
        goto LABEL_89;
      }
      v16 = *(_QWORD *)(v20 + 48);
      if (!v16)
        v16 = *(_QWORD *)(v18 + 16);
      if ((v16 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) < 0x17u)
      {
        v39 = *((_DWORD *)v8 + 4);
        if ((v39 & 0x20) != 0)
          goto LABEL_45;
        v40 = (_WORD *)*((_QWORD *)v8 + 1);
        v41 = *((unsigned int *)v8 + 1);
        if ((v39 & 4) == 0)
        {
          if ((_DWORD)v41)
          {
            v42 = (unsigned __int16)*v40 - 48;
            if (v42 <= 9 && (*v40 != 48 || v41 <= 1))
            {
              v57 = v40 + 1;
              v58 = v41 - 1;
              while (v58)
              {
                if (v42 > 0x19999999)
                  goto LABEL_45;
                v59 = *v57 - 48;
                if (v59 > 9)
                  goto LABEL_45;
                v43 = 0;
                v60 = __CFADD__(v59, 10 * v42);
                v42 = v59 + 10 * (_DWORD)v42;
                ++v57;
                --v58;
                if (v60)
                  goto LABEL_46;
              }
              goto LABEL_253;
            }
          }
          goto LABEL_45;
        }
        if (!(_DWORD)v41)
          goto LABEL_45;
        v42 = *(unsigned __int8 *)v40 - 48;
        if (v42 > 9 || v41 >= 2 && *(_BYTE *)v40 == 48)
          goto LABEL_45;
        v144 = (unsigned __int8 *)v40 + 1;
        v145 = v41 - 1;
        while (v145)
        {
          if (v42 > 0x19999999)
            goto LABEL_45;
          v146 = *v144 - 48;
          if (v146 > 9)
            goto LABEL_45;
          v43 = 0;
          v60 = __CFADD__(v146, 10 * v42);
          v42 = v146 + 10 * (_DWORD)v42;
          ++v144;
          --v145;
          if (v60)
            goto LABEL_46;
        }
LABEL_253:
        if ((_DWORD)v42 == -1)
        {
LABEL_45:
          v43 = 0;
          goto LABEL_46;
        }
        v147 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v148 = (uint64_t)v9;
        while (2)
        {
          v149 = 16 * (*(_DWORD *)v148 & 0xFFFFFFFE);
          v150 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v149 + 0x4C) + 0x70))(v148, a1, v42, &v170);
          v151 = v150;
          if (*((_DWORD *)v147 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v147, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
            if (((hasExceptionsAfterHandlingTraps | v151) & 1) != 0)
            {
LABEL_267:
              v43 = !hasExceptionsAfterHandlingTraps;
              goto LABEL_46;
            }
          }
          else if ((v150 & 1) != 0)
          {
            goto LABEL_89;
          }
          if (BYTE2(v175[1]) == 3)
          {
            if (BYTE4(v175[1]))
              goto LABEL_45;
            v152 = *(unsigned __int8 *)(v148 + 5);
            if (v152 != 61)
              goto LABEL_259;
          }
          else
          {
            v152 = *(unsigned __int8 *)(v148 + 5);
            if (v152 == 61)
            {
              if (BYTE2(v175[1]) == 1)
                goto LABEL_45;
            }
            else
            {
LABEL_259:
              if ((v152 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v148, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8) <= v42)
              {
                goto LABEL_45;
              }
            }
          }
          if ((*(_WORD *)(v149 + 12) & 0x800) == 0 || BYTE2(v175[1]) == 3)
          {
            v153 = *(_QWORD *)(16 * (*(_DWORD *)v148 & 0xFFFFFFFE) + 0x30);
            if (!v153)
              v153 = *(_QWORD *)(v148 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v148 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v153 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v148 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v148, a1);
            }
            else
            {
              v153 = *(_QWORD *)(16 * (*(_DWORD *)v148 & 0xFFFFFFFE) + 0x30);
              if (!v153)
                v153 = *(_QWORD *)(v148 + 16);
            }
            if (*((_DWORD *)v147 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v147, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8))
            {
              goto LABEL_45;
            }
          }
          if ((v153 & 0xFFFE000000000002) != 0)
            goto LABEL_45;
          v43 = 0;
          v148 = v153;
          if (*(unsigned __int8 *)(v153 + 5) <= 0x16u)
            goto LABEL_46;
          continue;
        }
      }
      v17 = (_BYTE *)(v16 + 6);
      v18 = v16;
    }
    while ((*(_BYTE *)(v16 + 6) & 8) == 0);
  }
  v98 = *((_DWORD *)v8 + 4);
  if ((v98 & 0x20) == 0)
  {
    v99 = (_BYTE *)*((_QWORD *)v8 + 1);
    v100 = *((unsigned int *)v8 + 1);
    if ((v98 & 4) != 0)
    {
      if ((_DWORD)v100)
      {
        v101 = *v99 - 48;
        if (v101 <= 9 && (v100 < 2 || *v99 != 48))
        {
          v155 = v99 + 1;
          v156 = v100 - 1;
          while (v156)
          {
            if (v101 <= 0x19999999)
            {
              v157 = *v155 - 48;
              if (v157 <= 9)
              {
                v60 = __CFADD__(v157, 10 * v101);
                v101 = v157 + 10 * (_DWORD)v101;
                ++v155;
                --v156;
                if (!v60)
                  continue;
              }
            }
            goto LABEL_138;
          }
LABEL_298:
          if ((_DWORD)v101 != -1)
          {
            v158 = (JSC::VM *)*((_QWORD *)a1 + 7);
            v159 = (uint64_t)v9;
            while (1)
            {
              v160 = 16 * (*(_DWORD *)v159 & 0xFFFFFFFE);
              v161 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v160 + 0x4C) + 0x70))(v159, a1, v101, &v170);
              v162 = v161;
              if (*((_DWORD *)v158 + 20))
              {
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v158, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
                if (((hasExceptionsAfterHandlingTraps | v162) & 1) != 0)
                  goto LABEL_267;
              }
              else if ((v161 & 1) != 0)
              {
                goto LABEL_89;
              }
              if (BYTE2(v175[1]) == 3)
              {
                if (BYTE4(v175[1]))
                  goto LABEL_45;
                v163 = *(unsigned __int8 *)(v159 + 5);
                if (v163 == 61)
                  goto LABEL_305;
              }
              else
              {
                v163 = *(unsigned __int8 *)(v159 + 5);
                if (v163 == 61)
                {
                  if (BYTE2(v175[1]) == 1)
                    goto LABEL_45;
                  goto LABEL_305;
                }
              }
              if ((v163 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v159, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8) <= v101)
              {
                goto LABEL_45;
              }
LABEL_305:
              if ((*(_WORD *)(v160 + 12) & 0x800) == 0 || BYTE2(v175[1]) == 3)
              {
                v164 = *(_QWORD *)(16 * (*(_DWORD *)v159 & 0xFFFFFFFE) + 0x30);
                if (!v164)
                  v164 = *(_QWORD *)(v159 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v159 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v164 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v159 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0xB0))(v159, a1);
                }
                else
                {
                  v164 = *(_QWORD *)(16 * (*(_DWORD *)v159 & 0xFFFFFFFE) + 0x30);
                  if (!v164)
                    v164 = *(_QWORD *)(v159 + 16);
                }
                if (*((_DWORD *)v158 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v158, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8))
                {
                  goto LABEL_45;
                }
              }
              if ((v164 & 0xFFFE000000000002) != 0)
                goto LABEL_45;
              v43 = 0;
              v159 = v164;
              if (*(unsigned __int8 *)(v164 + 5) <= 0x16u)
                goto LABEL_46;
            }
          }
        }
      }
    }
    else if ((_DWORD)v100)
    {
      v101 = *(unsigned __int16 *)v99 - 48;
      if (v101 <= 9 && (*(_WORD *)v99 != 48 || v100 <= 1))
      {
        v127 = (unsigned __int16 *)(v99 + 2);
        v128 = v100 - 1;
        while (v128)
        {
          if (v101 <= 0x19999999)
          {
            v129 = *v127 - 48;
            if (v129 <= 9)
            {
              v60 = __CFADD__(v129, 10 * v101);
              v101 = v129 + 10 * (_DWORD)v101;
              ++v127;
              --v128;
              if (!v60)
                continue;
            }
          }
          goto LABEL_138;
        }
        goto LABEL_298;
      }
    }
  }
LABEL_138:
  a2 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 7);
  while (1)
  {
    v102 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v16 + 6) & 8) == 0)
      break;
    v135 = a2;
    v167 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, JSC::VM *, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) + 0x68))(v16, a1, v8, &v170);
    if (*((_DWORD *)v135 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v135, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
      if (((hasExceptionsAfterHandlingTraps | v167) & 1) != 0)
        goto LABEL_267;
    }
    else if ((v167 & 1) != 0)
    {
      goto LABEL_89;
    }
    if (BYTE2(v175[1]) == 3)
    {
      if (BYTE4(v175[1]))
        goto LABEL_45;
      v136 = *(unsigned __int8 *)(v16 + 5);
      if (v136 == 61)
      {
LABEL_234:
        a2 = v135;
        goto LABEL_152;
      }
LABEL_214:
      if ((v136 - 39) > 0xA)
        goto LABEL_234;
      v137 = *((_DWORD *)v8 + 4);
      if ((v137 & 0x20) != 0)
        goto LABEL_234;
      v138 = *((unsigned int *)v8 + 1);
      if (!(_DWORD)v138)
        goto LABEL_234;
      v139 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
      if ((v137 & 4) == 0)
      {
        v140 = *(unsigned __int16 *)v139;
        if ((_DWORD)v138 == 1)
          goto LABEL_219;
        if (v140 == 45)
        {
          v140 = *((unsigned __int16 *)v139 + 1);
          goto LABEL_224;
        }
        if ((v140 - 48) >= 0xA && ((_DWORD)v138 != 8 || v140 != 73))
        {
LABEL_237:
          if ((_DWORD)v138 != 3 || v140 != 78)
            goto LABEL_234;
        }
LABEL_228:
        v166 = v166 & 0xFFFFFF0000000000 | v138 | ((unint64_t)((v137 >> 2) & 1) << 32);
        JSC::jsToNumber(v139, v166);
        WTF::numberToString(varE0, v141);
        v143 = WTF::equal((unint64_t)v8, (unint64_t)varE0, v142);
        a2 = v135;
        if (v143)
          goto LABEL_45;
        goto LABEL_152;
      }
      v140 = *v139;
      if ((_DWORD)v138 == 1)
      {
LABEL_219:
        a2 = v135;
        if ((v140 - 48) < 0xA)
          goto LABEL_45;
        goto LABEL_152;
      }
      if (v140 == 45)
      {
        v140 = v139[1];
LABEL_224:
        if ((v140 - 48) < 0xA)
        {
          if ((_DWORD)v138 == 2)
            goto LABEL_45;
          goto LABEL_228;
        }
        if ((_DWORD)v138 != 9)
          goto LABEL_234;
      }
      else
      {
        if ((v140 - 48) < 0xA)
          goto LABEL_228;
        if ((_DWORD)v138 != 8)
          goto LABEL_237;
      }
      if (v140 != 73)
        goto LABEL_234;
      goto LABEL_228;
    }
    v136 = *(unsigned __int8 *)(v16 + 5);
    if (v136 != 61)
      goto LABEL_214;
    a2 = v135;
    if (BYTE2(v175[1]) == 1)
      goto LABEL_45;
LABEL_152:
    if ((*(_WORD *)(v102 + 12) & 0x800) != 0)
    {
      v114 = *(_DWORD *)v16;
      if (BYTE2(v175[1]) != 3)
      {
        v133 = a2;
        v134 = 16 * (v114 & 0xFFFFFFFE);
        if ((*(_WORD *)(v134 + 12) & 0x800) != 0)
        {
          v115 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v134 + 76) + 0xB0))(v16, a1);
        }
        else
        {
          v115 = *(_QWORD *)(v134 + 48);
          if (!v115)
            v115 = *(_QWORD *)(v16 + 16);
        }
        if (*((_DWORD *)v133 + 20))
        {
          v165 = JSC::VM::hasExceptionsAfterHandlingTraps(v133, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
          a2 = v133;
          if (v165)
            goto LABEL_45;
        }
        else
        {
          a2 = v133;
        }
        goto LABEL_156;
      }
    }
    else
    {
      v114 = *(_DWORD *)v16;
    }
    v115 = *(_QWORD *)(16 * (v114 & 0xFFFFFFFE) + 0x30);
    if (!v115)
      v115 = *(_QWORD *)(v16 + 16);
LABEL_156:
    if ((v115 & 0xFFFE000000000002) != 0)
      goto LABEL_45;
    v43 = 0;
    v16 = v115;
    if (*(unsigned __int8 *)(v115 + 5) <= 0x16u)
      goto LABEL_46;
  }
  if (!(_DWORD)v15 || (v15 & ~*(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_151;
  v103 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x58);
  if (!v103)
  {
    v116 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x40);
    if (!v116 || *(_BYTE *)(v116 + 5) != 1 && *(_DWORD *)(v116 + 80) < 2u)
      goto LABEL_151;
    v117 = a2;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE)), a2, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    a2 = v117;
    if (!v103)
      goto LABEL_151;
  }
  if (!*(_DWORD *)(v103 + 24))
    goto LABEL_151;
  v104 = *(_QWORD *)(v103 + 16);
  v105 = v104 & 0xFFFFFFFFFFFFFFFELL;
  v106 = *(unsigned int *)(v103 + 8);
  v107 = *((_DWORD *)v8 + 4);
  if ((v104 & 1) != 0)
  {
    if ((v107 & 0x20) != 0)
      v107 = *((_DWORD *)v8 + 8);
    v108 = *(_DWORD *)(v103 + 12);
    v109 = (v107 >> 8) & *(_QWORD *)&v108;
    v110 = *(unsigned __int8 *)(v105 + v109);
    if (*(_BYTE *)(v105 + v109))
    {
      v111 = v105 + v106;
      v112 = 1;
      while (1)
      {
        v113 = *(_QWORD *)(v111 + 8 * (v110 - 1));
        if (v8 == (JSC::VM *)(v113 & 0xFFFFFFFFFFFFLL))
          break;
        v109 = ((_DWORD)v109 + v112) & v108;
        v110 = *(unsigned __int8 *)(v105 + v109);
        ++v112;
        if (!*(_BYTE *)(v105 + v109))
          goto LABEL_151;
      }
      a6 = (v113 >> 16) & 0xFF00000000 | HIBYTE(v113);
      goto LABEL_164;
    }
LABEL_151:
    if ((*(_BYTE *)(v16 + 6) & 0x20) != 0)
    {
      v130 = a2;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v16, a2, (unint64_t)v8, (uint64_t)&v170);
      a2 = v130;
      if ((OwnStaticPropertySlot & 1) != 0)
        goto LABEL_89;
    }
    goto LABEL_152;
  }
  if ((v107 & 0x20) != 0)
    v107 = *((_DWORD *)v8 + 8);
  v118 = *(_DWORD *)(v103 + 12);
  v119 = v118 & (v107 >> 8);
  v120 = *(_DWORD *)(v105 + 4 * v119);
  if (!v120)
    goto LABEL_151;
  v121 = v105 + 4 * v106;
  v122 = 1;
  while (1)
  {
    v123 = (v120 - 1);
    if (v8 == *(JSC::VM **)(v121 + 16 * v123))
      break;
    v119 = (v119 + v122) & v118;
    v120 = *(_DWORD *)(v105 + 4 * v119);
    ++v122;
    if (!v120)
      goto LABEL_151;
  }
  a6 = *(unsigned int *)(v121 + 16 * v123 + 8) | ((unint64_t)*(unsigned __int8 *)(v121 + 16 * v123 + 12) << 32);
LABEL_164:
  if ((_DWORD)a6 == -1)
    goto LABEL_151;
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v124 = v16 + 16;
    v125 = a6 << 32;
  }
  else
  {
    v124 = *(_QWORD *)(v16 + 8) - 8;
    v125 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v124 + (v125 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_181:
    v170 = (uint64_t (*)(unint64_t))a4;
    v174 = (_DWORD *)v16;
    goto LABEL_68;
  }
  v126 = *(unsigned __int8 *)(a4 + 5);
  if (v126 == 5)
  {
    v77 = (unsigned int *)v16;
    goto LABEL_88;
  }
  if (v126 != 6)
    goto LABEL_181;
  v80 = *(_DWORD *)(v102 + 16) & 3;
  v132 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v170 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v171 = v132;
    LODWORD(v172) = HIDWORD(a6);
    v174 = (_DWORD *)v16;
    goto LABEL_192;
  }
  v83 = *(int8x16_t ***)(a4 + 24);
  v82 = *(_QWORD *)(a4 + 32);
  v170 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v171 = v132;
  LODWORD(v172) = HIDWORD(a6);
  v174 = (_DWORD *)v16;
LABEL_100:
  BYTE1(v175[1]) = 3;
  v43 = 1;
  if (v80 != 2)
    LOBYTE(v175[1]) = 1;
  BYTE3(v175[1]) = 1;
  v178 = v83;
  v179 = v82;
LABEL_46:
  if (*((_DWORD *)v14 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v14, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8))
  {
    v44 = 0;
    goto LABEL_55;
  }
  if ((v43 & 1) == 0)
  {
    if ((v168 & 0x3FF00000) == 0)
    {
      UndefinedVariableError = JSC::createUndefinedVariableError((uint64_t)a1, (JSC::JSGlobalObject *)&v169, this);
LABEL_74:
      JSC::VM::throwException((JSC::VM *)v11, a1, UndefinedVariableError, v46, v47, v48, v49, v50);
    }
    v44 = 10;
    goto LABEL_55;
  }
  if (*((_BYTE *)v9 + 5) == 52)
  {
    if (BYTE1(v175[1]) == 1)
    {
      v44 = (uint64_t)v170;
    }
    else
    {
      if (BYTE1(v175[1]) == 2)
      {
        v78 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v170, a1, (uint64_t)this, a4, a5, a6, a7, a8);
      }
      else
      {
        v84 = (unint64_t)v174;
        v85 = *(_QWORD *)(16 * (*v174 & 0xFFFFFFFE) + 0x28);
        if ((v172 & 0x20) != 0)
          v84 = (unint64_t)v173;
        if (BYTE3(v175[1]) != 1)
          goto LABEL_118;
        if ((v84 & 0xFFFE000000000002) != 0)
          goto LABEL_240;
        v86 = *(unsigned int *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C);
        v87 = *(_DWORD *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C) != 0;
        v88 = 16 * v86;
        if ((_DWORD)v86)
          v89 = v178 == (int8x16_t **)v88;
        else
          v89 = 1;
        if (!v89)
        {
          do
          {
            v88 = *(_QWORD *)(v88 + 16);
            v87 = v88 != 0;
          }
          while ((int8x16_t **)v88 != v178 && v88 != 0);
        }
        if (!v87)
        {
LABEL_240:
          varE0[0] = *((JSC::VM **)a1 + 7);
          v78 = JSC::throwDOMAttributeGetterTypeError(v85, varE0, v178, v169);
        }
        else
        {
LABEL_118:
          v78 = v170(v85);
        }
      }
      v44 = v78;
    }
    if (!v44)
    {
      UndefinedVariableError = JSC::createTDZError(a1, a2);
      goto LABEL_74;
    }
  }
  else if (BYTE1(v175[1]) == 1)
  {
    v44 = (uint64_t)v170;
  }
  else
  {
    if (BYTE1(v175[1]) == 2)
    {
      v79 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v170, a1, (uint64_t)this, a4, a5, a6, a7, a8);
    }
    else
    {
      v91 = (unint64_t)v174;
      v92 = *(_QWORD *)(16 * (*v174 & 0xFFFFFFFE) + 0x28);
      if ((v172 & 0x20) != 0)
        v91 = (unint64_t)v173;
      if (BYTE3(v175[1]) != 1)
        goto LABEL_133;
      if ((v91 & 0xFFFE000000000002) != 0)
        goto LABEL_241;
      v93 = *(unsigned int *)(16 * (*(_DWORD *)v91 & 0xFFFFFFFE) + 0x4C);
      v94 = *(_DWORD *)(16 * (*(_DWORD *)v91 & 0xFFFFFFFE) + 0x4C) != 0;
      v95 = 16 * v93;
      if ((_DWORD)v93)
        v96 = v178 == (int8x16_t **)v95;
      else
        v96 = 1;
      if (!v96)
      {
        do
        {
          v95 = *(_QWORD *)(v95 + 16);
          v94 = v95 != 0;
        }
        while ((int8x16_t **)v95 != v178 && v95 != 0);
      }
      if (!v94)
      {
LABEL_241:
        varE0[0] = *((JSC::VM **)a1 + 7);
        v79 = JSC::throwDOMAttributeGetterTypeError(v92, varE0, v178, v169);
      }
      else
      {
LABEL_133:
        v79 = v170(v92);
      }
    }
    v44 = v79;
  }
LABEL_55:
  if (v177)
  {
    v51 = *(_DWORD *)(v176 + 4);
    if (!v51)
    {
      __break(0xC471u);
      JUMPOUT(0x1984B2FB8);
    }
    *(_DWORD *)(v176 + 4) = v51 - 1;
  }
  v52 = v169;
  v169 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, a2, (uint64_t)this, a4, a5, a6, a7, a8);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  return v44;
}

uint64_t operationPutDynamicVarStrict(JSC::JSGlobalObject *a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, WTF::StringImpl *this, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  WTF::StringImpl *v9;
  uint64_t v13;
  int v14;
  int v15;
  int hasProperty;
  WTF::AtomStringImpl *v17;
  const JSC::Identifier *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t UndefinedVariableError;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::JSGlobalObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t TDZError;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  int v71;
  _QWORD v72[2];
  unint64_t v73;
  WTF::AtomStringImpl *v74;
  _DWORD *v75;
  _QWORD v76[2];
  uint64_t v77;
  char v78;
  int8x16_t **v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  JSC::VM *var38[8];

  v8 = a5;
  v9 = this;
  v13 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v13 + 40) = var38[7];
  v14 = *((_DWORD *)this + 4);
  if ((v14 & 0x20) != 0)
  {
    v15 = *(_DWORD *)this + 2;
  }
  else
  {
    if ((v14 & 0x10) != 0)
    {
      *(_DWORD *)this += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v13 + 41912), (unint64_t)this, a3, (uint64_t)this, a5, a6, a7, a8, v72);
      v9 = (WTF::StringImpl *)v72[0];
    }
    v15 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 2;
    if (!v15)
    {
      WTF::StringImpl::~StringImpl(v9, a2, (uint64_t)a3, (uint64_t)this, a5, a6, a7, a8);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      goto LABEL_7;
    }
  }
  *(_DWORD *)v9 = v15;
LABEL_7:
  v81 = v9;
  hasProperty = JSC::JSObject::hasProperty((unint64_t)a2, (uint64_t)a1, (unint64_t)v9, this, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v42 = *(_DWORD *)(v13 + 80);
    if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
    {
      v71 = hasProperty;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)v18, v19, v20, v21, v22, v23);
      hasProperty = v71;
    }
    if (*(_QWORD *)(v13 + 16))
      goto LABEL_14;
  }
  if (hasProperty)
  {
    if (*((_BYTE *)a2 + 5) == 52 && (v8 & 0xFF800) != 0)
    {
      v73 = 0xFFFFFFFF00000000;
      LOBYTE(v77) = 0;
      v78 = 0;
      v79 = 0;
      v80 = 0;
      v75 = 0;
      memset(v76, 0, 13);
      v74 = a2;
      JSC::symbolTableGet<JSC::JSGlobalLexicalEnvironment>((uint64_t)a2, (uint64_t)v9, (uint64_t)v72, v19, v20, v21, v22, v23);
      if (BYTE1(v76[1]) == 1)
      {
        v56 = v72[0];
      }
      else if (BYTE1(v76[1]) == 2)
      {
        v56 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v72, a1, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        v65 = (unint64_t)v75;
        v66 = *(_QWORD *)(16 * (*v75 & 0xFFFFFFFE) + 0x28);
        if ((v73 & 0x20) != 0)
          v65 = (unint64_t)v74;
        if (BYTE3(v76[1]) != 1)
          goto LABEL_51;
        if ((v65 & 0xFFFE000000000002) != 0)
          goto LABEL_56;
        v67 = *(unsigned int *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x4C);
        v68 = *(_DWORD *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v67)
        {
          v69 = 16 * v67;
          if (v79 != (int8x16_t **)v69)
          {
            do
            {
              v69 = *(_QWORD *)(v69 + 16);
              v68 = v69 != 0;
            }
            while ((int8x16_t **)v69 != v79 && v69 != 0);
          }
        }
        if (!v68)
        {
LABEL_56:
          var38[0] = *((JSC::VM **)a1 + 7);
          v56 = JSC::throwDOMAttributeGetterTypeError(v66, var38, v79, v9);
        }
        else
        {
LABEL_51:
          v56 = ((uint64_t (*)(unint64_t))v72[0])(v66);
        }
      }
      if (!v56)
      {
        TDZError = JSC::createTDZError(a1, v49);
        JSC::VM::throwException((JSC::VM *)v13, a1, TDZError, v59, v60, v61, v62, v63);
        if (v78)
        {
          v64 = *(_DWORD *)(v77 + 4);
          if (!v64)
          {
            __break(0xC471u);
            JUMPOUT(0x1984B3A0CLL);
          }
          *(_DWORD *)(v77 + 4) = v64 - 1;
        }
        goto LABEL_14;
      }
      if (v78)
      {
        v57 = *(_DWORD *)(v77 + 4);
        if (!v57)
        {
          __break(0xC471u);
          JUMPOUT(0x1984B39ECLL);
        }
        *(_DWORD *)(v77 + 4) = v57 - 1;
      }
    }
  }
  else if ((v8 & 0x3FF00000) == 0)
  {
    UndefinedVariableError = JSC::createUndefinedVariableError((uint64_t)a1, (JSC::JSGlobalObject *)&v81, v18);
    JSC::VM::throwException((JSC::VM *)v13, a1, UndefinedVariableError, v44, v45, v46, v47, v48);
    v9 = v81;
    v81 = 0;
    if (!v9)
      return *(_QWORD *)(v13 + 16);
    goto LABEL_15;
  }
  if ((v8 & 0xFF800) != 0)
    v24 = 1;
  else
    v24 = 3;
  v72[0] = 0;
  v72[1] = a2;
  LODWORD(v73) = -1;
  BYTE4(v73) = v24;
  *(_WORD *)((char *)&v73 + 5) = 0;
  HIBYTE(v73) = 1;
  v74 = 0;
  (*(void (**)(WTF::AtomStringImpl *, JSC::JSGlobalObject *, WTF::StringImpl *, const WTF::StringImpl *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v9, a3, v72);
LABEL_14:
  v81 = 0;
LABEL_15:
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::~StringImpl(v9, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  else
  {
    *(_DWORD *)v9 -= 2;
  }
  return *(_QWORD *)(v13 + 16);
}

uint64_t operationPutDynamicVarSloppy(JSC::VM **a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, WTF::StringImpl *this, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  WTF::StringImpl *v9;
  JSC::VM *v13;
  int v14;
  int v15;
  uint64_t v16;
  const JSC::Identifier *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int hasProperty;
  WTF::AtomStringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t UndefinedVariableError;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::JSGlobalObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t TDZError;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD v64[2];
  unint64_t v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  _QWORD v68[2];
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD var48[10];

  v8 = a5;
  v9 = this;
  v13 = a1[7];
  *((_QWORD *)v13 + 5) = var48[9];
  v14 = *((_DWORD *)this + 4);
  if ((v14 & 0x20) != 0)
  {
    v15 = *(_DWORD *)this + 2;
  }
  else
  {
    if ((v14 & 0x10) != 0)
    {
      *(_DWORD *)this += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*((uint64_t **)v13 + 5239), (unint64_t)this, a3, (uint64_t)this, a5, a6, a7, a8, v64);
      v9 = (WTF::StringImpl *)v64[0];
    }
    v15 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 2;
    if (!v15)
    {
      WTF::StringImpl::~StringImpl(v9, a2, (uint64_t)a3, (uint64_t)this, a5, a6, a7, a8);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      goto LABEL_6;
    }
  }
  *(_DWORD *)v9 = v15;
LABEL_6:
  var48[0] = v9;
  hasProperty = JSC::JSObject::hasProperty((unint64_t)a2, (uint64_t)a1, (unint64_t)v9, this, a5, a6, a7, a8);
  if (*((_DWORD *)v13 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v13, v16, (uint64_t)v17, v18, v19, v20, v21, v22))
  {
    goto LABEL_10;
  }
  if (!hasProperty)
  {
    if ((v8 & 0x3FF00000) == 0)
    {
      UndefinedVariableError = JSC::createUndefinedVariableError((uint64_t)a1, (JSC::JSGlobalObject *)var48, v17);
      JSC::VM::throwException(v13, (JSC::JSGlobalObject *)a1, UndefinedVariableError, v43, v44, v45, v46, v47);
      v9 = (WTF::StringImpl *)var48[0];
      var48[0] = 0;
      if (!v9)
        return *((_QWORD *)v13 + 2);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (*((_BYTE *)a2 + 5) == 52 && (v8 & 0xFF800) != 0)
  {
    v65 = 0xFFFFFFFF00000000;
    LOBYTE(v69) = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v67 = 0;
    memset(v68, 0, 13);
    v66 = a2;
    JSC::symbolTableGet<JSC::JSGlobalLexicalEnvironment>((uint64_t)a2, (uint64_t)v9, (uint64_t)v64, v18, v19, v20, v21, v22);
    if (BYTE1(v68[1]) == 1)
    {
      v55 = v64[0];
    }
    else if (BYTE1(v68[1]) == 2)
    {
      v55 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v64, (JSC::JSGlobalObject *)a1, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      v55 = JSC::PropertySlot::customGetter((uint64_t)v64, a1[7], v9);
    }
    if (!v55)
    {
      TDZError = JSC::createTDZError((JSC *)a1, v48);
      JSC::VM::throwException(v13, (JSC::JSGlobalObject *)a1, TDZError, v58, v59, v60, v61, v62);
      if (!v70)
        goto LABEL_10;
      v63 = *(_DWORD *)(v69 + 4);
      if (v63)
      {
        *(_DWORD *)(v69 + 4) = v63 - 1;
        goto LABEL_10;
      }
      goto LABEL_36;
    }
    if (v70)
    {
      v56 = *(_DWORD *)(v69 + 4);
      if (v56)
      {
        *(_DWORD *)(v69 + 4) = v56 - 1;
        goto LABEL_9;
      }
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x1984B3CCCLL);
    }
  }
LABEL_9:
  v64[0] = 0;
  v64[1] = a2;
  LODWORD(v65) = -1;
  BYTE4(v65) = 2 * ((v8 & 0xFF800) == 0);
  *(_WORD *)((char *)&v65 + 5) = 0;
  HIBYTE(v65) = 1;
  v66 = 0;
  (*(void (**)(WTF::AtomStringImpl *, JSC::VM **, WTF::StringImpl *, const WTF::StringImpl *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v9, a3, v64);
LABEL_10:
  var48[0] = 0;
LABEL_11:
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::~StringImpl(v9, v24, (uint64_t)v17, v18, v19, v20, v21, v22);
    WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  else
  {
    *(_DWORD *)v9 -= 2;
  }
  return *((_QWORD *)v13 + 2);
}

unint64_t operationNormalizeMapKeyHeapBigInt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t vars0;

  v2 = a2;
  *(_QWORD *)(a1 + 40) = vars0;
  if (a2 >> 49)
  {
    if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
    {
      v4 = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
      if (COERCE_DOUBLE(a2 - 0x2000000000000) == (double)(int)v4)
        return v4 | 0xFFFE000000000000;
    }
  }
  return v2;
}

uint64_t operationMapHash(JSC::JSGlobalObject *a1, unint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  int v11;
  int **v13;
  int *v14;
  unsigned int v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int **v21;
  uint64_t vars0;

  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v10 + 40) = vars0;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_10;
  v11 = *(unsigned __int8 *)(this + 5);
  if (v11 == 2)
  {
    v13 = (int **)(this + 8);
    if ((*(_BYTE *)(this + 8) & 1) != 0)
      v13 = JSC::JSRopeString::resolveRope(this, a1, a3, a4, a9, a5, a6, a7, a8);
    if (!*(_DWORD *)(v10 + 80))
      goto LABEL_6;
    v20 = *(_DWORD *)(v10 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
    {
      v21 = v13;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v13 = v21;
    }
    if (*(_QWORD *)(v10 + 16))
    {
      LODWORD(result) = -1;
    }
    else
    {
LABEL_6:
      v14 = *v13;
      v15 = v14[4];
      if (v15 < 0x100)
        LODWORD(result) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v14);
      else
        LODWORD(result) = v15 >> 8;
    }
    return result;
  }
  if (v11 != 3)
  {
LABEL_10:
    v17 = (~(this << 32) + this) ^ ((~(this << 32) + this) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    LODWORD(result) = (v19 >> 31) ^ v19;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(this + 12);
  if (!(_DWORD)result)
    LODWORD(result) = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)this);
  return result;
}

uint64_t operationMapHashHeapBigInt(uint64_t result, JSC::JSBigInt *this)
{
  uint64_t vars0;

  *(_QWORD *)(result + 40) = vars0;
  LODWORD(result) = *((_DWORD *)this + 3);
  if (!(_DWORD)result)
    LODWORD(result) = JSC::JSBigInt::hashSlow(this);
  return result;
}

uint64_t operationMapKeyIndex(JSC::JSGlobalObject *a1, JSC::VM *a2, JSC::JSBigInt *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  void *v9;
  char *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v17;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int8x16_t *v30;
  unsigned int v31;
  int8x16_t *v32;
  __int32 v33;
  __int32 v34;
  uint8x8_t *v35;
  unsigned int v36;
  int16x8_t *v37;
  unsigned int v38;
  int16x8_t *v39;
  unsigned int v40;
  uint8x8_t *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  JSC::JSString *v46;
  void *v47;
  char *v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v65;
  __int32 v66;
  uint64_t v67;
  int v68;
  int v69;
  int v71;
  __int32 v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v77;
  JSC::JSBigInt *v78;
  unint64_t v79;
  double v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  unsigned int v84;
  unsigned int v85;
  JSC::JSBigInt *v86;
  unint64_t vars0;

  v11 = (unint64_t *)*((_QWORD *)a1 + 7);
  v11[5] = vars0;
  v12 = *((_QWORD *)a2 + 2);
  if (!v12)
    return -1;
  v14 = v12 + 16;
  v15 = ((*(_DWORD *)(v12 + 32) - 1) & a4) + 4;
  *(double *)a9.i64 = (double)(int)this;
  if ((unint64_t)this <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = (uint64_t)this - 0x2000000000000;
  v16 = *(_QWORD *)(v14 + 8 * v15);
  if (v16)
  {
    v17 = v11 + 5230;
    if (!((unint64_t)this >> 49))
    {
      v19 = -1;
      while (1)
      {
        v20 = *(_QWORD *)(v14 + 8 * v16);
        if ((v20 & 0xFFFE000000000002) == 0)
        {
          v21 = *v17;
          if (!*v17)
          {
            v21 = JSC::Symbol::create((JSC::Symbol *)v11, a2, (uint64_t)this, a4, a5, a6, a7, a8);
            v10 = &jpt_1984B41AC;
            v9 = &jpt_1984B4064;
            *v17 = v21;
          }
          if (v21 == v20)
            goto LABEL_16;
        }
        if ((JSC::JSBigInt *)v20 == this)
          return v16;
        if (((v20 | (unint64_t)this) & 0xFFFE000000000002) != 0)
          goto LABEL_16;
        v22 = *((unsigned __int8 *)this + 5);
        if (v22 != 2)
        {
          if (v22 != 3 || *(_BYTE *)(v20 + 5) != 3)
          {
LABEL_15:
            if (this == (JSC::JSBigInt *)v20)
              return v16;
            goto LABEL_16;
          }
          v86 = (JSC::JSBigInt *)v20;
          v47 = v9;
          v48 = v10;
          v49 = JSC::JSBigInt::equals(this, v86, this);
          goto LABEL_56;
        }
        if (*(_BYTE *)(v20 + 5) != 2)
          goto LABEL_15;
        v23 = *((_QWORD *)this + 1);
        if ((v23 & 1) != 0 || (v24 = *(_QWORD *)(v20 + 8), (v24 & 1) != 0))
        {
          v46 = (JSC::JSString *)v20;
          v47 = v9;
          v48 = v10;
          v49 = JSC::JSString::equalSlowCase(this, a1, v46, a4, a5, a6, a7, a8, (int8x16_t)a9);
LABEL_56:
          v10 = v48;
          v9 = v47;
          if (v49)
            return v16;
          goto LABEL_16;
        }
        v25 = *(_DWORD *)(v23 + 16);
        v26 = *(_DWORD *)(v24 + 16);
        if (v26 >= 0x100 && v25 >= 0x100 && (v26 ^ v25) > 0xFF)
          goto LABEL_16;
        v27 = *(unsigned int *)(v23 + 4);
        if ((_DWORD)v27 != *(_DWORD *)(v24 + 4))
          goto LABEL_16;
        if (!(_DWORD)v27)
          return v16;
        v28 = *(unsigned __int8 **)(v23 + 8);
        v29 = *(unsigned __int8 **)(v24 + 8);
        if ((v25 & 4) != 0)
        {
          if ((v26 & 4) != 0)
          {
            if (*v28 != *v29)
              goto LABEL_16;
            v30 = (int8x16_t *)(v28 + 1);
            v43 = v27 - 1;
            v32 = (int8x16_t *)(v29 + 1);
            if ((_DWORD)v27 != 2)
            {
              if ((_DWORD)v27 == 1)
                return v16;
              switch(31 - __clz(v27 - 2))
              {
                case 0u:
                  goto LABEL_70;
                case 1u:
                  if (v30->u16[0] != v32->u16[0])
                    goto LABEL_16;
                  v44 = *(unsigned __int16 *)&v28[v27 - 2];
                  v45 = *(unsigned __int16 *)&v29[v27 - 2];
                  goto LABEL_114;
                case 2u:
                  if (v30->i32[0] != v32->i32[0])
                    goto LABEL_16;
                  v44 = *(_DWORD *)&v28[v27 - 4];
                  v83 = &v29[v27];
LABEL_113:
                  v45 = *((_DWORD *)v83 - 1);
LABEL_114:
                  if (v44 != v45)
                    goto LABEL_16;
                  return v16;
                case 3u:
                  if (v30->i64[0] != v32->i64[0])
                    goto LABEL_16;
                  v81 = *(_QWORD *)&v28[v27 - 8];
                  v82 = &v29[v27];
LABEL_106:
                  if (v81 != *((_QWORD *)v82 - 1))
                    goto LABEL_16;
                  return v16;
                case 4u:
                  a9 = (int16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v28[v27 - 16], *(int8x16_t *)&v29[v27 - 16]), vceqq_s8(*(int8x16_t *)(v28 + 1), *(int8x16_t *)(v29 + 1)));
                  a9.i8[0] = vminvq_u8((uint8x16_t)a9);
LABEL_109:
                  if (!a9.i32[0])
                    goto LABEL_16;
                  return v16;
                default:
                  a9 = (int16x8_t)vceqq_s8(*v30, *v32);
                  a9.i8[0] = vminvq_u8((uint8x16_t)a9);
                  if (!a9.i32[0])
                    goto LABEL_16;
                  if (v43 < 0x10)
                    return v16;
                  v85 = v43 & 0xF;
                  break;
              }
              while (1)
              {
                a9 = (int16x8_t)vceqq_s8(*(int8x16_t *)((char *)v30 + v85), *(int8x16_t *)((char *)v32 + v85));
                a9.i8[0] = vminvq_u8((uint8x16_t)a9);
                if (!a9.i32[0])
                  break;
                v85 += 16;
                if (v85 >= v43)
                  return v16;
              }
              goto LABEL_16;
            }
            v33 = v30->u8[0];
            v34 = v32->u8[0];
            goto LABEL_71;
          }
          if (*(_WORD *)v29 != *v28)
            goto LABEL_16;
          v35 = (uint8x8_t *)(v28 + 1);
          v36 = v27 - 1;
          v37 = (int16x8_t *)(v29 + 2);
          if (v36 >= 8)
          {
            a9 = vceqq_s16(*v37, (int16x8_t)vmovl_u8(*v35));
            a9.i16[0] = vminvq_u16((uint16x8_t)a9);
            if (a9.i32[0])
            {
              v38 = v36 & 7;
              while (1)
              {
                a9 = vceqq_s16(*(int16x8_t *)((char *)v37 + 2 * v38), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v35 + v38)));
                a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                if (!a9.i32[0])
                  break;
                v38 += 8;
                if (v38 >= v36)
                  return v16;
              }
            }
            goto LABEL_16;
          }
          if (v36 < 4)
          {
            if (v36 < 2)
            {
              if (v36 != 1)
                return v16;
              v34 = v35->u8[0];
              v33 = v37->u16[0];
LABEL_71:
              if (v33 == v34)
                return v16;
              goto LABEL_16;
            }
            v65 = (v35->u16[0] | (v35->u16[0] << 8)) & 0xFF00FF;
            v66 = v37->i32[0];
            v67 = v36 & 1;
            v68 = (*(unsigned __int16 *)((char *)v35->u16 + v67) | (*(unsigned __int16 *)((char *)v35->u16 + v67) << 8)) & 0xFF00FF;
            v69 = *(__int32 *)((char *)v37->i32 + 2 * v67);
            if (v65 == v66 && v68 == v69)
              return v16;
          }
          else
          {
            v50 = (v35->u32[0] | ((unint64_t)v35->u32[0] << 16)) & 0xFFFF0000FFFFLL;
            v51 = v37->i64[0];
            v52 = v36 & 3;
            v53 = (*(unsigned int *)((char *)v35->u32 + v52) | ((unint64_t)*(unsigned int *)((char *)v35->u32
                                                                                                  + v52) << 16)) & 0xFFFF0000FFFFLL;
            v54 = (v53 | (v53 << 8)) & 0xFF00FF00FF00FFLL;
            v55 = *(uint64_t *)((char *)v37->i64 + 2 * v52);
            if (((v50 | (v50 << 8)) & 0xFF00FF00FF00FFLL) == v51 && v54 == v55)
              return v16;
          }
        }
        else
        {
          if ((v26 & 4) == 0)
          {
            if (*(unsigned __int16 *)v28 != *(unsigned __int16 *)v29)
              goto LABEL_16;
            v30 = (int8x16_t *)(v28 + 2);
            v31 = v27 - 1;
            v32 = (int8x16_t *)(v29 + 2);
            if ((_DWORD)v27 != 2)
            {
              if ((_DWORD)v27 == 1)
                return v16;
              switch(31 - __clz(v27 - 2))
              {
                case 0u:
                  v33 = v30->i32[0];
                  v34 = v32->i32[0];
                  goto LABEL_71;
                case 1u:
                  if (v30->i32[0] != v32->i32[0])
                    goto LABEL_16;
                  v44 = *(_DWORD *)&v28[2 * v27 - 4];
                  v83 = &v29[2 * v27];
                  goto LABEL_113;
                case 2u:
                  if (v30->i64[0] != v32->i64[0])
                    goto LABEL_16;
                  v81 = *(_QWORD *)&v28[2 * v27 - 8];
                  v82 = &v29[2 * v27];
                  goto LABEL_106;
                case 3u:
                  a9 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v28[2 * v27 - 16], *(int16x8_t *)&v29[2 * v27 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v28 + 2), *(int16x8_t *)(v29 + 2)));
                  a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                  goto LABEL_109;
                default:
                  a9 = vceqq_s16(*(int16x8_t *)v30, *(int16x8_t *)v32);
                  a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                  if (!a9.i32[0])
                    goto LABEL_16;
                  if (v31 < 8)
                    return v16;
                  v84 = v31 & 7;
                  break;
              }
              while (1)
              {
                a9 = vceqq_s16(*(int16x8_t *)((char *)v30 + 2 * v84), *(int16x8_t *)((char *)v32 + 2 * v84));
                a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                if (!a9.i32[0])
                  break;
                v84 += 8;
                if (v84 >= v31)
                  return v16;
              }
              goto LABEL_16;
            }
LABEL_70:
            v33 = v30->u16[0];
            v34 = v32->u16[0];
            goto LABEL_71;
          }
          if (*(_WORD *)v28 == *v29)
          {
            v39 = (int16x8_t *)(v28 + 2);
            v40 = v27 - 1;
            v41 = (uint8x8_t *)(v29 + 1);
            if (v40 < 8)
            {
              if (v40 < 4)
              {
                if (v40 < 2)
                {
                  if (v40 != 1 || v39->i16[0] == v41->u8[0])
                    return v16;
                }
                else
                {
                  v71 = (v41->u16[0] | (v41->u16[0] << 8)) & 0xFF00FF;
                  v72 = v39->i32[0];
                  v73 = v40 & 1;
                  v74 = (*(unsigned __int16 *)((char *)v41->u16 + v73) | (*(unsigned __int16 *)((char *)v41->u16 + v73) << 8)) & 0xFF00FF;
                  v75 = *(__int32 *)((char *)v39->i32 + 2 * v73);
                  if (v71 == v72 && v74 == v75)
                    return v16;
                }
              }
              else
              {
                v57 = (v41->u32[0] | ((unint64_t)v41->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                v58 = v39->i64[0];
                v59 = v40 & 3;
                v60 = (*(unsigned int *)((char *)v41->u32 + v59) | ((unint64_t)*(unsigned int *)((char *)v41->u32 + v59) << 16)) & 0xFFFF0000FFFFLL;
                v61 = (v60 | (v60 << 8)) & 0xFF00FF00FF00FFLL;
                v62 = *(uint64_t *)((char *)v39->i64 + 2 * v59);
                if (((v57 | (v57 << 8)) & 0xFF00FF00FF00FFLL) == v58 && v61 == v62)
                  return v16;
              }
            }
            else
            {
              a9 = vceqq_s16(*v39, (int16x8_t)vmovl_u8(*v41));
              a9.i16[0] = vminvq_u16((uint16x8_t)a9);
              if (a9.i32[0])
              {
                v42 = v40 & 7;
                while (1)
                {
                  a9 = vceqq_s16(*(int16x8_t *)((char *)v39 + 2 * v42), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v41 + v42)));
                  a9.i16[0] = vminvq_u16((uint16x8_t)a9);
                  if (!a9.i32[0])
                    break;
                  v42 += 8;
                  if (v42 >= v40)
                    return v16;
                }
              }
            }
          }
        }
LABEL_16:
        v16 = *(_QWORD *)(v14 + 8 * (v16 + 2));
        if (!v16)
          return v19;
      }
    }
    v77 = a9.i64[0];
    v19 = -1;
    while (1)
    {
      v78 = *(JSC::JSBigInt **)(v14 + 8 * v16);
      if (((unint64_t)v78 & 0xFFFE000000000002) != 0)
        goto LABEL_96;
      v79 = *v17;
      if (!*v17)
      {
        v79 = JSC::Symbol::create((JSC::Symbol *)v11, a2, (uint64_t)this, a4, a5, a6, a7, a8);
        *v17 = v79;
      }
      if ((JSC::JSBigInt *)v79 != v78)
      {
LABEL_96:
        if (v78 == this)
          break;
        if ((unint64_t)v78 >> 49)
        {
          v80 = (double)(int)v78;
          if ((unint64_t)v78 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v80 = (char *)v78 - 0x2000000000000;
          if (v77 == *(_QWORD *)&v80)
            break;
        }
      }
      v16 = *(_QWORD *)(v14 + 8 * (v16 + 2));
      if (!v16)
        return v19;
    }
    return v16;
  }
  else
  {
    return -1;
  }
}

uint64_t operationSetKeyIndex(JSC::JSGlobalObject *a1, JSC::VM *a2, JSC::JSBigInt *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t *v17;
  uint64_t v19;
  unint64_t v20;
  int v21;
  WTF *v22;
  const WTF::StringImpl *v23;
  unint64_t v24;
  JSC::JSBigInt *v25;
  unint64_t v26;
  double v27;
  JSC::JSBigInt *v28;
  unint64_t vars0;

  v9 = (unint64_t *)*((_QWORD *)a1 + 7);
  v9[5] = vars0;
  v10 = *((_QWORD *)a2 + 2);
  if (!v10)
    return -1;
  v12 = v10 + 16;
  v13 = ((*(_DWORD *)(v10 + 32) - 1) & a4) + 4;
  *(double *)a9.i64 = (double)(int)this;
  if ((unint64_t)this <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = (uint64_t)this - 0x2000000000000;
  v14 = *(_QWORD *)(v12 + 8 * v13);
  if (!v14)
    return -1;
  v17 = v9 + 5230;
  if (!((unint64_t)this >> 49))
  {
    v15 = -1;
    while (1)
    {
      v19 = *(_QWORD *)(v12 + 8 * v14);
      if ((v19 & 0xFFFE000000000002) != 0)
        goto LABEL_14;
      v20 = *v17;
      if (!*v17)
      {
        v20 = JSC::Symbol::create((JSC::Symbol *)v9, a2, (uint64_t)this, a4, a5, a6, a7, a8);
        *v17 = v20;
      }
      if (v20 != v19)
      {
LABEL_14:
        if ((JSC::JSBigInt *)v19 == this)
          return v14;
        if (((v19 | (unint64_t)this) & 0xFFFE000000000002) == 0)
        {
          v21 = *((unsigned __int8 *)this + 5);
          if (v21 == 2)
          {
            if (*(_BYTE *)(v19 + 5) != 2)
              goto LABEL_17;
            v22 = (WTF *)*((_QWORD *)this + 1);
            if ((v22 & 1) != 0
              || (v23 = *(const WTF::StringImpl **)(v19 + 8), (v23 & 1) != 0))
            {
              if (JSC::JSString::equalSlowCase(this, a1, (JSC::JSString *)v19, a4, a5, a6, a7, a8, a9))
                return v14;
            }
            else if (WTF::equal(v22, v23, this))
            {
              return v14;
            }
          }
          else
          {
            if (v21 != 3 || *(_BYTE *)(v19 + 5) != 3)
            {
LABEL_17:
              if (this == (JSC::JSBigInt *)v19)
                return v14;
              goto LABEL_18;
            }
            if (JSC::JSBigInt::equals(this, (JSC::JSBigInt *)v19, this))
              return v14;
          }
        }
      }
LABEL_18:
      v14 = *(_QWORD *)(v12 + 8 * (v14 + 1));
      if (!v14)
        return v15;
    }
  }
  v24 = a9.i64[0];
  v15 = -1;
  while (1)
  {
    v25 = *(JSC::JSBigInt **)(v12 + 8 * v14);
    if (((unint64_t)v25 & 0xFFFE000000000002) != 0)
      goto LABEL_36;
    v26 = *v17;
    if (!*v17)
    {
      v28 = *(JSC::JSBigInt **)(v12 + 8 * v14);
      v26 = JSC::Symbol::create((JSC::Symbol *)v9, a2, (uint64_t)this, a4, a5, a6, a7, a8);
      v25 = v28;
      *v17 = v26;
    }
    if ((JSC::JSBigInt *)v26 != v25)
    {
LABEL_36:
      if (v25 == this)
        break;
      if ((unint64_t)v25 >> 49)
      {
        v27 = (double)(int)v25;
        if ((unint64_t)v25 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v27 = (char *)v25 - 0x2000000000000;
        if (v24 == *(_QWORD *)&v27)
          break;
      }
    }
    v14 = *(_QWORD *)(v12 + 8 * (v14 + 1));
    if (!v14)
      return v15;
  }
  return v14;
}

uint64_t operationMapValue(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * (a3 + 1) + 16);
}

unint64_t operationMapStorage(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::OrderedHashMap *v8;
  unint64_t result;
  uint64_t vars0;

  v8 = *(JSC::OrderedHashMap **)(a1 + 56);
  *((_QWORD *)v8 + 5) = vars0;
  result = *((_QWORD *)a2 + 2);
  if (!result)
  {
    result = *((_QWORD *)v8 + 5231);
    if (!result)
    {
      result = JSC::OrderedHashMap::createSentinel(v8, a2, a3, a4, a5, a6, a7, a8);
      *((_QWORD *)v8 + 5231) = result;
    }
  }
  return result;
}

unint64_t operationSetStorage(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::OrderedHashMap *v8;
  unint64_t result;
  uint64_t vars0;

  v8 = *(JSC::OrderedHashMap **)(a1 + 56);
  *((_QWORD *)v8 + 5) = vars0;
  result = *((_QWORD *)a2 + 2);
  if (!result)
  {
    result = *((_QWORD *)v8 + 5231);
    if (!result)
    {
      result = JSC::OrderedHashMap::createSentinel(v8, a2, a3, a4, a5, a6, a7, a8);
      *((_QWORD *)v8 + 5231) = result;
    }
  }
  return result;
}

unint64_t operationMapIterationNext(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t Sentinel;
  unint64_t v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unint64_t vars0;

  v8 = a3;
  v9 = (unint64_t)a2;
  v10 = *(unint64_t **)(a1 + 56);
  v11 = v10 + 5230;
  v10[5] = vars0;
  Sentinel = v10[5231];
  if (!Sentinel)
  {
    Sentinel = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v10, a2, a3, a4, a5, a6, a7, a8);
    v10[5231] = Sentinel;
  }
  if (Sentinel == v9)
  {
    if (!v9)
    {
LABEL_21:
      v9 = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v10, a2, a3, a4, a5, a6, a7, a8);
      v10[5231] = v9;
    }
  }
  else
  {
    v13 = *(_QWORD *)(v9 + 16);
    if (v13)
      v14 = (v13 & 0xFFFE000000000002) == 0;
    else
      v14 = 0;
    if (v14)
    {
      do
      {
        if (v8)
        {
          v22 = *(_DWORD *)(v9 + 24);
          if (v22)
          {
            if (v22 == -1)
            {
              v8 = 0;
            }
            else
            {
              v23 = v22 + 2;
              if ((v22 + 2) >= 3)
              {
                v24 = 0;
                v25 = v8 - v22;
                v26 = (unsigned int *)(v9 + 32);
                v27 = 2 - v23;
                while (1)
                {
                  v28 = *v26;
                  v26 += 2;
                  if (v8 <= v28)
                    break;
                  if (v27 == --v24)
                  {
                    v8 = v25;
                    goto LABEL_30;
                  }
                }
                v8 += v24;
              }
            }
          }
        }
LABEL_30:
        v9 = v13;
        v13 = *(_QWORD *)(v13 + 16);
        if (v13)
          v29 = (v13 & 0xFFFE000000000002) == 0;
        else
          v29 = 0;
      }
      while (v29);
    }
    v15 = *(_DWORD *)(v9 + 24);
    if (v8 < v15 + (int)v13)
    {
      v16 = 3 * v8 + *(_DWORD *)(v9 + 32) + 4;
      v17 = v8 | 0xFFFE000000000000;
      v18 = v13 + v15 - v8;
      do
      {
        v19 = *(_QWORD *)(v9 + 16 + 8 * v16);
        if ((v19 & 0xFFFE000000000002) != 0)
          goto LABEL_14;
        v20 = *v11;
        if (!*v11)
        {
          v20 = JSC::Symbol::create((JSC::Symbol *)v10, a2, a3, a4, a5, a6, a7, a8);
          *v11 = v20;
        }
        if (v20 != v19)
        {
LABEL_14:
          *(_QWORD *)(v9 + 40) = v17;
          return v9;
        }
        v16 += 3;
        ++v17;
        --v18;
      }
      while (v18);
      Sentinel = v10[5231];
    }
    v9 = Sentinel;
    if (!Sentinel)
      goto LABEL_21;
  }
  return v9;
}

unint64_t operationMapIterationEntry(uint64_t a1, uint64_t a2)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return *(unsigned int *)(a2 + 40) | 0xFFFE000000000000;
}

uint64_t operationMapIterationEntryKey(uint64_t a1, uint64_t a2)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return *(_QWORD *)(a2 + 8 * (*(_DWORD *)(a2 + 32) + 3 * *(_DWORD *)(a2 + 40) + 4) + 16);
}

uint64_t operationMapIterationEntryValue(uint64_t a1, uint64_t a2)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return *(_QWORD *)(a2 + 8 * (*(_DWORD *)(a2 + 32) + 3 * *(_DWORD *)(a2 + 40) + 5) + 16);
}

unint64_t operationSetIterationNext(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t Sentinel;
  unint64_t v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v22;
  BOOL v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t vars0;

  v8 = a3;
  v9 = (unint64_t)a2;
  v10 = *(unint64_t **)(a1 + 56);
  v11 = v10 + 5230;
  v10[5] = vars0;
  Sentinel = v10[5231];
  if (!Sentinel)
  {
    Sentinel = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v10, a2, a3, a4, a5, a6, a7, a8);
    v10[5231] = Sentinel;
  }
  if (Sentinel == v9)
  {
    if (v9)
      return v9;
LABEL_16:
    v9 = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v10, a2, a3, a4, a5, a6, a7, a8);
    v10[5231] = v9;
    return v9;
  }
  v13 = *(_QWORD *)(v9 + 16);
  if (v13)
    v14 = (v13 & 0xFFFE000000000002) == 0;
  else
    v14 = 0;
  if (v14)
  {
    do
    {
      if (v8)
      {
        v22 = *(_DWORD *)(v9 + 24);
        if (v22)
        {
          if (v22 == -1)
          {
            v8 = 0;
          }
          else
          {
            v27 = v22 + 2;
            if ((v22 + 2) >= 3)
            {
              v26 = 0;
              v28 = v8 - v22;
              v24 = (unsigned int *)(v9 + 32);
              v29 = 2 - v27;
              while (1)
              {
                v25 = *v24;
                v24 += 2;
                if (v8 <= v25)
                  break;
                if (v29 == --v26)
                {
                  v8 = v28;
                  goto LABEL_23;
                }
              }
              v8 += v26;
            }
          }
        }
      }
LABEL_23:
      v9 = v13;
      v13 = *(_QWORD *)(v13 + 16);
      if (v13)
        v23 = (v13 & 0xFFFE000000000002) == 0;
      else
        v23 = 0;
    }
    while (v23);
  }
  v15 = *(_DWORD *)(v9 + 24);
  if (v8 < v15 + (int)v13)
  {
    v16 = *(_DWORD *)(v9 + 32) + 2 * v8 + 4;
    v17 = v8 | 0xFFFE000000000000;
    v18 = v13 + v15 - v8;
    do
    {
      v19 = *(_QWORD *)(v9 + 16 + 8 * v16);
      if ((v19 & 0xFFFE000000000002) != 0)
        goto LABEL_14;
      v20 = *v11;
      if (!*v11)
      {
        v20 = JSC::Symbol::create((JSC::Symbol *)v10, a2, a3, a4, a5, a6, a7, a8);
        *v11 = v20;
      }
      if (v20 != v19)
      {
LABEL_14:
        *(_QWORD *)(v9 + 40) = v17;
        return v9;
      }
      v16 += 2;
      ++v17;
      --v18;
    }
    while (v18);
    Sentinel = v10[5231];
  }
  v9 = Sentinel;
  if (!Sentinel)
    goto LABEL_16;
  return v9;
}

unint64_t operationSetIterationEntry(uint64_t a1, uint64_t a2)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return *(unsigned int *)(a2 + 40) | 0xFFFE000000000000;
}

uint64_t operationSetIterationEntryKey(uint64_t a1, uint64_t a2)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return *(_QWORD *)(a2 + 8 * (*(_DWORD *)(a2 + 32) + 2 * *(_DWORD *)(a2 + 40) + 4) + 16);
}

uint64_t operationMapIteratorNext(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  unint64_t Sentinel;
  int v23;
  unint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  unint64_t *v32;
  uint64_t vars0;

  v9 = *(_QWORD *)(a1 + 56);
  v10 = (unint64_t *)(v9 + 41840);
  *(_QWORD *)(v9 + 40) = vars0;
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(v9 + 41848);
  if (!v12)
  {
    Sentinel = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v9, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
    v10 = (unint64_t *)(v9 + 41840);
    v12 = Sentinel;
    *(_QWORD *)(v9 + 41848) = Sentinel;
  }
  if (v12 == v11)
    return 7;
  v13 = *(_DWORD *)(a2 + 16);
  v14 = *(_QWORD *)(v11 + 16);
  if (v14)
    v15 = (v14 & 0xFFFE000000000002) == 0;
  else
    v15 = 0;
  if (v15)
  {
    v16 = v11;
    do
    {
      if (v13)
      {
        v23 = *(_DWORD *)(v16 + 24);
        if (v23)
        {
          v24 = v10;
          if (v23 == -1)
          {
            v13 = 0;
          }
          else
          {
            v25 = v23 + 2;
            if ((v23 + 2) >= 3)
            {
              v26 = 0;
              v27 = v13 - v23;
              v28 = (unsigned int *)(v16 + 32);
              v29 = 2 - v25;
              while (1)
              {
                v30 = *v28;
                v28 += 2;
                if (v13 <= v30)
                  break;
                if (v29 == --v26)
                {
                  v13 = v27;
                  goto LABEL_35;
                }
              }
              v13 += v26;
            }
          }
LABEL_35:
          v10 = v24;
        }
      }
      v16 = v14;
      v14 = *(_QWORD *)(v14 + 16);
      if (v14)
        v31 = (v14 & 0xFFFE000000000002) == 0;
      else
        v31 = 0;
    }
    while (v31);
  }
  else
  {
    v16 = v11;
  }
  v17 = *(_DWORD *)(v16 + 24) + v14;
  if (v13 >= v17)
  {
LABEL_21:
    *(_QWORD *)(a2 + 32) = v12;
    result = 7;
    if (!v12 || (v12 & 0xFFFE000000000002) != 0)
      return result;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(v9 + 192, a2);
    return 7;
  }
  v18 = 3 * v13 + *(_DWORD *)(v16 + 32) + 4;
  while (1)
  {
    v19 = *(_QWORD *)(v16 + 16 + 8 * v18);
    if ((v19 & 0xFFFE000000000002) != 0)
      break;
    v20 = *v10;
    if (!*v10)
    {
      v32 = v10;
      v20 = JSC::Symbol::create((JSC::Symbol *)v9, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      v10 = v32;
      *v32 = v20;
    }
    if (v20 != v19)
      break;
    ++v13;
    v18 += 3;
    if (v17 == v13)
      goto LABEL_21;
  }
  *(_QWORD *)(a2 + 16) = (v13 + 1) | 0xFFFE000000000000;
  if (v16 != v11)
  {
    *(_QWORD *)(a2 + 32) = v16;
    if ((v16 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(v9 + 192, a2);
  }
  if (v19)
    return 6;
  else
    return 7;
}

uint64_t operationMapIteratorKey(uint64_t a1, uint64_t a2)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return *(_QWORD *)(*(_QWORD *)(a2 + 32)
                   + 8 * (3 * *(_DWORD *)(a2 + 16) + *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32) + 1)
                   + 16);
}

uint64_t operationMapIteratorValue(uint64_t a1, uint64_t a2)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return *(_QWORD *)(*(_QWORD *)(a2 + 32)
                   + 8 * (3 * *(_DWORD *)(a2 + 16) + *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32) + 2)
                   + 16);
}

uint64_t operationSetIteratorNext(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t Sentinel;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  BOOL v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t vars0;

  v9 = *(_QWORD *)(a1 + 56);
  v10 = (unint64_t *)(v9 + 41840);
  *(_QWORD *)(v9 + 40) = vars0;
  v11 = *(_QWORD *)(a2 + 32);
  Sentinel = *(_QWORD *)(v9 + 41848);
  if (!Sentinel)
  {
    Sentinel = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v9, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(v9 + 41848) = Sentinel;
  }
  if (Sentinel == v11)
    return 7;
  v13 = *(_DWORD *)(a2 + 16);
  v14 = *(_QWORD *)(v11 + 16);
  if (v14)
    v15 = (v14 & 0xFFFE000000000002) == 0;
  else
    v15 = 0;
  if (v15)
  {
    v16 = v11;
    do
    {
      if (v13)
      {
        v23 = *(_DWORD *)(v16 + 24);
        if (v23)
        {
          if (v23 == -1)
          {
            v13 = 0;
          }
          else
          {
            v28 = v23 + 2;
            if ((v23 + 2) >= 3)
            {
              v27 = 0;
              v29 = v13 - v23;
              v25 = (unsigned int *)(v16 + 32);
              v30 = 2 - v28;
              while (1)
              {
                v26 = *v25;
                v25 += 2;
                if (v13 <= v26)
                  break;
                if (v30 == --v27)
                {
                  v13 = v29;
                  goto LABEL_32;
                }
              }
              v13 += v27;
            }
          }
        }
      }
LABEL_32:
      v16 = v14;
      v14 = *(_QWORD *)(v14 + 16);
      if (v14)
        v24 = (v14 & 0xFFFE000000000002) == 0;
      else
        v24 = 0;
    }
    while (v24);
  }
  else
  {
    v16 = v11;
  }
  v17 = *(_DWORD *)(v16 + 24) + v14;
  if (v13 >= v17)
  {
LABEL_21:
    if (!Sentinel)
    {
      Sentinel = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v9, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      *(_QWORD *)(v9 + 41848) = Sentinel;
    }
    *(_QWORD *)(a2 + 32) = Sentinel;
    v21 = 7;
    if (!Sentinel || (Sentinel & 0xFFFE000000000002) != 0)
      return v21;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(v9 + 192, a2);
    return 7;
  }
  v18 = *(_DWORD *)(v16 + 32) + 2 * v13 + 4;
  while (1)
  {
    v19 = *(_QWORD *)(v16 + 16 + 8 * v18);
    if ((v19 & 0xFFFE000000000002) != 0)
      break;
    v20 = *v10;
    if (!*v10)
    {
      v20 = JSC::Symbol::create((JSC::Symbol *)v9, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      *v10 = v20;
    }
    if (v20 != v19)
      break;
    ++v13;
    v18 += 2;
    if (v17 == v13)
    {
      Sentinel = *(_QWORD *)(v9 + 41848);
      goto LABEL_21;
    }
  }
  *(_QWORD *)(a2 + 16) = (v13 + 1) | 0xFFFE000000000000;
  if (v16 != v11)
  {
    *(_QWORD *)(a2 + 32) = v16;
    if ((v16 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(v9 + 192, a2);
  }
  v21 = 6;
  if (!v19)
    return 7;
  return v21;
}

uint64_t operationSetIteratorKey(uint64_t a1, uint64_t a2)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return *(_QWORD *)(*(_QWORD *)(a2 + 32)
                   + 8 * (*(_DWORD *)(*(_QWORD *)(a2 + 32) + 32) + 2 * *(_DWORD *)(a2 + 16) + 2)
                   + 16);
}

uint64_t operationSetAdd(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t this, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  unint64_t v12;
  JSC::Symbol *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t *v40;
  JSC::Symbol *v41;
  uint64_t v42;
  unint64_t v43;
  WTF *v44;
  const WTF::StringImpl *v45;
  JSC::JSGlobalObject *v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  JSC::JSGlobalObject *v55;
  char v56;
  char v57;
  uint64_t v58;
  JSC *v59;
  JSC::JSBigInt **v60;
  unsigned int v61;
  JSC::JSBigInt *v62;
  size_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  JSC::Symbol *v67;
  unint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  int **v77;
  WTF::StringImpl *v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  int v86;
  JSC::Symbol *v87;
  unint64_t *v88;
  uint64_t v89;
  int **v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  JSC::JSGlobalObject *v105;
  uint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  JSC::Symbol *v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  JSC::JSGlobalObject *v116;
  JSC::Symbol *v117;
  unint64_t *v118;
  uint64_t Slow;
  unint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  BOOL v123;
  JSC::Symbol *v124;
  unint64_t *v125;
  unint64_t *v126;
  BOOL v127;
  unint64_t v128;
  JSC::Symbol *v129;
  uint64_t v130;
  unint64_t v131;
  JSC::Symbol *v132;
  int **v133;
  uint64_t v134;
  JSC::JSGlobalObject *v135;
  JSC::Symbol *v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  JSC::JSGlobalObject *v141;
  unint64_t *v142;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v144;
  uint64_t v145;
  JSC::JSGlobalObject *v146;
  JSC::Symbol *v147;
  uint64_t v148;
  unint64_t *v149;
  BOOL v150;
  unint64_t v151;
  JSC::Symbol *v152;
  JSC::JSGlobalObject *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t *v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  JSC::Symbol *v161;
  BOOL v162;
  unint64_t v163;
  BOOL v164;
  unint64_t v165;
  uint64_t v166;
  JSC::JSGlobalObject *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t SlowCase;
  unint64_t *v175;
  unint64_t v176;
  JSC::JSBigInt *v177;
  uint64_t v178;
  JSC::JSGlobalObject *v179;
  JSC::Symbol *v180;
  uint64_t v181;
  unint64_t *v182;
  uint64_t v183;
  unint64_t *v184;
  BOOL v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v191;
  JSC::Symbol *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  JSC::JSGlobalObject *v196;
  unint64_t v197;
  uint64_t v198;
  JSC::JSGlobalObject *v199;
  JSC::Symbol *v200;
  uint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  JSC::JSGlobalObject *v205;
  JSC::Symbol *v206;
  unint64_t v207;
  uint64_t v208;
  JSC::JSGlobalObject *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  JSC::Symbol *v215;
  JSC::Symbol *v216;
  JSC::Symbol *v217;
  JSC::Symbol *v218;
  JSC::Symbol *v219;
  JSC::Symbol *v220;
  unint64_t v221;
  unint64_t *v222;
  unsigned int v223;
  JSC::JSBigInt *v224;
  JSC::JSBigInt *v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  JSC::VM *v231;
  JSC::VM *v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  JSC::JSBigInt **v241;
  JSC::JSGlobalObject *v242;
  JSC::JSGlobalObject *v243;
  JSC::JSGlobalObject *v244;
  JSC *v245;
  JSC *v246;
  JSC *v247;
  JSC *v248;
  JSC *v249;
  _QWORD v250[3];
  _QWORD var58[12];

  v9 = this;
  v10 = a1;
  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = var58[11];
  if (*(_QWORD *)(a2 + 16))
    goto LABEL_2;
  var58[0] = v11;
  v48 = *(_QWORD *)(v11 + 41656);
  v49 = *(_QWORD *)(v11 + 11000);
  if (v49)
  {
    v50 = *(unsigned int *)(v49 + 60);
    v51 = *(_QWORD *)(v49 + 24);
    if (v51 < *(_QWORD *)(v49 + 32))
    {
      *(_QWORD *)(v49 + 24) = v51 + v50;
      goto LABEL_42;
    }
    v51 = *(_QWORD *)(v49 + 40);
    if ((v51 & 1) == 0)
    {
      v113 = *(_QWORD *)(v51 + 8) ^ *(_QWORD *)(v49 + 48);
      *(_QWORD *)(v49 + 32) = v51 + HIDWORD(v113);
      *(_QWORD *)(v49 + 40) = v51 + (int)v113;
      *(_QWORD *)(v49 + 24) = v51 + v50;
      goto LABEL_43;
    }
    v168 = a2;
    v169 = a4;
    JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)a2, this, a4, a5, (uint64_t)a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v49, v11 + 192, v50, 0, 1, v171, v172, v173);
    v10 = a1;
  }
  else
  {
    v168 = a2;
    v169 = a4;
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v11 + 10792, (JSC *)v11, 0xF0uLL, 0, a5, (uint64_t)a6, a7, a8);
    v10 = a1;
  }
  a4 = v169;
  a2 = v168;
  v51 = SlowCase;
LABEL_42:
  if (v51)
  {
LABEL_43:
    *(_DWORD *)v51 = 0;
    v52 = *(_DWORD *)(v48 + 8);
    *(_DWORD *)v51 = v48 >> 4;
    *(_DWORD *)(v51 + 4) = v52;
    v250[2] = v48;
    *(_QWORD *)(v51 + 8) = 0x1C0000001CLL;
    if ((*(_BYTE *)(v51 + 4) & 0xE) == 8)
    {
      *(_OWORD *)(v51 + 208) = 0u;
      *(_OWORD *)(v51 + 224) = 0u;
      *(_OWORD *)(v51 + 176) = 0u;
      *(_OWORD *)(v51 + 192) = 0u;
      *(_OWORD *)(v51 + 144) = 0u;
      *(_OWORD *)(v51 + 160) = 0u;
      *(_OWORD *)(v51 + 112) = 0u;
      *(_OWORD *)(v51 + 128) = 0u;
      *(_OWORD *)(v51 + 80) = 0u;
      *(_OWORD *)(v51 + 96) = 0u;
      *(_OWORD *)(v51 + 48) = 0u;
      *(_OWORD *)(v51 + 64) = 0u;
      *(_OWORD *)(v51 + 16) = 0u;
      *(_OWORD *)(v51 + 32) = 0u;
    }
    if (*(_BYTE *)(v11 + 755))
      __dmb(0xAu);
    a9 = (int8x16_t)vdupq_n_s64(0xFFFE000000000000);
    *(int8x16_t *)(v51 + 16) = a9;
    *(_QWORD *)(v51 + 32) = 0xFFFE000000000008;
    goto LABEL_48;
  }
  v165 = a2;
  v166 = a4;
  v167 = v10;
  JSC::throwOutOfMemoryError(v10, (JSC::JSGlobalObject *)var58);
  v10 = v167;
  a4 = v166;
  a2 = v165;
LABEL_48:
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_49;
  v112 = *(_DWORD *)(v11 + 80);
  if ((v112 & 0x27) != 0 && (v112 & 0x20) == 0)
  {
    v207 = a2;
    v208 = a4;
    v209 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, this, a4, a5, (uint64_t)a6, a7, a8);
    v10 = v209;
    a4 = v208;
    a2 = v207;
  }
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_49:
    *(_QWORD *)(a2 + 16) = v51;
    if (v51 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(a2 + 7))
    {
      v53 = a2;
      v54 = a4;
      v55 = v10;
      JSC::Heap::writeBarrierSlowPath(v11 + 192, a2);
      v10 = v55;
      a4 = v54;
      a2 = v53;
    }
  }
LABEL_2:
  if (*(_DWORD *)(v11 + 80))
  {
    v97 = *(_DWORD *)(v11 + 80);
    if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
    {
      v194 = a2;
      v195 = a4;
      v196 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, this, a4, a5, (uint64_t)a6, a7, a8);
      v10 = v196;
      a4 = v195;
      a2 = v194;
    }
    if (*(_QWORD *)(v11 + 16))
      return *(_QWORD *)(v11 + 16);
  }
  v12 = *(_QWORD *)(a2 + 16);
  v13 = (JSC::Symbol *)*((_QWORD *)v10 + 7);
  v14 = (unint64_t *)(v12 + 16);
  v15 = ((*(_DWORD *)(v12 + 32) - 1) & a4) + 4;
  *(double *)a9.i64 = (double)(int)v9;
  if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = v9 - 0x2000000000000;
  v16 = v14[v15];
  if (!v16)
  {
    v17 = -1;
    goto LABEL_7;
  }
  v33 = (unint64_t *)((char *)v13 + 41840);
  if (!(v9 >> 49))
  {
    while (1)
    {
      v34 = v14[v16];
      if ((v34 & 0xFFFE000000000002) != 0)
        goto LABEL_27;
      v35 = *v33;
      if (!*v33)
      {
        v103 = a2;
        v104 = a4;
        v105 = v10;
        v216 = v13;
        v106 = v15;
        v107 = v14;
        v247 = (JSC *)v12;
        v108 = v11;
        v109 = v33;
        v35 = JSC::Symbol::create(v13, (JSC::VM *)a2, this, a4, a5, (uint64_t)a6, a7, a8);
        v33 = v109;
        v11 = v108;
        v12 = (unint64_t)v247;
        v14 = v107;
        v15 = v106;
        v13 = v216;
        v10 = v105;
        a4 = v104;
        a2 = v103;
        *v33 = v35;
      }
      if (v35 != v34)
      {
LABEL_27:
        if (v34 == v9)
          goto LABEL_38;
        if (((v34 | v9) & 0xFFFE000000000002) == 0)
        {
          v36 = *(unsigned __int8 *)(v9 + 5);
          if (v36 == 2)
          {
            if (*(_BYTE *)(v34 + 5) != 2)
              goto LABEL_30;
            v245 = (JSC *)v12;
            v37 = v11;
            v38 = v33;
            v39 = v15;
            v40 = v14;
            v41 = v13;
            v42 = a4;
            v43 = a2;
            v44 = *(WTF **)(v9 + 8);
            if ((v44 & 1) != 0
              || (v45 = *(const WTF::StringImpl **)(v34 + 8), (v45 & 1) != 0))
            {
              v243 = v10;
              v47 = JSC::JSString::equalSlowCase((JSC::JSString *)v9, v10, (JSC::JSString *)v34, a4, a5, (uint64_t)a6, a7, a8, a9);
              v10 = v243;
            }
            else
            {
              v46 = v10;
              v47 = WTF::equal(v44, v45, (const WTF::StringImpl *)this);
              v10 = v46;
            }
            a2 = v43;
            a4 = v42;
            v13 = v41;
            v14 = v40;
            v15 = v39;
            v33 = v38;
            v11 = v37;
            v12 = (unint64_t)v245;
            if (v47)
              goto LABEL_38;
          }
          else
          {
            if (v36 != 3 || *(_BYTE *)(v34 + 5) != 3)
            {
LABEL_30:
              if (v9 == v34)
                goto LABEL_38;
              goto LABEL_31;
            }
            v176 = a2;
            v177 = (JSC::JSBigInt *)v34;
            v178 = a4;
            v179 = v10;
            v180 = v13;
            v181 = v15;
            v182 = v14;
            v249 = (JSC *)v12;
            v183 = v11;
            v184 = v33;
            v185 = JSC::JSBigInt::equals((JSC::JSBigInt *)v9, v177, (JSC::JSBigInt *)this);
            v33 = v184;
            v11 = v183;
            v12 = (unint64_t)v249;
            v14 = v182;
            v15 = v181;
            v13 = v180;
            v10 = v179;
            a4 = v178;
            a2 = v176;
            if (v185)
              goto LABEL_38;
          }
        }
      }
LABEL_31:
      v16 = v14[(v16 + 1)];
      v17 = -1;
      if (!v16)
        goto LABEL_7;
    }
  }
  v94 = a9.i64[0];
  while (1)
  {
    v95 = v14[v16];
    if ((v95 & 0xFFFE000000000002) != 0)
      goto LABEL_104;
    v96 = *v33;
    if (!*v33)
    {
      v232 = (JSC::VM *)a2;
      v229 = a4;
      v244 = v10;
      v248 = (JSC *)v12;
      v219 = v13;
      v156 = v15;
      v157 = v14;
      v158 = v11;
      v159 = v33;
      v96 = JSC::Symbol::create(v13, (JSC::VM *)a2, this, a4, a5, (uint64_t)a6, a7, a8);
      v33 = v159;
      v11 = v158;
      v10 = v244;
      v12 = (unint64_t)v248;
      v14 = v157;
      v15 = v156;
      v13 = v219;
      a4 = v229;
      a2 = (unint64_t)v232;
      *v33 = v96;
    }
    if (v96 != v95)
    {
LABEL_104:
      if (v95 == v9)
        break;
      if (v95 >> 49)
      {
        *(double *)a9.i64 = (double)(int)v95;
        if (v95 <= 0xFFFDFFFFFFFFFFFFLL)
          a9.i64[0] = v95 - 0x2000000000000;
        if (v94 == a9.i64[0])
          break;
      }
    }
    v16 = v14[(v16 + 1)];
    v17 = -1;
    if (!v16)
      goto LABEL_7;
  }
LABEL_38:
  v17 = v16;
LABEL_7:
  if (*((_DWORD *)v13 + 20))
  {
    v98 = *((_DWORD *)v13 + 20);
    if ((v98 & 0x27) != 0 && (v98 & 0x20) == 0)
    {
      v197 = a2;
      v198 = a4;
      v199 = v10;
      v200 = v13;
      v201 = v15;
      v202 = v14;
      JSC::VMTraps::handleTraps((JSC::Symbol *)((char *)v13 + 64), 7u, this, a4, a5, (uint64_t)a6, a7, a8);
      v14 = v202;
      v15 = v201;
      v13 = v200;
      v10 = v199;
      a4 = v198;
      a2 = v197;
    }
    if (v17 != -1 || *((_QWORD *)v13 + 2))
      return *(_QWORD *)(v11 + 16);
  }
  else if (v17 != -1)
  {
    return *(_QWORD *)(v11 + 16);
  }
  v18 = *(_DWORD *)(v12 + 32);
  v19 = *(_DWORD *)(v12 + 24);
  v20 = *(_QWORD *)(v12 + 16);
  v21 = v20 + v19;
  v22 = 0.75;
  if (v18 < 0x10000)
    v22 = 0.5;
  *(float *)a9.i32 = v22 * (float)v18;
  if (*(float *)a9.i32 > (float)v21)
  {
    v23 = v12;
    goto LABEL_13;
  }
  v221 = v9;
  if (v18 >= 0x10000)
    v56 = 1;
  else
    v56 = 2;
  if (v19 >= v18 >> 1)
    v57 = 0;
  else
    v57 = v56;
  v58 = v18 << v57;
  v59 = (JSC *)*((_QWORD *)v10 + 7);
  v60 = (JSC::JSBigInt **)((char *)v59 + 41656);
  var58[0] = v59;
  v61 = 3 * v58 + 4;
  v242 = v10;
  v246 = v59;
  v240 = v15;
  v241 = (JSC::JSBigInt **)((char *)v59 + 41656);
  v231 = (JSC::VM *)a2;
  if (v61 >= 0x10000001)
    goto LABEL_146;
  v62 = *v60;
  v63 = 8 * (3 * v58 + 4);
  this = (v63 + 31) & 0xFFFFFFFF0;
  if ((unint64_t)this > 0x1F60
    || (v64 = *(_QWORD *)((char *)v59 + (((v63 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) == 0)
  {
    v227 = a4;
    v116 = v10;
    v117 = v13;
    v118 = v14;
    v224 = *v60;
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v59 + 10792, v59, this, 0, a5, (uint64_t)a6, a7, a8);
    v62 = v224;
    v60 = v241;
    v59 = v246;
    v14 = v118;
    v63 = 8 * (3 * v58 + 4);
    v15 = v240;
    v13 = v117;
    v10 = v116;
    a4 = v227;
    a2 = (unint64_t)v231;
    v23 = Slow;
    goto LABEL_63;
  }
  v23 = *(_QWORD *)(v64 + 24);
  if (v23 < *(_QWORD *)(v64 + 32))
  {
    *(_QWORD *)(v64 + 24) = v23 + *(unsigned int *)(v64 + 60);
    goto LABEL_63;
  }
  v213 = *(unsigned int *)(v64 + 60);
  v218 = v13;
  v222 = v14;
  v225 = *v60;
  v228 = a4;
  v23 = *(_QWORD *)(v64 + 40);
  if ((v23 & 1) != 0)
  {
    JSC::sanitizeStackForVM(v59, (JSC::VM *)a2, this, a4, a5, (uint64_t)a6, a7, a8);
    v189 = JSC::LocalAllocator::allocateSlowCase(v64, (uint64_t)v246 + 192, v213, 0, 1, v186, v187, v188);
    v59 = v246;
    v23 = v189;
    a2 = (unint64_t)v231;
    v63 = 8 * (3 * v58 + 4);
    a4 = v228;
    v60 = v241;
    v10 = v242;
    v13 = v218;
    v14 = v222;
    v62 = v225;
LABEL_63:
    if (v23)
      goto LABEL_64;
LABEL_146:
    v134 = a4;
    v135 = v10;
    v136 = v13;
    v137 = v15;
    v138 = v14;
    JSC::throwOutOfMemoryError(v10, (JSC::JSGlobalObject *)var58);
    v60 = v241;
    v59 = v246;
    v14 = v138;
    v15 = v137;
    v13 = v136;
    v10 = v135;
    a4 = v134;
    a2 = (unint64_t)v231;
    v23 = 0;
    goto LABEL_70;
  }
  v151 = *(_QWORD *)(v23 + 8) ^ *(_QWORD *)(v64 + 48);
  *(_QWORD *)(v64 + 32) = v23 + HIDWORD(v151);
  *(_QWORD *)(v64 + 40) = v23 + (int)v151;
  *(_QWORD *)(v64 + 24) = v23 + v213;
  v63 = 8 * (3 * v58 + 4);
  a4 = a4;
  v60 = (JSC::JSBigInt **)((char *)v59 + 41656);
LABEL_64:
  *(_DWORD *)v23 = 0;
  v65 = *((_DWORD *)v62 + 2);
  *(_DWORD *)v23 = (unint64_t)v62 >> 4;
  *(_DWORD *)(v23 + 4) = v65;
  v250[1] = v62;
  *(_DWORD *)(v23 + 8) = v61;
  *(_DWORD *)(v23 + 12) = v61;
  if (3 * (_DWORD)v58 != -4 && (*(_BYTE *)(v23 + 4) & 0xE) == 8)
  {
    v66 = a4;
    v67 = v13;
    v68 = v14;
    bzero((void *)(v23 + 16), v63);
    v10 = v242;
    v59 = v246;
    v14 = v68;
    v15 = v240;
    v60 = v241;
    v13 = v67;
    a4 = v66;
    a2 = (unint64_t)v231;
  }
  if (*((_BYTE *)v59 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v23 + 16) = v20 | 0xFFFE000000000000;
  *(_QWORD *)(v23 + 24) = 0xFFFE000000000000;
  *(_QWORD *)(v23 + 32) = v58 | 0xFFFE000000000000;
LABEL_70:
  if (!*((_DWORD *)v59 + 20))
    goto LABEL_71;
  v139 = a2;
  v140 = a4;
  v141 = v10;
  v217 = v13;
  v142 = v14;
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v59, a2, this, a4, a5, (uint64_t)a6, a7, a8);
  v59 = v246;
  v14 = v142;
  v15 = v240;
  v60 = v241;
  v13 = v217;
  v10 = v141;
  a4 = v140;
  a2 = v139;
  if (!hasExceptionsAfterHandlingTraps)
  {
LABEL_71:
    if (!(_DWORD)v21)
      goto LABEL_149;
    v69 = 0;
    v70 = (v58 + 2);
    v71 = v58;
    v72 = v23 + 16;
    this = (v71 - 1);
    v73 = v18 + 4;
    a5 = 2;
    a6 = v250;
    v223 = v71 - 1;
    v226 = a4;
    v215 = v13;
    while (1)
    {
      v74 = v14[v73];
      if ((v74 & 0xFFFE000000000002) != 0)
      {
        v70 = (v70 + 2);
        *(_QWORD *)(v72 + 8 * v70) = v74;
      }
      else
      {
        v75 = (unint64_t)v60[23];
        if (!v75)
        {
          v114 = a2;
          v115 = v14;
          v210 = v70;
          v235 = a5;
          v75 = JSC::Symbol::create(v59, (JSC::VM *)a2, this, a4, a5, (uint64_t)v250, a7, a8);
          a6 = v250;
          a5 = v235;
          this = v223;
          v70 = v210;
          v13 = v215;
          v10 = v242;
          v59 = v246;
          v14 = v115;
          v15 = v240;
          v60 = v241;
          a4 = v226;
          a2 = v114;
          v241[23] = (JSC::JSBigInt *)v75;
        }
        if (v75 == v74)
        {
          v14[a5] = v69 | 0xFFFE000000000000;
          a5 = (a5 + 1);
          goto LABEL_88;
        }
        v70 = (v70 + 2);
        *(_QWORD *)(v72 + 8 * v70) = v74;
        if (v23 && v74 && *((_DWORD *)v59 + 190) >= *(unsigned __int8 *)(v23 + 7))
        {
          v124 = v13;
          v125 = v14;
          v211 = v70;
          v237 = a5;
          JSC::Heap::writeBarrierSlowPath((uint64_t)v59 + 192, v23);
          a6 = v250;
          a5 = v237;
          this = v223;
          v70 = v211;
          v10 = v242;
          v59 = v246;
          v14 = v125;
          v15 = v240;
          v60 = v241;
          v13 = v124;
          a4 = v226;
          a2 = (unint64_t)v231;
        }
        v76 = *(unsigned __int8 *)(v74 + 5);
        if (v76 == 2)
        {
          v77 = (int **)(v74 + 8);
          if ((*(_BYTE *)(v74 + 8) & 1) != 0)
          {
            v87 = v13;
            v88 = v14;
            v89 = v70;
            v234 = a5;
            v90 = JSC::JSRopeString::resolveRope(v74, v10, this, a4, a9, a5, (uint64_t)v250, a7, a8);
            a6 = v250;
            a5 = v234;
            this = v223;
            v70 = v89;
            v72 = v23 + 16;
            v10 = v242;
            v59 = v246;
            v14 = v88;
            v15 = v240;
            v60 = v241;
            v13 = v87;
            a4 = v226;
            a2 = (unint64_t)v231;
            v77 = v90;
          }
          if (!*((_DWORD *)v59 + 20))
            goto LABEL_83;
          v126 = v14;
          v212 = v70;
          v238 = a5;
          v127 = JSC::VM::hasExceptionsAfterHandlingTraps(v59, a2, this, a4, a5, (uint64_t)v250, a7, a8);
          a6 = v250;
          a5 = v238;
          this = v223;
          v70 = v212;
          v13 = v215;
          v10 = v242;
          v59 = v246;
          v14 = v126;
          v15 = v240;
          v60 = v241;
          a4 = v226;
          a2 = (unint64_t)v231;
          if (v127)
          {
            v80 = -1;
          }
          else
          {
LABEL_83:
            v78 = (WTF::StringImpl *)*v77;
            v79 = (*v77)[4];
            if (v79 < 0x100)
            {
              v83 = a2;
              v84 = v14;
              v85 = v70;
              v233 = a5;
              v86 = WTF::StringImpl::hashSlowCase(v78);
              a6 = v250;
              a5 = v233;
              this = v223;
              v70 = v85;
              v72 = v23 + 16;
              v10 = v242;
              v59 = v246;
              v14 = v84;
              v15 = v240;
              v60 = v241;
              v13 = v215;
              a4 = v226;
              a2 = v83;
              v80 = v86;
            }
            else
            {
              v80 = v79 >> 8;
            }
          }
          v250[0] = v74;
          goto LABEL_86;
        }
        if (v76 == 3)
        {
          v239 = a5;
          v214 = v70;
          v175 = v14;
          v80 = *(_DWORD *)(v74 + 12);
          if (!v80)
            v80 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v74);
          a2 = (unint64_t)v231;
          a4 = v226;
          v10 = v242;
          v59 = v246;
          v70 = v214;
          v13 = v215;
          v14 = v175;
          v15 = v240;
          v60 = v241;
          v72 = v23 + 16;
          this = v223;
          a5 = v239;
          a6 = v250;
          goto LABEL_86;
        }
      }
      v91 = (v74 + ~(v74 << 32)) ^ ((v74 + ~(v74 << 32)) >> 22);
      v92 = 9 * ((v91 + ~(v91 << 13)) ^ ((v91 + ~(v91 << 13)) >> 8));
      v93 = (v92 ^ (v92 >> 15)) + ~((v92 ^ (v92 >> 15)) << 27);
      v80 = (v93 >> 31) ^ v93;
LABEL_86:
      if (*((_DWORD *)v59 + 20))
      {
        v120 = a2;
        v121 = v14;
        v122 = v70;
        v236 = a5;
        v123 = JSC::VM::hasExceptionsAfterHandlingTraps(v59, a2, this, a4, a5, (uint64_t)v250, a7, a8);
        a6 = v250;
        a5 = v236;
        this = v223;
        v70 = v122;
        v72 = v23 + 16;
        v10 = v242;
        v59 = v246;
        v14 = v121;
        v15 = v240;
        v60 = v241;
        v13 = v215;
        a4 = v226;
        a2 = v120;
        if (v123)
          break;
      }
      v81 = (v80 & this) + 4;
      v82 = *(_QWORD *)(v72 + 8 * v81);
      *(_QWORD *)(v72 + 8 * v81) = v70 | 0xFFFE000000000000;
      *(_QWORD *)(v72 + 8 * (v70 + 1)) = v82;
LABEL_88:
      ++v69;
      v73 += 2;
      if (v21 == v69)
        goto LABEL_149;
    }
  }
  v23 = 0;
  if (!*((_DWORD *)v59 + 20))
    goto LABEL_150;
LABEL_149:
  v144 = a2;
  v145 = a4;
  v146 = v10;
  v147 = v13;
  v148 = v15;
  v149 = v14;
  v150 = JSC::VM::hasExceptionsAfterHandlingTraps(v59, a2, this, a4, a5, (uint64_t)a6, a7, a8);
  v59 = v246;
  v14 = v149;
  v15 = v148;
  v13 = v147;
  v10 = v146;
  a4 = v145;
  a2 = v144;
  if (v150)
  {
    v23 = 0;
  }
  else
  {
LABEL_150:
    *v14 = v23;
    if (v23)
    {
      if ((v23 & 0xFFFE000000000002) == 0)
      {
        v152 = v13;
        v153 = v10;
        v154 = a4;
        v155 = a2;
        if (*((_DWORD *)v59 + 190) >= *(unsigned __int8 *)(v12 + 7))
        {
          JSC::Heap::writeBarrierSlowPath((uint64_t)v246 + 192, v12);
          a2 = v155;
          a4 = v154;
          v10 = v153;
          v13 = v152;
        }
      }
    }
  }
  v9 = v221;
LABEL_13:
  if (!*((_DWORD *)v13 + 20))
    goto LABEL_14;
  v99 = *((_DWORD *)v13 + 20);
  if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
  {
    v203 = a2;
    v204 = a4;
    v205 = v10;
    v206 = v13;
    JSC::VMTraps::handleTraps((JSC::Symbol *)((char *)v13 + 64), 7u, this, a4, a5, (uint64_t)a6, a7, a8);
    v13 = v206;
    v10 = v205;
    a4 = v204;
    a2 = v203;
  }
  if (!*((_QWORD *)v13 + 2))
  {
LABEL_14:
    v24 = v23 + 16;
    v25 = *(_QWORD *)(v23 + 16);
    v26 = *(_DWORD *)(v23 + 32);
    v27 = *(_DWORD *)(v23 + 24);
    *(_QWORD *)(v23 + 16) = v25 + 1;
    if (v9)
    {
      if (v23 == v12)
      {
        v28 = 0;
        goto LABEL_17;
      }
      v28 = 1;
LABEL_126:
      v15 = (a4 & (v26 - 1)) + 4;
LABEL_17:
      v29 = (v26 + 2 * (v27 + v25) + 4);
      v30 = *(_QWORD *)(v24 + 8 * v15);
      *(_QWORD *)(v24 + 8 * v15) = v29 | 0xFFFE000000000000;
      *(_QWORD *)(v24 + 8 * (v26 + 2 * (v27 + v25) + 5)) = v30;
      *(_QWORD *)(v24 + 8 * v29) = v9;
      v31 = (uint64_t)v13 + 192;
      if (v9
        && (v9 & 0xFFFE000000000002) == 0
        && *((_DWORD *)v13 + 190) >= *(unsigned __int8 *)(v23 + 7))
      {
        v110 = a2;
        v111 = v13;
        JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, v23);
        v13 = v111;
        a2 = v110;
      }
      if (v28)
      {
        *(_QWORD *)(a2 + 16) = v23;
        if (*((_DWORD *)v13 + 190) >= *(unsigned __int8 *)(a2 + 7))
          JSC::Heap::writeBarrierSlowPath(v31, a2);
      }
      return *(_QWORD *)(v11 + 16);
    }
    if (MEMORY[5] == 2)
    {
      v100 = 8;
      if ((MEMORY[8] & 1) != 0)
      {
        v131 = a2;
        v132 = v13;
        v133 = JSC::JSRopeString::resolveRope(0, v10, this, a4, a9, a5, (uint64_t)a6, a7, a8);
        v13 = v132;
        a2 = v131;
        v100 = (uint64_t)v133;
      }
      if (*((_DWORD *)v13 + 20)
        && (v163 = a2,
            v220 = v13,
            v164 = JSC::VM::hasExceptionsAfterHandlingTraps(v13, a2, this, a4, a5, (uint64_t)a6, a7, a8),
            v13 = v220,
            a2 = v163,
            v164))
      {
        a4 = 0xFFFFFFFFLL;
      }
      else
      {
        v101 = *(WTF::StringImpl **)v100;
        v102 = *(_DWORD *)(*(_QWORD *)v100 + 16);
        if (v102 < 0x100)
        {
          v128 = a2;
          v129 = v13;
          v130 = WTF::StringImpl::hashSlowCase(v101);
          v13 = v129;
          a2 = v128;
          a4 = v130;
        }
        else
        {
          a4 = v102 >> 8;
        }
      }
    }
    else if (MEMORY[5] == 3)
    {
      a4 = MEMORY[0xC];
      if (!MEMORY[0xC])
      {
        v191 = a2;
        v192 = v13;
        v193 = JSC::JSBigInt::hashSlow(0);
        v13 = v192;
        a2 = v191;
        a4 = v193;
      }
    }
    else
    {
      a4 = 2620728921;
    }
    if (!*((_DWORD *)v13 + 20)
      || (v160 = a2,
          v230 = a4,
          v161 = v13,
          v162 = JSC::VM::hasExceptionsAfterHandlingTraps(v13, a2, this, a4, a5, (uint64_t)a6, a7, a8),
          v13 = v161,
          LODWORD(a4) = v230,
          a2 = v160,
          !v162))
    {
      v28 = v23 != v12;
      goto LABEL_126;
    }
  }
  return *(_QWORD *)(v11 + 16);
}

uint64_t operationMapSet(uint64_t a1, unint64_t a2, uint64_t this, uint64_t a4, uint64_t a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  int8x16_t *v29;
  unsigned int v30;
  int8x16_t *v31;
  __int32 v32;
  __int32 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::JSGlobalObject *v43;
  uint8x8_t *v44;
  unsigned int v45;
  int16x8_t *v46;
  unsigned int v47;
  int16x8_t *v48;
  unsigned int v49;
  uint8x8_t *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  JSC::JSString *v55;
  uint64_t v56;
  uint64_t v57;
  JSC::JSGlobalObject *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  float v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  JSC *v95;
  unint64_t *v96;
  unsigned int v97;
  unint64_t v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  JSC::JSGlobalObject *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  int v112;
  unsigned int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  BOOL v118;
  int v119;
  int **v120;
  WTF::StringImpl *v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  uint64_t v132;
  JSC::JSGlobalObject *v133;
  int **v134;
  int v135;
  __int32 v136;
  uint64_t v137;
  int v138;
  int v139;
  int v141;
  __int32 v142;
  uint64_t v143;
  int v144;
  int v145;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  int v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  JSC::JSGlobalObject *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  JSC::JSGlobalObject *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t Slow;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int **v197;
  uint64_t v198;
  uint64_t v199;
  JSC::JSGlobalObject *v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  JSC::JSGlobalObject *v207;
  uint64_t v208;
  uint64_t v209;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  JSC::JSGlobalObject *v215;
  uint64_t v216;
  uint64_t v217;
  BOOL v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  BOOL v226;
  uint64_t v227;
  unint64_t v228;
  BOOL v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  JSC::JSGlobalObject *v234;
  JSC::JSBigInt *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t SlowCase;
  unint64_t v250;
  JSC::JSBigInt *v251;
  uint64_t v252;
  uint64_t v253;
  JSC::JSGlobalObject *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  JSC::JSGlobalObject *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  JSC::JSGlobalObject *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  JSC::JSGlobalObject *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  JSC::JSGlobalObject *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  JSC::JSGlobalObject *v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  JSC::JSGlobalObject *v298;
  JSC::JSGlobalObject *v299;
  JSC::VM *v300;
  JSC::VM *v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t *v314;
  JSC *v315;
  uint64_t v316;
  JSC::Symbol *v317;
  JSC::Symbol *v318;
  JSC::Symbol *v319;
  JSC::Symbol *v320;
  JSC::Symbol *v321;
  JSC::Symbol *v322;
  JSC::Symbol *v323;
  _QWORD var58[12];

  v9 = this;
  v10 = (JSC::JSGlobalObject *)a1;
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v11 + 40) = var58[11];
  if (!*(_QWORD *)(a2 + 16))
  {
    var58[0] = v11;
    v34 = *(_QWORD *)(v11 + 41656);
    v35 = *(_QWORD *)(v11 + 11032);
    if (v35)
    {
      v36 = *(unsigned int *)(v35 + 60);
      v37 = *(_QWORD *)(v35 + 24);
      if (v37 < *(_QWORD *)(v35 + 32))
      {
        *(_QWORD *)(v35 + 24) = v37 + v36;
        goto LABEL_38;
      }
      v37 = *(_QWORD *)(v35 + 40);
      if ((v37 & 1) == 0)
      {
        v185 = *(_QWORD *)(v37 + 8) ^ *(_QWORD *)(v35 + 48);
        *(_QWORD *)(v35 + 32) = v37 + HIDWORD(v185);
        *(_QWORD *)(v35 + 40) = v37 + (int)v185;
        *(_QWORD *)(v35 + 24) = v37 + v36;
        goto LABEL_39;
      }
      v240 = v11 + 192;
      v241 = v11;
      v242 = a2;
      v243 = a4;
      v244 = a5;
      JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)a2, this, a4, a5, a1, a8, a9);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v35, v240, v36, 0, 1, v246, v247, v248);
      v10 = (JSC::JSGlobalObject *)a1;
      a5 = v244;
      a4 = v243;
    }
    else
    {
      v241 = v11;
      v242 = a2;
      v261 = a4;
      v262 = a5;
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v11 + 10792, (JSC *)v11, 0x130uLL, 0, a5, a1, a8, a9);
      v10 = (JSC::JSGlobalObject *)a1;
      a5 = v262;
      a4 = v261;
    }
    a2 = v242;
    v11 = v241;
    v37 = SlowCase;
LABEL_38:
    if (!v37)
    {
      v230 = v11;
      v231 = a2;
      v232 = a4;
      v233 = a5;
      v234 = v10;
      JSC::throwOutOfMemoryError(v10, (JSC::JSGlobalObject *)var58);
      v10 = v234;
      a5 = v233;
      a4 = v232;
      a2 = v231;
      v11 = v230;
      v37 = 0;
LABEL_44:
      if (!*(_DWORD *)(v11 + 80))
        goto LABEL_45;
      v184 = *(_DWORD *)(v11 + 80);
      if ((v184 & 0x27) != 0 && (v184 & 0x20) == 0)
      {
        v289 = v11;
        v290 = a2;
        v291 = a4;
        v292 = a5;
        v293 = v10;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, this, a4, a5, (uint64_t)v10, a8, a9);
        v10 = v293;
        a5 = v292;
        a4 = v291;
        a2 = v290;
        v11 = v289;
      }
      if (!*(_QWORD *)(v11 + 16))
      {
LABEL_45:
        *(_QWORD *)(a2 + 16) = v37;
        if (v37 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(a2 + 7))
        {
          v39 = v11;
          v40 = a2;
          v41 = a4;
          v42 = a5;
          v43 = v10;
          JSC::Heap::writeBarrierSlowPath(v11 + 192, a2);
          v10 = v43;
          a5 = v42;
          a4 = v41;
          a2 = v40;
          v11 = v39;
        }
      }
      goto LABEL_2;
    }
LABEL_39:
    *(_DWORD *)v37 = 0;
    v38 = *(_DWORD *)(v34 + 8);
    *(_DWORD *)v37 = v34 >> 4;
    *(_DWORD *)(v37 + 4) = v38;
    *(_QWORD *)(v37 + 8) = 0x2400000024;
    if ((*(_BYTE *)(v37 + 4) & 0xE) == 8)
    {
      *(_OWORD *)(v37 + 272) = 0u;
      *(_OWORD *)(v37 + 288) = 0u;
      *(_OWORD *)(v37 + 240) = 0u;
      *(_OWORD *)(v37 + 256) = 0u;
      *(_OWORD *)(v37 + 208) = 0u;
      *(_OWORD *)(v37 + 224) = 0u;
      *(_OWORD *)(v37 + 176) = 0u;
      *(_OWORD *)(v37 + 192) = 0u;
      *(_OWORD *)(v37 + 144) = 0u;
      *(_OWORD *)(v37 + 160) = 0u;
      *(_OWORD *)(v37 + 112) = 0u;
      *(_OWORD *)(v37 + 128) = 0u;
      *(_OWORD *)(v37 + 80) = 0u;
      *(_OWORD *)(v37 + 96) = 0u;
      *(_OWORD *)(v37 + 48) = 0u;
      *(_OWORD *)(v37 + 64) = 0u;
      *(_OWORD *)(v37 + 16) = 0u;
      *(_OWORD *)(v37 + 32) = 0u;
    }
    if (*(_BYTE *)(v11 + 755))
      __dmb(0xAu);
    a6 = (__n128)vdupq_n_s64(0xFFFE000000000000);
    *(__n128 *)(v37 + 16) = a6;
    *(_QWORD *)(v37 + 32) = 0xFFFE000000000008;
    goto LABEL_44;
  }
LABEL_2:
  if (*(_DWORD *)(v11 + 80))
  {
    v155 = *(_DWORD *)(v11 + 80);
    if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
    {
      v268 = v11;
      v269 = a2;
      v270 = a4;
      v271 = a5;
      v272 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, this, a4, a5, (uint64_t)v10, a8, a9);
      v10 = v272;
      a5 = v271;
      a4 = v270;
      a2 = v269;
      v11 = v268;
    }
    if (*(_QWORD *)(v11 + 16))
      return *(_QWORD *)(v11 + 16);
  }
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *((_QWORD *)v10 + 7);
  v14 = (unint64_t *)(v12 + 16);
  v15 = ((*(_DWORD *)(v12 + 32) - 1) & a5) + 4;
  a6.n128_f64[0] = (double)(int)v9;
  if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
    a6.n128_u64[0] = v9 - 0x2000000000000;
  v16 = v14[v15];
  if (v16)
  {
    v17 = (unint64_t *)(v13 + 41840);
    if (!(v9 >> 49))
    {
      this = 31;
      while (1)
      {
        v18 = v14[v16];
        if ((v18 & 0xFFFE000000000002) == 0)
        {
          v19 = *v17;
          if (!*v17)
          {
            v157 = v11;
            v158 = a2;
            v159 = a4;
            v307 = a5;
            v160 = v10;
            v318 = (JSC::Symbol *)v13;
            v161 = v15;
            v19 = JSC::Symbol::create((JSC::Symbol *)v13, (JSC::VM *)a2, 31, a4, a5, (uint64_t)v10, v13, v15);
            this = 31;
            v13 = (uint64_t)v318;
            v15 = v161;
            v10 = v160;
            a5 = v307;
            a4 = v159;
            a2 = v158;
            v11 = v157;
            *v17 = v19;
          }
          if (v19 == v18)
            goto LABEL_17;
        }
        if (v18 == v9)
          goto LABEL_86;
        if (((v18 | v9) & 0xFFFE000000000002) != 0)
          goto LABEL_17;
        v20 = *(unsigned __int8 *)(v9 + 5);
        if (v20 != 2)
        {
          if (v20 != 3 || *(_BYTE *)(v18 + 5) != 3)
          {
LABEL_16:
            if (v9 == v18)
              goto LABEL_86;
            goto LABEL_17;
          }
          v310 = v11;
          v250 = a2;
          v251 = (JSC::JSBigInt *)v18;
          v252 = a4;
          v253 = a5;
          v254 = v10;
          v255 = v13;
          v256 = v15;
          v61 = JSC::JSBigInt::equals((JSC::JSBigInt *)v9, v251, (JSC::JSBigInt *)0x1F);
          this = 31;
          v15 = v256;
          v13 = v255;
          v10 = v254;
          a5 = v253;
          a4 = v252;
          a2 = v250;
          goto LABEL_70;
        }
        if (*(_BYTE *)(v18 + 5) != 2)
          goto LABEL_16;
        v22 = *(_QWORD *)(v9 + 8);
        if ((v22 & 1) != 0 || (v23 = *(_QWORD *)(v18 + 8), (v23 & 1) != 0))
        {
          v310 = v11;
          v300 = (JSC::VM *)a2;
          v55 = (JSC::JSString *)v18;
          v56 = a4;
          v57 = a5;
          v58 = v10;
          v59 = v13;
          v60 = v15;
          v61 = JSC::JSString::equalSlowCase((JSC::JSString *)v9, v10, v55, a4, a5, (uint64_t)v10, v13, v15, (int8x16_t)a6);
          this = 31;
          v15 = v60;
          v13 = v59;
          v10 = v58;
          a5 = v57;
          a4 = v56;
          a2 = (unint64_t)v300;
LABEL_70:
          v11 = v310;
          if (v61)
            goto LABEL_86;
          goto LABEL_17;
        }
        v24 = *(_DWORD *)(v22 + 16);
        v25 = *(_DWORD *)(v23 + 16);
        if (v25 >= 0x100 && v24 >= 0x100 && (v25 ^ v24) > 0xFF)
          goto LABEL_17;
        v26 = *(unsigned int *)(v22 + 4);
        if ((_DWORD)v26 != *(_DWORD *)(v23 + 4))
          goto LABEL_17;
        if (!(_DWORD)v26)
          goto LABEL_86;
        v27 = *(unsigned __int8 **)(v22 + 8);
        v28 = *(unsigned __int8 **)(v23 + 8);
        if ((v24 & 4) != 0)
        {
          if ((v25 & 4) != 0)
          {
            if (*v27 != *v28)
              goto LABEL_17;
            v29 = (int8x16_t *)(v27 + 1);
            v52 = v26 - 1;
            v31 = (int8x16_t *)(v28 + 1);
            if ((_DWORD)v26 != 2)
            {
              if ((_DWORD)v26 == 1)
                goto LABEL_86;
              switch(31 - __clz(v26 - 2))
              {
                case 0u:
                  goto LABEL_84;
                case 1u:
                  if (v29->u16[0] != v31->u16[0])
                    goto LABEL_17;
                  v53 = *(unsigned __int16 *)&v27[v26 - 2];
                  v54 = *(unsigned __int16 *)&v28[v26 - 2];
                  goto LABEL_194;
                case 2u:
                  if (v29->i32[0] != v31->i32[0])
                    goto LABEL_17;
                  v53 = *(_DWORD *)&v27[v26 - 4];
                  v152 = &v28[v26];
LABEL_193:
                  v54 = *((_DWORD *)v152 - 1);
LABEL_194:
                  if (v53 != v54)
                    goto LABEL_17;
                  goto LABEL_86;
                case 3u:
                  if (v29->i64[0] != v31->i64[0])
                    goto LABEL_17;
                  v150 = *(_QWORD *)&v27[v26 - 8];
                  v151 = &v28[v26];
LABEL_186:
                  if (v150 != *((_QWORD *)v151 - 1))
                    goto LABEL_17;
                  goto LABEL_86;
                case 4u:
                  a6 = (__n128)vandq_s8(vceqq_s8(*(int8x16_t *)&v27[v26 - 16], *(int8x16_t *)&v28[v26 - 16]), vceqq_s8(*(int8x16_t *)(v27 + 1), *(int8x16_t *)(v28 + 1)));
                  a6.n128_u8[0] = vminvq_u8((uint8x16_t)a6);
LABEL_189:
                  if (!a6.n128_u32[0])
                    goto LABEL_17;
                  goto LABEL_86;
                default:
                  a6 = (__n128)vceqq_s8(*v29, *v31);
                  a6.n128_u8[0] = vminvq_u8((uint8x16_t)a6);
                  if (!a6.n128_u32[0])
                    goto LABEL_17;
                  if (v52 < 0x10)
                    goto LABEL_86;
                  v154 = v52 & 0xF;
                  break;
              }
              while (1)
              {
                a6 = (__n128)vceqq_s8(*(int8x16_t *)((char *)v29 + v154), *(int8x16_t *)((char *)v31 + v154));
                a6.n128_u8[0] = vminvq_u8((uint8x16_t)a6);
                if (!a6.n128_u32[0])
                  goto LABEL_17;
                v154 += 16;
                if (v154 >= v52)
                  goto LABEL_86;
              }
            }
            v32 = v29->u8[0];
            v33 = v31->u8[0];
            goto LABEL_85;
          }
          if (*(_WORD *)v28 != *v27)
            goto LABEL_17;
          v44 = (uint8x8_t *)(v27 + 1);
          v45 = v26 - 1;
          v46 = (int16x8_t *)(v28 + 2);
          if (v45 >= 8)
          {
            a6 = (__n128)vceqq_s16(*v46, (int16x8_t)vmovl_u8(*v44));
            a6.n128_u16[0] = vminvq_u16((uint16x8_t)a6);
            if (a6.n128_u32[0])
            {
              v47 = v45 & 7;
              while (1)
              {
                a6 = (__n128)vceqq_s16(*(int16x8_t *)((char *)v46 + 2 * v47), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v44 + v47)));
                a6.n128_u16[0] = vminvq_u16((uint16x8_t)a6);
                if (!a6.n128_u32[0])
                  break;
                v47 += 8;
                if (v47 >= v45)
                  goto LABEL_86;
              }
            }
            goto LABEL_17;
          }
          if (v45 < 4)
          {
            if (v45 < 2)
            {
              if (v45 != 1)
                goto LABEL_86;
              v33 = v44->u8[0];
              v32 = v46->u16[0];
LABEL_85:
              if (v32 == v33)
                goto LABEL_86;
              goto LABEL_17;
            }
            v135 = (v44->u16[0] | (v44->u16[0] << 8)) & 0xFF00FF;
            v136 = v46->i32[0];
            v137 = v45 & 1;
            v138 = (*(unsigned __int16 *)((char *)v44->u16 + v137) | (*(unsigned __int16 *)((char *)v44->u16 + v137) << 8)) & 0xFF00FF;
            v139 = *(__int32 *)((char *)v46->i32 + 2 * v137);
            if (v135 == v136 && v138 == v139)
              goto LABEL_86;
          }
          else
          {
            v62 = (v44->u32[0] | ((unint64_t)v44->u32[0] << 16)) & 0xFFFF0000FFFFLL;
            v63 = v46->i64[0];
            v64 = v45 & 3;
            v65 = (*(unsigned int *)((char *)v44->u32 + v64) | ((unint64_t)*(unsigned int *)((char *)v44->u32
                                                                                                  + v64) << 16)) & 0xFFFF0000FFFFLL;
            v66 = (v65 | (v65 << 8)) & 0xFF00FF00FF00FFLL;
            v67 = *(uint64_t *)((char *)v46->i64 + 2 * v64);
            if (((v62 | (v62 << 8)) & 0xFF00FF00FF00FFLL) == v63 && v66 == v67)
              goto LABEL_86;
          }
        }
        else
        {
          if ((v25 & 4) == 0)
          {
            if (*(unsigned __int16 *)v27 != *(unsigned __int16 *)v28)
              goto LABEL_17;
            v29 = (int8x16_t *)(v27 + 2);
            v30 = v26 - 1;
            v31 = (int8x16_t *)(v28 + 2);
            if ((_DWORD)v26 != 2)
            {
              if ((_DWORD)v26 == 1)
                goto LABEL_86;
              switch(31 - __clz(v26 - 2))
              {
                case 0u:
                  v32 = v29->i32[0];
                  v33 = v31->i32[0];
                  goto LABEL_85;
                case 1u:
                  if (v29->i32[0] != v31->i32[0])
                    goto LABEL_17;
                  v53 = *(_DWORD *)&v27[2 * v26 - 4];
                  v152 = &v28[2 * v26];
                  goto LABEL_193;
                case 2u:
                  if (v29->i64[0] != v31->i64[0])
                    goto LABEL_17;
                  v150 = *(_QWORD *)&v27[2 * v26 - 8];
                  v151 = &v28[2 * v26];
                  goto LABEL_186;
                case 3u:
                  a6 = (__n128)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v27[2 * v26 - 16], *(int16x8_t *)&v28[2 * v26 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v27 + 2), *(int16x8_t *)(v28 + 2)));
                  a6.n128_u16[0] = vminvq_u16((uint16x8_t)a6);
                  goto LABEL_189;
                default:
                  a6 = (__n128)vceqq_s16(*(int16x8_t *)v29, *(int16x8_t *)v31);
                  a6.n128_u16[0] = vminvq_u16((uint16x8_t)a6);
                  if (!a6.n128_u32[0])
                    goto LABEL_17;
                  if (v30 < 8)
                    goto LABEL_86;
                  v153 = v30 & 7;
                  break;
              }
              while (1)
              {
                a6 = (__n128)vceqq_s16(*(int16x8_t *)((char *)v29 + 2 * v153), *(int16x8_t *)((char *)v31 + 2 * v153));
                a6.n128_u16[0] = vminvq_u16((uint16x8_t)a6);
                if (!a6.n128_u32[0])
                  goto LABEL_17;
                v153 += 8;
                if (v153 >= v30)
                  goto LABEL_86;
              }
            }
LABEL_84:
            v32 = v29->u16[0];
            v33 = v31->u16[0];
            goto LABEL_85;
          }
          if (*(_WORD *)v27 == *v28)
          {
            v48 = (int16x8_t *)(v27 + 2);
            v49 = v26 - 1;
            v50 = (uint8x8_t *)(v28 + 1);
            if (v49 < 8)
            {
              if (v49 < 4)
              {
                if (v49 < 2)
                {
                  if (v49 != 1 || v48->i16[0] == v50->u8[0])
                    goto LABEL_86;
                }
                else
                {
                  v141 = (v50->u16[0] | (v50->u16[0] << 8)) & 0xFF00FF;
                  v142 = v48->i32[0];
                  v143 = v49 & 1;
                  v144 = (*(unsigned __int16 *)((char *)v50->u16 + v143) | (*(unsigned __int16 *)((char *)v50->u16 + v143) << 8)) & 0xFF00FF;
                  v145 = *(__int32 *)((char *)v48->i32 + 2 * v143);
                  if (v141 == v142 && v144 == v145)
                    goto LABEL_86;
                }
              }
              else
              {
                v69 = (v50->u32[0] | ((unint64_t)v50->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                v70 = v48->i64[0];
                v71 = v49 & 3;
                v72 = (*(unsigned int *)((char *)v50->u32 + v71) | ((unint64_t)*(unsigned int *)((char *)v50->u32 + v71) << 16)) & 0xFFFF0000FFFFLL;
                v73 = (v72 | (v72 << 8)) & 0xFF00FF00FF00FFLL;
                v74 = *(uint64_t *)((char *)v48->i64 + 2 * v71);
                if (((v69 | (v69 << 8)) & 0xFF00FF00FF00FFLL) == v70 && v73 == v74)
                  goto LABEL_86;
              }
            }
            else
            {
              a6 = (__n128)vceqq_s16(*v48, (int16x8_t)vmovl_u8(*v50));
              a6.n128_u16[0] = vminvq_u16((uint16x8_t)a6);
              if (a6.n128_u32[0])
              {
                v51 = v49 & 7;
                while (1)
                {
                  a6 = (__n128)vceqq_s16(*(int16x8_t *)((char *)v48 + 2 * v51), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v50 + v51)));
                  a6.n128_u16[0] = vminvq_u16((uint16x8_t)a6);
                  if (!a6.n128_u32[0])
                    break;
                  v51 += 8;
                  if (v51 >= v49)
                    goto LABEL_86;
                }
              }
            }
          }
        }
LABEL_17:
        v16 = v14[(v16 + 2)];
        v21 = -1;
        if (!v16)
          goto LABEL_87;
      }
    }
    v147 = a6.n128_u64[0];
    while (1)
    {
      v148 = v14[v16];
      if ((v148 & 0xFFFE000000000002) != 0)
        goto LABEL_176;
      v149 = *v17;
      if (!*v17)
      {
        v221 = v11;
        v222 = a2;
        v296 = a4;
        v299 = v10;
        v308 = a5;
        v320 = (JSC::Symbol *)v13;
        v305 = v15;
        v149 = JSC::Symbol::create((JSC::Symbol *)v13, (JSC::VM *)a2, this, a4, a5, (uint64_t)v10, v13, v15);
        v13 = (uint64_t)v320;
        v15 = v305;
        a4 = v296;
        v10 = v299;
        a5 = v308;
        a2 = v222;
        v11 = v221;
        *v17 = v149;
      }
      if (v149 != v148)
      {
LABEL_176:
        if (v148 == v9)
          break;
        if (v148 >> 49)
        {
          a6.n128_f64[0] = (double)(int)v148;
          if (v148 <= 0xFFFDFFFFFFFFFFFFLL)
            a6.n128_u64[0] = v148 - 0x2000000000000;
          if (v147 == a6.n128_u64[0])
            break;
        }
      }
      v16 = v14[(v16 + 2)];
      v21 = -1;
      if (!v16)
        goto LABEL_87;
    }
LABEL_86:
    v21 = v16;
  }
  else
  {
    v21 = -1;
  }
LABEL_87:
  if (*(_DWORD *)(v13 + 80))
  {
    v156 = *(_DWORD *)(v13 + 80);
    if ((v156 & 0x27) != 0 && (v156 & 0x20) == 0)
    {
      v313 = v11;
      v273 = a2;
      v274 = a4;
      v275 = a5;
      v276 = v10;
      v277 = v13;
      v278 = v15;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, this, a4, a5, (uint64_t)v10, v13, v15);
      v15 = v278;
      v13 = v277;
      v10 = v276;
      a5 = v275;
      a4 = v274;
      a2 = v273;
      v11 = v313;
    }
    if (*(_QWORD *)(v13 + 16))
      return *(_QWORD *)(v11 + 16);
  }
  if (v21 == -1)
  {
    v76 = *(_DWORD *)(v12 + 32);
    v77 = *(_DWORD *)(v12 + 24);
    v78 = *(_QWORD *)(v12 + 16);
    v79 = 0.75;
    if (v76 < 0x10000)
      v79 = 0.5;
    a6.n128_f32[0] = v79 * (float)v76;
    if (a6.n128_f32[0] > (float)(v78 + v77))
    {
      v80 = v12;
      goto LABEL_93;
    }
    v316 = v78 + v77;
    if (v76 >= 0x10000)
      v92 = 1;
    else
      v92 = 2;
    if (v77 >= v76 >> 1)
      v93 = 0;
    else
      v93 = v92;
    v94 = v76 << v93;
    v95 = (JSC *)*((_QWORD *)v10 + 7);
    v96 = (unint64_t *)((char *)v95 + 41656);
    var58[0] = v95;
    v97 = 4 * v94 + 4;
    v314 = (unint64_t *)((char *)v95 + 41656);
    v315 = v95;
    v311 = v11;
    v298 = v10;
    v301 = (JSC::VM *)a2;
    v295 = a4;
    v306 = a5;
    v317 = (JSC::Symbol *)v13;
    v302 = v94;
    v304 = v15;
    if (v97 < 0x10000001)
    {
      v98 = *v96;
      v99 = 8 * (4 * v94 + 4);
      this = (v99 + 31) & 0xFFFFFFFF0;
      if ((unint64_t)this <= 0x1F60
        && (v100 = *(_QWORD *)((char *)v95 + (((v99 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) != 0)
      {
        v101 = *(unsigned int *)(v100 + 60);
        v80 = *(_QWORD *)(v100 + 24);
        if (v80 >= *(_QWORD *)(v100 + 32))
        {
          v219 = v11;
          v80 = *(_QWORD *)(v100 + 40);
          if ((v80 & 1) == 0)
          {
            v220 = *(_QWORD *)(v80 + 8) ^ *(_QWORD *)(v100 + 48);
            *(_QWORD *)(v100 + 32) = v80 + HIDWORD(v220);
            *(_QWORD *)(v100 + 40) = v80 + (int)v220;
            *(_QWORD *)(v100 + 24) = v80 + v101;
            v99 = 8 * (4 * v94 + 4);
            a5 = a5;
            v96 = (unint64_t *)((char *)v95 + 41656);
LABEL_120:
            *(_DWORD *)v80 = 0;
            v102 = *(_DWORD *)(v98 + 8);
            *(_DWORD *)v80 = v98 >> 4;
            *(_DWORD *)(v80 + 4) = v102;
            *(_DWORD *)(v80 + 8) = v97;
            *(_DWORD *)(v80 + 12) = v97;
            if (v97 && (*(_BYTE *)(v80 + 4) & 0xE) == 8)
            {
              v103 = a2;
              v104 = a4;
              v105 = a5;
              v106 = v10;
              v107 = v15;
              bzero((void *)(v80 + 16), v99);
              v94 = v302;
              v96 = v314;
              v95 = v315;
              v13 = (uint64_t)v317;
              v15 = v107;
              v10 = v106;
              a5 = v105;
              a4 = v104;
              a2 = v103;
              v11 = v311;
            }
            if (*((_BYTE *)v95 + 755))
              __dmb(0xAu);
            *(_QWORD *)(v80 + 16) = v78 | 0xFFFE000000000000;
            *(_QWORD *)(v80 + 24) = 0xFFFE000000000000;
            *(_QWORD *)(v80 + 32) = v94 | 0xFFFE000000000000;
            goto LABEL_126;
          }
          JSC::sanitizeStackForVM(v95, (JSC::VM *)a2, this, a4, a5, (uint64_t)v10, v13, v15);
          v260 = JSC::LocalAllocator::allocateSlowCase(v100, (uint64_t)v315 + 192, v101, 0, 1, v257, v258, v259);
          v95 = v315;
          v80 = v260;
          v11 = v219;
          v10 = v298;
          a2 = (unint64_t)v301;
          v99 = 8 * v97;
          a4 = v295;
          a5 = v306;
          v13 = (uint64_t)v317;
          v94 = v302;
          v15 = v304;
          v96 = v314;
        }
        else
        {
          *(_QWORD *)(v100 + 24) = v80 + v101;
        }
      }
      else
      {
        v190 = a5;
        v191 = v13;
        v192 = v15;
        Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v95 + 10792, v95, this, 0, a5, (uint64_t)v10, v13, v15);
        v99 = 8 * v97;
        a4 = v295;
        a2 = (unint64_t)v301;
        v94 = v302;
        v96 = v314;
        v95 = v315;
        v15 = v192;
        v13 = v191;
        v10 = v298;
        a5 = v190;
        v11 = v311;
        v80 = Slow;
      }
      if (v80)
        goto LABEL_120;
    }
    v198 = a4;
    v199 = a5;
    v200 = v10;
    v201 = v13;
    v202 = v15;
    v203 = v94;
    JSC::throwOutOfMemoryError(v10, (JSC::JSGlobalObject *)var58);
    LODWORD(v94) = v203;
    v96 = v314;
    v95 = v315;
    v15 = v202;
    v13 = v201;
    v10 = v200;
    a5 = v199;
    a4 = v198;
    a2 = (unint64_t)v301;
    v11 = v311;
    v80 = 0;
LABEL_126:
    v108 = v316;
    if (*((_DWORD *)v95 + 20))
    {
      v204 = v11;
      v205 = a2;
      v206 = a4;
      v207 = v10;
      v208 = v13;
      v209 = v15;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v95, a2, this, a4, a5, (uint64_t)v10, v13, v15);
      LODWORD(v94) = v302;
      v96 = v314;
      v95 = v315;
      v108 = v316;
      v14 = (unint64_t *)(v12 + 16);
      v15 = v209;
      v13 = v208;
      v10 = v207;
      a5 = v306;
      a4 = v206;
      a2 = v205;
      v11 = v204;
      if (hasExceptionsAfterHandlingTraps)
      {
LABEL_240:
        v80 = 0;
        goto LABEL_241;
      }
    }
    if (!(_DWORD)v108)
    {
      if (!*((_DWORD *)v95 + 20))
        goto LABEL_242;
LABEL_241:
      v211 = v11;
      v212 = a2;
      v213 = a4;
      v214 = a5;
      v215 = v10;
      v216 = v13;
      v217 = v15;
      v218 = JSC::VM::hasExceptionsAfterHandlingTraps(v95, a2, this, a4, a5, (uint64_t)v10, v13, v15);
      v95 = v315;
      v14 = (unint64_t *)(v12 + 16);
      v15 = v217;
      v13 = v216;
      v10 = v215;
      a5 = v214;
      a4 = v213;
      a2 = v212;
      v11 = v211;
      if (v218)
      {
        v80 = 0;
      }
      else
      {
LABEL_242:
        *v14 = v80;
        if (v80 && (v80 & 0xFFFE000000000002) == 0)
        {
          v174 = v15;
          v175 = v13;
          v176 = v10;
          v177 = a5;
          v178 = a4;
          v179 = a2;
          v180 = v11;
          if (*((_DWORD *)v95 + 190) >= *(unsigned __int8 *)(v12 + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)v315 + 192, v12);
          v11 = v180;
          a2 = v179;
          a4 = v178;
          a5 = v177;
          v10 = v176;
          v13 = v175;
          v15 = v174;
        }
      }
LABEL_93:
      if (*(_DWORD *)(v13 + 80))
      {
        v162 = *(_DWORD *)(v13 + 80);
        if ((v162 & 0x27) != 0 && (v162 & 0x20) == 0)
        {
          v279 = v11;
          v280 = a2;
          v281 = a4;
          v282 = a5;
          v283 = v10;
          v284 = v13;
          v285 = v15;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, this, a4, a5, (uint64_t)v10, v13, v15);
          v15 = v285;
          v13 = v284;
          v10 = v283;
          a5 = v282;
          a4 = v281;
          a2 = v280;
          v11 = v279;
        }
        if (*(_QWORD *)(v13 + 16))
          return *(_QWORD *)(v11 + 16);
      }
      v81 = v80 + 16;
      v82 = *(_QWORD *)(v80 + 16);
      v83 = *(_DWORD *)(v80 + 32);
      v84 = *(_DWORD *)(v80 + 24);
      *(_QWORD *)(v80 + 16) = v82 + 1;
      if (v9)
      {
        if (v80 == v12)
        {
          v85 = 0;
LABEL_97:
          v86 = (v83 + 3 * (v84 + v82) + 4);
          v87 = *(_QWORD *)(v81 + 8 * v15);
          *(_QWORD *)(v81 + 8 * v15) = v86 | 0xFFFE000000000000;
          *(_QWORD *)(v81 + 8 * (v86 + 2)) = v87;
          *(_QWORD *)(v81 + 8 * v86) = v9;
          v88 = v13 + 192;
          if (v9
            && (v9 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v80 + 7))
          {
            v166 = v11;
            v167 = a2;
            v168 = a4;
            v169 = v13;
            JSC::Heap::writeBarrierSlowPath(v13 + 192, v80);
            v13 = v169;
            a4 = v168;
            a2 = v167;
            v11 = v166;
          }
          *(_QWORD *)(v81 + 8 * (v86 + 1)) = a4;
          if (a4
            && (a4 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v80 + 7))
          {
            v170 = v11;
            v171 = a2;
            v172 = v13;
            JSC::Heap::writeBarrierSlowPath(v88, v80);
            v13 = v172;
            a2 = v171;
            v11 = v170;
          }
          if (v85)
          {
            *(_QWORD *)(a2 + 16) = v80;
            if (*(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(a2 + 7))
            {
              v90 = v88;
              v91 = v11;
              goto LABEL_233;
            }
          }
          return *(_QWORD *)(v11 + 16);
        }
        v85 = 1;
      }
      else
      {
        if (MEMORY[5] == 2)
        {
          v163 = 8;
          if ((MEMORY[8] & 1) != 0)
          {
            v312 = v11;
            v194 = a2;
            v195 = a4;
            v196 = v13;
            v197 = JSC::JSRopeString::resolveRope(0, v10, this, a4, (int8x16_t)a6, a5, (uint64_t)v10, v13, v15);
            v13 = v196;
            a4 = v195;
            a2 = v194;
            v11 = v312;
            v163 = (uint64_t)v197;
          }
          if (!*(_DWORD *)(v13 + 80))
            goto LABEL_226;
          v227 = v11;
          v228 = a2;
          v297 = a4;
          v322 = (JSC::Symbol *)v13;
          v229 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, this, a4, a5, (uint64_t)v10, v13, v15);
          v13 = (uint64_t)v322;
          a4 = v297;
          a2 = v228;
          v11 = v227;
          if (v229)
          {
            a5 = 0xFFFFFFFFLL;
          }
          else
          {
LABEL_226:
            v164 = *(WTF::StringImpl **)v163;
            v165 = *(_DWORD *)(*(_QWORD *)v163 + 16);
            if (v165 < 0x100)
            {
              v186 = v11;
              v187 = a2;
              v188 = a4;
              v319 = (JSC::Symbol *)v13;
              v189 = WTF::StringImpl::hashSlowCase(v164);
              v13 = (uint64_t)v319;
              a4 = v188;
              a2 = v187;
              v11 = v186;
              a5 = v189;
            }
            else
            {
              a5 = v165 >> 8;
            }
          }
        }
        else if (MEMORY[5] == 3)
        {
          a5 = MEMORY[0xC];
          if (!MEMORY[0xC])
          {
            v264 = v11;
            v265 = a2;
            v266 = a4;
            v323 = (JSC::Symbol *)v13;
            v267 = JSC::JSBigInt::hashSlow(0);
            v13 = (uint64_t)v323;
            a4 = v266;
            a2 = v265;
            v11 = v264;
            a5 = v267;
          }
        }
        else
        {
          a5 = 2620728921;
        }
        if (*(_DWORD *)(v13 + 80))
        {
          v223 = v11;
          v224 = a2;
          v225 = a4;
          v309 = a5;
          v321 = (JSC::Symbol *)v13;
          v226 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, a2, this, a4, a5, (uint64_t)v10, v13, v15);
          v13 = (uint64_t)v321;
          LODWORD(a5) = v309;
          a4 = v225;
          a2 = v224;
          v11 = v223;
          if (v226)
            return *(_QWORD *)(v11 + 16);
        }
        v85 = v80 != v12;
      }
      v15 = (a5 & (v83 - 1)) + 4;
      goto LABEL_97;
    }
    v109 = 0;
    v110 = v94 + 1;
    v111 = v80 + 16;
    v112 = v94 - 1;
    v113 = v76 + 5;
    v294 = 2;
    this = -1;
    v303 = v94 - 1;
    while (1)
    {
      v114 = v14[v113 - 1];
      if ((v114 & 0xFFFE000000000002) != 0)
      {
        v116 = (v110 + 3);
        *(_QWORD *)(v111 + 8 * v116) = v114;
      }
      else
      {
        v115 = v96[23];
        if (!v115)
        {
          v181 = a2;
          v115 = JSC::Symbol::create(v95, (JSC::VM *)a2, -1, a4, a5, (uint64_t)v10, v13, v15);
          this = -1;
          v112 = v303;
          v96 = v314;
          v95 = v315;
          v108 = v316;
          v14 = (unint64_t *)(v12 + 16);
          v15 = v304;
          v13 = (uint64_t)v317;
          a4 = v295;
          v10 = v298;
          a5 = v306;
          a2 = v181;
          v11 = v311;
          v314[23] = v115;
        }
        if (v115 == v114)
        {
          v14[v294++] = v109 | 0xFFFE000000000000;
          goto LABEL_148;
        }
        v116 = (v110 + 3);
        *(_QWORD *)(v111 + 8 * v116) = v114;
        if (v80 && v114 && *((_DWORD *)v95 + 190) >= *(unsigned __int8 *)(v80 + 7))
        {
          JSC::Heap::writeBarrierSlowPath((uint64_t)v95 + 192, v80);
          this = -1;
          v112 = v303;
          v96 = v314;
          v95 = v315;
          v108 = v316;
          v14 = (unint64_t *)(v12 + 16);
          v15 = v304;
          v13 = (uint64_t)v317;
          a4 = v295;
          v10 = v298;
          a5 = v306;
          a2 = (unint64_t)v301;
          v11 = v311;
        }
      }
      v117 = v14[v113];
      *(_QWORD *)(v111 + 8 * (v110 + 4)) = v117;
      if (v117)
        v118 = (v117 & 0xFFFE000000000002) == 0;
      else
        v118 = 0;
      if (v118 && *((_DWORD *)v95 + 190) >= *(unsigned __int8 *)(v80 + 7))
      {
        v182 = a4;
        JSC::Heap::writeBarrierSlowPath((uint64_t)v95 + 192, v80);
        this = -1;
        v112 = v303;
        v96 = v314;
        v95 = v315;
        v108 = v316;
        v14 = (unint64_t *)(v12 + 16);
        v15 = v304;
        v13 = (uint64_t)v317;
        v10 = v298;
        a2 = (unint64_t)v301;
        a5 = v306;
        a4 = v182;
        v11 = v311;
      }
      if ((v114 & 0xFFFE000000000002) == 0)
      {
        v119 = *(unsigned __int8 *)(v114 + 5);
        if (v119 == 2)
        {
          v120 = (int **)(v114 + 8);
          if ((*(_BYTE *)(v114 + 8) & 1) != 0)
          {
            v132 = a4;
            v133 = v10;
            v134 = JSC::JSRopeString::resolveRope(v114, v10, -1, a4, (int8x16_t)a6, a5, (uint64_t)v10, v13, v15);
            this = -1;
            v112 = v303;
            v96 = v314;
            v95 = v315;
            v108 = v316;
            v14 = (unint64_t *)(v12 + 16);
            v15 = v304;
            v13 = (uint64_t)v317;
            v10 = v133;
            a5 = v306;
            a4 = v132;
            a2 = (unint64_t)v301;
            v11 = v311;
            v120 = v134;
          }
          if (!*((_DWORD *)v95 + 20))
            goto LABEL_144;
          v183 = *((_DWORD *)v95 + 20);
          if ((v183 & 0x27) != 0 && (v183 & 0x20) == 0)
          {
            v288 = a4;
            JSC::VMTraps::handleTraps((JSC *)((char *)v95 + 64), 7u, -1, a4, a5, (uint64_t)v10, v13, v15);
            this = -1;
            v112 = v303;
            v96 = v314;
            v95 = v315;
            v108 = v316;
            v14 = (unint64_t *)(v12 + 16);
            v15 = v304;
            v13 = (uint64_t)v317;
            v10 = v298;
            a2 = (unint64_t)v301;
            a5 = v306;
            a4 = v288;
            v11 = v311;
          }
          if (*((_QWORD *)v95 + 2))
          {
            v123 = -1;
          }
          else
          {
LABEL_144:
            v121 = (WTF::StringImpl *)*v120;
            v122 = (*v120)[4];
            if (v122 < 0x100)
            {
              v129 = v11;
              v130 = a2;
              v131 = WTF::StringImpl::hashSlowCase(v121);
              this = -1;
              v112 = v303;
              v96 = v314;
              v95 = v315;
              v108 = v316;
              v14 = (unint64_t *)(v12 + 16);
              v15 = v304;
              v13 = (uint64_t)v317;
              a4 = v295;
              v10 = v298;
              a5 = v306;
              a2 = v130;
              v11 = v129;
              v123 = v131;
            }
            else
            {
              v123 = v122 >> 8;
            }
          }
          goto LABEL_146;
        }
        if (v119 == 3)
        {
          v123 = *(_DWORD *)(v114 + 12);
          if (!v123)
          {
            v235 = (JSC::JSBigInt *)v114;
            v236 = v11;
            v237 = a2;
            v238 = a4;
            v239 = JSC::JSBigInt::hashSlow(v235);
            this = -1;
            v112 = v303;
            v96 = v314;
            v95 = v315;
            v108 = v316;
            v14 = (unint64_t *)(v12 + 16);
            v15 = v304;
            v13 = (uint64_t)v317;
            v10 = v298;
            a5 = v306;
            a4 = v238;
            a2 = v237;
            v11 = v236;
            v123 = v239;
          }
          goto LABEL_146;
        }
      }
      v126 = (v114 + ~(v114 << 32)) ^ ((v114 + ~(v114 << 32)) >> 22);
      v127 = 9 * ((v126 + ~(v126 << 13)) ^ ((v126 + ~(v126 << 13)) >> 8));
      v128 = (v127 ^ (v127 >> 15)) + ~((v127 ^ (v127 >> 15)) << 27);
      v123 = (v128 >> 31) ^ v128;
LABEL_146:
      if (*((_DWORD *)v95 + 20))
      {
        v173 = *((_DWORD *)v95 + 20);
        if ((v173 & 0x27) != 0 && (v173 & 0x20) == 0)
        {
          v286 = a4;
          v287 = v10;
          JSC::VMTraps::handleTraps((JSC *)((char *)v95 + 64), 7u, -1, a4, a5, (uint64_t)v10, v13, v15);
          this = -1;
          v112 = v303;
          v96 = v314;
          v95 = v315;
          v108 = v316;
          v14 = (unint64_t *)(v12 + 16);
          v15 = v304;
          v13 = (uint64_t)v317;
          v10 = v287;
          a5 = v306;
          a4 = v286;
          a2 = (unint64_t)v301;
          v11 = v311;
        }
        if (*((_QWORD *)v95 + 2))
          goto LABEL_240;
      }
      v124 = (v123 & v112) + 4;
      v125 = *(_QWORD *)(v111 + 8 * v124);
      *(_QWORD *)(v111 + 8 * v124) = v116 | 0xFFFE000000000000;
      *(_QWORD *)(v111 + 8 * (v116 + 2)) = v125;
      v110 = v116;
LABEL_148:
      ++v109;
      v113 += 3;
      if (v108 == v109)
        goto LABEL_241;
    }
  }
  v14[v21 + 1] = a4;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v12 + 7))
  {
    v90 = v13 + 192;
    v91 = v11;
    a2 = v12;
LABEL_233:
    JSC::Heap::writeBarrierSlowPath(v90, a2);
    v11 = v91;
  }
  return *(_QWORD *)(v11 + 16);
}

uint64_t operationSetDelete(JSC::JSGlobalObject *a1, unint64_t a2, JSC::JSBigInt *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  JSC::JSGlobalObject *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t result;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  WTF *v27;
  const WTF::StringImpl *v28;
  JSC::JSGlobalObject *v29;
  BOOL v30;
  uint64_t v31;
  unint64_t *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t SlowCase;
  int v40;
  unint64_t v41;
  JSC::JSGlobalObject *v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  int **v55;
  WTF::StringImpl *v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::JSGlobalObject *v64;
  JSC::JSGlobalObject *v65;
  int **v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  JSC::JSString *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  JSC::JSGlobalObject *v76;
  JSC::JSGlobalObject *v77;
  unint64_t v78;
  JSC::JSGlobalObject *v79;
  uint64_t v80;
  JSC *v81;
  uint64_t v82;
  JSC::JSGlobalObject *v83;
  uint64_t Slow;
  int v85;
  JSC::JSGlobalObject *v86;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v88;
  uint64_t v89;
  JSC::JSGlobalObject *v90;
  unint64_t v91;
  JSC::JSGlobalObject *v92;
  BOOL v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  JSC::JSGlobalObject *v103;
  unint64_t v104;
  JSC::JSGlobalObject *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  JSC::JSBigInt *v110;
  JSC::JSGlobalObject *v111;
  JSC::JSGlobalObject *v112;
  JSC::JSGlobalObject *v113;
  JSC::JSGlobalObject *v114;
  JSC::VM *v115;
  JSC::VM *v116;
  JSC::VM *v117;
  JSC::VM *v118;
  JSC::VM *v119;
  JSC::VM *v120;
  JSC::VM *v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t *v136;
  _QWORD v137[2];
  _QWORD var58[12];

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = var58[11];
  v10 = *(_QWORD *)(a2 + 16);
  if (!v10)
    return 0;
  v12 = a1;
  v13 = (unint64_t *)(v10 + 16);
  *(double *)a9.i64 = (double)(int)this;
  if ((unint64_t)this <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = (uint64_t)this - 0x2000000000000;
  v14 = v13[((*(_DWORD *)(v10 + 32) - 1) & a4) + 4];
  if (!v14)
  {
    v15 = -1;
    goto LABEL_6;
  }
  v22 = (unint64_t *)(v9 + 41840);
  if (!((unint64_t)this >> 49))
  {
    while (1)
    {
      v23 = v13[v14];
      if ((v23 & 0xFFFE000000000002) != 0)
        goto LABEL_22;
      v24 = *v22;
      if (!*v22)
      {
        v78 = a2;
        v79 = v12;
        v24 = JSC::Symbol::create((JSC::Symbol *)v9, (JSC::VM *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
        v12 = v79;
        a2 = v78;
        *v22 = v24;
      }
      if (v24 != v23)
      {
LABEL_22:
        if ((JSC::JSBigInt *)v23 == this)
          goto LABEL_33;
        if (((v23 | (unint64_t)this) & 0xFFFE000000000002) == 0)
        {
          v25 = *((unsigned __int8 *)this + 5);
          if (v25 == 2)
          {
            if (*(_BYTE *)(v23 + 5) != 2)
              goto LABEL_25;
            v26 = a2;
            v27 = (WTF *)*((_QWORD *)this + 1);
            if ((v27 & 1) != 0
              || (v28 = *(const WTF::StringImpl **)(v23 + 8), (v28 & 1) != 0))
            {
              v70 = (JSC::JSString *)v23;
              v29 = v12;
              v30 = JSC::JSString::equalSlowCase(this, v12, v70, a4, a5, a6, a7, a8, a9);
            }
            else
            {
              v29 = v12;
              v30 = WTF::equal(v27, v28, this);
            }
          }
          else
          {
            if (v25 != 3 || *(_BYTE *)(v23 + 5) != 3)
            {
LABEL_25:
              if (this == (JSC::JSBigInt *)v23)
                goto LABEL_33;
              goto LABEL_26;
            }
            v26 = a2;
            v110 = (JSC::JSBigInt *)v23;
            v29 = v12;
            v30 = JSC::JSBigInt::equals(this, v110, this);
          }
          v12 = v29;
          a2 = v26;
          if (v30)
            goto LABEL_33;
        }
      }
LABEL_26:
      v14 = v13[(v14 + 1)];
      v15 = -1;
      if (!v14)
        goto LABEL_6;
    }
  }
  v71 = a9.i64[0];
  while (1)
  {
    v72 = v13[v14];
    if ((v72 & 0xFFFE000000000002) != 0)
      goto LABEL_82;
    v73 = *v22;
    if (!*v22)
    {
      v113 = v12;
      v121 = (JSC::VM *)a2;
      v73 = JSC::Symbol::create((JSC::Symbol *)v9, (JSC::VM *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
      v12 = v113;
      a2 = (unint64_t)v121;
      *v22 = v73;
    }
    if (v73 != v72)
    {
LABEL_82:
      if ((JSC::JSBigInt *)v72 == this)
        break;
      if (v72 >> 49)
      {
        *(double *)a9.i64 = (double)(int)v72;
        if (v72 <= 0xFFFDFFFFFFFFFFFFLL)
          a9.i64[0] = v72 - 0x2000000000000;
        if (v71 == a9.i64[0])
          break;
      }
    }
    v14 = v13[(v14 + 1)];
    v15 = -1;
    if (!v14)
      goto LABEL_6;
  }
LABEL_33:
  v15 = v14;
LABEL_6:
  if (!*(_DWORD *)(v9 + 80))
  {
    if (v15 != -1)
      goto LABEL_8;
    return 0;
  }
  v74 = *(_DWORD *)(v9 + 80);
  if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
  {
    v102 = a2;
    v103 = v12;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)this, a4, a5, a6, a7, a8);
    v12 = v103;
    a2 = v102;
  }
  result = 0;
  if (v15 == -1 || *(_QWORD *)(v9 + 16))
    return result;
LABEL_8:
  v16 = *(_QWORD *)(v9 + 41840);
  if (!v16)
  {
    v75 = a2;
    v76 = v12;
    v16 = JSC::Symbol::create((JSC::Symbol *)v9, (JSC::VM *)a2, (uint64_t)this, a4, a5, a6, a7, a8);
    v12 = v76;
    a2 = v75;
    *(_QWORD *)(v9 + 41840) = v16;
  }
  v13[v15] = v16;
  v17 = *(_QWORD *)(v10 + 24) + 1;
  v18 = *(_QWORD *)(v10 + 16) - 1;
  *(_QWORD *)(v10 + 16) = v18;
  *(_QWORD *)(v10 + 24) = v17;
  v19 = *(_DWORD *)(v10 + 32);
  if (v19 == 8 || v19 >> 2 <= v18)
    return 1;
  v31 = *((_QWORD *)v12 + 7);
  v32 = (unint64_t *)(v31 + 41656);
  var58[0] = v31;
  v33 = (v19 & 0xFFFFFFFE) + (v19 >> 1) + 4;
  v136 = (unint64_t *)(v31 + 41656);
  if (v33 >= 0x10000001)
    goto LABEL_97;
  v34 = *v32;
  v35 = 8 * ((v19 & 0xFFFFFFFE) + (v19 >> 1) + 4);
  v36 = (_QWORD *)((v35 + 31) & 0xFFFFFFFF0);
  if ((unint64_t)v36 > 0x1F60
    || (v37 = *(_QWORD *)(v31 + (((unint64_t)(v35 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) == 0)
  {
    v80 = v31 + 10792;
    v117 = (JSC::VM *)a2;
    v81 = (JSC *)v31;
    v127 = v9;
    v82 = v31;
    v83 = v12;
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v80, v81, (unint64_t)v36, 0, a5, a6, a7, a8);
    v32 = v136;
    v12 = v83;
    v31 = v82;
    v9 = v127;
    a2 = (unint64_t)v117;
    SlowCase = Slow;
    goto LABEL_39;
  }
  v38 = *(unsigned int *)(v37 + 60);
  SlowCase = *(_QWORD *)(v37 + 24);
  if (SlowCase < *(_QWORD *)(v37 + 32))
  {
    *(_QWORD *)(v37 + 24) = SlowCase + v38;
    goto LABEL_39;
  }
  v112 = v12;
  v120 = (JSC::VM *)a2;
  v125 = *(_QWORD **)(v31 + (((unint64_t)(v35 + 31) >> 1) & 0x7FFFFFFF8) + 10880);
  v128 = *(unsigned int *)(v37 + 60);
  v97 = *(_QWORD *)(v37 + 40);
  if ((v97 & 1) != 0)
  {
    JSC::sanitizeStackForVM((JSC *)v31, (JSC::VM *)a2, (uint64_t)v36, a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v125, v31 + 192, v128, 0, 1, v107, v108, v109);
    v12 = v112;
    a2 = (unint64_t)v120;
    v32 = (unint64_t *)(v31 + 41656);
LABEL_39:
    if (SlowCase)
      goto LABEL_40;
LABEL_97:
    v88 = a2;
    v89 = v31;
    v90 = v12;
    JSC::throwOutOfMemoryError(v12, (JSC::JSGlobalObject *)var58);
    v44 = v19 >> 1;
    v32 = v136;
    v12 = v90;
    v31 = v89;
    a2 = v88;
    SlowCase = 0;
    goto LABEL_46;
  }
  SlowCase = v97;
  v98 = *(_QWORD *)(v97 + 8) ^ v125[6];
  v125[4] = SlowCase + HIDWORD(v98);
  v125[5] = SlowCase + (int)v98;
  v125[3] = SlowCase + v38;
  v32 = (unint64_t *)(v31 + 41656);
LABEL_40:
  *(_DWORD *)SlowCase = 0;
  v40 = *(_DWORD *)(v34 + 8);
  *(_DWORD *)SlowCase = v34 >> 4;
  *(_DWORD *)(SlowCase + 4) = v40;
  v137[1] = v34;
  *(_DWORD *)(SlowCase + 8) = v33;
  *(_DWORD *)(SlowCase + 12) = v33;
  if ((v19 & 0xFFFFFFFE) + (v19 >> 1) != -4 && (*(_BYTE *)(SlowCase + 4) & 0xE) == 8)
  {
    v41 = a2;
    v42 = v12;
    v43 = SlowCase;
    bzero((void *)(SlowCase + 16), 8 * ((v19 & 0xFFFFFFFE) + (v19 >> 1) + 4));
    SlowCase = v43;
    v32 = v136;
    v12 = v42;
    a2 = v41;
  }
  if (*(_BYTE *)(v31 + 755))
    __dmb(0xAu);
  *(_QWORD *)(SlowCase + 16) = v18 | 0xFFFE000000000000;
  *(_QWORD *)(SlowCase + 24) = 0xFFFE000000000000;
  v44 = v19 >> 1;
  *(_QWORD *)(SlowCase + 32) = (v19 >> 1) | 0xFFFE000000000000;
LABEL_46:
  v126 = SlowCase;
  if (!*(_DWORD *)(v31 + 80)
    || (v91 = a2,
        v92 = v12,
        v93 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31, a2, (uint64_t)v36, a4, a5, a6, a7, a8),
        SlowCase = v126,
        v32 = v136,
        v12 = v92,
        a2 = v91,
        !v93))
  {
    v45 = (v18 + v17);
    if (!(_DWORD)v45)
      goto LABEL_100;
    v46 = 0;
    LODWORD(v47) = v44 + 2;
    v48 = SlowCase + 16;
    v49 = v44 - 1;
    v50 = v19 + 4;
    v51 = 2;
    v36 = v137;
    v124 = v45;
    v123 = v44 - 1;
    while (1)
    {
      v52 = v13[v50];
      if ((v52 & 0xFFFE000000000002) != 0)
        break;
      v53 = v32[23];
      if (!v53)
      {
        v116 = (JSC::VM *)a2;
        v77 = v12;
        v131 = v51;
        v53 = JSC::Symbol::create((JSC::Symbol *)v31, (JSC::VM *)a2, (uint64_t)v137, a4, a5, a6, a7, a8);
        v36 = v137;
        v51 = v131;
        v49 = v123;
        v45 = v124;
        SlowCase = v126;
        v32 = v136;
        v12 = v77;
        a2 = (unint64_t)v116;
        v136[23] = v53;
      }
      if (v53 == v52)
      {
        v13[v51++] = v46 | 0xFFFE000000000000;
        goto LABEL_64;
      }
      v47 = (v47 + 2);
      *(_QWORD *)(v48 + 8 * v47) = v52;
      if (SlowCase && v52 && *(_DWORD *)(v31 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      {
        v118 = (JSC::VM *)a2;
        v86 = v12;
        v132 = v51;
        JSC::Heap::writeBarrierSlowPath(v31 + 192, SlowCase);
        v36 = v137;
        v51 = v132;
        v49 = v123;
        v45 = v124;
        SlowCase = v126;
        v32 = v136;
        v12 = v86;
        a2 = (unint64_t)v118;
      }
      v54 = *(unsigned __int8 *)(v52 + 5);
      if (v54 == 2)
      {
        v55 = (int **)(v52 + 8);
        if ((*(_BYTE *)(v52 + 8) & 1) != 0)
        {
          v115 = (JSC::VM *)a2;
          v65 = v12;
          v130 = v51;
          v66 = JSC::JSRopeString::resolveRope(v52, v12, (uint64_t)v137, a4, a9, a5, a6, a7, a8);
          v36 = v137;
          v51 = v130;
          v49 = v123;
          v45 = v124;
          SlowCase = v126;
          v32 = v136;
          v12 = v65;
          a2 = (unint64_t)v115;
          v55 = v66;
        }
        if (!*(_DWORD *)(v31 + 80))
          goto LABEL_59;
        v111 = v12;
        v119 = (JSC::VM *)a2;
        v133 = v51;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31, a2, (uint64_t)v137, a4, a5, a6, a7, a8);
        v36 = v137;
        v51 = v133;
        v49 = v123;
        v45 = v124;
        SlowCase = v126;
        v32 = v136;
        v12 = v111;
        a2 = (unint64_t)v119;
        if (hasExceptionsAfterHandlingTraps)
        {
          v58 = -1;
        }
        else
        {
LABEL_59:
          v56 = (WTF::StringImpl *)*v55;
          v57 = (*v55)[4];
          if (v57 < 0x100)
          {
            v61 = a2;
            v62 = v9;
            v63 = v31;
            v64 = v12;
            v129 = v51;
            v58 = WTF::StringImpl::hashSlowCase(v56);
            v36 = v137;
            v51 = v129;
            v49 = v123;
            v45 = v124;
            SlowCase = v126;
            v32 = v136;
            v12 = v64;
            v31 = v63;
            v9 = v62;
            v13 = (unint64_t *)(v10 + 16);
            a2 = v61;
          }
          else
          {
            v58 = v57 >> 8;
          }
        }
        v137[0] = v52;
        goto LABEL_62;
      }
      if (v54 != 3)
        goto LABEL_69;
      v135 = v51;
      v114 = v12;
      v106 = a2;
      if (*(_DWORD *)(v52 + 12))
        v58 = *(_DWORD *)(v52 + 12);
      else
        v58 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v52);
      a2 = v106;
      v12 = v114;
      v32 = v136;
      v45 = v124;
      SlowCase = v126;
      v49 = v123;
      v51 = v135;
      v36 = v137;
LABEL_62:
      if (*(_DWORD *)(v31 + 80))
      {
        v85 = *(_DWORD *)(v31 + 80);
        if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
        {
          v122 = v58;
          v104 = a2;
          v105 = v12;
          v134 = v51;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v31 + 64), 7u, (uint64_t)v137, a4, a5, a6, a7, a8);
          v36 = v137;
          v51 = v134;
          v49 = v123;
          v45 = v124;
          SlowCase = v126;
          v32 = v136;
          v12 = v105;
          a2 = v104;
          v58 = v122;
        }
        if (*(_QWORD *)(v31 + 16))
          goto LABEL_99;
      }
      v59 = (v58 & v49) + 4;
      v60 = *(_QWORD *)(v48 + 8 * v59);
      *(_QWORD *)(v48 + 8 * v59) = v47 | 0xFFFE000000000000;
      *(_QWORD *)(v48 + 8 * (v47 + 1)) = v60;
LABEL_64:
      ++v46;
      v50 += 2;
      if (v45 == v46)
        goto LABEL_100;
    }
    v47 = (v47 + 2);
    *(_QWORD *)(v48 + 8 * v47) = v52;
LABEL_69:
    v67 = (v52 + ~(v52 << 32)) ^ ((v52 + ~(v52 << 32)) >> 22);
    v68 = 9 * ((v67 + ~(v67 << 13)) ^ ((v67 + ~(v67 << 13)) >> 8));
    v69 = (v68 ^ (v68 >> 15)) + ~((v68 ^ (v68 >> 15)) << 27);
    v58 = (v69 >> 31) ^ v69;
    goto LABEL_62;
  }
LABEL_99:
  SlowCase = 0;
LABEL_100:
  if (*(_DWORD *)(v31 + 80))
  {
    v94 = a2;
    v95 = SlowCase;
    v96 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31, a2, (uint64_t)v36, a4, a5, a6, a7, a8);
    SlowCase = v95;
    a2 = v94;
    if (v96)
      return 1;
  }
  *v13 = SlowCase;
  if (SlowCase
    && (SlowCase & 0xFFFE000000000002) == 0
    && *(_DWORD *)(v31 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    v99 = a2;
    v100 = v10;
    v101 = SlowCase;
    JSC::Heap::writeBarrierSlowPath(v31 + 192, v100);
    SlowCase = v101;
    a2 = v99;
  }
  *(_QWORD *)(a2 + 16) = SlowCase;
  result = 1;
  if (a2 && SlowCase)
  {
    if (*(_DWORD *)(v31 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(v31 + 192, a2);
    return 1;
  }
  return result;
}

uint64_t operationMapDelete(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  JSC::JSGlobalObject *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  WTF *v20;
  const WTF::StringImpl *v21;
  JSC::JSGlobalObject *v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  uint64_t v30;
  JSC *v31;
  unint64_t *v32;
  unsigned int v33;
  unint64_t v34;
  JSC::VM *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  JSC::JSGlobalObject *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  int v54;
  WTF::StringImpl **v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  JSC::JSGlobalObject *v63;
  int v64;
  JSC::JSGlobalObject *v65;
  int **v66;
  JSC::JSString *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  double v71;
  JSC::JSGlobalObject *v72;
  BOOL v73;
  uint64_t v74;
  JSC::JSGlobalObject *v75;
  JSC::JSGlobalObject *v76;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::JSGlobalObject *v78;
  JSC::VM *v79;
  uint64_t v80;
  JSC::JSGlobalObject *v81;
  JSC::JSGlobalObject *v82;
  BOOL v83;
  JSC::JSGlobalObject *v84;
  JSC::JSGlobalObject *v85;
  uint64_t Slow;
  JSC::JSGlobalObject *v87;
  JSC::JSGlobalObject *v88;
  BOOL v89;
  unint64_t v90;
  BOOL v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  JSC::JSGlobalObject *v95;
  int v96;
  JSC::JSBigInt *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t SlowCase;
  JSC::JSGlobalObject *v102;
  JSC::JSGlobalObject *v103;
  JSC::JSGlobalObject *v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  _QWORD *v108;
  JSC::JSCell *v109;
  unint64_t *v110;
  JSC *v111;
  JSC *v112;
  _QWORD v114[2];
  _QWORD var58[12];

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = var58[11];
  v10 = *(_QWORD *)(a2 + 16);
  if (!v10)
    return 0;
  v12 = a1;
  v13 = (unint64_t *)(v10 + 16);
  *(double *)a9.i64 = (double)(int)this;
  if ((unint64_t)this <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = this - 0x2000000000000;
  v14 = v13[((*(_DWORD *)(v10 + 32) - 1) & a4) + 4];
  if (v14)
  {
    v15 = (unint64_t *)(v9 + 41840);
    if (!((unint64_t)this >> 49))
    {
      while (1)
      {
        v16 = v13[v14];
        if ((v16 & 0xFFFE000000000002) != 0)
          goto LABEL_11;
        v17 = *v15;
        if (!*v15)
        {
          v84 = v12;
          v17 = JSC::Symbol::create((JSC::Symbol *)v9, (JSC::VM *)a2, this, a4, a5, a6, a7, a8);
          v12 = v84;
          *v15 = v17;
        }
        if (v17 != v16)
        {
LABEL_11:
          if (v16 == this)
            goto LABEL_22;
          if (((v16 | this) & 0xFFFE000000000002) == 0)
          {
            v18 = *(unsigned __int8 *)(this + 5);
            if (v18 == 2)
            {
              if (*(_BYTE *)(v16 + 5) != 2)
                goto LABEL_14;
              v20 = *(WTF **)(this + 8);
              if ((v20 & 1) != 0
                || (v21 = *(const WTF::StringImpl **)(v16 + 8), (v21 & 1) != 0))
              {
                v67 = (JSC::JSString *)v16;
                v22 = v12;
                v23 = JSC::JSString::equalSlowCase((JSC::JSString *)this, v12, v67, a4, a5, a6, a7, a8, a9);
              }
              else
              {
                v22 = v12;
                v23 = WTF::equal(v20, v21, (const WTF::StringImpl *)this);
              }
            }
            else
            {
              if (v18 != 3 || *(_BYTE *)(v16 + 5) != 3)
              {
LABEL_14:
                if (this == v16)
                  goto LABEL_22;
                goto LABEL_15;
              }
              v97 = (JSC::JSBigInt *)v16;
              v22 = v12;
              v23 = JSC::JSBigInt::equals((JSC::JSBigInt *)this, v97, (JSC::JSBigInt *)this);
            }
            v12 = v22;
            if (v23)
              goto LABEL_22;
          }
        }
LABEL_15:
        v14 = v13[(v14 + 2)];
        v19 = -1;
        if (!v14)
          goto LABEL_23;
      }
    }
    v68 = a9.i64[0];
    while (1)
    {
      v69 = v13[v14];
      if ((v69 & 0xFFFE000000000002) != 0)
        goto LABEL_83;
      v70 = *v15;
      if (!*v15)
      {
        v112 = (JSC *)a9.i64[0];
        v104 = v12;
        v70 = JSC::Symbol::create((JSC::Symbol *)v9, (JSC::VM *)a2, this, a4, a5, a6, a7, a8);
        v12 = v104;
        a9.i64[0] = (uint64_t)v112;
        *v15 = v70;
      }
      if (v70 != v69)
      {
LABEL_83:
        if (v69 == this)
          break;
        if (v69 >> 49)
        {
          v71 = (double)(int)v69;
          if (v69 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v71 = v69 - 0x2000000000000;
          if (v68 == *(_QWORD *)&v71)
            break;
        }
      }
      v14 = v13[(v14 + 2)];
      v19 = -1;
      if (!v14)
        goto LABEL_23;
    }
LABEL_22:
    v19 = v14;
  }
  else
  {
    v19 = -1;
  }
LABEL_23:
  if (!*(_DWORD *)(v9 + 80))
  {
    if (v19 != -1)
      goto LABEL_25;
    return 0;
  }
  v76 = v12;
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, a2, this, a4, a5, a6, a7, a8);
  result = 0;
  if (v19 == -1)
    return result;
  v12 = v76;
  if (hasExceptionsAfterHandlingTraps)
    return result;
LABEL_25:
  v24 = (unint64_t *)(v9 + 41840);
  v25 = *(_QWORD *)(v9 + 41840);
  if (v25)
  {
    v13[v19] = v25;
  }
  else
  {
    v78 = v12;
    v25 = JSC::Symbol::create((JSC::Symbol *)v9, (JSC::VM *)a2, this, a4, a5, a6, a7, a8);
    *v24 = v25;
    v13[v19] = v25;
    if (!v25)
    {
      v25 = JSC::Symbol::create((JSC::Symbol *)v9, v79, v80, a4, a5, a6, a7, a8);
      *v24 = v25;
    }
    v12 = v78;
  }
  v13[v19 + 1] = v25;
  v26 = *(_QWORD *)(v10 + 24) + 1;
  v27 = *(_QWORD *)(v10 + 16) - 1;
  *(_QWORD *)(v10 + 16) = v27;
  *(_QWORD *)(v10 + 24) = v26;
  v28 = *(_DWORD *)(v10 + 32);
  result = 1;
  if (v28 != 8 && v28 >> 2 > v27)
  {
    v30 = v28 >> 1;
    v31 = (JSC *)*((_QWORD *)v12 + 7);
    v32 = (unint64_t *)((char *)v31 + 41656);
    var58[0] = v31;
    v33 = 4 * v30 + 4;
    v110 = (unint64_t *)((char *)v31 + 41656);
    v111 = v31;
    if (v33 < 0x10000001)
    {
      v34 = *v32;
      v35 = (JSC::VM *)(8 * (4 * v30 + 4));
      v36 = ((unint64_t)v35 + 31) & 0xFFFFFFFF0;
      if (v36 <= 0x1F60
        && (v37 = *(_QWORD *)((char *)v31 + ((((unint64_t)v35 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) != 0)
      {
        v38 = *(unsigned int *)(v37 + 60);
        v39 = *(_QWORD *)(v37 + 24);
        if (v39 >= *(_QWORD *)(v37 + 32))
        {
          v108 = *(_QWORD **)((char *)v31 + ((((unint64_t)v35 + 31) >> 1) & 0x7FFFFFFF8) + 10880);
          v103 = v12;
          v92 = *(_QWORD *)(v37 + 40);
          if ((v92 & 1) == 0)
          {
            v39 = v92;
            v35 = (JSC::VM *)(8 * (4 * v30 + 4));
            v93 = *(_QWORD *)(v92 + 8) ^ v108[6];
            v108[4] = v92 + HIDWORD(v93);
            v108[5] = v92 + (int)v93;
            v108[3] = v92 + v38;
            v32 = (unint64_t *)((char *)v31 + 41656);
LABEL_37:
            *(_DWORD *)v39 = 0;
            v40 = *(_DWORD *)(v34 + 8);
            *(_DWORD *)v39 = v34 >> 4;
            *(_DWORD *)(v39 + 4) = v40;
            v114[1] = v34;
            *(_DWORD *)(v39 + 8) = v33;
            *(_DWORD *)(v39 + 12) = v33;
            if (4 * (_DWORD)v30 != -4 && (*(_BYTE *)(v39 + 4) & 0xE) == 8)
            {
              v41 = v39;
              v42 = v12;
              bzero((void *)(v39 + 16), (size_t)v35);
              v39 = v41;
              v32 = v110;
              v31 = v111;
              v12 = v42;
            }
            if (*((_BYTE *)v31 + 755))
              __dmb(0xAu);
            *(_QWORD *)(v39 + 16) = v27 | 0xFFFE000000000000;
            *(_QWORD *)(v39 + 24) = 0xFFFE000000000000;
            *(_QWORD *)(v39 + 32) = v30 | 0xFFFE000000000000;
            goto LABEL_43;
          }
          JSC::sanitizeStackForVM(v31, v35, v36, a4, a5, a6, a7, a8);
          SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v108, (uint64_t)v111 + 192, v38, 0, 1, v98, v99, v100);
          v32 = v110;
          v31 = v111;
          v39 = SlowCase;
          v12 = v103;
          v35 = (JSC::VM *)(8 * (4 * v30 + 4));
        }
        else
        {
          *(_QWORD *)(v37 + 24) = v39 + v38;
        }
      }
      else
      {
        v85 = v12;
        Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v31 + 10792, v31, v36, 0, a5, a6, a7, a8);
        v35 = (JSC::VM *)(8 * (4 * v30 + 4));
        v32 = v110;
        v31 = v111;
        v12 = v85;
        v39 = Slow;
      }
      if (v39)
        goto LABEL_37;
    }
    v87 = v12;
    JSC::throwOutOfMemoryError(v12, (JSC::JSGlobalObject *)var58);
    v32 = v110;
    v31 = v111;
    v12 = v87;
    v39 = 0;
LABEL_43:
    v109 = (JSC::JSCell *)v39;
    if (*((_DWORD *)v31 + 20))
    {
      v88 = v12;
      v89 = JSC::VM::hasExceptionsAfterHandlingTraps(v31, (uint64_t)v35, v36, a4, a5, a6, a7, a8);
      v39 = (unint64_t)v109;
      v32 = v110;
      v31 = v111;
      v12 = v88;
      if (v89)
      {
LABEL_87:
        v39 = 0;
        goto LABEL_88;
      }
    }
    v43 = (v27 + v26);
    if (!(_DWORD)v43)
    {
LABEL_88:
      if (!*((_DWORD *)v31 + 20)
        || (v90 = v39,
            v91 = JSC::VM::hasExceptionsAfterHandlingTraps(v31, (uint64_t)v35, v36, a4, a5, a6, a7, a8),
            v39 = v90,
            v31 = v111,
            !v91))
      {
        *v13 = v39;
        v74 = (uint64_t)v31 + 192;
        if (v39
          && (v39 & 0xFFFE000000000002) == 0
          && *((_DWORD *)v31 + 190) >= *(unsigned __int8 *)(v10 + 7))
        {
          v94 = v39;
          JSC::Heap::writeBarrierSlowPath((uint64_t)v31 + 192, v10);
          v39 = v94;
          v31 = v111;
        }
        *(_QWORD *)(a2 + 16) = v39;
        result = 1;
        if (!a2 || !v39)
          return result;
        if (*((_DWORD *)v31 + 190) >= *(unsigned __int8 *)(a2 + 7))
          JSC::Heap::writeBarrierSlowPath(v74, a2);
      }
      return 1;
    }
    v44 = 0;
    v45 = v30 + 1;
    v46 = v39 + 16;
    v47 = v30 - 1;
    v48 = v28 + 5;
    v105 = 2;
    v106 = v30 - 1;
    v35 = (JSC::VM *)v114;
    v36 = -1;
    v107 = v43;
    while (1)
    {
      v49 = v13[v48 - 1];
      if ((v49 & 0xFFFE000000000002) != 0)
      {
        v51 = (v45 + 3);
        *(_QWORD *)(v46 + 8 * v51) = v49;
      }
      else
      {
        v50 = v32[23];
        if (!v50)
        {
          v75 = v12;
          v50 = JSC::Symbol::create(v31, (JSC::VM *)v114, -1, a4, a5, a6, a7, a8);
          v36 = -1;
          v35 = (JSC::VM *)v114;
          v47 = v106;
          v43 = v107;
          v39 = (unint64_t)v109;
          v32 = v110;
          v31 = v111;
          v12 = v75;
          v110[23] = v50;
        }
        if (v50 == v49)
        {
          v13[v105++] = v44 | 0xFFFE000000000000;
          goto LABEL_66;
        }
        v51 = (v45 + 3);
        *(_QWORD *)(v46 + 8 * v51) = v49;
        if (v39 && v49 && *((_DWORD *)v31 + 190) >= *(unsigned __int8 *)(v39 + 7))
        {
          v102 = v12;
          JSC::Heap::writeBarrierSlowPath((uint64_t)v31 + 192, (unint64_t)v109);
          v36 = -1;
          v35 = (JSC::VM *)v114;
          v47 = v106;
          v43 = v107;
          v39 = (unint64_t)v109;
          v32 = v110;
          v31 = v111;
          v12 = v102;
        }
      }
      v52 = v13[v48];
      *(_QWORD *)(v46 + 8 * (v45 + 4)) = v52;
      if (v52)
        v53 = (v52 & 0xFFFE000000000002) == 0;
      else
        v53 = 0;
      if (v53 && *((_DWORD *)v31 + 190) >= *(unsigned __int8 *)(v39 + 7))
      {
        v81 = v12;
        JSC::Heap::writeBarrierSlowPath((uint64_t)v31 + 192, (unint64_t)v109);
        v36 = -1;
        v35 = (JSC::VM *)v114;
        v47 = v106;
        v43 = v107;
        v39 = (unint64_t)v109;
        v32 = v110;
        v31 = v111;
        v12 = v81;
      }
      if ((v49 & 0xFFFE000000000002) == 0)
      {
        v54 = *(unsigned __int8 *)(v49 + 5);
        if (v54 == 2)
        {
          v55 = (WTF::StringImpl **)(v49 + 8);
          if ((*(_BYTE *)(v49 + 8) & 1) != 0)
          {
            v65 = v12;
            v66 = JSC::JSRopeString::resolveRope(v49, v12, -1, a4, a9, a5, a6, a7, a8);
            v36 = -1;
            v35 = (JSC::VM *)v114;
            v47 = v106;
            v43 = v107;
            v39 = (unint64_t)v109;
            v32 = v110;
            v31 = v111;
            v12 = v65;
            v55 = (WTF::StringImpl **)v66;
          }
          if (!*((_DWORD *)v31 + 20))
            goto LABEL_61;
          v82 = v12;
          v83 = JSC::VM::hasExceptionsAfterHandlingTraps(v31, (uint64_t)v114, -1, a4, a5, a6, a7, a8);
          v36 = -1;
          v35 = (JSC::VM *)v114;
          v47 = v106;
          v43 = v107;
          v39 = (unint64_t)v109;
          v32 = v110;
          v31 = v111;
          v12 = v82;
          if (v83)
          {
            v57 = -1;
          }
          else
          {
LABEL_61:
            v56 = *((_DWORD *)*v55 + 4);
            if (v56 < 0x100)
            {
              v63 = v12;
              v64 = WTF::StringImpl::hashSlowCase(*v55);
              v36 = -1;
              v35 = (JSC::VM *)v114;
              v47 = v106;
              v43 = v107;
              v39 = (unint64_t)v109;
              v32 = v110;
              v31 = v111;
              v12 = v63;
              v57 = v64;
            }
            else
            {
              v57 = v56 >> 8;
            }
          }
          v114[0] = v49;
          goto LABEL_64;
        }
        if (v54 == 3)
        {
          v57 = *(_DWORD *)(v49 + 12);
          if (!v57)
          {
            v95 = v12;
            v96 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v49);
            v36 = -1;
            v35 = (JSC::VM *)v114;
            v47 = v106;
            v43 = v107;
            v39 = (unint64_t)v109;
            v32 = v110;
            v31 = v111;
            v12 = v95;
            v57 = v96;
          }
          goto LABEL_64;
        }
      }
      v60 = (v49 + ~(v49 << 32)) ^ ((v49 + ~(v49 << 32)) >> 22);
      v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
      v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
      v57 = (v62 >> 31) ^ v62;
LABEL_64:
      if (*((_DWORD *)v31 + 20))
      {
        v72 = v12;
        v73 = JSC::VM::hasExceptionsAfterHandlingTraps(v31, (uint64_t)v114, -1, a4, a5, a6, a7, a8);
        v36 = -1;
        v35 = (JSC::VM *)v114;
        v47 = v106;
        v43 = v107;
        v39 = (unint64_t)v109;
        v32 = v110;
        v31 = v111;
        v12 = v72;
        if (v73)
          goto LABEL_87;
      }
      v58 = (v57 & v47) + 4;
      v59 = *(_QWORD *)(v46 + 8 * v58);
      *(_QWORD *)(v46 + 8 * v58) = v51 | 0xFFFE000000000000;
      *(_QWORD *)(v46 + 8 * (v51 + 2)) = v59;
      v45 = v51;
LABEL_66:
      ++v44;
      v48 += 3;
      if (v43 == v44)
        goto LABEL_88;
    }
  }
  return result;
}

unint64_t operationNewMap(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v8;
  unint64_t SlowCase;
  int v10;
  unint64_t v12;
  uint64_t v13;
  JSC::VM *v14;
  JSC::Heap *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(JSC::Heap **)(a1 + 40664);
  if (!v8)
  {
    v13 = a1;
    v14 = (JSC::VM *)a2;
    v15 = JSC::GCClient::Heap::mapSpaceSlow((JSC::Heap **)(a1 + 37552));
    a2 = (unint64_t)v14;
    v8 = v15;
    a1 = v13;
  }
  SlowCase = *((_QWORD *)v8 + 3);
  if (SlowCase < *((_QWORD *)v8 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v8 + 5);
  if ((SlowCase & 1) == 0)
  {
    v12 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v8 + 6);
    *((_QWORD *)v8 + 4) = SlowCase + HIDWORD(v12);
    *((_QWORD *)v8 + 5) = SlowCase + (int)v12;
LABEL_4:
    *((_QWORD *)v8 + 3) = SlowCase + 32;
    goto LABEL_5;
  }
  v16 = a1 + 192;
  v20 = (JSC::VM *)a2;
  v21 = a1;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v8, v16, 32, 0, 0, v17, v18, v19);
  a2 = (unint64_t)v20;
  a1 = v21;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v10 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v10;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return SlowCase;
}

unint64_t operationNewSet(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v8;
  unint64_t SlowCase;
  int v10;
  unint64_t v12;
  uint64_t v13;
  JSC::VM *v14;
  JSC::Heap *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(JSC::Heap **)(a1 + 40744);
  if (!v8)
  {
    v13 = a1;
    v14 = (JSC::VM *)a2;
    v15 = JSC::GCClient::Heap::setSpaceSlow((JSC::Heap **)(a1 + 37552));
    a2 = (unint64_t)v14;
    v8 = v15;
    a1 = v13;
  }
  SlowCase = *((_QWORD *)v8 + 3);
  if (SlowCase < *((_QWORD *)v8 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v8 + 5);
  if ((SlowCase & 1) == 0)
  {
    v12 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v8 + 6);
    *((_QWORD *)v8 + 4) = SlowCase + HIDWORD(v12);
    *((_QWORD *)v8 + 5) = SlowCase + (int)v12;
LABEL_4:
    *((_QWORD *)v8 + 3) = SlowCase + 32;
    goto LABEL_5;
  }
  v16 = a1 + 192;
  v20 = (JSC::VM *)a2;
  v21 = a1;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v8, v16, 32, 0, 0, v17, v18, v19);
  a2 = (unint64_t)v20;
  a1 = v21;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v10 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v10;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return SlowCase;
}

uint64_t operationWeakSetAdd(unint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  unint64_t v13;
  JSC::VM *var18[4];

  v4 = *(_QWORD *)(a1 + 56);
  *(JSC::VM **)(v4 + 40) = var18[3];
  var18[0] = (JSC::VM *)v4;
  if ((a3 & 0xFFFE000000000002) != 0
    || (v5 = *(unsigned __int8 *)(a3 + 5), v5 <= 0x16) && (v5 != 4 || (*(_BYTE *)(*(_QWORD *)(a3 + 8) + 36) & 2) != 0))
  {
    JSC::throwTypeError(a1, var18, (uint64_t)"WeakSet values must be objects or non-registered symbols", 57);
  }
  else
  {
    v6 = *(_DWORD *)(a2 + 24);
    v7 = (v6 - 1) & a4;
    v8 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v9 = *(_QWORD *)(v8 + 8 * v7);
      if (!v9)
        break;
      if (v9 != -3 && v9 == a3)
      {
        v11 = *(_DWORD *)(a2 + 28);
        goto LABEL_13;
      }
      v7 = (v7 + 1) & (v6 - 1);
    }
    *(_QWORD *)(v8 + 8 * v7) = a3;
    if (a2 && a3 && *(_DWORD *)(v4 + 760) >= *(unsigned __int8 *)(a2 + 7))
    {
      v13 = a2;
      JSC::Heap::writeBarrierSlowPath(v4 + 192, a2);
      a2 = v13;
      v6 = *(_DWORD *)(v13 + 24);
    }
    v11 = *(_DWORD *)(a2 + 28) + 1;
    *(_DWORD *)(a2 + 28) = v11;
LABEL_13:
    if (v6 <= 2 * (*(_DWORD *)(a2 + 32) + v11))
      JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::rehash(a2, 0);
  }
  return *(_QWORD *)(v4 + 16);
}

uint64_t operationWeakMapSet(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  JSC::JSCell *v18;
  JSC::JSCell *v19;
  JSC::JSCell *v20;
  JSC::VM *var18[4];

  v5 = *(_QWORD *)(a1 + 56);
  *(JSC::VM **)(v5 + 40) = var18[3];
  var18[0] = (JSC::VM *)v5;
  if ((a3 & 0xFFFE000000000002) != 0
    || (v6 = *(unsigned __int8 *)(a3 + 5), v6 <= 0x16) && (v6 != 4 || (*(_BYTE *)(*(_QWORD *)(a3 + 8) + 36) & 2) != 0))
  {
    JSC::throwTypeError(a1, var18, (uint64_t)"WeakMap keys must be objects or non-registered symbols", 55);
  }
  else
  {
    v7 = *(_DWORD *)(a2 + 24) - 1;
    v8 = v7 & a5;
    v9 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v10 = v8;
      v11 = *(_QWORD *)(v9 + 16 * v8);
      if (!v11)
        break;
      if (v11 != -3 && v11 == a3)
      {
        *(_QWORD *)(v9 + 16 * v10 + 8) = a4;
        if ((a4 & 0xFFFE000000000002) == 0
          && a2
          && a4
          && *(_DWORD *)(v5 + 760) >= *(unsigned __int8 *)(a2 + 7))
        {
          v18 = (JSC::JSCell *)a2;
          JSC::Heap::writeBarrierSlowPath(v5 + 192, a2);
          a2 = (unint64_t)v18;
        }
        goto LABEL_16;
      }
      v8 = (v10 + 1) & v7;
    }
    v13 = (_QWORD *)(v9 + 16 * v10);
    *v13 = a3;
    v14 = v5 + 192;
    if (a2 && a3 && *(_DWORD *)(v5 + 760) >= *(unsigned __int8 *)(a2 + 7))
    {
      v19 = (JSC::JSCell *)a2;
      v16 = a4;
      v17 = (_QWORD *)(v9 + 16 * v10);
      JSC::Heap::writeBarrierSlowPath(v14, a2);
      v13 = v17;
      v14 = v5 + 192;
      a4 = v16;
      a2 = (unint64_t)v19;
    }
    v13[1] = a4;
    if (a2
      && a4
      && (a4 & 0xFFFE000000000002) == 0
      && *(_DWORD *)(v5 + 760) >= *(unsigned __int8 *)(a2 + 7))
    {
      v20 = (JSC::JSCell *)a2;
      JSC::Heap::writeBarrierSlowPath(v14, a2);
      a2 = (unint64_t)v20;
    }
    ++*(_DWORD *)(a2 + 28);
LABEL_16:
    if (*(_DWORD *)(a2 + 24) <= (2 * (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 28))))
      JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::rehash(a2, 0);
  }
  return *(_QWORD *)(v5 + 16);
}

uint64_t operationGetPrototypeOfObject(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0xD) & 8) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                       + 0xB0))(a2, a1);
  result = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
  if (!result)
    return *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t operationGetPrototypeOf(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD var18[4];

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = var18[3];
  var18[0] = a2;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) < 0x17u)
    return JSC::JSValue::synthesizePrototype((JSC::JSValue *)var18, a1);
  if ((*(_WORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
    return (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0xB0))(a2, a1);
  result = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
  if (!result)
    return *(_QWORD *)(a2 + 16);
  return result;
}

unint64_t operationDateGetFullYear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v10;
  double v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v10 = *(double **)(a2 + 24);
  if (v10)
  {
    v11 = *(double *)(a2 + 16);
    if (v10[1] == v11)
      return *((unsigned int *)v10 + 4) | 0xFFFE000000000000;
  }
  else
  {
    v11 = *(double *)(a2 + 16);
    v13 = (~(*(_QWORD *)&v11 << 32) + *(_QWORD *)&v11) ^ ((~(*(_QWORD *)&v11 << 32) + *(_QWORD *)&v11) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = a1 + 92736 + 16 * (((v15 >> 31) ^ v15) & 0xF);
    if (*(double *)v16 == v11)
    {
      v17 = (uint64_t *)(v16 + 8);
    }
    else
    {
      *(double *)v16 = v11;
      v19 = WTF::fastMalloc((WTF *)0x68);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = 0x7FF8000000000000;
      *(_OWORD *)(v19 + 16) = 0u;
      *(_OWORD *)(v19 + 32) = 0u;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0x7FF8000000000000;
      *(_OWORD *)(v19 + 64) = 0u;
      *(_OWORD *)(v19 + 80) = 0u;
      *(_QWORD *)(v19 + 96) = 0;
      v21 = *(_DWORD **)(v16 + 8);
      v17 = (uint64_t *)(v16 + 8);
      v20 = v21;
      *v17 = v19;
      if (v21)
      {
        if (*v20 == 1)
          WTF::fastFree((unint64_t)v20, (void *)a2, a3, a4, a5, a6, a7, a8);
        else
          --*v20;
      }
    }
    v10 = (double *)*v17;
    *(_DWORD *)v10 = *(_DWORD *)*v17 + 1;
    v18 = *(_DWORD **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v10;
    if (v18)
    {
      if (*v18 == 1)
      {
        WTF::fastFree((unint64_t)v18, (void *)a2, a3, a4, a5, a6, a7, a8);
        v10 = *(double **)(a2 + 24);
      }
      else
      {
        --*v18;
      }
    }
  }
  if (v10[1] != v11)
  {
    JSC::DateCache::msToGregorianDateTime(a1 + 90592, 1, (uint64_t)(v10 + 2), a4, a5, a6, a7, a8, v11);
    v10 = *(double **)(a2 + 24);
    v10[1] = v11;
  }
  return *((unsigned int *)v10 + 4) | 0xFFFE000000000000;
}

uint64_t operationDateGetUTCFullYear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 56) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 64);
    return *(unsigned int *)v9 | 0xFFFE000000000000;
  }
  v9 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
  if (v9)
    return *(unsigned int *)v9 | 0xFFFE000000000000;
  return 0x7FFA000000000000;
}

unint64_t operationDateGetMonth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 8) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 16);
  }
  else
  {
    v9 = JSC::DateInstance::calculateGregorianDateTime((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
    if (!v9)
      return 0x7FFA000000000000;
  }
  return *((unsigned int *)v9 + 1) | 0xFFFE000000000000;
}

uint64_t operationDateGetUTCMonth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 56) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 64);
    return *((unsigned int *)v9 + 1) | 0xFFFE000000000000;
  }
  v9 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
  if (v9)
    return *((unsigned int *)v9 + 1) | 0xFFFE000000000000;
  return 0x7FFA000000000000;
}

unint64_t operationDateGetDate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 8) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 16);
  }
  else
  {
    v9 = JSC::DateInstance::calculateGregorianDateTime((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
    if (!v9)
      return 0x7FFA000000000000;
  }
  return *((unsigned int *)v9 + 3) | 0xFFFE000000000000;
}

uint64_t operationDateGetUTCDate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 56) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 64);
    return *((unsigned int *)v9 + 3) | 0xFFFE000000000000;
  }
  v9 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
  if (v9)
    return *((unsigned int *)v9 + 3) | 0xFFFE000000000000;
  return 0x7FFA000000000000;
}

unint64_t operationDateGetDay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 8) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 16);
  }
  else
  {
    v9 = JSC::DateInstance::calculateGregorianDateTime((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
    if (!v9)
      return 0x7FFA000000000000;
  }
  return *((unsigned int *)v9 + 4) | 0xFFFE000000000000;
}

uint64_t operationDateGetUTCDay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 56) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 64);
    return *((unsigned int *)v9 + 4) | 0xFFFE000000000000;
  }
  v9 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
  if (v9)
    return *((unsigned int *)v9 + 4) | 0xFFFE000000000000;
  return 0x7FFA000000000000;
}

unint64_t operationDateGetHours(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 8) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 16);
  }
  else
  {
    v9 = JSC::DateInstance::calculateGregorianDateTime((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
    if (!v9)
      return 0x7FFA000000000000;
  }
  return *((unsigned int *)v9 + 5) | 0xFFFE000000000000;
}

uint64_t operationDateGetUTCHours(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 56) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 64);
    return *((unsigned int *)v9 + 5) | 0xFFFE000000000000;
  }
  v9 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
  if (v9)
    return *((unsigned int *)v9 + 5) | 0xFFFE000000000000;
  return 0x7FFA000000000000;
}

unint64_t operationDateGetMinutes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 8) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 16);
  }
  else
  {
    v9 = JSC::DateInstance::calculateGregorianDateTime((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
    if (!v9)
      return 0x7FFA000000000000;
  }
  return *((unsigned int *)v9 + 6) | 0xFFFE000000000000;
}

uint64_t operationDateGetUTCMinutes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 56) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 64);
    return *((unsigned int *)v9 + 6) | 0xFFFE000000000000;
  }
  v9 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
  if (v9)
    return *((unsigned int *)v9 + 6) | 0xFFFE000000000000;
  return 0x7FFA000000000000;
}

uint64_t operationDateGetSeconds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 8) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 16);
    return *((unsigned int *)v9 + 7) | 0xFFFE000000000000;
  }
  v9 = JSC::DateInstance::calculateGregorianDateTime((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
  if (v9)
    return *((unsigned int *)v9 + 7) | 0xFFFE000000000000;
  return 0x7FFA000000000000;
}

uint64_t operationDateGetUTCSeconds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 56) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 64);
    return *((unsigned int *)v9 + 7) | 0xFFFE000000000000;
  }
  v9 = JSC::DateInstance::calculateGregorianDateTimeUTC((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
  if (v9)
    return *((unsigned int *)v9 + 7) | 0xFFFE000000000000;
  return 0x7FFA000000000000;
}

unint64_t operationDateGetTimezoneOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 8) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 16);
  }
  else
  {
    v9 = JSC::DateInstance::calculateGregorianDateTime((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
    if (!v9)
      return 0x7FFA000000000000;
  }
  return -*((_DWORD *)v9 + 8) | 0xFFFE000000000000;
}

uint64_t operationDateGetYear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double *v9;
  uint64_t vars0;

  *(_QWORD *)(a1 + 40) = vars0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 && *(double *)(v8 + 8) == *(double *)(a2 + 16))
  {
    v9 = (double *)(v8 + 16);
    return (*(_DWORD *)v9 - 1900) | 0xFFFE000000000000;
  }
  v9 = JSC::DateInstance::calculateGregorianDateTime((JSC::DateInstance *)a2, (JSC::DateCache *)(a1 + 90592), a3, a4, a5, a6, a7, a8);
  if (v9)
    return (*(_DWORD *)v9 - 1900) | 0xFFFE000000000000;
  return 0x7FFA000000000000;
}

uint64_t operationInt64ToBigInt(JSC::JSBigInt *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  return JSC::JSBigInt::createFrom(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t operationThrowDFG(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t vars0;

  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  *((_QWORD *)v8 + 5) = vars0;
  JSC::VM::throwException(v8, a1, a2, a4, a5, a6, a7, a8);
  return *((_QWORD *)v8 + 2);
}

uint64_t operationThrowStaticError(JSC::JSGlobalObject *a1, unint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  int **v12;
  unint64_t Error;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t vars0;

  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  *((_QWORD *)v11 + 5) = vars0;
  v12 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v12 = JSC::JSRopeString::resolveRope(a2, a1, (uint64_t)v12, a4, a9, a5, a6, a7, a8);
  Error = JSC::createError(a1, a3, (WTF::StringImpl **)v12);
  JSC::VM::throwException(v11, a1, Error, v14, v15, v16, v17, v18);
  return *((_QWORD *)v11 + 2);
}

uint64_t operationLinkDirectCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  unsigned int *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  JSC::CodeBlock *v27;
  uint64_t result;
  unsigned int v29;
  JSC::CodeBlock *var48[10];

  v8 = a2;
  v10 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 56);
  *(JSC::CodeBlock **)(v10 + 40) = var48[9];
  v11 = *(_BYTE *)(a1 + 17) & 0xF;
  v12 = *(_QWORD *)(a2 + 24);
  if ((v12 & 1) != 0)
    v12 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 48);
  v13 = *(const WTF::StringImpl **)(a2 + 16);
  var48[0] = 0;
  v14 = (unsigned int *)(v10 + 80);
  v15 = *(_DWORD *)(v10 + 80);
  if ((v15 & 0x20) == 0)
  {
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 | 0x20, v14));
  }
  if (*(_BYTE *)(v12 + 5) == 8)
    goto LABEL_31;
  if (v11 == 8)
  {
    if ((*(_DWORD *)(*(_QWORD *)(v12 + 88) + 24) & 0x80000000) != 0)
    {
      result = 4698;
      __break(0xC471u);
      return result;
    }
    v17 = *(_QWORD *)(v12 + 16);
  }
  else
  {
    v17 = *(_QWORD *)(v12 + 8);
  }
  if (v17)
    v18 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance;
  else
    v18 = 0;
  if (v18)
  {
    v19 = 96;
    if (v11 == 8)
      v19 = 104;
    var48[0] = *(JSC::CodeBlock **)(v12 + v19);
  }
  else
  {
    JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v12, v10, a2, v13, (JSC::VM *)(v11 == 8), var48, a7, a8);
  }
  if (!*v14 || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, v8, (uint64_t)v13, a5, a6, a7, a8))
  {
    if (*(_DWORD *)(a1 + 20) >= *((_DWORD *)var48[0] + 7))
    {
      v20 = 8;
      if (v11 == 8)
        v20 = 16;
      v21 = *(unsigned int **)(v12 + v20);
      v22 = v21 + 2;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
      v24 = (*(uint64_t (**)(unsigned int *, _QWORD, uint64_t, const WTF::StringImpl *))(*(_QWORD *)v21 + 40))(v21, 0, v8, v13);
      do
      {
        v25 = __ldaxr(v22);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v22));
      if (!v26)
      {
        atomic_store(1u, v21 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 32))(v21);
      }
      goto LABEL_25;
    }
LABEL_31:
    v24 = JSC::ExecutableBase::entrypointFor(v12, v11 == 8, 1);
LABEL_25:
    v27 = var48[0];
    JSC::DirectCallLinkInfo::setCallTarget(a1, (unint64_t)var48[0], v24);
    if (v27)
      JSC::CodeBlock::linkIncomingCall((uint64_t)v27, *(JSC::JSCell **)(a1 + 88), (JSC::CallLinkInfoBase *)a1);
  }
  result = *(_QWORD *)(v10 + 16);
  if ((v15 & 0x20) == 0)
  {
    do
      v29 = __ldaxr(v14);
    while (__stlxr(v29 & 0xFFFFFFDF, v14));
  }
  return result;
}

uint64_t JSC::ExecutableBase::entrypointFor(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v14;

  v3 = a3;
  if ((_DWORD)a3 == 1)
  {
    if (a2)
    {
      if (a2 == 1)
      {
        v10 = *(_QWORD *)(a1 + 32);
        if (v10)
          return v10;
      }
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 24);
      if (v10)
        return v10;
    }
  }
  v6 = 16;
  if (!a2)
    v6 = 8;
  v7 = *(unsigned int **)(a1 + v6);
  v8 = v7 + 2;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v7 + 40))(v7, a3);
  do
  {
    v11 = __ldaxr(v8);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v8));
  if (!v12)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 32))(v7);
  }
  if (v3 == 1)
  {
    if (a2)
    {
      if (a2 != 1)
        return v10;
      v14 = (uint64_t *)(a1 + 32);
    }
    else
    {
      v14 = (uint64_t *)(a1 + 24);
    }
    *v14 = v10;
  }
  return v10;
}

void operationTriggerReoptimizationNow(JSC::CodeBlock *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v11;
  char **v12;
  uint64_t v13;
  JSC::CodeBlock **v14;
  JSC::CodeBlock **v15;
  JSC::CodeBlock *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL4 v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unsigned int v36;
  int v37;
  BOOL v38;
  uint64_t v39;

  v11 = (JSC *)*((_QWORD *)a1 + 9);
  ++*((_DWORD *)v11 + 229);
  JSC::sanitizeStackForVM(v11, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [21],char [2]>((uint64_t)a1);
  v12 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C));
  if (v12 == &JSC::FunctionCodeBlock::s_info)
  {
    v13 = *((_QWORD *)a1 + 8);
    v14 = (JSC::CodeBlock **)(v13 + 96);
    v15 = (JSC::CodeBlock **)(v13 + 104);
    if (*(int *)(*((_QWORD *)a1 + 7) + 20) >= 0)
      v15 = v14;
  }
  else
  {
    if (v12 != &JSC::EvalCodeBlock::s_info
      && v12 != &JSC::ProgramCodeBlock::s_info
      && v12 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x1984BA554);
    }
    v15 = (JSC::CodeBlock **)(*((_QWORD *)a1 + 8) + 72);
  }
  v16 = *v15;
  if (v16)
    v17 = v16 == a1;
  else
    v17 = 1;
  if (v17)
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<JSC::CodeBlock,char [58],char [2]>((uint64_t)a1);
  }
  else
  {
    v18 = *(_QWORD *)(a3 + 8);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 1) != 0)
      v19 = (_QWORD *)*v19;
    if (v19)
    {
      do
      {
        v20 = *(_BYTE *)(*(_QWORD *)(v19[1] + 64) + 65) != 0;
        if (*(_BYTE *)(*(_QWORD *)(v19[1] + 64) + 65))
          break;
        v39 = v19[2];
        v19 = (_QWORD *)(v39 & 0xFFFFFFFF8);
        if ((v39 & 1) != 0)
          v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    else
    {
      v20 = 0;
    }
    if ((*(_WORD *)(*(_QWORD *)(a2 + 56) + 28) & 0x3000) == 0x1000)
      v21 = DWORD1(xmmword_1ECF4C514);
    else
      v21 = 1;
    v22 = *(_DWORD *)(a2 + 36);
    v23 = JSC::CodeBlock::adjustedExitCountThreshold((JSC::CodeBlock *)a2, v21 * (int)xmmword_1ECF4C534);
    if ((v20 | JSC::CodeBlock::checkIfOptimizationThresholdReached((uint64_t)a1, v24, v25, v26, v27, v28, v29, v30)) == 1)
    {
      if ((*(_WORD *)(*(_QWORD *)(a2 + 56) + 28) & 0x3000) == 0x1000)
        v37 = DWORD1(xmmword_1ECF4C514);
      else
        v37 = 1;
      v36 = *(_DWORD *)(a2 + 36);
      v38 = v36 >= JSC::CodeBlock::adjustedExitCountThreshold((JSC::CodeBlock *)a2, v37 * DWORD1(xmmword_1ECF4C534));
    }
    else
    {
      v38 = 0;
    }
    if (v22 >= v23 || v38)
    {
      JSC::CodeBlock::jettison(a2, 6u, 1, 0, v35, v31, v32, v33, v34);
    }
    else
    {
      if (BYTE1(qword_1ECF4C332))
        WTF::dataLog<JSC::CodeBlock,char [20],JSC::CodeBlock,char [72],char [2]>((uint64_t)a1, a2);
      JSC::CodeBlock::optimizeAfterLongWarmUp(a1, v35);
    }
  }
  --*((_DWORD *)v11 + 229);
}

void operationTriggerTierUpNow(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  JSC::DFG::JITCode *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  JSC::DFG::JITCode *v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  JSC::Profiler::Database *v44;
  WTF *v45;
  void (**v46)(WTF::StringPrintStream *__hidden);
  WTF *v47;
  __int128 v48;
  _BYTE v49[128];
  uint64_t v50;
  uint64_t vars0;

  v50 = *MEMORY[0x1E0C80C00];
  v9 = vars0;
  *(_QWORD *)(a1 + 40) = vars0;
  ++*(_DWORD *)(a1 + 916);
  v10 = *(JSC::VM **)(v9 + 16);
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_QWORD *)v10 + 15);
  if (!v11 || *(_BYTE *)(v11 + 12) != 4)
  {
    WTF::dataLog<char [44],JSC::CodeBlock,char [2]>((uint64_t)v10);
    __break(0xC471u);
    JUMPOUT(0x1984BA73CLL);
  }
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
  do
  {
    v16 = __ldaxr(v12);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v12));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)(v11 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  }
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [50],JSC::ExecutionCounter<(JSC::CountingVariant)1>,char [2]>((uint64_t)v10, v15 + 348);
  if (JSC::DFG::shouldTriggerFTLCompile(v10, (JSC::CodeBlock *)v15, v14))
    JSC::DFG::triggerFTLReplacementCompile((JSC::DFG *)a1, v10, (JSC::CodeBlock *)v15, v18);
  v19 = *((_QWORD *)v10 + 15);
  if (v19)
    LODWORD(v19) = *(unsigned __int8 *)(v19 + 12);
  v20 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
  if (v20 == &JSC::FunctionCodeBlock::s_info)
  {
    v21 = *((_QWORD *)v10 + 8);
    v22 = (uint64_t *)(v21 + 96);
    v23 = (uint64_t *)(v21 + 104);
    if (*(int *)(*((_QWORD *)v10 + 7) + 20) >= 0)
      v23 = v22;
  }
  else
  {
    if (v20 != &JSC::EvalCodeBlock::s_info
      && v20 != &JSC::ProgramCodeBlock::s_info
      && v20 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x1984BA854);
    }
    v23 = (uint64_t *)(*((_QWORD *)v10 + 8) + 72);
  }
  v24 = *v23;
  if (!v24)
    goto LABEL_23;
  v25 = *(_QWORD *)(v24 + 120);
  if (!v25)
  {
    if (v19 > 1)
      goto LABEL_26;
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x1984BA824);
  }
  if (v19 <= 1)
    goto LABEL_36;
  v26 = *(unsigned __int8 *)(v25 + 12);
  if (v26 <= 1)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x1984BA764);
  }
  if (v26 <= v19)
    goto LABEL_23;
  v27 = *(_QWORD *)(v15 + 376);
  if (v27 && (v28 = *(_DWORD *)(v27 - 12)) != 0)
  {
    if (v28 != 1 || !*(_QWORD *)(v15 + 384))
      goto LABEL_23;
    JSC::VM::logEvent<operationTriggerTierUpNow::$_1>(*(JSC::Profiler::Database **)(*((_QWORD *)v10 + 9) + 93016), (uint64_t)v10);
  }
  else if (*(_QWORD *)(*((_QWORD *)v10 + 9) + 93016))
  {
    v44 = *(JSC::Profiler::Database **)(*((_QWORD *)v10 + 9) + 93016);
    v46 = off_1E3572250;
    v47 = (WTF *)v49;
    v48 = xmmword_199122F80;
    v49[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v46, "%s", "replacement in place, delaying indefinitely");
    v46[5]((WTF::StringPrintStream *)&v46);
    WTF::StringPrintStream::toCString(&v46, (uint64_t *)&v45);
    if (v47 != (WTF *)v49)
      WTF::fastFree((unint64_t)v47, v29, v30, v31, v32, v33, v34, v35);
    JSC::Profiler::Database::logEvent(v44, (uint64_t)v10, "delayFTLCompile", &v45, v32, v33, v34, v35);
    v43 = v45;
    v45 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1)
        WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
      else
        --*(_DWORD *)v43;
    }
  }
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)v10, ": Not FTL-optimizing anytime soon.", "\n");
  *(_DWORD *)(v15 + 356) = 0x7FFFFFFF;
  *(_QWORD *)(v15 + 348) = 0x80000000;
LABEL_23:
  --*(_DWORD *)(a1 + 916);
}

uint64_t WTF::dataLog<char [44],JSC::CodeBlock,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Unexpected code block in DFG->FTL tier-up: ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::DFG::shouldTriggerFTLCompile(JSC::DFG *this, JSC::CodeBlock *a2, JSC::DFG::JITCode *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  JSC::Profiler::Database *v16;
  uint64_t result;
  char **v18;
  uint64_t v19;
  JSC::DFG **v20;
  JSC::DFG **v21;
  JSC::DFG *v22;
  JSC::DFG *v23;
  uint64_t v24;
  int v25;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF *v43;
  void (**v44)(WTF::StringPrintStream *__hidden);
  WTF *v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 12);
    v6 = v5 & 0xFE;
    if (v6 == 2)
    {
      if ((*((_BYTE *)this + 18) & 8) == 0)
      {
        v7 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
        goto LABEL_5;
      }
      goto LABEL_56;
    }
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  v18 = (char **)(16 * *(unsigned int *)(v7 + 0x4C));
  if (v18 == &JSC::FunctionCodeBlock::s_info)
  {
    v19 = *((_QWORD *)this + 8);
    v20 = (JSC::DFG **)(v19 + 96);
    v21 = (JSC::DFG **)(v19 + 104);
    if (*(int *)(*((_QWORD *)this + 7) + 20) >= 0)
      v21 = v20;
  }
  else
  {
    if (v18 != &JSC::EvalCodeBlock::s_info
      && v18 != &JSC::ProgramCodeBlock::s_info
      && v18 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x1984BAD98);
    }
    v21 = (JSC::DFG **)(*((_QWORD *)this + 8) + 72);
  }
  v22 = *v21;
  if (v22 || (v22 = this, v6 == 4))
  {
    if (*((_QWORD *)v22 + 24))
      v23 = (JSC::DFG *)*((_QWORD *)v22 + 24);
    else
      v23 = v22;
    v24 = *((_QWORD *)v23 + 15);
    if (v24)
    {
      v25 = *(unsigned __int8 *)(v24 + 12);
      if ((v25 & 0xFE) != 2 && v25 != 0)
        goto LABEL_32;
    }
  }
  else
  {
    v23 = this;
    if (v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1984BAE1CLL);
    }
  }
  if ((*((_BYTE *)v23 + 18) & 8) == 0)
  {
    if (v4)
      v5 = *(unsigned __int8 *)(v4 + 12);
    else
      v5 = 0;
LABEL_5:
    v8 = (char **)(16 * *(unsigned int *)(v7 + 76));
    if (v8 == &JSC::FunctionCodeBlock::s_info)
    {
      v9 = *((_QWORD *)this + 8);
      v10 = (uint64_t *)(v9 + 96);
      v11 = (uint64_t *)(v9 + 104);
      if (*(int *)(*((_QWORD *)this + 7) + 20) >= 0)
        v11 = v10;
    }
    else
    {
      if (v8 != &JSC::EvalCodeBlock::s_info
        && v8 != &JSC::ProgramCodeBlock::s_info
        && v8 != &JSC::ModuleProgramCodeBlock::s_info)
      {
        __break(0xC471u);
        JUMPOUT(0x1984BAD68);
      }
      v11 = (uint64_t *)(*((_QWORD *)this + 8) + 72);
    }
    v12 = *v11;
    if (!v12)
    {
LABEL_13:
      v15 = (char *)a2 + 348;
      if ((JSC::ExecutionCounter<(JSC::CountingVariant)1>::checkIfThresholdCrossedAndSet((uint64_t)a2 + 348, (uint64_t)this) & 1) == 0)
      {
        v16 = *(JSC::Profiler::Database **)(*((_QWORD *)this + 9) + 93016);
        if (v16)
        {
          v44 = off_1E3572250;
          v45 = (WTF *)v47;
          v46 = xmmword_199122F80;
          v47[0] = 0;
          WTF::PrintStream::printf((WTF::PrintStream *)&v44, "%s", "counter = ");
          JSC::ExecutionCounter<(JSC::CountingVariant)1>::dump((uint64_t)v15, (WTF::PrintStream *)&v44);
          v44[5]((WTF::StringPrintStream *)&v44);
          WTF::StringPrintStream::toCString(&v44, (uint64_t *)&v43);
          if (v45 != (WTF *)v47)
            WTF::fastFree((unint64_t)v45, v27, v28, v29, v30, v31, v32, v33);
          JSC::Profiler::Database::logEvent(v16, (uint64_t)this, "delayFTLCompile", &v43, v30, v31, v32, v33);
          v41 = v43;
          v43 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 1)
              WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
            else
              --*(_DWORD *)v41;
          }
        }
        if (BYTE1(qword_1ECF4C332))
          WTF::dataLog<char [30],JSC::CodeBlock,char [6],char [2]>((uint64_t)this);
        return 0;
      }
      return 1;
    }
    v13 = *(_QWORD *)(v12 + 120);
    if (v13)
    {
      if (v5 > 1)
      {
        v14 = *(unsigned __int8 *)(v13 + 12);
        if (v14 > 1)
        {
          if (v14 > v5)
            return 1;
          goto LABEL_13;
        }
LABEL_32:
        __break(0xC471u);
        JUMPOUT(0x1984BAC04);
      }
    }
    else if (v5 > 1)
    {
      goto LABEL_32;
    }
    __break(0xC471u);
    JUMPOUT(0x1984BAC7CLL);
  }
LABEL_56:
  JSC::VM::logEvent<JSC::DFG::shouldTriggerFTLCompile(JSC::CodeBlock *,JSC::DFG::JITCode *)::$_0>(*(JSC::Profiler::Database **)(*((_QWORD *)this + 9) + 93016), (uint64_t)this);
  if (BYTE1(qword_1ECF4C332))
  {
    WTF::dataLog<char [31],JSC::CodeBlock,char [48],char [2]>((uint64_t)this);
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)this, ": Not FTL-optimizing anytime soon.", "\n");
  }
  result = 0;
  *((_DWORD *)a2 + 89) = 0x7FFFFFFF;
  *(_QWORD *)((char *)a2 + 348) = 0x80000000;
  return result;
}

void JSC::DFG::triggerFTLReplacementCompile(JSC::DFG *this, JSC::VM *a2, JSC::CodeBlock *a3, JSC::DFG::JITCode *a4)
{
  unint64_t v7;
  uint64_t v8;
  int v9;
  JSC::VM *v10;
  int ready;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unsigned int v20;
  char **v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  JSC::Profiler::Database *v27;
  JSC::CodeBlock *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  JSC::Profiler::Database *v39;
  JSC::Profiler::Database *v40;
  char **v41;
  uint64_t v42;
  JSC::VM **v43;
  JSC::VM **v44;
  JSC::VM *v45;
  uint64_t v46;
  int v47;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  char v80;
  WTF *v81;
  WTF *v82;
  WTF *v83;
  __int128 v84;
  _BYTE v85[128];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(*((_QWORD *)a2 + 7) + 28) & 0x3000) == 0)
  {
    JSC::DFG::JITCode::optimizeAfterWarmUp(a3, a2);
    return;
  }
  v7 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
  if (v7 != -1)
  {
    v82 = (WTF *)&v80;
    v81 = (WTF *)&v82;
    std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v81, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
  }
  v8 = *((_QWORD *)a2 + 15);
  if (v8)
  {
    LODWORD(v8) = *(unsigned __int8 *)(v8 + 12);
    v9 = v8 & 0xFE;
    v10 = a2;
    if (v9 == 2)
      goto LABEL_6;
  }
  else
  {
    v9 = 0;
  }
  v41 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
  if (v41 == &JSC::FunctionCodeBlock::s_info)
  {
    v42 = *((_QWORD *)a2 + 8);
    v43 = (JSC::VM **)(v42 + 96);
    v44 = (JSC::VM **)(v42 + 104);
    if (*(int *)(*((_QWORD *)a2 + 7) + 20) >= 0)
      v44 = v43;
  }
  else
  {
    if (v41 != &JSC::EvalCodeBlock::s_info
      && v41 != &JSC::ProgramCodeBlock::s_info
      && v41 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x1984BB3C0);
    }
    v44 = (JSC::VM **)(*((_QWORD *)a2 + 8) + 72);
  }
  v45 = *v44;
  if (v45 || (v45 = a2, v9 == 4))
  {
    if (*((_QWORD *)v45 + 24))
      v10 = (JSC::VM *)*((_QWORD *)v45 + 24);
    else
      v10 = v45;
    v46 = *((_QWORD *)v10 + 15);
    if (v46)
    {
      v47 = *(unsigned __int8 *)(v46 + 12);
      if ((v47 & 0xFE) != 2 && v47 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1984BB150);
      }
    }
  }
  else
  {
    v10 = a2;
    if ((_DWORD)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1984BB510);
    }
  }
LABEL_6:
  ready = JSC::JITWorklist::completeAllReadyPlansForVM(JSC::theGlobalJITWorklist, (uint64_t)this, (uint64_t)v10, 4);
  if (ready == 1)
  {
    v39 = *(JSC::Profiler::Database **)(*((_QWORD *)a2 + 9) + 93016);
    if (!v39)
      goto LABEL_25;
    v82 = (WTF *)off_1E3572250;
    v83 = (WTF *)v85;
    v84 = xmmword_199122F80;
    v85[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v82, "%s", "still compiling");
    (*((void (**)(WTF **))v82 + 5))(&v82);
    WTF::StringPrintStream::toCString(&v82, (uint64_t *)&v81);
    if (v83 != (WTF *)v85)
      WTF::fastFree((unint64_t)v83, v58, v59, v60, v61, v62, v63, v64);
    JSC::Profiler::Database::logEvent(v39, (uint64_t)a2, "delayFTLCompile", &v81, v61, v62, v63, v64);
    v38 = v81;
    v81 = 0;
    if (!v38)
      goto LABEL_25;
    if (*(_DWORD *)v38 != 1)
    {
      --*(_DWORD *)v38;
      goto LABEL_25;
    }
LABEL_23:
    WTF::fastFree((unint64_t)v38, v30, v31, v32, v33, v34, v35, v36);
LABEL_25:
    JSC::DFG::JITCode::setOptimizationThresholdBasedOnCompilationResult((uint64_t)a3, a2, 3, v18);
    return;
  }
  v19 = *((_QWORD *)a2 + 15);
  if (v19)
    v20 = *(unsigned __int8 *)(v19 + 12);
  else
    v20 = 0;
  v21 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
  if (v21 == &JSC::FunctionCodeBlock::s_info)
  {
    v22 = *((_QWORD *)a2 + 8);
    if (*(int *)(*((_QWORD *)a2 + 7) + 20) < 0)
      v23 = (uint64_t *)(v22 + 104);
    else
      v23 = (uint64_t *)(v22 + 96);
  }
  else
  {
    if (v21 != &JSC::EvalCodeBlock::s_info
      && v21 != &JSC::ProgramCodeBlock::s_info
      && v21 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x1984BB390);
    }
    v22 = *((_QWORD *)a2 + 8);
    v23 = (uint64_t *)(v22 + 72);
  }
  v24 = *v23;
  if (!v24)
    goto LABEL_18;
  v25 = *(_QWORD *)(v24 + 120);
  if (!v25)
  {
    if (v20 > 1)
      goto LABEL_47;
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x1984BB240);
  }
  if (v20 <= 1)
    goto LABEL_56;
  v26 = *(unsigned __int8 *)(v25 + 12);
  if (v26 <= 1)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x1984BB180);
  }
  if (v26 > v20)
  {
    v40 = *(JSC::Profiler::Database **)(*((_QWORD *)a2 + 9) + 93016);
    if (v40)
    {
      v82 = (WTF *)off_1E3572250;
      v83 = (WTF *)v85;
      v84 = xmmword_199122F80;
      v85[0] = 0;
      WTF::PrintStream::printf((WTF::PrintStream *)&v82, "%s", "has replacement");
      (*((void (**)(WTF **))v82 + 5))(&v82);
      WTF::StringPrintStream::toCString(&v82, (uint64_t *)&v81);
      if (v83 != (WTF *)v85)
        WTF::fastFree((unint64_t)v83, v65, v66, v67, v68, v69, v70, v71);
      JSC::Profiler::Database::logEvent(v40, (uint64_t)a2, "delayFTLCompile", &v81, v68, v69, v70, v71);
      v79 = v81;
      v81 = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 1)
          WTF::fastFree((unint64_t)v79, v72, v73, v74, v75, v76, v77, v78);
        else
          --*(_DWORD *)v79;
      }
    }
    JSC::DFG::JITCode::optimizeSoon(a3, a2, v18);
    return;
  }
LABEL_18:
  v27 = *(JSC::Profiler::Database **)(*((_QWORD *)a2 + 9) + 93016);
  if (ready != 2)
  {
    if (v27)
    {
      v82 = (WTF *)off_1E3572250;
      v83 = (WTF *)v85;
      v84 = xmmword_199122F80;
      v85[0] = 0;
      WTF::StringPrintStream::toCString(&v82, (uint64_t *)&v81);
      if (v83 != (WTF *)v85)
        WTF::fastFree((unint64_t)v83, v49, v50, v51, v52, v53, v54, v55);
      JSC::Profiler::Database::logEvent(v27, (uint64_t)a2, "triggerFTLReplacement", &v81, v52, v53, v54, v55);
      v57 = v81;
      v81 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 1)
          WTF::fastFree((unint64_t)v57, v56, v12, v13, v14, v15, v16, v17);
        else
          --*(_DWORD *)v57;
      }
      v22 = *((_QWORD *)a2 + 8);
    }
    v28 = (JSC::CodeBlock *)JSC::ScriptExecutable::newReplacementCodeBlockFor(v22, *(_DWORD *)(*((_QWORD *)a2 + 7) + 20) >> 31, v12, v13, v14, v15, v16, v17);
    v82 = 0;
    v83 = 0;
    *(_QWORD *)&v84 = 0;
    v29 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v29 + 8) = 1;
    *(_QWORD *)(v29 + 16) = 0;
    *(_QWORD *)v29 = off_1E358E750;
    v81 = (WTF *)v29;
    JSC::DFG::compile(this, v28, (uint64_t)a2, 4u, -1, (uint64_t *)&v82, (uint64_t)&v81);
    v37 = v81;
    v81 = 0;
    if (v37)
    {
      if (*((_DWORD *)v37 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v37 + 8))(v37);
      else
        --*((_DWORD *)v37 + 2);
    }
    v38 = v82;
    if (!v82)
      goto LABEL_25;
    v82 = 0;
    LODWORD(v83) = 0;
    goto LABEL_23;
  }
  JSC::VM::logEvent<JSC::DFG::triggerFTLReplacementCompile(JSC::VM&,JSC::CodeBlock *,JSC::DFG::JITCode *)::$_2>(*(JSC::Profiler::Database **)(*((_QWORD *)a2 + 9) + 93016), (uint64_t)a2);
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [12],JSC::CodeBlock,char [60],char [2]>("Code block ", (uint64_t)a2, " was compiled but it doesn't have an optimized replacement.", "\n");
}

void JSC::VM::logEvent<operationTriggerTierUpNow::$_1>(JSC::Profiler::Database *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v25 = off_1E3572250;
  v26 = v28;
  v27 = xmmword_199122F80;
  v28[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "trigger in place, delaying indefinitely");
  v25[5]((WTF::StringPrintStream *)&v25);
  v12 = v26;
  v11 = v27;
  v24 = 0;
  if (v26)
  {
    if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1984BB67CLL);
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)(v27 + 17));
    *(_DWORD *)v13 = 1;
    v13[1] = v11;
    v24 = (WTF *)v13;
    v14 = v13 + 2;
    memcpy(v13 + 2, v12, v11);
    *((_BYTE *)v14 + v11) = 0;
    v15 = (unint64_t)v26;
    if (v26 == v28)
      goto LABEL_9;
  }
  else
  {
    v15 = 0;
  }
  WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "delayFTLCompile", &v24, v7, v8, v9, v10);
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    else
      --*(_DWORD *)v23;
  }
}

void operationTriggerTierUpNowInLoop(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  JSC::VM *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  JSC::DFG::JITCode *v14;
  JSC::CodeBlock *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  JSC::DFG::JITCode *v33;
  double v34;
  uint64_t vars0;

  v8 = a2;
  *(_QWORD *)(a1 + 40) = vars0;
  ++*(_DWORD *)(a1 + 916);
  v10 = *(JSC::VM **)(vars0 + 16);
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_QWORD *)v10 + 15);
  if (!v11 || *(_BYTE *)(v11 + 12) != 4)
  {
    WTF::dataLogLn<char [64],JSC::CodeBlock>(v10);
    __break(0xC471u);
    goto LABEL_41;
  }
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v15 = (JSC::CodeBlock *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
  do
  {
    v16 = __ldaxr(v12);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v12));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)(v11 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  }
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [56],JSC::ExecutionCounter<(JSC::CountingVariant)1>,char [2]>((uint64_t)v10, (uint64_t)v15 + 348);
  v18 = *((_QWORD *)v15 + 45);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = 9 * ((~(v8 << 15) + v8) ^ ((~(v8 << 15) + v8) >> 10));
    v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
    v22 = v19 & (v21 ^ HIWORD(v21));
    v23 = *(_DWORD *)(v18 + 16 * v22);
    if (v23 == v8)
    {
LABEL_13:
      JSC::DFG::tierUpCommon((JSC::DFG *)a1, vars0, v8, 0);
      goto LABEL_14;
    }
    v32 = 1;
    while (v23 != -1)
    {
      v22 = (v22 + v32) & v19;
      v23 = *(_DWORD *)(v18 + 16 * v22);
      ++v32;
      if (v23 == v8)
        goto LABEL_13;
    }
  }
  if (JSC::DFG::shouldTriggerFTLCompile(v10, v15, v14))
    JSC::DFG::triggerFTLReplacementCompile((JSC::DFG *)a1, v10, v15, v33);
LABEL_14:
  v24 = *((_QWORD *)v10 + 15);
  if (v24)
    LODWORD(v24) = *(unsigned __int8 *)(v24 + 12);
  v25 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
  if (v25 != &JSC::FunctionCodeBlock::s_info)
  {
    if (v25 == &JSC::EvalCodeBlock::s_info
      || v25 == &JSC::ProgramCodeBlock::s_info
      || v25 == &JSC::ModuleProgramCodeBlock::s_info)
    {
      v28 = (uint64_t *)(*((_QWORD *)v10 + 8) + 72);
      goto LABEL_19;
    }
    __break(0xC471u);
LABEL_41:
    JUMPOUT(0x1984BB888);
  }
  v26 = *((_QWORD *)v10 + 8);
  v27 = (uint64_t *)(v26 + 96);
  v28 = (uint64_t *)(v26 + 104);
  if (*(int *)(*((_QWORD *)v10 + 7) + 20) >= 0)
    v28 = v27;
LABEL_19:
  v29 = *v28;
  if (!v29)
    goto LABEL_25;
  v30 = *(_QWORD *)(v29 + 120);
  if (!v30)
  {
    if (v24 > 1)
      goto LABEL_34;
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x1984BB958);
  }
  if (v24 <= 1)
    goto LABEL_38;
  v31 = *(unsigned __int8 *)(v30 + 12);
  if (v31 <= 1)
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x1984BB8B0);
  }
  if (v31 > v24)
  {
    JSC::VM::logEvent<operationTriggerTierUpNowInLoop::$_0>(*(JSC::Profiler::Database **)(*((_QWORD *)v10 + 9) + 93016), (uint64_t)v10);
    JSC::DFG::JITCode::setOptimizationThresholdBasedOnCompilationResult((uint64_t)v15, v10, 3, v34);
  }
LABEL_25:
  --*(_DWORD *)(a1 + 916);
}

uint64_t JSC::DFG::tierUpCommon(JSC::DFG *a1, uint64_t a2, unsigned int a3, int a4)
{
  JSC::CodeBlock *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int ready;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  JSC::DFG::JITCode *v16;
  uint64_t v17;
  int8x16_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  JSC::DFG::JITCode *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v44;
  JSC::CodeBlock *v45;
  JSC::CodeBlock *v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  JSC::Profiler::Database *v56;
  JSC::CodeBlock *v57;
  JSC::Profiler::Database *v58;
  uint64_t v59;
  JSC::CodeBlock *v60;
  int v61;
  int v62;
  JSC::Profiler::Database *v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  unsigned int *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  JSC::CodeBlock *v97;
  JSC::CodeBlock *v98;
  _DWORD *v99;
  JSC::DFG::JITCode *v100;
  int v101;
  double v102;
  WTF **v103;
  JSC::CodeBlock *v104;
  JSC::Profiler::Database *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  unint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  WTF *v118;
  int v119;
  unsigned int v120;
  _DWORD *v121;
  uint64_t v122;
  unsigned int v123;
  _DWORD *v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  int v132;
  int v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  WTF *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF *v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  WTF *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  WTF *v206;
  JSC::Profiler::Database *v207;
  uint64_t v208;
  WTF *v209;
  uint64_t v210;
  uint64_t v211;
  JSC::CodeBlock **v212;
  JSC::CodeBlock *v213;
  unsigned int v214;
  WTF *v215;
  WTF **v216;
  WTF *v217;
  __int128 v218;
  _BYTE v219[128];
  uint64_t v220;

  v220 = *MEMORY[0x1E0C80C00];
  v214 = a3;
  v7 = *(JSC::CodeBlock **)(a2 + 16);
  v213 = v7;
  v8 = atomic_load(&JSC::JITWorklist::ensureGlobalWorklist(void)::once);
  if (v8 != -1)
  {
    v216 = &v215;
    v209 = (WTF *)&v216;
    std::__call_once(&JSC::JITWorklist::ensureGlobalWorklist(void)::once, &v209, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JITWorklist::ensureGlobalWorklist(void)::$_0 &&>>);
  }
  v9 = JSC::theGlobalJITWorklist;
  v10 = JSC::CodeBlock::baselineVersion((uint64_t)v7);
  ready = JSC::JITWorklist::completeAllReadyPlansForVM(v9, (uint64_t)a1, v10, 5);
  v12 = (unsigned int *)*((_QWORD *)v7 + 15);
  if (v12)
  {
    v13 = v12 + 2;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = v12 + 2;
  v17 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v12 + 88))(v12);
  do
  {
    v19 = __ldaxr(v15);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v15));
  if (!v20)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 32))(v12);
  }
  v21 = *(_QWORD *)(v17 + 376);
  if (!v21)
    goto LABEL_14;
  v22 = *(_DWORD *)(v21 - 8);
  v23 = 9 * ((v214 + ~(v214 << 15)) ^ ((v214 + ~(v214 << 15)) >> 10));
  v24 = (v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11);
  v25 = (v24 ^ HIWORD(v24)) & v22;
  v26 = *(_DWORD *)(v21 + 8 * v25);
  if (v26 != v214)
  {
    v61 = 1;
    while (v26 != -1)
    {
      v25 = ((_DWORD)v25 + v61) & v22;
      v26 = *(_DWORD *)(v21 + 8 * v25);
      ++v61;
      if (v26 == v214)
        goto LABEL_12;
    }
    v25 = *(unsigned int *)(v21 - 4);
  }
LABEL_12:
  if (v25 != *(_DWORD *)(v21 - 4)
    && (v27 = v21 + 8 * v25, v29 = *(unsigned __int8 *)(v27 + 4), v28 = (_BYTE *)(v27 + 4), v29 == 2))
  {
    *v28 = 0;
    v30 = 1;
  }
  else
  {
LABEL_14:
    v30 = 0;
  }
  if (ready == 1)
  {
    v57 = v213;
    if (v213)
    {
      v58 = *(JSC::Profiler::Database **)(*((_QWORD *)v213 + 9) + 93016);
      if (v58)
      {
        v216 = (WTF **)off_1E3572250;
        v217 = (WTF *)v219;
        v218 = xmmword_199122F80;
        v219[0] = 0;
        WTF::PrintStream::printf((WTF::PrintStream *)&v216, "%s", "still compiling");
        ((void (*)(WTF ***))v216[5])(&v216);
        WTF::StringPrintStream::toCString(&v216, (uint64_t *)&v209);
        if (v217 != (WTF *)v219)
          WTF::fastFree((unint64_t)v217, v134, v135, v136, v137, v138, v139, v140);
        JSC::Profiler::Database::logEvent(v58, (uint64_t)v57, "delayFTLCompile", &v209, v137, v138, v139, v140);
        v148 = v209;
        v209 = 0;
        if (v148)
        {
          if (*(_DWORD *)v148 == 1)
            WTF::fastFree((unint64_t)v148, v141, v142, v143, v144, v145, v146, v147);
          else
            --*(_DWORD *)v148;
        }
        v57 = v213;
      }
    }
    v59 = v17;
    v60 = v57;
    goto LABEL_45;
  }
  v212 = &v213;
  if (!a4)
    goto LABEL_21;
  v31 = *(_QWORD *)(v17 + 368);
  if (!v31)
    goto LABEL_21;
  v32 = *(_DWORD *)(v31 - 8);
  v33 = v214;
  v34 = 9 * ((v214 + ~(v214 << 15)) ^ ((v214 + ~(v214 << 15)) >> 10));
  v35 = (v34 ^ (v34 >> 6)) + ~((v34 ^ (v34 >> 6)) << 11);
  v36 = (v35 ^ HIWORD(v35)) & v32;
  v37 = *(_DWORD *)(v31 + 8 * v36);
  if (v37 != v214)
  {
    v62 = 1;
    while (v37 != -1)
    {
      v36 = ((_DWORD)v36 + v62) & v32;
      v37 = *(_DWORD *)(v31 + 8 * v36);
      ++v62;
      if (v37 == v214)
        goto LABEL_19;
    }
    v36 = *(unsigned int *)(v31 - 4);
  }
LABEL_19:
  if (v36 == *(_DWORD *)(v31 - 4) || (v38 = *(WTF **)(v17 + 384)) == 0)
  {
LABEL_21:
    if (ready == 2)
    {
      if (v213)
        JSC::VM::logEvent<JSC::DFG::triggerFTLReplacementCompile(JSC::VM&,JSC::CodeBlock *,JSC::DFG::JITCode *)::$_2>(*(JSC::Profiler::Database **)(*((_QWORD *)v213 + 9) + 93016), (uint64_t)v213);
      if (BYTE1(qword_1ECF4C332))
        WTF::dataLog<char [12],JSC::CodeBlock,char [60],char [2]>("Code block ", (uint64_t)v213, " was compiled but it doesn't have an optimized replacement.", "\n");
      return 0;
    }
    if ((v30 | JSC::DFG::shouldTriggerFTLCompile(v213, (JSC::CodeBlock *)v17, v16)) != 1)
      return 0;
    if (*(_BYTE *)(v17 + 344))
      v44 = 1;
    else
      v44 = v30;
    v45 = v213;
    if ((v44 & 1) != 0)
    {
      if (v213)
      {
        v63 = *(JSC::Profiler::Database **)(*((_QWORD *)v213 + 9) + 93016);
        if (v63)
        {
          v216 = (WTF **)off_1E3572250;
          v217 = (WTF *)v219;
          v218 = xmmword_199122F80;
          v219[0] = 0;
          WTF::PrintStream::printf((WTF::PrintStream *)&v216, "%s", "avoiding replacement compile");
          ((void (*)(WTF ***))v216[5])(&v216);
          WTF::StringPrintStream::toCString(&v216, (uint64_t *)&v209);
          if (v217 != (WTF *)v219)
            WTF::fastFree((unint64_t)v217, v164, v165, v166, v167, v168, v169, v170);
          JSC::Profiler::Database::logEvent(v63, (uint64_t)v45, "delayFTLCompile", &v209, v167, v168, v169, v170);
          v176 = v209;
          v209 = 0;
          if (v176)
          {
            if (*(_DWORD *)v176 == 1)
              WTF::fastFree((unint64_t)v176, v171, v172, v173, v174, v175, v40, v41);
            else
              --*(_DWORD *)v176;
          }
        }
      }
      goto LABEL_56;
    }
    JSC::DFG::triggerFTLReplacementCompile(a1, v213, (JSC::CodeBlock *)v17, v39);
    v46 = v213;
    v47 = *((_QWORD *)v213 + 15);
    if (v47)
      LODWORD(v47) = *(unsigned __int8 *)(v47 + 12);
    v48 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v213 & 0xFFFFFFFE) + 0x4C));
    if (v48 == &JSC::FunctionCodeBlock::s_info)
    {
      v49 = *((_QWORD *)v213 + 8);
      v50 = (uint64_t *)(v49 + 96);
      v51 = (uint64_t *)(v49 + 104);
      if (*(int *)(*((_QWORD *)v213 + 7) + 20) >= 0)
        v51 = v50;
    }
    else
    {
      if (v48 != &JSC::EvalCodeBlock::s_info
        && v48 != &JSC::ProgramCodeBlock::s_info
        && v48 != &JSC::ModuleProgramCodeBlock::s_info)
      {
        __break(0xC471u);
        JUMPOUT(0x1984BC324);
      }
      v51 = (uint64_t *)(*((_QWORD *)v213 + 8) + 72);
    }
    v52 = *v51;
    if (!v52)
      return 0;
    v53 = *(_QWORD *)(v52 + 120);
    if (v53)
    {
      if (v47 > 1)
      {
        v54 = *(unsigned __int8 *)(v53 + 12);
        if (v54 > 1)
        {
          if (v54 <= v47)
            return 0;
          v55 = *(_DWORD *)(v17 + 392);
          if (v55 < xmmword_1ECF4C514)
          {
            v56 = *(JSC::Profiler::Database **)(*((_QWORD *)v213 + 9) + 93016);
            if (v56)
            {
              v216 = (WTF **)off_1E3572250;
              v217 = (WTF *)v219;
              v218 = xmmword_199122F80;
              v219[0] = 0;
              WTF::PrintStream::printf((WTF::PrintStream *)&v216, "%s", "avoiding OSR entry compile");
              ((void (*)(WTF ***))v216[5])(&v216);
              WTF::StringPrintStream::toCString(&v216, (uint64_t *)&v209);
              if (v217 != (WTF *)v219)
                WTF::fastFree((unint64_t)v217, v149, v150, v151, v152, v153, v154, v155);
              JSC::Profiler::Database::logEvent(v56, (uint64_t)v46, "delayFTLCompile", &v209, v152, v153, v154, v155);
              v163 = v209;
              v209 = 0;
              if (v163)
              {
                if (*(_DWORD *)v163 == 1)
                  WTF::fastFree((unint64_t)v163, v156, v157, v158, v159, v160, v161, v162);
                else
                  --*(_DWORD *)v163;
              }
              v55 = *(_DWORD *)(v17 + 392);
            }
            v42 = 0;
            *(_DWORD *)(v17 + 392) = v55 + 1;
            return v42;
          }
LABEL_56:
          if (*(_QWORD *)(v17 + 384))
          {
            v120 = *(_DWORD *)(v17 + 392);
            if (v120 >= xmmword_1ECF4C514)
            {
              JSC::DFG::tierUpCommon(JSC::VM &,JSC::CallFrame *,JSC::BytecodeIndex,BOOL)::$_1::operator()(&v212, (JSC::DFG::JITCode *)v17);
              return 0;
            }
            v60 = v213;
            if (v213)
            {
              JSC::VM::logEvent<JSC::DFG::tierUpCommon(JSC::VM&,JSC::CallFrame *,JSC::BytecodeIndex,BOOL)::$_6>(*(JSC::Profiler::Database **)(*((_QWORD *)v213 + 9) + 93016), (uint64_t)v213);
              v120 = *(_DWORD *)(v17 + 392);
              v60 = v213;
            }
            *(_DWORD *)(v17 + 392) = v120 + 1;
            goto LABEL_163;
          }
          v64 = (uint64_t *)(v17 + 376);
          if ((v30 & 1) == 0)
          {
            v65 = *(_QWORD *)(v17 + 360);
            if (v65)
            {
              v66 = *(_DWORD *)(v65 - 8);
              v67 = 9 * ((v214 + ~(v214 << 15)) ^ ((v214 + ~(v214 << 15)) >> 10));
              v68 = (v67 ^ (v67 >> 6)) + ~((v67 ^ (v67 >> 6)) << 11);
              v69 = (v68 ^ HIWORD(v68)) & v66;
              v70 = *(_DWORD *)(v65 + 16 * v69);
              if (v70 != v214)
              {
                v116 = 1;
                while (v70 != -1)
                {
                  v69 = ((_DWORD)v69 + v116) & v66;
                  v70 = *(_DWORD *)(v65 + 16 * v69);
                  ++v116;
                  if (v70 == v214)
                    goto LABEL_60;
                }
                v69 = *(unsigned int *)(v65 - 4);
              }
LABEL_60:
              if (v69 != *(_DWORD *)(v65 - 4))
              {
                v71 = *(unsigned int **)(v65 + 16 * v69 + 8);
                if (v71)
                {
                  v123 = *v71;
                  v121 = v71 + 1;
                  v122 = v123;
                  if (v123)
                  {
                    v124 = &v121[v122];
                    v125 = *v64;
                    if (*v64)
                    {
                      v126 = *(_DWORD *)(v125 - 8);
                      while (1)
                      {
                        v128 = *--v124;
                        v127 = v128;
                        LODWORD(v209) = v128;
                        v129 = 9 * ((v128 + ~(v128 << 15)) ^ ((v128 + ~(v128 << 15)) >> 10));
                        v130 = (v129 ^ (v129 >> 6)) + ~((v129 ^ (v129 >> 6)) << 11);
                        v131 = (v130 ^ HIWORD(v130)) & v126;
                        v132 = *(_DWORD *)(v125 + 8 * v131);
                        if (v132 != v128)
                          break;
LABEL_135:
                        if (*(_BYTE *)(v125 + 8 * v131 + 4) != 2)
                          goto LABEL_159;
                        if (v124 == v121)
                          goto LABEL_62;
                      }
                      v133 = 1;
                      while (v132 != -1)
                      {
                        v131 = ((_DWORD)v131 + v133) & v126;
                        v132 = *(_DWORD *)(v125 + 8 * v131);
                        ++v133;
                        if (v132 == v127)
                          goto LABEL_135;
                      }
                    }
                    else
                    {
                      LODWORD(v209) = *(v124 - 1);
                    }
LABEL_159:
                    if (BYTE1(qword_1ECF4C332))
                      WTF::dataLog<char [12],JSC::BytecodeIndex,char [5],JSC::CodeBlock,char [22],JSC::BytecodeIndex,char [28],char [2]>((JSC::BytecodeIndex *)&v214, (uint64_t)v213, (JSC::BytecodeIndex *)&v209);
                    LOBYTE(v215) = 2;
                    WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::JITCode::TriggerReason>,WTF::HashTableTraits>::inlineSet<JSC::BytecodeIndex const&,JSC::DFG::JITCode::TriggerReason>((uint64_t *)(v17 + 376), (int *)&v209, &v215, (uint64_t)&v216);
                    goto LABEL_162;
                  }
                }
              }
            }
          }
LABEL_62:
          if ((a4 & 1) == 0)
            goto LABEL_162;
          v72 = *v64;
          if (!*v64)
            goto LABEL_162;
          v73 = *(_DWORD *)(v72 - 8);
          v74 = v214;
          v75 = 9 * ((v214 + ~(v214 << 15)) ^ ((v214 + ~(v214 << 15)) >> 10));
          v76 = (v75 ^ (v75 >> 6)) + ~((v75 ^ (v75 >> 6)) << 11);
          v77 = v76 ^ HIWORD(v76);
          v78 = v77 & v73;
          v79 = *(_DWORD *)(v72 + 8 * v78);
          if (v79 != v214)
          {
            v115 = 1;
            while (v79 != -1)
            {
              v78 = ((_DWORD)v78 + v115) & v73;
              v79 = *(_DWORD *)(v72 + 8 * v78);
              ++v115;
              if (v79 == v214)
                goto LABEL_65;
            }
            v78 = *(unsigned int *)(v72 - 4);
          }
LABEL_65:
          if (v78 == *(_DWORD *)(v72 - 4))
          {
LABEL_162:
            v60 = v213;
LABEL_163:
            v59 = v17;
LABEL_45:
            JSC::DFG::JITCode::setOptimizationThresholdBasedOnCompilationResult(v59, v60, 3, *(double *)v18.i64);
            return 0;
          }
          v209 = 0;
          v210 = 0;
          v211 = 0;
          v80 = *(_QWORD *)(v17 + 368);
          if (v80)
          {
            v81 = *(_DWORD *)(v80 - 8);
            v82 = v81 & v77;
            v83 = *(_DWORD *)(v80 + 8 * v82);
            if (v83 == v214)
            {
LABEL_68:
              v84 = *(unsigned int *)(v80 + 8 * v82 + 4);
              goto LABEL_69;
            }
            v119 = 1;
            while (v83 != -1)
            {
              v82 = ((_DWORD)v82 + v119) & v81;
              v83 = *(_DWORD *)(v80 + 8 * v82);
              ++v119;
              if (v83 == v214)
                goto LABEL_68;
            }
          }
          v84 = 0;
LABEL_69:
          v85 = 0;
          v86 = v72 + 8 * v78;
          v87 = (unsigned int *)v213;
          v88 = 2;
          if (v214 != -1 && v214 != 0x3FFFFFFF)
          {
            if (v214 >> 28)
            {
              v85 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v85 = 0;
              *(_DWORD *)(v85 + 8) = v74;
              v88 = 1;
            }
            else
            {
              v88 = 0;
              v85 = (unint64_t)v214 << 36;
            }
          }
          v89 = v86 + 4;
          v208 = v85 | v88;
          JSC::DFG::JITCode::reconstruct(v17, a2, v87, &v208, v84, (uint64_t)&v209, v18, v40, v41);
          if ((v208 & 1) != 0 && (v208 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v208 & 0xFFFFFFFF8, v90, v91, v92, v93, v94, v95, v96);
          v97 = (JSC::CodeBlock *)JSC::ScriptExecutable::newReplacementCodeBlockFor(*((_QWORD *)v213 + 8), *(_DWORD *)(*((_QWORD *)v213 + 7) + 20) >> 31, v91, v92, v93, v94, v95, v96);
          v98 = v213;
          if (v213 && *(_QWORD *)(*((_QWORD *)v213 + 9) + 93016))
          {
            v207 = *(JSC::Profiler::Database **)(*((_QWORD *)v213 + 9) + 93016);
            v216 = (WTF **)off_1E3572250;
            v217 = (WTF *)v219;
            v218 = xmmword_199122F80;
            v219[0] = 0;
            WTF::StringPrintStream::toCString(&v216, (uint64_t *)&v215);
            if (v217 != (WTF *)v219)
              WTF::fastFree((unint64_t)v217, v177, v178, v179, v180, v181, v182, v183);
            JSC::Profiler::Database::logEvent(v207, (uint64_t)v98, "triggerFTLOSR", &v215, v180, v181, v182, v183);
            v191 = v215;
            v215 = 0;
            if (v191)
            {
              if (*(_DWORD *)v191 == 1)
                WTF::fastFree((unint64_t)v191, v184, v185, v186, v187, v188, v189, v190);
              else
                --*(_DWORD *)v191;
            }
            v98 = v213;
          }
          v99 = (_DWORD *)WTF::fastMalloc((WTF *)0x20);
          v99[2] = 1;
          *(_QWORD *)v99 = off_1E358E780;
          *((_QWORD *)v99 + 2) = 0;
          *((_QWORD *)v99 + 3) = v89;
          v216 = (WTF **)v99;
          v101 = JSC::DFG::compile(a1, v97, (uint64_t)v98, 5u, v74, (uint64_t *)&v209, (uint64_t)&v216);
          v103 = v216;
          v216 = 0;
          if (v103)
          {
            if (*((_DWORD *)v103 + 2) == 1)
              (*((void (**)(WTF **))*v103 + 1))(v103);
            else
              --*((_DWORD *)v103 + 2);
          }
          if (*(_BYTE *)(v17 + 344))
            JSC::DFG::triggerFTLReplacementCompile(a1, v213, (JSC::CodeBlock *)v17, v100);
          if (v101 == 2)
          {
            v117 = *(_QWORD *)(v17 + 384);
            if (v117)
            {
              JSC::VM::logEvent<JSC::DFG::tierUpCommon(JSC::VM&,JSC::CallFrame *,JSC::BytecodeIndex,BOOL)::$_2>(*(JSC::Profiler::Database **)(*(_QWORD *)(v117 + 72) + 93016), v117, (JSC::BytecodeIndex *)&v214);
              v118 = *(WTF **)(v17 + 384);
            }
            else
            {
              v118 = 0;
            }
            if (BYTE1(qword_1ECF4C332))
            {
              v215 = v118;
              v216 = (WTF **)v17;
              WTF::dataLog<char [27],WTF::RawPointer,char [18],WTF::RawPointer,char [2]>((const void **)&v216, (const void **)&v215);
              v118 = *(WTF **)(v17 + 384);
            }
            v42 = JSC::FTL::prepareOSREntry((uint64_t)a1, a2, v213, (uint64_t)v118, v74, v84);
            if (!v42)
              JSC::DFG::tierUpCommon(JSC::VM &,JSC::CallFrame *,JSC::BytecodeIndex,BOOL)::$_1::operator()(&v212, (JSC::DFG::JITCode *)v17);
          }
          else
          {
            v104 = v213;
            if (v213)
            {
              v105 = *(JSC::Profiler::Database **)(*((_QWORD *)v213 + 9) + 93016);
              if (v105)
              {
                v216 = (WTF **)off_1E3572250;
                v217 = (WTF *)v219;
                v218 = xmmword_199122F80;
                v219[0] = 0;
                WTF::PrintStream::printf((WTF::PrintStream *)&v216, "%s", "OSR ecompilation not successful");
                ((void (*)(WTF ***))v216[5])(&v216);
                WTF::StringPrintStream::toCString(&v216, (uint64_t *)&v215);
                if (v217 != (WTF *)v219)
                  WTF::fastFree((unint64_t)v217, v192, v193, v194, v195, v196, v197, v198);
                JSC::Profiler::Database::logEvent(v105, (uint64_t)v104, "delayFTLCompile", &v215, v195, v196, v197, v198);
                v206 = v215;
                v215 = 0;
                if (v206)
                {
                  if (*(_DWORD *)v206 == 1)
                    WTF::fastFree((unint64_t)v206, v199, v200, v201, v202, v203, v204, v205);
                  else
                    --*(_DWORD *)v206;
                }
                v104 = v213;
              }
            }
            JSC::DFG::JITCode::setOptimizationThresholdBasedOnCompilationResult(v17, v104, 3, v102);
            v42 = 0;
          }
          v113 = v209;
          if (v209)
          {
            v209 = 0;
            LODWORD(v210) = 0;
            WTF::fastFree((unint64_t)v113, v106, v107, v108, v109, v110, v111, v112);
          }
          return v42;
        }
LABEL_88:
        __break(0xC471u);
        JUMPOUT(0x1984BBFBCLL);
      }
    }
    else if (v47 > 1)
    {
      goto LABEL_88;
    }
    __break(0xC471u);
    JUMPOUT(0x1984BC1A8);
  }
  v114 = *(unsigned int *)(v31 + 8 * v36 + 4);
  if (BYTE1(qword_1ECF4C332))
  {
    v216 = (WTF **)v17;
    v209 = v38;
    WTF::dataLog<char [17],WTF::RawPointer,char [18],WTF::RawPointer,char [2]>((const void **)&v216, (const void **)&v209);
  }
  v42 = JSC::FTL::prepareOSREntry((uint64_t)a1, a2, v213, (uint64_t)v38, v33, v114);
  if (v42)
    JSC::VM::logEvent<JSC::DFG::tierUpCommon(JSC::VM&,JSC::CallFrame *,JSC::BytecodeIndex,BOOL)::$_2>(*(JSC::Profiler::Database **)(*((_QWORD *)v38 + 9) + 93016), (uint64_t)v38, (JSC::BytecodeIndex *)&v214);
  else
    JSC::DFG::tierUpCommon(JSC::VM &,JSC::CallFrame *,JSC::BytecodeIndex,BOOL)::$_1::operator()(&v212, (JSC::DFG::JITCode *)v17);
  return v42;
}

void JSC::VM::logEvent<operationTriggerTierUpNowInLoop::$_0>(JSC::Profiler::Database *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v25 = off_1E3572250;
  v26 = v28;
  v27 = xmmword_199122F80;
  v28[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "OSR in loop failed, deferring");
  v25[5]((WTF::StringPrintStream *)&v25);
  v12 = v26;
  v11 = v27;
  v24 = 0;
  if (v26)
  {
    if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1984BC898);
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)(v27 + 17));
    *(_DWORD *)v13 = 1;
    v13[1] = v11;
    v24 = (WTF *)v13;
    v14 = v13 + 2;
    memcpy(v13 + 2, v12, v11);
    *((_BYTE *)v14 + v11) = 0;
    v15 = (unint64_t)v26;
    if (v26 == v28)
      goto LABEL_9;
  }
  else
  {
    v15 = 0;
  }
  WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "delayFTLCompile", &v24, v7, v8, v9, v10);
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    else
      --*(_DWORD *)v23;
  }
}

uint64_t operationTriggerOSREntryNow(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t result;
  uint64_t vars0;

  v8 = a2;
  *(_QWORD *)(a1 + 40) = vars0;
  ++*(_DWORD *)(a1 + 916);
  v10 = *(_QWORD *)(vars0 + 16);
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(v10 + 120);
  if (!v11 || *(_BYTE *)(v11 + 12) != 4)
  {
    WTF::dataLog<char [44],JSC::CodeBlock,char [2]>(v10);
    __break(0xC471u);
    JUMPOUT(0x1984BC99CLL);
  }
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
  do
  {
    v15 = __ldaxr(v12);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v12));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)(v11 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  }
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [52],JSC::ExecutionCounter<(JSC::CountingVariant)1>,char [2]>(v10, v14 + 348);
  result = JSC::DFG::tierUpCommon((JSC::DFG *)a1, vars0, v8, 1);
  --*(_DWORD *)(a1 + 916);
  return result;
}

void JSC::DFG::performPhantomInsertion(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  JSC::DFG *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int mayExit;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  JSC::DFG *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  JSC::DFG *v51;
  int isLiveInBytecode;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  JSC::UnlinkedCodeBlock ***v57;
  JSC::UnlinkedCodeBlock **v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  JSC::UnlinkedCodeBlock **v66;
  WTF *v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int v74;
  _DWORD *v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  int *v84;
  uint64_t *v85;
  int v86;
  unsigned int *v87;
  unsigned int v88;
  int v89;
  int v90;
  BOOL v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  int v100;
  unint64_t v101;
  int v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int *v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  uint64_t i;
  BOOL v122;
  uint64_t v123;
  WTF *v124;
  unint64_t v125;
  int64_t v126;
  unint64_t v127;
  int v128;
  unsigned int v129;
  uint64_t v131;
  WTF *v132;
  unint64_t v133;
  unsigned int v134;
  int64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  int v140;
  int v141;
  unsigned int v142;
  uint64_t v144;
  WTF *v145;
  unint64_t v146;
  int64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  unsigned __int8 *v159;
  int v160;
  _BOOL4 v161;
  unint64_t v162;
  int v163;
  unsigned __int8 *v164;
  int v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  JSC::UnlinkedCodeBlock **v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  JSC::DFG *v177;
  _BOOL4 v178;
  uint64_t v179;
  uint64_t v180;
  int64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unsigned int v186;
  unint64_t v187;
  void *v188;
  unint64_t v189;
  uint64_t v190;
  JSC::DFG *v191;
  void *v192;
  JSC::DFG::Graph *v193;
  unint64_t v194;
  uint64_t v195;
  char v196;
  JSC::UnlinkedCodeBlock ***v197;
  uint64_t *v198;
  int v199;
  int v200;
  uint64_t v201;
  JSC::UnlinkedCodeBlock ***v202;
  JSC::UnlinkedCodeBlock **v203;
  WTF *v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  unint64_t v211;
  unsigned int *v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  unsigned int *v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  int v220;
  unint64_t v221;
  int v222;
  char v223;
  JSC::UnlinkedCodeBlock ***v224;
  JSC::UnlinkedCodeBlock ***v225;
  unsigned __int8 *v226;
  unsigned int v227;
  _QWORD *v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t *v232;
  uint64_t *v233;
  uint64_t v234;
  WTF *v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  _DWORD *v239;
  unint64_t v240;
  void *v241;
  unsigned int v242;
  unsigned int v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t *v247;
  uint64_t *v248;
  uint64_t v249;
  WTF *v250;
  unint64_t v251;
  int64_t v252;
  unint64_t v253;
  _BOOL4 v254;
  unsigned int v255;
  unsigned int v256;
  _QWORD *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  JSC::DFG *v265;
  uint64_t v266;
  uint64_t v267;
  __int16 v268;
  uint64_t v269;
  __int16 v270;
  _BOOL4 v271;
  uint64_t v272;
  uint64_t v273;
  JSC::DFG *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  WTF *v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  JSC::DFG::Graph *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  JSC::BytecodeLivenessAnalysis *v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  _QWORD *v309;
  _QWORD *v310;
  unsigned __int8 *v311;
  unsigned int v312;
  int v314;
  int v315;
  unint64_t v316;
  unsigned __int8 *v317;
  int v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  JSC::DFG *v322;
  unint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  unint64_t v343;
  _QWORD *v344;
  unint64_t v345;
  JSC::BytecodeLivenessAnalysis *v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  void *v356;
  BOOL v357;
  BOOL v358;
  void *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  WTF *v366;
  WTF *v367;
  WTF *v368;
  uint64_t *v369;
  JSC::DFG *v370;
  unint64_t v371;
  JSC::BytecodeLivenessAnalysis *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  WTF *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  const void *v390;
  void *v391;
  void *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v399;
  _QWORD *v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t *v404;
  uint64_t *v405;
  JSC::DFG::Graph *v406;
  JSC::DFG *v407;
  unint64_t v408;
  JSC::DFG::Graph *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  void *v414;
  uint64_t v415;
  uint64_t v416;
  int64_t v417;
  JSC::DFG::Graph *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  JSC::DFG *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  JSC::DFG *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  unint64_t v437;
  uint64_t v438;
  JSC::UnlinkedCodeBlock ***v439;
  void *v440;
  unint64_t v441;
  JSC::DFG::Graph *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  void *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  JSC::DFG *v451;
  __int128 *v452;
  uint64_t v453;
  _QWORD *v455;
  unint64_t v456;
  unint64_t v457;
  uint64_t *v458;
  uint64_t *v459;
  JSC::DFG::Graph *v460;
  JSC::DFG *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  BOOL v473;
  uint64_t v474;
  unint64_t v475;
  JSC::DFG *v476;
  uint64_t v477;
  uint64_t v478;
  JSC::DFG *v479;
  unint64_t v480;
  unint64_t v481;
  uint64_t v482;
  JSC::DFG *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  JSC::UnlinkedCodeBlock **v488;
  uint64_t v489;
  unint64_t v490;
  BOOL v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  BOOL v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  BOOL v508;
  uint64_t v509;
  uint64_t v510;
  void *v511;
  uint64_t v512;
  uint64_t v513;
  BOOL v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  BOOL v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  BOOL v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  BOOL v526;
  uint64_t v527;
  JSC::DFG *v528;
  uint64_t v529;
  unint64_t v530;
  JSC::DFG *v531;
  uint64_t v532;
  unint64_t v533;
  JSC::DFG *v534;
  uint64_t v535;
  JSC::DFG *v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  JSC::DFG *v540;
  uint64_t v541;
  unint64_t v542;
  JSC::DFG *v543;
  uint64_t v544;
  uint64_t v545;
  unsigned int *v546;
  WTF *v547;
  _DWORD *v548;
  WTF *v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  JSC::DFG *v553;
  uint64_t v554;
  JSC::DFG::Graph *v555;
  uint64_t v556;
  JSC::DFG *v557;
  uint64_t v558;
  uint64_t v559;
  JSC::DFG *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  JSC::DFG *v571;
  JSC::DFG *v572;
  JSC::DFG *v573;
  JSC::DFG *v574;
  unint64_t v575;
  __int16 v576;
  __int16 v577;
  __int16 v578;
  __int16 v579;
  void *v580;
  void *v581;
  void *v582;
  void *v583;
  void *v584;
  void *v585;
  unsigned int v586;
  uint64_t v587;
  uint64_t v588;
  unint64_t v589;
  unint64_t v590;
  int v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  JSC::UnlinkedCodeBlock ***v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t *v604;
  unint64_t *v605;
  unint64_t *v606;
  unint64_t *v607;
  unint64_t *v608;
  JSC::UnlinkedCodeBlock **v609;
  uint64_t v610;
  unsigned int *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  char v616;
  uint64_t *v617;
  unsigned int v618;
  uint64_t *v619;
  unsigned int v620;
  unsigned int v621;
  unsigned int v622;
  unsigned int v623;
  int v624;
  unsigned int v625;
  int *v626;
  unsigned int v627;
  unsigned int v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  int v633;
  uint64_t v634;
  _DWORD *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  unsigned int v642;
  JSC::DFG::Node *v643;
  JSC::DFG::Node *v644;
  JSC::DFG::Node *v645;
  JSC::DFG::Node *v646;
  JSC::DFG::Node *v647;
  JSC::DFG::Node *v648;
  unint64_t v649;
  JSC::DFG::Node *v650;
  JSC::DFG::Node *v651;
  JSC::DFG::Node *v652;
  uint64_t v653;
  uint64_t v654;
  unsigned int v655;
  unsigned int v656;
  unsigned int v657;
  unint64_t v658;
  JSC::DFG *v659;
  JSC::DFG *v660;
  JSC::DFG::Graph *v661;
  JSC::DFG *v662;
  uint64_t v663;
  int v664;
  JSC::DFG *v665;
  int v666;
  void *v667;
  void *v668;
  void *v669;
  void *v670;
  void *v671;
  void *v672;
  void *v673;
  void *v674;
  void *v675;
  void *v676;
  void *v677;
  unint64_t v678;
  unint64_t v679;
  unint64_t v680;
  unint64_t v681;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  unint64_t v685;
  unint64_t v686;
  unint64_t v687;
  unint64_t v688;
  _BYTE v689[32];
  JSC::DFG *v690;
  __int128 v691;
  char v692;
  WTF *v693;
  JSC::DFG *v694;
  WTF *v695;
  uint64_t v696;
  _BYTE v697[128];
  WTF *v698;
  int v699;
  unsigned int v700;
  uint64_t v701;
  _QWORD v702[2];
  __int128 v703;
  double v704;
  __int128 v705;
  int *v706;
  uint64_t *v707;
  unsigned int *v708;
  uint64_t v709;
  unsigned int v710;
  int v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  __int128 v715;
  __int16 v716;
  uint64_t v717;
  uint64_t v718[3];

  JSC::DFG::Phase::Phase((uint64_t)v689, this, (uint64_t)"phantom insertion", 18);
  v694 = this;
  v695 = (WTF *)v697;
  v696 = 8;
  if (!*((_DWORD *)this + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x1984BFA04);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 6);
  v5 = *v4;
  v6 = *(unsigned int *)(*v4 + 84);
  v698 = 0;
  v699 = 0;
  v700 = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1984BFA0CLL);
    }
    v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
    v699 = v6;
    v698 = v7;
    if (v700)
      bzero(v7, 8 * v700);
  }
  v701 = *(_QWORD *)(v5 + 88);
  v702[0] = "DFG";
  v702[1] = 4;
  v703 = v691;
  v704 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v493 = mach_absolute_time();
    v495 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v495 != -1)
    {
      *(_QWORD *)&v705 = v718;
      *(_QWORD *)&v715 = &v705;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v715, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v494) = dword_1ECF4400C;
    v704 = (double)(v493 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v494 * 1000000000.0);
  }
  v8 = v690;
  if (*((_DWORD *)v690 + 239) != 1)
  {
    JSC::DFG::Graph::logAssertionFailure(v690, 0, (const WTF::CString *)"./dfg/DFGPhantomInsertionPhase.cpp", (const char *)0x39, "BOOL JSC::DFG::(anonymous namespace)::PhantomInsertionPhase::run()", "m_graph.m_refCountState == ExactRefCount");
    __break(0xC471u);
    JUMPOUT(0x1984BF5C8);
  }
  v9 = *((unsigned int *)v690 + 15);
  if ((_DWORD)v9)
  {
    do
    {
      if (*((_DWORD *)v8 + 15) <= --v9)
      {
        __break(0xC471u);
        JUMPOUT(0x1984BF974);
      }
      v10 = *(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v9);
      if (v10)
      {
        v11 = *(_DWORD *)(v10 + 36);
        if (v11)
        {
          v12 = v11 - 1;
          v13 = 8 * v12;
          do
          {
            if (*(_DWORD *)(v10 + 36) <= v12)
            {
              __break(0xC471u);
              JUMPOUT(0x1984BF948);
            }
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + v13) + 88) = 0;
            v13 -= 8;
            --v12;
          }
          while (v12 != -1);
        }
        v14 = *(_DWORD *)(v10 + 220);
        if (v14)
        {
          v15 = v14 - 1;
          v16 = 8 * v15;
          do
          {
            if (*(_DWORD *)(v10 + 220) <= v15)
            {
              __break(0xC471u);
              JUMPOUT(0x1984BF7FCLL);
            }
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 208) + v16) + 88) = 0;
            v16 -= 8;
            --v15;
          }
          while (v15 != -1);
        }
      }
    }
    while ((_DWORD)v9);
    v17 = *((unsigned int *)v8 + 15);
    if ((_DWORD)v17)
    {
      v18 = 0;
      while (!*(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v18))
      {
        if (v17 == ++v18)
          goto LABEL_486;
      }
      if ((_DWORD)v17 != (_DWORD)v18)
      {
        LODWORD(v19) = *((_DWORD *)v8 + 15);
        LODWORD(v20) = v18;
        v664 = v19;
        v665 = v8;
        while (1)
        {
          if (v19 <= v20)
          {
            __break(0xC471u);
            JUMPOUT(0x1984BF9BCLL);
          }
          v666 = v20;
          v21 = *(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v20);
          v712 = v21;
          if (v700)
          {
            v22 = 0;
            v23 = 8 * v700;
            do
            {
              *(_QWORD *)((char *)v698 + v22) = 0;
              v22 += 8;
            }
            while (v23 != v22);
            v21 = v712;
          }
          v710 = 0;
          v711 = 1;
          if (*(_DWORD *)(v21 + 220))
            break;
LABEL_371:
          v262 = HIDWORD(v696);
          if (HIDWORD(v696))
          {
            v324 = *(unsigned int *)(v21 + 216);
            v325 = *(unsigned int *)(v21 + 220);
            v326 = v325 + HIDWORD(v696);
            if (v326 > v324)
            {
              v387 = v324 + (v324 >> 2);
              if (v387 >= 0x10)
                v388 = v387 + 1;
              else
                v388 = 16;
              if (v388 <= v326)
                v389 = v325 + HIDWORD(v696);
              else
                v389 = v388;
              v390 = *(const void **)(v21 + 208);
              if (v389 < 9)
              {
                v391 = (void *)(v21 + 224);
                *(_QWORD *)(v21 + 208) = v21 + 224;
                *(_DWORD *)(v21 + 216) = 8;
              }
              else
              {
                if (v389 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984BF9FCLL);
                }
                v391 = (void *)WTF::fastMalloc((WTF *)(8 * v389));
                *(_DWORD *)(v21 + 216) = v389;
                *(_QWORD *)(v21 + 208) = v391;
              }
              memcpy(v391, v390, 8 * v325);
              if ((const void *)(v21 + 224) != v390 && v390 != 0)
              {
                if (*(const void **)(v21 + 208) == v390)
                {
                  *(_QWORD *)(v21 + 208) = 0;
                  *(_DWORD *)(v21 + 216) = 0;
                }
                WTF::fastFree((unint64_t)v390, v392, v3, v393, v394, v395, v396, v397);
              }
            }
            *(_DWORD *)(v21 + 220) = v326;
            if (v262 - 1 >= (unint64_t)HIDWORD(v696))
            {
              __break(0xC471u);
              JUMPOUT(0x1984BF9F4);
            }
            v327 = ~v262;
            v328 = v326;
            do
            {
              --v262;
              v329 = *((_QWORD *)v695 + 2 * v262) + v262;
              v330 = v328 - 1;
              if (v328 - 1 > v329)
              {
                v331 = v328 + v327;
                do
                {
                  if (v326 <= v331)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984BF964);
                  }
                  if (v326 <= v330)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984BF96CLL);
                  }
                  *(_QWORD *)(*(_QWORD *)(v21 + 208) + 8 * v330--) = *(_QWORD *)(*(_QWORD *)(v21 + 208) + 8 * v331--);
                }
                while (v330 > v329);
              }
              if (v326 <= v329)
              {
                __break(0xC471u);
                JUMPOUT(0x1984BF9E4);
              }
              *(_QWORD *)(*(_QWORD *)(v21 + 208) + 8 * v329) = *((_QWORD *)v695 + 2 * v262 + 1);
              ++v327;
              v328 = v329;
            }
            while (v262);
            HIDWORD(v696) = 0;
          }
          v8 = v665;
          v20 = (v666 + 1);
          v19 = *((unsigned int *)v665 + 15);
          if (v19 <= v20)
          {
            v263 = v664;
          }
          else
          {
            v263 = v664;
            while (!*(_QWORD *)(*((_QWORD *)v665 + 6) + 8 * v20))
            {
              if (v19 == ++v20)
              {
                LODWORD(v20) = *((_DWORD *)v665 + 15);
                break;
              }
            }
          }
          if (v263 == (_DWORD)v20)
          {
            v8 = v690;
            goto LABEL_486;
          }
        }
        v24 = 0;
        while (1)
        {
          v25 = *(_QWORD *)(*(_QWORD *)(v21 + 208) + 8 * v24);
          v26 = *(unsigned __int16 *)(v25 + 18);
          if (v26 > 0x27)
            goto LABEL_48;
          if (((1 << v26) & 0x300000) != 0)
          {
            v32 = *(_QWORD *)(v25 + 24) & 0xFF00FFFFFFFFFFFFLL;
            v30 = *(_QWORD *)(v25 + 72);
            if (HIDWORD(v30) == 2)
              goto LABEL_621;
            v31 = *(_QWORD *)(v25 + 72);
            if ((v30 & 0x80000000) != 0)
              goto LABEL_46;
          }
          else
          {
            if (((1 << v26) & 0xC000008000) == 0)
              goto LABEL_48;
            v27 = *(_QWORD **)(v25 + 72);
            v28 = v27;
            do
            {
              v29 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
            if (v29 != v27)
              *v27 = v29;
            v30 = v29[3];
            if (HIDWORD(v30) == 2)
            {
              v32 = 0;
LABEL_621:
              v33 = v701 + (uint64_t)(int)v30 + HIDWORD(v701);
              goto LABEL_47;
            }
            v31 = v30;
            v32 = 0;
            if ((v30 & 0x80000000) != 0)
            {
LABEL_46:
              v33 = (v31 ^ 0xFFFFFFFFLL) + v701;
              goto LABEL_47;
            }
          }
          v33 = ((v31 << 32) - 0x500000000) >> 32;
LABEL_47:
          *((_QWORD *)v698 + v33) = v32;
LABEL_48:
          mayExit = JSC::DFG::mayExit(v690, (JSC::DFG::Graph *)v25, (JSC::DFG::Node *)v3);
          if (mayExit)
          {
            v710 = v24;
            ++v711;
          }
          v41 = v690;
          if ((*(_BYTE *)(v25 + 56) & 0x10) != 0)
          {
            v183 = *(_QWORD *)(v25 + 24);
            v184 = *(_QWORD *)(v25 + 32);
            v42 = v711;
            if ((int)v184 + (int)v183 > v183)
            {
              v185 = *(_QWORD *)(v25 + 24);
              do
              {
                if (v185 >= *((unsigned int *)v41 + 41))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984BF9C4);
                }
                if ((*(_QWORD *)(*((_QWORD *)v41 + 19) + 8 * v185) & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  *(_DWORD *)((*(_QWORD *)(*((_QWORD *)v41 + 19) + 8 * v185) & 0xFF00FFFFFFFFFFFFLL) + 0x58) = v42;
                  v183 = *(_QWORD *)(v25 + 24);
                  v184 = *(_QWORD *)(v25 + 32);
                }
                ++v185;
              }
              while (v185 < (v183 + v184));
            }
          }
          else
          {
            v42 = v711;
            if ((*(_QWORD *)(v25 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              *(_DWORD *)((*(_QWORD *)(v25 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x58) = v711;
              if ((*(_QWORD *)(v25 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                *(_DWORD *)((*(_QWORD *)(v25 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x58) = v42;
                if ((*(_QWORD *)(v25 + 40) & 0xFF00FFFFFFFFFFFFLL) != 0)
                  *(_DWORD *)((*(_QWORD *)(v25 + 40) & 0xFF00FFFFFFFFFFFFLL) + 0x58) = v42;
              }
            }
          }
          *(_DWORD *)(v25 + 88) = v42;
          v709 = 0x3FFFFFFFLL;
          *(_QWORD *)&v705 = &v709;
          *((_QWORD *)&v705 + 1) = v689;
          v706 = &v711;
          v707 = &v712;
          v708 = &v710;
          if (*(_WORD *)(v25 + 18) != 16)
            goto LABEL_53;
          v149 = *(_QWORD **)(v25 + 72);
          v150 = v149;
          do
          {
            v151 = v150;
            v150 = (_QWORD *)*v150;
          }
          while (v150);
          v152 = v24;
          if (v151 != v149)
            *v149 = v151;
          v153 = v151[3];
          if (mayExit)
          {
            v709 = v153;
          }
          if (HIDWORD(v153) == 2)
          {
            v155 = HIDWORD(v701);
            v154 = v701 + (uint64_t)(int)v153;
          }
          else
          {
            if ((v153 & 0x80000000) == 0)
            {
              v156 = (uint64_t)(((unint64_t)v153 << 32) - 0x500000000) >> 32;
              goto LABEL_212;
            }
            v154 = v153 ^ 0xFFFFFFFFLL;
            v155 = v701;
          }
          v156 = v154 + v155;
LABEL_212:
          *((_QWORD *)v698 + v156) = 0;
          v41 = v690;
          v24 = v152;
LABEL_53:
          if (++v24 >= *(unsigned int *)(v712 + 220))
            v43 = 0;
          else
            v43 = *(_QWORD *)(*(_QWORD *)(v712 + 208) + 8 * v24);
          v44 = *(_QWORD *)(v25 + 8);
          if ((v44 & 1) != 0)
          {
            v425 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
            if ((v44 & 2) != 0
              || (v426 = *(unsigned int *)((v44 & 0xFFFFFFFF8) + 8), (_DWORD)v426 == 0x3FFFFFFF)
              || (_DWORD)v426 == -1)
            {
              v427 = 2;
            }
            else if (v426 >> 28)
            {
              v528 = v41;
              v529 = WTF::fastMalloc((WTF *)0x10);
              v41 = v528;
              *(_QWORD *)v529 = v425;
              *(_DWORD *)(v529 + 8) = v426;
              v427 = 1;
              v425 = v529;
            }
            else
            {
              v427 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
              v425 = v426 << 36;
            }
            v44 = v425 | v427;
          }
          if (v43)
          {
            v45 = *(_QWORD *)(v43 + 8);
            if ((v45 & 1) != 0)
            {
              v433 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
              if ((v45 & 2) != 0
                || (v434 = *(unsigned int *)((v45 & 0xFFFFFFFF8) + 8), (_DWORD)v434 == 0x3FFFFFFF)
                || (_DWORD)v434 == -1)
              {
                v435 = 2;
              }
              else if (v434 >> 28)
              {
                v530 = v44;
                v531 = v41;
                v532 = WTF::fastMalloc((WTF *)0x10);
                v41 = v531;
                v44 = v530;
                *(_QWORD *)v532 = v433;
                *(_DWORD *)(v532 + 8) = v434;
                v435 = 1;
                v433 = v532;
              }
              else
              {
                v435 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
                v433 = v434 << 36;
              }
              v45 = v433 | v435;
            }
            if ((*(_WORD *)(v43 + 18) & 0xFFFE) == 0x14)
            {
              v47 = *(_QWORD *)(v43 + 72);
              v49 = v45;
              if ((v45 & 1) != 0)
              {
                v448 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
                if ((v45 & 2) != 0
                  || (v449 = *(unsigned int *)((v45 & 0xFFFFFFFF8) + 8), (_DWORD)v449 == 0x3FFFFFFF)
                  || (_DWORD)v449 == -1)
                {
                  v450 = 2;
                }
                else if (v449 >> 28)
                {
                  v533 = v44;
                  v534 = v41;
                  v535 = WTF::fastMalloc((WTF *)0x10);
                  v41 = v534;
                  v44 = v533;
                  *(_QWORD *)v535 = v448;
                  *(_DWORD *)(v535 + 8) = v449;
                  v450 = 1;
                  v448 = v535;
                }
                else
                {
                  v450 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
                  v448 = v449 << 36;
                }
                v49 = v448 | v450;
              }
              v50 = v44;
              v714 = v49;
              v51 = v41;
              isLiveInBytecode = JSC::DFG::Graph::isLiveInBytecode((uint64_t)v41, v47, &v714, v36, v37, (uint64_t)v38, v39, v40);
              if ((v714 & 1) != 0 && (v714 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v714 & 0xFFFFFFFF8, (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
              if (isLiveInBytecode)
              {
                v46 = HIDWORD(v47);
              }
              else
              {
                v46 = 0;
                LODWORD(v47) = 0x3FFFFFFF;
              }
              v44 = v50;
              v41 = v51;
              if (v50 == v45)
                goto LABEL_60;
            }
            else
            {
              v46 = 0;
              LODWORD(v47) = 0x3FFFFFFF;
              if (v44 == v45)
              {
LABEL_60:
                v48 = (void *)(v44 & 1);
                goto LABEL_61;
              }
            }
            if ((v44 & 2) != 0)
            {
              LODWORD(v53) = -1;
            }
            else if ((v44 & 1) != 0)
            {
              LODWORD(v53) = *(_DWORD *)((v44 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v53 = v44 >> 36;
            }
            if ((v45 & 2) != 0)
            {
              LODWORD(v54) = -1;
            }
            else if ((v45 & 1) != 0)
            {
              LODWORD(v54) = *(_DWORD *)((v45 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v54 = v45 >> 36;
            }
            v55 = v44 & 0xFFFFFFFF8;
            if ((_DWORD)v53 == (_DWORD)v54)
            {
              v385 = v44 & 0xFFFFFFFF8;
              if ((v44 & 1) != 0)
                v385 = *(_QWORD *)v55;
              v386 = (_QWORD *)(v45 & 0xFFFFFFFF8);
              if ((v45 & 1) != 0)
                v386 = (_QWORD *)*v386;
              if ((_QWORD *)v385 == v386)
              {
                v48 = (void *)(v45 & 1);
                goto LABEL_61;
              }
            }
            v3 = v44 & 0xFFFFFFFF8;
            if ((v44 & 1) != 0)
              v3 = *(_QWORD *)v55;
            v48 = (void *)(v45 & 1);
            v56 = (_QWORD *)(v45 & 0xFFFFFFFF8);
            v687 = v24;
            if ((v45 & 1) != 0)
            {
              v438 = *v56;
              if (v3 == *v56)
              {
                v36 = v3 == 0;
                v439 = (JSC::UnlinkedCodeBlock ***)(v3 + 8);
                if (!v3)
                  v439 = (JSC::UnlinkedCodeBlock ***)((char *)v41 + 40);
                v58 = *v439;
                if ((v45 & 2) == 0)
                {
                  LODWORD(v59) = *(_DWORD *)((v45 & 0xFFFFFFFF8) + 8);
                  goto LABEL_88;
                }
LABEL_215:
                v68 = 0;
                goto LABEL_216;
              }
              if ((v45 & 2) != 0
                || (v496 = *(unsigned int *)((v45 & 0xFFFFFFFF8) + 8), (_DWORD)v496 == 0x3FFFFFFF)
                || (_DWORD)v496 == -1)
              {
                v188 = (void *)(v45 & 1);
                v497 = 2;
              }
              else
              {
                v188 = (void *)(v45 & 1);
                if (v496 >> 28)
                {
                  v686 = v44;
                  v553 = v41;
                  v590 = v46;
                  v554 = WTF::fastMalloc((WTF *)0x10);
                  v46 = v590;
                  v41 = v553;
                  v44 = v686;
                  *(_QWORD *)v554 = v438;
                  *(_DWORD *)(v554 + 8) = v496;
                  v497 = 1;
                  v438 = v554;
                }
                else
                {
                  v497 = *v56;
                  v438 = v496 << 36;
                }
              }
              v187 = v46;
              v189 = v44;
              v190 = v438 | v497;
            }
            else
            {
              if ((_QWORD *)v3 == v56)
              {
                v36 = v56 == 0;
                v57 = (JSC::UnlinkedCodeBlock ***)(v56 + 1);
                if (!v56)
                  v57 = (JSC::UnlinkedCodeBlock ***)((char *)v41 + 40);
                v58 = *v57;
                if ((v45 & 2) == 0)
                {
                  v59 = v45 >> 36;
LABEL_88:
                  if ((v59 & 3) == 0)
                  {
                    if ((v44 & 2) != 0)
                    {
                      v174 = v36;
                      v175 = v3;
                      v667 = (void *)(v45 & 1);
                      v678 = v44;
                      LODWORD(v176) = -1;
                    }
                    else if ((v44 & 1) != 0)
                    {
                      v174 = v36;
                      v175 = v3;
                      v667 = (void *)(v45 & 1);
                      v678 = v44;
                      LODWORD(v176) = *(_DWORD *)((v44 & 0xFFFFFFFF8) + 8);
                      if ((v176 & 3) == 0)
                      {
                        v67 = JSC::DFG::Graph::livenessFor(v41, v58, v3, v36, v37, (uint64_t)v38, v39, v40);
                        v68 = 1;
                        v48 = (void *)(v45 & 1);
                        v44 = v678;
                        v3 = v175;
                        v36 = v174;
                        goto LABEL_599;
                      }
                    }
                    else
                    {
                      if ((v44 & 0x3000000000) == 0)
                      {
                        v718[0] = (uint64_t)v58;
                        v60 = *((_QWORD *)v41 + 93);
                        if (!v60)
                          goto LABEL_416;
                        v61 = *(_DWORD *)(v60 - 8);
                        v62 = ((unint64_t)v58 + ~((_QWORD)v58 << 32)) ^ (((unint64_t)v58
                                                                               + ~((_QWORD)v58 << 32)) >> 22);
                        v63 = 9 * ((v62 + ~(v62 << 13)) ^ ((v62 + ~(v62 << 13)) >> 8));
                        v64 = (v63 ^ (v63 >> 15)) + ~((v63 ^ (v63 >> 15)) << 27);
                        v65 = v61 & ((v64 >> 31) ^ v64);
                        v66 = *(JSC::UnlinkedCodeBlock ***)(v60 + 16 * v65);
                        if (v66 != v58)
                        {
                          v182 = 1;
                          while (v66)
                          {
                            v65 = ((_DWORD)v65 + v182) & v61;
                            v66 = *(JSC::UnlinkedCodeBlock ***)(v60 + 16 * v65);
                            ++v182;
                            if (v66 == v58)
                              goto LABEL_94;
                          }
                          v65 = *(unsigned int *)(v60 - 4);
                        }
LABEL_94:
                        if (v65 == *(_DWORD *)(v60 - 4))
                        {
LABEL_416:
                          v656 = v36;
                          v297 = v3;
                          v298 = v44;
                          v299 = (JSC::BytecodeLivenessAnalysis *)*((_QWORD *)v58[7] + 11);
                          if (!v299)
                          {
                            v432 = v41;
                            v299 = (JSC::BytecodeLivenessAnalysis *)JSC::UnlinkedCodeBlock::livenessAnalysisSlow(v58[7], v58, v3, v36, v37, (uint64_t)v38, v39, v40);
                            v41 = v432;
                          }
                          v300 = (uint64_t *)((char *)v41 + 744);
                          JSC::BytecodeLivenessAnalysis::computeFullLiveness(v299, (JSC::CodeBlock *)v58, &v717);
                          v67 = (WTF *)v717;
                          WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::FullBytecodeLiveness>>(v300, v718, &v717, v301, v302, v303, v304, v305, (uint64_t)&v715);
                          v35 = v717;
                          v717 = 0;
                          if (v35)
                            std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)&v717, (WTF *)v35, v306, v307, v37, (uint64_t)v38, v39, v40);
                          v44 = v298;
                          v48 = (void *)(v45 & 1);
                          v3 = v297;
                          v36 = v656;
                        }
                        else
                        {
                          v67 = *(WTF **)(v60 + 16 * v65 + 8);
                        }
                        v68 = 1;
                        goto LABEL_97;
                      }
                      v174 = v36;
                      v175 = v3;
                      v667 = (void *)(v45 & 1);
                      v678 = v44;
                      v176 = v44 >> 36;
                    }
                    v177 = v41;
                    v178 = JSC::tmpLivenessForCheckpoint((uint64_t)v58, v176);
                    if (v178)
                    {
                      v186 = v178;
                      if ((v174 & 1) != 0)
                      {
                        do
                        {
                          v68 = 1;
                          v186 &= v186 - 1;
                        }
                        while (v186);
                        v36 = 1;
                        v48 = v667;
                        v44 = v678;
                        v41 = v177;
                        v3 = v175;
                      }
                      else
                      {
                        v3 = v175;
                        do
                        {
                          v342 = v3;
                          v3 = v342;
                          v68 = 1;
                          v186 &= v186 - 1;
                        }
                        while (v186);
                        v36 = 0;
                        v48 = v667;
                        v44 = v678;
                        v41 = v177;
                      }
                      goto LABEL_235;
                    }
                    v68 = 1;
                    v48 = v667;
                    v44 = v678;
                    v41 = v177;
                    v3 = v175;
                    goto LABEL_247;
                  }
                  v68 = 1;
LABEL_216:
                  if ((v44 & 2) != 0)
                  {
                    v158 = 3;
                    v157 = 0xFFFFFFFFLL;
                  }
                  else
                  {
                    if ((v44 & 1) != 0)
                      LODWORD(v157) = *(_DWORD *)((v44 & 0xFFFFFFFF8) + 8);
                    else
                      v157 = v44 >> 36;
                    v158 = v157 & 3;
                    if ((v157 & 3) == 0)
                    {
                      v161 = 0;
                      goto LABEL_225;
                    }
                    v157 = v157;
                  }
                  v159 = (unsigned __int8 *)(**((_QWORD **)v58[7] + 10) + (v157 >> 2));
                  v160 = *v159;
                  if ((v160 | 2) == 0x82)
                    v160 = v159[1];
                  v161 = 0;
                  switch(v160)
                  {
                    case 0:
                    case 1:
                    case 3:
                      v161 = v158 == 1;
                      break;
                    case 2:
                      v161 = 1;
                      break;
                    case 4:
                      break;
                    default:
                      __break(0xC471u);
                      JUMPOUT(0x1984BF3CCLL);
                  }
LABEL_225:
                  if (v68)
                  {
                    if ((v45 & 1) != 0)
                      LODWORD(v162) = *(_DWORD *)((v45 & 0xFFFFFFFF8) + 8);
                    else
                      v162 = v45 >> 36;
                    v163 = v162 & 3;
                    if ((v162 & 3) == 0)
                    {
                      v166 = 0;
LABEL_234:
                      if ((v161 & ~v166) == 0)
                      {
LABEL_235:
                        v718[0] = (uint64_t)v58;
                        v167 = *((_QWORD *)v41 + 93);
                        if (!v167)
                          goto LABEL_481;
                        v168 = *(_DWORD *)(v167 - 8);
                        v169 = ((unint64_t)v58 + ~((_QWORD)v58 << 32)) ^ (((unint64_t)v58
                                                                                + ~((_QWORD)v58 << 32)) >> 22);
                        v170 = 9 * ((v169 + ~(v169 << 13)) ^ ((v169 + ~(v169 << 13)) >> 8));
                        v171 = (v170 ^ (v170 >> 15)) + ~((v170 ^ (v170 >> 15)) << 27);
                        v172 = v168 & ((v171 >> 31) ^ v171);
                        v173 = *(JSC::UnlinkedCodeBlock ***)(v167 + 16 * v172);
                        if (v173 != v58)
                        {
                          v314 = 1;
                          while (v173)
                          {
                            v172 = ((_DWORD)v172 + v314) & v168;
                            v173 = *(JSC::UnlinkedCodeBlock ***)(v167 + 16 * v172);
                            ++v314;
                            if (v173 == v58)
                              goto LABEL_237;
                          }
                          v172 = *(unsigned int *)(v167 - 4);
                        }
LABEL_237:
                        if (v172 == *(_DWORD *)(v167 - 4))
                        {
LABEL_481:
                          v657 = v36;
                          v645 = (JSC::DFG::Node *)v3;
                          v671 = v48;
                          v345 = v44;
                          v346 = (JSC::BytecodeLivenessAnalysis *)*((_QWORD *)v58[7] + 11);
                          if (!v346)
                          {
                            v451 = v41;
                            v346 = (JSC::BytecodeLivenessAnalysis *)JSC::UnlinkedCodeBlock::livenessAnalysisSlow(v58[7], v58, v3, v36, v37, (uint64_t)v38, v39, v40);
                            v41 = v451;
                          }
                          v347 = (uint64_t *)((char *)v41 + 744);
                          JSC::BytecodeLivenessAnalysis::computeFullLiveness(v346, (JSC::CodeBlock *)v58, &v717);
                          v67 = (WTF *)v717;
                          WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::FullBytecodeLiveness>>(v347, v718, &v717, v348, v349, v350, v351, v352, (uint64_t)&v715);
                          v35 = v717;
                          v717 = 0;
                          if (v35)
                            std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)&v717, (WTF *)v35, v353, v354, v37, (uint64_t)v38, v39, v40);
                          v44 = v345;
                          v48 = v671;
                          v3 = (uint64_t)v645;
                          v36 = v657;
                        }
                        else
                        {
                          v67 = *(WTF **)(v167 + 16 * v172 + 8);
                        }
                        if ((v44 & 2) != 0)
                        {
                          LODWORD(v69) = -1;
                          goto LABEL_98;
                        }
                        if ((v44 & 1) == 0)
                        {
LABEL_97:
                          v69 = v44 >> 36;
LABEL_98:
                          v70 = (v69 & 3) + (v69 >> 2);
                          v71 = *(unsigned int **)v67;
                          v72 = **(_DWORD **)v67;
                          if (v72 <= v70)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1984BE9B0);
                          }
                          if (v68)
                          {
                            if (v48)
                              LODWORD(v73) = *(_DWORD *)((v45 & 0xFFFFFFFF8) + 8);
                            else
                              v73 = v45 >> 36;
                          }
                          else
                          {
                            LODWORD(v73) = -1;
                          }
                          v74 = (v73 & 3) + (v73 >> 2);
                          if (v72 <= v74)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1984BE9D0);
                          }
                          v75 = v71 + 2;
                          v76 = (uint64_t *)&v71[4 * v70 + 2];
                          v77 = v76[1] + 31;
                          if (v77 < 0x20)
                          {
LABEL_121:
                            v24 = v687;
                            goto LABEL_61;
                          }
                          v78 = 0;
                          v79 = *(_QWORD *)&v75[4 * v74];
                          v80 = *v76;
                          v81 = v77 >> 5;
                          v82 = *((_QWORD *)&v705 + 1);
                          v83 = (_DWORD *)v705;
                          v84 = v706;
                          v85 = v707;
                          v86 = -1;
                          v87 = v708;
                          while (1)
                          {
                            v88 = *(_DWORD *)(v80 + 4 * v78) & ~*(_DWORD *)(v79 + 4 * v78);
                            if (v88)
                              break;
LABEL_117:
                            ++v78;
                            v86 -= 32;
                            if (v78 == v81)
                              goto LABEL_121;
                          }
                          v89 = 32 * v78;
                          v90 = v86;
                          while (1)
                          {
                            if ((v88 & 1) == 0)
                              goto LABEL_108;
                            v92 = v90;
                            if ((v36 & 1) == 0)
                              v92 = (HIDWORD(*(_QWORD *)(v3 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v3 + 24) >> 28) >> 24 << 20))
                                  + ~v89;
                            if (v83[1] == v92 >> 31 && *v83 == v92)
                              goto LABEL_108;
                            if ((v92 & 0x80000000) != 0)
                            {
                              v93 = (v92 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v82 + 240);
                              v94 = *(_QWORD *)(v82 + 224);
                              v95 = *(_QWORD *)(v94 + 8 * v93);
                              if (v95)
                                goto LABEL_115;
                            }
                            else
                            {
                              v181 = ((unint64_t)v92 << 32) - 0x500000000;
                              v94 = *(_QWORD *)(v82 + 224);
                              v95 = *(_QWORD *)(v94 + (v181 >> 29));
                              if (v95)
                              {
                                v93 = v181 >> 32;
LABEL_115:
                                *(_QWORD *)(v94 + 8 * v93) = 0;
                                if (*(_DWORD *)(v95 + 88) != *v84)
                                {
                                  v626 = v84;
                                  v635 = v83;
                                  v655 = v36;
                                  v644 = (JSC::DFG::Node *)v3;
                                  v670 = v48;
                                  v681 = v44;
                                  ++*(_DWORD *)(v95 + 52);
                                  v611 = v87;
                                  v619 = v85;
                                  v289 = *v87;
                                  if (*(_DWORD *)(*v85 + 220) <= v289)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x1984BF938);
                                  }
                                  v597 = (v289 + 1);
                                  v603 = v82 + 72;
                                  v663 = v82;
                                  v290 = *(JSC::DFG::Graph **)(*(_QWORD *)(*v85 + 208) + 8 * v289);
                                  JSC::DFG::NodeOrigin::forInsertingAfter((uint64_t)&v715, v290, *(JSC::DFG::Node **)(v82 + 32), v290, v37, (uint64_t)v38, v39, v40);
                                  v293 = 0xC4000000000000;
                                  if ((*(_DWORD *)(v95 + 56) & 7) != 3)
                                    v293 = 0;
                                  v294 = 0xD0000000000000;
                                  if ((*(_DWORD *)(v95 + 56) & 7) != 5)
                                    v294 = v293;
                                  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v603, v597, 0, 23, (uint64_t)&v715, v294 | v95 & 0xFF00FFFFFFFFFFFFLL, v291, v292);
                                  if ((BYTE8(v715) & 1) != 0 && (*((_QWORD *)&v715 + 1) & 0xFFFFFFFF8) != 0)
                                    WTF::fastFree(*((_QWORD *)&v715 + 1) & 0xFFFFFFFF8, (void *)v35, v295, v296, v37, (uint64_t)v38, v39, v40);
                                  v48 = v670;
                                  v44 = v681;
                                  v83 = v635;
                                  v3 = (uint64_t)v644;
                                  v36 = v655;
                                  v82 = v663;
                                  v85 = v619;
                                  v84 = v626;
                                  v87 = v611;
                                  if ((v715 & 1) != 0 && (v715 & 0xFFFFFFFF8) != 0)
                                  {
                                    WTF::fastFree(v715 & 0xFFFFFFFF8, (void *)v35, (uint64_t)v644, v655, v37, (uint64_t)v38, v39, v40);
                                    v87 = v611;
                                    v85 = v619;
                                    v84 = v626;
                                    v83 = v635;
                                    v82 = v663;
                                    v36 = v655;
                                    v3 = (uint64_t)v644;
                                    v48 = v670;
                                    v44 = v681;
                                  }
                                }
                              }
                            }
LABEL_108:
                            ++v89;
                            --v90;
                            v91 = v88 > 1;
                            v88 >>= 1;
                            if (!v91)
                              goto LABEL_117;
                          }
                        }
LABEL_599:
                        LODWORD(v69) = *(_DWORD *)(v55 + 8);
                        goto LABEL_98;
                      }
                      v479 = v41;
                      v480 = v44;
                      v481 = 0x200000000;
                      v174 = v36;
                      if ((v36 & 1) == 0)
                        v481 = (*(_QWORD *)(v3 + 24) >> 22) | 0x200000000;
                      v482 = v3;
                      v3 = v482;
                      v44 = v480;
                      v41 = v479;
                      v48 = (void *)(v45 & 1);
LABEL_247:
                      v36 = v174;
                      goto LABEL_235;
                    }
                    v162 = v162;
                  }
                  else
                  {
                    v163 = 3;
                    v162 = 0xFFFFFFFFLL;
                  }
                  v164 = (unsigned __int8 *)(**((_QWORD **)v58[7] + 10) + (v162 >> 2));
                  v165 = *v164;
                  if ((v165 | 2) == 0x82)
                    v165 = v164[1];
                  v166 = 0;
                  switch(v165)
                  {
                    case 0:
                    case 1:
                    case 3:
                      v166 = v163 == 1;
                      break;
                    case 2:
                      v166 = 1;
                      break;
                    case 4:
                      goto LABEL_234;
                    default:
                      __break(0xC471u);
                      JUMPOUT(0x1984BF3ECLL);
                  }
                  goto LABEL_234;
                }
                goto LABEL_215;
              }
              v187 = v46;
              v188 = (void *)(v45 & 1);
              v189 = v44;
              v190 = v45;
            }
            v717 = v190;
            v191 = v41;
            JSC::DFG::Graph::localsAndTmpsLiveInBytecode((uint64_t)v41, &v717, (WTF::BitVector *)v718);
            if ((v717 & 1) != 0 && (v717 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v717 & 0xFFFFFFFF8, v192, v3, v36, v37, (uint64_t)v38, v39, v40);
            if (!*((_DWORD *)v191 + 15))
            {
              __break(0xC471u);
              JUMPOUT(0x1984BF9DCLL);
            }
            v193 = v191;
            v591 = *(_DWORD *)(**((_QWORD **)v191 + 6) + 92);
            v194 = v189;
            v195 = v189;
            v668 = v188;
            if ((v189 & 1) != 0)
            {
              v498 = *(_QWORD *)v55;
              if ((v189 & 2) != 0
                || (v499 = *(unsigned int *)(v55 + 8), (_DWORD)v499 == 0x3FFFFFFF)
                || (_DWORD)v499 == -1)
              {
                v500 = 2;
              }
              else if (v499 >> 28)
              {
                v555 = v193;
                v556 = WTF::fastMalloc((WTF *)0x10);
                v193 = v555;
                v194 = v189;
                *(_QWORD *)v556 = v498;
                *(_DWORD *)(v556 + 8) = v499;
                v500 = 1;
                v498 = v556;
              }
              else
              {
                v500 = v498;
                v498 = v499 << 36;
              }
              v195 = v498 | v500;
            }
            v196 = 0;
            v197 = (JSC::UnlinkedCodeBlock ***)((char *)v193 + 40);
            v713 = v195;
            v198 = &v713;
            v199 = 0x3FFFFFFF;
            v595 = (JSC::UnlinkedCodeBlock ***)((char *)v193 + 40);
            v601 = v195;
            v200 = 0x3FFFFFFF;
            v679 = v194;
            v661 = v193;
            while (1)
            {
              v201 = v195 & 0xFFFFFFFF8;
              if ((v195 & 1) != 0)
                v201 = *(_QWORD *)v201;
              v653 = v201;
              v633 = v199;
              v624 = v200;
              if (v201)
              {
                v221 = *(_QWORD *)(v201 + 24);
                v222 = HIDWORD(v221) & 0xFFFFF | ((int)(v221 >> 28) >> 24 << 20);
                v223 = (v221 >> 60) | (16 * *(_BYTE *)(v201 + 32));
                v642 = v222;
                if ((*(_BYTE *)(v201 + 32) & 1) != 0)
                {
                  v399 = (v222 + 3);
                  if ((_DWORD)v187 != v399 >> 31 || (_DWORD)v47 != (_DWORD)v399)
                  {
                    v401 = (_QWORD *)(2 * v718[0]);
                    v402 = v718[0] < 0 ? 63 : *v401;
                    v403 = (-4 - v222);
                    if (v402 <= v403)
                      goto LABEL_544;
                    v404 = v401 + 1;
                    v405 = v718;
                    if (v718[0] >= 0)
                      v405 = v404;
                    if (((*(unint64_t *)((char *)v405 + ((v403 >> 3) & 0x1FFFFFF8)) >> (-4
                                                                                              - v222)) & 1) == 0)
                    {
LABEL_544:
                      v406 = v193;
                      v222 = v642;
                      v201 = v653;
                      v193 = v406;
                      v197 = v595;
                      v223 = (*(_QWORD *)(v653 + 24) >> 60) | (16 * *(_BYTE *)(v653 + 32));
                    }
                  }
                }
                if ((v223 & 0xFu) - 3 <= 2)
                {
                  v453 = (v222 + 4);
                  if ((_DWORD)v187 != v453 >> 31 || (_DWORD)v47 != (_DWORD)v453)
                  {
                    v455 = (_QWORD *)(2 * v718[0]);
                    v456 = v718[0] < 0 ? 63 : *v455;
                    v457 = (-5 - v222);
                    if (v456 <= v457)
                      goto LABEL_633;
                    v458 = v455 + 1;
                    v459 = v718;
                    if (v718[0] >= 0)
                      v459 = v458;
                    if (((*(unint64_t *)((char *)v459 + ((v457 >> 3) & 0x1FFFFFF8)) >> (-5
                                                                                              - v222)) & 1) == 0)
                    {
LABEL_633:
                      v460 = v193;
                      v201 = v653;
                      v193 = v460;
                      v197 = v595;
                    }
                  }
                }
              }
              else
              {
                v642 = 0;
              }
              v202 = (JSC::UnlinkedCodeBlock ***)(v201 + 8);
              if (!v201)
                v202 = v197;
              v203 = *v202;
              v204 = JSC::DFG::Graph::livenessFor(v193, *v202, v3, v36, v37, (uint64_t)v38, v39, v40);
              v205 = *v198;
              v617 = v198;
              v206 = v187;
              if ((*v198 & 2) != 0)
              {
                if ((v205 & 1) == 0)
                {
                  v207 = 0xFFFFFFFFLL;
                  goto LABEL_279;
                }
                v488 = v203;
                v490 = *(_QWORD *)(v205 & 0xFFFFFFFF8);
                v207 = 0xFFFFFFFFLL;
                v208 = v653;
                v193 = v661;
                v209 = v633;
                v210 = v624;
                v3 = v642;
              }
              else
              {
                if ((v205 & 1) == 0)
                {
                  v207 = v205 >> 36;
LABEL_279:
                  v208 = v653;
                  v193 = v661;
                  v209 = v633;
                  v210 = v624;
                  v3 = v642;
                  goto LABEL_280;
                }
                v488 = v203;
                v489 = v205 & 0xFFFFFFFF8;
                v207 = *(unsigned int *)(v489 + 8);
                v490 = *(_QWORD *)v489;
                v491 = (_DWORD)v207 == -1 || v207 == 0x3FFFFFFF;
                v208 = v653;
                v193 = v661;
                v209 = v633;
                v210 = v624;
                v3 = v642;
                if (!v491)
                {
                  if (v207 >> 28)
                  {
                    v616 = v196;
                    v549 = v204;
                    v550 = v206;
                    v551 = WTF::fastMalloc((WTF *)0x10);
                    v3 = v642;
                    v210 = v624;
                    v209 = v633;
                    v208 = v653;
                    v193 = v661;
                    v206 = v550;
                    v552 = v551;
                    v204 = v549;
                    v196 = v616;
                    *(_QWORD *)v552 = v490;
                    *(_DWORD *)(v552 + 8) = v207;
                    v492 = 1;
                    v490 = v552;
                  }
                  else
                  {
                    v492 = *(_QWORD *)v489;
                    v490 = v207 << 36;
                  }
                  goto LABEL_685;
                }
              }
              v492 = 2;
LABEL_685:
              v205 = v490 | v492;
              v203 = v488;
LABEL_280:
              if ((v196 & 1) == 0)
                goto LABEL_281;
              v213 = v205 & 1;
              if ((v205 & 2) != 0)
              {
                v344 = (_QWORD *)(v205 & 0xFFFFFFFF8);
                LODWORD(v343) = -1;
                if ((v205 & 1) == 0)
                  goto LABEL_289;
              }
              else
              {
                if ((v205 & 1) == 0)
                {
                  v343 = v205 >> 36;
                  v344 = (_QWORD *)(v205 & 0xFFFFFFFF8);
                  goto LABEL_289;
                }
                v344 = (_QWORD *)(v205 & 0xFFFFFFFF8);
                LODWORD(v343) = *(_DWORD *)((v205 & 0xFFFFFFFF8) + 8);
              }
              v344 = (_QWORD *)*v344;
LABEL_289:
              v224 = (JSC::UnlinkedCodeBlock ***)(v344 + 1);
              v122 = v344 == 0;
              v225 = v595;
              if (!v122)
                v225 = v224;
              v226 = (unsigned __int8 *)(**((_QWORD **)(*v225)[7] + 10) + ((unint64_t)v343 >> 2));
              v227 = *v226;
              if ((v227 | 2) == 0x82)
                v227 = v226[1];
              if (v227 > 3 || v227 == 2)
              {
LABEL_281:
                v211 = (v207 & 3) + (v207 >> 2);
                v212 = *(unsigned int **)v204;
                if (**(unsigned int **)v204 <= v211)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984BEF44);
                }
                v213 = v205 & 1;
                goto LABEL_283;
              }
              v211 = (v207 & 3) + (v207 >> 2);
              v212 = (unsigned int *)*((_QWORD *)v204 + 1);
              if (*v212 <= v211)
              {
                __break(0xC471u);
                JUMPOUT(0x1984BEEDCLL);
              }
LABEL_283:
              if (v213 && (v205 & 0xFFFFFFFF8) != 0)
              {
                v487 = v206;
                WTF::fastFree(v205 & 0xFFFFFFFF8, (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
                v3 = v642;
                v210 = v624;
                v209 = v633;
                v208 = v653;
                v193 = v661;
                v206 = v487;
              }
              v609 = v203;
              v214 = *((unsigned int *)v203 + 5);
              if ((_DWORD)v214)
              {
                v215 = 0;
                v216 = &v212[4 * v211 + 2];
                v217 = v3 - v214;
                v218 = v214 + -(int)v3;
                v35 = v214 + (v47 - v3);
                v219 = -1;
                v220 = -1;
                do
                {
                  if ((int)v217 >= v210 && (int)v217 < v209
                    || ((*(_DWORD *)(*(_QWORD *)v216 + 4 * ((v214 + v219) >> 5)) >> (v214 + v220)) & 1) == 0
                    || (_DWORD)v206 == v217 >> 31 && (_DWORD)v35 == v215)
                  {
                    goto LABEL_303;
                  }
                  v229 = (_QWORD *)(2 * v718[0]);
                  v230 = v718[0] < 0 ? 63 : *v229;
                  v231 = (v218 + v220);
                  if (v230 > v231)
                  {
                    v232 = v229 + 1;
                    v233 = v718;
                    if (v718[0] >= 0)
                      v233 = v232;
                    if (((*(unint64_t *)((char *)v233 + ((v231 >> 3) & 0x1FFFFFF8)) >> (v218
                                                                                              + v220)) & 1) != 0)
                      goto LABEL_303;
                  }
                  if (v709 == __PAIR64__(v217 >> 31, v217))
                    goto LABEL_303;
                  if ((v217 & 0x80000000) != 0)
                  {
                    v234 = (v217 ^ 0xFFFFFFFFLL) + v701;
                    v235 = v698;
                    v236 = *((_QWORD *)v698 + v234);
                    if (v236)
                      goto LABEL_320;
                  }
                  else
                  {
                    v252 = ((unint64_t)v217 << 32) - 0x500000000;
                    v235 = v698;
                    v236 = *(_QWORD *)((char *)v698 + (v252 >> 29));
                    if (v236)
                    {
                      v234 = v252 >> 32;
LABEL_320:
                      *((_QWORD *)v235 + v234) = 0;
                      if (*(_DWORD *)(v236 + 88) != v711)
                      {
                        v580 = (void *)v35;
                        v587 = v218;
                        v589 = v206;
                        ++*(_DWORD *)(v236 + 52);
                        if (*(_DWORD *)(v712 + 220) <= v710)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1984BF9CCLL);
                        }
                        v575 = v710 + 1;
                        v418 = *(JSC::DFG::Graph **)(*(_QWORD *)(v712 + 208) + 8 * v710);
                        JSC::DFG::NodeOrigin::forInsertingAfter((uint64_t)&v715, v418, v690, v418, v37, (uint64_t)v38, v39, v40);
                        v421 = 0xC4000000000000;
                        if ((*(_DWORD *)(v236 + 56) & 7) != 3)
                          v421 = 0;
                        v422 = 0xD0000000000000;
                        if ((*(_DWORD *)(v236 + 56) & 7) != 5)
                          v422 = v421;
                        JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>((uint64_t)&v694, v575, 0, 23, (uint64_t)&v715, v422 | v236 & 0xFF00FFFFFFFFFFFFLL, v419, v420);
                        if ((BYTE8(v715) & 1) != 0 && (*((_QWORD *)&v715 + 1) & 0xFFFFFFFF8) != 0)
                          WTF::fastFree(*((_QWORD *)&v715 + 1) & 0xFFFFFFFF8, v423, v424, v36, v37, (uint64_t)v38, v39, v40);
                        v208 = v653;
                        v193 = v661;
                        v218 = v587;
                        v206 = v589;
                        v209 = v633;
                        v210 = v624;
                        v3 = v642;
                        v35 = (uint64_t)v580;
                        if ((v715 & 1) != 0 && (v715 & 0xFFFFFFFF8) != 0)
                        {
                          WTF::fastFree(v715 & 0xFFFFFFFF8, v580, v642, v36, v37, (uint64_t)v38, v39, v40);
                          v35 = (uint64_t)v580;
                          v218 = v587;
                          v206 = v589;
                          v3 = v642;
                          v210 = v624;
                          v209 = v633;
                          v208 = v653;
                          v193 = v661;
                        }
                      }
                    }
                  }
LABEL_303:
                  ++v217;
                  --v220;
                  ++v215;
                  --v219;
                }
                while ((_DWORD)v214 != v215);
              }
              v237 = *v617;
              if ((*v617 & 2) != 0)
              {
                LODWORD(v35) = -1;
                v24 = v687;
                v238 = (uint64_t)v609;
              }
              else
              {
                v24 = v687;
                v238 = (uint64_t)v609;
                if ((v237 & 1) != 0)
                {
                  v35 = *(unsigned int *)((v237 & 0xFFFFFFFF8) + 8);
                  if ((v35 & 3) == 0)
                    goto LABEL_325;
                }
                else
                {
                  if ((v237 & 0x3000000000) == 0)
                    goto LABEL_325;
                  v35 = v237 >> 36;
                }
              }
              v253 = v206;
              v254 = JSC::tmpLivenessForCheckpoint(v238, v35);
              v3 = v642;
              v208 = v653;
              v193 = v661;
              v206 = v253;
              if (v254)
              {
                v255 = v254;
                do
                {
                  v256 = __clz(__rbit32(v255));
                  if (v208)
                    v256 += *(_DWORD *)(v208 + 24) >> 22;
                  if ((_DWORD)v206 != 2 || (_DWORD)v47 != v256)
                  {
                    v257 = (_QWORD *)(2 * v718[0]);
                    v258 = v718[0] < 0 ? 63 : *v257;
                    v259 = v256 + v591;
                    if (v258 <= v259)
                      goto LABEL_365;
                    v260 = v257 + 1;
                    v261 = v718;
                    if (v718[0] >= 0)
                      v261 = v260;
                    if (((*(unint64_t *)((char *)v261 + ((v259 >> 3) & 0x1FFFFFF8)) >> (v256
                                                                                              + v591)) & 1) == 0)
                    {
LABEL_365:
                      v3 = v642;
                      v208 = v653;
                      v193 = v661;
                      v206 = v253;
                    }
                  }
                  v255 &= v255 - 1;
                }
                while (v255);
              }
LABEL_325:
              if (!v208)
              {
                v48 = v668;
                v44 = v679;
                if ((v601 & 1) != 0 && (v601 & 0xFFFFFFFF8) != 0)
                {
                  WTF::fastFree(v601 & 0xFFFFFFFF8, (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
                  v48 = v668;
                  v44 = v679;
                }
                if ((v718[0] & 0x8000000000000000) == 0)
                {
                  v355 = v44;
                  v356 = v48;
                  WTF::fastFree(2 * v718[0], (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
                  v48 = v356;
                  v44 = v355;
                }
LABEL_61:
                if (!v48)
                  goto LABEL_62;
                v436 = v45 & 0xFFFFFFFF8;
                if ((v45 & 0xFFFFFFFF8) == 0)
                  goto LABEL_62;
                goto LABEL_582;
              }
              v187 = v206;
              v239 = *(_DWORD **)v208;
              v241 = v668;
              v240 = v679;
              if (*(_QWORD *)v208)
                LODWORD(v239) = *v239;
              v200 = v3 + 5;
              v199 = (_DWORD)v239 + v3 + 5;
              if ((int)v3 + 5 < v199)
              {
                v242 = v3 + 5;
                do
                {
                  v243 = v242;
                  if ((_DWORD)v187 == v242 >> 31 && v242 == (_DWORD)v47)
                    goto LABEL_338;
                  v244 = (_QWORD *)(2 * v718[0]);
                  v245 = v718[0] < 0 ? 63 : *v244;
                  v246 = ~v242;
                  if (v245 > v246)
                  {
                    v247 = v244 + 1;
                    v248 = v718;
                    if (v718[0] >= 0)
                      v248 = v247;
                    if (((*(unint64_t *)((char *)v248 + ((v246 >> 3) & 0x1FFFFFF8)) >> ~(_BYTE)v242) & 1) != 0)
                      goto LABEL_338;
                  }
                  if (v709 == __PAIR64__(v242 >> 31, v242))
                    goto LABEL_338;
                  if ((v242 & 0x80000000) != 0)
                  {
                    v249 = (v242 ^ 0xFFFFFFFFLL) + v701;
                    v250 = v698;
                    v251 = *((_QWORD *)v698 + v249);
                    if (v251)
                      goto LABEL_344;
                  }
                  else
                  {
                    v417 = ((unint64_t)v242 << 32) - 0x500000000;
                    v250 = v698;
                    v251 = *(_QWORD *)((char *)v698 + (v417 >> 29));
                    if (v251)
                    {
                      v249 = v417 >> 32;
LABEL_344:
                      *((_QWORD *)v250 + v249) = 0;
                      if (*(_DWORD *)(v251 + 88) != v711)
                      {
                        v630 = v200;
                        v639 = v199;
                        ++*(_DWORD *)(v251 + 52);
                        if (*(_DWORD *)(v712 + 220) <= v710)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1984BF9D4);
                        }
                        v440 = v241;
                        v441 = v240;
                        v649 = v710 + 1;
                        v442 = *(JSC::DFG::Graph **)(*(_QWORD *)(v712 + 208) + 8 * v710);
                        JSC::DFG::NodeOrigin::forInsertingAfter((uint64_t)&v715, v442, v690, v442, v37, (uint64_t)v38, v39, v40);
                        v445 = 0xC4000000000000;
                        if ((*(_DWORD *)(v251 + 56) & 7) != 3)
                          v445 = 0;
                        v446 = 0xD0000000000000;
                        if ((*(_DWORD *)(v251 + 56) & 7) != 5)
                          v446 = v445;
                        JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>((uint64_t)&v694, v649, 0, 23, (uint64_t)&v715, v446 | v251 & 0xFF00FFFFFFFFFFFFLL, v443, v444);
                        if ((BYTE8(v715) & 1) != 0 && (*((_QWORD *)&v715 + 1) & 0xFFFFFFFF8) != 0)
                          WTF::fastFree(*((_QWORD *)&v715 + 1) & 0xFFFFFFFF8, v447, v3, v36, v37, (uint64_t)v38, v39, v40);
                        v240 = v441;
                        v208 = v653;
                        v193 = v661;
                        v241 = v440;
                        v199 = v639;
                        v200 = v630;
                        if ((v715 & 1) != 0 && (v715 & 0xFFFFFFFF8) != 0)
                        {
                          WTF::fastFree(v715 & 0xFFFFFFFF8, (void *)v630, v3, v36, v37, (uint64_t)v38, v39, v40);
                          v200 = v630;
                          v199 = v639;
                          v208 = v653;
                          v193 = v661;
                          v241 = v440;
                          v240 = v441;
                        }
                      }
                    }
                  }
LABEL_338:
                  v242 = v243 + 1;
                }
                while (v243 + 1 != v199);
              }
              v195 = *(_QWORD *)(v208 + 16);
              v196 = 1;
              v198 = (uint64_t *)(v208 + 16);
              v197 = v595;
            }
          }
          if ((v44 & 1) != 0)
          {
            v468 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
            if ((v44 & 2) != 0
              || (v469 = *(unsigned int *)((v44 & 0xFFFFFFFF8) + 8), (_DWORD)v469 == 0x3FFFFFFF)
              || (_DWORD)v469 == -1)
            {
              v470 = 2;
            }
            else if (v469 >> 28)
            {
              v539 = v44;
              v540 = v41;
              v541 = WTF::fastMalloc((WTF *)0x10);
              v41 = v540;
              v44 = v539;
              *(_QWORD *)v541 = v468;
              *(_DWORD *)(v541 + 8) = v469;
              v470 = 1;
              v468 = v541;
            }
            else
            {
              v470 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
              v468 = v469 << 36;
            }
            v97 = v468 | v470;
            if (((v468 | v470) & 1) != 0)
            {
              v471 = *(_QWORD *)(v97 & 0xFFFFFFFF8);
              if ((v97 & 2) != 0
                || ((v472 = *(unsigned int *)((v97 & 0xFFFFFFFF8) + 8), (_DWORD)v472 != 0x3FFFFFFF)
                  ? (v473 = (_DWORD)v472 == -1)
                  : (v473 = 1),
                    v473))
              {
                v474 = 2;
              }
              else if (v472 >> 28)
              {
                v542 = v44;
                v543 = v41;
                v544 = v97;
                v545 = WTF::fastMalloc((WTF *)0x10);
                v97 = v544;
                v41 = v543;
                v44 = v542;
                *(_QWORD *)v545 = v471;
                *(_DWORD *)(v545 + 8) = v472;
                v474 = 1;
                v471 = v545;
              }
              else
              {
                v474 = *(_QWORD *)(v97 & 0xFFFFFFFF8);
                v471 = v472 << 36;
              }
              v96 = 0;
              v98 = v471 | v474;
            }
            else
            {
              v96 = 1;
              v98 = v468 | v470;
            }
          }
          else
          {
            v96 = 1;
            v97 = v44;
            v98 = v44;
          }
          v99 = 0;
          v35 = (uint64_t)v41 + 40;
          v714 = v98;
          v3 = (uint64_t)v41 + 744;
          v38 = &v714;
          v100 = 0x3FFFFFFF;
          v101 = v98;
          v102 = 0x3FFFFFFF;
          v688 = v24;
          while (1)
          {
            v36 = v101 & 0xFFFFFFFF8;
            if ((v101 & 1) != 0)
              v36 = *(_QWORD *)v36;
            if (v36)
            {
              v136 = *(_QWORD *)(v36 + 24);
              v137 = (uint64_t)(16 * v136) >> 56;
              v138 = HIDWORD(v136) & 0xFFFFF;
              v37 = v138 | ((_DWORD)v137 << 20);
              if ((*(_BYTE *)(v36 + 32) & 1) != 0)
              {
                v675 = (void *)v35;
                v682 = v44;
                v638 = v97;
                v648 = (JSC::DFG::Node *)v98;
                v629 = v96;
                v428 = v41;
                v429 = v3;
                v430 = v36;
                v431 = v138 | ((_DWORD)v137 << 20);
                v605 = v38;
                v38 = v605;
                v37 = v431;
                v36 = v430;
                v3 = v429;
                v35 = (uint64_t)v675;
                v44 = v682;
                v97 = v638;
                v98 = (unint64_t)v648;
                v96 = v629;
                v41 = v428;
                v139 = (*(_QWORD *)(v430 + 24) >> 60) | (16 * *(_BYTE *)(v430 + 32));
              }
              else
              {
                v139 = (v136 >> 60) | (16 * *(_BYTE *)(v36 + 32));
              }
              if ((v139 & 0xFu) - 3 <= 2)
              {
                v676 = (void *)v35;
                v684 = v44;
                v641 = v97;
                v651 = (JSC::DFG::Node *)v98;
                v631 = v96;
                v483 = v41;
                v484 = v3;
                v485 = v36;
                v486 = v37;
                v607 = v38;
                v38 = v607;
                v37 = v486;
                v36 = v485;
                v3 = v484;
                v35 = (uint64_t)v676;
                v44 = v684;
                v97 = v641;
                v98 = (unint64_t)v651;
                v96 = v631;
                v41 = v483;
              }
            }
            else
            {
              v37 = 0;
            }
            v103 = (uint64_t *)(v36 + 8);
            if (!v36)
              v103 = (uint64_t *)v35;
            v104 = *v103;
            v718[0] = *v103;
            v105 = *(_QWORD *)v3;
            if (!*(_QWORD *)v3)
              goto LABEL_506;
            v106 = *(_DWORD *)(v105 - 8);
            v107 = (~(v104 << 32) + v104) ^ ((unint64_t)(~(v104 << 32) + v104) >> 22);
            v108 = 9 * ((v107 + ~(v107 << 13)) ^ ((v107 + ~(v107 << 13)) >> 8));
            v109 = (v108 ^ (v108 >> 15)) + ~((v108 ^ (v108 >> 15)) << 27);
            v110 = v106 & ((v109 >> 31) ^ v109);
            v111 = *(_QWORD *)(v105 + 16 * v110);
            if (v111 != v104)
            {
              v341 = 1;
              while (v111)
              {
                v110 = ((_DWORD)v110 + v341) & v106;
                v111 = *(_QWORD *)(v105 + 16 * v110);
                ++v341;
                if (v111 == v104)
                  goto LABEL_133;
              }
              v110 = *(unsigned int *)(v105 - 4);
            }
LABEL_133:
            if (v110 == *(_DWORD *)(v105 - 4))
            {
LABEL_506:
              v604 = v38;
              v612 = v36;
              v620 = v37;
              v369 = (uint64_t *)v3;
              v672 = (void *)v35;
              v636 = v97;
              v646 = (JSC::DFG::Node *)v98;
              v627 = v96;
              v370 = v41;
              v371 = v44;
              v372 = *(JSC::BytecodeLivenessAnalysis **)(*(_QWORD *)(v104 + 56) + 88);
              if (!v372)
                v372 = (JSC::BytecodeLivenessAnalysis *)JSC::UnlinkedCodeBlock::livenessAnalysisSlow(*(JSC::UnlinkedCodeBlock **)(v104 + 56), (JSC::UnlinkedCodeBlock **)v104, v3, v36, v37, (uint64_t)v38, v39, v40);
              JSC::BytecodeLivenessAnalysis::computeFullLiveness(v372, (JSC::CodeBlock *)v104, &v717);
              v112 = v717;
              WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::FullBytecodeLiveness>>(v369, v718, &v717, v373, v374, v375, v376, v377, (uint64_t)&v715);
              v382 = (WTF *)v717;
              v717 = 0;
              if (v382)
                std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)&v717, v382, v378, v379, v380, v381, v39, v40);
              v44 = v371;
              v41 = v370;
              v97 = v636;
              v98 = (unint64_t)v646;
              v96 = v627;
              v35 = (uint64_t)v672;
              v3 = (uint64_t)v369;
              v38 = v604;
              v36 = v612;
              v37 = v620;
            }
            else
            {
              v112 = *(_QWORD *)(v105 + 16 * v110 + 8);
            }
            v113 = *v38;
            if ((*v38 & 2) != 0)
            {
              if ((v113 & 1) == 0)
              {
                v114 = 0xFFFFFFFFLL;
                goto LABEL_138;
              }
              v465 = *(_QWORD *)(v113 & 0xFFFFFFFF8);
              v114 = 0xFFFFFFFFLL;
            }
            else
            {
              if ((v113 & 1) == 0)
              {
                v114 = v113 >> 36;
                goto LABEL_138;
              }
              v464 = v113 & 0xFFFFFFFF8;
              v114 = *(unsigned int *)(v464 + 8);
              v465 = *(_QWORD *)v464;
              if ((_DWORD)v114 != -1 && v114 != 0x3FFFFFFF)
              {
                if (v114 >> 28)
                {
                  v677 = (void *)v35;
                  v685 = v44;
                  v536 = v41;
                  v537 = v97;
                  v632 = v96;
                  v652 = (JSC::DFG::Node *)v98;
                  v600 = v3;
                  v608 = v38;
                  v615 = v36;
                  v623 = v37;
                  v538 = WTF::fastMalloc((WTF *)0x10);
                  v38 = v608;
                  v36 = v615;
                  v37 = v623;
                  v3 = v600;
                  v35 = (uint64_t)v677;
                  v44 = v685;
                  v98 = (unint64_t)v652;
                  v96 = v632;
                  v97 = v537;
                  v41 = v536;
                  *(_QWORD *)v538 = v465;
                  *(_DWORD *)(v538 + 8) = v114;
                  v467 = 1;
                  v465 = v538;
                }
                else
                {
                  v467 = *(_QWORD *)v464;
                  v465 = v114 << 36;
                }
                goto LABEL_648;
              }
            }
            v467 = 2;
LABEL_648:
            v113 = v465 | v467;
LABEL_138:
            if ((v99 & 1) == 0)
              goto LABEL_139;
            v117 = v113 & 1;
            if ((v113 & 2) != 0)
            {
              v309 = (_QWORD *)(v113 & 0xFFFFFFFF8);
              LODWORD(v308) = -1;
              if ((v113 & 1) == 0)
                goto LABEL_426;
            }
            else
            {
              if ((v113 & 1) == 0)
              {
                v308 = v113 >> 36;
                v309 = (_QWORD *)(v113 & 0xFFFFFFFF8);
                goto LABEL_426;
              }
              v309 = (_QWORD *)(v113 & 0xFFFFFFFF8);
              LODWORD(v308) = *(_DWORD *)((v113 & 0xFFFFFFFF8) + 8);
            }
            v309 = (_QWORD *)*v309;
LABEL_426:
            if (v309)
              v310 = v309 + 1;
            else
              v310 = (_QWORD *)v35;
            v311 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*v310 + 56) + 80)
                                     + ((unint64_t)v308 >> 2));
            v312 = *v311;
            if ((v312 | 2) == 0x82)
              v312 = v311[1];
            if (v312 > 3 || v312 == 2)
            {
LABEL_139:
              v115 = (v114 & 3) + (v114 >> 2);
              v116 = *(unsigned int **)v112;
              if (*v116 <= v115)
              {
                __break(0xC471u);
                JUMPOUT(0x1984BED38);
              }
              v117 = v113 & 1;
              goto LABEL_141;
            }
            v115 = (v114 & 3) + (v114 >> 2);
            v116 = *(unsigned int **)(v112 + 8);
            if (*v116 <= v115)
            {
              __break(0xC471u);
              JUMPOUT(0x1984BEC9CLL);
            }
LABEL_141:
            if (v117 && (v113 & 0xFFFFFFFF8) != 0)
            {
              v683 = v44;
              v461 = v41;
              v640 = v97;
              v650 = (JSC::DFG::Node *)v98;
              v462 = v96;
              v463 = v35;
              v599 = v3;
              v606 = v38;
              v614 = v36;
              v622 = v37;
              WTF::fastFree(v113 & 0xFFFFFFFF8, (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
              v38 = v606;
              v36 = v614;
              v37 = v622;
              v3 = v599;
              v35 = v463;
              v97 = v640;
              v98 = (unint64_t)v650;
              v96 = v462;
              v41 = v461;
              v44 = v683;
            }
            v118 = *(unsigned int *)(v104 + 20);
            if ((_DWORD)v118)
            {
              v119 = &v116[4 * v115 + 2];
              v120 = v37 - v118;
              for (i = v118 - 1; (_DWORD)i != -1; --i)
              {
                if (((int)v120 < v102 || (int)v120 >= v100)
                  && ((*(_DWORD *)(*(_QWORD *)v119 + 4 * (i >> 5)) >> i) & 1) != 0)
                {
                  v122 = HIDWORD(v709) == v120 >> 31 && v120 == (_DWORD)v709;
                  if (!v122)
                  {
                    if ((v120 & 0x80000000) != 0)
                    {
                      v123 = (v120 ^ 0xFFFFFFFFLL) + v701;
                      v124 = v698;
                      v125 = *((_QWORD *)v698 + v123);
                      if (v125)
                        goto LABEL_155;
                    }
                    else
                    {
                      v126 = ((unint64_t)v120 << 32) - 0x500000000;
                      v124 = v698;
                      v125 = *(_QWORD *)((char *)v698 + (v126 >> 29));
                      if (v125)
                      {
                        v123 = v126 >> 32;
LABEL_155:
                        *((_QWORD *)v124 + v123) = 0;
                        if (*(_DWORD *)(v125 + 88) != v711)
                        {
                          v669 = (void *)v35;
                          v680 = v44;
                          v634 = v97;
                          v643 = (JSC::DFG::Node *)v98;
                          v625 = v96;
                          ++*(_DWORD *)(v125 + 52);
                          if (*(_DWORD *)(v712 + 220) <= v710)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1984BF99CLL);
                          }
                          v586 = v710;
                          v264 = *(_QWORD *)(*(_QWORD *)(v712 + 208) + 8 * v710);
                          v265 = v690;
                          v266 = *(_QWORD *)v264;
                          v596 = v3;
                          v602 = (uint64_t)v38;
                          v610 = v36;
                          v618 = v37;
                          if ((*(_QWORD *)v264 & 1) != 0)
                          {
                            v501 = v266 & 0xFFFFFFFF8;
                            v502 = *(_QWORD *)(v266 & 0xFFFFFFFF8);
                            if ((*(_QWORD *)v264 & 2) != 0
                              || ((v503 = *(unsigned int *)(v501 + 8), (_DWORD)v503 != 0x3FFFFFFF)
                                ? (v504 = (_DWORD)v503 == -1)
                                : (v504 = 1),
                                  v504))
                            {
                              v505 = 2;
                            }
                            else if (v503 >> 28)
                            {
                              v659 = v690;
                              v593 = *(_QWORD *)(*(_QWORD *)(v712 + 208) + 8 * v710);
                              v557 = v41;
                              v558 = WTF::fastMalloc((WTF *)0x10);
                              v41 = v557;
                              v264 = v593;
                              v559 = v558;
                              v265 = v659;
                              *(_QWORD *)v559 = v502;
                              *(_DWORD *)(v559 + 8) = v503;
                              v505 = 1;
                              v502 = v559;
                            }
                            else
                            {
                              v505 = v502;
                              v502 = v503 << 36;
                            }
                            v266 = v502 | v505;
                          }
                          v267 = *(_QWORD *)(v264 + 8);
                          if ((v267 & 1) != 0)
                          {
                            v581 = (void *)v266;
                            v506 = *(_QWORD *)(v267 & 0xFFFFFFFF8);
                            if ((v267 & 2) != 0
                              || ((v507 = *(unsigned int *)((v267 & 0xFFFFFFFF8) + 8), (_DWORD)v507 != 0x3FFFFFFF)
                                ? (v508 = (_DWORD)v507 == -1)
                                : (v508 = 1),
                                  v508))
                            {
                              v509 = 2;
                            }
                            else if (v507 >> 28)
                            {
                              v660 = v265;
                              v594 = v264;
                              v560 = v41;
                              v561 = WTF::fastMalloc((WTF *)0x10);
                              v41 = v560;
                              v264 = v594;
                              v562 = v561;
                              v265 = v660;
                              *(_QWORD *)v562 = v506;
                              *(_DWORD *)(v562 + 8) = v507;
                              v509 = 1;
                              v506 = v562;
                            }
                            else
                            {
                              v509 = *(_QWORD *)(v267 & 0xFFFFFFFF8);
                              v506 = v507 << 36;
                            }
                            v267 = v506 | v509;
                            v266 = (uint64_t)v581;
                          }
                          v654 = v267;
                          v662 = v41;
                          v268 = *(_WORD *)(v264 + 16);
                          if ((_BYTE)v268)
                          {
                            v269 = v266;
                            v270 = *(_WORD *)(v264 + 16);
                            v271 = JSC::DFG::clobbersExitState(v265, (JSC::DFG::Graph *)v264, (JSC::DFG::Node *)v3, v36, v37, (uint64_t)v38, v39, v40);
                            v268 = v270;
                            v266 = v269;
                            v267 = v654;
                            if (v271)
                              v268 &= 0xFF00u;
                          }
                          v272 = 0xC4000000000000;
                          if ((*(_DWORD *)(v125 + 56) & 7) != 3)
                            v272 = 0;
                          if ((*(_DWORD *)(v125 + 56) & 7) == 5)
                            v273 = 0xD0000000000000;
                          else
                            v273 = v272;
                          v274 = v694;
                          v275 = v266;
                          if ((v266 & 1) != 0)
                          {
                            v510 = v266 & 0xFFFFFFFF8;
                            v511 = (void *)v266;
                            v512 = *(_QWORD *)(v266 & 0xFFFFFFFF8);
                            v582 = v511;
                            if ((v511 & 2) != 0
                              || ((v513 = *(unsigned int *)(v510 + 8), (_DWORD)v513 != 0x3FFFFFFF)
                                ? (v514 = (_DWORD)v513 == -1)
                                : (v514 = 1),
                                  v514))
                            {
                              v515 = 2;
                            }
                            else if (v513 >> 28)
                            {
                              v576 = v268;
                              v567 = v273;
                              v571 = v694;
                              v563 = WTF::fastMalloc((WTF *)0x10);
                              v273 = v567;
                              v274 = v571;
                              v268 = v576;
                              v267 = v654;
                              *(_QWORD *)v563 = v512;
                              *(_DWORD *)(v563 + 8) = v513;
                              v515 = 1;
                              v512 = v563;
                            }
                            else
                            {
                              v515 = v512;
                              v512 = v513 << 36;
                            }
                            v275 = v512 | v515;
                            v266 = (uint64_t)v582;
                          }
                          v276 = v267;
                          v592 = v275;
                          if ((v267 & 1) != 0)
                          {
                            v583 = (void *)v266;
                            v516 = *(_QWORD *)(v267 & 0xFFFFFFFF8);
                            if ((v267 & 2) != 0
                              || ((v517 = *(unsigned int *)((v267 & 0xFFFFFFFF8) + 8), (_DWORD)v517 != 0x3FFFFFFF)
                                ? (v518 = (_DWORD)v517 == -1)
                                : (v518 = 1),
                                  v518))
                            {
                              v519 = 2;
                            }
                            else if (v517 >> 28)
                            {
                              v577 = v268;
                              v568 = v273;
                              v572 = v274;
                              v564 = WTF::fastMalloc((WTF *)0x10);
                              v273 = v568;
                              v274 = v572;
                              v268 = v577;
                              *(_QWORD *)v564 = v516;
                              *(_DWORD *)(v564 + 8) = v517;
                              v519 = 1;
                              v516 = v564;
                              v275 = v592;
                            }
                            else
                            {
                              v519 = *(_QWORD *)(v267 & 0xFFFFFFFF8);
                              v516 = v517 << 36;
                            }
                            v276 = v516 | v519;
                            v266 = (uint64_t)v583;
                          }
                          v277 = v275;
                          v588 = v276;
                          if ((v275 & 1) != 0)
                          {
                            v584 = (void *)v266;
                            v520 = *(_QWORD *)(v275 & 0xFFFFFFFF8);
                            if ((v275 & 2) != 0
                              || ((v521 = *(unsigned int *)((v275 & 0xFFFFFFFF8) + 8), (_DWORD)v521 != 0x3FFFFFFF)
                                ? (v522 = (_DWORD)v521 == -1)
                                : (v522 = 1),
                                  v522))
                            {
                              v523 = 2;
                            }
                            else if (v521 >> 28)
                            {
                              v578 = v268;
                              v569 = v273;
                              v573 = v274;
                              v565 = WTF::fastMalloc((WTF *)0x10);
                              v273 = v569;
                              v274 = v573;
                              v268 = v578;
                              *(_QWORD *)v565 = v520;
                              *(_DWORD *)(v565 + 8) = v521;
                              v523 = 1;
                              v520 = v565;
                              v276 = v588;
                            }
                            else
                            {
                              v523 = *(_QWORD *)(v275 & 0xFFFFFFFF8);
                              v520 = v521 << 36;
                            }
                            v277 = v520 | v523;
                            v266 = (uint64_t)v584;
                          }
                          *(_QWORD *)&v715 = v277;
                          v278 = v276;
                          if ((v276 & 1) != 0)
                          {
                            v585 = (void *)v266;
                            v524 = *(_QWORD *)(v276 & 0xFFFFFFFF8);
                            if ((v276 & 2) != 0
                              || ((v525 = *(unsigned int *)((v276 & 0xFFFFFFFF8) + 8), (_DWORD)v525 != 0x3FFFFFFF)
                                ? (v526 = (_DWORD)v525 == -1)
                                : (v526 = 1),
                                  v526))
                            {
                              v527 = 2;
                            }
                            else if (v525 >> 28)
                            {
                              v579 = v268;
                              v570 = v273;
                              v574 = v274;
                              v566 = WTF::fastMalloc((WTF *)0x10);
                              v273 = v570;
                              v274 = v574;
                              v268 = v579;
                              *(_QWORD *)v566 = v524;
                              *(_DWORD *)(v566 + 8) = v525;
                              v527 = 1;
                              v524 = v566;
                            }
                            else
                            {
                              v527 = *(_QWORD *)(v276 & 0xFFFFFFFF8);
                              v524 = v525 << 36;
                            }
                            v278 = v524 | v527;
                            v266 = (uint64_t)v585;
                          }
                          *((_QWORD *)&v715 + 1) = v278;
                          v716 = v268;
                          v718[0] = v273 | v125 & 0xFF00FFFFFFFFFFFFLL;
                          LOWORD(v717) = 23;
                          v284 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::Edge &>((uint64_t)v274 + 1032, (__int16 *)&v717, (uint64_t)&v715, v718, v37, (uint64_t)v38, v39, v40);
                          if ((BYTE8(v715) & 1) != 0 && (*((_QWORD *)&v715 + 1) & 0xFFFFFFFF8) != 0)
                            WTF::fastFree(*((_QWORD *)&v715 + 1) & 0xFFFFFFFF8, v279, v280, v281, v282, v283, v39, v40);
                          if ((v715 & 1) != 0 && (v715 & 0xFFFFFFFF8) != 0)
                            WTF::fastFree(v715 & 0xFFFFFFFF8, v279, v280, v281, v282, v283, v39, v40);
                          *(_QWORD *)&v715 = v586 + 1;
                          *((_QWORD *)&v715 + 1) = v284;
                          v285 = HIDWORD(v696);
                          if (HIDWORD(v696) && *((_QWORD *)v695 + 2 * HIDWORD(v696) - 2) > (unint64_t)(v586 + 1))
                          {
                            JSC::DFG::InsertionSet::insertSlow((uint64_t)&v694, (unint64_t *)&v715, v280, v281, v282, v283, v39, v40);
                          }
                          else
                          {
                            if (HIDWORD(v696) == (_DWORD)v696)
                            {
                              v452 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v695, (void *)(HIDWORD(v696) + 1), (unint64_t)&v715, v281, v282, v283, v39, v40);
                              v285 = HIDWORD(v696);
                              v286 = v695;
                              v287 = *v452;
                            }
                            else
                            {
                              v286 = v695;
                              v287 = v715;
                            }
                            *((_OWORD *)v286 + v285) = v287;
                            ++HIDWORD(v696);
                          }
                          v35 = (uint64_t)v669;
                          v44 = v680;
                          v288 = v654;
                          v41 = v662;
                          v97 = v634;
                          v98 = (unint64_t)v643;
                          v96 = v625;
                          v3 = v596;
                          v38 = (unint64_t *)v602;
                          v36 = v610;
                          v37 = v618;
                          if ((v588 & 1) != 0 && (v588 & 0xFFFFFFFF8) != 0)
                          {
                            WTF::fastFree(v588 & 0xFFFFFFFF8, v669, v596, v610, v618, v602, v39, v40);
                            v98 = (unint64_t)v643;
                            v288 = v654;
                            v38 = (unint64_t *)v602;
                            v36 = v610;
                            v37 = v618;
                            v3 = v596;
                            v35 = (uint64_t)v669;
                            v44 = v680;
                            v96 = v625;
                            v97 = v634;
                            v41 = v662;
                          }
                          if ((v592 & 1) != 0 && (v592 & 0xFFFFFFFF8) != 0)
                          {
                            WTF::fastFree(v592 & 0xFFFFFFFF8, (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
                            v98 = (unint64_t)v643;
                            v288 = v654;
                            v38 = (unint64_t *)v602;
                            v36 = v610;
                            v37 = v618;
                            v3 = v596;
                            v35 = (uint64_t)v669;
                            v44 = v680;
                            v96 = v625;
                            v97 = v634;
                            v41 = v662;
                          }
                          if ((v288 & 1) != 0 && (v288 & 0xFFFFFFFF8) != 0)
                          {
                            WTF::fastFree(v288 & 0xFFFFFFFF8, (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
                            v38 = (unint64_t *)v602;
                            v36 = v610;
                            v37 = v618;
                            v3 = v596;
                            v35 = (uint64_t)v669;
                            v44 = v680;
                            v97 = v634;
                            v98 = (unint64_t)v643;
                            v96 = v625;
                            v41 = v662;
                          }
                          if ((v266 & 1) != 0 && (v266 & 0xFFFFFFFF8) != 0)
                          {
                            WTF::fastFree(v266 & 0xFFFFFFFF8, (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
                            v38 = (unint64_t *)v602;
                            v36 = v610;
                            v37 = v618;
                            v3 = v596;
                            v35 = (uint64_t)v669;
                            v44 = v680;
                            v97 = v634;
                            v98 = (unint64_t)v643;
                            v96 = v625;
                            v41 = v662;
                          }
                        }
                      }
                    }
                  }
                }
                ++v120;
              }
            }
            v127 = *v38;
            if ((*v38 & 2) != 0)
              break;
            v24 = v688;
            if ((v127 & 1) != 0)
            {
              LODWORD(v316) = *(_DWORD *)((v127 & 0xFFFFFFFF8) + 8);
              if ((v316 & 3) == 0)
                goto LABEL_162;
            }
            else
            {
              if ((v127 & 0x3000000000) == 0)
                goto LABEL_162;
              v316 = v127 >> 36;
            }
            v315 = v316 & 3;
            if ((v316 & 3) != 0)
            {
              v316 = v316;
              goto LABEL_444;
            }
LABEL_162:
            if (!v36)
              goto LABEL_183;
LABEL_163:
            if (*(_QWORD *)v36)
              v128 = **(_DWORD **)v36;
            else
              v128 = 0;
            v102 = v37 + 5;
            v100 = v128 + v37 + 5;
            if ((int)v37 + 5 < v100)
            {
              v134 = v37 + 5;
              do
              {
                v129 = v134;
                if (HIDWORD(v709) != v134 >> 31 || v134 != (_DWORD)v709)
                {
                  if ((v134 & 0x80000000) != 0)
                  {
                    v131 = (v134 ^ 0xFFFFFFFFLL) + v701;
                    v132 = v698;
                    v133 = *((_QWORD *)v698 + v131);
                    if (v133)
                      goto LABEL_175;
                  }
                  else
                  {
                    v135 = ((unint64_t)v134 << 32) - 0x500000000;
                    v132 = v698;
                    v133 = *(_QWORD *)((char *)v698 + (v135 >> 29));
                    if (v133)
                    {
                      v131 = v135 >> 32;
LABEL_175:
                      *((_QWORD *)v132 + v131) = 0;
                      if (*(_DWORD *)(v133 + 88) != v711)
                      {
                        v613 = v36;
                        v598 = v3;
                        v674 = (void *)v35;
                        v637 = v97;
                        v647 = (JSC::DFG::Node *)v98;
                        v628 = v96;
                        ++*(_DWORD *)(v133 + 52);
                        if (*(_DWORD *)(v712 + 220) <= v710)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1984BF9A4);
                        }
                        v407 = v41;
                        v408 = v44;
                        v658 = v710 + 1;
                        v409 = *(JSC::DFG::Graph **)(*(_QWORD *)(v712 + 208) + 8 * v710);
                        JSC::DFG::NodeOrigin::forInsertingAfter((uint64_t)&v715, v409, v690, v409, v37, (uint64_t)v38, v39, v40);
                        v412 = 0xC4000000000000;
                        if ((*(_DWORD *)(v133 + 56) & 7) != 3)
                          v412 = 0;
                        v413 = 0xD0000000000000;
                        if ((*(_DWORD *)(v133 + 56) & 7) != 5)
                          v413 = v412;
                        JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>((uint64_t)&v694, v658, 0, 23, (uint64_t)&v715, v413 | v133 & 0xFF00FFFFFFFFFFFFLL, v410, v411);
                        if ((BYTE8(v715) & 1) != 0 && (*((_QWORD *)&v715 + 1) & 0xFFFFFFFF8) != 0)
                          WTF::fastFree(*((_QWORD *)&v715 + 1) & 0xFFFFFFFF8, v414, v415, v416, v37, (uint64_t)v38, v39, v40);
                        v44 = v408;
                        v41 = v407;
                        v97 = v637;
                        v98 = (unint64_t)v647;
                        v96 = v628;
                        v35 = (uint64_t)v674;
                        v3 = v598;
                        v36 = v613;
                        if ((v715 & 1) != 0 && (v715 & 0xFFFFFFFF8) != 0)
                        {
                          WTF::fastFree(v715 & 0xFFFFFFFF8, v674, v598, v613, v37, (uint64_t)v38, v39, v40);
                          v36 = v613;
                          v3 = v598;
                          v35 = (uint64_t)v674;
                          v97 = v637;
                          v98 = (unint64_t)v647;
                          v96 = v628;
                          v41 = v407;
                          v44 = v408;
                        }
                      }
                    }
                  }
                }
                v134 = v129 + 1;
                --v128;
              }
              while (v128);
            }
            v101 = *(_QWORD *)(v36 + 16);
            v99 = 1;
            v38 = (unint64_t *)(v36 + 16);
          }
          v315 = 3;
          v316 = 0xFFFFFFFFLL;
          v24 = v688;
LABEL_444:
          v317 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v104 + 56) + 80) + (v316 >> 2));
          v318 = *v317;
          if ((v318 | 2) == 0x82)
            v318 = v317[1];
          switch(v318)
          {
            case 0:
            case 1:
            case 3:
              if (v315 == 1)
                goto LABEL_448;
              goto LABEL_162;
            case 2:
LABEL_448:
              v319 = v98;
              v320 = v96;
              v321 = v97;
              v322 = v41;
              v323 = v44;
              if (v36)
              {
                v673 = (void *)v35;
                v383 = v3;
                v384 = v36;
                v621 = v37;
                v37 = v621;
                v36 = v384;
                v3 = v383;
                v35 = (uint64_t)v673;
                v44 = v323;
                v41 = v322;
                v97 = v321;
                v96 = v320;
                v98 = v319;
                goto LABEL_163;
              }
              v44 = v323;
              v41 = v322;
              v97 = v321;
              v96 = v320;
              v98 = v319;
LABEL_183:
              if ((v98 & 1) != 0 && (v98 & 0xFFFFFFFF8) != 0)
              {
                v475 = v44;
                v476 = v41;
                v477 = v97;
                v478 = v96;
                WTF::fastFree(v98 & 0xFFFFFFFF8, (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
                v96 = v478;
                v97 = v477;
                v41 = v476;
                v44 = v475;
              }
              if (!*((_DWORD *)v41 + 15))
              {
                __break(0xC471u);
                JUMPOUT(0x1984BF9B4);
              }
              v140 = *(_DWORD *)(**((_QWORD **)v41 + 6) + 88);
              if (v140)
              {
                v141 = v140 - 1;
                do
                {
                  v142 = v141 + 5;
                  if (HIDWORD(v709) != (v141 + 5) >> 31 || v142 != (_DWORD)v709)
                  {
                    if ((v142 & 0x80000000) != 0)
                    {
                      v144 = ((v141 + 5) ^ 0xFFFFFFFFLL) + v701;
                      v145 = v698;
                      v146 = *((_QWORD *)v698 + v144);
                      if (v146)
                        goto LABEL_195;
                    }
                    else
                    {
                      v148 = ((unint64_t)v142 << 32) - 0x500000000;
                      v145 = v698;
                      v146 = *(_QWORD *)((char *)v698 + (v148 >> 29));
                      if (v146)
                      {
                        v144 = v148 >> 32;
LABEL_195:
                        *((_QWORD *)v145 + v144) = 0;
                        if (*(_DWORD *)(v146 + 88) != v711)
                        {
                          ++*(_DWORD *)(v146 + 52);
                          if (*(_DWORD *)(v712 + 220) <= v710)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1984BF9ACLL);
                          }
                          v332 = v96;
                          v333 = v97;
                          v334 = v44;
                          v335 = v24;
                          v336 = v710 + 1;
                          JSC::DFG::NodeOrigin::forInsertingAfter((uint64_t)&v715, *(JSC::DFG::Graph **)(*(_QWORD *)(v712 + 208) + 8 * v710), v690, *(JSC::DFG::Graph **)(*(_QWORD *)(v712 + 208) + 8 * v710), v37, (uint64_t)v38, v39, v40);
                          v339 = 0xC4000000000000;
                          if ((*(_DWORD *)(v146 + 56) & 7) != 3)
                            v339 = 0;
                          v340 = 0xD0000000000000;
                          if ((*(_DWORD *)(v146 + 56) & 7) != 5)
                            v340 = v339;
                          JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>((uint64_t)&v694, v336, 0, 23, (uint64_t)&v715, v340 | v146 & 0xFF00FFFFFFFFFFFFLL, v337, v338);
                          if ((BYTE8(v715) & 1) != 0 && (*((_QWORD *)&v715 + 1) & 0xFFFFFFFF8) != 0)
                            WTF::fastFree(*((_QWORD *)&v715 + 1) & 0xFFFFFFFF8, (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
                          v24 = v335;
                          v44 = v334;
                          v97 = v333;
                          v96 = v332;
                          if ((v715 & 1) != 0 && (v715 & 0xFFFFFFFF8) != 0)
                          {
                            WTF::fastFree(v715 & 0xFFFFFFFF8, (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
                            v96 = v332;
                            v97 = v333;
                            v44 = v334;
                          }
                        }
                      }
                    }
                  }
                }
                while (v141--);
              }
              if ((v96 & 1) != 0)
                goto LABEL_62;
              v436 = v97 & 0xFFFFFFFF8;
              if ((v97 & 0xFFFFFFFF8) == 0)
                goto LABEL_62;
LABEL_582:
              v437 = v44;
              WTF::fastFree(v436, (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
              v44 = v437;
LABEL_62:
              if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v44 & 0xFFFFFFFF8, (void *)v35, v3, v36, v37, (uint64_t)v38, v39, v40);
              v21 = v712;
              if (v24 >= *(unsigned int *)(v712 + 220))
                goto LABEL_371;
              break;
            case 4:
              goto LABEL_162;
            default:
              __break(0xC471u);
              JUMPOUT(0x1984BF520);
          }
        }
      }
    }
  }
LABEL_486:
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v357 = (*(_DWORD *)(*((_QWORD *)v8 + 3) + 16) & 0xFFFFFFFE) == 4) : (v357 = 0),
        !v357 ? (v358 = BYTE2(qword_1ECF4C32A) == 0) : (v358 = 0),
        !v358))
  {
    v705 = v691;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v8 + 1088, "Phase ", (uint64_t)&v705, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v702);
  v366 = v698;
  if (v698)
  {
    v698 = 0;
    v699 = 0;
    WTF::fastFree((unint64_t)v366, v359, v360, v361, v362, v363, v364, v365);
  }
  v367 = v695;
  if (v697 != (_BYTE *)v695 && v695)
  {
    v695 = 0;
    LODWORD(v696) = 0;
    WTF::fastFree((unint64_t)v367, v359, v360, v361, v362, v363, v364, v365);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v692)
  {
    v546 = (unsigned int *)v690;
    v547 = v693;
    if (v693)
      ++*(_DWORD *)v693;
    *(_QWORD *)&v705 = v547;
    JSC::DFG::validate(v546, (void *)1, (WTF **)&v705, v361, v362, v363, v364, v365);
    v548 = (_DWORD *)v705;
    *(_QWORD *)&v705 = 0;
    if (v548)
    {
      if (*v548 == 1)
        WTF::fastFree((unint64_t)v548, v359, v360, v361, v362, v363, v364, v365);
      else
        --*v548;
    }
  }
  v368 = v693;
  v693 = 0;
  if (v368)
  {
    if (*(_DWORD *)v368 == 1)
      WTF::fastFree((unint64_t)v368, v359, v360, v361, v362, v363, v364, v365);
    else
      --*(_DWORD *)v368;
  }
}

void JSC::DFG::Phase::validate(JSC::DFG::Phase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;

  v9 = (unsigned int *)*((_QWORD *)this + 4);
  v10 = (WTF *)*((_QWORD *)this + 8);
  if (v10)
    ++*(_DWORD *)v10;
  v19 = v10;
  JSC::DFG::validate(v9, (void *)1, &v19, a4, a5, a6, a7, a8);
  v18 = v19;
  v19 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v18;
  }
}

void JSC::DFG::Phase::beginPhase(JSC::DFG::Graph **this)
{
  JSC::DFG::Graph *v2;
  int v3;
  WTF *v4;
  JSC::DFG::Graph *v5;
  WTF::PrintStream *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  int v16;
  WTF *v17;
  void (**v18)(WTF::StringPrintStream *__hidden);
  WTF *v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!(_BYTE)qword_1ECF4C332)
    goto LABEL_2;
  v18 = off_1E3572250;
  v19 = (WTF *)v21;
  v20 = xmmword_199122F80;
  v21[0] = 0;
  JSC::DFG::Graph::dump(this[4], (WTF::PrintStream *)&v18, 0);
  WTF::StringPrintStream::toCString(&v18, (uint64_t *)&v17);
  v14 = v17;
  v17 = 0;
  v15 = this[8];
  this[8] = v14;
  if (v15)
  {
    v16 = *(_DWORD *)v15 - 1;
    if (*(_DWORD *)v15 != 1)
    {
LABEL_10:
      *(_DWORD *)v15 = v16;
      goto LABEL_11;
    }
    WTF::fastFree((unint64_t)v15, v7, v8, v9, v10, v11, v12, v13);
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      v16 = *(_DWORD *)v15 - 1;
      if (*(_DWORD *)v15 != 1)
        goto LABEL_10;
      WTF::fastFree((unint64_t)v15, v7, v8, v9, v10, v11, v12, v13);
    }
  }
LABEL_11:
  if (v19 != (WTF *)v21)
    WTF::fastFree((unint64_t)v19, v7, v8, v9, v10, v11, v12, v13);
LABEL_2:
  v2 = this[4];
  if ((*(_DWORD *)(*((_QWORD *)v2 + 3) + 16) & 0xFFFFFFFE) == 4)
    v3 = byte_1ECF4C325;
  else
    v3 = byte_1ECF4C324;
  if (byte_1ECF4C323 | v3)
  {
    WTF::dataLog<JSC::DFG::Prefix,char [21],WTF::ASCIILiteral,char [3]>((uint64_t)v2 + 1088, "Beginning DFG phase ", (uint64_t)(this + 5), ".\n");
    v4 = (WTF *)WTF::dataLog<JSC::DFG::Prefix,char [21],WTF::ASCIILiteral,char [3]>((uint64_t)this[4] + 1088, "Before ", (uint64_t)(this + 5), ":\n");
    v5 = this[4];
    v6 = (WTF::PrintStream *)WTF::dataFile(v4);
    JSC::DFG::Graph::dump(v5, v6, 0);
  }
}

uint64_t WTF::dataLog<JSC::DFG::Prefix,char [21],WTF::ASCIILiteral,char [3]>(uint64_t a1, const char *a2, uint64_t a3, const char *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  char v18;
  char **v19;
  char *v20;
  int v21;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::DFG::Prefix::dump(a1, v10);
  WTF::PrintStream::printf(v10, "%s", a2);
  v11 = *(char **)a3;
  v12 = *(_QWORD *)(a3 + 8);
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
  if (v11)
  {
    v15 = v12 - 1;
    if (!v12)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(v11, v15, (uint64_t)&v20, v14);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v20 = (char *)v16;
    v21 = 0;
  }
  WTF::printExpectedCStringHelper(v13, "StringView", &v20);
  if (v21 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v21])(&v19, &v20);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  WTF::PrintStream::printf(v10, "%s", a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

JSC::DFG::PhiChildren *JSC::DFG::PhiChildren::PhiChildren(JSC::DFG::PhiChildren *this, JSC::DFG::Graph *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;

  *(_QWORD *)this = 0;
  v9 = *((unsigned int *)a2 + 15);
  if ((_DWORD)v9)
  {
    v11 = 0;
    while (!*(_QWORD *)(*((_QWORD *)a2 + 6) + 8 * v11))
    {
      if (v9 == ++v11)
        return this;
    }
    if ((_DWORD)v9 != (_DWORD)v11)
    {
      v13 = *((_DWORD *)a2 + 15);
      while (1)
      {
        if (v13 <= v11)
        {
          __break(0xC471u);
          JUMPOUT(0x1984C015CLL);
        }
        v14 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 8 * v11);
        v15 = *(unsigned int *)(v14 + 220);
        if ((_DWORD)v15)
          break;
LABEL_26:
        v11 = (v11 + 1);
        if (v13 > v11)
        {
          while (!*(_QWORD *)(*((_QWORD *)a2 + 6) + 8 * v11))
          {
            if (v13 == ++v11)
            {
              LODWORD(v11) = v13;
              break;
            }
          }
        }
        if ((_DWORD)v9 == (_DWORD)v11)
          return this;
      }
      v16 = *(uint64_t **)(v14 + 208);
      v17 = &v16[v15];
      while (1)
      {
        v41 = 0;
        v18 = *v16;
        v41 = v18;
        if (*(_WORD *)(v18 + 18) == 26)
          break;
LABEL_12:
        if (++v16 == v17)
        {
          v13 = *((_DWORD *)a2 + 15);
          goto LABEL_26;
        }
      }
      v19 = *(_QWORD *)(v18 + 72);
      v20 = *(_QWORD *)this;
      if (*(_QWORD *)this
        || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(this, 8u, 0), (v20 = *(_QWORD *)this) != 0))
      {
        v21 = *(_DWORD *)(v20 - 8);
      }
      else
      {
        v21 = 0;
      }
      v22 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
      v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      v25 = v21 & ((v24 >> 31) ^ v24);
      v26 = (_QWORD *)(v20 + 48 * v25);
      v27 = *v26;
      if (*v26)
      {
        v28 = 0;
        v29 = 1;
        while (v27 != v19)
        {
          if (v27 == -1)
            v28 = v26;
          v25 = (v25 + v29) & v21;
          v26 = (_QWORD *)(v20 + 48 * v25);
          v27 = *v26;
          ++v29;
          if (!*v26)
          {
            if (!v28)
              goto LABEL_33;
            v32 = (unint64_t)(v28 + 3);
            *v28 = 0;
            v28[1] = v28 + 3;
            v28[2] = 3;
            --*(_DWORD *)(*(_QWORD *)this - 16);
            goto LABEL_34;
          }
        }
        goto LABEL_23;
      }
LABEL_33:
      v32 = v26[1];
      v28 = v26;
LABEL_34:
      *v28 = v19;
      if ((_QWORD *)v32 != v28 + 3)
      {
        if (v32)
        {
          v28[1] = 0;
          *((_DWORD *)v28 + 4) = 0;
          WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
        }
        v28[1] = v28 + 3;
      }
      *((_DWORD *)v28 + 4) = 3;
      *((_DWORD *)v28 + 5) = 0;
      v33 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v34 = *(_DWORD *)(v33 - 12) + 1;
      else
        v34 = 1;
      *(_DWORD *)(v33 - 12) = v34;
      v35 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v36 = *(_DWORD *)(v35 - 12);
      else
        v36 = 0;
      v37 = (*(_DWORD *)(v35 - 16) + v36);
      v38 = *(unsigned int *)(v35 - 4);
      if (v38 > 0x400)
      {
        if (v38 > 2 * v37)
          goto LABEL_41;
      }
      else
      {
        if (3 * v38 > 4 * v37)
        {
LABEL_41:
          v26 = v28;
LABEL_23:
          v30 = v26 + 1;
          v31 = *((unsigned int *)v26 + 5);
          if ((_DWORD)v31 == *((_DWORD *)v26 + 4))
          {
            v40 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)&v41);
            v31 = *((unsigned int *)v26 + 5);
            *(_QWORD *)(v26[1] + 8 * v31) = *v40;
          }
          else
          {
            *(_QWORD *)(*v30 + 8 * v31) = v41;
          }
          *((_DWORD *)v26 + 5) = v31 + 1;
          goto LABEL_12;
        }
        if (!(_DWORD)v38)
        {
          v39 = 8;
LABEL_48:
          v26 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(this, v39, v28);
          goto LABEL_23;
        }
      }
      v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
      goto LABEL_48;
    }
  }
  return this;
}

JSC::DFG::Node **JSC::DFG::PhiChildren::upsilonsOf(JSC::DFG::PhiChildren *this, JSC::DFG::Node *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  JSC::DFG::Node **v8;
  JSC::DFG::Node *v9;
  int v11;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = (JSC::DFG::Node **)(v2 + 48 * v7);
    v9 = *v8;
    if (*v8 != a2)
    {
      v11 = 1;
      while (v9)
      {
        v7 = (v7 + v11) & v3;
        v8 = (JSC::DFG::Node **)(v2 + 48 * v7);
        v9 = *v8;
        ++v11;
        if (*v8 == a2)
          return v8 + 1;
      }
      v8 = (JSC::DFG::Node **)(v2 + 48 * *(unsigned int *)(v2 - 4));
    }
  }
  else
  {
    v8 = 0;
  }
  return v8 + 1;
}

uint64_t JSC::DFG::Plan::Plan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v7 = 0;
  *(_QWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 16) = a4;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_1E358E5B8;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  v9 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 80) = v9;
  LODWORD(v9) = *((_DWORD *)a6 + 2);
  *((_DWORD *)a6 + 2) = 0;
  *(_DWORD *)(a1 + 88) = v9;
  LODWORD(v9) = *((_DWORD *)a6 + 3);
  *((_DWORD *)a6 + 3) = 0;
  *(_DWORD *)(a1 + 92) = v9;
  *(_QWORD *)(a1 + 96) = a6[2];
  *(_WORD *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 106) = 0;
  *(_DWORD *)(a1 + 108) = a5;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 93016))
  {
    v7 = WTF::fastMalloc((WTF *)0x80);
    v25 = JSC::Profiler::Database::ensureBytecodesFor(*(JSC::Profiler::Database **)(*(_QWORD *)(a1 + 32) + 93016), *(JSC::CodeBlock **)(a1 + 40), v19, v20, v21, v22, v23, v24);
    JSC::Profiler::Compilation::Compilation(v7, v25, a4, v26, v27, v28, v29, v30);
  }
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = 0;
  v10 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = v11;
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 280) = v11;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = v11;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 376) = 0;
  v12 = *(unsigned int **)(*(_QWORD *)(v11 + 192) + 120);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x1984C03CCLL);
  }
  v13 = v12 + 2;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  do
  {
    v15 = __ldaxr(v13);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v13));
  if (!v16)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 32))(v12);
  }
  return a1;
}

uint64_t JSC::DFG::`anonymous namespace'::profilerCompilationKindForMode(uint64_t result)
{
  if ((result - 2) >= 4)
  {
    if (result <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C0420);
    }
    __break(0xC471u);
    JUMPOUT(0x1984C0440);
  }
  return result;
}

void JSC::DFG::Plan::~Plan(JSC::DFG::Plan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  JSC::RecordedStatuses *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  JSC::Profiler::Compilation *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned int **v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;

  v9 = (_DWORD *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 45);
  if (v10)
  {
    *((_QWORD *)this + 45) = 0;
    *((_DWORD *)this + 92) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 44);
  if (v11)
  {
    v50 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v50)
    {
      v51 = (unint64_t *)(v11 + 8);
      do
      {
        if (*((_DWORD *)v51 - 2) != -2)
        {
          v52 = *v51;
          *v51 = 0;
          if (v52)
            WTF::fastFree(v52, a2, a3, a4, a5, a6, a7, a8);
        }
        v51 += 2;
        --v50;
      }
      while (v50);
    }
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (JSC::RecordedStatuses *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v12)
  {
    JSC::RecordedStatuses::~RecordedStatuses(v12, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  v21 = *((_QWORD *)this + 41);
  if (v21)
  {
    *((_QWORD *)this + 41) = 0;
    *((_DWORD *)this + 84) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v22)
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  v23 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v23)
    WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
  v24 = *((_QWORD *)this + 37);
  if (v24)
    WTF::fastFree(v24 - 16, a2, a3, a4, a5, a6, a7, a8);
  v25 = *((_QWORD *)this + 36);
  if (v25)
    WTF::fastFree(v25 - 16, a2, a3, a4, a5, a6, a7, a8);
  v26 = *((_QWORD *)this + 33);
  if (v26)
    WTF::fastFree(v26 - 16, a2, a3, a4, a5, a6, a7, a8);
  v27 = *((_QWORD *)this + 31);
  if (v27)
  {
    *((_QWORD *)this + 31) = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::DesiredWatchpoints::~DesiredWatchpoints((JSC::DFG::Plan *)((char *)this + 136), a2, a3, a4, a5, a6, a7, a8);
  v35 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 1)
    {
      v41 = *(unint64_t **)(v35 + 8);
      if (v41)
      {
        do
        {
          v59 = (unint64_t *)v41[7];
          v60 = v41[2];
          if ((v60 & 1) != 0 && (v60 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v60 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
          v61 = *v41;
          *v41 = 0;
          if (v61)
            WTF::fastFree(v61, v28, v29, v30, v31, v32, v33, v34);
          WTF::fastFree((unint64_t)v41, v28, v29, v30, v31, v32, v33, v34);
          v41 = v59;
        }
        while (v59);
      }
      *(_QWORD *)(v35 + 8) = 0;
      WTF::fastFree(v35, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      --*(_DWORD *)v35;
    }
  }
  v36 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = (JSC::Profiler::Compilation *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
    {
      JSC::Profiler::Compilation::~Compilation(v37, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      --*(_DWORD *)v37;
    }
  }
  v38 = *((_QWORD *)this + 10);
  if (v38)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v38, v28, v29, v30, v31, v32, v33, v34);
  }
  *(_QWORD *)this = off_1E3596038;
  v39 = *((unsigned int *)this + 17);
  if ((_DWORD)v39)
  {
    v53 = (unsigned int **)*((_QWORD *)this + 7);
    v54 = &v53[v39];
    do
    {
      v55 = *v53;
      *v53 = 0;
      if (v55)
      {
        v56 = v55 + 2;
        do
        {
          v57 = __ldaxr(v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, v56));
        if (!v58)
        {
          atomic_store(1u, v55 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
        }
      }
      ++v53;
    }
    while (v53 != v54);
  }
  v40 = *((_QWORD *)this + 7);
  if (v40)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v40, v28, v29, v30, v31, v32, v33, v34);
  }
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::DFG::Plan::~Plan(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::DFG::Plan::codeSize(JSC::DFG::Plan *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 15);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void JSC::DFG::Plan::finalizeInGC(JSC::DFG::Plan *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::RecordedStatuses *v9;

  v9 = (JSC::RecordedStatuses *)*((_QWORD *)this + 43);
  if (v9)
    JSC::RecordedStatuses::finalizeWithoutDeleting(v9, *((JSC::VM **)this + 4), a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::Plan::notifyReady(JSC::DFG::Plan *this)
{
  *((_DWORD *)this + 3) = 2;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 47) + 16))(*((_QWORD *)this + 47), *((_QWORD *)this + 5), *((_QWORD *)this + 9));
}

_DWORD *JSC::DFG::Plan::cancel(JSC::DFG::Plan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  JSC::Profiler::Compilation *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  unint64_t v44;
  _DWORD *v45;
  unint64_t v46;
  WTF *v47;
  WTF *v48;
  _DWORD *result;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t i;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  double v68;
  double v69;
  double v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  _DWORD *v75;
  uint64_t v76;
  WTF *v77;
  WTF *v78;
  uint64_t v79;
  WTF *v80;
  int v81;
  int v82;
  uint64_t v83;
  WTF *v84;
  __int128 v85;
  WTF *v86[2];
  WTF *v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;

  if (*((_DWORD *)this + 3) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1984C0A88);
  }
  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 64);
    if (v10)
    {
      if (*(_BYTE *)(v10 + 33))
      {
        __break(0xC471u);
        JUMPOUT(0x1984C0AA8);
      }
    }
  }
  *((_DWORD *)this + 3) = 3;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  if (*((_DWORD *)this + 23))
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *((_QWORD *)this + 10) + v11;
      *(_QWORD *)v13 = 0;
      *(_BYTE *)(v13 + 8) = 0;
      ++v12;
      v11 += 16;
    }
    while (v12 < *((unsigned int *)this + 23));
  }
  v14 = (JSC::Profiler::Compilation *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      JSC::Profiler::Compilation::~Compilation(v14, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  v15 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      v58 = *(unint64_t **)(v16 + 8);
      if (v58)
      {
        do
        {
          v71 = (unint64_t *)v58[7];
          v72 = v58[2];
          if ((v72 & 1) != 0 && (v72 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v72 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v73 = *v58;
          *v58 = 0;
          if (v73)
            WTF::fastFree(v73, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree((unint64_t)v58, a2, a3, a4, a5, a6, a7, a8);
          v58 = v71;
        }
        while (v71);
      }
      *(_QWORD *)(v16 + 8) = 0;
      WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  *(_QWORD *)&v85 = 0;
  BYTE8(v85) = 0;
  v86[0] = 0;
  LOBYTE(v86[1]) = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v17 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v17)
    WTF::fastFree(v17 - 16, a2, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 144) = 0;
  v18 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v18)
    WTF::fastFree(v18 - 16, a2, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 160) = 0;
  v19 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v19)
    WTF::fastFree(v19 - 16, a2, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 176) = 0;
  v20 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v20)
    WTF::fastFree(v20 - 16, a2, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 192) = 0;
  v21 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v21)
    WTF::fastFree(v21 - 16, a2, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 208) = 0;
  v22 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v22)
    WTF::fastFree(v22 - 16, a2, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 224) = 0;
  v23 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v23)
    WTF::fastFree(v23 - 16, a2, a3, a4, a5, a6, a7, a8);
  JSC::DFG::DesiredWatchpoints::~DesiredWatchpoints((JSC::DFG::DesiredWatchpoints *)&v85, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 65) = 0;
  v31 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v31)
    WTF::fastFree(v31 - 16, v24, v25, v26, v27, v28, v29, v30);
  *((_BYTE *)this + 272) = 0;
  v87 = 0;
  v85 = 0u;
  *(_OWORD *)v86 = 0u;
  *((_QWORD *)this + 35) = 0;
  WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::HashTable(&v96, (uint64_t *)&v85 + 1);
  v39 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = v96;
  v96 = v39;
  if (v39)
    WTF::fastFree(v39 - 16, v32, v33, v34, v35, v36, v37, v38);
  if (!v86[0] || (v40 = *((unsigned int *)v86[0] - 3), !(_DWORD)v40))
  {
    v41 = 0;
    goto LABEL_37;
  }
  v65 = (v40 - 1) | ((v40 - 1) >> 1) | ((((_DWORD)v40 - 1) | ((v40 - 1) >> 1)) >> 2);
  v66 = v65 | (v65 >> 4) | ((v65 | (v65 >> 4)) >> 8);
  v67 = (v66 | HIWORD(v66)) + 1;
  if (v67 > 0x400)
  {
    if (v67 > 2 * v40)
      goto LABEL_85;
  }
  else if (3 * v67 > 4 * v40)
  {
LABEL_76:
    v68 = (double)v40;
    v69 = (double)v67;
    v70 = 0.604166667;
    goto LABEL_86;
  }
  LODWORD(v67) = 2 * v67;
  if (v67 <= 0x400)
    goto LABEL_76;
LABEL_85:
  v68 = (double)v40;
  v69 = (double)v67;
  v70 = 0.416666667;
LABEL_86:
  if (v69 * v70 <= v68)
    LODWORD(v67) = 2 * v67;
  if (v67 <= 8)
    v74 = 8;
  else
    v74 = v67;
  v75 = (_DWORD *)WTF::fastZeroedMalloc(4 * v74 + 16, (unint64_t)v32, v33, v34, v35, v36, v37, v38);
  v75[2] = v74 - 1;
  v75[3] = v74;
  *v75 = 0;
  v75[1] = v40;
  if (v86[0])
  {
    v76 = *((unsigned int *)v86[0] - 1);
    v77 = (WTF *)((char *)v86[0] + 4 * v76);
    if (*((_DWORD *)v86[0] - 3))
    {
      v78 = v86[0];
      if ((_DWORD)v76)
      {
        v79 = 4 * v76;
        v78 = v86[0];
        while (*(_DWORD *)v78 <= 1u)
        {
          v78 = (WTF *)((char *)v78 + 4);
          v79 -= 4;
          if (!v79)
          {
            v78 = v77;
            goto LABEL_100;
          }
        }
      }
      goto LABEL_100;
    }
    v78 = (WTF *)((char *)v86[0] + 4 * v76);
  }
  else
  {
    v78 = 0;
    v76 = 0;
  }
  v77 = (WTF *)((char *)v86[0] + 4 * v76);
LABEL_100:
  if (v86[0])
    v80 = (WTF *)((char *)v86[0] + 4 * *((unsigned int *)v86[0] - 1));
  else
    v80 = 0;
  v41 = v75 + 4;
  while (v78 != v80)
  {
    v81 = 0;
    v82 = *(_DWORD *)v78;
    do
    {
      v83 = v82 & (v74 - 1);
      v82 = ++v81 + v83;
    }
    while (v41[v83]);
    v41[v83] = *(_DWORD *)v78;
    v84 = (WTF *)((char *)v78 + 4);
    v78 = v77;
    if (v84 != v77)
    {
      v78 = v84;
      while (*(_DWORD *)v78 <= 1u)
      {
        v78 = (WTF *)((char *)v78 + 4);
        if (v78 == v77)
        {
          v78 = v77;
          break;
        }
      }
    }
  }
LABEL_37:
  v42 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = v41;
  if (v42)
    WTF::fastFree(v42 - 16, v32, v33, v34, v35, v36, v37, v38);
  if (v86[1])
  {
    v59 = (char *)v86[1] + 8;
    v60 = *(unsigned int *)v86[1];
    v43 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v60 + 8));
    *v43 = v60;
    if ((_DWORD)v60)
    {
      v61 = 0;
      do
      {
        *(_QWORD *)&v43[v61 + 2] = *(_QWORD *)&v59[v61 * 4];
        v61 += 2;
      }
      while (2 * v60 != v61);
    }
  }
  else
  {
    v43 = 0;
  }
  v44 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = v43;
  if (v44)
    WTF::fastFree(v44, v32, v33, v34, v35, v36, v37, v38);
  if (v87)
  {
    v62 = (char *)v87 + 4;
    v63 = *(unsigned int *)v87;
    v45 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v63 + 4));
    *v45 = v63;
    if ((_DWORD)v63)
    {
      for (i = 0; i != v63; ++i)
        v45[i + 1] = *(_DWORD *)&v62[i * 4];
    }
  }
  else
  {
    v45 = 0;
  }
  v46 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = v45;
  if (v46)
    WTF::fastFree(v46, v32, v33, v34, v35, v36, v37, v38);
  v47 = v87;
  v87 = 0;
  if (v47)
    WTF::fastFree((unint64_t)v47, v32, v33, v34, v35, v36, v37, v38);
  v48 = v86[1];
  v86[1] = 0;
  if (v48)
    WTF::fastFree((unint64_t)v48, v32, v33, v34, v35, v36, v37, v38);
  if (v86[0])
    WTF::fastFree((unint64_t)v86[0] - 16, v32, v33, v34, v35, v36, v37, v38);
  if (*((_QWORD *)&v85 + 1))
    WTF::fastFree(*((_QWORD *)&v85 + 1) - 16, v32, v33, v34, v35, v36, v37, v38);
  *((_QWORD *)this + 40) = 0;
  *((_DWORD *)this + 85) = 0;
  result = (_DWORD *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t JSC::DFG::Plan::compileInThreadImpl(JSC::DFG::Plan *this, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  int8x8_t v11;
  JSC::RecordedStatuses *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v23;
  JSC::UnlinkedCodeBlock **v24;
  uint64_t v25;
  void *v26;
  int v27;
  WTF *v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  int v32;
  int v33;
  JSC::DFG::Graph *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  WTF *v57;
  uint64_t v58;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  WTF *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  unsigned __int8 *v87;
  WTF *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  uint64_t v98;
  unsigned __int8 *v99;
  WTF *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  unsigned __int8 *v110;
  WTF *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  WTF *v116;
  uint64_t v117;
  unsigned __int8 *v118;
  WTF *v120;
  uint64_t v121;
  unsigned __int8 *v122;
  WTF *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 *v131;
  WTF *v133;
  uint64_t v134;
  unsigned __int8 *v135;
  WTF *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  JSC::DFG::Graph *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int *v301;
  unsigned int *v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int *v305;
  unsigned int *v306;
  unsigned int v307;
  unsigned int v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  int v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  WTF *v324;
  WTF *v325;
  WTF::PrintStream *v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  WTF *v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  WTF *v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  void *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  void *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  void *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  void *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  void *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  void *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  void *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  void *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  void *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  _BOOL4 v476;
  void *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  void *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  WTF *v497;
  _QWORD *v498;
  uint64_t v499;
  void *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  void *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  void *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  void *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  void *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  void *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  void *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  void *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  void *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  void *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  void *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  void *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  void *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  void *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  void *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  void *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  void *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  void *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  void *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  void *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  void *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  void *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  JSC::DFG::Graph *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  _BOOL8 v660;
  void *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  _BOOL8 v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  void *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unsigned int *v684;
  unsigned int *v685;
  unsigned int v686;
  unsigned int v687;
  unsigned int *v688;
  unsigned int *v689;
  unsigned int v690;
  unsigned int v691;
  double v692;
  uint64_t v693;
  double v694[5];
  WTF *v695;
  WTF *v696;
  WTF *v697;
  WTF *v698;
  WTF *v699[117];
  int v700;
  int v701;
  char v702;
  double *v703;
  uint64_t v704;
  uint64_t v705;
  WTF *v706;
  uint64_t v707;
  double v708;
  const char *v709;
  uint64_t v710;
  char v711;
  WTF *v712;
  _QWORD *v713;
  uint64_t v714;
  _QWORD v715[386];
  _QWORD v716[386];
  _QWORD v717[386];
  _QWORD v718[129];

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v718[128] = *MEMORY[0x1E0C80C00];
  v704 = (uint64_t)"DFG";
  v705 = 4;
  v706 = (WTF *)"initialize";
  v707 = 11;
  v708 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v310 = mach_absolute_time();
    v312 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v312 != -1)
    {
      v699[0] = (WTF *)&v703;
      *(_QWORD *)&v694[0] = v699;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v694, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v311) = dword_1ECF4400C;
    v708 = (double)(v310 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v311 * 1000000000.0);
  }
  v10 = (_OWORD *)WTF::fastMalloc((WTF *)0x70);
  v11 = 0;
  *v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v12 = *(JSC::RecordedStatuses **)(v2 + 344);
  *(_QWORD *)(v2 + 344) = v10;
  if (v12)
  {
    JSC::RecordedStatuses::~RecordedStatuses(v12, v3, v4, v5, v6, v7, v8, v9);
    WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  v21 = (unsigned __int8 *)(v2 + 105);
  if (__ldaxr((unsigned __int8 *)(v2 + 105)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v2 + 105);
LABEL_7:
  if (*(_BYTE *)(v2 + 104))
  {
    *(_BYTE *)(v2 + 104) = 0;
    v23 = *(_QWORD *)(v2 + 40);
    if (v23)
    {
      if (*(_DWORD *)(v2 + 100))
      {
        v24 = *(JSC::UnlinkedCodeBlock ***)(v23 + 192);
        v25 = *((_QWORD *)v24[7] + 11);
        if (!v25)
          v25 = JSC::UnlinkedCodeBlock::livenessAnalysisSlow(v24[7], v24, v4, v5, v6, v7, v8, v9);
        JSC::BytecodeLivenessAnalysis::getLivenessInfoAtInstruction(v25, (uint64_t)v24, *(_DWORD *)(v2 + 108), v8, v9, v699, v11);
        v27 = *(_DWORD *)(v2 + 100);
        v28 = v699[0];
        if (v27)
        {
          v29 = (v27 - 1);
          do
          {
            if (((*(_DWORD *)((char *)v28 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v29) & 1) == 0)
            {
              v30 = *(_QWORD *)(v2 + 80) + 16 * (v29 + *(unsigned int *)(v2 + 96));
              v32 = *(unsigned __int8 *)(v30 + 8);
              v31 = (_BYTE *)(v30 + 8);
              if (v32)
                *v31 = 0;
            }
            --v29;
            --v27;
          }
          while (v27);
          goto LABEL_18;
        }
        if (v699[0])
LABEL_18:
          WTF::fastFree((unint64_t)v28, v26, v4, v5, v6, v7, v8, v9);
      }
    }
  }
  v33 = __ldxr(v21);
  if (v33 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v21))
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v2 + 105), 0, v4, v5, v6, v7, v8, v9);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v704);
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (*(_DWORD *)(v2 + 16) & 0xFFFFFFFE) == 4 && BYTE1(qword_1ECF4C32A))
  {
    v316 = *(_DWORD *)(v2 + 108);
    if (v316 != -1 && v316 != 0x3FFFFFFF)
    {
      WTF::dataLog<char [16]>("\n");
      WTF::dataLog<char [37],JSC::BytecodeIndex,char [15],JSC::Operands<std::optional<JSC::JSValue>,WTF::Vector<std::optional<JSC::JSValue>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>,char [2]>((JSC::BytecodeIndex *)(v2 + 108), v2 + 80);
      WTF::dataLog<char [16]>("\n");
    }
  }
  JSC::DFG::Graph::Graph((JSC::DFG::Graph *)v699, *(JSC::VM **)(v2 + 32), (JSC::DFG::Plan *)v2);
  v704 = (uint64_t)"DFG";
  v705 = 4;
  v706 = (WTF *)"bytecode parser";
  v707 = 16;
  v708 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v313 = mach_absolute_time();
    v315 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v315 != -1)
    {
      *(_QWORD *)&v694[0] = &v702;
      v703 = v694;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v703, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v314) = dword_1ECF4400C;
    v708 = (double)(v313 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v314 * 1000000000.0);
  }
  v41 = JSC::DFG::parse((JSC::DFG *)v699, v34, v35, v36, v37, v38, v39, v40);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v704);
  if (!v41)
    goto LABEL_54;
  v49 = (unsigned __int8 *)(*(_QWORD *)(v2 + 40) + 16);
  if (__ldaxr(v49))
  {
    __clrex();
LABEL_31:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v49);
    goto LABEL_32;
  }
  if (__stxr(1u, v49))
    goto LABEL_31;
LABEL_32:
  v51 = *(_QWORD *)(v2 + 40);
  v52 = *(unsigned int *)(v51 + 172);
  if (*(_DWORD *)(v51 + 168) > v52)
  {
    v309 = *(_QWORD *)(v51 + 160);
    if ((_DWORD)v52)
    {
      *(_DWORD *)(v51 + 168) = v52;
      *(_QWORD *)(v51 + 160) = WTF::fastRealloc(v309, 8 * v52, v43, v44, v45, v46, v47, v48);
    }
    else if (v309)
    {
      *(_QWORD *)(v51 + 160) = 0;
      *(_DWORD *)(v51 + 168) = 0;
      WTF::fastFree(v309, v42, v43, v44, v45, v46, v47, v48);
    }
  }
  v53 = __ldxr(v49);
  if (v53 == 1)
  {
    if (!__stlxr(0, v49))
      goto LABEL_40;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v49, 0, v43, v44, v45, v46, v47, v48);
LABEL_40:
  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    v698 = 0;
    JSC::DFG::validate((unsigned int *)v699, (void *)1, &v698, v44, v45, v46, v47, v48);
    v324 = v698;
    v698 = 0;
    if (v324)
    {
      if (*(_DWORD *)v324 == 1)
        WTF::fastFree((unint64_t)v324, v317, v318, v319, v320, v321, v322, v323);
      else
        --*(_DWORD *)v324;
    }
  }
  if (byte_1ECF4C322)
  {
    v325 = (WTF *)WTF::dataLog<char [16]>("Graph after parsing:\n");
    v326 = (WTF::PrintStream *)WTF::dataFile(v325);
    JSC::DFG::Graph::dump((JSC::DFG::Graph *)v699, v326, 0);
  }
  if (!HIBYTE(word_1ECF4C328))
    goto LABEL_58;
  LOWORD(v694[0]) = 256;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
  if (!LOBYTE(v708))
  {
    __break(0xC471u);
    goto LABEL_455;
  }
  v54 = *(_QWORD *)(v705 + 48);
  if (v54)
  {
    if (*(uint64_t **)(v54 + 64) != &v704)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C2054);
    }
    v55 = (unsigned __int8 *)(v54 + 46);
    if (__ldaxr((unsigned __int8 *)(v54 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v55))
    {
      goto LABEL_50;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v55);
LABEL_50:
    *(_QWORD *)(v54 + 64) = 0;
  }
  v57 = v706;
  if (v706)
  {
    v706 = 0;
    LODWORD(v707) = 0;
    WTF::fastFree((unint64_t)v57, v42, v43, v44, v45, v46, v47, v48);
  }
  if (LOBYTE(v694[0]))
    goto LABEL_54;
LABEL_58:
  ++v701;
  v704 = -1;
  LODWORD(v705) = -1;
  v706 = 0;
  LOWORD(v707) = 256;
  v708 = COERCE_DOUBLE(v699);
  v709 = "CPS rethreading";
  v710 = 16;
  v711 = 0;
  v712 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v704);
  v713 = v715;
  v714 = 128;
  v715[384] = v716;
  v715[385] = 128;
  v716[384] = v717;
  v716[385] = 128;
  v717[384] = v718;
  v717[385] = 128;
  JSC::DFG::runAndLog<JSC::DFG::CPSRethreadingPhase>((uint64_t)&v704, v60, v61, v62, v63, v64, v65, v66);
  JSC::DFG::CPSRethreadingPhase::~CPSRethreadingPhase((JSC::DFG::CPSRethreadingPhase *)&v704, v67, v68, v69, v70, v71, v72, v73);
  if (!HIBYTE(word_1ECF4C328))
    goto LABEL_69;
  LOWORD(v694[0]) = 256;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
  if (!LOBYTE(v708))
  {
    __break(0xC471u);
    JUMPOUT(0x1984C2084);
  }
  v74 = *(_QWORD *)(v705 + 48);
  if (v74)
  {
    if (*(uint64_t **)(v74 + 64) != &v704)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C20A4);
    }
    v75 = (unsigned __int8 *)(v74 + 46);
    if (__ldaxr((unsigned __int8 *)(v74 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v75))
    {
      goto LABEL_65;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v75);
LABEL_65:
    *(_QWORD *)(v74 + 64) = 0;
  }
  v77 = v706;
  if (v706)
  {
    v706 = 0;
    LODWORD(v707) = 0;
    WTF::fastFree((unint64_t)v77, v42, v43, v44, v45, v46, v47, v48);
  }
  if (LOBYTE(v694[0]))
    goto LABEL_54;
LABEL_69:
  ++v701;
  v704 = -1;
  LODWORD(v705) = -1;
  v706 = 0;
  LOWORD(v707) = 256;
  v708 = COERCE_DOUBLE(v699);
  v709 = "unification";
  v710 = 12;
  v711 = 0;
  v712 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v704);
  JSC::DFG::runAndLog<JSC::DFG::UnificationPhase>((JSC::DFG::UnificationPhase *)&v704);
  if (HIBYTE(qword_1ECF4C32A) && !v711)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v704, (uint64_t)v78, v79, v80, v81, v82, v83, v84);
  v85 = v712;
  v712 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 1)
      WTF::fastFree((unint64_t)v85, v78, v79, v80, v81, v82, v83, v84);
    else
      --*(_DWORD *)v85;
  }
  if (!HIBYTE(word_1ECF4C328))
    goto LABEL_84;
  LOWORD(v694[0]) = 256;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
  if (!LOBYTE(v708))
  {
    __break(0xC471u);
    JUMPOUT(0x1984C2108);
  }
  v86 = *(_QWORD *)(v705 + 48);
  if (v86)
  {
    if (*(uint64_t **)(v86 + 64) != &v704)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C2128);
    }
    v87 = (unsigned __int8 *)(v86 + 46);
    if (__ldaxr((unsigned __int8 *)(v86 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v87))
    {
      goto LABEL_80;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v87);
LABEL_80:
    *(_QWORD *)(v86 + 64) = 0;
  }
  v89 = v706;
  if (v706)
  {
    v706 = 0;
    LODWORD(v707) = 0;
    WTF::fastFree((unint64_t)v89, v42, v43, v44, v45, v46, v47, v48);
  }
  if (LOBYTE(v694[0]))
    goto LABEL_54;
LABEL_84:
  ++v701;
  v704 = -1;
  LODWORD(v705) = -1;
  v706 = 0;
  LOWORD(v707) = 256;
  v708 = COERCE_DOUBLE(v699);
  v709 = "prediction injection";
  v710 = 21;
  v711 = 0;
  v712 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v704);
  JSC::DFG::runAndLog<JSC::DFG::PredictionInjectionPhase>((JSC::DFG::PredictionInjectionPhase *)&v704);
  if (HIBYTE(qword_1ECF4C32A) && !v711)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v704, (uint64_t)v90, v91, v92, v93, v94, v95, v96);
  v97 = v712;
  v712 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 1)
      WTF::fastFree((unint64_t)v97, v90, v91, v92, v93, v94, v95, v96);
    else
      --*(_DWORD *)v97;
  }
  if (!HIBYTE(word_1ECF4C328))
    goto LABEL_99;
  LOWORD(v694[0]) = 256;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
  if (!LOBYTE(v708))
  {
    __break(0xC471u);
    JUMPOUT(0x1984C2158);
  }
  v98 = *(_QWORD *)(v705 + 48);
  if (v98)
  {
    if (*(uint64_t **)(v98 + 64) != &v704)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C2178);
    }
    v99 = (unsigned __int8 *)(v98 + 46);
    if (__ldaxr((unsigned __int8 *)(v98 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v99))
    {
      goto LABEL_95;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v99);
LABEL_95:
    *(_QWORD *)(v98 + 64) = 0;
  }
  v101 = v706;
  if (v706)
  {
    v706 = 0;
    LODWORD(v707) = 0;
    WTF::fastFree((unint64_t)v101, v42, v43, v44, v45, v46, v47, v48);
  }
  if (LOBYTE(v694[0]))
    goto LABEL_54;
LABEL_99:
  ++v701;
  v704 = -1;
  LODWORD(v705) = -1;
  v706 = 0;
  LOWORD(v707) = 256;
  v708 = COERCE_DOUBLE(v699);
  v709 = "static execution count estimation";
  v710 = 34;
  v711 = 0;
  v712 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v704);
  JSC::DFG::runAndLog<JSC::DFG::StaticExecutionCountEstimationPhase>((uint64_t)&v704);
  if (HIBYTE(qword_1ECF4C32A) && !v711)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v704, (uint64_t)v42, v102, v103, v104, v105, v106, v107);
  v108 = v712;
  v712 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 1)
      WTF::fastFree((unint64_t)v108, v42, v102, v103, v104, v105, v106, v107);
    else
      --*(_DWORD *)v108;
  }
  if (*(_DWORD *)(v2 + 16) == 5)
  {
    if ((JSC::DFG::performOSREntrypointCreation((JSC::DFG *)v699, (JSC::DFG::Graph *)v42) & 1) == 0)
      goto LABEL_374;
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v327, v328, v329, v330, v331, v332, v333);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performCPSRethreading((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  }
  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    v697 = 0;
    JSC::DFG::validate((unsigned int *)v699, (void *)1, &v697, v103, v104, v105, v106, v107);
    v340 = v697;
    v697 = 0;
    if (v340)
    {
      if (*(_DWORD *)v340 == 1)
        WTF::fastFree((unint64_t)v340, v42, v334, v335, v336, v337, v338, v339);
      else
        --*(_DWORD *)v340;
    }
  }
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    if (!LOBYTE(v708))
    {
      __break(0xC471u);
      JUMPOUT(0x1984C21A0);
    }
    v109 = *(_QWORD *)(v705 + 48);
    if (!v109)
    {
LABEL_113:
      v112 = v706;
      if (v706)
      {
        v706 = 0;
        LODWORD(v707) = 0;
        WTF::fastFree((unint64_t)v112, v42, v43, v44, v45, v46, v47, v48);
      }
      if (LOBYTE(v694[0]))
        goto LABEL_54;
      goto LABEL_116;
    }
    if (*(uint64_t **)(v109 + 64) != &v704)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C21C0);
    }
    v110 = (unsigned __int8 *)(v109 + 46);
    if (__ldaxr((unsigned __int8 *)(v109 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v110))
    {
      goto LABEL_112;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v110);
LABEL_112:
    *(_QWORD *)(v109 + 64) = 0;
    goto LABEL_113;
  }
LABEL_116:
  ++v701;
  JSC::DFG::performPredictionPropagation((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (!HIBYTE(word_1ECF4C328))
    goto LABEL_127;
  LOWORD(v694[0]) = 256;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
  if (!LOBYTE(v708))
  {
    __break(0xC471u);
    JUMPOUT(0x1984C225CLL);
  }
  v113 = *(_QWORD *)(v705 + 48);
  if (v113)
  {
    if (*(uint64_t **)(v113 + 64) != &v704)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C227CLL);
    }
    v114 = (unsigned __int8 *)(v113 + 46);
    if (__ldaxr((unsigned __int8 *)(v113 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v114))
    {
      goto LABEL_123;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v114);
LABEL_123:
    *(_QWORD *)(v113 + 64) = 0;
  }
  v116 = v706;
  if (v706)
  {
    v706 = 0;
    LODWORD(v707) = 0;
    WTF::fastFree((unint64_t)v116, v42, v43, v44, v45, v46, v47, v48);
  }
  if (LOBYTE(v694[0]))
    goto LABEL_54;
LABEL_127:
  ++v701;
  JSC::DFG::runPhase<JSC::DFG::FixupPhase>((uint64_t)v699);
  if (!HIBYTE(word_1ECF4C328))
    goto LABEL_138;
  LOWORD(v694[0]) = 256;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
  if (!LOBYTE(v708))
  {
    __break(0xC471u);
    JUMPOUT(0x1984C22D4);
  }
  v117 = *(_QWORD *)(v705 + 48);
  if (v117)
  {
    if (*(uint64_t **)(v117 + 64) != &v704)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C22F4);
    }
    v118 = (unsigned __int8 *)(v117 + 46);
    if (__ldaxr((unsigned __int8 *)(v117 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v118))
    {
      goto LABEL_134;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v118);
LABEL_134:
    *(_QWORD *)(v117 + 64) = 0;
  }
  v120 = v706;
  if (v706)
  {
    v706 = 0;
    LODWORD(v707) = 0;
    WTF::fastFree((unint64_t)v120, v42, v43, v44, v45, v46, v47, v48);
  }
  if (LOBYTE(v694[0]))
    goto LABEL_54;
LABEL_138:
  ++v701;
  JSC::DFG::runPhase<JSC::DFG::InvalidationPointInjectionPhase>((uint64_t)v699);
  if (!HIBYTE(word_1ECF4C328))
    goto LABEL_149;
  LOWORD(v694[0]) = 256;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
  if (!LOBYTE(v708))
  {
    __break(0xC471u);
    JUMPOUT(0x1984C2314);
  }
  v121 = *(_QWORD *)(v705 + 48);
  if (v121)
  {
    if (*(uint64_t **)(v121 + 64) != &v704)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C2334);
    }
    v122 = (unsigned __int8 *)(v121 + 46);
    if (__ldaxr((unsigned __int8 *)(v121 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v122))
    {
      goto LABEL_145;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v122);
LABEL_145:
    *(_QWORD *)(v121 + 64) = 0;
  }
  v124 = v706;
  if (v706)
  {
    v706 = 0;
    LODWORD(v707) = 0;
    WTF::fastFree((unint64_t)v124, v42, v43, v44, v45, v46, v47, v48);
  }
  if (LOBYTE(v694[0]))
    goto LABEL_54;
LABEL_149:
  ++v701;
  JSC::DFG::runPhase<JSC::DFG::TypeCheckHoistingPhase>((uint64_t)v699);
  v700 = 1;
  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    v696 = 0;
    JSC::DFG::validate((unsigned int *)v699, (void *)1, &v696, v125, v126, v127, v128, v129);
    v348 = v696;
    v696 = 0;
    if (v348)
    {
      if (*(_DWORD *)v348 == 1)
        WTF::fastFree((unint64_t)v348, v341, v342, v343, v344, v345, v346, v347);
      else
        --*(_DWORD *)v348;
    }
  }
  if (!HIBYTE(word_1ECF4C328))
    goto LABEL_161;
  LOWORD(v694[0]) = 256;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
  if (!LOBYTE(v708))
  {
    __break(0xC471u);
    JUMPOUT(0x1984C235CLL);
  }
  v130 = *(_QWORD *)(v705 + 48);
  if (v130)
  {
    if (*(uint64_t **)(v130 + 64) != &v704)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C237CLL);
    }
    v131 = (unsigned __int8 *)(v130 + 46);
    if (__ldaxr((unsigned __int8 *)(v130 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v131))
    {
      goto LABEL_157;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v131);
LABEL_157:
    *(_QWORD *)(v130 + 64) = 0;
  }
  v133 = v706;
  if (v706)
  {
    v706 = 0;
    LODWORD(v707) = 0;
    WTF::fastFree((unint64_t)v133, v42, v43, v44, v45, v46, v47, v48);
  }
  if (LOBYTE(v694[0]))
    goto LABEL_54;
LABEL_161:
  ++v701;
  JSC::DFG::runPhase<JSC::DFG::BackwardsPropagationPhase>((uint64_t)v699);
  if (!HIBYTE(word_1ECF4C328))
    goto LABEL_172;
  LOWORD(v694[0]) = 256;
  JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
  if (!LOBYTE(v708))
  {
    __break(0xC471u);
    JUMPOUT(0x1984C239CLL);
  }
  v134 = *(_QWORD *)(v705 + 48);
  if (v134)
  {
    if (*(uint64_t **)(v134 + 64) != &v704)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C23BCLL);
    }
    v135 = (unsigned __int8 *)(v134 + 46);
    if (__ldaxr((unsigned __int8 *)(v134 + 46)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v135))
    {
      goto LABEL_168;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v135);
LABEL_168:
    *(_QWORD *)(v134 + 64) = 0;
  }
  v137 = v706;
  if (v706)
  {
    v706 = 0;
    LODWORD(v707) = 0;
    WTF::fastFree((unint64_t)v137, v42, v43, v44, v45, v46, v47, v48);
  }
  if (LOBYTE(v694[0]))
    goto LABEL_54;
LABEL_172:
  ++v701;
  JSC::DFG::performStrengthReduction((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v138, v139, v140, v141, v142, v143, v144);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  JSC::DFG::performCPSRethreading((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v145, v146, v147, v148, v149, v150, v151);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  JSC::DFG::performCFA(v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v152, v153, v154, v155, v156, v157, v158);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  JSC::DFG::performConstantFolding((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v159, v160, v161, v162, v163, v164, v165);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  v166 = JSC::DFG::performCFGSimplification((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v167, v168, v169, v170, v171, v172, v173);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  v179 = JSC::DFG::performLocalCSE((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    v695 = 0;
    JSC::DFG::validate((unsigned int *)v699, (void *)1, &v695, v174, v175, v176, v177, v178);
    v497 = v695;
    v695 = 0;
    if (v497)
    {
      if (*(_DWORD *)v497 == 1)
        WTF::fastFree((unint64_t)v497, v42, v491, v492, v493, v494, v495, v496);
      else
        --*(_DWORD *)v497;
    }
  }
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v180, v181, v182, v183, v184, v185, v186);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  v187 = v166 | v179 | JSC::DFG::performCPSRethreading((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if ((*(_DWORD *)(v2 + 16) & 0xFFFFFFFE) == 4)
  {
    if (!v187)
      goto LABEL_196;
    goto LABEL_189;
  }
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v188, v189, v190, v191, v192, v193, v194);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  if (((v187 | JSC::DFG::performVarargsForwarding((JSC::DFG *)v699, (JSC::DFG::Graph *)v42)) & 1) != 0)
  {
LABEL_189:
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v195, v196, v197, v198, v199, v200, v201);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performCFA(v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v202, v203, v204, v205, v206, v207, v208);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performConstantFolding((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v209, v210, v211, v212, v213, v214, v215);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performCFGSimplification((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  }
LABEL_196:
  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    JSC::DFG::Graph::ensureCPSDominators((JSC::DFG::Graph *)v699);
    JSC::DFG::Graph::ensureCPSNaturalLoops((JSC::DFG::Graph *)v699);
  }
  v216 = *(_DWORD *)(v2 + 16);
  if ((v216 - 2) >= 2)
  {
    if ((v216 - 4) >= 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C2AA8);
    }
    if (!JSC::FTL::canCompile((uint64_t)v699, (JSC::DFG::Graph *)v42))
      goto LABEL_374;
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v349, v350, v351, v352, v353, v354, v355);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performCleanUp((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v356, v357, v358, v359, v360, v361, v362);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performCriticalEdgeBreaking((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if ((_BYTE)dword_1ECF4C458)
    {
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v363, v364, v365, v366, v367, v368, v369);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performLoopPreHeaderCreation((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    }
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v370, v371, v372, v373, v374, v375, v376);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performCPSRethreading((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v377, v378, v379, v380, v381, v382, v383);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performSSAConversion((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v384, v385, v386, v387, v388, v389, v390);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performSSALowering((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (BYTE2(dword_1ECF4C458))
    {
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v391, v392, v393, v394, v395, v396, v397);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performPutStackSinking((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    }
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v398, v399, v400, v401, v402, v403, v404);
      if (LOBYTE(v694[0]))
      {
LABEL_54:
        v58 = 4;
        goto LABEL_55;
      }
    }
    ++v701;
    JSC::DFG::performArgumentsElimination((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (BYTE2(dword_1ECF4C458))
    {
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v405, v406, v407, v408, v409, v410, v411);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performPutStackSinking((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    }
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v412, v413, v414, v415, v416, v417, v418);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performConstantHoisting((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v419, v420, v421, v422, v423, v424, v425);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performGlobalCSE((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v426, v427, v428, v429, v430, v431, v432);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performGraphPackingAndLivenessAnalysis((JSC::DFG *)v699, (JSC::DFG::Graph *)v42, v43, v44, v45, v46, v47, v48);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v433, v434, v435, v436, v437, v438, v439);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performCFA(v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v440, v441, v442, v443, v444, v445, v446);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performConstantFolding((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v447, v448, v449, v450, v451, v452, v453);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performCFGSimplification((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v454, v455, v456, v457, v458, v459, v460);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performCleanUp((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v461, v462, v463, v464, v465, v466, v467);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    v468 = JSC::DFG::performStrengthReduction((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(dword_1ECF4C458))
    {
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v469, v470, v471, v472, v473, v474, v475);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      v476 = JSC::DFG::performCriticalEdgeBreaking((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v477, v478, v479, v480, v481, v482, v483);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      v468 |= v476 | JSC::DFG::performObjectAllocationSinking((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    }
    if ((_BYTE)word_1ECF4C45C)
    {
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v484, v485, v486, v487, v488, v489, v490);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      if (((v468 | JSC::DFG::performValueRepReduction((JSC::DFG *)v699, (JSC::DFG::Graph *)v42)) & 1) == 0)
        goto LABEL_387;
    }
    else if (!v468)
    {
LABEL_387:
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v528, v529, v530, v531, v532, v533, v534);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performGraphPackingAndLivenessAnalysis((JSC::DFG *)v699, (JSC::DFG::Graph *)v42, v43, v44, v45, v46, v47, v48);
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v535, v536, v537, v538, v539, v540, v541);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performCFA(v699, (JSC::DFG::Graph *)v42);
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v542, v543, v544, v545, v546, v547, v548);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performLICM((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v549, v550, v551, v552, v553, v554, v555);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performGraphPackingAndLivenessAnalysis((JSC::DFG *)v699, (JSC::DFG::Graph *)v42, v43, v44, v45, v46, v47, v48);
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v556, v557, v558, v559, v560, v561, v562);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performIntegerRangeOptimization((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v563, v564, v565, v566, v567, v568, v569);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performCleanUp((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v570, v571, v572, v573, v574, v575, v576);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performIntegerCheckCombining((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v577, v578, v579, v580, v581, v582, v583);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performGlobalCSE((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
      v700 = 2;
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v584, v585, v586, v587, v588, v589, v590);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performGraphPackingAndLivenessAnalysis((JSC::DFG *)v699, (JSC::DFG::Graph *)v42, v43, v44, v45, v46, v47, v48);
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v591, v592, v593, v594, v595, v596, v597);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performCFA(v699, (JSC::DFG::Graph *)v42);
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v598, v599, v600, v601, v602, v603, v604);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performGlobalStoreBarrierInsertion((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
      if (HIBYTE(word_1ECF4C328))
      {
        LOWORD(v694[0]) = 256;
        JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
        JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v605, v606, v607, v608, v609, v610, v611);
        if (LOBYTE(v694[0]))
          goto LABEL_54;
      }
      ++v701;
      JSC::DFG::performStoreBarrierClustering((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
      if (!BYTE1(dword_1ECF4C458))
      {
LABEL_415:
        if (HIBYTE(word_1ECF4C328))
        {
          LOWORD(v694[0]) = 256;
          JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
          JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v619, v620, v621, v622, v623, v624, v625);
          if (LOBYTE(v694[0]))
            goto LABEL_54;
        }
        ++v701;
        JSC::DFG::performCleanUp((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
        if (HIBYTE(word_1ECF4C328))
        {
          LOWORD(v694[0]) = 256;
          JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
          JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v626, v627, v628, v629, v630, v631, v632);
          if (LOBYTE(v694[0]))
            goto LABEL_54;
        }
        ++v701;
        JSC::DFG::performDCE((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
        if (HIBYTE(word_1ECF4C328))
        {
          LOWORD(v694[0]) = 256;
          JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
          JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v633, v634, v635, v636, v637, v638, v639);
          if (LOBYTE(v694[0]))
            goto LABEL_54;
        }
        ++v701;
        JSC::DFG::performStackLayout((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
        if (HIBYTE(word_1ECF4C328))
        {
          LOWORD(v694[0]) = 256;
          JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
          JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v640, v641, v642, v643, v644, v645, v646);
          if (LOBYTE(v694[0]))
            goto LABEL_54;
        }
        ++v701;
        JSC::DFG::performGraphPackingAndLivenessAnalysis((JSC::DFG *)v699, (JSC::DFG::Graph *)v42, v43, v44, v45, v46, v47, v48);
        if (HIBYTE(word_1ECF4C328))
        {
          LOWORD(v694[0]) = 256;
          JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
          JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v647, v648, v649, v650, v651, v652, v653);
          if (LOBYTE(v694[0]))
            goto LABEL_54;
        }
        ++v701;
        JSC::DFG::performOSRAvailabilityAnalysis((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
        if (JSC::FTL::canCompile((uint64_t)v699, v654))
        {
          ++v701;
          v660 = 1;
          if (!HIBYTE(word_1ECF4C286) && !BYTE1(dword_1ECF4C28A))
            v660 = (*(_DWORD *)(v2 + 16) & 0xFFFFFFFE) == 4 && BYTE2(dword_1ECF4C28A) != 0;
          LOWORD(v703) = 256;
          JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)&v703, 0);
          JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v661, v662, v663, v664, v665, v666, v667);
          BYTE1(v703) = 1;
          if ((_BYTE)v703)
            goto LABEL_54;
          ++v701;
          JSC::FTL::State::State((JSC::FTL::State *)&v704, (JSC::DFG::Graph *)v699);
          JSC::FTL::lowerDFGToB3((uint64_t)&v704, v668);
          v669 = JSC::JITPlan::computeCompileTimes((JSC::JITPlan *)v2);
          if (v669)
            *(double *)(v2 + 24) = WTF::MonotonicTime::now((WTF::MonotonicTime *)v669);
          if ((_BYTE)dword_1ECF4C424)
            goto LABEL_451;
          JSC::FTL::compile((uint64_t)&v704, &v703, v670, v671, v672, v673, v674, v675);
          BYTE1(v703) = 1;
          if ((_BYTE)v703)
          {
            v58 = 4;
LABEL_453:
            JSC::FTL::State::~State((JSC::FTL::State *)&v704, v676, v677, v678, v679, v680, v681, v682);
            if (BYTE1(v703))
              goto LABEL_55;
            __break(0xC471u);
LABEL_455:
            JUMPOUT(0x1984C2034);
          }
          if (BYTE1(dword_1ECF4C424)
            || (_BYTE)v706
            || (JSC::FTL::link(&v704, v676, v677, v678, v679, v680, v681, v682), (_BYTE)v706))
          {
LABEL_451:
            JSC::FTL::fail((uint64_t)&v704);
          }
          else
          {
            v683 = *(_QWORD *)(v2 + 120);
            if (v683)
            {
              (*(void (**)(double *__return_ptr))(*(_QWORD *)v683 + 40))(v694);
              v684 = *(unsigned int **)&v694[0];
              if (*(_QWORD *)&v694[0])
              {
                v692 = v694[0];
                v694[0] = 0.0;
                JSC::DFG::Plan::finalizeInThread((_QWORD *)v2, &v692);
                v692 = 0.0;
                v685 = v684 + 2;
                do
                {
                  v686 = __ldaxr(v685);
                  v687 = v686 - 1;
                }
                while (__stlxr(v687, v685));
                if (!v687)
                {
                  atomic_store(1u, v684 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v684 + 32))(v684);
                }
                v688 = *(unsigned int **)&v694[0];
                v694[0] = 0.0;
                if (v688)
                {
                  v689 = v688 + 2;
                  do
                  {
                    v690 = __ldaxr(v689);
                    v691 = v690 - 1;
                  }
                  while (__stlxr(v691, v689));
                  if (!v691)
                  {
                    atomic_store(1u, v688 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v688 + 32))(v688);
                  }
                }
              }
            }
          }
          v58 = 3;
          goto LABEL_453;
        }
LABEL_374:
        v498 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        JSC::DFG::FailedFinalizer::FailedFinalizer(v498, v2);
        v499 = *(_QWORD *)(v2 + 120);
        *(_QWORD *)(v2 + 120) = v498;
        if (v499)
          (*(void (**)(uint64_t))(*(_QWORD *)v499 + 8))(v499);
        v58 = 0;
        goto LABEL_55;
      }
      if (!HIBYTE(word_1ECF4C328)
        || (LOWORD(v694[0]) = 256,
            JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0),
            JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v612, v613, v614, v615, v616, v617, v618), !LOBYTE(v694[0])))
      {
        ++v701;
        JSC::DFG::performMovHintRemoval((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
        goto LABEL_415;
      }
      goto LABEL_54;
    }
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v500, v501, v502, v503, v504, v505, v506);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performGraphPackingAndLivenessAnalysis((JSC::DFG *)v699, (JSC::DFG::Graph *)v42, v43, v44, v45, v46, v47, v48);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v507, v508, v509, v510, v511, v512, v513);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performCFA(v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v514, v515, v516, v517, v518, v519, v520);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performConstantFolding((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    if (HIBYTE(word_1ECF4C328))
    {
      LOWORD(v694[0]) = 256;
      JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
      JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v521, v522, v523, v524, v525, v526, v527);
      if (LOBYTE(v694[0]))
        goto LABEL_54;
    }
    ++v701;
    JSC::DFG::performCFGSimplification((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
    goto LABEL_387;
  }
  v700 = 2;
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v217, v218, v219, v220, v221, v222, v223);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  JSC::DFG::performTierUpCheckInjection((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v224, v225, v226, v227, v228, v229, v230);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  JSC::DFG::performFastStoreBarrierInsertion((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v231, v232, v233, v234, v235, v236, v237);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  JSC::DFG::performStoreBarrierClustering((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v238, v239, v240, v241, v242, v243, v244);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  JSC::DFG::performCleanUp((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v245, v246, v247, v248, v249, v250, v251);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  JSC::DFG::performCPSRethreading((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v252, v253, v254, v255, v256, v257, v258);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  JSC::DFG::performDCE((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v259, v260, v261, v262, v263, v264, v265);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  JSC::DFG::performPhantomInsertion((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v266, v267, v268, v269, v270, v271, v272);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  JSC::DFG::performStackLayout((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (HIBYTE(word_1ECF4C328))
  {
    LOWORD(v694[0]) = 256;
    JSC::DFG::GraphSafepoint::GraphSafepoint((uint64_t)&v704, (uint64_t)v699, (uint64_t)v694, 0);
    JSC::DFG::GraphSafepoint::~GraphSafepoint((JSC::DFG::GraphSafepoint *)&v704, v273, v274, v275, v276, v277, v278, v279);
    if (LOBYTE(v694[0]))
      goto LABEL_54;
  }
  ++v701;
  JSC::DFG::performVirtualRegisterAllocation((JSC::DFG *)v699, (JSC::DFG::Graph *)v42);
  if (*(_DWORD *)(v2 + 16) == 3 && !JSC::DFG::canCompileUnlinked((JSC::DFG *)v699, v280))
    goto LABEL_374;
  JSC::CompilerTimingScope::CompilerTimingScope(v694, (uint64_t)"DFG", 4, (uint64_t)"machine code generation", 24);
  JSC::DFG::SpeculativeJIT::SpeculativeJIT((JSC::DFG::SpeculativeJIT *)&v704, v699);
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 56) + 28) & 0x3000) == 0x2000)
    JSC::DFG::SpeculativeJIT::compileFunction((JSC::DFG::SpeculativeJIT *)&v704, v286, v287, v288, v289, v290, v291, v292);
  else
    JSC::DFG::SpeculativeJIT::compile((JSC::DFG::SpeculativeJIT *)&v704, v286, v287, v288, v289, v290, v291, v292);
  JSC::DFG::SpeculativeJIT::~SpeculativeJIT((JSC::DFG::SpeculativeJIT *)&v704, v293, v294, v295, v296, v297, v298, v299);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v694);
  v300 = *(_QWORD *)(v2 + 120);
  if (v300)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v300 + 40))(&v704);
    v301 = (unsigned int *)v704;
    if (v704)
    {
      v693 = v704;
      v704 = 0;
      JSC::DFG::Plan::finalizeInThread((_QWORD *)v2, &v693);
      v693 = 0;
      v302 = v301 + 2;
      do
      {
        v303 = __ldaxr(v302);
        v304 = v303 - 1;
      }
      while (__stlxr(v304, v302));
      if (!v304)
      {
        atomic_store(1u, v301 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v301 + 32))(v301);
      }
      v305 = (unsigned int *)v704;
      v704 = 0;
      if (v305)
      {
        v306 = v305 + 2;
        do
        {
          v307 = __ldaxr(v306);
          v308 = v307 - 1;
        }
        while (__stlxr(v308, v306));
        if (!v308)
        {
          atomic_store(1u, v305 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v305 + 32))(v305);
        }
      }
    }
  }
  v58 = 2;
LABEL_55:
  JSC::DFG::Graph::~Graph((JSC::DFG::Graph *)v699, v42, v43, v44, v45, v46, v47, v48);
  return v58;
}

uint64_t WTF::dataLog<char [37],JSC::BytecodeIndex,char [15],JSC::Operands<std::optional<JSC::JSValue>,WTF::Vector<std::optional<JSC::JSValue>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>,char [2]>(JSC::BytecodeIndex *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Compiler must handle OSR entry from ");
  JSC::BytecodeIndex::dump(a1, v6);
  WTF::PrintStream::printf(v6, "%s", " with values: ");
  JSC::Operands<std::optional<JSC::JSValue>,WTF::Vector<std::optional<JSC::JSValue>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(a2, (uint64_t)v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void JSC::DFG::`anonymous namespace'::dumpAndVerifyGraph(JSC::DFG::_anonymous_namespace_ *this, JSC::DFG::Graph *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  const char *v22;
  char v23;
  char **v24;
  char *v25;

  v22 = (const char *)a2;
  if (!(qword_1ECF4C32A | byte_1ECF4C323)
    && (BYTE1(qword_1ECF4C32A) ? (v9 = (*(_DWORD *)(*((_QWORD *)this + 3) + 16) & 0xFFFFFFFE) == 4) : (v9 = 0),
        !v9 ? (v10 = (_DWORD)a3 == 0) : (v10 = 0),
        v10))
  {
    v12 = 1;
  }
  else
  {
    WTF::dataLog<char const*,char [2]>(&v22, "\n");
    v11 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v11 != -1)
    {
      v25 = &v23;
      v24 = &v25;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    JSC::DFG::Graph::dump(this, (WTF::PrintStream *)WTF::s_file, 0);
    v12 = 0;
  }
  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    v21 = 0;
    JSC::DFG::validate((unsigned int *)this, (void *)v12, &v21, a4, a5, a6, a7, a8);
    v20 = v21;
    v21 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
      else
        --*(_DWORD *)v20;
    }
  }
}

void JSC::DFG::Plan::finalizeInThread(_QWORD *a1, _QWORD *a2)
{
  JSC::DFG::DesiredWatchpoints *v4;
  JSC::CodeBlock *v5;
  JSC::DFG::DesiredIdentifiers *v6;
  JSC::DFG::CommonData *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::RecordedStatuses *v26;

  v4 = (JSC::DFG::DesiredWatchpoints *)(a1 + 17);
  v5 = (JSC::CodeBlock *)a1[5];
  v6 = (JSC::DFG::DesiredIdentifiers *)(a1 + 30);
  v7 = (JSC::DFG::CommonData *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2);
  JSC::DFG::DesiredWatchpoints::countWatchpoints(v4, v5, v6, v7, v8, v9, v10, v11);
  JSC::DFG::DesiredWeakReferences::finalize((JSC::DFG::DesiredWeakReferences *)(a1 + 35), v12, v13, v14, v15, v16, v17, v18);
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
  v26 = (JSC::RecordedStatuses *)a1[43];
  if (v26)
    JSC::RecordedStatuses::shrinkToFit(v26, v19, v20, v21, v22, v23, v24, v25);
}

uint64_t JSC::DFG::Plan::finalize(JSC::DFG::Plan *this)
{
  int v2;
  uint64_t v3;
  JSC::Profiler::Database *v4;
  unint64_t v5;
  uint64_t v6;
  char **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  JSC::Profiler::Database *v13;
  char v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  JSC::DFG::CommonData *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::RecordedStatuses *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned __int8 *v62;
  uint64_t v64;
  uint64_t v65;
  int v66;
  JSC::Profiler::Database *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  unsigned int *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int *v112;
  JSC::JSCell **v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  JSC::JSCell *v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int *v145;
  int *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t i;
  unsigned int *v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int v166;
  WTF *v167;
  void (**v168)(WTF::StringPrintStream *__hidden);
  WTF *v169;
  __int128 v170;
  _BYTE v171[128];
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 32))(*((_QWORD *)this + 15));
  v3 = *((_QWORD *)this + 5);
  if (v2)
    goto LABEL_2;
  v8 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C));
  if (v8 == &JSC::FunctionCodeBlock::s_info)
  {
    v9 = *(_QWORD *)(v3 + 64);
    v10 = (uint64_t *)(v9 + 96);
    v11 = (uint64_t *)(v9 + 104);
    if (*(int *)(*(_QWORD *)(v3 + 56) + 20) >= 0)
      v11 = v10;
  }
  else
  {
    if (v8 != &JSC::EvalCodeBlock::s_info
      && v8 != &JSC::ProgramCodeBlock::s_info
      && v8 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C3AA4);
    }
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 64) + 72);
  }
  if (*v11)
  {
    v12 = *(_QWORD *)(v3 + 192);
    if (v12 != JSC::CodeBlock::baselineVersion(*v11))
    {
      v3 = *((_QWORD *)this + 5);
      goto LABEL_15;
    }
    v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 24))(*((_QWORD *)this + 15));
    v3 = *((_QWORD *)this + 5);
    if ((v14 & 1) == 0)
    {
LABEL_2:
      if (!v3)
        goto LABEL_8;
      v4 = *(JSC::Profiler::Database **)(*(_QWORD *)(v3 + 72) + 93016);
      if (v4)
      {
        v168 = off_1E3572250;
        v169 = (WTF *)v171;
        v170 = xmmword_199122F80;
        v171[0] = 0;
        WTF::PrintStream::printf((WTF::PrintStream *)&v168, "%s", "failed");
        v168[5]((WTF::StringPrintStream *)&v168);
        WTF::StringPrintStream::toCString(&v168, (uint64_t *)&v167);
        if (v169 != (WTF *)v171)
          WTF::fastFree((unint64_t)v169, v69, v70, v71, v72, v73, v74, v75);
        JSC::Profiler::Database::logEvent(v4, v3, "dfgFinalize", &v167, v72, v73, v74, v75);
        v83 = v167;
        v167 = 0;
        if (v83)
        {
          if (*(_DWORD *)v83 == 1)
            WTF::fastFree((unint64_t)v83, v76, v77, v78, v79, v80, v81, v82);
          else
            --*(_DWORD *)v83;
        }
      }
      v3 = 0;
      goto LABEL_5;
    }
    v15 = *(unsigned int **)(v3 + 120);
    if (v15)
    {
      v16 = v15 + 2;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
    v18 = (JSC::DFG::CommonData *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 72))(v15);
    if (!JSC::DFG::DesiredGlobalProperties::isStillValidOnMainThread((JSC::DFG::Plan *)((char *)this + 232), *((JSC::VM **)this + 4), (JSC::DFG::Plan *)((char *)this + 240), v19, v20, v21, v22, v23))goto LABEL_68;
    JSC::DFG::DesiredIdentifiers::reallyAdd((JSC::DFG::Plan *)((char *)this + 240), *((uint64_t ***)this + 4), v18);
    v38 = (_DWORD *)*((_QWORD *)this + 38);
    if (v38 && *v38)
    {
      v39 = (_DWORD *)*((_QWORD *)this + 39);
    }
    else
    {
      v39 = (_DWORD *)*((_QWORD *)this + 39);
      if (!v39 || !*v39)
        goto LABEL_31;
    }
    *((_QWORD *)this + 39) = 0;
    v40 = *((_QWORD *)v18 + 9);
    *((_QWORD *)v18 + 9) = v39;
    if (v40)
      WTF::fastFree(v40, v31, v32, v33, v34, v35, v36, v37);
    v41 = *((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;
    v42 = *((_QWORD *)v18 + 8);
    *((_QWORD *)v18 + 8) = v41;
    if (v42)
      WTF::fastFree(v42, v31, v32, v33, v34, v35, v36, v37);
LABEL_31:
    JSC::DFG::DesiredTransitions::reallyAdd((JSC::DFG::Plan *)((char *)this + 320), *((JSC::VM **)this + 4), v18);
    if (JSC::DFG::DesiredWatchpoints::reallyAdd((JSC::DFG::Plan *)((char *)this + 136), *((JSC::CodeBlock **)this + 5), (JSC::DFG::Plan *)((char *)this + 240), v18, v43, v44, v45, v46))
    {
      v47 = *((_QWORD *)this + 43);
      *((_QWORD *)this + 43) = 0;
      v48 = (JSC::RecordedStatuses *)*((_QWORD *)v18 + 15);
      *((_QWORD *)v18 + 15) = v47;
      if (v48)
      {
        JSC::RecordedStatuses::~RecordedStatuses(v48, v24, v25, v26, v27, v28, v29, v30);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      v57 = *((_QWORD *)v18 + 20);
      if (v57)
      {
        v58 = 1;
        do
        {
          JSC::DirectCallLinkInfo::validateSpeculativeRepatchOnMainThread(v57, *((JSC::VM **)this + 4));
          v57 = *(_QWORD *)(v57 + 104);
        }
        while (v57);
      }
      else
      {
        v58 = 1;
      }
LABEL_36:
      v59 = v15 + 2;
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
      {
        atomic_store(1u, v15 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 32))(v15);
      }
      v3 = *((_QWORD *)this + 5);
      if ((v58 & 1) == 0)
      {
LABEL_15:
        if (!v3)
        {
          v3 = 1;
          goto LABEL_8;
        }
        goto LABEL_16;
      }
      v62 = (unsigned __int8 *)(v3 + 16);
      if (__ldaxr(v62))
      {
        __clrex();
      }
      else if (!__stxr(1u, v62))
      {
LABEL_44:
        v64 = *((_QWORD *)this + 5);
        v65 = *(unsigned int *)(v64 + 172);
        if (*(_DWORD *)(v64 + 168) > v65)
        {
          v68 = *(_QWORD *)(v64 + 160);
          if ((_DWORD)v65)
          {
            *(_DWORD *)(v64 + 168) = v65;
            *(_QWORD *)(v64 + 160) = WTF::fastRealloc(v68, 8 * v65, v25, v26, v27, v28, v29, v30);
          }
          else if (v68)
          {
            *(_QWORD *)(v64 + 160) = 0;
            *(_DWORD *)(v64 + 168) = 0;
            WTF::fastFree(v68, v24, v25, v26, v27, v28, v29, v30);
          }
        }
        v66 = __ldxr(v62);
        if (v66 == 1)
        {
          if (!__stlxr(0, v62))
          {
LABEL_54:
            v3 = *((_QWORD *)this + 5);
            if ((*(_BYTE *)(v3 + 18) & 0x20) == 0)
            {
              if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
              {
                JSC::TrackedReferences::TrackedReferences(&v168);
                v99 = *(unsigned int **)(*((_QWORD *)this + 5) + 120);
                if (v99)
                {
                  v100 = v99 + 2;
                  do
                    v101 = __ldaxr(v100);
                  while (__stlxr(v101 + 1, v100));
                }
                v102 = v99 + 2;
                v109 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v99 + 72))(v99);
                do
                {
                  v110 = __ldaxr(v102);
                  v111 = v110 - 1;
                }
                while (__stlxr(v111, v102));
                if (!v111)
                {
                  atomic_store(1u, v99 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v99 + 32))(v99);
                }
                v112 = *(unsigned int **)(v109 + 64);
                if (v112)
                  v113 = (JSC::JSCell **)(v112 + 2);
                else
                  v113 = 0;
                if (v112)
                  v114 = (uint64_t)&v112[2 * *v112 + 2];
                else
                  v114 = 0;
                while (v113 != (JSC::JSCell **)v114)
                {
                  v130 = *v113++;
                  JSC::TrackedReferences::add((uint64_t *)&v168, v130, v103, v104, v105, v106, v107, v108);
                }
                v131 = *(unsigned int **)(*((_QWORD *)this + 5) + 120);
                if (v131)
                {
                  v132 = v131 + 2;
                  do
                    v133 = __ldaxr(v132);
                  while (__stlxr(v133 + 1, v132));
                }
                v134 = v131 + 2;
                v141 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v131 + 72))(v131);
                do
                {
                  v142 = __ldaxr(v134);
                  v143 = v142 - 1;
                }
                while (__stlxr(v143, v134));
                if (!v143)
                {
                  atomic_store(1u, v131 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v131 + 32))(v131);
                }
                v144 = 0;
                v145 = *(unsigned int **)(v141 + 72);
                if (v145)
                  v146 = (int *)(v145 + 1);
                else
                  v146 = 0;
                if (v145)
                  v144 = (uint64_t)&v145[*v145 + 1];
                while (v146 != (int *)v144)
                {
                  v147 = *v146++;
                  JSC::TrackedReferences::add((uint64_t *)&v168, (JSC::JSCell *)(16 * (v147 & 0xFFFFFFFE)), v135, v136, v137, v138, v139, v140);
                }
                v148 = *((_QWORD *)this + 5);
                v149 = *(unsigned int *)(v148 + 172);
                if ((_DWORD)v149)
                {
                  v150 = *(uint64_t **)(v148 + 160);
                  v151 = 8 * v149;
                  do
                  {
                    v152 = *v150++;
                    JSC::TrackedReferences::add((uint64_t *)&v168, v152, v135, v136, v137, v138, v139, v140);
                    v151 -= 8;
                  }
                  while (v151);
                }
                for (i = *(_QWORD *)(*((_QWORD *)this + 16) + 8); i; i = *(_QWORD *)(i + 56))
                  JSC::TrackedReferences::add((uint64_t *)&v168, *(JSC::JSCell **)(i + 8), v135, v136, v137, v138, v139, v140);
                v154 = *(unsigned int **)(*((_QWORD *)this + 5) + 120);
                if (v154)
                {
                  v155 = v154 + 2;
                  do
                    v156 = __ldaxr(v155);
                  while (__stlxr(v156 + 1, v155));
                }
                v157 = v154 + 2;
                (*(void (**)(unsigned int *, void (***)(WTF::StringPrintStream *__hidden)))(*(_QWORD *)v154 + 120))(v154, &v168);
                do
                {
                  v165 = __ldaxr(v157);
                  v166 = v165 - 1;
                }
                while (__stlxr(v166, v157));
                if (!v166)
                {
                  atomic_store(1u, v154 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v154 + 32))(v154);
                }
                JSC::TrackedReferences::~TrackedReferences((JSC::TrackedReferences *)&v168, v158, v159, v160, v161, v162, v163, v164);
                v3 = *((_QWORD *)this + 5);
                if (!v3)
                {
                  v3 = 2;
                  goto LABEL_8;
                }
              }
              v67 = *(JSC::Profiler::Database **)(*(_QWORD *)(v3 + 72) + 93016);
              if (v67)
              {
                v168 = off_1E3572250;
                v169 = (WTF *)v171;
                v170 = xmmword_199122F80;
                v171[0] = 0;
                WTF::PrintStream::printf((WTF::PrintStream *)&v168, "%s", "succeeded");
                v168[5]((WTF::StringPrintStream *)&v168);
                WTF::StringPrintStream::toCString(&v168, (uint64_t *)&v167);
                if (v169 != (WTF *)v171)
                  WTF::fastFree((unint64_t)v169, v115, v116, v117, v118, v119, v120, v121);
                JSC::Profiler::Database::logEvent(v67, v3, "dfgFinalize", &v167, v118, v119, v120, v121);
                v129 = v167;
                v167 = 0;
                if (v129)
                {
                  if (*(_DWORD *)v129 == 1)
                    WTF::fastFree((unint64_t)v129, v122, v123, v124, v125, v126, v127, v128);
                  else
                    --*(_DWORD *)v129;
                }
              }
              v3 = 2;
              goto LABEL_5;
            }
            goto LABEL_16;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v62, 0, v25, v26, v27, v28, v29, v30);
        goto LABEL_54;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v62);
      goto LABEL_44;
    }
LABEL_68:
    v58 = 0;
    goto LABEL_36;
  }
LABEL_16:
  v13 = *(JSC::Profiler::Database **)(*(_QWORD *)(v3 + 72) + 93016);
  if (v13)
  {
    v168 = off_1E3572250;
    v169 = (WTF *)v171;
    v170 = xmmword_199122F80;
    v171[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v168, "%s", "invalidated");
    v168[5]((WTF::StringPrintStream *)&v168);
    WTF::StringPrintStream::toCString(&v168, (uint64_t *)&v167);
    if (v169 != (WTF *)v171)
      WTF::fastFree((unint64_t)v169, v84, v85, v86, v87, v88, v89, v90);
    JSC::Profiler::Database::logEvent(v13, v3, "dfgFinalize", &v167, v87, v88, v89, v90);
    v98 = v167;
    v167 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 1)
        WTF::fastFree((unint64_t)v98, v91, v92, v93, v94, v95, v96, v97);
      else
        --*(_DWORD *)v98;
    }
  }
  v3 = 1;
LABEL_5:
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *((_QWORD *)this + 4);
    if (*(_DWORD *)(v6 + 760) >= *(unsigned __int8 *)(v5 + 7))
      JSC::Heap::writeBarrierSlowPath(v6 + 192, v5);
  }
LABEL_8:
  (*(void (**)(_QWORD))(**((_QWORD **)this + 47) + 24))(*((_QWORD *)this + 47));
  return v3;
}

uint64_t JSC::DFG::Plan::iterateCodeBlocksForGC(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  if ((_DWORD)v5)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 16))(*a3, a1[5]);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 16))(*a3, *(_QWORD *)(a1[5] + 192));
    if (a1[9])
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  }
  return v5;
}

uint64_t JSC::DFG::Plan::checkLivenessAndVisitChildren(JSC::DFG::Plan *this, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  JSC::UnlinkedCodeBlock **v15;
  uint64_t v16;
  void *v17;
  int v18;
  WTF *v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  WTF *v37;

  v4 = (*(uint64_t (**)(JSC::DFG::Plan *))(*(_QWORD *)this + 64))(this);
  if (!(_DWORD)v4)
    return v4;
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 5));
  v12 = (unsigned __int8 *)this + 105;
  if (__ldaxr((unsigned __int8 *)this + 105))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 105);
LABEL_5:
  if (*((_BYTE *)this + 104))
  {
    *((_BYTE *)this + 104) = 0;
    v14 = *((_QWORD *)this + 5);
    if (v14)
    {
      if (*((_DWORD *)this + 25))
      {
        v15 = *(JSC::UnlinkedCodeBlock ***)(v14 + 192);
        v16 = *((_QWORD *)v15[7] + 11);
        if (!v16)
          v16 = JSC::UnlinkedCodeBlock::livenessAnalysisSlow(v15[7], v15, v5, v6, v7, v8, v9, v10);
        JSC::BytecodeLivenessAnalysis::getLivenessInfoAtInstruction(v16, (uint64_t)v15, *((_DWORD *)this + 27), v9, v10, &v37, v11);
        v18 = *((_DWORD *)this + 25);
        v19 = v37;
        if (v18)
        {
          v20 = (v18 - 1);
          do
          {
            if (((*(_DWORD *)((char *)v19 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v20) & 1) == 0)
            {
              v21 = *((_QWORD *)this + 10) + 16 * (v20 + *((unsigned int *)this + 24));
              v23 = *(unsigned __int8 *)(v21 + 8);
              v22 = (_BYTE *)(v21 + 8);
              if (v23)
                *v22 = 0;
            }
            --v20;
            --v18;
          }
          while (v18);
          goto LABEL_16;
        }
        if (v37)
LABEL_16:
          WTF::fastFree((unint64_t)v19, v17, v5, v6, v7, v8, v9, v10);
      }
    }
  }
  v24 = __ldxr(v12);
  if (v24 == 1)
  {
    if (!__stlxr(0, v12))
      goto LABEL_22;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 105, 0, v5, v6, v7, v8, v9, v10);
LABEL_22:
  v25 = *((_DWORD *)this + 23);
  if (v25)
  {
    v26 = v25 - 1;
    do
    {
      v27 = *((_QWORD *)this + 10) + 16 * v26;
      if (*(_BYTE *)(v27 + 8))
        v28 = (*(_QWORD *)v27 & 0xFFFE000000000002) == 0;
      else
        v28 = 0;
      if (v28)
        (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
    }
    while ((unint64_t)v26--);
  }
  v30 = *((_QWORD *)this + 43);
  if (v30)
  {
    JSC::RecordedStatuses::visitAggregate(v30, a2);
    JSC::RecordedStatuses::markIfCheap<JSC::AbstractSlotVisitor>(*((_QWORD *)this + 43), (uint64_t)a2);
  }
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(*((_QWORD *)this + 5) + 192));
  (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 9));
  v31 = *((_QWORD *)this + 16);
  if (v31)
  {
    for (i = *(_QWORD *)(v31 + 8); i; i = *(_QWORD *)(i + 56))
      (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(i + 8));
  }
  JSC::DFG::DesiredWeakReferences::visitChildren<JSC::AbstractSlotVisitor>((uint64_t)this + 280, (uint64_t)a2);
  if (*((_DWORD *)this + 85))
  {
    v34 = 0;
    v35 = 0;
    do
    {
      v36 = (_QWORD *)(*((_QWORD *)this + 41) + v34);
      (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *v36);
      (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v36[1]);
      (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v36[2]);
      ++v35;
      v34 += 24;
    }
    while (v35 < *((unsigned int *)this + 85));
  }
  return v4;
}

uint64_t JSC::DFG::Plan::isKnownToBeLiveDuringGC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 64);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 33))
        return 1;
    }
  }
  if (*(_DWORD *)(a1 + 12) == 3)
    return 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 192));
    if ((_DWORD)result)
    {
      if (!*(_QWORD *)(a1 + 72))
        return 1;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

BOOL JSC::DFG::Plan::isKnownToBeLiveAfterGC(JSC::DFG::Plan *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 6);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 64);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 33))
        return 1;
    }
  }
  if (*((_DWORD *)this + 3) == 3)
    return 0;
  v3 = *((_QWORD *)this + 5);
  v4 = *(_QWORD *)(v3 + 64);
  if ((v4 & 8) != 0)
  {
    if ((*(_BYTE *)(v4 - 79) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(_DWORD *)(v4 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(*((_QWORD *)this + 4) + 432)
      || ((*(_QWORD *)((v4 & 0xFFFFFFFFFFFFC000) + 8 * ((v4 >> 10) & 0xF) + 0x28) >> (v4 >> 4)) & 1) == 0)
    {
      return 0;
    }
    v3 = *((_QWORD *)this + 5);
  }
  v5 = *(_QWORD *)(v3 + 192);
  if ((v5 & 8) != 0)
  {
    if ((*(_BYTE *)(v5 - 79) & 1) == 0)
      return 0;
  }
  else if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(*((_QWORD *)this + 4) + 432)
         || ((*(_QWORD *)((v5 & 0xFFFFFFFFFFFFC000) + 8 * ((v5 >> 10) & 0xF) + 0x28) >> (v5 >> 4)) & 1) == 0)
  {
    return 0;
  }
  v6 = *((_QWORD *)this + 9);
  if (!v6)
    return 1;
  if ((v6 & 8) != 0)
    return (*(_BYTE *)(v6 - 79) & 1) != 0;
  return *(_DWORD *)(v6 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*((_QWORD *)this + 4) + 432)
      && ((*(_QWORD *)((v6 & 0xFFFFFFFFFFFFC000) + 8 * ((v6 >> 10) & 0xF) + 0x28) >> (v6 >> 4)) & 1) != 0;
}

void JSC::DFG::Plan::tryFinalizeJITData(JSC::DFG::Plan *this@<X0>, const JSC::DFG::JITCode *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, JSC::DFG::JITData **a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  WTF *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  WTF *v26;
  WTF **v27;
  uint64_t v28;
  unsigned int v29;
  JSC::CodeBlock *v30;
  JSC::VM *v31;
  unsigned int *v32;
  void *v33;
  unsigned int *v34;
  uint64_t v35;
  JSC::DFG::JITData *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::DFG::JITData *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;
  WTF *v97;
  JSC::ExecutableMemoryHandle *v98;

  JSC::JITThunks::ctiStub(*(_QWORD *)(*((_QWORD *)this + 4) + 90440), *((_QWORD *)this + 4), (void (*)(uint64_t *__return_ptr, uint64_t))JSC::DFG::osrExitGenerationThunkGenerator, a3, a4, a5, a6, a7, &v97);
  v19 = v97;
  v18 = (unsigned int *)v98;
  if (v98)
  {
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 + 1, v18));
    v21 = (unsigned int *)v98;
    v98 = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v21, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
      }
    }
  }
  v24 = (unsigned int *)*((_QWORD *)a2 + 33);
  if (v24 && (v25 = *v24, (_DWORD)v25))
  {
    v26 = (WTF *)WTF::fastMalloc((WTF *)((16 * v25) | 8));
    *(_DWORD *)v26 = v25;
    v27 = (WTF **)((char *)v26 + 8);
    v28 = (uint64_t)v26 + 16 * v25 + 8;
    if (v18)
    {
      do
      {
        *v27 = v19;
        do
          v29 = __ldaxr(v18);
        while (__stlxr(v29 + 1, v18));
        v27[1] = (WTF *)v18;
        v27 += 2;
      }
      while (v27 != (WTF **)v28);
    }
    else
    {
      v94 = 8;
      do
      {
        v95 = (WTF **)((char *)v26 + v94);
        *v95 = v19;
        v95[1] = 0;
        v96 = (uint64_t)v26 + v94 + 16;
        v94 += 16;
      }
      while (v96 != v28);
    }
  }
  else
  {
    v26 = 0;
  }
  v97 = v26;
  v31 = (JSC::VM *)*((_QWORD *)this + 4);
  v30 = (JSC::CodeBlock *)*((_QWORD *)this + 5);
  v32 = (unsigned int *)*((_QWORD *)a2 + 37);
  if (v32)
    v33 = (void *)*v32;
  else
    v33 = 0;
  v34 = (unsigned int *)*((_QWORD *)a2 + 42);
  if (v34)
    v35 = *v34;
  else
    v35 = 0;
  v36 = (JSC::DFG::JITData *)(WTF::fastMalloc((WTF *)(8 * v35 + 136 * v33 + 56))
                            + 136 * v33);
  v40 = (JSC::DFG::JITData *)JSC::DFG::JITData::JITData((uint64_t)v36, v33, v35, (uint64_t)a2, &v97, v37, v38, v39);
  if ((JSC::DFG::JITData::tryInitialize(v40, v31, v30, a2, v41, v42, v43, v44) & 1) == 0)
  {
    v53 = *(unsigned int *)v36;
    JSC::DFG::JITData::~JITData(v36, v45, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree((unint64_t)v36 - 136 * v53, v54, v55, v56, v57, v58, v59, v60);
    v36 = 0;
  }
  *a8 = v36;
  v61 = v97;
  v97 = 0;
  if (v61)
  {
    v63 = (char *)v61 + 8;
    v62 = *(unsigned int *)v61;
    if ((_DWORD)v62)
    {
      v64 = &v63[16 * v62];
      do
      {
        v65 = (unsigned int *)*((_QWORD *)v63 + 1);
        *((_QWORD *)v63 + 1) = 0;
        if (v65)
        {
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            atomic_store(1u, v65);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v65, (uint64_t)v45, v46, v47, v48, v49, v50, v51);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
          }
        }
        v63 += 16;
      }
      while (v63 != v64);
    }
    WTF::fastFree((unint64_t)v61, v45, v46, v47, v48, v49, v50, v51);
  }
  if (v18)
  {
    do
    {
      v68 = __ldaxr(v18);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v18));
    if (!v69)
    {
      atomic_store(1u, v18);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v18, (uint64_t)v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
  }
}

void JSC::Structure::forEachProperty<JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1}>(JSC::Structure *a1, JSC::VM *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  unint64_t v21;
  int v22;
  char v23;

  v9 = *((_QWORD *)a1 + 11);
  if (v9
    || (v17 = *((_QWORD *)a1 + 8)) != 0
    && (*(_BYTE *)(v17 + 5) == 1 || *(_DWORD *)(v17 + 80) >= 2u)
    && (JSC::Structure::materializePropertyTable(a1, a2, 1, a4, a5, a6, a7, a8), (v9 = v18) != 0))
  {
    v19 = a3;
    v20[0] = v9;
    v20[1] = &v19;
    v10 = *(_QWORD *)(v9 + 16);
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((v10 & 1) != 0)
    {
      v12 = *(_DWORD *)(v9 + 28) + *(_DWORD *)(v9 + 24);
      if (v12)
      {
        v13 = (unint64_t *)(v11 + *(unsigned int *)(v9 + 8));
        v14 = &v13[v12];
        do
        {
          while (1)
          {
            v15 = *v13;
            if ((*v13 & 0xFFFFFFFFFFFFLL) != 1)
              break;
            if (++v13 == v14)
              return;
          }
          v21 = *v13 & 0xFFFFFFFFFFFFLL;
          v22 = HIBYTE(v15);
          v23 = BYTE6(v15);
          ++v13;
          if (JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1}::operator()(v19, (uint64_t *)&v21, a3, (uint64_t)a4, a5, a6, a7, a8))v16 = v13 == v14;
          else
            v16 = 1;
        }
        while (!v16);
      }
    }
    else
    {
      JSC::PropertyTable::forEachProperty<void JSC::Structure::forEachProperty<JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1}>(JSC::VM &,JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1} const&)::{lambda(JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1} const&)#1}>(JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1} const&)const::{lambda(JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1} const*)#1}::operator()<unsigned int>((uint64_t)v20, v11, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::PropertyTable::forEachProperty<void JSC::Structure::forEachProperty<JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1}>(JSC::VM &,JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1} const&)::{lambda(JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1} const&)#1}>(JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1} const&)const::{lambda(JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1} const*)#1}::operator()<unsigned int>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;

  v8 = *(_DWORD *)(*(_QWORD *)result + 28) + *(_DWORD *)(*(_QWORD *)result + 24);
  if (v8)
  {
    v9 = result;
    v10 = (uint64_t *)(a2 + 4 * *(unsigned int *)(*(_QWORD *)result + 8));
    v11 = &v10[2 * v8];
    do
    {
      while (*v10 == 1)
      {
        v10 += 2;
        if (v10 == v11)
          return result;
      }
      result = JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1}::operator()(**(_QWORD **)(v9 + 8), v10, a3, a4, a5, a6, a7, a8);
      v10 += 2;
      if ((_DWORD)result)
        v12 = v10 == v11;
      else
        v12 = 1;
    }
    while (!v12);
  }
  return result;
}

uint64_t JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1}::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _QWORD *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  if ((*((_BYTE *)a2 + 12) & 4) == 0)
  {
    v10 = *a2;
    if (*a2)
    {
      if ((*(_BYTE *)(v10 + 16) & 0x20) != 0 && (*(_BYTE *)(v10 + 36) & 4) != 0)
        return 1;
      v11 = *(_QWORD **)a1;
      v12 = (_DWORD *)(*(_QWORD *)a1 + 12);
      v13 = *v12;
      v14 = (_DWORD *)(*(_QWORD *)a1 + 8);
      if ((_DWORD)v13 != *v14)
      {
        v15 = (_QWORD *)(*v11 + 8 * v13);
        *(_DWORD *)v10 += 2;
        goto LABEL_6;
      }
    }
    else
    {
      v11 = *(_QWORD **)a1;
      v12 = (_DWORD *)(*(_QWORD *)a1 + 12);
      v13 = *v12;
      v14 = (_DWORD *)(*(_QWORD *)a1 + 8);
      if ((_DWORD)v13 != *v14)
      {
        v15 = (_QWORD *)(*v11 + 8 * v13);
        goto LABEL_6;
      }
    }
    v29 = v13 + (v13 >> 2);
    if (v29 >= 0x10)
      v30 = v29 + 1;
    else
      v30 = 16;
    if (v30 <= v13 + 1)
      v31 = v13 + 1;
    else
      v31 = v30;
    v32 = (_QWORD *)*v11;
    if (v31 < 9)
    {
      v33 = v11 + 2;
      *v11 = v11 + 2;
      *v14 = 8;
    }
    else
    {
      if (v31 >> 29)
      {
        __break(0xC471u);
LABEL_57:
        JUMPOUT(0x1984C48D4);
      }
      v33 = (void *)WTF::fastMalloc((WTF *)(8 * v31));
      *v14 = v31;
      *v11 = v33;
    }
    memcpy(v33, v32, 8 * v13);
    if (v11 + 2 != v32 && v32 != 0)
    {
      if ((_QWORD *)*v11 == v32)
      {
        *v11 = 0;
        *v14 = 0;
      }
      WTF::fastFree((unint64_t)v32, v34, v35, a4, a5, a6, a7, a8);
    }
    v13 = *v12;
    v37 = (_QWORD *)*v11;
    if (v10)
      *(_DWORD *)v10 += 2;
    v15 = &v37[v13];
LABEL_6:
    *v15 = v10;
    *v12 = v13 + 1;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = **(_QWORD **)(a1 + 16);
    v18 = *((_DWORD *)a2 + 2);
    if (v18 <= 63)
    {
      v19 = v17 + 16;
    }
    else
    {
      v19 = *(_QWORD *)(v17 + 8) - 8;
      v18 = 63 - v18;
    }
    v20 = *(_QWORD *)(v19 + 8 * v18);
    v21 = *(unsigned int *)(v16 + 8);
    v22 = (_DWORD *)(v16 + 8);
    if ((_DWORD)v21 == *(_DWORD *)(v16 + 12))
    {
      if (v21 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(v16 + 8), 2 * (int)v21))
      {
        *(_BYTE *)v16 = 1;
LABEL_32:
        __break(0xC471u);
        goto LABEL_57;
      }
      LODWORD(v21) = *v22;
    }
    else
    {
      v23 = *(_QWORD *)(v16 + 16);
      if (v23 == v16 + 32 || v23 == 0)
      {
        *(_QWORD *)(v23 + 8 * v21) = v20;
        *v22 = v21 + 1;
        goto LABEL_15;
      }
    }
    *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * v21) = v20;
    *(_DWORD *)(v16 + 8) = v21 + 1;
    if (!*(_QWORD *)(v16 + 24) && (v20 & 0xFFFE000000000002) == 0 && v20 != 0)
    {
      v27 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v20 & 8) != 0)
        v27 = (_QWORD *)(v20 - 16);
      v28 = (uint64_t *)(*v27 + 560);
      *(_QWORD *)(v16 + 24) = v28;
      v39 = v16 + 8;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v28, &v39, a4, a5, a6, a7, a8, (uint64_t)&v38);
    }
LABEL_15:
    if (!*(_BYTE *)v16)
      return 1;
    goto LABEL_32;
  }
  return 1;
}

uint64_t JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::appendWithCrashOnOverflow(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _DWORD *v17;

  v9 = result;
  v10 = *(unsigned int *)(result + 8);
  v11 = (_DWORD *)(result + 8);
  if ((_DWORD)v10 == *(_DWORD *)(result + 12))
  {
    if (v10 >> 30
      || (result = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(result + 8), 2 * (int)v10),
          (_DWORD)result))
    {
      *(_BYTE *)v9 = 1;
      goto LABEL_20;
    }
    LODWORD(v10) = *v11;
  }
  else
  {
    v12 = *(_QWORD *)(result + 16);
    if (v12 == result + 32 || v12 == 0)
    {
      *(_QWORD *)(v12 + 8 * v10) = a2;
      *v11 = v10 + 1;
      goto LABEL_8;
    }
  }
  *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * v10) = a2;
  *(_DWORD *)(v9 + 8) = v10 + 1;
  if (!*(_QWORD *)(v9 + 24) && (a2 & 0xFFFE000000000002) == 0 && a2)
  {
    v14 = (_QWORD *)(a2 - 16);
    if ((a2 & 8) == 0)
      v14 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v15 = (uint64_t *)(*v14 + 560);
    *(_QWORD *)(v9 + 24) = v15;
    v17 = v11;
    result = (uint64_t)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v15, (uint64_t *)&v17, a4, a5, a6, a7, a8, (uint64_t)&v16);
  }
LABEL_8:
  if (*(_BYTE *)v9)
  {
LABEL_20:
    result = 184;
    __break(0xC471u);
  }
  return result;
}

void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)0,JSC::objectAssignIndexedPropertiesFast(JSC::JSGlobalObject *,JSC::JSObject*,JSC::JSObject*)::{lambda(unsigned int,JSC::JSValue)#1}>(uint64_t a1, uint64_t a2, unint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9)
{
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t DirectIndex;
  int32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::VM *v32;
  int v33;
  _QWORD **v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  JSC::VM *v38;
  unint64_t v39;
  JSC::SparseArrayValueMap *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int32x4_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t NonSparseMode;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  WTF *v63;
  WTF *v65;
  uint64_t v66;
  _BYTE v67[32];
  char v68[8];
  uint64_t v69;
  char *v70;
  _OWORD v71[4];
  uint64_t v72;

  v11 = *(_BYTE *)(a1 + 4) & 0xF;
  if (v11 - 4 < 6)
  {
    v12 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 8);
    if (v12)
    {
      v14 = 0;
      v15 = *(JSC::VM **)(a2 + 56);
      do
      {
        DirectIndex = JSC::JSObject::getDirectIndex((JSC::JSObject *)a1, (uint64_t ***)a2, v14);
        if (*((_DWORD *)v15 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v15, v16, v17, v18, v19, v20, v21, v22))
          break;
        if (DirectIndex)
        {
          JSC::JSObject::putDirectIndex(**a3, *a3[1], (JSC::VM *)v14, DirectIndex, v19, v20, v21, v22, v24);
          v32 = (JSC::VM *)*a3[2];
          if (*((_DWORD *)v32 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v32, v25, v26, v27, v28, v29, v30, v31))
              break;
          }
        }
        v14 = (v14 + 1);
      }
      while (v14 < v12);
    }
    return;
  }
  if (v11 > 0xD)
  {
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x1984C4D88);
  }
  v33 = 1 << v11;
  if ((v33 & 0x3C00) == 0)
  {
    if ((v33 & 0xB) != 0)
      return;
    goto LABEL_51;
  }
  v34 = *(_QWORD ***)(a1 + 8);
  v35 = *((_DWORD *)v34 - 2);
  v36 = *((_DWORD *)v34 - 1);
  if (v36 >= v35)
    v37 = v35;
  else
    v37 = v36;
  if ((_DWORD)v37)
  {
    v38 = 0;
    while (1)
    {
      v39 = (unint64_t)v34[(_QWORD)v38 + 2];
      if (v39)
      {
        if (JSC::objectAssignIndexedPropertiesFast(JSC::JSGlobalObject *,JSC::JSObject *,JSC::JSObject *)::{lambda(unsigned int,JSC::JSValue)#1}::operator()(a3, v38, v39, a9, a4, a5, a6, a7, a8))
        {
          break;
        }
      }
      v38 = (JSC::VM *)((char *)v38 + 1);
      if ((JSC::VM *)v37 == v38)
        goto LABEL_21;
    }
  }
  else
  {
LABEL_21:
    v40 = (JSC::SparseArrayValueMap *)*v34;
    if (*v34)
    {
      v68[0] = 0;
      v69 = 0x800000000;
      v70 = (char *)v71 + 8;
      memset(v71, 0, sizeof(v71));
      v72 = 0;
      v65 = (WTF *)v67;
      v66 = 8;
      v41 = JSC::SparseArrayValueMap::begin(v40);
      v50 = v41;
      v51 = v42;
      v52 = *((_QWORD *)v40 + 1);
      if (v52)
        v53 = (_QWORD *)(v52 + 24 * *(unsigned int *)(v52 - 4));
      else
        v53 = 0;
      if (v53 != v41)
      {
        do
        {
          if ((v50[2] & 4) == 0)
          {
            if (HIDWORD(v66) == (_DWORD)v66)
            {
              WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long long const&>((uint64_t)&v65, v50);
            }
            else
            {
              *((_DWORD *)v65 + HIDWORD(v66)) = *v50;
              ++HIDWORD(v66);
            }
            NonSparseMode = JSC::SparseArrayEntry::getNonSparseMode((JSC::SparseArrayEntry *)(v50 + 1));
            JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::appendWithCrashOnOverflow((uint64_t)v68, NonSparseMode, v55, v56, v57, v58, v59, v60);
          }
          while (1)
          {
            v50 += 3;
            if (v50 == v51)
              break;
            if (*v50 < 0xFFFFFFFFFFFFFFFELL)
              goto LABEL_32;
          }
          v50 = v51;
LABEL_32:
          ;
        }
        while (v50 != v53);
      }
      if (HIDWORD(v66))
      {
        v61 = 0;
        do
        {
          if (v69 <= v61)
            v62 = 10;
          else
            v62 = *(_QWORD *)&v70[8 * v61];
          if (JSC::objectAssignIndexedPropertiesFast(JSC::JSGlobalObject *,JSC::JSObject *,JSC::JSObject *)::{lambda(unsigned int,JSC::JSValue)#1}::operator()(a3, (JSC::VM *)*((unsigned int *)v65 + v61), v62, v49, v44, v45, v46, v47, v48))
          {
            break;
          }
          ++v61;
        }
        while (v61 < HIDWORD(v66));
      }
      v63 = v65;
      if (v67 != (_BYTE *)v65 && v65 != 0)
      {
        v65 = 0;
        LODWORD(v66) = 0;
        WTF::fastFree((unint64_t)v63, v42, v43, v44, v45, v46, v47, v48);
      }
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v69, v42, v43, v44, v45, v46, v47, v48);
    }
  }
}

uint64_t JSC::JSObject::getDirectIndex(JSC::JSObject *this, uint64_t ***a2, unint64_t a3)
{
  uint64_t result;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t **v15;
  WTF::StringImpl *v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[7];
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;

  result = JSC::JSObject::tryGetIndexQuickly((uint64_t)this, a3, 0);
  if (!result)
  {
    v33[2] = 0xFFFFFFFF00000000;
    LOBYTE(v34) = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    memset(&v33[4], 0, 21);
    v33[3] = this;
    v13 = (*(uint64_t (**)(JSC::JSObject *, uint64_t ***, unint64_t, _QWORD *))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0x70))(this, a2, a3, v33);
    result = 0;
    if (v13)
    {
      if (BYTE1(v33[6]) == 1)
      {
        result = v33[0];
      }
      else if (BYTE1(v33[6]) == 2)
      {
        result = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v33, (JSC::JSGlobalObject *)a2, (uint64_t)v7, v8, v9, v10, v11, v12);
      }
      else
      {
        v15 = a2[7];
        JSC::Identifier::from(v15, a3, v7, v8, v9, v10, v11, v12, (int **)&v38);
        v16 = v38;
        v24 = JSC::PropertySlot::customGetter((uint64_t)v33, (JSC::VM *)v15, v38);
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::~StringImpl(v16, v17, v18, v19, v20, v21, v22, v23);
            WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
          }
          else
          {
            *(_DWORD *)v16 -= 2;
          }
        }
        result = v24;
      }
    }
    if (v35)
    {
      v14 = *(_DWORD *)(v34 + 4);
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1984C4E80);
      }
      *(_DWORD *)(v34 + 4) = v14 - 1;
    }
  }
  return result;
}

BOOL JSC::objectAssignIndexedPropertiesFast(JSC::JSGlobalObject *,JSC::JSObject *,JSC::JSObject *)::{lambda(unsigned int,JSC::JSValue)#1}::operator()(unint64_t **a1, JSC::VM *a2, unint64_t a3, int32x4_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v17;

  JSC::JSObject::putDirectIndex(**a1, *a1[1], a2, a3, a6, a7, a8, a9, a4);
  v17 = (JSC::VM *)*a1[2];
  return *((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17, v10, v11, v12, v13, v14, v15, v16);
}

_QWORD *JSC::SparseArrayValueMap::begin(JSC::SparseArrayValueMap *this)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result = (_QWORD *)*((_QWORD *)this + 1);
  if (!result)
    return 0;
  v3 = *((unsigned int *)result - 1);
  v4 = &result[3 * v3];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v3];
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    while (*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      result += 3;
      v5 -= 24;
      if (!v5)
        return v4;
    }
  }
  return result;
}

uint64_t JSC::JSObject::tryGetIndexQuickly(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;

  v3 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 4) & 0xFu) - 8 >= 2)
  {
    v4 = 0;
    switch(*(_BYTE *)(a1 + 4) & 0xF)
    {
      case 0:
      case 1:
        switch(*(_BYTE *)(a1 + 5))
        {
          case '\'':
          case '(':
            v14 = a2;
            v15 = a2;
            v16 = a1;
            if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
              goto LABEL_36;
            v17 = *(_QWORD *)(v3 - 8);
            if (*(_BYTE *)(v17 + 64) && (v38 = *(_QWORD *)(v17 + 32)) != 0)
              v18 = *(_QWORD *)(v38 + 32);
            else
              v18 = *(_QWORD *)(v17 + 48);
            v20 = *(_QWORD *)(a1 + 24);
            v19 = *(_QWORD *)(a1 + 32);
            if (v20 + v19 > v18)
              return 0;
            if ((*(_BYTE *)(a1 + 40) & 1) == 0)
              goto LABEL_63;
            v21 = v18 - v19 > a2;
            goto LABEL_64;
          case ')':
            v43 = a1;
            v42 = a2;
            v41 = a3;
            v29 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a1, a2);
            a3 = v41;
            a2 = v42;
            v30 = v29;
            a1 = v43;
            if (!v30)
              return 0;
            return JSC::JSObject::getIndexQuicklyForTypedArray(a1, a2, a3);
          case '*':
            v14 = a2;
            v15 = a2;
            v16 = a1;
            if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
              goto LABEL_36;
            v22 = *(_QWORD *)(v3 - 8);
            if (*(_BYTE *)(v22 + 64) && (v40 = *(_QWORD *)(v22 + 32)) != 0)
              v23 = *(_QWORD *)(v40 + 32);
            else
              v23 = *(_QWORD *)(v22 + 48);
            v20 = *(_QWORD *)(a1 + 24);
            v24 = *(_QWORD *)(a1 + 32);
            if (v24 + 2 * v20 > v23)
              return 0;
            if ((*(_BYTE *)(a1 + 40) & 1) == 0)
              goto LABEL_63;
            v25 = a2 >= (v23 - v24) >> 1;
            goto LABEL_67;
          case '+':
            v6 = a2;
            if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
              goto LABEL_13;
            v7 = *(_QWORD *)(v3 - 8);
            if (*(_BYTE *)(v7 + 64) && (v36 = *(_QWORD *)(v7 + 32)) != 0)
              v8 = *(_QWORD *)(v36 + 32);
            else
              v8 = *(_QWORD *)(v7 + 48);
            v10 = *(_QWORD *)(a1 + 24);
            v9 = *(_QWORD *)(a1 + 32);
            if (v9 + 2 * v10 > v8)
              return 0;
            if ((*(_BYTE *)(a1 + 40) & 1) == 0)
              goto LABEL_48;
            if (a2 >= (v8 - v9) >> 1)
              return 0;
            return JSC::JSObject::getIndexQuicklyForTypedArray(a1, a2, a3);
          case ',':
          case '.':
            v6 = a2;
            if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
              goto LABEL_13;
            v26 = *(_QWORD *)(v3 - 8);
            if (*(_BYTE *)(v26 + 64) && (v35 = *(_QWORD *)(v26 + 32)) != 0)
              v27 = *(_QWORD *)(v35 + 32);
            else
              v27 = *(_QWORD *)(v26 + 48);
            v10 = *(_QWORD *)(a1 + 24);
            v28 = *(_QWORD *)(a1 + 32);
            if (v28 + 4 * v10 > v27)
              return 0;
            if ((*(_BYTE *)(a1 + 40) & 1) == 0)
              goto LABEL_48;
            if (a2 >= (v27 - v28) >> 2)
              return 0;
            return JSC::JSObject::getIndexQuicklyForTypedArray(a1, a2, a3);
          case '-':
            v14 = a2;
            v15 = a2;
            v16 = a1;
            if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
            {
LABEL_36:
              a1 = v16;
              a2 = v14;
              if (*(_QWORD *)(v16 + 24) > v15)
                return JSC::JSObject::getIndexQuicklyForTypedArray(a1, a2, a3);
              return 0;
            }
            v32 = *(_QWORD *)(v3 - 8);
            if (*(_BYTE *)(v32 + 64) && (v39 = *(_QWORD *)(v32 + 32)) != 0)
              v33 = *(_QWORD *)(v39 + 32);
            else
              v33 = *(_QWORD *)(v32 + 48);
            v20 = *(_QWORD *)(a1 + 24);
            v34 = *(_QWORD *)(a1 + 32);
            if (v34 + 4 * v20 > v33)
              return 0;
            if ((*(_BYTE *)(a1 + 40) & 1) == 0)
            {
LABEL_63:
              v21 = v20 > v15;
LABEL_64:
              a2 = v14;
              a1 = v16;
              if (v21)
                return JSC::JSObject::getIndexQuicklyForTypedArray(a1, a2, a3);
              return 0;
            }
            v25 = a2 >= (v33 - v34) >> 2;
LABEL_67:
            a2 = v14;
            a1 = v16;
            if (v25)
              return 0;
            return JSC::JSObject::getIndexQuicklyForTypedArray(a1, a2, a3);
          case '/':
            v6 = a2;
            if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
            {
LABEL_13:
              if (*(_QWORD *)(a1 + 24) <= v6)
                return 0;
            }
            else
            {
              v11 = *(_QWORD *)(v3 - 8);
              if (*(_BYTE *)(v11 + 64) && (v37 = *(_QWORD *)(v11 + 32)) != 0)
                v12 = *(_QWORD *)(v37 + 32);
              else
                v12 = *(_QWORD *)(v11 + 48);
              v10 = *(_QWORD *)(a1 + 24);
              v13 = *(_QWORD *)(a1 + 32);
              if (v13 + 8 * v10 > v12)
                return 0;
              if ((*(_BYTE *)(a1 + 40) & 1) != 0)
              {
                if (a2 >= (v12 - v13) >> 3)
                  return 0;
              }
              else
              {
LABEL_48:
                if (v10 <= v6)
                  return 0;
              }
            }
            return JSC::JSObject::getIndexQuicklyForTypedArray(a1, a2, a3);
          case '0':
          case '1':
            if ((*(_BYTE *)(a1 + 40) & 7u) < 3)
              return 0;
            v31 = *(_QWORD *)(v3 - 8);
            if (!*(_BYTE *)(v31 + 64) || !*(_QWORD *)(v31 + 32))
              return 0;
            return 0;
          default:
            return 0;
        }
      case 3:
        return v4;
      case 4:
      case 5:
        break;
      case 6:
      case 7:
        if (*(_DWORD *)(v3 - 8) <= a2)
          return 0;
        return *(_QWORD *)(v3 + 8 * a2) + 0x2000000000000;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        if (*(_DWORD *)(v3 - 4) <= a2)
          return 0;
        return *(_QWORD *)(v3 + 8 * a2 + 16);
      default:
        __break(0xC471u);
        JUMPOUT(0x1984C5304);
    }
  }
  if (*(_DWORD *)(v3 - 8) <= a2)
    return 0;
  return *(_QWORD *)(v3 + 8 * a2);
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::inBounds(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
    if (*(_BYTE *)(v4 + 64) && (v8 = *(_QWORD *)(v4 + 32)) != 0)
      v5 = *(_QWORD *)(v8 + 32);
    else
      v5 = *(_QWORD *)(v4 + 48);
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    if (v6 + 2 * v7 > v5)
      return 0;
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
      return a2 < (v5 - v6) >> 1;
    return v7 > a2;
  }
  else
  {
    return *(_QWORD *)(a1 + 24) > a2;
  }
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::inBounds(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
    if (*(_BYTE *)(v4 + 64) && (v8 = *(_QWORD *)(v4 + 32)) != 0)
      v5 = *(_QWORD *)(v8 + 32);
    else
      v5 = *(_QWORD *)(v4 + 48);
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    if (v6 + 4 * v7 > v5)
      return 0;
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
      return a2 < (v5 - v6) >> 2;
    return v7 > a2;
  }
  else
  {
    return *(_QWORD *)(a1 + 24) > a2;
  }
}

uint64_t WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long long const&>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    *(_DWORD *)(*(_QWORD *)v3 + 4 * (*(_DWORD *)(v3 + 12))++) = *a2;
    return 1;
  }
  v9 = *(const void **)result;
  if (v8 < 9)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 8;
    goto LABEL_12;
  }
  if (!(v8 >> 30))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(4 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_12:
    memcpy(v10, v9, 4 * v5);
    if ((const void *)(v3 + 16) != v9 && v9)
    {
      if (*(const void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

void JSC::inferBuiltinTag(JSC *this@<X0>, unint64_t a2@<X1>, JSC::JSObject *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int isArraySlow;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  JSC *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  JSC::JSGlobalObject *v28;
  JSC::JSGlobalObject *v29;
  _QWORD v30[3];

  v10 = *((_QWORD *)this + 7);
  {
    if (!JSC::inferBuiltinTag(JSC::JSGlobalObject *,JSC::JSObject *)::needsOldBuiltinTag)
      goto LABEL_3;
LABEL_39:
    *(_OWORD *)a9 = *(_OWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C));
    goto LABEL_40;
  }
  v26 = *((_QWORD *)this + 7);
  v29 = (JSC::JSGlobalObject *)a2;
  v23 = this;
  v20 = JSC::isPokerBros(this);
  v10 = v26;
  a2 = (unint64_t)v29;
  v21 = v20;
  this = v23;
  JSC::inferBuiltinTag(JSC::JSGlobalObject *,JSC::JSObject *)::needsOldBuiltinTag = v21;
  if (v21)
    goto LABEL_39;
LABEL_3:
  v11 = (uint64_t *)(v10 + 42096);
  v12 = *(unsigned __int8 *)(a2 + 5);
  if (v12 <= 0x3A)
  {
    switch(*(_BYTE *)(a2 + 5))
    {
      case 0x18:
        goto LABEL_28;
      case 0x1A:
      case 0x1B:
        goto LABEL_31;
      case 0x1D:
        v13 = *(_QWORD *)(v10 + 42152);
        v14 = "Boolean";
        v15 = 8;
        goto LABEL_32;
      case 0x1E:
        v13 = *(_QWORD *)(v10 + 42160);
        v14 = "Number";
        goto LABEL_29;
      case 0x1F:
        v13 = *(_QWORD *)(v10 + 42144);
        v14 = "Error";
        goto LABEL_24;
      case 0x21:
      case 0x22:
      case 0x23:
        v13 = *(_QWORD *)(v10 + 42120);
        v14 = "Arguments";
        v15 = 10;
        goto LABEL_32;
      case 0x24:
      case 0x25:
        goto LABEL_23;
      default:
        goto LABEL_15;
    }
  }
  if (v12 - 76 < 2)
  {
    v13 = *(_QWORD *)(v10 + 42168);
    v14 = "String";
    goto LABEL_29;
  }
  if (v12 == 59)
  {
    v13 = *(_QWORD *)(v10 + 42136);
    v14 = "RegExp";
    goto LABEL_29;
  }
  if (v12 != 60)
  {
LABEL_15:
    v16 = 0;
    if ((a2 & 0xFFFE000000000002) == 0 && v12 >= 0x17)
    {
      if (v12 - 36 >= 2)
      {
        if (v12 == 61)
        {
          v24 = v10;
          v27 = (JSC::JSGlobalObject *)a2;
          isArraySlow = JSC::isArraySlow(this, (JSC::JSGlobalObject *)a2, a3);
          v10 = v24;
          a2 = (unint64_t)v27;
          v16 = isArraySlow;
        }
        else
        {
          v16 = 0;
        }
      }
      else
      {
        v16 = 1;
      }
    }
    if (*(_DWORD *)(v10 + 80))
    {
      v22 = v16;
      v25 = v10;
      v28 = (JSC::JSGlobalObject *)a2;
      v19 = *(_DWORD *)(v10 + 80);
      if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      a2 = (unint64_t)v28;
      v16 = v22;
      if (*(_QWORD *)(v25 + 16))
      {
        *(_QWORD *)a9 = 0;
        *(_QWORD *)(a9 + 8) = 0;
LABEL_40:
        *(_QWORD *)(a9 + 16) = 0;
        return;
      }
    }
    if (v16)
    {
LABEL_23:
      v13 = v11[1];
      v14 = "Array";
LABEL_24:
      v15 = 6;
      goto LABEL_32;
    }
    v17 = *(unsigned __int8 *)(a2 + 5);
    if (v17 >= 0x17)
    {
      if ((v17 & 0xFE) == 0x1A
        || (*(_BYTE *)(a2 + 6) & 4) != 0
        && ((*(void (**)(_QWORD *__return_ptr, unint64_t))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0x38))(v30, a2), LOBYTE(v30[0])))
      {
LABEL_31:
        v13 = v11[2];
        v14 = "Function";
        v15 = 9;
        goto LABEL_32;
      }
    }
LABEL_28:
    v13 = *v11;
    v14 = "Object";
LABEL_29:
    v15 = 7;
    goto LABEL_32;
  }
  v13 = *(_QWORD *)(v10 + 42128);
  v14 = "Date";
  v15 = 5;
LABEL_32:
  *(_QWORD *)a9 = v14;
  *(_QWORD *)(a9 + 8) = v15;
  *(_QWORD *)(a9 + 16) = v13;
}

BOOL JSC::JSArrayBufferView::isDetached(JSC::JSArrayBufferView *this)
{
  uint64_t v1;

  if ((*((_BYTE *)this + 40) & 8) != 0)
  {
    v1 = *((_QWORD *)this + 2);
    if (!v1)
      return 1;
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      return (v1 & 0x3FFFFFFFFLL) + qword_1ECF4C038 == 0;
  }
  return 0;
}

_QWORD *JSC::WriteBarrierBase<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>::set(_QWORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  BOOL v5;

  *result = a4;
  v5 = (a4 & 0xFFFE000000000002) != 0 || a3 == 0 || a4 == 0;
  if (!v5 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a3 + 7))
    return (_QWORD *)JSC::Heap::writeBarrierSlowPath(a2 + 192, a3);
  return result;
}

uint64_t JSC::JSRopeString::create(JSC::JSRopeString *this, unint64_t a2, JSC::JSString *a3, JSC::JSString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  int *v10;
  unint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  char *v21;
  char *v22;
  JSC::JSString *v23;
  JSC::VM *v24;
  uint64_t SlowCase;
  JSC::JSRopeString *v26;

  v8 = (uint64_t *)((char *)this + 39432);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = (int *)(v9 + 4);
  if ((v9 & 1) != 0)
    v10 = (int *)(a2 + 16);
  v11 = *((_QWORD *)a3 + 1);
  v12 = (int *)((char *)a3 + 16);
  if ((v11 & 1) == 0)
    v12 = (int *)(v11 + 4);
  if ((v9 & 1) != 0)
  {
    v9 = (v9 >> 2) & 1;
    v13 = *v10;
    v14 = *v12;
    if ((v11 & 1) == 0)
      goto LABEL_7;
  }
  else
  {
    LODWORD(v9) = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
    v13 = *v10;
    v14 = *v12;
    if ((v11 & 1) == 0)
    {
LABEL_7:
      LODWORD(v11) = (*(unsigned __int8 *)(v11 + 16) >> 2) & 1;
      goto LABEL_8;
    }
  }
  v11 = (v11 >> 2) & 1;
LABEL_8:
  v15 = v14 + v13;
  v16 = v9 & v11;
  v17 = *v8;
  if ((unint64_t)*v8 < *((_QWORD *)this + 4930))
  {
LABEL_9:
    *v8 = v17 + 32;
    goto LABEL_10;
  }
  v17 = *((_QWORD *)this + 4931);
  if ((v17 & 1) == 0)
  {
    v20 = *(_QWORD *)(v17 + 8) ^ *((_QWORD *)this + 4932);
    *((_QWORD *)this + 4930) = v17 + HIDWORD(v20);
    *((_QWORD *)this + 4931) = v17 + (int)v20;
    goto LABEL_9;
  }
  v21 = (char *)this + 39408;
  v22 = (char *)this + 192;
  v26 = this;
  v23 = a3;
  v24 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM(this, (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v21, v22, 32, 0, 0);
  a2 = (unint64_t)v24;
  a3 = v23;
  v17 = SlowCase;
  this = v26;
LABEL_10:
  *(_DWORD *)v17 = (unint64_t)v8[260] >> 4;
  *(_DWORD *)(v17 + 4) = 17302016;
  v18 = 5;
  if (!v16)
    v18 = 1;
  *(_QWORD *)(v17 + 8) = v18 | a2;
  *(_DWORD *)(v17 + 16) = v15;
  *(_DWORD *)(v17 + 20) = (_DWORD)a3;
  *(_WORD *)(v17 + 24) = WORD2(a3);
  *(_WORD *)(v17 + 26) = 0;
  *(_DWORD *)(v17 + 28) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return v17;
}

uint64_t WTF::tryMakeString<WTF::String,WTF::String>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, int **a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  v3 = *(_QWORD *)result;
  v4 = *a2;
  if (*(_QWORD *)result)
    v5 = *(_DWORD *)(v3 + 4);
  else
    v5 = 0;
  if (v4)
    v6 = *(_DWORD *)(v4 + 4);
  else
    v6 = 0;
  if (((v6 | v5) & 0x80000000) == 0)
  {
    result = (v5 + v6);
    if (!__OFADD__(v5, v6))
    {
      if (v3)
      {
        v7 = *(_DWORD *)(v3 + 16);
        v8 = (v7 >> 2) & 1;
        if (!v4 || (v7 & 4) == 0)
          return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, v3, v4, a3);
      }
      else if (!v4)
      {
        v8 = 1;
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, v3, v4, a3);
      }
      v8 = (*(unsigned __int8 *)(v4 + 16) >> 2) & 1;
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, v3, v4, a3);
    }
  }
  *a3 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int **a5@<X8>)
{
  int v7;
  int *v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  _OWORD *v14;
  size_t v15;
  _WORD *v16;
  int8x16_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int8x16_t v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  __int128 v33;
  char *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  unsigned __int128 *v42;
  unsigned __int128 *v43;
  unsigned __int128 v44;
  size_t v45;
  uint64_t v46;
  unsigned __int128 v47;
  char v48;
  char v49;
  _DWORD *v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;

  v7 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v50);
        v9 = v50;
        if (v50)
        {
          v10 = v50 + 5;
          *v50 = 2;
          v9[1] = v7;
          *((_QWORD *)v9 + 1) = v9 + 5;
          v9[4] = 4;
          if (a3)
          {
            v11 = *(_BYTE **)(a3 + 8);
            v12 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v12 == 1)
              {
                *v10 = *v11;
              }
              else if ((_DWORD)v12)
              {
                result = (uint64_t)memcpy(v9 + 5, v11, v12);
              }
            }
            else
            {
              if (v12 < 0x10)
              {
                v42 = (unsigned __int128 *)(v9 + 5);
              }
              else
              {
                v42 = (unsigned __int128 *)&v10[v12 & 0xFFFFFFF0];
                v43 = (unsigned __int128 *)(v9 + 5);
                do
                {
                  v44 = (unsigned __int128)vld2q_s8(v11);
                  v11 += 32;
                  *v43++ = v44;
                }
                while (v43 != v42);
              }
              while (v42 != (unsigned __int128 *)&v10[v12])
              {
                v49 = *v11;
                v11 += 2;
                *(_BYTE *)v42 = v49;
                v42 = (unsigned __int128 *)((char *)v42 + 1);
              }
            }
            v13 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v13 = 0;
          }
          if (a4)
          {
            result = (uint64_t)&v10[v13];
            v14 = *(_OWORD **)(a4 + 8);
            v15 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v15 == 1)
              {
                *(_BYTE *)result = *(_BYTE *)v14;
                goto LABEL_14;
              }
              if (!(_DWORD)v15)
                goto LABEL_14;
LABEL_18:
              result = (uint64_t)memcpy((void *)result, v14, v15);
              goto LABEL_14;
            }
            v45 = result + v15;
            if (v15 >= 0x10)
            {
              v46 = result + (v15 & 0xFFFFFFF0);
              do
              {
                v47 = (unsigned __int128)vld2q_s8((const char *)v14);
                v14 += 2;
                *(_OWORD *)result = v47;
                result += 16;
              }
              while (result != v46);
              result = v46;
            }
            while (result != v45)
            {
              v48 = *(_BYTE *)v14;
              v14 = (_OWORD *)((char *)v14 + 2);
              *(_BYTE *)result++ = v48;
            }
          }
        }
        goto LABEL_14;
      }
LABEL_52:
      v9 = 0;
      goto LABEL_14;
    }
LABEL_51:
    v9 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_14;
  }
  if (!(_DWORD)result)
    goto LABEL_51;
  if (result > 0x7FFFFFEF)
    goto LABEL_52;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v50);
  v9 = v50;
  if (v50)
  {
    v16 = v50 + 5;
    *v50 = 2;
    v9[1] = v7;
    *((_QWORD *)v9 + 1) = v9 + 5;
    v9[4] = 0;
    if (a3)
    {
      v17 = *(int8x16_t **)(a3 + 8);
      v18 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        v21 = (char *)&v16[v18];
        if (v18 >= 0x40)
        {
          v22 = (char *)&v16[v18 & 0xFFFFFFC0];
          v33 = 0uLL;
          v34 = (char *)(v9 + 5);
          do
          {
            v52.val[0] = *v17;
            v35 = v17[1];
            v54.val[0] = v17[2];
            v36 = v17[3];
            v17 += 4;
            v37 = v36;
            v54.val[1] = 0uLL;
            v56.val[0] = v35;
            v52.val[1] = 0uLL;
            v38 = v34;
            vst2q_s8(v38, v52);
            v38 += 32;
            v56.val[1] = 0uLL;
            vst2q_s8(v38, v56);
            v39 = v34 + 64;
            vst2q_s8(v39, v54);
            v40 = v34 + 96;
            vst2q_s8(v40, *(int8x16x2_t *)(&v33 - 1));
            v34 += 128;
          }
          while (v34 != v22);
        }
        else
        {
          v22 = (char *)(v9 + 5);
        }
        while (v22 != v21)
        {
          v41 = v17->u8[0];
          v17 = (int8x16_t *)((char *)v17 + 1);
          *(_WORD *)v22 = v41;
          v22 += 2;
        }
      }
      else if ((_DWORD)v18 == 1)
      {
        *v16 = v17->i16[0];
      }
      else if ((_DWORD)v18)
      {
        result = (uint64_t)memcpy(v9 + 5, v17, 2 * v18);
      }
      v19 = *(unsigned int *)(a3 + 4);
    }
    else
    {
      v19 = 0;
    }
    if (a4)
    {
      result = (uint64_t)&v16[v19];
      v14 = *(_OWORD **)(a4 + 8);
      v20 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        v23 = result + 2 * v20;
        if (v20 >= 0x40)
        {
          v24 = result + 2 * (v20 & 0xFFFFFFC0);
          v25 = 0uLL;
          do
          {
            v51.val[0] = (int8x16_t)*v14;
            v26 = *((int8x16_t *)v14 + 1);
            v53.val[0] = (int8x16_t)v14[2];
            v27 = v14[3];
            v14 += 4;
            v28 = v27;
            v53.val[1] = 0uLL;
            v55.val[0] = v26;
            v51.val[1] = 0uLL;
            v29 = (char *)result;
            vst2q_s8(v29, v51);
            v29 += 32;
            v55.val[1] = 0uLL;
            vst2q_s8(v29, v55);
            v30 = (char *)(result + 64);
            vst2q_s8(v30, v53);
            v31 = (char *)(result + 96);
            vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
            result += 128;
          }
          while (result != v24);
          result = v24;
        }
        while (result != v23)
        {
          v32 = *(unsigned __int8 *)v14;
          v14 = (_OWORD *)((char *)v14 + 1);
          *(_WORD *)result = v32;
          result += 2;
        }
      }
      else
      {
        if ((_DWORD)v20 == 1)
        {
          *(_WORD *)result = *(_WORD *)v14;
          goto LABEL_14;
        }
        if ((_DWORD)v20)
        {
          v15 = 2 * v20;
          goto LABEL_18;
        }
      }
    }
  }
LABEL_14:
  *a5 = v9;
  return result;
}

_BYTE *WTF::StringView::getCharacters<unsigned char>(_BYTE *result, char *__dst)
{
  char *v2;
  size_t v3;
  char *v4;
  char *v5;
  unsigned __int128 v6;
  char v7;

  v2 = *(char **)result;
  v3 = *((unsigned int *)result + 2);
  if (result[12])
  {
    if ((_DWORD)v3 == 1)
    {
      *__dst = *v2;
    }
    else if ((_DWORD)v3)
    {
      return memcpy(__dst, v2, v3);
    }
  }
  else
  {
    v4 = &__dst[v3];
    if (v3 >= 0x10)
    {
      v5 = &__dst[v3 & 0xFFFFFFF0];
      do
      {
        v6 = (unsigned __int128)vld2q_s8(v2);
        v2 += 32;
        *(_OWORD *)__dst = v6;
        __dst += 16;
      }
      while (__dst != v5);
      __dst = v5;
    }
    while (__dst != v4)
    {
      v7 = *v2;
      v2 += 2;
      *__dst++ = v7;
    }
  }
  return result;
}

_BYTE *WTF::StringView::getCharacters<char16_t>(_BYTE *result, char *__dst)
{
  int8x16_t *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;
  int8x16x2_t v14;
  int8x16x2_t v15;
  int8x16x2_t v16;

  v2 = *(int8x16_t **)result;
  v3 = *((unsigned int *)result + 2);
  if (result[12])
  {
    v4 = &__dst[2 * v3];
    if (v3 >= 0x40)
    {
      v5 = &__dst[2 * (v3 & 0xFFFFFFC0)];
      v6 = 0uLL;
      do
      {
        v14.val[0] = *v2;
        v7 = v2[1];
        v15.val[0] = v2[2];
        v8 = v2[3];
        v2 += 4;
        v9 = v8;
        v15.val[1] = 0uLL;
        v16.val[0] = v7;
        v14.val[1] = 0uLL;
        v10 = __dst;
        vst2q_s8(v10, v14);
        v10 += 32;
        v16.val[1] = 0uLL;
        vst2q_s8(v10, v16);
        v11 = __dst + 64;
        vst2q_s8(v11, v15);
        v12 = __dst + 96;
        vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
        __dst += 128;
      }
      while (__dst != v5);
      __dst = v5;
    }
    while (__dst != v4)
    {
      v13 = v2->u8[0];
      v2 = (int8x16_t *)((char *)v2 + 1);
      *(_WORD *)__dst = v13;
      __dst += 2;
    }
  }
  else if ((_DWORD)v3 == 1)
  {
    *(_WORD *)__dst = v2->i16[0];
  }
  else if ((_DWORD)v3)
  {
    return memcpy(__dst, v2, 2 * v3);
  }
  return result;
}

WTF::StringImpl **WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_DWORD *)a2 += 2;
  v9 = *a1;
  *a1 = a2;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  return a1;
}

uint64_t *JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  result = (uint64_t *)(a1 + 616);
  v5 = *(unsigned int *)(a1 + 628);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 624))
  {
    result = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, a2);
    v2 = result;
    v5 = *(unsigned int *)(a1 + 628);
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*result + 8 * v5);
  }
  v7 = *v2;
  *v2 = 0;
  *v6 = v7;
  *(_DWORD *)(a1 + 628) = v5 + 1;
  return result;
}

uint64_t JSC::JSObject::trySetIndexQuickly(unint64_t a1, JSC::VM *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  char v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  v9 = *(_BYTE *)(a1 + 4);
  result = 0;
  v12 = *(_QWORD *)(a1 + 8);
  switch(v9 & 0x1F)
  {
    case 0:
    case 1:
      return JSC::JSObject::trySetIndexQuicklyForTypedArray(a1, a3, a4, a5);
    case 3:
      return result;
    case 4:
    case 5:
      if (*(_DWORD *)(v12 - 4) <= a3)
        goto LABEL_10;
      if (a4 > 0xFFFDFFFFFFFFFFFFLL)
        goto LABEL_2;
      JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 6:
    case 7:
      if (*(_DWORD *)(v12 - 4) <= a3)
        goto LABEL_10;
      if (a4 >> 49)
      {
        v15 = (double)(int)a4;
        if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v15 = a4 - 0x2000000000000;
        *(double *)(v12 + 8 * a3) = v15;
        if (*(_DWORD *)(v12 - 8) <= a3)
          *(_DWORD *)(v12 - 8) = a3 + 1;
      }
      else
      {
        JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      goto LABEL_15;
    case 8:
    case 9:
LABEL_2:
      if (*(_DWORD *)(v12 - 4) <= a3)
        goto LABEL_10;
      *(_QWORD *)(v12 + 8 * a3) = a4;
      if (*(_DWORD *)(v12 - 8) <= a3)
        *(_DWORD *)(v12 - 8) = a3 + 1;
      goto LABEL_5;
    case 0xA:
    case 0xB:
      if (*(_DWORD *)(v12 - 4) <= a3)
        goto LABEL_10;
      v19 = a3;
      v20 = *(_QWORD *)(a1 + 8);
      v13 = v12 + 8 * a3;
      v14 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 16) = a4;
      if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a1 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a1);
      if (!v14)
      {
        ++*(_DWORD *)(v20 + 12);
        if (*(_DWORD *)(v20 - 8) <= v19)
          *(_DWORD *)(v20 - 8) = v19 + 1;
      }
      goto LABEL_15;
    case 0xC:
    case 0xD:
      if (*(_DWORD *)(v12 - 4) <= a3)
        goto LABEL_10;
      v16 = v12 + 8 * a3;
      v18 = *(_QWORD *)(v16 + 16);
      v17 = (unint64_t *)(v16 + 16);
      if (!v18)
        goto LABEL_10;
      *v17 = a4;
LABEL_5:
      result = 1;
      if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a1 + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a1);
LABEL_15:
        result = 1;
      }
      break;
    default:
      if ((v9 & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1984C6398);
      }
LABEL_10:
      result = 0;
      break;
  }
  return result;
}

uint64_t JSC::JSObject::trySetIndexQuicklyForTypedArray(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v9;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t result;
  unint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v27;
  int v28;
  uint64_t v29;
  __int16 v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _BOOL4 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v74;
  double v75;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v5 = a3;
  switch(*(_BYTE *)(a1 + 5))
  {
    case '\'':
      v14 = a2;
      if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
      {
        v20 = *(_QWORD *)(a1 + 24);
        goto LABEL_47;
      }
      v61 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
      if (*(_BYTE *)(v61 + 64) && (v88 = *(_QWORD *)(v61 + 32)) != 0)
        v62 = *(_QWORD *)(v88 + 32);
      else
        v62 = *(_QWORD *)(v61 + 48);
      v63 = *(_QWORD *)(a1 + 24);
      v64 = *(_QWORD *)(a1 + 32);
      if (v63 + v64 > v62)
        return 0;
      if ((*(_BYTE *)(a1 + 40) & 1) != 0)
      {
        v20 = v62 - v64;
LABEL_47:
        if (v20 <= a2 || a3 >> 49 == 0)
          return 0;
        goto LABEL_51;
      }
      result = 0;
      if (v63 > a2 && a3 >> 49)
      {
LABEL_51:
        if (a3 >= 0xFFFE000000000000)
          goto LABEL_32;
        v22 = JSC::IntegralTypedArrayAdaptor<signed char,JSC::GenericTypedArrayView<JSC::Int8Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,(JSC::TypedArrayType)1>::toNativeFromDouble(COERCE_DOUBLE(a3 - 0x2000000000000));
        goto LABEL_209;
      }
      return result;
    case '(':
      v14 = a2;
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v50 + 64) && (v86 = *(_QWORD *)(v50 + 32)) != 0)
          v51 = *(_QWORD *)(v86 + 32);
        else
          v51 = *(_QWORD *)(v50 + 48);
        v52 = *(_QWORD *)(a1 + 24);
        v53 = *(_QWORD *)(a1 + 32);
        if (v52 + v53 > v51)
          return 0;
        if ((*(_BYTE *)(a1 + 40) & 1) == 0)
        {
          result = 0;
          if (v52 <= a2 || !(a3 >> 49))
            return result;
          goto LABEL_31;
        }
        v15 = v51 - v53;
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 24);
      }
      if (v15 <= a2 || a3 >> 49 == 0)
        return 0;
LABEL_31:
      if (a3 < 0xFFFE000000000000)
      {
        v22 = JSC::IntegralTypedArrayAdaptor<unsigned char,JSC::GenericTypedArrayView<JSC::Uint8Adaptor>,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>,(JSC::TypedArrayType)2>::toNativeFromDouble(COERCE_DOUBLE(a3 - 0x2000000000000));
LABEL_209:
        LOBYTE(v5) = v22;
      }
LABEL_32:
      v17 = *(_QWORD *)(a1 + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v17 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_BYTE *)(v17 + v14) = v5;
      if ((a2 & 0x80000000) == 0)
        return 1;
      goto LABEL_182;
    case ')':
      v45 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a1, a2);
      result = 0;
      if (v45)
      {
        if (v5 >> 49)
        {
          JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndexQuickly(a1, a2, v5);
          result = 1;
          if ((a2 & 0x80000000) != 0)
          {
            if (a4)
              *(_DWORD *)(a4 + 4) |= 4u;
          }
        }
      }
      return result;
    case '*':
      v23 = a2;
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v65 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v65 + 64) && (v89 = *(_QWORD *)(v65 + 32)) != 0)
          v66 = *(_QWORD *)(v89 + 32);
        else
          v66 = *(_QWORD *)(v65 + 48);
        v67 = *(_QWORD *)(a1 + 24);
        v68 = *(_QWORD *)(a1 + 32);
        if (v68 + 2 * v67 > v66)
          return 0;
        if ((*(_BYTE *)(a1 + 40) & 1) != 0)
        {
          if (a2 >= (v66 - v68) >> 1 || a3 >> 49 == 0)
            return 0;
        }
        else
        {
          result = 0;
          if (v67 <= a2 || !(a3 >> 49))
            return result;
        }
      }
      else if (*(_QWORD *)(a1 + 24) <= (unint64_t)a2 || a3 >> 49 == 0)
      {
        return 0;
      }
      if (a3 >= 0xFFFE000000000000)
        goto LABEL_59;
      v31 = JSC::IntegralTypedArrayAdaptor<short,JSC::GenericTypedArrayView<JSC::Int16Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>,(JSC::TypedArrayType)4>::toNativeFromDouble(COERCE_DOUBLE(a3 - 0x2000000000000));
      goto LABEL_211;
    case '+':
      v23 = a2;
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v79 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v79 + 64) && (v91 = *(_QWORD *)(v79 + 32)) != 0)
          v80 = *(_QWORD *)(v91 + 32);
        else
          v80 = *(_QWORD *)(v79 + 48);
        v81 = *(_QWORD *)(a1 + 24);
        v82 = *(_QWORD *)(a1 + 32);
        if (v82 + 2 * v81 > v80)
          return 0;
        if ((*(_BYTE *)(a1 + 40) & 1) != 0)
        {
          if (a2 >= (v80 - v82) >> 1 || a3 >> 49 == 0)
            return 0;
        }
        else
        {
          result = 0;
          if (v81 <= a2 || !(a3 >> 49))
            return result;
        }
      }
      else if (*(_QWORD *)(a1 + 24) <= (unint64_t)a2 || a3 >> 49 == 0)
      {
        return 0;
      }
      if (a3 < 0xFFFE000000000000)
      {
        v31 = JSC::IntegralTypedArrayAdaptor<unsigned short,JSC::GenericTypedArrayView<JSC::Uint16Adaptor>,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>,(JSC::TypedArrayType)5>::toNativeFromDouble(COERCE_DOUBLE(a3 - 0x2000000000000));
LABEL_211:
        LOWORD(v5) = v31;
      }
LABEL_59:
      v25 = *(_QWORD *)(a1 + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v25 = (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_WORD *)(v25 + 2 * v23) = v5;
      if ((a2 & 0x80000000) != 0)
        goto LABEL_182;
      return 1;
    case ',':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v38 + 64) && (v84 = *(_QWORD *)(v38 + 32)) != 0)
          v39 = *(_QWORD *)(v84 + 32);
        else
          v39 = *(_QWORD *)(v38 + 48);
        v40 = *(_QWORD *)(a1 + 24);
        v41 = *(_QWORD *)(a1 + 32);
        if (v41 + 4 * v40 > v39)
          return 0;
        if ((*(_BYTE *)(a1 + 40) & 1) != 0)
        {
          if (a2 >= (v39 - v41) >> 2 || a3 >> 49 == 0)
            return 0;
        }
        else
        {
          result = 0;
          if (v40 <= a2 || !(a3 >> 49))
            return result;
        }
      }
      else if (*(_QWORD *)(a1 + 24) <= (unint64_t)a2 || a3 >> 49 == 0)
      {
        return 0;
      }
      if (a3 < 0xFFFE000000000000)
      {
        v32 = a3 - 0x2000000000000;
        if ((double)(int)COERCE_DOUBLE(a3 - 0x2000000000000) == COERCE_DOUBLE(a3 - 0x2000000000000))
        {
          LODWORD(v5) = (int)COERCE_DOUBLE(a3 - 0x2000000000000);
        }
        else
        {
          v33 = (v32 >> 52) & 0x7FF;
          v34 = (v32 >> 52) + 1;
          if ((v33 - 1023) <= 0x53)
          {
            v35 = v32 >> (51 - (v32 >> 52));
            if (v33 > 0x433)
              LODWORD(v35) = a3 << (v33 - 51);
            v36 = (((1 << v34) - 1) & v35) + (1 << v34);
            if (v33 >= 0x41F)
              v37 = v35;
            else
              v37 = v36;
            if ((uint64_t)a3 >= 0x2000000000000)
              LODWORD(v5) = v37;
            else
              LODWORD(v5) = -v37;
          }
          else
          {
            LODWORD(v5) = 0;
          }
        }
      }
      v9 = *(_QWORD *)(a1 + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v9 = (v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_DWORD *)(v9 + 4 * a2) = v5;
      if ((a2 & 0x80000000) != 0)
        goto LABEL_182;
      return 1;
    case '-':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v69 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v69 + 64) && (v90 = *(_QWORD *)(v69 + 32)) != 0)
          v70 = *(_QWORD *)(v90 + 32);
        else
          v70 = *(_QWORD *)(v69 + 48);
        v71 = *(_QWORD *)(a1 + 24);
        v72 = *(_QWORD *)(a1 + 32);
        if (v72 + 4 * v71 > v70)
          return 0;
        if ((*(_BYTE *)(a1 + 40) & 1) != 0)
        {
          if (a2 >= (v70 - v72) >> 2 || a3 >> 49 == 0)
            return 0;
        }
        else
        {
          result = 0;
          if (v71 <= a2 || !(a3 >> 49))
            return result;
        }
      }
      else if (*(_QWORD *)(a1 + 24) <= (unint64_t)a2 || a3 >> 49 == 0)
      {
        return 0;
      }
      if (a3 >= 0xFFFE000000000000)
      {
        v28 = a3;
      }
      else
      {
        v27 = a3 - 0x2000000000000;
        v28 = (int)COERCE_DOUBLE(a3 - 0x2000000000000);
        if ((double)v28 != COERCE_DOUBLE(a3 - 0x2000000000000))
        {
          v42 = (v27 >> 52) & 0x7FF;
          v43 = (v27 >> 52) + 1;
          if ((v42 - 1023) <= 0x53)
          {
            v54 = v27 >> (51 - (v27 >> 52));
            if (v42 > 0x433)
              LODWORD(v54) = a3 << (v42 - 51);
            v55 = (((1 << v43) - 1) & v54) + (1 << v43);
            if (v42 >= 0x41F)
              v28 = v54;
            else
              v28 = v55;
            if ((uint64_t)a3 < 0x2000000000000)
              v28 = -v28;
          }
          else
          {
            v28 = 0;
          }
        }
      }
      v29 = *(_QWORD *)(a1 + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v29 = (v29 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_DWORD *)(v29 + 4 * a2) = v28;
      if ((a2 & 0x80000000) != 0)
        goto LABEL_182;
      return 1;
    case '.':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v46 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v46 + 64) && (v85 = *(_QWORD *)(v46 + 32)) != 0)
          v47 = *(_QWORD *)(v85 + 32);
        else
          v47 = *(_QWORD *)(v46 + 48);
        v48 = *(_QWORD *)(a1 + 24);
        v49 = *(_QWORD *)(a1 + 32);
        if (v49 + 4 * v48 > v47)
          return 0;
        if ((*(_BYTE *)(a1 + 40) & 1) != 0)
        {
          if (a2 >= (v47 - v49) >> 2 || a3 >> 49 == 0)
            return 0;
        }
        else
        {
          result = 0;
          if (v48 <= a2 || !(a3 >> 49))
            return result;
        }
      }
      else if (*(_QWORD *)(a1 + 24) <= (unint64_t)a2 || a3 >> 49 == 0)
      {
        return 0;
      }
      v11 = *(_QWORD *)(a1 + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v11 = (v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v12 = (float)(int)a3;
      if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
      {
        v13 = COERCE_DOUBLE(a3 - 0x2000000000000);
        v12 = v13;
      }
      *(float *)(v11 + 4 * a2) = v12;
      if ((a2 & 0x80000000) != 0)
        goto LABEL_182;
      return 1;
    case '/':
      if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
      {
        if (*(_QWORD *)(a1 + 24) > (unint64_t)a2 && a3 >> 49 != 0)
          goto LABEL_176;
        return 0;
      }
      v56 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
      if (*(_BYTE *)(v56 + 64) && (v87 = *(_QWORD *)(v56 + 32)) != 0)
        v57 = *(_QWORD *)(v87 + 32);
      else
        v57 = *(_QWORD *)(v56 + 48);
      v58 = *(_QWORD *)(a1 + 24);
      v59 = *(_QWORD *)(a1 + 32);
      if (v59 + 8 * v58 > v57)
        return 0;
      if ((*(_BYTE *)(a1 + 40) & 1) == 0)
      {
        result = 0;
        if (v58 <= a2 || !(a3 >> 49))
          return result;
        goto LABEL_176;
      }
      if (a2 >= (v57 - v59) >> 3 || a3 >> 49 == 0)
        return 0;
LABEL_176:
      v74 = *(_QWORD *)(a1 + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v74 = (v74 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v75 = (double)(int)a3;
      if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v75 = a3 - 0x2000000000000;
      *(double *)(v74 + 8 * a2) = v75;
      if ((a2 & 0x80000000) != 0)
      {
LABEL_182:
        if (a4)
          *(_DWORD *)(a4 + 4) |= 4u;
      }
      return 1;
    case '0':
    case '1':
      if ((*(_BYTE *)(a1 + 40) & 7u) < 3)
        return 0;
      v78 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
      if (!*(_BYTE *)(v78 + 64) || !*(_QWORD *)(v78 + 32))
        return 0;
      return 0;
    default:
      return 0;
  }
}

uint64_t JSC::IntegralTypedArrayAdaptor<signed char,JSC::GenericTypedArrayView<JSC::Int8Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,(JSC::TypedArrayType)1>::toNativeFromDouble(double a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;

  v1 = (int)a1;
  if ((double)(int)a1 != a1)
  {
    v2 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
    v3 = v2 - 1023;
    v4 = *(_QWORD *)&a1 >> (51 - (*(_QWORD *)&a1 >> 52));
    if (v2 > 0x433)
      LODWORD(v4) = *(_QWORD *)&a1 << ((*(_QWORD *)&a1 >> 52) - 51);
    if (v2 >= 0x41F)
      v5 = v4;
    else
      v5 = (((1 << ((*(_QWORD *)&a1 >> 52) + 1)) - 1) & v4) + (1 << ((*(_QWORD *)&a1 >> 52) + 1));
    if (a1 >= 0.0)
      LOBYTE(v1) = v5;
    else
      v1 = -v5;
    if (v3 > 0x53)
      LOBYTE(v1) = 0;
  }
  return (char)v1;
}

uint64_t JSC::IntegralTypedArrayAdaptor<unsigned char,JSC::GenericTypedArrayView<JSC::Uint8Adaptor>,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>,(JSC::TypedArrayType)2>::toNativeFromDouble(double a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;

  v1 = (int)a1;
  if ((double)(int)a1 != a1)
  {
    v2 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
    v3 = v2 - 1023;
    v4 = *(_QWORD *)&a1 >> (51 - (*(_QWORD *)&a1 >> 52));
    if (v2 > 0x433)
      LODWORD(v4) = *(_QWORD *)&a1 << ((*(_QWORD *)&a1 >> 52) - 51);
    if (v2 >= 0x41F)
      v5 = v4;
    else
      v5 = (((1 << ((*(_QWORD *)&a1 >> 52) + 1)) - 1) & v4) + (1 << ((*(_QWORD *)&a1 >> 52) + 1));
    if (a1 >= 0.0)
      LOBYTE(v1) = v5;
    else
      v1 = -v5;
    if (v3 > 0x53)
      LOBYTE(v1) = 0;
  }
  return v1;
}

uint64_t JSC::IntegralTypedArrayAdaptor<short,JSC::GenericTypedArrayView<JSC::Int16Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>,(JSC::TypedArrayType)4>::toNativeFromDouble(double a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;

  v1 = (int)a1;
  if ((double)(int)a1 != a1)
  {
    v2 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
    v3 = v2 - 1023;
    v4 = *(_QWORD *)&a1 >> (51 - (*(_QWORD *)&a1 >> 52));
    if (v2 > 0x433)
      LODWORD(v4) = *(_QWORD *)&a1 << ((*(_QWORD *)&a1 >> 52) - 51);
    if (v2 >= 0x41F)
      v5 = v4;
    else
      v5 = (((1 << ((*(_QWORD *)&a1 >> 52) + 1)) - 1) & v4) + (1 << ((*(_QWORD *)&a1 >> 52) + 1));
    if (a1 >= 0.0)
      LOWORD(v1) = v5;
    else
      v1 = -v5;
    if (v3 > 0x53)
      LOWORD(v1) = 0;
  }
  return (__int16)v1;
}

uint64_t JSC::IntegralTypedArrayAdaptor<unsigned short,JSC::GenericTypedArrayView<JSC::Uint16Adaptor>,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>,(JSC::TypedArrayType)5>::toNativeFromDouble(double a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;

  v1 = (int)a1;
  if ((double)(int)a1 != a1)
  {
    v2 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
    v3 = v2 - 1023;
    v4 = *(_QWORD *)&a1 >> (51 - (*(_QWORD *)&a1 >> 52));
    if (v2 > 0x433)
      LODWORD(v4) = *(_QWORD *)&a1 << ((*(_QWORD *)&a1 >> 52) - 51);
    if (v2 >= 0x41F)
      v5 = v4;
    else
      v5 = (((1 << ((*(_QWORD *)&a1 >> 52) + 1)) - 1) & v4) + (1 << ((*(_QWORD *)&a1 >> 52) + 1));
    if (a1 >= 0.0)
      LOWORD(v1) = v5;
    else
      v1 = -v5;
    if (v3 > 0x53)
      LOWORD(v1) = 0;
  }
  return (unsigned __int16)v1;
}

uint64_t JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(double a1)
{
  uint64_t result;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  result = (int)a1;
  if ((double)(int)result != a1)
  {
    v2 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
    v3 = v2 - 1023;
    v4 = *(_QWORD *)&a1 >> (51 - (*(_QWORD *)&a1 >> 52));
    if (v2 > 0x433)
      LODWORD(v4) = *(_QWORD *)&a1 << ((*(_QWORD *)&a1 >> 52) - 51);
    if (v2 >= 0x41F)
      v5 = v4;
    else
      v5 = (((1 << ((*(_QWORD *)&a1 >> 52) + 1)) - 1) & v4) + (1 << ((*(_QWORD *)&a1 >> 52) + 1));
    if (a1 >= 0.0)
      v6 = v5;
    else
      v6 = -v5;
    if (v3 <= 0x53)
      return v6;
    else
      return 0;
  }
  return result;
}

uint64_t JSC::IntegralTypedArrayAdaptor<unsigned int,JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>,(JSC::TypedArrayType)7>::toNativeFromDouble(double a1)
{
  uint64_t result;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  result = (int)a1;
  if ((double)(int)result != a1)
  {
    v2 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
    v3 = v2 - 1023;
    v4 = *(_QWORD *)&a1 >> (51 - (*(_QWORD *)&a1 >> 52));
    if (v2 > 0x433)
      LODWORD(v4) = *(_QWORD *)&a1 << ((*(_QWORD *)&a1 >> 52) - 51);
    if (v2 >= 0x41F)
      v5 = v4;
    else
      v5 = (((1 << ((*(_QWORD *)&a1 >> 52) + 1)) - 1) & v4) + (1 << ((*(_QWORD *)&a1 >> 52) + 1));
    if (a1 >= 0.0)
      v6 = v5;
    else
      v6 = -v5;
    if (v3 <= 0x53)
      return v6;
    else
      return 0;
  }
  return result;
}

uint64_t JSC::JSObject::getDirectOffset(_DWORD *a1, JSC::VM *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int i;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  int j;
  uint64_t v28;

  if (!(a3 >> 4))
    return 0xFFFFFFFFLL;
  v8 = 16 * (*a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v8 + 0x20)) != 0)
    return 0xFFFFFFFFLL;
  v10 = *(_QWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x58);
  if (!v10)
  {
    v22 = *(_QWORD *)(v8 + 64);
    if (!v22 || *(_BYTE *)(v22 + 5) != 1 && *(_DWORD *)(v22 + 80) < 2u)
      return 0xFFFFFFFFLL;
    JSC::Structure::materializePropertyTable((JSC::Structure *)v8, a2, 1, a4, a5, a6, a7, a8);
    if (!v10)
      return 0xFFFFFFFFLL;
  }
  if (!*(_DWORD *)(v10 + 24))
    return 0xFFFFFFFFLL;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  v13 = *(unsigned int *)(v10 + 8);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v11 & 1) != 0)
  {
    if ((v14 & 0x20) != 0)
      v14 = *(_DWORD *)(a3 + 32);
    v15 = *(_DWORD *)(v10 + 12);
    v16 = (v14 >> 8) & *(_QWORD *)&v15;
    v17 = *(unsigned __int8 *)(v12 + v16);
    if (*(_BYTE *)(v12 + v16))
    {
      v18 = v12 + v13;
      for (i = 1; ; ++i)
      {
        v20 = *(_QWORD *)(v18 + 8 * (v17 - 1));
        if (a3 == (v20 & 0xFFFFFFFFFFFFLL))
          break;
        v16 = ((_DWORD)v16 + i) & v15;
        v17 = *(unsigned __int8 *)(v12 + v16);
        result = 0xFFFFFFFFLL;
        if (!*(_BYTE *)(v12 + v16))
          return result;
      }
      return HIBYTE(v20);
    }
    return 0xFFFFFFFFLL;
  }
  if ((v14 & 0x20) != 0)
    v14 = *(_DWORD *)(a3 + 32);
  v23 = *(_DWORD *)(v10 + 12);
  v24 = v23 & (v14 >> 8);
  v25 = *(_DWORD *)(v12 + 4 * v24);
  if (!v25)
    return 0xFFFFFFFFLL;
  v26 = v12 + 4 * v13;
  for (j = 1; ; ++j)
  {
    v28 = (v25 - 1);
    if (*(_QWORD *)(v26 + 16 * v28) == a3)
      break;
    v24 = (v24 + j) & v23;
    v25 = *(_DWORD *)(v12 + 4 * v24);
    result = 0xFFFFFFFFLL;
    if (!v25)
      return result;
  }
  return *(unsigned int *)(v26 + 16 * v28 + 8);
}

uint64_t JSC::JSObject::tryGetIndexQuickly(JSC::JSObject *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  JSC::JSObject *v38;

  if (a2 > 0xFFFFFFFE)
    return 0;
  v2 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 4) & 0xFu) - 8 >= 2)
  {
    v3 = 0;
    switch(*((_BYTE *)this + 4) & 0xF)
    {
      case 0:
      case 1:
        switch(*((_BYTE *)this + 5))
        {
          case '\'':
          case '(':
            v13 = this;
            if ((*((_BYTE *)this + 40) & 7u) <= 2)
              goto LABEL_38;
            v14 = *(_QWORD *)(v2 - 8);
            if (*(_BYTE *)(v14 + 64) && (v34 = *(_QWORD *)(v14 + 32)) != 0)
              v15 = *(_QWORD *)(v34 + 32);
            else
              v15 = *(_QWORD *)(v14 + 48);
            v17 = *((_QWORD *)this + 3);
            v16 = *((_QWORD *)this + 4);
            if (v17 + v16 > v15)
              return 0;
            if ((*((_BYTE *)this + 40) & 1) == 0)
              goto LABEL_64;
            v18 = v15 - v16 > a2;
            goto LABEL_65;
          case ')':
            v37 = a2;
            v38 = this;
            v26 = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds((uint64_t)this, a2);
            LODWORD(a2) = v37;
            this = v38;
            if (!v26)
              return 0;
            return JSC::JSObject::getIndexQuicklyForTypedArray((uint64_t)this, a2, 0);
          case '*':
            v13 = this;
            if ((*((_BYTE *)this + 40) & 7u) <= 2)
              goto LABEL_38;
            v19 = *(_QWORD *)(v2 - 8);
            if (*(_BYTE *)(v19 + 64) && (v36 = *(_QWORD *)(v19 + 32)) != 0)
              v20 = *(_QWORD *)(v36 + 32);
            else
              v20 = *(_QWORD *)(v19 + 48);
            v17 = *((_QWORD *)this + 3);
            v21 = *((_QWORD *)this + 4);
            if (v21 + 2 * v17 > v20)
              return 0;
            if ((*((_BYTE *)this + 40) & 1) == 0)
              goto LABEL_64;
            v22 = a2 >= (v20 - v21) >> 1;
            goto LABEL_68;
          case '+':
            if ((*((_BYTE *)this + 40) & 7u) <= 2)
              goto LABEL_14;
            v6 = *(_QWORD *)(v2 - 8);
            if (*(_BYTE *)(v6 + 64) && (v32 = *(_QWORD *)(v6 + 32)) != 0)
              v7 = *(_QWORD *)(v32 + 32);
            else
              v7 = *(_QWORD *)(v6 + 48);
            v9 = *((_QWORD *)this + 3);
            v8 = *((_QWORD *)this + 4);
            if (v8 + 2 * v9 > v7)
              return 0;
            if ((*((_BYTE *)this + 40) & 1) == 0)
              goto LABEL_49;
            if (a2 >= (v7 - v8) >> 1)
              return 0;
            return JSC::JSObject::getIndexQuicklyForTypedArray((uint64_t)this, a2, 0);
          case ',':
          case '.':
            if ((*((_BYTE *)this + 40) & 7u) <= 2)
              goto LABEL_14;
            v23 = *(_QWORD *)(v2 - 8);
            if (*(_BYTE *)(v23 + 64) && (v31 = *(_QWORD *)(v23 + 32)) != 0)
              v24 = *(_QWORD *)(v31 + 32);
            else
              v24 = *(_QWORD *)(v23 + 48);
            v9 = *((_QWORD *)this + 3);
            v25 = *((_QWORD *)this + 4);
            if (v25 + 4 * v9 > v24)
              return 0;
            if ((*((_BYTE *)this + 40) & 1) == 0)
              goto LABEL_49;
            if (a2 >= (v24 - v25) >> 2)
              return 0;
            return JSC::JSObject::getIndexQuicklyForTypedArray((uint64_t)this, a2, 0);
          case '-':
            v13 = this;
            if ((*((_BYTE *)this + 40) & 7u) <= 2)
            {
LABEL_38:
              this = v13;
              v5 = *((_QWORD *)v13 + 3);
              goto LABEL_15;
            }
            v28 = *(_QWORD *)(v2 - 8);
            if (*(_BYTE *)(v28 + 64) && (v35 = *(_QWORD *)(v28 + 32)) != 0)
              v29 = *(_QWORD *)(v35 + 32);
            else
              v29 = *(_QWORD *)(v28 + 48);
            v17 = *((_QWORD *)this + 3);
            v30 = *((_QWORD *)this + 4);
            if (v30 + 4 * v17 > v29)
              return 0;
            if ((*((_BYTE *)this + 40) & 1) == 0)
            {
LABEL_64:
              v18 = v17 > a2;
LABEL_65:
              this = v13;
              if (v18)
                return JSC::JSObject::getIndexQuicklyForTypedArray((uint64_t)this, a2, 0);
              return 0;
            }
            v22 = a2 >= (v29 - v30) >> 2;
LABEL_68:
            this = v13;
            if (v22)
              return 0;
            return JSC::JSObject::getIndexQuicklyForTypedArray((uint64_t)this, a2, 0);
          case '/':
            if ((*((_BYTE *)this + 40) & 7u) <= 2)
            {
LABEL_14:
              v5 = *((_QWORD *)this + 3);
LABEL_15:
              if (v5 <= a2)
                return 0;
            }
            else
            {
              v10 = *(_QWORD *)(v2 - 8);
              if (*(_BYTE *)(v10 + 64) && (v33 = *(_QWORD *)(v10 + 32)) != 0)
                v11 = *(_QWORD *)(v33 + 32);
              else
                v11 = *(_QWORD *)(v10 + 48);
              v9 = *((_QWORD *)this + 3);
              v12 = *((_QWORD *)this + 4);
              if (v12 + 8 * v9 > v11)
                return 0;
              if ((*((_BYTE *)this + 40) & 1) != 0)
              {
                if (a2 >= (v11 - v12) >> 3)
                  return 0;
              }
              else
              {
LABEL_49:
                if (v9 <= a2)
                  return 0;
              }
            }
            return JSC::JSObject::getIndexQuicklyForTypedArray((uint64_t)this, a2, 0);
          case '0':
          case '1':
            if ((*((_BYTE *)this + 40) & 7u) < 3)
              return 0;
            v27 = *(_QWORD *)(v2 - 8);
            if (!*(_BYTE *)(v27 + 64) || !*(_QWORD *)(v27 + 32))
              return 0;
            return 0;
          default:
            return 0;
        }
      case 3:
        return v3;
      case 4:
      case 5:
        break;
      case 6:
      case 7:
        if (*(_DWORD *)(v2 - 8) <= a2)
          return 0;
        return *(_QWORD *)(v2 + 8 * a2) + 0x2000000000000;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        if (*(_DWORD *)(v2 - 4) <= a2)
          return 0;
        return *(_QWORD *)(v2 + 8 * a2 + 16);
      default:
        __break(0xC471u);
        JUMPOUT(0x1984C73E8);
    }
  }
  if (*(_DWORD *)(v2 - 8) <= a2)
    return 0;
  return *(_QWORD *)(v2 + 8 * a2);
}

uint64_t JSC::JSObject::getIfPropertyExists<unsigned long long>(_BYTE *a1, JSC::VM *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  WTF::StringImpl *v35;
  _BYTE *v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  JSC::VM *v54;
  int v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  int v64;
  _WORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  JSC::VM *v83;
  char OwnStaticPropertySlot;
  unsigned int *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  JSC::VM *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t **v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int16 *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t **v122;
  int *v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  unsigned __int8 *v140;
  int v141;
  double v142;
  const unsigned __int8 *v143;
  unsigned __int8 *v144;
  uint64_t v145;
  unsigned int v146;
  JSC::VM *v147;
  uint64_t *v148;
  uint64_t v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v155;
  uint64_t v156;
  unsigned int v157;
  JSC::VM *v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _BYTE *v170;
  _BYTE *v171;
  uint64_t v172;
  int v173;
  char v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  int *v180[18];

  v180[16] = *(int **)MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 7);
  v169 = 0xFFFFFFFF00000000;
  v171 = 0;
  v172 = 0;
  v170 = a1;
  v173 = 0x10000;
  v174 = 0;
  LOBYTE(v175) = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v12 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 <= 0xFFFFFFFEuLL)
  {
    v13 = (uint64_t *)a1;
    while (1)
    {
      v14 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
      v15 = (*(uint64_t (**)(uint64_t *, JSC::VM *, unint64_t, uint64_t *))(16
                                                                                         * *(unsigned int *)(v14 + 0x4C)
                                                                                         + 0x70))(v13, a2, v12, &v167);
      v23 = v15;
      if (*(_DWORD *)(v11 + 80))
      {
        v31 = *(_DWORD *)(v11 + 80);
        if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v17, v18, v19, v20, v21, v22);
        v32 = *(_QWORD *)(v11 + 16);
        v33 = v32 == 0;
        if (v32)
          v34 = 1;
        else
          v34 = v23;
        if ((v34 & 1) != 0)
        {
          v26 = v33;
          goto LABEL_14;
        }
      }
      else if ((v15 & 1) != 0)
      {
        if (!*(_DWORD *)(v11 + 80))
          goto LABEL_18;
        LOBYTE(v26) = 1;
        goto LABEL_74;
      }
      if (BYTE2(v173) == 3)
      {
        if (v174)
          goto LABEL_13;
        v24 = *((unsigned __int8 *)v13 + 5);
        if (v24 == 61)
          goto LABEL_8;
      }
      else
      {
        v24 = *((unsigned __int8 *)v13 + 5);
        if (v24 == 61)
        {
          if (BYTE2(v173) == 1)
            goto LABEL_13;
          goto LABEL_8;
        }
      }
      if ((v24 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v13, (uint64_t)v16, v17, v18, v19, v20, v21, v22) <= v12)
      {
        goto LABEL_13;
      }
LABEL_8:
      if ((*(_WORD *)(v14 + 12) & 0x800) == 0 || BYTE2(v173) == 3)
      {
        v25 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
        if (!v25)
          v25 = v13[2];
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v25 = (*(uint64_t (**)(uint64_t *, JSC::VM *))(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0xB0))(v13, a2);
        }
        else
        {
          v25 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
          if (!v25)
            v25 = v13[2];
        }
        if (*(_DWORD *)(v11 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v16, v17, v18, v19, v20, v21, v22))
        {
LABEL_13:
          v26 = 0;
          goto LABEL_14;
        }
      }
      if ((v25 & 0xFFFE000000000002) == 0)
      {
        v13 = (uint64_t *)v25;
        if (*(unsigned __int8 *)(v25 + 5) > 0x16u)
          continue;
      }
      goto LABEL_13;
    }
  }
  if (v12 == 0xFFFFFFFF)
    JSC::Identifier::from((uint64_t **)v11, 0xFFFFFFFFuLL, a3, a4, a5, a6, a7, a8, (int **)&v179);
  else
    JSC::Identifier::from((uint64_t **)v11, a2, (double)v12, a3, a4, a5, a6, a7, a8, &v179);
  v35 = v179;
  v36 = a1 + 6;
  v37 = (unint64_t)v179 >> 4;
  v38 = (uint64_t)a1;
  if ((a1[6] & 8) == 0)
  {
    v16 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v39 = a1;
    do
    {
      v40 = *(_DWORD *)v39 & 0xFFFFFFFE;
      v41 = 16 * v40;
      if (!(_DWORD)v37 || (v37 & ~*(_DWORD *)(16 * v40 + 0x20)) != 0)
        goto LABEL_48;
      v42 = *(_QWORD *)(16 * v40 + 0x58);
      if (!v42)
      {
        v53 = *(_QWORD *)(16 * v40 + 0x40);
        if (!v53 || *(_BYTE *)(v53 + 5) != 1 && *(_DWORD *)(v53 + 80) < 2u)
          goto LABEL_48;
        v54 = v16;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v41, v16, 1, (const JSC::PropertyTable *)v18, v19, v20, v21, v22);
        v16 = v54;
        if (!v42)
          goto LABEL_48;
      }
      if (!*(_DWORD *)(v42 + 24))
        goto LABEL_48;
      v43 = *(_QWORD *)(v42 + 16);
      v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
      v45 = *(unsigned int *)(v42 + 8);
      v46 = *((_DWORD *)v35 + 4);
      if ((v43 & 1) != 0)
      {
        if ((v46 & 0x20) != 0)
          v46 = *((_DWORD *)v35 + 8);
        v47 = *(_DWORD *)(v42 + 12);
        v48 = (v46 >> 8) & *(_QWORD *)&v47;
        v49 = *(unsigned __int8 *)(v44 + v48);
        if (!*(_BYTE *)(v44 + v48))
          goto LABEL_48;
        v50 = v44 + v45;
        v51 = 1;
        while (1)
        {
          v52 = *(_QWORD *)(v50 + 8 * (v49 - 1));
          if (v35 == (WTF::StringImpl *)(v52 & 0xFFFFFFFFFFFFLL))
            break;
          v48 = ((_DWORD)v48 + v51) & v47;
          v49 = *(unsigned __int8 *)(v44 + v48);
          ++v51;
          if (!*(_BYTE *)(v44 + v48))
            goto LABEL_48;
        }
        v20 = (v52 >> 16) & 0xFF00000000 | HIBYTE(v52);
      }
      else
      {
        if ((v46 & 0x20) != 0)
          v46 = *((_DWORD *)v35 + 8);
        v55 = *(_DWORD *)(v42 + 12);
        v56 = v55 & (v46 >> 8);
        v57 = *(_DWORD *)(v44 + 4 * v56);
        if (!v57)
          goto LABEL_48;
        v58 = v44 + 4 * v45;
        v59 = 1;
        while (1)
        {
          v60 = (v57 - 1);
          if (v35 == *(WTF::StringImpl **)(v58 + 16 * v60))
            break;
          v56 = (v56 + v59) & v55;
          v57 = *(_DWORD *)(v44 + 4 * v56);
          ++v59;
          if (!v57)
            goto LABEL_48;
        }
        v20 = *(unsigned int *)(v58 + 16 * v60 + 8) | ((unint64_t)*(unsigned __int8 *)(v58 + 16 * v60 + 12) << 32);
      }
      if ((_DWORD)v20 != -1)
      {
        v19 = HIDWORD(v20);
        if ((int)v20 <= 63)
        {
          v68 = (uint64_t)(v39 + 16);
          v69 = v20 << 32;
        }
        else
        {
          v68 = *((_QWORD *)v39 + 1) - 8;
          v69 = 0x3F00000000 - (v20 << 32);
        }
        v18 = *(_QWORD *)(v68 + (v69 >> 29));
        if ((v18 & 0xFFFE000000000002) == 0)
        {
          v70 = *(unsigned __int8 *)(v18 + 5);
          if (v70 != 5)
          {
            if (v70 != 6)
              goto LABEL_95;
            v86 = *(_DWORD *)(v41 + 16) & 3;
            v87 = *(_QWORD *)(v18 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v89 = *(_QWORD *)(v18 + 24);
              v88 = *(_QWORD *)(v18 + 32);
              v167 = *(_QWORD *)(v18 + 8);
              v168 = v87;
              LODWORD(v169) = HIDWORD(v20);
              v171 = v39;
              goto LABEL_117;
            }
            v167 = *(_QWORD *)(v18 + 8);
            v168 = v87;
            LODWORD(v169) = HIDWORD(v20);
            v171 = v39;
LABEL_167:
            v26 = 1;
            BYTE1(v173) = 3;
            if (v86 != 2)
              LOBYTE(v173) = 1;
            goto LABEL_87;
          }
          v85 = (unsigned int *)v39;
LABEL_110:
          JSC::JSObject::fillGetterPropertySlot(v85, (uint64_t)v16, (uint64_t)&v167, v18, v19, v20);
LABEL_111:
          v26 = 1;
          goto LABEL_87;
        }
LABEL_95:
        v167 = v18;
        v171 = v39;
LABEL_96:
        v169 = __PAIR64__(v20, v19);
        v26 = 1;
        LOWORD(v173) = 257;
        goto LABEL_87;
      }
LABEL_48:
      if ((*v36 & 0x20) != 0)
      {
        v83 = v16;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v39, v16, (unint64_t)v35, (uint64_t)&v167);
        v16 = v83;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_111;
      }
      v38 = *(_QWORD *)(v41 + 48);
      if (!v38)
        v38 = *((_QWORD *)v39 + 2);
      if ((v38 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v38 + 5) < 0x17u)
      {
        if (!v35)
          goto LABEL_86;
        v64 = *((_DWORD *)v35 + 4);
        if ((v64 & 0x20) != 0)
          goto LABEL_86;
        v65 = (_WORD *)*((_QWORD *)v35 + 1);
        v66 = *((unsigned int *)v35 + 1);
        if ((v64 & 4) == 0)
        {
          if ((_DWORD)v66)
          {
            v67 = (unsigned __int16)*v65 - 48;
            if (v67 <= 9 && (*v65 != 48 || v66 <= 1))
            {
              v71 = v65 + 1;
              v72 = v66 - 1;
              while (v72)
              {
                if (v67 > 0x19999999)
                  goto LABEL_86;
                v73 = *v71 - 48;
                if (v73 > 9)
                  goto LABEL_86;
                v26 = 0;
                v74 = __CFADD__(v73, 10 * v67);
                v67 = v73 + 10 * (_DWORD)v67;
                ++v71;
                --v72;
                if (v74)
                  goto LABEL_87;
              }
              goto LABEL_244;
            }
          }
          goto LABEL_86;
        }
        if (!(_DWORD)v66)
          goto LABEL_86;
        v67 = *(unsigned __int8 *)v65 - 48;
        if (v67 > 9 || v66 >= 2 && *(_BYTE *)v65 == 48)
          goto LABEL_86;
        v144 = (unsigned __int8 *)v65 + 1;
        v145 = v66 - 1;
        while (v145)
        {
          if (v67 > 0x19999999)
            goto LABEL_86;
          v146 = *v144 - 48;
          if (v146 > 9)
            goto LABEL_86;
          v26 = 0;
          v74 = __CFADD__(v146, 10 * v67);
          v67 = v146 + 10 * (_DWORD)v67;
          ++v144;
          --v145;
          if (v74)
            goto LABEL_87;
        }
LABEL_244:
        if ((_DWORD)v67 == -1)
        {
LABEL_86:
          v26 = 0;
          goto LABEL_87;
        }
        v147 = (JSC::VM *)*((_QWORD *)a2 + 7);
        v148 = (uint64_t *)a1;
        while (2)
        {
          v149 = 16 * (*(_DWORD *)v148 & 0xFFFFFFFE);
          v150 = (*(uint64_t (**)(uint64_t *, JSC::VM *, uint64_t, uint64_t *))(16
                                                                                     * *(unsigned int *)(v149 + 0x4C)
                                                                                     + 0x70))(v148, a2, v67, &v167);
          v151 = v150;
          if (*((_DWORD *)v147 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v147, (uint64_t)v16, v17, v18, v19, v20, v21, v22);
            if (((hasExceptionsAfterHandlingTraps | v151) & 1) != 0)
            {
LABEL_258:
              v26 = !hasExceptionsAfterHandlingTraps;
              goto LABEL_87;
            }
          }
          else if ((v150 & 1) != 0)
          {
            goto LABEL_111;
          }
          if (BYTE2(v173) == 3)
          {
            if (v174)
              goto LABEL_86;
            v152 = *((unsigned __int8 *)v148 + 5);
            if (v152 != 61)
              goto LABEL_250;
          }
          else
          {
            v152 = *((unsigned __int8 *)v148 + 5);
            if (v152 == 61)
            {
              if (BYTE2(v173) == 1)
                goto LABEL_86;
            }
            else
            {
LABEL_250:
              if ((v152 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v148, (uint64_t)v16, v17, v18, v19, v20, v21, v22) <= v67)
              {
                goto LABEL_86;
              }
            }
          }
          if ((*(_WORD *)(v149 + 12) & 0x800) == 0 || BYTE2(v173) == 3)
          {
            v153 = *(_QWORD *)(16 * (*(_DWORD *)v148 & 0xFFFFFFFE) + 0x30);
            if (!v153)
              v153 = v148[2];
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v148 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v153 = (*(uint64_t (**)(uint64_t *, JSC::VM *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v148 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB0))(v148, a2);
            }
            else
            {
              v153 = *(_QWORD *)(16 * (*(_DWORD *)v148 & 0xFFFFFFFE) + 0x30);
              if (!v153)
                v153 = v148[2];
            }
            if (*((_DWORD *)v147 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v147, (uint64_t)v16, v17, v18, v19, v20, v21, v22))
            {
              goto LABEL_86;
            }
          }
          if ((v153 & 0xFFFE000000000002) != 0)
            goto LABEL_86;
          v26 = 0;
          v148 = (uint64_t *)v153;
          if (*(unsigned __int8 *)(v153 + 5) <= 0x16u)
            goto LABEL_87;
          continue;
        }
      }
      v36 = (_BYTE *)(v38 + 6);
      v39 = (_BYTE *)v38;
    }
    while ((*(_BYTE *)(v38 + 6) & 8) == 0);
  }
  v90 = v37;
  v166 = v38;
  if (v35)
  {
    v91 = *((_DWORD *)v35 + 4);
    if ((v91 & 0x20) == 0)
    {
      v92 = (_BYTE *)*((_QWORD *)v35 + 1);
      v93 = *((unsigned int *)v35 + 1);
      if ((v91 & 4) != 0)
      {
        if ((_DWORD)v93)
        {
          v94 = *v92 - 48;
          if (v94 <= 9 && (v93 < 2 || *v92 != 48))
          {
            v155 = v92 + 1;
            v156 = v93 - 1;
            while (v156)
            {
              if (v94 <= 0x19999999)
              {
                v157 = *v155 - 48;
                if (v157 <= 9)
                {
                  v74 = __CFADD__(v157, 10 * v94);
                  v94 = v157 + 10 * (_DWORD)v94;
                  ++v155;
                  --v156;
                  if (!v74)
                    continue;
                }
              }
              goto LABEL_127;
            }
LABEL_294:
            if ((_DWORD)v94 != -1)
            {
              v158 = (JSC::VM *)*((_QWORD *)a2 + 7);
              v159 = (uint64_t *)a1;
              while (1)
              {
                v160 = 16 * (*(_DWORD *)v159 & 0xFFFFFFFE);
                v161 = (*(uint64_t (**)(uint64_t *, JSC::VM *, uint64_t, uint64_t *))(16
                                                                                           * *(unsigned int *)(v160 + 0x4C)
                                                                                           + 0x70))(v159, a2, v94, &v167);
                v162 = v161;
                if (*((_DWORD *)v158 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v158, (uint64_t)v16, v17, v18, v19, v20, v21, v22);
                  if (((hasExceptionsAfterHandlingTraps | v162) & 1) != 0)
                    goto LABEL_258;
                }
                else if ((v161 & 1) != 0)
                {
                  goto LABEL_111;
                }
                if (BYTE2(v173) == 3)
                {
                  if (v174)
                    goto LABEL_86;
                  v163 = *((unsigned __int8 *)v159 + 5);
                  if (v163 == 61)
                    goto LABEL_301;
                }
                else
                {
                  v163 = *((unsigned __int8 *)v159 + 5);
                  if (v163 == 61)
                  {
                    if (BYTE2(v173) == 1)
                      goto LABEL_86;
                    goto LABEL_301;
                  }
                }
                if ((v163 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v159, (uint64_t)v16, v17, v18, v19, v20, v21, v22) <= v94)
                {
                  goto LABEL_86;
                }
LABEL_301:
                if ((*(_WORD *)(v160 + 12) & 0x800) == 0 || BYTE2(v173) == 3)
                {
                  v164 = *(_QWORD *)(16 * (*(_DWORD *)v159 & 0xFFFFFFFE) + 0x30);
                  if (!v164)
                    v164 = v159[2];
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v159 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v164 = (*(uint64_t (**)(uint64_t *, JSC::VM *))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v159 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0xB0))(v159, a2);
                  }
                  else
                  {
                    v164 = *(_QWORD *)(16 * (*(_DWORD *)v159 & 0xFFFFFFFE) + 0x30);
                    if (!v164)
                      v164 = v159[2];
                  }
                  if (*((_DWORD *)v158 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v158, (uint64_t)v16, v17, v18, v19, v20, v21, v22))
                  {
                    goto LABEL_86;
                  }
                }
                if ((v164 & 0xFFFE000000000002) != 0)
                  goto LABEL_86;
                v26 = 0;
                v159 = (uint64_t *)v164;
                if (*(unsigned __int8 *)(v164 + 5) <= 0x16u)
                  goto LABEL_87;
              }
            }
          }
        }
      }
      else if ((_DWORD)v93)
      {
        v94 = *(unsigned __int16 *)v92 - 48;
        if (v94 <= 9 && (*(_WORD *)v92 != 48 || v93 <= 1))
        {
          v119 = (unsigned __int16 *)(v92 + 2);
          v120 = v93 - 1;
          while (v120)
          {
            if (v94 <= 0x19999999)
            {
              v121 = *v119 - 48;
              if (v121 <= 9)
              {
                v74 = __CFADD__(v121, 10 * v94);
                v94 = v121 + 10 * (_DWORD)v94;
                ++v119;
                --v120;
                if (!v74)
                  continue;
              }
            }
            goto LABEL_127;
          }
          goto LABEL_294;
        }
      }
    }
  }
LABEL_127:
  v95 = (JSC::VM *)*((_QWORD *)a2 + 7);
  while (1)
  {
    v96 = *(_DWORD *)v166 & 0xFFFFFFFE;
    v97 = 16 * v96;
    if ((*(_BYTE *)(v166 + 6) & 8) == 0)
      break;
    v135 = (*(uint64_t (**)(uint64_t, JSC::VM *, WTF::StringImpl *, uint64_t *))(16
                                                                                       * *(unsigned int *)(16 * v96 + 0x4C)
                                                                                       + 0x68))(v166, a2, v35, &v167);
    v136 = v135;
    if (*((_DWORD *)v95 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v95, (uint64_t)v16, v17, v18, v19, v20, v21, v22);
      if (((hasExceptionsAfterHandlingTraps | v136) & 1) != 0)
        goto LABEL_258;
    }
    else if ((v135 & 1) != 0)
    {
      goto LABEL_111;
    }
    if (BYTE2(v173) == 3)
    {
      if (v174)
        goto LABEL_86;
      v137 = *(unsigned __int8 *)(v166 + 5);
      if (v137 != 61)
      {
LABEL_206:
        if (!v35)
          goto LABEL_134;
        if ((v137 - 50) < 0xFFFFFFF5)
          goto LABEL_134;
        v138 = *((_DWORD *)v35 + 4);
        if ((v138 & 0x20) != 0)
          goto LABEL_134;
        v139 = *((unsigned int *)v35 + 1);
        if (!(_DWORD)v139)
          goto LABEL_134;
        v140 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
        if ((v138 & 4) == 0)
        {
          v141 = *(unsigned __int16 *)v140;
          if ((_DWORD)v139 == 1)
            goto LABEL_212;
          if (v141 == 45)
          {
            v141 = *((unsigned __int16 *)v140 + 1);
            goto LABEL_217;
          }
          if ((v141 - 48) >= 0xA && ((_DWORD)v139 != 8 || v141 != 73))
          {
LABEL_230:
            if ((_DWORD)v139 != 3 || v141 != 78)
              goto LABEL_134;
          }
LABEL_223:
          v165 = v165 & 0xFFFFFF0000000000 | v139 | ((unint64_t)((v138 >> 2) & 1) << 32);
          JSC::jsToNumber(v140, v165);
          WTF::numberToString(v180, v142);
          if (WTF::equal((unint64_t)v35, (unint64_t)v180, v143))
            goto LABEL_86;
          goto LABEL_134;
        }
        v141 = *v140;
        if ((_DWORD)v139 == 1)
        {
LABEL_212:
          if ((v141 - 48) < 0xA)
            goto LABEL_86;
          goto LABEL_134;
        }
        if (v141 == 45)
        {
          v141 = v140[1];
LABEL_217:
          if ((v141 - 48) < 0xA)
          {
            if ((_DWORD)v139 == 2)
              goto LABEL_86;
            goto LABEL_223;
          }
          if ((_DWORD)v139 != 9)
            goto LABEL_134;
        }
        else
        {
          if ((v141 - 48) < 0xA)
            goto LABEL_223;
          if ((_DWORD)v139 != 8)
            goto LABEL_230;
        }
        if (v141 != 73)
          goto LABEL_134;
        goto LABEL_223;
      }
    }
    else
    {
      v137 = *(unsigned __int8 *)(v166 + 5);
      if (v137 != 61)
        goto LABEL_206;
      if (BYTE2(v173) == 1)
        goto LABEL_86;
    }
LABEL_134:
    if ((*(_WORD *)(v97 + 12) & 0x800) != 0)
    {
      v100 = *(_DWORD *)v166;
      if (BYTE2(v173) != 3)
      {
        v134 = 16 * (v100 & 0xFFFFFFFE);
        if ((*(_WORD *)(v134 + 12) & 0x800) != 0)
        {
          v101 = (*(uint64_t (**)(uint64_t, JSC::VM *))(16 * *(unsigned int *)(v134 + 76) + 0xB0))(v166, a2);
        }
        else
        {
          v101 = *(_QWORD *)(v134 + 48);
          if (!v101)
            v101 = *(_QWORD *)(v166 + 16);
        }
        if (*((_DWORD *)v95 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v95, (uint64_t)v16, v17, v18, v19, v20, v21, v22))
        {
          goto LABEL_86;
        }
        goto LABEL_138;
      }
    }
    else
    {
      v100 = *(_DWORD *)v166;
    }
    v101 = *(_QWORD *)(16 * (v100 & 0xFFFFFFFE) + 0x30);
    if (!v101)
      v101 = *(_QWORD *)(v166 + 16);
LABEL_138:
    if ((v101 & 0xFFFE000000000002) != 0)
      goto LABEL_86;
    v26 = 0;
    v166 = v101;
    if (*(unsigned __int8 *)(v101 + 5) <= 0x16u)
      goto LABEL_87;
  }
  if (!v90
    || (v90 & ~*(_DWORD *)(16 * v96 + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v96), v95, v17, (const JSC::PropertyTable *)v18, v19, v20, v21, v22), !v98)|| (v180[0] = (int *)v35, v99 = JSC::PropertyTable::get(v98, (uint64_t *)v180), v20 = v99, (_DWORD)v99 == -1))
  {
    if ((*(_BYTE *)(v166 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v166, v95, (unint64_t)v35, (uint64_t)&v167) & 1) != 0)
    {
      goto LABEL_111;
    }
    goto LABEL_134;
  }
  v19 = HIDWORD(v99);
  if ((int)v99 <= 63)
  {
    v102 = v166 + 16;
    v103 = v99 << 32;
  }
  else
  {
    v102 = *(_QWORD *)(v166 + 8) - 8;
    v103 = 0x3F00000000 - (v99 << 32);
  }
  v18 = *(_QWORD *)(v102 + (v103 >> 29));
  if ((v18 & 0xFFFE000000000002) != 0)
  {
LABEL_146:
    v167 = v18;
    v171 = (_BYTE *)v166;
    goto LABEL_96;
  }
  v104 = *(unsigned __int8 *)(v18 + 5);
  if (v104 == 5)
  {
    v85 = (unsigned int *)v166;
    v16 = v95;
    goto LABEL_110;
  }
  if (v104 != 6)
    goto LABEL_146;
  v86 = *(_DWORD *)(v97 + 16) & 3;
  v133 = *(_QWORD *)(v18 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)))
  {
    v167 = *(_QWORD *)(v18 + 8);
    v168 = v133;
    LODWORD(v169) = HIDWORD(v99);
    v171 = (_BYTE *)v166;
    goto LABEL_167;
  }
  v89 = *(_QWORD *)(v18 + 24);
  v88 = *(_QWORD *)(v18 + 32);
  v167 = *(_QWORD *)(v18 + 8);
  v168 = v133;
  LODWORD(v169) = HIDWORD(v99);
  v171 = (_BYTE *)v166;
LABEL_117:
  BYTE1(v173) = 3;
  v26 = 1;
  if (v86 != 2)
    LOBYTE(v173) = 1;
  HIBYTE(v173) = 1;
  v177 = v89;
  v178 = v88;
LABEL_87:
  if (v179)
  {
    if (*(_DWORD *)v179 == 2)
    {
      WTF::StringImpl::~StringImpl(v179, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v179 -= 2;
    }
  }
LABEL_14:
  if (*(_DWORD *)(v11 + 80))
  {
LABEL_74:
    v62 = *(_DWORD *)(v11 + 80);
    if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v17, v18, v19, v20, v21, v22);
    if (*(_QWORD *)(v11 + 16))
      v63 = 0;
    else
      v63 = v26;
    if ((v63 & 1) != 0)
      goto LABEL_18;
LABEL_79:
    v28 = 0;
    goto LABEL_21;
  }
  if (!v26)
    goto LABEL_79;
LABEL_18:
  v27 = *(_QWORD *)a3;
  if (!v174)
  {
    if (BYTE1(v173) == 1)
    {
      v28 = v167;
      goto LABEL_21;
    }
    if (BYTE1(v173) == 2)
    {
      v61 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v167, a2, v27, v18, v19, v20, v21, v22);
LABEL_72:
      v28 = v61;
      goto LABEL_21;
    }
    v122 = (uint64_t **)*((_QWORD *)a2 + 7);
    if (HIDWORD(v27))
      JSC::Identifier::from(v122, v16, (double)v27, (const WTF::StringImpl *)v27, v18, v19, v20, v21, v22, (WTF::StringImpl **)v180);
    else
      JSC::Identifier::from(v122, *(_QWORD *)a3, (const WTF::StringImpl *)v27, v18, v19, v20, v21, v22, v180);
    v123 = v180[0];
    v28 = JSC::PropertySlot::customGetter((uint64_t)&v167, (JSC::VM *)v122, (WTF::StringImpl *)v180[0]);
    if (!v123)
      goto LABEL_21;
    if (*v123 != 2)
    {
      *v123 -= 2;
      goto LABEL_21;
    }
    v124 = (WTF::StringImpl *)v123;
LABEL_173:
    WTF::StringImpl::~StringImpl(v124, v112, v113, v114, v115, v116, v117, v118);
    WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    goto LABEL_21;
  }
  if (v27 <= 0xFFFFFFFE)
  {
    v61 = JSC::JSObject::get((JSC::JSObject *)a1, a2, v27);
    goto LABEL_72;
  }
  v105 = (uint64_t **)*((_QWORD *)a2 + 7);
  if (v27 == 0xFFFFFFFF)
    JSC::Identifier::from(v105, 0xFFFFFFFFuLL, (const WTF::StringImpl *)0xFFFFFFFFLL, v18, v19, v20, v21, v22, v180);
  else
    JSC::Identifier::from(v105, v16, (double)v27, (const WTF::StringImpl *)v27, v18, v19, v20, v21, v22, (WTF::StringImpl **)v180);
  v111 = v180[0];
  v28 = JSC::JSObject::get((unsigned int *)a1, (uint64_t)a2, (unint64_t)v180[0], v106, v107, v108, v109, v110);
  if (v111)
  {
    if (*v111 != 2)
    {
      *v111 -= 2;
      goto LABEL_21;
    }
    v124 = (WTF::StringImpl *)v111;
    goto LABEL_173;
  }
LABEL_21:
  if (v176)
  {
    v29 = *(_DWORD *)(v175 + 4);
    if (!v29)
    {
      __break(0xC471u);
      JUMPOUT(0x1984C78F4);
    }
    *(_DWORD *)(v175 + 4) = v29 - 1;
  }
  return v28;
}

uint64_t JSC::JSObject::get(JSC::JSObject *this, uint64_t ***a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;

  if ((unint64_t)a3 <= 0xFFFFFFFE)
    return JSC::JSObject::get(this, (JSC::JSGlobalObject *)a2, (unint64_t)a3);
  v11 = a2[7];
  if (a3 == (const WTF::StringImpl *)0xFFFFFFFFLL)
    JSC::Identifier::from(v11, 0xFFFFFFFFuLL, (const WTF::StringImpl *)0xFFFFFFFFLL, a4, a5, a6, a7, a8, (int **)&v34);
  else
    JSC::Identifier::from(v11, (JSC::VM *)a2, (double)(unint64_t)a3, a3, a4, a5, a6, a7, a8, &v34);
  v17 = v34;
  v25 = JSC::JSObject::get((unsigned int *)this, (uint64_t)a2, (unint64_t)v34, v12, v13, v14, v15, v16);
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  return v25;
}

uint64_t JSC::createRegExpMatchesArray(JSC::VM &,JSC::JSGlobalObject *,JSC::JSString *,WTF::String const&,JSC::RegExp *,unsigned int,JSC::MatchResult &)::{lambda(void)#1}::operator()(uint64_t result, __n128 a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  __n128 *v20;
  uint64_t v21;
  __n128 *v22;
  __n128 *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(result + 8);
  v3 = **(_QWORD **)result;
  v4 = **(_QWORD **)(result + 16);
  v5 = HIDWORD(v4);
  v6 = v4 | 0xFFFE000000000000;
  if ((v4 & 0x80000000) != 0)
    v6 = COERCE__INT64((double)v4) + 0x2000000000000;
  v7 = COERCE__INT64((double)v4) + 0x2000000000000;
  if (v5)
    v8 = v7;
  else
    v8 = v6;
  v9 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v9 - 16) = v8;
  if (v8)
    v10 = (v8 & 0xFFFE000000000002) == 0;
  else
    v10 = 0;
  if (v10 && *(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
  {
    v40 = result;
    JSC::Heap::writeBarrierSlowPath(v2 + 192, v3);
    result = v40;
    v2 = *(_QWORD *)(v40 + 8);
    v3 = **(_QWORD **)v40;
    v9 = *(_QWORD *)(v3 + 8);
  }
  v11 = **(_QWORD **)(result + 24);
  *(_QWORD *)(v9 - 24) = v11;
  if (v11)
    v12 = (v11 & 0xFFFE000000000002) == 0;
  else
    v12 = 0;
  if (v12 && *(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
  {
    v41 = result;
    JSC::Heap::writeBarrierSlowPath(v2 + 192, v3);
    result = v41;
    v2 = *(_QWORD *)(v41 + 8);
    v3 = **(_QWORD **)v41;
  }
  if (**(_BYTE **)(result + 32))
  {
    v26 = **(_QWORD **)(result + 40);
    *(_QWORD *)(*(_QWORD *)(v3 + 8) - 32) = v26;
    if (v26 && (v26 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
    {
      v27 = result;
      JSC::Heap::writeBarrierSlowPath(v2 + 192, v3);
      result = v27;
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v3 + 8) - 32) = 10;
  }
  v13 = **(_QWORD **)(result + 48);
  v14 = *(unsigned __int16 *)(v13 + 24);
  if (v14 == 65534)
  {
    v16 = 0;
LABEL_26:
    v18 = 0;
    goto LABEL_27;
  }
  if (v14 == 0xFFFF)
    v15 = *(_DWORD *)(*(_QWORD *)(v13 + 64) + 84);
  else
    v15 = *(unsigned __int16 *)(v13 + 24);
  if (v15 >= 64)
  {
    if ((v15 - 63) >= 5)
    {
      v24 = (v15 - 64) | ((v15 - 64) >> 1) | (((v15 - 64) | ((v15 - 64) >> 1)) >> 2);
      v25 = v24 | (v24 >> 4) | ((v24 | (v24 >> 4)) >> 8);
      v16 = (v25 | HIWORD(v25)) + 1;
    }
    else
    {
      v16 = 4;
    }
  }
  else
  {
    v16 = 0;
  }
  if (v14 == 0xFFFF)
    v14 = *(_DWORD *)(*(_QWORD *)(v13 + 64) + 84);
  v17 = __OFSUB__(v14, 63);
  v18 = v14 - 63;
  if ((v18 < 0) ^ v17 | (v18 == 0))
    goto LABEL_26;
LABEL_27:
  v19 = v16 - v18;
  v20 = (__n128 *)(*(_QWORD *)(**(_QWORD **)result + 8) - 8 * v16 - 8);
  v21 = (8 * v19) & 0x7FFFFFFC0;
  v22 = (__n128 *)((char *)v20 + 8 * v19);
  v23 = (__n128 *)((char *)v20 + v21);
  a2.n128_u64[0] = 0;
  while (v20 != v23)
  {
    *v20 = a2;
    v20[1] = a2;
    v20[2] = a2;
    v20[3] = a2;
    v20 += 4;
  }
  while (v20 != v22)
  {
    v20->n128_u64[0] = 0;
    v20 = (__n128 *)((char *)v20 + 8);
  }
  if (**(_BYTE **)(result + 56))
  {
    v28 = result;
    JSC::JSObject::putDirectOffset(**(_QWORD **)result, *(_QWORD *)(result + 8), 67, **(_QWORD **)(result + 64));
    v29 = *(_DWORD *)(**(_QWORD **)(v28 + 72) + 1020);
    if (v29)
      v30 = 16 * (v29 & 0xFFFFFFFE);
    else
      v30 = 0;
    if (**(_QWORD **)(v28 + 80))
      v31 = **(_QWORD **)(v28 + 80);
    else
      v31 = 10;
    JSC::JSObject::putDirectOffset(**(_QWORD **)(v28 + 64), *(_QWORD *)(v28 + 8), 64, v31);
    result = JSC::Structure::outOfLineCapacity((JSC::Structure *)v30);
    v33 = *(unsigned __int16 *)(v30 + 24);
    if (v33 == 65534)
      goto LABEL_57;
    if (v33 == 0xFFFF)
      v33 = *(_DWORD *)(*(_QWORD *)(v30 + 64) + 84);
    v17 = __OFSUB__(v33, 63);
    v34 = v33 - 63;
    if ((v34 < 0) ^ v17 | (v34 == 0))
LABEL_57:
      v34 = 0;
    v35 = result - v34;
    v36 = 8 * (result - v34);
    v37 = (_OWORD *)(*(_QWORD *)(**(_QWORD **)(v28 + 64) + 8) - 8 * result - 8);
    v38 = (_OWORD *)((char *)v37 + 8 * v35);
    v39 = (_OWORD *)((char *)v37 + (v36 & 0x7FFFFFFC0));
    *(_QWORD *)&v32 = 0;
    while (v37 != v39)
    {
      *v37 = v32;
      v37[1] = v32;
      v37[2] = v32;
      v37[3] = v32;
      v37 += 4;
    }
    while (v37 != v38)
    {
      *(_QWORD *)v37 = 0;
      v37 = (_OWORD *)((char *)v37 + 8);
    }
  }
  return result;
}

uint64_t JSC::JSObject::initializeIndexWithoutBarrier(uint64_t result, uint64_t a2, unsigned int a3, unint64_t a4)
{
  uint64_t v4;
  double v5;

  v4 = *(_QWORD *)(result + 8);
  if ((*(_BYTE *)(result + 4) & 0xFu) - 8 >= 2)
  {
    switch(*(_BYTE *)(result + 4) & 0xF)
    {
      case 3:
        __break(0xC471u);
        JUMPOUT(0x1984C89A4);
      case 4:
      case 5:
        if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
        {
          __break(0xC471u);
          JUMPOUT(0x1984C8950);
        }
        break;
      case 6:
      case 7:
        if (!(a4 >> 49))
        {
          __break(0xC471u);
          JUMPOUT(0x1984C89E4);
        }
        v5 = (double)(int)a4;
        if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v5 = a4 - 0x2000000000000;
        *(double *)(v4 + 8 * a3) = v5;
        return result;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        *(_QWORD *)(v4 + 8 * a3 + 16) = a4;
        return result;
      default:
        __break(0xC471u);
        JUMPOUT(0x1984C89C4);
    }
  }
  *(_QWORD *)(v4 + 8 * a3) = a4;
  return result;
}

uint64_t JSC::jsSubstringOfResolved(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  WTF::StringImpl *v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  int v33;
  JSC::VM *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t SlowCase;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  int v73;
  _BYTE v74[2];
  uint64_t v75;

  if (!(_DWORD)a5)
    return *(_QWORD *)(a1 + 41968);
  v9 = a2;
  if (!(_DWORD)a4)
  {
    v18 = *(_QWORD *)(a3 + 8);
    if (v18)
      LODWORD(v18) = *(_DWORD *)(v18 + 4);
    if ((_DWORD)v18 == (_DWORD)a5)
      return a3;
  }
  v10 = (unint64_t *)(a1 + 39696);
  if ((_DWORD)a5 == 1)
  {
    v11 = *(WTF::StringImpl **)(a3 + 8);
    if (!v11 || *((_DWORD *)v11 + 1) <= a4)
    {
      v12 = 0;
      return *(_QWORD *)(a1 + 8 * v12 + 42216);
    }
    v59 = a4;
    v60 = a3;
    v61 = a5;
    v62 = WTF::StringImpl::at(v11, a4);
    a5 = v61;
    a3 = v60;
    a4 = v59;
    if (v62 <= 0xFF)
    {
      v12 = v62;
      return *(_QWORD *)(a1 + 8 * v12 + 42216);
    }
LABEL_10:
    v15 = (unint64_t *)(a1 + 39432);
    v16 = *(_QWORD *)(a3 + 8);
    if (v16)
    {
      if ((*(_BYTE *)(v16 + 16) & 4) != 0)
        v17 = 7;
      else
        v17 = 3;
    }
    else
    {
      v17 = 7;
    }
    v13 = *v15;
    if (*v15 >= *(_QWORD *)(a1 + 39440))
    {
      v13 = *(_QWORD *)(a1 + 39448);
      if ((v13 & 1) != 0)
      {
        v48 = a4;
        v49 = a3;
        v50 = a5;
        JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
        v10 = (unint64_t *)(a1 + 39696);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 39408, a1 + 192, 32, v9, 0, v51, v52, v53);
        LODWORD(a5) = v50;
        a3 = v49;
        LODWORD(a4) = v48;
        v13 = SlowCase;
LABEL_16:
        *(_DWORD *)v13 = v10[227] >> 4;
        *(_DWORD *)(v13 + 4) = 17302016;
        *(_QWORD *)(v13 + 8) = v17;
        *(_DWORD *)(v13 + 16) = a5;
        *(_DWORD *)(v13 + 20) = a3;
        *(_WORD *)(v13 + 24) = WORD2(a3);
        *(_WORD *)(v13 + 26) = a4;
        *(_DWORD *)(v13 + 28) = WORD1(a4);
        if (*(_BYTE *)(a1 + 755))
          __dmb(0xAu);
        return v13;
      }
      v45 = *(_QWORD *)(v13 + 8) ^ *(_QWORD *)(a1 + 39456);
      *(_QWORD *)(a1 + 39440) = v13 + HIDWORD(v45);
      *(_QWORD *)(a1 + 39448) = v13 + (int)v45;
    }
    *v15 = v13 + 32;
    goto LABEL_16;
  }
  if ((_DWORD)a5 != 2)
    goto LABEL_10;
  v19 = *(WTF::StringImpl **)(a3 + 8);
  if (!v19)
  {
    v21 = 0;
    goto LABEL_27;
  }
  v20 = *((_DWORD *)v19 + 1);
  if (v20 > a4)
  {
    v63 = a5;
    v64 = a4;
    v65 = a3;
    v21 = WTF::StringImpl::at(v19, a4);
    a3 = v65;
    v19 = *(WTF::StringImpl **)(v65 + 8);
    if (!v19)
    {
      a4 = v64;
      a5 = v63;
      goto LABEL_27;
    }
    v20 = *((_DWORD *)v19 + 1);
    a4 = v64;
    a5 = v63;
  }
  else
  {
    v21 = 0;
  }
  a2 = (a4 + 1);
  if (v20 > a2)
  {
    v66 = v21;
    v67 = a4;
    v68 = a3;
    v69 = a5;
    LODWORD(v19) = WTF::StringImpl::at(v19, a2);
    a5 = v69;
    a3 = v68;
    a4 = v67;
    v21 = v66;
  }
  else
  {
    LODWORD(v19) = 0;
  }
LABEL_27:
  if ((v19 | v21) > 0x7F)
    goto LABEL_10;
  v74[0] = v21;
  v74[1] = (_BYTE)v19;
  v72[0] = v74;
  v72[1] = 2;
  v22 = ((_DWORD)v19 << 11) ^ ((v21 - 1640531527) << 16) ^ (v21 - 1640531527);
  v23 = (v22 + (v22 >> 11)) ^ (8 * (v22 + (v22 >> 11)));
  v24 = (v23 + (v23 >> 5)) ^ (4 * (v23 + (v23 >> 5)));
  v25 = ((v24 + (v24 >> 15)) ^ ((v24 + (v24 >> 15)) << 10)) & 0xFFFFFF;
  if (v25)
    v26 = v25;
  else
    v26 = 0x800000;
  v73 = v26;
  v27 = a1 + 81168;
  v28 = v26 & 0x1FF;
  v29 = *(_QWORD *)(a1 + 81168 + 8 * v28);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 8);
    v31 = (v30 & 1) != 0 ? 0 : (WTF::StringImpl *)v30;
    v32 = *((_DWORD *)v31 + 4);
    v33 = v32 < 0x100 ? WTF::StringImpl::hashSlowCase(v31) : v32 >> 8;
    if (v33 == v26 && WTF::equalInternal<unsigned char>((uint64_t)v31, (unint64_t)v74, 2))
      return *(_QWORD *)(v27 + 8 * v28);
  }
  WTF::AtomStringImpl::add(v72, a4, a5, a6, a7, a8, &v75);
  v40 = v75;
  v41 = *(_DWORD *)(v75 + 16);
  v42 = v75;
  if ((v41 & 3) == 2)
  {
    v42 = v75;
    do
    {
      v42 = *(_QWORD *)(v42 + 24);
      v41 = *(_DWORD *)(v42 + 16);
    }
    while ((v41 & 3) == 2);
  }
  if ((v41 & 8) != 0)
  {
    v43 = 0;
  }
  else
  {
    *(_DWORD *)(v42 + 16) = v41 | 8;
    v43 = (unint64_t)*(unsigned int *)(v42 + 4) << ((v41 & 4) == 0);
  }
  v44 = a1 + 192;
  v13 = *v10;
  if (*v10 >= *(_QWORD *)(a1 + 39704))
  {
    v70 = v43;
    v71 = v40;
    v46 = *(_QWORD *)(a1 + 39712);
    if ((v46 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)a1, v34, v35, v43, v36, v37, v38, v39);
      v13 = JSC::LocalAllocator::allocateSlowCase(a1 + 39672, a1 + 192, 16, v9, 0, v56, v57, v58);
      v44 = a1 + 192;
      v43 = v70;
      v10 = (unint64_t *)(a1 + 39696);
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 39712);
      v47 = *(_QWORD *)(v46 + 8) ^ *(_QWORD *)(a1 + 39720);
      *(_QWORD *)(a1 + 39704) = v13 + HIDWORD(v47);
      *(_QWORD *)(a1 + 39712) = v13 + (int)v47;
      *v10 = v13 + 16;
    }
    v40 = v71;
  }
  else
  {
    *v10 = v13 + 16;
  }
  *(_DWORD *)v13 = v10[227] >> 4;
  *(_DWORD *)(v13 + 4) = 17302016;
  *(_QWORD *)(v13 + 8) = v40;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  if (v43 >= 0x101)
  {
    v55 = v13;
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v44, v9, v13, v43, v36, v37, v38, v39);
    v13 = v55;
  }
  *(_QWORD *)(v27 + 8 * v28) = v13;
  return v13;
}

unint64_t JSC::createRegExpMatchesArray(JSC::VM &,JSC::JSGlobalObject *,JSC::JSString *,WTF::String const&,JSC::RegExp *,unsigned int,JSC::MatchResult &)::{lambda(JSC::GCDeferralContext &,int,int)#1}::operator()(uint64_t *a1, JSC::VM *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v10 = a1[1];
  v15 = *a1;
  v11 = *(_DWORD *)(*(_QWORD *)v10 + 908);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  v13 = JSC::JSArray::tryCreateUninitializedRestricted(&v15, a2, v12, 2, a5, a6, a7, a8);
  JSC::JSObject::initializeIndexWithoutBarrier(v13, (uint64_t)&v15, 0, a3 | 0xFFFE000000000000);
  JSC::JSObject::initializeIndexWithoutBarrier(v13, (uint64_t)&v15, 1u, a4 | 0xFFFE000000000000);
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  return v13;
}

uint64_t JSC::RegExp::getCaptureGroupNameForSubpatternId@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;

  if (!a2)
    goto LABEL_7;
  v3 = *(_QWORD *)(this + 48);
  if (!v3)
  {
LABEL_8:
    *a3 = v3;
    return this;
  }
  v4 = *(_DWORD *)(v3 + 20);
  if (!v4)
  {
LABEL_7:
    v3 = 0;
    goto LABEL_8;
  }
  if (v4 > a2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * a2);
    if (v3)
      *(_DWORD *)v3 += 2;
    goto LABEL_8;
  }
  __break(0xC471u);
  return this;
}

uint64_t JSC::RegExp::subpatternIdForGroupName<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  unsigned int *v12;
  unsigned int v14;
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  v4 = *(_QWORD *)(a1 + 48);
  if (!v4)
    return 0;
  v8 = *(_QWORD *)(v4 + 24);
  v7 = (uint64_t *)(v4 + 24);
  if (!v8)
    goto LABEL_6;
  v9 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StringViewHashTranslator>,WTF::StringView>(v7, (uint64_t)v15);
  if (v9)
    goto LABEL_7;
  if (*v7)
    v9 = (uint64_t *)(*v7 + 24 * *(unsigned int *)(*v7 - 4));
  else
LABEL_6:
    v9 = 0;
LABEL_7:
  v10 = *(uint64_t **)(*(_QWORD *)(a1 + 48) + 24);
  if (v10)
    v10 += 3 * *((unsigned int *)v10 - 1);
  if (v10 == v9)
    return 0;
  v11 = *((_DWORD *)v9 + 5);
  if (v11 == 1)
  {
    v12 = (unsigned int *)v9[1];
  }
  else
  {
    if (!v11 || (v14 = *(_DWORD *)v9[1] + 2 * *(_DWORD *)(a1 + 24) + 1, *(_DWORD *)(a4 + 12) <= v14))
    {
      __break(0xC471u);
      JUMPOUT(0x1984C9098);
    }
    v12 = (unsigned int *)(*(_QWORD *)a4 + 4 * v14);
  }
  return *v12;
}

uint64_t JSC::JSObject::getIndexQuickly(JSC::JSObject *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 4) & 0xFu) - 8 < 2)
    return *(_QWORD *)(v2 + 8 * a2);
  switch(*((_BYTE *)this + 4) & 0xF)
  {
    case 0:
    case 1:
      result = JSC::JSObject::getIndexQuicklyForTypedArray((uint64_t)this, a2, 0);
      break;
    case 4:
    case 5:
      result = *(unsigned int *)(v2 + 8 * a2) | 0xFFFE000000000000;
      break;
    case 6:
    case 7:
      result = *(_QWORD *)(v2 + 8 * a2) + 0x2000000000000;
      break;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
      result = *(_QWORD *)(v2 + 8 * a2 + 16);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1984C9134);
  }
  return result;
}

void JSC::Identifier::fromString(uint64_t **this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, WTF::StringImpl **a9@<X8>)
{
  WTF::StringImpl *v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v10 = *a2;
  if (*a2)
  {
    if ((*((_BYTE *)v10 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v10 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(this[5239], (unint64_t)*a2, a3, a4, a5, a6, a7, a8, &v20);
      v10 = v20;
    }
  }
  v11 = *(_DWORD *)v10;
  *(_DWORD *)v10 += 2;
  if (v11)
  {
    *(_DWORD *)v10 = v11;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v10, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  *a9 = v10;
}

uint64_t JSC::RegExp::matchInline<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int,WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(void)#1}::operator()(JSC::JSGlobalObject ***a1)
{
  JSC::JSGlobalObject **v1;
  JSC::JSGlobalObject *v2;
  JSC::VM *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  JSC::Exception *v11;
  int v12;

  v1 = a1[2];
  v2 = **a1;
  if (v2)
  {
    v3 = (JSC::VM *)a1[1];
    v4 = JSC::Yarr::errorToThrow(**a1, *((unsigned __int8 *)v1 + 20));
    v11 = (JSC::Exception *)v4;
    if ((v4 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
    {
      v11 = (JSC::Exception *)JSC::Exception::create((uint64_t)v3, (JSC::VM *)v4, 0, v5, v6, v7, v8, v9);
    }
    JSC::VM::throwException(v3, v2, v11, v10, v5, v6, v7, v8, v9);
  }
  v12 = *((unsigned __int8 *)v1 + 20);
  if (v12 == 26 || v12 == 0)
  {
    *((_BYTE *)v1 + 16) = 3;
    *((_BYTE *)v1 + 20) = 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t WTF::HashTranslatorCharBuffer<unsigned char>::HashTranslatorCharBuffer(uint64_t result, uint64_t a2, unint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  v3 = -1640531527;
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (a3 >= 2)
  {
    v4 = 0;
    do
    {
      v5 = ((v3 + *(unsigned __int8 *)(a2 + v4)) << 16) ^ (*(unsigned __int8 *)(a2 + v4 + 1) << 11) ^ (v3 + *(unsigned __int8 *)(a2 + v4));
      v3 = v5 + (v5 >> 11);
      v6 = v4 + 3;
      v4 += 2;
    }
    while (v6 < a3);
  }
  if ((a3 & 1) != 0)
    v3 = ((v3 + *(unsigned __int8 *)(a3 + a2 - 1)) ^ ((v3 + *(unsigned __int8 *)(a3 + a2 - 1)) << 11))
       + (((v3 + *(unsigned __int8 *)(a3 + a2 - 1)) ^ ((v3 + *(unsigned __int8 *)(a3 + a2 - 1)) << 11)) >> 17);
  v7 = (v3 ^ (8 * v3)) + ((v3 ^ (8 * v3)) >> 5);
  v8 = (v7 ^ (4 * v7)) + ((v7 ^ (4 * v7)) >> 15);
  v9 = (v8 ^ (v8 << 10)) & 0xFFFFFF;
  if (!v9)
    v9 = 0x800000;
  *(_DWORD *)(result + 16) = v9;
  return result;
}

unint64_t JSC::Butterfly::tryCreateUninitialized(JSC *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11 = 8;
  if (!(_DWORD)a5)
    v11 = 0;
  v12 = v11 + 8 * (a4 + a3) + a6;
  if (v12 > 0x1F60 || (v13 = *((_QWORD *)a1 + ((v12 + 15) >> 4) + 842)) == 0)
  {
    result = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a1 + 6648, a1, v12, a7, a5, a6, a7, a8);
    goto LABEL_7;
  }
  v14 = *(unsigned int *)(v13 + 60);
  result = *(_QWORD *)(v13 + 24);
  if (result < *(_QWORD *)(v13 + 32))
  {
    *(_QWORD *)(v13 + 24) = result + v14;
    goto LABEL_7;
  }
  result = *(_QWORD *)(v13 + 40);
  if ((result & 1) != 0)
  {
    v17 = (uint64_t)a1 + 192;
    JSC::sanitizeStackForVM(a1, a1, v12, a4, a5, a6, a7, a8);
    result = JSC::LocalAllocator::allocateSlowCase(v13, v17, v14, a7, 1, v19, v20, v21);
LABEL_7:
    if (!result)
      return result;
    goto LABEL_8;
  }
  v16 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v13 + 48);
  *(_QWORD *)(v13 + 32) = result + HIDWORD(v16);
  *(_QWORD *)(v13 + 40) = result + (int)v16;
  *(_QWORD *)(v13 + 24) = result + v14;
LABEL_8:
  result += 8 * a3 + 8 * a4 + 8;
  return result;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StringViewHashTranslator>,WTF::StringView>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = *(unsigned __int8 **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if ((v6 & 0xFF00000000) != 0)
  {
    v7 = -1640531527;
    if ((v6 & 0xFFFFFFFE) != 0)
    {
      v8 = 0;
      do
      {
        v9 = ((v7 + v5[v8]) << 16) ^ (v5[v8 + 1] << 11) ^ (v7 + v5[v8]);
        v7 = v9 + (v9 >> 11);
        v10 = v8 + 3;
        v8 += 2;
      }
      while (v10 < v6);
    }
    if ((v6 & 1) != 0)
      v7 = ((v7 + v5[v6 - 1]) ^ ((v7 + v5[v6 - 1]) << 11))
         + (((v7 + v5[v6 - 1]) ^ ((v7 + v5[v6 - 1]) << 11)) >> 17);
  }
  else
  {
    v7 = WTF::SuperFastHash::computeHashImpl<char16_t,WTF::StringHasher::DefaultConverter>((uint64_t)v5, v6);
  }
  v11 = 0;
  v12 = (v7 ^ (8 * v7)) + ((v7 ^ (8 * v7)) >> 5);
  v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  v14 = (v13 ^ (v13 << 10)) & 0xFFFFFF;
  if (!v14)
    v14 = 0x800000;
  while (1)
  {
    v15 = v14 & v4;
    v16 = (uint64_t *)(v2 + 24 * (v14 & v4));
    v17 = *v16;
    if (*v16 != -1)
    {
      if (!v17)
        return 0;
      if (WTF::operator==(*(unsigned __int8 **)(v17 + 8), *(unsigned int *)(v17 + 4) | ((unint64_t)((*(_DWORD *)(v17 + 16) >> 2) & 1) << 32), *(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8)))
      {
        break;
      }
    }
    v14 = ++v11 + v15;
  }
  return v16;
}

double JSC::parseIntOverflow(unint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 *v3;
  double v4;
  double result;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = (unsigned __int8 *)(a1 + a2 - 1);
  if ((unint64_t)v3 < a1)
    return 0.0;
  v4 = 1.0;
  result = 0.0;
  while (1)
  {
    v6 = *v3;
    if (v4 != INFINITY)
    {
      v7 = v6 - 48;
      v8 = v6 - 65;
      if ((v6 - 97) <= 0x19)
        v9 = v6 - 87;
      else
        v9 = -1;
      v10 = v6 - 55;
      if (v8 > 0x19)
        v10 = v9;
      if (v7 <= 9)
        v10 = v7;
      if (v10 >= a3)
        v10 = -1;
      result = result + (double)v10 * v4;
      goto LABEL_14;
    }
    if (v6 != 48)
      return INFINITY;
LABEL_14:
    v4 = v4 * (double)a3;
    if ((unint64_t)--v3 < a1)
      return result;
  }
}

{
  unsigned __int16 *v3;
  double result;
  double v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = (unsigned __int16 *)(a1 + 2 * a2 - 2);
  result = 0.0;
  if ((unint64_t)v3 >= a1)
  {
    v5 = 1.0;
    do
    {
      v6 = *v3;
      if (v5 == INFINITY)
      {
        if (v6 != 48)
          return INFINITY;
      }
      else
      {
        v7 = v6 - 48;
        v8 = v6 - 65;
        if ((v6 - 97) <= 0x19)
          v9 = v6 - 87;
        else
          v9 = -1;
        v10 = v6 - 55;
        if (v8 > 0x19)
          v10 = v9;
        if (v7 <= 9)
          v10 = v7;
        if (v10 >= a3)
          v10 = -1;
        result = result + (double)v10 * v5;
      }
      v5 = v5 * (double)a3;
      --v3;
    }
    while ((unint64_t)v3 >= a1);
  }
  return result;
}

{
  unsigned __int8 *v3;
  double v4;
  double result;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = (unsigned __int8 *)(a1 + a2 - 1);
  if ((unint64_t)v3 >= a1)
  {
    v4 = 1.0;
    result = 0.0;
    while (1)
    {
      v6 = *v3;
      if (v4 == INFINITY)
      {
        if (v6 != 48)
          return INFINITY;
      }
      else
      {
        v7 = v6 - 48;
        v8 = v6 - 65;
        if ((v6 - 97) <= 0x19)
          v9 = v6 - 87;
        else
          v9 = -1;
        v10 = v6 - 55;
        if (v8 > 0x19)
          v10 = v9;
        if (v7 <= 9)
          v10 = v7;
        if (v10 >= a3)
          v10 = -1;
        result = result + (double)v10 * v4;
      }
      v4 = v4 * (double)a3;
      if ((unint64_t)--v3 < a1)
        return result;
    }
  }
  return 0.0;
}

uint64_t *JSC::InferredValue<JSC::JSScope>::notifyWriteSlow(uint64_t *result, JSC::VM *a2, unint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t **v13;
  int v14;
  uint64_t *v16;
  uint64_t v17;

  v10 = *result;
  if ((*result & 1) != 0)
  {
    v11 = (v10 >> 1) & 3;
    if (v11)
    {
      if (v11 == 1 && (v10 & 0xFFFFFFFFFFFFFFF8) != a4)
        *result = 5;
    }
    else
    {
      *result = a4 & 0xFFFFFFFFFFFFFFF8 | 3;
      if (a3 && a4 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a3 + 7))
        return (uint64_t *)JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a3);
    }
  }
  else if (*(_BYTE *)(v10 + 4) == 1)
  {
    if (*(_QWORD *)(v10 + 24) != a4)
    {
      *(_QWORD *)(v10 + 24) = 0;
      __dmb(0xAu);
      v13 = (uint64_t **)(v10 + 8);
      result = *(uint64_t **)(v10 + 8);
      *(_BYTE *)(v10 + 4) = 2;
      v14 = *((_DWORD *)a2 + 229);
      *((_DWORD *)a2 + 229) = v14 + 1;
      if (result != (uint64_t *)(v10 + 8))
      {
        do
        {
          v17 = *result;
          v16 = (uint64_t *)result[1];
          *v16 = *result;
          *(_QWORD *)(v17 + 8) = v16;
          *result = 0;
          result[1] = 0;
          JSC::Watchpoint::fire((unint64_t)result, a2, a5, a4, (uint64_t)a5, a6, a7, a8, a9);
          result = *v13;
        }
        while (*v13 != (uint64_t *)v13);
        v14 = *((_DWORD *)a2 + 229) - 1;
      }
      *((_DWORD *)a2 + 229) = v14;
      __dmb(0xAu);
      *(_BYTE *)(v10 + 4) = 2;
    }
  }
  else if (!*(_BYTE *)(v10 + 4))
  {
    *(_QWORD *)(v10 + 24) = a4;
    if (!a3
      || !a4
      || *((_DWORD *)a2 + 190) < *(unsigned __int8 *)(a3 + 7)
      || (result = (uint64_t *)JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a3), *(_BYTE *)(v10 + 4) != 1))
    {
      __dmb(0xAu);
      *(_BYTE *)(v10 + 4) = 1;
      __dmb(0xAu);
    }
  }
  return result;
}

unint64_t JSC::Structure::prototypeChain(JSC::Structure *this, JSC::VM *a2, JSC::JSGlobalObject *a3, JSC::JSObject *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  JSC::VM *v18;
  uint64_t v19;
  JSC::VM *v20;
  unsigned int *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  result = *((_QWORD *)this + 7);
  v11 = *((unsigned __int8 *)this + 9);
  if (!result)
  {
LABEL_16:
    if (v11 < 0x17)
    {
      if (v11 == 2)
      {
        v18 = (JSC::VM *)*((_QWORD *)a3 + 149);
      }
      else if (v11 == 3)
      {
        v18 = (JSC::VM *)*((_QWORD *)a3 + 151);
      }
      else
      {
        v18 = (JSC::VM *)*((_QWORD *)a3 + 152);
      }
    }
    else
    {
      v18 = (JSC::VM *)*((_QWORD *)this + 6);
      if (!v18)
        v18 = (JSC::VM *)*((_QWORD *)a4 + 2);
    }
    *((_QWORD *)this + 7) = 0;
    v19 = *((_QWORD *)this + 8);
    if (v19)
    {
      if (*(_BYTE *)(v19 + 5) != 1)
      {
        v21 = *(unsigned int **)(v19 + 16);
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v19 + 16) = 0;
        if (v21)
        {
          v22 = (uint64_t *)(v21 + 2);
          v23 = *v21;
          if ((_DWORD)v23)
          {
            v24 = 24 * v23;
            do
            {
              v25 = (uint64_t *)v22[1];
              if (v25)
              {
                v26 = *v22;
                *v25 = *v22;
                *(_QWORD *)(v26 + 8) = v25;
                *v22 = 0;
                v22[1] = 0;
              }
              v22 += 3;
              v24 -= 24;
            }
            while (v24);
          }
          WTF::fastFree((unint64_t)v21, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        }
      }
    }
    if (v18 == (JSC::VM *)2)
      v20 = 0;
    else
      v20 = v18;
    result = JSC::StructureChain::create(a2, v20, a3, (uint64_t)a4, a5, a6, a7, a8);
    *((_QWORD *)this + 7) = result;
    if (this && result && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
      return *((_QWORD *)this + 7);
    }
    return result;
  }
  if (v11 < 0x17)
  {
    if (v11 == 2)
    {
      v12 = *((_QWORD *)a3 + 149);
    }
    else if (v11 == 3)
    {
      v12 = *((_QWORD *)a3 + 151);
    }
    else
    {
      v12 = *((_QWORD *)a3 + 152);
    }
  }
  else
  {
    v12 = *((_QWORD *)this + 6);
    if (!v12)
      v12 = *((_QWORD *)a4 + 2);
  }
  v13 = *(int **)(result + 8);
  v14 = *v13;
  if (*v13)
  {
    v15 = v13 + 1;
    while (v12 != 2 && *(_DWORD *)v12 == v14)
    {
      v16 = *(_QWORD *)(16 * (v14 & 0xFFFFFFFE) + 0x30);
      if (!v16)
        v16 = *(_QWORD *)(v12 + 16);
      v17 = *v15++;
      v14 = v17;
      v12 = v16;
      if (!v17)
        goto LABEL_14;
    }
    goto LABEL_16;
  }
  v16 = v12;
LABEL_14:
  if (v16 != 2)
    goto LABEL_16;
  return result;
}

JSC::CachedCall *std::optional<JSC::CachedCall>::emplace[abi:sn180100]<JSC::JSGlobalObject *&,JSC::JSFunction *,int,void>(JSC::CachedCall *a1, JSC::JSGlobalObject **a2, JSC::JSFunction **a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::CachedCall *result;

  if (*((_BYTE *)a1 + 232))
  {
    JSC::CachedCall::~CachedCall(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    *((_BYTE *)a1 + 232) = 0;
  }
  result = JSC::CachedCall::CachedCall(a1, *a2, *a3, *a4, a5, a6, a7, a8);
  *((_BYTE *)result + 232) = 1;
  return result;
}

void JSC::CachedCall::~CachedCall(JSC::CachedCall *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  JSC::CachedCall *v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  JSC::CachedCall *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v28;

  *((_QWORD *)this + 27) = 0;
  v9 = (uint64_t *)*((_QWORD *)this + 16);
  if (v9)
  {
    v15 = *v9;
    if (*v9)
    {
      v16 = *(_DWORD *)(v15 - 8);
      v17 = (unint64_t)this + ~(((_QWORD)this + 112) << 32) + 112;
      v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
      v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
      v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ ((_DWORD)v19 + ~((_DWORD)v19 << 27)));
      v21 = *(JSC::CachedCall **)(v15 + 8 * v20);
      if (v21 != (JSC::CachedCall *)((char *)this + 112))
      {
        v28 = 1;
        while (v21)
        {
          v20 = ((_DWORD)v20 + v28) & v16;
          v21 = *(JSC::CachedCall **)(v15 + 8 * v20);
          ++v28;
          if (v21 == (JSC::CachedCall *)((char *)this + 112))
            goto LABEL_15;
        }
        v20 = *(unsigned int *)(v15 - 4);
      }
LABEL_15:
      if (v20 != *(_DWORD *)(v15 - 4))
      {
        *(_QWORD *)(v15 + 8 * v20) = -1;
        ++*(_DWORD *)(*v9 - 16);
        v22 = *v9;
        v23 = *v9 ? *(_DWORD *)(v22 - 12) - 1 : -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v9;
        if (*v9)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v9, v26 >> 1, 0, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  v10 = (JSC::CachedCall *)*((_QWORD *)this + 15);
  if (v10 != (JSC::CachedCall *)((char *)this + 136) && v10 != 0)
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 4);
  if (*(JSC::CachedCall **)(v12 + 90568) == (JSC::CachedCall *)((char *)this + 32))
  {
    *(_QWORD *)(v12 + 90568) = 0;
    if (*(_BYTE *)(v12 + 56))
      JSC::VM::executeEntryScopeServicesOnExit((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (_QWORD *)*((_QWORD *)this + 1);
  if (v13)
  {
    v14 = *(_QWORD *)this;
    *v13 = *(_QWORD *)this;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
}

JSC::CachedCall *JSC::CachedCall::CachedCall(JSC::CachedCall *this, JSC::JSGlobalObject *a2, JSC::JSFunction *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  signed int v8;
  JSC::CachedCall *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  JSC::Interpreter *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)();
  JSC::CodeBlock *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  JSC::CodeBlock *v28;
  JSC::CachedCall **v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  JSC::CachedCall *v36;
  JSC::VM *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t OutOfMemoryError;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  JSC::Exception *v47;
  int v48;
  JSC::VM *v49;
  JSC::CodeBlock *v50;

  v8 = a4;
  v11 = this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v12 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 3) = v12;
  v13 = *(_QWORD *)(16 * (**((_DWORD **)a3 + 2) & 0xFFFFFFFE) + 0x28);
  *((_QWORD *)this + 4) = v12;
  v14 = (char *)this + 32;
  *((_BYTE *)this + 16) = 3;
  *((_QWORD *)this + 5) = v13;
  if (!*(_QWORD *)(v12 + 90568))
  {
    *(_QWORD *)(v12 + 90568) = v14;
    v36 = *(JSC::CachedCall **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v36)
    {
      this = (JSC::CachedCall *)WTF::Thread::initializeCurrentTLS(this);
      v36 = this;
    }
    if ((*((_BYTE *)v36 + 5) & 0x20) == 0)
    {
      *((_BYTE *)v36 + 5) |= 0x20u;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread(this, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::registerThreadForMachExceptionHandling(v36, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v37 = *(JSC::VM **)v14;
    if (!*(_BYTE *)(*(_QWORD *)v14 + 56))
    {
      v38 = *((_QWORD *)v37 + 11624);
      v39 = atomic_load(&JSC::lastTimeZoneID);
      if (v38 == v39)
        goto LABEL_2;
      v37 = *(JSC::VM **)v14;
    }
    JSC::VM::executeEntryScopeServicesOnEntry(v37, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_2:
  *(_QWORD *)(v12 + 32) = 0;
  *((_QWORD *)v11 + 14) = 0x800000000;
  v15 = (JSC::CachedCall *)((char *)v11 + 112);
  *((_BYTE *)v11 + 104) = 0;
  *((_QWORD *)v11 + 15) = (char *)v11 + 136;
  *((_OWORD *)v11 + 8) = 0u;
  *((_OWORD *)v11 + 9) = 0u;
  *((_OWORD *)v11 + 10) = 0u;
  *((_OWORD *)v11 + 11) = 0u;
  *((_QWORD *)v11 + 24) = 0;
  v16 = *((_QWORD *)a3 + 3);
  if ((v16 & 1) != 0)
    v16 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 48);
  *((_QWORD *)v11 + 25) = v16;
  *((_QWORD *)v11 + 26) = *((_QWORD *)a3 + 2);
  *((_QWORD *)v11 + 27) = 0;
  *((_DWORD *)v11 + 56) = 0;
  v17 = *((_QWORD *)v11 + 3);
  v49 = (JSC::VM *)v17;
  if ((unint64_t)&v49 < *(_QWORD *)(v17 + 8))
    goto LABEL_43;
  if (*(_DWORD *)(v17 + 4))
  {
    JSC::Interpreter::checkVMEntryPermission(v15);
LABEL_43:
    JSC::throwStackOverflowError((unint64_t)a2, &v49, (uint64_t)a3, a4, a5, a6, a7, a8);
    return v11;
  }
  if (*((unsigned int *)v11 + 29) < (unint64_t)v8
    && (v8 < 0 || JSC::MarkedVectorBase::expandCapacity(v15, v8)))
  {
    *((_BYTE *)v11 + 104) = 1;
LABEL_39:
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a2, a2);
    v47 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v47 = (JSC::Exception *)JSC::Exception::create(v17, (JSC::VM *)OutOfMemoryError, 0, v41, v42, v43, v44, v45);
    }
    JSC::VM::throwException((JSC::VM *)v17, a2, v47, v46, v41, v42, v43, v44, v45);
    return v11;
  }
  if (*((_BYTE *)v11 + 104))
    goto LABEL_39;
  v18 = *((_QWORD *)v11 + 3);
  v50 = 0;
  v19 = *((_QWORD *)v11 + 25);
  if (*(_BYTE *)(v19 + 5) == 8
    || (*(_QWORD *)(v19 + 8)
      ? (v20 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
      : (v20 = 0),
        v20))
  {
    v50 = *(JSC::CodeBlock **)(v19 + 96);
  }
  else
  {
    JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v19, v18, (uint64_t)a3, *((const WTF::StringImpl **)v11 + 26), 0, &v50, a7, a8);
  }
  if (!*(_DWORD *)(v18 + 80))
    goto LABEL_15;
  v48 = *(_DWORD *)(v18 + 80);
  if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v18 + 16))
  {
    v28 = 0;
  }
  else
  {
LABEL_15:
    v21 = v50;
    *((_BYTE *)v50 + 17) = 0;
    v22 = *((_QWORD *)v21 + 15);
    if (v22)
    {
      v23 = (unsigned int *)(v22 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
    }
    *((_QWORD *)v11 + 27) = *(_QWORD *)(v22 + 16);
    v25 = (unsigned int *)(v22 + 8);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)(v22 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
    }
    v28 = v50;
    v29 = (JSC::CachedCall **)((char *)v50 + 88);
    v30 = *((_QWORD *)v50 + 11);
    *(_QWORD *)v11 = v30;
    *((_QWORD *)v11 + 1) = v29;
    *v29 = v11;
    *(_QWORD *)(v30 + 8) = v11;
  }
  if (!*(_QWORD *)(v17 + 16))
  {
    *((_DWORD *)v11 + 56) = *((_DWORD *)v28 + 7);
    v31 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
    v32 = v8 + 1;
    v33 = *((_QWORD *)v11 + 15);
    *((_QWORD *)v11 + 6) = v28;
    *((_QWORD *)v11 + 7) = a3;
    *((_QWORD *)v11 + 11) = v33;
    *((_QWORD *)v11 + 12) = v31;
    *((_DWORD *)v11 + 16) = v8 + 1;
    v34 = *((_DWORD *)v28 + 7);
    if (v34 > v8 + 1)
      v32 = v34;
    *((_DWORD *)v11 + 20) = v32 | 1;
    *((_DWORD *)v11 + 17) = 0;
    *((_QWORD *)v11 + 9) = 10;
  }
  return v11;
}

uint64_t *JSC::CachedCall::appendArgument(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t *v12;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _DWORD *v17;

  v9 = result;
  v10 = *((unsigned int *)result + 28);
  v11 = result + 14;
  if ((_DWORD)v10 == *((_DWORD *)result + 29))
  {
    if (v10 >> 30
      || (result = (uint64_t *)JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(result + 14), 2 * (int)v10), (_DWORD)result))
    {
      *((_BYTE *)v9 + 104) = 1;
      return result;
    }
    LODWORD(v10) = *v11;
  }
  else
  {
    v12 = (uint64_t *)result[15];
    if (v12 == result + 17 || v12 == 0)
    {
      v12[v10] = a2;
      *v11 = v10 + 1;
      return result;
    }
  }
  *(_QWORD *)(v9[15] + 8 * v10) = a2;
  *((_DWORD *)v9 + 28) = v10 + 1;
  if (!v9[16] && (a2 & 0xFFFE000000000002) == 0 && a2)
  {
    v14 = (_QWORD *)(a2 - 16);
    if ((a2 & 8) == 0)
      v14 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v15 = (uint64_t *)(*v14 + 560);
    v9[16] = (uint64_t)v15;
    v17 = v11;
    return WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v15, (uint64_t *)&v17, a4, a5, a6, a7, a8, (uint64_t)&v16);
  }
  return result;
}

JSC::CodeBlock *JSC::CachedCall::relink(JSC::CachedCall *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::CodeBlock *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  JSC::CodeBlock *v18;

  v9 = *((_QWORD *)this + 3);
  result = JSC::Interpreter::prepareForCachedCall((JSC::Interpreter *)(v9 + 90560), this, *((JSC::JSFunction **)this + 7), a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_2;
  v17 = *(_DWORD *)(v9 + 80);
  if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
  {
    v18 = result;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v11, v12, v13, v14, v15, v16);
    result = v18;
  }
  if (!*(_QWORD *)(v9 + 16))
LABEL_2:
    *((_QWORD *)this + 6) = result;
  return result;
}

uint64_t WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>(uint64_t a1, int *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  __int128 *v30;
  _OWORD *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int *v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v11 = *(unsigned int *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 12);
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  v16 = *(_QWORD *)a1;
  if (v15 > v11)
  {
    if (v15 < 0x11)
    {
      result = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
      goto LABEL_21;
    }
    if (v15 >> 29)
      return 0;
    v17 = 8 * v15;
    v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v18)
      goto LABEL_14;
    v19 = (unint64_t)(v17 + 15) >> 4;
    if (v15 <= 0x34)
    {
      v20 = 23 * v19 + 7;
    }
    else if (v15 > 0x4E2
           || (v20 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v19 + 626),
               *(_DWORD *)(v18 + 8052) <= v20))
    {
LABEL_14:
      result = bmalloc_try_allocate_casual(v17, 1);
LABEL_19:
      if (!result)
        return result;
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = result;
LABEL_21:
      if (!(_DWORD)v12)
      {
LABEL_31:
        if (a1 + 16 != v16 && v16)
        {
          if (result == v16)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v16 = *(_QWORD *)a1;
        }
        else
        {
          v16 = result;
        }
        goto LABEL_34;
      }
      v25 = (v12 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v25 < 3 || result - v16 < 0x20)
      {
        v28 = (_QWORD *)result;
        v29 = (uint64_t *)v16;
      }
      else
      {
        v26 = v25 + 1;
        v27 = (v25 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v28 = (_QWORD *)(result + 8 * v27);
        v29 = (uint64_t *)(v16 + 8 * v27);
        v30 = (__int128 *)(v16 + 16);
        v31 = (_OWORD *)(result + 16);
        v32 = v27;
        do
        {
          v33 = *v30;
          *(v31 - 1) = *(v30 - 1);
          *v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 4;
        }
        while (v32);
        if (v26 == v27)
          goto LABEL_30;
      }
      do
      {
        v34 = *v29++;
        *v28++ = v34;
      }
      while (v29 != (uint64_t *)(v16 + 8 * v12));
LABEL_30:
      result = *(_QWORD *)a1;
      goto LABEL_31;
    }
    v22 = v18 + 8 * v20;
    v23 = v22 + 8064;
    *(_BYTE *)(v22 + 8064) = 1;
    v24 = *(unsigned int *)(v22 + 8080);
    if ((_DWORD)v24)
    {
      *(_DWORD *)(v23 + 16) = v24 - *(_DWORD *)(v23 + 20);
      result = *(_QWORD *)(v23 + 8) - v24;
    }
    else
    {
      v40 = *(_QWORD *)(v23 + 40);
      v41 = *(_QWORD *)(v23 + 24);
      if (!v40)
      {
        if (*(_BYTE *)(v23 + 5) == 6)
        {
          v43 = *(unsigned int *)(v23 + 32);
          v44 = *(_DWORD *)(v23 + 36);
          if (v43 < v44)
          {
            *(_QWORD *)(v23 + 8 * v43 + 56) = 0;
            v45 = (unint64_t *)(8 * v20 + 8 * v43 + v18 + 8128);
            v46 = v44 - 1 - v43;
            while (v46)
            {
              v41 += 1024;
              v48 = *v45++;
              v47 = v48;
              LODWORD(v43) = v43 + 1;
              --v46;
              if (v48)
              {
                v40 = __rbit64(v47);
                *(_DWORD *)(v23 + 32) = v43;
                *(_QWORD *)(v23 + 24) = v41;
                goto LABEL_39;
              }
            }
            *(_DWORD *)(v23 + 32) = v44;
          }
        }
        *(_BYTE *)v23 = 0;
        goto LABEL_14;
      }
LABEL_39:
      v42 = __clz(v40);
      *(_QWORD *)(v23 + 40) = v40 & ~(0x8000000000000000 >> v42);
      result = v41 + 16 * v42;
    }
    *(_BYTE *)v23 = 0;
    goto LABEL_19;
  }
LABEL_34:
  v35 = *(unsigned int *)(a1 + 12);
  v36 = v35 + 1;
  v37 = (int *)(v16 + 8 * v35);
  v38 = *a2;
  v39 = *a3;
  *v37 = *a2;
  v37[1] = v39;
  if (v38 == v39)
    *(_QWORD *)v37 = 0;
  *(_DWORD *)(a1 + 12) = v36;
  return 1;
}

uint64_t WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String&>(uint64_t a1, unint64_t a2)
{
  _DWORD **v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = (_DWORD **)WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  if (*v3)
    *v6 += 2;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x11)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 16;
    goto LABEL_13;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 0x11)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 16;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned int>(uint64_t a1, int *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int *v23;
  int v24;
  int v25;
  _QWORD *v27;

  v11 = *(unsigned int *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 12);
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  v16 = *(_QWORD *)a1;
  if (v15 > v11)
  {
    if (v15 < 0x11)
    {
      v17 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
      if (!(_DWORD)v12)
        goto LABEL_15;
    }
    else
    {
      if (v15 >> 29)
        return 0;
      WTF::tryFastMalloc((WTF *)(8 * v15), &v27);
      v17 = v27;
      if (!v27)
        return 0;
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v12)
        goto LABEL_15;
    }
    v18 = 8 * v12;
    v19 = (uint64_t *)v16;
    do
    {
      v20 = *v19++;
      *v17++ = v20;
      v18 -= 8;
    }
    while (v18);
    v17 = *(_QWORD **)a1;
LABEL_15:
    if (a1 + 16 != v16 && v16)
    {
      if (v17 == (_QWORD *)v16)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v16 = *(_QWORD *)a1;
    }
    else
    {
      v16 = (unint64_t)v17;
    }
  }
  v21 = *(unsigned int *)(a1 + 12);
  v22 = v21 + 1;
  v23 = (int *)(v16 + 8 * v21);
  v24 = *a2;
  v25 = *a3;
  *v23 = *a2;
  v23[1] = v25;
  if (v25 == v24)
    *(_QWORD *)v23 = 0;
  *(_DWORD *)(a1 + 12) = v22;
  return 1;
}

unint64_t JSC::JSRopeString::create(JSC::JSRopeString *this, unint64_t a2, JSC::JSString *a3, uint64_t a4, JSC::JSString *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int *v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;
  unint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v25;
  char *v26;
  char *v27;
  JSC::JSString *v28;
  JSC::JSString *v29;
  JSC::VM *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t SlowCase;
  JSC::JSRopeString *v35;

  v8 = *(_QWORD *)(a2 + 8);
  if ((v8 & 1) != 0)
    v9 = (int *)(a2 + 16);
  else
    v9 = (int *)(v8 + 4);
  v10 = *((_QWORD *)a3 + 1);
  if ((v10 & 1) != 0)
    v11 = (int *)((char *)a3 + 16);
  else
    v11 = (int *)(v10 + 4);
  v12 = *(_QWORD *)(a4 + 8);
  v13 = (int *)(a4 + 16);
  if ((v12 & 1) == 0)
    v13 = (int *)(v12 + 4);
  if ((v8 & 1) != 0)
    v8 = (v8 >> 2) & 1;
  else
    LODWORD(v8) = (*(unsigned __int8 *)(v8 + 16) >> 2) & 1;
  v14 = *v9;
  v15 = *v11;
  v16 = (unint64_t *)((char *)this + 39432);
  if ((v10 & 1) != 0)
    v17 = (v10 >> 2) & 1;
  else
    LODWORD(v17) = (*(unsigned __int8 *)(v10 + 16) >> 2) & 1;
  v18 = *v13;
  v19 = v8 & v17;
  if ((v12 & 1) != 0)
    v12 = (v12 >> 2) & 1;
  else
    LODWORD(v12) = (*(unsigned __int8 *)(v12 + 16) >> 2) & 1;
  v20 = v15 + v14 + v18;
  v21 = v19 & v12;
  v22 = *v16;
  if (*v16 < *((_QWORD *)this + 4930))
    goto LABEL_16;
  v22 = *((_QWORD *)this + 4931);
  if ((v22 & 1) == 0)
  {
    v25 = *(_QWORD *)(v22 + 8) ^ *((_QWORD *)this + 4932);
    *((_QWORD *)this + 4930) = v22 + HIDWORD(v25);
    *((_QWORD *)this + 4931) = v22 + (int)v25;
LABEL_16:
    *v16 = v22 + 32;
    goto LABEL_17;
  }
  v26 = (char *)this + 39408;
  v27 = (char *)this + 192;
  v35 = this;
  v28 = (JSC::JSString *)a4;
  v29 = a3;
  v30 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM(this, (JSC::VM *)a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v26, (uint64_t)v27, 32, 0, 0, v31, v32, v33);
  a2 = (unint64_t)v30;
  a3 = v29;
  a4 = (uint64_t)v28;
  v22 = SlowCase;
  this = v35;
LABEL_17:
  *(_DWORD *)v22 = v16[260] >> 4;
  *(_DWORD *)(v22 + 4) = 17302016;
  v23 = 5;
  if (!v21)
    v23 = 1;
  *(_QWORD *)(v22 + 8) = v23 | a2;
  *(_DWORD *)(v22 + 16) = v20;
  *(_DWORD *)(v22 + 20) = (_DWORD)a3;
  *(_WORD *)(v22 + 24) = WORD2(a3);
  *(_WORD *)(v22 + 26) = a4;
  *(_DWORD *)(v22 + 28) = (unint64_t)a4 >> 16;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return v22;
}

uint64_t WTF::tryMakeString<WTF::String,WTF::String,WTF::String>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, int **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  int v15;

  v5 = *(_QWORD *)result;
  v6 = *a2;
  v7 = *a3;
  if (*(_QWORD *)result)
    v8 = *(_DWORD *)(v5 + 4);
  else
    v8 = 0;
  if (v6)
    v9 = *(_DWORD *)(v6 + 4);
  else
    v9 = 0;
  if (v7)
    v10 = *(_DWORD *)(v7 + 4);
  else
    v10 = 0;
  if (((v10 | v9) & 0x80000000) == 0)
  {
    v11 = __OFADD__(v9, v10);
    v12 = v9 + v10;
    v13 = v11;
    if ((v8 & 0x80000000) == 0 && !v13)
    {
      result = (v8 + v12);
      if (!__OFADD__(v8, v12))
      {
        if (v5 && (*(_BYTE *)(v5 + 16) & 4) == 0)
        {
          v15 = 0;
        }
        else
        {
          if (v6)
          {
            v14 = *(_DWORD *)(v6 + 16);
            v15 = (v14 >> 2) & 1;
            if (!v7 || (v14 & 4) == 0)
              return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v15, v5, v6, v7, a4);
          }
          else if (!v7)
          {
            v15 = 1;
            return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v15, v5, v6, v7, a4);
          }
          v15 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
        }
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v15, v5, v6, v7, a4);
      }
    }
  }
  *a4 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int **a6@<X8>)
{
  int v9;
  int *v11;
  _BYTE *v12;
  char *v13;
  _DWORD *v14;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v14);
        v11 = v14;
        if (v14)
        {
          v12 = v14 + 5;
          *v14 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v12, a3, a4, a5);
        }
        goto LABEL_6;
      }
LABEL_12:
      v11 = 0;
      goto LABEL_6;
    }
LABEL_11:
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_6;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v14);
  v11 = v14;
  if (v14)
  {
    v13 = (char *)(v14 + 5);
    *v14 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v13, a3, a4, a5);
  }
LABEL_6:
  *a6 = v11;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v6;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;
  uint64_t v14;
  _BYTE *v15;
  size_t v16;
  unsigned __int128 *v17;
  unsigned __int128 *v18;
  unsigned __int128 v19;
  unsigned __int128 *v20;
  unsigned __int128 *v21;
  unsigned __int128 v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned __int128 v25;
  char v26;
  char v27;
  char v28;

  v6 = __dst;
  if (a2)
  {
    v8 = *(_BYTE **)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v9 == 1)
      {
        *__dst = *v8;
      }
      else if ((_DWORD)v9)
      {
        __dst = memcpy(__dst, v8, v9);
      }
    }
    else
    {
      if (v9 < 0x10)
      {
        v17 = (unsigned __int128 *)__dst;
      }
      else
      {
        v17 = (unsigned __int128 *)&__dst[v9 & 0xFFFFFFF0];
        v18 = (unsigned __int128 *)__dst;
        do
        {
          v19 = (unsigned __int128)vld2q_s8(v8);
          v8 += 32;
          *v18++ = v19;
        }
        while (v18 != v17);
      }
      while (v17 != (unsigned __int128 *)&__dst[v9])
      {
        v27 = *v8;
        v8 += 2;
        *(_BYTE *)v17 = v27;
        v17 = (unsigned __int128 *)((char *)v17 + 1);
      }
    }
    v10 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v6[v10];
  if (a3)
  {
    v12 = *(_BYTE **)(a3 + 8);
    v13 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v13 == 1)
      {
        *v11 = *v12;
      }
      else if ((_DWORD)v13)
      {
        __dst = memcpy(v11, v12, v13);
      }
    }
    else
    {
      if (v13 < 0x10)
      {
        v20 = (unsigned __int128 *)v11;
      }
      else
      {
        v20 = (unsigned __int128 *)&v11[v13 & 0xFFFFFFF0];
        v21 = (unsigned __int128 *)v11;
        do
        {
          v22 = (unsigned __int128)vld2q_s8(v12);
          v12 += 32;
          *v21++ = v22;
        }
        while (v21 != v20);
      }
      while (v20 != (unsigned __int128 *)&v11[v13])
      {
        v28 = *v12;
        v12 += 2;
        *(_BYTE *)v20 = v28;
        v20 = (unsigned __int128 *)((char *)v20 + 1);
      }
    }
    v14 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v14 = 0;
  }
  if (a4)
  {
    __dst = &v11[v14];
    v15 = *(_BYTE **)(a4 + 8);
    v16 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v16 == 1)
      {
        *__dst = *v15;
      }
      else if ((_DWORD)v16)
      {
        return memcpy(__dst, v15, v16);
      }
    }
    else
    {
      v23 = &__dst[v16];
      if (v16 >= 0x10)
      {
        v24 = &__dst[v16 & 0xFFFFFFF0];
        do
        {
          v25 = (unsigned __int128)vld2q_s8(v15);
          v15 += 32;
          *(_OWORD *)__dst = v25;
          __dst += 16;
        }
        while (__dst != v24);
        __dst = v24;
      }
      while (__dst != v23)
      {
        v26 = *v15;
        v15 += 2;
        *__dst++ = v26;
      }
    }
  }
  return __dst;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int8x16_t *v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  __int128 v31;
  char *v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  __int128 v40;
  char *v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;

  v6 = __dst;
  if (a2)
  {
    v8 = *(int8x16_t **)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v17 = &__dst[2 * v9];
      if (v9 >= 0x40)
      {
        v18 = &__dst[2 * (v9 & 0xFFFFFFC0)];
        v31 = 0uLL;
        v32 = __dst;
        do
        {
          v50.val[0] = *v8;
          v33 = v8[1];
          v53.val[0] = v8[2];
          v34 = v8[3];
          v8 += 4;
          v35 = v34;
          v53.val[1] = 0uLL;
          v56.val[0] = v33;
          v50.val[1] = 0uLL;
          v36 = v32;
          vst2q_s8(v36, v50);
          v36 += 32;
          v56.val[1] = 0uLL;
          vst2q_s8(v36, v56);
          v37 = v32 + 64;
          vst2q_s8(v37, v53);
          v38 = v32 + 96;
          vst2q_s8(v38, *(int8x16x2_t *)(&v31 - 1));
          v32 += 128;
        }
        while (v32 != v18);
      }
      else
      {
        v18 = __dst;
      }
      while (v18 != v17)
      {
        v39 = v8->u8[0];
        v8 = (int8x16_t *)((char *)v8 + 1);
        *(_WORD *)v18 = v39;
        v18 += 2;
      }
    }
    else if ((_DWORD)v9 == 1)
    {
      *(_WORD *)__dst = v8->i16[0];
    }
    else if ((_DWORD)v9)
    {
      __dst = (char *)memcpy(__dst, v8, 2 * v9);
    }
    v10 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v6[2 * v10];
  if (a3)
  {
    v12 = *(int8x16_t **)(a3 + 8);
    v13 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v19 = &v11[2 * v13];
      if (v13 >= 0x40)
      {
        v20 = &v11[2 * (v13 & 0xFFFFFFC0)];
        v40 = 0uLL;
        v41 = v11;
        do
        {
          v51.val[0] = *v12;
          v42 = v12[1];
          v54.val[0] = v12[2];
          v43 = v12[3];
          v12 += 4;
          v44 = v43;
          v54.val[1] = 0uLL;
          v57.val[0] = v42;
          v51.val[1] = 0uLL;
          v45 = v41;
          vst2q_s8(v45, v51);
          v45 += 32;
          v57.val[1] = 0uLL;
          vst2q_s8(v45, v57);
          v46 = v41 + 64;
          vst2q_s8(v46, v54);
          v47 = v41 + 96;
          vst2q_s8(v47, *(int8x16x2_t *)(&v40 - 1));
          v41 += 128;
        }
        while (v41 != v20);
      }
      else
      {
        v20 = v11;
      }
      while (v20 != v19)
      {
        v48 = v12->u8[0];
        v12 = (int8x16_t *)((char *)v12 + 1);
        *(_WORD *)v20 = v48;
        v20 += 2;
      }
    }
    else if ((_DWORD)v13 == 1)
    {
      *(_WORD *)v11 = v12->i16[0];
    }
    else if ((_DWORD)v13)
    {
      __dst = (char *)memcpy(v11, v12, 2 * v13);
    }
    v14 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v14 = 0;
  }
  if (a4)
  {
    __dst = &v11[2 * v14];
    v15 = *(int8x16_t **)(a4 + 8);
    v16 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v21 = &__dst[2 * v16];
      if (v16 >= 0x40)
      {
        v22 = &__dst[2 * (v16 & 0xFFFFFFC0)];
        v23 = 0uLL;
        do
        {
          v49.val[0] = *v15;
          v24 = v15[1];
          v52.val[0] = v15[2];
          v25 = v15[3];
          v15 += 4;
          v26 = v25;
          v52.val[1] = 0uLL;
          v55.val[0] = v24;
          v49.val[1] = 0uLL;
          v27 = __dst;
          vst2q_s8(v27, v49);
          v27 += 32;
          v55.val[1] = 0uLL;
          vst2q_s8(v27, v55);
          v28 = __dst + 64;
          vst2q_s8(v28, v52);
          v29 = __dst + 96;
          vst2q_s8(v29, *(int8x16x2_t *)(&v23 - 1));
          __dst += 128;
        }
        while (__dst != v22);
        __dst = v22;
      }
      while (__dst != v21)
      {
        v30 = v15->u8[0];
        v15 = (int8x16_t *)((char *)v15 + 1);
        *(_WORD *)__dst = v30;
        __dst += 2;
      }
    }
    else if ((_DWORD)v16 == 1)
    {
      *(_WORD *)__dst = v15->i16[0];
    }
    else if ((_DWORD)v16)
    {
      return (char *)memcpy(__dst, v15, 2 * v16);
    }
  }
  return __dst;
}

JSC::JSGlobalObject *JSC::jsSubstring(JSC *this, JSC::JSGlobalObject *a2, JSC::JSString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  JSC::VM *v13;
  uint64_t v14;
  unint64_t *v15;
  WTF::StringImpl *v16;
  unsigned __int8 v17;
  unint64_t v18;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  int v40;
  JSC::VM *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t SlowCase;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  int v69;
  _BYTE v70[2];
  uint64_t v71;

  v9 = *((_QWORD *)this + 7);
  if (!(_DWORD)a4)
    return *(JSC::JSGlobalObject **)(v9 + 41968);
  v10 = a4;
  v11 = a3;
  v13 = this;
  v14 = *((_QWORD *)a2 + 1);
  if (!(_DWORD)a3)
  {
    v24 = (_DWORD *)((char *)a2 + 16);
    if ((v14 & 1) == 0)
      v24 = (_DWORD *)(v14 + 4);
    if (*v24 == (_DWORD)a4)
      return a2;
  }
  if ((v14 & 2) != 0)
  {
    v25 = *(_DWORD *)((char *)a2 + 26);
    a2 = (JSC::JSGlobalObject *)(*(_QWORD *)((_BYTE *)a2 + 20) & 0xFFFFFFFFFLL);
    v11 = v25 + (_DWORD)a3;
  }
  else if ((v14 & 1) != 0)
  {
    JSC::JSRopeString::resolveRope((unint64_t)a2, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*(_DWORD *)(v9 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v13, (uint64_t)a3, a4, a5, a6, a7, a8))
        return 0;
    }
  }
  if (!v11)
  {
    v23 = *((_QWORD *)a2 + 1);
    if (v23)
      LODWORD(v23) = *(_DWORD *)(v23 + 4);
    if ((_DWORD)v23 == v10)
      return a2;
  }
  v15 = (unint64_t *)(v9 + 39696);
  if (v10 == 1)
  {
    v16 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    if (!v16 || *((_DWORD *)v16 + 1) <= v11)
    {
      v17 = 0;
      return *(JSC::JSGlobalObject **)(v9 + 8 * v17 + 42216);
    }
    v64 = WTF::StringImpl::at(v16, v11);
    if (v64 <= 0xFF)
    {
      v17 = v64;
      return *(JSC::JSGlobalObject **)(v9 + 8 * v17 + 42216);
    }
LABEL_13:
    v20 = (unint64_t *)(v9 + 39432);
    v21 = *((_QWORD *)a2 + 1);
    if (v21)
    {
      v22 = 3;
      if ((*(_BYTE *)(v21 + 16) & 4) != 0)
        v22 = 7;
    }
    else
    {
      v22 = 7;
    }
    v18 = *v20;
    if (*v20 >= *(_QWORD *)(v9 + 39440))
    {
      v18 = *(_QWORD *)(v9 + 39448);
      if ((v18 & 1) != 0)
      {
        v67 = v22;
        JSC::sanitizeStackForVM((JSC *)v9, v13, (uint64_t)a3, a4, a5, a6, a7, a8);
        v15 = (unint64_t *)(v9 + 39696);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v9 + 39408, v9 + 192, 32, 0, 0, v55, v56, v57);
        v22 = v67;
        v18 = SlowCase;
LABEL_18:
        *(_DWORD *)v18 = v15[227] >> 4;
        *(_DWORD *)(v18 + 4) = 17302016;
        *(_QWORD *)(v18 + 8) = v22;
        *(_DWORD *)(v18 + 16) = v10;
        *(_DWORD *)(v18 + 20) = (_DWORD)a2;
        *(_WORD *)(v18 + 24) = WORD2(a2);
        *(_WORD *)(v18 + 26) = v11;
        *(_DWORD *)(v18 + 28) = HIWORD(v11);
        if (*(_BYTE *)(v9 + 755))
          __dmb(0xAu);
        return (JSC::JSGlobalObject *)v18;
      }
      v52 = *(_QWORD *)(v18 + 8) ^ *(_QWORD *)(v9 + 39456);
      *(_QWORD *)(v9 + 39440) = v18 + HIDWORD(v52);
      *(_QWORD *)(v9 + 39448) = v18 + (int)v52;
    }
    *v20 = v18 + 32;
    goto LABEL_18;
  }
  if (v10 != 2)
    goto LABEL_13;
  v26 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (!v26)
  {
    v28 = 0;
    goto LABEL_34;
  }
  v27 = *((_DWORD *)v26 + 1);
  if (v27 > v11)
  {
    v28 = WTF::StringImpl::at(v26, v11);
    v26 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    if (!v26)
      goto LABEL_34;
    v27 = *((_DWORD *)v26 + 1);
  }
  else
  {
    v28 = 0;
  }
  v13 = (JSC::VM *)(v11 + 1);
  if (v27 > v13)
  {
    v65 = v28;
    LODWORD(v26) = WTF::StringImpl::at(v26, v13);
    v28 = v65;
  }
  else
  {
    LODWORD(v26) = 0;
  }
LABEL_34:
  if ((v26 | v28) > 0x7F)
    goto LABEL_13;
  v70[0] = v28;
  v70[1] = (_BYTE)v26;
  v68[0] = v70;
  v68[1] = 2;
  v29 = ((_DWORD)v26 << 11) ^ ((v28 - 1640531527) << 16) ^ (v28 - 1640531527);
  v30 = (v29 + (v29 >> 11)) ^ (8 * (v29 + (v29 >> 11)));
  v31 = (v30 + (v30 >> 5)) ^ (4 * (v30 + (v30 >> 5)));
  v32 = ((v31 + (v31 >> 15)) ^ ((v31 + (v31 >> 15)) << 10)) & 0xFFFFFF;
  if (v32)
    v33 = v32;
  else
    v33 = 0x800000;
  v69 = v33;
  v34 = v9 + 81168;
  v35 = v33 & 0x1FF;
  v36 = *(_QWORD *)(v9 + 81168 + 8 * v35);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 8);
    v38 = (v37 & 1) != 0 ? 0 : (WTF::StringImpl *)v37;
    v39 = *((_DWORD *)v38 + 4);
    v40 = v39 < 0x100 ? WTF::StringImpl::hashSlowCase(v38) : v39 >> 8;
    if (v40 == v33 && WTF::equalInternal<unsigned char>((uint64_t)v38, (unint64_t)v70, 2))
      return *(JSC::JSGlobalObject **)(v34 + 8 * v35);
  }
  WTF::AtomStringImpl::add(v68, a4, a5, a6, a7, a8, &v71);
  v48 = v71;
  v49 = *(_DWORD *)(v71 + 16);
  v50 = v71;
  if ((v49 & 3) == 2)
  {
    v50 = v71;
    do
    {
      v50 = *(_QWORD *)(v50 + 24);
      v49 = *(_DWORD *)(v50 + 16);
    }
    while ((v49 & 3) == 2);
  }
  if ((v49 & 8) != 0)
  {
    v51 = 0;
  }
  else
  {
    *(_DWORD *)(v50 + 16) = v49 | 8;
    v51 = (unint64_t)*(unsigned int *)(v50 + 4) << ((v49 & 4) == 0);
  }
  v18 = *v15;
  if (*v15 >= *(_QWORD *)(v9 + 39704))
  {
    v66 = v48;
    v53 = *(_QWORD *)(v9 + 39712);
    if ((v53 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v9, v41, v42, v43, v44, v45, v46, v47);
      v18 = JSC::LocalAllocator::allocateSlowCase(v9 + 39672, v9 + 192, 16, 0, 0, v61, v62, v63);
      v15 = (unint64_t *)(v9 + 39696);
    }
    else
    {
      v18 = *(_QWORD *)(v9 + 39712);
      v15 = (unint64_t *)(v9 + 39696);
      v54 = *(_QWORD *)(v53 + 8) ^ *(_QWORD *)(v9 + 39720);
      *(_QWORD *)(v9 + 39704) = v18 + HIDWORD(v54);
      *(_QWORD *)(v9 + 39712) = v18 + (int)v54;
      *(_QWORD *)(v9 + 39696) = v18 + 16;
    }
    v48 = v66;
  }
  else
  {
    *v15 = v18 + 16;
  }
  *(_DWORD *)v18 = v15[227] >> 4;
  *(_DWORD *)(v18 + 4) = 17302016;
  *(_QWORD *)(v18 + 8) = v48;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  if (v51 >= 0x101)
  {
    v59 = v9 + 192;
    v60 = v18;
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v59, 0, v18, v51, v44, v45, v46, v47);
    v18 = v60;
  }
  *(_QWORD *)(v34 + 8 * v35) = v18;
  return (JSC::JSGlobalObject *)v18;
}

void JSC::JSRopeString::resolveToBuffer<unsigned char>(unint64_t a1, char *a2, size_t a3, uint64_t __dst, uint64_t a5, WTF *a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  size_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unsigned __int128 v34;
  char *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unsigned __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unsigned __int128 v71;
  char *v72;
  unsigned __int128 *v73;
  unsigned __int128 v74;
  char v75;
  char v76;
  unsigned __int128 *v77;
  unsigned __int128 *v78;
  unsigned __int128 v79;
  char *v80;
  char *v81;
  unsigned __int128 v82;
  char v83;
  char v84;
  char v85;
  unsigned __int128 *v86;
  unsigned __int128 *v87;
  unsigned __int128 v88;
  char *v89;
  char *v90;
  unsigned __int128 v91;
  char v92;
  char v93;
  unsigned __int128 *v94;
  unsigned __int128 *v95;
  unsigned __int128 v96;
  char v97;
  char *v98;
  char *v99;
  unsigned __int128 v100;
  char v101;
  char v102;
  char *v103;
  char *v104;
  unsigned __int128 v105;
  char v106;
  unsigned int v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int v115;
  unsigned int v116;
  WTF *v117;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  unsigned __int128 *v127;
  unsigned __int128 v128;
  char v129;
  char *v130;
  unsigned __int128 *v131;
  unsigned __int128 v132;
  char *v133;
  char v134;
  unsigned int v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unint64_t v140;
  unint64_t v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  unsigned __int128 *v152;
  unsigned __int128 v153;
  char v154;
  char *v155;
  unsigned __int128 *v156;
  unsigned __int128 v157;
  char *v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  WTF *v162;
  int v163;
  unsigned int v164;
  unint64_t v165;
  uint64_t v166;
  size_t v167;

  v8 = a6;
  v9 = (char *)__dst;
  v10 = a3;
  v11 = (uint64_t)a2;
  if (&v160 < (uint64_t *)a6)
  {
LABEL_82:
    a2 = (char *)v11;
LABEL_83:
    JSC::JSRopeString::resolveToBufferSlow<unsigned char>(a1, a2, v10, (uint64_t)v9, a5, (uint64_t)v8, a7, a8);
    return;
  }
  while (!v10)
  {
    v13 = *(_QWORD *)(a1 + 8);
    if (!v11)
    {
      if ((v13 & 1) == 0)
      {
        if (!v13)
          return;
        a2 = *(char **)(v13 + 8);
        v20 = *(unsigned int *)(v13 + 4);
        if ((*(_BYTE *)(v13 + 16) & 4) == 0)
        {
          v103 = &v9[v20];
          if (v20 >= 0x10)
          {
            v104 = &v9[v20 & 0xFFFFFFF0];
            do
            {
              v105 = (unsigned __int128)vld2q_s8(a2);
              a2 += 32;
              *(_OWORD *)v9 = v105;
              v9 += 16;
            }
            while (v9 != v104);
            v9 = v104;
          }
          while (v9 != v103)
          {
            v106 = *a2;
            a2 += 2;
            *v9++ = v106;
          }
          return;
        }
        if ((_DWORD)v20 == 1)
          goto LABEL_70;
        if (!(_DWORD)v20)
          return;
        goto LABEL_99;
      }
      if ((v13 & 2) != 0)
      {
        v60 = *(_QWORD *)((*(_QWORD *)(a1 + 20) & 0xFFFFFFFFFLL) + 8);
        v61 = *(unsigned int *)(v60 + 4);
        v62 = *(_QWORD *)(a1 + 24);
        v63 = v62 >> 16;
        if (v61 <= (v62 >> 16))
          return;
        v64 = *(unsigned int *)(v60 + 16);
        a2 = *(char **)(v60 + 8);
        v65 = *(_DWORD *)(a1 + 16);
        if ((int)v61 - (int)v63 > v65 || (v65 = v61 - v63, (_DWORD)v63))
        {
          v66 = (v64 >> 2) & 1;
          v67 = (v62 >> 16);
          v46 = v65;
          v68 = v61 - v63;
          if ((_DWORD)v66)
          {
            if (v68 < v65)
              goto LABEL_280;
            a2 += v67;
            v46 = v65 | 0x100000000;
          }
          else
          {
            if (v68 < v65)
              goto LABEL_280;
            a2 += 2 * v67;
          }
        }
        else
        {
          v46 = v61 & 0xFFFFFFFEFFFFFFFFLL | (((v64 >> 2) & 1) << 32);
        }
        if ((v46 & 0x100000000) == 0)
        {
          v69 = &v9[v46];
          if (v46 >= 0x10)
          {
            v70 = &v9[v46 & 0xFFFFFFF0];
            do
            {
              v71 = (unsigned __int128)vld2q_s8(a2);
              a2 += 32;
              *(_OWORD *)v9 = v71;
              v9 += 16;
            }
            while (v9 != v70);
            v9 = v70;
          }
          while (v9 != v69)
          {
            v102 = *a2;
            a2 += 2;
            *v9++ = v102;
          }
          return;
        }
        goto LABEL_69;
      }
      goto LABEL_11;
    }
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(v11 + 8);
      if ((v14 & 1) != 0)
      {
        v8 = (WTF *)&v165;
        v162 = (WTF *)&v165;
        v163 = 32;
        v9 += a5;
        v165 = a1;
        v166 = v11;
        v24 = 2;
        goto LABEL_249;
      }
      if (v14)
      {
        a2 = *(char **)(v14 + 8);
        a3 = *(unsigned int *)(v14 + 4);
        v11 = a1 + 16;
        v15 = *(unsigned int *)(a1 + 16);
        v16 = &v9[v15];
        if ((*(_BYTE *)(v14 + 16) & 4) != 0)
        {
          if ((_DWORD)a3 == 1)
          {
            *v16 = *a2;
          }
          else if ((_DWORD)a3)
          {
            memcpy(v16, a2, a3);
          }
        }
        else
        {
          if (a3 < 0x10)
          {
            v72 = &v9[v15];
          }
          else
          {
            v72 = &v16[a3 & 0xFFFFFFF0];
            v73 = (unsigned __int128 *)&v9[v15];
            do
            {
              v74 = (unsigned __int128)vld2q_s8(a2);
              a2 += 32;
              *v73++ = v74;
            }
            while (v73 != (unsigned __int128 *)v72);
          }
          while (v72 != &v16[a3])
          {
            v75 = *a2;
            a2 += 2;
            *v72++ = v75;
          }
        }
      }
      else
      {
        v11 = a1 + 16;
      }
      v13 = *(_QWORD *)(a1 + 8);
      if ((v13 & 2) != 0)
      {
        v48 = *(_QWORD *)((*(_QWORD *)(a1 + 20) & 0xFFFFFFFFFLL) + 8);
        v49 = *(unsigned int *)(v48 + 4);
        v50 = *(_QWORD *)(a1 + 24);
        v51 = v50 >> 16;
        if (v49 <= (v50 >> 16))
          return;
        v52 = *(unsigned int *)(v48 + 16);
        a2 = *(char **)(v48 + 8);
        v53 = *(_DWORD *)v11;
        if ((v49 - v51) > *(_DWORD *)v11 || (v53 = v49 - v51, (_DWORD)v51))
        {
          v54 = (v52 >> 2) & 1;
          v55 = (v50 >> 16);
          v46 = v53;
          v56 = v49 - v51;
          if ((_DWORD)v54)
          {
            if (v56 >= v53)
            {
              a2 += v55;
              v46 = v53 | 0x100000000;
              goto LABEL_77;
            }
LABEL_280:
            __break(1u);
LABEL_281:
            if (a3 < 0x10)
            {
              v151 = (char *)v11;
            }
            else
            {
              v151 = (char *)(v11 + (a3 & 0xFFFFFFF0));
              v152 = (unsigned __int128 *)v11;
              do
              {
                v153 = (unsigned __int128)vld2q_s8(a2);
                a2 += 32;
                *v152++ = v153;
              }
              while (v152 != (unsigned __int128 *)v151);
            }
            while (v151 != v9)
            {
              v154 = *a2;
              a2 += 2;
              *v151++ = v154;
            }
            while (1)
            {
              v9 = (char *)v11;
LABEL_248:
              v24 = v164;
              if (!v164)
                break;
LABEL_249:
              while (1)
              {
                v11 = *((_QWORD *)v162 + v24 - 1);
                v135 = v24 - 1;
                v164 = v24 - 1;
                v136 = *(_QWORD *)(v11 + 8);
                if ((v136 & 1) == 0)
                  break;
                if ((v136 & 2) != 0)
                {
                  v144 = *(_QWORD *)((*(_QWORD *)(v11 + 20) & 0xFFFFFFFFFLL) + 8);
                  v145 = *(unsigned int *)(v144 + 4);
                  v146 = *(_QWORD *)(v11 + 24);
                  v147 = v146 >> 16;
                  v148 = *(unsigned int *)(v11 + 16);
                  v9 -= v148;
                  if (v145 <= (v146 >> 16))
                    goto LABEL_248;
                  a2 = *(char **)(v144 + 8);
                  if ((int)v145 - (int)v147 > v148)
                    goto LABEL_267;
                  if ((_DWORD)v147)
                  {
                    v148 = (v145 - v147);
LABEL_267:
                    v149 = (v146 >> 16);
                    v150 = v145 - v147;
                    if (((*(_DWORD *)(v144 + 16) >> 2) & 1) != 0)
                    {
                      if (v150 < v148)
                        goto LABEL_280;
                      a2 += v149;
                      v148 |= 0x100000000uLL;
                    }
                    else
                    {
                      if (v150 < v148)
                        goto LABEL_280;
                      a2 += 2 * v149;
                    }
                  }
                  else
                  {
                    v148 = v145 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v144 + 16) >> 2) & 1) << 32);
                  }
                  if ((v148 & 0x100000000) != 0)
                  {
                    if ((_DWORD)v148 == 1)
                    {
                      *v9 = *a2;
                    }
                    else if ((_DWORD)v148)
                    {
                      memcpy(v9, a2, v148);
                    }
                  }
                  else
                  {
                    if (v148 < 0x10)
                    {
                      v155 = v9;
                    }
                    else
                    {
                      v155 = &v9[v148 & 0xFFFFFFF0];
                      v156 = (unsigned __int128 *)v9;
                      do
                      {
                        v157 = (unsigned __int128)vld2q_s8(a2);
                        a2 += 32;
                        *v156++ = v157;
                      }
                      while (v156 != (unsigned __int128 *)v155);
                    }
                    v158 = &v9[v148];
                    while (v155 != v158)
                    {
                      v159 = *a2;
                      a2 += 2;
                      *v155++ = v159;
                    }
                  }
                  goto LABEL_248;
                }
                if (v136 < 8)
                  goto LABEL_248;
                v137 = v136 & 0xFFFFFFFFFFFFFFF8;
                v161 = v137;
                if (v135 == v163)
                {
                  WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v162, (unint64_t)&v161);
                }
                else
                {
                  *((_QWORD *)v162 + v135) = v137;
                  v164 = v24;
                }
                v138 = *(_QWORD *)(v11 + 20) & 0xFFFFFFFFFLL;
                if (!v138)
                  goto LABEL_248;
                v161 = *(_QWORD *)(v11 + 20) & 0xFFFFFFFFFLL;
                v139 = v164;
                if (v164 == v163)
                {
                  WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v162, (unint64_t)&v161);
                }
                else
                {
                  *((_QWORD *)v162 + v164) = v138;
                  v164 = v139 + 1;
                }
                v140 = *(_QWORD *)(v11 + 24);
                if (v140 < 0x10000)
                  goto LABEL_248;
                v141 = v140 >> 16;
                v161 = v141;
                v142 = v164;
                if (v164 == v163)
                {
                  WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v162, (unint64_t)&v161);
                  goto LABEL_248;
                }
                v143 = v164 + 1;
                *((_QWORD *)v162 + v164) = v141;
                v164 = v143;
                v24 = v143;
                if (v142 == -1)
                  goto LABEL_206;
              }
              a3 = *(unsigned int *)(v136 + 4);
              a2 = *(char **)(v136 + 8);
              v11 = (uint64_t)&v9[-a3];
              if ((*(_BYTE *)(v136 + 16) & 4) == 0)
                goto LABEL_281;
              if ((_DWORD)a3 == 1)
              {
                *(_BYTE *)v11 = *a2;
              }
              else if ((_DWORD)a3)
              {
                memcpy(&v9[-a3], a2, a3);
              }
            }
LABEL_206:
            v117 = v162;
            if (v8 != v162 && v162 != 0)
            {
              v162 = 0;
              v163 = 0;
              WTF::fastFree((unint64_t)v117, a2, a3, __dst, a5, (uint64_t)a6, a7, a8);
            }
            return;
          }
          if (v56 < v53)
            goto LABEL_280;
          a2 += 2 * v55;
        }
        else
        {
          v46 = v49 & 0xFFFFFFFEFFFFFFFFLL | (((v52 >> 2) & 1) << 32);
        }
LABEL_77:
        if ((v46 & 0x100000000) == 0)
        {
          v57 = &v9[v46];
          if (v46 >= 0x10)
          {
            v58 = &v9[v46 & 0xFFFFFFF0];
            do
            {
              v59 = (unsigned __int128)vld2q_s8(a2);
              a2 += 32;
              *(_OWORD *)v9 = v59;
              v9 += 16;
            }
            while (v9 != v58);
            v9 = v58;
          }
          while (v9 != v57)
          {
            v85 = *a2;
            a2 += 2;
            *v9++ = v85;
          }
          return;
        }
LABEL_69:
        if ((_DWORD)v46 == 1)
        {
LABEL_70:
          *v9 = *a2;
          return;
        }
        if (!(_DWORD)v46)
          return;
        v20 = v46;
LABEL_99:
        v21 = v9;
LABEL_26:
        memcpy(v21, a2, v20);
        return;
      }
LABEL_11:
      a5 = *(unsigned int *)(a1 + 16);
      v10 = *(_QWORD *)(a1 + 24) >> 16;
      v11 = *(_QWORD *)(a1 + 20) & 0xFFFFFFFFFLL;
      a1 = v13 & 0xFFFFFFFFFFFFFFF8;
      if (&v160 < (uint64_t *)v8)
        goto LABEL_82;
    }
    else
    {
      v17 = *(_QWORD *)(v11 + 8);
      if ((v17 & 1) == 0)
      {
        if (v13)
        {
          v18 = *(char **)(v13 + 8);
          v19 = *(unsigned int *)(v13 + 4);
          if ((*(_BYTE *)(v13 + 16) & 4) != 0)
          {
            if ((_DWORD)v19 == 1)
            {
              *v9 = *v18;
              LODWORD(v19) = 1;
            }
            else if ((_DWORD)v19)
            {
              memcpy(v9, v18, v19);
            }
          }
          else
          {
            if (v19 < 0x10)
            {
              v77 = (unsigned __int128 *)v9;
            }
            else
            {
              v77 = (unsigned __int128 *)&v9[v19 & 0xFFFFFFF0];
              v78 = (unsigned __int128 *)v9;
              do
              {
                v79 = (unsigned __int128)vld2q_s8(v18);
                v18 += 32;
                *v78++ = v79;
              }
              while (v78 != v77);
            }
            while (v77 != (unsigned __int128 *)&v9[v19])
            {
              v84 = *v18;
              v18 += 2;
              *(_BYTE *)v77 = v84;
              v77 = (unsigned __int128 *)((char *)v77 + 1);
            }
          }
          v17 = *(_QWORD *)(v11 + 8);
        }
        else
        {
          LODWORD(v19) = 0;
        }
        if (!v17)
          return;
        a2 = *(char **)(v17 + 8);
        v20 = *(unsigned int *)(v17 + 4);
        v21 = &v9[v19];
        if ((*(_BYTE *)(v17 + 16) & 4) == 0)
        {
          v80 = &v21[v20];
          if (v20 >= 0x10)
          {
            v81 = &v21[v20 & 0xFFFFFFF0];
            do
            {
              v82 = (unsigned __int128)vld2q_s8(a2);
              a2 += 32;
              *(_OWORD *)v21 = v82;
              v21 += 16;
            }
            while (v21 != v81);
            v21 = v81;
          }
          while (v21 != v80)
          {
            v83 = *a2;
            a2 += 2;
            *v21++ = v83;
          }
          return;
        }
        goto LABEL_23;
      }
      if (v13)
      {
        v35 = *(char **)(v13 + 8);
        v36 = *(unsigned int *)(v13 + 4);
        if ((*(_BYTE *)(v13 + 16) & 4) != 0)
        {
          if (v36 == 1)
          {
            *v9 = *v35;
          }
          else if (*(_DWORD *)(v13 + 4))
          {
            memcpy(v9, v35, v36);
          }
        }
        else
        {
          if (v36 < 0x10)
          {
            v94 = (unsigned __int128 *)v9;
          }
          else
          {
            v94 = (unsigned __int128 *)&v9[v36 & 0xFFFFFFF0];
            v95 = (unsigned __int128 *)v9;
            do
            {
              v96 = (unsigned __int128)vld2q_s8(v35);
              v35 += 32;
              *v95++ = v96;
            }
            while (v95 != v94);
          }
          while (v94 != (unsigned __int128 *)&v9[v36])
          {
            v97 = *v35;
            v35 += 2;
            *(_BYTE *)v94 = v97;
            v94 = (unsigned __int128 *)((char *)v94 + 1);
          }
        }
      }
      else
      {
        v36 = 0;
      }
      v9 += v36;
      v37 = *(_QWORD *)(v11 + 8);
      if ((v37 & 2) != 0)
      {
        v38 = *(_QWORD *)((*(_QWORD *)(v11 + 20) & 0xFFFFFFFFFLL) + 8);
        v39 = *(unsigned int *)(v38 + 4);
        v40 = *(_QWORD *)(v11 + 24);
        v41 = v40 >> 16;
        if (v39 <= (v40 >> 16))
          return;
        v42 = *(unsigned int *)(v38 + 16);
        a2 = *(char **)(v38 + 8);
        v43 = *(_DWORD *)(v11 + 16);
        if ((int)v39 - (int)v41 > v43 || (v43 = v39 - v41, (_DWORD)v41))
        {
          v44 = (v42 >> 2) & 1;
          v45 = (v40 >> 16);
          v46 = v43;
          v47 = v39 - v41;
          if ((_DWORD)v44)
          {
            if (v47 < v43)
              goto LABEL_280;
            a2 += v45;
            v46 = v43 | 0x100000000;
          }
          else
          {
            if (v47 < v43)
              goto LABEL_280;
            a2 += 2 * v45;
          }
        }
        else
        {
          v46 = v39 & 0xFFFFFFFEFFFFFFFFLL | (((v42 >> 2) & 1) << 32);
        }
        if ((v46 & 0x100000000) == 0)
        {
          v98 = &v9[v46];
          if (v46 >= 0x10)
          {
            v99 = &v9[v46 & 0xFFFFFFF0];
            do
            {
              v100 = (unsigned __int128)vld2q_s8(a2);
              a2 += 32;
              *(_OWORD *)v9 = v100;
              v9 += 16;
            }
            while (v9 != v99);
            v9 = v99;
          }
          while (v9 != v98)
          {
            v101 = *a2;
            a2 += 2;
            *v9++ = v101;
          }
          return;
        }
        goto LABEL_69;
      }
      a1 = v37 & 0xFFFFFFFFFFFFFFF8;
      a2 = (char *)(*(_QWORD *)(v11 + 20) & 0xFFFFFFFFFLL);
      v10 = *(_QWORD *)(v11 + 24) >> 16;
      a5 = *(unsigned int *)(v11 + 16);
      v11 = (uint64_t)a2;
      if (&v160 < (uint64_t *)v8)
        goto LABEL_83;
    }
  }
  v22 = *(_QWORD *)(a1 + 8);
  if ((v22 & 1) != 0)
  {
    v9 += a5;
    v8 = (WTF *)&v165;
    v162 = (WTF *)&v165;
    v163 = 32;
    v165 = a1;
    if (v11)
    {
LABEL_31:
      v166 = v11;
      v167 = v10;
      v23 = 3;
      goto LABEL_191;
    }
    v23 = 1;
LABEL_191:
    while (1)
    {
      v11 = *((_QWORD *)v162 + v23 - 1);
      v107 = v23 - 1;
      v164 = v23 - 1;
      v108 = *(_QWORD *)(v11 + 8);
      if ((v108 & 1) == 0)
        break;
      if ((v108 & 2) != 0)
      {
        v119 = *(_QWORD *)((*(_QWORD *)(v11 + 20) & 0xFFFFFFFFFLL) + 8);
        v120 = *(unsigned int *)(v119 + 4);
        v121 = *(_QWORD *)(v11 + 24);
        v122 = v121 >> 16;
        v123 = *(unsigned int *)(v11 + 16);
        v9 -= v123;
        if (v120 <= (v121 >> 16))
          goto LABEL_190;
        a2 = *(char **)(v119 + 8);
        if ((int)v120 - (int)v122 <= v123)
        {
          if ((_DWORD)v122)
          {
            v123 = (v120 - v122);
            goto LABEL_214;
          }
          v123 = v120 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v119 + 16) >> 2) & 1) << 32);
        }
        else
        {
LABEL_214:
          v124 = (v121 >> 16);
          v125 = v120 - v122;
          if (((*(_DWORD *)(v119 + 16) >> 2) & 1) != 0)
          {
            if (v125 < v123)
              goto LABEL_280;
            a2 += v124;
            v123 |= 0x100000000uLL;
          }
          else
          {
            if (v125 < v123)
              goto LABEL_280;
            a2 += 2 * v124;
          }
        }
        if ((v123 & 0x100000000) != 0)
        {
          if ((_DWORD)v123 == 1)
          {
            *v9 = *a2;
          }
          else if ((_DWORD)v123)
          {
            memcpy(v9, a2, v123);
          }
        }
        else
        {
          if (v123 < 0x10)
          {
            v130 = v9;
          }
          else
          {
            v130 = &v9[v123 & 0xFFFFFFF0];
            v131 = (unsigned __int128 *)v9;
            do
            {
              v132 = (unsigned __int128)vld2q_s8(a2);
              a2 += 32;
              *v131++ = v132;
            }
            while (v131 != (unsigned __int128 *)v130);
          }
          v133 = &v9[v123];
          while (v130 != v133)
          {
            v134 = *a2;
            a2 += 2;
            *v130++ = v134;
          }
        }
LABEL_190:
        v23 = v164;
        if (!v164)
          goto LABEL_206;
        continue;
      }
      if (v108 < 8)
        goto LABEL_190;
      v110 = v108 & 0xFFFFFFFFFFFFFFF8;
      v161 = v110;
      if (v107 == v163)
      {
        WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v162, (unint64_t)&v161);
      }
      else
      {
        *((_QWORD *)v162 + v107) = v110;
        v164 = v23;
      }
      v111 = *(_QWORD *)(v11 + 20) & 0xFFFFFFFFFLL;
      if (!v111)
        goto LABEL_190;
      v161 = *(_QWORD *)(v11 + 20) & 0xFFFFFFFFFLL;
      v112 = v164;
      if (v164 == v163)
      {
        WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v162, (unint64_t)&v161);
      }
      else
      {
        *((_QWORD *)v162 + v164) = v111;
        v164 = v112 + 1;
      }
      v113 = *(_QWORD *)(v11 + 24);
      if (v113 < 0x10000)
        goto LABEL_190;
      v114 = v113 >> 16;
      v161 = v114;
      v115 = v164;
      if (v164 == v163)
      {
        WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v162, (unint64_t)&v161);
        goto LABEL_190;
      }
      v116 = v164 + 1;
      *((_QWORD *)v162 + v164) = v114;
      v164 = v116;
      v23 = v116;
      if (v115 == -1)
        goto LABEL_206;
    }
    a3 = *(unsigned int *)(v108 + 4);
    a2 = *(char **)(v108 + 8);
    v109 = &v9[-a3];
    if ((*(_BYTE *)(v108 + 16) & 4) != 0)
    {
      if ((_DWORD)a3 == 1)
      {
        *v109 = *a2;
      }
      else if ((_DWORD)a3)
      {
        memcpy(&v9[-a3], a2, a3);
      }
    }
    else
    {
      if (a3 < 0x10)
      {
        v126 = &v9[-a3];
      }
      else
      {
        v126 = &v109[a3 & 0xFFFFFFF0];
        v127 = (unsigned __int128 *)&v9[-a3];
        do
        {
          v128 = (unsigned __int128)vld2q_s8(a2);
          a2 += 32;
          *v127++ = v128;
        }
        while (v127 != (unsigned __int128 *)v126);
      }
      while (v126 != v9)
      {
        v129 = *a2;
        a2 += 2;
        *v126++ = v129;
      }
    }
    v9 = v109;
    goto LABEL_190;
  }
  if ((*(_BYTE *)(v11 + 8) & 1) != 0 || (*(_BYTE *)(v10 + 8) & 1) != 0)
  {
    v9 += a5;
    v8 = (WTF *)&v165;
    v162 = (WTF *)&v165;
    v163 = 32;
    v165 = a1;
    goto LABEL_31;
  }
  if (v22)
  {
    v25 = *(char **)(v22 + 8);
    v26 = *(unsigned int *)(v22 + 4);
    if ((*(_BYTE *)(v22 + 16) & 4) != 0)
    {
      if ((_DWORD)v26 == 1)
      {
        *v9 = *v25;
        LODWORD(v26) = 1;
      }
      else if ((_DWORD)v26)
      {
        memcpy(v9, v25, v26);
      }
    }
    else
    {
      if (v26 < 0x10)
      {
        v86 = (unsigned __int128 *)v9;
      }
      else
      {
        v86 = (unsigned __int128 *)&v9[v26 & 0xFFFFFFF0];
        v87 = (unsigned __int128 *)v9;
        do
        {
          v88 = (unsigned __int128)vld2q_s8(v25);
          v25 += 32;
          *v87++ = v88;
        }
        while (v87 != v86);
      }
      while (v86 != (unsigned __int128 *)&v9[v26])
      {
        v93 = *v25;
        v25 += 2;
        *(_BYTE *)v86 = v93;
        v86 = (unsigned __int128 *)((char *)v86 + 1);
      }
    }
  }
  else
  {
    LODWORD(v26) = 0;
  }
  v27 = *(_QWORD *)(v11 + 8);
  if (v27)
  {
    v28 = *(char **)(v27 + 8);
    v29 = *(unsigned int *)(v27 + 4);
    v26 = v26;
    v30 = &v9[v26];
    if ((*(_BYTE *)(v27 + 16) & 4) != 0)
    {
      if ((_DWORD)v29 == 1)
      {
        *v30 = *v28;
        LODWORD(v29) = 1;
      }
      else if ((_DWORD)v29)
      {
        memcpy(v30, v28, v29);
      }
    }
    else
    {
      v89 = &v30[v29];
      if (v29 >= 0x10)
      {
        v90 = &v30[v29 & 0xFFFFFFF0];
        do
        {
          v91 = (unsigned __int128)vld2q_s8(v28);
          v28 += 32;
          *(_OWORD *)v30 = v91;
          v30 += 16;
        }
        while (v30 != v90);
        v30 = v90;
      }
      while (v30 != v89)
      {
        v92 = *v28;
        v28 += 2;
        *v30++ = v92;
      }
    }
  }
  else
  {
    LODWORD(v29) = 0;
    v26 = v26;
  }
  v31 = *(_QWORD *)(v10 + 8);
  if (!v31)
    return;
  a2 = *(char **)(v31 + 8);
  v20 = *(unsigned int *)(v31 + 4);
  v21 = &v9[v26 + v29];
  if ((*(_BYTE *)(v31 + 16) & 4) == 0)
  {
    v32 = &v21[v20];
    if (v20 >= 0x10)
    {
      v33 = &v21[v20 & 0xFFFFFFF0];
      do
      {
        v34 = (unsigned __int128)vld2q_s8(a2);
        a2 += 32;
        *(_OWORD *)v21 = v34;
        v21 += 16;
      }
      while (v21 != v33);
      v21 = v33;
    }
    while (v21 != v32)
    {
      v76 = *a2;
      a2 += 2;
      *v21++ = v76;
    }
    return;
  }
LABEL_23:
  if ((_DWORD)v20 == 1)
  {
    *v21 = *a2;
    return;
  }
  if ((_DWORD)v20)
    goto LABEL_26;
}

void JSC::JSRopeString::resolveToBuffer<char16_t>(unint64_t a1, uint64_t a2, unint64_t a3, char *__dst, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int16 v22;
  uint64_t v23;
  char *v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  int8x16_t *v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int8x16_t *v42;
  uint64_t v43;
  char *v44;
  size_t v45;
  int8x16_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  char *v56;
  char *v57;
  char *v58;
  __int16 v59;
  char *v60;
  char *v61;
  __int128 v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int16 v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  char *v77;
  char *v78;
  char *v79;
  __int16 v80;
  int8x16_t *v81;
  uint64_t v82;
  char *v83;
  __int16 v84;
  __int128 v85;
  char *v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  char *v90;
  char *v91;
  char *v92;
  __int16 v93;
  __int128 v94;
  char *v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  char *v99;
  char *v100;
  char *v101;
  __int16 v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t *v117;
  char *v118;
  int8x16_t v119;
  int8x16_t v120;
  char *v121;
  char *v122;
  char *v123;
  char v124;
  uint64_t v125;
  int v126;
  char *v127;
  char *v128;
  __int128 v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  char *v133;
  char *v134;
  char *v135;
  __int16 v136;
  int8x16_t v137;
  int8x16_t v138;
  _QWORD v139[2];
  uint64_t v140;
  int v141;
  BOOL v142;
  int8x16x2_t v143;
  int8x16x2_t v144;
  int8x16x2_t v145;
  int8x16x2_t v146;
  int8x16x2_t v147;
  int8x16x2_t v148;
  int8x16x2_t v149;
  int8x16x2_t v150;
  int8x16x2_t v151;
  int8x16x2_t v152;
  int8x16x2_t v153;
  int8x16x2_t v154;
  int8x16x2_t v155;
  int8x16x2_t v156;
  int8x16x2_t v157;
  int8x16x2_t v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x2_t v161;
  int8x16x2_t v162;
  int8x16x2_t v163;
  int8x16x2_t v164;
  int8x16x2_t v165;
  int8x16x2_t v166;
  int8x16x2_t v167;
  int8x16x2_t v168;

  if ((unint64_t)&v137 >= a6)
  {
    v137 = a9;
    v138 = 0u;
    while (1)
    {
      while (1)
      {
        if (a3)
        {
          v30 = *(_QWORD *)(a1 + 8);
          if ((v30 & 1) != 0 || (*(_BYTE *)(a2 + 8) & 1) != 0 || (*(_BYTE *)(a3 + 8) & 1) != 0)
          {
            v31 = a1;
            v32 = (_OWORD *)a2;
            goto LABEL_28;
          }
          if (!v30)
            goto LABEL_142;
          v34 = *(int8x16_t **)(v30 + 8);
          v35 = *(unsigned int *)(v30 + 4);
          if ((*(_BYTE *)(v30 + 16) & 4) != 0)
          {
            if (v35 >= 0x40)
            {
              v49 = &__dst[2 * (v35 & 0xFFFFFFC0)];
              v85 = 0uLL;
              v86 = __dst;
              do
              {
                v149.val[0] = *v34;
                v87 = v34[1];
                v157.val[0] = v34[2];
                v88 = v34[3];
                v34 += 4;
                v89 = v88;
                v157.val[1] = 0uLL;
                v165.val[0] = v87;
                v149.val[1] = 0uLL;
                v90 = v86;
                vst2q_s8(v90, v149);
                v90 += 32;
                v165.val[1] = 0uLL;
                vst2q_s8(v90, v165);
                v91 = v86 + 64;
                vst2q_s8(v91, v157);
                v92 = v86 + 96;
                vst2q_s8(v92, *(int8x16x2_t *)(&v85 - 1));
                v86 += 128;
              }
              while (v86 != v49);
            }
            else
            {
              v49 = __dst;
            }
            while (v49 != &__dst[2 * v35])
            {
              v93 = v34->u8[0];
              v34 = (int8x16_t *)((char *)v34 + 1);
              *(_WORD *)v49 = v93;
              v49 += 2;
            }
          }
          else if ((_DWORD)v35 == 1)
          {
            *(_WORD *)__dst = v34->i16[0];
            LODWORD(v35) = 1;
          }
          else if ((_DWORD)v35)
          {
            memcpy(__dst, v34, 2 * v35);
          }
LABEL_37:
          v36 = *(_QWORD *)(a2 + 8);
          if (v36)
          {
            v37 = *(int8x16_t **)(v36 + 8);
            v38 = *(unsigned int *)(v36 + 4);
            v39 = v35;
            v40 = &__dst[2 * v35];
            if ((*(_BYTE *)(v36 + 16) & 4) != 0)
            {
              v50 = &v40[2 * v38];
              if (v38 >= 0x40)
              {
                v51 = &v40[2 * (v38 & 0xFFFFFFC0)];
                v52 = 0uLL;
                do
                {
                  v146.val[0] = *v37;
                  v53 = v37[1];
                  v154.val[0] = v37[2];
                  v54 = v37[3];
                  v37 += 4;
                  v55 = v54;
                  v154.val[1] = 0uLL;
                  v162.val[0] = v53;
                  v146.val[1] = 0uLL;
                  v56 = v40;
                  vst2q_s8(v56, v146);
                  v56 += 32;
                  v162.val[1] = 0uLL;
                  vst2q_s8(v56, v162);
                  v57 = v40 + 64;
                  vst2q_s8(v57, v154);
                  v58 = v40 + 96;
                  vst2q_s8(v58, *(int8x16x2_t *)(&v52 - 1));
                  v40 += 128;
                }
                while (v40 != v51);
                v40 = v51;
              }
              while (v40 != v50)
              {
                v59 = v37->u8[0];
                v37 = (int8x16_t *)((char *)v37 + 1);
                *(_WORD *)v40 = v59;
                v40 += 2;
              }
            }
            else if ((_DWORD)v38 == 1)
            {
              *(_WORD *)v40 = v37->i16[0];
              LODWORD(v38) = 1;
            }
            else if ((_DWORD)v38)
            {
              memcpy(v40, v37, 2 * v38);
            }
          }
          else
          {
            LODWORD(v38) = 0;
            v39 = v35;
          }
          v41 = *(_QWORD *)(a3 + 8);
          if (!v41)
            return;
          v42 = *(int8x16_t **)(v41 + 8);
          v43 = *(unsigned int *)(v41 + 4);
          v44 = &__dst[2 * v39 + 2 * v38];
          if ((*(_BYTE *)(v41 + 16) & 4) != 0)
          {
            v60 = &v44[2 * v43];
            if (v43 >= 0x40)
            {
              v61 = &v44[2 * (v43 & 0xFFFFFFC0)];
              v62 = 0uLL;
              do
              {
                v147.val[0] = *v42;
                v63 = v42[1];
                v155.val[0] = v42[2];
                v64 = v42[3];
                v42 += 4;
                v65 = v64;
                v155.val[1] = 0uLL;
                v163.val[0] = v63;
                v147.val[1] = 0uLL;
                v66 = v44;
                vst2q_s8(v66, v147);
                v66 += 32;
                v163.val[1] = 0uLL;
                vst2q_s8(v66, v163);
                v67 = v44 + 64;
                vst2q_s8(v67, v155);
                v68 = v44 + 96;
                vst2q_s8(v68, *(int8x16x2_t *)(&v62 - 1));
                v44 += 128;
              }
              while (v44 != v61);
              v44 = v61;
            }
            while (v44 != v60)
            {
              v69 = v42->u8[0];
              v42 = (int8x16_t *)((char *)v42 + 1);
              *(_WORD *)v44 = v69;
              v44 += 2;
            }
            return;
          }
          if ((_DWORD)v43 != 1)
          {
            if (!(_DWORD)v43)
              return;
            v45 = 2 * v43;
            goto LABEL_58;
          }
LABEL_126:
          *(_WORD *)v44 = v42->i16[0];
          return;
        }
        v14 = *(_QWORD *)(a1 + 8);
        if (a2)
          break;
        if ((v14 & 1) == 0)
        {
          v140 = 0;
          v141 = 0;
          v142 = 1;
          if (v14)
          {
            v124 = *(_BYTE *)(v14 + 16);
            v125 = *(_QWORD *)(v14 + 8);
            v126 = *(_DWORD *)(v14 + 4);
            v140 = v125;
            v141 = v126;
            v142 = (v124 & 4) != 0;
          }
          v117 = &v140;
          goto LABEL_125;
        }
        if ((v14 & 2) != 0)
          goto LABEL_124;
LABEL_13:
        a5 = *(unsigned int *)(a1 + 16);
        a3 = *(_QWORD *)(a1 + 24) >> 16;
        a2 = *(_QWORD *)(a1 + 20) & 0xFFFFFFFFFLL;
        a1 = v14 & 0xFFFFFFFFFFFFFFF8;
        if ((unint64_t)&v137 < a6)
          goto LABEL_120;
      }
      if ((v14 & 1) != 0)
      {
        v15 = *(_QWORD *)(a2 + 8);
        if ((v15 & 1) != 0)
        {
          v31 = a1;
          v32 = (_OWORD *)a2;
          v33 = 0;
          goto LABEL_29;
        }
        if (v15)
        {
          v16 = *(int8x16_t **)(v15 + 8);
          v17 = *(unsigned int *)(v15 + 4);
          v18 = *(unsigned int *)(a1 + 16);
          v19 = &__dst[2 * v18];
          if ((*(_BYTE *)(v15 + 16) & 4) != 0)
          {
            if (v17 >= 0x40)
            {
              v20 = &v19[2 * (v17 & 0xFFFFFFC0)];
              v24 = &__dst[2 * v18];
              do
              {
                v143.val[0] = *v16;
                v25 = v16[1];
                v145.val[0] = v16[2];
                v26 = v16[3];
                v16 += 4;
                v161.val[1] = v138;
                v161.val[0] = v26;
                v145.val[1] = v138;
                v153.val[0] = v25;
                v143.val[1] = v138;
                v27 = v24;
                vst2q_s8(v27, v143);
                v27 += 32;
                v153.val[1] = v143.val[1];
                vst2q_s8(v27, v153);
                v28 = v24 + 64;
                vst2q_s8(v28, v145);
                v29 = v24 + 96;
                v137 = v161.val[0];
                v138 = v145.val[1];
                vst2q_s8(v29, v161);
                v24 += 128;
              }
              while (v24 != v20);
            }
            else
            {
              v20 = &__dst[2 * v18];
            }
            v21 = &v19[2 * v17];
            while (v20 != v21)
            {
              v22 = v16->u8[0];
              v16 = (int8x16_t *)((char *)v16 + 1);
              *(_WORD *)v20 = v22;
              v20 += 2;
            }
          }
          else if ((_DWORD)v17 == 1)
          {
            *(_WORD *)v19 = v16->i16[0];
          }
          else if ((_DWORD)v17)
          {
            memcpy(v19, v16, 2 * v17);
          }
        }
        v14 = *(_QWORD *)(a1 + 8);
        if ((v14 & 2) != 0)
        {
LABEL_124:
          v113 = *(_QWORD *)((*(_QWORD *)(a1 + 20) & 0xFFFFFFFFFLL) + 8);
          v114 = (*(unsigned __int8 *)(v113 + 16) >> 2) & 1;
          v115 = *(_DWORD *)(v113 + 4);
          v140 = *(_QWORD *)(v113 + 8);
          v141 = v115;
          v142 = v114;
          v139[0] = WTF::StringView::substring((const char *)&v140, *(_DWORD *)(a1 + 26), *(_DWORD *)(a1 + 16));
          v139[1] = v116;
          v117 = v139;
LABEL_125:
          WTF::StringView::getCharacters<char16_t>(v117, __dst);
          return;
        }
        goto LABEL_13;
      }
      v23 = *(_QWORD *)(a2 + 8);
      if ((v23 & 1) == 0)
      {
        if (v14)
        {
          v46 = *(int8x16_t **)(v14 + 8);
          v47 = *(unsigned int *)(v14 + 4);
          if ((*(_BYTE *)(v14 + 16) & 4) != 0)
          {
            if (v47 >= 0x40)
            {
              v70 = &__dst[2 * (v47 & 0xFFFFFFC0)];
              v94 = 0uLL;
              v95 = __dst;
              do
              {
                v150.val[0] = *v46;
                v96 = v46[1];
                v158.val[0] = v46[2];
                v97 = v46[3];
                v46 += 4;
                v98 = v97;
                v158.val[1] = 0uLL;
                v166.val[0] = v96;
                v150.val[1] = 0uLL;
                v99 = v95;
                vst2q_s8(v99, v150);
                v99 += 32;
                v166.val[1] = 0uLL;
                vst2q_s8(v99, v166);
                v100 = v95 + 64;
                vst2q_s8(v100, v158);
                v101 = v95 + 96;
                vst2q_s8(v101, *(int8x16x2_t *)(&v94 - 1));
                v95 += 128;
              }
              while (v95 != v70);
            }
            else
            {
              v70 = __dst;
            }
            while (v70 != &__dst[2 * v47])
            {
              v102 = v46->u8[0];
              v46 = (int8x16_t *)((char *)v46 + 1);
              *(_WORD *)v70 = v102;
              v70 += 2;
            }
          }
          else if ((_DWORD)v47 == 1)
          {
            *(_WORD *)__dst = v46->i16[0];
            LODWORD(v47) = 1;
          }
          else if ((_DWORD)v47)
          {
            memcpy(__dst, v46, 2 * v47);
          }
          v23 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          LODWORD(v47) = 0;
        }
        if (!v23)
          return;
        v42 = *(int8x16_t **)(v23 + 8);
        v48 = *(unsigned int *)(v23 + 4);
        v44 = &__dst[2 * v47];
        if ((*(_BYTE *)(v23 + 16) & 4) != 0)
        {
          v71 = &v44[2 * v48];
          if (v48 >= 0x40)
          {
            v72 = &v44[2 * (v48 & 0xFFFFFFC0)];
            v73 = 0uLL;
            do
            {
              v148.val[0] = *v42;
              v74 = v42[1];
              v156.val[0] = v42[2];
              v75 = v42[3];
              v42 += 4;
              v76 = v75;
              v156.val[1] = 0uLL;
              v164.val[0] = v74;
              v148.val[1] = 0uLL;
              v77 = v44;
              vst2q_s8(v77, v148);
              v77 += 32;
              v164.val[1] = 0uLL;
              vst2q_s8(v77, v164);
              v78 = v44 + 64;
              vst2q_s8(v78, v156);
              v79 = v44 + 96;
              vst2q_s8(v79, *(int8x16x2_t *)(&v73 - 1));
              v44 += 128;
            }
            while (v44 != v72);
            v44 = v72;
          }
          while (v44 != v71)
          {
            v80 = v42->u8[0];
            v42 = (int8x16_t *)((char *)v42 + 1);
            *(_WORD *)v44 = v80;
            v44 += 2;
          }
          return;
        }
        if ((_DWORD)v48 != 1)
        {
          if (!(_DWORD)v48)
            return;
          v45 = 2 * v48;
          goto LABEL_58;
        }
        goto LABEL_126;
      }
      if (v14)
      {
        v81 = *(int8x16_t **)(v14 + 8);
        a3 = *(unsigned int *)(v14 + 4);
        if ((*(_BYTE *)(v14 + 16) & 4) != 0)
        {
          if (a3 >= 0x40)
          {
            v83 = &__dst[2 * (a3 & 0xFFFFFFC0)];
            v118 = __dst;
            do
            {
              v144.val[0] = *v81;
              v119 = v81[1];
              v151.val[0] = v81[2];
              v120 = v81[3];
              v81 += 4;
              v159.val[1] = 0uLL;
              v159.val[0] = v120;
              v151.val[1] = 0u;
              v167.val[0] = v119;
              v144.val[1] = 0u;
              v121 = v118;
              vst2q_s8(v121, v144);
              v121 += 32;
              v167.val[1] = 0u;
              vst2q_s8(v121, v167);
              v122 = v118 + 64;
              vst2q_s8(v122, v151);
              v123 = v118 + 96;
              vst2q_s8(v123, v159);
              v118 += 128;
            }
            while (v118 != v83);
          }
          else
          {
            v83 = __dst;
          }
          while (v83 != &__dst[2 * a3])
          {
            v84 = v81->u8[0];
            v81 = (int8x16_t *)((char *)v81 + 1);
            *(_WORD *)v83 = v84;
            v83 += 2;
          }
        }
        else if (a3 == 1)
        {
          *(_WORD *)__dst = v81->i16[0];
        }
        else if (*(_DWORD *)(v14 + 4))
        {
          memcpy(__dst, v81, 2 * a3);
        }
      }
      else
      {
        a3 = 0;
      }
      __dst += 2 * a3;
      v82 = *(_QWORD *)(a2 + 8);
      if ((v82 & 2) != 0)
      {
        v103 = *(_QWORD *)((*(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL) + 8);
        v104 = *(unsigned int *)(v103 + 4);
        v105 = *(_QWORD *)(a2 + 24);
        v106 = v105 >> 16;
        if (v104 > (v105 >> 16))
        {
          v107 = *(unsigned int *)(v103 + 16);
          v42 = *(int8x16_t **)(v103 + 8);
          v108 = *(_DWORD *)(a2 + 16);
          if ((int)v104 - (int)v106 > v108 || (v108 = v104 - v106, (_DWORD)v106))
          {
            v109 = (v107 >> 2) & 1;
            v110 = (v105 >> 16);
            v111 = v108;
            v112 = v104 - v106;
            if ((_DWORD)v109)
            {
              if (v112 >= v108)
              {
                v42 = (int8x16_t *)((char *)v42 + v110);
                v111 = v108 | 0x100000000;
                goto LABEL_116;
              }
LABEL_141:
              __break(1u);
LABEL_142:
              LODWORD(v35) = 0;
              goto LABEL_37;
            }
            if (v112 < v108)
              goto LABEL_141;
            v42 = (int8x16_t *)((char *)v42 + 2 * v110);
          }
          else
          {
            v111 = v104 & 0xFFFFFFFEFFFFFFFFLL | (((v107 >> 2) & 1) << 32);
          }
LABEL_116:
          if ((v111 & 0x100000000) != 0)
          {
            v127 = &__dst[2 * v111];
            if (v111 >= 0x40)
            {
              v128 = &__dst[2 * (v111 & 0xFFFFFFC0)];
              v129 = 0uLL;
              do
              {
                v152.val[0] = *v42;
                v130 = v42[1];
                v160.val[0] = v42[2];
                v131 = v42[3];
                v42 += 4;
                v132 = v131;
                v160.val[1] = 0uLL;
                v168.val[0] = v130;
                v152.val[1] = 0uLL;
                v133 = __dst;
                vst2q_s8(v133, v152);
                v133 += 32;
                v168.val[1] = 0uLL;
                vst2q_s8(v133, v168);
                v134 = __dst + 64;
                vst2q_s8(v134, v160);
                v135 = __dst + 96;
                vst2q_s8(v135, *(int8x16x2_t *)(&v129 - 1));
                __dst += 128;
              }
              while (__dst != v128);
              __dst = v128;
            }
            while (__dst != v127)
            {
              v136 = v42->u8[0];
              v42 = (int8x16_t *)((char *)v42 + 1);
              *(_WORD *)__dst = v136;
              __dst += 2;
            }
          }
          else if ((_DWORD)v111 == 1)
          {
            *(_WORD *)__dst = v42->i16[0];
          }
          else if ((_DWORD)v111)
          {
            v45 = 2 * v111;
            v44 = __dst;
LABEL_58:
            memcpy(v44, v42, v45);
            return;
          }
        }
        return;
      }
      a1 = v82 & 0xFFFFFFFFFFFFFFF8;
      v32 = (_OWORD *)(*(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL);
      a3 = *(_QWORD *)(a2 + 24) >> 16;
      a5 = *(unsigned int *)(a2 + 16);
      a2 = (uint64_t)v32;
      if ((unint64_t)&v137 < a6)
        goto LABEL_121;
    }
  }
LABEL_120:
  v32 = (_OWORD *)a2;
LABEL_121:
  v31 = a1;
LABEL_28:
  v33 = a3;
LABEL_29:
  JSC::JSRopeString::resolveToBufferSlow<char16_t>(v31, v32, v33, (uint64_t)__dst, a5, a6, a7, a8);
}

uint64_t WTF::HashTranslatorCharBuffer<char16_t>::HashTranslatorCharBuffer(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v4 = WTF::SuperFastHash::computeHashImpl<char16_t,WTF::StringHasher::DefaultConverter>(a2, a3);
  v5 = (v4 ^ (8 * v4)) + ((v4 ^ (8 * v4)) >> 5);
  v6 = (v5 ^ (4 * v5)) + ((v5 ^ (4 * v5)) >> 15);
  v7 = (v6 ^ (v6 << 10)) & 0xFFFFFF;
  if (!v7)
    v7 = 0x800000;
  *(_DWORD *)(a1 + 16) = v7;
  return a1;
}

uint64_t _ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringEENKUlS3_RT_E_clIN3WTF24HashTranslatorCharBufferIhEEEEDaS3_S7_(uint64_t **a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;

  v10 = **a1;
  v11 = *(WTF::StringImpl **)(v10 + 8);
  if (!v11)
  {
    if ((MEMORY[0x10] & 0x10) != 0)
      return v10;
    v11 = 0;
    goto LABEL_6;
  }
  if ((*((_DWORD *)v11 + 4) & 0x10) != 0)
  {
    *(_DWORD *)v11 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(_QWORD *)(v10 + 8), a3, a4, a5, a6, a7, a8, (WTF *)&v35);
    v11 = v35;
    v10 = **a1;
    if ((*(_DWORD *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
    {
      if (v35)
        *(_DWORD *)v35 += 2;
LABEL_6:
      __dmb(0xAu);
      v12 = *(WTF::StringImpl **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v11;
      v35 = v12;
      v13 = (_QWORD *)(a2 + 808);
      v14 = *(unsigned int *)(a2 + 820);
      if ((_DWORD)v14 == *(_DWORD *)(a2 + 816))
      {
        v16 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v35);
        v14 = *(unsigned int *)(a2 + 820);
        v15 = (WTF::StringImpl **)(*(_QWORD *)(a2 + 808) + 8 * v14);
        v12 = *v16;
      }
      else
      {
        v15 = (WTF::StringImpl **)(*v13 + 8 * v14);
        v16 = &v35;
      }
      *v16 = 0;
      *v15 = v12;
      *(_DWORD *)(a2 + 820) = v14 + 1;
      v17 = v35;
      v35 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
      v10 = **a1;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  return v10;
}

void JSC::JSRopeString::resolveToBufferSlow<unsigned char>(uint64_t a1, _BYTE *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int128 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned __int128 *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int128 *v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  char v32;
  unsigned __int128 *v33;
  unsigned __int128 *v34;
  unsigned __int128 v35;
  unsigned __int128 *v36;
  char v37;
  uint64_t v38;
  WTF *v39;
  int v40;
  unsigned int v41;
  _QWORD v42[32];

  v8 = (unsigned __int128 *)(a4 + a5);
  v39 = (WTF *)v42;
  v40 = 32;
  v42[0] = a1;
  if (!a2)
    goto LABEL_46;
  v42[1] = a2;
  if (a3)
  {
    v42[2] = a3;
    v9 = 3;
  }
  else
  {
    v9 = 2;
  }
  do
  {
    while (1)
    {
      v10 = *((_QWORD *)v39 + v9 - 1);
      v11 = v9 - 1;
      v41 = v9 - 1;
      v12 = *(_QWORD *)(v10 + 8);
      if ((v12 & 1) == 0)
      {
        a3 = *(unsigned int *)(v12 + 4);
        a2 = *(_BYTE **)(v12 + 8);
        v13 = (unsigned __int128 *)((char *)v8 - a3);
        if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        {
          if ((_DWORD)a3 == 1)
          {
            *(_BYTE *)v13 = *a2;
          }
          else if ((_DWORD)a3)
          {
            memcpy((char *)v8 - a3, a2, a3);
          }
        }
        else
        {
          if (a3 < 0x10)
          {
            v29 = (unsigned __int128 *)((char *)v8 - a3);
          }
          else
          {
            v29 = (unsigned __int128 *)((char *)v13 + (a3 & 0xFFFFFFF0));
            v30 = (unsigned __int128 *)((char *)v8 - a3);
            do
            {
              v31 = (unsigned __int128)vld2q_s8(a2);
              a2 += 32;
              *v30++ = v31;
            }
            while (v30 != v29);
          }
          while (v29 != v8)
          {
            v32 = *a2;
            a2 += 2;
            *(_BYTE *)v29 = v32;
            v29 = (unsigned __int128 *)((char *)v29 + 1);
          }
        }
        v8 = v13;
        goto LABEL_9;
      }
      if ((v12 & 2) == 0)
      {
        if (v12 >= 8)
        {
          v14 = v12 & 0xFFFFFFFFFFFFFFF8;
          v38 = v14;
          if (v11 == v40)
          {
            WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v39, (unint64_t)&v38);
          }
          else
          {
            *((_QWORD *)v39 + v11) = v14;
            v41 = v9;
          }
          v15 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
          if (v15)
          {
            v38 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
            v16 = v41;
            if (v41 == v40)
            {
              WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v39, (unint64_t)&v38);
            }
            else
            {
              *((_QWORD *)v39 + v41) = v15;
              v41 = v16 + 1;
            }
            v17 = *(_QWORD *)(v10 + 24);
            if (v17 >= 0x10000)
            {
              v18 = v17 >> 16;
              v38 = v18;
              v19 = v41;
              if (v41 == v40)
              {
                WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v39, (unint64_t)&v38);
              }
              else
              {
                *((_QWORD *)v39 + v41) = v18;
                v41 = v19 + 1;
              }
            }
          }
        }
        goto LABEL_9;
      }
      v22 = *(_QWORD *)((*(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL) + 8);
      v23 = *(unsigned int *)(v22 + 4);
      v24 = *(_QWORD *)(v10 + 24);
      v25 = v24 >> 16;
      v26 = *(unsigned int *)(v10 + 16);
      v8 = (unsigned __int128 *)((char *)v8 - v26);
      if (v23 <= (v24 >> 16))
        goto LABEL_9;
      a2 = *(_BYTE **)(v22 + 8);
      if ((int)v23 - (int)v25 <= v26)
      {
        if (!(_DWORD)v25)
        {
          v26 = v23 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v22 + 16) >> 2) & 1) << 32);
          goto LABEL_35;
        }
        v26 = (v23 - v25);
      }
      v27 = (v24 >> 16);
      v28 = v23 - v25;
      if (((*(_DWORD *)(v22 + 16) >> 2) & 1) == 0)
        break;
      if (v28 >= v26)
      {
        a2 += v27;
        v26 |= 0x100000000uLL;
        goto LABEL_35;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      v9 = 1;
    }
    if (v28 < v26)
      goto LABEL_45;
    a2 += 2 * v27;
LABEL_35:
    if ((v26 & 0x100000000) != 0)
    {
      if ((_DWORD)v26 == 1)
      {
        *(_BYTE *)v8 = *a2;
      }
      else if ((_DWORD)v26)
      {
        memcpy(v8, a2, v26);
      }
    }
    else
    {
      if (v26 < 0x10)
      {
        v33 = v8;
      }
      else
      {
        v33 = (unsigned __int128 *)((char *)v8 + (v26 & 0xFFFFFFF0));
        v34 = v8;
        do
        {
          v35 = (unsigned __int128)vld2q_s8(a2);
          a2 += 32;
          *v34++ = v35;
        }
        while (v34 != v33);
      }
      v36 = (unsigned __int128 *)((char *)v8 + v26);
      while (v33 != v36)
      {
        v37 = *a2;
        a2 += 2;
        *(_BYTE *)v33 = v37;
        v33 = (unsigned __int128 *)((char *)v33 + 1);
      }
    }
LABEL_9:
    v9 = v41;
  }
  while (v41);
  v20 = v39;
  if (v42 != (_QWORD *)v39 && v39 != 0)
  {
    v39 = 0;
    v40 = 0;
    WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 0x21)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 32;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1984CCE40);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x21)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

uint64_t WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t _ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringEENKUlS3_RT_E0_clIN3WTF24HashTranslatorCharBufferIhEEEEDaS3_S7_(uint64_t **a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v20;

  WTF::AtomStringImpl::add(a3, a4, a5, a6, a7, a8, &v20);
  v14 = v20;
  if (*v20 != 2)
    goto LABEL_5;
  v15 = v20[4];
  v16 = v20;
  if ((v15 & 3) == 2)
  {
    v16 = v20;
    do
    {
      v16 = (_DWORD *)*((_QWORD *)v16 + 3);
      v15 = v16[4];
    }
    while ((v15 & 3) == 2);
  }
  if ((v15 & 8) != 0)
  {
LABEL_5:
    v17 = 0;
  }
  else
  {
    v16[4] = v15 | 8;
    v17 = (unint64_t)v16[1] << ((v15 & 4) == 0);
  }
  v18 = **a1;
  __dmb(0xAu);
  *(_QWORD *)(v18 + 8) = v14;
  if (v17 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(a2 + 192, 0, **a1, v17, v10, v11, v12, v13);
  return **a1;
}

void JSC::JSRopeString::resolveToBufferSlow<char16_t>(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF *v36;
  char *v38;
  char *v39;
  int8x16_t v40;
  int8x16_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int16 v46;
  uint64_t v47;
  WTF *v48;
  int v49;
  unsigned int v50;
  _QWORD v51[32];
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;

  v8 = (char *)(a4 + 2 * a5);
  v48 = (WTF *)v51;
  v49 = 32;
  v51[0] = a1;
  if (!a2)
    goto LABEL_55;
  v51[1] = a2;
  if (a3)
  {
    v51[2] = a3;
    v9 = 3;
  }
  else
  {
    v9 = 2;
  }
  do
  {
    while (1)
    {
      v10 = *((_QWORD *)v48 + v9 - 1);
      v11 = v9 - 1;
      v50 = v9 - 1;
      v12 = *(_QWORD *)(v10 + 8);
      if ((v12 & 1) == 0)
      {
        v13 = *(unsigned int *)(v12 + 4);
        a2 = *(_OWORD **)(v12 + 8);
        v14 = &v8[-2 * v13];
        if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        {
          if (v13 >= 0x40)
          {
            v21 = &v14[2 * (v13 & 0xFFFFFFC0)];
            v22 = v14;
            do
            {
              v52.val[0] = (int8x16_t)*a2;
              v23 = *((int8x16_t *)a2 + 1);
              v54.val[0] = (int8x16_t)a2[2];
              v24 = *((int8x16_t *)a2 + 3);
              a2 += 4;
              v58.val[1] = 0u;
              v58.val[0] = v24;
              v54.val[1] = 0u;
              v56.val[0] = v23;
              v52.val[1] = 0u;
              v25 = v22;
              vst2q_s8(v25, v52);
              v25 += 32;
              v56.val[1] = 0u;
              vst2q_s8(v25, v56);
              v26 = v22 + 64;
              vst2q_s8(v26, v54);
              v27 = v22 + 96;
              vst2q_s8(v27, v58);
              v22 += 128;
            }
            while (v22 != v21);
          }
          else
          {
            v21 = &v8[-2 * v13];
          }
          while (v21 != v8)
          {
            v28 = *(unsigned __int8 *)a2;
            a2 = (_OWORD *)((char *)a2 + 1);
            *(_WORD *)v21 = v28;
            v21 += 2;
          }
        }
        else if ((_DWORD)v13 == 1)
        {
          *(_WORD *)v14 = *(_WORD *)a2;
        }
        else if ((_DWORD)v13)
        {
          memcpy(&v8[-2 * v13], a2, 2 * v13);
        }
        v8 = v14;
        goto LABEL_10;
      }
      if ((v12 & 2) == 0)
      {
        if (v12 >= 8)
        {
          v15 = v12 & 0xFFFFFFFFFFFFFFF8;
          v47 = v15;
          if (v11 == v49)
          {
            WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v48, (unint64_t)&v47);
          }
          else
          {
            *((_QWORD *)v48 + v11) = v15;
            v50 = v9;
          }
          v16 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
          if (v16)
          {
            v47 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
            v17 = v50;
            if (v50 == v49)
            {
              WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v48, (unint64_t)&v47);
            }
            else
            {
              *((_QWORD *)v48 + v50) = v16;
              v50 = v17 + 1;
            }
            v18 = *(_QWORD *)(v10 + 24);
            if (v18 >= 0x10000)
            {
              v19 = v18 >> 16;
              v47 = v19;
              v20 = v50;
              if (v50 == v49)
              {
                WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v48, (unint64_t)&v47);
              }
              else
              {
                *((_QWORD *)v48 + v50) = v19;
                v50 = v20 + 1;
              }
            }
          }
        }
        goto LABEL_10;
      }
      v29 = *(_QWORD *)((*(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL) + 8);
      v30 = *(unsigned int *)(v29 + 4);
      v31 = *(_QWORD *)(v10 + 24);
      v32 = v31 >> 16;
      v33 = *(unsigned int *)(v10 + 16);
      v8 -= 2 * v33;
      if (v30 <= (v31 >> 16))
        goto LABEL_10;
      a2 = *(_OWORD **)(v29 + 8);
      if ((int)v30 - (int)v32 <= v33)
        break;
LABEL_33:
      v34 = (v31 >> 16);
      v35 = v30 - v32;
      if (((*(_DWORD *)(v29 + 16) >> 2) & 1) != 0)
      {
        if (v35 >= v33)
        {
          a2 = (_OWORD *)((char *)a2 + v34);
          v33 |= 0x100000000uLL;
          goto LABEL_35;
        }
      }
      else if (v35 >= v33)
      {
        a2 = (_OWORD *)((char *)a2 + 2 * v34);
        goto LABEL_35;
      }
      __break(1u);
LABEL_55:
      v9 = 1;
    }
    if ((_DWORD)v32)
    {
      v33 = (v30 - v32);
      goto LABEL_33;
    }
    v33 = v30 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v29 + 16) >> 2) & 1) << 32);
LABEL_35:
    if ((v33 & 0x100000000) != 0)
    {
      if (v33 < 0x40)
      {
        v38 = v8;
      }
      else
      {
        v38 = &v8[2 * (v33 & 0xFFFFFFC0)];
        v39 = v8;
        do
        {
          v53.val[0] = (int8x16_t)*a2;
          v40 = *((int8x16_t *)a2 + 1);
          v55.val[0] = (int8x16_t)a2[2];
          v41 = *((int8x16_t *)a2 + 3);
          a2 += 4;
          v57.val[1] = 0uLL;
          v57.val[0] = v41;
          v55.val[1] = 0u;
          v59.val[0] = v40;
          v53.val[1] = 0u;
          v42 = v39;
          vst2q_s8(v42, v53);
          v42 += 32;
          v59.val[1] = 0u;
          vst2q_s8(v42, v59);
          v43 = v39 + 64;
          vst2q_s8(v43, v55);
          v44 = v39 + 96;
          vst2q_s8(v44, v57);
          v39 += 128;
        }
        while (v39 != v38);
      }
      v45 = &v8[2 * v33];
      while (v38 != v45)
      {
        v46 = *(unsigned __int8 *)a2;
        a2 = (_OWORD *)((char *)a2 + 1);
        *(_WORD *)v38 = v46;
        v38 += 2;
      }
    }
    else if ((_DWORD)v33 == 1)
    {
      *(_WORD *)v8 = *(_WORD *)a2;
    }
    else if ((_DWORD)v33)
    {
      memcpy(v8, a2, 2 * v33);
    }
LABEL_10:
    v9 = v50;
  }
  while (v50);
  v36 = v48;
  if (v51 != (_QWORD *)v48 && v48 != 0)
  {
    v48 = 0;
    v49 = 0;
    WTF::fastFree((unint64_t)v36, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t _ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringEENKUlS3_RT_E0_clIN3WTF24HashTranslatorCharBufferIDsEEEEDaS3_S7_(uint64_t **a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v20;

  WTF::AtomStringImpl::add(a3, a4, a5, a6, a7, a8, &v20);
  v14 = v20;
  if (*v20 != 2)
    goto LABEL_5;
  v15 = v20[4];
  v16 = v20;
  if ((v15 & 3) == 2)
  {
    v16 = v20;
    do
    {
      v16 = (_DWORD *)*((_QWORD *)v16 + 3);
      v15 = v16[4];
    }
    while ((v15 & 3) == 2);
  }
  if ((v15 & 8) != 0)
  {
LABEL_5:
    v17 = 0;
  }
  else
  {
    v16[4] = v15 | 8;
    v17 = (unint64_t)v16[1] << ((v15 & 4) == 0);
  }
  v18 = **a1;
  __dmb(0xAu);
  *(_QWORD *)(v18 + 8) = v14;
  if (v17 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(a2 + 192, 0, **a1, v17, v10, v11, v12, v13);
  return **a1;
}

void _ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringES5_ENKUlS5_S5_PT_jE_clIDsEEDaS5_S5_S7_j(unint64_t a1, uint64_t a2, uint64_t a3, char *__dst, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  char *v20;
  const char **v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  int v53;
  BOOL v54;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a3 + 8);
  if ((v11 & 1) != 0)
  {
    if ((v12 & 1) != 0)
    {
      JSC::JSRopeString::resolveToBufferSlow<char16_t>(a2, (_OWORD *)a3, 0, (uint64_t)__dst, a5, a1, a7, a8);
      return;
    }
    v52 = 0;
    v53 = 0;
    v54 = 1;
    if (v12)
    {
      v35 = *(_BYTE *)(v12 + 16);
      v36 = *(_QWORD *)(v12 + 8);
      v37 = *(_DWORD *)(v12 + 4);
      v52 = v36;
      v53 = v37;
      v54 = (v35 & 4) != 0;
    }
    WTF::StringView::getCharacters<char16_t>(&v52, &__dst[2 * *(unsigned int *)(a2 + 16)]);
    v38 = *(_QWORD *)(a2 + 8);
    if ((v38 & 2) == 0)
    {
      v29 = v38 & 0xFFFFFFFFFFFFFFF8;
      v30 = *(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL;
      v31 = *(_QWORD *)(a2 + 24) >> 16;
      v33 = *(unsigned int *)(a2 + 16);
      v32 = __dst;
      goto LABEL_14;
    }
    v43 = *(_QWORD *)((*(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL) + 8);
    v44 = (*(unsigned __int8 *)(v43 + 16) >> 2) & 1;
    v45 = *(_DWORD *)(v43 + 4);
    v49 = *(_QWORD *)(v43 + 8);
    v50 = v45;
    v51 = v44;
    v47 = WTF::StringView::substring((const char *)&v49, *(_DWORD *)(a2 + 26), *(_DWORD *)(a2 + 16));
    v48 = v46;
    v21 = &v47;
    v20 = __dst;
  }
  else
  {
    if ((v12 & 1) == 0)
    {
      v52 = 0;
      v53 = 0;
      v54 = 1;
      if (v11)
      {
        v13 = *(_BYTE *)(v11 + 16);
        v14 = *(_QWORD *)(v11 + 8);
        v15 = *(_DWORD *)(v11 + 4);
        v52 = v14;
        v53 = v15;
        v54 = (v13 & 4) != 0;
      }
      WTF::StringView::getCharacters<char16_t>(&v52, __dst);
      v16 = *(_QWORD *)(a3 + 8);
      v49 = 0;
      v50 = 0;
      v51 = 1;
      if (v16)
      {
        v17 = *(_BYTE *)(v16 + 16);
        v18 = *(_QWORD *)(v16 + 8);
        v19 = *(_DWORD *)(v16 + 4);
        v49 = v18;
        v50 = v19;
        v51 = (v17 & 4) != 0;
      }
      v20 = &__dst[2 * v53];
      v21 = (const char **)&v49;
      goto LABEL_8;
    }
    v52 = 0;
    v53 = 0;
    v54 = 1;
    if (v11)
    {
      v22 = *(_BYTE *)(v11 + 16);
      v23 = *(_QWORD *)(v11 + 8);
      v24 = *(_DWORD *)(v11 + 4);
      v52 = v23;
      v53 = v24;
      v54 = (v22 & 4) != 0;
    }
    WTF::StringView::getCharacters<char16_t>(&v52, __dst);
    v28 = *(_QWORD *)(a3 + 8);
    if ((v28 & 2) == 0)
    {
      v29 = v28 & 0xFFFFFFFFFFFFFFF8;
      v30 = *(_QWORD *)(a3 + 20) & 0xFFFFFFFFFLL;
      v31 = *(_QWORD *)(a3 + 24) >> 16;
      v32 = &__dst[2 * v53];
      v33 = *(unsigned int *)(a3 + 16);
LABEL_14:
      JSC::JSRopeString::resolveToBuffer<char16_t>(v29, v30, v31, v32, v33, a1, v25, v26, v27);
      return;
    }
    v39 = *(_QWORD *)((*(_QWORD *)(a3 + 20) & 0xFFFFFFFFFLL) + 8);
    v40 = (*(unsigned __int8 *)(v39 + 16) >> 2) & 1;
    v41 = *(_DWORD *)(v39 + 4);
    v49 = *(_QWORD *)(v39 + 8);
    v50 = v41;
    v51 = v40;
    v47 = WTF::StringView::substring((const char *)&v49, *(_DWORD *)(a3 + 26), *(_DWORD *)(a3 + 16));
    v48 = v42;
    v20 = &__dst[2 * v53];
    v21 = &v47;
  }
LABEL_8:
  WTF::StringView::getCharacters<char16_t>(v21, v20);
}

uint64_t _ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringES5_ENKUlS3_RT_E_clIN3WTF24HashTranslatorCharBufferIDsEEEEDaS3_S7_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;

  WTF::AtomStringImpl::add(a2, a4, a5, a6, a7, a8, &v33);
  v34 = v33;
  v22 = JSC::jsString(a1, (JSC::VM *)&v34, v9, v10, v11, v12, v13, v14);
  v23 = v34;
  v34 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return v22;
}

void _ZZN3JSC12jsAtomStringEPNS_14JSGlobalObjectERNS_2VMEPNS_8JSStringES5_S5_ENKUlS5_S5_S5_PT_jE_clIDsEEDaS5_S5_S5_S7_j(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__dst, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  char *v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int16 v23;
  uint64_t v24;
  int8x16_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int16 v38;
  uint64_t v39;
  int8x16_t *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;

  v11 = *(_QWORD *)(a2 + 8);
  if ((v11 & 1) != 0 || (*(_BYTE *)(a3 + 8) & 1) != 0 || (*(_BYTE *)(a4 + 8) & 1) != 0)
  {
    JSC::JSRopeString::resolveToBufferSlow<char16_t>(a2, (_OWORD *)a3, a4, (uint64_t)__dst, a6, *(_QWORD *)(a1 + 8), a7, a8);
  }
  else
  {
    if (v11)
    {
      v12 = *(int8x16_t **)(v11 + 8);
      v13 = *(unsigned int *)(v11 + 4);
      if ((*(_BYTE *)(v11 + 16) & 4) != 0)
      {
        if (v13 >= 0x40)
        {
          v14 = &__dst[2 * (v13 & 0xFFFFFFC0)];
          v15 = 0uLL;
          v16 = __dst;
          do
          {
            v53.val[0] = *v12;
            v17 = v12[1];
            v56.val[0] = v12[2];
            v18 = v12[3];
            v12 += 4;
            v19 = v18;
            v56.val[1] = 0uLL;
            v59.val[0] = v17;
            v53.val[1] = 0uLL;
            v20 = v16;
            vst2q_s8(v20, v53);
            v20 += 32;
            v59.val[1] = 0uLL;
            vst2q_s8(v20, v59);
            v21 = v16 + 64;
            vst2q_s8(v21, v56);
            v22 = v16 + 96;
            vst2q_s8(v22, *(int8x16x2_t *)(&v15 - 1));
            v16 += 128;
          }
          while (v16 != v14);
        }
        else
        {
          v14 = __dst;
        }
        while (v14 != &__dst[2 * v13])
        {
          v23 = v12->u8[0];
          v12 = (int8x16_t *)((char *)v12 + 1);
          *(_WORD *)v14 = v23;
          v14 += 2;
        }
      }
      else if ((_DWORD)v13 == 1)
      {
        *(_WORD *)__dst = v12->i16[0];
        LODWORD(v13) = 1;
      }
      else if ((_DWORD)v13)
      {
        memcpy(__dst, v12, 2 * v13);
      }
    }
    else
    {
      LODWORD(v13) = 0;
    }
    v24 = *(_QWORD *)(a3 + 8);
    if (v24)
    {
      v25 = *(int8x16_t **)(v24 + 8);
      v26 = *(unsigned int *)(v24 + 4);
      v27 = v13;
      v28 = &__dst[2 * v13];
      if ((*(_BYTE *)(v24 + 16) & 4) != 0)
      {
        v29 = &v28[2 * v26];
        if (v26 >= 0x40)
        {
          v30 = &v28[2 * (v26 & 0xFFFFFFC0)];
          v31 = 0uLL;
          do
          {
            v54.val[0] = *v25;
            v32 = v25[1];
            v57.val[0] = v25[2];
            v33 = v25[3];
            v25 += 4;
            v34 = v33;
            v57.val[1] = 0uLL;
            v60.val[0] = v32;
            v54.val[1] = 0uLL;
            v35 = v28;
            vst2q_s8(v35, v54);
            v35 += 32;
            v60.val[1] = 0uLL;
            vst2q_s8(v35, v60);
            v36 = v28 + 64;
            vst2q_s8(v36, v57);
            v37 = v28 + 96;
            vst2q_s8(v37, *(int8x16x2_t *)(&v31 - 1));
            v28 += 128;
          }
          while (v28 != v30);
          v28 = v30;
        }
        while (v28 != v29)
        {
          v38 = v25->u8[0];
          v25 = (int8x16_t *)((char *)v25 + 1);
          *(_WORD *)v28 = v38;
          v28 += 2;
        }
      }
      else if ((_DWORD)v26 == 1)
      {
        *(_WORD *)v28 = v25->i16[0];
        LODWORD(v26) = 1;
      }
      else if ((_DWORD)v26)
      {
        memcpy(v28, v25, 2 * v26);
      }
    }
    else
    {
      LODWORD(v26) = 0;
      v27 = v13;
    }
    v39 = *(_QWORD *)(a4 + 8);
    if (v39)
    {
      v40 = *(int8x16_t **)(v39 + 8);
      v41 = *(unsigned int *)(v39 + 4);
      v42 = &__dst[2 * v27 + 2 * v26];
      if ((*(_BYTE *)(v39 + 16) & 4) != 0)
      {
        v43 = &v42[2 * v41];
        if (v41 >= 0x40)
        {
          v44 = &v42[2 * (v41 & 0xFFFFFFC0)];
          v45 = 0uLL;
          do
          {
            v55.val[0] = *v40;
            v46 = v40[1];
            v58.val[0] = v40[2];
            v47 = v40[3];
            v40 += 4;
            v48 = v47;
            v58.val[1] = 0uLL;
            v61.val[0] = v46;
            v55.val[1] = 0uLL;
            v49 = v42;
            vst2q_s8(v49, v55);
            v49 += 32;
            v61.val[1] = 0uLL;
            vst2q_s8(v49, v61);
            v50 = v42 + 64;
            vst2q_s8(v50, v58);
            v51 = v42 + 96;
            vst2q_s8(v51, *(int8x16x2_t *)(&v45 - 1));
            v42 += 128;
          }
          while (v42 != v44);
          v42 = v44;
        }
        while (v42 != v43)
        {
          v52 = v40->u8[0];
          v40 = (int8x16_t *)((char *)v40 + 1);
          *(_WORD *)v42 = v52;
          v42 += 2;
        }
      }
      else if ((_DWORD)v41 == 1)
      {
        *(_WORD *)v42 = v40->i16[0];
      }
      else if ((_DWORD)v41)
      {
        memcpy(v42, v40, 2 * v41);
      }
    }
  }
}

unint64_t JSC::JSImmutableButterfly::setIndex(unint64_t result, uint64_t a2, unsigned int a3, unint64_t a4)
{
  double v4;

  if ((*(_BYTE *)(result + 4) & 0xE) == 6)
  {
    v4 = (double)(int)a4;
    if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v4 = a4 - 0x2000000000000;
    *(double *)(result + 8 * a3 + 16) = v4;
  }
  else
  {
    *(_QWORD *)(result + 8 * a3 + 16) = a4;
    if (a4
      && (a4 & 0xFFFE000000000002) == 0
      && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(result + 7))
    {
      return JSC::Heap::writeBarrierSlowPath(a2 + 192, result);
    }
  }
  return result;
}

void JSC::VM::logEvent<JSC::DFG::shouldTriggerFTLCompile(JSC::CodeBlock *,JSC::DFG::JITCode *)::$_0>(JSC::Profiler::Database *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20[2];
  WTF *v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v20[1] = (WTF *)off_1E3572250;
    v21 = (WTF *)v23;
    v22 = xmmword_199122F80;
    v23[0] = 0;
    v4 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = 0;
    v20[0] = (WTF *)v4;
    *(_BYTE *)(v4 + 16) = 0;
    if (v21 != (WTF *)v23)
      WTF::fastFree((unint64_t)v21, v5, v6, v7, v8, v9, v10, v11);
    JSC::Profiler::Database::logEvent(a1, a2, "abortFTLCompile", v20, v8, v9, v10, v11);
    v19 = v20[0];
    v20[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
        WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
      else
        --*(_DWORD *)v19;
    }
  }
}

uint64_t WTF::dataLog<char [31],JSC::CodeBlock,char [48],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Deferring FTL-optimization of ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", " indefinitely because there was an FTL failure.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [30],JSC::CodeBlock,char [6],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Choosing not to FTL-optimize ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", " yet.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::VM::logEvent<JSC::DFG::triggerFTLReplacementCompile(JSC::VM&,JSC::CodeBlock *,JSC::DFG::JITCode *)::$_2>(JSC::Profiler::Database *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v25 = off_1E3572250;
  v26 = v28;
  v27 = xmmword_199122F80;
  v28[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "compiled and failed");
  v25[5]((WTF::StringPrintStream *)&v25);
  v12 = v26;
  v11 = v27;
  v24 = 0;
  if (v26)
  {
    if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1984CDDF8);
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)(v27 + 17));
    *(_DWORD *)v13 = 1;
    v13[1] = v11;
    v24 = (WTF *)v13;
    v14 = v13 + 2;
    memcpy(v13 + 2, v12, v11);
    *((_BYTE *)v14 + v11) = 0;
    v15 = (unint64_t)v26;
    if (v26 == v28)
      goto LABEL_9;
  }
  else
  {
    v15 = 0;
  }
  WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "delayFTLCompile", &v24, v7, v8, v9, v10);
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    else
      --*(_DWORD *)v23;
  }
}

uint64_t WTF::dataLog<char [12],JSC::CodeBlock,char [60],char [2]>(const char *a1, uint64_t a2, const char *a3, const char *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", a1);
  JSC::CodeBlock::dumpAssumingJITType(a2);
  WTF::PrintStream::printf(v10, "%s", a3);
  WTF::PrintStream::printf(v10, "%s", a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

void JSC::VM::logEvent<JSC::DFG::tierUpCommon(JSC::VM&,JSC::CallFrame *,JSC::BytecodeIndex,BOOL)::$_2>(JSC::Profiler::Database *a1, uint64_t a2, JSC::BytecodeIndex *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  _BYTE *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v27 = off_1E3572250;
  v28 = v30;
  v29 = xmmword_199122F80;
  v30[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "at ");
  JSC::BytecodeIndex::dump(a3, (WTF::PrintStream *)&v27);
  v27[5]((WTF::StringPrintStream *)&v27);
  v14 = v28;
  v13 = v29;
  v26 = 0;
  if (v28)
  {
    if ((unint64_t)v29 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1984CE074);
    }
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)(v29 + 17));
    *(_DWORD *)v15 = 1;
    v15[1] = v13;
    v26 = (WTF *)v15;
    v16 = v15 + 2;
    memcpy(v15 + 2, v14, v13);
    *((_BYTE *)v16 + v13) = 0;
    v17 = (unint64_t)v28;
    if (v28 == v30)
      goto LABEL_9;
  }
  else
  {
    v17 = 0;
  }
  WTF::fastFree(v17, v6, v7, v8, v9, v10, v11, v12);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "osrEntry", &v26, v9, v10, v11, v12);
  v25 = v26;
  v26 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
    else
      --*(_DWORD *)v25;
  }
}

uint64_t JSC::DFG::tierUpCommon(JSC::VM &,JSC::CallFrame *,JSC::BytecodeIndex,BOOL)::$_1::operator()(JSC::CodeBlock ***a1, JSC::DFG::JITCode *a2)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  JSC::CodeBlock *v14;
  uint64_t result;
  uint64_t v16;
  JSC::Profiler::Database *v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  size_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  size_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  size_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  JSC::Profiler::Database *v81;
  JSC::Profiler::Database *v82;
  WTF *v83;
  void (**v84)(WTF::StringPrintStream *__hidden);
  _BYTE *v85;
  __int128 v86;
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 48);
  if (v3)
  {
    v5 = *(unsigned int **)(v3 + 120);
    if (v5)
    {
      v6 = v5 + 2;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    v8 = v5 + 2;
    v9 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 104))(v5);
    do
    {
      v11 = __ldaxr(v8);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v8));
    if (!v12)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 32))(v5);
    }
    v13 = *(_DWORD *)(v9 + 364) + 1;
    *(_DWORD *)(v9 + 364) = v13;
    v14 = **a1;
    if (v13 < dword_1ECF4C510)
    {
      if (!v14 || !*(_QWORD *)(*((_QWORD *)v14 + 9) + 93016))
        return JSC::DFG::JITCode::setOptimizationThresholdBasedOnCompilationResult((uint64_t)a2, v14, 3, v10);
      v81 = *(JSC::Profiler::Database **)(*((_QWORD *)v14 + 9) + 93016);
      v84 = off_1E3572250;
      v85 = v87;
      v86 = xmmword_199122F80;
      v87[0] = 0;
      WTF::PrintStream::printf((WTF::PrintStream *)&v84, "%s", "OSR entry failed");
      v84[5]((WTF::StringPrintStream *)&v84);
      v40 = v85;
      v83 = 0;
      if (v85)
      {
        v41 = v86;
        if ((unint64_t)v86 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984CE568);
        }
        if ((_QWORD)v86 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x1984CE570);
        }
        v42 = (_QWORD *)WTF::fastMalloc((WTF *)(v86 + 17));
        *(_DWORD *)v42 = 1;
        v42[1] = v41;
        v83 = (WTF *)v42;
        v43 = v42 + 2;
        memcpy(v42 + 2, v40, v41);
        *((_BYTE *)v43 + v41) = 0;
        v44 = (unint64_t)v85;
        if (v85 == v87)
          goto LABEL_46;
      }
      else
      {
        v44 = 0;
      }
      WTF::fastFree(v44, v33, v34, v35, v36, v37, v38, v39);
LABEL_46:
      JSC::Profiler::Database::logEvent(v81, (uint64_t)v14, "delayFTLCompile", &v83, v36, v37, v38, v39);
      v72 = v83;
      v83 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 1)
          WTF::fastFree((unint64_t)v72, v65, v66, v67, v68, v69, v70, v71);
        else
          --*(_DWORD *)v72;
      }
      v14 = **a1;
      return JSC::DFG::JITCode::setOptimizationThresholdBasedOnCompilationResult((uint64_t)a2, v14, 3, v10);
    }
    if (!v14 || !*(_QWORD *)(*((_QWORD *)v14 + 9) + 93016))
      goto LABEL_19;
    v82 = *(JSC::Profiler::Database **)(*((_QWORD *)v14 + 9) + 93016);
    v84 = off_1E3572250;
    v85 = v87;
    v86 = xmmword_199122F80;
    v87[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v84, "%s", "OSR entry failed too many times");
    v84[5]((WTF::StringPrintStream *)&v84);
    v52 = v85;
    v83 = 0;
    if (!v85)
    {
      v56 = 0;
LABEL_51:
      WTF::fastFree(v56, v45, v46, v47, v48, v49, v50, v51);
LABEL_52:
      JSC::Profiler::Database::logEvent(v82, (uint64_t)v14, "delayFTLCompile", &v83, v48, v49, v50, v51);
      v80 = v83;
      v83 = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 1)
          WTF::fastFree((unint64_t)v80, v73, v74, v75, v76, v77, v78, v79);
        else
          --*(_DWORD *)v80;
      }
      v14 = **a1;
LABEL_19:
      v19 = JSC::CodeBlock::baselineVersion((uint64_t)v14);
      v20 = *(_WORD *)(v19 + 106) + 1;
      *(_WORD *)(v19 + 106) = v20;
      if (DWORD2(xmmword_1ECF4C534) < v20)
        *(_WORD *)(v19 + 106) = WORD4(xmmword_1ECF4C534);
      return JSC::DFG::JITCode::clearOSREntryBlockAndResetThresholds(a2, **a1);
    }
    v53 = v86;
    if ((unint64_t)v86 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x1984CE578);
    }
    if ((_QWORD)v86 != -17)
    {
      v54 = (_QWORD *)WTF::fastMalloc((WTF *)(v86 + 17));
      *(_DWORD *)v54 = 1;
      v54[1] = v53;
      v83 = (WTF *)v54;
      v55 = v54 + 2;
      memcpy(v54 + 2, v52, v53);
      *((_BYTE *)v55 + v53) = 0;
      v56 = (unint64_t)v85;
      if (v85 == v87)
        goto LABEL_52;
      goto LABEL_51;
    }
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x1984CE558);
  }
  v16 = (uint64_t)**a1;
  if (v16)
  {
    v17 = *(JSC::Profiler::Database **)(*(_QWORD *)(v16 + 72) + 93016);
    if (v17)
    {
      v84 = off_1E3572250;
      v85 = v87;
      v86 = xmmword_199122F80;
      v87[0] = 0;
      WTF::PrintStream::printf((WTF::PrintStream *)&v84, "%s", "OSR entry code is already invalidated");
      v84[5]((WTF::StringPrintStream *)&v84);
      v28 = v85;
      v83 = 0;
      if (v85)
      {
        v29 = v86;
        if ((unint64_t)v86 >= 0xFFFFFFFFFFFFFFF0)
          goto LABEL_64;
        if ((_QWORD)v86 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x1984CE560);
        }
        v30 = (_QWORD *)WTF::fastMalloc((WTF *)(v86 + 17));
        *(_DWORD *)v30 = 1;
        v30[1] = v29;
        v83 = (WTF *)v30;
        v31 = v30 + 2;
        memcpy(v30 + 2, v28, v29);
        *((_BYTE *)v31 + v29) = 0;
        v32 = (unint64_t)v85;
        if (v85 == v87)
          goto LABEL_40;
      }
      else
      {
        v32 = 0;
      }
      WTF::fastFree(v32, v21, v22, v23, v24, v25, v26, v27);
LABEL_40:
      JSC::Profiler::Database::logEvent(v17, v16, "delayFTLCompile", &v83, v24, v25, v26, v27);
      v64 = v83;
      v83 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 1)
          WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
        else
          --*(_DWORD *)v64;
      }
      v16 = (uint64_t)**a1;
    }
  }
  result = JSC::CodeBlock::baselineVersion(v16);
  v18 = *(_WORD *)(result + 106) + 1;
  *(_WORD *)(result + 106) = v18;
  if (DWORD2(xmmword_1ECF4C534) < v18)
    *(_WORD *)(result + 106) = WORD4(xmmword_1ECF4C534);
  return result;
}

void JSC::VM::logEvent<JSC::DFG::tierUpCommon(JSC::VM&,JSC::CallFrame *,JSC::BytecodeIndex,BOOL)::$_6>(JSC::Profiler::Database *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v25 = off_1E3572250;
  v26 = v28;
  v27 = xmmword_199122F80;
  v28[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "OSR entry failed, OSR entry threshold not met");
  v25[5]((WTF::StringPrintStream *)&v25);
  v12 = v26;
  v11 = v27;
  v24 = 0;
  if (v26)
  {
    if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1984CE6E8);
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)(v27 + 17));
    *(_DWORD *)v13 = 1;
    v13[1] = v11;
    v24 = (WTF *)v13;
    v14 = v13 + 2;
    memcpy(v13 + 2, v12, v11);
    *((_BYTE *)v14 + v11) = 0;
    v15 = (unint64_t)v26;
    if (v26 == v28)
      goto LABEL_9;
  }
  else
  {
    v15 = 0;
  }
  WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "delayFTLCompile", &v24, v7, v8, v9, v10);
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    else
      --*(_DWORD *)v23;
  }
}

uint64_t WTF::dataLog<char [17],WTF::RawPointer,char [18],WTF::RawPointer,char [2]>(const void **a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "OSR entry: From ");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " got entry block ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [12],JSC::BytecodeIndex,char [5],JSC::CodeBlock,char [22],JSC::BytecodeIndex,char [28],char [2]>(JSC::BytecodeIndex *a1, uint64_t a2, JSC::BytecodeIndex *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Inner-loop ");
  JSC::BytecodeIndex::dump(a1, v8);
  WTF::PrintStream::printf(v8, "%s", " in ");
  JSC::CodeBlock::dumpAssumingJITType(a2);
  WTF::PrintStream::printf(v8, "%s", " setting parent loop ");
  JSC::BytecodeIndex::dump(a3, v8);
  WTF::PrintStream::printf(v8, "%s", "'s trigger and backing off.");
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [27],WTF::RawPointer,char [18],WTF::RawPointer,char [2]>(const void **a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Immediate OSR entry: From ");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " got entry block ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t *WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  *a1 = 0;
  v3 = (_QWORD *)*a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v7 = WTF::HashTable<JSC::B3::SSACalculator::Variable *,WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>>,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v15 = WTF::fastZeroedMalloc(8 * v7 + 16, v8, v9, v10, v11, v12, v13, v14);
      *a1 = v15 + 16;
      *(_DWORD *)(v15 + 12) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v16 = WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::begin((_QWORD **)a2);
      v17 = v16;
      v18 = a2;
      v20 = v19;
      v21 = *v18;
      v22 = v21 ? v21 + 8 * *(unsigned int *)(v21 - 4) : 0;
      if ((uint64_t *)v22 != v16)
      {
        do
        {
          v23 = (_QWORD *)WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::JSCell *>,WTF::DefaultHash<JSC::JSCell *>>,JSC::JSCell *>(a1, v17);
          v24 = *v17++;
          *v23 = v24;
          while (v17 != v20)
          {
            if ((unint64_t)(*v17 + 1) > 1)
              goto LABEL_12;
            ++v17;
          }
          v17 = v20;
LABEL_12:
          ;
        }
        while (v17 != (uint64_t *)v22);
      }
    }
  }
  return a1;
}

_QWORD *WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[v2];
  if (!*((_DWORD *)result - 3))
    return &result[v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::JSCell *>,WTF::DefaultHash<JSC::JSCell *>>,JSC::JSCell *>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 8 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 8 * v9;
}

uint64_t WTF::dataLog<char const*,char [2]>(const char **a1, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", *a1);
  WTF::PrintStream::printf(v6, "%s", a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t JSC::DFG::Phase::Phase(uint64_t a1, JSC::DFG::Graph *a2, uint64_t a3, uint64_t a4)
{
  JSC::DFG::Graph *v4;
  uint64_t v6;
  int v7;
  JSC::DFG::Graph *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  int v20;
  char v21;
  WTF *v22;
  void (**v23)(WTF::StringPrintStream *__hidden);
  WTF *v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v4 = a2;
  v27 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = -1;
  *(_DWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  v6 = a1 + 40;
  *(_QWORD *)(a1 + 48) = a4;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (!(_BYTE)qword_1ECF4C332)
    goto LABEL_2;
  v23 = off_1E3572250;
  v24 = (WTF *)v26;
  v25 = xmmword_199122F80;
  v26[0] = 0;
  JSC::DFG::Graph::dump(a2, (WTF::PrintStream *)&v23, 0);
  WTF::StringPrintStream::toCString(&v23, (uint64_t *)&v22);
  v18 = v22;
  v22 = 0;
  v19 = *(WTF **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v18;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 1;
    if (*(_DWORD *)v19 == 1)
    {
      WTF::fastFree((unint64_t)v19, v11, v12, v13, v14, v15, v16, v17);
      v19 = v22;
      v22 = 0;
      if (!v19)
        goto LABEL_13;
      v20 = *(_DWORD *)v19 - 1;
      if (*(_DWORD *)v19 == 1)
      {
        WTF::fastFree((unint64_t)v19, v11, v12, v13, v14, v15, v16, v17);
        goto LABEL_13;
      }
    }
    *(_DWORD *)v19 = v20;
  }
LABEL_13:
  if (v24 != (WTF *)v26)
    WTF::fastFree((unint64_t)v24, v11, v12, v13, v14, v15, v16, v17);
  v4 = *(JSC::DFG::Graph **)(a1 + 32);
LABEL_2:
  if ((*(_DWORD *)(*((_QWORD *)v4 + 3) + 16) & 0xFFFFFFFE) == 4)
    v7 = byte_1ECF4C325;
  else
    v7 = byte_1ECF4C324;
  if (byte_1ECF4C323 | v7)
  {
    WTF::dataLog<JSC::DFG::Prefix,char [21],WTF::ASCIILiteral,char [3]>((uint64_t)v4 + 1088, "Beginning DFG phase ", v6, ".\n");
    WTF::dataLog<JSC::DFG::Prefix,char [21],WTF::ASCIILiteral,char [3]>(*(_QWORD *)(a1 + 32) + 1088, "Before ", v6, ":\n");
    v9 = *(JSC::DFG::Graph **)(a1 + 32);
    v10 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v10 != -1)
    {
      v23 = (void (**)(WTF::StringPrintStream *__hidden))&v21;
      v22 = (WTF *)&v23;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    JSC::DFG::Graph::dump(v9, (WTF::PrintStream *)WTF::s_file, 0);
  }
  return a1;
}

void JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::performAnalysis(JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  int v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  WTF *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  unsigned int v72;
  int *v73;
  int v74;
  int v75;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  unsigned int v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  JSC::DFG::Node *v130;
  _QWORD *v131;
  JSC::DFG::Node *v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  unsigned int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  _BYTE *v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t *v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  int v268;
  uint64_t v269;
  int *v270;
  int v271;
  uint64_t v272;
  int v273;
  int v274;
  unsigned int v275;
  int *v276;
  int v277;
  int v278;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  uint64_t v284;
  int v285;
  int v286;
  unsigned int v287;
  int *v288;
  int v289;
  int v290;
  int v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  _QWORD *v296;
  _QWORD *v297;
  uint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  _QWORD *v307;
  _QWORD *v308;
  _QWORD *v309;
  int v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unsigned int v314;
  uint64_t v315;
  int v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  JSC::DFG::Node **v320;
  uint64_t v321;
  uint64_t v322;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v323;
  void *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  JSC::DFG::Node **v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  unsigned int v335;
  int v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  JSC::DFG::Node *v341;
  JSC::DFG::Node *v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t *v345;
  unsigned int v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  int v366;
  _QWORD *v367;
  unsigned int v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  unsigned int v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  _QWORD *v382;
  JSC::DFG::Node *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t *v386;
  unsigned int v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  unint64_t v395;
  unsigned int v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  int v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t *v405;
  __int128 *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  void *v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t *v430;
  unsigned int v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  void *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  __int128 *v449;
  JSC::DFG::Node *v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t *v454;
  int v455;
  uint64_t v456;
  unint64_t v457;
  unsigned int v459;
  uint64_t v460;
  uint64_t v461;
  unsigned int v462;
  unsigned int v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  uint64_t v472;
  int v473;
  int v474;
  char v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t *v478;
  JSC::DFG::Node *v479;
  JSC::DFG::Node *v480;
  uint64_t v481;
  unsigned int v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  __int128 *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t *v503;
  uint64_t v504;
  void *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  void *v512;
  uint64_t v513;
  unsigned int v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  uint64_t v518;
  int v519;
  int v520;
  int v521;
  unsigned int v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t v525;
  uint64_t v526;
  int v527;
  int v528;
  uint64_t v529;
  unint64_t v530;
  int v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t *v534;
  unsigned int v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t *v543;
  unsigned int v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  uint64_t v548;
  int v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t *v554;
  uint64_t v555;
  unint64_t v556;
  uint64_t *v557;
  unsigned int v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t v561;
  uint64_t v562;
  int v563;
  unsigned int v564;
  unint64_t v565;
  unint64_t v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t v569;
  int v570;
  _QWORD *v571;
  unsigned int v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned int v582;
  uint64_t v583;
  int *v584;
  int v585;
  int v586;
  int v588;
  int *v589;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  JSC::DFG::Node *v594;
  int v595;
  _QWORD *v596;
  unsigned int v597;
  unint64_t v598;
  unint64_t v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  int v603;
  uint64_t v604;
  unsigned int v605;
  unint64_t v606;
  unint64_t v607;
  unint64_t v608;
  uint64_t v609;
  int v610;
  int v611;
  int *v612;
  uint64_t v613;
  unint64_t v614;
  unint64_t v615;
  unint64_t v616;
  unint64_t v617;
  uint64_t v618;
  int v619;
  _QWORD *v620;
  unsigned int v621;
  unint64_t v622;
  unint64_t v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  int v627;
  JSC::DFG::Node *v628;
  uint64_t *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  unsigned int v644;
  unint64_t v645;
  unint64_t v646;
  unint64_t v647;
  uint64_t v648;
  int v649;
  int *v650;
  JSC::DFG::Node *v652;
  uint64_t v653;
  int v654;
  JSC::DFG::Node *v655;
  JSC::DFG::Node *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t *v661;
  uint64_t v662;
  int v663;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  char v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t *v675;
  void *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t *v685;
  void *v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  int *v702;
  int *v703;
  uint64_t v704;
  int v705;
  uint64_t v706;
  uint64_t *v707;
  uint64_t *v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v713;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v714;
  uint64_t v715;
  char v716;
  uint64_t *v717;
  uint64_t *v718;
  char v719;
  int v720;
  WTF *v721;
  uint64_t *v722;
  uint64_t *v723;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v724;
  unint64_t StatusReg;
  __int128 v726;
  uint64_t v727;
  char v728;
  uint64_t v729;
  WTF *v730;
  int v731;
  unsigned int v732;
  uint64_t v733;
  __int128 v734;
  __int128 v735;
  uint64_t v736[2];

  v9 = *(unsigned int *)(*((_QWORD *)this + 4) + 60);
  if ((_DWORD)v9)
  {
    v10 = 16;
    if (v9 > 0x10)
      v10 = *(unsigned int *)(*((_QWORD *)this + 4) + 60);
    if (v10 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1984D2358);
    }
    v11 = 40 * v10;
    v12 = (void *)WTF::fastMalloc((WTF *)(40 * v10));
    v13 = (v11 & 0xFFFFFFF8) / 0x28;
    bzero(v12, 40 * ((40 * (unint64_t)v9 - 40) / 0x28) + 40);
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v14 = *((unsigned int *)this + 121);
  if ((_DWORD)v14)
  {
    v674 = 40 * v14;
    v675 = (uint64_t *)(*((_QWORD *)this + 59) + 16);
    do
    {
      v683 = *(v675 - 1);
      if (v683)
        WTF::fastFree(v683 - 16, a2, a3, a4, a5, a6, a7, a8);
      v675 += 5;
      v674 -= 40;
    }
    while (v674);
  }
  v15 = *((_QWORD *)this + 59);
  if (v15)
  {
    *((_QWORD *)this + 59) = 0;
    *((_DWORD *)this + 120) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  *((_QWORD *)this + 59) = v12;
  *((_DWORD *)this + 120) = v13;
  *((_DWORD *)this + 121) = v9;
  v16 = *(unsigned int *)(*((_QWORD *)this + 4) + 60);
  if ((_DWORD)v16)
  {
    v17 = 16;
    if (v16 > 0x10)
      v17 = *(unsigned int *)(*((_QWORD *)this + 4) + 60);
    if (v17 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1984D2360);
    }
    v18 = 40 * v17;
    v19 = (void *)WTF::fastMalloc((WTF *)(40 * v17));
    v20 = (v18 & 0xFFFFFFF8) / 0x28;
    bzero(v19, 40 * ((40 * (unint64_t)v16 - 40) / 0x28) + 40);
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  v21 = *((unsigned int *)this + 125);
  if ((_DWORD)v21)
  {
    v684 = 40 * v21;
    v685 = (uint64_t *)(*((_QWORD *)this + 61) + 16);
    do
    {
      v693 = *(v685 - 1);
      if (v693)
        WTF::fastFree(v693 - 16, a2, a3, a4, a5, a6, a7, a8);
      v685 += 5;
      v684 -= 40;
    }
    while (v684);
  }
  v22 = *((_QWORD *)this + 61);
  if (v22)
  {
    *((_QWORD *)this + 61) = 0;
    *((_DWORD *)this + 124) = 0;
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  }
  v23 = (_QWORD *)((char *)this + 512);
  *((_QWORD *)this + 61) = v19;
  v723 = (uint64_t *)((char *)this + 520);
  v724 = (JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)this + 504);
  v722 = (uint64_t *)((char *)this + 536);
  *((_DWORD *)this + 124) = v20;
  *((_DWORD *)this + 125) = v16;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    JSC::DFG::Graph::blocksInPreOrder(*((JSC::DFG::Graph **)this + 4), a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v730);
    v24 = v730;
    if (v732)
    {
      v719 = 0;
      v721 = (WTF *)((char *)v730 + 8 * v732);
      while (1)
      {
        v25 = *(_QWORD *)v24;
        v26 = *(_DWORD *)(*(_QWORD *)v24 + 8);
        if (*((_DWORD *)this + 121) <= v26)
        {
          __break(0xC471u);
          JUMPOUT(0x1984D22A8);
        }
        v27 = *((_QWORD *)this + 59);
        v28 = v27 + 40 * v26;
        *(_BYTE *)v28 = 1;
        *((_BYTE *)this + 504) = 1;
        WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable((uint64_t *)&v726, (_QWORD *)(v28 + 8), a3, a4, a5, a6, a7, a8);
        v36 = *((_QWORD *)this + 64);
        *((_QWORD *)this + 64) = v726;
        *(_QWORD *)&v726 = v36;
        if (v36)
          WTF::fastFree(v36 - 16, v29, v30, v31, v32, v33, v34, v35);
        v37 = v27 + 40 * v26;
        *((_BYTE *)this + 528) = *(_BYTE *)(v37 + 24);
        v50 = *(unsigned int *)(v25 + 220);
        if ((_DWORD)v50)
        {
          v51 = *(uint64_t **)(v25 + 208);
          v52 = &v51[v50];
          do
          {
            v53 = *v51;
            v736[0] = 0;
            v54 = *(unsigned __int16 *)(v53 + 18);
            if (v54 > 0x85)
            {
              if (*(unsigned __int16 *)(v53 + 18) <= 0x158u)
              {
                if (*(unsigned __int16 *)(v53 + 18) <= 0xAAu)
                {
                  switch(*(_WORD *)(v53 + 18))
                  {
                    case 0x98:
                    case 0x99:
                      v78 = *(_QWORD *)(v53 + 32);
                      v79 = v78 & 0xFF00FFFFFFFFFFFFLL;
                      v57 = v80;
                      if (v80 && *((_DWORD *)v80 + 2) == 1)
                      {
                        v520 = *(_DWORD *)(*(_QWORD *)(v53 + 72) + 4);
                        v521 = 11;
                        goto LABEL_518;
                      }
                      v81 = (_QWORD *)*v23;
                      if (!*v23)
                        goto LABEL_32;
                      v143 = *(_QWORD *)(v53 + 24);
                      v144 = v143 & 0xFF00FFFFFFFFFFFFLL;
                      v145 = *((_DWORD *)v81 - 2);
                      v146 = ((v143 & 0xFF00FFFFFFFFFFFFLL) + ~(v143 << 32)) ^ (((v143 & 0xFF00FFFFFFFFFFFFLL)
                                                                               + ~(v143 << 32)) >> 22);
                      v147 = 9 * ((v146 + ~(v146 << 13)) ^ ((v146 + ~(v146 << 13)) >> 8));
                      v148 = (v147 ^ (v147 >> 15)) + ~((v147 ^ (v147 >> 15)) << 27);
                      v149 = v145 & ((v148 >> 31) ^ v148);
                      v150 = v81[2 * v149];
                      if (v150 == v144)
                        goto LABEL_433;
                      v151 = 1;
                      while (v150)
                      {
                        v149 = ((_DWORD)v149 + v151) & v145;
                        v150 = v81[2 * v149];
                        ++v151;
                        if (v150 == v144)
                          goto LABEL_433;
                      }
                      v149 = *((unsigned int *)v81 - 1);
LABEL_433:
                      if (v149 == *((_DWORD *)v81 - 1))
                        goto LABEL_434;
                      v451 = (JSC::DFG::Node *)v81[2 * v149 + 1];
                      if (!v451)
                        goto LABEL_434;
                      v81 = (_QWORD *)*v23;
                      if (!*v23)
                        goto LABEL_32;
                      v78 = *(_QWORD *)(v53 + 32);
                      v79 = v78 & 0xFF00FFFFFFFFFFFFLL;
                      v145 = *((_DWORD *)v81 - 2);
LABEL_434:
                      v362 = (v79 + ~(v78 << 32)) ^ ((v79 + ~(v78 << 32)) >> 22);
                      v363 = 9 * ((v362 + ~(v362 << 13)) ^ ((v362 + ~(v362 << 13)) >> 8));
                      v364 = (v363 ^ (v363 >> 15)) + ~((v363 ^ (v363 >> 15)) << 27);
                      v350 = v145 & ((v364 >> 31) ^ v364);
                      v365 = v81[2 * v350];
                      if (v365 == v79)
                        goto LABEL_144;
                      v366 = 1;
                      do
                      {
                        if (!v365)
                          goto LABEL_546;
                        v350 = ((_DWORD)v350 + v366) & v145;
                        v365 = v81[2 * v350];
                        ++v366;
                      }
                      while (v365 != v79);
                      goto LABEL_144;
                    case 0x9A:
                      v452 = *(_QWORD *)(v53 + 24);
                      v453 = v452 & 0xFF00FFFFFFFFFFFFLL;
                      if (!v454 || (v658 = (uint64_t)v454, *((_DWORD *)v454 + 2) != 1))
                      {
                        v116 = (_QWORD *)*v23;
                        if (!*v23)
                          goto LABEL_31;
                        v522 = *((_DWORD *)v116 - 2);
                        v523 = (v453 + ~(v452 << 32)) ^ ((v453 + ~(v452 << 32)) >> 22);
                        v524 = 9 * ((v523 + ~(v523 << 13)) ^ ((v523 + ~(v523 << 13)) >> 8));
                        v525 = (v524 ^ (v524 >> 15)) + ~((v524 ^ (v524 >> 15)) << 27);
                        v379 = v522 & ((v525 >> 31) ^ v525);
                        v526 = v116[2 * v379];
                        if (v526 != v453)
                        {
                          v527 = 1;
                          do
                          {
                            if (!v526)
                              goto LABEL_450;
                            v379 = ((_DWORD)v379 + v527) & v522;
                            v526 = v116[2 * v379];
                            ++v527;
                          }
                          while (v526 != v453);
                        }
                        goto LABEL_451;
                      }
                      v659 = *(_QWORD *)(v53 + 72);
                      v733 = 0;
                      v660 = *(unsigned int *)(v659 + 20);
                      if (!(_DWORD)v660)
                        goto LABEL_844;
                      v716 = 0;
                      v714 = (JSC::DFG::_anonymous_namespace_::LocalHeap *)v659;
                      v661 = *(uint64_t **)(v659 + 8);
                      v718 = v454 + 3;
                      v662 = 32 * v660;
                      do
                      {
                        if (WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::overlaps(v718, v661))
                        {
                          v663 = *((_DWORD *)v661 + 6);
                          if (v663 == 1 || v663 == 3)
                          {
                            v716 = 1;
                          }
                          else
                          {
                            if (v663 != 2)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1984D22F8);
                            }
                            v665 = *v661;
                            if ((*v661 & 1) != 0)
                            {
                              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine(&v733, v661);
                            }
                            else
                            {
                              v666 = v665 & 0xFFFFFFFFFFFFFFFCLL;
                              if ((v665 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                              {
                                if ((v733 & 1) != 0)
                                {
                                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(&v733, v666);
                                }
                                else if ((v733 & 0xFFFFFFFFFFFFFFFCLL) != v666)
                                {
                                  if ((v733 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                                  {
                                    v712 = v665 & 0xFFFFFFFFFFFFFFFCLL;
                                    v668 = WTF::fastMalloc((WTF *)0x28);
                                    *(_QWORD *)v668 = 0x400000002;
                                    v669 = v733;
                                    *(_QWORD *)(v668 + 8) = v733 & 0xFFFFFFFFFFFFFFFCLL;
                                    *(_QWORD *)(v668 + 16) = v712;
                                    v667 = v669 & 2 | (unint64_t)v668 | 1;
                                  }
                                  else
                                  {
                                    v667 = v733 & 2 | v666;
                                  }
                                  v733 = v667;
                                }
                              }
                            }
                          }
                        }
                        v661 += 4;
                        v662 -= 32;
                      }
                      while (v662);
                      if ((v716 & 1) == 0 && (v733 & 0xFFFFFFFFFFFFFFFDLL) != 0)
                      {
                        v694 = *(unsigned int *)v714;
                        if ((WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::isSubsetOf(v718, &v733) & 1) == 0)
                        if (v701)
                        {
                          *(_QWORD *)&v735 = v53;
                          *(_QWORD *)&v734 = v701;
                          WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>((uint64_t *)this + 64, (uint64_t *)&v735, (uint64_t *)&v734, v45, v46, v47, v48, v49, (uint64_t)&v726);
                        }
                      }
                      else
                      {
LABEL_844:
                      }
                      v513 = v733;
                      if ((v733 & 1) == 0)
                        goto LABEL_31;
                      goto LABEL_576;
                    case 0x9B:
                      v109 = *(_QWORD *)(v53 + 32);
                      v110 = v109 & 0xFF00FFFFFFFFFFFFLL;
                      v57 = v111;
                      if (!v111 || *((_DWORD *)v111 + 2) != 1)
                      {
                        v112 = (_QWORD *)*v23;
                        if (!*v23)
                          goto LABEL_32;
                        v394 = *(_QWORD *)(v53 + 24);
                        v395 = v394 & 0xFF00FFFFFFFFFFFFLL;
                        v396 = *((_DWORD *)v112 - 2);
                        v397 = ((v394 & 0xFF00FFFFFFFFFFFFLL) + ~(v394 << 32)) ^ (((v394 & 0xFF00FFFFFFFFFFFFLL)
                                                                                 + ~(v394 << 32)) >> 22);
                        v398 = 9 * ((v397 + ~(v397 << 13)) ^ ((v397 + ~(v397 << 13)) >> 8));
                        v399 = (v398 ^ (v398 >> 15)) + ~((v398 ^ (v398 >> 15)) << 27);
                        v400 = v396 & ((v399 >> 31) ^ v399);
                        v401 = v112[2 * v400];
                        if (v401 != v395)
                        {
                          v402 = 1;
                          while (v401)
                          {
                            v400 = ((_DWORD)v400 + v402) & v396;
                            v401 = v112[2 * v400];
                            ++v402;
                            if (v401 == v395)
                              goto LABEL_472;
                          }
                          v400 = *((unsigned int *)v112 - 1);
                        }
LABEL_472:
                        if (v400 != *((_DWORD *)v112 - 1))
                        {
                          v479 = (JSC::DFG::Node *)v112[2 * v400 + 1];
                          if (v479)
                          {
                            v112 = (_QWORD *)*v23;
                            if (!*v23)
                              goto LABEL_32;
                            v109 = *(_QWORD *)(v53 + 32);
                            v110 = v109 & 0xFF00FFFFFFFFFFFFLL;
                            v396 = *((_DWORD *)v112 - 2);
                          }
                        }
                        v414 = (v110 + ~(v109 << 32)) ^ ((v110 + ~(v109 << 32)) >> 22);
                        v415 = 9 * ((v414 + ~(v414 << 13)) ^ ((v414 + ~(v414 << 13)) >> 8));
                        v416 = (v415 ^ (v415 >> 15)) + ~((v415 ^ (v415 >> 15)) << 27);
                        v417 = v396 & ((v416 >> 31) ^ v416);
                        v418 = v112[2 * v417];
                        if (v418 != v110)
                        {
                          v419 = 1;
                          while (v418)
                          {
                            v417 = ((_DWORD)v417 + v419) & v396;
                            v418 = v112[2 * v417];
                            ++v419;
                            if (v418 == v110)
                              goto LABEL_479;
                          }
                          v417 = *((unsigned int *)v112 - 1);
                        }
LABEL_479:
                        if (v417 != *((_DWORD *)v112 - 1))
                        {
                          v480 = (JSC::DFG::Node *)v112[2 * v417 + 1];
                          if (v480)
                          {
                            v112 = (_QWORD *)*v23;
                            if (!*v23)
                              goto LABEL_32;
                            v396 = *((_DWORD *)v112 - 2);
                          }
                        }
                        v420 = *(_QWORD *)(v53 + 40);
                        v421 = v420 & 0xFF00FFFFFFFFFFFFLL;
                        v422 = ((v420 & 0xFF00FFFFFFFFFFFFLL) + ~(v420 << 32)) ^ (((v420 & 0xFF00FFFFFFFFFFFFLL)
                                                                                 + ~(v420 << 32)) >> 22);
                        v423 = 9 * ((v422 + ~(v422 << 13)) ^ ((v422 + ~(v422 << 13)) >> 8));
                        v424 = (v423 ^ (v423 >> 15)) + ~((v423 ^ (v423 >> 15)) << 27);
                        v425 = v396 & ((v424 >> 31) ^ v424);
                        v426 = v112[2 * v425];
                        if (v426 == v421)
                          goto LABEL_541;
                        v427 = 1;
                        do
                        {
                          if (!v426)
                            goto LABEL_540;
                          v425 = ((_DWORD)v425 + v427) & v396;
                          v426 = v112[2 * v425];
                          ++v427;
                        }
                        while (v426 != v421);
                        goto LABEL_541;
                      }
                      v336 = *(_DWORD *)(*(_QWORD *)(v53 + 72) + 4);
                      LODWORD(v734) = 11;
                      DWORD1(v734) = v336;
                      v337 = *(_QWORD *)(v53 + 40);
                      v338 = v337 & 0xFF00FFFFFFFFFFFFLL;
                      *(_QWORD *)&v735 = v337 & 0xFF00FFFFFFFFFFFFLL;
                      *((_QWORD *)&v735 + 1) = 0;
                      if ((v337 & 0xFF00FFFFFFFFFFFFLL) == 0)
                        goto LABEL_143;
                      v339 = *(unsigned __int16 *)((v337 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                      if (v339 > 2)
                        goto LABEL_143;
                      v340 = *(_QWORD *)(v338 + 72);
                      *((_QWORD *)&v735 + 1) = v340;
                      if (!(_DWORD)v339)
                        goto LABEL_143;
                      if ((_DWORD)v339 != 1)
                        goto LABEL_868;
                      break;
                    case 0x9C:
                    case 0x9D:
                    case 0x9E:
                    case 0x9F:
                    case 0xA0:
                    case 0xA1:
                    case 0xA2:
                    case 0xA3:
                    case 0xA4:
                      goto LABEL_29;
                    case 0xA5:
                      v428 = *(_QWORD *)(v53 + 24);
                      v429 = v428 & 0xFF00FFFFFFFFFFFFLL;
                      v57 = v430;
                      if (v430 && (*((_DWORD *)v430 + 2) - 3) < 3)
                      {
                        v520 = 0;
                        v521 = 8;
                        goto LABEL_518;
                      }
                      v81 = (_QWORD *)*v23;
                      if (!*v23)
                        goto LABEL_32;
                      v431 = *((_DWORD *)v81 - 2);
                      v432 = (v429 + ~(v428 << 32)) ^ ((v429 + ~(v428 << 32)) >> 22);
                      v433 = 9 * ((v432 + ~(v432 << 13)) ^ ((v432 + ~(v432 << 13)) >> 8));
                      v434 = (v433 ^ (v433 >> 15)) + ~((v433 ^ (v433 >> 15)) << 27);
                      v350 = v431 & ((v434 >> 31) ^ v434);
                      v435 = v81[2 * v350];
                      if (v435 != v429)
                      {
                        v474 = 1;
                        do
                        {
                          if (!v435)
                            goto LABEL_546;
                          v350 = ((_DWORD)v350 + v474) & v431;
                          v435 = v81[2 * v350];
                          ++v474;
                        }
                        while (v435 != v429);
                      }
                      goto LABEL_144;
                    case 0xA6:
                      v532 = *(_QWORD *)(v53 + 24);
                      v533 = v532 & 0xFF00FFFFFFFFFFFFLL;
                      v57 = v534;
                      if (v534 && *((_DWORD *)v534 + 2) == 2)
                      {
                        v520 = 0;
                        v521 = 1;
                        goto LABEL_518;
                      }
                      v81 = (_QWORD *)*v23;
                      if (!*v23)
                        goto LABEL_32;
                      v535 = *((_DWORD *)v81 - 2);
                      v536 = (v533 + ~(v532 << 32)) ^ ((v533 + ~(v532 << 32)) >> 22);
                      v537 = 9 * ((v536 + ~(v536 << 13)) ^ ((v536 + ~(v536 << 13)) >> 8));
                      v538 = (v537 ^ (v537 >> 15)) + ~((v537 ^ (v537 >> 15)) << 27);
                      v350 = v535 & ((v538 >> 31) ^ v538);
                      v539 = v81[2 * v350];
                      if (v539 != v533)
                      {
                        v540 = 1;
                        do
                        {
                          if (!v539)
                            goto LABEL_546;
                          v350 = ((_DWORD)v350 + v540) & v535;
                          v539 = v81[2 * v350];
                          ++v540;
                        }
                        while (v539 != v533);
                      }
                      goto LABEL_144;
                    default:
                      if (v54 == 135)
                      {
                        v403 = *(_QWORD *)(v53 + 24);
                        v404 = v403 & 0xFF00FFFFFFFFFFFFLL;
                        v57 = v405;
                        if (v405 && *((_DWORD *)v405 + 2) == 1)
                        {
                          *(_QWORD *)&v734 = 13;
                          v406 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), *(_QWORD *)(*(_QWORD *)(v53 + 72) + 8), v44, v45, v46, v47, v48, v49);
                          *(_QWORD *)&v735 = 0;
                          *((_QWORD *)&v735 + 1) = v406;
                          WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v726, v736, &v734, &v735);
                          *(_QWORD *)&v726 = *(_QWORD *)(*(_QWORD *)(v53 + 72) + 8);
                          if ((v726 & 1) != 0)
                            WTF::fastFree(v726 & 0xFFFFFFFFFFFFFFFCLL, v413, v44, v45, v46, v47, v48, v49);
                          goto LABEL_32;
                        }
                        v81 = (_QWORD *)*v23;
                        if (!*v23)
                          goto LABEL_32;
                        v514 = *((_DWORD *)v81 - 2);
                        v515 = (v404 + ~(v403 << 32)) ^ ((v404 + ~(v403 << 32)) >> 22);
                        v516 = 9 * ((v515 + ~(v515 << 13)) ^ ((v515 + ~(v515 << 13)) >> 8));
                        v517 = (v516 ^ (v516 >> 15)) + ~((v516 ^ (v516 >> 15)) << 27);
                        v350 = v514 & ((v517 >> 31) ^ v517);
                        v518 = v81[2 * v350];
                        if (v518 != v404)
                        {
                          v519 = 1;
                          do
                          {
                            if (!v518)
                              goto LABEL_546;
                            v350 = ((_DWORD)v350 + v519) & v514;
                            v518 = v81[2 * v350];
                            ++v519;
                          }
                          while (v518 != v404);
                        }
                      }
                      else
                      {
                        if (v54 != 134)
                          goto LABEL_29;
                        v555 = *(_QWORD *)(v53 + 24);
                        v556 = v555 & 0xFF00FFFFFFFFFFFFLL;
                        v57 = v557;
                        if (v557 && (*((_DWORD *)v557 + 2) - 3) < 3)
                        {
                          v520 = 0;
                          v521 = 9;
                          goto LABEL_518;
                        }
                        v81 = (_QWORD *)*v23;
                        if (!*v23)
                          goto LABEL_32;
                        v558 = *((_DWORD *)v81 - 2);
                        v559 = (v556 + ~(v555 << 32)) ^ ((v556 + ~(v555 << 32)) >> 22);
                        v560 = 9 * ((v559 + ~(v559 << 13)) ^ ((v559 + ~(v559 << 13)) >> 8));
                        v561 = (v560 ^ (v560 >> 15)) + ~((v560 ^ (v560 >> 15)) << 27);
                        v350 = v558 & ((v561 >> 31) ^ v561);
                        v562 = v81[2 * v350];
                        if (v562 != v556)
                        {
                          v563 = 1;
                          do
                          {
                            if (!v562)
                              goto LABEL_546;
                            v350 = ((_DWORD)v350 + v563) & v558;
                            v562 = v81[2 * v350];
                            ++v563;
                          }
                          while (v562 != v556);
                        }
                      }
                      goto LABEL_144;
                  }
                  goto LABEL_829;
                }
                if (*(unsigned __int16 *)(v53 + 18) <= 0x102u)
                {
                  switch(*(_WORD *)(v53 + 18))
                  {
                    case 0xAB:
                      v343 = *(_QWORD *)(v53 + 24);
                      v344 = v343 & 0xFF00FFFFFFFFFFFFLL;
                      v57 = v345;
                      if (v345 && *((_DWORD *)v345 + 2) == 2)
                      {
                        v520 = *(_DWORD *)(v53 + 72);
                        v521 = 6;
                        goto LABEL_518;
                      }
                      v81 = (_QWORD *)*v23;
                      if (!*v23)
                        goto LABEL_32;
                      v346 = *((_DWORD *)v81 - 2);
                      v347 = (v344 + ~(v343 << 32)) ^ ((v344 + ~(v343 << 32)) >> 22);
                      v348 = 9 * ((v347 + ~(v347 << 13)) ^ ((v347 + ~(v347 << 13)) >> 8));
                      v349 = (v348 ^ (v348 >> 15)) + ~((v348 ^ (v348 >> 15)) << 27);
                      v350 = v346 & ((v349 >> 31) ^ v349);
                      v351 = v81[2 * v350];
                      if (v351 != v344)
                      {
                        v352 = 1;
                        do
                        {
                          if (!v351)
                            goto LABEL_546;
                          v350 = ((_DWORD)v350 + v352) & v346;
                          v351 = v81[2 * v350];
                          ++v352;
                        }
                        while (v351 != v344);
                      }
                      goto LABEL_144;
                    case 0xAC:
                      v384 = *(_QWORD *)(v53 + 24);
                      v385 = v384 & 0xFF00FFFFFFFFFFFFLL;
                      v57 = v386;
                      if (!v386 || *((_DWORD *)v386 + 2) != 2)
                      {
                        v112 = (_QWORD *)*v23;
                        if (!*v23)
                          goto LABEL_32;
                        v387 = *((_DWORD *)v112 - 2);
                        v388 = (v385 + ~(v384 << 32)) ^ ((v385 + ~(v384 << 32)) >> 22);
                        v389 = 9 * ((v388 + ~(v388 << 13)) ^ ((v388 + ~(v388 << 13)) >> 8));
                        v390 = (v389 ^ (v389 >> 15)) + ~((v389 ^ (v389 >> 15)) << 27);
                        v391 = v387 & ((v390 >> 31) ^ v390);
                        v392 = v112[2 * v391];
                        if (v392 != v385)
                        {
                          v393 = 1;
                          while (v392)
                          {
                            v391 = ((_DWORD)v391 + v393) & v387;
                            v392 = v112[2 * v391];
                            ++v393;
                            if (v392 == v385)
                              goto LABEL_534;
                          }
                          v391 = *((unsigned int *)v112 - 1);
                        }
LABEL_534:
                        if (v391 != *((_DWORD *)v112 - 1))
                        {
                          v594 = (JSC::DFG::Node *)v112[2 * v391 + 1];
                          if (v594)
                          {
                            v112 = (_QWORD *)*v23;
                            if (!*v23)
                              goto LABEL_32;
                            v387 = *((_DWORD *)v112 - 2);
                          }
                        }
                        v467 = *(_QWORD *)(v53 + 32);
                        v468 = v467 & 0xFF00FFFFFFFFFFFFLL;
                        v469 = ((v467 & 0xFF00FFFFFFFFFFFFLL) + ~(v467 << 32)) ^ (((v467 & 0xFF00FFFFFFFFFFFFLL)
                                                                                 + ~(v467 << 32)) >> 22);
                        v470 = 9 * ((v469 + ~(v469 << 13)) ^ ((v469 + ~(v469 << 13)) >> 8));
                        v471 = (v470 ^ (v470 >> 15)) + ~((v470 ^ (v470 >> 15)) << 27);
                        v425 = v387 & ((v471 >> 31) ^ v471);
                        v472 = v112[2 * v425];
                        if (v472 == v468)
                          goto LABEL_541;
                        v473 = 1;
                        do
                        {
                          if (!v472)
                            goto LABEL_540;
                          v425 = ((_DWORD)v425 + v473) & v387;
                          v472 = v112[2 * v425];
                          ++v473;
                        }
                        while (v472 != v468);
                        goto LABEL_541;
                      }
                      v455 = *(_DWORD *)(v53 + 72);
                      LODWORD(v734) = 6;
                      DWORD1(v734) = v455;
                      v456 = *(_QWORD *)(v53 + 32);
                      v457 = v456 & 0xFF00FFFFFFFFFFFFLL;
                      *(_QWORD *)&v735 = v456 & 0xFF00FFFFFFFFFFFFLL;
                      *((_QWORD *)&v735 + 1) = 0;
                      if ((v456 & 0xFF00FFFFFFFFFFFFLL) == 0)
                        goto LABEL_143;
                      v339 = *(unsigned __int16 *)((v456 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                      if (v339 > 2)
                        goto LABEL_143;
                      v340 = *(_QWORD *)(v457 + 72);
                      *((_QWORD *)&v735 + 1) = v340;
                      if (!(_DWORD)v339)
                        goto LABEL_143;
                      if ((_DWORD)v339 == 1)
                        goto LABEL_829;
                      goto LABEL_868;
                    case 0xB3:
                      v552 = *(_QWORD *)(v53 + 24);
                      v553 = v552 & 0xFF00FFFFFFFFFFFFLL;
                      v57 = v554;
                      if (v554 && *((_DWORD *)v554 + 2) == 8)
                      {
                        v520 = 0;
                        v521 = 19;
                        goto LABEL_518;
                      }
                      v81 = (_QWORD *)*v23;
                      if (!*v23)
                        goto LABEL_32;
                      v605 = *((_DWORD *)v81 - 2);
                      v606 = (v553 + ~(v552 << 32)) ^ ((v553 + ~(v552 << 32)) >> 22);
                      v607 = 9 * ((v606 + ~(v606 << 13)) ^ ((v606 + ~(v606 << 13)) >> 8));
                      v608 = (v607 ^ (v607 >> 15)) + ~((v607 ^ (v607 >> 15)) << 27);
                      v350 = v605 & ((v608 >> 31) ^ v608);
                      v609 = v81[2 * v350];
                      if (v609 == v553)
                        goto LABEL_144;
                      v610 = 1;
                      break;
                    case 0xB4:
                      v628 = (JSC::DFG::Node *)(*(_QWORD *)(v53 + 24) & 0xFF00FFFFFFFFFFFFLL);
                      v57 = v629;
                      if (!v629 || *((_DWORD *)v629 + 2) != 8)
                      {
                        goto LABEL_32;
                      }
                      *(_QWORD *)&v734 = 19;
                      JSC::DFG::LazyNode::LazyNode(&v735, (JSC::DFG::Node *)(*(_QWORD *)(v53 + 32) & 0xFF00FFFFFFFFFFFFLL));
                      goto LABEL_143;
                    default:
                      goto LABEL_29;
                  }
                  while (v609)
                  {
                    v350 = ((_DWORD)v350 + v610) & v605;
                    v609 = v81[2 * v350];
                    ++v610;
                    if (v609 == v553)
                      goto LABEL_144;
                  }
                  goto LABEL_546;
                }
                if (*(unsigned __int16 *)(v53 + 18) > 0x116u)
                {
                  switch(v54)
                  {
                    case 0x158u:
                      v476 = *(_QWORD *)(v53 + 24);
                      v477 = v476 & 0xFF00FFFFFFFFFFFFLL;
                      v57 = v478;
                      if (v478 && *((_DWORD *)v478 + 2) == 7)
                      {
                        v528 = *(_DWORD *)(v53 + 72);
                        LODWORD(v734) = 7;
                        DWORD1(v734) = v528;
                        v529 = *(_QWORD *)(v53 + 32);
                        v530 = v529 & 0xFF00FFFFFFFFFFFFLL;
                        *(_QWORD *)&v735 = v529 & 0xFF00FFFFFFFFFFFFLL;
                        *((_QWORD *)&v735 + 1) = 0;
                        if ((v529 & 0xFF00FFFFFFFFFFFFLL) != 0)
                        {
                          v339 = *(unsigned __int16 *)((v529 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                          if (v339 <= 2)
                          {
                            v340 = *(_QWORD *)(v530 + 72);
                            *((_QWORD *)&v735 + 1) = v340;
                            if ((_DWORD)v339)
                            {
                              if ((_DWORD)v339 != 1)
                                goto LABEL_868;
                              goto LABEL_829;
                            }
                          }
                        }
                        goto LABEL_143;
                      }
                      v112 = (_QWORD *)*v23;
                      if (*v23)
                      {
                        v564 = *((_DWORD *)v112 - 2);
                        v565 = (v477 + ~(v476 << 32)) ^ ((v477 + ~(v476 << 32)) >> 22);
                        v566 = 9 * ((v565 + ~(v565 << 13)) ^ ((v565 + ~(v565 << 13)) >> 8));
                        v567 = (v566 ^ (v566 >> 15)) + ~((v566 ^ (v566 >> 15)) << 27);
                        v568 = v564 & ((v567 >> 31) ^ v567);
                        v569 = v112[2 * v568];
                        if (v569 != v477)
                        {
                          v570 = 1;
                          while (v569)
                          {
                            v568 = ((_DWORD)v568 + v570) & v564;
                            v569 = v112[2 * v568];
                            ++v570;
                            if (v569 == v477)
                              goto LABEL_733;
                          }
                          v568 = *((unsigned int *)v112 - 1);
                        }
LABEL_733:
                        if (v568 != *((_DWORD *)v112 - 1))
                        {
                          v655 = (JSC::DFG::Node *)v112[2 * v568 + 1];
                          if (v655)
                          {
                            v112 = (_QWORD *)*v23;
                            if (!*v23)
                              break;
                            v564 = *((_DWORD *)v112 - 2);
                          }
                        }
                        v613 = *(_QWORD *)(v53 + 32);
                        v614 = v613 & 0xFF00FFFFFFFFFFFFLL;
                        v615 = ((v613 & 0xFF00FFFFFFFFFFFFLL) + ~(v613 << 32)) ^ (((v613 & 0xFF00FFFFFFFFFFFFLL)
                                                                                 + ~(v613 << 32)) >> 22);
                        v616 = 9 * ((v615 + ~(v615 << 13)) ^ ((v615 + ~(v615 << 13)) >> 8));
                        v617 = (v616 ^ (v616 >> 15)) + ~((v616 ^ (v616 >> 15)) << 27);
                        v425 = v564 & ((v617 >> 31) ^ v617);
                        v618 = v112[2 * v425];
                        if (v618 != v614)
                        {
                          v619 = 1;
                          while (v618)
                          {
                            v425 = ((_DWORD)v425 + v619) & v564;
                            v618 = v112[2 * v425];
                            ++v619;
                            if (v618 == v614)
                              goto LABEL_541;
                          }
LABEL_540:
                          v425 = *((unsigned int *)v112 - 1);
                        }
LABEL_541:
                        if (v425 == *((_DWORD *)v112 - 1))
                          break;
                        v131 = &v112[2 * v425];
                        goto LABEL_146;
                      }
                      break;
                    case 0x157u:
                      v541 = *(_QWORD *)(v53 + 24);
                      v542 = v541 & 0xFF00FFFFFFFFFFFFLL;
                      v57 = v543;
                      if (v543 && *((_DWORD *)v543 + 2) == 7)
                      {
                        v520 = *(_DWORD *)(v53 + 72);
                        v521 = 7;
LABEL_518:
                        v460 = v57[2];
                        if (v460)
                        {
                          v582 = *(_DWORD *)(v460 - 8);
                          v583 = v582 & (v520 + v521);
                          v584 = (int *)(v460 + 16 * v583);
                          v585 = *v584;
                          v586 = v584[1];
                          if (*v584 == v521 && v586 == v520)
                          {
LABEL_674:
                            v591 = *(_QWORD *)(v460 + 16 * v583 + 8);
                            if (v591)
                            {
                              *(_QWORD *)&v735 = v53;
                              *(_QWORD *)&v734 = v591;
                              WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>((uint64_t *)this + 64, (uint64_t *)&v735, (uint64_t *)&v734, v45, v46, v47, v48, v49, (uint64_t)&v726);
                            }
                          }
                          else
                          {
                            v588 = 1;
                            while (v585 | v586)
                            {
                              v583 = ((_DWORD)v583 + v588) & v582;
                              v589 = (int *)(v460 + 16 * v583);
                              v585 = *v589;
                              v586 = v589[1];
                              ++v588;
                              if (v585 == v521 && v586 == v520)
                                goto LABEL_674;
                            }
                          }
                        }
                        break;
                      }
                      v81 = (_QWORD *)*v23;
                      if (*v23)
                      {
                        v544 = *((_DWORD *)v81 - 2);
                        v545 = (v542 + ~(v541 << 32)) ^ ((v542 + ~(v541 << 32)) >> 22);
                        v546 = 9 * ((v545 + ~(v545 << 13)) ^ ((v545 + ~(v545 << 13)) >> 8));
                        v547 = (v546 ^ (v546 >> 15)) + ~((v546 ^ (v546 >> 15)) << 27);
                        v350 = v544 & ((v547 >> 31) ^ v547);
                        v548 = v81[2 * v350];
                        if (v548 != v542)
                        {
                          v549 = 1;
                          while (v548)
                          {
                            v350 = ((_DWORD)v350 + v549) & v544;
                            v548 = v81[2 * v350];
                            ++v549;
                            if (v548 == v542)
                              goto LABEL_144;
                          }
LABEL_546:
                          v350 = *((unsigned int *)v81 - 1);
                        }
LABEL_144:
                        if (v350 == *((_DWORD *)v81 - 1))
                          break;
                        v131 = &v81[2 * v350];
LABEL_146:
                        v132 = (JSC::DFG::Node *)v131[1];
                        if (v132)
                      }
                      break;
                    case 0x117u:
                      goto LABEL_43;
                    default:
LABEL_29:
                      v55 = *(_QWORD *)(v53 + 24);
                      if ((*(_BYTE *)(v53 + 56) & 0x10) != 0)
                      {
                        v117 = *(_QWORD *)(v53 + 32);
                        if ((int)v117 + (int)v55 > v55)
                        {
                          v118 = *((_QWORD *)this + 4);
                          v119 = *(_QWORD *)(v53 + 24);
                          do
                          {
                            if (v119 >= *(unsigned int *)(v118 + 164))
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1984D22B0);
                            }
                            v120 = *(_QWORD *)(*(_QWORD *)(v118 + 152) + 8 * v119);
                            v121 = v120 & 0xFF00FFFFFFFFFFFFLL;
                            if ((v120 & 0xFF00FFFFFFFFFFFFLL) != 0)
                            {
                              v122 = (_QWORD *)*v23;
                              if (*v23)
                              {
                                v123 = *((_DWORD *)v122 - 2);
                                v124 = (v121 + ~(v120 << 32)) ^ ((v121 + ~(v120 << 32)) >> 22);
                                v125 = 9 * ((v124 + ~(v124 << 13)) ^ ((v124 + ~(v124 << 13)) >> 8));
                                v126 = (v125 ^ (v125 >> 15)) + ~((v125 ^ (v125 >> 15)) << 27);
                                v127 = v123 & ((v126 >> 31) ^ v126);
                                v128 = v122[2 * v127];
                                if (v128 != v121)
                                {
                                  v129 = 1;
                                  while (v128)
                                  {
                                    v127 = ((_DWORD)v127 + v129) & v123;
                                    v128 = v122[2 * v127];
                                    ++v129;
                                    if (v128 == v121)
                                      goto LABEL_140;
                                  }
                                  v127 = *((unsigned int *)v122 - 1);
                                }
LABEL_140:
                                if (v127 != *((_DWORD *)v122 - 1))
                                {
                                  v130 = (JSC::DFG::Node *)v122[2 * v127 + 1];
                                  if (v130)
                                  {
                                    v55 = *(_QWORD *)(v53 + 24);
                                    v117 = *(_QWORD *)(v53 + 32);
                                  }
                                }
                              }
                            }
                            v57 = 0;
                            ++v119;
                          }
                          while (v119 < (v55 + v117));
                          break;
                        }
                        goto LABEL_31;
                      }
                      v56 = v55 & 0xFF00FFFFFFFFFFFFLL;
                      if ((v55 & 0xFF00FFFFFFFFFFFFLL) != 0)
                      {
                        v82 = (_QWORD *)*v23;
                        if (*v23)
                        {
                          v96 = *((_DWORD *)v82 - 2);
                          v97 = (v56 + ~(v55 << 32)) ^ ((v56 + ~(v55 << 32)) >> 22);
                          v98 = 9 * ((v97 + ~(v97 << 13)) ^ ((v97 + ~(v97 << 13)) >> 8));
                          v99 = (v98 ^ (v98 >> 15)) + ~((v98 ^ (v98 >> 15)) << 27);
                          v100 = v96 & ((v99 >> 31) ^ v99);
                          v101 = v82[2 * v100];
                          if (v101 != v56)
                          {
                            v102 = 1;
                            while (v101)
                            {
                              v100 = ((_DWORD)v100 + v102) & v96;
                              v101 = v82[2 * v100];
                              ++v102;
                              if (v101 == v56)
                                goto LABEL_106;
                            }
                            v100 = *((unsigned int *)v82 - 1);
                          }
LABEL_106:
                          if (v100 != *((_DWORD *)v82 - 1))
                          {
                            v341 = (JSC::DFG::Node *)v82[2 * v100 + 1];
                            if (v341)
                          }
                        }
                        v83 = *(_QWORD *)(v53 + 32);
                        v84 = v83 & 0xFF00FFFFFFFFFFFFLL;
                        if ((v83 & 0xFF00FFFFFFFFFFFFLL) != 0)
                        {
                          v85 = (_QWORD *)*v23;
                          if (*v23)
                          {
                            v136 = *((_DWORD *)v85 - 2);
                            v137 = (v84 + ~(v83 << 32)) ^ ((v84 + ~(v83 << 32)) >> 22);
                            v138 = 9 * ((v137 + ~(v137 << 13)) ^ ((v137 + ~(v137 << 13)) >> 8));
                            v139 = (v138 ^ (v138 >> 15)) + ~((v138 ^ (v138 >> 15)) << 27);
                            v140 = v136 & ((v139 >> 31) ^ v139);
                            v141 = v85[2 * v140];
                            if (v141 != v84)
                            {
                              v142 = 1;
                              while (v141)
                              {
                                v140 = ((_DWORD)v140 + v142) & v136;
                                v141 = v85[2 * v140];
                                ++v142;
                                if (v141 == v84)
                                  goto LABEL_411;
                              }
                              v140 = *((unsigned int *)v85 - 1);
                            }
LABEL_411:
                            if (v140 != *((_DWORD *)v85 - 1))
                            {
                              v342 = (JSC::DFG::Node *)v85[2 * v140 + 1];
                              if (v342)
                            }
                          }
                          v86 = *(_QWORD *)(v53 + 40);
                          v87 = v86 & 0xFF00FFFFFFFFFFFFLL;
                          if ((v86 & 0xFF00FFFFFFFFFFFFLL) != 0)
                          {
                            v367 = (_QWORD *)*v23;
                            if (*v23)
                            {
                              v368 = *((_DWORD *)v367 - 2);
                              v369 = (v87 + ~(v86 << 32)) ^ ((v87 + ~(v86 << 32)) >> 22);
                              v370 = 9 * ((v369 + ~(v369 << 13)) ^ ((v369 + ~(v369 << 13)) >> 8));
                              v371 = (v370 ^ (v370 >> 15)) + ~((v370 ^ (v370 >> 15)) << 27);
                              v372 = v368 & ((v371 >> 31) ^ v371);
                              v373 = v367[2 * v372];
                              if (v373 != v87)
                              {
                                v374 = 1;
                                while (v373)
                                {
                                  v372 = ((_DWORD)v372 + v374) & v368;
                                  v373 = v367[2 * v372];
                                  ++v374;
                                  if (v373 == v87)
                                    goto LABEL_499;
                                }
                                goto LABEL_498;
                              }
LABEL_499:
                              if (v372 != *((_DWORD *)v367 - 1))
                              {
                                v382 = &v367[2 * v372];
LABEL_453:
                                v383 = (JSC::DFG::Node *)v382[1];
                                if (v383)
                              }
                            }
                          }
                        }
                      }
LABEL_31:
                      v57 = 0;
                      break;
                  }
                }
                else
                {
                  if (v54 == 259)
                  {
                    *(_QWORD *)&v726 = *(_QWORD *)(v53 + 72);
                    if ((v726 & 1) != 0)
                      WTF::fastFree(v726 & 0xFFFFFFFFFFFFFFFCLL, v442, v443, v444, v445, v446, v447, v448);
                    *(_QWORD *)&v734 = 13;
                    v449 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), *(_QWORD *)(v53 + 72), v443, v444, v445, v446, v447, v448);
                    *(_QWORD *)&v735 = 0;
                    *((_QWORD *)&v735 + 1) = v449;
                    goto LABEL_143;
                  }
                  if (v54 == 270)
                  {
                    *(_QWORD *)&v734 = 18;
                    v579 = *(_QWORD *)(v53 + 72);
                    *(_QWORD *)&v735 = 0;
                    *((_QWORD *)&v735 + 1) = v579;
                    WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v726, v736, &v734, &v735);
                    *(_QWORD *)&v734 = 19;
                    v580 = *(_QWORD *)(v53 + 24);
                    v581 = v580 & 0xFF00FFFFFFFFFFFFLL;
                    *(_QWORD *)&v735 = v580 & 0xFF00FFFFFFFFFFFFLL;
                    *((_QWORD *)&v735 + 1) = 0;
                    if ((v580 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v339 = *(unsigned __int16 *)((v580 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                      if (v339 <= 2)
                      {
                        v340 = *(_QWORD *)(v581 + 72);
                        *((_QWORD *)&v735 + 1) = v340;
                        if ((_DWORD)v339)
                        {
                          if ((_DWORD)v339 != 1)
LABEL_868:
                            v339 = 2;
LABEL_829:
                          *((_QWORD *)&v735 + 1) = v339 | v340;
                        }
                      }
                    }
LABEL_143:
                    WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v726, v736, &v734, &v735);
                    goto LABEL_32;
                  }
                  if (v54 != 268)
                    goto LABEL_29;
                  v611 = *(unsigned __int8 *)(*(_QWORD *)(v53 + 72) + 9);
                  if (v611 == 64)
                  {
                    goto LABEL_32;
                  }
                  if (v611 != 66)
                  {
                    if (v611 == 68)
                    {
                      goto LABEL_32;
                    }
                    if (v611 != 65)
                    {
                      JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v53, (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0x3DB, "void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:867:25), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:868:25)]", "Bad structure");
                      __break(0xC471u);
                      JUMPOUT(0x1984D2038);
                    }
                  }
                }
              }
              else
              {
                if (v54 - 420 < 7)
                  goto LABEL_43;
                if (v54 - 359 < 4)
                {
                  *(_QWORD *)&v735 = **(_QWORD **)(v53 + 72);
                  v461 = *(_QWORD *)(v735 + 112);
                  if ((v461 & 1) != 0)
                    v462 = (v461 >> 1) & 3;
                  else
                    v462 = *(unsigned __int8 *)(v461 + 4);
                  LOBYTE(v734) = v462 != 2;
                  WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(&v726, (uint64_t *)this + 53, (uint64_t *)&v735, &v734, v46, v47, v48, v49);
                  if (*(_BYTE *)(v726 + 8))
                  {
                    v367 = (_QWORD *)*v23;
                    if (*v23)
                    {
                      v642 = *(_QWORD *)(v53 + 24);
                      v643 = v642 & 0xFF00FFFFFFFFFFFFLL;
                      v644 = *((_DWORD *)v367 - 2);
                      v645 = ((v642 & 0xFF00FFFFFFFFFFFFLL) + ~(v642 << 32)) ^ (((v642 & 0xFF00FFFFFFFFFFFFLL)
                                                                               + ~(v642 << 32)) >> 22);
                      v646 = 9 * ((v645 + ~(v645 << 13)) ^ ((v645 + ~(v645 << 13)) >> 8));
                      v647 = (v646 ^ (v646 >> 15)) + ~((v646 ^ (v646 >> 15)) << 27);
                      v372 = v644 & ((v647 >> 31) ^ v647);
                      v648 = v367[2 * v372];
                      if (v648 != v643)
                      {
                        v649 = 1;
                        while (v648)
                        {
                          v372 = ((_DWORD)v372 + v649) & v644;
                          v648 = v367[2 * v372];
                          ++v649;
                          if (v648 == v643)
                            goto LABEL_499;
                        }
LABEL_498:
                        v372 = *((unsigned int *)v367 - 1);
                      }
                      goto LABEL_499;
                    }
                    goto LABEL_31;
                  }
                  v463 = *(unsigned __int16 *)(v53 + 18) - 360;
                  if (v463 > 2)
                    v531 = 3;
                  else
                    v531 = dword_1991563D8[(__int16)v463];
                  *(_QWORD *)&v734 = 9;
                  v464 = *(_QWORD *)(v53 + 72);
                  *(_QWORD *)&v735 = 0;
                  *((_QWORD *)&v735 + 1) = v464;
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v726, v736, &v734, &v735);
                  *(_QWORD *)&v734 = 8;
                  v465 = *(_QWORD *)(v53 + 24);
                  v466 = v465 & 0xFF00FFFFFFFFFFFFLL;
                  *(_QWORD *)&v735 = v465 & 0xFF00FFFFFFFFFFFFLL;
                  *((_QWORD *)&v735 + 1) = 0;
                  if ((v465 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v339 = *(unsigned __int16 *)((v465 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                    if (v339 <= 2)
                    {
                      v340 = *(_QWORD *)(v466 + 72);
                      *((_QWORD *)&v735 + 1) = v340;
                      if ((_DWORD)v339)
                      {
                        if ((_DWORD)v339 != 1)
                          goto LABEL_868;
                        goto LABEL_829;
                      }
                    }
                  }
                  goto LABEL_143;
                }
                if (v54 != 345)
                  goto LABEL_29;
                *(_QWORD *)&v735 = **(_QWORD **)(v53 + 72);
                v481 = *(_QWORD *)(v735 + 40);
                if ((v481 & 1) != 0)
                  v482 = (v481 >> 1) & 3;
                else
                  v482 = *(unsigned __int8 *)(v481 + 4);
                LOBYTE(v734) = v482 != 2;
                WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(&v726, (uint64_t *)this + 53, (uint64_t *)&v735, &v734, v46, v47, v48, v49);
                if (*(_BYTE *)(v726 + 8))
                {
                  goto LABEL_31;
                }
                *(_QWORD *)&v734 = 2;
                v489 = *(_QWORD *)(v53 + 72);
                *(_QWORD *)&v735 = 0;
                *((_QWORD *)&v735 + 1) = v489;
                WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v726, v736, &v734, &v735);
                *(_QWORD *)&v734 = 1;
                v490 = *(_QWORD *)(v53 + 24);
                v491 = v490 & 0xFF00FFFFFFFFFFFFLL;
                *(_QWORD *)&v735 = v490 & 0xFF00FFFFFFFFFFFFLL;
                *((_QWORD *)&v735 + 1) = 0;
                if ((v490 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v592 = *(unsigned __int16 *)((v490 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if (v592 <= 2)
                  {
                    v593 = *(_QWORD *)(v491 + 72);
                    *((_QWORD *)&v735 + 1) = v593;
                    if ((_DWORD)v592)
                    {
                      if ((_DWORD)v592 != 1)
                        v592 = 2;
                      *((_QWORD *)&v735 + 1) = v592 | v593;
                    }
                  }
                }
                WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v726, v736, &v734, &v735);
                v492 = *(unint64_t **)(v53 + 80);
                v493 = **(_QWORD **)(v53 + 72);
                v500 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), *v492, v494, v495, v496, v497, v498, v499);
                *(_QWORD *)&v735 = 0;
                *((_QWORD *)&v735 + 1) = v500;
                if (*(_DWORD *)(v493 + 16) != -1)
                {
                  v459 = 0;
                  do
                  {
                    LODWORD(v734) = 6;
                    DWORD1(v734) = v459;
                    WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode&>((uint64_t)&v726, v736, &v734, &v735);
                    ++v459;
                  }
                  while (v459 < *(_DWORD *)(v493 + 16) + 1);
                }
              }
            }
            else
            {
              if (v54 == 20)
                goto LABEL_43;
              if (v54 - 132 < 2)
              {
                v113 = *(_QWORD *)(v53 + 24);
                v114 = v113 & 0xFF00FFFFFFFFFFFFLL;
                if (v115)
                {
                  v501 = (uint64_t)v115;
                  if (*((_DWORD *)v115 + 2) == 1)
                  {
                    v502 = v115[3];
                    *(_QWORD *)&v726 = 0;
                    if ((v502 & 1) == 0 || v502 == 4)
                      *(_QWORD *)&v726 = v502 & 0xFFFFFFFFFFFFFFFDLL;
                    else
                      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v726, v115 + 3);
                    v503 = *(uint64_t **)(v53 + 72);
                    *(_QWORD *)&v735 = 0;
                    v504 = *v503;
                    if ((*v503 & 1) != 0 && v504 != 4)
                    {
                      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v735, v503);
                      v504 = v735;
                    }
                    *(_QWORD *)&v735 = v504 & 0xFFFFFFFFFFFFFFFDLL;
                    JSC::DFG::RegisteredStructureSet::filter((JSC::DFG::RegisteredStructureSet *)&v726, (const JSC::DFG::StructureAbstractValue *)&v735, v44, v45, v46, v47, v48, v49);
                    if ((v735 & 1) != 0)
                      WTF::fastFree(v735 & 0xFFFFFFFFFFFFFFFCLL, v505, v506, v507, v508, v509, v510, v511);
                    if ((v726 & 0xFFFFFFFFFFFFFFFDLL) != 0)
                    else
                    v513 = v726;
                    if ((v726 & 1) != 0)
LABEL_576:
                      WTF::fastFree(v513 & 0xFFFFFFFFFFFFFFFCLL, v512, v44, v45, v46, v47, v48, v49);
                    goto LABEL_31;
                  }
                }
                v116 = (_QWORD *)*v23;
                if (!*v23)
                  goto LABEL_31;
                v375 = *((_DWORD *)v116 - 2);
                v376 = (v114 + ~(v113 << 32)) ^ ((v114 + ~(v113 << 32)) >> 22);
                v377 = 9 * ((v376 + ~(v376 << 13)) ^ ((v376 + ~(v376 << 13)) >> 8));
                v378 = (v377 ^ (v377 >> 15)) + ~((v377 ^ (v377 >> 15)) << 27);
                v379 = v375 & ((v378 >> 31) ^ v378);
                v380 = v116[2 * v379];
                if (v380 != v114)
                {
                  v381 = 1;
                  while (v380)
                  {
                    v379 = ((_DWORD)v379 + v381) & v375;
                    v380 = v116[2 * v379];
                    ++v381;
                    if (v380 == v114)
                      goto LABEL_451;
                  }
LABEL_450:
                  v379 = *((unsigned int *)v116 - 1);
                }
LABEL_451:
                if (v379 == *((_DWORD *)v116 - 1))
                  goto LABEL_31;
                v382 = &v116[2 * v379];
                goto LABEL_453;
              }
              if (v54 - 24 >= 2)
                goto LABEL_29;
              v353 = *(_QWORD *)(v53 + 24);
              if ((*(_BYTE *)(v53 + 56) & 0x10) == 0)
              {
                v354 = v353 & 0xFF00FFFFFFFFFFFFLL;
                if ((v353 & 0xFF00FFFFFFFFFFFFLL) == 0)
                  goto LABEL_31;
                if ((v353 & 0x1000000000000) == 0)
                {
                  v355 = (v353 >> 50) & 0x3F;
                  if ((_DWORD)v355)
                  {
                    if (v355 > 0x34)
                      goto LABEL_873;
                    if (((1 << v355) & 0x12798001880F84) == 0)
                    {
                      if (((1 << v355) & 0xD867FFE77F07ALL) == 0)
                        goto LABEL_873;
                      v571 = (_QWORD *)*v23;
                      if (*v23)
                      {
                        v572 = *((_DWORD *)v571 - 2);
                        v573 = (v354 + ~(v353 << 32)) ^ ((v354 + ~(v353 << 32)) >> 22);
                        v574 = 9 * ((v573 + ~(v573 << 13)) ^ ((v573 + ~(v573 << 13)) >> 8));
                        v575 = (v574 ^ (v574 >> 15)) + ~((v574 ^ (v574 >> 15)) << 27);
                        v576 = v572 & ((v575 >> 31) ^ v575);
                        v577 = v571[2 * v576];
                        if (v577 != v354)
                        {
                          v578 = 1;
                          while (v577)
                          {
                            v576 = ((_DWORD)v576 + v578) & v572;
                            v577 = v571[2 * v576];
                            ++v578;
                            if (v577 == v354)
                              goto LABEL_767;
                          }
                          v576 = *((unsigned int *)v571 - 1);
                        }
LABEL_767:
                        if (v576 != *((_DWORD *)v571 - 1))
                        {
                          v652 = (JSC::DFG::Node *)v571[2 * v576 + 1];
                          if (v652)
                        }
                      }
                    }
                  }
                }
                v356 = *(_QWORD *)(v53 + 32);
                v357 = v356 & 0xFF00FFFFFFFFFFFFLL;
                if ((v356 & 0xFF00FFFFFFFFFFFFLL) == 0)
                  goto LABEL_31;
                if ((v356 & 0x1000000000000) == 0)
                {
                  v358 = (v356 >> 50) & 0x3F;
                  if ((_DWORD)v358)
                  {
                    if (v358 > 0x34)
                      goto LABEL_873;
                    if (((1 << v358) & 0x12798001880F84) == 0)
                    {
                      if (((1 << v358) & 0xD867FFE77F07ALL) == 0)
                        goto LABEL_873;
                      v596 = (_QWORD *)*v23;
                      if (*v23)
                      {
                        v597 = *((_DWORD *)v596 - 2);
                        v598 = (v357 + ~(v356 << 32)) ^ ((v357 + ~(v356 << 32)) >> 22);
                        v599 = 9 * ((v598 + ~(v598 << 13)) ^ ((v598 + ~(v598 << 13)) >> 8));
                        v600 = (v599 ^ (v599 >> 15)) + ~((v599 ^ (v599 >> 15)) << 27);
                        v601 = v597 & ((v600 >> 31) ^ v600);
                        v602 = v596[2 * v601];
                        if (v602 != v357)
                        {
                          v603 = 1;
                          while (v602)
                          {
                            v601 = ((_DWORD)v601 + v603) & v597;
                            v602 = v596[2 * v601];
                            ++v603;
                            if (v602 == v357)
                              goto LABEL_785;
                          }
                          v601 = *((unsigned int *)v596 - 1);
                        }
LABEL_785:
                        if (v601 != *((_DWORD *)v596 - 1))
                        {
                          v657 = (JSC::DFG::Node *)v596[2 * v601 + 1];
                          if (v657)
                        }
                      }
                    }
                  }
                }
                v57 = 0;
                v359 = *(_QWORD *)(v53 + 40);
                v360 = v359 & 0xFF00FFFFFFFFFFFFLL;
                if ((v359 & 0xFF00FFFFFFFFFFFFLL) == 0)
                  goto LABEL_32;
                if ((v359 & 0x1000000000000) != 0)
                  goto LABEL_32;
                v57 = 0;
                v361 = (v359 >> 50) & 0x3F;
                if (!(_DWORD)v361)
                  goto LABEL_32;
                if (v361 > 0x34)
                  goto LABEL_873;
                if (((1 << v361) & 0x12798001880F84) != 0)
                  goto LABEL_32;
                if (((1 << v361) & 0xD867FFE77F07ALL) == 0)
                {
LABEL_873:
                  __break(0xC471u);
                  JUMPOUT(0x1984D22D8);
                }
                v620 = (_QWORD *)*v23;
                if (!*v23)
                  goto LABEL_31;
                v621 = *((_DWORD *)v620 - 2);
                v622 = (v360 + ~(v359 << 32)) ^ ((v360 + ~(v359 << 32)) >> 22);
                v623 = 9 * ((v622 + ~(v622 << 13)) ^ ((v622 + ~(v622 << 13)) >> 8));
                v624 = (v623 ^ (v623 >> 15)) + ~((v623 ^ (v623 >> 15)) << 27);
                v625 = v621 & ((v624 >> 31) ^ v624);
                v626 = v620[2 * v625];
                if (v626 != v360)
                {
                  v627 = 1;
                  while (v626)
                  {
                    v625 = ((_DWORD)v625 + v627) & v621;
                    v626 = v620[2 * v625];
                    ++v627;
                    if (v626 == v360)
                      goto LABEL_794;
                  }
                  v625 = *((unsigned int *)v620 - 1);
                }
LABEL_794:
                if (v625 == *((_DWORD *)v620 - 1))
                  goto LABEL_31;
                v382 = &v620[2 * v625];
                goto LABEL_453;
              }
              v670 = *(_QWORD *)(v53 + 32);
              if ((int)v670 + (int)v353 <= v353)
                goto LABEL_31;
              v671 = *((_QWORD *)this + 4);
              v672 = *(_QWORD *)(v53 + 24);
              do
              {
                if (v672 >= *(unsigned int *)(v671 + 164))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984D2300);
                }
                v673 = *(_QWORD *)(*(_QWORD *)(v671 + 152) + 8 * v672);
                if ((v673 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v353 = *(_QWORD *)(v53 + 24);
                  v670 = *(_QWORD *)(v53 + 32);
                }
                v57 = 0;
                ++v672;
              }
              while (v672 < (v353 + v670));
            }
LABEL_32:
            v58 = v736[0];
            if (!v736[0])
              goto LABEL_43;
            if (*(_DWORD *)(v736[0] - 12))
            {
              v59 = *(unsigned int *)(v736[0] - 4);
              v60 = (uint64_t *)v736[0];
              if ((_DWORD)v59)
              {
                v61 = 0;
                while (!*(_DWORD *)(v736[0] + v61))
                {
                  v61 += 24;
                  if (24 * v59 == v61)
                    goto LABEL_38;
                }
                v60 = (uint64_t *)(v736[0] + v61);
              }
              v65 = v736[0] + 24 * v59;
              if (v60 != (uint64_t *)v65)
              {
                v66 = v57 + 2;
                while (1)
                {
                  v67 = *v60;
                  v68 = v60[1];
                  if (v68)
                    break;
                  v69 = *v66;
                  if (!*v66)
                    goto LABEL_55;
                  v103 = *(_DWORD *)(v69 - 8);
                  v104 = v103 & (HIDWORD(v67) + v67);
                  v73 = (int *)(v69 + 16 * v104);
                  v105 = *v73;
                  v106 = v73[1];
                  if (*v73 != (_DWORD)v67 || v106 != HIDWORD(v67))
                  {
                    v108 = 1;
                    while (v105 | v106)
                    {
                      v104 = (v104 + v108) & v103;
                      v73 = (int *)(v69 + 16 * v104);
                      v105 = *v73;
                      v106 = v73[1];
                      ++v108;
                      if (*v73 == (_DWORD)v67 && v106 == HIDWORD(v67))
                        goto LABEL_115;
                    }
LABEL_114:
                    v73 = (int *)(v69 + 16 * *(unsigned int *)(v69 - 4));
                  }
LABEL_115:
                  if ((int *)(v69 + 16 * *(unsigned int *)(v69 - 4)) != v73)
                    WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::remove(v57 + 2, v73);
                  do
                  {
LABEL_55:
                    v60 += 3;
                    if (v60 == (uint64_t *)v65)
                      goto LABEL_69;
                  }
                  while (!*(_DWORD *)v60);
                  if (v60 == (uint64_t *)v65)
                  {
LABEL_69:
                    v58 = v736[0];
                    if (!v736[0])
                      goto LABEL_43;
                    goto LABEL_38;
                  }
                }
                v70 = (_QWORD *)*v23;
                if (!*v23)
                  goto LABEL_60;
                v88 = *((_DWORD *)v70 - 2);
                v89 = (~(v68 << 32) + v68) ^ ((unint64_t)(~(v68 << 32) + v68) >> 22);
                v90 = 9 * ((v89 + ~(v89 << 13)) ^ ((v89 + ~(v89 << 13)) >> 8));
                v91 = (v90 ^ (v90 >> 15)) + ~((v90 ^ (v90 >> 15)) << 27);
                v92 = v88 & ((v91 >> 31) ^ v91);
                v93 = v70[2 * v92];
                if (v93 != v68)
                {
                  v94 = 1;
                  while (v93)
                  {
                    v92 = ((_DWORD)v92 + v94) & v88;
                    v93 = v70[2 * v92];
                    ++v94;
                    if (v93 == v68)
                      goto LABEL_89;
                  }
                  v92 = *((unsigned int *)v70 - 1);
                }
LABEL_89:
                if (v92 == *((_DWORD *)v70 - 1))
                {
LABEL_60:
                  *(_QWORD *)&v735 = *v60;
                  *(_QWORD *)&v734 = 0;
                }
                else
                {
                  v95 = v70[2 * v92 + 1];
                  *(_QWORD *)&v735 = *v60;
                  *(_QWORD *)&v734 = v95;
                  if (v95)
                  {
                    WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedLocationDescriptor const&,JSC::DFG::Node *&>((uint64_t)&v726, v57 + 2, &v735, &v734);
                    goto LABEL_55;
                  }
                }
                v69 = *v66;
                if (!*v66)
                  goto LABEL_55;
                v71 = *(_DWORD *)(v69 - 8);
                v72 = v71 & (HIDWORD(v67) + v67);
                v73 = (int *)(v69 + 16 * v72);
                v74 = *v73;
                v75 = v73[1];
                if (*v73 == (_DWORD)v67 && v75 == HIDWORD(v67))
                  goto LABEL_115;
                v77 = 1;
                while (v74 | v75)
                {
                  v72 = (v72 + v77) & v71;
                  v73 = (int *)(v69 + 16 * v72);
                  v74 = *v73;
                  v75 = v73[1];
                  ++v77;
                  if (*v73 == (_DWORD)v67 && v75 == HIDWORD(v67))
                    goto LABEL_115;
                }
                goto LABEL_114;
              }
            }
LABEL_38:
            v62 = v58 - 16;
            v63 = *(_QWORD *)(StatusReg + 752);
            if (!v63)
            {
              pas_try_deallocate_slow_no_cache(v62, (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_43;
            }
            if (v62 >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                   + (((unint64_t)(v58 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v58 - 16) >> 24)) & 1) == 0)
            {
              if (v62 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v62 >> 24)
              {
                v45 = 0;
LABEL_611:
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v63, v62, 1, v45, v46, v47, v48, v49);
                goto LABEL_43;
              }
              v45 = (*(_DWORD *)((char *)off_1ECF425F8
                               + (((((unint64_t)(v58 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((((v58 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v45 != 1)
                goto LABEL_611;
            }
            v64 = *(unsigned int *)(v63 + 8000);
            if (v64 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v63, v62, (os_unfair_lock_s *)5, v45, v46, v47, v48, v49);
            }
            else
            {
              *(_QWORD *)(v63 + 8 * v64) = v62 | 0x5000000000000;
              *(_DWORD *)(v63 + 8000) = v64 + 1;
            }
LABEL_43:
            ++v51;
          }
          while (v51 != v52);
        }
        v133 = *(_DWORD *)(v25 + 8);
        if (*((_DWORD *)this + 125) <= v133)
        {
          __break(0xC471u);
          JUMPOUT(0x1984D22B8);
        }
        v134 = *((_QWORD *)this + 61);
        v135 = v134 + 40 * v133;
        *(_BYTE *)v135 = *(_BYTE *)v724;
        v152 = v134 + 40 * v133;
        WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable((uint64_t *)&v726, (_QWORD *)this + 64, a3, a4, a5, a6, a7, a8);
        v160 = *(_QWORD *)(v152 + 8);
        *(_QWORD *)(v152 + 8) = v726;
        *(_QWORD *)&v726 = v160;
        if (v160)
          WTF::fastFree(v160 - 16, v153, v154, v155, v156, v157, v158, v159);
        v161 = v134 + 40 * v133;
        *(_BYTE *)(v161 + 24) = *((_BYTE *)this + 528);
        v174 = *(unsigned int *)(v25 + 8);
        if (*((_DWORD *)this + 105) <= v174)
        {
          __break(0xC471u);
          JUMPOUT(0x1984D2340);
        }
        v175 = *(unsigned int *)(v25 + 220);
        if ((_DWORD)v175)
        {
          v176 = 8 * v175;
          while (1)
          {
            v177 = *(_QWORD *)(*(_QWORD *)(v25 + 208) - 8 + v176);
            v178 = *(unsigned __int16 *)(v177 + 18);
            if ((v178 - 364) < 0xC)
              break;
            if ((v178 - 28) < 2 || (v178 - 23) <= 2)
            {
              v176 -= 8;
              if (v176)
                continue;
            }
            goto LABEL_691;
          }
        }
        else
        {
LABEL_691:
          v177 = 0;
        }
        v179 = 1;
        switch(*(_WORD *)(v177 + 18))
        {
          case 0x16C:
            goto LABEL_173;
          case 0x16D:
            v179 = 2;
            goto LABEL_173;
          case 0x16E:
            v179 = *(_DWORD *)(*(_QWORD *)(v177 + 72) + 12) + 1;
            goto LABEL_728;
          case 0x16F:
            v179 = *(_DWORD *)(*(_QWORD *)(v177 + 72) + 12);
LABEL_728:
            if (!v179)
              goto LABEL_515;
LABEL_173:
            v180 = 0;
            v181 = 0;
            v717 = (uint64_t *)(v177 + 72);
            break;
          default:
LABEL_515:
            v719 = 1;
            goto LABEL_150;
        }
        do
        {
          v182 = *(unsigned __int16 *)(v177 + 18);
          if (v182 == 366)
          {
            v334 = (_QWORD *)*v717;
            v335 = *(_DWORD *)(*v717 + 12);
            if (v335 > v180)
            {
              v196 = *v334 + 32 * v181;
LABEL_205:
              v183 = v196 + 16;
              goto LABEL_206;
            }
            if (v335 != v180)
            {
              __break(0xC471u);
              JUMPOUT(0x1984D2210);
            }
            v183 = (uint64_t)(v334 + 2);
          }
          else if (v182 == 367)
          {
            if (*(_DWORD *)(*v717 + 12) <= v180)
            {
              __break(0xC471u);
              JUMPOUT(0x1984D2348);
            }
            v183 = *(_QWORD *)*v717 + 8 * v181;
          }
          else
          {
            if (v180)
            {
              if (v180 != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1984D2280);
              }
              v196 = *v717;
              goto LABEL_205;
            }
            v183 = (uint64_t)v717;
            if (v182 != 364)
              v183 = *v717;
          }
LABEL_206:
          v720 = v181;
          v197 = *(_QWORD *)v183;
          v198 = *(_DWORD *)(*(_QWORD *)v183 + 8);
          if (*((_DWORD *)this + 121) <= v198)
          {
            __break(0xC471u);
            JUMPOUT(0x1984D2328);
          }
          v199 = *((_QWORD *)this + 59) + 40 * v198;
          LOBYTE(v726) = *(_BYTE *)v199;
          WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable((uint64_t *)&v726 + 1, (_QWORD *)(v199 + 8), a3, a4, a5, a6, a7, a8);
          v728 = *(_BYTE *)(v199 + 24);
          v207 = *(_DWORD *)(v197 + 8);
          if (*((_DWORD *)this + 121) <= v207)
          {
            __break(0xC471u);
            JUMPOUT(0x1984D2330);
          }
          v208 = *((_QWORD *)this + 59);
          v209 = (_BYTE *)(v208 + 40 * v207);
          if (!*v209)
          {
            *v209 = *(_BYTE *)v724;
            v210 = v208 + 40 * v207;
            WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable((uint64_t *)&v735, (_QWORD *)this + 64, v201, v202, v203, v204, v205, v206);
            v218 = *(_QWORD *)(v210 + 8);
            *(_QWORD *)(v210 + 8) = v735;
            *(_QWORD *)&v735 = v218;
            if (v218)
              WTF::fastFree(v218 - 16, v211, v212, v213, v214, v215, v216, v217);
            v219 = v208 + 40 * v207;
            *(_BYTE *)(v219 + 24) = *((_BYTE *)this + 528);
            goto LABEL_212;
          }
          v715 = *((_QWORD *)this + 59);
          v713 = (JSC::DFG::_anonymous_namespace_::LocalHeap *)(v208 + 40 * v207);
          v192 = 0;
          LODWORD(v230) = 0;
          v736[0] = 0;
          v231 = *v723;
          if (!*v723)
            goto LABEL_220;
          v230 = *(unsigned int *)(v231 - 4);
          v232 = (uint64_t *)(v231 + 48 * v230);
          if (!*(_DWORD *)(v231 - 12))
          {
            v192 = (uint64_t *)(v231 + 48 * v230);
LABEL_220:
            v232 = (uint64_t *)(v231 + 48 * v230);
            goto LABEL_221;
          }
          v192 = (uint64_t *)*v723;
          if ((_DWORD)v230)
          {
            v193 = 48 * v230;
            v192 = (uint64_t *)*v723;
            do
            {
              if ((unint64_t)(*v192 + 1) > 1)
                goto LABEL_221;
              v192 += 6;
              v193 -= 48;
            }
            while (v193);
            v192 = v232;
          }
LABEL_221:
          v709 = v179;
          if (v231)
            v233 = (uint64_t *)(v231 + 48 * *(unsigned int *)(v231 - 4));
          else
            v233 = 0;
          while (v192 != v233)
          {
            v234 = v192 + 6;
            v192 = v232;
            if (v234 != v232)
            {
              v192 = v234;
              do
              {
                if ((unint64_t)(*v192 + 1) > 1)
                  goto LABEL_229;
                v192 += 6;
              }
              while (v192 != v232);
              v192 = v232;
            }
LABEL_229:
            ;
          }
          v235 = *(_QWORD *)(v715 + 40 * v207 + 16);
          v710 = v177;
          if (v235)
          {
            v236 = *(unsigned int *)(v235 - 4);
            v237 = v235 + 48 * v236;
            if (*(_DWORD *)(v235 - 12))
            {
              v194 = *(_QWORD *)(v715 + 40 * v207 + 16);
              if ((_DWORD)v236)
              {
                v195 = 48 * v236;
                v194 = *(_QWORD *)(v715 + 40 * v207 + 16);
                do
                {
                  if ((unint64_t)(*(_QWORD *)v194 + 1) > 1)
                    goto LABEL_233;
                  v194 += 48;
                  v195 -= 48;
                }
                while (v195);
                v194 = v237;
              }
              goto LABEL_233;
            }
            v194 = v235 + 48 * v236;
          }
          else
          {
            v194 = 0;
            LODWORD(v236) = 0;
          }
          v237 = v235 + 48 * v236;
LABEL_233:
          if (v235)
            v235 += 48 * *(unsigned int *)(v235 - 4);
          if (v235 == v194)
            goto LABEL_324;
          v711 = v235;
          do
          {
            v238 = *v723;
            if (!*v723)
              goto LABEL_255;
            v239 = *(_DWORD *)(v238 - 8);
            v240 = ~(*(_QWORD *)v194 << 32) + *(_QWORD *)v194;
            v241 = (v240 ^ (v240 >> 22)) + ~((v240 ^ (v240 >> 22)) << 13);
            v242 = (9 * (v241 ^ (v241 >> 8))) ^ ((9 * (v241 ^ (v241 >> 8))) >> 15);
            v243 = v239 & (((v242 + ~(v242 << 27)) >> 31) ^ (v242 + ~((_DWORD)v242 << 27)));
            v244 = v238 + 48 * v243;
            v245 = *(_QWORD *)v244;
            if (*(_QWORD *)v244 != *(_QWORD *)v194)
            {
              v294 = 1;
              while (v245)
              {
                v243 = (v243 + v294) & v239;
                v244 = v238 + 48 * v243;
                v245 = *(_QWORD *)v244;
                ++v294;
                if (*(_QWORD *)v244 == *(_QWORD *)v194)
                  goto LABEL_239;
              }
              v244 = v238 + 48 * *(unsigned int *)(v238 - 4);
            }
LABEL_239:
            if (v244 == v238 + 48 * *(unsigned int *)(v238 - 4))
              goto LABEL_255;
            if (*(_DWORD *)(v194 + 16) != *(_DWORD *)(v244 + 16))
            {
              WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(v736, (uint64_t *)v194, v201, v202, v203, v204, v205, v206);
              v261 = *(_QWORD *)(v244 + 24);
              if (!v261)
              {
                v262 = 0;
                v263 = 0;
                goto LABEL_264;
              }
              v263 = *(unsigned int *)(v261 - 4);
              v264 = v261 + 16 * v263;
              if (*(_DWORD *)(v261 - 12))
              {
                v262 = *(_QWORD *)(v244 + 24);
                if ((_DWORD)v263)
                {
                  v295 = 16 * v263;
                  v262 = v261;
                  do
                  {
                    if (*(_DWORD *)v262)
                      goto LABEL_265;
                    v262 += 16;
                    v295 -= 16;
                  }
                  while (v295);
                  v262 = v264;
                }
              }
              else
              {
                v262 = v261 + 16 * v263;
LABEL_264:
                v264 = v261 + 16 * v263;
              }
LABEL_265:
              if (v261)
                v265 = v261 + 16 * *(unsigned int *)(v261 - 4);
              else
                v265 = 0;
              if (v265 == v262)
                goto LABEL_255;
              while (1)
              {
                WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(v736, (uint64_t *)(v262 + 8), v201, v202, v203, v204, v205, v206);
                v604 = v262 + 16;
                v262 = v264;
                if (v604 != v264)
                {
                  v262 = v604;
                  do
                  {
                    if (*(_DWORD *)v262)
                      goto LABEL_710;
                    v262 += 16;
                  }
                  while (v262 != v264);
                  v262 = v264;
                }
LABEL_710:
                if (v262 == v265)
                  goto LABEL_255;
              }
            }
            v246 = *(_QWORD *)(v244 + 24);
            if (!v246)
            {
              v247 = 0;
              v248 = 0;
LABEL_243:
              v249 = v246 + 16 * v248;
              goto LABEL_244;
            }
            v248 = *(unsigned int *)(v246 - 4);
            v249 = v246 + 16 * v248;
            if (!*(_DWORD *)(v246 - 12))
            {
              v247 = v246 + 16 * v248;
              goto LABEL_243;
            }
            v247 = *(_QWORD *)(v244 + 24);
            if ((_DWORD)v248)
            {
              v266 = 16 * v248;
              v247 = *(_QWORD *)(v244 + 24);
              do
              {
                if (*(_DWORD *)v247)
                  goto LABEL_244;
                v247 += 16;
                v266 -= 16;
              }
              while (v266);
              v247 = v249;
            }
LABEL_244:
            if (v246)
              v250 = v246 + 16 * *(unsigned int *)(v246 - 4);
            else
              v250 = 0;
            v251 = (uint64_t *)(v194 + 24);
            while (v247 != v250)
            {
              v284 = *v251;
              if (*v251)
              {
                v285 = *(_DWORD *)(v284 - 8);
                v286 = *(_DWORD *)(v247 + 4);
                v287 = (v286 + *(_DWORD *)v247) & v285;
                v288 = (int *)(v284 + 16 * v287);
                v289 = *v288;
                v290 = v288[1];
                if (*v288 == *(_DWORD *)v247 && v290 == v286)
                  goto LABEL_307;
                v292 = 1;
                while (v289 | v290)
                {
                  v287 = (v287 + v292) & v285;
                  v650 = (int *)(v284 + 16 * v287);
                  v289 = *v650;
                  v290 = v650[1];
                  ++v292;
                  if (v289 == *(_DWORD *)v247 && v290 == v286)
                    goto LABEL_307;
                }
              }
              *(_QWORD *)&v735 = *(_QWORD *)(v247 + 8);
              v706 = v249;
              v707 = v251;
              WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(v736, (uint64_t *)&v735, v201, v202, v203, v204, v205, v206);
              v249 = v706;
              v251 = v707;
LABEL_307:
              v293 = v247 + 16;
              v247 = v249;
              if (v293 != v249)
              {
                v247 = v293;
                do
                {
                  if (*(_DWORD *)v247)
                    goto LABEL_312;
                  v247 += 16;
                }
                while (v247 != v249);
                v247 = v249;
              }
LABEL_312:
              ;
            }
            v252 = *v251;
            if (!*v251)
              goto LABEL_248;
            v267 = *(_DWORD *)(v252 - 4);
            if (!v267)
              goto LABEL_248;
            v268 = 0;
            do
            {
              v269 = --v267;
              v270 = (int *)(v252 + 16 * v267);
              v271 = *v270;
              if (!*v270)
                continue;
              v705 = v268;
              v272 = *(_QWORD *)(v244 + 24);
              if (!v272)
                goto LABEL_730;
              v273 = v270[1];
              v274 = *(_DWORD *)(v272 - 8);
              v275 = v274 & (v273 + v271);
              v276 = (int *)(v272 + 16 * v275);
              v277 = *v276;
              v278 = v276[1];
              if (*v276 != v271 || v278 != v273)
              {
                v595 = 1;
                while (v277 | v278)
                {
                  v275 = (v275 + v595) & v274;
                  v276 = (int *)(v272 + 16 * v275);
                  v277 = *v276;
                  v278 = v276[1];
                  ++v595;
                  if (*v276 == v271 && v278 == v273)
                    goto LABEL_287;
                }
                v276 = (int *)(v272 + 16 * *(unsigned int *)(v272 - 4));
              }
LABEL_287:
              if (v276 == (int *)(v272 + 16 * *(unsigned int *)(v272 - 4)))
              {
LABEL_730:
                v703 = (int *)(v252 + 16 * v267);
                v704 = v267;
                v708 = v251;
                v612 = v703;
              }
              else
              {
                if (*((_QWORD *)v276 + 1) == *(_QWORD *)(v252 + 16 * v267 + 8))
                {
                  v268 = v705;
                  continue;
                }
                v703 = (int *)(v252 + 16 * v267);
                v704 = v267;
                v708 = v251;
                *(_QWORD *)&v735 = *((_QWORD *)v703 + 1);
                v702 = v276;
                WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(v736, (uint64_t *)&v735, v201, v202, v203, v204, v205, v206);
                v612 = v702;
              }
              *(_QWORD *)&v735 = *((_QWORD *)v612 + 1);
              WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(v736, (uint64_t *)&v735, v201, v202, v203, v204, v205, v206);
              v269 = v704;
              *(_QWORD *)v703 = 0x100000000;
              v268 = v705 + 1;
              v251 = v708;
            }
            while (v269);
            v280 = *v251;
            if (v268)
            {
              *(_DWORD *)(v280 - 16) += v268;
              v653 = *v251;
              if (*v251)
                v654 = *(_DWORD *)(v653 - 12);
              else
                v654 = 0;
              *(_DWORD *)(v653 - 12) = v654 - v268;
              v280 = *v251;
            }
            if (v280)
            {
              v281 = *(_DWORD *)(v280 - 4);
              v282 = 6 * *(_DWORD *)(v280 - 12);
              if (v281 >= 9 && v282 < v281)
                WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::shrinkToBestSize(v251);
            }
LABEL_248:
            v253 = *(_QWORD *)(v244 + 32);
            *(_QWORD *)&v735 = 0;
            if ((v253 & 1) != 0 && v253 != 4)
            {
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v735, (_QWORD *)(v244 + 32));
              v253 = v735;
            }
            *(_QWORD *)&v735 = v253 & 0xFFFFFFFFFFFFFFFDLL;
            JSC::DFG::RegisteredStructureSet::filter((JSC::DFG::RegisteredStructureSet *)(v194 + 32), (const JSC::DFG::StructureAbstractValue *)&v735, v201, v202, v203, v204, v205, v206);
            if ((v735 & 1) != 0)
              WTF::fastFree(v735 & 0xFFFFFFFFFFFFFFFCLL, v200, v201, v202, v203, v204, v205, v206);
            v254 = (uint64_t *)(v194 + 40);
            v257 = *(_QWORD *)(v244 + 40);
            v256 = (_QWORD *)(v244 + 40);
            v255 = v257;
            if ((v257 & 1) != 0)
            {
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)(v194 + 40), v256);
            }
            else
            {
              v258 = v255 & 0xFFFFFFFFFFFFFFFCLL;
              if ((v255 & 0xFFFFFFFFFFFFFFFCLL) != 0)
              {
                v259 = *v254;
                if ((*v254 & 1) != 0)
                {
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)(v194 + 40), v258);
                }
                else if ((v259 & 0xFFFFFFFFFFFFFFFCLL) != v258)
                {
                  if ((v259 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  {
                    v550 = WTF::fastMalloc((WTF *)0x28);
                    *(_QWORD *)v550 = 0x400000002;
                    v551 = *v254;
                    *(_QWORD *)(v550 + 8) = *v254 & 0xFFFFFFFFFFFFFFFCLL;
                    *(_QWORD *)(v550 + 16) = v258;
                    *v254 = v551 & 2 | v550 | 1;
                  }
                  else
                  {
                    *v254 = *v254 & 2 | v258;
                  }
                }
              }
            }
LABEL_255:
            v260 = v194 + 48;
            v194 = v237;
            if (v260 != v237)
            {
              v194 = v260;
              while ((unint64_t)(*(_QWORD *)v194 + 1) <= 1)
              {
                v194 += 48;
                if (v194 == v237)
                {
                  v194 = v237;
                  break;
                }
              }
            }
          }
          while (v194 != v711);
LABEL_324:
          v296 = (_QWORD *)*v23;
          if (!*v23)
          {
            v297 = 0;
            v298 = 0;
            v177 = v710;
            goto LABEL_326;
          }
          v298 = *((unsigned int *)v296 - 1);
          v299 = &v296[2 * v298];
          v177 = v710;
          if (*((_DWORD *)v296 - 3))
          {
            v297 = (_QWORD *)*v23;
            if ((_DWORD)v298)
            {
              v332 = 16 * v298;
              v297 = (_QWORD *)*v23;
              while ((unint64_t)(*v297 + 1) <= 1)
              {
                v297 += 2;
                v332 -= 16;
                if (!v332)
                {
                  v297 = v299;
                  break;
                }
              }
            }
          }
          else
          {
            v297 = &v296[2 * v298];
LABEL_326:
            v299 = &v296[2 * v298];
          }
          if (v296)
            v300 = &v296[2 * *((unsigned int *)v296 - 1)];
          else
            v300 = 0;
          while (v297 != v300)
          {
            v734 = *(_OWORD *)v297;
            WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>((uint64_t *)(v715 + 40 * v207 + 8), (uint64_t *)&v734, (uint64_t *)&v734 + 1, v202, v203, v204, v205, v206, (uint64_t)&v735);
            v200 = (void *)(v735 + 8);
            v301 = *(_QWORD *)(v735 + 8);
            v302 = *((_QWORD *)&v734 + 1);
            if (v301 != *((_QWORD *)&v734 + 1))
            {
              if (v301)
              {
                WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(v736, (uint64_t *)v200, v201, v202, v203, v204, v205, v206);
                *(_QWORD *)(v735 + 8) = 0;
                v302 = *((_QWORD *)&v734 + 1);
              }
              if (v302)
                WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(v736, (uint64_t *)&v734 + 1, v201, v202, v203, v204, v205, v206);
            }
            v303 = v297 + 2;
            v297 = v299;
            if (v303 != v299)
            {
              v297 = v303;
              while ((unint64_t)(*v297 + 1) <= 1)
              {
                v297 += 2;
                if (v297 == v299)
                {
                  v297 = v299;
                  break;
                }
              }
            }
          }
          v304 = *(_QWORD *)(v715 + 40 * v207 + 8);
          if (!v304)
          {
            v305 = 0;
            v306 = 0;
            v179 = v709;
            goto LABEL_339;
          }
          v306 = *(unsigned int *)(v304 - 4);
          v307 = (_QWORD *)(v304 + 16 * v306);
          v179 = v709;
          if (*(_DWORD *)(v304 - 12))
          {
            v305 = *(_QWORD **)(v715 + 40 * v207 + 8);
            if ((_DWORD)v306)
            {
              v333 = 16 * v306;
              v305 = *(_QWORD **)(v715 + 40 * v207 + 8);
              while ((unint64_t)(*v305 + 1) <= 1)
              {
                v305 += 2;
                v333 -= 16;
                if (!v333)
                {
                  v305 = v307;
                  break;
                }
              }
            }
          }
          else
          {
            v305 = (_QWORD *)(v304 + 16 * v306);
LABEL_339:
            v307 = (_QWORD *)(v304 + 16 * v306);
          }
          if (v304)
            v308 = (_QWORD *)(v304 + 16 * *(unsigned int *)(v304 - 4));
          else
            v308 = 0;
          if (v308 != v305)
          {
            while (2)
            {
              v309 = (_QWORD *)*v23;
              if (!*v23)
                goto LABEL_349;
              v310 = *((_DWORD *)v309 - 2);
              v311 = ~(*v305 << 32) + *v305;
              v312 = (v311 ^ (v311 >> 22)) + ~((v311 ^ (v311 >> 22)) << 13);
              v313 = (9 * (v312 ^ (v312 >> 8))) ^ ((9 * (v312 ^ (v312 >> 8))) >> 15);
              v314 = v310 & (((v313 + ~(v313 << 27)) >> 31) ^ (v313 + ~((_DWORD)v313 << 27)));
              v315 = v309[2 * v314];
              if (v315 != *v305)
              {
                v316 = 1;
                while (v315)
                {
                  v314 = (v314 + v316) & v310;
                  v315 = v309[2 * v314];
                  ++v316;
                  if (v315 == *v305)
                    goto LABEL_351;
                }
LABEL_349:
                if (v305[1])
                {
                  WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(v736, v305 + 1, v201, v202, v203, v204, v205, v206);
                  v305[1] = 0;
                }
              }
LABEL_351:
              v317 = v305 + 2;
              v305 = v307;
              if (v317 != v307)
              {
                v305 = v317;
                while ((unint64_t)(*v305 + 1) <= 1)
                {
                  v305 += 2;
                  if (v305 == v307)
                  {
                    v305 = v307;
                    break;
                  }
                }
              }
              if (v305 == v308)
                break;
              continue;
            }
          }
          if (!v736[0])
          {
            v320 = 0;
            v318 = 0;
LABEL_657:
            v319 = v736[0] + 8 * v318;
            goto LABEL_364;
          }
          v318 = *(unsigned int *)(v736[0] - 4);
          v319 = v736[0] + 8 * v318;
          if (!*(_DWORD *)(v736[0] - 12))
          {
            v320 = (JSC::DFG::Node **)(v736[0] + 8 * v318);
            goto LABEL_657;
          }
          v320 = (JSC::DFG::Node **)v736[0];
          if ((_DWORD)v318)
          {
            v321 = 8 * v318;
            v320 = (JSC::DFG::Node **)v736[0];
            while ((unint64_t)*v320 + 1 <= 1)
            {
              ++v320;
              v321 -= 8;
              if (!v321)
              {
                v320 = (JSC::DFG::Node **)v319;
                break;
              }
            }
          }
LABEL_364:
          if (v736[0])
            v322 = v736[0] + 8 * *(unsigned int *)(v736[0] - 4);
          else
            v322 = 0;
          v323 = v713;
          if ((JSC::DFG::Node **)v322 != v320)
          {
            do
            {
              v331 = v320 + 1;
              v320 = (JSC::DFG::Node **)v319;
              if (v331 != (JSC::DFG::Node **)v319)
              {
                v320 = v331;
                while ((unint64_t)*v320 + 1 <= 1)
                {
                  if (++v320 == (JSC::DFG::Node **)v319)
                  {
                    v320 = (JSC::DFG::Node **)v319;
                    break;
                  }
                }
              }
              v323 = v713;
            }
            while (v320 != (JSC::DFG::Node **)v322);
          }
          if (v736[0])
            WTF::fastFree(v736[0] - 16, v324, v325, v326, v327, v328, v329, v330);
LABEL_212:
          v226 = *(_DWORD *)(v197 + 8);
          if (*((_DWORD *)this + 121) <= v226)
          {
            __break(0xC471u);
            JUMPOUT(0x1984D2338);
          }
          v227 = *((_QWORD *)this + 59) + 40 * v226;
          v228 = v729;
          if (v729)
          {
            v187 = *(unsigned int *)(v729 - 4);
            if ((_DWORD)v187)
            {
              v186 = (_QWORD *)(v729 + 40);
              do
              {
                if (*(v186 - 5) != -1)
                {
                  if ((*v186 & 1) != 0)
                    WTF::fastFree(*v186 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                  v184 = *(v186 - 1);
                  if ((v184 & 1) != 0)
                    WTF::fastFree(v184 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                  v185 = *(v186 - 2);
                  if (v185)
                    WTF::fastFree(v185 - 16, a2, a3, a4, a5, a6, a7, a8);
                }
                v186 += 6;
                --v187;
              }
              while (v187);
            }
            WTF::fastFree(v228 - 16, a2, a3, a4, a5, a6, a7, a8);
          }
          v229 = v727;
          if (v727)
          {
            v191 = *(unsigned int *)(v727 - 4);
            if ((_DWORD)v191)
            {
              v190 = (_QWORD *)(v727 + 40);
              do
              {
                if (*(v190 - 5) != -1)
                {
                  if ((*v190 & 1) != 0)
                    WTF::fastFree(*v190 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                  v188 = *(v190 - 1);
                  if ((v188 & 1) != 0)
                    WTF::fastFree(v188 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                  v189 = *(v190 - 2);
                  if (v189)
                    WTF::fastFree(v189 - 16, a2, a3, a4, a5, a6, a7, a8);
                }
                v190 += 6;
                --v191;
              }
              while (v191);
            }
            WTF::fastFree(v229 - 16, a2, a3, a4, a5, a6, a7, a8);
          }
          if (*((_QWORD *)&v726 + 1))
            WTF::fastFree(*((_QWORD *)&v726 + 1) - 16, a2, a3, a4, a5, a6, a7, a8);
          v180 = v720 + 1;
          v181 = (v720 + 1);
          v719 = 1;
        }
        while (v179 != v180);
LABEL_150:
        v24 = (WTF *)((char *)v24 + 8);
        if (v24 == v721)
        {
          v24 = v730;
          v475 = v719;
          goto LABEL_547;
        }
      }
    }
    v475 = 0;
LABEL_547:
    if (v24)
    {
      v730 = 0;
      v731 = 0;
      WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  while ((v475 & 1) != 0);
}

BOOL JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::determineSinkCandidates(JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t StatusReg;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  JSC::DFG::Node *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  JSC::DFG::Node *v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  unsigned int v119;
  int *v120;
  int v121;
  int v122;
  int v124;
  int v125;
  unsigned int v126;
  int v127;
  int v128;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  JSC::DFG::Node *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  JSC::DFG::Node *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  unsigned int v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  JSC::DFG::Node *v186;
  JSC::DFG::Node *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t *v190;
  unsigned int v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  unsigned int v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  unsigned int v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  JSC::DFG::Node *v234;
  uint64_t *v235;
  int v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t *v239;
  unsigned int v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unsigned int v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t *v277;
  unsigned int v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t *v285;
  __int128 *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  JSC::DFG::Node *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  __int128 *v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t *v312;
  int v314;
  int v315;
  int v316;
  int v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  int v326;
  _BOOL8 v327;
  unint64_t v328;
  _QWORD *v330;
  unsigned int v331;
  _QWORD *v332;
  _QWORD *v333;
  uint64_t v334;
  int v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unsigned int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  void *v353;
  int v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  int v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unsigned int v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  unsigned int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int v380;
  int v381;
  JSC::DFG::Node *v382;
  JSC::DFG::Node *v383;
  uint64_t v384;
  int v385;
  int v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t *v390;
  int v391;
  uint64_t v392;
  unint64_t v393;
  unsigned int v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  uint64_t v398;
  int v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t *v402;
  unsigned int v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  __int128 *v421;
  unsigned int v422;
  unsigned int v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  void *v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t *v444;
  unsigned int v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t *v453;
  unsigned int v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t *v465;
  uint64_t v466;
  unsigned int v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  int v473;
  unsigned int v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  JSC::DFG::Node *v484;
  uint64_t v485;
  uint64_t v486;
  unsigned int v487;
  uint64_t v488;
  int *v489;
  int v490;
  int v491;
  int v493;
  int *v494;
  uint64_t v496;
  unsigned int v497;
  unint64_t v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  int v502;
  uint64_t v503;
  unsigned int v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  int v511;
  uint64_t *v512;
  uint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  uint64_t v518;
  int v519;
  JSC::DFG::Node *v520;
  uint64_t *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  JSC::DFG::Node *v534;
  JSC::DFG::Node *v535;
  JSC::DFG::Node *v536;
  uint64_t v537;
  unsigned int *v538;
  uint64_t v539;
  char v540;
  uint64_t *v541;
  uint64_t v542;
  int v543;
  uint64_t v545;
  unint64_t v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  char v550;
  uint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  void *v563;
  unsigned int *v564;
  uint64_t *v565;
  int v566;
  uint64_t *v567;
  char *v568;
  uint64_t *v569;
  WTF *v570;
  uint64_t v571;
  unint64_t v572;
  uint64_t *v573;
  WTF *v574;
  int v575;
  unsigned int v576;
  uint64_t v577;
  uint64_t v578;
  __int128 v579;
  _QWORD *v580;
  __int128 v581;
  char v582;
  uint64_t v583[2];

  v9 = *((_QWORD *)this + 25);
  v567 = (uint64_t *)((char *)this + 200);
  if (v9)
  {
    *v567 = 0;
    WTF::fastFree(v9 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 54);
  if (v10)
  {
    *((_QWORD *)this + 54) = 0;
    WTF::fastFree(v10 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 55);
  if (v11)
  {
    *((_QWORD *)this + 55) = 0;
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = v11 + 8;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      do
      {
        if (*(_QWORD *)(v13 - 8) == -1)
          goto LABEL_15;
        a2 = *(_QWORD *)v13;
        if (!*(_QWORD *)v13)
          goto LABEL_15;
        *(_QWORD *)v13 = 0;
        *(_DWORD *)(v13 + 8) = 0;
        v15 = *(_QWORD *)(StatusReg + 752);
        if (v15)
        {
          if (!(a2 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
          {
LABEL_13:
            v16 = *(unsigned int *)(v15 + 8000);
            if (v16 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v15, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v15 + 8 * v16) = a2 | 0x5000000000000;
              *(_DWORD *)(v15 + 8000) = v16 + 1;
            }
            goto LABEL_15;
          }
          if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_13;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v15, a2, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_15:
        v13 += 24;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v11 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *((_QWORD *)this + 56);
  if (v17)
  {
    *((_QWORD *)this + 56) = 0;
    WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::deallocateTable(v17, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = *((_QWORD *)this + 57);
  if (v18)
  {
    *((_QWORD *)this + 57) = 0;
    WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::deallocateTable(v18, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v577 = 0;
  JSC::DFG::Graph::blocksInPreOrder(*((JSC::DFG::Graph **)this + 4), (void *)a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v574);
  v26 = v574;
  if (v576)
  {
    v566 = 0;
    v27 = (uint64_t *)((char *)this + 520);
    v572 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v573 = (uint64_t *)((char *)this + 512);
    v568 = (char *)v574 + 8 * v576;
    v569 = (uint64_t *)((char *)this + 520);
    while (1)
    {
      v571 = *(_QWORD *)v26;
      v28 = *(_DWORD *)(*(_QWORD *)v26 + 8);
      if (*((_DWORD *)this + 121) <= v28)
      {
        __break(0xC471u);
        JUMPOUT(0x1984D4F2CLL);
      }
      v29 = *((_QWORD *)this + 59);
      v30 = v29 + 40 * v28;
      *((_BYTE *)this + 504) = *(_BYTE *)v30;
      WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable((uint64_t *)&v581, (_QWORD *)(v30 + 8), v20, (uint64_t)v21, v22, v23, v24, v25);
      v38 = *((_QWORD *)this + 64);
      *((_QWORD *)this + 64) = v581;
      *(_QWORD *)&v581 = v38;
      if (v38)
        WTF::fastFree(v38 - 16, v31, v32, v33, v34, v35, v36, v37);
      v570 = v26;
      v39 = v29 + 40 * v28;
      *((_BYTE *)this + 528) = *(_BYTE *)(v39 + 24);
      v52 = *(unsigned int *)(v571 + 220);
      if ((_DWORD)v52)
      {
        v53 = *(uint64_t **)(v571 + 208);
        v54 = &v53[v52];
        v55 = (JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)this + 504);
        do
        {
          v56 = *v53;
          v580 = 0;
          v57 = *(unsigned __int16 *)(v56 + 18);
          if (v57 > 0x85)
          {
            if (*(unsigned __int16 *)(v56 + 18) > 0x158u)
            {
              if (v57 - 420 < 7)
                goto LABEL_46;
              if (v57 - 359 < 4)
              {
                *(_QWORD *)&v579 = **(_QWORD **)(v56 + 72);
                v372 = *(_QWORD *)(v579 + 112);
                if ((v372 & 1) != 0)
                  v373 = (v372 >> 1) & 3;
                else
                  v373 = *(unsigned __int8 *)(v372 + 4);
                LOBYTE(v583[0]) = v373 != 2;
                WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(&v581, (uint64_t *)this + 53, (uint64_t *)&v579, v583, v48, v49, v50, v51);
                if (*(_BYTE *)(v581 + 8))
                  goto LABEL_611;
                v380 = *(unsigned __int16 *)(v56 + 18) - 360;
                if (v380 > 2)
                  v381 = 3;
                else
                  v381 = dword_1991563D8[(__int16)v380];
                v583[0] = 9;
                v460 = *(_QWORD *)(v56 + 72);
                *(_QWORD *)&v579 = 0;
                *((_QWORD *)&v579 + 1) = v460;
                WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v581, (uint64_t *)&v580, v583, &v579);
                v583[0] = 8;
                v461 = *(_QWORD *)(v56 + 24);
                v462 = v461 & 0xFF00FFFFFFFFFFFFLL;
                *(_QWORD *)&v579 = v461 & 0xFF00FFFFFFFFFFFFLL;
                *((_QWORD *)&v579 + 1) = 0;
                if ((v461 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v320 = *(unsigned __int16 *)((v461 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if (v320 <= 2)
                  {
                    v321 = *(_QWORD *)(v462 + 72);
                    *((_QWORD *)&v579 + 1) = v321;
                    if ((_DWORD)v320)
                    {
                      if ((_DWORD)v320 != 1)
                        goto LABEL_696;
                      goto LABEL_362;
                    }
                  }
                }
                goto LABEL_332;
              }
              if (v57 != 345)
                goto LABEL_32;
              *(_QWORD *)&v579 = **(_QWORD **)(v56 + 72);
              v409 = *(_QWORD *)(v579 + 40);
              if ((v409 & 1) != 0)
                v410 = (v409 >> 1) & 3;
              else
                v410 = *(unsigned __int8 *)(v409 + 4);
              LOBYTE(v583[0]) = v410 != 2;
              WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(&v581, (uint64_t *)this + 53, (uint64_t *)&v579, v583, v48, v49, v50, v51);
              if (*(_BYTE *)(v581 + 8))
              {
LABEL_611:
                goto LABEL_34;
              }
              v583[0] = 2;
              v411 = *(_QWORD *)(v56 + 72);
              *(_QWORD *)&v579 = 0;
              *((_QWORD *)&v579 + 1) = v411;
              WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v581, (uint64_t *)&v580, v583, &v579);
              v583[0] = 1;
              v412 = *(_QWORD *)(v56 + 24);
              v413 = v412 & 0xFF00FFFFFFFFFFFFLL;
              *(_QWORD *)&v579 = v412 & 0xFF00FFFFFFFFFFFFLL;
              *((_QWORD *)&v579 + 1) = 0;
              if ((v412 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v485 = *(unsigned __int16 *)((v412 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                if (v485 <= 2)
                {
                  v486 = *(_QWORD *)(v413 + 72);
                  *((_QWORD *)&v579 + 1) = v486;
                  if ((_DWORD)v485)
                  {
                    if ((_DWORD)v485 != 1)
                      v485 = 2;
                    *((_QWORD *)&v579 + 1) = v485 | v486;
                  }
                }
              }
              WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v581, (uint64_t *)&v580, v583, &v579);
              v414 = **(_QWORD **)(v56 + 72);
              v421 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), **(_QWORD **)(v56 + 80), v415, v416, v417, v418, v419, v420);
              *(_QWORD *)&v579 = 0;
              *((_QWORD *)&v579 + 1) = v421;
              if (*(_DWORD *)(v414 + 16) != -1)
              {
                v422 = 0;
                do
                {
                  LODWORD(v583[0]) = 6;
                  HIDWORD(v583[0]) = v422;
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode&>((uint64_t)&v581, (uint64_t *)&v580, v583, &v579);
                  ++v422;
                }
                while (v422 < *(_DWORD *)(v414 + 16) + 1);
              }
              goto LABEL_481;
            }
            if (*(unsigned __int16 *)(v56 + 18) <= 0xAAu)
            {
              switch(*(_WORD *)(v56 + 18))
              {
                case 0x98:
                case 0x99:
                  v93 = *(_QWORD *)(v56 + 32);
                  v94 = v93 & 0xFF00FFFFFFFFFFFFLL;
                  v60 = v95;
                  if (v95 && *((_DWORD *)v95 + 2) == 1)
                  {
                    v385 = *(_DWORD *)(*(_QWORD *)(v56 + 72) + 4);
                    v386 = 11;
                    goto LABEL_452;
                  }
                  v96 = *v573;
                  if (!*v573)
                    goto LABEL_35;
                  v177 = *(_QWORD *)(v56 + 24);
                  v178 = v177 & 0xFF00FFFFFFFFFFFFLL;
                  v179 = *(_DWORD *)(v96 - 8);
                  v180 = ((v177 & 0xFF00FFFFFFFFFFFFLL) + ~(v177 << 32)) ^ (((v177 & 0xFF00FFFFFFFFFFFFLL)
                                                                           + ~(v177 << 32)) >> 22);
                  v181 = 9 * ((v180 + ~(v180 << 13)) ^ ((v180 + ~(v180 << 13)) >> 8));
                  v182 = (v181 ^ (v181 >> 15)) + ~((v181 ^ (v181 >> 15)) << 27);
                  v183 = v179 & ((v182 >> 31) ^ v182);
                  v184 = *(_QWORD *)(v96 + 16 * v183);
                  if (v184 == v178)
                    goto LABEL_230;
                  v185 = 1;
                  while (v184)
                  {
                    v183 = ((_DWORD)v183 + v185) & v179;
                    v184 = *(_QWORD *)(v96 + 16 * v183);
                    ++v185;
                    if (v184 == v178)
                      goto LABEL_230;
                  }
                  v183 = *(unsigned int *)(v96 - 4);
LABEL_230:
                  if (v183 == *(_DWORD *)(v96 - 4))
                    goto LABEL_231;
                  v295 = *(JSC::DFG::Node **)(v96 + 16 * v183 + 8);
                  if (!v295)
                    goto LABEL_231;
                  v96 = *v573;
                  if (!*v573)
                    goto LABEL_35;
                  v93 = *(_QWORD *)(v56 + 32);
                  v94 = v93 & 0xFF00FFFFFFFFFFFFLL;
                  v179 = *(_DWORD *)(v96 - 8);
LABEL_231:
                  v198 = (v94 + ~(v93 << 32)) ^ ((v94 + ~(v93 << 32)) >> 22);
                  v199 = 9 * ((v198 + ~(v198 << 13)) ^ ((v198 + ~(v198 << 13)) >> 8));
                  v200 = (v199 ^ (v199 >> 15)) + ~((v199 ^ (v199 >> 15)) << 27);
                  v195 = v179 & ((v200 >> 31) ^ v200);
                  v201 = *(_QWORD *)(v96 + 16 * v195);
                  if (v201 == v94)
                    goto LABEL_163;
                  v202 = 1;
                  do
                  {
                    if (!v201)
                      goto LABEL_356;
                    v195 = ((_DWORD)v195 + v202) & v179;
                    v201 = *(_QWORD *)(v96 + 16 * v195);
                    ++v202;
                  }
                  while (v201 != v94);
                  goto LABEL_163;
                case 0x9A:
                  v310 = *(_QWORD *)(v56 + 24);
                  v311 = v310 & 0xFF00FFFFFFFFFFFFLL;
                  if (!v312 || (v537 = (uint64_t)v312, *((_DWORD *)v312 + 2) != 1))
                  {
                    v148 = *v573;
                    if (!*v573)
                      goto LABEL_34;
                    v394 = *(_DWORD *)(v148 - 8);
                    v395 = (v311 + ~(v310 << 32)) ^ ((v311 + ~(v310 << 32)) >> 22);
                    v396 = 9 * ((v395 + ~(v395 << 13)) ^ ((v395 + ~(v395 << 13)) >> 8));
                    v397 = (v396 ^ (v396 >> 15)) + ~((v396 ^ (v396 >> 15)) << 27);
                    v226 = v394 & ((v397 >> 31) ^ v397);
                    v398 = *(_QWORD *)(v148 + 16 * v226);
                    if (v398 != v311)
                    {
                      v399 = 1;
                      do
                      {
                        if (!v398)
                          goto LABEL_271;
                        v226 = ((_DWORD)v226 + v399) & v394;
                        v398 = *(_QWORD *)(v148 + 16 * v226);
                        ++v399;
                      }
                      while (v398 != v311);
                    }
                    goto LABEL_272;
                  }
                  v538 = *(unsigned int **)(v56 + 72);
                  v578 = 0;
                  v539 = v538[5];
                  if ((_DWORD)v539)
                  {
                    v540 = 0;
                    v541 = (uint64_t *)*((_QWORD *)v538 + 1);
                    v565 = v312 + 3;
                    v542 = 32 * v539;
                    do
                    {
                      if (WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::overlaps(v565, v541))
                      {
                        v543 = *((_DWORD *)v541 + 6);
                        if (v543 == 1 || v543 == 3)
                        {
                          v540 = 1;
                        }
                        else
                        {
                          if (v543 != 2)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1984D4F9CLL);
                          }
                          v545 = *v541;
                          if ((*v541 & 1) != 0)
                          {
                            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine(&v578, v541);
                          }
                          else
                          {
                            v546 = v545 & 0xFFFFFFFFFFFFFFFCLL;
                            if ((v545 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                            {
                              if ((v578 & 1) != 0)
                              {
                                WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(&v578, v546);
                              }
                              else if ((v578 & 0xFFFFFFFFFFFFFFFCLL) != v546)
                              {
                                v564 = v538;
                                v547 = v545 & 0xFFFFFFFFFFFFFFFCLL;
                                if ((v578 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                                {
                                  v549 = WTF::fastMalloc((WTF *)0x28);
                                  *(_QWORD *)v549 = 0x400000002;
                                  v550 = v578;
                                  *(_QWORD *)(v549 + 8) = v578 & 0xFFFFFFFFFFFFFFFCLL;
                                  *(_QWORD *)(v549 + 16) = v547;
                                  v548 = v550 & 2 | (unint64_t)v549 | 1;
                                }
                                else
                                {
                                  v548 = v578 & 2 | v546;
                                }
                                v578 = v548;
                                v538 = v564;
                              }
                            }
                          }
                        }
                      }
                      v541 += 4;
                      v542 -= 32;
                    }
                    while (v542);
                    if ((v540 & 1) == 0 && (v578 & 0xFFFFFFFFFFFFFFFDLL) != 0)
                    {
                      v555 = *v538;
                      if ((WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::isSubsetOf(v565, &v578) & 1) == 0)
                      if (v562)
                      {
                        *(_QWORD *)&v579 = v56;
                        v583[0] = v562;
                        WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(v573, (uint64_t *)&v579, v583, v47, v48, v49, v50, v51, (uint64_t)&v581);
                      }
                      if ((v578 & 1) != 0)
                        WTF::fastFree(v578 & 0xFFFFFFFFFFFFFFFCLL, v563, v46, v47, v48, v49, v50, v51);
                      v60 = 0;
                      v566 = 1;
                      goto LABEL_481;
                    }
                  }
                  v441 = v578;
                  if ((v578 & 1) == 0)
                    goto LABEL_34;
                  goto LABEL_506;
                case 0x9B:
                  v149 = *(_QWORD *)(v56 + 32);
                  v150 = v149 & 0xFF00FFFFFFFFFFFFLL;
                  v60 = v151;
                  if (v151 && *((_DWORD *)v151 + 2) == 1)
                  {
                    v229 = *(_DWORD *)(*(_QWORD *)(v56 + 72) + 4);
                    LODWORD(v583[0]) = 11;
                    HIDWORD(v583[0]) = v229;
                    v230 = *(_QWORD *)(v56 + 40);
                    v231 = v230 & 0xFF00FFFFFFFFFFFFLL;
                    *(_QWORD *)&v579 = v230 & 0xFF00FFFFFFFFFFFFLL;
                    *((_QWORD *)&v579 + 1) = 0;
                    if ((v230 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v232 = *(unsigned __int16 *)((v230 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                      if (v232 <= 2)
                      {
                        v384 = *(_QWORD *)(v231 + 72);
                        *((_QWORD *)&v579 + 1) = v384;
                        if ((_DWORD)v232)
                        {
                          if ((_DWORD)v232 != 1)
                          {
                            v232 = 2;
                            v55 = (JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)this + 504);
                          }
                          *((_QWORD *)&v579 + 1) = v232 | v384;
                        }
                      }
                    }
                    goto LABEL_332;
                  }
                  v152 = *v573;
                  if (!*v573)
                    goto LABEL_35;
                  v253 = *(_QWORD *)(v56 + 24);
                  v254 = v253 & 0xFF00FFFFFFFFFFFFLL;
                  v255 = *(_DWORD *)(v152 - 8);
                  v256 = ((v253 & 0xFF00FFFFFFFFFFFFLL) + ~(v253 << 32)) ^ (((v253 & 0xFF00FFFFFFFFFFFFLL)
                                                                           + ~(v253 << 32)) >> 22);
                  v257 = 9 * ((v256 + ~(v256 << 13)) ^ ((v256 + ~(v256 << 13)) >> 8));
                  v258 = (v257 ^ (v257 >> 15)) + ~((v257 ^ (v257 >> 15)) << 27);
                  v259 = v255 & ((v258 >> 31) ^ v258);
                  v260 = *(_QWORD *)(v152 + 16 * v259);
                  if (v260 == v254)
                    goto LABEL_297;
                  v261 = 1;
                  break;
                case 0x9C:
                case 0x9D:
                case 0x9E:
                case 0x9F:
                case 0xA0:
                case 0xA1:
                case 0xA2:
                case 0xA3:
                case 0xA4:
                  goto LABEL_32;
                case 0xA5:
                  v275 = *(_QWORD *)(v56 + 24);
                  v276 = v275 & 0xFF00FFFFFFFFFFFFLL;
                  v60 = v277;
                  if (v277 && (*((_DWORD *)v277 + 2) - 3) < 3)
                  {
                    v385 = 0;
                    v386 = 8;
                    goto LABEL_452;
                  }
                  v96 = *v573;
                  if (!*v573)
                    goto LABEL_35;
                  v278 = *(_DWORD *)(v96 - 8);
                  v279 = (v276 + ~(v275 << 32)) ^ ((v276 + ~(v275 << 32)) >> 22);
                  v280 = 9 * ((v279 + ~(v279 << 13)) ^ ((v279 + ~(v279 << 13)) >> 8));
                  v281 = (v280 ^ (v280 >> 15)) + ~((v280 ^ (v280 >> 15)) << 27);
                  v195 = v278 & ((v281 >> 31) ^ v281);
                  v282 = *(_QWORD *)(v96 + 16 * v195);
                  if (v282 != v276)
                  {
                    v316 = 1;
                    do
                    {
                      if (!v282)
                        goto LABEL_356;
                      v195 = ((_DWORD)v195 + v316) & v278;
                      v282 = *(_QWORD *)(v96 + 16 * v195);
                      ++v316;
                    }
                    while (v282 != v276);
                  }
                  goto LABEL_163;
                case 0xA6:
                  v400 = *(_QWORD *)(v56 + 24);
                  v401 = v400 & 0xFF00FFFFFFFFFFFFLL;
                  v60 = v402;
                  if (v402 && *((_DWORD *)v402 + 2) == 2)
                  {
                    v385 = 0;
                    v386 = 1;
                    goto LABEL_452;
                  }
                  v96 = *v573;
                  if (!*v573)
                    goto LABEL_35;
                  v403 = *(_DWORD *)(v96 - 8);
                  v404 = (v401 + ~(v400 << 32)) ^ ((v401 + ~(v400 << 32)) >> 22);
                  v405 = 9 * ((v404 + ~(v404 << 13)) ^ ((v404 + ~(v404 << 13)) >> 8));
                  v406 = (v405 ^ (v405 >> 15)) + ~((v405 ^ (v405 >> 15)) << 27);
                  v195 = v403 & ((v406 >> 31) ^ v406);
                  v407 = *(_QWORD *)(v96 + 16 * v195);
                  if (v407 != v401)
                  {
                    v408 = 1;
                    do
                    {
                      if (!v407)
                        goto LABEL_356;
                      v195 = ((_DWORD)v195 + v408) & v403;
                      v407 = *(_QWORD *)(v96 + 16 * v195);
                      ++v408;
                    }
                    while (v407 != v401);
                  }
                  goto LABEL_163;
                default:
                  if (v57 == 135)
                  {
                    v283 = *(_QWORD *)(v56 + 24);
                    v284 = v283 & 0xFF00FFFFFFFFFFFFLL;
                    v60 = v285;
                    if (v285 && *((_DWORD *)v285 + 2) == 1)
                    {
                      v583[0] = 13;
                      v286 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), *(_QWORD *)(*(_QWORD *)(v56 + 72) + 8), v46, v47, v48, v49, v50, v51);
                      *(_QWORD *)&v579 = 0;
                      *((_QWORD *)&v579 + 1) = v286;
                      WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v581, (uint64_t *)&v580, v583, &v579);
                      *(_QWORD *)&v581 = *(_QWORD *)(*(_QWORD *)(v56 + 72) + 8);
                      if ((v581 & 1) != 0)
                        WTF::fastFree(v581 & 0xFFFFFFFFFFFFFFFCLL, v293, v46, v47, v48, v49, v50, v51);
                      goto LABEL_35;
                    }
                    v96 = *v573;
                    if (!*v573)
                      goto LABEL_35;
                    v423 = *(_DWORD *)(v96 - 8);
                    v424 = (v284 + ~(v283 << 32)) ^ ((v284 + ~(v283 << 32)) >> 22);
                    v425 = 9 * ((v424 + ~(v424 << 13)) ^ ((v424 + ~(v424 << 13)) >> 8));
                    v426 = (v425 ^ (v425 >> 15)) + ~((v425 ^ (v425 >> 15)) << 27);
                    v195 = v423 & ((v426 >> 31) ^ v426);
                    v427 = *(_QWORD *)(v96 + 16 * v195);
                    if (v427 != v284)
                    {
                      v428 = 1;
                      do
                      {
                        if (!v427)
                          goto LABEL_356;
                        v195 = ((_DWORD)v195 + v428) & v423;
                        v427 = *(_QWORD *)(v96 + 16 * v195);
                        ++v428;
                      }
                      while (v427 != v284);
                    }
                  }
                  else
                  {
                    if (v57 != 134)
                      goto LABEL_32;
                    v451 = *(_QWORD *)(v56 + 24);
                    v452 = v451 & 0xFF00FFFFFFFFFFFFLL;
                    v60 = v453;
                    if (v453 && (*((_DWORD *)v453 + 2) - 3) < 3)
                    {
                      v385 = 0;
                      v386 = 9;
                      goto LABEL_452;
                    }
                    v96 = *v573;
                    if (!*v573)
                      goto LABEL_35;
                    v454 = *(_DWORD *)(v96 - 8);
                    v455 = (v452 + ~(v451 << 32)) ^ ((v452 + ~(v451 << 32)) >> 22);
                    v456 = 9 * ((v455 + ~(v455 << 13)) ^ ((v455 + ~(v455 << 13)) >> 8));
                    v457 = (v456 ^ (v456 >> 15)) + ~((v456 ^ (v456 >> 15)) << 27);
                    v195 = v454 & ((v457 >> 31) ^ v457);
                    v458 = *(_QWORD *)(v96 + 16 * v195);
                    if (v458 != v452)
                    {
                      v459 = 1;
                      do
                      {
                        if (!v458)
                          goto LABEL_356;
                        v195 = ((_DWORD)v195 + v459) & v454;
                        v458 = *(_QWORD *)(v96 + 16 * v195);
                        ++v459;
                      }
                      while (v458 != v452);
                    }
                  }
                  goto LABEL_163;
              }
              while (v260)
              {
                v259 = ((_DWORD)v259 + v261) & v255;
                v260 = *(_QWORD *)(v152 + 16 * v259);
                ++v261;
                if (v260 == v254)
                  goto LABEL_297;
              }
              v259 = *(unsigned int *)(v152 - 4);
LABEL_297:
              if (v259 != *(_DWORD *)(v152 - 4))
              {
                v382 = *(JSC::DFG::Node **)(v152 + 16 * v259 + 8);
                if (v382)
                {
                  v152 = *v573;
                  if (!*v573)
                    goto LABEL_35;
                  v149 = *(_QWORD *)(v56 + 32);
                  v150 = v149 & 0xFF00FFFFFFFFFFFFLL;
                  v255 = *(_DWORD *)(v152 - 8);
                }
              }
              v262 = (v150 + ~(v149 << 32)) ^ ((v150 + ~(v149 << 32)) >> 22);
              v263 = 9 * ((v262 + ~(v262 << 13)) ^ ((v262 + ~(v262 << 13)) >> 8));
              v264 = (v263 ^ (v263 >> 15)) + ~((v263 ^ (v263 >> 15)) << 27);
              v265 = v255 & ((v264 >> 31) ^ v264);
              v266 = *(_QWORD *)(v152 + 16 * v265);
              if (v266 != v150)
              {
                v267 = 1;
                while (v266)
                {
                  v265 = ((_DWORD)v265 + v267) & v255;
                  v266 = *(_QWORD *)(v152 + 16 * v265);
                  ++v267;
                  if (v266 == v150)
                    goto LABEL_304;
                }
                v265 = *(unsigned int *)(v152 - 4);
              }
LABEL_304:
              if (v265 != *(_DWORD *)(v152 - 4))
              {
                v383 = *(JSC::DFG::Node **)(v152 + 16 * v265 + 8);
                if (v383)
                {
                  v152 = *v573;
                  if (!*v573)
                    goto LABEL_35;
                  v255 = *(_DWORD *)(v152 - 8);
                }
              }
              v268 = *(_QWORD *)(v56 + 40);
              v269 = v268 & 0xFF00FFFFFFFFFFFFLL;
              v270 = ((v268 & 0xFF00FFFFFFFFFFFFLL) + ~(v268 << 32)) ^ (((v268 & 0xFF00FFFFFFFFFFFFLL) + ~(v268 << 32)) >> 22);
              v271 = 9 * ((v270 + ~(v270 << 13)) ^ ((v270 + ~(v270 << 13)) >> 8));
              v272 = (v271 ^ (v271 >> 15)) + ~((v271 ^ (v271 >> 15)) << 27);
              v251 = v255 & ((v272 >> 31) ^ v272);
              v273 = *(_QWORD *)(v152 + 16 * v251);
              if (v273 == v269)
                goto LABEL_351;
              v274 = 1;
              do
              {
                if (!v273)
                  goto LABEL_350;
                v251 = ((_DWORD)v251 + v274) & v255;
                v273 = *(_QWORD *)(v152 + 16 * v251);
                ++v274;
              }
              while (v273 != v269);
              goto LABEL_351;
            }
            if (*(unsigned __int16 *)(v56 + 18) <= 0x102u)
            {
              switch(*(_WORD *)(v56 + 18))
              {
                case 0xAB:
                  v188 = *(_QWORD *)(v56 + 24);
                  v189 = v188 & 0xFF00FFFFFFFFFFFFLL;
                  v60 = v190;
                  if (v190 && *((_DWORD *)v190 + 2) == 2)
                  {
                    v385 = *(_DWORD *)(v56 + 72);
                    v386 = 6;
                    goto LABEL_452;
                  }
                  v96 = *v573;
                  if (!*v573)
                    goto LABEL_35;
                  v191 = *(_DWORD *)(v96 - 8);
                  v192 = (v189 + ~(v188 << 32)) ^ ((v189 + ~(v188 << 32)) >> 22);
                  v193 = 9 * ((v192 + ~(v192 << 13)) ^ ((v192 + ~(v192 << 13)) >> 8));
                  v194 = (v193 ^ (v193 >> 15)) + ~((v193 ^ (v193 >> 15)) << 27);
                  v195 = v191 & ((v194 >> 31) ^ v194);
                  v196 = *(_QWORD *)(v96 + 16 * v195);
                  if (v196 != v189)
                  {
                    v197 = 1;
                    do
                    {
                      if (!v196)
                        goto LABEL_356;
                      v195 = ((_DWORD)v195 + v197) & v191;
                      v196 = *(_QWORD *)(v96 + 16 * v195);
                      ++v197;
                    }
                    while (v196 != v189);
                  }
                  goto LABEL_163;
                case 0xAC:
                  v237 = *(_QWORD *)(v56 + 24);
                  v238 = v237 & 0xFF00FFFFFFFFFFFFLL;
                  v60 = v239;
                  if (!v239 || *((_DWORD *)v239 + 2) != 2)
                  {
                    v152 = *v573;
                    if (!*v573)
                      goto LABEL_35;
                    v240 = *(_DWORD *)(v152 - 8);
                    v241 = (v238 + ~(v237 << 32)) ^ ((v238 + ~(v237 << 32)) >> 22);
                    v242 = 9 * ((v241 + ~(v241 << 13)) ^ ((v241 + ~(v241 << 13)) >> 8));
                    v243 = (v242 ^ (v242 >> 15)) + ~((v242 ^ (v242 >> 15)) << 27);
                    v244 = v240 & ((v243 >> 31) ^ v243);
                    v245 = *(_QWORD *)(v152 + 16 * v244);
                    if (v245 != v238)
                    {
                      v314 = 1;
                      while (v245)
                      {
                        v244 = ((_DWORD)v244 + v314) & v240;
                        v245 = *(_QWORD *)(v152 + 16 * v244);
                        ++v314;
                        if (v245 == v238)
                          goto LABEL_286;
                      }
                      v244 = *(unsigned int *)(v152 - 4);
                    }
LABEL_286:
                    if (v244 != *(_DWORD *)(v152 - 4))
                    {
                      v484 = *(JSC::DFG::Node **)(v152 + 16 * v244 + 8);
                      if (v484)
                      {
                        v152 = *v573;
                        if (!*v573)
                          goto LABEL_35;
                        v240 = *(_DWORD *)(v152 - 8);
                      }
                    }
                    v246 = *(_QWORD *)(v56 + 32);
                    v247 = v246 & 0xFF00FFFFFFFFFFFFLL;
                    v248 = ((v246 & 0xFF00FFFFFFFFFFFFLL) + ~(v246 << 32)) ^ (((v246 & 0xFF00FFFFFFFFFFFFLL)
                                                                             + ~(v246 << 32)) >> 22);
                    v249 = 9 * ((v248 + ~(v248 << 13)) ^ ((v248 + ~(v248 << 13)) >> 8));
                    v250 = (v249 ^ (v249 >> 15)) + ~((v249 ^ (v249 >> 15)) << 27);
                    v251 = v240 & ((v250 >> 31) ^ v250);
                    v252 = *(_QWORD *)(v152 + 16 * v251);
                    if (v252 == v247)
                      goto LABEL_351;
                    v315 = 1;
                    do
                    {
                      if (!v252)
                        goto LABEL_350;
                      v251 = ((_DWORD)v251 + v315) & v240;
                      v252 = *(_QWORD *)(v152 + 16 * v251);
                      ++v315;
                    }
                    while (v252 != v247);
                    goto LABEL_351;
                  }
                  v317 = *(_DWORD *)(v56 + 72);
                  LODWORD(v583[0]) = 6;
                  HIDWORD(v583[0]) = v317;
                  v318 = *(_QWORD *)(v56 + 32);
                  v319 = v318 & 0xFF00FFFFFFFFFFFFLL;
                  *(_QWORD *)&v579 = v318 & 0xFF00FFFFFFFFFFFFLL;
                  *((_QWORD *)&v579 + 1) = 0;
                  if ((v318 & 0xFF00FFFFFFFFFFFFLL) == 0)
                    goto LABEL_332;
                  v320 = *(unsigned __int16 *)((v318 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if (v320 > 2)
                    goto LABEL_332;
                  v321 = *(_QWORD *)(v319 + 72);
                  *((_QWORD *)&v579 + 1) = v321;
                  if (!(_DWORD)v320)
                    goto LABEL_332;
                  if ((_DWORD)v320 != 1)
                    goto LABEL_696;
                  goto LABEL_362;
                case 0xB3:
                  v463 = *(_QWORD *)(v56 + 24);
                  v464 = v463 & 0xFF00FFFFFFFFFFFFLL;
                  v60 = v465;
                  if (v465 && *((_DWORD *)v465 + 2) == 8)
                  {
                    v385 = 0;
                    v386 = 19;
                    goto LABEL_452;
                  }
                  v96 = *v573;
                  if (!*v573)
                    goto LABEL_35;
                  v497 = *(_DWORD *)(v96 - 8);
                  v498 = (v464 + ~(v463 << 32)) ^ ((v464 + ~(v463 << 32)) >> 22);
                  v499 = 9 * ((v498 + ~(v498 << 13)) ^ ((v498 + ~(v498 << 13)) >> 8));
                  v500 = (v499 ^ (v499 >> 15)) + ~((v499 ^ (v499 >> 15)) << 27);
                  v195 = v497 & ((v500 >> 31) ^ v500);
                  v501 = *(_QWORD *)(v96 + 16 * v195);
                  if (v501 == v464)
                    goto LABEL_163;
                  v502 = 1;
                  break;
                case 0xB4:
                  v520 = (JSC::DFG::Node *)(*(_QWORD *)(v56 + 24) & 0xFF00FFFFFFFFFFFFLL);
                  v60 = v521;
                  if (!v521 || *((_DWORD *)v521 + 2) != 8)
                  {
                    goto LABEL_35;
                  }
                  v583[0] = 19;
                  JSC::DFG::LazyNode::LazyNode(&v579, (JSC::DFG::Node *)(*(_QWORD *)(v56 + 32) & 0xFF00FFFFFFFFFFFFLL));
                  goto LABEL_332;
                default:
                  goto LABEL_32;
              }
              while (v501)
              {
                v195 = ((_DWORD)v195 + v502) & v497;
                v501 = *(_QWORD *)(v96 + 16 * v195);
                ++v502;
                if (v501 == v464)
                  goto LABEL_163;
              }
              goto LABEL_356;
            }
            if (*(unsigned __int16 *)(v56 + 18) <= 0x116u)
            {
              if (v57 == 259)
              {
                *(_QWORD *)&v581 = *(_QWORD *)(v56 + 72);
                if ((v581 & 1) != 0)
                  WTF::fastFree(v581 & 0xFFFFFFFFFFFFFFFCLL, v302, v303, v304, v305, v306, v307, v308);
                v583[0] = 13;
                v309 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), *(_QWORD *)(v56 + 72), v303, v304, v305, v306, v307, v308);
                *(_QWORD *)&v579 = 0;
                *((_QWORD *)&v579 + 1) = v309;
                goto LABEL_332;
              }
              if (v57 == 270)
              {
                v583[0] = 18;
                v481 = *(_QWORD *)(v56 + 72);
                *(_QWORD *)&v579 = 0;
                *((_QWORD *)&v579 + 1) = v481;
                WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v581, (uint64_t *)&v580, v583, &v579);
                v583[0] = 19;
                v482 = *(_QWORD *)(v56 + 24);
                v483 = v482 & 0xFF00FFFFFFFFFFFFLL;
                *(_QWORD *)&v579 = v482 & 0xFF00FFFFFFFFFFFFLL;
                *((_QWORD *)&v579 + 1) = 0;
                if ((v482 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v320 = *(unsigned __int16 *)((v482 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if (v320 <= 2)
                  {
                    v321 = *(_QWORD *)(v483 + 72);
                    *((_QWORD *)&v579 + 1) = v321;
                    if ((_DWORD)v320)
                    {
                      if ((_DWORD)v320 != 1)
LABEL_696:
                        v320 = 2;
LABEL_362:
                      *((_QWORD *)&v579 + 1) = v320 | v321;
                      v55 = (JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)this + 504);
                    }
                  }
                }
LABEL_332:
                WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v581, (uint64_t *)&v580, v583, &v579);
                goto LABEL_35;
              }
              if (v57 != 268)
                goto LABEL_32;
              v511 = *(unsigned __int8 *)(*(_QWORD *)(v56 + 72) + 9);
              if (v511 == 64)
              {
LABEL_606:
                v60 = v512;
                goto LABEL_35;
              }
              if (v511 != 66)
              {
                if (v511 == 68)
                {
                  goto LABEL_606;
                }
                if (v511 != 65)
                {
                  JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v56, (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0x3DB, "void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1341:21), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1349:21)]", "Bad structure");
                  __break(0xC471u);
                  JUMPOUT(0x1984D4DC8);
                }
              }
              goto LABEL_606;
            }
            switch(v57)
            {
              case 0x158u:
                v388 = *(_QWORD *)(v56 + 24);
                v389 = v388 & 0xFF00FFFFFFFFFFFFLL;
                v60 = v390;
                if (v390 && *((_DWORD *)v390 + 2) == 7)
                {
                  v391 = *(_DWORD *)(v56 + 72);
                  LODWORD(v583[0]) = 7;
                  HIDWORD(v583[0]) = v391;
                  v392 = *(_QWORD *)(v56 + 32);
                  v393 = v392 & 0xFF00FFFFFFFFFFFFLL;
                  *(_QWORD *)&v579 = v392 & 0xFF00FFFFFFFFFFFFLL;
                  *((_QWORD *)&v579 + 1) = 0;
                  if ((v392 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v320 = *(unsigned __int16 *)((v392 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                    if (v320 <= 2)
                    {
                      v321 = *(_QWORD *)(v393 + 72);
                      *((_QWORD *)&v579 + 1) = v321;
                      if ((_DWORD)v320)
                      {
                        if ((_DWORD)v320 != 1)
                          goto LABEL_696;
                        goto LABEL_362;
                      }
                    }
                  }
                  goto LABEL_332;
                }
                v152 = *v573;
                if (*v573)
                {
                  v474 = *(_DWORD *)(v152 - 8);
                  v475 = (v389 + ~(v388 << 32)) ^ ((v389 + ~(v388 << 32)) >> 22);
                  v476 = 9 * ((v475 + ~(v475 << 13)) ^ ((v475 + ~(v475 << 13)) >> 8));
                  v477 = (v476 ^ (v476 >> 15)) + ~((v476 ^ (v476 >> 15)) << 27);
                  v478 = v474 & ((v477 >> 31) ^ v477);
                  v479 = *(_QWORD *)(v152 + 16 * v478);
                  if (v479 != v389)
                  {
                    v480 = 1;
                    while (v479)
                    {
                      v478 = ((_DWORD)v478 + v480) & v474;
                      v479 = *(_QWORD *)(v152 + 16 * v478);
                      ++v480;
                      if (v479 == v389)
                        goto LABEL_613;
                    }
                    v478 = *(unsigned int *)(v152 - 4);
                  }
LABEL_613:
                  if (v478 != *(_DWORD *)(v152 - 4))
                  {
                    v535 = *(JSC::DFG::Node **)(v152 + 16 * v478 + 8);
                    if (v535)
                    {
                      v152 = *v573;
                      if (!*v573)
                        break;
                      v474 = *(_DWORD *)(v152 - 8);
                    }
                  }
                  v513 = *(_QWORD *)(v56 + 32);
                  v514 = v513 & 0xFF00FFFFFFFFFFFFLL;
                  v515 = ((v513 & 0xFF00FFFFFFFFFFFFLL) + ~(v513 << 32)) ^ (((v513 & 0xFF00FFFFFFFFFFFFLL)
                                                                           + ~(v513 << 32)) >> 22);
                  v516 = 9 * ((v515 + ~(v515 << 13)) ^ ((v515 + ~(v515 << 13)) >> 8));
                  v517 = (v516 ^ (v516 >> 15)) + ~((v516 ^ (v516 >> 15)) << 27);
                  v251 = v474 & ((v517 >> 31) ^ v517);
                  v518 = *(_QWORD *)(v152 + 16 * v251);
                  if (v518 != v514)
                  {
                    v519 = 1;
                    while (v518)
                    {
                      v251 = ((_DWORD)v251 + v519) & v474;
                      v518 = *(_QWORD *)(v152 + 16 * v251);
                      ++v519;
                      if (v518 == v514)
                        goto LABEL_351;
                    }
LABEL_350:
                    v251 = *(unsigned int *)(v152 - 4);
                  }
LABEL_351:
                  if (v251 == *(_DWORD *)(v152 - 4))
                    break;
                  v153 = v152 + 16 * v251;
                  goto LABEL_165;
                }
                break;
              case 0x157u:
                v442 = *(_QWORD *)(v56 + 24);
                v443 = v442 & 0xFF00FFFFFFFFFFFFLL;
                v60 = v444;
                if (!v444 || *((_DWORD *)v444 + 2) != 7)
                {
                  v96 = *v573;
                  if (!*v573)
                    break;
                  v445 = *(_DWORD *)(v96 - 8);
                  v446 = (v443 + ~(v442 << 32)) ^ ((v443 + ~(v442 << 32)) >> 22);
                  v447 = 9 * ((v446 + ~(v446 << 13)) ^ ((v446 + ~(v446 << 13)) >> 8));
                  v448 = (v447 ^ (v447 >> 15)) + ~((v447 ^ (v447 >> 15)) << 27);
                  v195 = v445 & ((v448 >> 31) ^ v448);
                  v449 = *(_QWORD *)(v96 + 16 * v195);
                  if (v449 != v443)
                  {
                    v450 = 1;
                    while (v449)
                    {
                      v195 = ((_DWORD)v195 + v450) & v445;
                      v449 = *(_QWORD *)(v96 + 16 * v195);
                      ++v450;
                      if (v449 == v443)
                        goto LABEL_163;
                    }
LABEL_356:
                    v195 = *(unsigned int *)(v96 - 4);
                  }
LABEL_163:
                  if (v195 == *(_DWORD *)(v96 - 4))
                    break;
                  v153 = v96 + 16 * v195;
LABEL_165:
                  v154 = *(JSC::DFG::Node **)(v153 + 8);
                  if (v154)
                  break;
                }
                v385 = *(_DWORD *)(v56 + 72);
                v386 = 7;
LABEL_452:
                v387 = v60[2];
                if (v387)
                {
                  v487 = *(_DWORD *)(v387 - 8);
                  v488 = v487 & (v385 + v386);
                  v489 = (int *)(v387 + 16 * v488);
                  v490 = *v489;
                  v491 = v489[1];
                  if (*v489 == v386 && v491 == v385)
                  {
LABEL_580:
                    v496 = *(_QWORD *)(v387 + 16 * v488 + 8);
                    if (v496)
                    {
                      *(_QWORD *)&v579 = v56;
                      v583[0] = v496;
                      WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(v573, (uint64_t *)&v579, v583, v47, v48, v49, v50, v51, (uint64_t)&v581);
                    }
                  }
                  else
                  {
                    v493 = 1;
                    while (v490 | v491)
                    {
                      v488 = ((_DWORD)v488 + v493) & v487;
                      v494 = (int *)(v387 + 16 * v488);
                      v490 = *v494;
                      v491 = v494[1];
                      ++v493;
                      if (v490 == v386 && v491 == v385)
                        goto LABEL_580;
                    }
                  }
                }
                v566 = 1;
                break;
              case 0x117u:
                goto LABEL_46;
              default:
LABEL_32:
                v58 = *(_QWORD *)(v56 + 24);
                if ((*(_BYTE *)(v56 + 56) & 0x10) != 0)
                {
                  v131 = *(_QWORD *)(v56 + 32);
                  if ((int)v131 + (int)v58 > v58)
                  {
                    v132 = *((_QWORD *)this + 4);
                    v133 = *(_QWORD *)(v56 + 24);
                    do
                    {
                      if (v133 >= *(unsigned int *)(v132 + 164))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1984D4F54);
                      }
                      v134 = *(_QWORD *)(*(_QWORD *)(v132 + 152) + 8 * v133);
                      v135 = v134 & 0xFF00FFFFFFFFFFFFLL;
                      if ((v134 & 0xFF00FFFFFFFFFFFFLL) != 0)
                      {
                        v136 = *v573;
                        if (*v573)
                        {
                          v137 = *(_DWORD *)(v136 - 8);
                          v138 = (v135 + ~(v134 << 32)) ^ ((v135 + ~(v134 << 32)) >> 22);
                          v139 = 9 * ((v138 + ~(v138 << 13)) ^ ((v138 + ~(v138 << 13)) >> 8));
                          v140 = (v139 ^ (v139 >> 15)) + ~((v139 ^ (v139 >> 15)) << 27);
                          v141 = v137 & ((v140 >> 31) ^ v140);
                          v142 = *(_QWORD *)(v136 + 16 * v141);
                          if (v142 != v135)
                          {
                            v143 = 1;
                            while (v142)
                            {
                              v141 = ((_DWORD)v141 + v143) & v137;
                              v142 = *(_QWORD *)(v136 + 16 * v141);
                              ++v143;
                              if (v142 == v135)
                                goto LABEL_154;
                            }
                            v141 = *(unsigned int *)(v136 - 4);
                          }
LABEL_154:
                          if (v141 != *(_DWORD *)(v136 - 4))
                          {
                            v144 = *(JSC::DFG::Node **)(v136 + 16 * v141 + 8);
                            if (v144)
                            {
                              v58 = *(_QWORD *)(v56 + 24);
                              v131 = *(_QWORD *)(v56 + 32);
                            }
                          }
                        }
                      }
                      ++v133;
                    }
                    while (v133 < (v58 + v131));
                  }
                  goto LABEL_34;
                }
                v59 = v58 & 0xFF00FFFFFFFFFFFFLL;
                if ((v58 & 0xFF00FFFFFFFFFFFFLL) == 0)
                  goto LABEL_34;
                v97 = *v573;
                if (*v573)
                {
                  v111 = *(_DWORD *)(v97 - 8);
                  v112 = (v59 + ~(v58 << 32)) ^ ((v59 + ~(v58 << 32)) >> 22);
                  v113 = 9 * ((v112 + ~(v112 << 13)) ^ ((v112 + ~(v112 << 13)) >> 8));
                  v114 = (v113 ^ (v113 >> 15)) + ~((v113 ^ (v113 >> 15)) << 27);
                  v115 = v111 & ((v114 >> 31) ^ v114);
                  v116 = *(_QWORD *)(v97 + 16 * v115);
                  if (v116 != v59)
                  {
                    v117 = 1;
                    while (v116)
                    {
                      v115 = ((_DWORD)v115 + v117) & v111;
                      v116 = *(_QWORD *)(v97 + 16 * v115);
                      ++v117;
                      if (v116 == v59)
                        goto LABEL_118;
                    }
                    v115 = *(unsigned int *)(v97 - 4);
                  }
LABEL_118:
                  if (v115 != *(_DWORD *)(v97 - 4))
                  {
                    v186 = *(JSC::DFG::Node **)(v97 + 16 * v115 + 8);
                    if (v186)
                  }
                }
                v98 = *(_QWORD *)(v56 + 32);
                v99 = v98 & 0xFF00FFFFFFFFFFFFLL;
                if ((v98 & 0xFF00FFFFFFFFFFFFLL) == 0)
                  goto LABEL_34;
                v100 = *v573;
                if (*v573)
                {
                  v169 = *(_DWORD *)(v100 - 8);
                  v170 = (v99 + ~(v98 << 32)) ^ ((v99 + ~(v98 << 32)) >> 22);
                  v171 = 9 * ((v170 + ~(v170 << 13)) ^ ((v170 + ~(v170 << 13)) >> 8));
                  v172 = (v171 ^ (v171 >> 15)) + ~((v171 ^ (v171 >> 15)) << 27);
                  v173 = v169 & ((v172 >> 31) ^ v172);
                  v174 = *(_QWORD *)(v100 + 16 * v173);
                  if (v174 != v99)
                  {
                    v175 = 1;
                    while (v174)
                    {
                      v173 = ((_DWORD)v173 + v175) & v169;
                      v174 = *(_QWORD *)(v100 + 16 * v173);
                      ++v175;
                      if (v174 == v99)
                        goto LABEL_219;
                    }
                    v173 = *(unsigned int *)(v100 - 4);
                  }
LABEL_219:
                  if (v173 != *(_DWORD *)(v100 - 4))
                  {
                    v187 = *(JSC::DFG::Node **)(v100 + 16 * v173 + 8);
                    if (v187)
                  }
                }
                v101 = *(_QWORD *)(v56 + 40);
                v102 = v101 & 0xFF00FFFFFFFFFFFFLL;
                if ((v101 & 0xFF00FFFFFFFFFFFFLL) == 0)
                  goto LABEL_34;
                v203 = *v573;
                if (!*v573)
                  goto LABEL_34;
                v204 = *(_DWORD *)(v203 - 8);
                v205 = (v102 + ~(v101 << 32)) ^ ((v102 + ~(v101 << 32)) >> 22);
                v206 = 9 * ((v205 + ~(v205 << 13)) ^ ((v205 + ~(v205 << 13)) >> 8));
                v207 = (v206 ^ (v206 >> 15)) + ~((v206 ^ (v206 >> 15)) << 27);
                v208 = v204 & ((v207 >> 31) ^ v207);
                v209 = *(_QWORD *)(v203 + 16 * v208);
                if (v209 != v102)
                {
                  v210 = 1;
                  while (v209)
                  {
                    v208 = ((_DWORD)v208 + v210) & v204;
                    v209 = *(_QWORD *)(v203 + 16 * v208);
                    ++v210;
                    if (v209 == v102)
                      goto LABEL_325;
                  }
                  v208 = *(unsigned int *)(v203 - 4);
                }
LABEL_325:
                if (v208 == *(_DWORD *)(v203 - 4))
                {
LABEL_34:
                  v60 = 0;
                  break;
                }
                v233 = v203 + 16 * v208;
LABEL_274:
                v234 = *(JSC::DFG::Node **)(v233 + 8);
                if (v234)
                goto LABEL_34;
            }
          }
          else
          {
            if (v57 == 20)
              goto LABEL_46;
            if (v57 - 132 < 2)
            {
              v145 = *(_QWORD *)(v56 + 24);
              v146 = v145 & 0xFF00FFFFFFFFFFFFLL;
              if (v147)
              {
                v429 = (uint64_t)v147;
                if (*((_DWORD *)v147 + 2) == 1)
                {
                  v430 = v147[3];
                  *(_QWORD *)&v581 = 0;
                  if ((v430 & 1) == 0 || v430 == 4)
                    *(_QWORD *)&v581 = v430 & 0xFFFFFFFFFFFFFFFDLL;
                  else
                    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v581, v147 + 3);
                  v431 = *(uint64_t **)(v56 + 72);
                  *(_QWORD *)&v579 = 0;
                  v432 = *v431;
                  if ((*v431 & 1) != 0 && v432 != 4)
                  {
                    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v579, v431);
                    v432 = v579;
                  }
                  *(_QWORD *)&v579 = v432 & 0xFFFFFFFFFFFFFFFDLL;
                  JSC::DFG::RegisteredStructureSet::filter((JSC::DFG::RegisteredStructureSet *)&v581, (const JSC::DFG::StructureAbstractValue *)&v579, v46, v47, v48, v49, v50, v51);
                  if ((v579 & 1) != 0)
                    WTF::fastFree(v579 & 0xFFFFFFFFFFFFFFFCLL, v433, v434, v435, v436, v437, v438, v439);
                  if ((v581 & 0xFFFFFFFFFFFFFFFDLL) != 0)
                  {
                    v566 = 1;
                  }
                  else
                  {
                  }
                  v441 = v581;
                  if ((v581 & 1) != 0)
LABEL_506:
                    WTF::fastFree(v441 & 0xFFFFFFFFFFFFFFFCLL, v440, v46, v47, v48, v49, v50, v51);
                  goto LABEL_34;
                }
              }
              v148 = *v573;
              if (!*v573)
                goto LABEL_34;
              v222 = *(_DWORD *)(v148 - 8);
              v223 = (v146 + ~(v145 << 32)) ^ ((v146 + ~(v145 << 32)) >> 22);
              v224 = 9 * ((v223 + ~(v223 << 13)) ^ ((v223 + ~(v223 << 13)) >> 8));
              v225 = (v224 ^ (v224 >> 15)) + ~((v224 ^ (v224 >> 15)) << 27);
              v226 = v222 & ((v225 >> 31) ^ v225);
              v227 = *(_QWORD *)(v148 + 16 * v226);
              if (v227 != v146)
              {
                v228 = 1;
                while (v227)
                {
                  v226 = ((_DWORD)v226 + v228) & v222;
                  v227 = *(_QWORD *)(v148 + 16 * v226);
                  ++v228;
                  if (v227 == v146)
                    goto LABEL_272;
                }
LABEL_271:
                v226 = *(unsigned int *)(v148 - 4);
              }
LABEL_272:
              if (v226 == *(_DWORD *)(v148 - 4))
                goto LABEL_34;
              v233 = v148 + 16 * v226;
              goto LABEL_274;
            }
            if (v57 - 24 >= 2)
              goto LABEL_32;
            v211 = *(_QWORD *)(v56 + 24);
            if ((*(_BYTE *)(v56 + 56) & 0x10) != 0)
            {
              v551 = *(_QWORD *)(v56 + 32);
              if ((int)v551 + (int)v211 <= v211)
                goto LABEL_34;
              v552 = *((_QWORD *)this + 4);
              v553 = *(_QWORD *)(v56 + 24);
              do
              {
                if (v553 >= *(unsigned int *)(v552 + 164))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984D4FA4);
                }
                v554 = *(_QWORD *)(*(_QWORD *)(v552 + 152) + 8 * v553);
                if ((v554 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v211 = *(_QWORD *)(v56 + 24);
                  v551 = *(_QWORD *)(v56 + 32);
                }
                ++v553;
              }
              while (v553 < (v211 + v551));
              v60 = 0;
LABEL_481:
              v55 = (JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)this + 504);
              goto LABEL_35;
            }
            v212 = v211 & 0xFF00FFFFFFFFFFFFLL;
            if ((v211 & 0xFF00FFFFFFFFFFFFLL) == 0)
              goto LABEL_34;
            if ((v211 & 0x1000000000000) == 0)
            {
              v213 = (v211 >> 50) & 0x3F;
              if ((_DWORD)v213)
              {
                if (v213 > 0x34)
                  goto LABEL_700;
                if (((1 << v213) & 0x12798001880F84) == 0)
                {
                  if (((1 << v213) & 0xD867FFE77F07ALL) == 0)
                    goto LABEL_700;
                  v466 = *v573;
                  if (*v573)
                  {
                    v467 = *(_DWORD *)(v466 - 8);
                    v468 = (v212 + ~(v211 << 32)) ^ ((v212 + ~(v211 << 32)) >> 22);
                    v469 = 9 * ((v468 + ~(v468 << 13)) ^ ((v468 + ~(v468 << 13)) >> 8));
                    v470 = (v469 ^ (v469 >> 15)) + ~((v469 ^ (v469 >> 15)) << 27);
                    v471 = v467 & ((v470 >> 31) ^ v470);
                    v472 = *(_QWORD *)(v466 + 16 * v471);
                    if (v472 != v212)
                    {
                      v473 = 1;
                      while (v472)
                      {
                        v471 = ((_DWORD)v471 + v473) & v467;
                        v472 = *(_QWORD *)(v466 + 16 * v471);
                        ++v473;
                        if (v472 == v212)
                          goto LABEL_622;
                      }
                      v471 = *(unsigned int *)(v466 - 4);
                    }
LABEL_622:
                    if (v471 != *(_DWORD *)(v466 - 4))
                    {
                      v534 = *(JSC::DFG::Node **)(v466 + 16 * v471 + 8);
                      if (v534)
                    }
                  }
                }
              }
            }
            v214 = *(_QWORD *)(v56 + 32);
            v215 = v214 & 0xFF00FFFFFFFFFFFFLL;
            if ((v214 & 0xFF00FFFFFFFFFFFFLL) == 0)
              goto LABEL_34;
            if ((v214 & 0x1000000000000) == 0)
            {
              v216 = (v214 >> 50) & 0x3F;
              if ((_DWORD)v216)
              {
                if (v216 > 0x34)
                  goto LABEL_700;
                if (((1 << v216) & 0x12798001880F84) == 0)
                {
                  if (((1 << v216) & 0xD867FFE77F07ALL) == 0)
                  {
LABEL_700:
                    __break(0xC471u);
                    JUMPOUT(0x1984D4F7CLL);
                  }
                  v503 = *v573;
                  if (*v573)
                  {
                    v504 = *(_DWORD *)(v503 - 8);
                    v505 = (v215 + ~(v214 << 32)) ^ ((v215 + ~(v214 << 32)) >> 22);
                    v506 = 9 * ((v505 + ~(v505 << 13)) ^ ((v505 + ~(v505 << 13)) >> 8));
                    v507 = (v506 ^ (v506 >> 15)) + ~((v506 ^ (v506 >> 15)) << 27);
                    v508 = v504 & ((v507 >> 31) ^ v507);
                    v509 = *(_QWORD *)(v503 + 16 * v508);
                    if (v509 != v215)
                    {
                      v510 = 1;
                      while (v509)
                      {
                        v508 = ((_DWORD)v508 + v510) & v504;
                        v509 = *(_QWORD *)(v503 + 16 * v508);
                        ++v510;
                        if (v509 == v215)
                          goto LABEL_632;
                      }
                      v508 = *(unsigned int *)(v503 - 4);
                    }
LABEL_632:
                    if (v508 != *(_DWORD *)(v503 - 4))
                    {
                      v536 = *(JSC::DFG::Node **)(v503 + 16 * v508 + 8);
                      if (v536)
                    }
                  }
                }
              }
            }
            v60 = 0;
            v217 = *(_QWORD *)(v56 + 40);
            v218 = v217 & 0xFF00FFFFFFFFFFFFLL;
            if ((v217 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v217 & 0x1000000000000) == 0)
            {
              v60 = 0;
              v356 = (v217 >> 50) & 0x3F;
              if ((_DWORD)v356)
              {
                if (v356 > 0x34)
                  goto LABEL_700;
                if (((1 << v356) & 0x12798001880F84) == 0)
                {
                  if (((1 << v356) & 0xD867FFE77F07ALL) == 0)
                    goto LABEL_700;
                  v357 = *v573;
                  if (*v573)
                  {
                    v358 = *(_DWORD *)(v357 - 8);
                    v359 = (v218 + ~(v217 << 32)) ^ ((v218 + ~(v217 << 32)) >> 22);
                    v360 = 9 * ((v359 + ~(v359 << 13)) ^ ((v359 + ~(v359 << 13)) >> 8));
                    v361 = (v360 ^ (v360 >> 15)) + ~((v360 ^ (v360 >> 15)) << 27);
                    v362 = v358 & ((v361 >> 31) ^ v361);
                    v363 = *(_QWORD *)(v357 + 16 * v362);
                    if (v363 != v218)
                    {
                      v364 = 1;
                      while (v363)
                      {
                        v362 = ((_DWORD)v362 + v364) & v358;
                        v363 = *(_QWORD *)(v357 + 16 * v362);
                        ++v364;
                        if (v363 == v218)
                          goto LABEL_642;
                      }
                      v362 = *(unsigned int *)(v357 - 4);
                    }
LABEL_642:
                    if (v362 != *(_DWORD *)(v357 - 4))
                    {
                      v233 = v357 + 16 * v362;
                      goto LABEL_274;
                    }
                  }
                  goto LABEL_34;
                }
              }
            }
          }
LABEL_35:
          v61 = (uint64_t)v580;
          if (!v580)
            goto LABEL_46;
          if (!*((_DWORD *)v580 - 3))
            goto LABEL_41;
          v62 = *((unsigned int *)v580 - 1);
          v63 = v580;
          if ((_DWORD)v62)
          {
            v64 = 0;
            while (!LODWORD(v580[v64]))
            {
              v64 += 3;
              if (3 * v62 == v64)
                goto LABEL_41;
            }
            v63 = &v580[v64];
          }
          v68 = &v580[3 * v62];
          if (v63 == v68)
            goto LABEL_41;
          v69 = v60 + 2;
LABEL_56:
          v70 = *v63;
          v71 = (JSC::DFG::Node *)v63[1];
          if (!v71)
          {
            v72 = *v69;
            if (!*v69)
              goto LABEL_58;
            v118 = *(_DWORD *)(v72 - 8);
            v119 = v118 & (HIDWORD(v70) + v70);
            v120 = (int *)(v72 + 16 * v119);
            v121 = *v120;
            v122 = v120[1];
            if (*v120 != (_DWORD)v70 || v122 != HIDWORD(v70))
            {
              v124 = 1;
              while (v121 | v122)
              {
                v119 = (v119 + v124) & v118;
                v120 = (int *)(v72 + 16 * v119);
                v121 = *v120;
                v122 = v120[1];
                ++v124;
                if (*v120 == (_DWORD)v70 && v122 == HIDWORD(v70))
                  goto LABEL_127;
              }
              goto LABEL_126;
            }
            goto LABEL_127;
          }
          v73 = *v573;
          if (!*v573)
            goto LABEL_63;
          v103 = *(_DWORD *)(v73 - 8);
          v104 = ((unint64_t)v71 + ~((_QWORD)v71 << 32)) ^ (((unint64_t)v71 + ~((_QWORD)v71 << 32)) >> 22);
          v105 = 9 * ((v104 + ~(v104 << 13)) ^ ((v104 + ~(v104 << 13)) >> 8));
          v106 = (v105 ^ (v105 >> 15)) + ~((v105 ^ (v105 >> 15)) << 27);
          v107 = v103 & ((v106 >> 31) ^ v106);
          v108 = *(JSC::DFG::Node **)(v73 + 16 * v107);
          if (v108 != v71)
          {
            v109 = 1;
            while (v108)
            {
              v107 = ((_DWORD)v107 + v109) & v103;
              v108 = *(JSC::DFG::Node **)(v73 + 16 * v107);
              ++v109;
              if (v108 == v71)
                goto LABEL_101;
            }
            v107 = *(unsigned int *)(v73 - 4);
          }
LABEL_101:
          if (v107 == *(_DWORD *)(v73 - 4))
          {
LABEL_63:
            *(_QWORD *)&v579 = *v63;
            v583[0] = 0;
          }
          else
          {
            v110 = *(_QWORD *)(v73 + 16 * v107 + 8);
            *(_QWORD *)&v579 = *v63;
            v583[0] = v110;
            if (v110)
            {
              WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedLocationDescriptor const&,JSC::DFG::Node *&>((uint64_t)&v581, v60 + 2, &v579, v583);
              goto LABEL_65;
            }
          }
          v72 = *v69;
          if (*v69)
          {
            v125 = *(_DWORD *)(v72 - 8);
            v126 = v125 & (HIDWORD(v70) + v70);
            v120 = (int *)(v72 + 16 * v126);
            v127 = *v120;
            v128 = v120[1];
            if (*v120 != (_DWORD)v70 || v128 != HIDWORD(v70))
            {
              v130 = 1;
              while (v127 | v128)
              {
                v126 = (v126 + v130) & v125;
                v120 = (int *)(v72 + 16 * v126);
                v127 = *v120;
                v128 = v120[1];
                ++v130;
                if (*v120 == (_DWORD)v70 && v128 == HIDWORD(v70))
                  goto LABEL_127;
              }
LABEL_126:
              v120 = (int *)(v72 + 16 * *(unsigned int *)(v72 - 4));
            }
LABEL_127:
            if ((int *)(v72 + 16 * *(unsigned int *)(v72 - 4)) != v120)
              WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::remove(v60 + 2, v120);
          }
LABEL_65:
          if (!v71)
            goto LABEL_58;
          v74 = *v60;
          if (!v75 || !*((_DWORD *)v75 + 2))
            goto LABEL_58;
          v77 = *v75;
          v78 = v577;
          if (v577
            || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(&v577, 8uLL, 0, v47, v48, v49, v50, v51), (v78 = v577) != 0))
          {
            v79 = *(_DWORD *)(v78 - 8);
          }
          else
          {
            v79 = 0;
          }
          v80 = (~(v77 << 32) + v77) ^ ((unint64_t)(~(v77 << 32) + v77) >> 22);
          v81 = 9 * ((v80 + ~(v80 << 13)) ^ ((v80 + ~(v80 << 13)) >> 8));
          v82 = (v81 ^ (v81 >> 15)) + ~((v81 ^ (v81 >> 15)) << 27);
          v83 = v79 & ((v82 >> 31) ^ v82);
          v84 = (uint64_t *)(v78 + 24 * v83);
          v85 = *v84;
          if (*v84)
          {
            v235 = 0;
            v236 = 1;
            do
            {
              if (v85 == v77)
              {
                v55 = (JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)this + 504);
                goto LABEL_79;
              }
              if (v85 == -1)
                v235 = v84;
              v83 = (v83 + v236) & v79;
              v84 = (uint64_t *)(v78 + 24 * v83);
              v85 = *v84;
              ++v236;
            }
            while (*v84);
            if (v235)
            {
              *v235 = 0;
              v235[1] = 0;
              v235[2] = 0;
              --*(_DWORD *)(v78 - 16);
              v84 = v235;
            }
          }
          *v84 = v77;
          v86 = v84[1];
          if (v86)
          {
            v84[1] = 0;
            *((_DWORD *)v84 + 4) = 0;
            WTF::fastFree(v86, v76, v46, v47, v48, v49, v50, v51);
          }
          v84[1] = 0;
          v84[2] = 0;
          if (v577)
            v87 = *(_DWORD *)(v577 - 12) + 1;
          else
            v87 = 1;
          v55 = (JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)this + 504);
          *(_DWORD *)(v577 - 12) = v87;
          if (v577)
            v88 = *(_DWORD *)(v577 - 12);
          else
            v88 = 0;
          v89 = (*(_DWORD *)(v577 - 16) + v88);
          v90 = *(unsigned int *)(v577 - 4);
          if (v90 > 0x400)
          {
            if (v90 <= 2 * v89)
LABEL_461:
              v84 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(&v577, (uint64_t)v84, v46, v47, v48, v49, v50, v51);
          }
          else if (3 * v90 <= 4 * v89)
          {
            goto LABEL_461;
          }
LABEL_79:
          v91 = v84 + 1;
          *(_QWORD *)&v581 = v74;
          v92 = *((unsigned int *)v84 + 5);
          if ((_DWORD)v92 == *((_DWORD *)v84 + 4))
          {
            v176 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v91, v92 + 1, (unint64_t)&v581);
            v92 = *((unsigned int *)v84 + 5);
            *(_QWORD *)(v84[1] + 8 * v92) = *v176;
          }
          else
          {
            *(_QWORD *)(*v91 + 8 * v92) = v74;
          }
          *((_DWORD *)v84 + 5) = v92 + 1;
LABEL_58:
          while (1)
          {
            v63 += 3;
            if (v63 == v68)
              break;
            if (*(_DWORD *)v63)
            {
              if (v63 == v68)
                break;
              goto LABEL_56;
            }
          }
          v61 = (uint64_t)v580;
          if (!v580)
            goto LABEL_46;
LABEL_41:
          v65 = v61 - 16;
          v66 = *(_QWORD *)(v572 + 752);
          if (v66)
          {
            if (!(v65 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                   + (((unint64_t)(v61 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v61 - 16) >> 24)) & 1) != 0)
            {
LABEL_44:
              v67 = *(unsigned int *)(v66 + 8000);
              if (v67 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v66, v65, (os_unfair_lock_s *)5, v47, v48, v49, v50, v51);
              }
              else
              {
                *(_QWORD *)(v66 + 8 * v67) = v65 | 0x5000000000000;
                *(_DWORD *)(v66 + 8000) = v67 + 1;
              }
              goto LABEL_46;
            }
            if (v65 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v65 >> 24)
            {
              v47 = 0;
            }
            else
            {
              v47 = (*(_DWORD *)((char *)off_1ECF425F8
                               + (((((unint64_t)(v61 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((((v61 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v47 == 1)
                goto LABEL_44;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v66, v65, 1, v47, v48, v49, v50, v51);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v65, (uint64_t)&bmalloc_heap_config, 1);
          }
LABEL_46:
          ++v53;
        }
        while (v53 != v54);
      }
      v155 = 0;
      LODWORD(v156) = 0;
      *(_QWORD *)&v581 = 0;
      v27 = (uint64_t *)((char *)this + 520);
      v157 = *v569;
      if (!*v569)
        goto LABEL_168;
      v156 = *(unsigned int *)(v157 - 4);
      v158 = v157 + 48 * v156;
      if (!*(_DWORD *)(v157 - 12))
        break;
      v155 = *v569;
      if ((_DWORD)v156)
      {
        v167 = 48 * v156;
        v155 = *v569;
        while ((unint64_t)(*(_QWORD *)v155 + 1) <= 1)
        {
          v155 += 48;
          v167 -= 48;
          if (!v167)
          {
            v155 = v158;
            break;
          }
        }
      }
LABEL_169:
      if (v157)
        v159 = v157 + 48 * *(unsigned int *)(v157 - 4);
      else
        v159 = 0;
      while (v155 != v159)
      {
        if (*(_DWORD *)(v155 + 16))
          WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid((uint64_t *)&v581, (uint64_t *)v155, v46, v47, v48, v49, v50, v51);
        v168 = v155 + 48;
        v155 = v158;
        if (v168 != v158)
        {
          v155 = v168;
          while ((unint64_t)(*(_QWORD *)v155 + 1) <= 1)
          {
            v155 += 48;
            if (v155 == v158)
            {
              v155 = v158;
              break;
            }
          }
        }
      }
      v160 = *(unsigned int *)(v571 + 8);
      if (*((_DWORD *)this + 105) <= v160)
      {
        __break(0xC471u);
        JUMPOUT(0x1984D4F5CLL);
      }
      v161 = v581;
      if (!(_QWORD)v581)
      {
        v164 = 0;
        v162 = 0;
LABEL_295:
        v163 = (uint64_t *)(v581 + 8 * v162);
        goto LABEL_180;
      }
      v162 = *(unsigned int *)(v581 - 4);
      v163 = (uint64_t *)(v581 + 8 * v162);
      if (!*(_DWORD *)(v581 - 12))
      {
        v164 = (uint64_t *)(v581 + 8 * v162);
        goto LABEL_295;
      }
      v164 = (uint64_t *)v581;
      if ((_DWORD)v162)
      {
        v165 = 8 * v162;
        v164 = (uint64_t *)v581;
        while ((unint64_t)(*v164 + 1) <= 1)
        {
          ++v164;
          v165 -= 8;
          if (!v165)
          {
            v164 = v163;
            break;
          }
        }
      }
LABEL_180:
      if ((_QWORD)v581)
        v166 = (uint64_t *)(v581 + 8 * *(unsigned int *)(v581 - 4));
      else
        v166 = 0;
      if (v166 != v164)
      {
        while (1)
        {
          *(_QWORD *)&v579 = 0;
          v219 = *v164;
          *(_QWORD *)&v579 = *v164;
          v220 = *v569;
          if (*v569)
          {
            v365 = *(_DWORD *)(v220 - 8);
            v366 = (~(v219 << 32) + v219) ^ ((unint64_t)(~(v219 << 32) + v219) >> 22);
            v367 = 9 * ((v366 + ~(v366 << 13)) ^ ((v366 + ~(v366 << 13)) >> 8));
            v368 = (v367 ^ (v367 >> 15)) + ~((v367 ^ (v367 >> 15)) << 27);
            v369 = v365 & ((v368 >> 31) ^ v368);
            v370 = *(_QWORD *)(v220 + 48 * v369);
            if (v370 == v219)
              goto LABEL_254;
            v371 = 1;
            while (v370)
            {
              v369 = (v369 + v371) & v365;
              v370 = *(_QWORD *)(v220 + 48 * v369);
              ++v371;
              if (v370 == v219)
                goto LABEL_254;
            }
          }
          WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(v567, (uint64_t *)&v579, v20, (uint64_t)v21, v22, v23, v24, v25);
LABEL_254:
          v221 = v164 + 1;
          v164 = v163;
          if (v221 != v163)
          {
            v164 = v221;
            while ((unint64_t)(*v164 + 1) <= 1)
            {
              if (++v164 == v163)
              {
                v164 = v163;
                break;
              }
            }
          }
          if (v164 == v166)
          {
            v161 = v581;
            break;
          }
        }
      }
      if (v161)
        WTF::fastFree(v161 - 16, v19, v20, (uint64_t)v21, v22, v23, v24, v25);
      v26 = (WTF *)((char *)v570 + 8);
      if ((char *)v570 + 8 == v568)
      {
        v26 = v574;
        goto LABEL_363;
      }
    }
    v155 = v157 + 48 * v156;
LABEL_168:
    v158 = v157 + 48 * v156;
    goto LABEL_169;
  }
  v566 = 0;
LABEL_363:
  if (v26)
  {
    v574 = 0;
    v575 = 0;
    WTF::fastFree((unint64_t)v26, v19, v20, (uint64_t)v21, v22, v23, v24, v25);
  }
  v322 = *v567;
  if (!*v567)
  {
    v579 = 0uLL;
    goto LABEL_375;
  }
  if (!*(_DWORD *)(v322 - 12))
  {
    v579 = 0uLL;
    goto LABEL_368;
  }
  _ZZN3JSC3DFG12_GLOBAL__N_128ObjectAllocationSinkingPhase23determineSinkCandidatesEvENKUlT_E_clIZNS2_23determineSinkCandidatesEvEUlRN3WTF7HashMapIPNS0_4NodeENS1_10AllocationENS6_11DefaultHashIS9_EENS6_10HashTraitsIS9_EENSD_ISA_EENS6_15HashTableTraitsEEES9_E_EEDaS3_((uint64_t)this, (uint64_t)this, v20, v21, v22, v23, v24, v25);
  v322 = *((_QWORD *)this + 25);
  v579 = 0uLL;
  if (!v322)
  {
LABEL_375:
    v326 = v566;
LABEL_376:
    v327 = v326 != 0;
    goto LABEL_377;
  }
LABEL_368:
  if (*(_DWORD *)(v322 - 12))
  {
    v323 = *(unsigned int *)(v322 - 4);
    v324 = (_QWORD *)v322;
    if ((_DWORD)v323)
    {
      v325 = 8 * v323;
      v324 = (_QWORD *)v322;
      while ((unint64_t)(*v324 + 1) <= 1)
      {
        ++v324;
        v325 -= 8;
        if (!v325)
          goto LABEL_373;
      }
    }
    v330 = (_QWORD *)(v322 + 8 * v323);
    if (v330 != v324)
    {
      v331 = 0;
LABEL_384:
      if (v331 == DWORD2(v579))
      {
        v332 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v579, v331 + 1, (unint64_t)v324);
        v331 = HIDWORD(v579);
        v333 = (_QWORD *)(v579 + 8 * HIDWORD(v579));
      }
      else
      {
        v333 = (_QWORD *)(v579 + 8 * v331);
        v332 = v324;
      }
      *v333 = *v332;
      HIDWORD(v579) = ++v331;
      while (++v324 != v330)
      {
        if ((unint64_t)(*v324 + 1) > 1)
        {
          if (v324 != v330)
            goto LABEL_384;
          break;
        }
      }
      if (v331)
      {
        if (v577)
        {
          do
          {
            v334 = *(_QWORD *)(v579 + 8 * v331-- - 8);
            HIDWORD(v579) = v331;
            if (v577)
            {
              v335 = *(_DWORD *)(v577 - 8);
              v336 = (~(v334 << 32) + v334) ^ ((unint64_t)(~(v334 << 32) + v334) >> 22);
              v337 = 9 * ((v336 + ~(v336 << 13)) ^ ((v336 + ~(v336 << 13)) >> 8));
              v338 = (v337 ^ (v337 >> 15)) + ~((v337 ^ (v337 >> 15)) << 27);
              v339 = v335 & ((v338 >> 31) ^ v338);
              v340 = *(_QWORD *)(v577 + 24 * v339);
              if (v340 == v334)
              {
LABEL_396:
                v341 = v577 + 24 * v339;
                v342 = *(unsigned int *)(v341 + 20);
                if ((_DWORD)v342)
                {
                  if (v342 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984D5004);
                  }
                  v343 = v341 + 8;
                  v344 = 8 * v342;
                  v345 = (char *)WTF::fastMalloc((WTF *)(8 * v342));
                  memcpy(v345, *(const void **)v343, 8 * *(unsigned int *)(v343 + 12));
                  v352 = 0;
                  do
                  {
                    v574 = 0;
                    v574 = *(WTF **)&v345[v352];
                    WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add(v567, (uint64_t *)&v574, v346, v347, v348, v349, v350, v351, (uint64_t)&v581);
                    if (v582)
                    {
                      v354 = HIDWORD(v579);
                      if (HIDWORD(v579) == DWORD2(v579))
                      {
                        WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>((uint64_t)&v579, (unint64_t)&v574);
                      }
                      else
                      {
                        *(_QWORD *)(v579 + 8 * HIDWORD(v579)) = v574;
                        HIDWORD(v579) = v354 + 1;
                      }
                    }
                    v352 += 8;
                  }
                  while (v344 != v352);
                  WTF::fastFree((unint64_t)v345, v353, v346, v347, v348, v349, v350, v351);
                  v331 = HIDWORD(v579);
                }
              }
              else
              {
                v355 = 1;
                while (v340)
                {
                  v339 = (v339 + v355) & v335;
                  v340 = *(_QWORD *)(v577 + 24 * v339);
                  ++v355;
                  if (v340 == v334)
                    goto LABEL_396;
                }
              }
            }
          }
          while (v331);
        }
        else
        {
          HIDWORD(v579) = 0;
        }
      }
    }
  }
LABEL_373:
  if (!*v567 || !*(_DWORD *)(*v567 - 12))
    goto LABEL_375;
  _ZZN3JSC3DFG12_GLOBAL__N_128ObjectAllocationSinkingPhase23determineSinkCandidatesEvENKUlT_E_clIZNS2_23determineSinkCandidatesEvEUlRN3WTF7HashMapIPNS0_4NodeENS1_10AllocationENS6_11DefaultHashIS9_EENS6_10HashTraitsIS9_EENSD_ISA_EENS6_15HashTableTraitsEEES9_E0_EEDaS3_((uint64_t)this, (uint64_t *)this, v20, (uint64_t)v21, v22, v23, v24, v25);
  if (v566)
  {
    v327 = 1;
  }
  else
  {
    if (*v567)
    {
      v326 = *(_DWORD *)(*v567 - 12);
      goto LABEL_376;
    }
    v327 = 0;
  }
LABEL_377:
  v328 = v579;
  if ((_QWORD)v579)
  {
    *(_QWORD *)&v579 = 0;
    DWORD2(v579) = 0;
    WTF::fastFree(v328, v19, v20, (uint64_t)v21, v22, v23, v24, v25);
  }
  if (v577)
    WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::deallocateTable(v577, (unint64_t)v19, v20, (uint64_t)v21, v22, v23, v24, v25);
  return v327;
}

