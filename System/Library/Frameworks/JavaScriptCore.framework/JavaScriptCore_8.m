_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_29compileOwnPropertyKeysVariantEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_29compileOwnPropertyKeysVariantEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_29compileOwnPropertyKeysVariantEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DB9208);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB9228);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DB9248);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
      goto LABEL_73;
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x197DB91D0);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheckAndExtractResultIfNeeded<JSC::ExceptionOperationResult<JSC::JSArray *>>(JSC::DFG **a1, JSC::B3::Value *a2, JSC::DFG::Node *a3)
{
  if (JSC::DFG::mayExit(*a1, a1[3528], a3))
  if ((*((_DWORD *)a2 + 4) & 0x80000000) != 0)
    return JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 3455), a2, 0);
  else
    return (uint64_t)a2;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheck<JSC::ExceptionOperationResult<JSC::JSArray *>>(uint64_t a1, JSC::B3::Value *Ptr)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::B3::Value *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x8_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64x2_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;

  v4 = *(_QWORD *)a1;
  v5 = (uint64_t *)(a1 + 28192);
  JSC::CodeOrigin::CodeOrigin(&v72, (const JSC::CodeOrigin *)(a1 + 28192));
  v19 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v4, &v72, v6, v7, v8, v9, v10, v11);
  if ((v72 & 1) != 0 && (v72 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v72 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  if ((*((_DWORD *)Ptr + 4) & 0x80000000) != 0)
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 27640), Ptr, 1u);
  if (HIBYTE(word_1ECF4C620))
  {
    v20 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationExceptionFuzz);
    JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 0, *(_QWORD *)(a1 + 27768), v20, v27);
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27880), (const JSC::FTL::AbstractHeap *)(a1 + 6304));
  }
  v28 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), Ptr);
  v70 = 0;
  v71 = 2;
  v29 = *(_QWORD *)a1;
  JSC::CodeOrigin::CodeOrigin(&v69, (const JSC::CodeOrigin *)(a1 + 28200));
  v41 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v29, (unint64_t *)&v69, &v71, &v70, v30, v31, v32, v33);
  if ((v69 & 1) != 0 && (v69 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v69 & 0xFFFFFFFF8, v34, v35, v36, v37, v38, v39, v40);
  if (v41)
  {
    JSC::CodeOrigin::CodeOrigin(&v67, (const JSC::CodeOrigin *)&v71);
    v59 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v68, v5, (unint64_t *)&v67, v54, v55, v56, v57, v58).u64[0];
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v68, v60, v61, v62, v63, v64, v65, v66);
    if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v67 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
  }
  else
  {
    v42 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v28, *(_QWORD *)(a1 + 27856), v42, 0.0, 1.0, v43, v44, v45, v46);
    *(_QWORD *)(a1 + 27776) = v42;
  }
  if ((v71 & 1) != 0 && (v71 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v71 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::B3::Value *>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  WTF *v13;
  WTF *v15;
  int v16;
  uint64_t v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v17[0] = a3;
  WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v15, v17, 1uLL);
  v13 = v15;
  if (v15)
  {
    v15 = 0;
    v16 = 0;
    WTF::fastFree((unint64_t)v13, v5, v6, v7, v8, v9, v10, v11);
  }
  return v12;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long),JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::DFG::Node *v14;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationObjectToStringUntyped);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v11, v12, *a2, *a3);
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  JSC::CodeOrigin::CodeOrigin(&v40, (const JSC::CodeOrigin *)(a1 + 3524));
  v11 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v12 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a3;
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      v35 = (unint64_t)v15;
      LOBYTE(v36) = 3;
      JSC::B3::StackmapValue::append(v11, v15, (unint64_t)&v35 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  *((_QWORD *)v11 + 8) |= 0x30000uLL;
  *((_QWORD *)v11 + 10) |= 0x30000uLL;
  v16 = a1[1];
  v35 = *a2;
  v17 = v39;
  if (v39)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = v39;
  }
  else
  {
    v19 = 0;
  }
  v36 = v17;
  v37 = v16;
  JSC::CodeOrigin::CodeOrigin(&v38, (const JSC::CodeOrigin *)&v40);
  if (v19)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v19, v27, v28, v29, v30, v31, v32, v33);
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  return v11;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576B40;
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  v2 = *(unsigned int **)(a2 + 16);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v5;
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v7 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      result = v12;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v4 = v6 | v9;
  }
  *(_QWORD *)(result + 48) = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56[5];
  unsigned int *v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  unint64_t v62;
  uint64_t v63;

  v62 = 0;
  v63 = 0;
  v6 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a3 + 8);
    v8 = 16 * v6;
    do
    {
      *(_QWORD *)&v53 = JSC::FTL::Location::forValueRep(v7);
      *((_QWORD *)&v53 + 1) = v9;
      v10 = HIDWORD(v63);
      if (HIDWORD(v63) == (_DWORD)v63)
      {
        WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::Location>((uint64_t)&v62, (unint64_t)&v53);
      }
      else
      {
        *(_OWORD *)(v62 + 16 * HIDWORD(v63)) = v53;
        HIDWORD(v63) = v10 + 1;
      }
      v7 += 16;
      v8 -= 16;
    }
    while (v8);
    v11 = v62;
    v12 = HIDWORD(v63);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  JSC::MacroAssemblerARM64::patchableJump(a2, v13, v14, v15, v16, v17, v18, v19, (uint64_t)&v59);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a2, v20, v21, v22, v23, v24, v25, v26, &v58);
  v27 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v29 = v28;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v57);
  LODWORD(v53) = v59;
  *(_QWORD *)((char *)&v53 + 4) = v60;
  v54 = *(_QWORD *)(a1 + 24);
  v55 = v58;
  JSC::CodeOrigin::CodeOrigin(v56, (const JSC::CodeOrigin *)(a1 + 32));
  v30 = v57;
  if (v57)
  {
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v56[1] = (uint64_t)v30;
  v56[2] = v27;
  v56[3] = v29;
  v32 = (uint64_t)v61;
  if (v61)
  {
    v33 = v61 + 2;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  v56[4] = v32;
  if (v57)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v57, v42, v43, v44, v45, v46, v47, v48);
  v49 = v61;
  v61 = 0;
  if (v49)
  {
    v50 = v49 + 2;
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v49 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
    }
  }
  if (v62)
    WTF::fastFree(v62, v42, v43, v44, v45, v46, v47, v48);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;

  if (!a4)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB9D80);
  }
  if (*(_DWORD *)(a3 + 12) || a4 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB9D58);
  }
  if (*(_DWORD *)(a3 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x197DB9D78);
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = *(_DWORD *)(a3 + 8) & 0x7F;
  v8 = *(_BYTE *)(a3 + 24) & 0x7F;
  result = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3576AC8;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = operationObjectToStringObjectSlow;
  *(_BYTE *)(result + 32) = v7;
  *(_QWORD *)(result + 40) = v6;
  *(_BYTE *)(result + 48) = v8;
  *a1 = result;
  return result;
}

_QWORD *JSC::B3::StackmapGenerationParams::addLatePath<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[9];
  unsigned int *v19;

  v3 = WTF::fastMalloc((WTF *)0x58);
  v4 = _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_21compileObjectToStringEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(v3, (uint64_t)v18);
  v19 = (unsigned int *)v4;
  v12 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v19);
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v4;
    *(_DWORD *)(a1 + 12) = v12 + 1;
  }
}

uint64_t _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_21compileObjectToStringEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576B68;
  *(_DWORD *)(result + 16) = *(_DWORD *)a2;
  *(_QWORD *)(result + 20) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = result;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      result = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)(result + 48) = v2;
  v3 = *(unsigned int **)(a2 + 40);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 56) = v3;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 80) = v5;
  return result;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_21compileObjectToStringEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_21compileObjectToStringEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_21compileObjectToStringEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

_QWORD *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *result;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[12];
  int v59;
  unsigned int *v60;
  uint64_t v61[2];
  __int128 v62;
  uint64_t v63;
  int v64;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v18 = *(unsigned int *)(v17 + 308);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v17 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v17 + 296) + 8 * v18) = 0;
    *(_DWORD *)(v17 + 308) = v18 + 1;
  }
  JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters((unsigned int *)a2, v18, v11, v12, v13, v14, v15, v16);
  v19 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v19 + 90440), v19, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v20, v21, v22, v23, v24, v58);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, *(uint64_t *)v58, v25, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v58, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 24);
  if (v38)
  {
    v39 = v38 + 2;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
  }
  else
  {
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
  }
  v60 = v38;
  JSC::CodeOrigin::CodeOrigin(v61, (const JSC::CodeOrigin *)(a1 + 32));
  v42 = *(unsigned int **)(a1 + 40);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v61[1] = (uint64_t)v42;
  v62 = *(_OWORD *)(a1 + 48);
  v44 = *(_QWORD *)(a1 + 64);
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v63 = v44;
  v64 = v18;
  _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_21compileObjectToStringEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(a2, (uint64_t)v58);
  if (v38)
  {
    v55 = v38 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v38 + 2);
      result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v38 + 32))(v38);
    }
  }
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_21compileObjectToStringEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3576B90;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)a2;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v4 + 32) = v6;
  v9 = *(_QWORD *)(a2 + 24);
  if ((v9 & 1) != 0)
  {
    v29 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v30 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v33 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = v33;
      *(_DWORD *)(v29 + 8) = v30;
      v32 = 1;
    }
    else
    {
      v32 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = v30 << 36;
    }
    v9 = v29 | v32;
  }
  *(_QWORD *)(v5 + 40) = v9;
  v10 = *(unsigned int **)(a2 + 32);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v5 + 72) = v12;
  *(_DWORD *)(v5 + 80) = *(_DWORD *)(a2 + 64);
  v15 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 240))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
LABEL_21:
    *v16 = v5;
    *(_DWORD *)(a1 + 244) = v15 + 1;
    return;
  }
  v17 = v15 + (v15 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15 + 1)
    v19 = v15 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = *(const void **)(a1 + 232);
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(a1 + 240) = v19;
    *(_QWORD *)(a1 + 232) = v21;
    memcpy(v21, v20, 8 * v15);
    if (v20)
    {
      if (*(const void **)(a1 + 232) == v20)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
    }
    v15 = *(unsigned int *)(a1 + 244);
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
    goto LABEL_21;
  }
  __break(0xC471u);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_21compileObjectToStringEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_21compileObjectToStringEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_21compileObjectToStringEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, JSC::LinkBuffer *a2)
{
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  JSC::FTL::Output *v5;
  uint64_t *v6;
  JSC::B3::BasicBlock *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *Object;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  JSC::FTL::PatchpointExceptionHandle *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::FTL::PatchpointExceptionHandle *v31;
  JSC::FTL::PatchpointExceptionHandle **v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  JSC::FTL::PatchpointExceptionHandle *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::B3::Value *v76;
  uint64_t v77;
  uint64_t v78;
  char **v79;
  uint64_t v80;
  JSC::FTL::PatchpointExceptionHandle *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t **v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t **v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  JSC::FTL::PatchpointExceptionHandle *v137;
  uint64_t v138;
  char v139;
  uint64_t *v140;
  uint64_t *v141;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16)
                 + (((8 * *(unsigned __int8 *)(a2 + 14) + 31) >> 1) & 0x7F8)
                 + 15024);
  v5 = (JSC::FTL::Output *)(a1 + 27640);
  v6 = JSC::B3::Procedure::addBlock((uint64_t *)0x6BF8, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v7 = (JSC::B3::BasicBlock *)v6;
  v8 = *(_QWORD *)(a1 + 27784);
  if (v8)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v8, (uint64_t)v6);
  }
  else
  {
    v141 = v6;
    v85 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v85 = 0u;
    *((_OWORD *)v85 + 1) = 0u;
    v85[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v85;
    v140 = v85;
    v85[2] = v7;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v141, (uint64_t *)&v140, v86, v87, v88, v89, v90, (uint64_t)&v137);
    v9 = v140;
    v91 = *(uint64_t ***)(a1 + 27832);
    *v140 = a1 + 27824;
    v9[1] = (uint64_t)v91;
    *v91 = v9;
    *(_QWORD *)(a1 + 27832) = v9;
  }
  v10 = JSC::B3::Procedure::addBlock(v9, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 27784);
  if (v12)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v12, (uint64_t)v10);
  }
  else
  {
    v141 = v10;
    v92 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v92 = 0u;
    *((_OWORD *)v92 + 1) = 0u;
    v92[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v92;
    v140 = v92;
    v92[2] = v11;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v141, (uint64_t *)&v140, v93, v94, v95, v96, v97, (uint64_t)&v137);
    v98 = v140;
    v99 = *(uint64_t ***)(a1 + 27832);
    *v140 = a1 + 27824;
    v98[1] = (uint64_t)v99;
    *v99 = v98;
    *(_QWORD *)(a1 + 27832) = v98;
  }
  v136 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v7;
  v13 = JSC::FTL::Output::constInt64(v5, v4);
  v14 = *(_QWORD *)(a1 + 27680);
  v15 = JSC::FTL::Output::constInt64(v5, a2);
  v17 = *(_QWORD *)(a1 + 27776);
  v18 = *(JSC::B3::Value **)(a1 + 27760);
  v19 = *(_QWORD *)(a1 + 27768);
  v20 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v20 + 8) = -1;
  *(_WORD *)(v20 + 12) = 152;
  *(_BYTE *)(v20 + 20) = 1;
  *(_QWORD *)v20 = &unk_1E357EDA0;
  *(_DWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 40) = 0;
  *(_QWORD *)(v20 + 48) = Object;
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v20 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v18, (JSC::B3::Value *)v20);
  v137 = (JSC::FTL::PatchpointExceptionHandle *)v20;
  v24 = (char **)(v17 + 8);
  v25 = *(unsigned int *)(v17 + 20);
  v134 = a2;
  if ((_DWORD)v25 == *(_DWORD *)(v17 + 16))
  {
    v100 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, v25 + 1, (unint64_t)&v137);
    v25 = *(unsigned int *)(v17 + 20);
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v25) = *(_QWORD *)v100;
    v26 = v137;
  }
  else
  {
    *(_QWORD *)&(*v24)[8 * v25] = v20;
    v26 = (JSC::FTL::PatchpointExceptionHandle *)v20;
  }
  *(_DWORD *)(v17 + 20) = v25 + 1;
  *((_QWORD *)v26 + 4) = v17;
  v27 = *(_QWORD *)(a1 + 27776);
  v28 = *(_QWORD *)(a1 + 27760);
  v29 = *(_QWORD *)(a1 + 27768);
  v137 = (JSC::FTL::PatchpointExceptionHandle *)v11;
  LOBYTE(v138) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v27, v28, 154, v29, (uint64_t *)&v137, v21, v22, v23);
  *(_QWORD *)(a1 + 27776) = v7;
  *(_QWORD *)(a1 + 27784) = v11;
  v30 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v31 = *(JSC::FTL::PatchpointExceptionHandle **)(a1 + 27880);
  v32 = (JSC::FTL::PatchpointExceptionHandle **)WTF::fastMalloc((WTF *)8);
  *v32 = v31;
  v33 = *(_QWORD *)(a1 + 28192);
  if ((v33 & 1) != 0)
  {
    v103 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    if ((v33 & 2) != 0
      || (v104 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v104 == 0x3FFFFFFF)
      || (_DWORD)v104 == -1)
    {
      v105 = 2;
    }
    else if (v104 >> 28)
    {
      v130 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v130 = v103;
      *(_DWORD *)(v130 + 8) = v104;
      v105 = 1;
      v103 = v130;
    }
    else
    {
      v105 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      v103 = v104 << 36;
    }
    v33 = v103 | v105;
  }
  v34 = (__int128 *)JSC::FTL::Output::patchpoint(v5, 2);
  v137 = *v32;
  v138 = 0;
  v139 = 3;
  JSC::B3::StackmapValue::append(v34, (uint64_t)v137, (unint64_t)&v138);
  *((_QWORD *)v34 + 8) |= 0x30000uLL;
  *((_QWORD *)v34 + 10) |= 0x30000uLL;
  v40 = *(_QWORD *)(a1 + 8);
  v41 = (unsigned int *)v137;
  if (v137)
  {
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
  }
  v43 = v33;
  if ((v33 & 1) != 0)
  {
    v106 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    if ((v33 & 2) != 0
      || ((v107 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v107 != 0x3FFFFFFF)
        ? (v108 = (_DWORD)v107 == -1)
        : (v108 = 1),
          v108))
    {
      v109 = 2;
    }
    else if (v107 >> 28)
    {
      v133 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      v131 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v131 = v133;
      *(_DWORD *)(v131 + 8) = v107;
      v109 = 1;
      v106 = v131;
    }
    else
    {
      v109 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      v106 = v107 << 36;
    }
    v43 = v106 | v109;
  }
  v44 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v44 + 8) = 1;
  *(_QWORD *)v44 = &off_1E3576BB8;
  *(_QWORD *)(v44 + 16) = v30;
  *(_QWORD *)(v44 + 24) = v134;
  if (v41)
  {
    do
      v52 = __ldaxr(v41);
    while (__stlxr(v52 + 1, v41));
  }
  *(_QWORD *)(v44 + 32) = v41;
  *(_QWORD *)(v44 + 40) = v40;
  v53 = v43;
  if ((v43 & 1) != 0)
  {
    v110 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
    if ((v43 & 2) != 0
      || ((v111 = *(unsigned int *)((v43 & 0xFFFFFFFF8) + 8), (_DWORD)v111 != 0x3FFFFFFF)
        ? (v112 = (_DWORD)v111 == -1)
        : (v112 = 1),
          v112))
    {
      v113 = 2;
    }
    else if (v111 >> 28)
    {
      v135 = v44;
      v132 = WTF::fastMalloc((WTF *)0x10);
      v44 = v135;
      *(_QWORD *)v132 = v110;
      *(_DWORD *)(v132 + 8) = v111;
      v113 = 1;
      v110 = v132;
    }
    else
    {
      v113 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
      v110 = v111 << 36;
    }
    v53 = v110 | v113;
  }
  *(_QWORD *)(v44 + 48) = v53;
  v54 = (unsigned int *)*((_QWORD *)v34 + 7);
  *((_QWORD *)v34 + 7) = v44;
  if (v54)
  {
    v55 = v54 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v54 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
    }
  }
  if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v43 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
  if (v41)
  {
    do
    {
      v58 = __ldaxr(v41);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v41));
    if (!v59)
    {
      atomic_store(1u, v41);
      JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v41, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
  }
  v60 = (unsigned int *)v137;
  v137 = 0;
  if (v60)
  {
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      atomic_store(1u, v60);
      JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v60, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
  }
  if ((v33 & 1) != 0 && (v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
  WTF::fastFree((unint64_t)v32, v45, v46, v47, v48, v49, v50, v51);
  v63 = *(_QWORD *)(a1 + 27776);
  v64 = *(JSC::B3::Value **)(a1 + 27760);
  v65 = *(_QWORD *)(a1 + 27768);
  v66 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v66 + 8) = -1;
  *(_WORD *)(v66 + 12) = 152;
  *(_DWORD *)(v66 + 16) = 0;
  *(_BYTE *)(v66 + 20) = 1;
  *(_QWORD *)v66 = &unk_1E357EDA0;
  *(_QWORD *)(v66 + 40) = 0;
  *(_QWORD *)(v66 + 48) = v34;
  *(_QWORD *)(v66 + 24) = v65;
  *(_QWORD *)(v66 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v64, (JSC::B3::Value *)v66);
  v137 = (JSC::FTL::PatchpointExceptionHandle *)v66;
  v70 = (char **)(v63 + 8);
  v71 = *(unsigned int *)(v63 + 20);
  if ((_DWORD)v71 == *(_DWORD *)(v63 + 16))
  {
    v101 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v70, v71 + 1, (unint64_t)&v137);
    v71 = *(unsigned int *)(v63 + 20);
    *(_QWORD *)(*(_QWORD *)(v63 + 8) + 8 * v71) = *(_QWORD *)v101;
    v72 = v137;
  }
  else
  {
    *(_QWORD *)&(*v70)[8 * v71] = v66;
    v72 = (JSC::FTL::PatchpointExceptionHandle *)v66;
  }
  *(_DWORD *)(v63 + 20) = v71 + 1;
  *((_QWORD *)v72 + 4) = v63;
  v73 = *(_QWORD *)(a1 + 27776);
  v74 = *(_QWORD *)(a1 + 27760);
  v75 = *(_QWORD *)(a1 + 27768);
  v137 = (JSC::FTL::PatchpointExceptionHandle *)v11;
  LOBYTE(v138) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v73, v74, 154, v75, (uint64_t *)&v137, v67, v68, v69);
  *(_QWORD *)(a1 + 27776) = v11;
  *(_QWORD *)(a1 + 27784) = v136;
  v76 = *(JSC::B3::Value **)(a1 + 27760);
  v77 = *(_QWORD *)(a1 + 27768);
  v78 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v78 = off_1E357F5F0;
  *(_DWORD *)(v78 + 8) = -1;
  *(_WORD *)(v78 + 12) = 153;
  *(_DWORD *)(v78 + 16) = 2;
  *(_BYTE *)(v78 + 20) = 0;
  *(_QWORD *)(v78 + 24) = v77;
  *(_QWORD *)(v78 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v76, (JSC::B3::Value *)v78);
  v137 = (JSC::FTL::PatchpointExceptionHandle *)v78;
  v79 = (char **)(v11 + 1);
  v80 = *((unsigned int *)v11 + 5);
  if ((_DWORD)v80 == *((_DWORD *)v11 + 4))
  {
    v102 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v79, v80 + 1, (unint64_t)&v137);
    v80 = *((unsigned int *)v11 + 5);
    *(_QWORD *)(v11[1] + 8 * v80) = *(_QWORD *)v102;
    v81 = v137;
  }
  else
  {
    *(_QWORD *)&(*v79)[8 * v80] = v78;
    v81 = (JSC::FTL::PatchpointExceptionHandle *)v78;
  }
  *((_DWORD *)v11 + 5) = v80 + 1;
  *((_QWORD *)v81 + 4) = v11;
  if ((*(_WORD *)(v20 + 12) & 0xFFF) == 0x98)
    v82 = v20;
  else
    v82 = 0;
  *(_QWORD *)(v82 + 40) = v78;
  if ((*(_WORD *)(v66 + 12) & 0xFFF) == 0x98)
    v83 = v66;
  else
    v83 = 0;
  *(_QWORD *)(v83 + 40) = v78;
  return v78;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject(JSC::DFG::RegisteredStructure)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject(JSC::DFG::RegisteredStructure)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject(JSC::DFG::RegisteredStructure)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject(JSC::DFG::RegisteredStructure)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject(JSC::DFG::RegisteredStructure)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject(JSC::DFG::RegisteredStructure)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  uint64_t v3;
  WTF *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  int i;
  unsigned int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  _BYTE *v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  const void *v77;
  void *v78;
  _BYTE *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  JSC::FTL::ExceptionTarget *v124[2];
  WTF *v125;
  uint64_t v126;

  v125 = 0;
  v126 = 0;
  v3 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v3)
    goto LABEL_137;
  v7 = 0;
  v8 = 0;
  v9 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = 16 * v3;
  do
  {
    v11 = v9[8];
    switch(v11)
    {
      case 7:
        v12 = *v9 & 0x7F;
        v13 = 1;
        break;
      case 9:
        v12 = (*(_QWORD *)v9 << 32) | 0x1DLL;
        v13 = 2;
        break;
      case 11:
        v12 = *(_QWORD *)v9;
        v13 = 3;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197DBB7B8);
    }
    v124[0] = (JSC::FTL::ExceptionTarget *)v13;
    v124[1] = (JSC::FTL::ExceptionTarget *)v12;
    if (v8 == (_DWORD)v126)
    {
      v15 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v125, v8 + 1, (unint64_t)v124);
      v14 = HIDWORD(v126);
      v7 = v125;
      *((_OWORD *)v125 + HIDWORD(v126)) = *v15;
    }
    else
    {
      *((_OWORD *)v7 + v8) = *(_OWORD *)v124;
      v14 = HIDWORD(v126);
    }
    v8 = v14 + 1;
    HIDWORD(v126) = v8;
    v9 += 16;
    v10 -= 16;
  }
  while (v10);
  if (!v8)
  {
LABEL_137:
    __break(0xC471u);
    JUMPOUT(0x197DBB870);
  }
  if (*((_DWORD *)v125 + 3))
  {
    __break(0xC471u);
    goto LABEL_141;
  }
  if (v8 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DBB878);
  }
  if (*((_DWORD *)v125 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DBB5C8);
  }
  v16 = *((_BYTE *)v125 + 8) & 0x7F;
  v17 = *((_BYTE *)v125 + 24) & 0x7F;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  v27 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v27 + 8) = 1;
  v28 = (unsigned int *)(v27 + 8);
  *(_QWORD *)v27 = off_1E3576BE0;
  *(_QWORD *)(v27 + 16) = v18;
  *(_QWORD *)(v27 + 24) = operationNewObject;
  *(_BYTE *)(v27 + 32) = v16;
  *(_BYTE *)(v27 + 33) = v17;
  *(_QWORD *)(v27 + 40) = v19;
  *(_BYTE *)(a2 + 328) = 1;
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v20, v21, v22, v23, v24, v25, v26);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v30 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v20, v21, v22, v23, v24, v25, v26);
    v30 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = 335544320;
  v31 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v31;
  if (*(_BYTE *)(a2 + 328))
    v32 = 0xFF000F4500000000;
  else
    v32 = 0xFF000F4100000000;
  for (*(_BYTE *)(a2 + 328) = 0; v31 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v31)
  {
    if ((v31 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v20, v21, v22, v23, v24, v25, v26);
      v31 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -721215457;
    v31 = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v33 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v34 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v35 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v35)
  {
    v71 = (_BYTE *)*((_QWORD *)a3 + 3);
    do
    {
      v72 = *v71 & 0x7F;
      if (v72 >= 0x40)
        goto LABEL_140;
      v73 = 1 << v72;
      v34 &= ~v73;
      v33 &= ~v73;
      ++v71;
    }
    while (--v35);
  }
  v36 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v36)
  {
    v79 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v80 = (*v79 + 32) & 0x7F;
      if (v80 >= 0x40)
        goto LABEL_140;
      v81 = 1 << v80;
      v34 &= ~v81;
      v33 &= ~v81;
      ++v79;
    }
    while (--v36);
  }
  v122 = v31;
  v123 = v33;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), a3, (uint64_t *)v124);
  v37 = *(_QWORD *)(a1 + 48);
  v121 = *(_QWORD *)(a1 + 40);
  if ((v37 & 1) != 0)
  {
    v82 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    if ((v37 & 2) != 0
      || ((v83 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v83 != 0x3FFFFFFF)
        ? (v84 = (_DWORD)v83 == -1)
        : (v84 = 1),
          v84))
    {
      v85 = 2;
    }
    else if (v83 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v82;
      *(_DWORD *)(v118 + 8) = v83;
      v85 = 1;
      v82 = v118;
    }
    else
    {
      v85 = v82;
      v82 = v83 << 36;
    }
    v37 = v82 | v85;
  }
  v38 = (unsigned int *)v124[0];
  if (v124[0])
  {
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
  }
  do
    v40 = __ldaxr(v28);
  while (__stlxr(v40 + 1, v28));
  v41 = *((_QWORD *)a3 + 7);
  v42 = v37;
  if ((v37 & 1) != 0)
  {
    v86 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    if ((v37 & 2) != 0
      || ((v87 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v87 != 0x3FFFFFFF)
        ? (v88 = (_DWORD)v87 == -1)
        : (v88 = 1),
          v88))
    {
      v89 = 2;
    }
    else if (v87 >> 28)
    {
      v119 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v119 = v86;
      *(_DWORD *)(v119 + 8) = v87;
      v89 = 1;
      v86 = v119;
    }
    else
    {
      v89 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
      v86 = v87 << 36;
    }
    v42 = v86 | v89;
  }
  if (v38)
  {
    do
      v43 = __ldaxr(v38);
    while (__stlxr(v43 + 1, v38));
  }
  do
    v44 = __ldaxr(v28);
  while (__stlxr(v44 + 1, v28));
  v52 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v52 + 8) = 1;
  *(_QWORD *)v52 = &off_1E3576C08;
  *(_DWORD *)(v52 + 16) = i;
  *(_QWORD *)(v52 + 20) = v32;
  *(_QWORD *)(v52 + 32) = v121;
  *(_DWORD *)(v52 + 40) = v122;
  v53 = v42;
  if ((v42 & 1) != 0)
  {
    v90 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
    if ((v42 & 2) != 0
      || ((v91 = *(unsigned int *)((v42 & 0xFFFFFFFF8) + 8), (_DWORD)v91 != 0x3FFFFFFF)
        ? (v92 = (_DWORD)v91 == -1)
        : (v92 = 1),
          v92))
    {
      v93 = 2;
    }
    else if (v91 >> 28)
    {
      v120 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v120 = v90;
      *(_DWORD *)(v120 + 8) = v91;
      v93 = 1;
      v90 = v120;
    }
    else
    {
      v93 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
      v90 = v91 << 36;
    }
    v53 = v90 | v93;
  }
  *(_QWORD *)(v52 + 48) = v53;
  if (v38)
  {
    do
      v54 = __ldaxr(v38);
    while (__stlxr(v54 + 1, v38));
  }
  *(_QWORD *)(v52 + 56) = v38;
  *(_QWORD *)(v52 + 64) = v34;
  *(_QWORD *)(v52 + 72) = v123;
  do
    v55 = __ldaxr(v28);
  while (__stlxr(v55 + 1, v28));
  *(_QWORD *)(v52 + 80) = v27;
  v56 = *(unsigned int *)(v41 + 12);
  if ((_DWORD)v56 != *(_DWORD *)(v41 + 8))
  {
    v57 = (uint64_t *)(*(_QWORD *)v41 + 8 * v56);
    goto LABEL_38;
  }
  v74 = v56 + (v56 >> 2);
  if (v74 >= 0x10)
    v75 = v74 + 1;
  else
    v75 = 16;
  if (v75 <= v56 + 1)
    v76 = v56 + 1;
  else
    v76 = v75;
  if (v76 >> 29)
  {
    __break(0xC471u);
LABEL_140:
    __break(1u);
LABEL_141:
    JUMPOUT(0x197DBB5A8);
  }
  v77 = *(const void **)v41;
  v78 = (void *)WTF::fastMalloc((WTF *)(8 * v76));
  *(_DWORD *)(v41 + 8) = v76;
  *(_QWORD *)v41 = v78;
  memcpy(v78, v77, 8 * v56);
  if (v77)
  {
    if (*(const void **)v41 == v77)
    {
      *(_QWORD *)v41 = 0;
      *(_DWORD *)(v41 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v77, v45, v46, v47, v48, v49, v50, v51);
  }
  v56 = *(unsigned int *)(v41 + 12);
  v57 = (uint64_t *)(*(_QWORD *)v41 + 8 * v56);
LABEL_38:
  *v57 = v52;
  *(_DWORD *)(v41 + 12) = v56 + 1;
  do
  {
    v58 = __ldaxr(v28);
    v59 = v58 - 1;
  }
  while (__stlxr(v59, v28));
  if (!v59)
  {
    atomic_store(1u, (unsigned int *)(v27 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  if (v38)
  {
    do
    {
      v60 = __ldaxr(v38);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v38));
    if (!v61)
    {
      atomic_store(1u, v38);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v38, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
  }
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
  do
  {
    v62 = __ldaxr(v28);
    v63 = v62 - 1;
  }
  while (__stlxr(v63, v28));
  if (!v63)
  {
    atomic_store(1u, (unsigned int *)(v27 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  if (v38)
  {
    do
    {
      v64 = __ldaxr(v38);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v38));
    if (!v65)
    {
      atomic_store(1u, v38);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v38, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
  }
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
  v66 = (unsigned int *)v124[0];
  v124[0] = 0;
  if (v66)
  {
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v66);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v66, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
  }
  do
  {
    v69 = __ldaxr(v28);
    v70 = v69 - 1;
  }
  while (__stlxr(v70, v28));
  if (!v70)
  {
    atomic_store(1u, (unsigned int *)(v27 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  if (v125)
    WTF::fastFree((unint64_t)v125, v45, v46, v47, v48, v49, v50, v51);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  JSC::ARM64LogicalImmediate *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int i;
  unsigned int v34;
  char v35;
  uint64_t v36;
  int *v37;
  int *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  char v43;
  __int16 v44;
  char v45;
  _BYTE v46[32];

  v10 = *(_QWORD *)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v16 = *(_BYTE *)(a1 + 33);
  v17 = *(JSC::ARM64LogicalImmediate **)(a1 + 40);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DBBAACLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
    v25 = *(_DWORD *)(a2 + 200);
    if (v25 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v18, v19, v20, v21, v22, v23, v24);
      v25 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v25) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::FTL::callOperation<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v46, v14, *(_QWORD *)(v11 + 24), (_DWORD *)a2, v10, v13, v15, v16, v17);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v26, v27, v28, v29, v30, v31, v32);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v34 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v26, v27, v28, v29, v30, v31, v32);
    v34 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v34) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v35 = 69;
  else
    v35 = 65;
  v41 = i;
  v42 = 0;
  v43 = v35;
  v44 = 15;
  v45 = -1;
  if (i != -1)
  {
    v36 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v36 == *(_DWORD *)(a3 + 8))
    {
      v37 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v36 + 1), (unint64_t)&v41, v28, v29, v30, v31, v32);
      v39 = *v37;
      v38 = v37 + 1;
      v40 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v40 = v39;
    }
    else
    {
      v38 = &v42;
      v40 = *(_QWORD *)a3 + 12 * v36;
      *(_DWORD *)v40 = i;
    }
    *(_QWORD *)(v40 + 4) = *(_QWORD *)v38;
    ++*(_DWORD *)(a3 + 12);
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_14allocateObjectENS1_3DFG19RegisteredStructureEEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSH_IPNS4_5ValueELm0ESJ_Lm16ESK_EEENKUlS3_RKS9_E_clES3_S10_EUlS3_E_EEvST_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_14allocateObjectENS1_3DFG19RegisteredStructureEEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSH_IPNS4_5ValueELm0ESJ_Lm16ESK_EEENKUlS3_RKS9_E_clES3_S10_EUlS3_E_EEvST_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_14allocateObjectENS1_3DFG19RegisteredStructureEEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSH_IPNS4_5ValueELm0ESJ_Lm16ESK_EEENKUlS3_RKS9_E_clES3_S10_EUlS3_E_EEvST_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const void *v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  const void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  JSC::ExecutableMemoryHandle *v128[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v91 = v20 + (v20 >> 2);
    if (v91 >= 0x10)
      v92 = v91 + 1;
    else
      v92 = 16;
    if (v92 <= v20 + 1)
      v93 = v20 + 1;
    else
      v93 = v92;
    if (v93 >> 29)
    {
      __break(0xC471u);
      goto LABEL_107;
    }
    v94 = *(const void **)(v19 + 296);
    v95 = (void *)WTF::fastMalloc((WTF *)(8 * v93));
    *(_DWORD *)(v19 + 304) = v93;
    *(_QWORD *)(v19 + 296) = v95;
    memcpy(v95, v94, 8 * v20);
    if (v94)
    {
      if (*(const void **)(v19 + 296) == v94)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v94, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v23 = *(_DWORD *)(a2 + 200);
  if (v23 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v23 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v31 = *(_DWORD *)(a2 + 200);
  if (v31 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -134216720;
  v32 = *(_DWORD *)(a2 + 200);
  v33 = v32 + 4;
  *(_DWORD *)(a2 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v34 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v34 + 90440), v34, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v26, v27, v28, v29, v30, v128);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v128[0], v35, v36, v37, v38, v39, v40);
  v48 = (unsigned int *)v128[1];
  v128[1] = 0;
  if (v48)
  {
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v48);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v48, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v51 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v127 = v11;
  if (v51)
  {
    v52 = v51 + 2;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
    do
      v57 = __ldaxr(v52);
    while (__stlxr(v57 + 1, v52));
  }
  else
  {
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
  }
  v58 = *(_QWORD *)(a1 + 48);
  if ((v58 & 1) != 0)
  {
    v101 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v102 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v125 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v125 = v101;
      *(_DWORD *)(v125 + 8) = v102;
      v104 = 1;
      v101 = v125;
    }
    else
    {
      v104 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v58 = v101 | v104;
  }
  v59 = *(unsigned int **)(a1 + 56);
  if (v59)
  {
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  *(_OWORD *)v128 = *(_OWORD *)(a1 + 64);
  v61 = *(unsigned int **)(a1 + 80);
  if (v61)
  {
    v62 = v61 + 2;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 + 1, v62));
  }
  v64 = WTF::fastMalloc((WTF *)0x58);
  v72 = v64;
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = &off_1E3576C30;
  *(_DWORD *)(v64 + 16) = v54;
  *(_QWORD *)(v64 + 20) = v55;
  *(_DWORD *)(v64 + 28) = v56;
  if (v51)
  {
    v73 = v51 + 2;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
  }
  *(_QWORD *)(v64 + 32) = v51;
  v75 = v58;
  if ((v58 & 1) != 0)
  {
    v105 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v106 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v126 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v126 = v105;
      *(_DWORD *)(v126 + 8) = v106;
      v108 = 1;
      v105 = v126;
    }
    else
    {
      v108 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v75 = v105 | v108;
  }
  *(_QWORD *)(v72 + 40) = v75;
  if (v59)
  {
    do
      v76 = __ldaxr(v59);
    while (__stlxr(v76 + 1, v59));
  }
  *(_QWORD *)(v72 + 48) = v59;
  *(_OWORD *)(v72 + 56) = *(_OWORD *)v128;
  if (v61)
  {
    v77 = v61 + 2;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
  }
  *(_QWORD *)(v72 + 72) = v61;
  *(_DWORD *)(v72 + 80) = v20;
  v79 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v79 != *(_DWORD *)(a2 + 240))
  {
    v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
    goto LABEL_37;
  }
  v96 = v79 + (v79 >> 2);
  if (v96 >= 0x10)
    v97 = v96 + 1;
  else
    v97 = 16;
  if (v97 <= v79 + 1)
    v98 = v79 + 1;
  else
    v98 = v97;
  if (v98 >> 29)
  {
    __break(0xC471u);
LABEL_107:
    JUMPOUT(0x197DBC2CCLL);
  }
  v99 = *(const void **)(a2 + 232);
  v100 = (void *)WTF::fastMalloc((WTF *)(8 * v98));
  *(_DWORD *)(a2 + 240) = v98;
  *(_QWORD *)(a2 + 232) = v100;
  memcpy(v100, v99, 8 * v79);
  if (v99)
  {
    if (*(const void **)(a2 + 232) == v99)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v99, v65, v66, v67, v68, v69, v70, v71);
  }
  v79 = *(unsigned int *)(a2 + 244);
  v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
LABEL_37:
  *v80 = v72;
  *(_DWORD *)(a2 + 244) = v79 + 1;
  if (v61)
  {
    v81 = v61 + 2;
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      atomic_store(1u, v61 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
    }
  }
  if (v59)
  {
    do
    {
      v84 = __ldaxr(v59);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v59));
    if (!v85)
    {
      atomic_store(1u, v59);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v59, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
  }
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
  if (v51)
  {
    v86 = v51 + 2;
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
    do
    {
      v89 = __ldaxr(v86);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, v86));
    if (!v90)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
  }
  *(_BYTE *)(a2 + 212) = v127;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_14allocateObjectENS1_3DFG19RegisteredStructureEEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSB_IPNSJ_5ValueELm0ESD_Lm16ESE_EEENKUlRNS1_12CCallHelpersERKNSJ_24StackmapGenerationParamsEE_clESV_SY_ENKUlSV_E_clESV_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_14allocateObjectENS1_3DFG19RegisteredStructureEEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSB_IPNSJ_5ValueELm0ESD_Lm16ESE_EEENKUlRNS1_12CCallHelpersERKNSJ_24StackmapGenerationParamsEE_clESV_SY_ENKUlSV_E_clESV_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_14allocateObjectENS1_3DFG19RegisteredStructureEEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSB_IPNSJ_5ValueELm0ESD_Lm16ESE_EEENKUlRNS1_12CCallHelpersERKNSJ_24StackmapGenerationParamsEE_clESV_SY_ENKUlSV_E_clESV_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DBC880);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DBC8A0);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DBC8C0);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
      goto LABEL_73;
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x197DBC848);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewInternalFieldObjectImpl<JSC::JSGenerator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(uint64_t *a1)
{
  JSC::FTL::Output *v2;
  JSC::B3::BasicBlock *v3;
  JSC::B3::BasicBlock *v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::B3::Value *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::B3::Value *v61;
  uint64_t v63;

  v2 = (JSC::FTL::Output *)(a1 + 3455);
  v3 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v4 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v2);
  v5 = a1[3473];
  a1[3473] = (uint64_t)v3;
  v7 = JSC::FTL::Output::constInt64(v2, 2);
  if (!a1[1467])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1462), 0);
  v8 = a1[1465];
  v9 = (uint64_t)v6;
  if (v8)
  {
    v10 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, v8);
    v9 = JSC::FTL::Output::add(v2, v6, v10);
  }
  JSC::FTL::Output::store((uint64_t)v2, v7, (const JSC::FTL::AbstractHeap *)(a1 + 1462), v9);
  v11 = JSC::FTL::Output::constInt64(v2, 0xFFFE000000000000);
  if (!a1[1473])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1468), 1);
  v12 = a1[1471];
  v13 = (uint64_t)v6;
  if (v12)
  {
    v14 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, v12);
    v13 = JSC::FTL::Output::add(v2, v6, v14);
  }
  JSC::FTL::Output::store((uint64_t)v2, v11, (const JSC::FTL::AbstractHeap *)(a1 + 1468), v13);
  v15 = JSC::FTL::Output::constInt64(v2, 10);
  if (!a1[1479])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1474), 2);
  v16 = a1[1477];
  v17 = (uint64_t)v6;
  if (v16)
  {
    v18 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, v16);
    v17 = JSC::FTL::Output::add(v2, v6, v18);
  }
  JSC::FTL::Output::store((uint64_t)v2, v15, (const JSC::FTL::AbstractHeap *)(a1 + 1474), v17);
  v19 = JSC::FTL::Output::constInt64(v2, 10);
  if (!a1[1485])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1480), 3);
  v20 = a1[1483];
  v21 = (uint64_t)v6;
  if (v20)
  {
    v22 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, v20);
    v21 = JSC::FTL::Output::add(v2, v6, v22);
  }
  JSC::FTL::Output::store((uint64_t)v2, v19, (const JSC::FTL::AbstractHeap *)(a1 + 1480), v21);
  v23 = JSC::FTL::Output::constInt64(v2, 10);
  if (!a1[1491])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1486), 4);
  v24 = a1[1489];
  v25 = (uint64_t)v6;
  if (v24)
  {
    v26 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, v24);
    v25 = JSC::FTL::Output::add(v2, v6, v26);
  }
  JSC::FTL::Output::store((uint64_t)v2, v23, (const JSC::FTL::AbstractHeap *)(a1 + 1486), v25);
  v27 = JSC::FTL::Output::constInt64(v2, 10);
  if (!a1[1497])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1492), 5);
  v28 = a1[1495];
  v29 = (uint64_t)v6;
  if (v28)
  {
    v30 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, v28);
    v29 = JSC::FTL::Output::add(v2, v6, v30);
  }
  JSC::FTL::Output::store((uint64_t)v2, v27, (const JSC::FTL::AbstractHeap *)(a1 + 1492), v29);
  v31 = JSC::FTL::Output::anchor(v2, v6);
  v33 = v32;
  JSC::FTL::Output::jump(v2, v4, v34, v35, v36, v37, v38, v39);
  a1[3472] = (uint64_t)v3;
  a1[3473] = (uint64_t)v4;
  v46 = (uint64_t *)JSC::DFG::Graph::freezeStrong(*a1, *(_QWORD *)(a1[3528] + 72), v40, v41, v42, v43, v44, v45);
  v52 = JSC::FTL::Output::anchor(v2, v51);
  v54 = v53;
  JSC::FTL::Output::jump(v2, v4, v55, v56, v57, v58, v59, v60);
  a1[3472] = (uint64_t)v4;
  a1[3473] = v5;
  v61 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v2, 2, v31, v33, v52, v54);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGenerator,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40488);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x3Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewInternalFieldObjectImpl<JSC::JSAsyncGenerator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(uint64_t *a1)
{
  JSC::FTL::Output *v2;
  JSC::B3::BasicBlock *v3;
  JSC::B3::BasicBlock *v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  uint64_t v47;

  v2 = (JSC::FTL::Output *)(a1 + 3455);
  v3 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v4 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v2);
  v5 = a1[3473];
  a1[3473] = (uint64_t)v3;
  v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 2);
  if (!a1[1467])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1462), 0);
  JSC::FTL::Output::store32(v2, v7, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1462));
  v8 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 0xFFFE0000FFFFFFFDLL);
  if (!a1[1473])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1468), 1);
  JSC::FTL::Output::store32(v2, v8, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1468));
  v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 10);
  if (!a1[1479])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1474), 2);
  JSC::FTL::Output::store32(v2, v9, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1474));
  v10 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 10);
  if (!a1[1485])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1480), 3);
  JSC::FTL::Output::store32(v2, v10, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1480));
  v11 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 10);
  if (!a1[1491])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1486), 4);
  JSC::FTL::Output::store32(v2, v11, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1486));
  v12 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 0xFFFE000000000000);
  if (!a1[1497])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1492), 5);
  JSC::FTL::Output::store32(v2, v12, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1492));
  v13 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 2);
  if (!a1[1503])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1498), 6);
  JSC::FTL::Output::store32(v2, v13, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1498));
  v14 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 2);
  if (!a1[1509])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1504), 7);
  JSC::FTL::Output::store32(v2, v14, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1504));
  v15 = JSC::FTL::Output::anchor(v2, v6);
  v17 = v16;
  JSC::FTL::Output::jump(v2, v4, v18, v19, v20, v21, v22, v23);
  a1[3472] = (uint64_t)v3;
  a1[3473] = (uint64_t)v4;
  v30 = (uint64_t *)JSC::DFG::Graph::freezeStrong(*a1, *(_QWORD *)(a1[3528] + 72), v24, v25, v26, v27, v28, v29);
  v36 = JSC::FTL::Output::anchor(v2, v35);
  v38 = v37;
  JSC::FTL::Output::jump(v2, v4, v39, v40, v41, v42, v43, v44);
  a1[3472] = (uint64_t)v4;
  a1[3473] = v5;
  v45 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v2, 2, v15, v17, v36, v38);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSAsyncGenerator,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40336);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x4Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewInternalFieldObjectImpl<JSC::JSArrayIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(uint64_t *a1)
{
  JSC::FTL::Output *v2;
  JSC::B3::BasicBlock *v3;
  JSC::B3::BasicBlock *v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::B3::Value *v40;
  uint64_t v42;

  v2 = (JSC::FTL::Output *)(a1 + 3455);
  v3 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v4 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v2);
  v5 = a1[3473];
  a1[3473] = (uint64_t)v3;
  v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 0xFFFE000000000000);
  if (!a1[1467])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1462), 0);
  JSC::FTL::Output::store32(v2, v7, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1462));
  v8 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 2);
  if (!a1[1473])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1468), 1);
  JSC::FTL::Output::store32(v2, v8, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1468));
  v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 0xFFFE000000000000);
  if (!a1[1479])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1474), 2);
  JSC::FTL::Output::store32(v2, v9, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1474));
  v10 = JSC::FTL::Output::anchor(v2, v6);
  v12 = v11;
  JSC::FTL::Output::jump(v2, v4, v13, v14, v15, v16, v17, v18);
  a1[3472] = (uint64_t)v3;
  a1[3473] = (uint64_t)v4;
  v25 = (uint64_t *)JSC::DFG::Graph::freezeStrong(*a1, *(_QWORD *)(a1[3528] + 72), v19, v20, v21, v22, v23, v24);
  v31 = JSC::FTL::Output::anchor(v2, v30);
  v33 = v32;
  JSC::FTL::Output::jump(v2, v4, v34, v35, v36, v37, v38, v39);
  a1[3472] = (uint64_t)v4;
  a1[3473] = v5;
  v40 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v2, 2, v10, v12, v31, v33);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewInternalFieldObjectImpl<JSC::JSMapIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(uint64_t *a1)
{
  JSC::FTL::Output *v2;
  JSC::B3::BasicBlock *v3;
  JSC::B3::BasicBlock *v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v43;

  v2 = (JSC::FTL::Output *)(a1 + 3455);
  v3 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v4 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v2);
  v5 = a1[3473];
  a1[3473] = (uint64_t)v3;
  v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 0xFFFE000000000000);
  if (!a1[1467])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1462), 0);
  JSC::FTL::Output::store32(v2, v7, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1462));
  v8 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 2);
  if (!a1[1473])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1468), 1);
  JSC::FTL::Output::store32(v2, v8, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1468));
  v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 2);
  if (!a1[1479])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1474), 2);
  JSC::FTL::Output::store32(v2, v9, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1474));
  v10 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 0xFFFE000000000000);
  if (!a1[1485])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1480), 3);
  JSC::FTL::Output::store32(v2, v10, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1480));
  v11 = JSC::FTL::Output::anchor(v2, v6);
  v13 = v12;
  JSC::FTL::Output::jump(v2, v4, v14, v15, v16, v17, v18, v19);
  a1[3472] = (uint64_t)v3;
  a1[3473] = (uint64_t)v4;
  v26 = (uint64_t *)JSC::DFG::Graph::freezeStrong(*a1, *(_QWORD *)(a1[3528] + 72), v20, v21, v22, v23, v24, v25);
  v32 = JSC::FTL::Output::anchor(v2, v31);
  v34 = v33;
  JSC::FTL::Output::jump(v2, v4, v35, v36, v37, v38, v39, v40);
  a1[3472] = (uint64_t)v4;
  a1[3473] = v5;
  v41 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v2, 2, v11, v13, v32, v34);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewInternalFieldObjectImpl<JSC::JSSetIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(uint64_t *a1)
{
  JSC::FTL::Output *v2;
  JSC::B3::BasicBlock *v3;
  JSC::B3::BasicBlock *v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v43;

  v2 = (JSC::FTL::Output *)(a1 + 3455);
  v3 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v4 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v2);
  v5 = a1[3473];
  a1[3473] = (uint64_t)v3;
  v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 0xFFFE000000000000);
  if (!a1[1467])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1462), 0);
  JSC::FTL::Output::store32(v2, v7, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1462));
  v8 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 2);
  if (!a1[1473])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1468), 1);
  JSC::FTL::Output::store32(v2, v8, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1468));
  v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 2);
  if (!a1[1479])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1474), 2);
  JSC::FTL::Output::store32(v2, v9, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1474));
  v10 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 0xFFFE000000000000);
  if (!a1[1485])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1480), 3);
  JSC::FTL::Output::store32(v2, v10, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1480));
  v11 = JSC::FTL::Output::anchor(v2, v6);
  v13 = v12;
  JSC::FTL::Output::jump(v2, v4, v14, v15, v16, v17, v18, v19);
  a1[3472] = (uint64_t)v3;
  a1[3473] = (uint64_t)v4;
  v26 = (uint64_t *)JSC::DFG::Graph::freezeStrong(*a1, *(_QWORD *)(a1[3528] + 72), v20, v21, v22, v23, v24, v25);
  v32 = JSC::FTL::Output::anchor(v2, v31);
  v34 = v33;
  JSC::FTL::Output::jump(v2, v4, v35, v36, v37, v38, v39, v40);
  a1[3472] = (uint64_t)v4;
  a1[3473] = v5;
  v41 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v2, 2, v11, v13, v32, v34);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewInternalFieldObjectImpl<JSC::JSInternalPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(_QWORD *a1)
{
  uint64_t v2;
  JSC::B3::BasicBlock *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::B3::Value *Object;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::B3::Value *v38;
  uint64_t v39;
  JSC::B3::Value *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  JSC::B3::Value *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  JSC::B3::Value *v77;
  uint64_t v78;
  uint64_t v79;
  char **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  double result;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  char v93;
  _QWORD *v94;

  v2 = JSC::B3::Procedure::addBlock((JSC::B3::Procedure *)a1[3470], *((double *)a1 + 3475));
  v3 = (JSC::B3::BasicBlock *)v2;
  v4 = a1[3473];
  if (v4)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore(a1 + 3476, v4, v2);
  }
  else
  {
    v91.n128_u64[0] = v2;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    v5[3] = a1[3477];
    a1[3477] = v5;
    v94 = v5;
    v5[2] = v3;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>(a1 + 3476, (uint64_t *)&v91, (uint64_t *)&v94, v6, v7, v8, v9, v10, (uint64_t)&v92);
    v11 = v94;
    v12 = (_QWORD *)a1[3479];
    *v94 = a1 + 3478;
    v11[1] = v12;
    *v12 = v11;
    a1[3479] = v11;
  }
  v13 = JSC::B3::Procedure::addBlock((JSC::B3::Procedure *)a1[3470], *((double *)a1 + 3475));
  v14 = v13;
  v15 = a1[3473];
  if (v15)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore(a1 + 3476, v15, v13);
  }
  else
  {
    v91.n128_u64[0] = v13;
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    v16[3] = a1[3477];
    a1[3477] = v16;
    v94 = v16;
    v16[2] = v14;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>(a1 + 3476, (uint64_t *)&v91, (uint64_t *)&v94, v17, v18, v19, v20, v21, (uint64_t)&v92);
    v22 = v94;
    v23 = (_QWORD *)a1[3479];
    *v94 = a1 + 3478;
    v22[1] = v23;
    *v23 = v22;
    a1[3479] = v22;
  }
  v24 = a1[3473];
  a1[3473] = v3;
  v25 = *(_QWORD *)(*a1 + 16);
  if (*(_DWORD *)(v25 + 39028) <= 0x1Fu)
    goto LABEL_33;
  v90 = v24;
  v26 = a1[3460];
  v27 = *(_QWORD *)(a1[3528] + 72);
  v28 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v25 + 38968);
  v29 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v27);
  v31 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), 0xFFFE000000000000);
  if (!a1[1467])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1462), 0);
  v32 = a1[1465];
  v33 = (uint64_t)Object;
  if (v32)
  {
    v34 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v32);
    v33 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), Object, v34);
  }
  JSC::FTL::Output::store((uint64_t)(a1 + 3455), v31, (const JSC::FTL::AbstractHeap *)(a1 + 1462), v33);
  v35 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), 10);
  if (!a1[1473])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1468), 1);
  v36 = a1[1471];
  v37 = (uint64_t)Object;
  if (v36)
  {
    v38 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v36);
    v37 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), Object, v38);
  }
  JSC::FTL::Output::store((uint64_t)(a1 + 3455), v35, (const JSC::FTL::AbstractHeap *)(a1 + 1468), v37);
  v39 = a1[3472];
  v40 = (JSC::B3::Value *)a1[3470];
  v41 = a1[3471];
  v42 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v42 + 8) = -1;
  *(_WORD *)(v42 + 12) = 152;
  *(_BYTE *)(v42 + 20) = 1;
  *(_QWORD *)v42 = &unk_1E357EDA0;
  *(_DWORD *)(v42 + 16) = 0;
  *(_QWORD *)(v42 + 40) = 0;
  *(_QWORD *)(v42 + 48) = Object;
  *(_QWORD *)(v42 + 24) = v41;
  *(_QWORD *)(v42 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v40, (JSC::B3::Value *)v42);
  v92 = v42;
  v46 = (char **)(v39 + 8);
  v47 = *(unsigned int *)(v39 + 20);
  if ((_DWORD)v47 == *(_DWORD *)(v39 + 16))
  {
    v87 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v46, v47 + 1, (unint64_t)&v92);
    v47 = *(unsigned int *)(v39 + 20);
    *(_QWORD *)(*(_QWORD *)(v39 + 8) + 8 * v47) = *(_QWORD *)v87;
    v48 = v92;
  }
  else
  {
    *(_QWORD *)&(*v46)[8 * v47] = v42;
    v48 = v42;
  }
  *(_DWORD *)(v39 + 20) = v47 + 1;
  *(_QWORD *)(v48 + 32) = v39;
  v49 = a1[3472];
  v50 = a1[3470];
  v51 = a1[3471];
  v92 = v14;
  v93 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v49, v50, 154, v51, &v92, v43, v44, v45);
  a1[3472] = v3;
  a1[3473] = v14;
  v58 = *(_QWORD *)JSC::DFG::Graph::freezeStrong(*a1, *(_QWORD *)(a1[3528] + 72), v52, v53, v54, v55, v56, v57);
  if ((v58 & 0xFFFE000000000002) != 0)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x197DBDEE8);
  }
  v91.n128_u64[0] = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v58);
  v64 = a1[3472];
  v65 = (JSC::B3::Value *)a1[3470];
  v66 = a1[3471];
  v67 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v67 + 8) = -1;
  *(_WORD *)(v67 + 12) = 152;
  *(_DWORD *)(v67 + 16) = 0;
  *(_BYTE *)(v67 + 20) = 1;
  *(_QWORD *)v67 = &unk_1E357EDA0;
  *(_QWORD *)(v67 + 40) = 0;
  *(_QWORD *)(v67 + 48) = v63;
  *(_QWORD *)(v67 + 24) = v66;
  *(_QWORD *)(v67 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v65, (JSC::B3::Value *)v67);
  v92 = v67;
  v71 = (char **)(v64 + 8);
  v72 = *(unsigned int *)(v64 + 20);
  if ((_DWORD)v72 == *(_DWORD *)(v64 + 16))
  {
    v88 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v71, v72 + 1, (unint64_t)&v92);
    v72 = *(unsigned int *)(v64 + 20);
    *(_QWORD *)(*(_QWORD *)(v64 + 8) + 8 * v72) = *(_QWORD *)v88;
    v73 = v92;
  }
  else
  {
    *(_QWORD *)&(*v71)[8 * v72] = v67;
    v73 = v67;
  }
  *(_DWORD *)(v64 + 20) = v72 + 1;
  *(_QWORD *)(v73 + 32) = v64;
  v74 = a1[3472];
  v75 = a1[3470];
  v76 = a1[3471];
  v92 = v14;
  v93 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v74, v75, 154, v76, &v92, v68, v69, v70);
  a1[3472] = v14;
  a1[3473] = v90;
  v77 = (JSC::B3::Value *)a1[3470];
  v78 = a1[3471];
  v79 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v79 = off_1E357F5F0;
  *(_DWORD *)(v79 + 8) = -1;
  *(_WORD *)(v79 + 12) = 153;
  *(_DWORD *)(v79 + 16) = 2;
  *(_BYTE *)(v79 + 20) = 0;
  *(_QWORD *)(v79 + 24) = v78;
  *(_QWORD *)(v79 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v77, (JSC::B3::Value *)v79);
  v92 = v79;
  v80 = (char **)(v14 + 8);
  v81 = *(unsigned int *)(v14 + 20);
  if ((_DWORD)v81 == *(_DWORD *)(v14 + 16))
  {
    v89 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v80, v81 + 1, (unint64_t)&v92);
    v81 = *(unsigned int *)(v14 + 20);
    *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v81) = *(_QWORD *)v89;
    v82 = v92;
  }
  else
  {
    *(_QWORD *)&(*v80)[8 * v81] = v79;
    v82 = v79;
  }
  *(_DWORD *)(v14 + 20) = v81 + 1;
  *(_QWORD *)(v82 + 32) = v14;
  if ((*(_WORD *)(v42 + 12) & 0xFFF) == 0x98)
    v83 = v42;
  else
    v83 = 0;
  *(_QWORD *)(v83 + 40) = v79;
  if ((*(_WORD *)(v67 + 12) & 0xFFF) == 0x98)
    v84 = v67;
  else
    v84 = 0;
  *(_QWORD *)(v84 + 40) = v79;
  v94 = (_QWORD *)a1[3528];
  v85 = a1[3521];
  v91.n128_u64[0] = v79;
  v91.n128_u64[1] = v85;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v92, a1 + 3492, (uint64_t *)&v94, &v91).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewInternalFieldObjectImpl<JSC::JSPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(uint64_t *a1)
{
  JSC::FTL::Output *v2;
  JSC::B3::BasicBlock *v3;
  JSC::B3::BasicBlock *v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  uint64_t v41;

  v2 = (JSC::FTL::Output *)(a1 + 3455);
  v3 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v4 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v2);
  v5 = a1[3473];
  a1[3473] = (uint64_t)v3;
  v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 0xFFFE000000000000);
  if (!a1[1467])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1462), 0);
  JSC::FTL::Output::store32(v2, v7, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1462));
  v8 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 10);
  if (!a1[1473])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(a1 + 1453), (JSC::FTL::AbstractHeap *)(a1 + 1468), 1);
  JSC::FTL::Output::store32(v2, v8, v6, (const JSC::FTL::AbstractHeap *)(a1 + 1468));
  v9 = JSC::FTL::Output::anchor(v2, v6);
  v11 = v10;
  JSC::FTL::Output::jump(v2, v4, v12, v13, v14, v15, v16, v17);
  a1[3472] = (uint64_t)v3;
  a1[3473] = (uint64_t)v4;
  v24 = (uint64_t *)JSC::DFG::Graph::freezeStrong(*a1, *(_QWORD *)(a1[3528] + 72), v18, v19, v20, v21, v22, v23);
  v30 = JSC::FTL::Output::anchor(v2, v29);
  v32 = v31;
  JSC::FTL::Output::jump(v2, v4, v33, v34, v35, v36, v37, v38);
  a1[3472] = (uint64_t)v4;
  a1[3473] = v5;
  v39 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v2, 2, v9, v11, v30, v32);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSArrayIterator,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40328);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x27u)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSMapIterator,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40656);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSSetIterator,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40736);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSPromise,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v4;
  JSC::FTL::Output *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (*(_DWORD *)(v4 + 39028) <= 0x1Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = (JSC::FTL::Output *)(a1 + 27640);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v4 + 38968);
    v11 = JSC::FTL::Output::constInt64(v9, a2);
  }
  return result;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::B3::Value *,JSC::B3::Value *>(_QWORD *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  WTF *v14;
  WTF *v16;
  int v17;
  uint64_t v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v18[0] = a3;
  v18[1] = a4;
  WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v16, v18, 2uLL);
  v14 = v16;
  if (v16)
  {
    v16 = 0;
    v17 = 0;
    WTF::fastFree((unint64_t)v14, v6, v7, v8, v9, v10, v11, v12);
  }
  return v13;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::StringObject,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v4;
  JSC::FTL::Output *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (*(_DWORD *)(v4 + 39820) <= 0x17u)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = (JSC::FTL::Output *)(a1 + 27640);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v4 + 39760);
    v11 = JSC::FTL::Output::constInt64(v9, a2);
  }
  return result;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  JSC::CodeOrigin::CodeOrigin(&v40, (const JSC::CodeOrigin *)(a1 + 3524));
  v11 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v12 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a3;
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      v35 = (unint64_t)v15;
      LOBYTE(v36) = 3;
      JSC::B3::StackmapValue::append(v11, v15, (unint64_t)&v35 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  *((_QWORD *)v11 + 8) |= 0x30000uLL;
  *((_QWORD *)v11 + 10) |= 0x30000uLL;
  v16 = a1[1];
  v35 = *a2;
  v17 = v39;
  if (v39)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = v39;
  }
  else
  {
    v19 = 0;
  }
  v36 = v17;
  v37 = v16;
  JSC::CodeOrigin::CodeOrigin(&v38, (const JSC::CodeOrigin *)&v40);
  if (v19)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v19, v27, v28, v29, v30, v31, v32, v33);
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  return v11;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576C58;
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  v2 = *(unsigned int **)(a2 + 16);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v5;
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v7 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      result = v12;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v4 = v6 | v9;
  }
  *(_QWORD *)(result + 48) = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56[5];
  unsigned int *v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  unint64_t v62;
  uint64_t v63;

  v62 = 0;
  v63 = 0;
  v6 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a3 + 8);
    v8 = 16 * v6;
    do
    {
      *(_QWORD *)&v53 = JSC::FTL::Location::forValueRep(v7);
      *((_QWORD *)&v53 + 1) = v9;
      v10 = HIDWORD(v63);
      if (HIDWORD(v63) == (_DWORD)v63)
      {
        WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::Location>((uint64_t)&v62, (unint64_t)&v53);
      }
      else
      {
        *(_OWORD *)(v62 + 16 * HIDWORD(v63)) = v53;
        HIDWORD(v63) = v10 + 1;
      }
      v7 += 16;
      v8 -= 16;
    }
    while (v8);
    v11 = v62;
    v12 = HIDWORD(v63);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  JSC::MacroAssemblerARM64::patchableJump(a2, v13, v14, v15, v16, v17, v18, v19, (uint64_t)&v59);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a2, v20, v21, v22, v23, v24, v25, v26, &v58);
  v27 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v29 = v28;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v57);
  LODWORD(v53) = v59;
  *(_QWORD *)((char *)&v53 + 4) = v60;
  v54 = *(_QWORD *)(a1 + 24);
  v55 = v58;
  JSC::CodeOrigin::CodeOrigin(v56, (const JSC::CodeOrigin *)(a1 + 32));
  v30 = v57;
  if (v57)
  {
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v56[1] = (uint64_t)v30;
  v56[2] = v27;
  v56[3] = v29;
  v32 = (uint64_t)v61;
  if (v61)
  {
    v33 = v61 + 2;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  v56[4] = v32;
  if (v57)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v57, v42, v43, v44, v45, v46, v47, v48);
  v49 = v61;
  v61 = 0;
  if (v49)
  {
    v50 = v49 + 2;
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v49 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
    }
  }
  if (v62)
    WTF::fastFree(v62, v42, v43, v44, v45, v46, v47, v48);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  if (!a4)
  {
    __break(0xC471u);
    JUMPOUT(0x197DBEBFCLL);
  }
  if (*(_DWORD *)(a3 + 12))
    goto LABEL_13;
  if (a4 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DBEC04);
  }
  if (*(_DWORD *)(a3 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x197DBEBD4);
  }
  if (a4 <= 2)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x197DBEBB4);
  }
  if (*(_DWORD *)(a3 + 44))
  {
    __break(0xC471u);
    JUMPOUT(0x197DBEBF4);
  }
  v5 = *(_DWORD *)(a3 + 24) & 0x7F;
  v6 = *(_DWORD *)(a3 + 8) & 0x7F;
  v7 = *(_BYTE *)(a3 + 40) & 0x7F;
  v8 = *a2;
  v9 = a2[1];
  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E35768E8;
  *(_QWORD *)(result + 16) = v8;
  *(_QWORD *)(result + 24) = operationNewStringObject;
  *(_BYTE *)(result + 32) = v6;
  *(_BYTE *)(result + 33) = v5;
  *(_BYTE *)(result + 34) = v7;
  *(_QWORD *)(result + 40) = v9;
  *a1 = result;
  return result;
}

_QWORD *JSC::B3::StackmapGenerationParams::addLatePath<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[9];
  unsigned int *v19;

  v3 = WTF::fastMalloc((WTF *)0x58);
  v4 = _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_22compileNewStringObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(v3, (uint64_t)v18);
  v19 = (unsigned int *)v4;
  v12 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v19);
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v4;
    *(_DWORD *)(a1 + 12) = v12 + 1;
  }
}

uint64_t _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_22compileNewStringObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576C80;
  *(_DWORD *)(result + 16) = *(_DWORD *)a2;
  *(_QWORD *)(result + 20) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = result;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      result = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)(result + 48) = v2;
  v3 = *(unsigned int **)(a2 + 40);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 56) = v3;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 80) = v5;
  return result;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_22compileNewStringObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_22compileNewStringObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_22compileNewStringObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

_QWORD *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *result;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[12];
  int v59;
  unsigned int *v60;
  uint64_t v61[2];
  __int128 v62;
  uint64_t v63;
  int v64;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v18 = *(unsigned int *)(v17 + 308);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v17 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v17 + 296) + 8 * v18) = 0;
    *(_DWORD *)(v17 + 308) = v18 + 1;
  }
  JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters((unsigned int *)a2, v18, v11, v12, v13, v14, v15, v16);
  v19 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v19 + 90440), v19, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v20, v21, v22, v23, v24, v58);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, *(uint64_t *)v58, v25, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v58, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 24);
  if (v38)
  {
    v39 = v38 + 2;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
  }
  else
  {
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
  }
  v60 = v38;
  JSC::CodeOrigin::CodeOrigin(v61, (const JSC::CodeOrigin *)(a1 + 32));
  v42 = *(unsigned int **)(a1 + 40);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v61[1] = (uint64_t)v42;
  v62 = *(_OWORD *)(a1 + 48);
  v44 = *(_QWORD *)(a1 + 64);
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v63 = v44;
  v64 = v18;
  _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_22compileNewStringObjectEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(a2, (uint64_t)v58);
  if (v38)
  {
    v55 = v38 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v38 + 2);
      result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v38 + 32))(v38);
    }
  }
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_22compileNewStringObjectEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3576CA8;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)a2;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v4 + 32) = v6;
  v9 = *(_QWORD *)(a2 + 24);
  if ((v9 & 1) != 0)
  {
    v29 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v30 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v33 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = v33;
      *(_DWORD *)(v29 + 8) = v30;
      v32 = 1;
    }
    else
    {
      v32 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = v30 << 36;
    }
    v9 = v29 | v32;
  }
  *(_QWORD *)(v5 + 40) = v9;
  v10 = *(unsigned int **)(a2 + 32);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v5 + 72) = v12;
  *(_DWORD *)(v5 + 80) = *(_DWORD *)(a2 + 64);
  v15 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 240))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
LABEL_21:
    *v16 = v5;
    *(_DWORD *)(a1 + 244) = v15 + 1;
    return;
  }
  v17 = v15 + (v15 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15 + 1)
    v19 = v15 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = *(const void **)(a1 + 232);
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(a1 + 240) = v19;
    *(_QWORD *)(a1 + 232) = v21;
    memcpy(v21, v20, 8 * v15);
    if (v20)
    {
      if (*(const void **)(a1 + 232) == v20)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
    }
    v15 = *(unsigned int *)(a1 + 244);
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
    goto LABEL_21;
  }
  __break(0xC471u);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_22compileNewStringObjectEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_22compileNewStringObjectEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_22compileNewStringObjectEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, JSC::LinkBuffer *a2)
{
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheckAndExtractResultIfNeeded<JSC::ExceptionOperationResult<JSC::Symbol *>>(uint64_t a1, JSC::B3::Value *a2, JSC::DFG::Node *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::DFG *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char v17;
  _QWORD *v18;
  unint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  JSC::DFG *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int8x8_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  JSC::DFG *v91;
  unint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  int64x2_t v95;
  _QWORD *v96;
  uint64_t v97;

  if (!JSC::DFG::mayExit(*(JSC::DFG **)a1, *(JSC::DFG::Graph **)(a1 + 28224), a3))
    goto LABEL_29;
  v12 = *(JSC::DFG **)a1;
  v13 = *(_QWORD *)(a1 + 28192);
  if ((v13 & 1) == 0)
  {
    v14 = *((_QWORD *)v12 + 4);
LABEL_4:
    v15 = (_QWORD *)(v13 & 0xFFFFFFFF8);
    v16 = 1;
    v17 = 1;
    goto LABEL_5;
  }
  v72 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v73 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v73 != 0x3FFFFFFF) ? (v74 = v73 == -1) : (v74 = 1), v74))
  {
    v75 = 2;
  }
  else if (v73 >> 28)
  {
    v87 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v87 = v72;
    *(_DWORD *)(v87 + 8) = v73;
    v75 = 1;
    v72 = v87;
  }
  else
  {
    v75 = v72;
    v72 = 0;
  }
  v13 = v72 | v75;
  v14 = *((_QWORD *)v12 + 4);
  if (((v72 | v75) & 1) == 0)
    goto LABEL_4;
  v82 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v83 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v83 != 0x3FFFFFFF) ? (v84 = v83 == -1) : (v84 = 1), v84))
  {
    v85 = 2;
  }
  else if (v83 >> 28)
  {
    v89 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v89 = v82;
    *(_DWORD *)(v89 + 8) = v83;
    v85 = 1;
    v82 = v89;
  }
  else
  {
    v85 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v82 = 0;
  }
  v86 = v82 | v85;
  v15 = (_QWORD *)(v86 & 0xFFFFFFFF8);
  if ((v86 & 1) == 0)
  {
    v17 = 0;
    v16 = 1;
LABEL_5:
    v18 = v15;
    if (!v15)
      goto LABEL_7;
    goto LABEL_6;
  }
  v16 = 0;
  v17 = 0;
  v18 = (_QWORD *)*v15;
  if (*v15)
LABEL_6:
    v14 = v18[1];
LABEL_7:
  v19 = *(_QWORD *)(v14 + 8);
  if ((v16 & 1) == 0 && v15)
    WTF::fastFree((unint64_t)v15, v5, v6, v7, v8, v9, v10, v11);
  if ((v17 & 1) == 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
  v20 = a2;
  if ((*((_DWORD *)a2 + 4) & 0x80000000) != 0)
    v20 = (JSC::B3::Value *)JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 27640), a2, 1u);
  if (HIBYTE(word_1ECF4C620))
  {
    v21 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationExceptionFuzz);
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 280), v19, v22, v23, v24, v25, v26, v27);
    v28 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v19);
    JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 0, *(_QWORD *)(a1 + 27768), v21, v28);
    v29 = *(JSC::B3::Value **)(a1 + 27880);
    v30 = *(_QWORD *)(a1 + 6328);
    if (v30)
    {
      v31 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v30);
      v29 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v29, v31);
    }
    v20 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 6304), (uint64_t)v29, 2);
  }
  v36 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v20);
  v93 = 0;
  v94 = 2;
  v37 = *(JSC::DFG **)a1;
  v38 = *(_QWORD *)(a1 + 28200);
  if ((v38 & 1) != 0)
  {
    v76 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
    if ((v38 & 2) != 0
      || (v77 = *(unsigned int *)((v38 & 0xFFFFFFFF8) + 8), (_DWORD)v77 == 0x3FFFFFFF)
      || (_DWORD)v77 == -1)
    {
      v78 = 2;
    }
    else if (v77 >> 28)
    {
      v91 = *(JSC::DFG **)a1;
      v88 = WTF::fastMalloc((WTF *)0x10);
      v37 = v91;
      *(_QWORD *)v88 = v76;
      *(_DWORD *)(v88 + 8) = v77;
      v78 = 1;
      v76 = v88;
    }
    else
    {
      v78 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
      v76 = v77 << 36;
    }
    v38 = v76 | v78;
  }
  v92 = v38;
  v46 = JSC::DFG::Graph::willCatchExceptionInMachineFrame((uint64_t)v37, &v92, &v94, &v93, v32, v33, v34, v35);
  if ((v92 & 1) != 0 && (v92 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v92 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  if (v46)
  {
    v47 = v94;
    if ((v94 & 1) != 0)
    {
      v79 = *(_QWORD *)(v94 & 0xFFFFFFFF8);
      if ((v94 & 2) != 0
        || (v80 = *(unsigned int *)((v94 & 0xFFFFFFFF8) + 8), (_DWORD)v80 == 0x3FFFFFFF)
        || (_DWORD)v80 == -1)
      {
        v81 = 2;
      }
      else if (v80 >> 28)
      {
        v90 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v90 = v79;
        *(_DWORD *)(v90 + 8) = v80;
        v81 = 1;
        v79 = v90;
      }
      else
      {
        v81 = *(_QWORD *)(v94 & 0xFFFFFFFF8);
        v79 = v80 << 36;
      }
      v47 = v79 | v81;
    }
    v97 = v47;
    v48 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v95, (uint64_t *)(a1 + 28192), (unint64_t *)&v97, v41, v42, v43, v44, v45).u64[0];
    if ((v95.i8[8] & 1) != 0 && (v95.i64[1] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v95.i64[1] & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
    if ((v95.i8[0] & 1) != 0 && (v95.i64[0] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v95.i64[0] & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
    if ((v97 & 1) != 0 && (v97 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v97 & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
  }
  else
  {
    v56 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v57 = v56;
    v58 = *(_QWORD *)(a1 + 27784);
    if (v58)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v58, v56);
    }
    else
    {
      v97 = v56;
      v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v63 = 0u;
      *((_OWORD *)v63 + 1) = 0u;
      v63[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v63;
      v96 = v63;
      v63[2] = v57;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v97, (uint64_t *)&v96, v64, v65, v66, v67, v68, (uint64_t)&v95);
      v69 = v96;
      v70 = *(_QWORD **)(a1 + 27832);
      *v96 = a1 + 27824;
      v69[1] = v70;
      *v70 = v69;
      *(_QWORD *)(a1 + 27832) = v69;
    }
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v36, *(_QWORD *)(a1 + 27856), v57, 0.0, 1.0, v59, v60, v61, v62);
    *(_QWORD *)(a1 + 27776) = v57;
  }
  if ((v94 & 1) != 0 && (v94 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v94 & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
LABEL_29:
  if ((*((_DWORD *)a2 + 4) & 0x80000000) != 0)
    return JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 27640), a2, 0);
  return (uint64_t)a2;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<char *> (*)(JSC::VM *,JSC::Structure *),JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  JSC::DFG::Node *v35;
  char **v36;
  uint64_t v37;
  WTF *v38;
  uint64_t result;
  char *v40;
  WTF *v41;
  uint64_t v42;

  v11 = (int *)(a1 + 28264);
  v12 = *(_DWORD *)(a1 + 28264);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = *(_QWORD *)(a1 + 27848);
    v41 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v41 = 0x200000002;
    v42 = 0x200000002;
    v21 = (_QWORD *)(v13 + 32);
    v22 = *(unsigned int *)(v13 + 44);
    if ((_DWORD)v22 == *(_DWORD *)(v13 + 40))
    {
      v23 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v41);
      v24 = *(_QWORD *)(v13 + 32) + 16 * *(unsigned int *)(v13 + 44);
    }
    else
    {
      v24 = *v21 + 16 * v22;
      v23 = (unint64_t)&v41;
    }
    *(_QWORD *)v24 = 0;
    *(_QWORD *)(v24 + 8) = 0;
    v25 = *(_QWORD *)v23;
    *(_QWORD *)v23 = 0;
    *(_QWORD *)v24 = v25;
    LODWORD(v25) = *(_DWORD *)(v23 + 8);
    *(_DWORD *)(v23 + 8) = 0;
    *(_DWORD *)(v24 + 8) = v25;
    LODWORD(v25) = *(_DWORD *)(v23 + 12);
    *(_DWORD *)(v23 + 12) = 0;
    *(_DWORD *)(v24 + 12) = v25;
    ++*(_DWORD *)(v13 + 44);
    v12 = v22 | 0x80000000;
    *v11 = v22 | 0x80000000;
    v26 = v41;
    if (v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v26, v14, v15, v16, v17, v18, v19, v20);
      v12 = *v11;
    }
  }
  v27 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationNewEmptyArray);
  v28 = *a2;
  v29 = *a3;
  v30 = *(_QWORD *)(a1 + 27776);
  v31 = *(JSC::B3::Value **)(a1 + 27760);
  v32 = *(_QWORD *)(a1 + 27768);
  v33 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v33 = off_1E357F5F0;
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 82;
  *(_DWORD *)(v33 + 16) = v12;
  *(_BYTE *)(v33 + 20) = 4;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  v34 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v33);
  v34[2] = v27;
  *v34 = v34 + 2;
  v34[3] = v28;
  v34[4] = v29;
  v34[1] = 0x300000003;
  *(_QWORD *)v33 = &unk_1E357CF78;
  *(_OWORD *)(v33 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v33 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v33 + 76))
  {
    JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
    v41 = (WTF *)v33;
    v36 = (char **)(v30 + 8);
    v37 = *(unsigned int *)(v30 + 20);
    if ((_DWORD)v37 == *(_DWORD *)(v30 + 16))
    {
      v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v41);
      v37 = *(unsigned int *)(v30 + 20);
      *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v37) = *(_QWORD *)v40;
      v38 = v41;
    }
    else
    {
      *(_QWORD *)&(*v36)[8 * v37] = v33;
      v38 = (WTF *)v33;
    }
    *(_DWORD *)(v30 + 20) = v37 + 1;
    *((_QWORD *)v38 + 4) = v30;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,JSC::Structure *,void *,unsigned long),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  JSC::B3::Value *v34;
  JSC::DFG::Node *v35;
  char **v36;
  uint64_t v37;
  WTF *v38;
  char *v40;
  WTF *v41;
  uint64_t v42;

  v13 = (int *)(a1 + 28264);
  v14 = *(_DWORD *)(a1 + 28264);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 27848);
    v41 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v41 = 0x200000002;
    v42 = 0x200000002;
    v23 = (_QWORD *)(v15 + 32);
    v24 = *(unsigned int *)(v15 + 44);
    if ((_DWORD)v24 == *(_DWORD *)(v15 + 40))
    {
      v25 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v41);
      v26 = *(_QWORD *)(v15 + 32) + 16 * *(unsigned int *)(v15 + 44);
    }
    else
    {
      v26 = *v23 + 16 * v24;
      v25 = (unint64_t)&v41;
    }
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v27 = *(_QWORD *)v25;
    *(_QWORD *)v25 = 0;
    *(_QWORD *)v26 = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 8);
    *(_DWORD *)(v25 + 8) = 0;
    *(_DWORD *)(v26 + 8) = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 12);
    *(_DWORD *)(v25 + 12) = 0;
    *(_DWORD *)(v26 + 12) = v27;
    ++*(_DWORD *)(v15 + 44);
    v14 = v24 | 0x80000000;
    *v13 = v24 | 0x80000000;
    v28 = v41;
    if (v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v28, v16, v17, v18, v19, v20, v21, v22);
      v14 = *v13;
    }
  }
  v29 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationNewArray);
  v30 = *a3;
  v31 = *a4;
  v32 = *(_QWORD *)(a1 + 27776);
  v33 = *(JSC::B3::Value **)(a1 + 27760);
  v34 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v14, *(_QWORD *)(a1 + 27768), v29, *a2, v30, v31, *a5);
  JSC::B3::Procedure::addValueImpl(v33, v34);
  v41 = v34;
  v36 = (char **)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v41);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)v40;
    v38 = v41;
  }
  else
  {
    *(_QWORD *)&(*v36)[8 * v37] = v34;
    v38 = v34;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *((_QWORD *)v38 + 4) = v32;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateUninitializedContiguousJSArrayInternal(uint64_t a1, JSC::B3::Value *a2, JSC::B3::Value *a3, uint64_t a4)
{
  JSC::FTL::Output *v8;
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;
  uint64_t v11;

  v8 = (JSC::FTL::Output *)(a1 + 27640);
  v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a4);
  v10 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v8, *(_BYTE *)(a4 + 8) & 0xF);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheckAndExtractResultIfNeeded<JSC::ExceptionOperationResult<char *>>(uint64_t a1, JSC::B3::Value *a2, JSC::DFG::Node *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::DFG *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char v17;
  _QWORD *v18;
  JSC::JSCell *v19;
  JSC::B3::Value *Ptr;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::B3::Value *v25;
  JSC::DFG *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int8x8_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  JSC::DFG *v95;
  unint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  int64x2_t v99;
  _QWORD *v100;
  uint64_t v101;

  if (!JSC::DFG::mayExit(*(JSC::DFG **)a1, *(JSC::DFG::Graph **)(a1 + 28224), a3))
    goto LABEL_21;
  v12 = *(JSC::DFG **)a1;
  v13 = *(_QWORD *)(a1 + 28192);
  if ((v13 & 1) == 0)
  {
    v14 = *((_QWORD *)v12 + 4);
LABEL_4:
    v15 = (_QWORD *)(v13 & 0xFFFFFFFF8);
    v16 = 1;
    v17 = 1;
    goto LABEL_5;
  }
  v80 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v81 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v81 != 0x3FFFFFFF) ? (v82 = v81 == -1) : (v82 = 1), v82))
  {
    v83 = 2;
  }
  else if (v81 >> 28)
  {
    v92 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v92 = v80;
    *(_DWORD *)(v92 + 8) = v81;
    v83 = 1;
    v80 = v92;
  }
  else
  {
    v83 = v80;
    v80 = 0;
  }
  v13 = v80 | v83;
  v14 = *((_QWORD *)v12 + 4);
  if (((v80 | v83) & 1) == 0)
    goto LABEL_4;
  v84 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v85 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v85 != 0x3FFFFFFF) ? (v86 = v85 == -1) : (v86 = 1), v86))
  {
    v87 = 2;
  }
  else if (v85 >> 28)
  {
    v94 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v94 = v84;
    *(_DWORD *)(v94 + 8) = v85;
    v87 = 1;
    v84 = v94;
  }
  else
  {
    v87 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v84 = 0;
  }
  v88 = v84 | v87;
  v15 = (_QWORD *)(v88 & 0xFFFFFFFF8);
  if ((v88 & 1) != 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = (_QWORD *)*v15;
    goto LABEL_6;
  }
  v17 = 0;
  v16 = 1;
LABEL_5:
  v18 = v15;
LABEL_6:
  if (v18)
    v14 = v18[1];
  v19 = *(JSC::JSCell **)(v14 + 8);
  if ((v16 & 1) == 0 && v15)
    WTF::fastFree((unint64_t)v15, v5, v6, v7, v8, v9, v10, v11);
  if ((v17 & 1) == 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
  Ptr = a2;
  if ((*((_DWORD *)a2 + 4) & 0x80000000) != 0)
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 27640), a2, 1u);
  if (HIBYTE(word_1ECF4C620))
  {
    v59 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationExceptionFuzz);
    JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 0, *(_QWORD *)(a1 + 27768), v59, v66);
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27880), (const JSC::FTL::AbstractHeap *)(a1 + 6304));
  }
  v25 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), Ptr);
  v97 = 0;
  v98 = 2;
  v26 = *(JSC::DFG **)a1;
  v27 = *(_QWORD *)(a1 + 28200);
  if ((v27 & 1) != 0)
  {
    v89 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
    if ((v27 & 2) != 0
      || (v90 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v90 == 0x3FFFFFFF)
      || (_DWORD)v90 == -1)
    {
      v91 = 2;
    }
    else if (v90 >> 28)
    {
      v95 = *(JSC::DFG **)a1;
      v93 = WTF::fastMalloc((WTF *)0x10);
      v26 = v95;
      *(_QWORD *)v93 = v89;
      *(_DWORD *)(v93 + 8) = v90;
      v91 = 1;
      v89 = v93;
    }
    else
    {
      v91 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
      v89 = v90 << 36;
    }
    v27 = v89 | v91;
  }
  v96 = v27;
  v35 = JSC::DFG::Graph::willCatchExceptionInMachineFrame((uint64_t)v26, &v96, &v98, &v97, v21, v22, v23, v24);
  if ((v96 & 1) != 0 && (v96 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v96 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  if (v35)
  {
    JSC::CodeOrigin::CodeOrigin(&v101, (const JSC::CodeOrigin *)&v98);
    v72 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v99, (uint64_t *)(a1 + 28192), (unint64_t *)&v101, v67, v68, v69, v70, v71).u64[0];
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v99, v73, v74, v75, v76, v77, v78, v79);
    if ((v101 & 1) != 0 && (v101 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v101 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  }
  else
  {
    v36 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v37 = v36;
    v38 = *(_QWORD *)(a1 + 27784);
    if (v38)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v38, v36);
    }
    else
    {
      v101 = v36;
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v51 = 0u;
      *((_OWORD *)v51 + 1) = 0u;
      v51[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v51;
      v100 = v51;
      v51[2] = v37;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v101, (uint64_t *)&v100, v52, v53, v54, v55, v56, (uint64_t)&v99);
      v57 = v100;
      v58 = *(_QWORD **)(a1 + 27832);
      *v100 = a1 + 27824;
      v57[1] = v58;
      *v58 = v57;
      *(_QWORD *)(a1 + 27832) = v57;
    }
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v25, *(_QWORD *)(a1 + 27856), v37, 0.0, 1.0, v39, v40, v41, v42);
    *(_QWORD *)(a1 + 27776) = v37;
  }
  if ((v98 & 1) != 0 && (v98 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v98 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
LABEL_21:
  if ((*((_DWORD *)a2 + 4) & 0x80000000) != 0)
    return JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 27640), a2, 0);
  return (uint64_t)a2;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::toButterfly(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;

  v3 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v4 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 16);
  return JSC::FTL::Output::add(v3, a2, v4);
}

uint64_t WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,JSC::B3::Value *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::expand(uint64_t *a1, __n128 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,JSC::B3::Value *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,JSC::B3::Value *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::rehash(uint64_t *a1, unsigned int a2, __n128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Table;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  __n128 *v19;
  uint64_t v21;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,JSC::B3::Value *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v17 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v19 = (__n128 *)v6;
    do
    {
      if (v19->n128_u64[0] != -1 && v19->n128_u64[0] != 1)
      {
        WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,JSC::B3::Value *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::reinsert(*a1, v19);
        if (v19 == a3)
          v17 = v21;
      }
      ++v19;
      --v7;
    }
    while (v7);
    goto LABEL_18;
  }
  result = 0;
  if (v6)
  {
LABEL_18:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v17;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,JSC::B3::Value *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_QWORD *)(v2 + 24);
    do
    {
      *(v5 - 1) = 1;
      *v5 = 0;
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

__n128 WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,JSC::B3::Value *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::reinsert(uint64_t a1, __n128 *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  __n128 result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = ~(a2->n128_u64[0] << 32) + a2->n128_u64[0];
  v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
  v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
  v6 = v2 & (((v5 + ~(v5 << 27)) >> 31) ^ (v5 + ~((_DWORD)v5 << 27)));
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 16 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9 != 1);
  result = *a2;
  *(__n128 *)(a1 + 16 * v8) = *a2;
  return result;
}

uint64_t WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v2 = 9 * ((v1 + ~(v1 << 13)) ^ ((v1 + ~(v1 << 13)) >> 8));
  v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return (v3 >> 31) ^ v3;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::getSpreadLengthFromInlineCallFrame(JSC::B3::Value **this, JSC::InlineCallFrame *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t ArgumentsLength;
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  uint64_t result;
  JSC::B3::Value *v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v16;
  int v17;

  v8 = a3;
  if ((ArgumentsLength & 1) != 0)
  {
    if (HIDWORD(ArgumentsLength) >= v8)
      v17 = HIDWORD(ArgumentsLength) - v8;
    else
      v17 = 0;
    return JSC::FTL::Output::constInt32((JSC::FTL::Output *)(this + 3455), v17);
  }
  else
  {
    v12 = v11;
    if (v8)
    {
      if ((v8 & 0x80000000) != 0)
      {
        result = 12864;
        __break(0xC471u);
      }
      else
      {
        v14 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(this + 3455), v8);
        v15 = JSC::FTL::Output::sub((JSC::FTL::Output *)(this + 3455), v12, v14);
        v16 = JSC::FTL::Output::greaterThanOrEqual((JSC::FTL::Output *)(this + 3455), v15, this[3457]);
        return JSC::FTL::Output::select((JSC::FTL::Output *)(this + 3455), (uint64_t)v16, (uint64_t)v15, (uint64_t)this[3457], 1);
      }
    }
    else
    {
      return (uint64_t)v11;
    }
  }
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isFunction(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::FTL::Output *v4;
  char *v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  uint64_t v11;
  uint64_t v12;

  if ((a3 & 0x2800FFFFFFF3) != 0)
  {
    if ((a3 & 4) != 0)
      goto LABEL_3;
    v11 = 27648;
  }
  else
  {
    v11 = 27640;
  }
  v12 = *(_QWORD *)((char *)this + v11);
  if (v12)
    return (JSC::B3::Value *)v12;
LABEL_3:
  v4 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v5 = (char *)this + 3136;
  v6 = *((_QWORD *)this + 395);
  if (v6)
  {
    v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v6);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v4, a2, v7);
  }
  v8 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v4, (uint64_t)v5, (uint64_t)a2);
  v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v4, 26);
  return JSC::FTL::Output::equal(v4, v8, v9);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *,unsigned int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationCreateThis);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  JSC::DFG::Node *v36;
  char **v37;
  uint64_t v38;
  WTF *v39;
  uint64_t result;
  char *v41;
  WTF *v42;
  uint64_t v43;

  v12 = (int *)(a1 + 28264);
  v13 = *(_DWORD *)(a1 + 28264);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = *(_QWORD *)(a1 + 27848);
    v42 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v42 = 0x200000002;
    v43 = 0x200000002;
    v22 = (_QWORD *)(v14 + 32);
    v23 = *(unsigned int *)(v14 + 44);
    if ((_DWORD)v23 == *(_DWORD *)(v14 + 40))
    {
      v24 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v42);
      v25 = *(_QWORD *)(v14 + 32) + 16 * *(unsigned int *)(v14 + 44);
    }
    else
    {
      v25 = *v22 + 16 * v23;
      v24 = (unint64_t)&v42;
    }
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    v26 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    *(_QWORD *)v25 = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 8);
    *(_DWORD *)(v24 + 8) = 0;
    *(_DWORD *)(v25 + 8) = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 12);
    *(_DWORD *)(v24 + 12) = 0;
    *(_DWORD *)(v25 + 12) = v26;
    ++*(_DWORD *)(v14 + 44);
    v13 = v23 | 0x80000000;
    *v12 = v23 | 0x80000000;
    v27 = v42;
    if (v42)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree((unint64_t)v27, v15, v16, v17, v18, v19, v20, v21);
      v13 = *v12;
    }
  }
  v28 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v29 = *a3;
  v30 = *a4;
  v31 = *(_QWORD *)(a1 + 27776);
  v32 = *(JSC::B3::Value **)(a1 + 27760);
  v33 = *(_QWORD *)(a1 + 27768);
  v34 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v34 = off_1E357F5F0;
  *(_DWORD *)(v34 + 8) = -1;
  *(_WORD *)(v34 + 12) = 82;
  *(_DWORD *)(v34 + 16) = v13;
  *(_BYTE *)(v34 + 20) = 4;
  *(_QWORD *)(v34 + 24) = v33;
  *(_QWORD *)(v34 + 32) = 0;
  v35 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v34);
  v35[2] = v28;
  *v35 = v35 + 2;
  v35[3] = v29;
  v35[4] = v30;
  v35[1] = 0x300000003;
  *(_QWORD *)v34 = &unk_1E357CF78;
  *(_OWORD *)(v34 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v34 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v34 + 76))
  {
    JSC::B3::Procedure::addValueImpl(v32, (JSC::B3::Value *)v34);
    v42 = (WTF *)v34;
    v37 = (char **)(v31 + 8);
    v38 = *(unsigned int *)(v31 + 20);
    if ((_DWORD)v38 == *(_DWORD *)(v31 + 16))
    {
      v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, v38 + 1, (unint64_t)&v42);
      v38 = *(unsigned int *)(v31 + 20);
      *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v38) = *(_QWORD *)v41;
      v39 = v42;
    }
    else
    {
      *(_QWORD *)&(*v37)[8 * v38] = v34;
      v39 = (WTF *)v34;
    }
    *(_DWORD *)(v31 + 20) = v38 + 1;
    *((_QWORD *)v39 + 4) = v31;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateVariableSizedCell<JSC::JSImmutableButterfly>(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *a1, uint64_t a2, unint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v7;
  JSC::B3::Value *HeapCell;

  return HeapCell;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,unsigned int),JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  JSC::DFG::Node *v35;
  char **v36;
  uint64_t v37;
  WTF *v38;
  uint64_t result;
  char *v40;
  WTF *v41;
  uint64_t v42;

  v11 = (int *)(a1 + 28264);
  v12 = *(_DWORD *)(a1 + 28264);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = *(_QWORD *)(a1 + 27848);
    v41 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v41 = 0x200000002;
    v42 = 0x200000002;
    v21 = (_QWORD *)(v13 + 32);
    v22 = *(unsigned int *)(v13 + 44);
    if ((_DWORD)v22 == *(_DWORD *)(v13 + 40))
    {
      v23 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v41);
      v24 = *(_QWORD *)(v13 + 32) + 16 * *(unsigned int *)(v13 + 44);
    }
    else
    {
      v24 = *v21 + 16 * v22;
      v23 = (unint64_t)&v41;
    }
    *(_QWORD *)v24 = 0;
    *(_QWORD *)(v24 + 8) = 0;
    v25 = *(_QWORD *)v23;
    *(_QWORD *)v23 = 0;
    *(_QWORD *)v24 = v25;
    LODWORD(v25) = *(_DWORD *)(v23 + 8);
    *(_DWORD *)(v23 + 8) = 0;
    *(_DWORD *)(v24 + 8) = v25;
    LODWORD(v25) = *(_DWORD *)(v23 + 12);
    *(_DWORD *)(v23 + 12) = 0;
    *(_DWORD *)(v24 + 12) = v25;
    ++*(_DWORD *)(v13 + 44);
    v12 = v22 | 0x80000000;
    *v11 = v22 | 0x80000000;
    v26 = v41;
    if (v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v26, v14, v15, v16, v17, v18, v19, v20);
      v12 = *v11;
    }
  }
  v27 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationCreateImmutableButterfly);
  v28 = *a2;
  v29 = *a3;
  v30 = *(_QWORD *)(a1 + 27776);
  v31 = *(JSC::B3::Value **)(a1 + 27760);
  v32 = *(_QWORD *)(a1 + 27768);
  v33 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v33 = off_1E357F5F0;
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 82;
  *(_DWORD *)(v33 + 16) = v12;
  *(_BYTE *)(v33 + 20) = 4;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  v34 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v33);
  v34[2] = v27;
  *v34 = v34 + 2;
  v34[3] = v28;
  v34[4] = v29;
  v34[1] = 0x300000003;
  *(_QWORD *)v33 = &unk_1E357CF78;
  *(_OWORD *)(v33 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v33 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v33 + 76))
  {
    JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
    v41 = (WTF *)v33;
    v36 = (char **)(v30 + 8);
    v37 = *(unsigned int *)(v30 + 20);
    if ((_DWORD)v37 == *(_DWORD *)(v30 + 16))
    {
      v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v41);
      v37 = *(unsigned int *)(v30 + 20);
      *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v37) = *(_QWORD *)v40;
      v38 = v41;
    }
    else
    {
      *(_QWORD *)&(*v36)[8 * v37] = v33;
      v38 = (WTF *)v33;
    }
    *(_DWORD *)(v30 + 20) = v37 + 1;
    *((_QWORD *)v38 + 4) = v30;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  JSC::DFG::Node *v22;
  char **v23;
  uint64_t v24;
  WTF *v25;
  uint64_t result;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  char *v36;
  WTF *v37;
  uint64_t v38;

  v12 = (int *)(a1 + 28264);
  v13 = *(_DWORD *)(a1 + 28264);
  if ((v13 & 0x80000000) == 0)
  {
    v27 = *(_QWORD *)(a1 + 27848);
    v37 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v37 = 0x200000002;
    v38 = 0x200000002;
    v13 = JSC::B3::Procedure::addTuple(v27, (unint64_t)&v37);
    *v12 = v13;
    v35 = v37;
    if (v37)
    {
      v37 = 0;
      LODWORD(v38) = 0;
      WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
      v13 = *v12;
    }
  }
  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v15 = *a3;
  v16 = *a4;
  v17 = *(_QWORD *)(a1 + 27776);
  v18 = *(JSC::B3::Value **)(a1 + 27760);
  v19 = *(_QWORD *)(a1 + 27768);
  v20 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v20 = off_1E357F5F0;
  *(_DWORD *)(v20 + 8) = -1;
  *(_WORD *)(v20 + 12) = 82;
  *(_DWORD *)(v20 + 16) = v13;
  *(_BYTE *)(v20 + 20) = 4;
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v20 + 32) = 0;
  v21 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v20);
  v21[2] = v14;
  *v21 = v21 + 2;
  v21[3] = v15;
  v21[4] = v16;
  v21[1] = 0x300000003;
  *(_QWORD *)v20 = &unk_1E357CF78;
  *(_OWORD *)(v20 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v20 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v20 + 76))
  {
    JSC::B3::Procedure::addValueImpl(v18, (JSC::B3::Value *)v20);
    v37 = (WTF *)v20;
    v23 = (char **)(v17 + 8);
    v24 = *(unsigned int *)(v17 + 20);
    if ((_DWORD)v24 == *(_DWORD *)(v17 + 16))
    {
      v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v37);
      v24 = *(unsigned int *)(v17 + 20);
      *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v24) = *(_QWORD *)v36;
      v25 = v37;
    }
    else
    {
      *(_QWORD *)&(*v23)[8 * v24] = v20;
      v25 = (WTF *)v20;
    }
    *(_DWORD *)(v17 + 20) = v24 + 1;
    *((_QWORD *)v25 + 4) = v17;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,JSC::Structure *,int,JSC::Butterfly *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  JSC::B3::Value *v34;
  JSC::DFG::Node *v35;
  char **v36;
  uint64_t v37;
  WTF *v38;
  char *v40;
  WTF *v41;
  uint64_t v42;

  v13 = (int *)(a1 + 28264);
  v14 = *(_DWORD *)(a1 + 28264);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 27848);
    v41 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v41 = 0x200000002;
    v42 = 0x200000002;
    v23 = (_QWORD *)(v15 + 32);
    v24 = *(unsigned int *)(v15 + 44);
    if ((_DWORD)v24 == *(_DWORD *)(v15 + 40))
    {
      v25 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v41);
      v26 = *(_QWORD *)(v15 + 32) + 16 * *(unsigned int *)(v15 + 44);
    }
    else
    {
      v26 = *v23 + 16 * v24;
      v25 = (unint64_t)&v41;
    }
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v27 = *(_QWORD *)v25;
    *(_QWORD *)v25 = 0;
    *(_QWORD *)v26 = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 8);
    *(_DWORD *)(v25 + 8) = 0;
    *(_DWORD *)(v26 + 8) = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 12);
    *(_DWORD *)(v25 + 12) = 0;
    *(_DWORD *)(v26 + 12) = v27;
    ++*(_DWORD *)(v15 + 44);
    v14 = v24 | 0x80000000;
    *v13 = v24 | 0x80000000;
    v28 = v41;
    if (v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v28, v16, v17, v18, v19, v20, v21, v22);
      v14 = *v13;
    }
  }
  v29 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationNewArrayWithSize);
  v30 = *a3;
  v31 = *a4;
  v32 = *(_QWORD *)(a1 + 27776);
  v33 = *(JSC::B3::Value **)(a1 + 27760);
  v34 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v14, *(_QWORD *)(a1 + 27768), v29, *a2, v30, v31, *a5);
  JSC::B3::Procedure::addValueImpl(v33, v34);
  v41 = v34;
  v36 = (char **)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v41);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)v40;
    v38 = v41;
  }
  else
  {
    *(_QWORD *)&(*v36)[8 * v37] = v34;
    v38 = v34;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *((_QWORD *)v38 + 4) = v32;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSObject *> (*)(JSC::JSGlobalObject *,int,JSC::JSObject *,unsigned char),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationNewArrayWithSpeciesInt32);
  v15 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v13, v14, *a2, *a3, *a4, *a5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSObject *> (*)(JSC::JSGlobalObject *,long long,JSC::JSObject *,unsigned char),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  JSC::DFG::Node *v20;
  char **v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  char *v25;
  JSC::B3::Value *v26;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), (uint64_t)operationNewArrayWithSpecies);
  v15 = *a3;
  v16 = *a4;
  v17 = a1[3472];
  v18 = (JSC::B3::Value *)a1[3470];
  v19 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v13, a1[3471], v14, *a2, v15, v16, *a5);
  JSC::B3::Procedure::addValueImpl(v18, v19);
  v26 = v19;
  v21 = (char **)(v17 + 8);
  v22 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v17 + 16))
  {
    v25 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v26);
    v22 = *(unsigned int *)(v17 + 20);
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v22) = *(_QWORD *)v25;
    v23 = v26;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v17 + 20) = v22 + 1;
  *((_QWORD *)v23 + 4) = v17;
}

uint64_t JSC::JSGlobalObject::typedArrayStructureConcurrently(uint64_t *a1, int a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;

  if (a3)
  {
    switch(a2)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x197DC1484);
      case 1:
        v3 = a1 + 210;
        break;
      case 2:
        v3 = a1 + 213;
        break;
      case 3:
        v3 = a1 + 216;
        break;
      case 4:
        v3 = a1 + 219;
        break;
      case 5:
        v3 = a1 + 222;
        break;
      case 6:
        v3 = a1 + 225;
        break;
      case 7:
        v3 = a1 + 228;
        break;
      case 8:
        v3 = a1 + 231;
        break;
      case 9:
        v3 = a1 + 234;
        break;
      case 10:
        v3 = a1 + 237;
        break;
      case 11:
        v3 = a1 + 240;
        break;
      case 12:
        v3 = a1 + 243;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197DC1464);
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x197DC1444);
      case 1:
        v3 = a1 + 208;
        break;
      case 2:
        v3 = a1 + 211;
        break;
      case 3:
        v3 = a1 + 214;
        break;
      case 4:
        v3 = a1 + 217;
        break;
      case 5:
        v3 = a1 + 220;
        break;
      case 6:
        v3 = a1 + 223;
        break;
      case 7:
        v3 = a1 + 226;
        break;
      case 8:
        v3 = a1 + 229;
        break;
      case 9:
        v3 = a1 + 232;
        break;
      case 10:
        v3 = a1 + 235;
        break;
      case 11:
        v3 = a1 + 238;
        break;
      case 12:
        v3 = a1 + 241;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197DC1424);
    }
  }
  v4 = *v3;
  if ((v4 & 1) != 0)
    return 0;
  else
    return v4;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *a1, int a2, uint64_t a3, uint64_t a4, JSC::B3::Value *a5)
{
  JSC::FTL::Output *v10;
  uint64_t v11;
  JSC::B3::BasicBlock *v12;
  JSC::B3::BasicBlock *v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  JSC::B3::Value *v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  JSC::B3::Value *HeapCell;
  JSC::B3::Value *v32;
  JSC::B3::Value *v33;
  JSC::B3::Value *v34;
  JSC::B3::Value *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  JSC::B3::Value *v40;
  JSC::B3::Value *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v10 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)a1 + 27640);
  v11 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)a1 + 27640));
  v12 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v10);
  v13 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v10);
  v14 = JSC::FTL::Output::anchor(v10, *((JSC::B3::Value **)a1 + 3460));
  v67 = v15;
  v68 = v14;
  v16 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v10, 1000);
  v17 = JSC::FTL::Output::above(v10, a5, v16);
  JSC::FTL::Output::branch(v10, (uint64_t)v17, (uint64_t)v12, v11, 0.0, 1.0, v18, v19, v20, v21);
  *((_QWORD *)a1 + 3472) = v11;
  v22 = *((_QWORD *)a1 + 3473);
  *((_QWORD *)a1 + 3473) = v12;
  v69 = v22;
  if ((a2 - 4) > 7u)
    v23 = 0;
  else
    v23 = dword_199124958[(char)(a2 - 4)];
  v66 = a3;
  v24 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v10, v23);
  v25 = JSC::FTL::Output::shl(v10, a5, v24);
  v26 = a4;
  if ((a2 - 9) >= 3)
  {
    v27 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v10, 7);
    v28 = (JSC::B3::Value *)JSC::FTL::Output::add(v10, v25, v27);
    v29 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v10, -8);
    v25 = JSC::FTL::Output::bitAnd(v10, v28, v29);
  }
  v32 = (JSC::B3::Value *)*((_QWORD *)a1 + 3457);
  v33 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v10, 3);
  v34 = JSC::FTL::Output::lShr(v10, v25, v33);
  v35 = JSC::FTL::Output::castToInt32(v10, v34);
  v36 = JSC::FTL::Output::anchor(v10, HeapCell);
  v64 = v37;
  v65 = v36;
  switch(a2)
  {
    case 1:
      v38 = v26;
      break;
    case 2:
      v38 = v26;
      break;
    case 3:
      v38 = v26;
      break;
    case 4:
      v38 = v26;
      break;
    case 5:
      v38 = v26;
      break;
    case 6:
      v38 = v26;
      break;
    case 7:
      v38 = v26;
      break;
    case 8:
      v38 = v26;
      break;
    case 9:
      v38 = v26;
      break;
    case 10:
      v38 = v26;
      break;
    case 11:
      v38 = v26;
      break;
    case 12:
      v38 = v26;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197DC18D0);
  }
  v40 = v39;
  JSC::FTL::Output::store32(v10, HeapCell, v39, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)a1 + 2368));
  JSC::FTL::Output::store32(v10, a5, v40, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)a1 + 2272));
  JSC::FTL::Output::store32(v10, *((JSC::B3::Value **)a1 + 3459), v40, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)a1 + 2224));
  v41 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v10, 16);
  JSC::FTL::Output::store32As8(v10, v41, v40, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)a1 + 2320));
  v42 = JSC::FTL::Output::anchor(v10, v40);
  v44 = v43;
  JSC::FTL::Output::jump(v10, v13, v45, v46, v47, v48, v49, v50);
  *((_QWORD *)a1 + 3472) = v12;
  *((_QWORD *)a1 + 3473) = v13;
  v51 = JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v10, 2, v68, v67, v65, v64);
  *(_QWORD *)&v70 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  BYTE8(v70) = a2;
  v71 = v66;
  v72 = v38;
  v53 = JSC::FTL::Output::anchor(v10, (JSC::B3::Value *)v52);
  v55 = v54;
  JSC::FTL::Output::jump(v10, v13, v56, v57, v58, v59, v60, v61);
  *((_QWORD *)a1 + 3472) = v13;
  *((_QWORD *)a1 + 3473) = v69;
  v62 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v10, 2, v42, v44, v53, v55);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,long long),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v12, v13, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40872);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40520);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40880);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40472);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40344);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40360);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSDataView,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40432);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::B3::Value *,JSC::B3::Value *>(_QWORD *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  WTF *v14;
  WTF *v16;
  int v17;
  uint64_t v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v18[0] = a3;
  v18[1] = a4;
  WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v16, v18, 2uLL);
  v14 = v16;
  if (v16)
  {
    v16 = 0;
    v17 = 0;
    WTF::fastFree((unint64_t)v14, v6, v7, v8, v9, v10, v11, v12);
  }
  return v13;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40512);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40864);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40528);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40888);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40464);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x2Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v36;
  __int128 v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;

  JSC::CodeOrigin::CodeOrigin(&v42, (const JSC::CodeOrigin *)(a1 + 3524));
  v11 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v12 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a3;
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      v36 = (unint64_t)v15;
      LOBYTE(v37) = 3;
      JSC::B3::StackmapValue::append(v11, v15, (unint64_t)&v36 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  *((_QWORD *)v11 + 8) |= 0x30000uLL;
  *((_QWORD *)v11 + 10) |= 0x30000uLL;
  v16 = a1[1];
  v17 = a2[1];
  v36 = *a2;
  v37 = v17;
  v18 = v41;
  if (v41)
  {
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    v20 = v41;
  }
  else
  {
    v20 = 0;
  }
  v38 = v18;
  v39 = v16;
  JSC::CodeOrigin::CodeOrigin(&v40, (const JSC::CodeOrigin *)&v42);
  if (v20)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v20, v28, v29, v30, v31, v32, v33, v34);
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  return v11;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x48);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::~StackmapGenerationParams(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  __int128 v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576CD0;
  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  *(_OWORD *)(result + 32) = v2;
  v3 = *(unsigned int **)(a2 + 32);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v6 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 48) = v3;
  *(_QWORD *)(result + 56) = v6;
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v8 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v8 != 0x3FFFFFFF)
        ? (v9 = (_DWORD)v8 == -1)
        : (v9 = 1),
          v9))
    {
      v10 = 2;
    }
    else if (v8 >> 28)
    {
      v13 = result;
      v11 = v7;
      v12 = v8;
      v7 = WTF::fastMalloc((WTF *)0x10);
      result = v13;
      *(_QWORD *)v7 = v11;
      *(_DWORD *)(v7 + 8) = v12;
      v10 = 1;
    }
    else
    {
      v10 = v7;
      v7 = v8 << 36;
    }
    v5 = v7 | v10;
  }
  *(_QWORD *)(result + 64) = v5;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 64);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 8);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v54[5];
  unsigned int *v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int *v59;
  unint64_t v60;
  uint64_t v61;

  v60 = 0;
  v61 = 0;
  v6 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a3 + 8);
    v8 = 16 * v6;
    do
    {
      *(_QWORD *)&v51 = JSC::FTL::Location::forValueRep(v7);
      *((_QWORD *)&v51 + 1) = v9;
      v10 = HIDWORD(v61);
      if (HIDWORD(v61) == (_DWORD)v61)
      {
        WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::Location>((uint64_t)&v60, (unint64_t)&v51);
      }
      else
      {
        *(_OWORD *)(v60 + 16 * HIDWORD(v61)) = v51;
        HIDWORD(v61) = v10 + 1;
      }
      v7 += 16;
      v8 -= 16;
    }
    while (v8);
  }
  JSC::MacroAssemblerARM64::patchableJump(a2, v11, v12, v13, v14, v15, v16, v17, (uint64_t)&v57);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a2, v18, v19, v20, v21, v22, v23, v24, &v56);
  v25 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v27 = v26;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v55);
  LODWORD(v51) = v57;
  *(_QWORD *)((char *)&v51 + 4) = v58;
  v52 = *(_QWORD *)(a1 + 40);
  v53 = v56;
  JSC::CodeOrigin::CodeOrigin(v54, (const JSC::CodeOrigin *)(a1 + 48));
  v28 = v55;
  if (v55)
  {
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
  }
  v54[1] = (uint64_t)v28;
  v54[2] = v25;
  v54[3] = v27;
  v30 = (uint64_t)v59;
  if (v59)
  {
    v31 = v59 + 2;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
  }
  v54[4] = v30;
  if (v55)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v55, v40, v41, v42, v43, v44, v45, v46);
  v47 = v59;
  v59 = 0;
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v47 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
    }
  }
  if (v60)
    WTF::fastFree(v60, v40, v41, v42, v43, v44, v45, v46);
}

__n128 JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()(uint64_t *a1, __n128 *a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  __n128 result;
  __n128 v16;

  v6 = a2->n128_u64[0];
  v7 = JSC::DFG::operationNewTypedArrayWithSizeForType(a2->n128_u8[8]);
  v8 = a3[3];
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x197DC2AB4);
  }
  v9 = *(_QWORD *)a3;
  if (*(_DWORD *)(*(_QWORD *)a3 + 12))
    goto LABEL_13;
  if (v8 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DC2ABCLL);
  }
  if (*(_DWORD *)(v9 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x197DC2A8CLL);
  }
  if (v8 <= 2)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x197DC2A6CLL);
  }
  if (*(_DWORD *)(v9 + 44))
  {
    __break(0xC471u);
    JUMPOUT(0x197DC2AACLL);
  }
  v10 = v7;
  v16 = a2[1];
  v11 = *(_DWORD *)(v9 + 24) & 0x7F;
  v12 = *(_DWORD *)(v9 + 8) & 0x7F;
  v13 = *(_BYTE *)(v9 + 40) & 0x7F;
  v14 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)v14 = off_1E3576CF8;
  *(_QWORD *)(v14 + 16) = v6;
  *(_QWORD *)(v14 + 24) = v10;
  *(_BYTE *)(v14 + 32) = v12;
  result = v16;
  *(__n128 *)(v14 + 40) = v16;
  *(_BYTE *)(v14 + 56) = v11;
  *(_BYTE *)(v14 + 57) = v13;
  *a1 = v14;
  return result;
}

_QWORD *JSC::B3::StackmapGenerationParams::addLatePath<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[9];
  unsigned int *v19;

  v3 = WTF::fastMalloc((WTF *)0x58);
  v4 = _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_25emitNewTypedArrayWithSizeENS1_14TypedArrayTypeEPNS1_14JSGlobalObjectENS1_3DFG19RegisteredStructureEPNS4_5ValueEEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSM_ISL_Lm0ESO_Lm16ESP_EEENKUlS3_RKS9_E_clES3_S13_EUlS3_E_EEvSY_EUlS3_S7_E_EC1EOS16_(v3, (uint64_t)v18);
  v19 = (unsigned int *)v4;
  v12 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v19);
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v4;
    *(_DWORD *)(a1 + 12) = v12 + 1;
  }
}

uint64_t JSC::DFG::operationNewTypedArrayWithSizeForType(int a1)
{
  uint64_t result;

  if ((a1 - 1) < 0xB)
    return (uint64_t)off_1E3577E48[(char)(a1 - 1)];
  result = 458;
  __break(0xC471u);
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint8x8_t v39;
  __int32 v40;
  uint8x8_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  char v52;
  char v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  unsigned __int8 *v60;
  char *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned __int8 *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int8x8_t v84;
  int v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  unsigned int v89;
  char v90;
  uint64_t v91;
  int *v92;
  int *v93;
  int v94;
  uint64_t v95;
  int64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  char v104;
  __int16 v105;
  char v106;
  int v107;
  uint64_t v108;
  void *__dst;
  int v110;
  unsigned int v111;
  _WORD v112[8];
  _QWORD v113[9];

  v10 = *(JSC::AssemblerBuffer **)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v100 = *(_QWORD *)(a1 + 48);
  v101 = *(_QWORD *)(a1 + 40);
  v16 = *(unsigned __int8 *)(a1 + 56);
  v17 = *(unsigned __int8 *)(a1 + 57);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DC3204);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
    v23 = *(_DWORD *)(a2 + 200);
    if (v23 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v18, v19, v20, v21, v22, a7, a8);
      v23 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v113, *(_QWORD *)(v11 + 24), a2, 5u, v15, 0xFFFFFFFFLL, a7, a8);
  __dst = v112;
  v110 = 2;
  if (v16 == 2)
  {
    if (v17 == 3)
    {
      v32 = &v108;
      goto LABEL_67;
    }
    v31 = 0;
    goto LABEL_11;
  }
  v112[0] = v16 | 0x200;
  v31 = 1;
  v111 = 1;
  if (v17 != 3)
  {
LABEL_11:
    v112[v31++] = v17 | 0x300;
    v111 = v31;
  }
  v32 = &v108;
  do
  {
    v33 = 0;
    v34 = 0;
    v35 = (char *)__dst;
    v36 = v31;
    do
    {
      if ((*((_BYTE *)__dst + v33 + 1) & 0x40) != 0)
      {
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      v34 |= 1 << *((_BYTE *)__dst + v33 + 1);
      v33 += 2;
    }
    while (2 * v31 != v33);
    v37 = 0;
    do
    {
      v38 = *((_BYTE *)__dst + v37) & 0x7F;
      if (v38 >= 0x40)
        goto LABEL_85;
      v34 &= ~(1 << v38);
      v37 += 2;
    }
    while (2 * v31 != v37);
    v39 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
    v39.i16[0] = vaddlv_u8(v39);
    v40 = v39.i32[0];
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v34));
    v41.i16[0] = vaddlv_u8(v41);
    if (v41.i32[0] + v40)
    {
      v42 = 0;
      if (v31 <= 1)
        v43 = 1;
      else
        v43 = v31;
      v44 = 2 * v43;
      while (1)
      {
        v45 = *((unsigned __int8 *)__dst + v42 + 1);
        if ((v45 & 0x7Fu) >= 0x40)
          goto LABEL_85;
        if (((v34 >> (v45 & 0x7F)) & 1) != 0)
          break;
        v42 += 2;
        if (v44 == v42)
          goto LABEL_63;
      }
      v46 = *((unsigned __int8 *)__dst + v42);
      if (v46 != v45)
      {
        v47 = (char)v46;
        if ((char)v46 == 63)
        {
          v48 = *(_DWORD *)(a2 + 200);
          v49 = *(_DWORD *)(a2 + 192);
          if ((char)v45 == 31)
            goto LABEL_57;
          v51 = v45 & 0x1F | 0xD2800000;
        }
        else
        {
          v48 = *(_DWORD *)(a2 + 200);
          v49 = *(_DWORD *)(a2 + 192);
          v50 = v45 == 31 || v47 == 31;
          if (!v50)
          {
            v51 = v45 & 0xFFE0FFFF | ((v47 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_58;
          }
LABEL_57:
          v51 = (char)v45 | (32 * v47) | 0x91000000;
        }
LABEL_58:
        if (v48 + 4 > v49)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v24, v25, v26, v27, v28, v29, v30);
          v48 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v48) = v51;
        *(_DWORD *)(a2 + 200) += 4;
        v35 = (char *)__dst;
        v36 = v111;
      }
      memmove(&v35[v42], &v35[v42 + 2], 2 * v36 - v42 - 2);
      v31 = v111 - 1;
      goto LABEL_62;
    }
    v99 = v14;
    v52 = *(_BYTE *)__dst;
    v53 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v53, v26, v27, v28, v29, v30);
    memmove(__dst, (char *)__dst + 2, 2 * v111 - 2);
    v54 = v111 - 1;
    v50 = v111 == 1;
    v111 = v54;
    v55 = (unsigned __int8 *)__dst;
    v56 = (unsigned __int8 *)__dst + 2 * v54;
    if (v50)
    {
      v63 = 0;
      v64 = 0;
      v59 = 0;
      v24 = v56;
    }
    else
    {
      v57 = 2 * v54;
      v58 = __dst;
      while (*v58 != v53)
      {
        v58 += 2;
        v57 -= 2;
        if (!v57)
          goto LABEL_41;
      }
      *v58 = v52;
LABEL_41:
      v59 = 0;
      v60 = v55;
      v24 = v56;
      v61 = (char *)v56;
      do
      {
        if (*v55 == v55[1])
        {
          v62 = v55;
          if (v61 != (char *)__dst + 2 * v111)
          {
            v98 = (char *)v56;
            if (v55 == v24)
            {
              v62 = (unsigned __int8 *)v61;
            }
            else
            {
              v96 = v60 - v24;
              v97 = v61;
              memmove(v61, v24, v60 - v24);
              v62 = (unsigned __int8 *)&v97[v96];
            }
            v56 = (unsigned __int8 *)v98;
          }
          v24 = v55 + 2;
          ++v59;
          v61 = (char *)v62;
        }
        v55 += 2;
        v60 += 2;
      }
      while (v55 < v56);
      v55 = (unsigned __int8 *)__dst;
      v63 = v111;
      v64 = v111;
      v56 = (unsigned __int8 *)v61;
    }
    v65 = &v55[2 * v63];
    v14 = v99;
    if (v24 != v65)
    {
      memmove(v56, v24, v65 - v24);
      v64 = v111;
    }
    v31 = v64 - v59;
LABEL_62:
    v111 = v31;
LABEL_63:
    ;
  }
  while (v31);
  v66 = __dst;
  if (v112 != __dst && __dst)
  {
    __dst = 0;
    v110 = 0;
    WTF::fastFree((unint64_t)v66, v24, v25, v26, v27, v28, v29, v30);
  }
LABEL_67:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v100, 1, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v101, 0, v67, v68, v69, v70, v71);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v113, v13, v14, v72, v73, v74, v75, v76, (uint64_t)&__dst);
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v113, v77, v78, v79, v80, v81, v82, v83);
  if (v10)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a2, v13, 0, 0, 0xFFFFFFFFLL, v28, v29, v30, (uint64_t)&v107, v84);
    v85 = v107;
    if (v107 != -1)
    {
      v86 = *((unsigned int *)v10 + 3);
      if ((_DWORD)v86 == *((_DWORD *)v10 + 2))
      {
        v87 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v86 + 1), (unint64_t)&v107, v26, v27, v28, v29, v30);
        v32 = (uint64_t *)(v87 + 1);
        v85 = *v87;
        LODWORD(v86) = *((_DWORD *)v10 + 3);
      }
      v88 = *(_QWORD *)v10 + 12 * v86;
      *(_DWORD *)v88 = v85;
      *(_QWORD *)(v88 + 4) = *v32;
      ++*((_DWORD *)v10 + 3);
    }
  }
  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (LODWORD(v13) = *(_DWORD *)(a2 + 200); (int)v13 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v13)
  {
LABEL_86:
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
      LODWORD(v13) = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
    LODWORD(v13) = *(_DWORD *)(a2 + 200) + 4;
  }
  v89 = v13;
  if ((v13 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
    v89 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v89) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v90 = 69;
  else
    v90 = 65;
  v102 = v13;
  v103 = 0;
  v104 = v90;
  v105 = 15;
  v106 = -1;
  if ((_DWORD)v13 != -1)
  {
    v91 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v91 == *(_DWORD *)(a3 + 8))
    {
      v92 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v91 + 1), (unint64_t)&v102, v26, v27, v28, v29, v30);
      v94 = *v92;
      v93 = v92 + 1;
      v95 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v95 = v94;
    }
    else
    {
      v93 = &v103;
      v95 = *(_QWORD *)a3 + 12 * v91;
      *(_DWORD *)v95 = v13;
    }
    *(_QWORD *)(v95 + 4) = *(_QWORD *)v93;
    ++*(_DWORD *)(a3 + 12);
  }
}

uint64_t _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_25emitNewTypedArrayWithSizeENS1_14TypedArrayTypeEPNS1_14JSGlobalObjectENS1_3DFG19RegisteredStructureEPNS4_5ValueEEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSM_ISL_Lm0ESO_Lm16ESP_EEENKUlS3_RKS9_E_clES3_S13_EUlS3_E_EEvSY_EUlS3_S7_E_EC1EOS16_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576D20;
  *(_DWORD *)(result + 16) = *(_DWORD *)a2;
  *(_QWORD *)(result + 20) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = result;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      result = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)(result + 48) = v2;
  v3 = *(unsigned int **)(a2 + 40);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 56) = v3;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 80) = v5;
  return result;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_25emitNewTypedArrayWithSizeENS1_14TypedArrayTypeEPNS1_14JSGlobalObjectENS1_3DFG19RegisteredStructureEPNS4_5ValueEEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSM_ISL_Lm0ESO_Lm16ESP_EEENKUlS3_RKS9_E_clES3_S13_EUlS3_E_EEvSY_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_25emitNewTypedArrayWithSizeENS1_14TypedArrayTypeEPNS1_14JSGlobalObjectENS1_3DFG19RegisteredStructureEPNS4_5ValueEEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSM_ISL_Lm0ESO_Lm16ESP_EEENKUlS3_RKS9_E_clES3_S13_EUlS3_E_EEvSY_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_25emitNewTypedArrayWithSizeENS1_14TypedArrayTypeEPNS1_14JSGlobalObjectENS1_3DFG19RegisteredStructureEPNS4_5ValueEEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSM_ISL_Lm0ESO_Lm16ESP_EEENKUlS3_RKS9_E_clES3_S13_EUlS3_E_EEvSY_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

_QWORD *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType,JSC::JSGlobalObject *,JSC::DFG::RegisteredStructure,JSC::B3::Value *)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *result;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[12];
  int v59;
  unsigned int *v60;
  uint64_t v61[2];
  __int128 v62;
  uint64_t v63;
  int v64;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v18 = *(unsigned int *)(v17 + 308);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v17 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v17 + 296) + 8 * v18) = 0;
    *(_DWORD *)(v17 + 308) = v18 + 1;
  }
  JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters((unsigned int *)a2, v18, v11, v12, v13, v14, v15, v16);
  v19 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v19 + 90440), v19, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v20, v21, v22, v23, v24, v58);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, *(uint64_t *)v58, v25, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v58, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 24);
  if (v38)
  {
    v39 = v38 + 2;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
  }
  else
  {
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
  }
  v60 = v38;
  JSC::CodeOrigin::CodeOrigin(v61, (const JSC::CodeOrigin *)(a1 + 32));
  v42 = *(unsigned int **)(a1 + 40);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v61[1] = (uint64_t)v42;
  v62 = *(_OWORD *)(a1 + 48);
  v44 = *(_QWORD *)(a1 + 64);
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v63 = v44;
  v64 = v18;
  _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_25emitNewTypedArrayWithSizeENS_14TypedArrayTypeEPNS_14JSGlobalObjectENS_3DFG19RegisteredStructureEPNS_2B35ValueEEUlRKN3WTF6VectorINS4_8LocationELm0ENSG_15CrashOnOverflowELm16ENSG_10FastMallocEEEE_EEPNSD_15PatchpointValueERKT_RKNSH_ISF_Lm0ESJ_Lm16ESK_EEENKUlRNS_12CCallHelpersERKNSD_24StackmapGenerationParamsEE_clESY_S11_ENKUlSY_E_clESY_EUlRNS_10LinkBufferEE_EEvST_(a2, (uint64_t)v58);
  if (v38)
  {
    v55 = v38 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v38 + 2);
      result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v38 + 32))(v38);
    }
  }
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_25emitNewTypedArrayWithSizeENS_14TypedArrayTypeEPNS_14JSGlobalObjectENS_3DFG19RegisteredStructureEPNS_2B35ValueEEUlRKN3WTF6VectorINS4_8LocationELm0ENSG_15CrashOnOverflowELm16ENSG_10FastMallocEEEE_EEPNSD_15PatchpointValueERKT_RKNSH_ISF_Lm0ESJ_Lm16ESK_EEENKUlRNS_12CCallHelpersERKNSD_24StackmapGenerationParamsEE_clESY_S11_ENKUlSY_E_clESY_EUlRNS_10LinkBufferEE_EEvST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3576D48;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)a2;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v4 + 32) = v6;
  v9 = *(_QWORD *)(a2 + 24);
  if ((v9 & 1) != 0)
  {
    v29 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v30 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v33 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = v33;
      *(_DWORD *)(v29 + 8) = v30;
      v32 = 1;
    }
    else
    {
      v32 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = v30 << 36;
    }
    v9 = v29 | v32;
  }
  *(_QWORD *)(v5 + 40) = v9;
  v10 = *(unsigned int **)(a2 + 32);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v5 + 72) = v12;
  *(_DWORD *)(v5 + 80) = *(_DWORD *)(a2 + 64);
  v15 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 240))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
LABEL_21:
    *v16 = v5;
    *(_DWORD *)(a1 + 244) = v15 + 1;
    return;
  }
  v17 = v15 + (v15 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15 + 1)
    v19 = v15 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = *(const void **)(a1 + 232);
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(a1 + 240) = v19;
    *(_QWORD *)(a1 + 232) = v21;
    memcpy(v21, v20, 8 * v15);
    if (v20)
    {
      if (*(const void **)(a1 + 232) == v20)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
    }
    v15 = *(unsigned int *)(a1 + 244);
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
    goto LABEL_21;
  }
  __break(0xC471u);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_25emitNewTypedArrayWithSizeENS1_14TypedArrayTypeEPNS1_14JSGlobalObjectENS1_3DFG19RegisteredStructureEPNS1_2B35ValueEEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNSE_15PatchpointValueERKT_RKNSH_ISG_Lm0ESJ_Lm16ESK_EEENKUlRNS1_12CCallHelpersERKNSE_24StackmapGenerationParamsEE_clESY_S11_ENKUlSY_E_clESY_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_25emitNewTypedArrayWithSizeENS1_14TypedArrayTypeEPNS1_14JSGlobalObjectENS1_3DFG19RegisteredStructureEPNS1_2B35ValueEEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNSE_15PatchpointValueERKT_RKNSH_ISG_Lm0ESJ_Lm16ESK_EEENKUlRNS1_12CCallHelpersERKNSE_24StackmapGenerationParamsEE_clESY_S11_ENKUlSY_E_clESY_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_25emitNewTypedArrayWithSizeENS1_14TypedArrayTypeEPNS1_14JSGlobalObjectENS1_3DFG19RegisteredStructureEPNS1_2B35ValueEEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNSE_15PatchpointValueERKT_RKNSH_ISG_Lm0ESJ_Lm16ESK_EEENKUlRNS1_12CCallHelpersERKNSE_24StackmapGenerationParamsEE_clESY_S11_ENKUlSY_E_clESY_EUlS3_E_E3runES3_(uint64_t a1, JSC::LinkBuffer *a2)
{
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitGetTypedArrayByteOffsetExceptSettingResult(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  int v30;
  unint64_t v31;
  JSC::DFG::Node *v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  JSC::B3::Value *v38;
  JSC::B3::Value *v39;
  JSC::B3::Value *v40;
  int8x8_t v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  __int128 *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  char v52;
  unint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  char v66;

  v10 = *((_QWORD *)this + 3528);
  if (*(_WORD *)(v10 + 18) == 146)
    v11 = *(_DWORD *)(v10 + 80);
  else
    v11 = *(_DWORD *)(v10 + 72);
  if ((v11 & 0x40000000) == 0)
  {
    v20 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
    v21 = *((_QWORD *)this + 3505);
    v22 = *(unsigned int *)((v20 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v23 = (uint64_t *)(v21 + 24);
    v24 = (uint64_t *)(v21 + 8);
    if ((v20 & 1) != 0)
      v25 = v23;
    else
      v25 = v24;
    v26 = *v25;
    v27 = *v25 + 32 * v22;
    v28 = *((_DWORD *)this + 7030);
    v29 = (unsigned int *)(v27 + 20);
    v30 = *(_DWORD *)(v27 + 20);
    if (v28 != v30)
    {
      if ((*(_QWORD *)(v27 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v30 ^ v28) >= 2)
        {
          v53 = *(_QWORD *)v27;
          if (*(_QWORD *)v27 != 4)
          {
            *(_QWORD *)v27 = v53 | 2;
            v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v53 & 1) != 0)
            {
              v60 = 2 * *v54;
              while (v60 * 4)
              {
                v61 = *(_QWORD *)&v54[v60];
                if ((*(_BYTE *)(v61 + 19) & 0xC) == 0)
                {
                  v62 = *(_QWORD *)(v61 + 96);
                  v63 = (v62 & 1) != 0 ? (v62 >> 1) & 3 : *(unsigned __int8 *)(v62 + 4);
                  v60 -= 2;
                  if (v63 != 2)
                    continue;
                }
                v64 = v26;
                WTF::fastFree((unint64_t)v54, v12, v13, v14, v15, v16, v17, v18);
                v26 = v64;
                v29 = (unsigned int *)(v27 + 20);
                goto LABEL_59;
              }
            }
            else if (v54)
            {
              if ((*((_BYTE *)v54 + 19) & 0xC) != 0
                || ((v55 = *((_QWORD *)v54 + 12), (v55 & 1) != 0)
                  ? (v56 = (v55 >> 1) & 3)
                  : (v56 = *(unsigned __int8 *)(v55 + 4)),
                    v56 == 2))
              {
LABEL_59:
                *(_QWORD *)v27 = 4;
              }
            }
          }
          *(_DWORD *)(v26 + 32 * v22 + 16) = -21020677;
        }
        if ((v28 & 1) != 0)
          *(_QWORD *)v27 &= ~2uLL;
      }
      *v29 = v28;
    }
    v31 = *(_QWORD *)v27;
    if ((*(_QWORD *)v27 & 2) != 0)
      goto LABEL_13;
    if (v31 <= 4 && ((1 << v31) & 0x15) != 0)
      goto LABEL_13;
    v51 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v31 & 1) != 0)
    {
      v57 = *v51;
      if (!(_DWORD)v57)
        goto LABEL_16;
      v58 = (uint64_t *)(v51 + 2);
      v52 = 1;
      do
      {
        v59 = *v58++;
        if (*(_BYTE *)(16 * *(unsigned int *)(v59 + 76) + 0xF4))
          v52 = 0;
        --v57;
      }
      while (v57);
    }
    else
    {
      if (!v51)
        goto LABEL_16;
      v52 = *(_BYTE *)(16 * v51[19] + 0xF4) ^ 1;
    }
    if (!v52)
    {
LABEL_13:
      v33 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
      v34 = *((_QWORD *)this + 293);
      if (v34)
      {
        v35 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v34);
        v36 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v19, v35);
      }
      else
      {
        v36 = (uint64_t)v19;
      }
      v37 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)this + 3455, (uint64_t)this + 2320, v36);
      v38 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 6);
      v39 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v37, v38);
      v40 = JSC::FTL::Output::notZero32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v39);
    }
LABEL_16:
    v42 = *((_QWORD *)this + 281);
    if (v42)
    {
      v43 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v42);
      v19 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v19, v43);
    }
    return (__int128 *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2224), (uint64_t)v19, 2);
  }
  v45 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v65 = 0;
  v66 = 3;
  JSC::B3::StackmapValue::append(v45, (uint64_t)v19, (unint64_t)&v65);
  *((_QWORD *)v45 + 8) |= 0x30000uLL;
  *((_QWORD *)v45 + 10) |= 0x30000uLL;
  *((_BYTE *)v45 + 168) = 2;
  v46 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v46 = off_1E3576D70;
  *(_DWORD *)(v46 + 8) = 1;
  *(_DWORD *)(v46 + 12) = v11;
  v47 = (unsigned int *)*((_QWORD *)v45 + 7);
  *((_QWORD *)v45 + 7) = v46;
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v47 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
    }
  }
  return v45;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitGetTypedArrayByteOffsetExceptSettingResult(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  int v12;
  int v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int i;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  unsigned int v50[2];
  char v51;
  __int16 v52;
  char v53;
  WTF *v54;
  int v55;
  unsigned int v56;
  uint64_t v57;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "emitGetTypedArrayByteOffsetExceptSettingResult");
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v12 = *(_DWORD *)(a3 + 20);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x197DC4294);
  }
  if (v12 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DC429CLL);
  }
  v13 = *(_DWORD *)(a3 + 36);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197DC42A4);
  }
  if (v13 == 1)
  {
    __break(0xC471u);
    goto LABEL_38;
  }
  v14 = *(char **)(a3 + 8);
  v15 = *v14;
  v16 = v14[16] & 0x7F;
  v17 = *(char **)(a3 + 24);
  v18 = *v17;
  v19 = v17[1];
  v20 = *(unsigned __int8 *)(a1 + 12);
  if (v20 == 25)
  {
    v21 = 0;
    v22 = 0;
  }
  else
  {
    v21 = JSC::DFG::toTypedArrayType(v20);
    v22 = 256;
  }
  JSC::AssemblyHelpers::branchIfResizableOrGrowableSharedTypedArrayIsOutOfBounds(a2, v16, v18, v19, v22 | v21, a6, a7, a8, (uint64_t)&v54);
  JSC::MacroAssemblerARM64::load64(a2, v16 | 0x2000000000, v15 & 0x7F, v23, v24, v25, v26, v27);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v28, v29, v30, v31, v32, v33, v34);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v36 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v28, v29, v30, v31, v32, v33, v34);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = 335544320;
  v37 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v37;
  if (*(_BYTE *)(a2 + 328))
    v38 = 69;
  else
    v38 = 65;
  v50[0] = i;
  v50[1] = 0;
  v51 = v38;
  v52 = 15;
  v53 = -1;
  if (v56)
  {
    v39 = 0;
    v40 = 0;
    v41 = 12 * v56;
    while (v40 < v56)
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v54 + v39), a2, v29, v30, v31, v32, v33, v34);
      ++v40;
      v39 += 12;
      if (v41 == v39)
      {
        v37 = *(_DWORD *)(a2 + 200);
        goto LABEL_23;
      }
    }
    __break(0xC471u);
LABEL_38:
    JUMPOUT(0x197DC4284);
  }
LABEL_23:
  if (v37 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v28, v29, v30, v31, v32, v33, v34);
    v37 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v37) = v15 & 0x1F | 0x52800000;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v50, a2, v29, v30, v31, v32, v33, v34);
  v49 = v54;
  if (&v57 != (uint64_t *)v54 && v54)
  {
    v54 = 0;
    v55 = 0;
    WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
  }
  *(_BYTE *)(a2 + 212) = v11;
}

uint64_t JSC::FTL::Output::load16ZeroExt32(JSC::FTL::Output *this, JSC::B3::Value *a2, const JSC::FTL::AbstractHeap *a3)
{
  const JSC::FTL::AbstractHeap *v4;
  uint64_t v5;

  v4 = JSC::FTL::Output::address(this, a2, a3);
  return JSC::FTL::Output::load16ZeroExt32(this, (uint64_t)v4, v5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  JSC::DFG::Node *v35;
  char **v36;
  uint64_t v37;
  WTF *v38;
  uint64_t result;
  char *v40;
  WTF *v41;
  uint64_t v42;

  v11 = (int *)(a1 + 28264);
  v12 = *(_DWORD *)(a1 + 28264);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = *(_QWORD *)(a1 + 27848);
    v41 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v41 = 0x200000002;
    v42 = 0x200000002;
    v21 = (_QWORD *)(v13 + 32);
    v22 = *(unsigned int *)(v13 + 44);
    if ((_DWORD)v22 == *(_DWORD *)(v13 + 40))
    {
      v23 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v41);
      v24 = *(_QWORD *)(v13 + 32) + 16 * *(unsigned int *)(v13 + 44);
    }
    else
    {
      v24 = *v21 + 16 * v22;
      v23 = (unint64_t)&v41;
    }
    *(_QWORD *)v24 = 0;
    *(_QWORD *)(v24 + 8) = 0;
    v25 = *(_QWORD *)v23;
    *(_QWORD *)v23 = 0;
    *(_QWORD *)v24 = v25;
    LODWORD(v25) = *(_DWORD *)(v23 + 8);
    *(_DWORD *)(v23 + 8) = 0;
    *(_DWORD *)(v24 + 8) = v25;
    LODWORD(v25) = *(_DWORD *)(v23 + 12);
    *(_DWORD *)(v23 + 12) = 0;
    *(_DWORD *)(v24 + 12) = v25;
    ++*(_DWORD *)(v13 + 44);
    v12 = v22 | 0x80000000;
    *v11 = v22 | 0x80000000;
    v26 = v41;
    if (v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v26, v14, v15, v16, v17, v18, v19, v20);
      v12 = *v11;
    }
  }
  v27 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationGetPrototypeOfObject);
  v28 = *a2;
  v29 = *a3;
  v30 = *(_QWORD *)(a1 + 27776);
  v31 = *(JSC::B3::Value **)(a1 + 27760);
  v32 = *(_QWORD *)(a1 + 27768);
  v33 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v33 = off_1E357F5F0;
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 82;
  *(_DWORD *)(v33 + 16) = v12;
  *(_BYTE *)(v33 + 20) = 4;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  v34 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v33);
  v34[2] = v27;
  *v34 = v34 + 2;
  v34[3] = v28;
  v34[4] = v29;
  v34[1] = 0x300000003;
  *(_QWORD *)v33 = &unk_1E357CF78;
  *(_OWORD *)(v33 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v33 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v33 + 76))
  {
    JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
    v41 = (WTF *)v33;
    v36 = (char **)(v30 + 8);
    v37 = *(unsigned int *)(v30 + 20);
    if ((_DWORD)v37 == *(_DWORD *)(v30 + 16))
    {
      v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v41);
      v37 = *(unsigned int *)(v30 + 20);
      *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v37) = *(_QWORD *)v40;
      v38 = v41;
    }
    else
    {
      *(_QWORD *)&(*v36)[8 * v37] = v33;
      v38 = (WTF *)v33;
    }
    *(_DWORD *)(v30 + 20) = v37 + 1;
    *((_QWORD *)v38 + 4) = v30;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorage(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *PropertyStorageWithSizeImpl;
  JSC::B3::Value *v10;
  JSC::B3::Value *v11;
  JSC::B3::Value *v13;

  v13 = a2;
  if ((*((_BYTE *)a3 + 8) & 0xE) != 0 || *((unsigned __int8 *)a3 + 9) - 39 <= 0xA)
  v10 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), -5);
  v11 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), -1);
  return PropertyStorageWithSizeImpl;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *,JSC::JSObject *),JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::DFG::Node *v14;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationAllocateComplexPropertyStorageWithInitialCapacity);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v11, v12, *a2, *a3);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, unint64_t a2)
{
  uint64_t v4;
  JSC::B3::BasicBlock *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *HeapCell;
  JSC::B3::Value *v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::B3::Value *v76;
  uint64_t v77;
  uint64_t v78;
  char **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  char v138;
  _QWORD *v139;
  uint64_t v140;

  v4 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v5 = (JSC::B3::BasicBlock *)v4;
  v6 = *((_QWORD *)this + 3473);
  if (v6)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v6, v4);
  }
  else
  {
    v140 = v4;
    v85 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v85 = 0u;
    *((_OWORD *)v85 + 1) = 0u;
    v85[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v85;
    v139 = v85;
    v85[2] = v5;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v140, (uint64_t *)&v139, v86, v87, v88, v89, v90, (uint64_t)&v137);
    v91 = v139;
    v92 = (_QWORD *)*((_QWORD *)this + 3479);
    *v139 = (char *)this + 27824;
    v91[1] = v92;
    *v92 = v91;
    *((_QWORD *)this + 3479) = v91;
  }
  v7 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v8 = v7;
  v9 = *((_QWORD *)this + 3473);
  if (v9)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v9, v7);
  }
  else
  {
    v140 = v7;
    v93 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v93 = 0u;
    *((_OWORD *)v93 + 1) = 0u;
    v93[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v93;
    v139 = v93;
    v93[2] = v8;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v140, (uint64_t *)&v139, v94, v95, v96, v97, v98, (uint64_t)&v137);
    v99 = v139;
    v100 = (_QWORD *)*((_QWORD *)this + 3479);
    *v139 = (char *)this + 27824;
    v99[1] = v100;
    *v100 = v99;
    *((_QWORD *)this + 3479) = v99;
  }
  v10 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v5;
  v11 = 8 * a2;
  v136 = v10;
  if (a2 > 0x3EC)
    v12 = 0;
  else
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + 8 * ((unint64_t)(v11 + 15) >> 4) + 6736);
  v13 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12);
  v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11 + 8);
  v16 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v15, HeapCell);
  v17 = *((_QWORD *)this + 3472);
  v18 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v19 = *((_QWORD *)this + 3471);
  v20 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v20 + 8) = -1;
  *(_WORD *)(v20 + 12) = 152;
  *(_BYTE *)(v20 + 20) = 1;
  *(_QWORD *)v20 = &unk_1E357EDA0;
  *(_DWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 40) = 0;
  *(_QWORD *)(v20 + 48) = v16;
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v20 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v18, (JSC::B3::Value *)v20);
  *(_QWORD *)&v137 = v20;
  v24 = (char **)(v17 + 8);
  v25 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v17 + 16))
  {
    v101 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, v25 + 1, (unint64_t)&v137);
    v25 = *(unsigned int *)(v17 + 20);
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v25) = *(_QWORD *)v101;
    v26 = v137;
  }
  else
  {
    *(_QWORD *)&(*v24)[8 * v25] = v20;
    v26 = v20;
  }
  *(_DWORD *)(v17 + 20) = v25 + 1;
  *(_QWORD *)(v26 + 32) = v17;
  v27 = *((_QWORD *)this + 3472);
  v28 = *((_QWORD *)this + 3470);
  v29 = *((_QWORD *)this + 3471);
  *(_QWORD *)&v137 = v8;
  BYTE8(v137) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v27, v28, 154, v29, (uint64_t *)&v137, v21, v22, v23);
  *((_QWORD *)this + 3472) = v5;
  *((_QWORD *)this + 3473) = v8;
  v30 = *(_QWORD *)(*(_QWORD *)this + 16);
  if (a2 == 4)
  {
    v31 = *((_QWORD *)this + 3485);
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v32 = v31;
    v33 = *((_QWORD *)this + 3524);
    if ((v33 & 1) != 0)
    {
      v104 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      if ((v33 & 2) != 0
        || (v105 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v105 == 0x3FFFFFFF)
        || (_DWORD)v105 == -1)
      {
        v106 = 2;
      }
      else if (v105 >> 28)
      {
        v133 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v133 = v104;
        *(_DWORD *)(v133 + 8) = v105;
        v106 = 1;
        v104 = v133;
      }
      else
      {
        v106 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
        v104 = v105 << 36;
      }
      v33 = v104 | v106;
    }
    v34 = JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
    v137 = (unint64_t)*v32;
    v138 = 3;
    JSC::B3::StackmapValue::append((__int128 *)v34, v137, (unint64_t)&v137 + 8);
    *((_QWORD *)v34 + 8) |= 0x30000uLL;
    *((_QWORD *)v34 + 10) |= 0x30000uLL;
    v40 = *((_QWORD *)this + 1);
    v41 = (unsigned int *)v137;
    if ((_QWORD)v137)
    {
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 + 1, v41));
    }
    v43 = v33;
    if ((v33 & 1) != 0)
    {
      v107 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      if ((v33 & 2) != 0
        || ((v108 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v108 != 0x3FFFFFFF)
          ? (v109 = (_DWORD)v108 == -1)
          : (v109 = 1),
            v109))
      {
        v110 = 2;
      }
      else if (v108 >> 28)
      {
        v134 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
        v131 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v131 = v134;
        *(_DWORD *)(v131 + 8) = v108;
        v110 = 1;
        v107 = v131;
      }
      else
      {
        v110 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
        v107 = v108 << 36;
      }
      v43 = v107 | v110;
    }
    v44 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v44 + 8) = 1;
    *(_QWORD *)v44 = &off_1E3576D98;
    *(_QWORD *)(v44 + 16) = v30;
    if (v41)
    {
      do
        v52 = __ldaxr(v41);
      while (__stlxr(v52 + 1, v41));
    }
    *(_QWORD *)(v44 + 24) = v41;
    *(_QWORD *)(v44 + 32) = v40;
    v53 = v43;
    if ((v43 & 1) != 0)
    {
      v111 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
      if ((v43 & 2) != 0
        || ((v112 = *(unsigned int *)((v43 & 0xFFFFFFFF8) + 8), (_DWORD)v112 != 0x3FFFFFFF)
          ? (v113 = (_DWORD)v112 == -1)
          : (v113 = 1),
            v113))
      {
        v114 = 2;
      }
      else if (v112 >> 28)
      {
        v135 = v44;
        v132 = WTF::fastMalloc((WTF *)0x10);
        v44 = v135;
        *(_QWORD *)v132 = v111;
        *(_DWORD *)(v132 + 8) = v112;
        v114 = 1;
        v111 = v132;
      }
      else
      {
        v114 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
        v111 = v112 << 36;
      }
      v53 = v111 | v114;
    }
    *(_QWORD *)(v44 + 40) = v53;
    v54 = (unsigned int *)*((_QWORD *)v34 + 7);
    *((_QWORD *)v34 + 7) = v44;
    if (v54)
    {
      v55 = v54 + 2;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v54 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
      }
    }
    if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v43 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
    if (v41)
    {
      do
      {
        v58 = __ldaxr(v41);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v41));
      if (!v59)
      {
        atomic_store(1u, v41);
        JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v41, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
      }
    }
    v60 = (unsigned int *)v137;
    *(_QWORD *)&v137 = 0;
    if (v60)
    {
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        atomic_store(1u, v60);
        JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v60, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
      }
    }
    if ((v33 & 1) != 0 && (v33 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v33 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
    WTF::fastFree((unint64_t)v32, v45, v46, v47, v48, v49, v50, v51);
  }
  else
  {
    *(_QWORD *)&v137 = *(_QWORD *)(*(_QWORD *)this + 16);
    *((_QWORD *)&v137 + 1) = a2;
  }
  v63 = *((_QWORD *)this + 3472);
  v64 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v65 = *((_QWORD *)this + 3471);
  v66 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v66 + 8) = -1;
  *(_WORD *)(v66 + 12) = 152;
  *(_DWORD *)(v66 + 16) = 0;
  *(_BYTE *)(v66 + 20) = 1;
  *(_QWORD *)v66 = &unk_1E357EDA0;
  *(_QWORD *)(v66 + 40) = 0;
  *(_QWORD *)(v66 + 48) = v34;
  *(_QWORD *)(v66 + 24) = v65;
  *(_QWORD *)(v66 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v64, (JSC::B3::Value *)v66);
  *(_QWORD *)&v137 = v66;
  v70 = (char **)(v63 + 8);
  v71 = *(unsigned int *)(v63 + 20);
  if ((_DWORD)v71 == *(_DWORD *)(v63 + 16))
  {
    v102 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v70, v71 + 1, (unint64_t)&v137);
    v71 = *(unsigned int *)(v63 + 20);
    *(_QWORD *)(*(_QWORD *)(v63 + 8) + 8 * v71) = *(_QWORD *)v102;
    v72 = v137;
  }
  else
  {
    *(_QWORD *)&(*v70)[8 * v71] = v66;
    v72 = v66;
  }
  *(_DWORD *)(v63 + 20) = v71 + 1;
  *(_QWORD *)(v72 + 32) = v63;
  v73 = *((_QWORD *)this + 3472);
  v74 = *((_QWORD *)this + 3470);
  v75 = *((_QWORD *)this + 3471);
  *(_QWORD *)&v137 = v8;
  BYTE8(v137) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v73, v74, 154, v75, (uint64_t *)&v137, v67, v68, v69);
  *((_QWORD *)this + 3472) = v8;
  *((_QWORD *)this + 3473) = v136;
  v76 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v77 = *((_QWORD *)this + 3471);
  v78 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v78 = off_1E357F5F0;
  *(_DWORD *)(v78 + 8) = -1;
  *(_WORD *)(v78 + 12) = 153;
  *(_DWORD *)(v78 + 16) = 2;
  *(_BYTE *)(v78 + 20) = 0;
  *(_QWORD *)(v78 + 24) = v77;
  *(_QWORD *)(v78 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v76, (JSC::B3::Value *)v78);
  *(_QWORD *)&v137 = v78;
  v79 = (char **)(v8 + 8);
  v80 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v80 == *(_DWORD *)(v8 + 16))
  {
    v103 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v79, v80 + 1, (unint64_t)&v137);
    v80 = *(unsigned int *)(v8 + 20);
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v80) = *(_QWORD *)v103;
    v81 = v137;
  }
  else
  {
    *(_QWORD *)&(*v79)[8 * v80] = v78;
    v81 = v78;
  }
  *(_DWORD *)(v8 + 20) = v80 + 1;
  *(_QWORD *)(v81 + 32) = v8;
  if ((*(_WORD *)(v20 + 12) & 0xFFF) == 0x98)
    v82 = v20;
  else
    v82 = 0;
  *(_QWORD *)(v82 + 40) = v78;
  if ((*(_WORD *)(v66 + 12) & 0xFFF) == 0x98)
    v83 = v66;
  else
    v83 = 0;
  *(_QWORD *)(v83 + 40) = v78;
  return v78;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2},JSC::B3::Value *>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  WTF *v13;
  WTF *v15;
  int v16;
  uint64_t v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v17[0] = a3;
  WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v15, v17, 1uLL);
  v13 = v15;
  if (v15)
  {
    v15 = 0;
    v16 = 0;
    WTF::fastFree((unint64_t)v13, v5, v6, v7, v8, v9, v10, v11);
  }
  return v12;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 40);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 5);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  WTF *v13;
  unsigned int v14;
  _BYTE *v15;
  JSC::AssemblerBuffer *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _OWORD *v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  _BYTE *v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  _BYTE *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  JSC::FTL::ExceptionTarget *v124;
  __int128 v125;
  WTF *v126;
  uint64_t v127;

  v126 = 0;
  v127 = 0;
  v9 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v9)
    goto LABEL_130;
  v13 = 0;
  v14 = 0;
  v15 = (_BYTE *)*((_QWORD *)a3 + 1);
  v16 = (JSC::AssemblerBuffer *)(16 * v9);
  v17 = 29;
  do
  {
    v18 = v15[8];
    switch(v18)
    {
      case 7:
        v19 = *v15 & 0x7F;
        v20 = 1;
        break;
      case 9:
        v19 = (*(_QWORD *)v15 << 32) | 0x1DLL;
        v20 = 2;
        break;
      case 11:
        v19 = *(_QWORD *)v15;
        v20 = 3;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197DC5668);
    }
    *(_QWORD *)&v125 = v20;
    *((_QWORD *)&v125 + 1) = v19;
    if (v14 == (_DWORD)v127)
    {
      v22 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, v14 + 1, (unint64_t)&v125);
      v21 = HIDWORD(v127);
      v13 = v126;
      *((_OWORD *)v126 + HIDWORD(v127)) = *v22;
    }
    else
    {
      *((_OWORD *)v13 + v14) = v125;
      v21 = HIDWORD(v127);
    }
    v14 = v21 + 1;
    HIDWORD(v127) = v14;
    v15 += 16;
    v16 = (JSC::AssemblerBuffer *)((char *)v16 - 16);
  }
  while (v16);
  if (!v14)
  {
LABEL_130:
    __break(0xC471u);
    JUMPOUT(0x197DC5728);
  }
  if (*((_DWORD *)v126 + 3) || v14 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DC5458);
  }
  if (*((_DWORD *)v126 + 7))
  {
    v27 = "./ftl/FTLLocation.cpp";
    v28 = "GPRReg JSC::FTL::Location::directGPR() const";
    v29 = 399;
    __break(0xC471u);
    goto LABEL_83;
  }
  v23 = *(_QWORD *)(a1 + 16);
  v24 = *((_BYTE *)v126 + 8) & 0x7F;
  v25 = *((_BYTE *)v126 + 24) & 0x7F;
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v26 + 8) = 1;
  v17 = v26 + 8;
  *(_QWORD *)v26 = off_1E3576DC0;
  *(_QWORD *)(v26 + 16) = v23;
  *(_QWORD *)(v26 + 24) = operationAllocateSimplePropertyStorageWithInitialCapacity;
  *(_BYTE *)(v26 + 32) = v24;
  v123 = (unsigned int *)v26;
  *(_BYTE *)(v26 + 33) = v25;
  *(_BYTE *)(a2 + 328) = 1;
  v16 = (JSC::AssemblerBuffer *)(a2 + 56);
  v8 = *(_DWORD *)(a2 + 200);
  if (v8 < *(_DWORD *)(a2 + 52))
    goto LABEL_84;
  while (1)
  {
    v30 = v8;
    if ((v8 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)v27, (uint64_t)v28, v29, a5, a6, a7, a8);
      v30 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = 335544320;
    v31 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v31;
    if (*(_BYTE *)(a2 + 328))
      v32 = 0xFF000F4500000000;
    else
      v32 = 0xFF000F4100000000;
    for (*(_BYTE *)(a2 + 328) = 0; v31 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v31)
    {
      if ((v31 + 4) > *(_DWORD *)(a2 + 192))
      {
        v117 = v32;
        JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)v27, (uint64_t)v28, v29, a5, a6, a7, a8);
        v32 = v117;
        v31 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -721215457;
      v31 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    v33 = *(_QWORD *)(*(_QWORD *)a3 + 104);
    v34 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
    v35 = *((unsigned int *)a3 + 9);
    if ((_DWORD)v35)
    {
      v71 = (_BYTE *)*((_QWORD *)a3 + 3);
      do
      {
        v72 = *v71 & 0x7F;
        if (v72 >= 0x40)
          goto LABEL_83;
        v73 = 1 << v72;
        v34 &= ~v73;
        v33 &= ~v73;
        ++v71;
      }
      while (--v35);
    }
    v36 = *((unsigned int *)a3 + 13);
    if (!(_DWORD)v36)
      break;
    v78 = (_BYTE *)*((_QWORD *)a3 + 5);
    while (1)
    {
      v79 = (*v78 + 32) & 0x7F;
      if (v79 >= 0x40)
        break;
      v80 = 1 << v79;
      v34 &= ~v80;
      v33 &= ~v80;
      ++v78;
      if (!--v36)
        goto LABEL_23;
    }
LABEL_83:
    __break(1u);
    do
    {
LABEL_84:
      if ((v8 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)v27, (uint64_t)v28, v29, a5, a6, a7, a8);
        v8 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v8) = -721215457;
      v8 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v8;
    }
    while (v8 < *(_DWORD *)(a2 + 52));
  }
LABEL_23:
  v122 = v32;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 24), a3, (uint64_t *)&v124);
  v37 = *(_QWORD *)(a1 + 40);
  v121 = *(_QWORD *)(a1 + 32);
  if ((v37 & 1) != 0)
  {
    v81 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    if ((v37 & 2) != 0
      || ((v82 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v82 != 0x3FFFFFFF)
        ? (v83 = (_DWORD)v82 == -1)
        : (v83 = 1),
          v83))
    {
      v84 = 2;
    }
    else if (v82 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v81;
      *(_DWORD *)(v118 + 8) = v82;
      v84 = 1;
      v81 = v118;
    }
    else
    {
      v84 = v81;
      v81 = v82 << 36;
    }
    v37 = v81 | v84;
  }
  v38 = (unsigned int *)v124;
  if (v124)
  {
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
  }
  do
    v40 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v40 + 1, (unsigned int *)v17));
  v41 = *((_QWORD *)a3 + 7);
  v42 = v37;
  if ((v37 & 1) != 0)
  {
    v85 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    if ((v37 & 2) != 0
      || ((v86 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v86 != 0x3FFFFFFF)
        ? (v87 = (_DWORD)v86 == -1)
        : (v87 = 1),
          v87))
    {
      v88 = 2;
    }
    else if (v86 >> 28)
    {
      v119 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v119 = v85;
      *(_DWORD *)(v119 + 8) = v86;
      v88 = 1;
      v85 = v119;
    }
    else
    {
      v88 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
      v85 = v86 << 36;
    }
    v42 = v85 | v88;
  }
  if (v38)
  {
    do
      v43 = __ldaxr(v38);
    while (__stlxr(v43 + 1, v38));
  }
  do
    v44 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v44 + 1, (unsigned int *)v17));
  v52 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v52 + 8) = 1;
  *(_QWORD *)v52 = &off_1E3576DE8;
  *(_DWORD *)(v52 + 16) = v8;
  *(_QWORD *)(v52 + 20) = v122;
  *(_QWORD *)(v52 + 32) = v121;
  *(_DWORD *)(v52 + 40) = v31;
  v53 = v42;
  if ((v42 & 1) != 0)
  {
    v89 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
    if ((v42 & 2) != 0
      || ((v90 = *(unsigned int *)((v42 & 0xFFFFFFFF8) + 8), (_DWORD)v90 != 0x3FFFFFFF)
        ? (v91 = (_DWORD)v90 == -1)
        : (v91 = 1),
          v91))
    {
      v92 = 2;
    }
    else if (v90 >> 28)
    {
      v120 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v120 = v89;
      *(_DWORD *)(v120 + 8) = v90;
      v92 = 1;
      v89 = v120;
    }
    else
    {
      v92 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
      v89 = v90 << 36;
    }
    v53 = v89 | v92;
  }
  *(_QWORD *)(v52 + 48) = v53;
  if (v38)
  {
    do
      v54 = __ldaxr(v38);
    while (__stlxr(v54 + 1, v38));
  }
  *(_QWORD *)(v52 + 56) = v38;
  *(_QWORD *)(v52 + 64) = v34;
  *(_QWORD *)(v52 + 72) = v33;
  v55 = v123;
  do
    v56 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v56 + 1, (unsigned int *)v17));
  *(_QWORD *)(v52 + 80) = v123;
  *(_QWORD *)&v125 = v52;
  v57 = *(unsigned int *)(v41 + 12);
  if ((_DWORD)v57 == *(_DWORD *)(v41 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v41, (uint64_t *)&v125);
    v74 = (unsigned int *)v125;
    *(_QWORD *)&v125 = 0;
    if (v74)
    {
      v75 = v74 + 2;
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      v55 = v123;
      if (!v77)
      {
        atomic_store(1u, v74 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v74 + 8))(v74);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v41 + 8 * v57) = v52;
    *(_DWORD *)(v41 + 12) = v57 + 1;
    *(_QWORD *)&v125 = 0;
  }
  do
  {
    v58 = __ldaxr((unsigned int *)v17);
    v59 = v58 - 1;
  }
  while (__stlxr(v59, (unsigned int *)v17));
  if (!v59)
  {
    atomic_store(1u, v55 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
  }
  if (v38)
  {
    do
    {
      v60 = __ldaxr(v38);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v38));
    if (!v61)
    {
      atomic_store(1u, v38);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v38, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
    }
  }
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
  do
  {
    v62 = __ldaxr((unsigned int *)v17);
    v63 = v62 - 1;
  }
  while (__stlxr(v63, (unsigned int *)v17));
  if (!v63)
  {
    atomic_store(1u, v55 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
  }
  if (v38)
  {
    do
    {
      v64 = __ldaxr(v38);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v38));
    if (!v65)
    {
      atomic_store(1u, v38);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v38, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
  }
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
  v66 = (unsigned int *)v124;
  v124 = 0;
  if (v66)
  {
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v66);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v66, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  do
  {
    v69 = __ldaxr((unsigned int *)v17);
    v70 = v69 - 1;
  }
  while (__stlxr(v70, (unsigned int *)v17));
  if (!v70)
  {
    atomic_store(1u, v55 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
  }
  if (v126)
    WTF::fastFree((unint64_t)v126, v45, v46, v47, v48, v49, v50, v51);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned __int8 *v9;
  uint64_t v12;
  _WORD *v13;
  JSC::ARM64LogicalImmediate *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int8x8_t v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t *v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint8x8_t v54;
  __int32 v55;
  uint8x8_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  void *v63;
  uint64_t v64;
  int i;
  unsigned int v66;
  char v67;
  uint64_t v68;
  int *v69;
  int *v70;
  int v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unsigned int v77;
  char *v78;
  uint64_t v79;
  _BYTE *v80;
  unsigned __int8 *v81;
  char *v82;
  unsigned __int8 *v83;
  _WORD *v84;
  int v85;
  int v86;
  int v87;
  char v88;
  __int16 v89;
  char v90;
  int v91;
  uint64_t v92;
  void *__dst;
  int v94;
  unsigned int v95;
  _WORD v96[8];
  _QWORD v97[8];

  v12 = *(_QWORD *)(a3 + 40);
  v13 = *(_WORD **)(a3 + 48);
  v14 = (JSC::ARM64LogicalImmediate *)*((unsigned int *)v13 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(unsigned __int8 *)(a1 + 32);
  LODWORD(v18) = *(unsigned __int8 *)(a1 + 33);
  if ((_DWORD)v14)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      v24 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
      v25 = "CachedTempRegister &JSC::MacroAssemblerARM64::dataMemoryTempRegister()";
      v26 = 165;
      __break(0xC471u);
LABEL_61:
      __break(1u);
LABEL_62:
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v24, (uint64_t)v25, v26, a5, a6, a7, a8);
      v62 = *(_DWORD *)(a2 + 200);
LABEL_31:
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v62) = v18;
      *(_DWORD *)(a2 + 200) += 4;
      v50 = __dst;
      v51 = v95;
LABEL_32:
      memmove(&v9[(_QWORD)v50], &v9[(_QWORD)v50 + 2], 2 * v51 - (_QWORD)v9 - 2);
      v47 = v95 - 1;
      goto LABEL_33;
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v14, a2 + 264, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::store32(a2, 16, 0x240000001DLL, v19, v20, v21, v22, v23);
  }
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v97, *((_QWORD *)v13 + 3), a2, 2u, (char)v17, 0xFFFFFFFFLL, a7, a8);
  v13 = v96;
  __dst = v96;
  v17 = 1;
  v94 = 1;
  if ((_DWORD)v18)
  {
    v96[0] = v18;
    v95 = 1;
    v8 = -1442839584;
    v47 = 1;
    while (1)
    {
      v48 = 0;
      v49 = 0;
      v50 = __dst;
      v51 = v47;
      do
      {
        if ((*((_BYTE *)__dst + v48 + 1) & 0x40) != 0)
          goto LABEL_61;
        v49 |= v17 << *((_BYTE *)__dst + v48 + 1);
        v48 += 2;
      }
      while (2 * v47 != v48);
      v52 = 0;
      do
      {
        v53 = *((_BYTE *)__dst + v52) & 0x7F;
        if (v53 >= 0x40)
          goto LABEL_61;
        v49 &= ~(v17 << v53);
        v52 += 2;
      }
      while (2 * v47 != v52);
      v54 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
      v54.i16[0] = vaddlv_u8(v54);
      v55 = v54.i32[0];
      v56 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v49));
      v56.i16[0] = vaddlv_u8(v56);
      if (v56.i32[0] + v55)
        break;
      v84 = v13;
      LODWORD(v18) = *(char *)__dst;
      v73 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, v18, v73, v26, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v95 - 2);
      v74 = v95 - 1;
      v61 = v95 == 1;
      v95 = v74;
      v9 = (unsigned __int8 *)__dst;
      v75 = (char *)__dst + 2 * v74;
      if (v61)
      {
        v76 = 0;
        v77 = 0;
        v85 = 0;
        v24 = (char *)__dst + 2 * v74;
      }
      else
      {
        v79 = 2 * v74;
        v80 = __dst;
        while (*v80 != v73)
        {
          v80 += 2;
          v79 -= 2;
          if (!v79)
            goto LABEL_73;
        }
        *v80 = v18;
LABEL_73:
        v85 = 0;
        v81 = v9;
        v24 = v75;
        v82 = v75;
        do
        {
          if (*v9 == v9[1])
          {
            v83 = v9;
            if (v82 != (char *)__dst + 2 * v95)
            {
              if (v9 == (unsigned __int8 *)v24)
              {
                v83 = (unsigned __int8 *)v82;
              }
              else
              {
                v18 = v81 - (unsigned __int8 *)v24;
                memmove(v82, v24, v81 - (unsigned __int8 *)v24);
                v83 = (unsigned __int8 *)&v82[v18];
              }
            }
            v24 = (char *)(v9 + 2);
            ++v85;
            v82 = (char *)v83;
          }
          v9 += 2;
          v81 += 2;
        }
        while (v9 < (unsigned __int8 *)v75);
        v9 = (unsigned __int8 *)__dst;
        v76 = v95;
        v77 = v95;
        v75 = v82;
      }
      v78 = (char *)&v9[2 * v76];
      if (v24 != v78)
      {
        memmove(v75, v24, v78 - v24);
        v77 = v95;
      }
      v47 = v77 - v85;
      v13 = v84;
      v17 = 1;
      v8 = -1442839584;
LABEL_33:
      v95 = v47;
LABEL_34:
      if (!v47)
      {
        v63 = __dst;
        if (v13 != __dst && __dst)
        {
          __dst = 0;
          v94 = 0;
          WTF::fastFree((unint64_t)v63, v24, (uint64_t)v25, v26, a5, a6, a7, a8);
        }
        goto LABEL_5;
      }
    }
    v9 = 0;
    if (v47 <= 1uLL)
      v57 = 1;
    else
      v57 = v47;
    v58 = 2 * v57;
    while (1)
    {
      v59 = v9[(_QWORD)__dst + 1];
      if ((v59 & 0x7Fu) >= 0x40)
        goto LABEL_61;
      if (((v49 >> (v59 & 0x7F)) & 1) != 0)
        break;
      v9 += 2;
      if ((unsigned __int8 *)v58 == v9)
        goto LABEL_34;
    }
    v60 = v9[(_QWORD)__dst];
    if (v60 == v59)
      goto LABEL_32;
    if ((char)v60 == 63)
    {
      if ((char)v59 != 31)
      {
        LODWORD(v18) = v59 & 0x1F | 0xD2800000;
LABEL_30:
        v62 = *(_DWORD *)(a2 + 200);
        if (v62 + 4 > *(_DWORD *)(a2 + 192))
          goto LABEL_62;
        goto LABEL_31;
      }
    }
    else
    {
      v61 = v59 == 31 || (char)v60 == 31;
      if (!v61)
      {
        LODWORD(v18) = v59 & 0xFFE0FFFF | ((v60 & 0x1F) << 16) | v8;
        goto LABEL_30;
      }
    }
    LODWORD(v18) = (char)v59 | (32 * (char)v60) | 0x91000000;
    goto LABEL_30;
  }
LABEL_5:
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v97, v15, v16, v26, a5, a6, a7, a8, (uint64_t)&__dst);
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v97, v27, v28, v29, v30, v31, v32, v33);
  if (v12)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a2, v15, 0, 0, 0xFFFFFFFFLL, v38, v39, v40, (uint64_t)&v91, v41);
    v42 = v91;
    if (v91 != -1)
    {
      v43 = *(unsigned int *)(v12 + 12);
      if ((_DWORD)v43 == *(_DWORD *)(v12 + 8))
      {
        v44 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (void *)(v43 + 1), (unint64_t)&v91, v36, v37, v38, v39, v40);
        v46 = *v44;
        v45 = (uint64_t *)(v44 + 1);
        v42 = v46;
        LODWORD(v43) = *(_DWORD *)(v12 + 12);
      }
      else
      {
        v45 = &v92;
      }
      v64 = *(_QWORD *)v12 + 12 * v43;
      *(_DWORD *)v64 = v42;
      *(_QWORD *)(v64 + 4) = *v45;
      ++*(_DWORD *)(v12 + 12);
    }
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v34, v35, v36, v37, v38, v39, v40);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v66 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v34, v35, v36, v37, v38, v39, v40);
    v66 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v66) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v67 = 69;
  else
    v67 = 65;
  v86 = i;
  v87 = 0;
  v88 = v67;
  v89 = 15;
  v90 = -1;
  if (i != -1)
  {
    v68 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v68 == *(_DWORD *)(a3 + 8))
    {
      v69 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v68 + 1), (unint64_t)&v86, v36, v37, v38, v39, v40);
      v71 = *v69;
      v70 = v69 + 1;
      v72 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v72 = v71;
    }
    else
    {
      v70 = &v87;
      v72 = *(_QWORD *)a3 + 12 * v68;
      *(_DWORD *)v72 = i;
    }
    *(_QWORD *)(v72 + 4) = *(_QWORD *)v70;
    ++*(_DWORD *)(a3 + 12);
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::ARM64LogicalImmediate *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  const void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  JSC::ExecutableMemoryHandle *v120[2];

  v10 = (unsigned int *)(a1 + 16);
  v119 = *(_BYTE *)(a2 + 212);
  if (!v119)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v19 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v18 + 308);
  if ((_DWORD)v19 == *(_DWORD *)(v18 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v18 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v18 + 296) + 8 * (_QWORD)v19) = 0;
    *(_DWORD *)(v18 + 308) = (_DWORD)v19 + 1;
  }
  v20 = *(_DWORD *)(a2 + 200);
  if (v20 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v11, v12, v13, v14, v15, v16, v17);
    v20 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v19, 16, v13, v14, v15, v16, v17);
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -134216720;
  v29 = *(_DWORD *)(a2 + 200);
  v30 = v29 + 4;
  *(_DWORD *)(a2 + 200) = v29 + 4;
  if ((v29 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v30 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v31 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v31 + 90440), v31, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v23, v24, v25, v26, v27, v120);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v120[0], v32, v33, v34, v35, v36, v37);
  v45 = (unsigned int *)v120[1];
  v120[1] = 0;
  if (v45)
  {
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v45, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
  }
  v48 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  if (v48)
  {
    v49 = v48 + 2;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
    v51 = *(_DWORD *)(a1 + 16);
    v52 = *(_QWORD *)(a1 + 20);
    v53 = *(_DWORD *)(a1 + 40);
    do
      v54 = __ldaxr(v49);
    while (__stlxr(v54 + 1, v49));
  }
  else
  {
    v51 = *(_DWORD *)(a1 + 16);
    v52 = *(_QWORD *)(a1 + 20);
    v53 = *(_DWORD *)(a1 + 40);
  }
  v55 = *(_QWORD *)(a1 + 48);
  if ((v55 & 1) != 0)
  {
    v93 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v94 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v94 != 0x3FFFFFFF)
        ? (v95 = (_DWORD)v94 == -1)
        : (v95 = 1),
          v95))
    {
      v96 = 2;
    }
    else if (v94 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v93;
      *(_DWORD *)(v117 + 8) = v94;
      v96 = 1;
      v93 = v117;
    }
    else
    {
      v96 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      v93 = v94 << 36;
    }
    v55 = v93 | v96;
  }
  v56 = *(unsigned int **)(a1 + 56);
  if (v56)
  {
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  *(_OWORD *)v120 = *(_OWORD *)(a1 + 64);
  v58 = *(unsigned int **)(a1 + 80);
  if (v58)
  {
    v59 = v58 + 2;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  v61 = WTF::fastMalloc((WTF *)0x58);
  v69 = v61;
  *(_DWORD *)(v61 + 8) = 1;
  *(_QWORD *)v61 = &off_1E3576E10;
  *(_DWORD *)(v61 + 16) = v51;
  *(_QWORD *)(v61 + 20) = v52;
  *(_DWORD *)(v61 + 28) = v53;
  if (v48)
  {
    v70 = v48 + 2;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 + 1, v70));
  }
  *(_QWORD *)(v61 + 32) = v48;
  v72 = v55;
  if ((v55 & 1) != 0)
  {
    v97 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v98 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v98 != 0x3FFFFFFF)
        ? (v99 = (_DWORD)v98 == -1)
        : (v99 = 1),
          v99))
    {
      v100 = 2;
    }
    else if (v98 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v97;
      *(_DWORD *)(v118 + 8) = v98;
      v100 = 1;
      v97 = v118;
    }
    else
    {
      v100 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      v97 = v98 << 36;
    }
    v72 = v97 | v100;
  }
  *(_QWORD *)(v69 + 40) = v72;
  if (v56)
  {
    do
      v73 = __ldaxr(v56);
    while (__stlxr(v73 + 1, v56));
  }
  *(_QWORD *)(v69 + 48) = v56;
  *(_OWORD *)(v69 + 56) = *(_OWORD *)v120;
  if (v58)
  {
    v74 = v58 + 2;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 + 1, v74));
  }
  *(_QWORD *)(v69 + 72) = v58;
  *(_DWORD *)(v69 + 80) = (_DWORD)v19;
  v76 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v76 == *(_DWORD *)(a2 + 240))
  {
    v88 = v76 + (v76 >> 2);
    if (v88 >= 0x10)
      v89 = v88 + 1;
    else
      v89 = 16;
    if (v89 <= v76 + 1)
      v90 = v76 + 1;
    else
      v90 = v89;
    if (v90 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v91 = *(const void **)(a2 + 232);
    v92 = (void *)WTF::fastMalloc((WTF *)(8 * v90));
    *(_DWORD *)(a2 + 240) = v90;
    *(_QWORD *)(a2 + 232) = v92;
    memcpy(v92, v91, 8 * v76);
    if (v91)
    {
      if (*(const void **)(a2 + 232) == v91)
      {
        *(_QWORD *)(a2 + 232) = 0;
        *(_DWORD *)(a2 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v91, v62, v63, v64, v65, v66, v67, v68);
    }
    v76 = *(unsigned int *)(a2 + 244);
    v77 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v76);
  }
  else
  {
    v77 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v76);
  }
  *v77 = v69;
  *(_DWORD *)(a2 + 244) = v76 + 1;
  if (v58)
  {
    v78 = v58 + 2;
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
  if (v56)
  {
    do
    {
      v81 = __ldaxr(v56);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v56));
    if (!v82)
    {
      atomic_store(1u, v56);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v56, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v55 & 0xFFFFFFFF8, v62, v63, v64, v65, v66, v67, v68);
  if (v48)
  {
    v83 = v48 + 2;
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 32))(v48);
    }
    do
    {
      v86 = __ldaxr(v83);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, v83));
    if (!v87)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 32))(v48);
    }
  }
  *(_BYTE *)(a2 + 212) = v119;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DC6A48);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DC6A68);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DC6A88);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
      goto LABEL_73;
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x197DC6A10);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  JSC::CodeOrigin::CodeOrigin(&v40, (const JSC::CodeOrigin *)(a1 + 3524));
  v11 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v12 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a3;
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      v35 = (unint64_t)v15;
      LOBYTE(v36) = 3;
      JSC::B3::StackmapValue::append(v11, v15, (unint64_t)&v35 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  *((_QWORD *)v11 + 8) |= 0x30000uLL;
  *((_QWORD *)v11 + 10) |= 0x30000uLL;
  v16 = a1[1];
  v35 = *a2;
  v17 = v39;
  if (v39)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = v39;
  }
  else
  {
    v19 = 0;
  }
  v36 = v17;
  v37 = v16;
  JSC::CodeOrigin::CodeOrigin(&v38, (const JSC::CodeOrigin *)&v40);
  if (v19)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v19, v27, v28, v29, v30, v31, v32, v33);
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  return v11;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576E38;
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  v2 = *(unsigned int **)(a2 + 16);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v5;
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v7 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      result = v12;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v4 = v6 | v9;
  }
  *(_QWORD *)(result + 48) = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  uint64_t v58[5];
  unsigned int *v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int *v63;
  unint64_t v64;
  uint64_t v65;

  v64 = 0;
  v65 = 0;
  v6 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_BYTE **)(a3 + 8);
    v8 = 16 * v6;
    while (1)
    {
      v9 = v7[8];
      switch(v9)
      {
        case 7:
          v10 = *v7 & 0x7F;
          v11 = 1;
          break;
        case 9:
          v10 = (*(_QWORD *)v7 << 32) | 0x1DLL;
          v11 = 2;
          break;
        case 11:
          v10 = *(_QWORD *)v7;
          v11 = 3;
          break;
        default:
          __break(0xC471u);
          return;
      }
      *(_QWORD *)&v55 = v11;
      *((_QWORD *)&v55 + 1) = v10;
      v12 = HIDWORD(v65);
      if (HIDWORD(v65) == (_DWORD)v65)
      {
        WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::Location>((uint64_t)&v64, (unint64_t)&v55);
      }
      else
      {
        *(_OWORD *)(v64 + 16 * HIDWORD(v65)) = v55;
        HIDWORD(v65) = v12 + 1;
      }
      v7 += 16;
      v8 -= 16;
      if (!v8)
      {
        v13 = v64;
        v14 = HIDWORD(v65);
        goto LABEL_10;
      }
    }
  }
  v14 = 0;
  v13 = 0;
LABEL_10:
  JSC::MacroAssemblerARM64::patchableJump(a2, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v61);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a2, v22, v23, v24, v25, v26, v27, v28, &v60);
  v29 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v31 = v30;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v59);
  LODWORD(v55) = v61;
  *(_QWORD *)((char *)&v55 + 4) = v62;
  v56 = *(_QWORD *)(a1 + 24);
  v57 = v60;
  JSC::CodeOrigin::CodeOrigin(v58, (const JSC::CodeOrigin *)(a1 + 32));
  v32 = v59;
  if (v59)
  {
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  v58[1] = (uint64_t)v32;
  v58[2] = v29;
  v58[3] = v31;
  v34 = (uint64_t)v63;
  if (v63)
  {
    v35 = v63 + 2;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 + 1, v35));
  }
  v58[4] = v34;
  if (v59)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v59, v44, v45, v46, v47, v48, v49, v50);
  v51 = v63;
  v63 = 0;
  if (v51)
  {
    v52 = v51 + 2;
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
    }
  }
  if (v64)
    WTF::fastFree(v64, v44, v45, v46, v47, v48, v49, v50);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}::operator()(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a4)
  {
    __break(0xC471u);
    JUMPOUT(0x197DC729CLL);
  }
  if (*(_DWORD *)(a3 + 12) || a4 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DC7274);
  }
  if (*(_DWORD *)(a3 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x197DC7294);
  }
  v5 = *(_DWORD *)(a3 + 8) & 0x7F;
  v6 = *(_BYTE *)(a3 + 24) & 0x7F;
  v7 = *a2;
  v8 = a2[1];
  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3576BE0;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = operationAllocateSimplePropertyStorage;
  *(_BYTE *)(result + 32) = v5;
  *(_BYTE *)(result + 33) = v6;
  *(_QWORD *)(result + 40) = v8;
  *a1 = result;
  return result;
}

_QWORD *JSC::B3::StackmapGenerationParams::addLatePath<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[9];
  unsigned int *v19;

  v3 = WTF::fastMalloc((WTF *)0x58);
  v4 = _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(v3, (uint64_t)v18);
  v19 = (unsigned int *)v4;
  v12 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v19);
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v4;
    *(_DWORD *)(a1 + 12) = v12 + 1;
  }
}

uint64_t _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576E60;
  *(_DWORD *)(result + 16) = *(_DWORD *)a2;
  *(_QWORD *)(result + 20) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = result;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      result = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)(result + 48) = v2;
  v3 = *(unsigned int **)(a2 + 40);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 56) = v3;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 80) = v5;
  return result;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

_QWORD *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatePropertyStorageWithSizeImpl(unsigned long)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *result;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[12];
  int v59;
  unsigned int *v60;
  uint64_t v61[2];
  __int128 v62;
  uint64_t v63;
  int v64;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v18 = *(unsigned int *)(v17 + 308);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v17 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v17 + 296) + 8 * v18) = 0;
    *(_DWORD *)(v17 + 308) = v18 + 1;
  }
  JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters((unsigned int *)a2, v18, v11, v12, v13, v14, v15, v16);
  v19 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v19 + 90440), v19, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v20, v21, v22, v23, v24, v58);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, *(uint64_t *)v58, v25, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v58, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 24);
  if (v38)
  {
    v39 = v38 + 2;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
  }
  else
  {
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
  }
  v60 = v38;
  JSC::CodeOrigin::CodeOrigin(v61, (const JSC::CodeOrigin *)(a1 + 32));
  v42 = *(unsigned int **)(a1 + 40);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v61[1] = (uint64_t)v42;
  v62 = *(_OWORD *)(a1 + 48);
  v44 = *(_QWORD *)(a1 + 64);
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v63 = v44;
  v64 = v18;
  _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_35allocatePropertyStorageWithSizeImplEmEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE0_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(a2, (uint64_t)v58);
  if (v38)
  {
    v55 = v38 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v38 + 2);
      result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v38 + 32))(v38);
    }
  }
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_35allocatePropertyStorageWithSizeImplEmEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE0_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3576E88;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)a2;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v4 + 32) = v6;
  v9 = *(_QWORD *)(a2 + 24);
  if ((v9 & 1) != 0)
  {
    v29 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v30 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v33 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = v33;
      *(_DWORD *)(v29 + 8) = v30;
      v32 = 1;
    }
    else
    {
      v32 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = v30 << 36;
    }
    v9 = v29 | v32;
  }
  *(_QWORD *)(v5 + 40) = v9;
  v10 = *(unsigned int **)(a2 + 32);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v5 + 72) = v12;
  *(_DWORD *)(v5 + 80) = *(_DWORD *)(a2 + 64);
  v15 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 240))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
LABEL_21:
    *v16 = v5;
    *(_DWORD *)(a1 + 244) = v15 + 1;
    return;
  }
  v17 = v15 + (v15 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15 + 1)
    v19 = v15 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = *(const void **)(a1 + 232);
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(a1 + 240) = v19;
    *(_QWORD *)(a1 + 232) = v21;
    memcpy(v21, v20, 8 * v15);
    if (v20)
    {
      if (*(const void **)(a1 + 232) == v20)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
    }
    v15 = *(unsigned int *)(a1 + 244);
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
    goto LABEL_21;
  }
  __break(0xC471u);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_35allocatePropertyStorageWithSizeImplEmEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, JSC::LinkBuffer *a2)
{
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::reallocatePropertyStorage(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, JSC::B3::Value *a3, JSC::Structure *a4, JSC::Structure *a5)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  JSC::B3::Value *PropertyStorageWithSizeImpl;
  unint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;

  v26 = a2;
  v8 = JSC::Structure::outOfLineCapacity(a4);
  v9 = 2 * v8;
  if ((*((_BYTE *)a4 + 8) & 0xE) != 0 || *((unsigned __int8 *)a4 + 9) - 39 <= 0xA)
  {
    v25 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v9);
  }
  else
  {
    v10 = v8;
    if ((_DWORD)v10)
    {
      v12 = -16;
      do
      {
        v13 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12);
        v14 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a3, v13);
        v15 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 25512), v14, 2);
        v16 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12);
        v17 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), PropertyStorageWithSizeImpl, v16);
        JSC::FTL::Output::store((uint64_t)this + 27640, v15, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 25512), v17);
        v12 -= 8;
      }
      while (v12 > -16 - 8 * v10);
    }
    v18 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), ~(_DWORD)v9);
    v19 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), ~(_DWORD)v10);
  }
  return PropertyStorageWithSizeImpl;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *,JSC::JSObject *,unsigned long),JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationAllocateComplexPropertyStorage);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::nukeStructureAndSetButterfly@<X0>(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this@<X0>, JSC::B3::Value *a2@<X1>, JSC::B3::Value *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::B3::Value *v49;
  uint64_t v50;
  JSC::B3::Value *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  JSC::B3::Value *v61;
  JSC::B3::Value *v62;
  JSC::B3::Value *v63;
  uint64_t v64;
  JSC::B3::Value *v65;
  JSC::B3::Value *v66;
  uint64_t v67;
  JSC::B3::Value *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t result;
  uint64_t v76;
  char v77;
  uint64_t *v78;
  uint64_t *v79;

  v7 = JSC::B3::Procedure::addBlock(a4, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v8 = (uint64_t)v7;
  v9 = *((_QWORD *)this + 3473);
  if (v9)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v9, (uint64_t)v7);
  }
  else
  {
    v79 = v7;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v11 = 0u;
    *((_OWORD *)v11 + 1) = 0u;
    v11[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v11;
    v78 = v11;
    v11[2] = v8;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v79, (uint64_t *)&v78, v12, v13, v14, v15, v16, (uint64_t)&v76);
    v10 = v78;
    v17 = (uint64_t **)*((_QWORD *)this + 3479);
    *v78 = (uint64_t)this + 27824;
    v10[1] = (uint64_t)v17;
    *v17 = v10;
    *((_QWORD *)this + 3479) = v10;
  }
  v18 = JSC::B3::Procedure::addBlock(v10, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v19 = (uint64_t)v18;
  v20 = *((_QWORD *)this + 3473);
  if (v20)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v20, (uint64_t)v18);
  }
  else
  {
    v79 = v18;
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v22 = 0u;
    *((_OWORD *)v22 + 1) = 0u;
    v22[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v22;
    v78 = v22;
    v22[2] = v19;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v79, (uint64_t *)&v78, v23, v24, v25, v26, v27, (uint64_t)&v76);
    v21 = v78;
    v28 = (uint64_t **)*((_QWORD *)this + 3479);
    *v78 = (uint64_t)this + 27824;
    v21[1] = (uint64_t)v28;
    *v28 = v21;
    *((_QWORD *)this + 3479) = v21;
  }
  v29 = JSC::B3::Procedure::addBlock(v21, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v30 = (uint64_t)v29;
  v31 = *((_QWORD *)this + 3473);
  if (v31)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v31, (uint64_t)v29);
  }
  else
  {
    v79 = v29;
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v32 = 0u;
    *((_OWORD *)v32 + 1) = 0u;
    v32[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v32;
    v78 = v32;
    v32[2] = v30;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v79, (uint64_t *)&v78, v33, v34, v35, v36, v37, (uint64_t)&v76);
    v38 = v78;
    v39 = (uint64_t **)*((_QWORD *)this + 3479);
    *v78 = (uint64_t)this + 27824;
    v38[1] = (uint64_t)v39;
    *v39 = v38;
    *((_QWORD *)this + 3479) = v38;
  }
  v40 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v8;
  v41 = (JSC::B3::Value *)*((_QWORD *)this + 3485);
  v42 = *((_QWORD *)this + 785);
  if (v42)
  {
    v43 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v42);
    v41 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v41, v43);
  }
  v44 = JSC::FTL::Output::load8ZeroExt32((_QWORD *)this + 3455, (uint64_t)this + 6256, (uint64_t)v41);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, v44, v19, v8, 0.0, 1.0, v45, v46, v47, v48);
  *((_QWORD *)this + 3472) = v8;
  *((_QWORD *)this + 3473) = v19;
  v49 = a3;
  v50 = *((_QWORD *)this + 449);
  if (v50)
  {
    v51 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v50);
    v49 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a3, v51);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, (uint64_t)a2, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3568), (uint64_t)v49);
  v52 = *((_QWORD *)this + 3472);
  v53 = *((_QWORD *)this + 3470);
  v54 = *((_QWORD *)this + 3471);
  v76 = v30;
  v77 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v52, v53, 154, v54, &v76, v55, v56, v57);
  *((_QWORD *)this + 3472) = v19;
  *((_QWORD *)this + 3473) = v30;
  v58 = a3;
  v59 = *((_QWORD *)this + 383);
  if (v59)
  {
    v60 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v59);
    v58 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a3, v60);
  }
  v61 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3040), (uint64_t)v58, 1);
  v62 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v63 = JSC::FTL::Output::bitOr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v61, v62);
  v64 = *((_QWORD *)this + 383);
  v65 = a3;
  if (v64)
  {
    v66 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v64);
    v65 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a3, v66);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, (uint64_t)v63, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3040), (uint64_t)v65);
  JSC::FTL::Output::fence((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 16), 0);
  v67 = *((_QWORD *)this + 449);
  if (v67)
  {
    v68 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v67);
    a3 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a3, v68);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, (uint64_t)a2, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3568), (uint64_t)a3);
  JSC::FTL::Output::fence((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 16), 0);
  v69 = *((_QWORD *)this + 3472);
  v70 = *((_QWORD *)this + 3470);
  v71 = *((_QWORD *)this + 3471);
  v76 = v30;
  v77 = 0;
  result = JSC::B3::BasicBlock::appendNewControlValue(v69, v70, 154, v71, &v76, v72, v73, v74);
  *((_QWORD *)this + 3472) = v30;
  *((_QWORD *)this + 3473) = v40;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::DFG::Node *v14;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationToNumberString);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v11, v12, *a2, *a3);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::numberToStringWithValidRadixConstant(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  char v16;
  _QWORD *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  int8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::BasicBlock *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x8_t v34;
  JSC::B3::Value *v35;
  JSC::B3::Value *v36;
  JSC::B3::Value *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  JSC::FTL::IndexedAbstractHeap *v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  JSC::B3::Value *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  JSC::B3::Value *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int8x8_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v8 = a3;
  v11 = *a1;
  v12 = a1[3524];
  if ((v12 & 1) == 0)
  {
    v13 = *(_QWORD *)(v11 + 32);
LABEL_3:
    v14 = (_QWORD *)(v12 & 0xFFFFFFFF8);
    v15 = 1;
    v16 = 1;
LABEL_4:
    v17 = v14;
    goto LABEL_5;
  }
  v88 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v89 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v89 != 0x3FFFFFFF) ? (v90 = v89 == -1) : (v90 = 1), v90))
  {
    v91 = 2;
  }
  else if (v89 >> 28)
  {
    v97 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v97 = v88;
    *(_DWORD *)(v97 + 8) = v89;
    v91 = 1;
    v88 = v97;
  }
  else
  {
    v91 = v88;
    v88 = 0;
  }
  v12 = v88 | v91;
  v13 = *(_QWORD *)(v11 + 32);
  if (((v88 | v91) & 1) == 0)
    goto LABEL_3;
  v92 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v93 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v93 != 0x3FFFFFFF) ? (v94 = v93 == -1) : (v94 = 1), v94))
  {
    v95 = 2;
  }
  else if (v93 >> 28)
  {
    v98 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v98 = v92;
    *(_DWORD *)(v98 + 8) = v93;
    v95 = 1;
    v92 = v98;
  }
  else
  {
    v95 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    v92 = 0;
  }
  v96 = v92 | v95;
  v14 = (_QWORD *)(v96 & 0xFFFFFFFF8);
  if ((v96 & 1) == 0)
  {
    v16 = 0;
    v15 = 1;
    goto LABEL_4;
  }
  v15 = 0;
  v16 = 0;
  v17 = (_QWORD *)*v14;
LABEL_5:
  if (v17)
    v13 = v17[1];
  v18 = *(JSC::JSCell **)(v13 + 8);
  if ((v15 & 1) == 0 && v14)
    WTF::fastFree((unint64_t)v14, (void *)a2, a3, a4, a5, a6, a7, a8);
  if ((v16 & 1) == 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
  v19 = (a2 >> 50) & 0x3F;
  switch((_DWORD)v19)
  {
    case 0x31:
      JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*a1 + 24) + 280), (unint64_t)v18, a3, a4, a5, a6, a7, a8);
      v101 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), (uint64_t)v18);
      v99 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), v8);
    case 1:
      if (v8 == 10)
      {
        v25 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
        v26 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
        v27 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
        v101 = (uint64_t)v35;
        v36 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 256);
        v37 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::Output *)(a1 + 3455), v35, v36);
        JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v37, v26, v25, NAN, NAN, v38, v39, v40, v41);
        a1[3472] = v25;
        v42 = a1[3473];
        a1[3473] = v26;
        v43 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), *(_QWORD *)(*a1 + 16) + 44272);
        v46 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)(a1 + 3455), v44, v45, 2);
        v47 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 3455), v46);
        v49 = v48;
        v50 = JSC::FTL::Output::isZero64((JSC::FTL::Output *)(a1 + 3455), v46);
        JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v50, v26, (uint64_t)v27, NAN, NAN, v51, v52, v53, v54);
        a1[3472] = v26;
        a1[3473] = v27;
        v99 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 10);
        v66 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 3455), v65);
        v68 = v67;
        JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 3455), v27, v69, v70, v71, v72, v73, v74);
        a1[3472] = v27;
        a1[3473] = v42;
        return JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(a1 + 3455, 2, v47, v49, v66, v68);
      }
      else
      {
        v99 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), v8);
      }
    case 0x34:
      v99 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), v8);
    default:
      __break(0xC471u);
      JUMPOUT(0x197DC875CLL);
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,int,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationInt32ToStringWithValidRadix);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,int,int),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v15 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v13, v14, *a3, *a4, *a5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,long long,int),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::DFG::Node *v32;
  WTF *v33;
  char **v34;
  uint64_t v35;
  WTF *v36;
  char *v38;
  WTF *v39;
  uint64_t v40;

  v13 = (int *)(a1 + 28264);
  v14 = *(_DWORD *)(a1 + 28264);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 27848);
    v39 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v39 = 0x200000002;
    v40 = 0x200000002;
    v23 = (_QWORD *)(v15 + 32);
    v24 = *(unsigned int *)(v15 + 44);
    if ((_DWORD)v24 == *(_DWORD *)(v15 + 40))
    {
      v25 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v39);
      v26 = *(_QWORD *)(v15 + 32) + 16 * *(unsigned int *)(v15 + 44);
    }
    else
    {
      v26 = *v23 + 16 * v24;
      v25 = (unint64_t)&v39;
    }
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v27 = *(_QWORD *)v25;
    *(_QWORD *)v25 = 0;
    *(_QWORD *)v26 = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 8);
    *(_DWORD *)(v25 + 8) = 0;
    *(_DWORD *)(v26 + 8) = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 12);
    *(_DWORD *)(v25 + 12) = 0;
    *(_DWORD *)(v26 + 12) = v27;
    ++*(_DWORD *)(v15 + 44);
    v14 = v24 | 0x80000000;
    *v13 = v24 | 0x80000000;
    v28 = v39;
    if (v39)
    {
      v39 = 0;
      LODWORD(v40) = 0;
      WTF::fastFree((unint64_t)v28, v16, v17, v18, v19, v20, v21, v22);
      v14 = *v13;
    }
  }
  v29 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v30 = *a4;
  v31 = *(_QWORD *)(a1 + 27776);
  v33 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v14, *(_QWORD *)(a1 + 27768), v29, *a3, v30, *a5);
  v39 = v33;
  v34 = (char **)(v31 + 8);
  v35 = *(unsigned int *)(v31 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v31 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, v35 + 1, (unint64_t)&v39);
    v35 = *(unsigned int *)(v31 + 20);
    *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v35) = *(_QWORD *)v38;
    v36 = v39;
  }
  else
  {
    *(_QWORD *)&(*v34)[8 * v35] = v33;
    v36 = v33;
  }
  *(_DWORD *)(v31 + 20) = v35 + 1;
  *((_QWORD *)v36 + 4) = v31;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,double,int),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::DFG::Node *v18;
  WTF *v19;
  char **v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  char *v33;
  WTF *v34;
  uint64_t v35;

  v13 = (int *)(a1 + 28264);
  v14 = *(_DWORD *)(a1 + 28264);
  if ((v14 & 0x80000000) == 0)
  {
    v24 = *(_QWORD *)(a1 + 27848);
    v34 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v34 = 0x200000002;
    v35 = 0x200000002;
    v14 = JSC::B3::Procedure::addTuple(v24, (unint64_t)&v34);
    *v13 = v14;
    v32 = v34;
    if (v34)
    {
      v34 = 0;
      LODWORD(v35) = 0;
      WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
      v14 = *v13;
    }
  }
  v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v16 = *a4;
  v17 = *(_QWORD *)(a1 + 27776);
  v19 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v14, *(_QWORD *)(a1 + 27768), v15, *a3, v16, *a5);
  v34 = v19;
  v20 = (char **)(v17 + 8);
  v21 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v21 == *(_DWORD *)(v17 + 16))
  {
    v33 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20, v21 + 1, (unint64_t)&v34);
    v21 = *(unsigned int *)(v17 + 20);
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v21) = *(_QWORD *)v33;
    v22 = v34;
  }
  else
  {
    *(_QWORD *)&(*v20)[8 * v21] = v19;
    v22 = v19;
  }
  *(_DWORD *)(v17 + 20) = v21 + 1;
  *((_QWORD *)v22 + 4) = v17;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(JSC::DFG::Edge &,JSC::B3::Value *)#1}::operator()(uint64_t a1, unint64_t *a2, JSC::B3::Value *a3)
{
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  uint64_t v36;
  uint64_t v37;
  char **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const JSC::FTL::AbstractHeap *v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  JSC::B3::Value *v61;
  uint64_t v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  uint64_t v65;
  uint64_t v66;
  JSC::B3::Value *v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  JSC::B3::Value *v74;
  uint64_t v75;
  uint64_t v76;
  JSC::B3::Value *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  JSC::B3::Value *v89;
  uint64_t v90;
  uint64_t v91;
  char **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  JSC::B3::Value *v98;
  uint64_t v99;
  uint64_t v100;
  char **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t **v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t **v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t **v128;
  JSC::FTL::Output *v129;
  unint64_t v130;
  int v131;
  uint64_t v132;
  int *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t *v145;
  uint64_t *v146;

  v6 = *a2 & 0xFF00FFFFFFFFFFFFLL;
  if (*(unsigned __int16 *)(v6 + 0x12) <= 2u
    && ((v7 = **(_QWORD **)((*a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48), v6 = v7 & 0xFFFE000000000002, v7)
      ? (v8 = v6 == 0)
      : (v8 = 0),
        v8 && (v6 = *(unsigned __int8 *)(v7 + 5), (_DWORD)v6 == 2)))
  {
    v129 = (JSC::FTL::Output *)(a1 + 27640);
    v130 = *(_QWORD *)(v7 + 8);
    if ((v130 & 1) != 0)
      v130 = (v130 >> 2) & 1;
    else
      LODWORD(v130) = (*(unsigned __int8 *)(v130 + 16) >> 2) & 1;
    if ((_DWORD)v130)
      v131 = 4;
    else
      v131 = 0;
    v91 = JSC::FTL::Output::constInt32(v129, v131);
    v132 = *(_QWORD *)(v7 + 8);
    if ((v132 & 1) != 0)
      v133 = (int *)(v7 + 16);
    else
      v133 = (int *)(v132 + 4);
    JSC::FTL::Output::constInt32(v129, *v133);
  }
  else
  {
    v9 = JSC::B3::Procedure::addBlock((uint64_t *)v6, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v10 = v9;
    v11 = *(_QWORD *)(a1 + 27784);
    if (v11)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v11, (uint64_t)v9);
    }
    else
    {
      v146 = v9;
      v107 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v107 = 0u;
      *((_OWORD *)v107 + 1) = 0u;
      v107[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v107;
      v145 = v107;
      v107[2] = v10;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v146, (uint64_t *)&v145, v108, v109, v110, v111, v112, (uint64_t)&v143);
      v12 = v145;
      v113 = *(uint64_t ***)(a1 + 27832);
      *v145 = a1 + 27824;
      v12[1] = (uint64_t)v113;
      *v113 = v12;
      *(_QWORD *)(a1 + 27832) = v12;
    }
    v13 = JSC::B3::Procedure::addBlock(v12, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v14 = (uint64_t)v13;
    v15 = *(_QWORD *)(a1 + 27784);
    if (v15)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v15, (uint64_t)v13);
    }
    else
    {
      v146 = v13;
      v114 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v114 = 0u;
      *((_OWORD *)v114 + 1) = 0u;
      v114[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v114;
      v145 = v114;
      v114[2] = v14;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v146, (uint64_t *)&v145, v115, v116, v117, v118, v119, (uint64_t)&v143);
      v16 = v145;
      v120 = *(uint64_t ***)(a1 + 27832);
      *v145 = a1 + 27824;
      v16[1] = (uint64_t)v120;
      *v120 = v16;
      *(_QWORD *)(a1 + 27832) = v16;
    }
    v17 = JSC::B3::Procedure::addBlock(v16, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v18 = (uint64_t)v17;
    v19 = *(_QWORD *)(a1 + 27784);
    if (v19)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v19, (uint64_t)v17);
    }
    else
    {
      v146 = v17;
      v121 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v121 = 0u;
      *((_OWORD *)v121 + 1) = 0u;
      v121[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v121;
      v145 = v121;
      v121[2] = v18;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v146, (uint64_t *)&v145, v122, v123, v124, v125, v126, (uint64_t)&v143);
      v127 = v145;
      v128 = *(uint64_t ***)(a1 + 27832);
      *v145 = a1 + 27824;
      v127[1] = (uint64_t)v128;
      *v128 = v127;
      *(_QWORD *)(a1 + 27832) = v127;
    }
    v142 = (uint64_t)v10;
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v25, v14, v18, NAN, NAN, v26, v27, v28, v29);
    *(_QWORD *)(a1 + 27776) = v14;
    v141 = *(_QWORD *)(a1 + 27784);
    *(_QWORD *)(a1 + 27784) = v18;
    v30 = (uint64_t)a3;
    v31 = *(_QWORD *)(a1 + 3976);
    if (v31)
    {
      v32 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v31);
      v30 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), a3, v32);
    }
    v33 = JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 3952), v30, 1);
    v34 = *(_QWORD *)(a1 + 27776);
    v35 = *(JSC::B3::Value **)(a1 + 27760);
    v36 = *(_QWORD *)(a1 + 27768);
    v37 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v37 + 8) = -1;
    *(_WORD *)(v37 + 12) = 152;
    *(_DWORD *)(v37 + 16) = 0;
    *(_BYTE *)(v37 + 20) = 1;
    *(_QWORD *)v37 = &unk_1E357EDA0;
    *(_QWORD *)(v37 + 40) = 0;
    *(_QWORD *)(v37 + 48) = v33;
    *(_QWORD *)(v37 + 24) = v36;
    *(_QWORD *)(v37 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v35, (JSC::B3::Value *)v37);
    v143 = v37;
    v38 = (char **)(v34 + 8);
    v39 = *(unsigned int *)(v34 + 20);
    if ((_DWORD)v39 == *(_DWORD *)(v34 + 16))
    {
      v134 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38, v39 + 1, (unint64_t)&v143);
      v39 = *(unsigned int *)(v34 + 20);
      *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v39) = *(_QWORD *)v134;
      v40 = v143;
    }
    else
    {
      *(_QWORD *)&(*v38)[8 * v39] = v37;
      v40 = v37;
    }
    v140 = v18;
    *(_DWORD *)(v34 + 20) = v39 + 1;
    *(_QWORD *)(v40 + 32) = v34;
    v41 = *(_QWORD *)(a1 + 4024);
    v42 = (uint64_t)a3;
    if (v41)
    {
      v43 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v41);
      v42 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), a3, v43);
    }
    v44 = JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 4000), v42, 1);
    v45 = *(_QWORD *)(a1 + 27776);
    v46 = *(JSC::B3::Value **)(a1 + 27760);
    v47 = *(_QWORD *)(a1 + 27768);
    v48 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v48 + 8) = -1;
    *(_WORD *)(v48 + 12) = 152;
    *(_DWORD *)(v48 + 16) = 0;
    *(_BYTE *)(v48 + 20) = 1;
    *(_QWORD *)v48 = &unk_1E357EDA0;
    *(_QWORD *)(v48 + 40) = 0;
    *(_QWORD *)(v48 + 48) = v44;
    *(_QWORD *)(v48 + 24) = v47;
    *(_QWORD *)(v48 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v46, (JSC::B3::Value *)v48);
    v143 = v48;
    v52 = (char **)(v45 + 8);
    v53 = *(unsigned int *)(v45 + 20);
    if ((_DWORD)v53 == *(_DWORD *)(v45 + 16))
    {
      v135 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v52, v53 + 1, (unint64_t)&v143);
      v53 = *(unsigned int *)(v45 + 20);
      *(_QWORD *)(*(_QWORD *)(v45 + 8) + 8 * v53) = *(_QWORD *)v135;
      v54 = v143;
    }
    else
    {
      *(_QWORD *)&(*v52)[8 * v53] = v48;
      v54 = v48;
    }
    *(_DWORD *)(v45 + 20) = v53 + 1;
    *(_QWORD *)(v54 + 32) = v45;
    v55 = *(_QWORD *)(a1 + 27776);
    v56 = *(_QWORD *)(a1 + 27760);
    v57 = *(_QWORD *)(a1 + 27768);
    v143 = v142;
    v144 = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v55, v56, 154, v57, &v143, v49, v50, v51);
    *(_QWORD *)(a1 + 27776) = v140;
    *(_QWORD *)(a1 + 27784) = v142;
    v58 = *(const JSC::FTL::AbstractHeap **)(a1 + 26504);
    v59 = *((_QWORD *)v58 + 3);
    if (v59)
    {
      v60 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v59);
      a3 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), a3, v60);
    }
    v61 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, v58, (uint64_t)a3, 2);
    v62 = *(_QWORD *)(a1 + 5224);
    v63 = (uint64_t)v61;
    if (v62)
    {
      v64 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v62);
      v63 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v61, v64);
    }
    v65 = JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 5200), v63, 1);
    v66 = *(_QWORD *)(a1 + 27776);
    v67 = *(JSC::B3::Value **)(a1 + 27760);
    v68 = *(_QWORD *)(a1 + 27768);
    v69 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v69 + 8) = -1;
    *(_WORD *)(v69 + 12) = 152;
    *(_DWORD *)(v69 + 16) = 0;
    *(_BYTE *)(v69 + 20) = 1;
    *(_QWORD *)v69 = &unk_1E357EDA0;
    *(_QWORD *)(v69 + 40) = 0;
    *(_QWORD *)(v69 + 48) = v65;
    *(_QWORD *)(v69 + 24) = v68;
    *(_QWORD *)(v69 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v67, (JSC::B3::Value *)v69);
    v143 = v69;
    v70 = (char **)(v66 + 8);
    v71 = *(unsigned int *)(v66 + 20);
    if ((_DWORD)v71 == *(_DWORD *)(v66 + 16))
    {
      v136 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v70, v71 + 1, (unint64_t)&v143);
      v71 = *(unsigned int *)(v66 + 20);
      *(_QWORD *)(*(_QWORD *)(v66 + 8) + 8 * v71) = *(_QWORD *)v136;
      v72 = v143;
    }
    else
    {
      *(_QWORD *)&(*v70)[8 * v71] = v69;
      v72 = v69;
    }
    *(_DWORD *)(v66 + 20) = v71 + 1;
    *(_QWORD *)(v72 + 32) = v66;
    v73 = *(_QWORD *)(a1 + 5272);
    if (v73)
    {
      v74 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v73);
      v61 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v61, v74);
    }
    v75 = JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 5248), (uint64_t)v61, 1);
    v76 = *(_QWORD *)(a1 + 27776);
    v77 = *(JSC::B3::Value **)(a1 + 27760);
    v78 = *(_QWORD *)(a1 + 27768);
    v79 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v79 + 8) = -1;
    *(_WORD *)(v79 + 12) = 152;
    *(_DWORD *)(v79 + 16) = 0;
    *(_BYTE *)(v79 + 20) = 1;
    *(_QWORD *)v79 = &unk_1E357EDA0;
    *(_QWORD *)(v79 + 40) = 0;
    *(_QWORD *)(v79 + 48) = v75;
    *(_QWORD *)(v79 + 24) = v78;
    *(_QWORD *)(v79 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v77, (JSC::B3::Value *)v79);
    v143 = v79;
    v83 = (char **)(v76 + 8);
    v84 = *(unsigned int *)(v76 + 20);
    if ((_DWORD)v84 == *(_DWORD *)(v76 + 16))
    {
      v137 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83, v84 + 1, (unint64_t)&v143);
      v84 = *(unsigned int *)(v76 + 20);
      *(_QWORD *)(*(_QWORD *)(v76 + 8) + 8 * v84) = *(_QWORD *)v137;
      v85 = v143;
    }
    else
    {
      *(_QWORD *)&(*v83)[8 * v84] = v79;
      v85 = v79;
    }
    *(_DWORD *)(v76 + 20) = v84 + 1;
    *(_QWORD *)(v85 + 32) = v76;
    v86 = *(_QWORD *)(a1 + 27776);
    v87 = *(_QWORD *)(a1 + 27760);
    v88 = *(_QWORD *)(a1 + 27768);
    v143 = v142;
    v144 = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v86, v87, 154, v88, &v143, v80, v81, v82);
    *(_QWORD *)(a1 + 27776) = v142;
    *(_QWORD *)(a1 + 27784) = v141;
    v89 = *(JSC::B3::Value **)(a1 + 27760);
    v90 = *(_QWORD *)(a1 + 27768);
    v91 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v91 = off_1E357F5F0;
    *(_DWORD *)(v91 + 8) = -1;
    *(_WORD *)(v91 + 12) = 153;
    *(_DWORD *)(v91 + 16) = 1;
    *(_BYTE *)(v91 + 20) = 0;
    *(_QWORD *)(v91 + 24) = v90;
    *(_QWORD *)(v91 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v89, (JSC::B3::Value *)v91);
    v143 = v91;
    v92 = (char **)(v142 + 8);
    v93 = *(unsigned int *)(v142 + 20);
    if ((_DWORD)v93 == *(_DWORD *)(v142 + 16))
    {
      v138 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v92, v93 + 1, (unint64_t)&v143);
      v93 = *(unsigned int *)(v142 + 20);
      *(_QWORD *)(*(_QWORD *)(v142 + 8) + 8 * v93) = *(_QWORD *)v138;
      v94 = v143;
    }
    else
    {
      *(_QWORD *)&(*v92)[8 * v93] = v91;
      v94 = v91;
    }
    *(_DWORD *)(v142 + 20) = v93 + 1;
    *(_QWORD *)(v94 + 32) = v142;
    if ((*(_WORD *)(v37 + 12) & 0xFFF) == 0x98)
      v95 = v37;
    else
      v95 = 0;
    *(_QWORD *)(v95 + 40) = v91;
    if ((*(_WORD *)(v69 + 12) & 0xFFF) == 0x98)
      v96 = v69;
    else
      v96 = 0;
    *(_QWORD *)(v96 + 40) = v91;
    v97 = *(_QWORD *)(a1 + 27776);
    v98 = *(JSC::B3::Value **)(a1 + 27760);
    v99 = *(_QWORD *)(a1 + 27768);
    v100 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v100 = off_1E357F5F0;
    *(_DWORD *)(v100 + 8) = -1;
    *(_WORD *)(v100 + 12) = 153;
    *(_DWORD *)(v100 + 16) = 1;
    *(_BYTE *)(v100 + 20) = 0;
    *(_QWORD *)(v100 + 24) = v99;
    *(_QWORD *)(v100 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v98, (JSC::B3::Value *)v100);
    v143 = v100;
    v101 = (char **)(v97 + 8);
    v102 = *(unsigned int *)(v97 + 20);
    if ((_DWORD)v102 == *(_DWORD *)(v97 + 16))
    {
      v139 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v101, v102 + 1, (unint64_t)&v143);
      v102 = *(unsigned int *)(v97 + 20);
      *(_QWORD *)(*(_QWORD *)(v97 + 8) + 8 * v102) = *(_QWORD *)v139;
      v103 = v143;
    }
    else
    {
      *(_QWORD *)&(*v101)[8 * v102] = v100;
      v103 = v100;
    }
    *(_DWORD *)(v97 + 20) = v102 + 1;
    *(_QWORD *)(v103 + 32) = v97;
    if ((*(_WORD *)(v48 + 12) & 0xFFF) == 0x98)
      v104 = v48;
    else
      v104 = 0;
    *(_QWORD *)(v104 + 40) = v100;
    if ((*(_WORD *)(v79 + 12) & 0xFFF) == 0x98)
      v105 = v79;
    else
      v105 = 0;
    *(_QWORD *)(v105 + 40) = v100;
  }
  return v91;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _OWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BYTE *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  _BYTE *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  JSC::FTL::ExceptionTarget *v123;
  __int128 v124;
  WTF *v125;
  uint64_t v126;

  v125 = 0;
  v126 = 0;
  v9 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v9)
    goto LABEL_134;
  v13 = 0;
  v14 = 0;
  v15 = *((_QWORD *)a3 + 1);
  v16 = 16 * v9;
  v17 = 29;
  do
  {
    v18 = *(unsigned __int8 *)(v15 + 8);
    switch(v18)
    {
      case 7:
        v19 = *(_BYTE *)v15 & 0x7F;
        v20 = 1;
        break;
      case 9:
        v19 = (*(_QWORD *)v15 << 32) | 0x1DLL;
        v20 = 2;
        break;
      case 11:
        v19 = *(_QWORD *)v15;
        v20 = 3;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197DC9D4CLL);
    }
    *(_QWORD *)&v124 = v20;
    *((_QWORD *)&v124 + 1) = v19;
    if (v14 == (_DWORD)v126)
    {
      v22 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v125, v14 + 1, (unint64_t)&v124);
      v21 = HIDWORD(v126);
      v13 = v125;
      *((_OWORD *)v125 + HIDWORD(v126)) = *v22;
    }
    else
    {
      *((_OWORD *)v13 + v14) = v124;
      v21 = HIDWORD(v126);
    }
    v14 = v21 + 1;
    HIDWORD(v126) = v14;
    v15 += 16;
    v16 -= 16;
  }
  while (v16);
  if (!v14)
  {
LABEL_134:
    __break(0xC471u);
    JUMPOUT(0x197DC9E0CLL);
  }
  if (*((_DWORD *)v125 + 3))
    goto LABEL_136;
  if (v14 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DC9E14);
  }
  if (*((_DWORD *)v125 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DC9B3CLL);
  }
  if (v14 <= 2)
  {
LABEL_136:
    __break(0xC471u);
    JUMPOUT(0x197DC9B1CLL);
  }
  if (*((_DWORD *)v125 + 11))
  {
    v28 = "./ftl/FTLLocation.cpp";
    v29 = "GPRReg JSC::FTL::Location::directGPR() const";
    v30 = 399;
    __break(0xC471u);
    goto LABEL_87;
  }
  v23 = *((_BYTE *)v125 + 8) & 0x7F;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  v26 = *((_BYTE *)v125 + 24) & 0x7F;
  v27 = *((_BYTE *)v125 + 40) & 0x7F;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  v17 = v15 + 8;
  *(_QWORD *)v15 = off_1E3576ED8;
  *(_QWORD *)(v15 + 16) = v24;
  *(_QWORD *)(v15 + 24) = operationMakeRope2;
  *(_BYTE *)(v15 + 32) = v23;
  *(_QWORD *)(v15 + 40) = v25;
  *(_BYTE *)(v15 + 48) = v26;
  *(_BYTE *)(v15 + 49) = v27;
  *(_BYTE *)(a2 + 328) = 1;
  v16 = a2 + 56;
  v8 = *(_DWORD *)(a2 + 200);
  if (v8 < *(_DWORD *)(a2 + 52))
    goto LABEL_88;
  while (1)
  {
    v31 = v8;
    if ((v8 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v28, (uint64_t)v29, v30, a5, a6, a7, a8);
      v31 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = 335544320;
    v32 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v32;
    if (*(_BYTE *)(a2 + 328))
      v33 = 0xFF000F4500000000;
    else
      v33 = 0xFF000F4100000000;
    for (*(_BYTE *)(a2 + 328) = 0; v32 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v32)
    {
      if ((v32 + 4) > *(_DWORD *)(a2 + 192))
      {
        v116 = v33;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v28, (uint64_t)v29, v30, a5, a6, a7, a8);
        v33 = v116;
        v32 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v32) = -721215457;
      v32 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    v16 = *(_QWORD *)(*(_QWORD *)a3 + 104);
    v34 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
    v35 = *((unsigned int *)a3 + 9);
    if ((_DWORD)v35)
    {
      v70 = (_BYTE *)*((_QWORD *)a3 + 3);
      do
      {
        v71 = *v70 & 0x7F;
        if (v71 >= 0x40)
          goto LABEL_87;
        v72 = 1 << v71;
        v34 &= ~v72;
        v16 &= ~v72;
        ++v70;
      }
      while (--v35);
    }
    v36 = *((unsigned int *)a3 + 13);
    if (!(_DWORD)v36)
      break;
    v77 = (_BYTE *)*((_QWORD *)a3 + 5);
    while (1)
    {
      v78 = (*v77 + 32) & 0x7F;
      if (v78 >= 0x40)
        break;
      v79 = 1 << v78;
      v34 &= ~v79;
      v16 &= ~v79;
      ++v77;
      if (!--v36)
        goto LABEL_25;
    }
LABEL_87:
    __break(1u);
    do
    {
LABEL_88:
      if ((v8 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v28, (uint64_t)v29, v30, a5, a6, a7, a8);
        v8 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v8) = -721215457;
      v8 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v8;
    }
    while (v8 < *(_DWORD *)(a2 + 52));
  }
LABEL_25:
  v121 = v33;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), a3, (uint64_t *)&v123);
  v37 = *(_QWORD *)(a1 + 48);
  v120 = *(_QWORD *)(a1 + 40);
  if ((v37 & 1) != 0)
  {
    v80 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    if ((v37 & 2) != 0
      || ((v81 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v81 != 0x3FFFFFFF)
        ? (v82 = (_DWORD)v81 == -1)
        : (v82 = 1),
          v82))
    {
      v83 = 2;
    }
    else if (v81 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v80;
      *(_DWORD *)(v117 + 8) = v81;
      v83 = 1;
      v80 = v117;
    }
    else
    {
      v83 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
      v80 = v81 << 36;
    }
    v37 = v80 | v83;
  }
  v38 = (unsigned int *)v123;
  if (v123)
  {
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
  }
  v122 = v16;
  do
    v40 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v40 + 1, (unsigned int *)v17));
  v41 = *((_QWORD *)a3 + 7);
  v42 = v37;
  if ((v37 & 1) != 0)
  {
    v84 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    if ((v37 & 2) != 0
      || ((v85 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v84;
      *(_DWORD *)(v118 + 8) = v85;
      v87 = 1;
      v84 = v118;
    }
    else
    {
      v87 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v42 = v84 | v87;
  }
  if (v38)
  {
    do
      v43 = __ldaxr(v38);
    while (__stlxr(v43 + 1, v38));
  }
  do
    v44 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v44 + 1, (unsigned int *)v17));
  v52 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v52 + 8) = 1;
  *(_QWORD *)v52 = &off_1E3576F00;
  *(_DWORD *)(v52 + 16) = v8;
  *(_QWORD *)(v52 + 20) = v121;
  *(_QWORD *)(v52 + 32) = v120;
  *(_DWORD *)(v52 + 40) = v32;
  v53 = v42;
  if ((v42 & 1) != 0)
  {
    v88 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
    if ((v42 & 2) != 0
      || ((v89 = *(unsigned int *)((v42 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
        ? (v90 = (_DWORD)v89 == -1)
        : (v90 = 1),
          v90))
    {
      v91 = 2;
    }
    else if (v89 >> 28)
    {
      v119 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v119 = v88;
      *(_DWORD *)(v119 + 8) = v89;
      v91 = 1;
      v88 = v119;
    }
    else
    {
      v91 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
      v88 = v89 << 36;
    }
    v53 = v88 | v91;
  }
  *(_QWORD *)(v52 + 48) = v53;
  if (v38)
  {
    do
      v54 = __ldaxr(v38);
    while (__stlxr(v54 + 1, v38));
  }
  *(_QWORD *)(v52 + 56) = v38;
  *(_QWORD *)(v52 + 64) = v34;
  *(_QWORD *)(v52 + 72) = v122;
  do
    v55 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v55 + 1, (unsigned int *)v17));
  *(_QWORD *)(v52 + 80) = v15;
  *(_QWORD *)&v124 = v52;
  v56 = *(unsigned int *)(v41 + 12);
  if ((_DWORD)v56 == *(_DWORD *)(v41 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v41, (uint64_t *)&v124);
    v73 = (unsigned int *)v124;
    *(_QWORD *)&v124 = 0;
    if (v73)
    {
      v74 = v73 + 2;
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
      {
        atomic_store(1u, v73 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 8))(v73);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v41 + 8 * v56) = v52;
    *(_DWORD *)(v41 + 12) = v56 + 1;
    *(_QWORD *)&v124 = 0;
  }
  do
  {
    v57 = __ldaxr((unsigned int *)v17);
    v58 = v57 - 1;
  }
  while (__stlxr(v58, (unsigned int *)v17));
  if (!v58)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v38)
  {
    do
    {
      v59 = __ldaxr(v38);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v38));
    if (!v60)
    {
      atomic_store(1u, v38);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v38, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
  }
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
  do
  {
    v61 = __ldaxr((unsigned int *)v17);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, (unsigned int *)v17));
  if (!v62)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v38)
  {
    do
    {
      v63 = __ldaxr(v38);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, v38));
    if (!v64)
    {
      atomic_store(1u, v38);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v38, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
  }
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
  v65 = (unsigned int *)v123;
  v123 = 0;
  if (v65)
  {
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      atomic_store(1u, v65);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v65, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
  }
  do
  {
    v68 = __ldaxr((unsigned int *)v17);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)v17));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v125)
    WTF::fastFree((unint64_t)v125, v45, v46, v47, v48, v49, v50, v51);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int i;
  unsigned int v35;
  char v36;
  uint64_t v37;
  int *v38;
  int *v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  char v44;
  __int16 v45;
  char v46;
  _BYTE v47[32];

  v10 = *(_QWORD *)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_BYTE *)(a1 + 48);
  v18 = *(_BYTE *)(a1 + 49);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DCA050);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
    v26 = *(_DWORD *)(a2 + 200);
    if (v26 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      v26 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v26) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::FTL::callOperation<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v47, v14, *(_QWORD *)(v11 + 24), (_DWORD *)a2, v10, v13, v15, v16, v17, v18);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v27, v28, v29, v30, v31, v32, v33);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v35 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v27, v28, v29, v30, v31, v32, v33);
    v35 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v35) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v36 = 69;
  else
    v36 = 65;
  v42 = i;
  v43 = 0;
  v44 = v36;
  v45 = 15;
  v46 = -1;
  if (i != -1)
  {
    v37 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v37 == *(_DWORD *)(a3 + 8))
    {
      v38 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v37 + 1), (unint64_t)&v42, v29, v30, v31, v32, v33);
      v40 = *v38;
      v39 = v38 + 1;
      v41 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v41 = v40;
    }
    else
    {
      v39 = &v43;
      v41 = *(_QWORD *)a3 + 12 * v37;
      *(_DWORD *)v41 = i;
    }
    *(_QWORD *)(v41 + 4) = *(_QWORD *)v39;
    ++*(_DWORD *)(a3 + 12);
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_15compileMakeRopeEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_15compileMakeRopeEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_15compileMakeRopeEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const void *v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  const void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  JSC::ExecutableMemoryHandle *v128[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v91 = v20 + (v20 >> 2);
    if (v91 >= 0x10)
      v92 = v91 + 1;
    else
      v92 = 16;
    if (v92 <= v20 + 1)
      v93 = v20 + 1;
    else
      v93 = v92;
    if (v93 >> 29)
    {
      __break(0xC471u);
      goto LABEL_107;
    }
    v94 = *(const void **)(v19 + 296);
    v95 = (void *)WTF::fastMalloc((WTF *)(8 * v93));
    *(_DWORD *)(v19 + 304) = v93;
    *(_QWORD *)(v19 + 296) = v95;
    memcpy(v95, v94, 8 * v20);
    if (v94)
    {
      if (*(const void **)(v19 + 296) == v94)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v94, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v23 = *(_DWORD *)(a2 + 200);
  if (v23 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v23 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v31 = *(_DWORD *)(a2 + 200);
  if (v31 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -134216720;
  v32 = *(_DWORD *)(a2 + 200);
  v33 = v32 + 4;
  *(_DWORD *)(a2 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v34 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v34 + 90440), v34, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v26, v27, v28, v29, v30, v128);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v128[0], v35, v36, v37, v38, v39, v40);
  v48 = (unsigned int *)v128[1];
  v128[1] = 0;
  if (v48)
  {
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v48);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v48, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v51 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v127 = v11;
  if (v51)
  {
    v52 = v51 + 2;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
    do
      v57 = __ldaxr(v52);
    while (__stlxr(v57 + 1, v52));
  }
  else
  {
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
  }
  v58 = *(_QWORD *)(a1 + 48);
  if ((v58 & 1) != 0)
  {
    v101 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v102 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v125 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v125 = v101;
      *(_DWORD *)(v125 + 8) = v102;
      v104 = 1;
      v101 = v125;
    }
    else
    {
      v104 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v58 = v101 | v104;
  }
  v59 = *(unsigned int **)(a1 + 56);
  if (v59)
  {
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  *(_OWORD *)v128 = *(_OWORD *)(a1 + 64);
  v61 = *(unsigned int **)(a1 + 80);
  if (v61)
  {
    v62 = v61 + 2;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 + 1, v62));
  }
  v64 = WTF::fastMalloc((WTF *)0x58);
  v72 = v64;
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = &off_1E3576F28;
  *(_DWORD *)(v64 + 16) = v54;
  *(_QWORD *)(v64 + 20) = v55;
  *(_DWORD *)(v64 + 28) = v56;
  if (v51)
  {
    v73 = v51 + 2;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
  }
  *(_QWORD *)(v64 + 32) = v51;
  v75 = v58;
  if ((v58 & 1) != 0)
  {
    v105 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v106 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v126 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v126 = v105;
      *(_DWORD *)(v126 + 8) = v106;
      v108 = 1;
      v105 = v126;
    }
    else
    {
      v108 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v75 = v105 | v108;
  }
  *(_QWORD *)(v72 + 40) = v75;
  if (v59)
  {
    do
      v76 = __ldaxr(v59);
    while (__stlxr(v76 + 1, v59));
  }
  *(_QWORD *)(v72 + 48) = v59;
  *(_OWORD *)(v72 + 56) = *(_OWORD *)v128;
  if (v61)
  {
    v77 = v61 + 2;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
  }
  *(_QWORD *)(v72 + 72) = v61;
  *(_DWORD *)(v72 + 80) = v20;
  v79 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v79 != *(_DWORD *)(a2 + 240))
  {
    v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
    goto LABEL_37;
  }
  v96 = v79 + (v79 >> 2);
  if (v96 >= 0x10)
    v97 = v96 + 1;
  else
    v97 = 16;
  if (v97 <= v79 + 1)
    v98 = v79 + 1;
  else
    v98 = v97;
  if (v98 >> 29)
  {
    __break(0xC471u);
LABEL_107:
    JUMPOUT(0x197DCA870);
  }
  v99 = *(const void **)(a2 + 232);
  v100 = (void *)WTF::fastMalloc((WTF *)(8 * v98));
  *(_DWORD *)(a2 + 240) = v98;
  *(_QWORD *)(a2 + 232) = v100;
  memcpy(v100, v99, 8 * v79);
  if (v99)
  {
    if (*(const void **)(a2 + 232) == v99)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v99, v65, v66, v67, v68, v69, v70, v71);
  }
  v79 = *(unsigned int *)(a2 + 244);
  v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
LABEL_37:
  *v80 = v72;
  *(_DWORD *)(a2 + 244) = v79 + 1;
  if (v61)
  {
    v81 = v61 + 2;
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      atomic_store(1u, v61 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
    }
  }
  if (v59)
  {
    do
    {
      v84 = __ldaxr(v59);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v59));
    if (!v85)
    {
      atomic_store(1u, v59);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v59, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
  }
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
  if (v51)
  {
    v86 = v51 + 2;
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
    do
    {
      v89 = __ldaxr(v86);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, v86));
    if (!v90)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
  }
  *(_BYTE *)(a2 + 212) = v127;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_15compileMakeRopeEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_15compileMakeRopeEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_15compileMakeRopeEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DCAE24);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DCAE44);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DCAE64);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
      goto LABEL_73;
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x197DCADECLL);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeRope(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  JSC::AssemblerBuffer *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _OWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BYTE *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  _BYTE *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::FTL::ExceptionTarget *v125;
  __int128 v126;
  WTF *v127;
  uint64_t v128;

  v127 = 0;
  v128 = 0;
  v9 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v9)
    goto LABEL_136;
  v13 = 0;
  v14 = 0;
  v15 = *((_QWORD *)a3 + 1);
  v16 = (JSC::AssemblerBuffer *)(16 * v9);
  v17 = 29;
  do
  {
    v18 = *(unsigned __int8 *)(v15 + 8);
    switch(v18)
    {
      case 7:
        v19 = *(_BYTE *)v15 & 0x7F;
        v20 = 1;
        break;
      case 9:
        v19 = (*(_QWORD *)v15 << 32) | 0x1DLL;
        v20 = 2;
        break;
      case 11:
        v19 = *(_QWORD *)v15;
        v20 = 3;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197DCB804);
    }
    *(_QWORD *)&v126 = v20;
    *((_QWORD *)&v126 + 1) = v19;
    if (v14 == (_DWORD)v128)
    {
      v22 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v127, v14 + 1, (unint64_t)&v126);
      v21 = HIDWORD(v128);
      v13 = v127;
      *((_OWORD *)v127 + HIDWORD(v128)) = *v22;
    }
    else
    {
      *((_OWORD *)v13 + v14) = v126;
      v21 = HIDWORD(v128);
    }
    v14 = v21 + 1;
    HIDWORD(v128) = v14;
    v15 += 16;
    v16 = (JSC::AssemblerBuffer *)((char *)v16 - 16);
  }
  while (v16);
  if (!v14)
  {
LABEL_136:
    __break(0xC471u);
    JUMPOUT(0x197DCB8BCLL);
  }
  if (*((_DWORD *)v127 + 3))
    goto LABEL_139;
  if (v14 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DCB8C4);
  }
  if (*((_DWORD *)v127 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DCB5D4);
  }
  if (v14 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DCB8CCLL);
  }
  if (*((_DWORD *)v127 + 11))
  {
    __break(0xC471u);
    JUMPOUT(0x197DCB5F4);
  }
  if (v14 <= 3)
  {
LABEL_139:
    __break(0xC471u);
    JUMPOUT(0x197DCB5B4);
  }
  if (*((_DWORD *)v127 + 15))
  {
    v29 = "./ftl/FTLLocation.cpp";
    v30 = "GPRReg JSC::FTL::Location::directGPR() const";
    v31 = 399;
    __break(0xC471u);
    goto LABEL_89;
  }
  v23 = *((_BYTE *)v127 + 8) & 0x7F;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  v124 = a1;
  v26 = *((_BYTE *)v127 + 24) & 0x7F;
  v27 = *((_BYTE *)v127 + 40) & 0x7F;
  v28 = *((_BYTE *)v127 + 56) & 0x7F;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  v17 = v15 + 8;
  *(_QWORD *)v15 = off_1E3576708;
  *(_QWORD *)(v15 + 16) = v24;
  *(_QWORD *)(v15 + 24) = operationMakeRope3;
  *(_BYTE *)(v15 + 32) = v23;
  *(_QWORD *)(v15 + 40) = v25;
  *(_BYTE *)(v15 + 48) = v26;
  *(_BYTE *)(v15 + 49) = v27;
  *(_BYTE *)(v15 + 50) = v28;
  *(_BYTE *)(a2 + 328) = 1;
  v16 = (JSC::AssemblerBuffer *)(a2 + 56);
  v8 = *(_DWORD *)(a2 + 200);
  if (v8 < *(_DWORD *)(a2 + 52))
    goto LABEL_90;
  while (1)
  {
    v32 = v8;
    if ((v8 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)v29, (uint64_t)v30, v31, a5, a6, a7, a8);
      v32 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v32) = 335544320;
    v33 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v33;
    if (*(_BYTE *)(a2 + 328))
      v34 = 0xFF000F4500000000;
    else
      v34 = 0xFF000F4100000000;
    for (*(_BYTE *)(a2 + 328) = 0; v33 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v33)
    {
      if ((v33 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)v29, (uint64_t)v30, v31, a5, a6, a7, a8);
        v33 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = -721215457;
      v33 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    v35 = *(_QWORD *)(*(_QWORD *)a3 + 104);
    v36 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
    v37 = *((unsigned int *)a3 + 9);
    if ((_DWORD)v37)
    {
      v72 = (_BYTE *)*((_QWORD *)a3 + 3);
      do
      {
        v73 = *v72 & 0x7F;
        if (v73 >= 0x40)
          goto LABEL_89;
        v74 = 1 << v73;
        v36 &= ~v74;
        v35 &= ~v74;
        ++v72;
      }
      while (--v37);
    }
    v38 = *((unsigned int *)a3 + 13);
    if (!(_DWORD)v38)
      break;
    v79 = (_BYTE *)*((_QWORD *)a3 + 5);
    while (1)
    {
      v80 = (*v79 + 32) & 0x7F;
      if (v80 >= 0x40)
        break;
      v81 = 1 << v80;
      v36 &= ~v81;
      v35 &= ~v81;
      ++v79;
      if (!--v38)
        goto LABEL_27;
    }
LABEL_89:
    __break(1u);
    do
    {
LABEL_90:
      if ((v8 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)v29, (uint64_t)v30, v31, a5, a6, a7, a8);
        v8 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v8) = -721215457;
      v8 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v8;
    }
    while (v8 < *(_DWORD *)(a2 + 52));
  }
LABEL_27:
  v122 = v34;
  v123 = v35;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(v124 + 32), a3, (uint64_t *)&v125);
  v39 = *(_QWORD *)(v124 + 48);
  v121 = *(_QWORD *)(v124 + 40);
  if ((v39 & 1) != 0)
  {
    v82 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v83 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v83 != 0x3FFFFFFF)
        ? (v84 = (_DWORD)v83 == -1)
        : (v84 = 1),
          v84))
    {
      v85 = 2;
    }
    else if (v83 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v82;
      *(_DWORD *)(v118 + 8) = v83;
      v85 = 1;
      v82 = v118;
    }
    else
    {
      v85 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v82 = v83 << 36;
    }
    v39 = v82 | v85;
  }
  v40 = (unsigned int *)v125;
  if (v125)
  {
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
  }
  do
    v42 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v42 + 1, (unsigned int *)v17));
  v43 = *((_QWORD *)a3 + 7);
  v44 = v39;
  if ((v39 & 1) != 0)
  {
    v86 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v87 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v87 != 0x3FFFFFFF)
        ? (v88 = (_DWORD)v87 == -1)
        : (v88 = 1),
          v88))
    {
      v89 = 2;
    }
    else if (v87 >> 28)
    {
      v119 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v119 = v86;
      *(_DWORD *)(v119 + 8) = v87;
      v89 = 1;
      v86 = v119;
    }
    else
    {
      v89 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v86 = v87 << 36;
    }
    v44 = v86 | v89;
  }
  if (v40)
  {
    do
      v45 = __ldaxr(v40);
    while (__stlxr(v45 + 1, v40));
  }
  do
    v46 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v46 + 1, (unsigned int *)v17));
  v54 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v54 + 8) = 1;
  *(_QWORD *)v54 = &off_1E3576F78;
  *(_DWORD *)(v54 + 16) = v8;
  *(_QWORD *)(v54 + 20) = v122;
  *(_QWORD *)(v54 + 32) = v121;
  *(_DWORD *)(v54 + 40) = v33;
  v55 = v44;
  if ((v44 & 1) != 0)
  {
    v90 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
    if ((v44 & 2) != 0
      || ((v91 = *(unsigned int *)((v44 & 0xFFFFFFFF8) + 8), (_DWORD)v91 != 0x3FFFFFFF)
        ? (v92 = (_DWORD)v91 == -1)
        : (v92 = 1),
          v92))
    {
      v93 = 2;
    }
    else if (v91 >> 28)
    {
      v120 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v120 = v90;
      *(_DWORD *)(v120 + 8) = v91;
      v93 = 1;
      v90 = v120;
    }
    else
    {
      v93 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
      v90 = v91 << 36;
    }
    v55 = v90 | v93;
  }
  *(_QWORD *)(v54 + 48) = v55;
  if (v40)
  {
    do
      v56 = __ldaxr(v40);
    while (__stlxr(v56 + 1, v40));
  }
  *(_QWORD *)(v54 + 56) = v40;
  *(_QWORD *)(v54 + 64) = v36;
  *(_QWORD *)(v54 + 72) = v123;
  do
    v57 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v57 + 1, (unsigned int *)v17));
  *(_QWORD *)(v54 + 80) = v15;
  *(_QWORD *)&v126 = v54;
  v58 = *(unsigned int *)(v43 + 12);
  if ((_DWORD)v58 == *(_DWORD *)(v43 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v43, (uint64_t *)&v126);
    v75 = (unsigned int *)v126;
    *(_QWORD *)&v126 = 0;
    if (v75)
    {
      v76 = v75 + 2;
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        atomic_store(1u, v75 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v75 + 8))(v75);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v43 + 8 * v58) = v54;
    *(_DWORD *)(v43 + 12) = v58 + 1;
    *(_QWORD *)&v126 = 0;
  }
  do
  {
    v59 = __ldaxr((unsigned int *)v17);
    v60 = v59 - 1;
  }
  while (__stlxr(v60, (unsigned int *)v17));
  if (!v60)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v40)
  {
    do
    {
      v61 = __ldaxr(v40);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v40));
    if (!v62)
    {
      atomic_store(1u, v40);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v40, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
  }
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
  do
  {
    v63 = __ldaxr((unsigned int *)v17);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, (unsigned int *)v17));
  if (!v64)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v40)
  {
    do
    {
      v65 = __ldaxr(v40);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v40));
    if (!v66)
    {
      atomic_store(1u, v40);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v40, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
  }
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
  v67 = (unsigned int *)v125;
  v125 = 0;
  if (v67)
  {
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      atomic_store(1u, v67);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v67, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
  }
  do
  {
    v70 = __ldaxr((unsigned int *)v17);
    v71 = v70 - 1;
  }
  while (__stlxr(v71, (unsigned int *)v17));
  if (!v71)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v127)
    WTF::fastFree((unint64_t)v127, v47, v48, v49, v50, v51, v52, v53);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_15compileMakeRopeEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_15compileMakeRopeEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_15compileMakeRopeEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const void *v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  const void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  JSC::ExecutableMemoryHandle *v128[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v91 = v20 + (v20 >> 2);
    if (v91 >= 0x10)
      v92 = v91 + 1;
    else
      v92 = 16;
    if (v92 <= v20 + 1)
      v93 = v20 + 1;
    else
      v93 = v92;
    if (v93 >> 29)
    {
      __break(0xC471u);
      goto LABEL_107;
    }
    v94 = *(const void **)(v19 + 296);
    v95 = (void *)WTF::fastMalloc((WTF *)(8 * v93));
    *(_DWORD *)(v19 + 304) = v93;
    *(_QWORD *)(v19 + 296) = v95;
    memcpy(v95, v94, 8 * v20);
    if (v94)
    {
      if (*(const void **)(v19 + 296) == v94)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v94, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v23 = *(_DWORD *)(a2 + 200);
  if (v23 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v23 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v31 = *(_DWORD *)(a2 + 200);
  if (v31 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -134216720;
  v32 = *(_DWORD *)(a2 + 200);
  v33 = v32 + 4;
  *(_DWORD *)(a2 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v34 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v34 + 90440), v34, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v26, v27, v28, v29, v30, v128);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v128[0], v35, v36, v37, v38, v39, v40);
  v48 = (unsigned int *)v128[1];
  v128[1] = 0;
  if (v48)
  {
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v48);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v48, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v51 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v127 = v11;
  if (v51)
  {
    v52 = v51 + 2;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
    do
      v57 = __ldaxr(v52);
    while (__stlxr(v57 + 1, v52));
  }
  else
  {
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
  }
  v58 = *(_QWORD *)(a1 + 48);
  if ((v58 & 1) != 0)
  {
    v101 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v102 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v125 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v125 = v101;
      *(_DWORD *)(v125 + 8) = v102;
      v104 = 1;
      v101 = v125;
    }
    else
    {
      v104 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v58 = v101 | v104;
  }
  v59 = *(unsigned int **)(a1 + 56);
  if (v59)
  {
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  *(_OWORD *)v128 = *(_OWORD *)(a1 + 64);
  v61 = *(unsigned int **)(a1 + 80);
  if (v61)
  {
    v62 = v61 + 2;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 + 1, v62));
  }
  v64 = WTF::fastMalloc((WTF *)0x58);
  v72 = v64;
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = &off_1E3576FA0;
  *(_DWORD *)(v64 + 16) = v54;
  *(_QWORD *)(v64 + 20) = v55;
  *(_DWORD *)(v64 + 28) = v56;
  if (v51)
  {
    v73 = v51 + 2;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
  }
  *(_QWORD *)(v64 + 32) = v51;
  v75 = v58;
  if ((v58 & 1) != 0)
  {
    v105 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v106 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v126 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v126 = v105;
      *(_DWORD *)(v126 + 8) = v106;
      v108 = 1;
      v105 = v126;
    }
    else
    {
      v108 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v75 = v105 | v108;
  }
  *(_QWORD *)(v72 + 40) = v75;
  if (v59)
  {
    do
      v76 = __ldaxr(v59);
    while (__stlxr(v76 + 1, v59));
  }
  *(_QWORD *)(v72 + 48) = v59;
  *(_OWORD *)(v72 + 56) = *(_OWORD *)v128;
  if (v61)
  {
    v77 = v61 + 2;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
  }
  *(_QWORD *)(v72 + 72) = v61;
  *(_DWORD *)(v72 + 80) = v20;
  v79 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v79 != *(_DWORD *)(a2 + 240))
  {
    v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
    goto LABEL_37;
  }
  v96 = v79 + (v79 >> 2);
  if (v96 >= 0x10)
    v97 = v96 + 1;
  else
    v97 = 16;
  if (v97 <= v79 + 1)
    v98 = v79 + 1;
  else
    v98 = v97;
  if (v98 >> 29)
  {
    __break(0xC471u);
LABEL_107:
    JUMPOUT(0x197DCC0E4);
  }
  v99 = *(const void **)(a2 + 232);
  v100 = (void *)WTF::fastMalloc((WTF *)(8 * v98));
  *(_DWORD *)(a2 + 240) = v98;
  *(_QWORD *)(a2 + 232) = v100;
  memcpy(v100, v99, 8 * v79);
  if (v99)
  {
    if (*(const void **)(a2 + 232) == v99)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v99, v65, v66, v67, v68, v69, v70, v71);
  }
  v79 = *(unsigned int *)(a2 + 244);
  v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
LABEL_37:
  *v80 = v72;
  *(_DWORD *)(a2 + 244) = v79 + 1;
  if (v61)
  {
    v81 = v61 + 2;
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      atomic_store(1u, v61 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
    }
  }
  if (v59)
  {
    do
    {
      v84 = __ldaxr(v59);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v59));
    if (!v85)
    {
      atomic_store(1u, v59);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v59, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
  }
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
  if (v51)
  {
    v86 = v51 + 2;
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
    do
    {
      v89 = __ldaxr(v86);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, v86));
    if (!v90)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
  }
  *(_BYTE *)(a2 + 212) = v127;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_15compileMakeRopeEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_15compileMakeRopeEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_15compileMakeRopeEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DCC698);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DCC6B8);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DCC6D8);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
      goto LABEL_73;
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x197DCC660);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  JSC::DFG::Node *v35;
  char **v36;
  uint64_t v37;
  WTF *v38;
  uint64_t result;
  char *v40;
  WTF *v41;
  uint64_t v42;

  v11 = (int *)(a1 + 28264);
  v12 = *(_DWORD *)(a1 + 28264);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = *(_QWORD *)(a1 + 27848);
    v41 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v41 = 0x200000002;
    v42 = 0x200000002;
    v21 = (_QWORD *)(v13 + 32);
    v22 = *(unsigned int *)(v13 + 44);
    if ((_DWORD)v22 == *(_DWORD *)(v13 + 40))
    {
      v23 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v41);
      v24 = *(_QWORD *)(v13 + 32) + 16 * *(unsigned int *)(v13 + 44);
    }
    else
    {
      v24 = *v21 + 16 * v22;
      v23 = (unint64_t)&v41;
    }
    *(_QWORD *)v24 = 0;
    *(_QWORD *)(v24 + 8) = 0;
    v25 = *(_QWORD *)v23;
    *(_QWORD *)v23 = 0;
    *(_QWORD *)v24 = v25;
    LODWORD(v25) = *(_DWORD *)(v23 + 8);
    *(_DWORD *)(v23 + 8) = 0;
    *(_DWORD *)(v24 + 8) = v25;
    LODWORD(v25) = *(_DWORD *)(v23 + 12);
    *(_DWORD *)(v23 + 12) = 0;
    *(_DWORD *)(v24 + 12) = v25;
    ++*(_DWORD *)(v13 + 44);
    v12 = v22 | 0x80000000;
    *v11 = v22 | 0x80000000;
    v26 = v41;
    if (v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v26, v14, v15, v16, v17, v18, v19, v20);
      v12 = *v11;
    }
  }
  v27 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationMakeAtomString1);
  v28 = *a2;
  v29 = *a3;
  v30 = *(_QWORD *)(a1 + 27776);
  v31 = *(JSC::B3::Value **)(a1 + 27760);
  v32 = *(_QWORD *)(a1 + 27768);
  v33 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v33 = off_1E357F5F0;
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 82;
  *(_DWORD *)(v33 + 16) = v12;
  *(_BYTE *)(v33 + 20) = 4;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  v34 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v33);
  v34[2] = v27;
  *v34 = v34 + 2;
  v34[3] = v28;
  v34[4] = v29;
  v34[1] = 0x300000003;
  *(_QWORD *)v33 = &unk_1E357CF78;
  *(_OWORD *)(v33 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v33 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v33 + 76))
  {
    JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
    v41 = (WTF *)v33;
    v36 = (char **)(v30 + 8);
    v37 = *(unsigned int *)(v30 + 20);
    if ((_DWORD)v37 == *(_DWORD *)(v30 + 16))
    {
      v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v41);
      v37 = *(unsigned int *)(v30 + 20);
      *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v37) = *(_QWORD *)v40;
      v38 = v41;
    }
    else
    {
      *(_QWORD *)&(*v36)[8 * v37] = v33;
      v38 = (WTF *)v33;
    }
    *(_DWORD *)(v30 + 20) = v37 + 1;
    *((_QWORD *)v38 + 4) = v30;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v15 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v13, v14, *a3, *a4, *a5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::DFG::Node *v17;

  v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v16 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v14, v15, *a3, *a4, *a5, *a6);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,int),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::DFG::Node *v14;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringFromCharCode);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v11, v12, *a2, *a3);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringLocaleCompare);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringIndexOfWithIndexWithOneChar);
  v15 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v13, v14, *a2, *a3, *a4, *a5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringIndexOfWithIndex);
  v15 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v13, v14, *a2, *a3, *a4, *a5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringIndexOfWithOneChar);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringIndexOf);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::loadProperty(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::FTL::Output *v11;
  JSC::FTL::IndexedAbstractHeap *v12;
  char *v13;
  JSC::FTL::AbstractHeap *v14;
  int v15;
  JSC::B3::Value *v16;

  v8 = a4;
  v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 25512);
  if (a3 > 0xF)
  {
    v14 = (JSC::FTL::AbstractHeap *)JSC::FTL::IndexedAbstractHeap::atSlow(v12, a3, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v13 = (char *)this + 48 * a3;
    v14 = (JSC::FTL::AbstractHeap *)(v13 + 25584);
    if (!*((_QWORD *)v13 + 3203))
      JSC::FTL::IndexedAbstractHeap::initialize(v12, v14, a3);
  }
  v15 = 8 * v8 + 16;
  if (v8 > 63)
    v15 = 496 - 8 * v8;
  if (v15)
  {
    v16 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v11, v15);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v11, a2, v16);
  }
  return JSC::FTL::Output::load((uint64_t)v11, v14, (uint64_t)a2, 2);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(_QWORD *a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4, JSC::B3::BasicBlock *a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  unint64_t v11;
  uint64_t v14;
  JSC::B3::Value *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;

  v9 = (uint64_t)a5;
  v11 = *(unsigned int *)(a4 + 12);
  if (!(_DWORD)v11)
  {
    JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 3455), a5, a3, a4, (uint64_t)a5, a6, a7, a8);
    return;
  }
  if ((_DWORD)a3)
  {
    v17 = (char *)(*(_QWORD *)a4 + 24 * v11);
    v18 = __clz(v11);
    v19 = *(_DWORD *)(a4 + 12);
    if (!v19)
    {
      __break(0xC471u);
      return;
    }
    v9 = *(_QWORD *)(*(_QWORD *)a4 + 24 * v19 - 16);
    *(_DWORD *)(a4 + 12) = v19 - 1;
  }
  v14 = a1[383];
  if (v14)
  {
    v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v14);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), a2, v15);
  }
  v16 = JSC::FTL::Output::load((uint64_t)(a1 + 3455), (const JSC::FTL::AbstractHeap *)(a1 + 380), (uint64_t)a2, 1);
  JSC::FTL::Output::switchInstruction<WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1 + 3455, v16, (uint64_t **)a4, v9);
}

__n128 WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::SwitchCase>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 *v10;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v9;
  v10[1].n128_u64[0] = v9[1].n128_u64[0];
  *v10 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v13 = (unint64_t)a2;
  if (v13 <= v11)
    return v8;
  v14 = *(unsigned int *)(result + 12);
  if (v13 < 3)
  {
    v16 = result + 16;
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 2;
    goto LABEL_11;
  }
  if (v13 < 0xAAAAAAB)
  {
    v15 = 24 * v13;
    v16 = WTF::fastMalloc((WTF *)(24 * v13));
    *(_DWORD *)(v9 + 8) = (v15 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v9 = v16;
LABEL_11:
    if ((_DWORD)v14)
    {
      v17 = 24 * v14;
      v18 = v10;
      do
      {
        v19 = *(_OWORD *)v18;
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v18 + 16);
        *(_OWORD *)v16 = v19;
        v16 += 24;
        v18 += 24;
        v17 -= 24;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v10 = (unint64_t)a2;
  if (v10 > v8)
  {
    v12 = *(_QWORD *)a1;
    v13 = *(unsigned int *)(a1 + 12);
    if (v10 < 3)
    {
      v15 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
    else
    {
      if (v10 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return;
      }
      v14 = 24 * v10;
      v15 = WTF::fastMalloc((WTF *)(24 * v10));
      *(_DWORD *)(a1 + 8) = (v14 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v13)
    {
      v16 = 24 * v13;
      v17 = v12;
      do
      {
        v18 = *(_OWORD *)v17;
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(v17 + 16);
        *(_OWORD *)v15 = v18;
        v15 += 24;
        v17 += 24;
        v16 -= 24;
      }
      while (v16);
    }
    if (a1 + 16 != v12 && v12)
    {
      if (*(_QWORD *)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

char **JSC::FTL::Output::switchInstruction<WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_QWORD *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char **result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  float *v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  BOOL v36;

  v8 = a1[16];
  v7 = a1[17];
  v9 = (JSC::B3::Value *)a1[15];
  v10 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v10 + 8) = -1;
  *(_WORD *)(v10 + 12) = 156;
  *(_DWORD *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 20) = 1;
  *(_QWORD *)(v10 + 24) = v8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = a2;
  *(_QWORD *)v10 = off_1E357EBF8;
  *(_QWORD *)(v10 + 40) = 0;
  JSC::B3::Procedure::addValueImpl(v9, (JSC::B3::Value *)v10);
  *(_QWORD *)&v35 = v10;
  result = (char **)(v7 + 8);
  v18 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v18 == *(_DWORD *)(v7 + 16))
  {
    result = (char **)WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v18 + 1, (unint64_t)&v35);
    v18 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v18) = *result;
    v19 = v35;
  }
  else
  {
    *(_QWORD *)&(*result)[8 * v18] = v10;
    v19 = v10;
  }
  *(_DWORD *)(v7 + 20) = v18 + 1;
  *(_QWORD *)(v19 + 32) = v7;
  *(_QWORD *)&v35 = a4;
  BYTE8(v35) = 0;
  v20 = *(_QWORD *)(v10 + 32);
  v21 = *(unsigned int *)(v20 + 68);
  v22 = *(_DWORD *)(v10 + 52);
  v23 = v22 + 1;
  if ((_DWORD)v21 != v22 && v23 != (_DWORD)v21)
    goto LABEL_26;
  if (v23 == (_DWORD)v21)
  {
    if ((_DWORD)v21)
    {
      v33 = *(_QWORD *)(v20 + 56) + 16 * v21;
      v34 = v35;
      *(_BYTE *)(v33 - 8) = BYTE8(v35);
      *(_QWORD *)(v33 - 16) = v34;
      goto LABEL_8;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x197DCD4BCLL);
  }
  if ((_DWORD)v21 == *(_DWORD *)(v20 + 64))
  {
    result = (char **)WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock> const&>(v20 + 56, (unint64_t)&v35, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)(v20 + 56) + 16 * v21) = v35;
    ++*(_DWORD *)(v20 + 68);
  }
LABEL_8:
  v24 = *((_DWORD *)a3 + 3);
  if (v24)
  {
    v25 = (float *)*a3;
    v26 = (uint64_t *)&v25[6 * v24];
    do
    {
      v27 = *(_QWORD *)v25;
      v28 = *(_WORD *)(*(_QWORD *)v25 + 12) & 0xFFF;
      if (*(_QWORD *)v25)
        v29 = v28 == 3;
      else
        v29 = 0;
      if (v29)
      {
        v30 = *(int *)(v27 + 40);
      }
      else
      {
        if (v28 != 4)
          v27 = 0;
        v30 = *(_QWORD *)(v27 + 40);
      }
      v31 = *((_QWORD *)v25 + 1);
      v32 = v25[4] == 0.0;
      *(_QWORD *)&v35 = v30;
      *((_QWORD *)&v35 + 1) = v31;
      v36 = v32;
      result = (char **)JSC::B3::SwitchValue::appendCase(v10, *(_QWORD *)(v10 + 32), &v35, v12, v13, v14, v15, v16);
      v25 += 6;
    }
    while (v25 != (float *)v26);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(JSC::B3::Value *,BOOL,WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::BasicBlock *)::{lambda(JSC::FTL::SwitchCase const&,JSC::FTL::SwitchCase const&)#1} &,JSC::FTL::SwitchCase*,false>(unint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  __n128 v29;
  uint64_t v30;
  _QWORD *v31;
  __n128 v32;
  __n128 v33;
  int v34;
  _QWORD *v35;
  __n128 v36;
  char v37;
  BOOL v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  while (1)
  {
    v8 = (_QWORD *)a1;
LABEL_2:
    v9 = 1 - a3;
LABEL_3:
    a1 = (unint64_t)v8;
    v10 = v9;
    v11 = a2 - (char *)v8;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (char *)v8) >> 3);
    if (v12 == 2)
      break;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 3uLL:
        return;
      case 4uLL:
        return;
      case 5uLL:
        return;
      default:
        if (v11 <= 575)
        {
          if ((a4 & 1) != 0)
          else
          return;
        }
        if (v10 == 1)
        {
          return;
        }
        v23 = a5;
        v24 = a4;
        v25 = v10;
        v26 = a2 - 24;
        v27 = v12 >> 1;
        v28 = &v8[3 * (v12 >> 1)];
        if ((unint64_t)v11 < 0xC01)
        {
        }
        else
        {
          v30 = 3 * v27;
          v31 = (_QWORD *)(a1 + 24 * v27 - 24);
          v43 = *(_QWORD *)(a1 + 16);
          v41 = *(_OWORD *)a1;
          v34 = *((_DWORD *)v28 + 4);
          *(_OWORD *)a1 = *(_OWORD *)v28;
          *(_DWORD *)(a1 + 16) = v34;
          *((_DWORD *)v28 + 4) = v43;
          *(_OWORD *)v28 = v41;
        }
        if ((v24 & 1) == 0
        {
          goto LABEL_39;
        }
        LOBYTE(a4) = v24;
        if ((v37 & 1) == 0)
          goto LABEL_38;
        {
          v9 = v25 + 1;
          a4 = v24;
          v8 = v35 + 3;
          a5 = v23;
          if (v38)
            goto LABEL_3;
LABEL_38:
          v8 = v35 + 3;
LABEL_39:
          a4 = 0;
          a3 = -v25;
          a5 = v23;
          goto LABEL_2;
        }
        a3 = -v25;
        a2 = (char *)v35;
        a4 = v24;
        a5 = v23;
        if (v38)
          return;
        break;
    }
  }
  v15 = *((_QWORD *)a2 - 3);
  v14 = a2 - 24;
  v13 = v15;
  v16 = *v8;
  v17 = *(_WORD *)(v15 + 12) & 0xFFF;
  if (v15)
    v18 = v17 == 3;
  else
    v18 = 0;
  if (v18)
  {
    v19 = *(int *)(v13 + 40);
  }
  else
  {
    if (v17 != 4)
      v13 = 0;
    v19 = *(_QWORD *)(v13 + 40);
  }
  v20 = *(_WORD *)(v16 + 12) & 0xFFF;
  if (v16 && v20 == 3)
  {
    v21 = *(int *)(v16 + 40);
  }
  else
  {
    if (v20 != 4)
      v16 = 0;
    v21 = *(_QWORD *)(v16 + 40);
  }
  if (v19 < v21)
  {
    v42 = v8[2];
    v40 = *(_OWORD *)v8;
    v22 = *(_OWORD *)v14;
    *((_DWORD *)v8 + 4) = *((_DWORD *)v14 + 4);
    *(_OWORD *)v8 = v22;
    *(_OWORD *)v14 = v40;
    *((_DWORD *)v14 + 4) = v42;
  }
}

BOOL JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(JSC::B3::Value *,BOOL,WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::BasicBlock *)::{lambda(JSC::FTL::SwitchCase const&,JSC::FTL::SwitchCase const&)#1}::operator()(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_WORD *)(a1 + 12) & 0xFFF;
  if (a1 && v2 == 3)
  {
    v3 = *(int *)(a1 + 40);
  }
  else
  {
    if (v2 == 4)
      v4 = a1;
    else
      v4 = 0;
    v3 = *(_QWORD *)(v4 + 40);
  }
  v5 = *(_WORD *)(a2 + 12) & 0xFFF;
  if (a2 && v5 == 3)
  {
    v6 = *(int *)(a2 + 40);
  }
  else
  {
    if (v5 == 4)
      v7 = a2;
    else
      v7 = 0;
    v6 = *(_QWORD *)(v7 + 40);
  }
  return v3 < v6;
}

__n128 std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(JSC::B3::Value *,BOOL,WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::BasicBlock *)::{lambda(JSC::FTL::SwitchCase const&,JSC::FTL::SwitchCase const&)#1} &,JSC::FTL::SwitchCase*,0>(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, _DWORD *a5, __n128 a6)
{
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  v12 = *(_QWORD *)a5;
  v13 = *a4;
  v14 = *(_WORD *)(*(_QWORD *)a5 + 12) & 0xFFF;
  if (*(_QWORD *)a5)
    v15 = v14 == 3;
  else
    v15 = 0;
  if (v15)
  {
    v16 = *(int *)(v12 + 40);
  }
  else
  {
    if (v14 != 4)
      v12 = 0;
    v16 = *(_QWORD *)(v12 + 40);
  }
  v17 = *(_WORD *)(v13 + 12) & 0xFFF;
  if (v13)
    v18 = v17 == 3;
  else
    v18 = 0;
  if (v18)
  {
    v19 = *(int *)(v13 + 40);
  }
  else
  {
    if (v17 != 4)
      v13 = 0;
    v19 = *(_QWORD *)(v13 + 40);
  }
  if (v16 < v19)
  {
    result = *(__n128 *)a4;
    v20 = a4[2];
    v21 = a5[4];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *((_DWORD *)a4 + 4) = v21;
    a5[4] = v20;
    *(__n128 *)a5 = result;
    v22 = *a4;
    v23 = *a3;
    v24 = *(_WORD *)(*a4 + 12) & 0xFFF;
    if (*a4 && v24 == 3)
    {
      v25 = *(int *)(v22 + 40);
    }
    else
    {
      if (v24 != 4)
        v22 = 0;
      v25 = *(_QWORD *)(v22 + 40);
    }
    v26 = *(_WORD *)(v23 + 12) & 0xFFF;
    if (v23 && v26 == 3)
    {
      v27 = *(int *)(v23 + 40);
    }
    else
    {
      if (v26 != 4)
        v23 = 0;
      v27 = *(_QWORD *)(v23 + 40);
    }
    if (v25 < v27)
    {
      result = *(__n128 *)a3;
      v28 = a3[2];
      v29 = *((_DWORD *)a4 + 4);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((_DWORD *)a3 + 4) = v29;
      *((_DWORD *)a4 + 4) = v28;
      *(__n128 *)a4 = result;
      v30 = *a3;
      v31 = *a2;
      v32 = *(_WORD *)(*a3 + 12) & 0xFFF;
      if (*a3 && v32 == 3)
      {
        v33 = *(int *)(v30 + 40);
      }
      else
      {
        if (v32 != 4)
          v30 = 0;
        v33 = *(_QWORD *)(v30 + 40);
      }
      v34 = *(_WORD *)(v31 + 12) & 0xFFF;
      if (v31 && v34 == 3)
      {
        v35 = *(int *)(v31 + 40);
      }
      else
      {
        if (v34 != 4)
          v31 = 0;
        v35 = *(_QWORD *)(v31 + 40);
      }
      if (v33 < v35)
      {
        result = *(__n128 *)a2;
        v36 = a2[2];
        v37 = *((_DWORD *)a3 + 4);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_DWORD *)a2 + 4) = v37;
        *((_DWORD *)a3 + 4) = v36;
        *(__n128 *)a3 = result;
        v38 = *a2;
        v39 = *a1;
        v40 = *(_WORD *)(*a2 + 12) & 0xFFF;
        if (*a2 && v40 == 3)
        {
          v41 = *(int *)(v38 + 40);
        }
        else
        {
          if (v40 != 4)
            v38 = 0;
          v41 = *(_QWORD *)(v38 + 40);
        }
        v42 = *(_WORD *)(v39 + 12) & 0xFFF;
        if (v39 && v42 == 3)
        {
          v43 = *(int *)(v39 + 40);
        }
        else
        {
          if (v42 != 4)
            v39 = 0;
          v43 = *(_QWORD *)(v39 + 40);
        }
        if (v41 < v43)
        {
          result = *(__n128 *)a1;
          v44 = a1[2];
          v45 = *((_DWORD *)a2 + 4);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_DWORD *)a1 + 4) = v45;
          *((_DWORD *)a2 + 4) = v44;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(JSC::B3::Value *,BOOL,WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::BasicBlock *)::{lambda(JSC::FTL::SwitchCase const&,JSC::FTL::SwitchCase const&)#1} &,JSC::FTL::SwitchCase*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  if (result != a2)
  {
    v2 = result + 24;
    if (result + 24 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_QWORD *)(v4 + 24);
        v7 = *(_WORD *)(v6 + 12) & 0xFFF;
        if (v6)
          v8 = v7 == 3;
        else
          v8 = 0;
        if (v8)
        {
          v10 = *(int *)(v6 + 40);
        }
        else
        {
          if (v7 == 4)
            v9 = *(_QWORD *)(v4 + 24);
          else
            v9 = 0;
          v10 = *(_QWORD *)(v9 + 40);
        }
        v11 = *(_QWORD *)v4;
        v12 = *(_WORD *)(*(_QWORD *)v4 + 12) & 0xFFF;
        if (*(_QWORD *)v4)
          v13 = v12 == 3;
        else
          v13 = 0;
        if (v13)
        {
          v14 = *(int *)(v11 + 40);
        }
        else
        {
          if (v12 != 4)
            v11 = 0;
          v14 = *(_QWORD *)(v11 + 40);
        }
        if (v10 < v14)
        {
          v25 = *(_OWORD *)(v4 + 32);
          v15 = v3;
          while (1)
          {
            v16 = result + v15;
            *(_OWORD *)(v16 + 24) = *(_OWORD *)(result + v15);
            *(_DWORD *)(v16 + 40) = *(_DWORD *)(result + v15 + 16);
            if (!v15)
              break;
            v17 = *(_WORD *)(v6 + 12) & 0xFFF;
            if (v17 == 3)
            {
              v19 = *(int *)(v6 + 40);
            }
            else
            {
              if (v17 == 4)
                v18 = v6;
              else
                v18 = 0;
              v19 = *(_QWORD *)(v18 + 40);
            }
            v20 = *(_QWORD *)(v16 - 24);
            v21 = *(_WORD *)(v20 + 12) & 0xFFF;
            if (v20)
              v22 = v21 == 3;
            else
              v22 = 0;
            if (v22)
            {
              v23 = *(int *)(v20 + 40);
            }
            else
            {
              if (v21 != 4)
                v20 = 0;
              v23 = *(_QWORD *)(v20 + 40);
            }
            v15 -= 24;
            if (v19 >= v23)
            {
              v24 = result + v15 + 24;
              goto LABEL_41;
            }
          }
          v24 = result;
LABEL_41:
          *(_QWORD *)v24 = v6;
          *(_QWORD *)(v24 + 8) = v25;
          *(_DWORD *)(v24 + 16) = DWORD2(v25);
        }
        v2 = v5 + 24;
        v3 += 24;
        v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

_OWORD *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(JSC::B3::Value *,BOOL,WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::BasicBlock *)::{lambda(JSC::FTL::SwitchCase const&,JSC::FTL::SwitchCase const&)#1} &,JSC::FTL::SwitchCase*>(_OWORD *result, char *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  __int128 v25;

  if (result != (_OWORD *)a2)
  {
    v2 = (char *)result + 24;
    if ((char *)result + 24 != a2)
    {
      v3 = -2;
      v4 = 1;
      v5 = result;
      while (1)
      {
        v6 = *(_QWORD *)v2;
        v7 = *(_WORD *)(*(_QWORD *)v2 + 12) & 0xFFF;
        if (*(_QWORD *)v2 && v7 == 3)
        {
          v10 = *(int *)(v6 + 40);
        }
        else
        {
          v9 = v7 == 4 ? *(_QWORD *)v2 : 0;
          v10 = *(_QWORD *)(v9 + 40);
        }
        v11 = *(_QWORD *)v5;
        v12 = *(_WORD *)(*(_QWORD *)v5 + 12) & 0xFFF;
        if (*(_QWORD *)v5 && v12 == 3)
        {
          v14 = *(int *)(v11 + 40);
        }
        else
        {
          if (v12 != 4)
            v11 = 0;
          v14 = *(_QWORD *)(v11 + 40);
        }
        if (v10 < v14)
          break;
LABEL_40:
        v5 = (_OWORD *)((char *)result + 24 * v4++);
        v2 += 24;
        --v3;
        if (v2 == a2)
          return result;
      }
      v25 = v5[2];
      v15 = v3;
      v16 = v2;
      while (1)
      {
        *(_OWORD *)v16 = *(_OWORD *)(v16 - 24);
        *((_DWORD *)v16 + 4) = *((_DWORD *)v16 - 2);
        if (__CFADD__(v15++, 1))
          break;
        v18 = *(_WORD *)(v6 + 12) & 0xFFF;
        if (v18 == 3)
        {
          v20 = *(int *)(v6 + 40);
        }
        else
        {
          if (v18 == 4)
            v19 = v6;
          else
            v19 = 0;
          v20 = *(_QWORD *)(v19 + 40);
        }
        v21 = *((_QWORD *)v16 - 6);
        v22 = *(_WORD *)(v21 + 12) & 0xFFF;
        if (v21)
          v23 = v22 == 3;
        else
          v23 = 0;
        if (v23)
        {
          v24 = *(int *)(v21 + 40);
        }
        else
        {
          if (v22 != 4)
            v21 = 0;
          v24 = *(_QWORD *)(v21 + 40);
        }
        v16 -= 24;
        if (v20 >= v24)
        {
          *(_QWORD *)v16 = v6;
          *((_QWORD *)v16 + 1) = v25;
          *((_DWORD *)v16 + 4) = DWORD2(v25);
          goto LABEL_40;
        }
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(JSC::B3::Value *,BOOL,WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::BasicBlock *)::{lambda(JSC::FTL::SwitchCase const&,JSC::FTL::SwitchCase const&)#1} &,JSC::FTL::SwitchCase*,JSC::FTL::SwitchCase*>(uint64_t result, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v60;
  uint64_t v61;
  __int128 v62;

  if ((__int128 *)result != a2)
  {
    v4 = a2;
    v5 = result;
    v6 = (uint64_t)a2 - result;
    v7 = ((uint64_t)a2 - result) / 24;
    if ((uint64_t)a2 - result >= 25)
    {
      v8 = (unint64_t)(v7 - 2) >> 1;
      v9 = v8 + 1;
      v10 = (uint64_t *)(result + 24 * v8);
      do
      {
        v10 -= 3;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      v11 = *(_QWORD *)v5;
      v12 = v4;
      do
      {
        v13 = *(_QWORD *)v12;
        v14 = *(_WORD *)(*(_QWORD *)v12 + 12) & 0xFFF;
        if (*(_QWORD *)v12)
          v15 = v14 == 3;
        else
          v15 = 0;
        if (v15)
        {
          v16 = *(int *)(v13 + 40);
        }
        else
        {
          if (v14 != 4)
            v13 = 0;
          v16 = *(_QWORD *)(v13 + 40);
        }
        v17 = *(_WORD *)(v11 + 12) & 0xFFF;
        if (v11 && v17 == 3)
        {
          v18 = *(int *)(v11 + 40);
        }
        else
        {
          if (v17 == 4)
            v19 = v11;
          else
            v19 = 0;
          v18 = *(_QWORD *)(v19 + 40);
        }
        if (v16 < v18)
        {
          v20 = *v12;
          v21 = *((_QWORD *)v12 + 2);
          v22 = *(_DWORD *)(v5 + 16);
          *v12 = *(_OWORD *)v5;
          *((_DWORD *)v12 + 4) = v22;
          *(_DWORD *)(v5 + 16) = v21;
          *(_OWORD *)v5 = v20;
          v11 = *(_QWORD *)v5;
        }
        v12 = (__int128 *)((char *)v12 + 24);
      }
      while (v12 != a3);
    }
    if (v6 >= 25)
    {
      v23 = v6 / 0x18uLL;
      do
      {
        v24 = 0;
        v60 = *(_OWORD *)v5;
        v61 = *(_QWORD *)(v5 + 16);
        v25 = v5;
        do
        {
          v26 = v25 + 24 * v24 + 24;
          v27 = (2 * v24) | 1;
          v28 = 2 * v24 + 2;
          if (v28 < v23)
          {
            v29 = *(_QWORD *)v26;
            v30 = *(_WORD *)(*(_QWORD *)v26 + 12) & 0xFFF;
            if (*(_QWORD *)v26)
              v31 = v30 == 3;
            else
              v31 = 0;
            if (v31)
            {
              v32 = *(int *)(v29 + 40);
            }
            else
            {
              if (v30 != 4)
                v29 = 0;
              v32 = *(_QWORD *)(v29 + 40);
            }
            v33 = *(_QWORD *)(v26 + 24);
            v34 = *(_WORD *)(v33 + 12) & 0xFFF;
            if (v33)
              v35 = v34 == 3;
            else
              v35 = 0;
            if (v35)
            {
              result = *(int *)(v33 + 40);
            }
            else
            {
              if (v34 != 4)
                v33 = 0;
              result = *(_QWORD *)(v33 + 40);
            }
            if (v32 < result)
            {
              v26 += 24;
              v27 = v28;
            }
          }
          v36 = *(_OWORD *)v26;
          *(_DWORD *)(v25 + 16) = *(_DWORD *)(v26 + 16);
          *(_OWORD *)v25 = v36;
          v25 = v26;
          v24 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v23 - 2) >> 1));
        v4 = (__int128 *)((char *)v4 - 24);
        if ((__int128 *)v26 == v4)
        {
          *(_DWORD *)(v26 + 16) = v61;
          *(_OWORD *)v26 = v60;
        }
        else
        {
          v37 = *v4;
          *(_DWORD *)(v26 + 16) = *((_DWORD *)v4 + 4);
          *(_OWORD *)v26 = v37;
          *v4 = v60;
          *((_DWORD *)v4 + 4) = v61;
          v38 = v26 - v5 + 24;
          if (v38 >= 25)
          {
            v39 = (v38 / 0x18uLL - 2) >> 1;
            v40 = (_DWORD *)(v5 + 24 * v39);
            v41 = *(_QWORD *)v40;
            v42 = *(_WORD *)(*(_QWORD *)v40 + 12) & 0xFFF;
            if (*(_QWORD *)v40)
              v43 = v42 == 3;
            else
              v43 = 0;
            if (v43)
            {
              v44 = *(int *)(v41 + 40);
            }
            else
            {
              if (v42 != 4)
                v41 = 0;
              v44 = *(_QWORD *)(v41 + 40);
            }
            v45 = *(_QWORD *)v26;
            v46 = *(_WORD *)(*(_QWORD *)v26 + 12) & 0xFFF;
            if (*(_QWORD *)v26)
              v47 = v46 == 3;
            else
              v47 = 0;
            if (v47)
            {
              v49 = *(int *)(v45 + 40);
            }
            else
            {
              if (v46 == 4)
                v48 = *(_QWORD *)v26;
              else
                v48 = 0;
              v49 = *(_QWORD *)(v48 + 40);
            }
            if (v44 < v49)
            {
              v62 = *(_OWORD *)(v26 + 8);
              do
              {
                v50 = v26;
                v26 = (uint64_t)v40;
                v51 = *(_OWORD *)v40;
                *(_DWORD *)(v50 + 16) = v40[4];
                *(_OWORD *)v50 = v51;
                if (!v39)
                  break;
                v39 = (v39 - 1) >> 1;
                v40 = (_DWORD *)(v5 + 24 * v39);
                v52 = *(_QWORD *)v40;
                v53 = *(_WORD *)(*(_QWORD *)v40 + 12) & 0xFFF;
                if (*(_QWORD *)v40 && v53 == 3)
                {
                  v55 = *(int *)(v52 + 40);
                }
                else
                {
                  if (v53 != 4)
                    v52 = 0;
                  v55 = *(_QWORD *)(v52 + 40);
                }
                v56 = *(_WORD *)(v45 + 12) & 0xFFF;
                if (v56 == 3)
                {
                  v58 = *(int *)(v45 + 40);
                }
                else
                {
                  v57 = v56 == 4 ? v45 : 0;
                  v58 = *(_QWORD *)(v57 + 40);
                }
              }
              while (v55 < v58);
              *(_QWORD *)v26 = v45;
              *(_QWORD *)(v26 + 8) = v62;
              *(_DWORD *)(v26 + 16) = DWORD2(v62);
            }
          }
        }
      }
      while (v23-- > 2);
    }
  }
  return result;
}

__n128 std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(JSC::B3::Value *,BOOL,WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::BasicBlock *)::{lambda(JSC::FTL::SwitchCase const&,JSC::FTL::SwitchCase const&)#1} &,JSC::FTL::SwitchCase*>(_QWORD *a1, _QWORD *a2, _DWORD *a3, __n128 result)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;

  v4 = *a2;
  v5 = *a1;
  v6 = *(_WORD *)(*a2 + 12) & 0xFFF;
  if (*a2)
    v7 = v6 == 3;
  else
    v7 = 0;
  v8 = v7;
  if (v7)
  {
    v10 = *(int *)(v4 + 40);
  }
  else
  {
    if (v6 == 4)
      v9 = *a2;
    else
      v9 = 0;
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = *(_WORD *)(v5 + 12) & 0xFFF;
  if (v5)
    v12 = v11 == 3;
  else
    v12 = 0;
  if (v12)
  {
    v13 = *(int *)(v5 + 40);
  }
  else
  {
    if (v11 != 4)
      v5 = 0;
    v13 = *(_QWORD *)(v5 + 40);
  }
  v14 = *(_QWORD *)a3;
  v15 = *(_WORD *)(*(_QWORD *)a3 + 12) & 0xFFF;
  if (*(_QWORD *)a3)
    v16 = v15 == 3;
  else
    v16 = 0;
  v17 = v16;
  if (v10 >= v13)
  {
    if (v17)
    {
      v22 = *(int *)(v14 + 40);
      if (!v8)
      {
LABEL_41:
        if (v6 != 4)
          v4 = 0;
        v23 = *(_QWORD *)(v4 + 40);
        goto LABEL_53;
      }
    }
    else
    {
      if (v15 == 4)
        v21 = *(_QWORD *)a3;
      else
        v21 = 0;
      v22 = *(_QWORD *)(v21 + 40);
      if (!v8)
        goto LABEL_41;
    }
    v23 = *(int *)(v4 + 40);
LABEL_53:
    if (v22 < v23)
    {
      result = *(__n128 *)a2;
      v32 = a2[2];
      v33 = a3[4];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_DWORD *)a2 + 4) = v33;
      a3[4] = v32;
      *(__n128 *)a3 = result;
      v34 = *a2;
      v35 = *a1;
      v36 = *(_WORD *)(*a2 + 12) & 0xFFF;
      if (*a2 && v36 == 3)
      {
        v37 = *(int *)(v34 + 40);
      }
      else
      {
        if (v36 != 4)
          v34 = 0;
        v37 = *(_QWORD *)(v34 + 40);
      }
      v40 = *(_WORD *)(v35 + 12) & 0xFFF;
      if (v35 && v40 == 3)
      {
        v41 = *(int *)(v35 + 40);
      }
      else
      {
        if (v40 != 4)
          v35 = 0;
        v41 = *(_QWORD *)(v35 + 40);
      }
      if (v37 < v41)
      {
        result = *(__n128 *)a1;
        v43 = a1[2];
        v44 = *((_DWORD *)a2 + 4);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_DWORD *)a1 + 4) = v44;
        *((_DWORD *)a2 + 4) = v43;
        *(__n128 *)a2 = result;
      }
    }
    return result;
  }
  if (v17)
  {
    v19 = *(int *)(v14 + 40);
    if (!v8)
    {
LABEL_33:
      if (v6 != 4)
        v4 = 0;
      v20 = *(_QWORD *)(v4 + 40);
      goto LABEL_46;
    }
  }
  else
  {
    if (v15 == 4)
      v18 = *(_QWORD *)a3;
    else
      v18 = 0;
    v19 = *(_QWORD *)(v18 + 40);
    if (!v8)
      goto LABEL_33;
  }
  v20 = *(int *)(v4 + 40);
LABEL_46:
  if (v19 < v20)
  {
    result = *(__n128 *)a1;
    v24 = a1[2];
    v25 = a3[4];
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *((_DWORD *)a1 + 4) = v25;
LABEL_74:
    a3[4] = v24;
    *(__n128 *)a3 = result;
    return result;
  }
  result = *(__n128 *)a1;
  v26 = a1[2];
  v27 = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_DWORD *)a1 + 4) = v27;
  *((_DWORD *)a2 + 4) = v26;
  *(__n128 *)a2 = result;
  v28 = *(_QWORD *)a3;
  v29 = *a2;
  v30 = *(_WORD *)(*(_QWORD *)a3 + 12) & 0xFFF;
  if (*(_QWORD *)a3 && v30 == 3)
  {
    v31 = *(int *)(v28 + 40);
  }
  else
  {
    if (v30 != 4)
      v28 = 0;
    v31 = *(_QWORD *)(v28 + 40);
  }
  v38 = *(_WORD *)(v29 + 12) & 0xFFF;
  if (v29 && v38 == 3)
  {
    v39 = *(int *)(v29 + 40);
  }
  else
  {
    if (v38 != 4)
      v29 = 0;
    v39 = *(_QWORD *)(v29 + 40);
  }
  if (v31 < v39)
  {
    result = *(__n128 *)a2;
    v24 = a2[2];
    v42 = a3[4];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_DWORD *)a2 + 4) = v42;
    goto LABEL_74;
  }
  return result;
}

_DWORD *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::FTL::SwitchCase *,JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(JSC::B3::Value *,BOOL,WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::BasicBlock *)::{lambda(JSC::FTL::SwitchCase const&,JSC::FTL::SwitchCase const&)#1} &>(_DWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  __int128 v40;
  _QWORD *v41;
  int v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  __int128 v71;
  uint64_t v72;

  v2 = *(_QWORD *)result;
  v3 = *(a2 - 3);
  v4 = *(_WORD *)(*(_QWORD *)result + 12) & 0xFFF;
  if (*(_QWORD *)result)
    v5 = v4 == 3;
  else
    v5 = 0;
  v6 = v5;
  if (v5)
  {
    v8 = *(int *)(v2 + 40);
  }
  else
  {
    if (v4 == 4)
      v7 = *(_QWORD *)result;
    else
      v7 = 0;
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = *(_WORD *)(v3 + 12) & 0xFFF;
  if (v3)
    v10 = v9 == 3;
  else
    v10 = 0;
  if (v10)
  {
    v11 = *(int *)(v3 + 40);
  }
  else
  {
    if (v9 != 4)
      v3 = 0;
    v11 = *(_QWORD *)(v3 + 40);
  }
  if (v4 == 4)
    v12 = *(_QWORD *)result;
  else
    v12 = 0;
  if (v8 < v11)
  {
    v13 = result + 6;
    if ((v6 & 1) != 0)
    {
      while (v13 != (_DWORD *)a2)
      {
        v18 = *(_QWORD *)v13;
        v19 = *(_WORD *)(*(_QWORD *)v13 + 12) & 0xFFF;
        if (*(_QWORD *)v13)
          v20 = v19 == 3;
        else
          v20 = 0;
        if (v20)
        {
          v21 = *(int *)(v18 + 40);
        }
        else
        {
          if (v19 != 4)
            v18 = 0;
          v21 = *(_QWORD *)(v18 + 40);
        }
        v13 += 6;
        if (v21 > *(int *)(v2 + 40))
        {
LABEL_47:
          v22 = v13 - 6;
          goto LABEL_72;
        }
      }
    }
    else
    {
      while (v13 != (_DWORD *)a2)
      {
        v14 = *(_QWORD *)v13;
        v15 = *(_WORD *)(*(_QWORD *)v13 + 12) & 0xFFF;
        if (*(_QWORD *)v13)
          v16 = v15 == 3;
        else
          v16 = 0;
        if (v16)
        {
          v17 = *(int *)(v14 + 40);
        }
        else
        {
          if (v15 != 4)
            v14 = 0;
          v17 = *(_QWORD *)(v14 + 40);
        }
        v13 += 6;
        if (*(_QWORD *)(v12 + 40) < v17)
          goto LABEL_47;
      }
    }
    goto LABEL_157;
  }
  if ((v6 & 1) != 0)
  {
    v28 = result + 6;
    do
    {
      v22 = v28;
      if (v28 >= a2)
        break;
      v29 = *v28;
      v30 = *(_WORD *)(*v28 + 12) & 0xFFF;
      if (*v22 && v30 == 3)
      {
        v32 = *(int *)(v29 + 40);
      }
      else
      {
        if (v30 != 4)
          v29 = 0;
        v32 = *(_QWORD *)(v29 + 40);
      }
      v28 = v22 + 3;
    }
    while (v32 <= *(int *)(v2 + 40));
  }
  else
  {
    v23 = result + 6;
    do
    {
      v22 = v23;
      if (v23 >= a2)
        break;
      v24 = *v23;
      v25 = *(_WORD *)(*v22 + 12) & 0xFFF;
      if (*v22 && v25 == 3)
      {
        v27 = *(int *)(v24 + 40);
      }
      else
      {
        if (v25 != 4)
          v24 = 0;
        v27 = *(_QWORD *)(v24 + 40);
      }
      v23 = v22 + 3;
    }
    while (*(_QWORD *)(v12 + 40) >= v27);
  }
LABEL_72:
  v33 = a2;
  if (v22 < a2)
  {
    v33 = a2;
    while (v33 != result)
    {
      if (v6)
        v34 = *(int *)(v2 + 40);
      else
        v34 = *(_QWORD *)(v12 + 40);
      v36 = *((_QWORD *)v33 - 3);
      v33 -= 6;
      v35 = v36;
      v37 = *(_WORD *)(v36 + 12) & 0xFFF;
      if (v36)
        v38 = v37 == 3;
      else
        v38 = 0;
      if (v38)
      {
        v39 = *(int *)(v35 + 40);
      }
      else
      {
        if (v37 != 4)
          v35 = 0;
        v39 = *(_QWORD *)(v35 + 40);
      }
      if (v34 >= v39)
        goto LABEL_87;
    }
    goto LABEL_157;
  }
LABEL_87:
  if (v22 < (_QWORD *)v33)
  {
LABEL_88:
    v72 = v22[2];
    v71 = *(_OWORD *)v22;
    v40 = *(_OWORD *)v33;
    *((_DWORD *)v22 + 4) = v33[4];
    *(_OWORD *)v22 = v40;
    v33[4] = v72;
    *(_OWORD *)v33 = v71;
    v41 = v22 + 3;
    if (v22 + 3 != a2)
    {
      v42 = *(_WORD *)(v2 + 12) & 0xFFF;
      if (v2)
        v43 = v42 == 3;
      else
        v43 = 0;
      v44 = v43;
      if (v43)
      {
        v46 = *(int *)(v2 + 40);
      }
      else
      {
        if (v42 == 4)
          v45 = v2;
        else
          v45 = 0;
        v46 = *(_QWORD *)(v45 + 40);
      }
      v47 = *v41;
      v48 = *(_WORD *)(*v41 + 12) & 0xFFF;
      if (*v41 && v48 == 3)
      {
        v49 = *(int *)(v47 + 40);
      }
      else
      {
        if (v48 != 4)
          v47 = 0;
        v49 = *(_QWORD *)(v47 + 40);
      }
      if (v46 < v49)
      {
LABEL_126:
        if (v42 == 4)
          v57 = v2;
        else
          v57 = 0;
        if ((v44 & 1) != 0)
        {
          while (v33 != result)
          {
            v64 = *((_QWORD *)v33 - 3);
            v33 -= 6;
            v63 = v64;
            v65 = *(_WORD *)(v64 + 12) & 0xFFF;
            if (v64)
              v66 = v65 == 3;
            else
              v66 = 0;
            if (v66)
            {
              v67 = *(int *)(v63 + 40);
            }
            else
            {
              if (v65 != 4)
                v63 = 0;
              v67 = *(_QWORD *)(v63 + 40);
            }
            if (v67 <= *(int *)(v2 + 40))
            {
LABEL_151:
              v22 = v41;
              if (v41 < (_QWORD *)v33)
                goto LABEL_88;
              goto LABEL_154;
            }
          }
        }
        else
        {
          while (v33 != result)
          {
            v59 = *((_QWORD *)v33 - 3);
            v33 -= 6;
            v58 = v59;
            v60 = *(_WORD *)(v59 + 12) & 0xFFF;
            if (v59)
              v61 = v60 == 3;
            else
              v61 = 0;
            if (v61)
            {
              v62 = *(int *)(v58 + 40);
            }
            else
            {
              if (v60 != 4)
                v58 = 0;
              v62 = *(_QWORD *)(v58 + 40);
            }
            if (*(_QWORD *)(v57 + 40) >= v62)
              goto LABEL_151;
          }
        }
      }
      else
      {
        if (v42 == 4)
          v50 = v2;
        else
          v50 = 0;
        v51 = v22 + 6;
        while (v51 != a2)
        {
          if (v44)
            v52 = *(int *)(v2 + 40);
          else
            v52 = *(_QWORD *)(v50 + 40);
          v53 = *v51;
          v54 = *(_WORD *)(*v51 + 12) & 0xFFF;
          if (*v51)
            v55 = v54 == 3;
          else
            v55 = 0;
          if (v55)
          {
            v56 = *(int *)(v53 + 40);
          }
          else
          {
            if (v54 != 4)
              v53 = 0;
            v56 = *(_QWORD *)(v53 + 40);
          }
          v51 += 3;
          if (v52 < v56)
          {
            v41 = v51 - 3;
            goto LABEL_126;
          }
        }
      }
    }
LABEL_157:
    __break(1u);
    return result;
  }
  v41 = v22;
LABEL_154:
  if (v41 - 3 != (_QWORD *)result)
  {
    v68 = *(_OWORD *)(v41 - 3);
    result[4] = *((_DWORD *)v41 - 2);
    *(_OWORD *)result = v68;
  }
  *(v41 - 3) = v2;
  *((_DWORD *)v41 - 2) = v70;
  *(v41 - 2) = v69;
  return v41;
}

unint64_t std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::FTL::SwitchCase *,JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(JSC::B3::Value *,BOOL,WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::BasicBlock *)::{lambda(JSC::FTL::SwitchCase const&,JSC::FTL::SwitchCase const&)#1} &>(unint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  BOOL v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  uint64_t v77;

  v2 = *(_QWORD *)result;
  v3 = result + 24;
  if ((uint64_t *)(result + 24) == a2)
    goto LABEL_159;
  v4 = *(_QWORD *)v3;
  v5 = *(_WORD *)(*(_QWORD *)v3 + 12) & 0xFFF;
  if (*(_QWORD *)v3)
    v6 = v5 == 3;
  else
    v6 = 0;
  if (v6)
  {
    v7 = *(int *)(v4 + 40);
  }
  else
  {
    if (v5 != 4)
      v4 = 0;
    v7 = *(_QWORD *)(v4 + 40);
  }
  v8 = *(_WORD *)(v2 + 12) & 0xFFF;
  if (v2)
    v9 = v8 == 3;
  else
    v9 = 0;
  v10 = v9;
  if (v9)
  {
    v12 = *(int *)(v2 + 40);
  }
  else
  {
    if (v8 == 4)
      v11 = *(_QWORD *)result;
    else
      v11 = 0;
    v12 = *(_QWORD *)(v11 + 40);
  }
  if (v7 >= v12)
    goto LABEL_52;
  v13 = 0;
  if (v8 == 4)
    v14 = *(_QWORD *)result;
  else
    v14 = 0;
  do
  {
    v15 = (uint64_t *)(result + v13 + 48);
    if (v15 == a2)
      goto LABEL_159;
    v16 = *v15;
    v17 = *(_WORD *)(v16 + 12) & 0xFFF;
    if (v16)
      v18 = v17 == 3;
    else
      v18 = 0;
    if (v18)
    {
      v19 = *(int *)(v16 + 40);
      if (!v10)
        goto LABEL_34;
    }
    else
    {
      if (v17 != 4)
        v16 = 0;
      v19 = *(_QWORD *)(v16 + 40);
      if (!v10)
      {
LABEL_34:
        v20 = *(_QWORD *)(v14 + 40);
        goto LABEL_37;
      }
    }
    v20 = *(int *)(v2 + 40);
LABEL_37:
    v13 += 24;
  }
  while (v19 < v20);
  v3 = result + v13 + 24;
  if (!v13)
  {
LABEL_52:
    if (v8 == 4)
      v27 = *(_QWORD *)result;
    else
      v27 = 0;
    if ((v10 & 1) != 0)
    {
      v21 = (unint64_t)a2;
      do
      {
        if (v3 >= v21)
          break;
        v34 = *(_QWORD *)(v21 - 24);
        v21 -= 24;
        v33 = v34;
        v35 = *(_WORD *)(v34 + 12) & 0xFFF;
        if (v34 && v35 == 3)
        {
          v37 = *(int *)(v33 + 40);
        }
        else
        {
          if (v35 != 4)
            v33 = 0;
          v37 = *(_QWORD *)(v33 + 40);
        }
      }
      while (v37 >= *(int *)(v2 + 40));
    }
    else
    {
      v21 = (unint64_t)a2;
      do
      {
        if (v3 >= v21)
          break;
        v29 = *(_QWORD *)(v21 - 24);
        v21 -= 24;
        v28 = v29;
        v30 = *(_WORD *)(v29 + 12) & 0xFFF;
        if (v29 && v30 == 3)
        {
          v32 = *(int *)(v28 + 40);
        }
        else
        {
          if (v30 != 4)
            v28 = 0;
          v32 = *(_QWORD *)(v28 + 40);
        }
      }
      while (v32 >= *(_QWORD *)(v27 + 40));
    }
LABEL_91:
    v43 = v3;
    if (v3 >= v21)
    {
LABEL_156:
      if (v43 - 24 != result)
      {
        v73 = *(_OWORD *)(v43 - 24);
        *(_DWORD *)(result + 16) = *(_DWORD *)(v43 - 8);
        *(_OWORD *)result = v73;
      }
      *(_QWORD *)(v43 - 24) = v2;
      *(_DWORD *)(v43 - 8) = v75;
      *(_QWORD *)(v43 - 16) = v74;
      return v43 - 24;
    }
    v44 = v3;
    v45 = v21;
LABEL_93:
    v77 = *(_QWORD *)(v44 + 16);
    v76 = *(_OWORD *)v44;
    v46 = *(_OWORD *)v45;
    *(_DWORD *)(v44 + 16) = *(_DWORD *)(v45 + 16);
    *(_OWORD *)v44 = v46;
    *(_DWORD *)(v45 + 16) = v77;
    *(_OWORD *)v45 = v76;
    v43 = v44 + 24;
    if ((uint64_t *)(v44 + 24) == a2)
      goto LABEL_159;
    v47 = *(_QWORD *)v43;
    v48 = *(_WORD *)(*(_QWORD *)v43 + 12) & 0xFFF;
    if (*(_QWORD *)v43 && v48 == 3)
    {
      v49 = *(int *)(v47 + 40);
    }
    else
    {
      if (v48 != 4)
        v47 = 0;
      v49 = *(_QWORD *)(v47 + 40);
    }
    v50 = *(_WORD *)(v2 + 12) & 0xFFF;
    if (v2)
      v51 = v50 == 3;
    else
      v51 = 0;
    v52 = v51;
    if (v51)
    {
      v54 = *(int *)(v2 + 40);
    }
    else
    {
      if (v50 == 4)
        v53 = v2;
      else
        v53 = 0;
      v54 = *(_QWORD *)(v53 + 40);
    }
    if (v49 >= v54)
    {
LABEL_130:
      if (v50 == 4)
        v62 = v2;
      else
        v62 = 0;
      if ((v52 & 1) != 0)
      {
        while (v45 != result)
        {
          v69 = *(_QWORD *)(v45 - 24);
          v45 -= 24;
          v68 = v69;
          v70 = *(_WORD *)(v69 + 12) & 0xFFF;
          if (v69)
            v71 = v70 == 3;
          else
            v71 = 0;
          if (v71)
          {
            v72 = *(int *)(v68 + 40);
          }
          else
          {
            if (v70 != 4)
              v68 = 0;
            v72 = *(_QWORD *)(v68 + 40);
          }
          if (v72 < *(int *)(v2 + 40))
          {
LABEL_155:
            v44 = v43;
            if (v43 < v45)
              goto LABEL_93;
            goto LABEL_156;
          }
        }
      }
      else
      {
        while (v45 != result)
        {
          v64 = *(_QWORD *)(v45 - 24);
          v45 -= 24;
          v63 = v64;
          v65 = *(_WORD *)(v64 + 12) & 0xFFF;
          if (v64)
            v66 = v65 == 3;
          else
            v66 = 0;
          if (v66)
          {
            v67 = *(int *)(v63 + 40);
          }
          else
          {
            if (v65 != 4)
              v63 = 0;
            v67 = *(_QWORD *)(v63 + 40);
          }
          if (v67 < *(_QWORD *)(v62 + 40))
            goto LABEL_155;
        }
      }
      goto LABEL_159;
    }
    if (v50 == 4)
      v55 = v2;
    else
      v55 = 0;
    v56 = (uint64_t *)(v44 + 48);
    while (1)
    {
      if (v56 == a2)
        goto LABEL_159;
      v57 = *v56;
      v58 = *(_WORD *)(*v56 + 12) & 0xFFF;
      if (*v56)
        v59 = v58 == 3;
      else
        v59 = 0;
      if (v59)
      {
        v60 = *(int *)(v57 + 40);
        if (v52)
          goto LABEL_127;
      }
      else
      {
        if (v58 != 4)
          v57 = 0;
        v60 = *(_QWORD *)(v57 + 40);
        if (v52)
        {
LABEL_127:
          v61 = *(int *)(v2 + 40);
          goto LABEL_128;
        }
      }
      v61 = *(_QWORD *)(v55 + 40);
LABEL_128:
      v56 += 3;
      if (v60 >= v61)
      {
        v43 = (unint64_t)(v56 - 3);
        goto LABEL_130;
      }
    }
  }
  if ((v10 & 1) != 0)
  {
    v21 = (unint64_t)a2;
    while (v21 != result)
    {
      v39 = *(_QWORD *)(v21 - 24);
      v21 -= 24;
      v38 = v39;
      v40 = *(_WORD *)(v39 + 12) & 0xFFF;
      if (v39)
        v41 = v40 == 3;
      else
        v41 = 0;
      if (v41)
      {
        v42 = *(int *)(v38 + 40);
      }
      else
      {
        if (v40 != 4)
          v38 = 0;
        v42 = *(_QWORD *)(v38 + 40);
      }
      if (v42 < *(int *)(v2 + 40))
        goto LABEL_91;
    }
  }
  else
  {
    v21 = (unint64_t)a2;
    while (v21 != result)
    {
      v23 = *(_QWORD *)(v21 - 24);
      v21 -= 24;
      v22 = v23;
      v24 = *(_WORD *)(v23 + 12) & 0xFFF;
      if (v23)
        v25 = v24 == 3;
      else
        v25 = 0;
      if (v25)
      {
        v26 = *(int *)(v22 + 40);
      }
      else
      {
        if (v24 != 4)
          v22 = 0;
        v26 = *(_QWORD *)(v22 + 40);
      }
      if (v26 < *(_QWORD *)(v14 + 40))
        goto LABEL_91;
    }
  }
LABEL_159:
  __break(1u);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(JSC::B3::Value *,BOOL,WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::BasicBlock *)::{lambda(JSC::FTL::SwitchCase const&,JSC::FTL::SwitchCase const&)#1} &,JSC::FTL::SwitchCase*>(_QWORD *a1, _QWORD *a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  __int128 v40;

  v5 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 3;
      v7 = *(a2 - 3);
      v9 = *a1;
      v10 = *(_WORD *)(v7 + 12) & 0xFFF;
      if (v7 && v10 == 3)
      {
        v11 = *(int *)(v7 + 40);
      }
      else
      {
        if (v10 != 4)
          v7 = 0;
        v11 = *(_QWORD *)(v7 + 40);
      }
      v35 = *(_WORD *)(v9 + 12) & 0xFFF;
      if (v9 && v35 == 3)
      {
        v36 = *(int *)(v9 + 40);
      }
      else
      {
        if (v35 != 4)
          v9 = 0;
        v36 = *(_QWORD *)(v9 + 40);
      }
      if (v11 < v36)
      {
        v37 = *(_OWORD *)a1;
        v38 = a1[2];
        v39 = *((_DWORD *)a2 - 2);
        *(_OWORD *)a1 = *v8;
        *((_DWORD *)a1 + 4) = v39;
        *((_DWORD *)a2 - 2) = v38;
        *v8 = v37;
      }
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      return 1;
    default:
      v12 = a1 + 6;
      v13 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *v13;
    v17 = *(_WORD *)(*v13 + 12) & 0xFFF;
    if (*v13 && v17 == 3)
    {
      v20 = *(int *)(v16 + 40);
    }
    else
    {
      v19 = v17 == 4 ? *v13 : 0;
      v20 = *(_QWORD *)(v19 + 40);
    }
    v21 = *v12;
    v22 = *(_WORD *)(*v12 + 12) & 0xFFF;
    if (*v12 && v22 == 3)
    {
      v24 = *(int *)(v21 + 40);
    }
    else
    {
      if (v22 != 4)
        v21 = 0;
      v24 = *(_QWORD *)(v21 + 40);
    }
    if (v20 < v24)
    {
      v40 = *(_OWORD *)(v13 + 1);
      v25 = v14;
      while (1)
      {
        v26 = (char *)a1 + v25;
        *(_OWORD *)(v26 + 72) = *(_OWORD *)((char *)a1 + v25 + 48);
        *((_DWORD *)v26 + 22) = *(_DWORD *)((char *)a1 + v25 + 64);
        if (v25 == -48)
          break;
        v27 = *(_WORD *)(v16 + 12) & 0xFFF;
        if (v27 == 3)
        {
          v29 = *(int *)(v16 + 40);
        }
        else
        {
          if (v27 == 4)
            v28 = v16;
          else
            v28 = 0;
          v29 = *(_QWORD *)(v28 + 40);
        }
        v30 = *((_QWORD *)v26 + 3);
        v31 = *(_WORD *)(v30 + 12) & 0xFFF;
        if (v30)
          v32 = v31 == 3;
        else
          v32 = 0;
        if (v32)
        {
          v33 = *(int *)(v30 + 40);
        }
        else
        {
          if (v31 != 4)
            v30 = 0;
          v33 = *(_QWORD *)(v30 + 40);
        }
        v25 -= 24;
        if (v29 >= v33)
        {
          v34 = (uint64_t)a1 + v25 + 72;
          goto LABEL_44;
        }
      }
      v34 = (uint64_t)a1;
LABEL_44:
      *(_QWORD *)v34 = v16;
      *(_QWORD *)(v34 + 8) = v40;
      *(_DWORD *)(v34 + 16) = DWORD2(v40);
      if (++v15 == 8)
        return v13 + 3 == a2;
    }
    v12 = v13;
    v14 += 24;
    v13 += 3;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(JSC::B3::Value *,BOOL,WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::BasicBlock *)::{lambda(JSC::FTL::SwitchCase const&,JSC::FTL::SwitchCase const&)#1} &,JSC::FTL::SwitchCase*>(_QWORD *a1, _QWORD *a2, uint64_t *a3, _DWORD *a4, __n128 a5)
{
  __n128 result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v10 = *(_QWORD *)a4;
  v11 = *a3;
  v12 = *(_WORD *)(*(_QWORD *)a4 + 12) & 0xFFF;
  if (*(_QWORD *)a4)
    v13 = v12 == 3;
  else
    v13 = 0;
  if (v13)
  {
    v14 = *(int *)(v10 + 40);
  }
  else
  {
    if (v12 != 4)
      v10 = 0;
    v14 = *(_QWORD *)(v10 + 40);
  }
  v15 = *(_WORD *)(v11 + 12) & 0xFFF;
  if (v11)
    v16 = v15 == 3;
  else
    v16 = 0;
  if (v16)
  {
    v17 = *(int *)(v11 + 40);
  }
  else
  {
    if (v15 != 4)
      v11 = 0;
    v17 = *(_QWORD *)(v11 + 40);
  }
  if (v14 < v17)
  {
    result = *(__n128 *)a3;
    v18 = a3[2];
    v19 = a4[4];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_DWORD *)a3 + 4) = v19;
    a4[4] = v18;
    *(__n128 *)a4 = result;
    v20 = *a3;
    v21 = *a2;
    v22 = *(_WORD *)(*a3 + 12) & 0xFFF;
    if (*a3 && v22 == 3)
    {
      v23 = *(int *)(v20 + 40);
    }
    else
    {
      if (v22 != 4)
        v20 = 0;
      v23 = *(_QWORD *)(v20 + 40);
    }
    v24 = *(_WORD *)(v21 + 12) & 0xFFF;
    if (v21 && v24 == 3)
    {
      v25 = *(int *)(v21 + 40);
    }
    else
    {
      if (v24 != 4)
        v21 = 0;
      v25 = *(_QWORD *)(v21 + 40);
    }
    if (v23 < v25)
    {
      result = *(__n128 *)a2;
      v26 = a2[2];
      v27 = *((_DWORD *)a3 + 4);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_DWORD *)a2 + 4) = v27;
      *((_DWORD *)a3 + 4) = v26;
      *(__n128 *)a3 = result;
      v28 = *a2;
      v29 = *a1;
      v30 = *(_WORD *)(*a2 + 12) & 0xFFF;
      if (*a2 && v30 == 3)
      {
        v31 = *(int *)(v28 + 40);
      }
      else
      {
        if (v30 != 4)
          v28 = 0;
        v31 = *(_QWORD *)(v28 + 40);
      }
      v32 = *(_WORD *)(v29 + 12) & 0xFFF;
      if (v29 && v32 == 3)
      {
        v33 = *(int *)(v29 + 40);
      }
      else
      {
        if (v32 != 4)
          v29 = 0;
        v33 = *(_QWORD *)(v29 + 40);
      }
      if (v31 < v33)
      {
        result = *(__n128 *)a1;
        v34 = a1[2];
        v35 = *((_DWORD *)a2 + 4);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_DWORD *)a1 + 4) = v35;
        *((_DWORD *)a2 + 4) = v34;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitSwitchForMultiByOffset(JSC::B3::Value *,BOOL,WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::B3::BasicBlock *)::{lambda(JSC::FTL::SwitchCase const&,JSC::FTL::SwitchCase const&)#1} &,JSC::FTL::SwitchCase*>(uint64_t result, uint64_t a2, uint64_t *a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;

  if (a2 >= 2)
  {
    v3 = (unint64_t)(a2 - 2) >> 1;
    if (v3 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - result) >> 3)))
    {
      v4 = (0x5555555555555556 * (((uint64_t)a3 - result) >> 3)) | 1;
      v5 = (uint64_t *)(result + 24 * v4);
      if (0x5555555555555556 * (((uint64_t)a3 - result) >> 3) + 2 < a2)
      {
        v6 = v5[3];
        v7 = *v5;
        v8 = *(_WORD *)(*v5 + 12) & 0xFFF;
        if (*v5)
          v9 = v8 == 3;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(int *)(v7 + 40);
        }
        else
        {
          if (v8 != 4)
            v7 = 0;
          v10 = *(_QWORD *)(v7 + 40);
        }
        v11 = *(_WORD *)(v6 + 12) & 0xFFF;
        if (v6)
          v12 = v11 == 3;
        else
          v12 = 0;
        if (v12)
        {
          v13 = *(int *)(v6 + 40);
        }
        else
        {
          if (v11 != 4)
            v6 = 0;
          v13 = *(_QWORD *)(v6 + 40);
        }
        if (v10 < v13)
        {
          v5 += 3;
          v4 = 0x5555555555555556 * (((uint64_t)a3 - result) >> 3) + 2;
        }
      }
      v14 = *v5;
      v15 = *a3;
      v16 = *(_WORD *)(*v5 + 12) & 0xFFF;
      if (*v5)
        v17 = v16 == 3;
      else
        v17 = 0;
      if (v17)
      {
        v18 = *(int *)(v14 + 40);
      }
      else
      {
        if (v16 != 4)
          v14 = 0;
        v18 = *(_QWORD *)(v14 + 40);
      }
      v19 = *(_WORD *)(v15 + 12) & 0xFFF;
      if (v15 && v19 == 3)
      {
        v20 = *(int *)(v15 + 40);
      }
      else
      {
        if (v19 == 4)
          v21 = *a3;
        else
          v21 = 0;
        v20 = *(_QWORD *)(v21 + 40);
      }
      if (v18 >= v20)
      {
        v41 = *(_OWORD *)(a3 + 1);
        do
        {
          v22 = a3;
          a3 = v5;
          v23 = *(_OWORD *)v5;
          *((_DWORD *)v22 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)v22 = v23;
          if (v3 < v4)
            break;
          v24 = (2 * v4) | 1;
          v5 = (uint64_t *)(result + 24 * v24);
          if (2 * v4 + 2 >= a2)
          {
            v4 = (2 * v4) | 1;
          }
          else
          {
            v25 = *v5;
            v26 = *(_WORD *)(*v5 + 12) & 0xFFF;
            if (*v5 && v26 == 3)
            {
              v28 = *(int *)(v25 + 40);
            }
            else
            {
              if (v26 != 4)
                v25 = 0;
              v28 = *(_QWORD *)(v25 + 40);
            }
            v30 = v5[3];
            v5 += 3;
            v29 = v30;
            v31 = *(_WORD *)(v30 + 12) & 0xFFF;
            if (v30 && v31 == 3)
            {
              v33 = *(int *)(v29 + 40);
            }
            else
            {
              if (v31 != 4)
                v29 = 0;
              v33 = *(_QWORD *)(v29 + 40);
            }
            if (v28 < v33)
            {
              v4 = 2 * v4 + 2;
            }
            else
            {
              v5 = (uint64_t *)(result + 24 * v24);
              v4 = (2 * v4) | 1;
            }
          }
          v34 = *v5;
          v35 = *(_WORD *)(*v5 + 12) & 0xFFF;
          if (*v5 && v35 == 3)
          {
            v37 = *(int *)(v34 + 40);
          }
          else
          {
            if (v35 != 4)
              v34 = 0;
            v37 = *(_QWORD *)(v34 + 40);
          }
          v38 = *(_WORD *)(v15 + 12) & 0xFFF;
          if (v15 && v38 == 3)
          {
            v39 = *(int *)(v15 + 40);
          }
          else
          {
            v40 = v38 == 4 ? v15 : 0;
            v39 = *(_QWORD *)(v40 + 40);
          }
        }
        while (v37 >= v39);
        *a3 = v15;
        a3[1] = v41;
        *((_DWORD *)a3 + 4) = DWORD2(v41);
      }
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::storeProperty(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::FTL::Output *v12;
  JSC::FTL::IndexedAbstractHeap *v13;
  char *v14;
  JSC::FTL::AbstractHeap *v15;
  int v16;
  JSC::B3::Value *v17;

  v8 = a5;
  v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v13 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 25512);
  if (a4 > 0xF)
  {
    v15 = (JSC::FTL::AbstractHeap *)JSC::FTL::IndexedAbstractHeap::atSlow(v13, a4, a4, a4, a5, a6, a7, a8);
  }
  else
  {
    v14 = (char *)this + 48 * a4;
    v15 = (JSC::FTL::AbstractHeap *)(v14 + 25584);
    if (!*((_QWORD *)v14 + 3203))
      JSC::FTL::IndexedAbstractHeap::initialize(v13, v15, a4);
  }
  v16 = 8 * v8 + 16;
  if (v8 > 63)
    v16 = 496 - 8 * v8;
  if (v16)
  {
    v17 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v12, v16);
    a3 = (JSC::B3::Value *)JSC::FTL::Output::add(v12, a3, v17);
  }
  return JSC::FTL::Output::store((uint64_t)v12, (uint64_t)a2, v15, (uint64_t)a3);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMultiDeleteByOffset(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E3576FC8;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::B3::Value *>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  int v14;
  uint64_t v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v15[0] = a3;
  WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v13, v15, 1uLL);
  v12 = v13;
  if (v13)
  {
    v13 = 0;
    v14 = 0;
    WTF::fastFree((unint64_t)v12, v5, v6, v7, v8, v9, v10, v11);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;

  JSC::CodeOrigin::CodeOrigin(&v39, (const JSC::CodeOrigin *)(a1 + 3524));
  v11 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v12 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a3;
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      v34 = (unint64_t)v15;
      LOBYTE(v35) = 3;
      JSC::B3::StackmapValue::append(v11, v15, (unint64_t)&v34 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  *((_QWORD *)v11 + 8) |= 0x30000uLL;
  *((_QWORD *)v11 + 10) |= 0x30000uLL;
  v16 = a1[1];
  v34 = *a2;
  v17 = v38;
  if (v38)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = v38;
  }
  else
  {
    v19 = 0;
  }
  v35 = v17;
  v36 = v16;
  JSC::CodeOrigin::CodeOrigin(&v37, (const JSC::CodeOrigin *)&v39);
  if (v19)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v19, v27, v28, v29, v30, v31, v32, v33);
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576FF0;
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  v2 = *(unsigned int **)(a2 + 16);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v5;
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v7 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      result = v12;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v4 = v6 | v9;
  }
  *(_QWORD *)(result + 48) = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56[5];
  unsigned int *v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  unint64_t v62;
  uint64_t v63;

  v62 = 0;
  v63 = 0;
  v6 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a3 + 8);
    v8 = 16 * v6;
    do
    {
      *(_QWORD *)&v53 = JSC::FTL::Location::forValueRep(v7);
      *((_QWORD *)&v53 + 1) = v9;
      v10 = HIDWORD(v63);
      if (HIDWORD(v63) == (_DWORD)v63)
      {
        WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::Location>((uint64_t)&v62, (unint64_t)&v53);
      }
      else
      {
        *(_OWORD *)(v62 + 16 * HIDWORD(v63)) = v53;
        HIDWORD(v63) = v10 + 1;
      }
      v7 += 16;
      v8 -= 16;
    }
    while (v8);
    v11 = v62;
    v12 = HIDWORD(v63);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  JSC::MacroAssemblerARM64::patchableJump(a2, v13, v14, v15, v16, v17, v18, v19, (uint64_t)&v59);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a2, v20, v21, v22, v23, v24, v25, v26, &v58);
  v27 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v29 = v28;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v57);
  LODWORD(v53) = v59;
  *(_QWORD *)((char *)&v53 + 4) = v60;
  v54 = *(_QWORD *)(a1 + 24);
  v55 = v58;
  JSC::CodeOrigin::CodeOrigin(v56, (const JSC::CodeOrigin *)(a1 + 32));
  v30 = v57;
  if (v57)
  {
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v56[1] = (uint64_t)v30;
  v56[2] = v27;
  v56[3] = v29;
  v32 = (uint64_t)v61;
  if (v61)
  {
    v33 = v61 + 2;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  v56[4] = v32;
  if (v57)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v57, v42, v43, v44, v45, v46, v47, v48);
  v49 = v61;
  v61 = 0;
  if (v49)
  {
    v50 = v49 + 2;
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v49 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
    }
  }
  if (v62)
    WTF::fastFree(v62, v42, v43, v44, v45, v46, v47, v48);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (a4 <= 1 || *(_DWORD *)(a3 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x197DCFAE0);
  }
  v5 = *(_BYTE *)(a3 + 24) & 0x7F;
  v6 = *a2;
  v7 = a2[1];
  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3576BE0;
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = operationNotifyWrite;
  *(_BYTE *)(result + 32) = -1;
  *(_BYTE *)(result + 33) = v5;
  *(_QWORD *)(result + 40) = v7;
  *a1 = result;
  return result;
}

_QWORD *JSC::B3::StackmapGenerationParams::addLatePath<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[9];
  unsigned int *v19;

  v3 = WTF::fastMalloc((WTF *)0x58);
  v4 = _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_18compileNotifyWriteEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(v3, (uint64_t)v18);
  v19 = (unsigned int *)v4;
  v12 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v19);
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v4;
    *(_DWORD *)(a1 + 12) = v12 + 1;
  }
}

uint64_t _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_18compileNotifyWriteEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3577018;
  *(_DWORD *)(result + 16) = *(_DWORD *)a2;
  *(_QWORD *)(result + 20) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = result;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      result = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)(result + 48) = v2;
  v3 = *(unsigned int **)(a2 + 40);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 56) = v3;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 80) = v5;
  return result;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_18compileNotifyWriteEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_18compileNotifyWriteEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_18compileNotifyWriteEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

_QWORD *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *result;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[12];
  int v59;
  unsigned int *v60;
  uint64_t v61[2];
  __int128 v62;
  uint64_t v63;
  int v64;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v18 = *(unsigned int *)(v17 + 308);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v17 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v17 + 296) + 8 * v18) = 0;
    *(_DWORD *)(v17 + 308) = v18 + 1;
  }
  JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters((unsigned int *)a2, v18, v11, v12, v13, v14, v15, v16);
  v19 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v19 + 90440), v19, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v20, v21, v22, v23, v24, v58);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, *(uint64_t *)v58, v25, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v58, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 24);
  if (v38)
  {
    v39 = v38 + 2;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
  }
  else
  {
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
  }
  v60 = v38;
  JSC::CodeOrigin::CodeOrigin(v61, (const JSC::CodeOrigin *)(a1 + 32));
  v42 = *(unsigned int **)(a1 + 40);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v61[1] = (uint64_t)v42;
  v62 = *(_OWORD *)(a1 + 48);
  v44 = *(_QWORD *)(a1 + 64);
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v63 = v44;
  v64 = v18;
  _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_18compileNotifyWriteEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(a2, (uint64_t)v58);
  if (v38)
  {
    v55 = v38 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v38 + 2);
      result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v38 + 32))(v38);
    }
  }
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_18compileNotifyWriteEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3577040;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)a2;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v4 + 32) = v6;
  v9 = *(_QWORD *)(a2 + 24);
  if ((v9 & 1) != 0)
  {
    v29 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v30 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v33 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = v33;
      *(_DWORD *)(v29 + 8) = v30;
      v32 = 1;
    }
    else
    {
      v32 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = v30 << 36;
    }
    v9 = v29 | v32;
  }
  *(_QWORD *)(v5 + 40) = v9;
  v10 = *(unsigned int **)(a2 + 32);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v5 + 72) = v12;
  *(_DWORD *)(v5 + 80) = *(_DWORD *)(a2 + 64);
  v15 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 240))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
LABEL_21:
    *v16 = v5;
    *(_DWORD *)(a1 + 244) = v15 + 1;
    return;
  }
  v17 = v15 + (v15 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15 + 1)
    v19 = v15 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = *(const void **)(a1 + 232);
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(a1 + 240) = v19;
    *(_QWORD *)(a1 + 232) = v21;
    memcpy(v21, v20, 8 * v15);
    if (v20)
    {
      if (*(const void **)(a1 + 232) == v20)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
    }
    v15 = *(unsigned int *)(a1 + 244);
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
    goto LABEL_21;
  }
  __break(0xC471u);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_18compileNotifyWriteEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_18compileNotifyWriteEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_18compileNotifyWriteEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, JSC::LinkBuffer *a2)
{
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compareEqObjectOrOtherToObject(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::BasicBlock *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::B3::Value *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::B3::Value *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  JSC::B3::Value *v64;
  uint64_t v65;
  uint64_t v66;
  int8x8_t v67;

  v18 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v19 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v20 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v28, v18, v19, NAN, NAN, v29, v30, v31, v32);
  *(_QWORD *)(a1 + 27776) = v18;
  v33 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v19;
  v38 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v12, v13);
  v39 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v38);
  v41 = v40;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v20, v42, v43, v44, v45, v46, v47);
  *(_QWORD *)(a1 + 27776) = v19;
  *(_QWORD *)(a1 + 27784) = v20;
  if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0x2E00FFFFFFF7, v48, v49, v50, v51, v52))
  {
  }
  v53 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27648));
  v55 = v54;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v20, v56, v57, v58, v59, v60, v61);
  *(_QWORD *)(a1 + 27776) = v20;
  *(_QWORD *)(a1 + 27784) = v33;
  v62 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)(a1 + 27640), 1, v39, v41, v53, v55);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::equalNullOrUndefined(uint64_t a1, unint64_t a2, int a3, int a4, int a5)
{
  JSC::B3::Value *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::FTL::Output *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value **v31;
  JSC::B3::Value *v32;
  JSC::B3::Value *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  JSC::B3::Value *v51;
  uint64_t v52;
  JSC::B3::Value *v53;
  JSC::B3::Value *v54;
  JSC::B3::Value *v55;
  uint64_t v56;
  uint64_t v57;
  int8x8_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::B3::Value *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  JSC::B3::Value *v96;
  JSC::B3::Value *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int8x8_t v102;
  uint64_t v103;
  JSC::B3::Value *v104;
  JSC::B3::Value *v105;
  char **v106;
  uint64_t v107;
  JSC::B3::Value *v108;
  uint64_t v109;
  JSC::B3::Value *v110;
  uint64_t v111;
  JSC::B3::Value *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char **v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  JSC::B3::Value *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char **v138;
  uint64_t v139;
  uint64_t v140;
  WTF *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  char *v170;
  char *v171;
  char *v172;
  JSC::B3::Value *v173;
  uint64_t v174;
  JSC::B3::Value **v175;
  JSC::B3::Value *v176;
  JSC::FTL::Output *v177;
  uint64_t v178;
  JSC::B3::Value *v179;
  char *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  JSC::B3::Value *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char **v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  JSC::B3::Value *v201;
  JSC::B3::Value *v202;
  JSC::B3::Value *v203;
  JSC::B3::Value *v204;
  JSC::B3::Value *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  JSC::B3::Value *v212;
  uint64_t v213;
  JSC::B3::Value *v214;
  JSC::B3::Value *v215;
  JSC::B3::Value *v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  JSC::B3::Value *v224;
  JSC::DFG::Graph *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  char v229;
  uint64_t v230;
  unint64_t v231;
  JSC::B3::Value *v232;
  uint64_t v233;
  JSC::B3::Value *v234;
  JSC::B3::Value *v235;
  JSC::B3::Value *v236;
  uint64_t v237;
  JSC::B3::Value *v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char **v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  unsigned int *v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int *v262;
  uint64_t v263;
  unsigned int v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  JSC::B3::Value *v276;
  uint64_t v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char v289;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  WTF *v294;
  uint64_t v295;
  _BYTE v296[48];
  __int128 v297;
  _QWORD *v298;
  uint64_t v299[2];

  v9 = ((uint64_t (*)(JSC::B3::Procedure *, double))JSC::B3::Procedure::addBlock)(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 27784);
  v12 = (uint64_t *)(a1 + 27808);
  if (v11)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v11, v9);
  }
  else
  {
    *(_QWORD *)&v297 = v9;
    v146 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v146 = 0u;
    *(_OWORD *)(v146 + 16) = 0u;
    *(_QWORD *)(v146 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v146;
    v299[0] = v146;
    *(_QWORD *)(v146 + 16) = v10;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v297, v299, v147, v148, v149, v150, v151, (uint64_t)&v294);
    v152 = v299[0];
    v153 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v299[0] = a1 + 27824;
    *(_QWORD *)(v152 + 8) = v153;
    *v153 = v152;
    *(_QWORD *)(a1 + 27832) = v152;
  }
  v13 = ((uint64_t (*)(JSC::B3::Procedure *, double))JSC::B3::Procedure::addBlock)(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 27784);
  if (v15)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v15, v13);
  }
  else
  {
    *(_QWORD *)&v297 = v13;
    v154 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v154 = 0u;
    *(_OWORD *)(v154 + 16) = 0u;
    *(_QWORD *)(v154 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v154;
    v299[0] = v154;
    *(_QWORD *)(v154 + 16) = v14;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v297, v299, v155, v156, v157, v158, v159, (uint64_t)&v294);
    v160 = v299[0];
    v161 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v299[0] = a1 + 27824;
    *(_QWORD *)(v160 + 8) = v161;
    *v161 = v160;
    *(_QWORD *)(a1 + 27832) = v160;
  }
  v16 = (JSC::FTL::Output *)(a1 + 27640);
  v17 = ((uint64_t (*)(JSC::B3::Procedure *, double))JSC::B3::Procedure::addBlock)(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v18 = v17;
  v19 = *(_QWORD *)(a1 + 27784);
  if (v19)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v19, v17);
  }
  else
  {
    *(_QWORD *)&v297 = v17;
    v162 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v162 = 0u;
    *(_OWORD *)(v162 + 16) = 0u;
    *(_QWORD *)(v162 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v162;
    v299[0] = v162;
    *(_QWORD *)(v162 + 16) = v18;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v297, v299, v163, v164, v165, v166, v167, (uint64_t)&v294);
    v168 = v299[0];
    v169 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v299[0] = a1 + 27824;
    *(_QWORD *)(v168 + 8) = v169;
    *v169 = v168;
    *(_QWORD *)(a1 + 27832) = v168;
  }
  v31 = (JSC::B3::Value **)(a1 + 27640);
  if ((v26 & 0x2C00FFFFFFF7) != 0)
  {
    if ((v26 & 0xFFFFD3FF00000008) != 0)
    {
LABEL_9:
      v32 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v8, *(JSC::B3::Value **)(a1 + 27904));
      v33 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v32);
      goto LABEL_10;
    }
    v31 = (JSC::B3::Value **)(a1 + 27648);
  }
  v33 = *v31;
  if (!*v31)
    goto LABEL_9;
LABEL_10:
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v33, v14, v10, NAN, NAN, v27, v28, v29, v30);
  *(_QWORD *)(a1 + 27776) = v10;
  v291 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v14;
  v295 = 3;
  v293 = a2;
  v294 = (WTF *)v296;
  v292 = v14;
  if (a3 == 1)
  {
    v41 = *(_QWORD *)(a1 + 28152);
    v42 = *(_QWORD *)(v41 + 8);
    v43 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v44 = (uint64_t *)(v42 + 24);
    v45 = (uint64_t *)(v42 + 8);
    if ((a2 & 1) != 0)
      v45 = v44;
    v46 = *v45;
    v47 = *v45 + 32 * v43;
    v48 = *(_DWORD *)(v41 + 88);
    v49 = *(_DWORD *)(v47 + 20);
    if (v48 != v49)
    {
      if ((*(_QWORD *)(v47 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v49 ^ v48) >= 2)
        {
          v249 = *(_QWORD *)v47;
          if (*(_QWORD *)v47 != 4)
          {
            *(_QWORD *)v47 = v249 | 2;
            v259 = (unsigned int *)(v249 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v249 & 1) != 0)
            {
              v268 = 2 * *v259;
              while (v268 * 4)
              {
                v269 = *(_QWORD *)&v259[v268];
                if ((*(_BYTE *)(v269 + 19) & 0xC) == 0)
                {
                  v270 = *(_QWORD *)(v269 + 96);
                  v271 = (v270 & 1) != 0 ? (v270 >> 1) & 3 : *(unsigned __int8 *)(v270 + 4);
                  v268 -= 2;
                  if (v271 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v259, v34, v35, v36, v37, v38, v39, v40);
                goto LABEL_114;
              }
            }
            else if (v259)
            {
              if ((*((_BYTE *)v259 + 19) & 0xC) != 0
                || ((v260 = *((_QWORD *)v259 + 12), (v260 & 1) != 0)
                  ? (v261 = (v260 >> 1) & 3)
                  : (v261 = *(unsigned __int8 *)(v260 + 4)),
                    v261 == 2))
              {
LABEL_114:
                *(_QWORD *)v47 = 4;
              }
            }
          }
          *(_DWORD *)(v46 + 32 * v43 + 16) = -21020677;
        }
        if ((v48 & 1) != 0)
          *(_QWORD *)v47 &= ~2uLL;
      }
      *(_DWORD *)(v47 + 20) = v48;
    }
    v12 = (uint64_t *)(a1 + 27808);
    if ((*(_QWORD *)(v47 + 8) & 0xC00F0000000) != 0)
    {
      v50 = *(_QWORD *)(a1 + 3160);
      if (v50)
      {
        v51 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v50);
        v52 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v8, v51);
      }
      else
      {
        v52 = (uint64_t)v8;
      }
      v53 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), a1 + 3136, v52);
      v54 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 23);
      v55 = JSC::FTL::Output::below((JSC::FTL::Output *)(a1 + 27640), v53, v54);
    }
  }
  if (JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), v35, v36, v37, v38, v39, v40))
  {
    v59 = *(_QWORD *)(a1 + 27648);
    v60 = *(_QWORD *)(a1 + 27776);
    v61 = *(JSC::B3::Value **)(a1 + 27760);
    v62 = *(_QWORD *)(a1 + 27768);
    v63 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v63 + 8) = -1;
    *(_WORD *)(v63 + 12) = 152;
    *(_DWORD *)(v63 + 16) = 0;
    *(_BYTE *)(v63 + 20) = 1;
    *(_QWORD *)v63 = &unk_1E357EDA0;
    *(_QWORD *)(v63 + 40) = 0;
    *(_QWORD *)(v63 + 48) = v59;
    *(_QWORD *)(v63 + 24) = v62;
    *(_QWORD *)(v63 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v61, (JSC::B3::Value *)v63);
    v299[0] = v63;
    v70 = (char **)(v60 + 8);
    v71 = *(unsigned int *)(v60 + 20);
    if ((_DWORD)v71 == *(_DWORD *)(v60 + 16))
    {
      v172 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v70, v71 + 1, (unint64_t)v299);
      v71 = *(unsigned int *)(v60 + 20);
      *(_QWORD *)(*(_QWORD *)(v60 + 8) + 8 * v71) = *(_QWORD *)v172;
      v72 = v299[0];
    }
    else
    {
      *(_QWORD *)&(*v70)[8 * v71] = v63;
      v72 = v63;
    }
    v73 = a4;
    *(_DWORD *)(v60 + 20) = v71 + 1;
    *(_QWORD *)(v72 + 32) = v60;
    v74 = *(_QWORD *)(a1 + 27776);
    *(_QWORD *)&v297 = v63;
    *((_QWORD *)&v297 + 1) = v74;
    v75 = v293;
    if (HIDWORD(v295) == (_DWORD)v295)
    {
      WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v294, (unint64_t)&v297, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *((_OWORD *)v294 + HIDWORD(v295)) = v297;
      ++HIDWORD(v295);
    }
    v76 = v292;
    v16 = (JSC::FTL::Output *)(a1 + 27640);
    goto LABEL_24;
  }
  v182 = v181;
  v183 = *(_QWORD *)(a1 + 27784);
  v288 = (uint64_t)v181;
  if (v183)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore(v12, v183, (uint64_t)v181);
  }
  else
  {
    v299[0] = (uint64_t)v181;
    v251 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v251 = 0u;
    *((_OWORD *)v251 + 1) = 0u;
    v251[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v251;
    v298 = v251;
    v251[2] = v182;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>(v12, v299, (uint64_t *)&v298, v252, v253, v254, v255, v256, (uint64_t)&v297);
    v257 = v298;
    v258 = *(_QWORD **)(a1 + 27832);
    *v298 = a1 + 27824;
    v257[1] = v258;
    *v258 = v257;
    *(_QWORD *)(a1 + 27832) = v257;
  }
  v184 = *(_QWORD *)(a1 + 27648);
  v185 = *(_QWORD *)(a1 + 27776);
  v186 = *(JSC::B3::Value **)(a1 + 27760);
  v187 = *(_QWORD *)(a1 + 27768);
  v188 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v188 + 8) = -1;
  *(_WORD *)(v188 + 12) = 152;
  *(_DWORD *)(v188 + 16) = 0;
  *(_BYTE *)(v188 + 20) = 1;
  *(_QWORD *)v188 = &unk_1E357EDA0;
  *(_QWORD *)(v188 + 40) = 0;
  *(_QWORD *)(v188 + 48) = v184;
  *(_QWORD *)(v188 + 24) = v187;
  *(_QWORD *)(v188 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v186, (JSC::B3::Value *)v188);
  *(_QWORD *)&v297 = v188;
  v195 = (char **)(v185 + 8);
  v196 = *(unsigned int *)(v185 + 20);
  if ((_DWORD)v196 == *(_DWORD *)(v185 + 16))
  {
    v265 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v195, v196 + 1, (unint64_t)&v297);
    v196 = *(unsigned int *)(v185 + 20);
    *(_QWORD *)(*(_QWORD *)(v185 + 8) + 8 * v196) = *(_QWORD *)v265;
    v197 = v297;
  }
  else
  {
    *(_QWORD *)&(*v195)[8 * v196] = v188;
    v197 = v188;
  }
  *(_DWORD *)(v185 + 20) = v196 + 1;
  *(_QWORD *)(v197 + 32) = v185;
  v198 = *(_QWORD *)(a1 + 27776);
  *(_QWORD *)&v297 = v188;
  *((_QWORD *)&v297 + 1) = v198;
  if (HIDWORD(v295) == (_DWORD)v295)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v294, (unint64_t)&v297, v189, v190, v191, v192, v193, v194);
  }
  else
  {
    *((_OWORD *)v294 + HIDWORD(v295)) = v297;
    ++HIDWORD(v295);
  }
  v199 = *(_QWORD *)(a1 + 3112);
  v200 = (uint64_t)v8;
  if (v199)
  {
    v201 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v199);
    v200 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v8, v201);
  }
  v202 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), a1 + 3088, v200);
  v203 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
  v204 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v202, v203);
  v205 = JSC::FTL::Output::notZero32((JSC::FTL::Output *)(a1 + 27640), v204);
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v205, v288, v18, 0.0, 1.0, v206, v207, v208, v209);
  *(_QWORD *)(a1 + 27776) = v288;
  *(_QWORD *)(a1 + 27784) = v292;
  v210 = (uint64_t)v8;
  v211 = *(_QWORD *)(a1 + 3064);
  if (v211)
  {
    v212 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v211);
    v210 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v8, v212);
  }
  v213 = JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 3040), v210, 1);
  v214 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)(a1 + 27640), v213, 2);
  v215 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), 4);
  v216 = JSC::FTL::Output::shl((JSC::FTL::Output *)(a1 + 27640), v214, v215);
  v224 = v216;
  v225 = *(JSC::DFG::Graph **)a1;
  v226 = *(_QWORD *)(a1 + 28192);
  if ((v226 & 1) != 0)
  {
    v276 = v216;
    v277 = *(_QWORD *)(v226 & 0xFFFFFFFF8);
    if ((v226 & 2) != 0 || (v278 = *(_DWORD *)((v226 & 0xFFFFFFFF8) + 8), v278 == 0x3FFFFFFF) || v278 == -1)
    {
      v279 = 2;
    }
    else if (v278 >> 28)
    {
      v285 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v285 = v277;
      *(_DWORD *)(v285 + 8) = v278;
      v279 = 1;
      v277 = v285;
    }
    else
    {
      v279 = *(_QWORD *)(v226 & 0xFFFFFFFF8);
      v277 = 0;
    }
    v280 = v277 | v279;
    v227 = *((_QWORD *)v225 + 4);
    v287 = v280;
    if ((v280 & 1) != 0)
    {
      v281 = *(_QWORD *)(v280 & 0xFFFFFFFF8);
      if ((v280 & 2) != 0 || (v282 = *(_DWORD *)((v280 & 0xFFFFFFFF8) + 8), v282 == 0x3FFFFFFF) || v282 == -1)
      {
        v283 = 2;
      }
      else if (v282 >> 28)
      {
        v286 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v286 = v281;
        *(_DWORD *)(v286 + 8) = v282;
        v283 = 1;
        v281 = v286;
      }
      else
      {
        v283 = *(_QWORD *)(v280 & 0xFFFFFFFF8);
        v281 = 0;
      }
      v284 = v281 | v283;
      v228 = (uint64_t *)(v284 & 0xFFFFFFFF8);
      if ((v284 & 1) != 0)
      {
        v229 = 0;
        v289 = 0;
        v230 = *v228;
      }
      else
      {
        v289 = 0;
        v229 = 1;
        v230 = (uint64_t)v228;
      }
      v224 = v276;
      goto LABEL_80;
    }
    v226 = v280;
    v224 = v276;
  }
  else
  {
    v227 = *((_QWORD *)v225 + 4);
  }
  v287 = v226;
  v228 = (uint64_t *)(v226 & 0xFFFFFFFF8);
  v229 = 1;
  v289 = 1;
  v230 = v226 & 0xFFFFFFFF8;
LABEL_80:
  if (v230)
    v227 = *(_QWORD *)(v230 + 8);
  v231 = *(_QWORD *)(v227 + 8);
  if ((v229 & 1) == 0 && v228)
    WTF::fastFree((unint64_t)v228, v217, v218, v219, v220, v221, v222, v223);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 280), v231, v218, v219, v220, v221, v222, v223);
  v232 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v231);
  v233 = *(_QWORD *)(a1 + 5416);
  if (v233)
  {
    v234 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v233);
    v224 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v224, v234);
  }
  v235 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 5392), (uint64_t)v224, 2);
  v236 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v232, v235);
  v237 = *(_QWORD *)(a1 + 27776);
  v238 = *(JSC::B3::Value **)(a1 + 27760);
  v239 = *(_QWORD *)(a1 + 27768);
  v240 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v240 + 8) = -1;
  *(_WORD *)(v240 + 12) = 152;
  *(_DWORD *)(v240 + 16) = 0;
  *(_BYTE *)(v240 + 20) = 1;
  *(_QWORD *)v240 = &unk_1E357EDA0;
  *(_QWORD *)(v240 + 40) = 0;
  *(_QWORD *)(v240 + 48) = v236;
  *(_QWORD *)(v240 + 24) = v239;
  *(_QWORD *)(v240 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v238, (JSC::B3::Value *)v240);
  *(_QWORD *)&v297 = v240;
  v245 = (char **)(v237 + 8);
  v246 = *(unsigned int *)(v237 + 20);
  if ((_DWORD)v246 == *(_DWORD *)(v237 + 16))
  {
    v266 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v245, v246 + 1, (unint64_t)&v297);
    v246 = *(unsigned int *)(v237 + 20);
    *(_QWORD *)(*(_QWORD *)(v237 + 8) + 8 * v246) = *(_QWORD *)v266;
    v247 = v297;
  }
  else
  {
    *(_QWORD *)&(*v245)[8 * v246] = v240;
    v247 = v240;
  }
  v75 = v293;
  v73 = a4;
  *(_DWORD *)(v237 + 20) = v246 + 1;
  *(_QWORD *)(v247 + 32) = v237;
  v248 = *(_QWORD *)(a1 + 27776);
  *(_QWORD *)&v297 = v240;
  *((_QWORD *)&v297 + 1) = v248;
  if (HIDWORD(v295) == (_DWORD)v295)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v294, (unint64_t)&v297, v242, v243, v244, v67, v68, v69);
  }
  else
  {
    *((_OWORD *)v294 + HIDWORD(v295)) = v297;
    ++HIDWORD(v295);
  }
  v76 = v292;
  if ((v289 & 1) == 0 && (v287 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v287 & 0xFFFFFFFF8, v241, v242, v243, v244, v67, v68, v69);
LABEL_24:
  v77 = *(_QWORD *)(a1 + 27776);
  v78 = *(_QWORD *)(a1 + 27760);
  v79 = *(_QWORD *)(a1 + 27768);
  *(_QWORD *)&v297 = v18;
  BYTE8(v297) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v77, v78, 154, v79, (uint64_t *)&v297, v67, v68, v69);
  *(_QWORD *)(a1 + 27776) = v76;
  *(_QWORD *)(a1 + 27784) = v18;
  if (v73 != 3)
  {
    v173 = v8;
    if (v73 != 2)
    {
      if (v73 != 1)
      {
        v110 = 0;
        goto LABEL_35;
      }
      v177 = v16;
      v178 = 10;
LABEL_60:
      v179 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v177, v178);
      v110 = JSC::FTL::Output::equal(v16, v173, v179);
      goto LABEL_35;
    }
    v175 = (JSC::B3::Value **)v16;
    if ((v174 & 0xFFFFFDFFFFFFFFFFLL) != 0)
    {
      if ((v174 & 0x20000000000) != 0)
      {
LABEL_59:
        v176 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v16, -9);
        v173 = JSC::FTL::Output::bitAnd(v16, v173, v176);
        v177 = v16;
        v178 = 2;
        goto LABEL_60;
      }
      v175 = (JSC::B3::Value **)(a1 + 27648);
    }
    v110 = *v175;
    if (*v175)
      goto LABEL_35;
    goto LABEL_59;
  }
  v87 = *(_QWORD *)(a1 + 28152);
  v88 = *(_QWORD *)(v87 + 8);
  v89 = *(unsigned int *)((v75 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v90 = (uint64_t *)(v88 + 24);
  v91 = (uint64_t *)(v88 + 8);
  if ((v75 & 1) != 0)
    v91 = v90;
  v92 = *v91;
  v93 = *v91 + 32 * v89;
  v94 = *(_DWORD *)(v87 + 88);
  v95 = *(_DWORD *)(v93 + 20);
  if (v94 != v95)
  {
    if ((*(_QWORD *)(v93 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v95 ^ v94) >= 2)
      {
        v250 = *(_QWORD *)v93;
        if (*(_QWORD *)v93 != 4)
        {
          *(_QWORD *)v93 = v250 | 2;
          v262 = (unsigned int *)(v250 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v250 & 1) != 0)
          {
            v272 = 2 * *v262;
            while (v272 * 4)
            {
              v273 = *(_QWORD *)&v262[v272];
              if ((*(_BYTE *)(v273 + 19) & 0xC) == 0)
              {
                v274 = *(_QWORD *)(v273 + 96);
                v275 = (v274 & 1) != 0 ? (v274 >> 1) & 3 : *(unsigned __int8 *)(v274 + 4);
                v272 -= 2;
                if (v275 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v262, v80, v81, v82, v83, v84, v85, v86);
              goto LABEL_121;
            }
          }
          else if (v262)
          {
            if ((*((_BYTE *)v262 + 19) & 0xC) != 0
              || ((v263 = *((_QWORD *)v262 + 12), (v263 & 1) != 0)
                ? (v264 = (v263 >> 1) & 3)
                : (v264 = *(unsigned __int8 *)(v263 + 4)),
                  v264 == 2))
            {
LABEL_121:
              *(_QWORD *)v93 = 4;
            }
          }
        }
        *(_DWORD *)(v92 + 32 * v89 + 16) = -21020677;
      }
      if ((v94 & 1) != 0)
        *(_QWORD *)v93 &= ~2uLL;
    }
    *(_DWORD *)(v93 + 20) = v94;
  }
  if ((*(_QWORD *)(v93 + 8) & 0xFFFFD1FF00000008) != 0)
  {
    v96 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v16, -9);
    v97 = JSC::FTL::Output::bitAnd(v16, v8, v96);
    v98 = JSC::FTL::Output::constInt64(v16, 2);
    v99 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)v97 + 312))(v97, v98);
    if (v99 == 2)
    {
      v103 = *(_QWORD *)(a1 + 27776);
      v104 = *(JSC::B3::Value **)(a1 + 27760);
      v105 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), (uint64_t)v97, v98);
      JSC::B3::Procedure::addValueImpl(v104, v105);
      *(_QWORD *)&v297 = v105;
      v106 = (char **)(v103 + 8);
      v107 = *(unsigned int *)(v103 + 20);
      if ((_DWORD)v107 == *(_DWORD *)(v103 + 16))
      {
        v180 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v106, v107 + 1, (unint64_t)&v297);
        v107 = *(unsigned int *)(v103 + 20);
        *(_QWORD *)(*(_QWORD *)(v103 + 8) + 8 * v107) = *(_QWORD *)v180;
        v108 = (JSC::B3::Value *)v297;
      }
      else
      {
        *(_QWORD *)&(*v106)[8 * v107] = v105;
        v108 = v105;
      }
      v109 = v293;
      *(_DWORD *)(v103 + 20) = v107 + 1;
      *((_QWORD *)v108 + 4) = v103;
    }
    else
    {
      v267 = 27648;
      if (v99 == 1)
        v267 = 27640;
      v105 = *(JSC::B3::Value **)(a1 + v267);
      v109 = v293;
    }
  }
  v110 = *(JSC::B3::Value **)v16;
LABEL_35:
  v111 = *(_QWORD *)(a1 + 27776);
  v112 = *(JSC::B3::Value **)(a1 + 27760);
  v113 = *(_QWORD *)(a1 + 27768);
  v114 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v114 + 8) = -1;
  *(_WORD *)(v114 + 12) = 152;
  *(_DWORD *)(v114 + 16) = 0;
  *(_BYTE *)(v114 + 20) = 1;
  *(_QWORD *)v114 = &unk_1E357EDA0;
  *(_QWORD *)(v114 + 40) = 0;
  *(_QWORD *)(v114 + 48) = v110;
  *(_QWORD *)(v114 + 24) = v113;
  *(_QWORD *)(v114 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v112, (JSC::B3::Value *)v114);
  *(_QWORD *)&v297 = v114;
  v121 = (char **)(v111 + 8);
  v122 = *(unsigned int *)(v111 + 20);
  if ((_DWORD)v122 == *(_DWORD *)(v111 + 16))
  {
    v170 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v121, v122 + 1, (unint64_t)&v297);
    v122 = *(unsigned int *)(v111 + 20);
    *(_QWORD *)(*(_QWORD *)(v111 + 8) + 8 * v122) = *(_QWORD *)v170;
    v123 = v297;
  }
  else
  {
    *(_QWORD *)&(*v121)[8 * v122] = v114;
    v123 = v114;
  }
  *(_DWORD *)(v111 + 20) = v122 + 1;
  *(_QWORD *)(v123 + 32) = v111;
  v124 = *(_QWORD *)(a1 + 27776);
  *(_QWORD *)&v297 = v114;
  *((_QWORD *)&v297 + 1) = v124;
  if (HIDWORD(v295) == (_DWORD)v295)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v294, (unint64_t)&v297, v115, v116, v117, v118, v119, v120);
  }
  else
  {
    *((_OWORD *)v294 + HIDWORD(v295)) = v297;
    ++HIDWORD(v295);
  }
  v125 = *(_QWORD *)(a1 + 27776);
  v126 = *(_QWORD *)(a1 + 27760);
  v127 = *(_QWORD *)(a1 + 27768);
  *(_QWORD *)&v297 = v18;
  BYTE8(v297) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v125, v126, 154, v127, (uint64_t *)&v297, v118, v119, v120);
  *(_QWORD *)(a1 + 27776) = v18;
  *(_QWORD *)(a1 + 27784) = v291;
  v128 = *(JSC::B3::Value **)(a1 + 27760);
  v129 = *(_QWORD *)(a1 + 27768);
  v130 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v130 = off_1E357F5F0;
  *(_DWORD *)(v130 + 8) = -1;
  *(_WORD *)(v130 + 12) = 153;
  *(_DWORD *)(v130 + 16) = 1;
  *(_BYTE *)(v130 + 20) = 0;
  *(_QWORD *)(v130 + 24) = v129;
  *(_QWORD *)(v130 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v128, (JSC::B3::Value *)v130);
  *(_QWORD *)&v297 = v130;
  v138 = (char **)(v18 + 8);
  v139 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v139 == *(_DWORD *)(v18 + 16))
  {
    v171 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v138, v139 + 1, (unint64_t)&v297);
    v139 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v139) = *(_QWORD *)v171;
    v140 = v297;
  }
  else
  {
    *(_QWORD *)&(*v138)[8 * v139] = v130;
    v140 = v130;
  }
  *(_DWORD *)(v18 + 20) = v139 + 1;
  *(_QWORD *)(v140 + 32) = v18;
  v141 = v294;
  if (HIDWORD(v295))
  {
    v142 = 16 * HIDWORD(v295);
    v143 = (_QWORD *)((char *)v294 + 8);
    do
    {
      v144 = *(v143 - 1);
      if (v144 || *v143)
      {
        if ((*(_WORD *)(v144 + 12) & 0xFFF) != 0x98)
          v144 = 0;
        *(_QWORD *)(v144 + 40) = v130;
      }
      v143 += 2;
      v142 -= 16;
    }
    while (v142);
  }
  if (v296 != (_BYTE *)v141 && v141)
  {
    v294 = 0;
    LODWORD(v295) = 0;
    WTF::fastFree((unint64_t)v141, v131, v132, v133, v134, v135, v136, v137);
  }
  return v130;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateTruthyObject(uint64_t a1, unint64_t a2, JSC::B3::Value *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  int8x8_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  JSC::B3::Value *v25;
  JSC::B3::Value *v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  int8x8_t v29;

  if (JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, a4, v12, v13, v14, v15, v16))
    {
    }
  }
  else
  {
    if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, a4, v12, v13, v14, v15, v16))
    {
    }
    v25 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::Output *)(a1 + 27640), a3, (const JSC::FTL::AbstractHeap *)(a1 + 3088));
    v26 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
    v27 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v25, v26);
    v28 = JSC::FTL::Output::notZero32((JSC::FTL::Output *)(a1 + 27640), v27);
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isOther(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::FTL::Output *v4;
  JSC::B3::Value *v5;
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;
  uint64_t v9;
  uint64_t v10;

  if ((a3 & 0xFFFFFDFFFFFFFFFFLL) != 0)
  {
    if ((a3 & 0x20000000000) != 0)
    {
LABEL_3:
      v4 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
      v5 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), -9);
      v6 = JSC::FTL::Output::bitAnd(v4, a2, v5);
      v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v4, 2);
      return JSC::FTL::Output::equal(v4, v6, v7);
    }
    v9 = 27648;
  }
  else
  {
    v9 = 27640;
  }
  v10 = *(_QWORD *)((char *)this + v9);
  if (!v10)
    goto LABEL_3;
  return (JSC::B3::Value *)v10;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::stringsEqual(uint64_t a1, JSC::B3::Value *a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v10;
  JSC::DFG::Graph *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::B3::Value *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::B3::Value *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  JSC::B3::Value *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const JSC::FTL::AbstractHeap *v79;
  uint64_t v80;
  JSC::B3::Value *v81;
  JSC::B3::Value *v82;
  const JSC::FTL::AbstractHeap *v83;
  uint64_t v84;
  JSC::B3::Value *v85;
  uint64_t v86;
  JSC::B3::Value *v87;
  uint64_t v88;
  uint64_t v89;
  JSC::B3::Value *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC::B3::Value *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::B3::Value *v102;
  JSC::B3::Value *v103;
  char **v104;
  uint64_t v105;
  uint64_t v106;
  JSC::B3::Value *v107;
  JSC::B3::Value *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char **v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  JSC::B3::Value *v118;
  JSC::B3::Value *v119;
  JSC::B3::Value *v120;
  JSC::B3::Value *v121;
  uint64_t v122;
  JSC::B3::Value *v123;
  JSC::B3::Value *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char **v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  JSC::B3::Value *v134;
  JSC::B3::Value *v135;
  JSC::B3::Value *v136;
  JSC::B3::Value *v137;
  uint64_t v138;
  JSC::B3::Value *v139;
  JSC::B3::Value *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char **v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  JSC::B3::Value *v149;
  uint64_t v150;
  uint64_t v151;
  JSC::B3::Value *v152;
  JSC::B3::Value *v153;
  JSC::B3::Value *v154;
  uint64_t v155;
  JSC::B3::Value *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char **v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  JSC::B3::Value *v168;
  uint64_t v169;
  uint64_t v170;
  char **v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  JSC::B3::Value *v176;
  JSC::B3::Value *v177;
  char **v178;
  uint64_t v179;
  uint64_t v180;
  JSC::B3::Value *v181;
  uint64_t v182;
  JSC::FTL::IndexedAbstractHeap *v183;
  uint64_t v184;
  uint64_t v185;
  JSC::B3::Value *v186;
  uint64_t v187;
  JSC::FTL::IndexedAbstractHeap *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  JSC::B3::Value *v197;
  JSC::B3::Value *v198;
  char **v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  JSC::B3::Value *v206;
  uint64_t v207;
  uint64_t v208;
  char **v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  JSC::B3::Value *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  JSC::B3::Value *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char **v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  JSC::B3::Value *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char **v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  JSC::B3::Value *v253;
  JSC::B3::Value *v254;
  JSC::B3::Value *v255;
  JSC::B3::Value *v256;
  uint64_t v257;
  JSC::B3::Value *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char **v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  JSC::B3::Value *v270;
  uint64_t v271;
  uint64_t v272;
  char **v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  _QWORD *v302;
  _QWORD *v303;
  _QWORD *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  _QWORD *v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  _QWORD *v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  char *v376;
  char *v377;
  char *v378;
  char *v379;
  char *v380;
  char *v381;
  char *v382;
  char *v383;
  char *v384;
  char *v385;
  char *v386;
  char *v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unsigned int v392;
  BOOL v393;
  uint64_t v394;
  JSC::B3::Value *v395;
  uint64_t v396;
  unsigned int v397;
  BOOL v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  JSC::B3::Value *v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  JSC::B3::Value *v416;
  uint64_t v417;
  JSC::B3::Value *v418;
  JSC::B3::Value *v419;
  uint64_t v420;
  char v421;
  _QWORD *v422;
  uint64_t v423[2];

  v10 = a2;
  v418 = a3;
  v419 = a2;
  v12 = *(JSC::DFG::Graph **)a1;
  v13 = *(_QWORD *)(a1 + 28192);
  if ((v13 & 1) == 0)
  {
    v14 = *((_QWORD *)v12 + 4);
LABEL_3:
    v15 = (_QWORD *)(v13 & 0xFFFFFFFF8);
    v16 = 1;
    v17 = 1;
LABEL_4:
    v18 = v15;
    goto LABEL_5;
  }
  v391 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v392 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v392 != 0x3FFFFFFF) ? (v393 = v392 == -1) : (v393 = 1), v393))
  {
    v394 = 2;
  }
  else if (v392 >> 28)
  {
    v401 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v401 = v391;
    *(_DWORD *)(v401 + 8) = v392;
    v394 = 1;
    v391 = v401;
  }
  else
  {
    v394 = v391;
    v391 = 0;
  }
  v395 = v10;
  v13 = v391 | v394;
  v14 = *((_QWORD *)v12 + 4);
  if (((v391 | v394) & 1) == 0)
    goto LABEL_3;
  v396 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v397 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v397 != 0x3FFFFFFF) ? (v398 = v397 == -1) : (v398 = 1), v398))
  {
    v399 = 2;
  }
  else if (v397 >> 28)
  {
    v402 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v402 = v396;
    *(_DWORD *)(v402 + 8) = v397;
    v399 = 1;
    v396 = v402;
  }
  else
  {
    v399 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v396 = 0;
  }
  v10 = v395;
  v400 = v396 | v399;
  v15 = (_QWORD *)(v400 & 0xFFFFFFFF8);
  if ((v400 & 1) == 0)
  {
    v17 = 0;
    v16 = 1;
    goto LABEL_4;
  }
  v16 = 0;
  v17 = 0;
  v18 = (_QWORD *)*v15;
LABEL_5:
  if (v18)
    v14 = v18[1];
  v19 = *(_QWORD *)(v14 + 8);
  if ((v16 & 1) == 0 && v15)
    WTF::fastFree((unint64_t)v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((v17 & 1) == 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v20 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v21 = v20;
  v22 = *(_QWORD *)(a1 + 27784);
  if (v22)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v22, v20);
  }
  else
  {
    v423[0] = v20;
    v280 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v280 = 0u;
    *((_OWORD *)v280 + 1) = 0u;
    v280[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v280;
    v422 = v280;
    v280[2] = v21;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), v423, (uint64_t *)&v422, v281, v282, v283, v284, v285, (uint64_t)&v420);
    v286 = v422;
    v287 = *(_QWORD **)(a1 + 27832);
    *v422 = a1 + 27824;
    v286[1] = v287;
    *v287 = v286;
    *(_QWORD *)(a1 + 27832) = v286;
  }
  v23 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v24 = v23;
  v25 = *(_QWORD *)(a1 + 27784);
  if (v25)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v25, v23);
  }
  else
  {
    v423[0] = v23;
    v288 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v288 = 0u;
    *((_OWORD *)v288 + 1) = 0u;
    v288[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v288;
    v422 = v288;
    v288[2] = v24;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), v423, (uint64_t *)&v422, v289, v290, v291, v292, v293, (uint64_t)&v420);
    v294 = v422;
    v295 = *(_QWORD **)(a1 + 27832);
    *v422 = a1 + 27824;
    v294[1] = v295;
    *v295 = v294;
    *(_QWORD *)(a1 + 27832) = v294;
  }
  v26 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v27 = v26;
  v28 = *(_QWORD *)(a1 + 27784);
  v405 = a4;
  if (v28)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v28, v26);
  }
  else
  {
    v423[0] = v26;
    v296 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v296 = 0u;
    *((_OWORD *)v296 + 1) = 0u;
    v296[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v296;
    v422 = v296;
    v296[2] = v27;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), v423, (uint64_t *)&v422, v297, v298, v299, v300, v301, (uint64_t)&v420);
    v302 = v422;
    v303 = *(_QWORD **)(a1 + 27832);
    *v422 = a1 + 27824;
    v302[1] = v303;
    *v303 = v302;
    *(_QWORD *)(a1 + 27832) = v302;
  }
  v29 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v30 = v29;
  v31 = *(_QWORD *)(a1 + 27784);
  v408 = v19;
  if (v31)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v31, v29);
  }
  else
  {
    v423[0] = v29;
    v304 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v304 = 0u;
    *((_OWORD *)v304 + 1) = 0u;
    v304[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v304;
    v422 = v304;
    v304[2] = v30;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), v423, (uint64_t *)&v422, v305, v306, v307, v308, v309, (uint64_t)&v420);
    v310 = v422;
    v311 = *(_QWORD **)(a1 + 27832);
    *v422 = a1 + 27824;
    v310[1] = v311;
    *v311 = v310;
    *(_QWORD *)(a1 + 27832) = v310;
  }
  v32 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v33 = v32;
  v34 = *(_QWORD *)(a1 + 27784);
  v411 = v24;
  if (v34)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v34, v32);
  }
  else
  {
    v423[0] = v32;
    v312 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v312 = 0u;
    *((_OWORD *)v312 + 1) = 0u;
    v312[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v312;
    v422 = v312;
    v312[2] = v33;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), v423, (uint64_t *)&v422, v313, v314, v315, v316, v317, (uint64_t)&v420);
    v318 = v422;
    v319 = *(_QWORD **)(a1 + 27832);
    *v422 = a1 + 27824;
    v318[1] = v319;
    *v319 = v318;
    *(_QWORD *)(a1 + 27832) = v318;
  }
  v35 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v36 = v35;
  v37 = *(_QWORD *)(a1 + 27784);
  v412 = v35;
  if (v37)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v37, v35);
  }
  else
  {
    v423[0] = v35;
    v320 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v320 = 0u;
    *((_OWORD *)v320 + 1) = 0u;
    v320[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v320;
    v422 = v320;
    v320[2] = v36;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), v423, (uint64_t *)&v422, v321, v322, v323, v324, v325, (uint64_t)&v420);
    v326 = v422;
    v327 = *(_QWORD **)(a1 + 27832);
    *v422 = a1 + 27824;
    v326[1] = v327;
    *v327 = v326;
    *(_QWORD *)(a1 + 27832) = v326;
  }
  v38 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v39 = v38;
  v40 = *(_QWORD *)(a1 + 27784);
  v413 = v38;
  v404 = v10;
  if (v40)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v40, v38);
  }
  else
  {
    v423[0] = v38;
    v328 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v328 = 0u;
    *((_OWORD *)v328 + 1) = 0u;
    v328[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v328;
    v422 = v328;
    v328[2] = v39;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), v423, (uint64_t *)&v422, v329, v330, v331, v332, v333, (uint64_t)&v420);
    v334 = v422;
    v335 = *(_QWORD **)(a1 + 27832);
    *v422 = a1 + 27824;
    v334[1] = v335;
    *v335 = v334;
    *(_QWORD *)(a1 + 27832) = v334;
  }
  v410 = v33;
  v41 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v42 = v41;
  v43 = *(_QWORD *)(a1 + 27784);
  v403 = a5;
  if (v43)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v43, v41);
  }
  else
  {
    v423[0] = v41;
    v336 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v336 = 0u;
    *((_OWORD *)v336 + 1) = 0u;
    v336[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v336;
    v422 = v336;
    v336[2] = v42;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), v423, (uint64_t *)&v422, v337, v338, v339, v340, v341, (uint64_t)&v420);
    v342 = v422;
    v343 = *(_QWORD **)(a1 + 27832);
    *v422 = a1 + 27824;
    v342[1] = v343;
    *v343 = v342;
    *(_QWORD *)(a1 + 27832) = v342;
  }
  v44 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v45 = v44;
  v46 = *(_QWORD *)(a1 + 27784);
  v414 = v44;
  v47 = v27;
  if (v46)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v46, v44);
  }
  else
  {
    v423[0] = v44;
    v344 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v344 = 0u;
    *((_OWORD *)v344 + 1) = 0u;
    v344[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v344;
    v422 = v344;
    v344[2] = v45;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), v423, (uint64_t *)&v422, v345, v346, v347, v348, v349, (uint64_t)&v420);
    v350 = v422;
    v351 = *(_QWORD **)(a1 + 27832);
    *v422 = a1 + 27824;
    v350[1] = v351;
    *v351 = v350;
    *(_QWORD *)(a1 + 27832) = v350;
  }
  v48 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v49 = (JSC::B3::Value *)v48;
  v50 = *(_QWORD *)(a1 + 27784);
  v409 = v42;
  if (v50)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v50, v48);
  }
  else
  {
    v423[0] = v48;
    v352 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v352 = 0u;
    *((_OWORD *)v352 + 1) = 0u;
    v352[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v352;
    v422 = v352;
    v352[2] = v49;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), v423, (uint64_t *)&v422, v353, v354, v355, v356, v357, (uint64_t)&v420);
    v358 = v422;
    v359 = *(_QWORD **)(a1 + 27832);
    *v422 = a1 + 27824;
    v358[1] = v359;
    *v359 = v358;
    *(_QWORD *)(a1 + 27832) = v358;
  }
  v51 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v52 = v51;
  v53 = *(_QWORD *)(a1 + 27784);
  v417 = v51;
  if (v53)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v53, v51);
  }
  else
  {
    v423[0] = v51;
    v360 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v360 = 0u;
    *((_OWORD *)v360 + 1) = 0u;
    v360[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v360;
    v422 = v360;
    v360[2] = v52;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), v423, (uint64_t *)&v422, v361, v362, v363, v364, v365, (uint64_t)&v420);
    v366 = v422;
    v367 = *(_QWORD **)(a1 + 27832);
    *v422 = a1 + 27824;
    v366[1] = v367;
    *v367 = v366;
    *(_QWORD *)(a1 + 27832) = v366;
  }
  v54 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v55 = v54;
  v56 = *(_QWORD *)(a1 + 27784);
  v407 = v54;
  if (v56)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v56, v54);
  }
  else
  {
    v423[0] = v54;
    v368 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v368 = 0u;
    *((_OWORD *)v368 + 1) = 0u;
    v368[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v368;
    v422 = v368;
    v368[2] = v55;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), v423, (uint64_t *)&v422, v369, v370, v371, v372, v373, (uint64_t)&v420);
    v374 = v422;
    v375 = *(_QWORD **)(a1 + 27832);
    *v422 = a1 + 27824;
    v374[1] = v375;
    *v375 = v374;
    *(_QWORD *)(a1 + 27832) = v374;
  }
  v62 = (uint64_t)v404;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v63, v417, v47, 0.0, 1.0, v64, v65, v66, v67);
  *(_QWORD *)(a1 + 27776) = v47;
  v68 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v30;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v74, v417, v30, 0.0, 1.0, v75, v76, v77, v78);
  *(_QWORD *)(a1 + 27776) = v30;
  *(_QWORD *)(a1 + 27784) = v21;
  v79 = *(const JSC::FTL::AbstractHeap **)(a1 + 26504);
  v80 = *((_QWORD *)v79 + 3);
  v406 = v68;
  if (v80)
  {
    v81 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v80);
    v62 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v404, v81);
  }
  v82 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, v79, v62, 2);
  v83 = *(const JSC::FTL::AbstractHeap **)(a1 + 26504);
  v84 = *((_QWORD *)v83 + 3);
  if (v84)
  {
    v85 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v84);
    v86 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), a3, v85);
  }
  else
  {
    v86 = (uint64_t)a3;
  }
  v416 = v49;
  v87 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, v83, v86, 2);
  v88 = *(_QWORD *)(a1 + 5272);
  v89 = (uint64_t)v82;
  if (v88)
  {
    v90 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v88);
    v89 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v82, v90);
  }
  v91 = JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 5248), v89, 1);
  v92 = *(_QWORD *)(a1 + 5272);
  v93 = (uint64_t)v87;
  if (v92)
  {
    v94 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v92);
    v93 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v87, v94);
  }
  v95 = JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 5248), v93, 1);
  v96 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 312))(v91, v95);
  if (v96 == 2)
  {
    v101 = *(_QWORD *)(a1 + 27776);
    v102 = *(JSC::B3::Value **)(a1 + 27760);
    v103 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), v91, v95);
    JSC::B3::Procedure::addValueImpl(v102, v103);
    v420 = (uint64_t)v103;
    v104 = (char **)(v101 + 8);
    v105 = *(unsigned int *)(v101 + 20);
    if ((_DWORD)v105 == *(_DWORD *)(v101 + 16))
    {
      v387 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v104, v105 + 1, (unint64_t)&v420);
      v105 = *(unsigned int *)(v101 + 20);
      *(_QWORD *)(*(_QWORD *)(v101 + 8) + 8 * v105) = *(_QWORD *)v387;
      v106 = v420;
    }
    else
    {
      *(_QWORD *)&(*v104)[8 * v105] = v103;
      v106 = (uint64_t)v103;
    }
    *(_DWORD *)(v101 + 20) = v105 + 1;
    *(_QWORD *)(v106 + 32) = v101;
  }
  else
  {
    v389 = 27648;
    if (v96 == 1)
      v389 = 27640;
    v103 = *(JSC::B3::Value **)(a1 + v389);
  }
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v103, (uint64_t)v416, v21, NAN, NAN, v97, v98, v99, v100);
  *(_QWORD *)(a1 + 27776) = v21;
  *(_QWORD *)(a1 + 27784) = v411;
  v107 = *(JSC::B3::Value **)(a1 + 27760);
  v108 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), v91, *(_QWORD *)(a1 + 27656));
  JSC::B3::Procedure::addValueImpl(v107, v108);
  v420 = (uint64_t)v108;
  v113 = (char **)(v21 + 8);
  v114 = *(unsigned int *)(v21 + 20);
  if ((_DWORD)v114 == *(_DWORD *)(v21 + 16))
  {
    v376 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v113, v114 + 1, (unint64_t)&v420);
    v114 = *(unsigned int *)(v21 + 20);
    *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8 * v114) = *(_QWORD *)v376;
    v115 = v420;
  }
  else
  {
    *(_QWORD *)&(*v113)[8 * v114] = v108;
    v115 = (uint64_t)v108;
  }
  *(_DWORD *)(v21 + 20) = v114 + 1;
  *(_QWORD *)(v115 + 32) = v21;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v108, v414, v411, NAN, NAN, v109, v110, v111, v112);
  *(_QWORD *)(a1 + 27776) = v411;
  *(_QWORD *)(a1 + 27784) = v410;
  v116 = *(_QWORD *)(a1 + 5224);
  v117 = (uint64_t)v82;
  if (v116)
  {
    v118 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v116);
    v117 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v82, v118);
  }
  v119 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 5200), v117, 1);
  v120 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 4);
  v121 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v119, v120);
  v122 = *(_QWORD *)(a1 + 27776);
  v123 = *(JSC::B3::Value **)(a1 + 27760);
  v124 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v121, *(_QWORD *)(a1 + 27656));
  JSC::B3::Procedure::addValueImpl(v123, v124);
  v420 = (uint64_t)v124;
  v129 = (char **)(v122 + 8);
  v130 = *(unsigned int *)(v122 + 20);
  if ((_DWORD)v130 == *(_DWORD *)(v122 + 16))
  {
    v377 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v129, v130 + 1, (unint64_t)&v420);
    v130 = *(unsigned int *)(v122 + 20);
    *(_QWORD *)(*(_QWORD *)(v122 + 8) + 8 * v130) = *(_QWORD *)v377;
    v131 = v420;
  }
  else
  {
    *(_QWORD *)&(*v129)[8 * v130] = v124;
    v131 = (uint64_t)v124;
  }
  *(_DWORD *)(v122 + 20) = v130 + 1;
  *(_QWORD *)(v131 + 32) = v122;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v124, v417, v410, NAN, NAN, v125, v126, v127, v128);
  *(_QWORD *)(a1 + 27776) = v410;
  *(_QWORD *)(a1 + 27784) = v412;
  v132 = (uint64_t)v87;
  v133 = *(_QWORD *)(a1 + 5224);
  if (v133)
  {
    v134 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v133);
    v132 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v87, v134);
  }
  v135 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 5200), v132, 1);
  v136 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 4);
  v137 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v135, v136);
  v138 = *(_QWORD *)(a1 + 27776);
  v139 = *(JSC::B3::Value **)(a1 + 27760);
  v140 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v137, *(_QWORD *)(a1 + 27656));
  JSC::B3::Procedure::addValueImpl(v139, v140);
  v420 = (uint64_t)v140;
  v145 = (char **)(v138 + 8);
  v146 = *(unsigned int *)(v138 + 20);
  if ((_DWORD)v146 == *(_DWORD *)(v138 + 16))
  {
    v378 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v145, v146 + 1, (unint64_t)&v420);
    v146 = *(unsigned int *)(v138 + 20);
    *(_QWORD *)(*(_QWORD *)(v138 + 8) + 8 * v146) = *(_QWORD *)v378;
    v147 = v420;
  }
  else
  {
    *(_QWORD *)&(*v145)[8 * v146] = v140;
    v147 = (uint64_t)v140;
  }
  *(_DWORD *)(v138 + 20) = v146 + 1;
  *(_QWORD *)(v147 + 32) = v138;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v140, v417, v412, NAN, NAN, v141, v142, v143, v144);
  *(_QWORD *)(a1 + 27776) = v412;
  *(_QWORD *)(a1 + 27784) = v413;
  v148 = *(_QWORD *)(a1 + 5176);
  if (v148)
  {
    v149 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v148);
    v82 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v82, v149);
  }
  v150 = JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 5152), (uint64_t)v82, 2);
  v151 = *(_QWORD *)(a1 + 5176);
  v152 = (JSC::B3::Value *)v150;
  if (v151)
  {
    v153 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v151);
    v87 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v87, v153);
  }
  v154 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 5152), (uint64_t)v87, 2);
  v155 = *(_QWORD *)(a1 + 27776);
  v156 = *(JSC::B3::Value **)(a1 + 27760);
  v157 = *(_QWORD *)(a1 + 27768);
  v158 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v158 + 8) = -1;
  *(_WORD *)(v158 + 12) = 152;
  *(_BYTE *)(v158 + 20) = 1;
  *(_QWORD *)v158 = &unk_1E357EDA0;
  *(_DWORD *)(v158 + 16) = 0;
  *(_QWORD *)(v158 + 40) = 0;
  *(_QWORD *)(v158 + 48) = v91;
  *(_QWORD *)(v158 + 24) = v157;
  *(_QWORD *)(v158 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v156, (JSC::B3::Value *)v158);
  v420 = v158;
  v162 = (char **)(v155 + 8);
  v163 = *(unsigned int *)(v155 + 20);
  if ((_DWORD)v163 == *(_DWORD *)(v155 + 16))
  {
    v379 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v162, v163 + 1, (unint64_t)&v420);
    v163 = *(unsigned int *)(v155 + 20);
    *(_QWORD *)(*(_QWORD *)(v155 + 8) + 8 * v163) = *(_QWORD *)v379;
    v164 = v420;
  }
  else
  {
    *(_QWORD *)&(*v162)[8 * v163] = v158;
    v164 = v158;
  }
  *(_DWORD *)(v155 + 20) = v163 + 1;
  *(_QWORD *)(v164 + 32) = v155;
  v165 = *(_QWORD *)(a1 + 27776);
  v166 = *(_QWORD *)(a1 + 27760);
  v167 = *(_QWORD *)(a1 + 27768);
  v420 = v413;
  v421 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v165, v166, 154, v167, &v420, v159, v160, v161);
  *(_QWORD *)(a1 + 27776) = v413;
  *(_QWORD *)(a1 + 27784) = v409;
  v168 = *(JSC::B3::Value **)(a1 + 27760);
  v169 = *(_QWORD *)(a1 + 27768);
  v170 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v170 = off_1E357F5F0;
  *(_DWORD *)(v170 + 8) = -1;
  *(_WORD *)(v170 + 12) = 153;
  *(_DWORD *)(v170 + 16) = 1;
  *(_BYTE *)(v170 + 20) = 0;
  *(_QWORD *)(v170 + 24) = v169;
  *(_QWORD *)(v170 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v168, (JSC::B3::Value *)v170);
  v420 = v170;
  v171 = (char **)(v413 + 8);
  v172 = *(unsigned int *)(v413 + 20);
  if ((_DWORD)v172 == *(_DWORD *)(v413 + 16))
  {
    v380 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v171, v172 + 1, (unint64_t)&v420);
    v172 = *(unsigned int *)(v413 + 20);
    *(_QWORD *)(*(_QWORD *)(v413 + 8) + 8 * v172) = *(_QWORD *)v380;
    v173 = v420;
  }
  else
  {
    *(_QWORD *)&(*v171)[8 * v172] = v170;
    v173 = v170;
  }
  *(_DWORD *)(v413 + 20) = v172 + 1;
  *(_QWORD *)(v173 + 32) = v413;
  if ((*(_WORD *)(v158 + 12) & 0xFFF) == 0x98)
    v174 = v158;
  else
    v174 = 0;
  *(_QWORD *)(v174 + 40) = v170;
  v175 = *(_QWORD *)(a1 + 27776);
  v176 = *(JSC::B3::Value **)(a1 + 27760);
  v177 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(15, *(_QWORD *)(a1 + 27768), v170, *(_QWORD *)(a1 + 27664));
  JSC::B3::Procedure::addValueImpl(v176, v177);
  v420 = (uint64_t)v177;
  v178 = (char **)(v175 + 8);
  v179 = *(unsigned int *)(v175 + 20);
  if ((_DWORD)v179 == *(_DWORD *)(v175 + 16))
  {
    v381 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v178, v179 + 1, (unint64_t)&v420);
    v179 = *(unsigned int *)(v175 + 20);
    *(_QWORD *)(*(_QWORD *)(v175 + 8) + 8 * v179) = *(_QWORD *)v381;
    v180 = v420;
  }
  else
  {
    *(_QWORD *)&(*v178)[8 * v179] = v177;
    v180 = (uint64_t)v177;
  }
  *(_DWORD *)(v175 + 20) = v179 + 1;
  *(_QWORD *)(v180 + 32) = v175;
  v181 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)(a1 + 27640), (uint64_t)v177, 2);
  v183 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(a1 + 14600), (JSC::FTL::Output *)(a1 + 27640), v152, v181, 0, 0, 0, v182);
  v185 = JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), (uint64_t)v183, v184);
  v186 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)(a1 + 27640), (uint64_t)v177, 2);
  v188 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(a1 + 14600), (JSC::FTL::Output *)(a1 + 27640), v154, v186, 0, 0, 0, v187);
  v190 = JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), (uint64_t)v188, v189);
  v191 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v185 + 312))(v185, v190);
  if (v191 == 2)
  {
    v196 = *(_QWORD *)(a1 + 27776);
    v197 = *(JSC::B3::Value **)(a1 + 27760);
    v198 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), v185, v190);
    JSC::B3::Procedure::addValueImpl(v197, v198);
    v420 = (uint64_t)v198;
    v199 = (char **)(v196 + 8);
    v200 = *(unsigned int *)(v196 + 20);
    v201 = v407;
    if ((_DWORD)v200 == *(_DWORD *)(v196 + 16))
    {
      v388 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v199, v200 + 1, (unint64_t)&v420);
      v200 = *(unsigned int *)(v196 + 20);
      *(_QWORD *)(*(_QWORD *)(v196 + 8) + 8 * v200) = *(_QWORD *)v388;
      v202 = v420;
    }
    else
    {
      *(_QWORD *)&(*v199)[8 * v200] = v198;
      v202 = (uint64_t)v198;
    }
    v203 = v413;
    v204 = v414;
    v205 = (uint64_t)v416;
    *(_DWORD *)(v196 + 20) = v200 + 1;
    *(_QWORD *)(v202 + 32) = v196;
  }
  else
  {
    v390 = 27648;
    if (v191 == 1)
      v390 = 27640;
    v198 = *(JSC::B3::Value **)(a1 + v390);
    v201 = v407;
    v203 = v413;
    v204 = v414;
    v205 = (uint64_t)v416;
  }
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v198, v205, v409, NAN, NAN, v192, v193, v194, v195);
  *(_QWORD *)(a1 + 27776) = v409;
  *(_QWORD *)(a1 + 27784) = v204;
  v206 = *(JSC::B3::Value **)(a1 + 27760);
  v207 = *(_QWORD *)(a1 + 27768);
  v208 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v208 + 8) = -1;
  *(_WORD *)(v208 + 12) = 152;
  *(_DWORD *)(v208 + 16) = 0;
  *(_BYTE *)(v208 + 20) = 1;
  *(_QWORD *)v208 = &unk_1E357EDA0;
  *(_QWORD *)(v208 + 40) = 0;
  *(_QWORD *)(v208 + 48) = v177;
  *(_QWORD *)(v208 + 24) = v207;
  *(_QWORD *)(v208 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v206, (JSC::B3::Value *)v208);
  v420 = v208;
  v209 = (char **)(v409 + 8);
  v210 = *(unsigned int *)(v409 + 20);
  if ((_DWORD)v210 == *(_DWORD *)(v409 + 16))
  {
    v382 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v209, v210 + 1, (unint64_t)&v420);
    v210 = *(unsigned int *)(v409 + 20);
    *(_QWORD *)(*(_QWORD *)(v409 + 8) + 8 * v210) = *(_QWORD *)v382;
    v211 = v420;
  }
  else
  {
    *(_QWORD *)&(*v209)[8 * v210] = v208;
    v211 = v208;
  }
  *(_DWORD *)(v409 + 20) = v210 + 1;
  *(_QWORD *)(v211 + 32) = v409;
  if ((*(_WORD *)(v208 + 12) & 0xFFF) == 0x98)
    v212 = v208;
  else
    v212 = 0;
  *(_QWORD *)(v212 + 40) = v170;
  v213 = JSC::FTL::Output::notZero32((JSC::FTL::Output *)(a1 + 27640), v177);
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v213, v203, v414, NAN, NAN, v214, v215, v216, v217);
  *(_QWORD *)(a1 + 27776) = v414;
  *(_QWORD *)(a1 + 27784) = v416;
  v218 = *(_QWORD *)(a1 + 27640);
  v219 = *(JSC::B3::Value **)(a1 + 27760);
  v220 = *(_QWORD *)(a1 + 27768);
  v221 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v221 + 8) = -1;
  *(_WORD *)(v221 + 12) = 152;
  *(_DWORD *)(v221 + 16) = 0;
  *(_BYTE *)(v221 + 20) = 1;
  *(_QWORD *)v221 = &unk_1E357EDA0;
  *(_QWORD *)(v221 + 40) = 0;
  *(_QWORD *)(v221 + 48) = v218;
  *(_QWORD *)(v221 + 24) = v220;
  *(_QWORD *)(v221 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v219, (JSC::B3::Value *)v221);
  v420 = v221;
  v225 = (char **)(v414 + 8);
  v226 = *(unsigned int *)(v414 + 20);
  if ((_DWORD)v226 == *(_DWORD *)(v414 + 16))
  {
    v383 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v225, v226 + 1, (unint64_t)&v420);
    v226 = *(unsigned int *)(v414 + 20);
    *(_QWORD *)(*(_QWORD *)(v414 + 8) + 8 * v226) = *(_QWORD *)v383;
    v227 = v420;
  }
  else
  {
    *(_QWORD *)&(*v225)[8 * v226] = v221;
    v227 = v221;
  }
  *(_DWORD *)(v414 + 20) = v226 + 1;
  *(_QWORD *)(v227 + 32) = v414;
  v228 = *(_QWORD *)(a1 + 27776);
  v229 = *(_QWORD *)(a1 + 27760);
  v230 = *(_QWORD *)(a1 + 27768);
  v420 = v201;
  v421 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v228, v229, 154, v230, &v420, v222, v223, v224);
  *(_QWORD *)(a1 + 27776) = v416;
  *(_QWORD *)(a1 + 27784) = v417;
  v231 = *(_QWORD *)(a1 + 27648);
  v232 = *(JSC::B3::Value **)(a1 + 27760);
  v233 = *(_QWORD *)(a1 + 27768);
  v234 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v234 + 8) = -1;
  *(_WORD *)(v234 + 12) = 152;
  *(_DWORD *)(v234 + 16) = 0;
  *(_BYTE *)(v234 + 20) = 1;
  *(_QWORD *)v234 = &unk_1E357EDA0;
  *(_QWORD *)(v234 + 40) = 0;
  *(_QWORD *)(v234 + 48) = v231;
  *(_QWORD *)(v234 + 24) = v233;
  *(_QWORD *)(v234 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v232, (JSC::B3::Value *)v234);
  v420 = v234;
  v238 = (char **)((char *)v416 + 8);
  v239 = *((unsigned int *)v416 + 5);
  if ((_DWORD)v239 == *((_DWORD *)v416 + 4))
  {
    v384 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v238, v239 + 1, (unint64_t)&v420);
    v239 = *((unsigned int *)v416 + 5);
    *(_QWORD *)(*((_QWORD *)v416 + 1) + 8 * v239) = *(_QWORD *)v384;
    v240 = v420;
  }
  else
  {
    *(_QWORD *)&(*v238)[8 * v239] = v234;
    v240 = v234;
  }
  *((_DWORD *)v416 + 5) = v239 + 1;
  *(_QWORD *)(v240 + 32) = v416;
  v241 = *(_QWORD *)(a1 + 27776);
  v242 = *(_QWORD *)(a1 + 27760);
  v243 = *(_QWORD *)(a1 + 27768);
  v420 = v201;
  v421 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v241, v242, 154, v243, &v420, v235, v236, v237);
  *(_QWORD *)(a1 + 27776) = v417;
  *(_QWORD *)(a1 + 27784) = v201;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 280), v408, v244, v245, v246, v247, v248, v249);
  v420 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v408);
  v254 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), 1);
  v255 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v253, v254);
  v256 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v255);
  v257 = *(_QWORD *)(a1 + 27776);
  v258 = *(JSC::B3::Value **)(a1 + 27760);
  v259 = *(_QWORD *)(a1 + 27768);
  v260 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v260 + 8) = -1;
  *(_WORD *)(v260 + 12) = 152;
  *(_DWORD *)(v260 + 16) = 0;
  *(_BYTE *)(v260 + 20) = 1;
  *(_QWORD *)v260 = &unk_1E357EDA0;
  *(_QWORD *)(v260 + 40) = 0;
  *(_QWORD *)(v260 + 48) = v256;
  *(_QWORD *)(v260 + 24) = v259;
  *(_QWORD *)(v260 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v258, (JSC::B3::Value *)v260);
  v420 = v260;
  v264 = (char **)(v257 + 8);
  v265 = *(unsigned int *)(v257 + 20);
  if ((_DWORD)v265 == *(_DWORD *)(v257 + 16))
  {
    v385 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v264, v265 + 1, (unint64_t)&v420);
    v265 = *(unsigned int *)(v257 + 20);
    *(_QWORD *)(*(_QWORD *)(v257 + 8) + 8 * v265) = *(_QWORD *)v385;
    v266 = v420;
  }
  else
  {
    *(_QWORD *)&(*v264)[8 * v265] = v260;
    v266 = v260;
  }
  *(_DWORD *)(v257 + 20) = v265 + 1;
  *(_QWORD *)(v266 + 32) = v257;
  v267 = *(_QWORD *)(a1 + 27776);
  v268 = *(_QWORD *)(a1 + 27760);
  v269 = *(_QWORD *)(a1 + 27768);
  v420 = v201;
  v421 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v267, v268, 154, v269, &v420, v261, v262, v263);
  *(_QWORD *)(a1 + 27776) = v201;
  *(_QWORD *)(a1 + 27784) = v406;
  v270 = *(JSC::B3::Value **)(a1 + 27760);
  v271 = *(_QWORD *)(a1 + 27768);
  v272 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v272 = off_1E357F5F0;
  *(_DWORD *)(v272 + 8) = -1;
  *(_WORD *)(v272 + 12) = 153;
  *(_DWORD *)(v272 + 16) = 1;
  *(_BYTE *)(v272 + 20) = 0;
  *(_QWORD *)(v272 + 24) = v271;
  *(_QWORD *)(v272 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v270, (JSC::B3::Value *)v272);
  v420 = v272;
  v273 = (char **)(v201 + 8);
  v274 = *(unsigned int *)(v201 + 20);
  if ((_DWORD)v274 == *(_DWORD *)(v201 + 16))
  {
    v386 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v273, v274 + 1, (unint64_t)&v420);
    v274 = *(unsigned int *)(v201 + 20);
    *(_QWORD *)(*(_QWORD *)(v201 + 8) + 8 * v274) = *(_QWORD *)v386;
    v275 = v420;
  }
  else
  {
    *(_QWORD *)&(*v273)[8 * v274] = v272;
    v275 = v272;
  }
  *(_DWORD *)(v201 + 20) = v274 + 1;
  *(_QWORD *)(v275 + 32) = v201;
  if ((*(_WORD *)(v221 + 12) & 0xFFF) == 0x98)
    v276 = v221;
  else
    v276 = 0;
  *(_QWORD *)(v276 + 40) = v272;
  if ((*(_WORD *)(v234 + 12) & 0xFFF) == 0x98)
    v277 = v234;
  else
    v277 = 0;
  *(_QWORD *)(v277 + 40) = v272;
  if ((*(_WORD *)(v260 + 12) & 0xFFF) == 0x98)
    v278 = v260;
  else
    v278 = 0;
  *(_QWORD *)(v278 + 40) = v272;
  return v272;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileStringToUntypedStrictEquality(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  uint64_t v38;
  uint64_t v39;
  JSC::B3::Value *v40;
  uint64_t v41;
  uint64_t v42;
  char **v43;
  uint64_t v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  JSC::B3::Value *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char **v61;
  uint64_t v62;
  uint64_t v63;
  JSC::B3::Value **v64;
  JSC::B3::Value *v65;
  JSC::B3::Value *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  JSC::B3::Value **v72;
  uint64_t v73;
  uint64_t v74;
  JSC::B3::Value *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  JSC::B3::Value *v80;
  JSC::B3::Value *v81;
  char **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  JSC::B3::Value *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char **v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::B3::Value *v102;
  uint64_t v103;
  uint64_t v104;
  char **v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  double result;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  JSC::B3::Value **v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  JSC::B3::Value *v156;
  JSC::B3::Value *v157;
  __n128 v158;
  uint64_t v159;
  char v160;
  _QWORD *v161;

  v157 = v12;
  v25 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v26 = v25;
  v27 = *(_QWORD *)(a1 + 27784);
  if (v27)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v27, v25);
  }
  else
  {
    v158.n128_u64[0] = v25;
    v113 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v113 = 0u;
    *((_OWORD *)v113 + 1) = 0u;
    v113[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v113;
    v161 = v113;
    v113[2] = v26;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v158, (uint64_t *)&v161, v114, v115, v116, v117, v118, (uint64_t)&v159);
    v119 = v161;
    v120 = *(_QWORD **)(a1 + 27832);
    *v161 = a1 + 27824;
    v119[1] = v120;
    *v120 = v119;
    *(_QWORD *)(a1 + 27832) = v119;
  }
  v28 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v29 = v28;
  v30 = *(_QWORD *)(a1 + 27784);
  if (v30)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v30, v28);
  }
  else
  {
    v158.n128_u64[0] = v28;
    v121 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v121 = 0u;
    *((_OWORD *)v121 + 1) = 0u;
    v121[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v121;
    v161 = v121;
    v121[2] = v29;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v158, (uint64_t *)&v161, v122, v123, v124, v125, v126, (uint64_t)&v159);
    v127 = v161;
    v128 = *(_QWORD **)(a1 + 27832);
    *v161 = a1 + 27824;
    v127[1] = v128;
    *v128 = v127;
    *(_QWORD *)(a1 + 27832) = v127;
  }
  v31 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v32 = v31;
  v33 = *(_QWORD *)(a1 + 27784);
  v154 = a2;
  v155 = v29;
  if (v33)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v33, v31);
  }
  else
  {
    v158.n128_u64[0] = v31;
    v129 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v129 = 0u;
    *((_OWORD *)v129 + 1) = 0u;
    v129[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v129;
    v161 = v129;
    v129[2] = v32;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v158, (uint64_t *)&v161, v130, v131, v132, v133, v134, (uint64_t)&v159);
    v135 = v161;
    v136 = *(_QWORD **)(a1 + 27832);
    *v161 = a1 + 27824;
    v135[1] = v136;
    *v136 = v135;
    *(_QWORD *)(a1 + 27832) = v135;
  }
  v34 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v35 = v34;
  v36 = *(_QWORD *)(a1 + 27784);
  v153 = v32;
  v37 = (JSC::B3::Value *)v13;
  if (v36)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v36, v34);
  }
  else
  {
    v158.n128_u64[0] = v34;
    v137 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v137 = 0u;
    *((_OWORD *)v137 + 1) = 0u;
    v137[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v137;
    v161 = v137;
    v137[2] = v35;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v158, (uint64_t *)&v161, v138, v139, v140, v141, v142, (uint64_t)&v159);
    v143 = v161;
    v144 = *(_QWORD **)(a1 + 27832);
    *v161 = a1 + 27824;
    v143[1] = v144;
    *v144 = v143;
    *(_QWORD *)(a1 + 27832) = v143;
  }
  v38 = *(_QWORD *)(a1 + 27640);
  v39 = *(_QWORD *)(a1 + 27776);
  v40 = *(JSC::B3::Value **)(a1 + 27760);
  v41 = *(_QWORD *)(a1 + 27768);
  v42 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v42 + 8) = -1;
  *(_WORD *)(v42 + 12) = 152;
  *(_BYTE *)(v42 + 20) = 1;
  *(_QWORD *)v42 = &unk_1E357EDA0;
  *(_DWORD *)(v42 + 16) = 0;
  *(_QWORD *)(v42 + 40) = 0;
  *(_QWORD *)(v42 + 48) = v38;
  *(_QWORD *)(v42 + 24) = v41;
  *(_QWORD *)(v42 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v40, (JSC::B3::Value *)v42);
  v159 = v42;
  v43 = (char **)(v39 + 8);
  v44 = *(unsigned int *)(v39 + 20);
  if ((_DWORD)v44 == *(_DWORD *)(v39 + 16))
  {
    v145 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v43, v44 + 1, (unint64_t)&v159);
    v44 = *(unsigned int *)(v39 + 20);
    *(_QWORD *)(*(_QWORD *)(v39 + 8) + 8 * v44) = *(_QWORD *)v145;
    v45 = v159;
  }
  else
  {
    *(_QWORD *)&(*v43)[8 * v44] = v42;
    v45 = v42;
  }
  *(_DWORD *)(v39 + 20) = v44 + 1;
  *(_QWORD *)(v45 + 32) = v39;
  v46 = v37;
  v47 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v157, v37);
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v47, v35, v26, NAN, NAN, v48, v49, v50, v51);
  *(_QWORD *)(a1 + 27776) = v26;
  v52 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v155;
  v151 = v52;
  v53 = *(_QWORD *)(a1 + 27648);
  v54 = *(JSC::B3::Value **)(a1 + 27760);
  v55 = *(_QWORD *)(a1 + 27768);
  v56 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v56 + 8) = -1;
  *(_WORD *)(v56 + 12) = 152;
  *(_DWORD *)(v56 + 16) = 0;
  *(_BYTE *)(v56 + 20) = 1;
  *(_QWORD *)v56 = &unk_1E357EDA0;
  *(_QWORD *)(v56 + 40) = 0;
  *(_QWORD *)(v56 + 48) = v53;
  *(_QWORD *)(v56 + 24) = v55;
  *(_QWORD *)(v56 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v54, (JSC::B3::Value *)v56);
  v159 = v56;
  v61 = (char **)(v26 + 8);
  v62 = *(unsigned int *)(v26 + 20);
  if ((_DWORD)v62 == *(_DWORD *)(v26 + 16))
  {
    v146 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v61, v62 + 1, (unint64_t)&v159);
    v62 = *(unsigned int *)(v26 + 20);
    *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v62) = *(_QWORD *)v146;
    v63 = v159;
  }
  else
  {
    *(_QWORD *)&(*v61)[8 * v62] = v56;
    v63 = v56;
  }
  *(_DWORD *)(v26 + 20) = v62 + 1;
  *(_QWORD *)(v63 + 32) = v26;
  v64 = (JSC::B3::Value **)(a1 + 27640);
  if ((v152 & 0x2C00FFFFFFF7) != 0 && (v64 = (JSC::B3::Value **)(a1 + 27648), (v152 & 0xFFFFD3FF00000008) != 0)
    || (v66 = *v64) == 0)
  {
    v65 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v46, *(JSC::B3::Value **)(a1 + 27904));
    v66 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v65);
  }
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v66, v35, v155, NAN, NAN, v57, v58, v59, v60);
  *(_QWORD *)(a1 + 27776) = v155;
  v71 = v153;
  *(_QWORD *)(a1 + 27784) = v153;
  v72 = (JSC::B3::Value **)(a1 + 27640);
  if ((v152 & 0x30000000) != 0 && (v72 = (JSC::B3::Value **)(a1 + 27648), (v152 & 0x2800CFFFFFF7) != 0)
    || (v81 = *v72) == 0)
  {
    v73 = *(_QWORD *)(a1 + 3160);
    v74 = (uint64_t)v46;
    if (v73)
    {
      v75 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v73);
      v74 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v46, v75);
    }
    v76 = JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), a1 + 3136, v74);
    v77 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 2);
    v78 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 312))(v76, v77);
    if (v78 == 2)
    {
      v156 = v46;
      v79 = *(_QWORD *)(a1 + 27776);
      v80 = *(JSC::B3::Value **)(a1 + 27760);
      v81 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), v76, v77);
      JSC::B3::Procedure::addValueImpl(v80, v81);
      v159 = (uint64_t)v81;
      v82 = (char **)(v79 + 8);
      v83 = *(unsigned int *)(v79 + 20);
      if ((_DWORD)v83 == *(_DWORD *)(v79 + 16))
      {
        v149 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v82, v83 + 1, (unint64_t)&v159);
        v83 = *(unsigned int *)(v79 + 20);
        *(_QWORD *)(*(_QWORD *)(v79 + 8) + 8 * v83) = *(_QWORD *)v149;
        v84 = v159;
      }
      else
      {
        *(_QWORD *)&(*v82)[8 * v83] = v81;
        v84 = (uint64_t)v81;
      }
      *(_DWORD *)(v79 + 20) = v83 + 1;
      *(_QWORD *)(v84 + 32) = v79;
      v71 = v153;
      v46 = v156;
    }
    else
    {
      if (v78 == 1)
        v150 = (JSC::B3::Value **)(a1 + 27640);
      else
        v150 = (JSC::B3::Value **)(a1 + 27648);
      v81 = *v150;
    }
  }
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v81, v35, v71, NAN, NAN, v67, v68, v69, v70);
  *(_QWORD *)(a1 + 27776) = v71;
  *(_QWORD *)(a1 + 27784) = v35;
  v89 = *(_QWORD *)(a1 + 27776);
  v90 = *(JSC::B3::Value **)(a1 + 27760);
  v91 = *(_QWORD *)(a1 + 27768);
  v92 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v92 + 8) = -1;
  *(_WORD *)(v92 + 12) = 152;
  *(_DWORD *)(v92 + 16) = 0;
  *(_BYTE *)(v92 + 20) = 1;
  *(_QWORD *)v92 = &unk_1E357EDA0;
  *(_QWORD *)(v92 + 40) = 0;
  *(_QWORD *)(v92 + 48) = v88;
  *(_QWORD *)(v92 + 24) = v91;
  *(_QWORD *)(v92 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v90, (JSC::B3::Value *)v92);
  v159 = v92;
  v96 = (char **)(v89 + 8);
  v97 = *(unsigned int *)(v89 + 20);
  if ((_DWORD)v97 == *(_DWORD *)(v89 + 16))
  {
    v147 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96, v97 + 1, (unint64_t)&v159);
    v97 = *(unsigned int *)(v89 + 20);
    *(_QWORD *)(*(_QWORD *)(v89 + 8) + 8 * v97) = *(_QWORD *)v147;
    v98 = v159;
  }
  else
  {
    *(_QWORD *)&(*v96)[8 * v97] = v92;
    v98 = v92;
  }
  *(_DWORD *)(v89 + 20) = v97 + 1;
  *(_QWORD *)(v98 + 32) = v89;
  v99 = *(_QWORD *)(a1 + 27776);
  v100 = *(_QWORD *)(a1 + 27760);
  v101 = *(_QWORD *)(a1 + 27768);
  v159 = v35;
  v160 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v99, v100, 154, v101, &v159, v93, v94, v95);
  *(_QWORD *)(a1 + 27776) = v35;
  *(_QWORD *)(a1 + 27784) = v151;
  v102 = *(JSC::B3::Value **)(a1 + 27760);
  v103 = *(_QWORD *)(a1 + 27768);
  v104 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v104 = off_1E357F5F0;
  *(_DWORD *)(v104 + 8) = -1;
  *(_WORD *)(v104 + 12) = 153;
  *(_DWORD *)(v104 + 16) = 1;
  *(_BYTE *)(v104 + 20) = 0;
  *(_QWORD *)(v104 + 24) = v103;
  *(_QWORD *)(v104 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v102, (JSC::B3::Value *)v104);
  v159 = v104;
  v105 = (char **)(v35 + 8);
  v106 = *(unsigned int *)(v35 + 20);
  if ((_DWORD)v106 == *(_DWORD *)(v35 + 16))
  {
    v148 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v105, v106 + 1, (unint64_t)&v159);
    v106 = *(unsigned int *)(v35 + 20);
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v106) = *(_QWORD *)v148;
    v107 = v159;
  }
  else
  {
    *(_QWORD *)&(*v105)[8 * v106] = v104;
    v107 = v104;
  }
  *(_DWORD *)(v35 + 20) = v106 + 1;
  *(_QWORD *)(v107 + 32) = v35;
  if ((*(_WORD *)(v42 + 12) & 0xFFF) == 0x98)
    v108 = v42;
  else
    v108 = 0;
  *(_QWORD *)(v108 + 40) = v104;
  if ((*(_WORD *)(v56 + 12) & 0xFFF) == 0x98)
    v109 = v56;
  else
    v109 = 0;
  *(_QWORD *)(v109 + 40) = v104;
  if ((*(_WORD *)(v92 + 12) & 0xFFF) == 0x98)
    v110 = v92;
  else
    v110 = 0;
  *(_QWORD *)(v110 + 40) = v104;
  v161 = *(_QWORD **)(a1 + 28224);
  v111 = *(_QWORD *)(a1 + 28168);
  v158.n128_u64[0] = v104;
  v158.n128_u64[1] = v111;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v159, (uint64_t *)(a1 + 27944), (uint64_t *)&v161, &v158).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNeitherDoubleNorHeapBigIntToNotDoubleStrictEquality(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::B3::Value *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::B3::Value **v56;
  JSC::B3::Value *v57;
  JSC::B3::Value *v58;
  JSC::B3::Value *v59;
  uint64_t v60;
  uint64_t v61;
  int8x8_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::B3::Value **v67;
  JSC::B3::Value *v68;
  uint64_t v69;
  JSC::B3::Value *v70;
  JSC::B3::Value *v71;
  char **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::B3::Value *v76;
  WTF *v77;
  uint64_t v78;
  JSC::B3::Value *v79;
  JSC::B3::Value *v80;
  JSC::B3::Value *v81;
  uint64_t v82;
  uint64_t v83;
  int8x8_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  JSC::B3::Value *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  JSC::B3::Value *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char **v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  JSC::B3::Value *v129;
  JSC::B3::Value **v130;
  JSC::B3::Value *v131;
  JSC::B3::Value *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  JSC::B3::Value *v141;
  _QWORD *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  JSC::B3::Value *v146;
  uint64_t v147;
  JSC::B3::Value *v148;
  JSC::B3::Value *v149;
  JSC::B3::Value *v150;
  uint64_t v151;
  uint64_t v152;
  int8x8_t v153;
  JSC::B3::Value **v154;
  uint64_t v155;
  JSC::B3::Value *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  JSC::B3::Value *v162;
  JSC::B3::Value *v163;
  char **v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  JSC::B3::Value **v171;
  JSC::B3::Value *v172;
  JSC::B3::Value *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  JSC::B3::Value **v178;
  uint64_t v179;
  uint64_t v180;
  JSC::B3::Value *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  JSC::B3::Value *v186;
  JSC::B3::Value *v187;
  char **v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  JSC::B3::Value *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char **v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  JSC::B3::Value *v208;
  uint64_t v209;
  uint64_t v210;
  char **v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  double result;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  char *v305;
  char *v306;
  char *v307;
  JSC::B3::Value **v308;
  JSC::B3::Value **v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  JSC::B3::Value *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  JSC::B3::Value *v322;
  __n128 v323;
  uint64_t v324;
  char v325;
  uint64_t v326[2];

  v316 = a3;
  v19 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v20 = v19;
  v21 = *(_QWORD *)(a1 + 27784);
  if (v21)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v21, v19);
  }
  else
  {
    v323.n128_u64[0] = v19;
    v219 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v219 = 0u;
    *(_OWORD *)(v219 + 16) = 0u;
    *(_QWORD *)(v219 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v219;
    v326[0] = v219;
    *(_QWORD *)(v219 + 16) = v20;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v323, v326, v220, v221, v222, v223, v224, (uint64_t)&v324);
    v225 = v326[0];
    v226 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v326[0] = a1 + 27824;
    *(_QWORD *)(v225 + 8) = v226;
    *v226 = v225;
    *(_QWORD *)(a1 + 27832) = v225;
  }
  v22 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v23 = v22;
  v24 = *(_QWORD *)(a1 + 27784);
  v319 = v20;
  if (v24)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v24, v22);
  }
  else
  {
    v323.n128_u64[0] = v22;
    v227 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v227 = 0u;
    *(_OWORD *)(v227 + 16) = 0u;
    *(_QWORD *)(v227 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v227;
    v326[0] = v227;
    *(_QWORD *)(v227 + 16) = v23;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v323, v326, v228, v229, v230, v231, v232, (uint64_t)&v324);
    v233 = v326[0];
    v234 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v326[0] = a1 + 27824;
    *(_QWORD *)(v233 + 8) = v234;
    *v234 = v233;
    *(_QWORD *)(a1 + 27832) = v233;
  }
  v25 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v26 = v25;
  v27 = *(_QWORD *)(a1 + 27784);
  if (v27)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v27, v25);
  }
  else
  {
    v323.n128_u64[0] = v25;
    v235 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v235 = 0u;
    *(_OWORD *)(v235 + 16) = 0u;
    *(_QWORD *)(v235 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v235;
    v326[0] = v235;
    *(_QWORD *)(v235 + 16) = v26;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v323, v326, v236, v237, v238, v239, v240, (uint64_t)&v324);
    v241 = v326[0];
    v242 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v326[0] = a1 + 27824;
    *(_QWORD *)(v241 + 8) = v242;
    *v242 = v241;
    *(_QWORD *)(a1 + 27832) = v241;
  }
  v28 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v29 = v28;
  v30 = *(_QWORD *)(a1 + 27784);
  v312 = v18;
  if (v30)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v30, v28);
  }
  else
  {
    v323.n128_u64[0] = v28;
    v243 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v243 = 0u;
    *(_OWORD *)(v243 + 16) = 0u;
    *(_QWORD *)(v243 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v243;
    v326[0] = v243;
    *(_QWORD *)(v243 + 16) = v29;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v323, v326, v244, v245, v246, v247, v248, (uint64_t)&v324);
    v249 = v326[0];
    v250 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v326[0] = a1 + 27824;
    *(_QWORD *)(v249 + 8) = v250;
    *v250 = v249;
    *(_QWORD *)(a1 + 27832) = v249;
  }
  v31 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v32 = v31;
  v33 = *(_QWORD *)(a1 + 27784);
  if (v33)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v33, v31);
  }
  else
  {
    v323.n128_u64[0] = v31;
    v251 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v251 = 0u;
    *(_OWORD *)(v251 + 16) = 0u;
    *(_QWORD *)(v251 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v251;
    v326[0] = v251;
    *(_QWORD *)(v251 + 16) = v32;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v323, v326, v252, v253, v254, v255, v256, (uint64_t)&v324);
    v257 = v326[0];
    v258 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v326[0] = a1 + 27824;
    *(_QWORD *)(v257 + 8) = v258;
    *v258 = v257;
    *(_QWORD *)(a1 + 27832) = v257;
  }
  v34 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v35 = *(_QWORD *)(a1 + 27784);
  v310 = v34;
  if (v35)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v35, v34);
  }
  else
  {
    v259 = v34;
    v323.n128_u64[0] = v34;
    v260 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v260 = 0u;
    *(_OWORD *)(v260 + 16) = 0u;
    *(_QWORD *)(v260 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v260;
    v326[0] = v260;
    *(_QWORD *)(v260 + 16) = v259;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v323, v326, v261, v262, v263, v264, v265, (uint64_t)&v324);
    v266 = v326[0];
    v267 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v326[0] = a1 + 27824;
    *(_QWORD *)(v266 + 8) = v267;
    *v267 = v266;
    *(_QWORD *)(a1 + 27832) = v266;
  }
  v36 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v37 = v36;
  v38 = *(_QWORD *)(a1 + 27784);
  if (v38)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v38, v36);
  }
  else
  {
    v323.n128_u64[0] = v36;
    v268 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v268 = 0u;
    *(_OWORD *)(v268 + 16) = 0u;
    *(_QWORD *)(v268 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v268;
    v326[0] = v268;
    *(_QWORD *)(v268 + 16) = v37;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v323, v326, v269, v270, v271, v272, v273, (uint64_t)&v324);
    v274 = v326[0];
    v275 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v326[0] = a1 + 27824;
    *(_QWORD *)(v274 + 8) = v275;
    *v275 = v274;
    *(_QWORD *)(a1 + 27832) = v274;
  }
  v39 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v40 = *(_QWORD *)(a1 + 27784);
  v313 = v39;
  v314 = v37;
  if (v40)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v40, v39);
  }
  else
  {
    v323.n128_u64[0] = v39;
    v276 = v39;
    v277 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v277 = 0u;
    *(_OWORD *)(v277 + 16) = 0u;
    *(_QWORD *)(v277 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v277;
    v326[0] = v277;
    *(_QWORD *)(v277 + 16) = v276;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v323, v326, v278, v279, v280, v281, v282, (uint64_t)&v324);
    v283 = v326[0];
    v284 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v326[0] = a1 + 27824;
    *(_QWORD *)(v283 + 8) = v284;
    *v284 = v283;
    *(_QWORD *)(a1 + 27832) = v283;
  }
  v41 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v42 = v41;
  v43 = *(_QWORD *)(a1 + 27784);
  v315 = v41;
  if (v43)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v43, v41);
  }
  else
  {
    v323.n128_u64[0] = v41;
    v285 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v285 = 0u;
    *(_OWORD *)(v285 + 16) = 0u;
    *(_QWORD *)(v285 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v285;
    v326[0] = v285;
    *(_QWORD *)(v285 + 16) = v42;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v323, v326, v286, v287, v288, v289, v290, (uint64_t)&v324);
    v291 = v326[0];
    v292 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v326[0] = a1 + 27824;
    *(_QWORD *)(v291 + 8) = v292;
    *v292 = v291;
    *(_QWORD *)(a1 + 27832) = v291;
  }
  v44 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v45 = v44;
  v46 = *(_QWORD *)(a1 + 27784);
  if (v46)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v46, v44);
  }
  else
  {
    v323.n128_u64[0] = v44;
    v293 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v293 = 0u;
    *(_OWORD *)(v293 + 16) = 0u;
    *(_QWORD *)(v293 + 24) = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v293;
    v326[0] = v293;
    *(_QWORD *)(v293 + 16) = v45;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v323, v326, v294, v295, v296, v297, v298, (uint64_t)&v324);
    v299 = v326[0];
    v300 = *(uint64_t **)(a1 + 27832);
    *(_QWORD *)v326[0] = a1 + 27824;
    *(_QWORD *)(v299 + 8) = v300;
    *v300 = v299;
    *(_QWORD *)(a1 + 27832) = v299;
  }
  v47 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v322, v318);
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v47, v319, v32, NAN, NAN, v48, v49, v50, v51);
  *(_QWORD *)(a1 + 27776) = v319;
  v311 = *(_QWORD *)(a1 + 27784);
  v56 = (JSC::B3::Value **)(a1 + 27640);
  *(_QWORD *)(a1 + 27784) = v23;
  if ((v321 & 0xFFFFFFFCFFFFFFFFLL) != 0)
  {
    if ((v321 & 0x300000000) != 0)
    {
LABEL_23:
      v57 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::Output *)(a1 + 27640), v322, *(JSC::B3::Value **)(a1 + 27896));
      goto LABEL_24;
    }
    v56 = (JSC::B3::Value **)(a1 + 27648);
  }
  v57 = *v56;
  if (!*v56)
    goto LABEL_23;
LABEL_24:
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v57, v29, v23, NAN, NAN, v52, v53, v54, v55);
  *(_QWORD *)(a1 + 27776) = v23;
  *(_QWORD *)(a1 + 27784) = v26;
  v58 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v322, *(JSC::B3::Value **)(a1 + 27896));
  v59 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v58);
  v67 = (JSC::B3::Value **)(a1 + 27640);
  if ((v321 & 0xFFFFD30000000008) == 0)
    goto LABEL_113;
  if ((v321 & 0x2C00FFFFFFF7) == 0)
  {
    v67 = (JSC::B3::Value **)(a1 + 27648);
LABEL_113:
    v71 = *v67;
    if (*v67)
      goto LABEL_29;
  }
  v68 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v322, *(JSC::B3::Value **)(a1 + 27904));
  v69 = *(_QWORD *)(a1 + 27776);
  v70 = *(JSC::B3::Value **)(a1 + 27760);
  v71 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v68, *(_QWORD *)(a1 + 27672));
  JSC::B3::Procedure::addValueImpl(v70, v71);
  v324 = (uint64_t)v71;
  v72 = (char **)(v69 + 8);
  v73 = *(unsigned int *)(v69 + 20);
  if ((_DWORD)v73 == *(_DWORD *)(v69 + 16))
  {
    v305 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72, v73 + 1, (unint64_t)&v324);
    v73 = *(unsigned int *)(v69 + 20);
    *(_QWORD *)(*(_QWORD *)(v69 + 8) + 8 * v73) = *(_QWORD *)v305;
    v74 = v324;
  }
  else
  {
    *(_QWORD *)&(*v72)[8 * v73] = v71;
    v74 = (uint64_t)v71;
  }
  *(_DWORD *)(v69 + 20) = v73 + 1;
  *(_QWORD *)(v74 + 32) = v69;
LABEL_29:
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v71, v26, v29, NAN, NAN, v63, v64, v65, v66);
  *(_QWORD *)(a1 + 27776) = v26;
  *(_QWORD *)(a1 + 27784) = v29;
  v320 = a1 + 3136;
  v75 = *(_QWORD *)(a1 + 3160);
  if (v75)
  {
    v76 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v75);
    v77 = v322;
    v78 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v322, v76);
  }
  else
  {
    v77 = v322;
    v78 = (uint64_t)v322;
  }
  v79 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), v320, v78);
  v80 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 3);
  v81 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v79, v80);
  v85 = *(_QWORD *)(a1 + 27776);
  v86 = *(_QWORD *)(a1 + 27760);
  v87 = *(_QWORD *)(a1 + 27768);
  v324 = v29;
  v325 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v85, v86, 154, v87, &v324, v88, v89, v90);
  *(_QWORD *)(a1 + 27776) = v29;
  *(_QWORD *)(a1 + 27784) = v32;
  v91 = *(_QWORD *)(a1 + 27640);
  v92 = *(JSC::B3::Value **)(a1 + 27760);
  v93 = *(_QWORD *)(a1 + 27768);
  v94 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v94 + 8) = -1;
  *(_WORD *)(v94 + 12) = 152;
  *(_BYTE *)(v94 + 20) = 1;
  *(_QWORD *)v94 = &unk_1E357EDA0;
  *(_DWORD *)(v94 + 16) = 0;
  *(_QWORD *)(v94 + 40) = 0;
  *(_QWORD *)(v94 + 48) = v91;
  *(_QWORD *)(v94 + 24) = v93;
  *(_QWORD *)(v94 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v92, (JSC::B3::Value *)v94);
  v324 = v94;
  v98 = (char **)(v29 + 8);
  v99 = *(unsigned int *)(v29 + 20);
  if ((_DWORD)v99 == *(_DWORD *)(v29 + 16))
  {
    v301 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v98, v99 + 1, (unint64_t)&v324);
    v99 = *(unsigned int *)(v29 + 20);
    *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v99) = *(_QWORD *)v301;
    v100 = v324;
  }
  else
  {
    *(_QWORD *)&(*v98)[8 * v99] = v94;
    v100 = v94;
  }
  *(_DWORD *)(v29 + 20) = v99 + 1;
  *(_QWORD *)(v100 + 32) = v29;
  v101 = *(_QWORD *)(a1 + 27776);
  v102 = *(_QWORD *)(a1 + 27760);
  v103 = *(_QWORD *)(a1 + 27768);
  v324 = v45;
  v325 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v101, v102, 154, v103, &v324, v95, v96, v97);
  *(_QWORD *)(a1 + 27776) = v32;
  *(_QWORD *)(a1 + 27784) = v310;
  v317 = a2;
  v116 = *(_QWORD *)(a1 + 27648);
  v117 = *(_QWORD *)(a1 + 27776);
  v118 = *(JSC::B3::Value **)(a1 + 27760);
  v119 = *(_QWORD *)(a1 + 27768);
  v120 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v120 + 8) = -1;
  *(_WORD *)(v120 + 12) = 152;
  *(_DWORD *)(v120 + 16) = 0;
  *(_BYTE *)(v120 + 20) = 1;
  *(_QWORD *)v120 = &unk_1E357EDA0;
  *(_QWORD *)(v120 + 40) = 0;
  *(_QWORD *)(v120 + 48) = v116;
  *(_QWORD *)(v120 + 24) = v119;
  *(_QWORD *)(v120 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v118, (JSC::B3::Value *)v120);
  v324 = v120;
  v125 = (char **)(v117 + 8);
  v126 = *(unsigned int *)(v117 + 20);
  if ((_DWORD)v126 == *(_DWORD *)(v117 + 16))
  {
    v302 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v125, v126 + 1, (unint64_t)&v324);
    v126 = *(unsigned int *)(v117 + 20);
    *(_QWORD *)(*(_QWORD *)(v117 + 8) + 8 * v126) = *(_QWORD *)v302;
    v127 = v324;
  }
  else
  {
    *(_QWORD *)&(*v125)[8 * v126] = v120;
    v127 = v120;
  }
  v128 = v317;
  v129 = v322;
  *(_DWORD *)(v117 + 20) = v126 + 1;
  *(_QWORD *)(v127 + 32) = v117;
  v130 = (JSC::B3::Value **)(a1 + 27640);
  if ((v321 & 0x2C00FFFFFFF7) != 0 && (v130 = (JSC::B3::Value **)(a1 + 27648), (v321 & 0xFFFFD30F00000008) != 0)
    || (v132 = *v130) == 0)
  {
    v131 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v322, *(JSC::B3::Value **)(a1 + 27904));
    v132 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v131);
  }
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v132, v45, v310, NAN, NAN, v121, v122, v123, v124);
  *(_QWORD *)(a1 + 27776) = v310;
  *(_QWORD *)(a1 + 27784) = v314;
  v139 = *(_QWORD *)(a1 + 28152);
  v140 = *(_QWORD *)(v139 + 8);
  v141 = v318;
  if ((v317 & 1) != 0)
    v142 = (_QWORD *)(v140 + 24);
  else
    v142 = (_QWORD *)(v140 + 8);
  v143 = *v142 + 32 * *(unsigned int *)((v317 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v144 = (void *)*(unsigned int *)(v139 + 88);
  if ((_DWORD)v144 != *(_DWORD *)(v143 + 20))
  {
    if ((*(_QWORD *)(v143 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v143, v144, v133, v134, v135, v136, v137, v138);
    else
      *(_DWORD *)(v143 + 20) = (_DWORD)v144;
  }
  if ((*(_BYTE *)(v143 + 13) & 8) != 0)
  {
    v145 = *(_QWORD *)(a1 + 3160);
    if (v145)
    {
      v146 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v145);
      v147 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v322, v146);
    }
    else
    {
      v147 = (uint64_t)v322;
    }
    v148 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), v320, v147);
    v149 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 3);
    v150 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v148, v149);
  }
  v154 = (JSC::B3::Value **)(a1 + 27640);
  if ((v321 & 0x30000000) != 0 && (v154 = (JSC::B3::Value **)(a1 + 27648), (v321 & 0x2000CFFFFFF7) != 0)
    || (v163 = *v154) == 0)
  {
    v155 = *(_QWORD *)(a1 + 3160);
    if (v155)
    {
      v156 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v155);
      v157 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v322, v156);
    }
    else
    {
      v157 = (uint64_t)v322;
    }
    v158 = JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), v320, v157);
    v159 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 2);
    v160 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v158 + 312))(v158, v159);
    if (v160 == 2)
    {
      v161 = *(_QWORD *)(a1 + 27776);
      v162 = *(JSC::B3::Value **)(a1 + 27760);
      v163 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), v158, v159);
      JSC::B3::Procedure::addValueImpl(v162, v163);
      v324 = (uint64_t)v163;
      v164 = (char **)(v161 + 8);
      v165 = *(unsigned int *)(v161 + 20);
      if ((_DWORD)v165 == *(_DWORD *)(v161 + 16))
      {
        v306 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v164, v165 + 1, (unint64_t)&v324);
        v165 = *(unsigned int *)(v161 + 20);
        *(_QWORD *)(*(_QWORD *)(v161 + 8) + 8 * v165) = *(_QWORD *)v306;
        v166 = v324;
      }
      else
      {
        *(_QWORD *)&(*v164)[8 * v165] = v163;
        v166 = (uint64_t)v163;
      }
      v128 = v317;
      v141 = v318;
      *(_DWORD *)(v161 + 20) = v165 + 1;
      *(_QWORD *)(v166 + 32) = v161;
      v129 = v322;
    }
    else
    {
      v141 = v318;
      v308 = (JSC::B3::Value **)(a1 + 27648);
      if (v160 == 1)
        v308 = (JSC::B3::Value **)(a1 + 27640);
      v163 = *v308;
      v128 = v317;
    }
  }
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v163, v45, v314, NAN, NAN, v135, v136, v137, v138);
  *(_QWORD *)(a1 + 27776) = v314;
  *(_QWORD *)(a1 + 27784) = v313;
  v171 = (JSC::B3::Value **)(a1 + 27640);
  if ((v312 & 0x2C00FFFFFFF7) != 0 && (v171 = (JSC::B3::Value **)(a1 + 27648), (v312 & 0xFFFFD30F00000008) != 0)
    || (v173 = *v171) == 0)
  {
    v172 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v141, *(JSC::B3::Value **)(a1 + 27904));
    v173 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v172);
  }
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v173, v45, v313, NAN, NAN, v167, v168, v169, v170);
  *(_QWORD *)(a1 + 27776) = v313;
  *(_QWORD *)(a1 + 27784) = v315;
  v178 = (JSC::B3::Value **)(a1 + 27640);
  if ((v312 & 0x30000000) != 0 && (v178 = (JSC::B3::Value **)(a1 + 27648), (v312 & 0x2800CFFFFFF7) != 0)
    || (v187 = *v178) == 0)
  {
    v179 = *(_QWORD *)(a1 + 3160);
    v180 = (uint64_t)v141;
    if (v179)
    {
      v181 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v179);
      v180 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v141, v181);
    }
    v182 = JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), v320, v180);
    v183 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 2);
    v184 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v182 + 312))(v182, v183);
    if (v184 == 2)
    {
      v185 = *(_QWORD *)(a1 + 27776);
      v186 = *(JSC::B3::Value **)(a1 + 27760);
      v187 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), v182, v183);
      JSC::B3::Procedure::addValueImpl(v186, v187);
      v324 = (uint64_t)v187;
      v188 = (char **)(v185 + 8);
      v189 = *(unsigned int *)(v185 + 20);
      if ((_DWORD)v189 == *(_DWORD *)(v185 + 16))
      {
        v307 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v188, v189 + 1, (unint64_t)&v324);
        v189 = *(unsigned int *)(v185 + 20);
        *(_QWORD *)(*(_QWORD *)(v185 + 8) + 8 * v189) = *(_QWORD *)v307;
        v190 = v324;
      }
      else
      {
        *(_QWORD *)&(*v188)[8 * v189] = v187;
        v190 = (uint64_t)v187;
      }
      v128 = v317;
      v129 = v322;
      *(_DWORD *)(v185 + 20) = v189 + 1;
      *(_QWORD *)(v190 + 32) = v185;
    }
    else
    {
      v309 = (JSC::B3::Value **)(a1 + 27648);
      if (v184 == 1)
        v309 = (JSC::B3::Value **)(a1 + 27640);
      v187 = *v309;
      v129 = v322;
    }
  }
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v187, v45, v315, NAN, NAN, v174, v175, v176, v177);
  *(_QWORD *)(a1 + 27776) = v315;
  *(_QWORD *)(a1 + 27784) = v45;
  v195 = *(_QWORD *)(a1 + 27776);
  v196 = *(JSC::B3::Value **)(a1 + 27760);
  v197 = *(_QWORD *)(a1 + 27768);
  v198 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v198 + 8) = -1;
  *(_WORD *)(v198 + 12) = 152;
  *(_DWORD *)(v198 + 16) = 0;
  *(_BYTE *)(v198 + 20) = 1;
  *(_QWORD *)v198 = &unk_1E357EDA0;
  *(_QWORD *)(v198 + 40) = 0;
  *(_QWORD *)(v198 + 48) = v194;
  *(_QWORD *)(v198 + 24) = v197;
  *(_QWORD *)(v198 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v196, (JSC::B3::Value *)v198);
  v324 = v198;
  v202 = (char **)(v195 + 8);
  v203 = *(unsigned int *)(v195 + 20);
  if ((_DWORD)v203 == *(_DWORD *)(v195 + 16))
  {
    v303 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v202, v203 + 1, (unint64_t)&v324);
    v203 = *(unsigned int *)(v195 + 20);
    *(_QWORD *)(*(_QWORD *)(v195 + 8) + 8 * v203) = *(_QWORD *)v303;
    v204 = v324;
  }
  else
  {
    *(_QWORD *)&(*v202)[8 * v203] = v198;
    v204 = v198;
  }
  *(_DWORD *)(v195 + 20) = v203 + 1;
  *(_QWORD *)(v204 + 32) = v195;
  v205 = *(_QWORD *)(a1 + 27776);
  v206 = *(_QWORD *)(a1 + 27760);
  v207 = *(_QWORD *)(a1 + 27768);
  v324 = v45;
  v325 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v205, v206, 154, v207, &v324, v199, v200, v201);
  *(_QWORD *)(a1 + 27776) = v45;
  *(_QWORD *)(a1 + 27784) = v311;
  v208 = *(JSC::B3::Value **)(a1 + 27760);
  v209 = *(_QWORD *)(a1 + 27768);
  v210 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v210 = off_1E357F5F0;
  *(_DWORD *)(v210 + 8) = -1;
  *(_WORD *)(v210 + 12) = 153;
  *(_DWORD *)(v210 + 16) = 1;
  *(_BYTE *)(v210 + 20) = 0;
  *(_QWORD *)(v210 + 24) = v209;
  *(_QWORD *)(v210 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v208, (JSC::B3::Value *)v210);
  v324 = v210;
  v211 = (char **)(v45 + 8);
  v212 = *(unsigned int *)(v45 + 20);
  if ((_DWORD)v212 == *(_DWORD *)(v45 + 16))
  {
    v304 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v211, v212 + 1, (unint64_t)&v324);
    v212 = *(unsigned int *)(v45 + 20);
    *(_QWORD *)(*(_QWORD *)(v45 + 8) + 8 * v212) = *(_QWORD *)v304;
    v213 = v324;
  }
  else
  {
    *(_QWORD *)&(*v211)[8 * v212] = v210;
    v213 = v210;
  }
  *(_DWORD *)(v45 + 20) = v212 + 1;
  *(_QWORD *)(v213 + 32) = v45;
  if ((*(_WORD *)(v94 + 12) & 0xFFF) == 0x98)
    v214 = v94;
  else
    v214 = 0;
  *(_QWORD *)(v214 + 40) = v210;
  if ((*(_WORD *)(v120 + 12) & 0xFFF) == 0x98)
    v215 = v120;
  else
    v215 = 0;
  *(_QWORD *)(v215 + 40) = v210;
  if ((*(_WORD *)(v198 + 12) & 0xFFF) == 0x98)
    v216 = v198;
  else
    v216 = 0;
  *(_QWORD *)(v216 + 40) = v210;
  v326[0] = *(_QWORD *)(a1 + 28224);
  v217 = *(_QWORD *)(a1 + 28168);
  v323.n128_u64[0] = v210;
  v323.n128_u64[1] = v217;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v324, (uint64_t *)(a1 + 27944), v326, &v323).n128_u64[0];
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v15 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v13, v14, *a3, *a4, *a5);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::genericJSValueCompare<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCompareLess(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#1}>(uint64_t a1, uint64_t a2)
{
  JSC::B3::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::BasicBlock *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::B3::Value *v63;
  JSC::B3::Value *v64;
  JSC::B3::Value *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  JSC::B3::Value *v84;
  JSC::B3::Value *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  JSC::B3::Value *v95;
  JSC::JSCell *v97;
  uint64_t v98;
  JSC::B3::Value *v99;
  JSC::B3::Value *v100;
  uint64_t v101;

  v4 = *(JSC::B3::Value **)a1;
  JSC::CodeOrigin::CodeOrigin(&v101, (const JSC::CodeOrigin *)(a1 + 28192));
  v97 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor((uint64_t)v4, &v101, v5, v6, v7, v8, v9, v10);
  if ((v101 & 1) != 0 && (v101 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v101 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  v100 = v18;
  v99 = v19;
  v34 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v35 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v36 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v37 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v45, v36, v34, 0.0, 1.0, v46, v47, v48, v49);
  *(_QWORD *)(a1 + 27776) = v34;
  v50 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v35;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v58, v36, v35, 0.0, 1.0, v59, v60, v61, v62);
  *(_QWORD *)(a1 + 27776) = v35;
  *(_QWORD *)(a1 + 27784) = v36;
  v63 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 27640), v18);
  v64 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 27640), v19);
  v65 = JSC::FTL::Output::lessThan((JSC::FTL::Output *)(*(_QWORD *)a2 + 27640), v63, v64);
  v66 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v65);
  v68 = v67;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v37, v69, v70, v71, v72, v73, v74);
  *(_QWORD *)(a1 + 27776) = v36;
  *(_QWORD *)(a1 + 27784) = v37;
  v85 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v84);
  v86 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v85);
  v88 = v87;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v37, v89, v90, v91, v92, v93, v94);
  *(_QWORD *)(a1 + 27776) = v37;
  *(_QWORD *)(a1 + 27784) = v50;
  v95 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)(a1 + 27640), 1, v66, v68, v86, v88);
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, int a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v9;
  __int128 v11;
  uint64_t v12;

  v11 = *a5;
  v12 = *((_QWORD *)a5 + 2);
  v9 = JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(a2, a3, a4, (uint64_t)&v11, a6, a7, a8);
  JSC::B3::BasicBlock::append(a1, v9);
  return v9;
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(JSC::B3::Value *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  JSC::B3::Value *v8;
  __int128 v10;
  uint64_t v11;

  v10 = *(_OWORD *)a4;
  v11 = *(_QWORD *)(a4 + 16);
  v8 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(a2, a3, &v10, a5, a6, a7);
  JSC::B3::Procedure::addValueImpl(a1, v8);
  return v8;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(int a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = WTF::fastMalloc((WTF *)0x68);
  return JSC::B3::CCallValue::CCallValue<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(v12, a1, a2, a3, a4, a5, a6);
}

uint64_t JSC::B3::CCallValue::CCallValue<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, int a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v12;
  __int128 v13;
  uint64_t result;

  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 82;
  *(_DWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v12 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)a1);
  v12[2] = a5;
  *v12 = v12 + 2;
  v12[3] = a6;
  v12[4] = a7;
  v12[1] = 0x300000003;
  *(_QWORD *)a1 = &unk_1E357CF78;
  v13 = *a4;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 40) = v13;
  if (*(_DWORD *)(a1 + 76))
    return a1;
  result = 68;
  __break(0xC471u);
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::genericJSValueCompare<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCompareLessEq(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#1}>(uint64_t a1, uint64_t a2)
{
  JSC::B3::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::BasicBlock *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::B3::Value *v63;
  JSC::B3::Value *v64;
  JSC::B3::Value *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  JSC::B3::Value *v84;
  JSC::B3::Value *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  JSC::B3::Value *v95;
  JSC::JSCell *v97;
  uint64_t v98;
  JSC::B3::Value *v99;
  JSC::B3::Value *v100;
  uint64_t v101;

  v4 = *(JSC::B3::Value **)a1;
  JSC::CodeOrigin::CodeOrigin(&v101, (const JSC::CodeOrigin *)(a1 + 28192));
  v97 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor((uint64_t)v4, &v101, v5, v6, v7, v8, v9, v10);
  if ((v101 & 1) != 0 && (v101 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v101 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  v100 = v18;
  v99 = v19;
  v34 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v35 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v36 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v37 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v45, v36, v34, 0.0, 1.0, v46, v47, v48, v49);
  *(_QWORD *)(a1 + 27776) = v34;
  v50 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v35;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v58, v36, v35, 0.0, 1.0, v59, v60, v61, v62);
  *(_QWORD *)(a1 + 27776) = v35;
  *(_QWORD *)(a1 + 27784) = v36;
  v63 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 27640), v18);
  v64 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 27640), v19);
  v65 = JSC::FTL::Output::lessThanOrEqual((JSC::FTL::Output *)(*(_QWORD *)a2 + 27640), v63, v64);
  v66 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v65);
  v68 = v67;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v37, v69, v70, v71, v72, v73, v74);
  *(_QWORD *)(a1 + 27776) = v36;
  *(_QWORD *)(a1 + 27784) = v37;
  v85 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v84);
  v86 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v85);
  v88 = v87;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v37, v89, v90, v91, v92, v93, v94);
  *(_QWORD *)(a1 + 27776) = v37;
  *(_QWORD *)(a1 + 27784) = v50;
  v95 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)(a1 + 27640), 1, v66, v68, v86, v88);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::genericJSValueCompare<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCompareGreater(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#1}>(uint64_t a1, uint64_t a2)
{
  JSC::B3::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::BasicBlock *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::B3::Value *v63;
  JSC::B3::Value *v64;
  JSC::B3::Value *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  JSC::B3::Value *v84;
  JSC::B3::Value *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  JSC::B3::Value *v95;
  JSC::JSCell *v97;
  uint64_t v98;
  JSC::B3::Value *v99;
  JSC::B3::Value *v100;
  uint64_t v101;

  v4 = *(JSC::B3::Value **)a1;
  JSC::CodeOrigin::CodeOrigin(&v101, (const JSC::CodeOrigin *)(a1 + 28192));
  v97 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor((uint64_t)v4, &v101, v5, v6, v7, v8, v9, v10);
  if ((v101 & 1) != 0 && (v101 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v101 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  v100 = v18;
  v99 = v19;
  v34 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v35 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v36 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v37 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v45, v36, v34, 0.0, 1.0, v46, v47, v48, v49);
  *(_QWORD *)(a1 + 27776) = v34;
  v50 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v35;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v58, v36, v35, 0.0, 1.0, v59, v60, v61, v62);
  *(_QWORD *)(a1 + 27776) = v35;
  *(_QWORD *)(a1 + 27784) = v36;
  v63 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 27640), v18);
  v64 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 27640), v19);
  v65 = JSC::FTL::Output::greaterThan((JSC::FTL::Output *)(*(_QWORD *)a2 + 27640), v63, v64);
  v66 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v65);
  v68 = v67;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v37, v69, v70, v71, v72, v73, v74);
  *(_QWORD *)(a1 + 27776) = v36;
  *(_QWORD *)(a1 + 27784) = v37;
  v85 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v84);
  v86 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v85);
  v88 = v87;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v37, v89, v90, v91, v92, v93, v94);
  *(_QWORD *)(a1 + 27776) = v37;
  *(_QWORD *)(a1 + 27784) = v50;
  v95 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)(a1 + 27640), 1, v66, v68, v86, v88);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::genericJSValueCompare<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCompareGreaterEq(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#1}>(uint64_t a1, uint64_t a2)
{
  JSC::B3::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::BasicBlock *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::B3::Value *v63;
  JSC::B3::Value *v64;
  JSC::B3::Value *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  JSC::B3::Value *v84;
  JSC::B3::Value *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  JSC::B3::Value *v95;
  JSC::JSCell *v97;
  uint64_t v98;
  JSC::B3::Value *v99;
  JSC::B3::Value *v100;
  uint64_t v101;

  v4 = *(JSC::B3::Value **)a1;
  JSC::CodeOrigin::CodeOrigin(&v101, (const JSC::CodeOrigin *)(a1 + 28192));
  v97 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor((uint64_t)v4, &v101, v5, v6, v7, v8, v9, v10);
  if ((v101 & 1) != 0 && (v101 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v101 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  v100 = v18;
  v99 = v19;
  v34 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v35 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v36 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v37 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v45, v36, v34, 0.0, 1.0, v46, v47, v48, v49);
  *(_QWORD *)(a1 + 27776) = v34;
  v50 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v35;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v58, v36, v35, 0.0, 1.0, v59, v60, v61, v62);
  *(_QWORD *)(a1 + 27776) = v35;
  *(_QWORD *)(a1 + 27784) = v36;
  v63 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 27640), v18);
  v64 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 27640), v19);
  v65 = JSC::FTL::Output::greaterThanOrEqual((JSC::FTL::Output *)(*(_QWORD *)a2 + 27640), v63, v64);
  v66 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v65);
  v68 = v67;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v37, v69, v70, v71, v72, v73, v74);
  *(_QWORD *)(a1 + 27776) = v36;
  *(_QWORD *)(a1 + 27784) = v37;
  v85 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v84);
  v86 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v85);
  v88 = v87;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v37, v89, v90, v91, v92, v93, v94);
  *(_QWORD *)(a1 + 27776) = v37;
  *(_QWORD *)(a1 + 27784) = v50;
  v95 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)(a1 + 27640), 1, v66, v68, v86, v88);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileSameValue(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  char *v16;
  int v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;

  if (!*(_DWORD *)(a3 + 36))
    goto LABEL_20;
  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x197DD567CLL);
  }
  v10 = **(unsigned __int8 **)(a3 + 24);
  v11 = (*(_BYTE *)(*(_QWORD *)(a3 + 8) + 16) & 0x7F) - 32;
  v12 = (JSC::AssemblerBuffer *)(a2 + 14);
  v13 = a2[50];
  if (v13 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v13 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v13) = v10 & 0x1F | (32 * v11) | 0x9E660000;
  v14 = a2[50];
  v15 = v14 + 4;
  a2[50] = v14 + 4;
  if (*(_DWORD *)(a3 + 20) <= 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x197DD5684);
  }
  v16 = *(char **)(a3 + 8);
  v17 = (v16[32] & 0x7F) - 32;
  v18 = *v16;
  if ((v14 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v15 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v15) = v18 & 0x1F | (32 * v17) | 0x9E660000;
  v19 = a2[50];
  v20 = v19 + 4;
  a2[50] = v19 + 4;
  if (!*(_DWORD *)(a3 + 20))
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x197DD5674);
  }
  v21 = **(_BYTE **)(a3 + 8) & 0x1F;
  v22 = v21 << 16;
  if (v10 == 31)
  {
    v23 = -350198785;
  }
  else
  {
    v22 |= 32 * (v10 & 0x1F);
    v23 = -352321505;
  }
  v24 = v22 | v23;
  if ((v19 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v20 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v20) = v24;
  v25 = a2[50];
  v26 = v25 + 4;
  a2[50] = v25 + 4;
  if ((v25 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v26 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v26) = v21 | 0x1A9F17E0;
  a2[50] += 4;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::BOOLify(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v11;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::B3::Value **v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  JSC::B3::Value *v48;
  JSC::B3::Value *v49;
  char **v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  JSC::B3::Value *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int8x8_t v72;
  uint64_t v73;
  JSC::B3::Value *v74;
  JSC::B3::Value *v75;
  char **v76;
  uint64_t v77;
  JSC::B3::Value *v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  JSC::B3::Value *v83;
  JSC::B3::Value *v84;
  char **v85;
  uint64_t v86;
  JSC::B3::Value *v87;
  uint64_t v88;
  uint64_t v89;
  JSC::B3::Value *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char **v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  void *v112;
  JSC::B3::Value *v113;
  JSC::B3::Value *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int8x8_t v119;
  uint64_t v120;
  JSC::B3::Value *v121;
  JSC::B3::Value *v122;
  char **v123;
  uint64_t v124;
  JSC::B3::Value *v125;
  uint64_t v126;
  uint64_t v127;
  JSC::B3::Value *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char **v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  JSC::B3::Value *v140;
  uint64_t v141;
  char **v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  JSC::B3::Value **v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  JSC::B3::Value **v204;
  JSC::B3::Value *v205;
  uint64_t v206;
  JSC::B3::Value *v207;
  JSC::B3::Value *v208;
  char **v209;
  uint64_t v210;
  JSC::B3::Value *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  JSC::B3::Value **v224;
  uint64_t v225;
  uint64_t v226;
  JSC::B3::Value *v227;
  JSC::B3::Value *v228;
  JSC::B3::Value *v229;
  JSC::B3::Value *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  JSC::B3::Value **v242;
  uint64_t v243;
  uint64_t v244;
  JSC::B3::Value *v245;
  JSC::B3::Value *v246;
  JSC::B3::Value *v247;
  JSC::B3::Value *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  JSC::B3::Value *v259;
  JSC::B3::Value *v260;
  char **v261;
  uint64_t v262;
  JSC::B3::Value *v263;
  uint64_t v264;
  JSC::B3::Value *v265;
  uint64_t v266;
  uint64_t v267;
  char **v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _OWORD *v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  JSC::B3::Value *v284;
  JSC::B3::Value *v285;
  JSC::B3::Value *v286;
  uint64_t v287;
  JSC::B3::Value *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char **v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  JSC::B3::Value *v308;
  uint64_t v309;
  JSC::B3::Value *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char **v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  JSC::B3::Value **v337;
  JSC::B3::Value *v338;
  JSC::B3::Value *v339;
  JSC::B3::Value *v340;
  uint64_t v341;
  JSC::B3::Value *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char **v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  JSC::B3::Value **v367;
  JSC::B3::Value *v368;
  JSC::B3::Value *v369;
  uint64_t v370;
  JSC::B3::Value *v371;
  uint64_t v372;
  JSC::B3::Value *v373;
  uint64_t v374;
  uint64_t v375;
  char **v376;
  uint64_t v377;
  uint64_t v378;
  JSC::B3::Value *v379;
  uint64_t v380;
  JSC::B3::Value *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  char **v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  JSC::B3::Value *v396;
  JSC::B3::Value *v397;
  uint64_t v398;
  JSC::B3::Value *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  char **v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  JSC::B3::Value *v413;
  uint64_t v414;
  void *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char **v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t **v433;
  _QWORD *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t **v440;
  _QWORD *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t **v448;
  JSC::B3::Value *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  JSC::B3::Value *v456;
  JSC::B3::Value *v457;
  char *v458;
  char *v459;
  char *v460;
  char *v461;
  char *v462;
  char *v463;
  _QWORD *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t **v470;
  _QWORD *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t **v477;
  _QWORD *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t **v484;
  _QWORD *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t **v491;
  _QWORD *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t **v498;
  _QWORD *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t **v505;
  _QWORD *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t **v512;
  _QWORD *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t **v519;
  _QWORD *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t **v526;
  _QWORD *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t **v533;
  _QWORD *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t *v540;
  uint64_t **v541;
  char *v542;
  char *v543;
  char *v544;
  char *v545;
  char *v546;
  char *v547;
  char *v548;
  char *v549;
  char *v550;
  char *v551;
  char *v552;
  char *v553;
  _OWORD *v554;
  _OWORD *v555;
  _OWORD *v556;
  _OWORD *v557;
  _OWORD *v558;
  uint64_t v559;
  uint64_t v560;
  JSC::B3::Value *v561;
  JSC::B3::Value *v562;
  JSC::B3::Value *v563;
  JSC::B3::Value *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  JSC::JSCell *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  JSC::B3::Value *v583;
  JSC::B3::Value *Structure;
  JSC::B3::Value *Ptr;
  void *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  JSC::B3::Value *v605;
  JSC::B3::Value *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  __int128 v612;
  uint64_t *v613;

  v11 = (a2 >> 50) & 0x3F;
  if ((v11 - 6) < 2)
  if (((a2 >> 50) & 0x3F) > 0x14)
  {
    if ((_DWORD)v11 != 22)
    {
      if ((_DWORD)v11 == 49)
      {
        return JSC::FTL::Output::doubleNotEqualAndOrdered((JSC::FTL::Output *)(a1 + 27640), v13, *(JSC::B3::Value **)(a1 + 27720));
      }
      if ((_DWORD)v11 == 21)
      {
        return JSC::FTL::Output::notEqual((JSC::FTL::Output *)(a1 + 27640), v449, v456);
      }
LABEL_227:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4C4D, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::BOOLify(Edge)", "Bad use kind");
      __break(0xC471u);
      JUMPOUT(0x197DD767CLL);
    }
    v23 = JSC::B3::Procedure::addBlock(v22, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v24 = (uint64_t)v23;
    v25 = *(_QWORD *)(a1 + 27784);
    if (v25)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v25, (uint64_t)v23);
    }
    else
    {
      v610 = v23;
      v427 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v427 = 0u;
      *((_OWORD *)v427 + 1) = 0u;
      v427[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v427;
      v613 = v427;
      v427[2] = v24;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v428, v429, v430, v431, v432, (uint64_t)&v612);
      v26 = v613;
      v433 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v26[1] = (uint64_t)v433;
      *v433 = v26;
      *(_QWORD *)(a1 + 27832) = v26;
    }
    v27 = JSC::B3::Procedure::addBlock(v26, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v28 = (uint64_t)v27;
    v29 = *(_QWORD *)(a1 + 27784);
    if (v29)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v29, (uint64_t)v27);
    }
    else
    {
      v610 = v27;
      v434 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v434 = 0u;
      *((_OWORD *)v434 + 1) = 0u;
      v434[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v434;
      v613 = v434;
      v434[2] = v28;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v435, v436, v437, v438, v439, (uint64_t)&v612);
      v30 = v613;
      v440 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v30[1] = (uint64_t)v440;
      *v440 = v30;
      *(_QWORD *)(a1 + 27832) = v30;
    }
    v31 = JSC::B3::Procedure::addBlock(v30, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v32 = v31;
    v33 = *(_QWORD *)(a1 + 27784);
    if (v33)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v33, (uint64_t)v31);
    }
    else
    {
      v610 = v31;
      v441 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v441 = 0u;
      *((_OWORD *)v441 + 1) = 0u;
      v441[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v441;
      v613 = v441;
      v441[2] = v32;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v442, v443, v444, v445, v446, (uint64_t)&v612);
      v447 = v613;
      v448 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v447[1] = (uint64_t)v448;
      *v448 = v447;
      *(_QWORD *)(a1 + 27832) = v447;
    }
    v45 = (JSC::B3::Value **)(a1 + 27640);
    if ((v40 & 0xFFFFD3FF00000008) != 0)
    {
      if ((v40 & 0x2C00FFFFFFF7) != 0)
        goto LABEL_19;
      v45 = (JSC::B3::Value **)(a1 + 27648);
    }
    v49 = *v45;
    if (*v45)
    {
LABEL_22:
      JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v49, v24, v28, NAN, NAN, v41, v42, v43, v44);
      *(_QWORD *)(a1 + 27776) = v24;
      v607 = *(_QWORD *)(a1 + 27784);
      *(_QWORD *)(a1 + 27784) = v28;
      v59 = *(_QWORD *)(a1 + 28152);
      v60 = *(_QWORD *)(v59 + 8);
      if ((a2 & 1) != 0)
        v61 = (_QWORD *)(v60 + 24);
      else
        v61 = (_QWORD *)(v60 + 8);
      v62 = *v61 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v63 = (void *)*(unsigned int *)(v59 + 88);
      if ((_DWORD)v63 != *(_DWORD *)(v62 + 20))
      {
        if ((*(_QWORD *)(v62 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v62, v63, v53, v54, v55, v56, v57, v58);
        else
          *(_DWORD *)(v62 + 20) = (_DWORD)v63;
      }
      if ((*(_QWORD *)(v62 + 8) & 0x2C00CFFFFFF7) != 0)
      {
        v64 = *(_QWORD *)(a1 + 3160);
        if (v64)
        {
          v65 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v64);
          v66 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v21, v65);
        }
        else
        {
          v66 = (uint64_t)v21;
        }
        v67 = JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), a1 + 3136, v66);
        v68 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 2);
        v69 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 312))(v67, v68);
        if (v69 == 2)
        {
          v73 = *(_QWORD *)(a1 + 27776);
          v74 = *(JSC::B3::Value **)(a1 + 27760);
          v75 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), v67, v68);
          JSC::B3::Procedure::addValueImpl(v74, v75);
          *(_QWORD *)&v612 = v75;
          v76 = (char **)(v73 + 8);
          v77 = *(unsigned int *)(v73 + 20);
          if ((_DWORD)v77 == *(_DWORD *)(v73 + 16))
          {
            v542 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v76, v77 + 1, (unint64_t)&v612);
            v77 = *(unsigned int *)(v73 + 20);
            *(_QWORD *)(*(_QWORD *)(v73 + 8) + 8 * v77) = *(_QWORD *)v542;
            v78 = (JSC::B3::Value *)v612;
          }
          else
          {
            *(_QWORD *)&(*v76)[8 * v77] = v75;
            v78 = v75;
          }
          *(_DWORD *)(v73 + 20) = v77 + 1;
          *((_QWORD *)v78 + 4) = v73;
        }
        else
        {
          v594 = 27648;
          if (v69 == 1)
            v594 = 27640;
          v75 = *(JSC::B3::Value **)(a1 + v594);
        }
      }
      v79 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 41968);
      JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 280), v79, v53, v54, v55, v56, v57, v58);
      v80 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v79);
      v81 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)v21 + 312))(v21, v80);
      v605 = v21;
      if (v81 == 2)
      {
        v82 = *(_QWORD *)(a1 + 27776);
        v83 = *(JSC::B3::Value **)(a1 + 27760);
        v84 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), (uint64_t)v21, v80);
        JSC::B3::Procedure::addValueImpl(v83, v84);
        *(_QWORD *)&v612 = v84;
        v85 = (char **)(v82 + 8);
        v86 = *(unsigned int *)(v82 + 20);
        if ((_DWORD)v86 == *(_DWORD *)(v82 + 16))
        {
          v461 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, v86 + 1, (unint64_t)&v612);
          v86 = *(unsigned int *)(v82 + 20);
          *(_QWORD *)(*(_QWORD *)(v82 + 8) + 8 * v86) = *(_QWORD *)v461;
          v87 = (JSC::B3::Value *)v612;
        }
        else
        {
          *(_QWORD *)&(*v85)[8 * v86] = v84;
          v87 = v84;
        }
        v88 = v28;
        *(_DWORD *)(v82 + 20) = v86 + 1;
        *((_QWORD *)v87 + 4) = v82;
      }
      else
      {
        v88 = v28;
        v593 = 27648;
        if (v81 == 1)
          v593 = 27640;
        v84 = *(JSC::B3::Value **)(a1 + v593);
      }
      v89 = *(_QWORD *)(a1 + 27776);
      v90 = *(JSC::B3::Value **)(a1 + 27760);
      v91 = *(_QWORD *)(a1 + 27768);
      v92 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v92 + 8) = -1;
      *(_WORD *)(v92 + 12) = 152;
      *(_BYTE *)(v92 + 20) = 1;
      *(_QWORD *)v92 = &unk_1E357EDA0;
      *(_DWORD *)(v92 + 16) = 0;
      *(_QWORD *)(v92 + 40) = 0;
      *(_QWORD *)(v92 + 48) = v84;
      *(_QWORD *)(v92 + 24) = v91;
      *(_QWORD *)(v92 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v90, (JSC::B3::Value *)v92);
      *(_QWORD *)&v612 = v92;
      v96 = (char **)(v89 + 8);
      v97 = *(unsigned int *)(v89 + 20);
      if ((_DWORD)v97 == *(_DWORD *)(v89 + 16))
      {
        v458 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96, v97 + 1, (unint64_t)&v612);
        v97 = *(unsigned int *)(v89 + 20);
        *(_QWORD *)(*(_QWORD *)(v89 + 8) + 8 * v97) = *(_QWORD *)v458;
        v98 = v612;
      }
      else
      {
        *(_QWORD *)&(*v96)[8 * v97] = v92;
        v98 = v92;
      }
      *(_DWORD *)(v89 + 20) = v97 + 1;
      *(_QWORD *)(v98 + 32) = v89;
      v99 = *(_QWORD *)(a1 + 27776);
      v100 = *(_QWORD *)(a1 + 27760);
      v101 = *(_QWORD *)(a1 + 27768);
      *(_QWORD *)&v612 = v32;
      BYTE8(v612) = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v99, v100, 154, v101, (uint64_t *)&v612, v93, v94, v95);
      *(_QWORD *)(a1 + 27776) = v88;
      *(_QWORD *)(a1 + 27784) = v32;
      v108 = *(_QWORD *)(a1 + 28152);
      v109 = *(_QWORD *)(v108 + 8);
      if ((a2 & 1) != 0)
        v110 = (_QWORD *)(v109 + 24);
      else
        v110 = (_QWORD *)(v109 + 8);
      v111 = *v110 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v112 = (void *)*(unsigned int *)(v108 + 88);
      if ((_DWORD)v112 != *(_DWORD *)(v111 + 20))
      {
        if ((*(_QWORD *)(v111 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v111, v112, v102, v103, v104, v105, v106, v107);
        else
          *(_DWORD *)(v111 + 20) = (_DWORD)v112;
      }
      if ((*(_QWORD *)(v111 + 8) & 0xFFFFD1FF00000008) != 0)
      {
        v113 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), -9);
        v114 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v605, v113);
        v115 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), 2);
        v116 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)v114 + 312))(v114, v115);
        if (v116 == 2)
        {
          v120 = *(_QWORD *)(a1 + 27776);
          v121 = *(JSC::B3::Value **)(a1 + 27760);
          v122 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), (uint64_t)v114, v115);
          JSC::B3::Procedure::addValueImpl(v121, v122);
          *(_QWORD *)&v612 = v122;
          v123 = (char **)(v120 + 8);
          v124 = *(unsigned int *)(v120 + 20);
          if ((_DWORD)v124 == *(_DWORD *)(v120 + 16))
          {
            v543 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v123, v124 + 1, (unint64_t)&v612);
            v124 = *(unsigned int *)(v120 + 20);
            *(_QWORD *)(*(_QWORD *)(v120 + 8) + 8 * v124) = *(_QWORD *)v543;
            v125 = (JSC::B3::Value *)v612;
          }
          else
          {
            *(_QWORD *)&(*v123)[8 * v124] = v122;
            v125 = v122;
          }
          *(_DWORD *)(v120 + 20) = v124 + 1;
          *((_QWORD *)v125 + 4) = v120;
        }
        else
        {
          v595 = 27648;
          if (v116 == 1)
            v595 = 27640;
          v122 = *(JSC::B3::Value **)(a1 + v595);
        }
      }
      v126 = *(_QWORD *)(a1 + 27648);
      v127 = *(_QWORD *)(a1 + 27776);
      v128 = *(JSC::B3::Value **)(a1 + 27760);
      v129 = *(_QWORD *)(a1 + 27768);
      v130 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v130 + 8) = -1;
      *(_WORD *)(v130 + 12) = 152;
      *(_DWORD *)(v130 + 16) = 0;
      *(_BYTE *)(v130 + 20) = 1;
      *(_QWORD *)v130 = &unk_1E357EDA0;
      *(_QWORD *)(v130 + 40) = 0;
      *(_QWORD *)(v130 + 48) = v126;
      *(_QWORD *)(v130 + 24) = v129;
      *(_QWORD *)(v130 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v128, (JSC::B3::Value *)v130);
      *(_QWORD *)&v612 = v130;
      v134 = (char **)(v127 + 8);
      v135 = *(unsigned int *)(v127 + 20);
      if ((_DWORD)v135 == *(_DWORD *)(v127 + 16))
      {
        v459 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v134, v135 + 1, (unint64_t)&v612);
        v135 = *(unsigned int *)(v127 + 20);
        *(_QWORD *)(*(_QWORD *)(v127 + 8) + 8 * v135) = *(_QWORD *)v459;
        v136 = v612;
      }
      else
      {
        *(_QWORD *)&(*v134)[8 * v135] = v130;
        v136 = v130;
      }
      *(_DWORD *)(v127 + 20) = v135 + 1;
      *(_QWORD *)(v136 + 32) = v127;
      v137 = *(_QWORD *)(a1 + 27776);
      v138 = *(_QWORD *)(a1 + 27760);
      v139 = *(_QWORD *)(a1 + 27768);
      *(_QWORD *)&v612 = v32;
      BYTE8(v612) = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v137, v138, 154, v139, (uint64_t *)&v612, v131, v132, v133);
      *(_QWORD *)(a1 + 27776) = v32;
      *(_QWORD *)(a1 + 27784) = v607;
      v140 = *(JSC::B3::Value **)(a1 + 27760);
      v141 = *(_QWORD *)(a1 + 27768);
      v17 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v17 = off_1E357F5F0;
      *(_DWORD *)(v17 + 8) = -1;
      *(_WORD *)(v17 + 12) = 153;
      *(_DWORD *)(v17 + 16) = 1;
      *(_BYTE *)(v17 + 20) = 0;
      *(_QWORD *)(v17 + 24) = v141;
      *(_QWORD *)(v17 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v140, (JSC::B3::Value *)v17);
      *(_QWORD *)&v612 = v17;
      v142 = (char **)(v32 + 1);
      v143 = *((unsigned int *)v32 + 5);
      if ((_DWORD)v143 == *((_DWORD *)v32 + 4))
      {
        v460 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v142, v143 + 1, (unint64_t)&v612);
        v143 = *((unsigned int *)v32 + 5);
        *(_QWORD *)(v32[1] + 8 * v143) = *(_QWORD *)v460;
        v144 = v612;
      }
      else
      {
        *(_QWORD *)&(*v142)[8 * v143] = v17;
        v144 = v17;
      }
      *((_DWORD *)v32 + 5) = v143 + 1;
      *(_QWORD *)(v144 + 32) = v32;
      if ((*(_WORD *)(v92 + 12) & 0xFFF) == 0x98)
        v145 = v92;
      else
        v145 = 0;
      *(_QWORD *)(v145 + 40) = v17;
      if ((*(_WORD *)(v130 + 12) & 0xFFF) == 0x98)
        v146 = v130;
      else
        v146 = 0;
      *(_QWORD *)(v146 + 40) = v17;
      return (JSC::B3::Value *)v17;
    }
LABEL_19:
    v46 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v21, *(JSC::B3::Value **)(a1 + 27904));
    v47 = *(_QWORD *)(a1 + 27776);
    v48 = *(JSC::B3::Value **)(a1 + 27760);
    v49 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v46, *(_QWORD *)(a1 + 27672));
    JSC::B3::Procedure::addValueImpl(v48, v49);
    *(_QWORD *)&v612 = v49;
    v50 = (char **)(v47 + 8);
    v51 = *(unsigned int *)(v47 + 20);
    if ((_DWORD)v51 == *(_DWORD *)(v47 + 16))
    {
      v462 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50, v51 + 1, (unint64_t)&v612);
      v51 = *(unsigned int *)(v47 + 20);
      *(_QWORD *)(*(_QWORD *)(v47 + 8) + 8 * v51) = *(_QWORD *)v462;
      v52 = (JSC::B3::Value *)v612;
    }
    else
    {
      *(_QWORD *)&(*v50)[8 * v51] = v49;
      v52 = v49;
    }
    *(_DWORD *)(v47 + 20) = v51 + 1;
    *((_QWORD *)v52 + 4) = v47;
    goto LABEL_22;
  }
  if ((_DWORD)v11 == 19)
  {
    v15 = *(_QWORD *)(a1 + 27776);
    v16 = *(JSC::B3::Value **)(a1 + 27760);
    v17 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), v14, *(_QWORD *)(a1 + 27656));
    JSC::B3::Procedure::addValueImpl(v16, (JSC::B3::Value *)v17);
    *(_QWORD *)&v612 = v17;
    v18 = (char **)(v15 + 8);
    v19 = *(unsigned int *)(v15 + 20);
    if ((_DWORD)v19 == *(_DWORD *)(v15 + 16))
    {
      v463 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v612);
      v19 = *(unsigned int *)(v15 + 20);
      *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v19) = *(_QWORD *)v463;
      v20 = v612;
    }
    else
    {
      *(_QWORD *)&(*v18)[8 * v19] = v17;
      v20 = v17;
    }
    *(_DWORD *)(v15 + 20) = v19 + 1;
    *(_QWORD *)(v20 + 32) = v15;
    return (JSC::B3::Value *)v17;
  }
  if (!(_DWORD)v11)
  {
    v149 = JSC::B3::Procedure::addBlock(v148, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v150 = (uint64_t)v149;
    v151 = *(_QWORD *)(a1 + 27784);
    if (v151)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v151, (uint64_t)v149);
    }
    else
    {
      v610 = v149;
      v464 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v464 = 0u;
      *((_OWORD *)v464 + 1) = 0u;
      v464[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v464;
      v613 = v464;
      v464[2] = v150;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v465, v466, v467, v468, v469, (uint64_t)&v612);
      v152 = v613;
      v470 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v152[1] = (uint64_t)v470;
      *v470 = v152;
      *(_QWORD *)(a1 + 27832) = v152;
    }
    v153 = JSC::B3::Procedure::addBlock(v152, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v154 = (uint64_t)v153;
    v155 = *(_QWORD *)(a1 + 27784);
    if (v155)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v155, (uint64_t)v153);
    }
    else
    {
      v610 = v153;
      v471 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v471 = 0u;
      *((_OWORD *)v471 + 1) = 0u;
      v471[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v471;
      v613 = v471;
      v471[2] = v154;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v472, v473, v474, v475, v476, (uint64_t)&v612);
      v156 = v613;
      v477 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v156[1] = (uint64_t)v477;
      *v477 = v156;
      *(_QWORD *)(a1 + 27832) = v156;
    }
    v157 = JSC::B3::Procedure::addBlock(v156, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v158 = (uint64_t)v157;
    v159 = *(_QWORD *)(a1 + 27784);
    if (v159)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v159, (uint64_t)v157);
    }
    else
    {
      v610 = v157;
      v478 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v478 = 0u;
      *((_OWORD *)v478 + 1) = 0u;
      v478[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v478;
      v613 = v478;
      v478[2] = v158;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v479, v480, v481, v482, v483, (uint64_t)&v612);
      v160 = v613;
      v484 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v160[1] = (uint64_t)v484;
      *v484 = v160;
      *(_QWORD *)(a1 + 27832) = v160;
    }
    v161 = JSC::B3::Procedure::addBlock(v160, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v162 = v161;
    v163 = *(_QWORD *)(a1 + 27784);
    v601 = (uint64_t)v161;
    if (v163)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v163, (uint64_t)v161);
    }
    else
    {
      v610 = v161;
      v485 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v485 = 0u;
      *((_OWORD *)v485 + 1) = 0u;
      v485[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v485;
      v613 = v485;
      v485[2] = v162;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v486, v487, v488, v489, v490, (uint64_t)&v612);
      v164 = v613;
      v491 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v164[1] = (uint64_t)v491;
      *v491 = v164;
      *(_QWORD *)(a1 + 27832) = v164;
    }
    v165 = JSC::B3::Procedure::addBlock(v164, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v166 = v165;
    v167 = *(_QWORD *)(a1 + 27784);
    v603 = (uint64_t)v165;
    if (v167)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v167, (uint64_t)v165);
    }
    else
    {
      v610 = v165;
      v492 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v492 = 0u;
      *((_OWORD *)v492 + 1) = 0u;
      v492[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v492;
      v613 = v492;
      v492[2] = v166;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v493, v494, v495, v496, v497, (uint64_t)&v612);
      v168 = v613;
      v498 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v168[1] = (uint64_t)v498;
      *v498 = v168;
      *(_QWORD *)(a1 + 27832) = v168;
    }
    v169 = JSC::B3::Procedure::addBlock(v168, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v170 = v169;
    v171 = *(_QWORD *)(a1 + 27784);
    if (v171)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v171, (uint64_t)v169);
    }
    else
    {
      v610 = v169;
      v499 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v499 = 0u;
      *((_OWORD *)v499 + 1) = 0u;
      v499[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v499;
      v613 = v499;
      v499[2] = v170;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v500, v501, v502, v503, v504, (uint64_t)&v612);
      v172 = v613;
      v505 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v172[1] = (uint64_t)v505;
      *v505 = v172;
      *(_QWORD *)(a1 + 27832) = v172;
    }
    v173 = JSC::B3::Procedure::addBlock(v172, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v174 = v173;
    v175 = *(_QWORD *)(a1 + 27784);
    v604 = (uint64_t)v170;
    v597 = (uint64_t)v173;
    if (v175)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v175, (uint64_t)v173);
    }
    else
    {
      v610 = v173;
      v506 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v506 = 0u;
      *((_OWORD *)v506 + 1) = 0u;
      v506[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v506;
      v613 = v506;
      v506[2] = v174;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v507, v508, v509, v510, v511, (uint64_t)&v612);
      v176 = v613;
      v512 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v176[1] = (uint64_t)v512;
      *v512 = v176;
      *(_QWORD *)(a1 + 27832) = v176;
    }
    v177 = JSC::B3::Procedure::addBlock(v176, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v178 = v177;
    v179 = *(_QWORD *)(a1 + 27784);
    v606 = (JSC::B3::Value *)v147;
    v600 = (uint64_t)v177;
    if (v179)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v179, (uint64_t)v177);
    }
    else
    {
      v610 = v177;
      v513 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v513 = 0u;
      *((_OWORD *)v513 + 1) = 0u;
      v513[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v513;
      v613 = v513;
      v513[2] = v178;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v514, v515, v516, v517, v518, (uint64_t)&v612);
      v180 = v613;
      v519 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v180[1] = (uint64_t)v519;
      *v519 = v180;
      *(_QWORD *)(a1 + 27832) = v180;
    }
    v181 = JSC::B3::Procedure::addBlock(v180, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v182 = v181;
    v183 = *(_QWORD *)(a1 + 27784);
    if (v183)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v183, (uint64_t)v181);
    }
    else
    {
      v610 = v181;
      v520 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v520 = 0u;
      *((_OWORD *)v520 + 1) = 0u;
      v520[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v520;
      v613 = v520;
      v520[2] = v182;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v521, v522, v523, v524, v525, (uint64_t)&v612);
      v184 = v613;
      v526 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v184[1] = (uint64_t)v526;
      *v526 = v184;
      *(_QWORD *)(a1 + 27832) = v184;
    }
    v185 = JSC::B3::Procedure::addBlock(v184, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v186 = v185;
    v187 = *(_QWORD *)(a1 + 27784);
    v602 = (uint64_t)v185;
    if (v187)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v187, (uint64_t)v185);
    }
    else
    {
      v610 = v185;
      v527 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v527 = 0u;
      *((_OWORD *)v527 + 1) = 0u;
      v527[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v527;
      v613 = v527;
      v527[2] = v186;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v528, v529, v530, v531, v532, (uint64_t)&v612);
      v188 = v613;
      v533 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v188[1] = (uint64_t)v533;
      *v533 = v188;
      *(_QWORD *)(a1 + 27832) = v188;
    }
    v189 = (JSC::B3::Value **)(a1 + 27640);
    v190 = JSC::B3::Procedure::addBlock(v188, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v191 = v190;
    v192 = *(_QWORD *)(a1 + 27784);
    v608 = (uint64_t)v190;
    if (v192)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v192, (uint64_t)v190);
    }
    else
    {
      v610 = v190;
      v534 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v534 = 0u;
      *((_OWORD *)v534 + 1) = 0u;
      v534[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v534;
      v613 = v534;
      v534[2] = v191;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v610, (uint64_t *)&v613, v535, v536, v537, v538, v539, (uint64_t)&v612);
      v540 = v613;
      v541 = *(uint64_t ***)(a1 + 27832);
      *v613 = a1 + 27824;
      v540[1] = (uint64_t)v541;
      *v541 = v540;
      *(_QWORD *)(a1 + 27832) = v540;
    }
    v610 = 0;
    v611 = 0;
    v204 = (JSC::B3::Value **)(a1 + 27640);
    v598 = (uint64_t)v182;
    if ((v199 & 0xFFFFD3FF00000008) != 0)
    {
      if ((v199 & 0x2C00FFFFFFF7) != 0)
      {
LABEL_85:
        v205 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v606, *(JSC::B3::Value **)(a1 + 27904));
        v206 = *(_QWORD *)(a1 + 27776);
        v207 = *(JSC::B3::Value **)(a1 + 27760);
        v208 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v205, *(_QWORD *)(a1 + 27672));
        JSC::B3::Procedure::addValueImpl(v207, v208);
        *(_QWORD *)&v612 = v208;
        v209 = (char **)(v206 + 8);
        v210 = *(unsigned int *)(v206 + 20);
        if ((_DWORD)v210 == *(_DWORD *)(v206 + 16))
        {
          v553 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v209, v210 + 1, (unint64_t)&v612);
          v210 = *(unsigned int *)(v206 + 20);
          *(_QWORD *)(*(_QWORD *)(v206 + 8) + 8 * v210) = *(_QWORD *)v553;
          v211 = (JSC::B3::Value *)v612;
        }
        else
        {
          *(_QWORD *)&(*v209)[8 * v210] = v208;
          v211 = v208;
        }
        *(_DWORD *)(v206 + 20) = v210 + 1;
        *((_QWORD *)v211 + 4) = v206;
LABEL_88:
        JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v208, v150, v604, NAN, NAN, v200, v201, v202, v203);
        *(_QWORD *)(a1 + 27776) = v150;
        v212 = *(_QWORD *)(a1 + 27784);
        *(_QWORD *)(a1 + 27784) = v154;
        v224 = (JSC::B3::Value **)(a1 + 27640);
        if ((v219 & 0x2800CFFFFFF7) != 0)
        {
          if ((v219 & 0x30000000) != 0)
          {
LABEL_90:
            v225 = *(_QWORD *)(a1 + 3160);
            v226 = (uint64_t)v606;
            if (v225)
            {
              v227 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v225);
              v226 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v606, v227);
            }
            v228 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), a1 + 3136, v226);
            v229 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 2);
            v230 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v228, v229);
LABEL_93:
            JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v230, v158, v154, NAN, NAN, v220, v221, v222, v223);
            *(_QWORD *)(a1 + 27776) = v154;
            *(_QWORD *)(a1 + 27784) = v158;
            v242 = (JSC::B3::Value **)(a1 + 27640);
            if ((v237 & 0x2000CFFFFFF7) != 0)
            {
              if ((v237 & 0x80000000000) != 0)
              {
LABEL_95:
                v243 = *(_QWORD *)(a1 + 3160);
                v244 = (uint64_t)v606;
                if (v243)
                {
                  v245 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v243);
                  v244 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v606, v245);
                }
                v246 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), a1 + 3136, v244);
                v247 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 3);
                v248 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v246, v247);
LABEL_98:
                v599 = v212;
                JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v248, v601, v603, NAN, NAN, v238, v239, v240, v241);
                *(_QWORD *)(a1 + 27776) = v158;
                *(_QWORD *)(a1 + 27784) = v601;
                v249 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 41968);
                JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 280), v249, v250, v251, v252, v253, v254, v255);
                v256 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v249);
                v257 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)v606 + 312))(v606, v256);
                if (v257 == 2)
                {
                  v258 = *(_QWORD *)(a1 + 27776);
                  v259 = *(JSC::B3::Value **)(a1 + 27760);
                  v260 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), (uint64_t)v606, v256);
                  JSC::B3::Procedure::addValueImpl(v259, v260);
                  *(_QWORD *)&v612 = v260;
                  v261 = (char **)(v258 + 8);
                  v262 = *(unsigned int *)(v258 + 20);
                  if ((_DWORD)v262 == *(_DWORD *)(v258 + 16))
                  {
                    v552 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v261, v262 + 1, (unint64_t)&v612);
                    v262 = *(unsigned int *)(v258 + 20);
                    *(_QWORD *)(*(_QWORD *)(v258 + 8) + 8 * v262) = *(_QWORD *)v552;
                    v263 = (JSC::B3::Value *)v612;
                  }
                  else
                  {
                    *(_QWORD *)&(*v261)[8 * v262] = v260;
                    v263 = v260;
                  }
                  *(_DWORD *)(v258 + 20) = v262 + 1;
                  *((_QWORD *)v263 + 4) = v258;
                }
                else
                {
                  v596 = 27648;
                  if (v257 == 1)
                    v596 = 27640;
                  v260 = *(JSC::B3::Value **)(a1 + v596);
                }
                v264 = *(_QWORD *)(a1 + 27776);
                v265 = *(JSC::B3::Value **)(a1 + 27760);
                v266 = *(_QWORD *)(a1 + 27768);
                v267 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)(v267 + 8) = -1;
                *(_WORD *)(v267 + 12) = 152;
                *(_BYTE *)(v267 + 20) = 1;
                *(_QWORD *)v267 = &unk_1E357EDA0;
                *(_DWORD *)(v267 + 16) = 0;
                *(_QWORD *)(v267 + 40) = 0;
                *(_QWORD *)(v267 + 48) = v260;
                *(_QWORD *)(v267 + 24) = v266;
                *(_QWORD *)(v267 + 32) = 0;
                JSC::B3::Procedure::addValueImpl(v265, (JSC::B3::Value *)v267);
                *(_QWORD *)&v612 = v267;
                v268 = (char **)(v264 + 8);
                v269 = *(unsigned int *)(v264 + 20);
                if ((_DWORD)v269 == *(_DWORD *)(v264 + 16))
                {
                  v544 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v268, v269 + 1, (unint64_t)&v612);
                  v269 = *(unsigned int *)(v264 + 20);
                  *(_QWORD *)(*(_QWORD *)(v264 + 8) + 8 * v269) = *(_QWORD *)v544;
                  v270 = v612;
                }
                else
                {
                  *(_QWORD *)&(*v268)[8 * v269] = v267;
                  v270 = v267;
                }
                *(_DWORD *)(v264 + 20) = v269 + 1;
                *(_QWORD *)(v270 + 32) = v264;
                v271 = *(_QWORD *)(a1 + 27776);
                *(_QWORD *)&v612 = v267;
                *((_QWORD *)&v612 + 1) = v271;
                v272 = (_OWORD *)WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v610, 1uLL, (unint64_t)&v612);
                v273 = HIDWORD(v611);
                v274 = (uint64_t)v610;
                *(_OWORD *)&v610[2 * HIDWORD(v611)] = *v272;
                v275 = (v273 + 1);
                HIDWORD(v611) = v273 + 1;
                v276 = *(_QWORD *)(a1 + 27776);
                v277 = *(_QWORD *)(a1 + 27760);
                v278 = *(_QWORD *)(a1 + 27768);
                *(_QWORD *)&v612 = v608;
                BYTE8(v612) = 0;
                JSC::B3::BasicBlock::appendNewControlValue(v276, v277, 154, v278, (uint64_t *)&v612, v279, v280, v281);
                *(_QWORD *)(a1 + 27776) = v601;
                *(_QWORD *)(a1 + 27784) = v603;
                v282 = (uint64_t)v606;
                v283 = *(_QWORD *)(a1 + 2440);
                if (v283)
                {
                  v284 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v283);
                  v282 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v606, v284);
                }
                v285 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 2416), v282, 1);
                v286 = JSC::FTL::Output::notZero32((JSC::FTL::Output *)(a1 + 27640), v285);
                v287 = *(_QWORD *)(a1 + 27776);
                v288 = *(JSC::B3::Value **)(a1 + 27760);
                v289 = *(_QWORD *)(a1 + 27768);
                v290 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)(v290 + 8) = -1;
                *(_WORD *)(v290 + 12) = 152;
                *(_DWORD *)(v290 + 16) = 0;
                *(_BYTE *)(v290 + 20) = 1;
                *(_QWORD *)v290 = &unk_1E357EDA0;
                *(_QWORD *)(v290 + 40) = 0;
                *(_QWORD *)(v290 + 48) = v286;
                *(_QWORD *)(v290 + 24) = v289;
                *(_QWORD *)(v290 + 32) = 0;
                JSC::B3::Procedure::addValueImpl(v288, (JSC::B3::Value *)v290);
                *(_QWORD *)&v612 = v290;
                v294 = (char **)(v287 + 8);
                v295 = *(unsigned int *)(v287 + 20);
                if ((_DWORD)v295 == *(_DWORD *)(v287 + 16))
                {
                  v545 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v294, v295 + 1, (unint64_t)&v612);
                  v295 = *(unsigned int *)(v287 + 20);
                  *(_QWORD *)(*(_QWORD *)(v287 + 8) + 8 * v295) = *(_QWORD *)v545;
                  v296 = v612;
                }
                else
                {
                  *(_QWORD *)&(*v294)[8 * v295] = v290;
                  v296 = v290;
                }
                *(_DWORD *)(v287 + 20) = v295 + 1;
                *(_QWORD *)(v296 + 32) = v287;
                v297 = *(_QWORD *)(a1 + 27776);
                *(_QWORD *)&v612 = v290;
                *((_QWORD *)&v612 + 1) = v297;
                if ((_DWORD)v275 == (_DWORD)v611)
                {
                  v554 = (_OWORD *)WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v610, v275 + 1, (unint64_t)&v612);
                  LODWORD(v275) = HIDWORD(v611);
                  v274 = (uint64_t)v610;
                  *(_OWORD *)&v610[2 * HIDWORD(v611)] = *v554;
                }
                else
                {
                  *(_OWORD *)(v274 + 16 * v275) = v612;
                }
                v298 = v275 + 1;
                HIDWORD(v611) = v275 + 1;
                v299 = *(_QWORD *)(a1 + 27776);
                v300 = *(_QWORD *)(a1 + 27760);
                v301 = *(_QWORD *)(a1 + 27768);
                *(_QWORD *)&v612 = v608;
                BYTE8(v612) = 0;
                JSC::B3::BasicBlock::appendNewControlValue(v299, v300, 154, v301, (uint64_t *)&v612, v291, v292, v293);
                *(_QWORD *)(a1 + 27776) = v603;
                *(_QWORD *)(a1 + 27784) = v604;
                if (JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), v302, v303, v304, v305, v306, v307))
                {
                  v308 = *v189;
                }
                else
                {
                  v559 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
                  *(_QWORD *)&v612 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), *v189);
                  *((_QWORD *)&v612 + 1) = v560;
                  if (v298 == (_DWORD)v611)
                  {
                    WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v610, (unint64_t)&v612);
                  }
                  else
                  {
                    *(_OWORD *)(v274 + 16 * v298) = v612;
                    HIDWORD(v611) = v275 + 2;
                  }
                  v561 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::Output *)(a1 + 27640), v606, (const JSC::FTL::AbstractHeap *)(a1 + 3088));
                  v562 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
                  v563 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v561, v562);
                  v564 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 27640), v563);
                  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v564, v608, v559, 1.0, 0.0, v565, v566, v567, v568);
                  *(_QWORD *)(a1 + 27776) = v559;
                  v569 = *(_QWORD *)a1;
                  JSC::CodeOrigin::CodeOrigin(&v609, (const JSC::CodeOrigin *)(a1 + 28192));
                  v576 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v569, &v609, v570, v571, v572, v573, v574, v575);
                  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), Structure, (const JSC::FTL::AbstractHeap *)(a1 + 5392));
                  v308 = JSC::FTL::Output::notEqual((JSC::FTL::Output *)(a1 + 27640), v583, Ptr);
                  if ((v609 & 1) != 0 && (v609 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v609 & 0xFFFFFFFF8, v586, v587, v588, v589, v590, v591, v592);
                }
                v309 = *(_QWORD *)(a1 + 27776);
                v310 = *(JSC::B3::Value **)(a1 + 27760);
                v311 = *(_QWORD *)(a1 + 27768);
                v312 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)(v312 + 8) = -1;
                *(_WORD *)(v312 + 12) = 152;
                *(_DWORD *)(v312 + 16) = 0;
                *(_BYTE *)(v312 + 20) = 1;
                *(_QWORD *)v312 = &unk_1E357EDA0;
                *(_QWORD *)(v312 + 40) = 0;
                *(_QWORD *)(v312 + 48) = v308;
                *(_QWORD *)(v312 + 24) = v311;
                *(_QWORD *)(v312 + 32) = 0;
                JSC::B3::Procedure::addValueImpl(v310, (JSC::B3::Value *)v312);
                *(_QWORD *)&v612 = v312;
                v316 = (char **)(v309 + 8);
                v317 = *(unsigned int *)(v309 + 20);
                if ((_DWORD)v317 == *(_DWORD *)(v309 + 16))
                {
                  v546 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v316, v317 + 1, (unint64_t)&v612);
                  v317 = *(unsigned int *)(v309 + 20);
                  *(_QWORD *)(*(_QWORD *)(v309 + 8) + 8 * v317) = *(_QWORD *)v546;
                  v318 = v612;
                }
                else
                {
                  *(_QWORD *)&(*v316)[8 * v317] = v312;
                  v318 = v312;
                }
                *(_DWORD *)(v309 + 20) = v317 + 1;
                *(_QWORD *)(v318 + 32) = v309;
                v319 = *(_QWORD *)(a1 + 27776);
                *(_QWORD *)&v612 = v312;
                *((_QWORD *)&v612 + 1) = v319;
                v320 = HIDWORD(v611);
                if (HIDWORD(v611) == (_DWORD)v611)
                {
                  v555 = (_OWORD *)WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v610, HIDWORD(v611) + 1, (unint64_t)&v612);
                  v320 = HIDWORD(v611);
                  v321 = (uint64_t)v610;
                  *(_OWORD *)&v610[2 * HIDWORD(v611)] = *v555;
                }
                else
                {
                  v321 = (uint64_t)v610;
                  *(_OWORD *)&v610[2 * HIDWORD(v611)] = v612;
                }
                v322 = (v320 + 1);
                HIDWORD(v611) = v320 + 1;
                v323 = *(_QWORD *)(a1 + 27776);
                v324 = *(_QWORD *)(a1 + 27760);
                v325 = *(_QWORD *)(a1 + 27768);
                *(_QWORD *)&v612 = v608;
                BYTE8(v612) = 0;
                JSC::B3::BasicBlock::appendNewControlValue(v323, v324, 154, v325, (uint64_t *)&v612, v313, v314, v315);
                *(_QWORD *)(a1 + 27776) = v604;
                *(_QWORD *)(a1 + 27784) = v597;
                v337 = (JSC::B3::Value **)(a1 + 27640);
                if ((v332 & 0xFFFFD7FC00000008) != 0)
                {
                  if ((v332 & 0x300000000) != 0)
                    goto LABEL_118;
                  v337 = (JSC::B3::Value **)(a1 + 27648);
                }
                v338 = *v337;
                if (*v337)
                {
LABEL_119:
                  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v338, v597, v600, NAN, NAN, v333, v334, v335, v336);
                  *(_QWORD *)(a1 + 27776) = v597;
                  *(_QWORD *)(a1 + 27784) = v600;
                  v339 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 27640), v606);
                  v340 = JSC::FTL::Output::notZero32((JSC::FTL::Output *)(a1 + 27640), v339);
                  v341 = *(_QWORD *)(a1 + 27776);
                  v342 = *(JSC::B3::Value **)(a1 + 27760);
                  v343 = *(_QWORD *)(a1 + 27768);
                  v344 = WTF::fastMalloc((WTF *)0x38);
                  *(_DWORD *)(v344 + 8) = -1;
                  *(_WORD *)(v344 + 12) = 152;
                  *(_DWORD *)(v344 + 16) = 0;
                  *(_BYTE *)(v344 + 20) = 1;
                  *(_QWORD *)v344 = &unk_1E357EDA0;
                  *(_QWORD *)(v344 + 40) = 0;
                  *(_QWORD *)(v344 + 48) = v340;
                  *(_QWORD *)(v344 + 24) = v343;
                  *(_QWORD *)(v344 + 32) = 0;
                  JSC::B3::Procedure::addValueImpl(v342, (JSC::B3::Value *)v344);
                  *(_QWORD *)&v612 = v344;
                  v348 = (char **)(v341 + 8);
                  v349 = *(unsigned int *)(v341 + 20);
                  if ((_DWORD)v349 == *(_DWORD *)(v341 + 16))
                  {
                    v547 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v348, v349 + 1, (unint64_t)&v612);
                    v349 = *(unsigned int *)(v341 + 20);
                    *(_QWORD *)(*(_QWORD *)(v341 + 8) + 8 * v349) = *(_QWORD *)v547;
                    v350 = v612;
                  }
                  else
                  {
                    *(_QWORD *)&(*v348)[8 * v349] = v344;
                    v350 = v344;
                  }
                  *(_DWORD *)(v341 + 20) = v349 + 1;
                  *(_QWORD *)(v350 + 32) = v341;
                  v351 = *(_QWORD *)(a1 + 27776);
                  *(_QWORD *)&v612 = v344;
                  *((_QWORD *)&v612 + 1) = v351;
                  if ((_DWORD)v322 == (_DWORD)v611)
                  {
                    v556 = (_OWORD *)WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v610, v322 + 1, (unint64_t)&v612);
                    LODWORD(v322) = HIDWORD(v611);
                    v321 = (uint64_t)v610;
                    *(_OWORD *)&v610[2 * HIDWORD(v611)] = *v556;
                  }
                  else
                  {
                    *(_OWORD *)(v321 + 16 * v322) = v612;
                  }
                  v352 = (v322 + 1);
                  HIDWORD(v611) = v322 + 1;
                  v353 = *(_QWORD *)(a1 + 27776);
                  v354 = *(_QWORD *)(a1 + 27760);
                  v355 = *(_QWORD *)(a1 + 27768);
                  *(_QWORD *)&v612 = v608;
                  BYTE8(v612) = 0;
                  JSC::B3::BasicBlock::appendNewControlValue(v353, v354, 154, v355, (uint64_t *)&v612, v345, v346, v347);
                  *(_QWORD *)(a1 + 27776) = v600;
                  *(_QWORD *)(a1 + 27784) = v598;
                  v367 = (JSC::B3::Value **)(a1 + 27640);
                  if ((v362 & 0xFFFFD70000000008) != 0)
                  {
                    if ((v362 & 0xFF00000000) != 0)
                    {
LABEL_125:
                      v368 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v606, *(JSC::B3::Value **)(a1 + 27896));
                      v369 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v368);
LABEL_126:
                      JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v369, v598, v602, NAN, NAN, v363, v364, v365, v366);
                      *(_QWORD *)(a1 + 27776) = v598;
                      *(_QWORD *)(a1 + 27784) = v602;
                      v370 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v606, *(JSC::B3::Value **)(a1 + 27896));
                      v371 = JSC::FTL::Output::bitCast((_QWORD *)(a1 + 27640), v370);
                      v372 = *(_QWORD *)(a1 + 27776);
                      v373 = *(JSC::B3::Value **)(a1 + 27760);
                      v374 = *(_QWORD *)(a1 + 27768);
                      v375 = WTF::fastMalloc((WTF *)0x30);
                      *(_DWORD *)(v375 + 8) = -1;
                      *(_WORD *)(v375 + 12) = 5;
                      *(_DWORD *)(v375 + 16) = 4;
                      *(_BYTE *)(v375 + 20) = 0;
                      *(_QWORD *)(v375 + 32) = 0;
                      *(_QWORD *)(v375 + 40) = 0;
                      *(_QWORD *)(v375 + 24) = v374;
                      *(_QWORD *)v375 = off_1E357DC30;
                      JSC::B3::Procedure::addValueImpl(v373, (JSC::B3::Value *)v375);
                      *(_QWORD *)&v612 = v375;
                      v376 = (char **)(v372 + 8);
                      v377 = *(unsigned int *)(v372 + 20);
                      if ((_DWORD)v377 == *(_DWORD *)(v372 + 16))
                      {
                        v548 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v376, v377 + 1, (unint64_t)&v612);
                        v377 = *(unsigned int *)(v372 + 20);
                        *(_QWORD *)(*(_QWORD *)(v372 + 8) + 8 * v377) = *(_QWORD *)v548;
                        v378 = v612;
                      }
                      else
                      {
                        *(_QWORD *)&(*v376)[8 * v377] = v375;
                        v378 = v375;
                      }
                      *(_DWORD *)(v372 + 20) = v377 + 1;
                      *(_QWORD *)(v378 + 32) = v372;
                      v379 = JSC::FTL::Output::doubleNotEqualAndOrdered((JSC::FTL::Output *)(a1 + 27640), v371, (JSC::B3::Value *)v375);
                      v380 = *(_QWORD *)(a1 + 27776);
                      v381 = *(JSC::B3::Value **)(a1 + 27760);
                      v382 = *(_QWORD *)(a1 + 27768);
                      v383 = WTF::fastMalloc((WTF *)0x38);
                      *(_DWORD *)(v383 + 8) = -1;
                      *(_WORD *)(v383 + 12) = 152;
                      *(_DWORD *)(v383 + 16) = 0;
                      *(_BYTE *)(v383 + 20) = 1;
                      *(_QWORD *)v383 = &unk_1E357EDA0;
                      *(_QWORD *)(v383 + 40) = 0;
                      *(_QWORD *)(v383 + 48) = v379;
                      *(_QWORD *)(v383 + 24) = v382;
                      *(_QWORD *)(v383 + 32) = 0;
                      JSC::B3::Procedure::addValueImpl(v381, (JSC::B3::Value *)v383);
                      *(_QWORD *)&v612 = v383;
                      v387 = (char **)(v380 + 8);
                      v388 = *(unsigned int *)(v380 + 20);
                      if ((_DWORD)v388 == *(_DWORD *)(v380 + 16))
                      {
                        v549 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v387, v388 + 1, (unint64_t)&v612);
                        v388 = *(unsigned int *)(v380 + 20);
                        *(_QWORD *)(*(_QWORD *)(v380 + 8) + 8 * v388) = *(_QWORD *)v549;
                        v389 = v612;
                      }
                      else
                      {
                        *(_QWORD *)&(*v387)[8 * v388] = v383;
                        v389 = v383;
                      }
                      *(_DWORD *)(v380 + 20) = v388 + 1;
                      *(_QWORD *)(v389 + 32) = v380;
                      v390 = *(_QWORD *)(a1 + 27776);
                      *(_QWORD *)&v612 = v383;
                      *((_QWORD *)&v612 + 1) = v390;
                      if ((_DWORD)v352 == (_DWORD)v611)
                      {
                        v557 = (_OWORD *)WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v610, v352 + 1, (unint64_t)&v612);
                        v391 = HIDWORD(v611);
                        *(_OWORD *)&v610[2 * HIDWORD(v611)] = *v557;
                      }
                      else
                      {
                        *(_OWORD *)(v321 + 16 * v352) = v612;
                        v391 = HIDWORD(v611);
                      }
                      v392 = (v391 + 1);
                      HIDWORD(v611) = v391 + 1;
                      v393 = *(_QWORD *)(a1 + 27776);
                      v394 = *(_QWORD *)(a1 + 27760);
                      v395 = *(_QWORD *)(a1 + 27768);
                      *(_QWORD *)&v612 = v608;
                      BYTE8(v612) = 0;
                      JSC::B3::BasicBlock::appendNewControlValue(v393, v394, 154, v395, (uint64_t *)&v612, v384, v385, v386);
                      *(_QWORD *)(a1 + 27776) = v602;
                      *(_QWORD *)(a1 + 27784) = v608;
                      v396 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), 7);
                      v397 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v606, v396);
                      v398 = *(_QWORD *)(a1 + 27776);
                      v399 = *(JSC::B3::Value **)(a1 + 27760);
                      v400 = *(_QWORD *)(a1 + 27768);
                      v401 = WTF::fastMalloc((WTF *)0x38);
                      *(_DWORD *)(v401 + 8) = -1;
                      *(_WORD *)(v401 + 12) = 152;
                      *(_DWORD *)(v401 + 16) = 0;
                      *(_BYTE *)(v401 + 20) = 1;
                      *(_QWORD *)v401 = &unk_1E357EDA0;
                      *(_QWORD *)(v401 + 40) = 0;
                      *(_QWORD *)(v401 + 48) = v397;
                      *(_QWORD *)(v401 + 24) = v400;
                      *(_QWORD *)(v401 + 32) = 0;
                      JSC::B3::Procedure::addValueImpl(v399, (JSC::B3::Value *)v401);
                      *(_QWORD *)&v612 = v401;
                      v405 = (char **)(v398 + 8);
                      v406 = *(unsigned int *)(v398 + 20);
                      if ((_DWORD)v406 == *(_DWORD *)(v398 + 16))
                      {
                        v550 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v405, v406 + 1, (unint64_t)&v612);
                        v406 = *(unsigned int *)(v398 + 20);
                        *(_QWORD *)(*(_QWORD *)(v398 + 8) + 8 * v406) = *(_QWORD *)v550;
                        v407 = v612;
                      }
                      else
                      {
                        *(_QWORD *)&(*v405)[8 * v406] = v401;
                        v407 = v401;
                      }
                      *(_DWORD *)(v398 + 20) = v406 + 1;
                      *(_QWORD *)(v407 + 32) = v398;
                      v408 = *(_QWORD *)(a1 + 27776);
                      *(_QWORD *)&v612 = v401;
                      *((_QWORD *)&v612 + 1) = v408;
                      if ((_DWORD)v392 == (_DWORD)v611)
                      {
                        v558 = (_OWORD *)WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v610, v392 + 1, (unint64_t)&v612);
                        LODWORD(v392) = HIDWORD(v611);
                        v409 = (unint64_t)v610;
                        *(_OWORD *)&v610[2 * HIDWORD(v611)] = *v558;
                      }
                      else
                      {
                        v409 = (unint64_t)v610;
                        *(_OWORD *)&v610[2 * v392] = v612;
                      }
                      v410 = *(_QWORD *)(a1 + 27776);
                      v411 = *(_QWORD *)(a1 + 27760);
                      v412 = *(_QWORD *)(a1 + 27768);
                      *(_QWORD *)&v612 = v608;
                      BYTE8(v612) = 0;
                      JSC::B3::BasicBlock::appendNewControlValue(v410, v411, 154, v412, (uint64_t *)&v612, v402, v403, v404);
                      *(_QWORD *)(a1 + 27776) = v608;
                      *(_QWORD *)(a1 + 27784) = v599;
                      v413 = *(JSC::B3::Value **)(a1 + 27760);
                      v414 = *(_QWORD *)(a1 + 27768);
                      v17 = WTF::fastMalloc((WTF *)0x30);
                      *(_QWORD *)v17 = off_1E357F5F0;
                      *(_DWORD *)(v17 + 8) = -1;
                      *(_WORD *)(v17 + 12) = 153;
                      *(_DWORD *)(v17 + 16) = 1;
                      *(_BYTE *)(v17 + 20) = 0;
                      *(_QWORD *)(v17 + 24) = v414;
                      *(_QWORD *)(v17 + 32) = 0;
                      JSC::B3::Procedure::addValueImpl(v413, (JSC::B3::Value *)v17);
                      *(_QWORD *)&v612 = v17;
                      v422 = (char **)(v608 + 8);
                      v423 = *(unsigned int *)(v608 + 20);
                      if ((_DWORD)v423 == *(_DWORD *)(v608 + 16))
                      {
                        v551 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v422, v423 + 1, (unint64_t)&v612);
                        v423 = *(unsigned int *)(v608 + 20);
                        *(_QWORD *)(*(_QWORD *)(v608 + 8) + 8 * v423) = *(_QWORD *)v551;
                        v424 = v612;
                      }
                      else
                      {
                        *(_QWORD *)&(*v422)[8 * v423] = v17;
                        v424 = v17;
                      }
                      *(_DWORD *)(v608 + 20) = v423 + 1;
                      *(_QWORD *)(v424 + 32) = v608;
                      if ((_DWORD)v392 == -1)
                        goto LABEL_146;
                      v425 = 0;
                      do
                      {
                        v426 = *(_QWORD *)(v409 + v425);
                        if (v426 || *(_QWORD *)(v409 + v425 + 8))
                        {
                          if ((*(_WORD *)(v426 + 12) & 0xFFF) != 0x98)
                            v426 = 0;
                          *(_QWORD *)(v426 + 40) = v17;
                        }
                        v425 += 16;
                      }
                      while (16 * (v392 + 1) != v425);
                      if (v409)
LABEL_146:
                        WTF::fastFree(v409, v415, v416, v417, v418, v419, v420, v421);
                      return (JSC::B3::Value *)v17;
                    }
                    v367 = (JSC::B3::Value **)(a1 + 27648);
                  }
                  v369 = *v367;
                  if (*v367)
                    goto LABEL_126;
                  goto LABEL_125;
                }
LABEL_118:
                v338 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::Output *)(a1 + 27640), v606, *(JSC::B3::Value **)(a1 + 27896));
                goto LABEL_119;
              }
              v242 = (JSC::B3::Value **)(a1 + 27648);
            }
            v248 = *v242;
            if (*v242)
              goto LABEL_98;
            goto LABEL_95;
          }
          v224 = (JSC::B3::Value **)(a1 + 27648);
        }
        v230 = *v224;
        if (*v224)
          goto LABEL_93;
        goto LABEL_90;
      }
      v204 = (JSC::B3::Value **)(a1 + 27648);
    }
    v208 = *v204;
    if (*v204)
      goto LABEL_88;
    goto LABEL_85;
  }
  if ((_DWORD)v11 != 1)
    goto LABEL_227;
  return JSC::FTL::Output::notZero32((JSC::FTL::Output *)(a1 + 27640), v457);
}

uint64_t WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ConstrainedValue>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  v5 = *(_OWORD *)v3;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
  *(_OWORD *)v4 = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 24 * v9;
      v20 = v5;
      do
      {
        v21 = *(_OWORD *)v20;
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v20 + 16);
        *(_OWORD *)v11 = v21;
        v11 += 24;
        v20 += 24;
        v19 -= 24;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0xAAAAAAB)
  {
    v5 = result;
    v6 = *(_QWORD *)result;
    v7 = *(unsigned int *)(result + 12);
    v8 = 24 * v4;
    v9 = WTF::fastMalloc((WTF *)(24 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v5 = v9;
    if ((_DWORD)v7)
    {
      v17 = 24 * v7;
      v18 = v6;
      do
      {
        v19 = *(_OWORD *)v18;
        *(_QWORD *)(v9 + 16) = *(_QWORD *)(v18 + 16);
        *(_OWORD *)v9 = v19;
        v9 += 24;
        v18 += 24;
        v17 -= 24;
      }
      while (v17);
    }
    if (v6)
    {
      if (*(_QWORD *)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v9 = a1[5];
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = a1[4];
  a1[4] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(_QWORD *)(v10 + 32);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      v16 = *(_QWORD *)(v10 + 24);
      if ((v16 & 1) != 0)
      {
        v18 = v16 & 0xFFFFFFFF8;
        if (v18)
        {
          v20 = v10;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          v10 = v20;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = a1[3];
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *((_QWORD *)this + 5);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = *((_QWORD *)this + 3);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "CallOrConstruct");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v9 = *(_QWORD *)(v8 + 64);
  if ((v7 & 1) != 0)
  {
    v42 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v43 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
        ? (v44 = (_DWORD)v43 == -1)
        : (v44 = 1),
          v44))
    {
      v45 = 2;
    }
    else if (v43 >> 28)
    {
      v49 = *(_QWORD *)(v8 + 64);
      v50 = WTF::fastMalloc((WTF *)0x10);
      v9 = v49;
      *(_QWORD *)v50 = v42;
      *(_DWORD *)(v50 + 8) = v43;
      v45 = 1;
      v42 = v50;
    }
    else
    {
      v45 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v42 = v43 << 36;
    }
    v7 = v42 | v45;
  }
  v53 = v7;
  v17 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v9, &v53);
  if ((v53 & 1) != 0 && (v53 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v53 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  v18 = -1207811152;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v17, v12, v13, v14, v15, v16);
  if (v17)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DD7D20);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v17, a2 + 264, v21, v22, v23, v24, v25);
  }
  else
  {
    v18 = -1207811137;
  }
  v26 = *(_DWORD *)(a2 + 200);
  if (v26 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
    v26 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v26) = v18;
  *(_DWORD *)(a2 + 200) += 4;
  v27 = *(_QWORD **)(a1 + 16);
  v28 = *(_QWORD *)(a1 + 40);
  if ((v28 & 1) != 0)
  {
    v46 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
    if ((v28 & 2) != 0
      || (v47 = *(unsigned int *)((v28 & 0xFFFFFFFF8) + 8), (_DWORD)v47 == 0x3FFFFFFF)
      || (_DWORD)v47 == -1)
    {
      v48 = 2;
    }
    else if (v47 >> 28)
    {
      v51 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v51 = v46;
      *(_DWORD *)(v51 + 8) = v47;
      v48 = 1;
      v46 = v51;
    }
    else
    {
      v48 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
      v46 = v47 << 36;
    }
    v28 = v46 | v48;
  }
  v52 = v28;
  v36 = WTF::Bag<JSC::OptimizingCallLinkInfo,WTF::RawPtrTraits<JSC::OptimizingCallLinkInfo>,WTF::FastMalloc>::add<JSC::CodeOrigin &,JSC::CodeBlock * const&>((uint64_t *)(v27[3] + 176), &v52, (uint64_t *)(*v27 + 32));
  if ((v52 & 1) != 0 && (v52 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v52 & 0xFFFFFFFF8, v29, v30, v31, v32, v33, v34, v35);
  if (*(_WORD *)(a1 + 48) == 243)
    v37 = 48;
  else
    v37 = 16;
  *(_WORD *)(v36 + 17) = *(_WORD *)(v36 + 17) & 0xFF1F | v37;
  v54[0] = 0;
  v54[1] = 0;
  JSC::CallLinkInfo::emitFastPathImpl((JSC::ARM64LogicalImmediate *)v36, a2, 0, (uint64_t)v54, v32, v33, v34, v35);
  JSC::MacroAssemblerARM64::add64(a2, -*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 8) + 160) + 184), 29, 31, v38, v39, v40, v41);
  *(_BYTE *)(a2 + 212) = v6;
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v9 = a1[10];
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = a1[5];
  a1[5] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(_QWORD *)(v10 + 32);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      v16 = *(_QWORD *)(v10 + 24);
      if ((v16 & 1) != 0)
      {
        v18 = v16 & 0xFFFFFFFF8;
        if (v18)
        {
          v20 = v10;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          v10 = v20;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = a1[3];
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *((_QWORD *)this + 10);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = *((_QWORD *)this + 3);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  unint64_t v18;
  unsigned int *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  int j;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  void *v65;
  size_t v66;
  uint64_t v67;
  WTF *v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  __int128 *v84;
  __int128 v85;
  void *v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unint64_t v96;
  WTF *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  WTF *v112;
  unint64_t v113;
  WTF *v114;
  char v115;
  char v116;
  unint64_t v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::ARM64LogicalImmediate *v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  JSC::ARM64LogicalImmediate *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  int v143;
  unsigned int v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF *v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  int v156;
  _QWORD *v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int k;
  unsigned int v167;
  char v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  const void *v175;
  void *v176;
  unsigned int i;
  unsigned int v178;
  int v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  int v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  const void *v206;
  void *v207;
  _BYTE *v208;
  unsigned int v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  const void *v214;
  void *v215;
  void *v216;
  unint64_t v217;
  unint64_t v218;
  WTF *v219;
  _BYTE *v220;
  unsigned int v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v244;
  unint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v255;
  uint64_t v256;
  BOOL v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v267;
  uint64_t v269;
  uint64_t v270;
  BOOL v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  WTF *v282;
  _DWORD *v283;
  int v284;
  WTF *v285;
  WTF *v286;
  void *__src;
  uint64_t v288;
  uint64_t v289;
  char v290;
  char v291;
  unsigned __int8 v292;
  unsigned int v293;
  uint64_t v294;
  int v295;
  WTF *(*v296)(uint64_t);
  WTF *(**v297)(uint64_t);
  uint64_t v298;
  unint64_t *v299;
  _QWORD v300[2];
  uint64_t v301[4];
  WTF *v302;
  uint64_t v303;
  WTF *v304[2];
  _BYTE v305[1128];
  unint64_t v306;
  uint64_t v307;
  int v308;
  unint64_t v309;
  _BYTE v310[10];
  uint64_t v311;

  v5 = a2;
  v311 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [22]>(a2);
  LOBYTE(v7) = *(_BYTE *)(v5 + 212);
  if (!(_BYTE)v7)
    *(_DWORD *)(v5 + 208) = 0;
  *(_BYTE *)(v5 + 212) = 1;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v8 & 1) != 0)
  {
    v3 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) == 0)
    {
      v18 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8);
      if ((_DWORD)v18 != 0x3FFFFFFF && (_DWORD)v18 != -1)
        goto LABEL_286;
    }
    v244 = 2;
    goto LABEL_236;
  }
  while (1)
  {
    v303 = v8;
    v9 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v9, &v303);
    if ((v303 & 1) != 0 && (v303 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v303 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
    if (*(_DWORD *)(a3 + 20) <= (*(_BYTE *)(a1 + 32) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x197DD9564);
    }
    v17 = (WTF *)(*(_BYTE *)(*(_QWORD *)(a3 + 8) + 16 * (*(_BYTE *)(a1 + 32) == 0)) & 0x7F);
    v18 = v9;
    JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 40), a3, v9, v12, v13, v14, v15, v16);
    JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v304);
    v19 = (unsigned int *)v304[0];
    JSC::FTL::ExceptionTarget::jumps(v304[0], (JSC::CCallHelpers *)v5, (uint64_t *)&v302);
    v304[0] = 0;
    if (v19)
    {
      do
      {
        v27 = __ldaxr(v19);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v19));
      if (!v28)
      {
        atomic_store(1u, v19);
        JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v19, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v245, v246, v247, v248, v249, v250, v251, v252);
      }
    }
    v29 = a1 + 48;
    v301[0] = v5;
    v301[1] = a1 + 48;
    v301[2] = a1 + 56;
    v301[3] = a1 + 64;
    v292 = v17;
    if (*(_BYTE *)(a1 + 32))
      break;
    v3 = 3087156144;
    if (*(_QWORD *)(a1 + 64) && !*(_BYTE *)(*(_QWORD *)v29 + 93444))
    {
      for (i = *(_DWORD *)(v5 + 200); (signed int)i < *(_DWORD *)(v5 + 52); *(_DWORD *)(v5 + 200) = i)
      {
        if (i + 4 > *(_DWORD *)(v5 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), (uint64_t)v20, v21, v22, v23, v24, v25, v26);
          i = *(_DWORD *)(v5 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v5 + 56) + i) = -721215457;
        i = *(_DWORD *)(v5 + 200) + 4;
      }
      v178 = i;
      if (i + 4 > *(_DWORD *)(v5 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), (uint64_t)v20, v21, v22, v23, v24, v25, v26);
        v178 = *(_DWORD *)(v5 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v5 + 56) + v178) = 335544320;
      v179 = *(_DWORD *)(v5 + 200) + 4;
      *(_DWORD *)(v5 + 200) = v179;
      if (*(_BYTE *)(v5 + 328))
        v180 = 69;
      else
        v180 = 65;
      v304[0] = (WTF *)i;
      LOBYTE(v304[1]) = v180;
      *(_WORD *)((char *)&v304[1] + 1) = 15;
      for (BYTE3(v304[1]) = -1; v179 < *(_DWORD *)(v5 + 52); *(_DWORD *)(v5 + 200) = v179)
      {
        if ((v179 + 4) > *(_DWORD *)(v5 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), (uint64_t)v20, v21, v22, v23, v24, v25, v26);
          v179 = *(_DWORD *)(v5 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v5 + 56) + v179) = -721215457;
        v179 = *(_DWORD *)(v5 + 200) + 4;
      }
      *(_DWORD *)(v5 + 208) = 0;
      v188 = *(_DWORD *)(v5 + 200);
      if (v188 + 4 > *(_DWORD *)(v5 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), v181, v182, v183, v184, v185, v186, v187);
        v188 = *(_DWORD *)(v5 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v5 + 56) + v188) = -698416192;
      *(_DWORD *)(v5 + 200) += 4;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v304, v5, v182, v183, v184, v185, v186, v187);
      if ((_DWORD)v9)
      {
        if (!*(_BYTE *)(v5 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197DD9428);
        }
        JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v5, (JSC::ARM64LogicalImmediate *)v9, v5 + 264, v191, v192, v193, v194, v195);
      }
      else
      {
        LODWORD(v3) = -1207811137;
      }
      v196 = *(_DWORD *)(v5 + 200);
      if (v196 + 4 > *(_DWORD *)(v5 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), v189, v190, v191, v192, v193, v194, v195);
        v196 = *(_DWORD *)(v5 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v5 + 56) + v196) = v3;
      v197 = *(_DWORD *)(v5 + 200);
      v198 = v197 + 4;
      *(_DWORD *)(v5 + 200) = v197 + 4;
      *(_DWORD *)(v5 + 208) = 0;
      if ((v197 + 8) > *(_DWORD *)(v5 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), v189, v190, v191, v192, v193, v194, v195);
        v198 = *(_DWORD *)(v5 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v5 + 56) + v198) = -1811939328;
      v199 = *(_DWORD *)(v5 + 200) + 4;
      *(_DWORD *)(v5 + 200) = v199;
      v200 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v200 = off_1E3577108;
      *(_DWORD *)(v200 + 8) = 1;
      *(_DWORD *)(v200 + 12) = v199;
      *(_DWORD *)(v200 + 16) = 3;
      *(_DWORD *)(v200 + 20) = v179;
      v201 = *(unsigned int *)(v5 + 244);
      if ((_DWORD)v201 == *(_DWORD *)(v5 + 240))
      {
        v211 = v201 + (v201 >> 2);
        if (v211 >= 0x10)
          v212 = v211 + 1;
        else
          v212 = 16;
        if (v212 <= v201 + 1)
          v213 = v201 + 1;
        else
          v213 = v212;
        if (v213 >> 29)
        {
          __break(0xC471u);
LABEL_344:
          JUMPOUT(0x197DD9184);
        }
        v214 = *(const void **)(v5 + 232);
        v215 = (void *)WTF::fastMalloc((WTF *)(8 * v213));
        *(_DWORD *)(v5 + 240) = v213;
        *(_QWORD *)(v5 + 232) = v215;
        memcpy(v215, v214, 8 * v201);
        if (v214)
        {
          if (*(const void **)(v5 + 232) == v214)
          {
            *(_QWORD *)(v5 + 232) = 0;
            *(_DWORD *)(v5 + 240) = 0;
          }
          WTF::fastFree((unint64_t)v214, v75, v76, v77, v78, v79, v80, v81);
        }
        v201 = *(unsigned int *)(v5 + 244);
        v202 = (uint64_t *)(*(_QWORD *)(v5 + 232) + 8 * v201);
      }
      else
      {
        v202 = (uint64_t *)(*(_QWORD *)(v5 + 232) + 8 * v201);
      }
      *v202 = v200;
      *(_DWORD *)(v5 + 244) = v201 + 1;
      goto LABEL_86;
    }
    v290 = (char)v7;
    v30 = *(_QWORD **)(a1 + 16);
    v31 = v30[3];
    LOBYTE(v304[0]) = 0;
    v32 = (_QWORD *)(*v30 + 32);
    v7 = (_DWORD *)WTF::fastMalloc((WTF *)0x70);
    v36 = WTF::BagNode<JSC::DirectCallLinkInfo,WTF::RawPtrTraits<JSC::DirectCallLinkInfo>>::BagNode<JSC::CodeOrigin const&,JSC::CallLinkInfoBase::UseDataIC,JSC::CodeBlock * const&,JSC::ExecutableBase * const&>((uint64_t)v7, *(_QWORD *)(a1 + 80), v304, v32, (_QWORD *)(a1 + 88), v33, v34, v35);
    *(_QWORD *)(v36 + 104) = *(_QWORD *)(v31 + 184);
    *(_QWORD *)(v31 + 184) = v36;
    if (*(_BYTE *)(a1 + 96))
      v44 = 8;
    else
      v44 = 7;
    *(_BYTE *)(v36 + 17) = *(_BYTE *)(v36 + 17) & 0xF0 | v44;
    v45 = *(_DWORD *)(a1 + 76);
    if (v45 > *(_DWORD *)(a1 + 72))
      v7[5] = v45;
    for (j = *(_DWORD *)(v5 + 200); j < *(_DWORD *)(v5 + 52); *(_DWORD *)(v5 + 200) = j)
    {
      if ((j + 4) > *(_DWORD *)(v5 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), v37, v38, v39, v40, v41, v42, v43);
        j = *(_DWORD *)(v5 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v5 + 56) + j) = -721215457;
      j = *(_DWORD *)(v5 + 200) + 4;
    }
    *(_DWORD *)(v5 + 208) = 0;
    v284 = j;
    if (!(_DWORD)v9)
    {
      LODWORD(v3) = -1207811137;
      v47 = j;
LABEL_23:
      if (v47 + 4 > *(_DWORD *)(v5 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), v37, v38, v39, v40, v41, v42, v43);
        v47 = *(_DWORD *)(v5 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v5 + 56) + v47) = v3;
      *(_DWORD *)(v5 + 200) += 4;
      JSC::DirectCallLinkInfo::emitDirectFastPath((JSC::DirectCallLinkInfo *)v7, (JSC::CCallHelpers *)v5, v38, v39, v40, v41, v42, v43, (uint64_t)v304);
      v55 = v304[0];
      if (v305 != (_BYTE *)v304[0] && v304[0])
      {
        memset(v304, 0, 12);
        WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
      }
      JSC::MacroAssemblerARM64::add64(v5, -*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 8) + 160)+ 184), 29, 31, v51, v52, v53, v54);
      v56 = *(unsigned int *)(a3 + 20);
      v57 = 16 * v56;
      v280 = *(_QWORD *)a3;
      v281 = *(_QWORD *)(a1 + 16);
      if ((_DWORD)v56)
      {
        if (v56 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x197DD956CLL);
        }
        v58 = WTF::fastMalloc((WTF *)(16 * v56));
        v59 = v58;
        v60 = *(unsigned int *)(a3 + 20);
        if ((_DWORD)v60)
        {
          v61 = 0;
          v62 = *(_QWORD *)(a3 + 8);
          v63 = 16 * v60;
          do
          {
            *(_OWORD *)(v58 + v61) = *(_OWORD *)(v62 + v61);
            v61 += 16;
          }
          while (v63 != v61);
        }
      }
      else
      {
        v59 = 0;
      }
      v64 = *(unsigned int *)(a3 + 36);
      v293 = v56 >> 28;
      if ((_DWORD)v64)
      {
        v65 = (void *)WTF::fastMalloc((WTF *)v64);
        memcpy(v65, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
      }
      else
      {
        v65 = 0;
      }
      v66 = *(unsigned int *)(a3 + 52);
      if ((_DWORD)v66)
      {
        __src = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a3 + 52));
        memcpy(__src, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
      }
      else
      {
        __src = 0;
      }
      v279 = *(_QWORD *)(a3 + 56);
      v67 = *(_QWORD *)(a1 + 80);
      v285 = (WTF *)v65;
      if ((v67 & 1) != 0)
      {
        v255 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
        if ((v67 & 2) != 0
          || ((v256 = *(unsigned int *)((v67 & 0xFFFFFFFF8) + 8), (_DWORD)v256 != 0x3FFFFFFF)
            ? (v257 = (_DWORD)v256 == -1)
            : (v257 = 1),
              v257))
        {
          v258 = 2;
        }
        else if (v256 >> 28)
        {
          v275 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v275 = v255;
          *(_DWORD *)(v275 + 8) = v256;
          v258 = 1;
          v255 = v275;
        }
        else
        {
          v258 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
          v255 = v256 << 36;
        }
        v294 = v255 | v258;
        v65 = v285;
      }
      else
      {
        v294 = *(_QWORD *)(a1 + 80);
      }
      v283 = v7;
      v68 = v302;
      if (v302)
      {
        do
          v69 = __ldaxr((unsigned int *)v68);
        while (__stlxr(v69 + 1, (unsigned int *)v68));
      }
      v7 = *(_DWORD **)(a3 + 56);
      LODWORD(v306) = (_DWORD)v296;
      *(_DWORD *)((char *)&v306 + 3) = *(_DWORD *)((char *)&v296 + 3);
      if ((_DWORD)v56)
      {
        if (v293)
        {
          __break(0xC471u);
          JUMPOUT(0x197DD9574);
        }
        v70 = WTF::fastMalloc((WTF *)(16 * v56));
        v71 = v70;
        v72 = 0;
        do
        {
          *(_OWORD *)(v70 + v72) = *(_OWORD *)(v59 + v72);
          v72 += 16;
        }
        while (v57 != v72);
      }
      else
      {
        v71 = 0;
      }
      if ((_DWORD)v64)
      {
        v282 = (WTF *)WTF::fastMalloc((WTF *)v64);
        memcpy(v282, v65, v64);
      }
      else
      {
        v282 = 0;
      }
      if ((_DWORD)v66)
      {
        v286 = (WTF *)WTF::fastMalloc((WTF *)v66);
        memcpy(v286, __src, v66);
      }
      else
      {
        v286 = 0;
      }
      v73 = v294;
      v288 = v5;
      if ((v294 & 1) != 0)
      {
        v259 = *(_QWORD *)(v294 & 0xFFFFFFFF8);
        if ((v294 & 2) != 0
          || (v260 = *(unsigned int *)((v294 & 0xFFFFFFFF8) + 8), (_DWORD)v260 == 0x3FFFFFFF)
          || (_DWORD)v260 == -1)
        {
          v261 = 2;
        }
        else if (v260 >> 28)
        {
          v276 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v276 = v259;
          *(_DWORD *)(v276 + 8) = v260;
          v261 = 1;
          v259 = v276;
        }
        else
        {
          v261 = *(_QWORD *)(v294 & 0xFFFFFFFF8);
          v259 = v260 << 36;
        }
        v73 = v259 | v261;
      }
      if (v68)
      {
        do
          v74 = __ldaxr((unsigned int *)v68);
        while (__stlxr(v74 + 1, (unsigned int *)v68));
      }
      v82 = WTF::fastMalloc((WTF *)0x80);
      *(_DWORD *)(v82 + 8) = 1;
      *(_QWORD *)v82 = off_1E3577130;
      *(_BYTE *)(v82 + 16) = v292;
      *(_DWORD *)(v82 + 17) = v306;
      *(_DWORD *)(v82 + 20) = *(_DWORD *)((char *)&v306 + 3);
      *(_QWORD *)(v82 + 24) = v281;
      *(_QWORD *)(v82 + 32) = v280;
      *(_QWORD *)(v82 + 40) = 0;
      *(_QWORD *)(v82 + 48) = 0;
      *(_DWORD *)(v82 + 52) = v56;
      if ((_DWORD)v56)
      {
        if (v293)
        {
          __break(0xC471u);
          JUMPOUT(0x197DD957CLL);
        }
        v83 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v56));
        *(_DWORD *)(v82 + 48) = v56;
        *(_QWORD *)(v82 + 40) = v83;
        v84 = (__int128 *)v71;
        do
        {
          v85 = *v84++;
          *v83++ = v85;
          v57 -= 16;
        }
        while (v57);
      }
      *(_QWORD *)(v82 + 56) = 0;
      *(_QWORD *)(v82 + 64) = 0;
      *(_DWORD *)(v82 + 68) = v64;
      if ((_DWORD)v64)
      {
        v86 = (void *)WTF::fastMalloc((WTF *)v64);
        *(_DWORD *)(v82 + 64) = v64;
        *(_QWORD *)(v82 + 56) = v86;
        memcpy(v86, v282, v64);
      }
      *(_QWORD *)(v82 + 72) = 0;
      *(_QWORD *)(v82 + 80) = 0;
      *(_DWORD *)(v82 + 84) = v66;
      if ((_DWORD)v66)
      {
        v216 = (void *)WTF::fastMalloc((WTF *)v66);
        *(_DWORD *)(v82 + 80) = v66;
        *(_QWORD *)(v82 + 72) = v216;
        memcpy(v216, v286, v66);
      }
      *(_QWORD *)(v82 + 88) = v279;
      v87 = v73;
      v88 = v284;
      if ((v73 & 1) != 0)
      {
        v262 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
        if ((v73 & 2) != 0
          || (v263 = *(unsigned int *)((v73 & 0xFFFFFFFF8) + 8), (_DWORD)v263 == 0x3FFFFFFF)
          || (_DWORD)v263 == -1)
        {
          v264 = 2;
        }
        else if (v263 >> 28)
        {
          v277 = WTF::fastMalloc((WTF *)0x10);
          v88 = v284;
          *(_QWORD *)v277 = v262;
          *(_DWORD *)(v277 + 8) = v263;
          v264 = 1;
          v262 = v277;
        }
        else
        {
          v264 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
          v262 = v263 << 36;
        }
        v87 = v262 | v264;
      }
      *(_QWORD *)(v82 + 96) = v87;
      if (v68)
      {
        do
          v89 = __ldaxr((unsigned int *)v68);
        while (__stlxr(v89 + 1, (unsigned int *)v68));
      }
      *(_QWORD *)(v82 + 104) = v68;
      *(_QWORD *)(v82 + 112) = v283;
      *(_DWORD *)(v82 + 120) = v88;
      v90 = v7[3];
      if ((_DWORD)v90 == v7[2])
      {
        v172 = v90 + (v90 >> 2);
        if (v172 >= 0x10)
          v173 = v172 + 1;
        else
          v173 = 16;
        if (v173 <= v90 + 1)
          v174 = v90 + 1;
        else
          v174 = v173;
        if (v174 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x197DD958CLL);
        }
        v175 = *(const void **)v7;
        v176 = (void *)WTF::fastMalloc((WTF *)(8 * v174));
        v7[2] = v174;
        *(_QWORD *)v7 = v176;
        memcpy(v176, v175, 8 * v90);
        if (v175)
        {
          if (*(const void **)v7 == v175)
          {
            *(_QWORD *)v7 = 0;
            v7[2] = 0;
          }
          WTF::fastFree((unint64_t)v175, v75, v76, v77, v78, v79, v80, v81);
        }
        v90 = v7[3];
        v91 = (uint64_t *)(*(_QWORD *)v7 + 8 * v90);
      }
      else
      {
        v91 = (uint64_t *)(*(_QWORD *)v7 + 8 * v90);
      }
      *v91 = v82;
      v7[3] = v90 + 1;
      v5 = v288;
      LOBYTE(v7) = v290;
      if (v68)
      {
        do
        {
          v92 = __ldaxr((unsigned int *)v68);
          v93 = v92 - 1;
        }
        while (__stlxr(v93, (unsigned int *)v68));
        if (!v93)
        {
          atomic_store(1u, (unsigned int *)v68);
          v265 = *((_QWORD *)v68 + 1);
          if ((WTF *)((char *)v68 + 24) != (WTF *)v265 && v265 != 0)
          {
            *((_QWORD *)v68 + 1) = 0;
            *((_DWORD *)v68 + 4) = 0;
            WTF::fastFree(v265, v75, v76, v77, v78, v79, v80, v81);
          }
          WTF::fastFree((unint64_t)v68, v75, v76, v77, v78, v79, v80, v81);
        }
      }
      if ((v73 & 1) != 0 && (v73 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v73 & 0xFFFFFFFF8, v75, v76, v77, v78, v79, v80, v81);
      if (v286)
        WTF::fastFree((unint64_t)v286, v75, v76, v77, v78, v79, v80, v81);
      if (v282)
        WTF::fastFree((unint64_t)v282, v75, v76, v77, v78, v79, v80, v81);
      if (v71)
        WTF::fastFree(v71, v75, v76, v77, v78, v79, v80, v81);
      if (v68)
      {
        do
        {
          v94 = __ldaxr((unsigned int *)v68);
          v95 = v94 - 1;
        }
        while (__stlxr(v95, (unsigned int *)v68));
        if (!v95)
        {
          atomic_store(1u, (unsigned int *)v68);
          v267 = *((_QWORD *)v68 + 1);
          if ((WTF *)((char *)v68 + 24) != (WTF *)v267 && v267 != 0)
          {
            *((_QWORD *)v68 + 1) = 0;
            *((_DWORD *)v68 + 4) = 0;
            WTF::fastFree(v267, v75, v76, v77, v78, v79, v80, v81);
          }
          WTF::fastFree((unint64_t)v68, v75, v76, v77, v78, v79, v80, v81);
        }
      }
      if ((v294 & 1) != 0 && (v294 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v294 & 0xFFFFFFFF8, v75, v76, v77, v78, v79, v80, v81);
      if (__src)
        WTF::fastFree((unint64_t)__src, v75, v76, v77, v78, v79, v80, v81);
      if (v285)
        WTF::fastFree((unint64_t)v285, v75, v76, v77, v78, v79, v80, v81);
      if (v59)
      {
        v96 = v59;
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    if (*(_BYTE *)(v5 + 212))
    {
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v5, (JSC::ARM64LogicalImmediate *)v9, v5 + 264, v39, v40, v41, v42, v43);
      v47 = *(_DWORD *)(v5 + 200);
      goto LABEL_23;
    }
    __break(0xC471u);
LABEL_285:
    __break(1u);
LABEL_286:
    if (v18 >> 28)
    {
      v274 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v274 = v3;
      *(_DWORD *)(v274 + 8) = v18;
      v244 = 1;
      v3 = v274;
    }
    else
    {
      v244 = v3;
      v3 = v18 << 36;
    }
LABEL_236:
    v8 = v3 | v244;
  }
  v100 = 0;
  v306 = 0;
  v307 = 0;
  v309 = -1;
  do
  {
    v101 = (char *)&v306 + v100;
    v101[28] = 18;
    *(_QWORD *)(v101 + 29) = 0;
    v100 += 9;
  }
  while (v100 != 576);
  *(_WORD *)v310 = 4863;
  *(_QWORD *)&v310[2] = 0;
  v308 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 224);
  v102 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v103 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v104 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v104)
  {
    v208 = *(_BYTE **)(a3 + 24);
    do
    {
      v209 = *v208 & 0x7F;
      if (v209 >= 0x40)
        goto LABEL_285;
      v210 = 1 << v209;
      v103 &= ~v210;
      v102 &= ~v210;
      ++v208;
    }
    while (--v104);
  }
  v105 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v105)
  {
    v220 = *(_BYTE **)(a3 + 40);
    do
    {
      v221 = (*v220 + 32) & 0x7F;
      if (v221 >= 0x40)
        goto LABEL_285;
      v222 = 1 << v221;
      v103 &= ~v222;
      v102 &= ~v222;
      ++v220;
    }
    while (--v105);
  }
  v300[1] = v102;
  LOBYTE(v304[0]) = 5;
  *(WTF **)((char *)v304 + 1) = v17;
  *(WTF **)&v310[1] = v304[0];
  v310[9] = 0;
  if (v17 >= 0x40)
    goto LABEL_285;
  v3 = v103 | (1 << (char)v17);
  v300[0] = v3;
  if (*(_DWORD *)(a1 + 72))
  {
    v291 = (char)v7;
    v289 = v5;
    v106 = 0;
    v107 = 0;
    v7 = 0;
    v5 = 1;
    while (1)
    {
      v7 = (_DWORD *)((char *)v7 + 1);
      v18 = (unint64_t)&v306;
      if ((unint64_t)v7 >= *(unsigned int *)(a3 + 20))
      {
        __break(0xC471u);
        JUMPOUT(0x197DD9584);
      }
      v108 = *(_QWORD *)(a3 + 8) + v106;
      v109 = *(unsigned __int8 *)(v108 + 24);
      if ((v109 - 7) < 2)
        break;
      if (v109 != 11)
      {
        if (v109 != 9)
        {
          __break(0xC471u);
          goto LABEL_344;
        }
        v217 = *(_QWORD *)(v108 + 16);
        if ((v217 & 7) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x197DD945CLL);
        }
        LOBYTE(v110) = 0;
        v111 = (v217 >> 3);
        LOBYTE(v304[0]) = 8;
        goto LABEL_103;
      }
      v119 = *(WTF **)(v108 + 16);
      LOBYTE(v304[0]) = 17;
      *(WTF **)((char *)v304 + 1) = v119;
      v112 = v304[0];
      v110 = (unint64_t)v119 >> 56;
LABEL_104:
      v304[0] = v112;
      LOBYTE(v304[1]) = v110;
      if (v107 == (_DWORD)v307)
      {
        v118 = WTF::Vector<JSC::ValueRecovery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v306, v107 + 1, (unint64_t)v304);
        v113 = v306 + 9 * HIDWORD(v307);
        v114 = *(WTF **)v118;
        v115 = *(_BYTE *)(v118 + 8);
      }
      else
      {
        v113 = v306 + 9 * v107;
        v114 = v304[0];
        v115 = (char)v304[1];
      }
      *(_BYTE *)(v113 + 8) = v115;
      *(_QWORD *)v113 = v114;
      v107 = ++HIDWORD(v307);
      v116 = BYTE1(v304[0]);
      if (LOBYTE(v304[0]) < 6u)
        goto LABEL_107;
      if (LOBYTE(v304[0]) - 6 < 2)
      {
        v116 = BYTE1(v304[0]) + 32;
LABEL_107:
        if ((v116 & 0x40) != 0)
          goto LABEL_285;
        v3 |= 1 << v116;
      }
      v117 = *(unsigned int *)(a1 + 72);
      v106 += 16;
      if ((unint64_t)v7 >= v117)
      {
        v300[0] = v3;
        v5 = v289;
        LOBYTE(v7) = v291;
        goto LABEL_116;
      }
    }
    LOBYTE(v110) = 0;
    v111 = *(_BYTE *)(v108 + 16) & 0x7F;
    LOBYTE(v304[0]) = 0;
LABEL_103:
    *(WTF **)((char *)v304 + 1) = (WTF *)v111;
    v112 = v304[0];
    goto LABEL_104;
  }
  LODWORD(v117) = 0;
LABEL_116:
  if (v117 < *(_DWORD *)(a1 + 76))
  {
    do
    {
      LOBYTE(v304[0]) = 17;
      *(WTF **)((char *)v304 + 1) = (WTF *)10;
      if (HIDWORD(v307) == (_DWORD)v307)
      {
        WTF::Vector<JSC::ValueRecovery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ValueRecovery>((uint64_t)&v306, (unint64_t)v304);
      }
      else
      {
        v218 = v306 + 9 * HIDWORD(v307);
        v219 = v304[0];
        *(_BYTE *)(v218 + 8) = v304[1];
        *(_QWORD *)v218 = v219;
        ++HIDWORD(v307);
      }
      LODWORD(v117) = v117 + 1;
    }
    while (v117 < *(_DWORD *)(a1 + 76));
    LODWORD(v117) = *(_DWORD *)(a1 + 72);
  }
  v309 = __PAIR64__(*(_DWORD *)(*(_QWORD *)(v5 + 336) + 28), v117);
  JSC::CallFrameShuffleData::setupCalleeSaveRegisters((uint64_t)&v306, (const JSC::RegisterAtOffsetList *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 256));
  v125 = (JSC::ARM64LogicalImmediate *)v9;
  if (!*(_QWORD *)(a1 + 64) || *(_BYTE *)(*(_QWORD *)v29 + 93444))
  {
    v126 = *(_QWORD **)(a1 + 16);
    v127 = v126[3];
    LOBYTE(v304[0]) = 0;
    v128 = (_QWORD *)(*v126 + 32);
    v129 = (JSC::ARM64LogicalImmediate *)WTF::fastMalloc((WTF *)0x70);
    v133 = WTF::BagNode<JSC::DirectCallLinkInfo,WTF::RawPtrTraits<JSC::DirectCallLinkInfo>>::BagNode<JSC::CodeOrigin const&,JSC::CallLinkInfoBase::UseDataIC,JSC::CodeBlock * const&,JSC::ExecutableBase * const&>((uint64_t)v129, *(_QWORD *)(a1 + 80), v304, v128, (_QWORD *)(a1 + 88), v130, v131, v132);
    *(_QWORD *)(v133 + 104) = *(_QWORD *)(v127 + 184);
    *(_QWORD *)(v127 + 184) = v133;
    *(_BYTE *)(v133 + 17) = *(_BYTE *)(v133 + 17) & 0xF0 | 9;
    v141 = *(_DWORD *)(a1 + 76);
    if (v141 > *(_DWORD *)(a1 + 72))
      *((_DWORD *)v129 + 5) = v141;
    v142 = *(_DWORD *)(v5 + 200);
    if (v142 < *(_DWORD *)(v5 + 52))
    {
      v125 = (JSC::ARM64LogicalImmediate *)v9;
      do
      {
        if ((v142 + 4) > *(_DWORD *)(v5 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), v134, v135, v136, v137, v138, v139, v140);
          v142 = *(_DWORD *)(v5 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v5 + 56) + v142) = -721215457;
        v142 = *(_DWORD *)(v5 + 200) + 4;
        *(_DWORD *)(v5 + 200) = v142;
      }
      while (v142 < *(_DWORD *)(v5 + 52));
    }
    v143 = -1207811152;
    *(_DWORD *)(v5 + 208) = 0;
    if ((_DWORD)v9)
    {
      if (!*(_BYTE *)(v5 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197DD9408);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v5, v125, v5 + 264, v136, v137, v138, v139, v140);
      v144 = *(_DWORD *)(v5 + 200);
    }
    else
    {
      v143 = -1207811137;
      v144 = v142;
    }
    if (v144 + 4 > *(_DWORD *)(v5 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), v134, v135, v136, v137, v138, v139, v140);
      v144 = *(_DWORD *)(v5 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v5 + 56) + v144) = v143;
    *(_DWORD *)(v5 + 200) += 4;
    v297 = &v296;
    v298 = v5;
    v299 = &v306;
    JSC::DirectCallLinkInfo::emitDirectTailCallFastPath(v129, v5, (uint64_t)&v296, v136, v137, v138, v139, v140, (uint64_t)v304);
    v152 = v304[0];
    if (v305 != (_BYTE *)v304[0] && v304[0])
    {
      memset(v304, 0, 12);
      WTF::fastFree((unint64_t)v152, v145, v146, v147, v148, v149, v150, v151);
    }
    v153 = *(_DWORD *)(v5 + 200);
    if (v153 + 4 > *(_DWORD *)(v5 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), (uint64_t)v145, v146, v147, v148, v149, v150, v151);
      v153 = *(_DWORD *)(v5 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v5 + 56) + v153) = 1384127920;
    v154 = *(_DWORD *)(v5 + 200);
    v155 = v154 + 4;
    *(_DWORD *)(v5 + 200) = v154 + 4;
    if ((v154 + 8) > *(_DWORD *)(v5 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), (uint64_t)v145, v146, v147, v148, v149, v150, v151);
      v155 = *(_DWORD *)(v5 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v5 + 56) + v155) = -734491104;
    v156 = *(_DWORD *)(v5 + 200) + 4;
    for (*(_DWORD *)(v5 + 200) = v156; v156 < *(_DWORD *)(v5 + 52); *(_DWORD *)(v5 + 200) = v156)
    {
      if ((v156 + 4) > *(_DWORD *)(v5 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), (uint64_t)v145, v146, v147, v148, v149, v150, v151);
        v156 = *(_DWORD *)(v5 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v5 + 56) + v156) = -721215457;
      v156 = *(_DWORD *)(v5 + 200) + 4;
    }
    *(_DWORD *)(v5 + 208) = 0;
    v157 = *(_QWORD **)(a1 + 16);
    v158 = *(_QWORD *)(a1 + 80);
    if ((v158 & 1) != 0)
    {
      v269 = *(_QWORD *)(v158 & 0xFFFFFFFF8);
      if ((v158 & 2) != 0
        || ((v270 = *(unsigned int *)((v158 & 0xFFFFFFFF8) + 8), (_DWORD)v270 != 0x3FFFFFFF)
          ? (v271 = (_DWORD)v270 == -1)
          : (v271 = 1),
            v271))
      {
        v272 = 2;
      }
      else if (v270 >> 28)
      {
        v278 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v278 = v269;
        *(_DWORD *)(v278 + 8) = v270;
        v272 = 1;
        v269 = v278;
      }
      else
      {
        v272 = *(_QWORD *)(v158 & 0xFFFFFFFF8);
        v269 = v270 << 36;
      }
      v273 = v269 | v272;
      JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>((uint64_t)&v296, v157, v300, v5, v273, (uint64_t)v302 + 8, (uint64_t)operationLinkDirectCall, 0xFFFFFFFFLL, (uint64_t)v129, v292);
      if ((v273 & 1) != 0 && (v273 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v273 & 0xFFFFFFFF8, v159, v160, v161, v162, v163, v164, v165);
    }
    else
    {
      JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>((uint64_t)&v296, v157, v300, v5, v158, (uint64_t)v302 + 8, (uint64_t)operationLinkDirectCall, 0xFFFFFFFFLL, (uint64_t)v129, v292);
    }
    for (k = *(_DWORD *)(v5 + 200); (signed int)k < *(_DWORD *)(v5 + 52); *(_DWORD *)(v5 + 200) = k)
    {
      if (k + 4 > *(_DWORD *)(v5 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), (uint64_t)v159, v160, v161, v162, v163, v164, v165);
        k = *(_DWORD *)(v5 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v5 + 56) + k) = -721215457;
      k = *(_DWORD *)(v5 + 200) + 4;
    }
    v167 = k;
    if (k + 4 > *(_DWORD *)(v5 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v5 + 56), (uint64_t)v159, v160, v161, v162, v163, v164, v165);
      v167 = *(_DWORD *)(v5 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v5 + 56) + v167) = 335544320;
    *(_DWORD *)(v5 + 200) += 4;
    if (*(_BYTE *)(v5 + 328))
      v168 = 69;
    else
      v168 = 65;
    v296 = (WTF *(*)(uint64_t))k;
    LOBYTE(v297) = v168;
    *(_WORD *)((char *)&v297 + 1) = 15;
    BYTE3(v297) = -1;
    v295 = v142;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v296, (unsigned int *)&v295, v5, v161, v162, v163, v164, v165);
    v169 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v169 + 8) = 1;
    *(_QWORD *)v169 = off_1E35770E0;
    *(_QWORD *)(v169 + 16) = v129;
    *(_DWORD *)(v169 + 24) = v156;
    v170 = *(unsigned int *)(v5 + 244);
    if ((_DWORD)v170 == *(_DWORD *)(v5 + 240))
    {
      v203 = v170 + (v170 >> 2);
      if (v203 >= 0x10)
        v204 = v203 + 1;
      else
        v204 = 16;
      if (v204 <= v170 + 1)
        v205 = v170 + 1;
      else
        v205 = v204;
      if (v205 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x197DD9594);
      }
      v206 = *(const void **)(v5 + 232);
      v207 = (void *)WTF::fastMalloc((WTF *)(8 * v205));
      *(_DWORD *)(v5 + 240) = v205;
      *(_QWORD *)(v5 + 232) = v207;
      memcpy(v207, v206, 8 * v170);
      if (v206)
      {
        if (*(const void **)(v5 + 232) == v206)
        {
          *(_QWORD *)(v5 + 232) = 0;
          *(_DWORD *)(v5 + 240) = 0;
        }
        WTF::fastFree((unint64_t)v206, v75, v76, v77, v78, v79, v80, v81);
      }
      v170 = *(unsigned int *)(v5 + 244);
      v171 = (uint64_t *)(*(_QWORD *)(v5 + 232) + 8 * v170);
    }
    else
    {
      v171 = (uint64_t *)(*(_QWORD *)(v5 + 232) + 8 * v170);
    }
    *v171 = v169;
    *(_DWORD *)(v5 + 244) = v170 + 1;
  }
  else
  {
    JSC::MacroAssemblerARM64::store32(v5, v9, 0x240000001DLL, v120, v121, v122, v123, v124);
    JSC::CallFrameShuffler::CallFrameShuffler((JSC::CallFrameShuffler *)v304, (JSC::CCallHelpers *)v5, (const JSC::CallFrameShuffleData *)&v306);
    JSC::CallFrameShuffler::prepareForTailCall((JSC::CallFrameShuffler *)v304);
    JSC::CallFrameShuffler::~CallFrameShuffler((JSC::CallFrameShuffler *)v304, v223, v224, v225, v226, v227, v228, v229);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v5 + 56), 3596551104, v237, v238, v239, v240, v241, v242);
  }
  v96 = v306;
  if (v306)
  {
    v306 = 0;
    LODWORD(v307) = 0;
LABEL_85:
    WTF::fastFree(v96, v75, v76, v77, v78, v79, v80, v81);
  }
LABEL_86:
  v97 = v302;
  v302 = 0;
  if (v97)
  {
    do
    {
      v98 = __ldaxr((unsigned int *)v97);
      v99 = v98 - 1;
    }
    while (__stlxr(v99, (unsigned int *)v97));
    if (!v99)
    {
      atomic_store(1u, (unsigned int *)v97);
      v253 = *((_QWORD *)v97 + 1);
      if ((WTF *)((char *)v97 + 24) != (WTF *)v253 && v253 != 0)
      {
        *((_QWORD *)v97 + 1) = 0;
        *((_DWORD *)v97 + 4) = 0;
        WTF::fastFree(v253, v75, v76, v77, v78, v79, v80, v81);
      }
      WTF::fastFree((unint64_t)v97, v75, v76, v77, v78, v79, v80, v81);
    }
  }
  *(_BYTE *)(v5 + 212) = (_BYTE)v7;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [22]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "DirectCallOrConstruct");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::CallFrameShuffler::~CallFrameShuffler(JSC::CallFrameShuffler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;

  v9 = *((_QWORD *)this + 5);
  if (v9)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    do
    {
      v12 = *(_QWORD *)(v11 + 40);
      v13 = *(_QWORD *)v11;
      if (v11 + 16 != *(_QWORD *)v11 && v13 != 0)
      {
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
        v15 = v11;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
        v11 = v15;
      }
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
      v11 = v12;
    }
    while (v12);
  }
  *((_QWORD *)this + 1) = 0;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x8_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  JSC::AssemblerBuffer *v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97[3];

  v9 = *a1;
  v10 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v11 = *(_DWORD *)(*a1 + 200);
  if (v11 + 4 > *(_DWORD *)(*a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v11) = -1447068675;
  v12 = *(_DWORD *)(v9 + 200);
  v13 = v12 + 4;
  *(_DWORD *)(v9 + 200) = v12 + 4;
  if ((v12 + 8) > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v13) = -1862269955;
  *(_DWORD *)(v9 + 200) += 4;
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 200);
  if (v15 + 4 > *(_DWORD *)(*a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v14 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(v14 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v14 + 56) + v15) = -134151233;
  *(_DWORD *)(v14 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(*a1, 29, *(_QWORD *)a1[1] + 40, a4, a5, a6, a7, a8);
  v21 = *(_QWORD *)a1[2];
  v22 = (_DWORD *)*a1;
  if (v21)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v22, v21, 0, v16, v17, v18, v19, v20);
  }
  else
  {
    JSC::MacroAssemblerARM64::load64((uint64_t)v22, 0x180000001DLL, 2, v16, v17, v18, v19, v20);
    JSC::MacroAssemblerARM64::load64(*a1, 0x1000000002, 0, v71, v72, v73, v74, v75);
  }
  v30 = *a1;
  v31 = *(_DWORD *)(*a1 + 200);
  if (v31 + 4 > *(_DWORD *)(*a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v30 + 56), v23, v24, v25, v26, v27, v28, v29);
    v31 = *(_DWORD *)(v30 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v30 + 56) + v31) = -1440939039;
  *(_DWORD *)(v30 + 200) += 4;
  v32 = *a1;
  if (BYTE1(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)*a1, *(_QWORD *)a1[3], 2, v25, v26, v27, v28, v29);
    v81 = *a1;
    if (*(_BYTE *)(*a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(v81 + 264) + 208) &= ~*(_DWORD *)(v81 + 288);
      v82 = *(_BYTE *)(v81 + 272);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v81, (uint64_t)vmEntryHostFunction, v82, v76, v77, v78, v79, v80);
      *(_DWORD *)(v81 + 208) = 0;
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v81 + 56), (32 * (v82 & 0x1F)) | 0xD63F0000, v83, v84, v85, v86, v87, v88);
      goto LABEL_16;
    }
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x197DD9B90);
  }
  if (!*(_BYTE *)(v32 + 212))
    goto LABEL_31;
  v33 = *(_QWORD *)a1[3];
  *(_DWORD *)(*(_QWORD *)(v32 + 264) + 208) &= ~*(_DWORD *)(v32 + 288);
  v34 = *(_BYTE *)(v32 + 272);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v32, v33, v34, v25, v26, v27, v28, v29);
  *(_DWORD *)(v32 + 208) = 0;
  v42 = *(_DWORD *)(v32 + 200);
  if (v42 + 4 > *(_DWORD *)(v32 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v32 + 56), v35, v36, v37, v38, v39, v40, v41);
    v42 = *(_DWORD *)(v32 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v32 + 56) + v42) = (32 * (v34 & 0x1F)) | 0xD63F0000;
  *(_DWORD *)(v32 + 200) += 4;
LABEL_16:
  JSC::MacroAssemblerARM64::load64(*a1, *(_QWORD *)a1[1] + 16, 2, v37, v38, v39, v40, v41);
  JSC::MacroAssemblerARM64::branchTest64(*a1, 1, 2, 0xFFFFFFFFLL, v43, v44, v45, v46, (uint64_t)v97, v47);
  v53 = *(_QWORD *)(*(_QWORD *)a1[1] + 90440);
  v54 = *(_QWORD *)(v53 + 8);
  v55 = *(unsigned int **)(v53 + 16);
  if (v55)
  {
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 + 1, v55));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v97, v54, *a1, v48, v49, v50, v51, v52);
    do
    {
      v64 = __ldaxr(v55);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v55));
    if (!v65)
    {
      atomic_store(1u, v55);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v55, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v97, v54, *a1, v48, v49, v50, v51, v52);
  }
  v66 = *a1;
  v67 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v68 = *(_DWORD *)(v66 + 200);
  if (v68 + 4 > *(_DWORD *)(v66 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v67, v57, v58, v59, v60, v61, v62, v63);
    v68 = *(_DWORD *)(v66 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v66 + 56) + v68) = -1862270017;
  v69 = *(_DWORD *)(v66 + 200);
  v70 = v69 + 4;
  *(_DWORD *)(v66 + 200) = v69 + 4;
  if ((v69 + 8) > *(_DWORD *)(v66 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v67, v57, v58, v59, v60, v61, v62, v63);
    v70 = *(_DWORD *)(v66 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v66 + 56) + v70) = -1463714819;
  *(_DWORD *)(v66 + 200) += 4;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;

  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v17 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v17 && v17 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 80);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 56);
  if (v13)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (v15)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Vector<JSC::ValueRecovery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 9 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::ValueRecovery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x1C71C71D)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 9 * v8;
    v11 = WTF::fastMalloc((WTF *)(9 * v8));
    *(_DWORD *)(v4 + 8) = v10 / 9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 9 * v9;
      v20 = v5;
      do
      {
        v21 = *(_QWORD *)v20;
        *(_BYTE *)(v11 + 8) = *(_BYTE *)(v20 + 8);
        *(_QWORD *)v11 = v21;
        v11 += 9;
        v20 += 9;
        v19 -= 9;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::ValueRecovery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x1C71C71D)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 9 * v4;
      v9 = WTF::fastMalloc((WTF *)(9 * v4));
      *(_DWORD *)(a1 + 8) = v8 / 9;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = 9 * v7;
        v18 = v6;
        do
        {
          v19 = *(_QWORD *)v18;
          *(_BYTE *)(v9 + 8) = *(_BYTE *)(v18 + 8);
          *(_QWORD *)v9 = v19;
          v9 += 9;
          v18 += 9;
          v17 -= 9;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t WTF::Vector<JSC::ValueRecovery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ValueRecovery>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = WTF::Vector<JSC::ValueRecovery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 9 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)result;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(result + 8);
  *(_QWORD *)v4 = v5;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::BagNode<JSC::DirectCallLinkInfo,WTF::RawPtrTraits<JSC::DirectCallLinkInfo>>::BagNode<JSC::CodeOrigin const&,JSC::CallLinkInfoBase::UseDataIC,JSC::CodeBlock * const&,JSC::ExecutableBase * const&>(uint64_t a1, uint64_t a2, _BYTE *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  if ((a2 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
    if ((a2 & 2) != 0
      || ((v14 = *(unsigned int *)((a2 & 0xFFFFFFFF8) + 8), (_DWORD)v14 != 0x3FFFFFFF)
        ? (v15 = (_DWORD)v14 == -1)
        : (v15 = 1),
          v15))
    {
      v16 = 2;
    }
    else if (v14 >> 28)
    {
      v21 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v28 = a3;
      v30 = a5;
      v26 = a4;
      v22 = *(_DWORD *)((a2 & 0xFFFFFFFF8) + 8);
      v13 = WTF::fastMalloc((WTF *)0x10);
      a4 = v26;
      a3 = v28;
      a5 = v30;
      *(_QWORD *)v13 = v21;
      *(_DWORD *)(v13 + 8) = v22;
      v16 = 1;
    }
    else
    {
      v16 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v13 = v14 << 36;
    }
    a2 = v13 | v16;
  }
  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 17) & 0xEF | (16 * v9);
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  if ((a2 & 1) != 0)
  {
    v17 = a2 & 0xFFFFFFFF8;
    v18 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
    if ((a2 & 2) != 0
      || (v19 = *(unsigned int *)((a2 & 0xFFFFFFFF8) + 8), (_DWORD)v19 == 0x3FFFFFFF)
      || (_DWORD)v19 == -1)
    {
      v20 = 2;
    }
    else if (v19 >> 28)
    {
      v27 = a2 & 0xFFFFFFFF8;
      v29 = v10;
      v31 = v11;
      v23 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v24 = *(_DWORD *)((a2 & 0xFFFFFFFF8) + 8);
      v25 = WTF::fastMalloc((WTF *)0x10);
      v17 = v27;
      v10 = v29;
      *(_QWORD *)v25 = v23;
      *(_DWORD *)(v25 + 8) = v24;
      v20 = 1;
      v18 = v25;
      v11 = v31;
    }
    else
    {
      v20 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v18 = v19 << 36;
    }
    *(_QWORD *)(a1 + 40) = v18 | v20;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = v11;
    if (v17)
      WTF::fastFree(v17, (void *)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = a2;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = v11;
  }
  *(_QWORD *)(a1 + 104) = 0;
  return a1;
}

WTF *WTF::ScopedLambdaFunctor<void ()(void),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(void)#2}>::implFunction(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  WTF *result;
  WTF *v11;
  unint64_t v12;
  WTF *v14;
  _BYTE v15[8];
  WTF *v16;
  WTF *v17;
  int v18;
  WTF *v19;
  int v20;

  JSC::CallFrameShuffler::CallFrameShuffler((JSC::CallFrameShuffler *)v15, *(JSC::CCallHelpers **)(a1 + 16), *(const JSC::CallFrameShuffleData **)(a1 + 24));
  JSC::CallFrameShuffler::prepareForTailCall((JSC::CallFrameShuffler *)v15);
  v8 = v19;
  if (v19)
  {
    v19 = 0;
    v20 = 0;
    WTF::fastFree((unint64_t)v8, v1, v2, v3, v4, v5, v6, v7);
  }
  v9 = v17;
  if (v17)
  {
    v17 = 0;
    v18 = 0;
    WTF::fastFree((unint64_t)v9, v1, v2, v3, v4, v5, v6, v7);
  }
  result = v16;
  if (v16)
  {
    do
    {
      v11 = (WTF *)*((_QWORD *)result + 5);
      v12 = *(_QWORD *)result;
      if ((WTF *)((char *)result + 16) != *(WTF **)result && v12 != 0)
      {
        *(_QWORD *)result = 0;
        *((_DWORD *)result + 2) = 0;
        v14 = result;
        WTF::fastFree(v12, v1, v2, v3, v4, v5, v6, v7);
        result = v14;
      }
      WTF::fastFree((unint64_t)result, v1, v2, v3, v4, v5, v6, v7);
      result = v11;
    }
    while (v11);
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t result, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *(_DWORD *)(result + 24);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 <= v6 && v5 + a2[1] >= v6)
  {
    *(_QWORD *)(*(_QWORD *)(result + 16) + 48) = v6;
  }
  else
  {
    result = 366;
    __break(0xC471u);
  }
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#2}>::run(_DWORD *a1, _QWORD *a2)
{
  int v3;
  int v4;
  JSC::ExecutableAllocator *v5;
  unint64_t v6;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = a1[5];
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (JSC::ExecutableAllocator *)a2[23];
  v6 = (unint64_t)v5 + (v3 - v4);
  if ((unint64_t)v5 <= v6 && (unint64_t)v5 + a2[1] >= v6)
  {
    v9 = a1[3];
    v8 = a1[4];
    if (v9 < 4)
      v10 = 0;
    else
      v10 = *(_DWORD *)((v9 & 0xFFFFFFFC) + a2[3] - 4);
    v11 = v9 - v10;
    if ((v8 & 2) != 0)
    {
      if ((v8 & 4) != 0)
      {
        v12 = v11;
        JSC::ARM64Assembler::linkJump(v5, &v12, v6);
      }
      else
      {
        JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)((char *)v5 + v11 - 4), (unint64_t)v5 + v11 - 4, v6);
      }
    }
    else
    {
      v13 = v11 - 16;
      JSC::ARM64Assembler::linkPointer((uint64_t)v5, &v13, v6);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  int i;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int j;
  unsigned int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD v59[2];
  unsigned int v60[2];
  char v61;
  __int16 v62;
  char v63;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v12 = *(_QWORD **)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(v13 + 96);
  v14 = *(_QWORD *)(v13 + 104);
  v16 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48) + 216) & 0xFF003FF80000 | v15;
  v17 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v17)
  {
    v47 = *(_BYTE **)(a1 + 56);
    while (1)
    {
      v48 = *v47 & 0x7F;
      if (v48 >= 0x40)
        break;
      v49 = 1 << v48;
      v16 &= ~v49;
      v14 &= ~v49;
      ++v47;
      if (!--v17)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v18 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v18)
    {
      v50 = *(_BYTE **)(a1 + 72);
      while (1)
      {
        v51 = (*v50 + 32) & 0x7F;
        if (v51 >= 0x40)
          break;
        v52 = 1 << v51;
        v16 &= ~v52;
        v14 &= ~v52;
        ++v50;
        if (!--v18)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      v59[0] = v16;
      v59[1] = v14;
      v19 = *(_QWORD *)(a1 + 96);
      if ((v19 & 1) != 0)
      {
        v53 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
        if ((v19 & 2) != 0
          || ((v54 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v54 != 0x3FFFFFFF)
            ? (v55 = (_DWORD)v54 == -1)
            : (v55 = 1),
              v55))
        {
          v56 = 2;
        }
        else if (v54 >> 28)
        {
          v57 = v53;
          v58 = v12;
          v53 = WTF::fastMalloc((WTF *)0x10);
          v12 = v58;
          *(_QWORD *)v53 = v57;
          *(_DWORD *)(v53 + 8) = v54;
          v56 = 1;
        }
        else
        {
          v56 = v53;
          v53 = v54 << 36;
        }
        v19 = v53 | v56;
        v20 = ((v53 | v56) & 1) == 0;
      }
      else
      {
        v20 = 1;
      }
      JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>((uint64_t)v60, v12, v59, a2, v19, *(_QWORD *)(a1 + 104) + 8, (uint64_t)operationLinkDirectCall, 0xFFFFFFFFLL, *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 16));
      if (!v20 && (v19 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v19 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
      for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
      {
        if ((j + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v21, v22, v23, v24, v25, v26, v27);
          j = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
        j = *(_DWORD *)(a2 + 200) + 4;
      }
      v29 = j;
      if ((j + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v21, v22, v23, v24, v25, v26, v27);
        v29 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = 335544320;
      *(_DWORD *)(a2 + 200) += 4;
      if (*(_BYTE *)(a2 + 328))
        v30 = 69;
      else
        v30 = 65;
      v60[0] = j;
      v60[1] = 0;
      v61 = v30;
      v62 = 15;
      v63 = -1;
      LODWORD(v59[0]) = *(_DWORD *)(a1 + 120);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v60, (unsigned int *)v59, a2, v23, v24, v25, v26, v27);
      v31 = *(_QWORD *)(a1 + 112);
      v32 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v32 + 8) = 1;
      *(_QWORD *)v32 = off_1E3577158;
      *(_QWORD *)(v32 + 16) = v31;
      *(_DWORD *)(v32 + 24) = i;
      v33 = *(unsigned int *)(a2 + 244);
      if ((_DWORD)v33 != *(_DWORD *)(a2 + 240))
      {
        v34 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v33);
LABEL_17:
        *v34 = v32;
        *(_DWORD *)(a2 + 244) = v33 + 1;
        *(_BYTE *)(a2 + 212) = v10;
        return;
      }
      v35 = v33 + (v33 >> 2);
      if (v35 >= 0x10)
        v36 = v35 + 1;
      else
        v36 = 16;
      if (v36 <= v33 + 1)
        v37 = v33 + 1;
      else
        v37 = v36;
      if (!(v37 >> 29))
      {
        v38 = *(const void **)(a2 + 232);
        v39 = (void *)WTF::fastMalloc((WTF *)(8 * v37));
        *(_DWORD *)(a2 + 240) = v37;
        *(_QWORD *)(a2 + 232) = v39;
        memcpy(v39, v38, 8 * v33);
        if (v38)
        {
          if (*(const void **)(a2 + 232) == v38)
          {
            *(_QWORD *)(a2 + 232) = 0;
            *(_DWORD *)(a2 + 240) = 0;
          }
          WTF::fastFree((unint64_t)v38, v40, v41, v42, v43, v44, v45, v46);
        }
        v33 = *(unsigned int *)(a2 + 244);
        v34 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v33);
        goto LABEL_17;
      }
      __break(0xC471u);
    }
  }
  __break(1u);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDirectCallOrConstruct(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t result, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *(_DWORD *)(result + 24);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 <= v6 && v5 + a2[1] >= v6)
  {
    *(_QWORD *)(*(_QWORD *)(result + 16) + 48) = v6;
  }
  else
  {
    result = 366;
    __break(0xC471u);
  }
  return result;
}

__n128 WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ConstrainedValue&>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v3;
  v4[1].n128_u64[0] = v3[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTailCall(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a1 + 24);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTailCall(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 3);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTailCall(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  WTF *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  WTF **v74;
  WTF *v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "TailCall");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v61 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v62 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v62 != 0x3FFFFFFF)
        ? (v63 = (_DWORD)v62 == -1)
        : (v63 = 1),
          v63))
    {
      v64 = 2;
    }
    else if (v62 >> 28)
    {
      v68 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v68 = v61;
      *(_DWORD *)(v68 + 8) = v62;
      v64 = 1;
      v61 = v68;
    }
    else
    {
      v64 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v61 = v62 << 36;
    }
    v7 = v61 | v64;
  }
  v71 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v71);
  if ((v71 & 1) != 0 && (v71 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v71 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v17 = -1207811152;
  if (v16)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DDACCCLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v16, a2 + 264, v11, v12, v13, v14, v15);
  }
  else
  {
    v17 = -1207811137;
  }
  v18 = *(_DWORD *)(a2 + 200);
  if (v18 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v18 = *(_DWORD *)(a2 + 200);
  }
  v19 = 0;
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v18) = v17;
  *(_DWORD *)(a2 + 200) += 4;
  v75 = 0;
  v76 = 0;
  v78 = -1;
  do
  {
    v20 = (char *)&v75 + v19;
    v20[28] = 18;
    *(_QWORD *)(v20 + 29) = 0;
    v19 += 9;
  }
  while (v19 != 576);
  v83 = -1;
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v77 = *(_DWORD *)(v21 + 224);
  LOBYTE(v72) = 0;
  *(_QWORD *)((char *)&v72 + 1) = 0;
  v84 = 0;
  v85 = 0;
  if (*(_DWORD *)(a1 + 32))
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      if (++v25 >= *(unsigned int *)(a3 + 20))
      {
        __break(0xC471u);
        JUMPOUT(0x197DDAD58);
      }
      v26 = *(_QWORD *)(a3 + 8) + v22;
      v27 = *(unsigned __int8 *)(v26 + 24);
      if ((v27 - 7) >= 2)
      {
        if (v27 == 11)
        {
          v38 = *(_QWORD *)(v26 + 16);
          LOBYTE(v72) = 17;
          *(_QWORD *)((char *)&v72 + 1) = v38;
          v30 = v72;
          v28 = HIBYTE(v38);
          goto LABEL_20;
        }
        if (v27 != 9)
        {
          __break(0xC471u);
          JUMPOUT(0x197DDABECLL);
        }
        v60 = *(_QWORD *)(v26 + 16);
        if ((v60 & 7) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x197DDAD14);
        }
        LOBYTE(v28) = 0;
        v29 = (v60 >> 3);
        LOBYTE(v72) = 8;
      }
      else
      {
        LOBYTE(v28) = 0;
        v29 = *(_BYTE *)(v26 + 16) & 0x7F;
        LOBYTE(v72) = 0;
      }
      *(_QWORD *)((char *)&v72 + 1) = v29;
      v30 = v72;
LABEL_20:
      *(_QWORD *)&v72 = v30;
      BYTE8(v72) = v28;
      if (v24 == (_DWORD)v76)
      {
        v35 = WTF::Vector<JSC::ValueRecovery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, v24 + 1, (unint64_t)&v72);
        v33 = HIDWORD(v76);
        v23 = v75;
        v36 = (char *)v75 + 9 * HIDWORD(v76);
        v37 = *(_QWORD *)v35;
        v36[8] = *(_BYTE *)(v35 + 8);
        *(_QWORD *)v36 = v37;
      }
      else
      {
        v31 = (char *)v23 + 9 * v24;
        v32 = v72;
        v31[8] = BYTE8(v72);
        *(_QWORD *)v31 = v32;
        v33 = HIDWORD(v76);
      }
      v24 = v33 + 1;
      HIDWORD(v76) = v24;
      v34 = *(unsigned int *)(a1 + 32);
      v22 += 16;
      if (v25 >= v34)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
        goto LABEL_27;
      }
    }
  }
  LODWORD(v34) = 0;
LABEL_27:
  v78 = __PAIR64__(*(_DWORD *)(*(_QWORD *)(a2 + 336) + 28), v34);
  LOBYTE(v72) = 0;
  *(_QWORD *)((char *)&v72 + 1) = 2;
  v79 = v72;
  v80 = 0;
  LOBYTE(v72) = 0;
  *(_QWORD *)((char *)&v72 + 1) = 5;
  v81 = v72;
  v82 = 0;
  JSC::CallFrameShuffleData::setupCalleeSaveRegisters((uint64_t)&v75, (const JSC::RegisterAtOffsetList *)(v21 + 256));
  v40 = *(_QWORD **)(a1 + 16);
  v39 = *(_QWORD *)(a1 + 24);
  if ((v39 & 1) != 0)
  {
    v65 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || (v66 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v66 == 0x3FFFFFFF)
      || (_DWORD)v66 == -1)
    {
      v67 = 2;
    }
    else if (v66 >> 28)
    {
      v69 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v69 = v65;
      *(_DWORD *)(v69 + 8) = v66;
      v67 = 1;
      v65 = v69;
    }
    else
    {
      v67 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v65 = v66 << 36;
    }
    v39 = v65 | v67;
  }
  v70 = v39;
  v48 = WTF::Bag<JSC::OptimizingCallLinkInfo,WTF::RawPtrTraits<JSC::OptimizingCallLinkInfo>,WTF::FastMalloc>::add<JSC::CodeOrigin &,JSC::CodeBlock * const&>((uint64_t *)(v40[3] + 176), &v70, (uint64_t *)(*v40 + 32));
  if ((v70 & 1) != 0 && (v70 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v70 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
  *(_WORD *)(v48 + 17) = *(_WORD *)(v48 + 17) & 0xFF0F | 0x50;
  *((_QWORD *)&v72 + 1) = &v72;
  v73 = a2;
  v74 = &v75;
  JSC::CallLinkInfo::emitFastPathImpl((JSC::ARM64LogicalImmediate *)v48, a2, 1, (uint64_t)&v72, v44, v45, v46, v47);
  v56 = *(_DWORD *)(a2 + 200);
  if (v56 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v49, v50, v51, v52, v53, v54, v55);
    v56 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v56) = 1384127920;
  v57 = *(_DWORD *)(a2 + 200);
  v58 = v57 + 4;
  *(_DWORD *)(a2 + 200) = v57 + 4;
  if ((v57 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v49, v50, v51, v52, v53, v54, v55);
    v58 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v58) = -734491104;
  *(_DWORD *)(a2 + 200) += 4;
  v59 = v75;
  if (v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree((unint64_t)v59, v49, v50, v51, v52, v53, v54, v55);
  }
  *(_BYTE *)(a2 + 212) = v6;
}

JSC::CallFrameShuffler *WTF::ScopedLambdaFunctor<void ()(void),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTailCall(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(void)#1}>::implFunction(uint64_t a1)
{
  JSC::CallFrameShuffler *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  JSC::CallFrameShuffler *v11;
  unint64_t v12;
  JSC::CallFrameShuffler *v14;
  _BYTE v15[8];
  WTF *v16;
  WTF *v17;
  int v18;
  WTF *v19;
  int v20;
  unsigned int v21;

  result = JSC::CallFrameShuffler::CallFrameShuffler((JSC::CallFrameShuffler *)v15, *(JSC::CCallHelpers **)(a1 + 16), *(const JSC::CallFrameShuffleData **)(a1 + 24));
  if (v21 <= 3)
  {
    __break(0xC471u);
  }
  else
  {
    JSC::CallFrameShuffler::addNew((uint64_t)v15, 0, *(_QWORD *)(*((_QWORD *)v19 + 3) + 24), *(_BYTE *)(*((_QWORD *)v19 + 3) + 32));
    JSC::CallFrameShuffler::prepareForTailCall((JSC::CallFrameShuffler *)v15);
    v9 = v19;
    if (v19)
    {
      v19 = 0;
      v20 = 0;
      WTF::fastFree((unint64_t)v9, v2, v3, v4, v5, v6, v7, v8);
    }
    v10 = v17;
    if (v17)
    {
      v17 = 0;
      v18 = 0;
      WTF::fastFree((unint64_t)v10, v2, v3, v4, v5, v6, v7, v8);
    }
    result = v16;
    if (v16)
    {
      do
      {
        v11 = (JSC::CallFrameShuffler *)*((_QWORD *)result + 5);
        v12 = *(_QWORD *)result;
        if ((JSC::CallFrameShuffler *)((char *)result + 16) != *(JSC::CallFrameShuffler **)result && v12 != 0)
        {
          *(_QWORD *)result = 0;
          *((_DWORD *)result + 2) = 0;
          v14 = result;
          WTF::fastFree(v12, v2, v3, v4, v5, v6, v7, v8);
          result = v14;
        }
        WTF::fastFree((unint64_t)result, v2, v3, v4, v5, v6, v7, v8);
        result = v11;
      }
      while (v11);
    }
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargsSpread(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  JSC::B3::Value **v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  __int128 *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  WTF *v42;
  unsigned int *v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  unint64_t v65;
  WTF *v66[2];
  uint64_t v67;
  uint64_t v68[2];
  uint64_t v69[2];
  int v70;
  __int16 v71;
  uint64_t v72;
  unsigned int *v73;
  _QWORD v74[9];
  int v75;
  int v76;
  int v77;
  WTF *v78;
  WTF *v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  _BYTE v83[64];
  JSC::B3::Value **v84;
  uint64_t v85;
  _BYTE v86[20];
  int v87;
  __int128 v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3528);
  v3 = *(_QWORD *)(v2 + 40) & 0xFF00FFFFFFFFFFFFLL;
  if (*(unsigned __int16 *)(v3 + 18) - 350 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197DDB27CLL);
  }
  v6 = v5;
  v87 = 0;
  v84 = (JSC::B3::Value **)v86;
  v85 = 2;
  v80 = 0;
  v81 = (WTF *)v83;
  v82 = 8;
  v78 = 0;
  v79 = 0;
  v76 = 4;
  v77 = 40;
  v75 = 0;
  v74[0] = this;
  v74[1] = &v87;
  v74[2] = &v81;
  v74[3] = &v78;
  v74[4] = &v76;
  v74[5] = &v75;
  v74[6] = &v77;
  v74[7] = &v80;
  v74[8] = &v84;
  _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB335compileCallOrConstructVarargsSpreadEvENKUlT_PNS_3DFG4NodeEE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS7_EEEEEEvS3_S6_((uint64_t)v74, (uint64_t)v74, v3);
  v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (v87 + 1));
  if (HIDWORD(v85))
  {
    v8 = v84;
    v9 = 8 * HIDWORD(v85);
    do
    {
      v10 = *v8++;
      v7 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v10, v7);
      v9 -= 8;
    }
    while (v9);
  }
  v11 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  *(_OWORD *)v66 = xmmword_199124410;
  JSC::B3::StackmapValue::append(v11, v4, (unint64_t)v66);
  v66[0] = 0;
  LOBYTE(v66[1]) = 0;
  JSC::B3::StackmapValue::append(v11, v6, (unint64_t)v66);
  v66[0] = 0;
  LOBYTE(v66[1]) = 0;
  JSC::B3::StackmapValue::append(v11, (uint64_t)v7, (unint64_t)v66);
  v66[0] = 0;
  LOBYTE(v66[1]) = 0;
  if (HIDWORD(v82))
  {
    v12 = v81;
    v13 = 8 * HIDWORD(v82);
    do
    {
      v14 = *(_QWORD *)v12;
      v12 = (WTF *)((char *)v12 + 8);
      JSC::B3::StackmapValue::append(v11, v14, (unint64_t)v66);
      v13 -= 8;
    }
    while (v13);
  }
  v15 = *((_QWORD *)this + 3488);
  *(_OWORD *)v66 = xmmword_199124420;
  JSC::B3::StackmapValue::append(v11, v15, (unint64_t)v66);
  v16 = *((_QWORD *)this + 3487);
  *(_OWORD *)v66 = xmmword_199124430;
  JSC::B3::StackmapValue::append(v11, v16, (unint64_t)v66);
  v22 = *((_QWORD *)v11 + 10);
  *((_QWORD *)v11 + 8) |= 0xFFFF00FF0003FFFFLL;
  *((_QWORD *)v11 + 10) = v22 | 0xFFFF00FF0003FFFFLL;
  v88 = xmmword_199124410;
  WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v66, &v88, 1uLL);
  WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v11 + 136, v66, v23, v24, v25, v26, v27, v28);
  v36 = v66[0];
  if (&v67 != (uint64_t *)v66[0] && v66[0])
  {
    v66[0] = 0;
    LODWORD(v66[1]) = 0;
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  }
  *((_BYTE *)v11 + 168) = 0;
  v37 = *(_QWORD *)(*((_QWORD *)this + 3481) + 160);
  v38 = *(_DWORD *)(v37 + 188);
  if (v38 <= 0x40)
    v38 = 64;
  *(_DWORD *)(v37 + 188) = v38;
  v39 = *((_QWORD *)this + 1);
  v40 = *(_QWORD *)(*(_QWORD *)this + 16);
  JSC::CodeOrigin::CodeOrigin(&v72, (const JSC::CodeOrigin *)v2);
  v41 = *(_WORD *)(v2 + 18);
  v66[0] = v78;
  v42 = v79;
  v78 = 0;
  v79 = 0;
  v66[1] = v42;
  v67 = v39;
  JSC::CodeOrigin::CodeOrigin(v68, (const JSC::CodeOrigin *)&v88);
  v43 = v73;
  if (v73)
  {
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
  }
  v68[1] = (uint64_t)v43;
  JSC::CodeOrigin::CodeOrigin(v69, (const JSC::CodeOrigin *)&v72);
  v69[1] = v40;
  v70 = v77;
  v71 = v41;
  if (*(_WORD *)(v2 + 18) == 372)
    JSC::B3::BasicBlock::appendNewControlValue(*((_QWORD *)this + 3472), *((_QWORD *)this + 3470), 159, *((_QWORD *)this + 3471), v52, v53, v54, v55);
  else
  if ((v72 & 1) != 0 && (v72 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v72 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
  if ((v88 & 1) != 0 && (v88 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v88 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
  if (v73)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v73, v56, v57, v58, v59, v60, v61, v62);
  v63 = v78;
  if (v78)
  {
    v78 = 0;
    LODWORD(v79) = 0;
    WTF::fastFree((unint64_t)v63, v56, v57, v58, v59, v60, v61, v62);
  }
  if (v80)
    WTF::fastFree(v80 - 16, v56, v57, v58, v59, v60, v61, v62);
  v64 = v81;
  if (v83 != (_BYTE *)v81 && v81)
  {
    v81 = 0;
    LODWORD(v82) = 0;
    WTF::fastFree((unint64_t)v64, v56, v57, v58, v59, v60, v61, v62);
  }
  v65 = (unint64_t)v84;
  if (v86 != (_BYTE *)v84)
  {
    if (v84)
    {
      v84 = 0;
      LODWORD(v85) = 0;
      WTF::fastFree(v65, v56, v57, v58, v59, v60, v61, v62);
    }
  }
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargs(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x60);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, __n128))(*(_QWORD *)result + 8))(result, v5);
    }
  }
  return result;
}

_QWORD *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargs(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::~StackmapGenerationParams(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v9 = a1[3];
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = a1[2];
  a1[2] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(_QWORD *)(v10 + 32);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      v16 = *(_QWORD *)(v10 + 24);
      if ((v16 & 1) != 0)
      {
        v18 = v16 & 0xFFFFFFFF8;
        if (v18)
        {
          v20 = v10;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          v10 = v20;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = a1[1];
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargsSpread(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x50);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargsSpread(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::~StackmapGenerationParams(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v9 = *(_QWORD *)(a1 + 40);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v16 = *(_QWORD *)(v10 + 32);
      if ((v16 & 1) != 0)
      {
        v18 = v16 & 0xFFFFFFFF8;
        if (v18)
        {
          v20 = v10;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          v10 = v20;
        }
      }
      v17 = *(_QWORD *)(v10 + 24);
      if ((v17 & 1) != 0)
      {
        v19 = v17 & 0xFFFFFFFF8;
        if (v19)
        {
          v21 = v10;
          WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
          v10 = v21;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = *(_QWORD *)(a1 + 24);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB335compileCallOrConstructVarargsSpreadEvENKUlT_PNS_3DFG4NodeEE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS7_EEEEEEvS3_S6_(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _DWORD *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  __int128 v59;
  _QWORD v60[3];
  uint64_t v61;
  unsigned int v62;
  _QWORD *v63;
  __int128 v64;
  unint64_t v65;

  v3 = a3;
  switch(*(_WORD *)(a3 + 18))
  {
    case 0x15D:
LABEL_2:
      v6 = *(_QWORD *)a1;
      v7 = (_QWORD *)(*(_QWORD *)v3 & 0xFFFFFFFF8);
      if ((*(_QWORD *)v3 & 1) != 0)
        v7 = (_QWORD *)*v7;
      v63 = v7;
      v62 = *(_DWORD *)(v3 + 72);
      v8 = *(_DWORD **)(a1 + 40);
      v9 = **(_DWORD **)(a1 + 32);
      v10 = (*v8)++;
      v11 = *(uint64_t **)(a1 + 56);
      v60[0] = v6;
      v60[1] = &v63;
      v60[2] = &v62;
      _ZN3WTF7HashMapIPN3JSC15InlineCallFrameEPNS1_2B35ValueENS_11DefaultHashIS3_EENS_18NullableHashTraitsIS3_EENS_10HashTraitsIS6_EENS_15HashTableTraitsEE6ensureIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB335compileCallOrConstructVarargsSpreadEvENKUlT_PNS1_3DFG4NodeEE_clINSt3__117reference_wrapperIKNS_16RecursableLambdaISN_EEEEEEvSJ_SM_EUlvE_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS3_NS_12KeyValuePairIS3_S6_EENS_24KeyValuePairKeyExtractorIS10_EES8_NSE_18KeyValuePairTraitsESA_EES3_S10_S12_S8_S13_SA_EEEERKS3_OSJ_((uint64_t)&v64, v11, (uint64_t *)&v63, (uint64_t)v60);
      v12 = *(_QWORD *)(v64 + 8);
      v61 = v12;
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(unsigned int *)(v13 + 12);
      if ((_DWORD)v14 == *(_DWORD *)(v13 + 8))
      {
        WTF::Vector<JSC::B3::Value *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(v13, (unint64_t)&v61);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = v12;
        *(_DWORD *)(v13 + 12) = v14 + 1;
      }
      v15 = v10 + v9;
      v16 = *(_QWORD *)(a1 + 64);
      v17 = *(unsigned int *)(v16 + 12);
      if ((_DWORD)v17 == *(_DWORD *)(v16 + 8))
      {
        WTF::Vector<JSC::B3::Value *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(v16, (unint64_t)&v61);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v16 + 8 * v17) = v61;
        *(_DWORD *)(v16 + 12) = v17 + 1;
      }
      v18 = *(_QWORD *)(a1 + 24);
      LODWORD(v64) = 3;
      *((_QWORD *)&v64 + 1) = v63;
      v65 = __PAIR64__(v15, v62);
      goto LABEL_9;
    case 0x15E:
      while (2)
      {
        v3 = *(_QWORD *)(v3 + 24) & 0xFF00FFFFFFFFFFFFLL;
        switch(*(_WORD *)(v3 + 18))
        {
          case 0x15D:
            a1 = a2;
            goto LABEL_2;
          case 0x15E:
            continue;
          case 0x15F:
            a1 = a2;
            goto LABEL_16;
          case 0x160:
            a1 = a2;
            goto LABEL_41;
          default:
            goto LABEL_37;
        }
      }
    case 0x15F:
LABEL_16:
      v22 = *(_DWORD *)(v3 + 32);
      if (v22)
      {
        v23 = 0;
        v24 = *(_QWORD *)a1;
        v25 = *(uint64_t **)(v3 + 72);
        v26 = v22 - 1;
        v27 = (v22 - 1);
        v28 = -v22;
        do
        {
          v29 = (unint64_t *)(2 * *v25);
          if (*v25 < 0)
            v30 = 63;
          else
            v30 = *v29;
          if (v30 > v27 + v23
            && ((v31 = (uint64_t *)(v29 + 1), *v25 >= 0) ? (v32 = v31) : (v32 = v25),
                ((*(unint64_t *)((char *)v32 + (((unint64_t)(v27 + v23) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v26 + v23)) & 1) != 0))
          {
            v33 = v27 + v23 + *(_QWORD *)(v3 + 24);
            if (*(_DWORD *)(*(_QWORD *)v24 + 164) <= v33)
            {
              __break(0xC471u);
              JUMPOUT(0x197DDB9E0);
            }
            _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB335compileCallOrConstructVarargsSpreadEvENKUlT_PNS_3DFG4NodeEE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS7_EEEEEEvS3_S6_(a2, a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v24 + 152) + 8 * v33) & 0xFF00FFFFFFFFFFFFLL);
          }
          else
          {
            ++**(_DWORD **)(a1 + 8);
            v60[0] = 0;
            v35 = v27 + v23 + *(_QWORD *)(v3 + 24);
            if (*(_DWORD *)(*(_QWORD *)v24 + 164) <= v35)
            {
              __break(0xC471u);
              JUMPOUT(0x197DDB9E8);
            }
            v60[0] = v36;
            v37 = *(_QWORD *)(a1 + 16);
            v38 = *(unsigned int *)(v37 + 12);
            if ((_DWORD)v38 == *(_DWORD *)(v37 + 8))
            {
              WTF::Vector<JSC::B3::Value *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(v37, (unint64_t)v60);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v37 + 8 * v38) = v36;
              *(_DWORD *)(v37 + 12) = v38 + 1;
            }
            v39 = *(_QWORD *)(a1 + 24);
            v40 = **(_DWORD **)(a1 + 32);
            v41 = *(_DWORD **)(a1 + 40);
            v42 = (*v41)++;
            LODWORD(v64) = 0;
            DWORD2(v64) = v42 + v40;
            v43 = *(_DWORD *)(v39 + 12);
            if (v43 == *(_DWORD *)(v39 + 8))
            {
            }
            else
            {
              v44 = *(_QWORD *)v39 + 24 * v43;
              v45 = v64;
              *(_QWORD *)(v44 + 16) = v65;
              *(_OWORD *)v44 = v45;
              ++*(_DWORD *)(v39 + 12);
            }
          }
          --v23;
        }
        while (!__CFADD__(v28++, 1));
      }
      return;
    case 0x160:
LABEL_41:
      v46 = **(_QWORD **)(v3 + 72);
      v47 = *(_DWORD *)(v46 + 8);
      **(_DWORD **)(a1 + 8) += v47;
      if (v47)
      {
        v48 = 0;
        v49 = v46 + 16;
        v50 = v47 - 1;
        v51 = v47;
        do
        {
          if (v48 == 2147483640)
          {
            __break(0xC471u);
            JUMPOUT(0x197DDB9D0);
          }
          v52 = **(_DWORD **)(a1 + 48);
          v53 = __OFSUB__(v52, v48 + 8);
          v54 = v52 - (v48 + 8);
          if (v53)
          {
            __break(0xC471u);
            JUMPOUT(0x197DDB9D8);
          }
          if ((*(_BYTE *)(v46 + 4) & 0xE) == 6)
            v55 = *(_QWORD *)(v49 + 8 * v50) + 0x2000000000000;
          else
            v55 = *(_QWORD *)(v49 + 8 * v50);
          v56 = *(_QWORD *)(a1 + 24);
          LODWORD(v64) = 1;
          *((_QWORD *)&v64 + 1) = v55;
          LODWORD(v65) = v54;
          v57 = *(_DWORD *)(v56 + 12);
          if (v57 == *(_DWORD *)(v56 + 8))
          {
          }
          else
          {
            v58 = *(_QWORD *)v56 + 24 * v57;
            v59 = v64;
            *(_QWORD *)(v58 + 16) = v65;
            *(_OWORD *)v58 = v59;
            ++*(_DWORD *)(v56 + 12);
          }
          --v50;
          v48 += 8;
          --v51;
        }
        while (v51);
      }
      v18 = *(_QWORD *)(a1 + 24);
      LODWORD(v64) = 2;
      DWORD2(v64) = v47;
LABEL_9:
      v19 = *(_DWORD *)(v18 + 12);
      if (v19 == *(_DWORD *)(v18 + 8))
      {
      }
      else
      {
        v20 = *(_QWORD *)v18 + 24 * v19;
        v21 = v64;
        *(_QWORD *)(v20 + 16) = v65;
        *(_OWORD *)v20 = v21;
        ++*(_DWORD *)(v18 + 12);
      }
      return;
    default:
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x197DDB8A4);
  }
}

uint64_t _ZN3WTF7HashMapIPN3JSC15InlineCallFrameEPNS1_2B35ValueENS_11DefaultHashIS3_EENS_18NullableHashTraitsIS3_EENS_10HashTraitsIS6_EENS_15HashTableTraitsEE6ensureIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB335compileCallOrConstructVarargsSpreadEvENKUlT_PNS1_3DFG4NodeEE_clINSt3__117reference_wrapperIKNS_16RecursableLambdaISN_EEEEEEvSJ_SM_EUlvE_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS3_NS_12KeyValuePairIS3_S6_EENS_24KeyValuePairKeyExtractorIS10_EES8_NSE_18KeyValuePairTraitsESA_EES3_S10_S12_S8_S13_SA_EEEERKS3_OSJ_(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __n128 *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  __n128 *v30;
  int v31;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,JSC::B3::Value *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a3;
  result = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a3);
  v19 = result & v9;
  v20 = (__n128 *)(v8 + 16 * (result & v9));
  v21 = v20->n128_u64[0];
  if (v20->n128_u64[0] != 1)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v21 == v10)
      {
        v29 = 0;
        v28 = v8 + 16 * *(unsigned int *)(v8 - 4);
        goto LABEL_12;
      }
      if (v21 == -1)
        v30 = v20;
      v19 = (v19 + v31) & v9;
      v20 = (__n128 *)(v8 + 16 * v19);
      v21 = v20->n128_u64[0];
      ++v31;
    }
    while (v20->n128_u64[0] != 1);
    if (v30)
    {
      v30->n128_u64[0] = 1;
      v30->n128_u64[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v10 = *a3;
      v20 = v30;
    }
  }
  v20->n128_u64[0] = v10;
  result = _ZZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB335compileCallOrConstructVarargsSpreadEvENKUlT_PNS_3DFG4NodeEE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS7_EEEEEEvS3_S6_ENKUlvE_clEv(a4, v12, v13, v14, v15, v16, v17, v18);
  v20->n128_u64[1] = result;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_11;
LABEL_24:
    result = WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,JSC::B3::Value *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::expand(a2, v20);
    v20 = (__n128 *)result;
    v24 = *a2;
    if (*a2)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
    goto LABEL_11;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_24;
LABEL_11:
  v28 = v24 + 16 * v27;
  v29 = 1;
LABEL_12:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v28;
  *(_BYTE *)(a1 + 16) = v29;
  return result;
}

_QWORD *WTF::Vector<JSC::B3::Value *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::B3::Value *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::B3::Value *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::Value *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 9)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 8;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::Value *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 9)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 8;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

__n128 WTF::Vector<JSC::FTL::`anonymous namespace'::LowerDFGToB3::VarargsSpreadArgumentToEmit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::`anonymous namespace'::LowerDFGToB3::VarargsSpreadArgumentToEmit>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;

  v4 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v3;
  v4[1].n128_u64[0] = v3[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::FTL::`anonymous namespace'::LowerDFGToB3::VarargsSpreadArgumentToEmit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
  }
  return v3;
}

void WTF::Vector<JSC::FTL::`anonymous namespace'::LowerDFGToB3::VarargsSpreadArgumentToEmit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(unsigned int *)(a1 + 12);
      v5 = 24 * a2;
      v6 = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v4)
      {
        v14 = 24 * v4;
        v15 = v3;
        do
        {
          v16 = *(_OWORD *)v15;
          *(_QWORD *)(v6 + 16) = *(_QWORD *)(v15 + 16);
          *(_OWORD *)v6 = v16;
          v6 += 24;
          v15 += 24;
          v14 -= 24;
        }
        while (v14);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t _ZZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB335compileCallOrConstructVarargsSpreadEvENKUlT_PNS_3DFG4NodeEE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS7_EEEEEEvS3_S6_ENKUlvE_clEv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)(*(_QWORD *)a1 + 27640);
  return JSC::FTL::Output::zeroExt(v8, v9, 2);
}

char *WTF::Vector<JSC::B3::Value *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  result = WTF::Vector<JSC::B3::Value *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *(_QWORD *)result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

char *WTF::Vector<JSC::B3::Value *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v25 = *a1;
        return &v25[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 3)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 2;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v25 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v25 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
          v25 = *a1;
        }
        return &v25[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x197DDC1A4);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 3)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 2;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return (char *)v3;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargsSpread(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E35771A8;
  v4 = a2[3];
  *(_QWORD *)(a1 + 32) = a2[2];
  if ((v4 & 1) != 0)
  {
    v10 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v11 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v11 != 0x3FFFFFFF)
        ? (v12 = (_DWORD)v11 == -1)
        : (v12 = 1),
          v12))
    {
      v13 = 2;
    }
    else if (v11 >> 28)
    {
      v18 = v10;
      v19 = v11;
      v10 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v10 = v18;
      *(_DWORD *)(v10 + 8) = v19;
      v13 = 1;
    }
    else
    {
      v13 = v10;
      v10 = v11 << 36;
    }
    v4 = v10 | v13;
  }
  *(_QWORD *)(a1 + 40) = v4;
  v5 = (unsigned int *)a2[4];
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 48) = v5;
  v7 = a2[5];
  if ((v7 & 1) != 0)
  {
    v14 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v15 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
        ? (v16 = (_DWORD)v15 == -1)
        : (v16 = 1),
          v16))
    {
      v17 = 2;
    }
    else if (v15 >> 28)
    {
      v20 = v14;
      v21 = v15;
      v14 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v14 = v20;
      *(_DWORD *)(v14 + 8) = v21;
      v17 = 1;
    }
    else
    {
      v17 = v14;
      v14 = v15 << 36;
    }
    v7 = v14 | v17;
  }
  *(_QWORD *)(a1 + 56) = v7;
  v8 = a2[6];
  *(_QWORD *)(a1 + 70) = *(_QWORD *)((char *)a2 + 54);
  *(_QWORD *)(a1 + 64) = v8;
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargsSpread(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v16 = *(_QWORD *)(v10 + 32);
      if ((v16 & 1) != 0)
      {
        v18 = v16 & 0xFFFFFFFF8;
        if (v18)
        {
          v20 = v10;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          v10 = v20;
        }
      }
      v17 = *(_QWORD *)(v10 + 24);
      if ((v17 & 1) != 0)
      {
        v19 = v17 & 0xFFFFFFFF8;
        if (v19)
        {
          v21 = v10;
          WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
          v10 = v21;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = *(_QWORD *)(a1 + 40);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargsSpread(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(_QWORD *)(v10 + 32);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      v16 = *(_QWORD *)(v10 + 24);
      if ((v16 & 1) != 0)
      {
        v18 = v16 & 0xFFFFFFFF8;
        if (v18)
        {
          v20 = v10;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          v10 = v20;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = *((_QWORD *)this + 5);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargsSpread(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

__n128 WTF::Vector<JSC::FTL::`anonymous namespace'::LowerDFGToB3::VarargsSpreadArgumentToEmit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t a2)
{
  __n128 *v3;
  __n128 result;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;

  if (v3)
  {
    v5 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5)
    {
      v6 = *(__n128 **)a2;
      v7 = 24 * v5;
      do
      {
        result = *v6;
        v3[1].n128_u64[0] = v6[1].n128_u64[0];
        *v3 = result;
        v3 = (__n128 *)((char *)v3 + 24);
        v6 = (__n128 *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t WTF::VectorBuffer<JSC::FTL::`anonymous namespace'::LowerDFGToB3::VarargsSpreadArgumentToEmit,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  if (!a2)
    return v3;
  if (a2 < 0xAAAAAAB)
  {
    v4 = 24 * a2;
    v5 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v3 + 8) = (v4 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v3 = v5;
    return v3;
  }
  __break(0xC471u);
  return result;
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargsSpread(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  JSC::ScratchRegisterAllocator *v40;
  uint64_t ScratchGPR;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  int v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int8x8_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int8x8_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  __int16 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF *v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t *result;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int v244;
  unsigned int v245;
  unint64_t v246;
  unsigned int v247;
  uint64_t v248;
  char v249;
  void (*v250)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v251)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int v256[3];
  int v257;
  _DWORD v258[3];
  WTF *v259;
  uint64_t v260;
  _BYTE v261[24];
  uint64_t v262[3];
  __n128 v263[2];
  int v264;
  __n128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268[2];

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  JSC::CodeOrigin::CodeOrigin(v268, (const JSC::CodeOrigin *)(a1 + 24));
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, v268);
  if ((v268[0] & 1) != 0 && (v268[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v268[0] & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v263);
  v16 = (unsigned int *)v263[0].n128_u64[0];
  JSC::FTL::ExceptionTarget::jumps((JSC::FTL::ExceptionTarget *)v263[0].n128_u64[0], (JSC::CCallHelpers *)a2, &v267);
  if (v16)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v16, v17, v18, v19, v20, v21, v22, v23);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v15, v19, v20, v21, v22, v23);
  JSC::MacroAssemblerARM64::store32(a2, v15, 0x240000001DLL, v24, v25, v26, v27, v28);
  v29 = *(_QWORD **)(a1 + 16);
  JSC::CodeOrigin::CodeOrigin(&v266, (const JSC::CodeOrigin *)(a1 + 40));
  v37 = WTF::Bag<JSC::OptimizingCallLinkInfo,WTF::RawPtrTraits<JSC::OptimizingCallLinkInfo>,WTF::FastMalloc>::add<JSC::CodeOrigin &,JSC::CodeBlock * const&>((uint64_t *)(v29[3] + 176), &v266, (uint64_t *)(*v29 + 32));
  if ((v266 & 1) != 0 && (v266 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v266 & 0xFFFFFFFF8, v30, v31, v32, v33, v34, v35, v36);
  v265.n128_u64[1] = 0;
  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
    goto LABEL_50;
  }
  v38 = *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16);
  v39 = v38 & 0x7F;
  if (v39 >= 0x40)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v265.n128_u64[0] = (1 << v38) | 0xFF00FFFC0000;
  JSC::ScratchRegisterAllocator::ScratchRegisterAllocator(v263, &v265);
  ScratchGPR = JSC::ScratchRegisterAllocator::allocateScratchGPR(v40);
  v42 = JSC::ScratchRegisterAllocator::allocateScratchGPR((JSC::ScratchRegisterAllocator *)v263);
  v43 = JSC::ScratchRegisterAllocator::allocateScratchGPR((JSC::ScratchRegisterAllocator *)v263);
  v244 = JSC::ScratchRegisterAllocator::allocateScratchGPR((JSC::ScratchRegisterAllocator *)v263);
  if (v264)
  {
    __break(0xC471u);
    JUMPOUT(0x197DDCC90);
  }
  v247 = v39;
  v248 = v37;
  v249 = v6;
  v262[0] = a2;
  v262[1] = (uint64_t)&v267;
  v262[2] = a1 + 48;
  v259 = (WTF *)v261;
  v260 = 2;
  if (*(_DWORD *)(a3 + 20) <= 3u)
  {
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x197DDCCC0);
  }
  v245 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 8) + 160) + 184);
  JSC::MacroAssemblerARM64::branch32(a2, 8, v42, 65537, v48, v49, v50, v51, (uint64_t)v258);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v259, v258, v52, v53, v54, v55, v56, v57);
  JSC::MacroAssemblerARM64::move((_DWORD *)a2, v42, ScratchGPR, v58, v59, v60, v61, v62);
  JSC::MacroAssemblerARM64::add64(a2, (((v245 >> 3) + 1) & 0x3FFFFFFE) + 5, ScratchGPR, ScratchGPR, v63, v64, v65, v66);
  JSC::MacroAssemblerARM64::add64(a2, 1, ScratchGPR, ScratchGPR, v67, v68, v69, v70);
  JSC::MacroAssemblerARM64::and64(a2, -2, ScratchGPR, ScratchGPR);
  JSC::MacroAssemblerARM64::neg64((_DWORD *)a2, ScratchGPR, v71, v72, v73, v74, v75, v76);
  JSC::MacroAssemblerARM64::getEffectiveAddress((_DWORD *)a2, ((unint64_t)ScratchGPR << 8) | 0x30000001DLL, 0x200000000, ScratchGPR, v77, v78, v79, v80);
  JSC::MacroAssemblerARM64::add64(a2, 16, ScratchGPR, 31, v81, v82, v83, v84);
  JSC::MacroAssemblerARM64::store32(a2, v42, ScratchGPR | 0x2000000000, v85, v86, v87, v88, v89);
  v97 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v97)
  {
    v246 = ScratchGPR | ((unint64_t)v42 << 8) | 0x300000000;
    v98 = 24 * v97;
    v99 = (unsigned int *)(*(_QWORD *)a1 + 16);
    do
    {
      switch(*(v99 - 4))
      {
        case 0u:
          v148 = *(v99 - 2);
          JSC::MacroAssemblerARM64::sub64(a2, v42, 1, v42, v93, v94, v95, v96);
          if (*(_DWORD *)(a3 + 20) <= v148)
          {
            __break(0xC471u);
            JUMPOUT(0x197DDCCD8);
          }
          v157 = *(unsigned int *)(a1 + 56) | 0x200000000;
          goto LABEL_20;
        case 1u:
          v158 = *v99;
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *((_QWORD *)v99 - 1), v43, v92, v93, v94, v95, v96);
          v157 = v158 | 0x200000000;
LABEL_20:
          JSC::MacroAssemblerARM64::store64(a2, v43, v246, v157, v153, v154, v155, v156);
          break;
        case 2u:
          JSC::MacroAssemblerARM64::sub64(a2, v42, *(v99 - 2), v42, v93, v94, v95, v96);
          break;
        case 3u:
          v100 = v99[1];
          if (*(_DWORD *)(a3 + 20) <= v100)
          {
            __break(0xC471u);
            JUMPOUT(0x197DDCCD0);
          }
          v101 = *v99;
          v102 = (uint64_t *)*((_QWORD *)v99 - 1);
          v103 = 8 * (JSC::AssemblyHelpers::argumentsStart(v102) + v101);
          JSC::MacroAssemblerARM64::branchTest64(a2, 0, v43, 0xFFFFFFFFLL, v104, v105, v106, v107, (uint64_t)&v250, v108);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v109, v110, v111, v112, v113, v114, v115, &v257);
          JSC::MacroAssemblerARM64::sub64(a2, v43, 1, v43, v116, v117, v118, v119);
          JSC::MacroAssemblerARM64::sub64(a2, v42, 1, v42, v120, v121, v122, v123);
          JSC::MacroAssemblerARM64::load64(a2, ((unint64_t)v43 << 8) | 0x30000001DLL, v103 | 0x200000000, v244, v124, v125, v126, v127);
          JSC::MacroAssemblerARM64::store64(a2, v244, v246, *(unsigned int *)(a1 + 56) | 0x200000000, v128, v129, v130, v131);
          JSC::MacroAssemblerARM64::branchTest64(a2, 1, v43, 0xFFFFFFFFLL, v132, v133, v134, v135, (uint64_t)v256, v136);
          v255 = v257;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v256, (unsigned int *)&v255, a2, v137, v138, v139, v140, v141);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v250, a2, v142, v143, v144, v145, v146, v147);
          break;
        default:
          break;
      }
      v99 += 6;
      v98 -= 24;
    }
    while (v98);
  }
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), v90, v91, v92, v93, v94, v95, v96, v256);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v159, v160, v161, v162, v163, v164);
  if (*(_BYTE *)(a2 + 328))
    v171 = 69;
  else
    v171 = 65;
  v250 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v256[0];
  LOBYTE(v251) = v171;
  *(_WORD *)((char *)&v251 + 1) = 15;
  BYTE3(v251) = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v259, a2, v165, v166, v167, v168, v169, v170);
  v172 = *(_QWORD *)(a2 + 336);
  JSC::CodeOrigin::CodeOrigin(&v254, (const JSC::CodeOrigin *)(a1 + 40));
  v178 = (_QWORD *)(v254 & 0xFFFFFFFF8);
  if ((v254 & 1) != 0)
    v178 = (_QWORD *)*v178;
  if (v178)
    v172 = v178[1];
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(v172 + 8), 0, v173, v174, v175, v176, v177);
  if ((v254 & 1) != 0 && (v254 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v254 & 0xFFFFFFFF8, v179, v180, v181, v182, v183, v184, v185);
  JSC::MacroAssemblerARM64::abortWithReason((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)0xEB, v186, v187, v188, v189, v190, v191);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v250, a2, v192, v193, v194, v195, v196, v197);
  JSC::MacroAssemblerARM64::store64(a2, v247, 0x80000001FLL, v198, v199, v200, v201, v202);
  if (*(_DWORD *)(a3 + 20) <= 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x197DDCCC8);
  }
  JSC::MacroAssemblerARM64::store64(a2, v43, 0x180000001FLL, v207, v208, v209, v210, v211);
  v216 = *(unsigned __int16 *)(a1 + 60);
  if ((v216 - 247) >= 2)
  {
    if ((v216 - 371) < 2)
    {
      *(_WORD *)(v248 + 17) = *(_WORD *)(v248 + 17) & 0xFF0F | 0x60;
      v251 = &v250;
      v252 = a2;
      v253 = a1 + 16;
      JSC::CallLinkInfo::emitTailCallFastPath(a2, (unsigned __int8 *)v248, 0, (uint64_t)&v250, v212, v213, v214, v215);
      JSC::MacroAssemblerARM64::abortWithReason((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)0xED, v238, v239, v240, v241, v242, v243);
      goto LABEL_35;
    }
    v217 = 32;
  }
  else
  {
    v217 = 64;
  }
  *(_WORD *)(v248 + 17) = *(_WORD *)(v248 + 17) & 0xFF0F | v217;
  JSC::CallLinkInfo::emitFastPath(a2, (unsigned __int8 *)v248, 0);
  JSC::MacroAssemblerARM64::add64(a2, -v245, 29, 31, v218, v219, v220, v221);
LABEL_35:
  v229 = v259;
  if (v261 != (_BYTE *)v259 && v259)
  {
    v259 = 0;
    LODWORD(v260) = 0;
    WTF::fastFree((unint64_t)v229, v222, v223, v224, v225, v226, v227, v228);
  }
  JSC::DeleteByVariant::~DeleteByVariant((JSC::DeleteByVariant *)v263);
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v267, v230, v231, v232, v233, v234, v235, v236);
  *(_BYTE *)(a2 + 212) = v249;
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargsSpread(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::B3::ValueRep,JSC::ARM64Registers::RegisterID)#1}::operator()(_DWORD *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 == 11)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, a2, a4, a4, a5, a6, a7, a8);
  }
  else if (a3 == 9)
  {
    JSC::MacroAssemblerARM64::load64((uint64_t)a1, (a2 << 32) | 0x1D, a4, a4, a5, a6, a7, a8);
  }
  else
  {
    if (a3 - 6 > 2 || (a2 & 0x60) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197DDCD30);
    }
    JSC::MacroAssemblerARM64::move(a1, a2 & 0x7F, a4, a4, a5, a6, a7, a8);
  }
}

_DWORD *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargsSpread(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *))#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD v28[3];

  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)*a1, (uint64_t)operationThrowStackOverflowForVarargs, 8, a4, a5, a6, a7, a8);
  v9 = (_DWORD *)*a1;
  v9[52] = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v9 + 14), 3594453248, v10, v11, v12, v13, v14, v15);
  v16 = (_DWORD *)(*(_QWORD *)a1[1] + 8);
  JSC::AssemblyHelpers::emitExceptionCheck(*a1, *(_QWORD *)a1[2], 0, 1, 0, v17, v18, v19, (uint64_t)v28, v20);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v16, v28, v21, v22, v23, v24, v25, v26);
}

void WTF::ScopedLambdaFunctor<void ()(void),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargsSpread(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(void)#1}>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  JSC::AssemblyHelpers::emitRestoreCalleeSavesFor(*(JSC::AssemblyHelpers **)(a1 + 16), (const JSC::RegisterAtOffsetList *)(*(_QWORD *)(**(_QWORD **)(a1 + 24) + 24) + 256), a3, a4, a5, a6, a7, a8);
  JSC::CCallHelpers::prepareForTailCallSlow(*(_QWORD *)(a1 + 16), 37, 0, v9, v10, v11, v12, v13);
}

__n128 WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargs(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E35771D0;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  if ((v2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v20 = a2;
      v22 = a1;
      v16 = v8;
      v17 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v20;
      a1 = v22;
      *(_QWORD *)v8 = v16;
      *(_DWORD *)(v8 + 8) = v17;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)(a1 + 24) = v2;
  v3 = *(unsigned int **)(a2 + 16);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(a1 + 32) = v3;
  v5 = *(_QWORD *)(a2 + 24);
  if ((v5 & 1) != 0)
  {
    v12 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v13 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v13 != 0x3FFFFFFF)
        ? (v14 = (_DWORD)v13 == -1)
        : (v14 = 1),
          v14))
    {
      v15 = 2;
    }
    else if (v13 >> 28)
    {
      v21 = a2;
      v23 = a1;
      v18 = v12;
      v19 = v13;
      v12 = WTF::fastMalloc((WTF *)0x10);
      a2 = v21;
      a1 = v23;
      *(_QWORD *)v12 = v18;
      *(_DWORD *)(v12 + 8) = v19;
      v15 = 1;
    }
    else
    {
      v15 = v12;
      v12 = v13 << 36;
    }
    v5 = v12 | v15;
  }
  *(_QWORD *)(a1 + 40) = v5;
  result = *(__n128 *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 78) = *(_OWORD *)(a2 + 62);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v7;
  return result;
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargs(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v9 = a1[5];
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = a1[4];
  a1[4] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(_QWORD *)(v10 + 32);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      v16 = *(_QWORD *)(v10 + 24);
      if ((v16 & 1) != 0)
      {
        v18 = v16 & 0xFFFFFFFF8;
        if (v18)
        {
          v20 = v10;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          v10 = v20;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = a1[3];
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargs(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *((_QWORD *)this + 5);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = *((_QWORD *)this + 3);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargs(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargs(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  JSC::RegisterSetBuilder *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::RegisterSetBuilder *v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  int v42;
  unsigned int v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ScratchGPR;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  JSC::ARM64LogicalImmediate *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char v90;
  JSC::RegisterSetBuilder *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  __int16 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t *result;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  JSC::ARM64LogicalImmediate *v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  uint8x8_t v172;
  __int32 v173;
  uint8x8_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  JSC::ARM64LogicalImmediate *v223;
  unsigned int v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  uint8x8_t v230;
  __int32 v231;
  uint8x8_t v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  char v236;
  char v237;
  uint64_t v238;
  _BYTE *v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char v267;
  uint64_t v268;
  _BYTE *v269;
  uint64_t v270;
  char v271;
  JSC::ARM64LogicalImmediate *v272;
  uint64_t v273;
  int v274;
  JSC::RegisterSetBuilder *v275;
  char v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280[2];
  char v281;
  __int16 v282;
  char v283;
  void *__dst;
  uint64_t p_dst;
  _QWORD v286[3];
  _QWORD v287[3];
  __n128 v288[2];
  int v289;
  __n128 v290;
  uint64_t v291;
  unsigned __int8 v292;
  uint64_t v293;
  unsigned __int8 v294;
  uint64_t v295;
  unsigned __int8 v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300[3];

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 64);
  JSC::CodeOrigin::CodeOrigin(&v299, (const JSC::CodeOrigin *)(a1 + 8));
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v299);
  if ((v299 & 1) != 0 && (v299 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v299 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v288);
  v16 = (unsigned int *)v288[0].n128_u64[0];
  JSC::FTL::ExceptionTarget::jumps((JSC::FTL::ExceptionTarget *)v288[0].n128_u64[0], (JSC::CCallHelpers *)a2, &v298);
  if (v16)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v16, v17, v18, v19, v20, v21, v22, v23);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 16), a3, v15, v19, v20, v21, v22, v23);
  JSC::MacroAssemblerARM64::store32(a2, v15, 0x240000001DLL, v24, v25, v26, v27, v28);
  v29 = *(_QWORD **)a1;
  JSC::CodeOrigin::CodeOrigin(&v297, (const JSC::CodeOrigin *)(a1 + 24));
  v30 = (JSC::RegisterSetBuilder *)WTF::Bag<JSC::OptimizingCallLinkInfo,WTF::RawPtrTraits<JSC::OptimizingCallLinkInfo>,WTF::FastMalloc>::add<JSC::CodeOrigin &,JSC::CodeBlock * const&>((uint64_t *)(v29[3] + 176), &v297, (uint64_t *)(*v29 + 32));
  v38 = v30;
  if ((v297 & 1) != 0)
  {
    v30 = (JSC::RegisterSetBuilder *)(v297 & 0xFFFFFFFF8);
    if ((v297 & 0xFFFFFFFF8) != 0)
      WTF::fastFree((unint64_t)v30, v31, v32, v33, v34, v35, v36, v37);
  }
  v39 = *(_DWORD *)(a3 + 20);
  if (v39 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DDDD48);
  }
  v40 = *(_QWORD *)(a3 + 8);
  v41 = *(_BYTE *)(v40 + 16);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v39 <= 2)
    {
      __break(0xC471u);
      JUMPOUT(0x197DDDD58);
    }
    v42 = *(_BYTE *)(v40 + 32) & 0x7F;
    v43 = 3;
  }
  else
  {
    v42 = 255;
    v43 = 2;
  }
  if (v39 <= v43)
  {
    __break(0xC471u);
    JUMPOUT(0x197DDDD50);
  }
  v44 = *(_BYTE *)(v40 + 16 * v43);
  v295 = 0;
  v296 = 0;
  v293 = 0;
  v294 = 0;
  v291 = 0;
  v292 = 0;
  if (!*(_BYTE *)(a1 + 40))
  {
    if (v39 <= v43 + 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197DDDD60);
    }
    v148 = (uint64_t *)(v40 + 16 * (v43 + 1));
    v149 = *v148;
    v296 = *((_BYTE *)v148 + 8);
    v295 = v149;
    if (v39 <= v43 + 2)
    {
      __break(0xC471u);
      JUMPOUT(0x197DDDD68);
    }
    v150 = (uint64_t *)(v40 + 16 * (v43 + 2));
    v151 = *v150;
    v152 = v43 + 3;
    v294 = *((_BYTE *)v150 + 8);
    v293 = v151;
    if (v39 <= v152)
    {
      __break(0xC471u);
      goto LABEL_153;
    }
    v153 = (uint64_t *)(v40 + 16 * v152);
    v154 = *v153;
    v292 = *((_BYTE *)v153 + 8);
    v291 = v154;
  }
  v290 = 0uLL;
  v45 = JSC::RegisterSetBuilder::stackRegisters(v30);
  v290.n128_u64[0] |= v45;
  v290.n128_u64[1] |= v46;
  v47 = JSC::RegisterSetBuilder::reservedHardwareRegisters((JSC::RegisterSetBuilder *)v45);
  v48 = v290.n128_u64[0] | v47 | 0xFF003FF80000;
  v290.n128_u64[0] = v48;
  v290.n128_u64[1] |= v49;
  if ((v41 & 0x40) != 0)
    goto LABEL_153;
  v50 = v48 | (1 << v41);
  v290.n128_u64[0] = v50;
  if (v42 != 255)
  {
    if ((v42 & 0x40) != 0)
      goto LABEL_153;
    v50 |= 1 << v42;
    v290.n128_u64[0] = v50;
  }
  v51 = v44 & 0x7F;
  if ((v44 & 0x7Fu) >= 0x40)
    goto LABEL_153;
  v52 = v50 | (1 << v51);
  v290.n128_u64[0] = v52;
  if (v296 - 6 <= 2)
  {
    if ((v295 & 0x40) != 0)
      goto LABEL_153;
    v52 |= 1 << v295;
    v290.n128_u64[0] = v52;
  }
  if (v294 - 6 <= 2)
  {
    if ((v293 & 0x40) != 0)
      goto LABEL_153;
    v52 |= 1 << v293;
    v290.n128_u64[0] = v52;
  }
  if (v292 - 6 > 2)
    goto LABEL_18;
  if ((v291 & 0x40) != 0)
  {
LABEL_153:
    __break(1u);
LABEL_154:
    JUMPOUT(0x197DDDCBCLL);
  }
  v290.n128_u64[0] = (1 << v291) | v52;
LABEL_18:
  v275 = v38;
  v276 = v6;
  JSC::ScratchRegisterAllocator::ScratchRegisterAllocator(v288, &v290);
  ScratchGPR = JSC::ScratchRegisterAllocator::allocateScratchGPR((JSC::ScratchRegisterAllocator *)v288);
  v59 = JSC::ScratchRegisterAllocator::allocateScratchGPR((JSC::ScratchRegisterAllocator *)v288);
  if (*(_BYTE *)(a1 + 40))
    v60 = JSC::ScratchRegisterAllocator::allocateScratchGPR((JSC::ScratchRegisterAllocator *)v288);
  else
    v60 = -1;
  if (v289)
  {
    __break(0xC471u);
    goto LABEL_154;
  }
  v287[0] = a2;
  v287[1] = &v298;
  v287[2] = a1 + 48;
  v61 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 8) + 160) + 184);
  v274 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 8) + 160) + 184);
  v62 = (JSC::ARM64LogicalImmediate *)(v61 >> 3);
  if (*(_BYTE *)(a1 + 40))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v61 >> 3), v59, v54, v55, v56, v57, v58);
    __dst = v286;
    p_dst = 2;
    JSC::emitSetupVarargsFrameFastCase(*(_QWORD *)(a1 + 48), a2, v59, ScratchGPR, v59, v60, *(_QWORD *)(a1 + 56), **(unsigned int **)(a1 + 64), (uint64_t)&__dst);
    JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), v63, v64, v65, v66, v67, v68, v69, (int *)v300);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v70, v71, v72, v73, v74, v75);
    if (*(_BYTE *)(a2 + 328))
      v82 = 69;
    else
      v82 = 65;
    v280[0] = v300[0];
    v280[1] = 0;
    v281 = v82;
    v282 = 15;
    v283 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&__dst, a2, v76, v77, v78, v79, v80, v81);
    v83 = *(_QWORD *)(a2 + 336);
    JSC::CodeOrigin::CodeOrigin(&v279, (const JSC::CodeOrigin *)(a1 + 24));
    v89 = (_QWORD *)(v279 & 0xFFFFFFFF8);
    if ((v279 & 1) != 0)
      v89 = (_QWORD *)*v89;
    v90 = v276;
    v91 = v275;
    if (v89)
      v83 = v89[1];
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(v83 + 8), 0, v84, v85, v86, v87, v88);
    if ((v279 & 1) != 0 && (v279 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v279 & 0xFFFFFFFF8, v92, v93, v94, v95, v96, v97, v98);
    JSC::MacroAssemblerARM64::abortWithReason((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)0xEB, v99, v100, v101, v102, v103, v104);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v280, a2, v105, v106, v107, v108, v109, v110);
    v118 = __dst;
    if (v286 != __dst && __dst)
    {
      __dst = 0;
      LODWORD(p_dst) = 0;
      WTF::fastFree((unint64_t)v118, v111, v112, v113, v114, v115, v116, v117);
    }
    goto LABEL_33;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)(v61 >> 3), ScratchGPR, v54, v55, v56, v57, v58);
  v155 = *(_QWORD *)(a2 + 336);
  JSC::CodeOrigin::CodeOrigin(&v278, (const JSC::CodeOrigin *)(a1 + 24));
  v163 = (_QWORD *)(v278 & 0xFFFFFFFF8);
  if ((v278 & 1) != 0)
    v163 = (_QWORD *)*v163;
  if (v163)
    v155 = v163[1];
  v164 = *(_QWORD *)(v155 + 8);
  v165 = (JSC::ARM64LogicalImmediate *)**(unsigned int **)(a1 + 64);
  __dst = v286;
  LODWORD(p_dst) = 2;
  if (v42 == 1)
  {
    if ((_DWORD)ScratchGPR == 2)
      goto LABEL_82;
    v272 = v165;
    v273 = v164;
    v166 = 0;
    goto LABEL_63;
  }
  v272 = v165;
  v273 = v164;
  LOWORD(v286[0]) = v42 | 0x100;
  v166 = 1;
  HIDWORD(p_dst) = 1;
  if ((_DWORD)ScratchGPR != 2)
  {
LABEL_63:
    *((_WORD *)v286 + v166++) = ScratchGPR | 0x200;
    HIDWORD(p_dst) = v166;
    goto LABEL_64;
  }
  do
  {
LABEL_64:
    v167 = 0;
    v168 = 0;
    v169 = v166;
    do
    {
      if ((*((_BYTE *)__dst + v167 + 1) & 0x40) != 0)
        goto LABEL_153;
      v168 |= 1 << *((_BYTE *)__dst + v167 + 1);
      v167 += 2;
    }
    while (2 * v166 != v167);
    v170 = 0;
    do
    {
      v171 = *((_BYTE *)__dst + v170) & 0x7F;
      if (v171 >= 0x40)
        goto LABEL_153;
      v168 &= ~(1 << v171);
      v170 += 2;
    }
    while (2 * v166 != v170);
    v172 = (uint8x8_t)vcnt_s8((int8x8_t)v168);
    v172.i16[0] = vaddlv_u8(v172);
    v173 = v172.i32[0];
    v174 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v168));
    v174.i16[0] = vaddlv_u8(v174);
    if (v174.i32[0] + v173)
    {
      v175 = 0;
      if (v166 <= 1uLL)
        v169 = 1;
      v176 = 2 * v169;
      while (1)
      {
        v177 = *((_BYTE *)__dst + v175 + 1);
        if ((v177 & 0x7Fu) >= 0x40)
          goto LABEL_153;
        if (((v168 >> (v177 & 0x7F)) & 1) != 0)
          break;
        v175 += 2;
        if (v176 == v175)
          goto LABEL_77;
      }
      JSC::MacroAssemblerARM64::move((_DWORD *)a2, *((char *)__dst + v175), v177, v158, v159, v160, v161, v162);
      memmove((char *)__dst + v175, (char *)__dst + v175 + 2, 2 * HIDWORD(p_dst) - v175 - 2);
      v166 = --HIDWORD(p_dst);
    }
    else
    {
      v267 = *((_BYTE *)__dst + 1);
      v271 = *(_BYTE *)__dst;
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v267, v158, v159, v160, v161, v162);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(p_dst) - 2);
      v268 = --HIDWORD(p_dst);
      if (HIDWORD(p_dst))
      {
        v269 = __dst;
        v270 = 2 * v268;
        while (*v269 != v267)
        {
          v269 += 2;
          v270 -= 2;
          if (!v270)
            goto LABEL_129;
        }
        *v269 = v271;
      }
LABEL_129:
      WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)v280, 0);
      v166 = HIDWORD(p_dst);
    }
LABEL_77:
    ;
  }
  while (v166);
  v178 = __dst;
  v164 = v273;
  v165 = v272;
  if (v286 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(p_dst) = 0;
    WTF::fastFree((unint64_t)v178, v156, v157, v158, v159, v160, v161, v162);
  }
LABEL_82:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v165, 3, v158, v159, v160, v161, v162);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v164, 0, v179, v180, v181, v182, v183);
  if ((v278 & 1) != 0 && (v278 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v278 & 0xFFFFFFFF8, v184, v185, v186, v187, v188, v189, v190);
  JSC::MacroAssemblerARM64::move((_DWORD *)a2, 0, ScratchGPR, v191, v192, v193, v194, v195);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v62, v59, v196, v197, v198, v199, v200);
  JSC::B3::ValueRep::emitRestore((uint64_t)&v293, (JSC::MacroAssemblerARM64 *)a2, v42 & 0x7F, v201, v202, v203, v204, v205);
  JSC::emitSetVarargsFrame((_DWORD *)a2, ScratchGPR, 0, v59, v59, v206, v207, v208);
  JSC::MacroAssemblerARM64::add64(a2, -*(_DWORD *)(a1 + 72), v59, 31, v209, v210, v211, v212);
  v213 = *(_QWORD *)(a2 + 336);
  JSC::CodeOrigin::CodeOrigin(&v277, (const JSC::CodeOrigin *)(a1 + 24));
  v221 = (_QWORD *)(v277 & 0xFFFFFFFF8);
  if ((v277 & 1) != 0)
    v221 = (_QWORD *)*v221;
  if (v221)
    v213 = v221[1];
  v222 = *(_QWORD *)(v213 + 8);
  v223 = (JSC::ARM64LogicalImmediate *)**(unsigned int **)(a1 + 64);
  __dst = v286;
  p_dst = 3;
  if ((_DWORD)v59 == 1)
  {
    v224 = 0;
  }
  else
  {
    LOWORD(v286[0]) = v59 | 0x100;
    v224 = 1;
    HIDWORD(p_dst) = 1;
  }
  if (v42 != 2)
  {
    *((_WORD *)v286 + v224++) = v42 | 0x200;
    HIDWORD(p_dst) = v224;
  }
  if ((_DWORD)ScratchGPR != 4)
  {
    *((_WORD *)v286 + v224++) = ScratchGPR | 0x400;
    HIDWORD(p_dst) = v224;
    goto LABEL_93;
  }
  if (v224)
  {
    do
    {
LABEL_93:
      v225 = 0;
      v226 = 0;
      v227 = v224;
      do
      {
        if ((*((_BYTE *)__dst + v225 + 1) & 0x40) != 0)
          goto LABEL_153;
        v226 |= 1 << *((_BYTE *)__dst + v225 + 1);
        v225 += 2;
      }
      while (2 * v224 != v225);
      v228 = 0;
      do
      {
        v229 = *((_BYTE *)__dst + v228) & 0x7F;
        if (v229 >= 0x40)
          goto LABEL_153;
        v226 &= ~(1 << v229);
        v228 += 2;
      }
      while (2 * v224 != v228);
      v230 = (uint8x8_t)vcnt_s8((int8x8_t)v226);
      v230.i16[0] = vaddlv_u8(v230);
      v231 = v230.i32[0];
      v232 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v226));
      v232.i16[0] = vaddlv_u8(v232);
      if (v232.i32[0] + v231)
      {
        v233 = 0;
        if (v224 <= 1uLL)
          v227 = 1;
        v234 = 2 * v227;
        while (1)
        {
          v235 = *((_BYTE *)__dst + v233 + 1);
          if ((v235 & 0x7Fu) >= 0x40)
            goto LABEL_153;
          if (((v226 >> (v235 & 0x7F)) & 1) != 0)
            break;
          v233 += 2;
          if (v234 == v233)
            goto LABEL_108;
        }
        JSC::MacroAssemblerARM64::move((_DWORD *)a2, *((char *)__dst + v233), v235, v216, v217, v218, v219, v220);
        memmove((char *)__dst + v233, (char *)__dst + v233 + 2, 2 * HIDWORD(p_dst) - v233 - 2);
        v224 = --HIDWORD(p_dst);
      }
      else
      {
        v236 = *(_BYTE *)__dst;
        v237 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v237, v216, v217, v218, v219, v220);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(p_dst) - 2);
        v238 = --HIDWORD(p_dst);
        if (HIDWORD(p_dst))
        {
          v239 = __dst;
          v240 = 2 * v238;
          while (*v239 != v237)
          {
            v239 += 2;
            v240 -= 2;
            if (!v240)
              goto LABEL_114;
          }
          *v239 = v236;
        }
LABEL_114:
        WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,3u>(std::array<JSC::ARM64Registers::RegisterID,3u>,std::array<JSC::ARM64Registers::RegisterID,3u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)v280, 0);
        v224 = HIDWORD(p_dst);
      }
LABEL_108:
      ;
    }
    while (v224);
    v241 = __dst;
    if (v286 != __dst && __dst)
    {
      __dst = 0;
      LODWORD(p_dst) = 0;
      WTF::fastFree((unint64_t)v241, v214, v215, v216, v217, v218, v219, v220);
    }
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v223, 3, v216, v217, v218, v219, v220);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v222, 0, v242, v243, v244, v245, v246);
  if ((v277 & 1) != 0 && (v277 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v277 & 0xFFFFFFFF8, v247, v248, v249, v250, v251, v252, v253);
  v261 = *(_DWORD *)(a2 + 200);
  v90 = v276;
  v91 = v275;
  if (v261 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v254, v255, v256, v257, v258, v259, v260);
    v261 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v261) = -1862254561;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::B3::ValueRep::emitRestore((uint64_t)&v295, (JSC::MacroAssemblerARM64 *)a2, 0, v256, v257, v258, v259, v260);
  JSC::B3::ValueRep::emitRestore((uint64_t)&v291, (JSC::MacroAssemblerARM64 *)a2, v51, v262, v263, v264, v265, v266);
LABEL_33:
  JSC::MacroAssemblerARM64::store64(a2, 0, 0x80000001FLL, v113, v114, v115, v116, v117);
  JSC::MacroAssemblerARM64::store64(a2, v51, 0x180000001FLL, v119, v120, v121, v122, v123);
  v128 = *(unsigned __int16 *)(a1 + 76);
  if ((v128 - 371) < 2)
  {
    *(_WORD *)((char *)v91 + 17) = *(_WORD *)((_BYTE *)v91 + 17) & 0xFF0F | 0x60;
    p_dst = (uint64_t)&__dst;
    v286[0] = a2;
    v286[1] = a1;
    JSC::CallLinkInfo::emitTailCallFastPath(a2, (unsigned __int8 *)v91, 0, (uint64_t)&__dst, v124, v125, v126, v127);
    JSC::MacroAssemblerARM64::abortWithReason((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)0xED, v142, v143, v144, v145, v146, v147);
  }
  else
  {
    if ((v128 - 247) <= 1)
      v129 = 64;
    else
      v129 = 32;
    *(_WORD *)((char *)v91 + 17) = *(_WORD *)((_BYTE *)v91 + 17) & 0xFF0F | v129;
    JSC::CallLinkInfo::emitFastPath(a2, (unsigned __int8 *)v91, 0);
    JSC::MacroAssemblerARM64::add64(a2, -v274, 29, 31, v130, v131, v132, v133);
  }
  JSC::DeleteByVariant::~DeleteByVariant((JSC::DeleteByVariant *)v288);
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v298, v134, v135, v136, v137, v138, v139, v140);
  *(_BYTE *)(a2 + 212) = v90;
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargs(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(void (*)(void))#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  _DWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)a1, a2, 8, a4, a5, a6, a7, a8);
  v17 = *(_DWORD **)a1;
  v17[52] = 0;
  v18 = v17[50];
  if (v18 + 4 > v17[48])
  {
    v16 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 + 14), v9, v10, v11, v12, v13, v14, v15).n128_u64[0];
    v18 = v17[50];
  }
  *(_DWORD *)(*((_QWORD *)v17 + 7) + v18) = -700514048;
  v17[50] += 4;
  v19 = **(_QWORD **)(a1 + 8);
  JSC::AssemblyHelpers::emitExceptionCheck(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), 0, 1, 0xFFFFFFFFLL, v13, v14, v15, (uint64_t)&v31, v16);
  v25 = v31;
  if (v31 != -1)
  {
    v26 = *(unsigned int *)(v19 + 20);
    if ((_DWORD)v26 == *(_DWORD *)(v19 + 16))
    {
      v27 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19 + 8, (void *)(v26 + 1), (unint64_t)&v31, v20, v21, v22, v23, v24);
      v29 = *v27;
      v28 = (uint64_t *)(v27 + 1);
      v25 = v29;
      v30 = *(_QWORD *)(v19 + 8) + 12 * *(unsigned int *)(v19 + 20);
    }
    else
    {
      v28 = &v32;
      v30 = *(_QWORD *)(v19 + 8) + 12 * v26;
    }
    *(_DWORD *)v30 = v25;
    *(_QWORD *)(v30 + 4) = *v28;
    ++*(_DWORD *)(v19 + 20);
  }
}

void WTF::ScopedLambdaFunctor<void ()(void),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargs(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(void)#1}>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargs(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(void)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  JSC::AssemblyHelpers::emitRestoreCalleeSavesFor(*(JSC::AssemblyHelpers **)a1, (const JSC::RegisterAtOffsetList *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 24) + 256), a3, a4, a5, a6, a7, a8);
  JSC::CCallHelpers::prepareForTailCallSlow(*(_QWORD *)a1, 37, 0, v9, v10, v11, v12, v13);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDirectEval(void)::{lambda(JSC::B3::Value *,JSC::VirtualRegister,int)#1}::operator()(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  *(_QWORD *)&v6 = a2;
  *((_QWORD *)&v6 + 1) = ((a3 << 32) - 0x200000000) >> 29;
  v7 = 10;
  v3 = *(_DWORD *)(result + 12);
  if (v3 == *(_DWORD *)(result + 8))
    return WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ConstrainedValue>(result, (unint64_t)&v6);
  v4 = *(_QWORD *)result + 24 * v3;
  v5 = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *(_OWORD *)v4 = v5;
  ++*(_DWORD *)(result + 12);
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDirectEval(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x40);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

_QWORD *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDirectEval(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::~StackmapGenerationParams(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v9 = a1[4];
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = a1[3];
  a1[3] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(_QWORD *)(v10 + 32);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      v16 = *(_QWORD *)(v10 + 24);
      if ((v16 & 1) != 0)
      {
        v18 = v16 & 0xFFFFFFFF8;
        if (v18)
        {
          v20 = v10;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          v10 = v20;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = a1[2];
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDirectEval(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E35771F8;
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v7 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v18 = a2;
      v20 = result;
      v14 = v6;
      v15 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      a2 = v18;
      result = v20;
      *(_QWORD *)v6 = v14;
      *(_DWORD *)(v6 + 8) = v15;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v2 = v6 | v9;
  }
  *(_QWORD *)(result + 32) = v2;
  v3 = *(unsigned int **)(a2 + 24);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 40) = v3;
  v5 = *(_QWORD *)(a2 + 32);
  if ((v5 & 1) != 0)
  {
    v10 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v11 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v11 != 0x3FFFFFFF)
        ? (v12 = (_DWORD)v11 == -1)
        : (v12 = 1),
          v12))
    {
      v13 = 2;
    }
    else if (v11 >> 28)
    {
      v19 = a2;
      v21 = result;
      v16 = v10;
      v17 = v11;
      v10 = WTF::fastMalloc((WTF *)0x10);
      a2 = v19;
      result = v21;
      *(_QWORD *)v10 = v16;
      *(_DWORD *)(v10 + 8) = v17;
      v13 = 1;
    }
    else
    {
      v13 = v10;
      v10 = v11 << 36;
    }
    v5 = v10 | v13;
  }
  *(_QWORD *)(result + 48) = v5;
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 40);
  return result;
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDirectEval(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v9 = a1[6];
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = a1[5];
  a1[5] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(_QWORD *)(v10 + 32);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      v16 = *(_QWORD *)(v10 + 24);
      if ((v16 & 1) != 0)
      {
        v18 = v16 & 0xFFFFFFFF8;
        if (v18)
        {
          v20 = v10;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          v10 = v20;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = a1[4];
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDirectEval(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDirectEval(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDirectEval(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint8x8_t v54;
  __int32 v55;
  uint8x8_t v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned __int8 v60;
  uint64_t v61;
  void *v62;
  uint64_t (*v63)(JSC::CallFrame *, const WTF::StringImpl *, void *, int8x16_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int8x8_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int8x8_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *result;
  _DWORD v117[3];
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  void *__dst;
  uint64_t v123;
  int v124;
  __int16 v125;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 64);
  JSC::CodeOrigin::CodeOrigin(&v120, (const JSC::CodeOrigin *)(a1 + 16));
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v120);
  if ((v120 & 1) != 0 && (v120 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v120 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 24), a3, (uint64_t *)&__dst);
  v16 = (unsigned int *)__dst;
  JSC::FTL::ExceptionTarget::jumps((JSC::FTL::ExceptionTarget *)__dst, (JSC::CCallHelpers *)a2, &v119);
  if (v16)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v16, v17, v18, v19, v20, v21, v22, v23);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 24), (uint64_t)a3, v15, v19, v20, v21, v22, v23);
  JSC::MacroAssemblerARM64::store32(a2, v15, 0x240000001DLL, v24, v25, v26, v27, v28);
  v29 = *(_QWORD **)(a1 + 8);
  JSC::CodeOrigin::CodeOrigin(&v118, (const JSC::CodeOrigin *)(a1 + 32));
  v37 = WTF::Bag<JSC::OptimizingCallLinkInfo,WTF::RawPtrTraits<JSC::OptimizingCallLinkInfo>,WTF::FastMalloc>::add<JSC::CodeOrigin &,JSC::CodeBlock * const&>((uint64_t *)(v29[3] + 176), &v118, (uint64_t *)(*v29 + 32));
  if ((v118 & 1) != 0 && (v118 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v118 & 0xFFFFFFFF8, v30, v31, v32, v33, v34, v35, v36);
  *(_WORD *)(v37 + 17) = *(_WORD *)(v37 + 17) & 0xFF0F | 0x10;
  v38 = *(_DWORD *)(a2 + 200);
  if (v38 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v30, v31, v32, v33, v34, v35, v36);
    v38 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = -788511775;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a2, 29, 1, v32, v33, v34, v35, v36);
  v46 = *(_DWORD *)(a2 + 200);
  if (v46 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v39, v40, v41, v42, v43, v44, v45);
    v46 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v46) = -788495361;
  *(_DWORD *)(a2 + 200) += 4;
  __dst = &v124;
  v124 = 16908289;
  v125 = 515;
  v123 = 0x300000003;
  v47 = 3;
  do
  {
    v48 = 0;
    v49 = 0;
    v50 = __dst;
    v51 = v47;
    do
    {
      if ((*((_BYTE *)__dst + v48 + 1) & 0x40) != 0)
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      v49 |= 1 << *((_BYTE *)__dst + v48 + 1);
      v48 += 2;
    }
    while (2 * v47 != v48);
    v52 = 0;
    do
    {
      v53 = *((_BYTE *)__dst + v52) & 0x7F;
      if (v53 >= 0x40)
        goto LABEL_41;
      v49 &= ~(1 << v53);
      v52 += 2;
    }
    while (2 * v47 != v52);
    v54 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
    v54.i16[0] = vaddlv_u8(v54);
    v55 = v54.i32[0];
    v56 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v49));
    v56.i16[0] = vaddlv_u8(v56);
    if (v56.i32[0] + v55)
    {
      v57 = 0;
      if (v47 <= 1uLL)
        v51 = 1;
      v51 *= 2;
      while (1)
      {
        v58 = *((_BYTE *)__dst + v57 + 1);
        if ((v58 & 0x7Fu) >= 0x40)
          goto LABEL_41;
        if (((v49 >> (v58 & 0x7F)) & 1) != 0)
          break;
        v57 += 2;
        if (v51 == v57)
          goto LABEL_27;
      }
      JSC::MacroAssemblerARM64::move((_DWORD *)a2, *((char *)__dst + v57), v58, v41, v42, v43, v44, v45);
      memmove((char *)__dst + v57, (char *)__dst + v57 + 2, 2 * HIDWORD(v123) - v57 - 2);
      v47 = --HIDWORD(v123);
    }
    else
    {
      v59 = *(_BYTE *)__dst;
      v60 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, (char)v60, v41, v42, v43, v44, v45);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v123) - 2);
      v61 = --HIDWORD(v123);
      if (HIDWORD(v123))
      {
        LOBYTE(v47) = v59;
        LODWORD(v49) = v60;
        v50 = __dst;
        v51 = 2 * v61;
        while (*v50 != (_DWORD)v49)
        {
LABEL_42:
          v50 += 2;
          v51 -= 2;
          if (!v51)
            goto LABEL_33;
        }
        *v50 = v47;
      }
LABEL_33:
      WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,3u>(std::array<JSC::ARM64Registers::RegisterID,3u>,std::array<JSC::ARM64Registers::RegisterID,3u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v121, 0);
      v47 = HIDWORD(v123);
    }
LABEL_27:
    ;
  }
  while (v47);
  v62 = __dst;
  if (&v124 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v123) = 0;
    WTF::fastFree((unint64_t)v62, v39, v40, v41, v42, v43, v44, v45);
  }
  if (*(_BYTE *)(a1 + 40))
    v63 = operationCallDirectEvalSloppy;
  else
    v63 = operationCallDirectEvalStrict;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)v63, 8, v41, v42, v43, v44, v45);
  *(_DWORD *)(a2 + 208) = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 3594453248, v64, v65, v66, v67, v68, v69);
  v70 = (_DWORD *)(v119 + 8);
  JSC::AssemblyHelpers::emitExceptionCheck(a2, *(_QWORD *)(**(_QWORD **)(a1 + 8) + 16), 0, 1, 1, v71, v72, v73, (uint64_t)v117, v74);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v70, v117, v75, v76, v77, v78, v79, v80);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 0, 0xFFFFFFFFLL, v81, v82, v83, v84, (uint64_t)&__dst, v85);
  v93 = *(_DWORD *)(a2 + 200);
  if (v93 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v86, v87, v88, v89, v90, v91, v92);
    v93 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v93) = -1862237185;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(a2, 0x80000001FLL, 0, v88, v89, v90, v91, v92);
  JSC::AssemblyHelpers::emitVirtualCall((JSC::AssemblyHelpers *)a2, *(JSC::VM **)a1, (JSC::CallLinkInfo *)v37, v94, v95, v96, v97, v98);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&__dst, a2, v99, v100, v101, v102, v103, v104);
  JSC::MacroAssemblerARM64::add64(a2, -*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 8) + 160) + 184), 29, 31, v105, v106, v107, v108);
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v119, v109, v110, v111, v112, v113, v114, v115);
  *(_BYTE *)(a2 + 212) = v6;
  return result;
}

void *JSC::Wasm::WasmCallingConvention::callInformationFor@<X0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, int a3@<W2>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  char v32;
  unint64_t v33;
  char v34;
  void *result;
  int v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v68;
  char v69;
  __int128 v70;
  _BYTE v71[24];
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75[2];

  v74 = 0;
  v75[0] = 0;
  if (a3)
    v6 = 48;
  else
    v6 = 32;
  if (a3)
    v7 = 40;
  else
    v7 = 24;
  if (a3)
    v8 = 2;
  else
    v8 = 3;
  v73 = v6;
  v9 = *((unsigned int *)a2 + 2);
  v64 = v7;
  v65 = v8;
  if ((_DWORD)v9)
  {
    if (v9 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x197DDED44);
    }
    v10 = 24 * v9;
    v11 = WTF::fastMalloc((WTF *)(24 * v9));
    v12 = v11;
    v13 = v11;
    do
    {
      *(_QWORD *)v13 = 0;
      *(_BYTE *)(v13 + 8) = 0;
      v13 += 24;
    }
    while (v13 != v11 + 24 * v9);
    v14 = v10 / 0x18;
    if (*((_DWORD *)a2 + 2))
    {
      v62 = v6;
      v15 = v10 / 0x18;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = v11;
      v20 = v11;
      do
      {
        v21 = (uint64_t *)&(*a2)[16 * (v18 + *((_DWORD *)a2 + 3))];
        v22 = *v21;
        JSC::Wasm::WasmCallingConvention::marshallLocation(a1, a3, *v21, v21[1], v75, &v74, (uint64_t *)&v73, (uint64_t)&v70);
        if (v9 == v18)
        {
          __break(0xC471u);
          JUMPOUT(0x197DDED3CLL);
        }
        v17 |= v22 == 251;
        v16 |= v22 == 254;
        v23 = v70;
        *(_BYTE *)(v20 + 16) = v71[0];
        *(_OWORD *)v20 = v23;
        v20 += 24;
        ++v18;
      }
      while (v18 < *((unsigned int *)a2 + 2));
      v12 = v19;
      v14 = v15;
      v6 = v62;
      v7 = v64;
      goto LABEL_19;
    }
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v17 = 0;
  v16 = 0;
LABEL_19:
  v74 = 0;
  v75[0] = 0;
  v24 = *((_DWORD *)a2 + 3);
  if (!v24)
  {
    v25 = 0;
    v26 = 0;
    goto LABEL_21;
  }
  v26 = 0;
  v47 = 0;
  v48 = 0;
  v49 = *(_DWORD *)(a1 + 12);
  v50 = *(_DWORD *)(a1 + 28);
  v51 = *((unsigned int *)a2 + 3);
  v52 = *a2;
  do
  {
    v54 = *v52;
    v52 += 16;
    v53 = v54;
    if ((v54 - 254) < 2)
    {
LABEL_49:
      v55 = v48 >= v49;
      if (v48 < v49)
        ++v48;
LABEL_51:
      if (v55)
        ++v26;
      goto LABEL_53;
    }
    v56 = v53 - 192;
    if (v56 > 0x3D)
      goto LABEL_53;
    if (((1 << v56) & 0x3800000000000000) != 0)
    {
      v55 = v47 >= v50;
      if (v47 < v50)
        ++v47;
      goto LABEL_51;
    }
    if (((1 << v56) & 0xE7C01C001C001) != 0)
      goto LABEL_71;
    if (((1 << v56) & 0x1801800000000) != 0)
      goto LABEL_49;
LABEL_53:
    --v51;
  }
  while (v51);
  v25 = *((unsigned int *)a2 + 3);
LABEL_21:
  v27 = v73 - v6;
  v28 = (8 * v26);
  if (v28 > (int)v73 - (int)v6)
    v27 = v28;
  v29 = v6 - v28 + ((v27 + 15) & 0xFFFFFFF0);
  v72 = v29;
  *(_QWORD *)&v70 = v71;
  DWORD2(v70) = 1;
  HIDWORD(v70) = v24;
  if (v24 >= 2)
  {
    v61 = v14;
    if (v24 >= 0xAAAAAAB)
    {
LABEL_71:
      __break(0xC471u);
      JUMPOUT(0x197DDECB0);
    }
    v57 = v12;
    v58 = 24 * v25;
    v30 = (_BYTE *)WTF::fastMalloc((WTF *)(24 * v25));
    DWORD2(v70) = (v58 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)&v70 = v30;
    LODWORD(v25) = HIDWORD(v70);
    v24 = HIDWORD(v70);
    v12 = v57;
    v14 = v61;
  }
  else
  {
    v30 = v71;
  }
  if (v24)
  {
    v31 = &v30[24 * v25];
    do
    {
      *(_QWORD *)v30 = 0;
      v30[8] = 0;
      v30 += 24;
    }
    while (v30 != v31);
  }
  if (*((_DWORD *)a2 + 3))
  {
    v59 = v9;
    v60 = v14;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v63 = v12;
    do
    {
      v43 = (uint64_t *)&(*a2)[v39];
      v44 = *v43;
      JSC::Wasm::WasmCallingConvention::marshallLocation(a1, a3, *v43, v43[1], v75, &v74, (uint64_t *)&v72, (uint64_t)&v68);
      if (v42 >= HIDWORD(v70))
      {
        __break(0xC471u);
        JUMPOUT(0x197DDED4CLL);
      }
      v17 |= v44 == 251;
      v41 |= v44 == 254;
      v45 = v70 + v40;
      v46 = v68;
      *(_BYTE *)(v45 + 16) = v69;
      *(_OWORD *)v45 = v46;
      ++v42;
      v40 += 24;
      v39 += 16;
      v12 = v63;
    }
    while (v42 < *((unsigned int *)a2 + 3));
    v29 = v72;
    if ((v41 & 1) != 0)
      v32 = 2;
    else
      v32 = 0;
    LODWORD(v9) = v59;
    v14 = v60;
    v7 = v64;
  }
  else
  {
    v32 = 0;
  }
  v33 = v73;
  v34 = *a4;
  *((_QWORD *)a4 + 1) = v7;
  *((_QWORD *)a4 + 2) = v65;
  a4[24] = 3;
  *((_QWORD *)a4 + 4) = v12;
  *((_DWORD *)a4 + 10) = v14;
  *((_DWORD *)a4 + 11) = v9;
  result = a4 + 64;
  *((_QWORD *)a4 + 6) = a4 + 64;
  *((_DWORD *)a4 + 14) = 1;
  if ((_BYTE *)v70 == v71)
  {
    v36 = HIDWORD(v70);
    if (HIDWORD(v70))
      result = memcpy(result, v71, 24 * ((24 * (unint64_t)HIDWORD(v70) - 24) / 0x18) + 24);
  }
  else
  {
    *((_QWORD *)a4 + 6) = v70;
    v36 = HIDWORD(v70);
    *((_DWORD *)a4 + 14) = DWORD2(v70);
  }
  if (v33 <= v29)
    v37 = v29;
  else
    v37 = v33;
  *((_DWORD *)a4 + 15) = v36;
  *((_QWORD *)a4 + 11) = v37;
  if ((v17 & 1) != 0)
    v38 = 4;
  else
    v38 = 0;
  *a4 = v38 & 0xFE | v16 & 1 | v32 | v34 & 0xF8;
  return result;
}

unsigned int **JSC::Wasm::CallInformation::computeResultsOffsetList@<X0>(unsigned int **this@<X0>, unsigned int **a2@<X8>)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  char v7;
  unsigned int v8;

  v2 = *((_DWORD *)this + 15);
  if (v2)
  {
    v4 = 0;
    v3 = 0;
    v5 = this[6];
    v6 = &v5[6 * v2];
    while (1)
    {
      v7 = *(_BYTE *)v5;
      if (*((_BYTE *)v5 + 8))
      {
        if (*((_BYTE *)v5 + 8) == 1)
        {
          v8 = (v7 + 32) & 0x7F;
          if (v8 >= 0x40)
          {
LABEL_15:
            __break(1u);
            return this;
          }
          v4 |= 1 << v8;
          if (*((unsigned __int8 *)v5 + 16) >= 4u && (v8 & 0x60) == 0x20)
            v3 |= 1 << v8;
        }
      }
      else
      {
        if ((*(_BYTE *)v5 & 0x40) != 0)
          goto LABEL_15;
        v4 |= 1 << v7;
      }
      v5 += 6;
      if (v5 == v6)
        return JSC::RegisterAtOffsetList::RegisterAtOffsetList(a2, v4, v3, 1);
    }
  }
  v3 = 0;
  v4 = 0;
  return JSC::RegisterAtOffsetList::RegisterAtOffsetList(a2, v4, v3, 1);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallWasm(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E3577220;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallWasm(void)::{lambda(JSC::B3::Value *,JSC::VirtualRegister)#1}::operator()(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  __int128 v4;
  _BYTE v5[24];

  *(_QWORD *)v5 = a2;
  *(_OWORD *)&v5[8] = xmmword_1991244B0;
  v2 = *(_DWORD *)(result + 12);
  if (v2 == *(_DWORD *)(result + 8))
    return WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ConstrainedValue>(result, (unint64_t)v5);
  v3 = *(_QWORD *)result + 24 * v2;
  v4 = *(_OWORD *)v5;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)&v5[16];
  *(_OWORD *)v3 = v4;
  ++*(_DWORD *)(result + 12);
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallWasm(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, __n128))(*(_QWORD *)result + 8))(result, v5);
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::B3::Value *,JSC::B3::PatchpointValue *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  JSC::DFG::Node *v35;
  char **v36;
  uint64_t v37;
  WTF *v38;
  uint64_t result;
  char *v40;
  WTF *v41;
  uint64_t v42;

  v11 = (int *)(a1 + 28264);
  v12 = *(_DWORD *)(a1 + 28264);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = *(_QWORD *)(a1 + 27848);
    v41 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v41 = 0x200000002;
    v42 = 0x200000002;
    v21 = (_QWORD *)(v13 + 32);
    v22 = *(unsigned int *)(v13 + 44);
    if ((_DWORD)v22 == *(_DWORD *)(v13 + 40))
    {
      v23 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v41);
      v24 = *(_QWORD *)(v13 + 32) + 16 * *(unsigned int *)(v13 + 44);
    }
    else
    {
      v24 = *v21 + 16 * v22;
      v23 = (unint64_t)&v41;
    }
    *(_QWORD *)v24 = 0;
    *(_QWORD *)(v24 + 8) = 0;
    v25 = *(_QWORD *)v23;
    *(_QWORD *)v23 = 0;
    *(_QWORD *)v24 = v25;
    LODWORD(v25) = *(_DWORD *)(v23 + 8);
    *(_DWORD *)(v23 + 8) = 0;
    *(_DWORD *)(v24 + 8) = v25;
    LODWORD(v25) = *(_DWORD *)(v23 + 12);
    *(_DWORD *)(v23 + 12) = 0;
    *(_DWORD *)(v24 + 12) = v25;
    ++*(_DWORD *)(v13 + 44);
    v12 = v22 | 0x80000000;
    *v11 = v22 | 0x80000000;
    v26 = v41;
    if (v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v26, v14, v15, v16, v17, v18, v19, v20);
      v12 = *v11;
    }
  }
  v27 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationInt64ToBigInt);
  v28 = *a2;
  v29 = *a3;
  v30 = *(_QWORD *)(a1 + 27776);
  v31 = *(JSC::B3::Value **)(a1 + 27760);
  v32 = *(_QWORD *)(a1 + 27768);
  v33 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v33 = off_1E357F5F0;
  *(_DWORD *)(v33 + 8) = -1;
  *(_WORD *)(v33 + 12) = 82;
  *(_DWORD *)(v33 + 16) = v12;
  *(_BYTE *)(v33 + 20) = 4;
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)(v33 + 32) = 0;
  v34 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v33);
  v34[2] = v27;
  *v34 = v34 + 2;
  v34[3] = v28;
  v34[4] = v29;
  v34[1] = 0x300000003;
  *(_QWORD *)v33 = &unk_1E357CF78;
  *(_OWORD *)(v33 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v33 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v33 + 76))
  {
    JSC::B3::Procedure::addValueImpl(v31, (JSC::B3::Value *)v33);
    v41 = (WTF *)v33;
    v36 = (char **)(v30 + 8);
    v37 = *(unsigned int *)(v30 + 20);
    if ((_DWORD)v37 == *(_DWORD *)(v30 + 16))
    {
      v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v41);
      v37 = *(unsigned int *)(v30 + 20);
      *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v37) = *(_QWORD *)v40;
      v38 = v41;
    }
    else
    {
      *(_QWORD *)&(*v36)[8 * v37] = v33;
      v38 = (WTF *)v33;
    }
    *(_DWORD *)(v30 + 20) = v37 + 1;
    *((_QWORD *)v38 + 4) = v30;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

void JSC::Wasm::CallInformation::~CallInformation(JSC::Wasm::CallInformation *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::CallInformation *v9;
  unint64_t v11;

  v9 = (JSC::Wasm::CallInformation *)*((_QWORD *)this + 6);
  if ((JSC::Wasm::CallInformation *)((char *)this + 64) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Wasm::WasmCallingConvention::marshallLocation(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X4>, unint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD v23[2];

  v23[0] = a3;
  v23[1] = a4;
  v14 = JSC::Wasm::Type::width((JSC::Wasm::Type *)v23);
  if (v14 >= 5)
    goto LABEL_16;
  v15 = qword_199124978[(char)v14];
  if (LOBYTE(v23[0]) - 254 >= 2)
  {
    if (LOBYTE(v23[0]) - 227 > 0x1A)
      goto LABEL_16;
    v22 = 1 << (LOBYTE(v23[0]) + 29);
    if ((v22 & 0x7000000) != 0)
    {
      JSC::Wasm::WasmCallingConvention::marshallLocationImpl<JSC::ARM64Registers::FPRegisterID>(a2, a1 + 16, a6, a7, v15, a8);
      return;
    }
    if ((v22 & 0x3003) == 0)
    {
LABEL_16:
      __break(0xC471u);
      JUMPOUT(0x197DDF354);
    }
  }
  v16 = (v15 + 7) & -v15;
  if (v16 > 8)
    v17 = 4;
  else
    v17 = byte_1991249A0[(int)v16];
  v18 = *a5;
  v19 = *(unsigned int *)(a1 + 12);
  ++*a5;
  if (v18 >= v19)
  {
    v20 = 2;
    if (!a2)
      v20 = 3;
    v21 = *a7;
    *a7 += v16;
  }
  else
  {
    v20 = 0;
    v21 = *(unsigned __int8 *)(*(_QWORD *)a1 + v18);
  }
  *(_QWORD *)a8 = v21;
  *(_QWORD *)(a8 + 8) = v20;
  *(_BYTE *)(a8 + 16) = v17;
}

uint64_t JSC::Wasm::Type::width(JSC::Wasm::Type *this)
{
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)this;
  result = 2;
  if (v1 != 255)
  {
    switch(v1)
    {
      case 206:
      case 207:
      case 208:
      case 222:
      case 223:
      case 224:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 241:
      case 242:
      case 243:
        goto LABEL_6;
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 225:
      case 226:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 244:
      case 245:
      case 246:
      case 247:
      case 248:
      case 249:
      case 250:
        goto LABEL_7;
      case 227:
      case 228:
      case 239:
      case 240:
      case 252:
      case 254:
        return 3;
      case 251:
        return 4;
      case 253:
        return result;
      default:
        if (v1 != 192)
        {
LABEL_7:
          __break(0xC471u);
          JUMPOUT(0x197DDF3E4);
        }
LABEL_6:
        result = 0;
        break;
    }
  }
  return result;
}

void JSC::Wasm::WasmCallingConvention::marshallLocationImpl<JSC::ARM64Registers::FPRegisterID>(int a1@<W1>, uint64_t a2@<X2>, unint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = (a5 + 7) & -a5;
  if (v6 > 8)
    v7 = 4;
  else
    v7 = byte_1991249A0[(int)v6];
  v8 = *a3;
  v9 = *(unsigned int *)(a2 + 12);
  ++*a3;
  if (v8 >= v9)
  {
    v11 = 2;
    if (!a1)
      v11 = 3;
    v10 = *a4;
    *a4 += v6;
  }
  else
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)a2 + v8);
    v11 = 1;
  }
  *(_QWORD *)a6 = v10;
  *(_QWORD *)(a6 + 8) = v11;
  *(_BYTE *)(a6 + 16) = v7;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallWasm(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  int v10;

  v9 = *(_BYTE *)(a2 + 212);
  if (!v9)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (*(_DWORD *)(a3 + 20) <= 1u)
    goto LABEL_9;
  v10 = *(_DWORD *)(a3 + 36);
  if (v10 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DDF5B8);
  }
  if (!v10)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x197DDF5B0);
  }
  JSC::AssemblyHelpers::toBigInt64(a2, *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16) & 0x7F, **(_BYTE **)(a3 + 8) & 0x7F, **(char **)(a3 + 24), *(char *)(*(_QWORD *)(a3 + 24) + 1), a6, a7, a8);
  *(_BYTE *)(a2 + 212) = v9;
}

void JSC::AssemblyHelpers::toBigInt64(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t *v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x8_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  int *v55;
  int *v56;
  int v57;
  char *v58;
  int v59;
  unsigned int v60;
  unsigned int *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  WTF *v65;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  _BYTE v73[24];

  v12 = a2;
  JSC::MacroAssemblerARM64::load32(a1, a2 | 0x800000000, a3, a4, a5, a6, a7, a8);
  v71 = (WTF *)v73;
  v72 = 2;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 0, a3, v13, v14, v15, v16, (uint64_t)&v69, (int8x8_t)2);
  v22 = v69;
  if (v69 != -1)
  {
    v23 = HIDWORD(v72);
    if (HIDWORD(v72) == (_DWORD)v72)
    {
      v24 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v71, (void *)(HIDWORD(v72) + 1), (unint64_t)&v69, v17, v18, v19, v20, v21);
      v26 = *v24;
      v25 = (uint64_t *)(v24 + 1);
      v22 = v26;
      v23 = HIDWORD(v72);
    }
    else
    {
      v25 = &v70;
    }
    v27 = (char *)v71 + 12 * v23;
    *(_DWORD *)v27 = v22;
    *(_QWORD *)(v27 + 4) = *v25;
    ++HIDWORD(v72);
  }
  JSC::MacroAssemblerARM64::load64(a1, v12 | 0x1800000000, a4, v17, v18, v19, v20, v21);
  JSC::AssemblyHelpers::cageConditionally((_DWORD *)a1, 0, a4, a3, a5, v28, v29, v30);
  JSC::MacroAssemblerARM64::load64(a1, a4, a3, v31, v32, v33, v34, v35);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197DDF848);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v12 | 0x1000000000, *(char *)(a1 + 304), v36, v37, v38, v39, v40);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 0, 17, v41, v42, v43, v44, (uint64_t)&v67, v45);
  v53 = v67;
  if (v67 != -1)
  {
    v54 = HIDWORD(v72);
    if (HIDWORD(v72) == (_DWORD)v72)
    {
      v55 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v71, (void *)(HIDWORD(v72) + 1), (unint64_t)&v67, v48, v49, v50, v51, v52);
      v57 = *v55;
      v56 = v55 + 1;
      v53 = v57;
      v54 = HIDWORD(v72);
    }
    else
    {
      v56 = &v68;
    }
    v58 = (char *)v71 + 12 * v54;
    *(_DWORD *)v58 = v53;
    *(_QWORD *)(v58 + 4) = *(_QWORD *)v56;
    ++HIDWORD(v72);
  }
  if ((_DWORD)a3 == 31)
    v59 = -885037057;
  else
    v59 = a3 & 0x1F | ((a3 & 0x1F) << 16) | 0xCB0003E0;
  v61 = (unsigned int *)(a1 + 200);
  v60 = *(_DWORD *)(a1 + 200);
  if (v60 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)v46, v47, v48, v49, v50, v51, v52);
    v60 = *v61;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v60) = v59;
  *v61 += 4;
  if (HIDWORD(v72))
  {
    v62 = 0;
    v63 = 0;
    v64 = 12 * HIDWORD(v72);
    do
    {
      if (v63 >= HIDWORD(v72))
      {
        __break(0xC471u);
        JUMPOUT(0x197DDF860);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v71 + v62), a1, v47, v48, v49, v50, v51, v52);
      ++v63;
      v62 += 12;
    }
    while (v64 != v62);
  }
  v65 = v71;
  if (v73 != (_BYTE *)v71 && v71 != 0)
  {
    v71 = 0;
    LODWORD(v72) = 0;
    WTF::fastFree((unint64_t)v65, v46, v47, v48, v49, v50, v51, v52);
  }
}

__n128 WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallWasm(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}>::SharedTaskFunctor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E3577248;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v7 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = a2;
      v13 = a1;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      a2 = v12;
      a1 = v13;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v2 = v6 | v9;
  }
  *(_QWORD *)(a1 + 24) = v2;
  v3 = *(unsigned int **)(a2 + 16);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallWasm(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallWasm(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallWasm(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallWasm(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(*(_QWORD *)(*a1 + 24) + 64);
  JSC::CodeOrigin::CodeOrigin(&v43, (const JSC::CodeOrigin *)(a1 + 1));
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v43);
  if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v43 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(a1[2], a3, v15, v10, v11, v12, v13, v14);
  JSC::MacroAssemblerARM64::store32(a2, v15, 0x240000001DLL, v16, v17, v18, v19, v20);
  v28 = a1[3];
  v29 = *(_QWORD *)(v28 + 16);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 56) + 8) + 104) != -1)
  {
    v30 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 56) + 16) + 8) + 6);
    if (v30 != 1)
    {
      if (v30)
      {
        JSC::MacroAssemblerARM64::load64(a2, 0x2800000013, 22, v23, v24, v25, v26, v27);
      }
      else
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 64) + 8) + 5) == 1)
          goto LABEL_6;
        v42 = *(_DWORD *)(a2 + 200);
        if (v42 + 4 > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
          v42 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v42) = -1455235466;
        *(_DWORD *)(a2 + 200) += 4;
      }
      JSC::AssemblyHelpers::cageConditionally((_DWORD *)a2, 0, 22, 23, 8, v25, v26, v27);
    }
  }
LABEL_6:
  JSC::CCallHelpers::storeWasmCalleeCallee((JSC::CCallHelpers *)a2, *(const void ***)(a1[4] + 56), v22, v23, v24, v25, v26, v27);
  JSC::MacroAssemblerARM64::load64(a2, *(_QWORD *)(a1[4] + 48), 8, v31, v32, v33, v34, v35);
  *(_DWORD *)(a2 + 208) = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 3594453248, v36, v37, v38, v39, v40, v41);
  *(_BYTE *)(a2 + 212) = v6;
}

void JSC::CCallHelpers::storeWasmCalleeCallee(JSC::CCallHelpers *this, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  const void *v20;

  if ((_BYTE)word_1ECF4C286)
  {
    v20 = *a2;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [3],WTF::RawHex>((uint64_t)this, "> ", &v20);
  }
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197DDFD84);
  }
  v10 = *a2;
  *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v10, *((char *)this + 272), a4, a5, a6, a7, a8);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197DDFDA4);
  }
  *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
  v18 = *((unsigned __int8 *)this + 272);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "< Store Callee's wasm callee");
  v19 = *((_DWORD *)this + 50);
  if (v19 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)this + 56), v11, v12, v13, v14, v15, v16, v17);
    v19 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v19) = v18 | 0xF80083E0;
  *((_DWORD *)this + 50) += 4;
}

void JSC::MacroAssemblerARM64::loadPair64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if ((a3 & 7) != 0 || (((int)a3 >> 3) + 64) > 0x7F)
  {
    v14 = a3 << 32;
    if ((_DWORD)a2 == (_DWORD)a4)
    {
      JSC::MacroAssemblerARM64::load64((uint64_t)a1, (v14 + 0x800000000) | a2, a5, a4, a5, a6, a7, a8);
      v20 = v14 | a2;
      v21 = (uint64_t)a1;
      v22 = a2;
    }
    else
    {
      v23 = a2;
      JSC::MacroAssemblerARM64::load64((uint64_t)a1, v14 | a2, a4, a4, a5, a6, a7, a8);
      v20 = (v14 + 0x800000000) | v23;
      v21 = (uint64_t)a1;
      v22 = a5;
    }
    JSC::MacroAssemblerARM64::load64(v21, v20, v22, v15, v16, v17, v18, v19);
  }
  else
  {
    v11 = a4 & 0x1F | (32 * a2);
    v12 = v11 | 0xA9400000 | ((((int)a3 >> 3) & 0x7F) << 15) | ((a5 & 0x1F) << 10);
    v13 = a1[50];
    if (v13 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, v11, a5, a6, a7, a8);
      v13 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = v12;
    a1[50] += 4;
  }
}

{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((a3 & 7) != 0 || (((int)a3 >> 3) + 64) > 0x7F)
  {
    v12 = a2 | (unint64_t)(a3 << 32);
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)a1, v12, a4, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)a1, v12 + 0x800000000, a5, v13, v14, v15, v16, v17);
  }
  else
  {
    v10 = a4 | (32 * a2) | ((_DWORD)a5 << 10) | ((((int)a3 >> 3) & 0x7F) << 15) | 0x6D400000;
    v11 = a1[50];
    if (v11 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v11 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v10;
    a1[50] += 4;
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [3],WTF::RawHex>(uint64_t a1, const char *a2, const void **a3)
{
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  void (**v41)(WTF::StringPrintStream *__hidden);
  WTF *v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v41 = off_1E3572250;
    v42 = (WTF *)v44;
    v43 = xmmword_199122F80;
    v44[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v41, "%s", a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v41, "%p", *a3);
    v41[5]((WTF::StringPrintStream *)&v41);
    if (v42)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v42, v43, (uint64_t *)&v38);
      v12 = v38;
    }
    else
    {
      v12 = 0;
    }
    v13 = *(_DWORD *)(a1 + 200);
    v39 = v13;
    v38 = 0;
    v40 = v12;
    v14 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 224))
    {
      v15 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v14 + 1, (unint64_t)&v39);
      v16 = *(unsigned int *)(a1 + 228);
      v17 = *(_QWORD *)(a1 + 216) + 16 * v16;
      *(_DWORD *)v17 = *(_DWORD *)v15;
      v18 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v40;
      *(_DWORD *)(a1 + 228) = v16 + 1;
      v40 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 216) + 16 * v14;
      *(_DWORD *)v20 = v13;
      *(_QWORD *)(v20 + 8) = v12;
      *(_DWORD *)(a1 + 228) = v14 + 1;
    }
    v21 = v38;
    v38 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
    if (v42 != (WTF *)v44)
      WTF::fastFree((unint64_t)v42, v5, v6, v7, v8, v9, v10, v11);
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<long long (*)(JSC::JSGlobalObject *,long long,JSC::PropertyName,void *),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  JSC::DFG::Node *v20;
  char **v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  char *v25;
  JSC::B3::Value *v26;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), (uint64_t)vmEntryCustomGetter);
  v14 = *a3;
  v15 = *a4;
  v16 = a1[3472];
  v17 = (JSC::B3::Value *)a1[3470];
  v18 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(2, a1[3471], v13, *a2, v14, v15, *a5);
  JSC::B3::Procedure::addValueImpl(v17, v18);
  v26 = v18;
  v21 = (char **)(v16 + 8);
  v22 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v16 + 16))
  {
    v25 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v26);
    v22 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v22) = *(_QWORD *)v25;
    v23 = v26;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v18;
    v23 = v18;
  }
  *(_DWORD *)(v16 + 20) = v22 + 1;
  *((_QWORD *)v23 + 4) = v16;
  return v18;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<WTF::FunctionPtr<(WTF::PtrTag)57072,long long ()(JSC::JSGlobalObject *,long long,JSC::PropertyName),(WTF::FunctionAttributes)1>,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::DFG::Node *v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v14 = *a4;
  v15 = *(_QWORD *)(a1 + 27776);
  v18 = JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), 2, *(_QWORD *)(a1 + 27768), v13, *a3, v14, *a5);
  v24 = v18;
  v19 = (char **)(v15 + 8);
  v20 = *(unsigned int *)(v15 + 20);
  if ((_DWORD)v20 == *(_DWORD *)(v15 + 16))
  {
    v23 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, v20 + 1, (unint64_t)&v24);
    v20 = *(unsigned int *)(v15 + 20);
    *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v20) = *(_QWORD *)v23;
    v21 = v24;
  }
  else
  {
    *(_QWORD *)&(*v19)[8 * v20] = v18;
    v21 = v18;
  }
  *(_DWORD *)(v15 + 20) = v20 + 1;
  *(_QWORD *)(v21 + 32) = v15;
  return v18;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<void (*)(JSC::JSGlobalObject *,long long,long long,JSC::PropertyName,void *),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  JSC::DFG::Node *v20;
  char **v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  JSC::B3::Value *v31;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)vmEntryCustomSetter);
  v15 = *a4;
  v16 = *a5;
  v17 = *(_QWORD *)(a1 + 27776);
  v18 = *(JSC::B3::Value **)(a1 + 27760);
  v19 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(0, *(_QWORD *)(a1 + 27768), v14, *a2, *a3, v15, v16, *a6);
  JSC::B3::Procedure::addValueImpl(v18, v19);
  v31 = v19;
  v21 = (char **)(v17 + 8);
  v22 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v17 + 16))
  {
    v30 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v31);
    v22 = *(unsigned int *)(v17 + 20);
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v22) = *(_QWORD *)v30;
    v19 = v31;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
  }
  *(_DWORD *)(v17 + 20) = v22 + 1;
  *((_QWORD *)v19 + 4) = v17;
  if (JSC::DFG::mayExit(*(JSC::DFG **)a1, *(JSC::DFG::Graph **)(a1 + 28224), v20))
}

uint64_t JSC::DFG::Node::argumentsChild(JSC::DFG::Node *this)
{
  unsigned int v1;
  uint64_t result;
  BOOL v3;

  v1 = *((unsigned __int16 *)this + 9);
  if (v1 <= 0x62)
  {
    if (v1 - 96 < 3)
      return (uint64_t)this + 24;
  }
  else
  {
    if (v1 - 99 < 2)
      return (uint64_t)this + 32;
    v3 = v1 - 245 > 7 || ((1 << (v1 + 11)) & 0xCF) == 0;
    if (!v3 || v1 - 371 < 2)
      return (uint64_t)this + 40;
  }
  result = 1029;
  __break(0xC471u);
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,long long,unsigned int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationSizeOfVarargs);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,int,long long,unsigned int,unsigned int,unsigned int),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::DFG::Node *v17;

  v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationLoadVarargs);
  v16 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 2, *(_QWORD *)(a1 + 27768), v15, *a2, *a3, *a4, *a5, *a6, *a7);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileForwardVarargsWithSpread(JSC::DFG::Node **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int8x8_t v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  int8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::FTL::AbstractHeap *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  JSC::B3::Value *v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  JSC::B3::Value *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::DFG::Node *v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::FTL::IndexedAbstractHeap *v49;
  uint64_t v50;
  JSC::B3::Value *v51;
  JSC::B3::Value *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::B3::Value *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  _QWORD v62[2];
  JSC::B3::Value *v63;

  v8 = *(_QWORD *)JSC::DFG::Node::argumentsChild(this[3528]) & 0xFF00FFFFFFFFFFFFLL;
  if (*(unsigned __int16 *)(v8 + 0x12) - 350 >= 3)
  {
    result = 12874;
    __break(0xC471u);
  }
  else
  {
    v11 = *((_QWORD *)this[3528] + 9);
    v12 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(this + 3455), *(_DWORD *)(v11 + 24));
    v13 = JSC::FTL::Output::above((JSC::FTL::Output *)(this + 3455), v10, v12);
    JSC::FTL::Output::store((uint64_t)(this + 3455), (uint64_t)v10, v21, v22);
    v62[0] = this;
    v62[1] = &v63;
    v63 = v29;
    v30 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), 0);
    v31 = (JSC::B3::Value *)_ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB331compileForwardVarargsWithSpreadEvENKUlT_PNS_3DFG4NodeEPNS_2B35ValueEE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaISA_EEEEEES9_S3_S6_S9_((uint64_t)v62, (uint64_t)v62, v8, v30);
    v32 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
    v33 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
    v34 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v31);
    v36 = v35;
    v37 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), *(unsigned int *)(v11 + 20));
    v38 = JSC::FTL::Output::below((JSC::FTL::Output *)(this + 3455), v31, v37);
    JSC::FTL::Output::branch(this + 3455, (uint64_t)v38, v32, v33, NAN, NAN, v39, v40, v41, v42);
    this[3472] = (JSC::DFG::Node *)v32;
    v43 = this[3473];
    this[3473] = (JSC::DFG::Node *)v33;
    v44 = JSC::FTL::Output::phi(this + 3455, 2);
    v45 = (JSC::B3::Value *)v44;
    if (v34 || v36)
    {
      if ((*(_WORD *)(v34 + 12) & 0xFFF) == 0x98)
        v46 = v34;
      else
        v46 = 0;
      *(_QWORD *)(v46 + 40) = v44;
    }
    v47 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), 10);
    v49 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(this + 2817), (JSC::FTL::Output *)(this + 3455), v63, v45, 0, 0, 0, v48);
    JSC::FTL::Output::store((uint64_t)(this + 3455), v47, v49, v50);
    v51 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), 1);
    v52 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v45, v51);
    v53 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v52);
    if (v53 || v54)
    {
      if ((*(_WORD *)(v53 + 12) & 0xFFF) == 0x98)
        v55 = v53;
      else
        v55 = 0;
      *(_QWORD *)(v55 + 40) = v45;
    }
    v56 = JSC::FTL::Output::below((JSC::FTL::Output *)(this + 3455), v52, v37);
    result = JSC::FTL::Output::branch(this + 3455, (uint64_t)v56, v32, v33, NAN, NAN, v57, v58, v59, v60);
    this[3472] = (JSC::DFG::Node *)v33;
    this[3473] = v43;
  }
  return result;
}

uint64_t _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB331compileForwardVarargsWithSpreadEvENKUlT_PNS_3DFG4NodeEPNS_2B35ValueEE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaISA_EEEEEES9_S3_S6_S9_(uint64_t a1, uint64_t a2, unint64_t a3, JSC::B3::Value *a4)
{
  unint64_t v5;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  JSC::FTL::Output *v12;
  JSC::FTL::IndexedAbstractHeap *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::FTL::IndexedAbstractHeap *v23;
  uint64_t v24;
  JSC::B3::Value *v25;
  JSC::B3::Value **v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  uint64_t v65;
  JSC::FTL::IndexedAbstractHeap *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  JSC::FTL::IndexedAbstractHeap *v70;
  uint64_t v71;
  JSC::B3::Value *v72;
  JSC::B3::Value *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  JSC::B3::Value *v77;
  JSC::B3::Value *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  JSC::B3::Value *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  JSC::FTL::IndexedAbstractHeap *v99;
  uint64_t v100;
  unint64_t v101;
  JSC::B3::Value *v102;
  uint64_t v103;
  JSC::B3::Value *v104;
  JSC::B3::Value *v105;
  uint64_t v106;
  uint64_t v107;
  JSC::B3::Value *v108;

  v5 = a3;
  switch(*(_WORD *)(a3 + 18))
  {
    case 0x15D:
      goto LABEL_22;
    case 0x15E:
      break;
    case 0x15F:
      goto LABEL_5;
    case 0x160:
      goto LABEL_48;
    default:
      goto LABEL_65;
  }
  while (1)
  {
    v5 = *(_QWORD *)(v5 + 24) & 0xFF00FFFFFFFFFFFFLL;
    v8 = *(unsigned __int16 *)(v5 + 18);
    if (v8 == 349)
      break;
    if (v8 == 351)
    {
      a1 = a2;
LABEL_5:
      if (*(_DWORD *)(v5 + 32))
      {
        v9 = 0;
        v10 = *(_QWORD *)a1;
        v11 = *(uint64_t **)(v5 + 72);
        v12 = (JSC::FTL::Output *)(*(_QWORD *)a1 + 27640);
        v13 = (JSC::FTL::IndexedAbstractHeap *)(*(_QWORD *)a1 + 22536);
        do
        {
          v14 = (unint64_t *)(2 * *v11);
          if (*v11 < 0)
            v15 = 63;
          else
            v15 = *v14;
          if (v15 > v9
            && ((v16 = (uint64_t *)(v14 + 1), *v11 >= 0) ? (v17 = v16) : (v17 = v11),
                ((*(unint64_t *)((char *)v17 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
          {
            v18 = v9 + *(_QWORD *)(v5 + 24);
            if (*(_DWORD *)(*(_QWORD *)v10 + 164) <= v18)
            {
              __break(0xC471u);
              JUMPOUT(0x197DE0DECLL);
            }
            v19 = _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB331compileForwardVarargsWithSpreadEvENKUlT_PNS_3DFG4NodeEPNS_2B35ValueEE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaISA_EEEEEES9_S3_S6_S9_(a2, a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 152) + 8 * v18) & 0xFF00FFFFFFFFFFFFLL, a4);
          }
          else
          {
            v20 = v9 + *(_QWORD *)(v5 + 24);
            if (*(_DWORD *)(*(_QWORD *)v10 + 164) <= v20)
            {
              __break(0xC471u);
              JUMPOUT(0x197DE0DF4);
            }
            v23 = JSC::FTL::IndexedAbstractHeap::baseIndex(v13, v12, **(JSC::B3::Value ***)(a1 + 8), a4, 0, 0, 0, v22);
            JSC::FTL::Output::store((uint64_t)v12, v21, v23, v24);
            v25 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v12, 1);
            v19 = JSC::FTL::Output::add(v12, v25, a4);
          }
          a4 = (JSC::B3::Value *)v19;
          ++v9;
        }
        while (v9 < *(unsigned int *)(v5 + 32));
      }
      return (uint64_t)a4;
    }
    if (v8 == 352)
    {
      a1 = a2;
LABEL_48:
      v91 = *(_QWORD *)a1;
      v92 = **(_QWORD **)(v5 + 72);
      if (*(_DWORD *)(v92 + 8))
      {
        v93 = 0;
        v94 = v92 + 16;
        do
        {
          if ((*(_BYTE *)(v92 + 4) & 0xE) == 6)
            v95 = *(_QWORD *)(v94 + 8 * v93) + 0x2000000000000;
          else
            v95 = *(_QWORD *)(v94 + 8 * v93);
          v96 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v91 + 27640), v95);
          if (v93 == 0x20000000)
          {
            __break(0xC471u);
            JUMPOUT(0x197DE0DE4);
          }
          v98 = v96;
          v99 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(v91 + 22536), (JSC::FTL::Output *)(v91 + 27640), **(JSC::B3::Value ***)(a1 + 8), a4, 0, (8 * v93), 0, v97);
          JSC::FTL::Output::store(v91 + 27640, v98, v99, v100);
          ++v93;
          v101 = *(unsigned int *)(v92 + 8);
        }
        while (v93 < v101);
      }
      else
      {
        v101 = 0;
      }
      v102 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v91 + 27640), v101);
      return JSC::FTL::Output::add((JSC::FTL::Output *)(v91 + 27640), v102, a4);
    }
    if (v8 != 350)
    {
LABEL_65:
      __break(0xC471u);
      JUMPOUT(0x197DE0DCCLL);
    }
  }
  a1 = a2;
LABEL_22:
  v26 = *(JSC::B3::Value ***)a1;
  v27 = (uint64_t *)(*(_QWORD *)v5 & 0xFFFFFFFF8);
  if ((*(_QWORD *)v5 & 1) != 0)
    v27 = (uint64_t *)*v27;
  v28 = *(unsigned int *)(v5 + 72);
  v29 = JSC::AssemblyHelpers::argumentsStart(v27);
  v104 = v36;
  v43 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt(v26 + 3455, v42, 2);
  v44 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(v26 + 3455));
  v45 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(v26 + 3455));
  v46 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v26 + 3455), 0);
  v47 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(v26 + 3455), v46);
  v103 = v48;
  v49 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(v26 + 3455), a4);
  v51 = v50;
  v52 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(v26 + 3455), a4);
  v106 = v53;
  v107 = v52;
  v108 = v43;
  v54 = JSC::FTL::Output::isZero64((JSC::FTL::Output *)(v26 + 3455), v43);
  JSC::FTL::Output::branch(v26 + 3455, (uint64_t)v54, v45, v44, NAN, NAN, v55, v56, v57, v58);
  v26[3472] = (JSC::B3::Value *)v44;
  v105 = v26[3473];
  v26[3473] = (JSC::B3::Value *)v45;
  v59 = JSC::FTL::Output::phi(v26 + 3455, 2);
  v60 = (JSC::B3::Value *)v59;
  if (v49 || v51)
  {
    if ((*(_WORD *)(v49 + 12) & 0xFFF) == 0x98)
      v61 = v49;
    else
      v61 = 0;
    *(_QWORD *)(v61 + 40) = v59;
  }
  v62 = (JSC::B3::Value *)JSC::FTL::Output::phi(v26 + 3455, 2);
  v64 = v62;
  if (v47 || v103)
  {
    if ((*(_WORD *)(v47 + 12) & 0xFFF) == 0x98)
      v65 = v47;
    else
      v65 = 0;
    *(_QWORD *)(v65 + 40) = v62;
  }
  v66 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(v26 + 2817), (JSC::FTL::Output *)(v26 + 3455), v104, v62, 0, 0, 0, v63);
  v68 = JSC::FTL::Output::load((uint64_t)(v26 + 3455), v66, v67, 2);
  v70 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(v26 + 2817), (JSC::FTL::Output *)(v26 + 3455), **(JSC::B3::Value ***)(a1 + 8), v60, 0, 0, 0, v69);
  JSC::FTL::Output::store((uint64_t)(v26 + 3455), v68, v70, v71);
  v72 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v26 + 3455), 1);
  v73 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(v26 + 3455), v72, v64);
  v74 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(v26 + 3455), v73);
  if (v74 || v75)
  {
    if ((*(_WORD *)(v74 + 12) & 0xFFF) == 0x98)
      v76 = v74;
    else
      v76 = 0;
    *(_QWORD *)(v76 + 40) = v64;
  }
  v77 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v26 + 3455), 1);
  v78 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(v26 + 3455), v77, v60);
  v79 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(v26 + 3455), v78);
  if (v79 || v80)
  {
    if ((*(_WORD *)(v79 + 12) & 0xFFF) == 0x98)
      v81 = v79;
    else
      v81 = 0;
    *(_QWORD *)(v81 + 40) = v60;
  }
  v82 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(v26 + 3455), v78);
  v84 = v83;
  v85 = JSC::FTL::Output::below((JSC::FTL::Output *)(v26 + 3455), v73, v108);
  JSC::FTL::Output::branch(v26 + 3455, (uint64_t)v85, v44, v45, NAN, NAN, v86, v87, v88, v89);
  v26[3472] = (JSC::B3::Value *)v45;
  v26[3473] = v105;
  return JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v26 + 3455, 2, v107, v106, v82, v84);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildSwitch(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t **v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t **v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  __int128 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;

  v65 = 0;
  v66 = 0;
  if (*((_DWORD *)a2 + 3))
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v63 = 0uLL;
      LODWORD(v64) = 2143289344;
      if (a3 == 2)
      {
        v10 = (uint64_t **)(*a2 + 32 * v9);
        v11 = *((_DWORD *)a2 + 10);
        v12 = *((_DWORD *)v10 + 2);
        if (v12)
        {
          if (v12 != 1)
          {
            if ((v12 - 2) >= 2)
            {
              __break(0xC471u);
              JUMPOUT(0x197DE122CLL);
            }
LABEL_72:
            __break(0xC471u);
            JUMPOUT(0x197DE11E0);
          }
          if (v11 != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197DE1274);
          }
          v14 = *(unsigned __int16 *)v10;
        }
        else if (v11)
        {
          if (v11 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x197DE124CLL);
          }
          v14 = **v10;
        }
        else
        {
          v13 = **v10;
          if (v13)
            v14 = (int)v13;
          else
            v14 = 0;
        }
        v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v14);
        if (v9 >= *((unsigned int *)a2 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x197DE1308);
        }
        v16 = *a2;
        v17 = *(_QWORD *)(a1 + 27864);
        if (v17)
        {
          v18 = *(_QWORD *)(v16 + 32 * v9 + 16);
          v19 = *(_DWORD *)(v17 - 8);
          v20 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = *(_QWORD *)(v17 + 16 * v23);
          if (v24 != v18)
          {
            v43 = 1;
            while (v24)
            {
              v23 = ((_DWORD)v23 + v43) & v19;
              v24 = *(_QWORD *)(v17 + 16 * v23);
              ++v43;
              if (v24 == v18)
                goto LABEL_11;
            }
LABEL_67:
            v17 = 0;
            goto LABEL_12;
          }
LABEL_11:
          v17 = *(_QWORD *)(v17 + 16 * v23 + 8);
        }
      }
      else
      {
        if (a3 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197DE1300);
        }
        v28 = (uint64_t **)(*a2 + 32 * v9);
        v29 = *((_DWORD *)a2 + 10);
        v30 = *((_DWORD *)v28 + 2);
        if (v30)
        {
          if (v30 != 1)
          {
            if ((v30 - 2) < 2)
            {
              __break(0xC471u);
              JUMPOUT(0x197DE120CLL);
            }
            __break(0xC471u);
            JUMPOUT(0x197DE1294);
          }
          if (v29 != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197DE12DCLL);
          }
          LODWORD(v32) = *(unsigned __int16 *)v28;
        }
        else if (v29)
        {
          if (v29 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x197DE12B4);
          }
          v32 = **v28;
        }
        else
        {
          v31 = **v28;
          if (v31)
            LODWORD(v32) = v31;
          else
            LODWORD(v32) = 0;
        }
        v15 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), v32);
        if (v9 >= *((unsigned int *)a2 + 3))
          goto LABEL_72;
        v16 = *a2;
        v17 = *(_QWORD *)(a1 + 27864);
        if (v17)
        {
          v33 = *(_QWORD *)(v16 + 32 * v9 + 16);
          v34 = *(_DWORD *)(v17 - 8);
          v35 = (~(v33 << 32) + v33) ^ ((unint64_t)(~(v33 << 32) + v33) >> 22);
          v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
          v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
          v23 = v34 & ((v37 >> 31) ^ v37);
          v38 = *(_QWORD *)(v17 + 16 * v23);
          if (v38 != v33)
          {
            v39 = 1;
            while (v38)
            {
              v23 = ((_DWORD)v23 + v39) & v34;
              v38 = *(_QWORD *)(v17 + 16 * v23);
              ++v39;
              if (v38 == v33)
                goto LABEL_11;
            }
            goto LABEL_67;
          }
          goto LABEL_11;
        }
      }
LABEL_12:
      v25 = *(_DWORD *)(v16 + 32 * v9 + 24);
      *(_QWORD *)&v63 = v15;
      *((_QWORD *)&v63 + 1) = v17;
      LODWORD(v64) = v25;
      if (v8 == (_DWORD)v66)
      {
        v40 = WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v65, v8 + 1, (unint64_t)&v63);
        v8 = HIDWORD(v66);
        v7 = v65;
        v41 = &v65[3 * HIDWORD(v66)];
        v42 = *(_QWORD *)(v40 + 16);
        *(_OWORD *)v41 = *(_OWORD *)v40;
        v41[2] = v42;
      }
      else
      {
        v26 = v63;
        v27 = &v7[3 * v8];
        v27[2] = v64;
        *(_OWORD *)v27 = v26;
      }
      HIDWORD(v66) = ++v8;
      if (++v9 >= *((unsigned int *)a2 + 3))
        goto LABEL_34;
    }
  }
  v7 = 0;
LABEL_34:
  v44 = *(_QWORD *)(a1 + 27864);
  if (v44)
  {
    v45 = a2[2];
    v46 = *(_DWORD *)(v44 - 8);
    v47 = (~(v45 << 32) + v45) ^ ((unint64_t)(~(v45 << 32) + v45) >> 22);
    v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
    v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
    v50 = v46 & ((v49 >> 31) ^ v49);
    v51 = *(_QWORD *)(v44 + 16 * v50);
    if (v51 == v45)
    {
      v52 = a4;
LABEL_37:
      v53 = *(_QWORD *)(v44 + 16 * v50 + 8);
    }
    else
    {
      v61 = 1;
      v52 = a4;
      while (v51)
      {
        v50 = ((_DWORD)v50 + v61) & v46;
        v51 = *(_QWORD *)(v44 + 16 * v50);
        ++v61;
        if (v51 == v45)
          goto LABEL_37;
      }
      v53 = 0;
    }
  }
  else
  {
    v53 = 0;
    v52 = a4;
  }
  JSC::FTL::Output::switchInstruction<WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((_QWORD *)(a1 + 27640), v52, &v65, v53);
  if (v7)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree((unint64_t)v7, v54, v55, v56, v57, v58, v59, v60);
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<WTF::StringImpl *> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::DFG::Node *v14;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationResolveRope);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v11, v12, *a2, *a3);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::switchString(uint64_t a1, uint64_t a2, JSC::B3::Value *a3, unint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v28;
  JSC::B3::Value *v29;
  JSC::B3::Value *v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t *v44;
  unsigned int v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  unint64_t *v54;
  uint64_t v55;

  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *(uint64_t **)a2;
    v11 = 32 * v8;
    while ((*(_BYTE *)(*v10 + 16) & 4) != 0)
    {
      v12 = *(_DWORD *)(*v10 + 4);
      if (v12 > xmmword_1ECF4C4C0)
        break;
      v9 += v12;
      v10 += 4;
      v11 -= 32;
      if (!v11)
      {
        if (v9 <= DWORD1(xmmword_1ECF4C4C0))
          goto LABEL_7;
        break;
      }
    }
  }
  else
  {
LABEL_7:
    v13 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v14 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v15 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v21, v15, v13, NAN, NAN, v22, v23, v24, v25);
    *(_QWORD *)(a1 + 27776) = v13;
    v26 = *(_QWORD *)(a1 + 27784);
    *(_QWORD *)(a1 + 27784) = v14;
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), a3, *(const JSC::FTL::AbstractHeap **)(a1 + 26504));
    v28 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::Output *)(a1 + 27640), Ptr, (const JSC::FTL::AbstractHeap *)(a1 + 5248));
    v29 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::Output *)(a1 + 27640), Ptr, (const JSC::FTL::AbstractHeap *)(a1 + 5200));
    v30 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 4);
    v31 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v29, v30);
    v32 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 27640), v31);
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v32, v15, v14, NAN, NAN, v33, v34, v35, v36);
    *(_QWORD *)(a1 + 27776) = v14;
    *(_QWORD *)(a1 + 27784) = v15;
    v37 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), Ptr, (const JSC::FTL::AbstractHeap *)(a1 + 5152));
    v54 = 0;
    v55 = 0;
    v38 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v38)
    {
      v39 = *(uint64_t **)a2;
      v40 = *(_QWORD *)a2 + 32 * v38;
      do
      {
        v41 = *v39;
        *(_QWORD *)&v53 = v41;
        *((_QWORD *)&v53 + 1) = v42;
        v43 = HIDWORD(v55);
        if (HIDWORD(v55) == (_DWORD)v55)
        {
        }
        else
        {
          *(_OWORD *)&v54[2 * HIDWORD(v55)] = v53;
          HIDWORD(v55) = v43 + 1;
        }
        v39 += 4;
      }
      while (v39 != (uint64_t *)v40);
      v44 = v54;
      v45 = HIDWORD(v55);
    }
    else
    {
      v45 = 0;
      v44 = 0;
    }
    *(_QWORD *)(a1 + 27776) = v15;
    *(_QWORD *)(a1 + 27784) = v26;
    if (v44)
      WTF::fastFree((unint64_t)v44, v46, v47, v48, v49, v50, v51, v52);
  }
}

uint64_t WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 24 * v9;
      v20 = v5;
      do
      {
        v21 = *(_OWORD *)v20;
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v20 + 16);
        *(_OWORD *)v11 = v21;
        v11 += 24;
        v20 += 24;
        v19 -= 24;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 24 * v4;
      v9 = WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = 24 * v7;
        v18 = v6;
        do
        {
          v19 = *(_OWORD *)v18;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(v18 + 16);
          *(_OWORD *)v9 = v19;
          v9 += 24;
          v18 += 24;
          v17 -= 24;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheckAndExtractResultIfNeeded<JSC::ExceptionOperationResult<WTF::StringImpl *>>(JSC::DFG **a1, JSC::B3::Value *a2, JSC::DFG::Node *a3)
{
  if (JSC::DFG::mayExit(*a1, a1[3528], a3))
  if ((*((_DWORD *)a2 + 4) & 0x80000000) != 0)
    return JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 3455), a2, 0);
  else
    return (uint64_t)a2;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheck<JSC::ExceptionOperationResult<WTF::StringImpl *>>(uint64_t a1, JSC::B3::Value *Ptr)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::JSCell *v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x8_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64x2_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;

  v4 = *(_QWORD *)a1;
  v5 = (uint64_t *)(a1 + 28192);
  JSC::CodeOrigin::CodeOrigin(&v72, (const JSC::CodeOrigin *)(a1 + 28192));
  v19 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v4, &v72, v6, v7, v8, v9, v10, v11);
  if ((v72 & 1) != 0 && (v72 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v72 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  if ((*((_DWORD *)Ptr + 4) & 0x80000000) != 0)
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 27640), Ptr, 1u);
  if (HIBYTE(word_1ECF4C620))
  {
    v46 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationExceptionFuzz);
    JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 0, *(_QWORD *)(a1 + 27768), v46, v53);
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27880), (const JSC::FTL::AbstractHeap *)(a1 + 6304));
  }
  v20 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), Ptr);
  v70 = 0;
  v71 = 2;
  v21 = *(_QWORD *)a1;
  JSC::CodeOrigin::CodeOrigin(&v69, (const JSC::CodeOrigin *)(a1 + 28200));
  v33 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v21, (unint64_t *)&v69, &v71, &v70, v22, v23, v24, v25);
  if ((v69 & 1) != 0 && (v69 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v69 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
  if (v33)
  {
    JSC::CodeOrigin::CodeOrigin(&v67, (const JSC::CodeOrigin *)&v71);
    v59 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v68, v5, (unint64_t *)&v67, v54, v55, v56, v57, v58).u64[0];
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v68, v60, v61, v62, v63, v64, v65, v66);
    if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v67 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  }
  else
  {
    v34 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v20, *(_QWORD *)(a1 + 27856), v34, 0.0, 1.0, v35, v36, v37, v38);
    *(_QWORD *)(a1 + 27776) = v34;
  }
  if ((v71 & 1) != 0 && (v71 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v71 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
}

__n128 WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::SwitchCase>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v3;
  v4[1].n128_u64[0] = v3[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::switchStringSlow(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  WTF *v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int i;
  unsigned int v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char *v68;
  uint64_t v69;
  int v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  JSC::FTL::Output *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v4 = a1;
  v92 = a3;
  v5 = *a1;
  JSC::CodeOrigin::CodeOrigin(&v91, (const JSC::CodeOrigin *)(a1 + 3524));
  v19 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v5, &v91, v6, v7, v8, v9, v10, v11);
  if ((v91 & 1) != 0 && (v91 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v91 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  if (*(_DWORD *)(*v4 + 356) <= *(_QWORD *)(a2 + 32))
  {
    __break(0xC471u);
LABEL_69:
    JUMPOUT(0x197DE1F94);
  }
  v20 = *(_QWORD *)(*(_QWORD *)(*v4 + 344) + 8 * *(_QWORD *)(a2 + 32));
  v84 = (JSC::FTL::Output *)(v4 + 3455);
  v89 = (WTF *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v4 + 3455), v20);
  v27 = v25;
  v89 = 0;
  v90 = 0;
  v88 = 0;
  if (*(_DWORD *)(a2 + 12))
  {
    v81 = v25;
    v82 = a2;
    v28 = 0;
    v83 = v4;
    while (1)
    {
      v29 = *(_QWORD *)a2 + 32 * v28;
      v30 = *(_DWORD *)(v29 + 24);
      v31 = *(_QWORD *)v20;
      v32 = *(unsigned int *)(v20 + 8);
      v85 = *(_QWORD *)(v29 + 16);
      if (*(_QWORD *)v20)
      {
        v33 = *(WTF::StringImpl **)v29;
        v34 = *(_DWORD *)(v20 + 16);
        v35 = *(_DWORD *)(*(_QWORD *)v29 + 16);
        if (v35 < 0x100)
        {
          v36 = WTF::StringImpl::hashSlowCase(v33);
          v31 = *(_QWORD *)v20;
        }
        else
        {
          v36 = v35 >> 8;
        }
        v37 = v32 - 1;
        v38 = (v36 ^ v34) & (v32 - 1);
        v39 = v31 + 16 * v38;
        v40 = *(WTF **)v39;
        if (!*(_QWORD *)v39)
        {
LABEL_19:
          v32 = *(unsigned int *)(v20 + 8);
          v39 = v31 + 16 * v32;
          goto LABEL_20;
        }
        v41 = -1;
        while (1)
        {
          v42 = *((_DWORD *)v40 + 4);
          if (v42 < 0x100)
            v43 = WTF::StringImpl::hashSlowCase(v40);
          else
            v43 = v42 >> 8;
          if (++v41 > ((v38 + (_DWORD)v32 - ((v43 ^ v34) & v37)) & v37))
          {
            v31 = *(_QWORD *)v20;
            goto LABEL_19;
          }
          if (v43 == v36)
          {
            v71 = WTF::equal(*(WTF **)v39, v33, v26);
            v31 = *(_QWORD *)v20;
            if (v71)
            {
              v32 = *(unsigned int *)(v20 + 8);
              goto LABEL_20;
            }
          }
          else
          {
            v31 = *(_QWORD *)v20;
          }
          v38 = (v38 + 1) & v37;
          v39 = v31 + 16 * v38;
          v40 = *(WTF **)v39;
          if (!*(_QWORD *)v39)
            goto LABEL_19;
        }
      }
      v39 = 16 * v32;
LABEL_20:
      v4 = v83;
      if (v31 + 16 * v32 == v39)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*v83, (JSC::DFG::Node *)v83[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4E32, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringSlow(SwitchData *, LValue)", "iter != unlinkedTable.m_offsetTable.end()");
        __break(0xC471u);
        goto LABEL_69;
      }
      v44 = *(unsigned int *)(v39 + 12);
      v45 = v88;
      if (v88
        || (WTF::HashTable<WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>>::expand(&v88),
            (v45 = v88) != 0))
      {
        v46 = *(_DWORD *)(v45 - 8);
      }
      else
      {
        v46 = 0;
      }
      v47 = 0;
      v48 = 9 * ((v44 + ~((_DWORD)v44 << 15)) ^ ((v44 + ~((_DWORD)v44 << 15)) >> 10));
      v49 = (v48 ^ (v48 >> 6)) + ~((v48 ^ (v48 >> 6)) << 11);
      v50 = v49 ^ HIWORD(v49);
      for (i = 1; ; ++i)
      {
        v52 = v50 & v46;
        v53 = (_DWORD *)(v45 + 8 * v52);
        v54 = v53[1];
        if (v54 == 1)
          break;
        if (v54)
        {
          if (v54 == 2)
            v47 = (_QWORD *)(v45 + 8 * v52);
        }
        else if (*v53 == (_DWORD)v44)
        {
          goto LABEL_42;
        }
        v50 = i + v52;
      }
      if (v47)
      {
        *v47 = 0x100000000;
        --*(_DWORD *)(v88 - 16);
        v53 = v47;
      }
      *(_QWORD *)v53 = v44;
      v55 = v88;
      if (v88)
        v56 = *(_DWORD *)(v88 - 12) + 1;
      else
        v56 = 1;
      *(_DWORD *)(v88 - 12) = v56;
      v57 = (*(_DWORD *)(v55 - 16) + v56);
      v58 = *(unsigned int *)(v55 - 4);
      if (v58 > 0x400)
      {
        if (v58 > 2 * v57)
          goto LABEL_37;
      }
      else if (3 * v58 > 4 * v57)
      {
        goto LABEL_37;
      }
      WTF::HashTable<WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>>::expand(&v88);
LABEL_37:
      v59 = JSC::FTL::Output::constInt32(v84, *(_DWORD *)(v39 + 12));
      v60 = v83[3483];
      if (v60)
      {
        v61 = *(_DWORD *)(v60 - 8);
        v62 = (~(v85 << 32) + v85) ^ ((unint64_t)(~(v85 << 32) + v85) >> 22);
        v63 = 9 * ((v62 + ~(v62 << 13)) ^ ((v62 + ~(v62 << 13)) >> 8));
        v64 = (v63 ^ (v63 >> 15)) + ~((v63 ^ (v63 >> 15)) << 27);
        v65 = v61 & ((v64 >> 31) ^ v64);
        v66 = *(_QWORD *)(v60 + 16 * v65);
        if (v66 == v85)
        {
LABEL_39:
          v60 = *(_QWORD *)(v60 + 16 * v65 + 8);
        }
        else
        {
          v70 = 1;
          while (v66)
          {
            v65 = ((_DWORD)v65 + v70) & v61;
            v66 = *(_QWORD *)(v60 + 16 * v65);
            ++v70;
            if (v66 == v85)
              goto LABEL_39;
          }
          v60 = 0;
        }
      }
      *(_QWORD *)&v86 = v59;
      *((_QWORD *)&v86 + 1) = v60;
      LODWORD(v87) = v30;
      if (HIDWORD(v90) == (_DWORD)v90)
      {
        WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::SwitchCase>((uint64_t)&v89, (unint64_t)&v86);
      }
      else
      {
        v67 = HIDWORD(v90) + 1;
        v68 = (char *)v89 + 24 * HIDWORD(v90);
        v69 = v87;
        *(_OWORD *)v68 = v86;
        *((_QWORD *)v68 + 2) = v69;
        HIDWORD(v90) = v67;
      }
LABEL_42:
      ++v28;
      a2 = v82;
      if (v28 >= *(unsigned int *)(v82 + 12))
      {
        v72 = v88;
        v27 = v81;
        goto LABEL_57;
      }
    }
  }
  v72 = 0;
LABEL_57:
  JSC::FTL::Output::switchInstruction<WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v84, v27, (uint64_t **)&v89, v73);
  if (v72)
    WTF::fastFree(v72 - 16, v74, v75, v76, v77, v78, v79, v80);
  if (v89)
    WTF::fastFree((unint64_t)v89, v74, v75, v76, v77, v78, v79, v80);
}

void std::sort[abi:sn180100]<JSC::FTL::`anonymous namespace'::LowerDFGToB3::StringSwitchCase *>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  WTF::StringImpl *v3;

  v2 = 126 - 2 * __clz(((char *)a2 - (char *)a1) >> 4);
  if (a2 == (uint64_t *)a1)
    v3 = 0;
  else
    v3 = (WTF::StringImpl *)v2;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::switchStringRecurse(uint64_t *a1, uint64_t a2, JSC::B3::Value *a3, JSC::B3::Value *a4, uint64_t *a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, int a10)
{
  JSC::FTL::Output *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  BOOL v43;
  JSC::B3::Value *v44;
  JSC::B3::Value *v45;
  unsigned int v46;
  JSC::B3::Value *v47;
  JSC::FTL::AbstractHeap *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  JSC::B3::Value *v61;
  JSC::B3::Value *v62;
  char **v63;
  uint64_t v64;
  JSC::B3::Value *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  JSC::B3::BasicBlock *v72;
  JSC::FTL::Output *v73;
  const JSC::FTL::AbstractHeap *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  int v79;
  unsigned __int8 *v80;
  int v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  JSC::B3::Value *v101;
  JSC::B3::Value *v102;
  JSC::B3::Value *v103;
  JSC::B3::Value *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  int v124;
  JSC::FTL::IndexedAbstractHeap *v126;
  uint64_t *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  unsigned __int8 *v149;
  uint64_t v150;

  v17 = (JSC::FTL::Output *)(a1 + 3455);
  if (a8 == a7)
  {
LABEL_106:
    v73 = v17;
    v72 = (JSC::B3::BasicBlock *)v136;
LABEL_70:
    JSC::FTL::Output::jump(v73, v72, v18, v19, v20, v21, v22, v23);
    return;
  }
  v24 = a8 - a7 - 2;
  v18 = ~a7;
  v20 = a7 + 1;
  v126 = (JSC::FTL::IndexedAbstractHeap *)(a1 + 1825);
  v127 = a1 + 1834;
  v124 = -a8;
  v25 = a8;
  v26 = a7;
  v135 = a5;
  v137 = a1;
  v128 = a8;
  v131 = a8;
  while (1)
  {
    v27 = *((unsigned int *)a5 + 3);
    if (v26 >= v27)
    {
      __break(0xC471u);
      JUMPOUT(0x197DE2B14);
    }
    v19 = v26 + 1;
    v140 = v26;
    v138 = 16 * v26;
    v28 = *(_QWORD *)(*a5 + 16 * v26);
    v29 = *(_DWORD *)(v28 + 4);
    v30 = a6;
    v123 = v24;
    if (v19 >= v25)
    {
      v32 = 1;
      v34 = *(_DWORD *)(v28 + 4);
      v33 = v34;
    }
    else
    {
      if ((int)v27 + (int)v18 <= v24)
      {
        __break(0xC471u);
        JUMPOUT(0x197DE2B1CLL);
      }
      v31 = v19;
      LOBYTE(v32) = 1;
      v33 = *(_DWORD *)(v28 + 4);
      v34 = v33;
      do
      {
        v35 = *(_QWORD *)(*a5 + 16 * v31);
        v36 = *(_DWORD *)(v35 + 4);
        if (v36 >= v29)
          v37 = v29;
        else
          v37 = v36;
        LODWORD(v38) = a6;
        if (a6 < v37)
        {
          v39 = *(_QWORD *)(v28 + 8);
          v40 = *(_DWORD *)(v35 + 16);
          v41 = *(_QWORD *)(v35 + 8);
          if ((*(_BYTE *)(v28 + 16) & 4) != 0)
          {
            v38 = a6;
            if ((v40 & 4) != 0)
            {
              while (*(unsigned __int8 *)(v39 + v38) == *(unsigned __int8 *)(v41 + v38))
              {
                if (v37 == ++v38)
                  goto LABEL_15;
              }
            }
            else
            {
              v38 = a6;
              while (*(_WORD *)(v41 + 2 * v38) == *(unsigned __int8 *)(v39 + v38))
              {
                if (v37 == ++v38)
                  goto LABEL_15;
              }
            }
          }
          else
          {
            v38 = a6;
            if ((v40 & 4) != 0)
            {
              while (*(_WORD *)(v39 + 2 * v38) == *(unsigned __int8 *)(v41 + v38))
              {
                if (v37 == ++v38)
                  goto LABEL_15;
              }
            }
            else
            {
              v38 = a6;
              while (*(unsigned __int16 *)(v39 + 2 * v38) == *(unsigned __int16 *)(v41 + 2 * v38))
              {
                if (v37 == ++v38)
                {
LABEL_15:
                  LODWORD(v38) = v37;
                  break;
                }
              }
            }
          }
        }
        if (v38 < v34)
          v34 = v38;
        v32 = (v33 == v36) & v32;
        if (v36 < v33)
          v33 = v36;
        ++v31;
      }
      while (v31 < v25);
    }
    if (a10)
    {
      if (v33 != a9)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*v137, (JSC::DFG::Node *)v137[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4DA3, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringRecurse(SwitchData *, LValue, LValue, const Vector<StringSwitchCase> &, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)", "alreadyCheckedLength == minLength");
        __break(0xC471u);
        JUMPOUT(0x197DE2B58);
      }
      if ((v32 & 1) == 0)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*v137, (JSC::DFG::Node *)v137[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4DA4, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringRecurse(SwitchData *, LValue, LValue, const Vector<StringSwitchCase> &, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)", "allLengthsEqual");
        __break(0xC471u);
        goto LABEL_168;
      }
    }
    v129 = v20;
    v132 = v19;
    v122 = v18;
    if (v33 < v34)
    {
      JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*v137, (JSC::DFG::Node *)v137[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4DA7, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringRecurse(SwitchData *, LValue, LValue, const Vector<StringSwitchCase> &, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)", "minLength >= commonChars");
      __break(0xC471u);
      JUMPOUT(0x197DE2B04);
    }
    if (v33 <= a9)
      v42 = 1;
    else
      v42 = v32;
    if ((v42 & 1) == 0)
    {
      v101 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v17, v33);
      v102 = JSC::FTL::Output::below(v17, a4, v101);
      JSC::FTL::Output::check((uint64_t)v17, (uint64_t)v102, v136, 2143289344, (uint64_t *)0x7FC00000, NAN);
    }
    v43 = v33 > a9 || a10 == 0;
    if (v43 && ((v32 ^ 1) & 1) == 0)
    {
      v44 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v17, v33);
      v45 = JSC::FTL::Output::notEqual(v17, a4, v44);
      JSC::FTL::Output::check((uint64_t)v17, (uint64_t)v45, v136, 2143289344, (uint64_t *)0x7FC00000, NAN);
    }
    v134 = v32;
    v46 = v34 - a6;
    v47 = a3;
    if (v34 > a6)
    {
      v48 = (JSC::FTL::AbstractHeap *)&v127[6 * a6];
      do
      {
        if (v30 > 0xF)
        {
          v49 = JSC::FTL::IndexedAbstractHeap::atSlow(v126, v30, v18, v19, v20, v21, v22, v23);
        }
        else
        {
          v49 = (uint64_t)v48;
          if (!*((_QWORD *)v48 + 5))
          {
            JSC::FTL::IndexedAbstractHeap::initialize(v126, v48, v30);
            v49 = (uint64_t)v48;
          }
        }
        v50 = *(_QWORD *)(v49 + 24);
        v51 = (uint64_t)v47;
        if (v50)
        {
          v52 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v17, v50);
          v51 = JSC::FTL::Output::add(v17, v47, v52);
        }
        v53 = JSC::FTL::Output::load8ZeroExt32(v17, v49, v51);
        if (v140 >= *((unsigned int *)a5 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x197DE2AC8);
        }
        v54 = *(_QWORD *)(*a5 + v138);
        if (v30 >= *(unsigned int *)(v54 + 4))
        {
          __break(0xC471u);
          JUMPOUT(0x197DE2A84);
        }
        v55 = v53;
        v56 = *(_QWORD *)(v54 + 8);
        if ((*(_BYTE *)(v54 + 16) & 4) != 0)
          v57 = *(unsigned __int8 *)(v56 + v30);
        else
          v57 = *(unsigned __int16 *)(v56 + 2 * v30);
        v58 = JSC::FTL::Output::constInt32(v17, v57);
        v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 312))(v55, v58);
        if (v59 == 2)
        {
          v60 = v137[3472];
          v61 = (JSC::B3::Value *)v137[3470];
          v62 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, v137[3471], v55, v58);
          JSC::B3::Procedure::addValueImpl(v61, v62);
          *(_QWORD *)&v141 = v62;
          v63 = (char **)(v60 + 8);
          v64 = *(unsigned int *)(v60 + 20);
          if ((_DWORD)v64 == *(_DWORD *)(v60 + 16))
          {
            v66 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v63, v64 + 1, (unint64_t)&v141);
            v64 = *(unsigned int *)(v60 + 20);
            *(_QWORD *)(*(_QWORD *)(v60 + 8) + 8 * v64) = *(_QWORD *)v66;
            v65 = (JSC::B3::Value *)v141;
          }
          else
          {
            *(_QWORD *)&(*v63)[8 * v64] = v62;
            v65 = v62;
          }
          v47 = a3;
          *(_DWORD *)(v60 + 20) = v64 + 1;
          *((_QWORD *)v65 + 4) = v60;
          a5 = v135;
        }
        else
        {
          v120 = 3456;
          if (v59 == 1)
            v120 = 3455;
          v62 = (JSC::B3::Value *)v137[v120];
          v47 = a3;
        }
        JSC::FTL::Output::check((uint64_t)v17, (uint64_t)v62, v136, 2143289344, (uint64_t *)0x7FC00000, NAN);
        ++v30;
        v48 = (JSC::FTL::AbstractHeap *)((char *)v48 + 48);
        --v46;
      }
      while (v46);
    }
    v67 = v129;
    if (v33 != v34)
      break;
    v68 = *((unsigned int *)a5 + 3);
    if (v140 >= v68)
    {
      __break(0xC471u);
      JUMPOUT(0x197DE2B78);
    }
    v69 = *a5;
    if (*(_DWORD *)(*(_QWORD *)(*a5 + v138) + 4) != v34)
    {
      JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*v137, (JSC::DFG::Node *)v137[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4DBB, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringRecurse(SwitchData *, LValue, LValue, const Vector<StringSwitchCase> &, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)", "cases[begin].string->length() == commonChars");
      if (*((_DWORD *)a5 + 3) > v140)
      {
        if (*((_DWORD *)v135 + 3) > v140)
        {
          __break(0xC471u);
          JUMPOUT(0x197DE2BE0);
        }
        __break(0xC471u);
        JUMPOUT(0x197DE2CF0);
      }
      __break(0xC471u);
      JUMPOUT(0x197DE2C9CLL);
    }
    if (v132 < v131)
    {
      v70 = 0;
      v71 = 16 * v129;
      v100 = v68 - v129;
      while (1)
      {
        if (v100 == v70)
        {
          __break(0xC471u);
          JUMPOUT(0x197DE2B0CLL);
        }
        if (*(_DWORD *)(*(_QWORD *)(v69 + v71) + 4) <= v34)
          break;
        ++v70;
        v71 += 16;
        if (v124 + (_DWORD)v140 + (_DWORD)v70 == -1)
          goto LABEL_58;
      }
      v121 = v140 + v70 + 1;
      JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*v137, (JSC::DFG::Node *)v137[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4DBD, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringRecurse(SwitchData *, LValue, LValue, const Vector<StringSwitchCase> &, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)", "cases[i].string->length() > commonChars");
      if (*((_DWORD *)a5 + 3) <= v121)
      {
        __break(0xC471u);
        JUMPOUT(0x197DE2CA4);
      }
      if (*((_DWORD *)v135 + 3) > v121)
      {
        __break(0xC471u);
        JUMPOUT(0x197DE2C48);
      }
      __break(0xC471u);
LABEL_168:
      JUMPOUT(0x197DE29ACLL);
    }
LABEL_58:
    if ((v134 & 1) != 0)
    {
      if ((_DWORD)v132 != v128)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*v137, (JSC::DFG::Node *)v137[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4DC0, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringRecurse(SwitchData *, LValue, LValue, const Vector<StringSwitchCase> &, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)", "end == begin + 1");
        __break(0xC471u);
        JUMPOUT(0x197DE2C84);
      }
      v72 = *(JSC::B3::BasicBlock **)(v69 + 16 * v140 + 8);
      v73 = v17;
      goto LABEL_70;
    }
    v103 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v17, v34);
    v104 = JSC::FTL::Output::equal(v17, a4, v103);
    if (v140 >= *((unsigned int *)a5 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x197DE2C8CLL);
    }
    JSC::FTL::Output::check((uint64_t)v17, (uint64_t)v104, *(_QWORD *)(*a5 + 16 * v140 + 8), 2143289344, (uint64_t *)0x7FC00000, NAN);
    a9 = v34 + 1;
    v24 = v123 - 1;
    v18 = (v122 - 1);
    v136 = v105;
    a10 = 0;
    v20 = v129 + 1;
    v25 = v131;
    v26 = v132;
    a6 = v34;
    if (v132 == v131)
      goto LABEL_106;
  }
  if ((int)v140 + 2 > v128)
  {
    JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*v137, (JSC::DFG::Node *)v137[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4DD5, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringRecurse(SwitchData *, LValue, LValue, const Vector<StringSwitchCase> &, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)", "end >= begin + 2");
    __break(0xC471u);
    JUMPOUT(0x197DE2CE0);
  }
  v74 = (const JSC::FTL::AbstractHeap *)JSC::FTL::IndexedAbstractHeap::operator[](v126, v34, v18, v19, v20, v21, v22, v23);
  v130 = JSC::FTL::Output::load8ZeroExt32(v17, v47, v74);
  v149 = 0;
  v150 = 0;
  if (*((_DWORD *)a5 + 3) <= v140)
  {
    __break(0xC471u);
    JUMPOUT(0x197DE2CE8);
  }
  LOBYTE(v147) = WTF::StringImpl::at(*(WTF::StringImpl **)(*a5 + v138), v34);
  HIDWORD(v147) = v140;
  v148 = v132;
  if (v132 >= v131)
    goto LABEL_103;
  v75 = 0;
  v76 = 16 * v67;
  do
  {
    if (v67 + v75 >= (unint64_t)*((unsigned int *)a5 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x197DE2B60);
    }
    v77 = WTF::StringImpl::at(*(WTF::StringImpl **)(*a5 + v76), v34);
    if (v147 != v77)
    {
      v78 = v77;
      v148 = v140 + v75 + 1;
      if (HIDWORD(v150) == (_DWORD)v150)
      {
      }
      else
      {
        v79 = HIDWORD(v150) + 1;
        v80 = &v149[12 * HIDWORD(v150)];
        v81 = v148;
        *(_QWORD *)v80 = v147;
        *((_DWORD *)v80 + 2) = v81;
        HIDWORD(v150) = v79;
      }
      LOBYTE(v147) = v78;
      HIDWORD(v147) = v140 + v75 + 1;
      a5 = v135;
    }
    v148 = v140 + v75 + 2;
    v76 += 16;
    ++v75;
  }
  while ((_DWORD)v140 - v128 + (_DWORD)v75 != -1);
  if (HIDWORD(v150) == (_DWORD)v150)
  {
LABEL_103:
    v82 = HIDWORD(v150);
  }
  else
  {
    v82 = HIDWORD(v150) + 1;
    v83 = &v149[12 * HIDWORD(v150)];
    v84 = v148;
    *(_QWORD *)v83 = v147;
    *((_DWORD *)v83 + 2) = v84;
  }
  v145 = 0;
  v146 = 0;
  if (v82)
  {
    v85 = v82;
    do
    {
      v86 = JSC::FTL::Output::newBlock(v17);
      *(_QWORD *)&v141 = v86;
      v87 = HIDWORD(v146);
      if (HIDWORD(v146) == (_DWORD)v146)
      {
        WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *>((uint64_t)&v145, (unint64_t)&v141);
      }
      else
      {
        v145[HIDWORD(v146)] = v86;
        HIDWORD(v146) = v87 + 1;
      }
      --v85;
    }
    while (v85);
    v143 = 0;
    v144 = 0;
    v88 = v149;
    v89 = JSC::FTL::Output::constInt32(v17, *v149);
    if (!HIDWORD(v146))
      goto LABEL_161;
    v90 = *v145;
    *(_QWORD *)&v141 = v89;
    *((_QWORD *)&v141 + 1) = v90;
    LODWORD(v142) = 2143289344;
    WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::SwitchCase>((uint64_t)&v143, (unint64_t)&v141);
    if (v82 != 1)
    {
      v91 = 1;
      while (1)
      {
        v92 = *v88;
        v94 = v88[12];
        v88 += 12;
        v93 = v94;
        if (v92 >= v94)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*v137, (JSC::DFG::Node *)v137[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4DED, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringRecurse(SwitchData *, LValue, LValue, const Vector<StringSwitchCase> &, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)", "characterCases[i - 1].character < characterCases[i].character");
          __break(0xC471u);
          JUMPOUT(0x197DE2A64);
        }
        v95 = JSC::FTL::Output::constInt32(v17, v93);
        if (v91 >= HIDWORD(v146))
          break;
        v96 = v145[v91];
        *(_QWORD *)&v141 = v95;
        *((_QWORD *)&v141 + 1) = v96;
        LODWORD(v142) = 2143289344;
        if (HIDWORD(v144) == (_DWORD)v144)
        {
          WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::SwitchCase>((uint64_t)&v143, (unint64_t)&v141);
        }
        else
        {
          v97 = HIDWORD(v144) + 1;
          v98 = &v143[3 * HIDWORD(v144)];
          v99 = v142;
          *(_OWORD *)v98 = v141;
          v98[2] = v99;
          HIDWORD(v144) = v97;
        }
        if (v82 == ++v91)
          goto LABEL_108;
      }
LABEL_161:
      __break(0xC471u);
      JUMPOUT(0x197DE2C94);
    }
  }
  else
  {
    v143 = 0;
    v144 = 0;
  }
LABEL_108:
  JSC::FTL::Output::switchInstruction<WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v17, v130, &v143, v136);
  v113 = v137[3473];
  *(_QWORD *)&v141 = v113;
  v114 = HIDWORD(v146);
  if (HIDWORD(v146) == (_DWORD)v146)
  {
    WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *>((uint64_t)&v145, (unint64_t)&v141);
  }
  else
  {
    v145[HIDWORD(v146)] = v113;
    HIDWORD(v146) = v114 + 1;
  }
  if (v82)
  {
    v115 = 0;
    v116 = 0;
    v117 = v34 + 1;
    v118 = (unsigned int *)(v149 + 8);
    do
    {
      if (v116 >= HIDWORD(v146))
      {
        __break(0xC471u);
        JUMPOUT(0x197DE2B68);
      }
      if (++v116 >= HIDWORD(v146))
      {
        __break(0xC471u);
        JUMPOUT(0x197DE2B70);
      }
      *((_OWORD *)v137 + 1736) = *(_OWORD *)&v145[v115];
      ++v115;
      v118 += 3;
    }
    while (v82 != v116);
  }
  if (v137[3473] != (_QWORD)v141)
  {
    JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*v137, (JSC::DFG::Node *)v137[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4DFC, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringRecurse(SwitchData *, LValue, LValue, const Vector<StringSwitchCase> &, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)", "m_out.m_nextBlock == lastNext");
    __break(0xC471u);
    JUMPOUT(0x197DE2A18);
  }
  if (v143)
    WTF::fastFree((unint64_t)v143, v106, v107, v108, v109, v110, v111, v112);
  v119 = (unint64_t)v145;
  if (v145)
  {
    v145 = 0;
    LODWORD(v146) = 0;
    WTF::fastFree(v119, v106, v107, v108, v109, v110, v111, v112);
  }
  if (v149)
    WTF::fastFree((unint64_t)v149, v106, v107, v108, v109, v110, v111, v112);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<unsigned int (*)(JSC::JSGlobalObject *,JSC::UnlinkedStringJumpTable const*,JSC::JSString *),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::DFG::Node *v15;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationSwitchStringAndGetIndex);
  v13 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, 1, v12, *a2, *a3, *a4);
  return v13;
}

void WTF::HashTable<WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t Table;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  Table = WTF::HashTable<WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v15 = 0;
    while (1)
    {
      v16 = (_DWORD *)(v4 + 8 * v15);
      v17 = v16[1];
      if ((v17 - 1) >= 2)
      {
        v18 = *a1;
        if (*a1)
          v19 = *(_DWORD *)(v18 - 8);
        else
          v19 = 0;
        if (v17)
        {
          v25 = std::__throw_bad_variant_access[abi:sn180100]();
          WTF::HashTable<WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>>::allocateTable(v25);
          return;
        }
        v20 = *v16 + ~(*v16 << 15);
        v21 = (9 * (v20 ^ (v20 >> 10))) ^ ((9 * (v20 ^ (v20 >> 10))) >> 6);
        v22 = (v21 + ~(v21 << 11)) ^ ((v21 + ~(v21 << 11)) >> 16);
        do
        {
          v23 = v22 & v19;
          v24 = v18 + 8 * v23;
          v22 = ++v17 + v23;
        }
        while (*(_DWORD *)(v24 + 4) != 1);
        *(_QWORD *)v24 = *(_QWORD *)v16;
      }
      if (++v15 == v5)
        goto LABEL_13;
    }
  }
  if (v4)
LABEL_13:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t WTF::HashTable<WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::GenericHashKey<int,WTF::DefaultHash<int>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>,WTF::HashTraits<WTF::GenericHashKey<int,WTF::DefaultHash<int>>>>::allocateTable(unsigned int a1)
{
  size_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 8 * a1;
  v3 = WTF::fastMalloc((WTF *)(v2 + 16));
  v4 = v3 + 16;
  if (a1)
    memset_pattern16((void *)(v3 + 16), &unk_1991244C0, v2);
  return v4;
}

__n128 WTF::Vector<JSC::FTL::`anonymous namespace'::LowerDFGToB3::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::`anonymous namespace'::LowerDFGToB3::StringSwitchCase>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

unint64_t WTF::Vector<JSC::FTL::`anonymous namespace'::LowerDFGToB3::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
  }
  return v3;
}

void WTF::Vector<JSC::FTL::`anonymous namespace'::LowerDFGToB3::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = 16 * v5;
        v15 = (__int128 *)v4;
        do
        {
          v16 = *v15++;
          *v6++ = v16;
          v14 -= 16;
        }
        while (v14);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::FTL::`anonymous namespace'::LowerDFGToB3::StringSwitchCase *,false>(unint64_t *a1, uint64_t *a2, WTF::StringImpl *a3, char a4)
{
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl **v12;
  JSC::DFG **v13;
  uint64_t *v14;
  JSC::DFG *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  __int128 v20;
  uint64_t *v21;
  JSC::DFG *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  char v28;
  BOOL v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

_OWORD *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::FTL::`anonymous namespace'::LowerDFGToB3::StringSwitchCase *>(_OWORD *result, _OWORD *a2)
{
  _OWORD *v2;
  _OWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  unsigned int v33;

  if (result == a2)
    return result;
  v2 = result + 1;
  if (result + 1 == a2)
    return result;
  v3 = result;
  do
  {
    v4 = v3;
    v3 = v2;
    v5 = v4[2];
    v6 = *v4;
    v7 = *(_DWORD *)(v5 + 4);
    v8 = *(_DWORD *)(*v4 + 4);
    if (v8 >= v7)
      v9 = v7;
    else
      v9 = v8;
    if (!(_DWORD)v9)
    {
LABEL_13:
      if (v7 >= v8)
        goto LABEL_61;
      goto LABEL_24;
    }
    v10 = *(_DWORD *)(v5 + 16);
    v11 = *(_QWORD *)(v5 + 8);
    v12 = *(_DWORD *)(v6 + 16);
    v13 = *(_QWORD *)(v6 + 8);
    if ((v10 & 4) != 0)
    {
      if ((v12 & 4) != 0)
      {
        v14 = 0;
        while (*(unsigned __int8 *)(v11 + v14) == *(unsigned __int8 *)(v13 + v14))
        {
          if (v9 == ++v14)
            goto LABEL_13;
        }
        goto LABEL_20;
      }
      v14 = 0;
      while (*(_WORD *)(v13 + 2 * v14) == *(unsigned __int8 *)(v11 + v14))
      {
        if (v9 == ++v14)
          goto LABEL_13;
      }
    }
    else
    {
      if ((v12 & 4) != 0)
      {
        v14 = 0;
        while (*(_WORD *)(v11 + 2 * v14) == *(unsigned __int8 *)(v13 + v14))
        {
          if (v9 == ++v14)
            goto LABEL_13;
        }
LABEL_20:
        v15 = 0;
        if ((v10 & 4) != 0)
          goto LABEL_21;
        goto LABEL_72;
      }
      v14 = 0;
      while (*(unsigned __int16 *)(v11 + 2 * v14) == *(unsigned __int16 *)(v13 + 2 * v14))
      {
        if (v9 == ++v14)
          goto LABEL_13;
      }
    }
    v15 = 1;
    if ((v10 & 4) != 0)
    {
LABEL_21:
      v16 = *(unsigned __int8 *)(v11 + v14);
      if ((v15 & 1) == 0)
        goto LABEL_22;
      goto LABEL_73;
    }
LABEL_72:
    v16 = *(unsigned __int16 *)(v11 + 2 * v14);
    if ((v15 & 1) == 0)
    {
LABEL_22:
      v17 = *(unsigned __int8 *)(v13 + v14);
      goto LABEL_23;
    }
LABEL_73:
    v17 = *(unsigned __int16 *)(v13 + 2 * v14);
LABEL_23:
    if (v16 >= v17)
      goto LABEL_61;
LABEL_24:
    v18 = v4[3];
    *v3 = *(_OWORD *)v4;
    v19 = result;
    if (v4 == (_QWORD *)result)
      goto LABEL_60;
    v20 = v4;
    while (1)
    {
      v22 = *((_QWORD *)v20-- - 2);
      v21 = v22;
      v23 = *(_DWORD *)(v5 + 4);
      v24 = *(_DWORD *)(v22 + 4);
      v25 = v24 >= v23 ? v23 : v24;
      if ((_DWORD)v25)
        break;
LABEL_35:
      if (v23 >= v24)
        goto LABEL_59;
LABEL_46:
      *(_OWORD *)v4 = *v20;
      v4 = v20;
      if (v20 == result)
      {
        v19 = result;
        goto LABEL_60;
      }
    }
    v26 = *(_DWORD *)(v5 + 16);
    v27 = *(_QWORD *)(v5 + 8);
    v28 = *(_DWORD *)(v21 + 16);
    v29 = *(_QWORD *)(v21 + 8);
    if ((v26 & 4) != 0)
    {
      if ((v28 & 4) != 0)
      {
        v30 = 0;
        while (*(unsigned __int8 *)(v27 + v30) == *(unsigned __int8 *)(v29 + v30))
        {
          if (v25 == ++v30)
            goto LABEL_35;
        }
        goto LABEL_42;
      }
      v30 = 0;
      while (*(_WORD *)(v29 + 2 * v30) == *(unsigned __int8 *)(v27 + v30))
      {
        if (v25 == ++v30)
          goto LABEL_35;
      }
    }
    else
    {
      if ((v28 & 4) != 0)
      {
        v30 = 0;
        while (*(_WORD *)(v27 + 2 * v30) == *(unsigned __int8 *)(v29 + v30))
        {
          if (v25 == ++v30)
            goto LABEL_35;
        }
LABEL_42:
        v31 = 0;
        if ((v26 & 4) != 0)
          goto LABEL_43;
        goto LABEL_57;
      }
      v30 = 0;
      while (*(unsigned __int16 *)(v27 + 2 * v30) == *(unsigned __int16 *)(v29 + 2 * v30))
      {
        if (v25 == ++v30)
          goto LABEL_35;
      }
    }
    v31 = 1;
    if ((v26 & 4) != 0)
    {
LABEL_43:
      v32 = *(unsigned __int8 *)(v27 + v30);
      if ((v31 & 1) == 0)
        goto LABEL_44;
      goto LABEL_58;
    }
LABEL_57:
    v32 = *(unsigned __int16 *)(v27 + 2 * v30);
    if ((v31 & 1) == 0)
    {
LABEL_44:
      v33 = *(unsigned __int8 *)(v29 + v30);
      goto LABEL_45;
    }
LABEL_58:
    v33 = *(unsigned __int16 *)(v29 + 2 * v30);
LABEL_45:
    if (v32 < v33)
      goto LABEL_46;
LABEL_59:
    v19 = v4;
LABEL_60:
    *v19 = v5;
    v19[1] = v18;
LABEL_61:
    v2 = v3 + 1;
  }
  while (v3 + 1 != a2);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::FTL::`anonymous namespace'::LowerDFGToB3::StringSwitchCase *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t i;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t j;
  char v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  __int128 v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  unsigned int v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  unsigned int v97;
  __int128 v98;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 2;
      v6 = *(a2 - 2);
      v8 = *a1;
      v9 = *(_DWORD *)(v6 + 4);
      v10 = *(_DWORD *)(*a1 + 4);
      if (v10 >= v9)
        v11 = v9;
      else
        v11 = v10;
      if (!(_DWORD)v11)
        goto LABEL_11;
      v12 = *(_DWORD *)(v6 + 16);
      v13 = *(_QWORD *)(v6 + 8);
      v14 = *(_DWORD *)(v8 + 16);
      v15 = *(_QWORD *)(v8 + 8);
      if ((v12 & 4) != 0)
      {
        if ((v14 & 4) == 0)
        {
          i = 0;
          while (*(_WORD *)(v15 + 2 * i) == *(unsigned __int8 *)(v13 + i))
          {
            if (v11 == ++i)
              goto LABEL_11;
          }
LABEL_180:
          v63 = 1;
          if ((v12 & 4) != 0)
          {
LABEL_105:
            v64 = *(unsigned __int8 *)(v13 + i);
            if ((v63 & 1) == 0)
            {
LABEL_106:
              v65 = *(unsigned __int8 *)(v15 + i);
              goto LABEL_107;
            }
LABEL_182:
            v65 = *(unsigned __int16 *)(v15 + 2 * i);
LABEL_107:
            if (v64 >= v65)
              return 1;
            goto LABEL_108;
          }
LABEL_181:
          v64 = *(unsigned __int16 *)(v13 + 2 * i);
          if ((v63 & 1) == 0)
            goto LABEL_106;
          goto LABEL_182;
        }
        i = 0;
        while (*(unsigned __int8 *)(v13 + i) == *(unsigned __int8 *)(v15 + i))
        {
          if (v11 == ++i)
            goto LABEL_11;
        }
      }
      else
      {
        if ((v14 & 4) == 0)
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(unsigned __int16 *)(v13 + 2 * i) != *(unsigned __int16 *)(v15 + 2 * i))
              goto LABEL_180;
          }
LABEL_11:
          if (v9 >= v10)
            return 1;
LABEL_108:
          v66 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v7;
          *(_OWORD *)v7 = v66;
          return 1;
        }
        i = 0;
        while (*(_WORD *)(v13 + 2 * i) == *(unsigned __int8 *)(v15 + i))
        {
          if (v11 == ++i)
            goto LABEL_11;
        }
      }
      v63 = 0;
      if ((v12 & 4) != 0)
        goto LABEL_105;
      goto LABEL_181;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      v49 = a1 + 2;
      v50 = a1 + 4;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(a1, a1 + 2, a1 + 4);
      v53 = *(a2 - 2);
      v52 = a2 - 2;
      v51 = v53;
      v54 = a1[4];
      v55 = *(_DWORD *)(v53 + 4);
      v56 = *(_DWORD *)(v54 + 4);
      if (v56 >= v55)
        v57 = v55;
      else
        v57 = v56;
      if (!(_DWORD)v57)
        goto LABEL_95;
      v58 = *(_DWORD *)(v51 + 16);
      v59 = *(_QWORD *)(v51 + 8);
      v60 = *(_DWORD *)(v54 + 16);
      v61 = *(_QWORD *)(v54 + 8);
      if ((v58 & 4) != 0)
      {
        if ((v60 & 4) != 0)
        {
          v62 = 0;
          while (*(unsigned __int8 *)(v59 + v62) == *(unsigned __int8 *)(v61 + v62))
          {
            if (v57 == ++v62)
              goto LABEL_95;
          }
          goto LABEL_114;
        }
        v62 = 0;
        while (*(_WORD *)(v61 + 2 * v62) == *(unsigned __int8 *)(v59 + v62))
        {
          if (v57 == ++v62)
            goto LABEL_95;
        }
      }
      else
      {
        if ((v60 & 4) != 0)
        {
          v62 = 0;
          while (*(_WORD *)(v59 + 2 * v62) == *(unsigned __int8 *)(v61 + v62))
          {
            if (v57 == ++v62)
              goto LABEL_95;
          }
LABEL_114:
          v67 = 0;
          if ((v58 & 4) != 0)
            goto LABEL_115;
          goto LABEL_188;
        }
        v62 = 0;
        while (*(unsigned __int16 *)(v59 + 2 * v62) == *(unsigned __int16 *)(v61 + 2 * v62))
        {
          if (v57 == ++v62)
          {
LABEL_95:
            if (v55 >= v56)
              return 1;
            goto LABEL_118;
          }
        }
      }
      v67 = 1;
      if ((v58 & 4) != 0)
      {
LABEL_115:
        v68 = *(unsigned __int8 *)(v59 + v62);
        if ((v67 & 1) == 0)
        {
LABEL_116:
          v69 = *(unsigned __int8 *)(v61 + v62);
          goto LABEL_117;
        }
LABEL_189:
        v69 = *(unsigned __int16 *)(v61 + 2 * v62);
LABEL_117:
        if (v68 >= v69)
          return 1;
LABEL_118:
        v70 = *(_OWORD *)v50;
        *(_OWORD *)v50 = *(_OWORD *)v52;
        *(_OWORD *)v52 = v70;
        v71 = *v50;
        v72 = *v49;
        v73 = *(_DWORD *)(*v50 + 4);
        v74 = *(_DWORD *)(*v49 + 4);
        if (v74 >= v73)
          v75 = v73;
        else
          v75 = v74;
        if (!(_DWORD)v75)
        {
LABEL_127:
          if (v73 >= v74)
            return 1;
          goto LABEL_146;
        }
        v76 = *(_DWORD *)(v71 + 16);
        v77 = *(_QWORD *)(v71 + 8);
        v78 = *(_DWORD *)(v72 + 16);
        v79 = *(_QWORD *)(v72 + 8);
        if ((v76 & 4) != 0)
        {
          if ((v78 & 4) != 0)
          {
            v80 = 0;
            while (*(unsigned __int8 *)(v77 + v80) == *(unsigned __int8 *)(v79 + v80))
            {
              if (v75 == ++v80)
                goto LABEL_127;
            }
            goto LABEL_142;
          }
          v80 = 0;
          while (*(_WORD *)(v79 + 2 * v80) == *(unsigned __int8 *)(v77 + v80))
          {
            if (v75 == ++v80)
              goto LABEL_127;
          }
        }
        else
        {
          if ((v78 & 4) != 0)
          {
            v80 = 0;
            while (*(_WORD *)(v77 + 2 * v80) == *(unsigned __int8 *)(v79 + v80))
            {
              if (v75 == ++v80)
                goto LABEL_127;
            }
LABEL_142:
            v81 = 0;
            if ((v76 & 4) != 0)
              goto LABEL_143;
            goto LABEL_195;
          }
          v80 = 0;
          while (*(unsigned __int16 *)(v77 + 2 * v80) == *(unsigned __int16 *)(v79 + 2 * v80))
          {
            if (v75 == ++v80)
              goto LABEL_127;
          }
        }
        v81 = 1;
        if ((v76 & 4) != 0)
        {
LABEL_143:
          v82 = *(unsigned __int8 *)(v77 + v80);
          if ((v81 & 1) == 0)
          {
LABEL_144:
            v83 = *(unsigned __int8 *)(v79 + v80);
            goto LABEL_145;
          }
LABEL_196:
          v83 = *(unsigned __int16 *)(v79 + 2 * v80);
LABEL_145:
          if (v82 >= v83)
            return 1;
LABEL_146:
          v84 = *(_OWORD *)v49;
          *(_OWORD *)v49 = *(_OWORD *)v50;
          *(_OWORD *)v50 = v84;
          v85 = a1[2];
          v86 = *a1;
          v87 = *(_DWORD *)(v85 + 4);
          v88 = *(_DWORD *)(*a1 + 4);
          if (v88 >= v87)
            v89 = v87;
          else
            v89 = v88;
          if ((_DWORD)v89)
          {
            v90 = *(_DWORD *)(v85 + 16);
            v91 = *(_QWORD *)(v85 + 8);
            v92 = *(_DWORD *)(v86 + 16);
            v93 = *(_QWORD *)(v86 + 8);
            if ((v90 & 4) != 0)
            {
              if ((v92 & 4) != 0)
              {
                v94 = 0;
                while (*(unsigned __int8 *)(v91 + v94) == *(unsigned __int8 *)(v93 + v94))
                {
                  if (v89 == ++v94)
                    goto LABEL_155;
                }
                goto LABEL_166;
              }
              v94 = 0;
              while (*(_WORD *)(v93 + 2 * v94) == *(unsigned __int8 *)(v91 + v94))
              {
                if (v89 == ++v94)
                  goto LABEL_155;
              }
            }
            else
            {
              if ((v92 & 4) != 0)
              {
                v94 = 0;
                while (*(_WORD *)(v91 + 2 * v94) == *(unsigned __int8 *)(v93 + v94))
                {
                  if (v89 == ++v94)
                    goto LABEL_155;
                }
LABEL_166:
                v95 = 0;
                if ((v90 & 4) != 0)
                  goto LABEL_167;
                goto LABEL_202;
              }
              v94 = 0;
              while (*(unsigned __int16 *)(v91 + 2 * v94) == *(unsigned __int16 *)(v93 + 2 * v94))
              {
                if (v89 == ++v94)
                  goto LABEL_155;
              }
            }
            v95 = 1;
            if ((v90 & 4) != 0)
            {
LABEL_167:
              v96 = *(unsigned __int8 *)(v91 + v94);
              if ((v95 & 1) == 0)
              {
LABEL_168:
                v97 = *(unsigned __int8 *)(v93 + v94);
                goto LABEL_169;
              }
LABEL_203:
              v97 = *(unsigned __int16 *)(v93 + 2 * v94);
LABEL_169:
              if (v96 >= v97)
                return 1;
              goto LABEL_170;
            }
LABEL_202:
            v96 = *(unsigned __int16 *)(v91 + 2 * v94);
            if ((v95 & 1) == 0)
              goto LABEL_168;
            goto LABEL_203;
          }
LABEL_155:
          if (v87 < v88)
          {
LABEL_170:
            v98 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v49;
            *(_OWORD *)v49 = v98;
          }
          return 1;
        }
LABEL_195:
        v82 = *(unsigned __int16 *)(v77 + 2 * v80);
        if ((v81 & 1) == 0)
          goto LABEL_144;
        goto LABEL_196;
      }
LABEL_188:
      v68 = *(unsigned __int16 *)(v59 + 2 * v62);
      if ((v67 & 1) == 0)
        goto LABEL_116;
      goto LABEL_189;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v17 = a1 + 4;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *>(a1, a1 + 2, a1 + 4);
      v18 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v19 = 0;
LABEL_15:
      v20 = *v18;
      v21 = *v17;
      v22 = *(_DWORD *)(*v18 + 4);
      v23 = *(_DWORD *)(*v17 + 4);
      if (v23 >= v22)
        v24 = v22;
      else
        v24 = v23;
      if (!(_DWORD)v24)
        goto LABEL_24;
      v25 = *(_DWORD *)(v20 + 16);
      v26 = *(_QWORD *)(v20 + 8);
      v27 = *(_DWORD *)(v21 + 16);
      v28 = *(_QWORD *)(v21 + 8);
      if ((v25 & 4) != 0)
      {
        if ((v27 & 4) == 0)
        {
          j = 0;
          while (*(_WORD *)(v28 + 2 * j) == *(unsigned __int8 *)(v26 + j))
          {
            if (v24 == ++j)
              goto LABEL_24;
          }
LABEL_82:
          v30 = 1;
          if ((v25 & 4) != 0)
          {
LABEL_32:
            v31 = *(unsigned __int8 *)(v26 + j);
            if ((v30 & 1) == 0)
            {
LABEL_33:
              v32 = *(unsigned __int8 *)(v28 + j);
              goto LABEL_34;
            }
LABEL_84:
            v32 = *(unsigned __int16 *)(v28 + 2 * j);
LABEL_34:
            if (v31 >= v32)
              goto LABEL_72;
            goto LABEL_35;
          }
LABEL_83:
          v31 = *(unsigned __int16 *)(v26 + 2 * j);
          if ((v30 & 1) == 0)
            goto LABEL_33;
          goto LABEL_84;
        }
        j = 0;
        while (*(unsigned __int8 *)(v26 + j) == *(unsigned __int8 *)(v28 + j))
        {
          if (v24 == ++j)
            goto LABEL_24;
        }
LABEL_31:
        v30 = 0;
        if ((v25 & 4) != 0)
          goto LABEL_32;
        goto LABEL_83;
      }
      if ((v27 & 4) != 0)
      {
        j = 0;
        while (*(_WORD *)(v26 + 2 * j) == *(unsigned __int8 *)(v28 + j))
        {
          if (v24 == ++j)
            goto LABEL_24;
        }
        goto LABEL_31;
      }
      for (j = 0; j != v24; ++j)
      {
        if (*(unsigned __int16 *)(v26 + 2 * j) != *(unsigned __int16 *)(v28 + 2 * j))
          goto LABEL_82;
      }
LABEL_24:
      if (v22 >= v23)
        goto LABEL_72;
LABEL_35:
      v33 = v18[1];
      *(_OWORD *)v18 = *(_OWORD *)v17;
      v34 = a1;
      if (v17 == a1)
        goto LABEL_71;
      v35 = v17;
      break;
  }
  while (1)
  {
    v37 = *(v35 - 2);
    v35 -= 2;
    v36 = v37;
    v38 = *(_DWORD *)(v20 + 4);
    v39 = *(_DWORD *)(v37 + 4);
    v40 = v39 >= v38 ? v38 : v39;
    if ((_DWORD)v40)
      break;
LABEL_46:
    if (v38 >= v39)
      goto LABEL_70;
LABEL_57:
    *(_OWORD *)v17 = *(_OWORD *)v35;
    v17 = v35;
    if (v35 == a1)
    {
      v34 = a1;
      goto LABEL_71;
    }
  }
  v41 = *(_DWORD *)(v20 + 16);
  v42 = *(_QWORD *)(v20 + 8);
  v43 = *(_DWORD *)(v36 + 16);
  v44 = *(_QWORD *)(v36 + 8);
  if ((v41 & 4) != 0)
  {
    if ((v43 & 4) != 0)
    {
      v45 = 0;
      while (*(unsigned __int8 *)(v42 + v45) == *(unsigned __int8 *)(v44 + v45))
      {
        if (v40 == ++v45)
          goto LABEL_46;
      }
      goto LABEL_53;
    }
    v45 = 0;
    while (*(_WORD *)(v44 + 2 * v45) == *(unsigned __int8 *)(v42 + v45))
    {
      if (v40 == ++v45)
        goto LABEL_46;
    }
  }
  else
  {
    if ((v43 & 4) != 0)
    {
      v45 = 0;
      while (*(_WORD *)(v42 + 2 * v45) == *(unsigned __int8 *)(v44 + v45))
      {
        if (v40 == ++v45)
          goto LABEL_46;
      }
LABEL_53:
      v46 = 0;
      if ((v41 & 4) != 0)
        goto LABEL_54;
LABEL_68:
      v47 = *(unsigned __int16 *)(v42 + 2 * v45);
      if ((v46 & 1) == 0)
        goto LABEL_55;
      goto LABEL_69;
    }
    v45 = 0;
    while (*(unsigned __int16 *)(v42 + 2 * v45) == *(unsigned __int16 *)(v44 + 2 * v45))
    {
      if (v40 == ++v45)
        goto LABEL_46;
    }
  }
  v46 = 1;
  if ((v41 & 4) == 0)
    goto LABEL_68;
LABEL_54:
  v47 = *(unsigned __int8 *)(v42 + v45);
  if ((v46 & 1) == 0)
  {
LABEL_55:
    v48 = *(unsigned __int8 *)(v44 + v45);
    goto LABEL_56;
  }
LABEL_69:
  v48 = *(unsigned __int16 *)(v44 + 2 * v45);
LABEL_56:
  if (v47 < v48)
    goto LABEL_57;
LABEL_70:
  v34 = v17;
LABEL_71:
  *v34 = v20;
  v34[1] = v33;
  if (++v19 != 8)
  {
LABEL_72:
    v17 = v18;
    v18 += 2;
    if (v18 == a2)
      return 1;
    goto LABEL_15;
  }
  return v18 + 2 == a2;
}

unint64_t WTF::Vector<JSC::FTL::`anonymous namespace'::LowerDFGToB3::CharacterCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::`anonymous namespace'::LowerDFGToB3::CharacterCase&>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1 + 12 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)result;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(result + 8);
  *(_QWORD *)v4 = v5;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::FTL::`anonymous namespace'::LowerDFGToB3::CharacterCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 12 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
  }
  return v3;
}

void WTF::Vector<JSC::FTL::`anonymous namespace'::LowerDFGToB3::CharacterCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x15555556)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(unsigned int *)(a1 + 12);
      v5 = 12 * a2;
      v6 = WTF::fastMalloc((WTF *)(12 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v4)
      {
        v14 = 12 * v4;
        v15 = v3;
        do
        {
          v16 = *(_QWORD *)v15;
          *(_DWORD *)(v6 + 8) = *(_DWORD *)(v15 + 8);
          *(_QWORD *)v6 = v16;
          v6 += 12;
          v15 += 12;
          v14 -= 12;
        }
        while (v14);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t StatusReg;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *casual;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = 8 * v9;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v13 = *(_QWORD *)(StatusReg + 752);
    if (v13)
    {
      v14 = (unint64_t)(v11 + 15) >> 4;
      if (v9 <= 0x34)
      {
        v15 = 23 * v14 + 7;
      }
      else
      {
        if (v9 > 0x4E2)
          goto LABEL_15;
        v15 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v14 + 626);
        if (*(_DWORD *)(v13 + 8052) <= v15)
          goto LABEL_15;
      }
      v17 = v13 + 8 * v15;
      v18 = v17 + 8064;
      *(_BYTE *)(v17 + 8064) = 1;
      v19 = *(unsigned int *)(v17 + 8080);
      if ((_DWORD)v19)
      {
        *(_DWORD *)(v18 + 16) = v19 - *(_DWORD *)(v18 + 20);
        casual = (void *)(*(_QWORD *)(v18 + 8) - v19);
      }
      else
      {
        v25 = *(_QWORD *)(v18 + 40);
        v26 = *(_QWORD *)(v18 + 24);
        if (!v25)
        {
          if (*(_BYTE *)(v18 + 5) == 6)
          {
            v30 = *(unsigned int *)(v18 + 32);
            v31 = *(_DWORD *)(v18 + 36);
            if (v30 < v31)
            {
              *(_QWORD *)(v18 + 8 * v30 + 56) = 0;
              v32 = (unint64_t *)(8 * v15 + 8 * v30 + v13 + 8128);
              v33 = v31 - 1 - v30;
              while (v33)
              {
                v26 += 1024;
                v35 = *v32++;
                v34 = v35;
                LODWORD(v30) = v30 + 1;
                --v33;
                if (v35)
                {
                  v25 = __rbit64(v34);
                  *(_DWORD *)(v18 + 32) = v30;
                  *(_QWORD *)(v18 + 24) = v26;
                  goto LABEL_23;
                }
              }
              *(_DWORD *)(v18 + 32) = v31;
            }
          }
          *(_BYTE *)v18 = 0;
          goto LABEL_15;
        }
LABEL_23:
        v27 = __clz(v25);
        *(_QWORD *)(v18 + 40) = v25 & ~(0x8000000000000000 >> v27);
        casual = (void *)(v26 + 16 * v27);
      }
      *(_BYTE *)v18 = 0;
LABEL_20:
      *(_DWORD *)(v4 + 8) = v9;
      *(_QWORD *)v4 = casual;
      memcpy(casual, (const void *)v5, 8 * v10);
      if (!v5)
        return v3;
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      v28 = *(_QWORD *)(StatusReg + 752);
      if (!v28)
      {
        pas_try_deallocate_slow_no_cache(v5, (uint64_t)&bmalloc_heap_config, 1);
        return v3;
      }
      if (!(v5 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v5 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v5)) & 1) != 0)
      {
LABEL_29:
        v29 = *(unsigned int *)(v28 + 8000);
        if (v29 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v28, v5, (os_unfair_lock_s *)5, v20, v21, v22, v23, v24);
        }
        else
        {
          *(_QWORD *)(v28 + 8 * v29) = v5 | 0x5000000000000;
          *(_DWORD *)(v28 + 8000) = v29 + 1;
        }
        return v3;
      }
      if (v5 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v5 >> 24)
      {
        v20 = 0;
      }
      else
      {
        v20 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v5 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v5) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v20 == 1)
          goto LABEL_29;
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v28, v5, 1, v20, v21, v22, v23, v24);
      return v3;
    }
LABEL_15:
    casual = (void *)bmalloc_allocate_casual(v11, 1);
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  JSC::B3::Value *v12;
  JSC::DFG::Node *v13;

  v11 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationThrowDFG);
  v12 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), 2, v11, *a2, *a3);
}

uint64_t WTF::dataLog<char [43],JSC::DFG::AvailabilityMap,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  char v7;
  uint64_t **v8;
  uint64_t *v9[7];
  char v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9[0] = (uint64_t *)&v7;
    v8 = v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Invalidation point with availability: ");
  v9[0] = (uint64_t *)(a1 + 24);
  v9[1] = (uint64_t *)"=>";
  v9[2] = (uint64_t *)3;
  v9[3] = (uint64_t *)", ";
  v9[4] = (uint64_t *)3;
  v9[5] = (uint64_t *)&str_90_2;
  v9[6] = (uint64_t *)1;
  v10 = 0;
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v5, "%s", "{locals = ");
  JSC::Operands<JSC::DFG::Availability,WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(a1, (uint64_t)v5);
  WTF::PrintStream::printf(v5, "%s", "; heap = ");
  WTF::MapDump<WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>>::dump(v9, (uint64_t)v5);
  WTF::PrintStream::printf(v5, "%s", "}");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInvalidationPoint(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 40);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInvalidationPoint(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *((_QWORD *)this + 5);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInvalidationPoint(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const void *v45;
  void *v46;
  unsigned int *v47;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "InvalidationPoint");
  v11 = *(_DWORD *)(a2 + 200);
  if (v11 != *(_DWORD *)(a2 + 48) && v11 < *(_DWORD *)(a2 + 52))
  {
    do
    {
      if ((v11 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v11 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v11) = -721215457;
      v11 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v11;
    }
    while (v11 < *(_DWORD *)(a2 + 52));
  }
  *(_DWORD *)(a2 + 48) = v11;
  *(_DWORD *)(a2 + 52) = v11 + 4;
  JSC::FTL::OSRExitDescriptor::emitOSRExitLater(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 24), 23, a1 + 32, a3, *(unsigned int *)(a1 + 56), 0, a8, &v47);
  v12 = v47;
  v13 = *(unsigned int **)(*(_QWORD *)(a1 + 24) + 24);
  if (v13)
  {
    v14 = v13 + 2;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 + 1, v14));
  }
  if (v12)
  {
    do
      v17 = __ldaxr(v12);
    while (__stlxr(v17 + 1, v12));
  }
  v18 = *(_QWORD *)(a1 + 24);
  v19 = WTF::fastMalloc((WTF *)0x30);
  v27 = v19;
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)v19 = &off_1E3577298;
  if (v13)
  {
    v28 = v13 + 2;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
  }
  *(_QWORD *)(v19 + 16) = v13;
  *(_DWORD *)(v19 + 24) = v11;
  if (v12)
  {
    do
      v30 = __ldaxr(v12);
    while (__stlxr(v30 + 1, v12));
  }
  *(_QWORD *)(v19 + 32) = v12;
  *(_QWORD *)(v19 + 40) = v18;
  v31 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v31 == *(_DWORD *)(a2 + 240))
  {
    v42 = v31 + (v31 >> 2);
    if (v42 >= 0x10)
      v43 = v42 + 1;
    else
      v43 = 16;
    if (v43 <= v31 + 1)
      v44 = v31 + 1;
    else
      v44 = v43;
    if (v44 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v45 = *(const void **)(a2 + 232);
    v46 = (void *)WTF::fastMalloc((WTF *)(8 * v44));
    *(_DWORD *)(a2 + 240) = v44;
    *(_QWORD *)(a2 + 232) = v46;
    memcpy(v46, v45, 8 * v31);
    if (v45)
    {
      if (*(const void **)(a2 + 232) == v45)
      {
        *(_QWORD *)(a2 + 232) = 0;
        *(_DWORD *)(a2 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v45, v20, v21, v22, v23, v24, v25, v26);
    }
    v31 = *(unsigned int *)(a2 + 244);
    v32 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v31);
  }
  else
  {
    v32 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v31);
  }
  *v32 = v27;
  *(_DWORD *)(a2 + 244) = v31 + 1;
  if (v12)
  {
    do
    {
      v33 = __ldaxr(v12);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v12));
    if (!v34)
    {
      atomic_store(1u, v12);
      WTF::fastFree((unint64_t)v12, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  if (v13)
  {
    v35 = v13 + 2;
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 32))(v13);
    }
    do
    {
      v38 = __ldaxr(v35);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v35));
    if (!v39)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 32))(v13);
    }
  }
  if (v12)
  {
    do
    {
      v40 = __ldaxr(v12);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v12));
    if (!v41)
    {
      atomic_store(1u, v12);
      WTF::fastFree((unint64_t)v12, v20, v21, v22, v23, v24, v25, v26);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInvalidationPoint(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v9 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 32))(v12);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInvalidationPoint(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v9 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 32))(v12);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

__int128 *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInvalidationPoint(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 *result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v2 = *(_DWORD *)(a1 + 24);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 > v6
    || (v7 = v5 + a2[1], v7 < v6)
    || ((v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16), v8 < 4)
      ? (v9 = 0)
      : (v9 = *(_DWORD *)((v8 & 0xFFFFFFFC) + a2[3] - 4)),
        (v10 = (v8 - v9) + v5, v5 <= v10) ? (v11 = v7 >= v10) : (v11 = 0),
        !v11))
  {
    __break(0xC471u);
    JUMPOUT(0x197DE4ADCLL);
  }
  *(_QWORD *)&v17 = v6;
  *((_QWORD *)&v17 + 1) = v10;
  v12 = *(_QWORD *)(a1 + 40);
  result = (__int128 *)(v12 + 72);
  v14 = *(unsigned int *)(v12 + 84);
  if ((_DWORD)v14 == *(_DWORD *)(v12 + 80))
  {
    result = (__int128 *)WTF::Vector<JSC::DFG::JumpReplacement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v14 + 1, (unint64_t)&v17);
    v14 = *(unsigned int *)(v12 + 84);
    v15 = *(_QWORD *)(v12 + 72);
    v16 = *result;
  }
  else
  {
    v15 = *(_QWORD *)result;
    v16 = v17;
  }
  *(_OWORD *)(v15 + 16 * v14) = v16;
  ++*(_DWORD *)(v12 + 84);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::JumpReplacement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::JumpReplacement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 16 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 16;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::JumpReplacement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = 16 * v8;
      v18 = (__int128 *)v7;
      do
      {
        v19 = *v18++;
        *v9++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isExoticForTypeof(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, int a3)
{
  JSC::FTL::Output *v4;
  char *v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;

  if ((a3 & 0xA000000) == 0)
    return (JSC::B3::Value *)*((_QWORD *)this + 3456);
  v4 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v5 = (char *)this + 3088;
  v6 = *((_QWORD *)this + 389);
  if (v6)
  {
    v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v6);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v4, a2, v7);
  }
  v8 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v4, (uint64_t)v5, (uint64_t)a2);
  v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v4, 5);
  v10 = JSC::FTL::Output::bitAnd(v4, v8, v9);
  return JSC::FTL::Output::notZero32(v4, v10);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOfIsObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOfIsObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOfIsObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOfIsObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOfIsObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOfIsObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _OWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  _BYTE *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  _BYTE *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  JSC::FTL::ExceptionTarget *v122;
  __int128 v123;
  WTF *v124;
  uint64_t v125;

  v124 = 0;
  v125 = 0;
  v9 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v9)
    goto LABEL_131;
  v13 = 0;
  v14 = 0;
  v15 = *((_QWORD *)a3 + 1);
  v16 = 16 * v9;
  v17 = 29;
  do
  {
    v18 = *(unsigned __int8 *)(v15 + 8);
    switch(v18)
    {
      case 7:
        v19 = *(_BYTE *)v15 & 0x7F;
        v20 = 1;
        break;
      case 9:
        v19 = (*(_QWORD *)v15 << 32) | 0x1DLL;
        v20 = 2;
        break;
      case 11:
        v19 = *(_QWORD *)v15;
        v20 = 3;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197DE5580);
    }
    *(_QWORD *)&v123 = v20;
    *((_QWORD *)&v123 + 1) = v19;
    if (v14 == (_DWORD)v125)
    {
      v22 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, v14 + 1, (unint64_t)&v123);
      v21 = HIDWORD(v125);
      v13 = v124;
      *((_OWORD *)v124 + HIDWORD(v125)) = *v22;
    }
    else
    {
      *((_OWORD *)v13 + v14) = v123;
      v21 = HIDWORD(v125);
    }
    v14 = v21 + 1;
    HIDWORD(v125) = v14;
    v15 += 16;
    v16 -= 16;
  }
  while (v16);
  if (!v14)
  {
LABEL_131:
    __break(0xC471u);
    JUMPOUT(0x197DE5640);
  }
  if (*((_DWORD *)v124 + 3) || v14 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DE5370);
  }
  if (*((_DWORD *)v124 + 7))
  {
    v27 = "./ftl/FTLLocation.cpp";
    v28 = "GPRReg JSC::FTL::Location::directGPR() const";
    v29 = 399;
    __break(0xC471u);
    goto LABEL_84;
  }
  v23 = *((_BYTE *)v124 + 8) & 0x7F;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  v26 = *((_BYTE *)v124 + 24) & 0x7F;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  v17 = v15 + 8;
  *(_QWORD *)v15 = off_1E3576AC8;
  *(_QWORD *)(v15 + 16) = v24;
  *(_QWORD *)(v15 + 24) = operationTypeOfIsObject;
  *(_BYTE *)(v15 + 32) = v23;
  *(_QWORD *)(v15 + 40) = v25;
  *(_BYTE *)(v15 + 48) = v26;
  *(_BYTE *)(a2 + 328) = 1;
  v16 = a2 + 56;
  v8 = *(_DWORD *)(a2 + 200);
  if (v8 < *(_DWORD *)(a2 + 52))
    goto LABEL_85;
  while (1)
  {
    v30 = v8;
    if ((v8 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v27, (uint64_t)v28, v29, a5, a6, a7, a8);
      v30 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = 335544320;
    v31 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v31;
    if (*(_BYTE *)(a2 + 328))
      v32 = 0xFF000F4500000000;
    else
      v32 = 0xFF000F4100000000;
    for (*(_BYTE *)(a2 + 328) = 0; v31 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v31)
    {
      if ((v31 + 4) > *(_DWORD *)(a2 + 192))
      {
        v115 = v32;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v27, (uint64_t)v28, v29, a5, a6, a7, a8);
        v32 = v115;
        v31 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -721215457;
      v31 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    v16 = *(_QWORD *)(*(_QWORD *)a3 + 104);
    v33 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
    v34 = *((unsigned int *)a3 + 9);
    if ((_DWORD)v34)
    {
      v69 = (_BYTE *)*((_QWORD *)a3 + 3);
      do
      {
        v70 = *v69 & 0x7F;
        if (v70 >= 0x40)
          goto LABEL_84;
        v71 = 1 << v70;
        v33 &= ~v71;
        v16 &= ~v71;
        ++v69;
      }
      while (--v34);
    }
    v35 = *((unsigned int *)a3 + 13);
    if (!(_DWORD)v35)
      break;
    v76 = (_BYTE *)*((_QWORD *)a3 + 5);
    while (1)
    {
      v77 = (*v76 + 32) & 0x7F;
      if (v77 >= 0x40)
        break;
      v78 = 1 << v77;
      v33 &= ~v78;
      v16 &= ~v78;
      ++v76;
      if (!--v35)
        goto LABEL_23;
    }
LABEL_84:
    __break(1u);
    do
    {
LABEL_85:
      if ((v8 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v27, (uint64_t)v28, v29, a5, a6, a7, a8);
        v8 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v8) = -721215457;
      v8 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v8;
    }
    while (v8 < *(_DWORD *)(a2 + 52));
  }
LABEL_23:
  v120 = v32;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), a3, (uint64_t *)&v122);
  v36 = *(_QWORD *)(a1 + 48);
  v119 = *(_QWORD *)(a1 + 40);
  if ((v36 & 1) != 0)
  {
    v79 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
    if ((v36 & 2) != 0
      || ((v80 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v80 != 0x3FFFFFFF)
        ? (v81 = (_DWORD)v80 == -1)
        : (v81 = 1),
          v81))
    {
      v82 = 2;
    }
    else if (v80 >> 28)
    {
      v116 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v116 = v79;
      *(_DWORD *)(v116 + 8) = v80;
      v82 = 1;
      v79 = v116;
    }
    else
    {
      v82 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
      v79 = v80 << 36;
    }
    v36 = v79 | v82;
  }
  v37 = (unsigned int *)v122;
  if (v122)
  {
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 + 1, v37));
  }
  v121 = v16;
  do
    v39 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v39 + 1, (unsigned int *)v17));
  v40 = *((_QWORD *)a3 + 7);
  v41 = v36;
  if ((v36 & 1) != 0)
  {
    v83 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
    if ((v36 & 2) != 0
      || ((v84 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v84 != 0x3FFFFFFF)
        ? (v85 = (_DWORD)v84 == -1)
        : (v85 = 1),
          v85))
    {
      v86 = 2;
    }
    else if (v84 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v83;
      *(_DWORD *)(v117 + 8) = v84;
      v86 = 1;
      v83 = v117;
    }
    else
    {
      v86 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
      v83 = v84 << 36;
    }
    v41 = v83 | v86;
  }
  if (v37)
  {
    do
      v42 = __ldaxr(v37);
    while (__stlxr(v42 + 1, v37));
  }
  do
    v43 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v43 + 1, (unsigned int *)v17));
  v51 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = &off_1E35772E8;
  *(_DWORD *)(v51 + 16) = v8;
  *(_QWORD *)(v51 + 20) = v120;
  *(_QWORD *)(v51 + 32) = v119;
  *(_DWORD *)(v51 + 40) = v31;
  v52 = v41;
  if ((v41 & 1) != 0)
  {
    v87 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
    if ((v41 & 2) != 0
      || ((v88 = *(unsigned int *)((v41 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
        ? (v89 = (_DWORD)v88 == -1)
        : (v89 = 1),
          v89))
    {
      v90 = 2;
    }
    else if (v88 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v87;
      *(_DWORD *)(v118 + 8) = v88;
      v90 = 1;
      v87 = v118;
    }
    else
    {
      v90 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
      v87 = v88 << 36;
    }
    v52 = v87 | v90;
  }
  *(_QWORD *)(v51 + 48) = v52;
  if (v37)
  {
    do
      v53 = __ldaxr(v37);
    while (__stlxr(v53 + 1, v37));
  }
  *(_QWORD *)(v51 + 56) = v37;
  *(_QWORD *)(v51 + 64) = v33;
  *(_QWORD *)(v51 + 72) = v121;
  do
    v54 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v54 + 1, (unsigned int *)v17));
  *(_QWORD *)(v51 + 80) = v15;
  *(_QWORD *)&v123 = v51;
  v55 = *(unsigned int *)(v40 + 12);
  if ((_DWORD)v55 == *(_DWORD *)(v40 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v40, (uint64_t *)&v123);
    v72 = (unsigned int *)v123;
    *(_QWORD *)&v123 = 0;
    if (v72)
    {
      v73 = v72 + 2;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        atomic_store(1u, v72 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v40 + 8 * v55) = v51;
    *(_DWORD *)(v40 + 12) = v55 + 1;
    *(_QWORD *)&v123 = 0;
  }
  do
  {
    v56 = __ldaxr((unsigned int *)v17);
    v57 = v56 - 1;
  }
  while (__stlxr(v57, (unsigned int *)v17));
  if (!v57)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v37)
  {
    do
    {
      v58 = __ldaxr(v37);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v37));
    if (!v59)
    {
      atomic_store(1u, v37);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v37, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
  }
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v44, v45, v46, v47, v48, v49, v50);
  do
  {
    v60 = __ldaxr((unsigned int *)v17);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, (unsigned int *)v17));
  if (!v61)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v37)
  {
    do
    {
      v62 = __ldaxr(v37);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v37));
    if (!v63)
    {
      atomic_store(1u, v37);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v37, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
  }
  if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v36 & 0xFFFFFFFF8, v44, v45, v46, v47, v48, v49, v50);
  v64 = (unsigned int *)v122;
  v122 = 0;
  if (v64)
  {
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, v64);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v64, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
    }
  }
  do
  {
    v67 = __ldaxr((unsigned int *)v17);
    v68 = v67 - 1;
  }
  while (__stlxr(v68, (unsigned int *)v17));
  if (!v68)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v124)
    WTF::fastFree((unint64_t)v124, v44, v45, v46, v47, v48, v49, v50);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_21compileTypeOfIsObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_21compileTypeOfIsObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_21compileTypeOfIsObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const void *v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  const void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  JSC::ExecutableMemoryHandle *v128[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v91 = v20 + (v20 >> 2);
    if (v91 >= 0x10)
      v92 = v91 + 1;
    else
      v92 = 16;
    if (v92 <= v20 + 1)
      v93 = v20 + 1;
    else
      v93 = v92;
    if (v93 >> 29)
    {
      __break(0xC471u);
      goto LABEL_107;
    }
    v94 = *(const void **)(v19 + 296);
    v95 = (void *)WTF::fastMalloc((WTF *)(8 * v93));
    *(_DWORD *)(v19 + 304) = v93;
    *(_QWORD *)(v19 + 296) = v95;
    memcpy(v95, v94, 8 * v20);
    if (v94)
    {
      if (*(const void **)(v19 + 296) == v94)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v94, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v23 = *(_DWORD *)(a2 + 200);
  if (v23 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v23 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v31 = *(_DWORD *)(a2 + 200);
  if (v31 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -134216720;
  v32 = *(_DWORD *)(a2 + 200);
  v33 = v32 + 4;
  *(_DWORD *)(a2 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v34 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v34 + 90440), v34, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v26, v27, v28, v29, v30, v128);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v128[0], v35, v36, v37, v38, v39, v40);
  v48 = (unsigned int *)v128[1];
  v128[1] = 0;
  if (v48)
  {
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v48);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v48, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v51 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v127 = v11;
  if (v51)
  {
    v52 = v51 + 2;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
    do
      v57 = __ldaxr(v52);
    while (__stlxr(v57 + 1, v52));
  }
  else
  {
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
  }
  v58 = *(_QWORD *)(a1 + 48);
  if ((v58 & 1) != 0)
  {
    v101 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v102 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v125 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v125 = v101;
      *(_DWORD *)(v125 + 8) = v102;
      v104 = 1;
      v101 = v125;
    }
    else
    {
      v104 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v58 = v101 | v104;
  }
  v59 = *(unsigned int **)(a1 + 56);
  if (v59)
  {
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  *(_OWORD *)v128 = *(_OWORD *)(a1 + 64);
  v61 = *(unsigned int **)(a1 + 80);
  if (v61)
  {
    v62 = v61 + 2;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 + 1, v62));
  }
  v64 = WTF::fastMalloc((WTF *)0x58);
  v72 = v64;
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = &off_1E3577310;
  *(_DWORD *)(v64 + 16) = v54;
  *(_QWORD *)(v64 + 20) = v55;
  *(_DWORD *)(v64 + 28) = v56;
  if (v51)
  {
    v73 = v51 + 2;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
  }
  *(_QWORD *)(v64 + 32) = v51;
  v75 = v58;
  if ((v58 & 1) != 0)
  {
    v105 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v106 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v126 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v126 = v105;
      *(_DWORD *)(v126 + 8) = v106;
      v108 = 1;
      v105 = v126;
    }
    else
    {
      v108 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v75 = v105 | v108;
  }
  *(_QWORD *)(v72 + 40) = v75;
  if (v59)
  {
    do
      v76 = __ldaxr(v59);
    while (__stlxr(v76 + 1, v59));
  }
  *(_QWORD *)(v72 + 48) = v59;
  *(_OWORD *)(v72 + 56) = *(_OWORD *)v128;
  if (v61)
  {
    v77 = v61 + 2;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
  }
  *(_QWORD *)(v72 + 72) = v61;
  *(_DWORD *)(v72 + 80) = v20;
  v79 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v79 != *(_DWORD *)(a2 + 240))
  {
    v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
    goto LABEL_37;
  }
  v96 = v79 + (v79 >> 2);
  if (v96 >= 0x10)
    v97 = v96 + 1;
  else
    v97 = 16;
  if (v97 <= v79 + 1)
    v98 = v79 + 1;
  else
    v98 = v97;
  if (v98 >> 29)
  {
    __break(0xC471u);
LABEL_107:
    JUMPOUT(0x197DE5E58);
  }
  v99 = *(const void **)(a2 + 232);
  v100 = (void *)WTF::fastMalloc((WTF *)(8 * v98));
  *(_DWORD *)(a2 + 240) = v98;
  *(_QWORD *)(a2 + 232) = v100;
  memcpy(v100, v99, 8 * v79);
  if (v99)
  {
    if (*(const void **)(a2 + 232) == v99)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v99, v65, v66, v67, v68, v69, v70, v71);
  }
  v79 = *(unsigned int *)(a2 + 244);
  v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
LABEL_37:
  *v80 = v72;
  *(_DWORD *)(a2 + 244) = v79 + 1;
  if (v61)
  {
    v81 = v61 + 2;
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      atomic_store(1u, v61 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
    }
  }
  if (v59)
  {
    do
    {
      v84 = __ldaxr(v59);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v59));
    if (!v85)
    {
      atomic_store(1u, v59);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v59, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
  }
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
  if (v51)
  {
    v86 = v51 + 2;
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
    do
    {
      v89 = __ldaxr(v86);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, v86));
    if (!v90)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
  }
  *(_BYTE *)(a2 + 212) = v127;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_21compileTypeOfIsObjectEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_21compileTypeOfIsObjectEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_21compileTypeOfIsObjectEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DE640CLL);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DE642CLL);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DE644CLL);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
      goto LABEL_73;
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x197DE63D4);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIsCallable(JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIsCallable(JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIsCallable(JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIsCallable(JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIsCallable(JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIsCallable(JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _OWORD *v22;
  char v23;
  uint64_t v24;
  char v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  _BYTE *v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  _BYTE *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  __int128 v120;
  unint64_t v121;
  JSC::FTL::ExceptionTarget *v122;
  __int128 v123;
  WTF *v124;
  uint64_t v125;

  v124 = 0;
  v125 = 0;
  v9 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v9)
    goto LABEL_131;
  v13 = 0;
  v14 = 0;
  v15 = *((_QWORD *)a3 + 1);
  v16 = 16 * v9;
  v17 = 29;
  do
  {
    v18 = *(unsigned __int8 *)(v15 + 8);
    switch(v18)
    {
      case 7:
        v19 = *(_BYTE *)v15 & 0x7F;
        v20 = 1;
        break;
      case 9:
        v19 = (*(_QWORD *)v15 << 32) | 0x1DLL;
        v20 = 2;
        break;
      case 11:
        v19 = *(_QWORD *)v15;
        v20 = 3;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197DE6D74);
    }
    *(_QWORD *)&v123 = v20;
    *((_QWORD *)&v123 + 1) = v19;
    if (v14 == (_DWORD)v125)
    {
      v22 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, v14 + 1, (unint64_t)&v123);
      v21 = HIDWORD(v125);
      v13 = v124;
      *((_OWORD *)v124 + HIDWORD(v125)) = *v22;
    }
    else
    {
      *((_OWORD *)v13 + v14) = v123;
      v21 = HIDWORD(v125);
    }
    v14 = v21 + 1;
    HIDWORD(v125) = v14;
    v15 += 16;
    v16 -= 16;
  }
  while (v16);
  if (!v14)
  {
LABEL_131:
    __break(0xC471u);
    JUMPOUT(0x197DE6E34);
  }
  if (*((_DWORD *)v124 + 3) || v14 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DE6B64);
  }
  if (*((_DWORD *)v124 + 7))
  {
    v26 = "./ftl/FTLLocation.cpp";
    v27 = "GPRReg JSC::FTL::Location::directGPR() const";
    v28 = 399;
    __break(0xC471u);
    goto LABEL_84;
  }
  v120 = *(_OWORD *)(a1 + 16);
  v23 = *((_BYTE *)v124 + 8) & 0x7F;
  v24 = *(_QWORD *)(a1 + 32);
  v25 = *((_BYTE *)v124 + 24) & 0x7F;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  v17 = v15 + 8;
  *(_QWORD *)v15 = off_1E3576AC8;
  *(_OWORD *)(v15 + 16) = v120;
  *(_BYTE *)(v15 + 32) = v23;
  *(_QWORD *)(v15 + 40) = v24;
  *(_BYTE *)(v15 + 48) = v25;
  *(_BYTE *)(a2 + 328) = 1;
  v16 = a2 + 56;
  v8 = *(_DWORD *)(a2 + 200);
  if (v8 < *(_DWORD *)(a2 + 52))
    goto LABEL_85;
  while (1)
  {
    v29 = v8;
    if ((v8 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v26, (uint64_t)v27, v28, a5, a6, a7, a8);
      v29 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = 335544320;
    v30 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v30;
    if (*(_BYTE *)(a2 + 328))
      v31 = 0xFF000F4500000000;
    else
      v31 = 0xFF000F4100000000;
    for (*(_BYTE *)(a2 + 328) = 0; v30 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v30)
    {
      if ((v30 + 4) > *(_DWORD *)(a2 + 192))
      {
        v114 = v31;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v26, (uint64_t)v27, v28, a5, a6, a7, a8);
        v31 = v114;
        v30 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -721215457;
      v30 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    v16 = *(_QWORD *)(*(_QWORD *)a3 + 104);
    v32 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
    v33 = *((unsigned int *)a3 + 9);
    if ((_DWORD)v33)
    {
      v68 = (_BYTE *)*((_QWORD *)a3 + 3);
      do
      {
        v69 = *v68 & 0x7F;
        if (v69 >= 0x40)
          goto LABEL_84;
        v70 = 1 << v69;
        v32 &= ~v70;
        v16 &= ~v70;
        ++v68;
      }
      while (--v33);
    }
    v34 = *((unsigned int *)a3 + 13);
    if (!(_DWORD)v34)
      break;
    v75 = (_BYTE *)*((_QWORD *)a3 + 5);
    while (1)
    {
      v76 = (*v75 + 32) & 0x7F;
      if (v76 >= 0x40)
        break;
      v77 = 1 << v76;
      v32 &= ~v77;
      v16 &= ~v77;
      ++v75;
      if (!--v34)
        goto LABEL_23;
    }
LABEL_84:
    __break(1u);
    do
    {
LABEL_85:
      if ((v8 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v26, (uint64_t)v27, v28, a5, a6, a7, a8);
        v8 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v8) = -721215457;
      v8 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v8;
    }
    while (v8 < *(_DWORD *)(a2 + 52));
  }
LABEL_23:
  v119 = v31;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), a3, (uint64_t *)&v122);
  v35 = *(_QWORD *)(a1 + 56);
  v118 = *(_QWORD *)(a1 + 48);
  if ((v35 & 1) != 0)
  {
    v78 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
    if ((v35 & 2) != 0
      || ((v79 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v79 != 0x3FFFFFFF)
        ? (v80 = (_DWORD)v79 == -1)
        : (v80 = 1),
          v80))
    {
      v81 = 2;
    }
    else if (v79 >> 28)
    {
      v115 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v115 = v78;
      *(_DWORD *)(v115 + 8) = v79;
      v81 = 1;
      v78 = v115;
    }
    else
    {
      v81 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      v78 = v79 << 36;
    }
    v35 = v78 | v81;
  }
  v36 = (unsigned int *)v122;
  if (v122)
  {
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v121 = v16;
  do
    v38 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v38 + 1, (unsigned int *)v17));
  v39 = *((_QWORD *)a3 + 7);
  v40 = v35;
  if ((v35 & 1) != 0)
  {
    v82 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
    if ((v35 & 2) != 0
      || ((v83 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v83 != 0x3FFFFFFF)
        ? (v84 = (_DWORD)v83 == -1)
        : (v84 = 1),
          v84))
    {
      v85 = 2;
    }
    else if (v83 >> 28)
    {
      v116 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v116 = v82;
      *(_DWORD *)(v116 + 8) = v83;
      v85 = 1;
      v82 = v116;
    }
    else
    {
      v85 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      v82 = v83 << 36;
    }
    v40 = v82 | v85;
  }
  if (v36)
  {
    do
      v41 = __ldaxr(v36);
    while (__stlxr(v41 + 1, v36));
  }
  do
    v42 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v42 + 1, (unsigned int *)v17));
  v50 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v50 + 8) = 1;
  *(_QWORD *)v50 = &off_1E3577360;
  *(_DWORD *)(v50 + 16) = v8;
  *(_QWORD *)(v50 + 20) = v119;
  *(_QWORD *)(v50 + 32) = v118;
  *(_DWORD *)(v50 + 40) = v30;
  v51 = v40;
  if ((v40 & 1) != 0)
  {
    v86 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
    if ((v40 & 2) != 0
      || ((v87 = *(unsigned int *)((v40 & 0xFFFFFFFF8) + 8), (_DWORD)v87 != 0x3FFFFFFF)
        ? (v88 = (_DWORD)v87 == -1)
        : (v88 = 1),
          v88))
    {
      v89 = 2;
    }
    else if (v87 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v86;
      *(_DWORD *)(v117 + 8) = v87;
      v89 = 1;
      v86 = v117;
    }
    else
    {
      v89 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
      v86 = v87 << 36;
    }
    v51 = v86 | v89;
  }
  *(_QWORD *)(v50 + 48) = v51;
  if (v36)
  {
    do
      v52 = __ldaxr(v36);
    while (__stlxr(v52 + 1, v36));
  }
  *(_QWORD *)(v50 + 56) = v36;
  *(_QWORD *)(v50 + 64) = v32;
  *(_QWORD *)(v50 + 72) = v121;
  do
    v53 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v53 + 1, (unsigned int *)v17));
  *(_QWORD *)(v50 + 80) = v15;
  *(_QWORD *)&v123 = v50;
  v54 = *(unsigned int *)(v39 + 12);
  if ((_DWORD)v54 == *(_DWORD *)(v39 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v39, (uint64_t *)&v123);
    v71 = (unsigned int *)v123;
    *(_QWORD *)&v123 = 0;
    if (v71)
    {
      v72 = v71 + 2;
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        atomic_store(1u, v71 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v71 + 8))(v71);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v39 + 8 * v54) = v50;
    *(_DWORD *)(v39 + 12) = v54 + 1;
    *(_QWORD *)&v123 = 0;
  }
  do
  {
    v55 = __ldaxr((unsigned int *)v17);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, (unsigned int *)v17));
  if (!v56)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v36)
  {
    do
    {
      v57 = __ldaxr(v36);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v36));
    if (!v58)
    {
      atomic_store(1u, v36);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v36, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
    }
  }
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  do
  {
    v59 = __ldaxr((unsigned int *)v17);
    v60 = v59 - 1;
  }
  while (__stlxr(v60, (unsigned int *)v17));
  if (!v60)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v36)
  {
    do
    {
      v61 = __ldaxr(v36);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v36));
    if (!v62)
    {
      atomic_store(1u, v36);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v36, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
  }
  if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v35 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  v63 = (unsigned int *)v122;
  v122 = 0;
  if (v63)
  {
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
    {
      atomic_store(1u, v63);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v63, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
  }
  do
  {
    v66 = __ldaxr((unsigned int *)v17);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, (unsigned int *)v17));
  if (!v67)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v124)
    WTF::fastFree((unint64_t)v124, v43, v44, v45, v46, v47, v48, v49);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_17compileIsCallableEPFNS1_24ExceptionOperationResultImEEPNS1_14JSGlobalObjectEPNS1_6JSCellEEEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSN_IPNS4_5ValueELm0ESP_Lm16ESQ_EEENKUlS3_RKS9_E_clES3_S16_EUlS3_E_EEvSZ_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_17compileIsCallableEPFNS1_24ExceptionOperationResultImEEPNS1_14JSGlobalObjectEPNS1_6JSCellEEEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSN_IPNS4_5ValueELm0ESP_Lm16ESQ_EEENKUlS3_RKS9_E_clES3_S16_EUlS3_E_EEvSZ_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_17compileIsCallableEPFNS1_24ExceptionOperationResultImEEPNS1_14JSGlobalObjectEPNS1_6JSCellEEEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSN_IPNS4_5ValueELm0ESP_Lm16ESQ_EEENKUlS3_RKS9_E_clES3_S16_EUlS3_E_EEvSZ_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::ARM64LogicalImmediate *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  const void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  JSC::ExecutableMemoryHandle *v120[2];

  v10 = (unsigned int *)(a1 + 16);
  v119 = *(_BYTE *)(a2 + 212);
  if (!v119)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v19 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v18 + 308);
  if ((_DWORD)v19 == *(_DWORD *)(v18 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v18 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v18 + 296) + 8 * (_QWORD)v19) = 0;
    *(_DWORD *)(v18 + 308) = (_DWORD)v19 + 1;
  }
  v20 = *(_DWORD *)(a2 + 200);
  if (v20 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v11, v12, v13, v14, v15, v16, v17);
    v20 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v19, 16, v13, v14, v15, v16, v17);
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -134216720;
  v29 = *(_DWORD *)(a2 + 200);
  v30 = v29 + 4;
  *(_DWORD *)(a2 + 200) = v29 + 4;
  if ((v29 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v30 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v31 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v31 + 90440), v31, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v23, v24, v25, v26, v27, v120);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v120[0], v32, v33, v34, v35, v36, v37);
  v45 = (unsigned int *)v120[1];
  v120[1] = 0;
  if (v45)
  {
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v45, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
  }
  v48 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  if (v48)
  {
    v49 = v48 + 2;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
    v51 = *(_DWORD *)(a1 + 16);
    v52 = *(_QWORD *)(a1 + 20);
    v53 = *(_DWORD *)(a1 + 40);
    do
      v54 = __ldaxr(v49);
    while (__stlxr(v54 + 1, v49));
  }
  else
  {
    v51 = *(_DWORD *)(a1 + 16);
    v52 = *(_QWORD *)(a1 + 20);
    v53 = *(_DWORD *)(a1 + 40);
  }
  v55 = *(_QWORD *)(a1 + 48);
  if ((v55 & 1) != 0)
  {
    v93 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v94 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v94 != 0x3FFFFFFF)
        ? (v95 = (_DWORD)v94 == -1)
        : (v95 = 1),
          v95))
    {
      v96 = 2;
    }
    else if (v94 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v93;
      *(_DWORD *)(v117 + 8) = v94;
      v96 = 1;
      v93 = v117;
    }
    else
    {
      v96 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      v93 = v94 << 36;
    }
    v55 = v93 | v96;
  }
  v56 = *(unsigned int **)(a1 + 56);
  if (v56)
  {
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  *(_OWORD *)v120 = *(_OWORD *)(a1 + 64);
  v58 = *(unsigned int **)(a1 + 80);
  if (v58)
  {
    v59 = v58 + 2;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  v61 = WTF::fastMalloc((WTF *)0x58);
  v69 = v61;
  *(_DWORD *)(v61 + 8) = 1;
  *(_QWORD *)v61 = &off_1E3577388;
  *(_DWORD *)(v61 + 16) = v51;
  *(_QWORD *)(v61 + 20) = v52;
  *(_DWORD *)(v61 + 28) = v53;
  if (v48)
  {
    v70 = v48 + 2;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 + 1, v70));
  }
  *(_QWORD *)(v61 + 32) = v48;
  v72 = v55;
  if ((v55 & 1) != 0)
  {
    v97 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v98 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v98 != 0x3FFFFFFF)
        ? (v99 = (_DWORD)v98 == -1)
        : (v99 = 1),
          v99))
    {
      v100 = 2;
    }
    else if (v98 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v97;
      *(_DWORD *)(v118 + 8) = v98;
      v100 = 1;
      v97 = v118;
    }
    else
    {
      v100 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      v97 = v98 << 36;
    }
    v72 = v97 | v100;
  }
  *(_QWORD *)(v69 + 40) = v72;
  if (v56)
  {
    do
      v73 = __ldaxr(v56);
    while (__stlxr(v73 + 1, v56));
  }
  *(_QWORD *)(v69 + 48) = v56;
  *(_OWORD *)(v69 + 56) = *(_OWORD *)v120;
  if (v58)
  {
    v74 = v58 + 2;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 + 1, v74));
  }
  *(_QWORD *)(v69 + 72) = v58;
  *(_DWORD *)(v69 + 80) = (_DWORD)v19;
  v76 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v76 == *(_DWORD *)(a2 + 240))
  {
    v88 = v76 + (v76 >> 2);
    if (v88 >= 0x10)
      v89 = v88 + 1;
    else
      v89 = 16;
    if (v89 <= v76 + 1)
      v90 = v76 + 1;
    else
      v90 = v89;
    if (v90 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v91 = *(const void **)(a2 + 232);
    v92 = (void *)WTF::fastMalloc((WTF *)(8 * v90));
    *(_DWORD *)(a2 + 240) = v90;
    *(_QWORD *)(a2 + 232) = v92;
    memcpy(v92, v91, 8 * v76);
    if (v91)
    {
      if (*(const void **)(a2 + 232) == v91)
      {
        *(_QWORD *)(a2 + 232) = 0;
        *(_DWORD *)(a2 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v91, v62, v63, v64, v65, v66, v67, v68);
    }
    v76 = *(unsigned int *)(a2 + 244);
    v77 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v76);
  }
  else
  {
    v77 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v76);
  }
  *v77 = v69;
  *(_DWORD *)(a2 + 244) = v76 + 1;
  if (v58)
  {
    v78 = v58 + 2;
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
  if (v56)
  {
    do
    {
      v81 = __ldaxr(v56);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v56));
    if (!v82)
    {
      atomic_store(1u, v56);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v56, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v55 & 0xFFFFFFFF8, v62, v63, v64, v65, v66, v67, v68);
  if (v48)
  {
    v83 = v48 + 2;
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 32))(v48);
    }
    do
    {
      v86 = __ldaxr(v83);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, v83));
    if (!v87)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 32))(v48);
    }
  }
  *(_BYTE *)(a2 + 212) = v119;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_17compileIsCallableEPFNS1_24ExceptionOperationResultImEEPNS1_14JSGlobalObjectEPNS1_6JSCellEEEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSH_IPNSP_5ValueELm0ESJ_Lm16ESK_EEENKUlRNS1_12CCallHelpersERKNSP_24StackmapGenerationParamsEE_clES11_S14_ENKUlS11_E_clES11_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_17compileIsCallableEPFNS1_24ExceptionOperationResultImEEPNS1_14JSGlobalObjectEPNS1_6JSCellEEEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSH_IPNSP_5ValueELm0ESJ_Lm16ESK_EEENKUlRNS1_12CCallHelpersERKNSP_24StackmapGenerationParamsEE_clES11_S14_ENKUlS11_E_clES11_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_17compileIsCallableEPFNS1_24ExceptionOperationResultImEEPNS1_14JSGlobalObjectEPNS1_6JSCellEEEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSH_IPNSP_5ValueELm0ESJ_Lm16ESK_EEENKUlRNS1_12CCallHelpersERKNSP_24StackmapGenerationParamsEE_clES11_S14_ENKUlS11_E_clES11_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DE7B84);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DE7BA4);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DE7BC4);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
      goto LABEL_73;
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x197DE7B4CLL);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNumberIsInteger(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35773B0;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNumberIsInteger(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNumberIsInteger(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  char *v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19[3];
  char v20;
  char v21;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)a1, "NumberIsInteger");
  v10 = *(_DWORD *)(a2 + 20);
  if (!v10)
    goto LABEL_9;
  if (v10 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DE7E1CLL);
  }
  if (!*(_DWORD *)(a2 + 52))
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x197DE7E14);
  }
  v11 = *(char **)(a2 + 8);
  v12 = *v11;
  v13 = (v11[16] & 0x7F) - 32;
  v14 = **(char **)(a2 + 40);
  JSC::MacroAssemblerARM64::roundTowardZeroDouble(a1, v13, v14, a4, a5, a6, a7, a8);
  v21 = v13;
  v20 = v14;
  v19[0] = a1;
  v19[1] = &v21;
  v19[2] = &v20;
  JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>((uint64_t)a1, 0, v12 & 0x7F, v19, v15, v16, v17, v18);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<unsigned long long (*)(long long),JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  JSC::DFG::Node *v13;

  v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationNumberIsNaN);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 2, *(_QWORD *)(a1 + 27768), v10, *a2);
  return v11;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::wangsInt64Hash(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  JSC::B3::Value *v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  JSC::B3::Value *v22;
  JSC::B3::Value *v23;
  JSC::B3::Value *v24;
  JSC::B3::Value *v25;
  JSC::B3::Value *v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  JSC::B3::Value *v29;
  JSC::B3::Value *v30;

  v3 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v4 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 32);
  v5 = JSC::FTL::Output::shl(v3, a2, v4);
  v6 = JSC::FTL::Output::bitNot(v3, v5);
  v7 = (JSC::B3::Value *)JSC::FTL::Output::add(v3, a2, v6);
  v8 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v3, 22);
  v9 = JSC::FTL::Output::lShr(v3, v7, v8);
  v10 = JSC::FTL::Output::bitXor(v3, v7, v9);
  v11 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v3, 13);
  v12 = JSC::FTL::Output::shl(v3, v10, v11);
  v13 = JSC::FTL::Output::bitNot(v3, v12);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::add(v3, v10, v13);
  v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v3, 8);
  v16 = JSC::FTL::Output::lShr(v3, v14, v15);
  v17 = JSC::FTL::Output::bitXor(v3, v14, v16);
  v18 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v3, 3);
  v19 = JSC::FTL::Output::shl(v3, v17, v18);
  v20 = (JSC::B3::Value *)JSC::FTL::Output::add(v3, v17, v19);
  v21 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v3, 15);
  v22 = JSC::FTL::Output::lShr(v3, v20, v21);
  v23 = JSC::FTL::Output::bitXor(v3, v20, v22);
  v24 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v3, 27);
  v25 = JSC::FTL::Output::shl(v3, v23, v24);
  v26 = JSC::FTL::Output::bitNot(v3, v25);
  v27 = (JSC::B3::Value *)JSC::FTL::Output::add(v3, v23, v26);
  v28 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v3, 31);
  v29 = JSC::FTL::Output::lShr(v3, v27, v28);
  v30 = JSC::FTL::Output::bitXor(v3, v27, v29);
  return JSC::FTL::Output::castToInt32(v3, v30);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<unsigned long long (*)(JSC::VM *,JSC::JSBigInt *),JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::DFG::Node *v14;

  v11 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationMapHashHeapBigInt);
  v12 = JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), 2, v11, *a2, *a3);
  return v12;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::mapHashString(JSC::DFG::Graph **this, JSC::B3::Value *a2, JSC::DFG::Edge *a3)
{
  JSC::DFG::Graph *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  JSC::B3::BasicBlock *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::DFG::Graph *v34;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v36;
  JSC::B3::Value *v37;
  JSC::B3::Value *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  JSC::B3::Value *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  JSC::B3::Value *v72;

  v72 = a2;
  v6 = *this;
  JSC::CodeOrigin::CodeOrigin(&v71, (const JSC::CodeOrigin *)(this + 3524));
  v20 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor((uint64_t)v6, &v71, v7, v8, v9, v10, v11, v12);
  if ((v71 & 1) != 0 && (v71 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v71 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  v21 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
  v22 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
  v23 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
  JSC::FTL::Output::branch(this + 3455, (uint64_t)v29, v22, v21, 0.0, 1.0, v30, v31, v32, v33);
  this[3472] = (JSC::DFG::Graph *)v21;
  v34 = this[3473];
  this[3473] = (JSC::DFG::Graph *)v22;
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(this + 3455), a2, this[3313]);
  v36 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::Output *)(this + 3455), Ptr, (const JSC::FTL::AbstractHeap *)(this + 650));
  v37 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(this + 3455), 8);
  v38 = JSC::FTL::Output::lShr((JSC::FTL::Output *)(this + 3455), v36, v37);
  v39 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v38);
  v41 = v40;
  v42 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(this + 3455), 0);
  v43 = JSC::FTL::Output::equal((JSC::FTL::Output *)(this + 3455), v38, v42);
  JSC::FTL::Output::branch(this + 3455, (uint64_t)v43, v22, (uint64_t)v23, NAN, NAN, v44, v45, v46, v47);
  this[3472] = (JSC::DFG::Graph *)v22;
  this[3473] = v23;
  v59 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(this + 3455), v58);
  v60 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v59);
  v62 = v61;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(this + 3455), v23, v63, v64, v65, v66, v67, v68);
  this[3472] = v23;
  this[3473] = v34;
  return JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(this + 3455, 1, v60, v62, v39, v41);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetMapIndexImpl<JSC::JSSet>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  unint64_t v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  JSC::B3::Value *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  JSC::B3::Value *v40;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::B3::Value *v47;
  JSC::B3::Value *v48;
  uint64_t v49;
  JSC::FTL::IndexedAbstractHeap *v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  JSC::B3::Value *v55;
  JSC::B3::Value *v56;
  JSC::B3::Value *v57;
  uint64_t v58;
  JSC::B3::Value *v59;
  uint64_t v60;
  JSC::FTL::IndexedAbstractHeap *v61;
  uint64_t v62;
  JSC::B3::Value *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  JSC::B3::Value *v73;
  JSC::B3::Value *v74;
  uint64_t v75;
  JSC::B3::Value *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  JSC::B3::Value *v81;
  JSC::B3::Value *v82;
  uint64_t v83;
  JSC::FTL::IndexedAbstractHeap *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  JSC::B3::Value *v92;
  JSC::VM *v93;
  JSC::JSCell *v94;
  JSC::B3::Value *v95;
  JSC::B3::Value *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  JSC::B3::Value *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  JSC::B3::Value *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  JSC::B3::Value *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  JSC::B3::Value *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  JSC::B3::Value *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  JSC::B3::Value *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *v154;
  JSC::B3::Value *v155;
  JSC::B3::Value *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  JSC::B3::Value *v162;
  uint64_t v163;
  JSC::B3::Value *v164;
  uint64_t v165;
  JSC::FTL::IndexedAbstractHeap *v166;
  uint64_t v167;
  JSC::B3::Value *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  JSC::B3::Value *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  JSC::B3::Value *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  JSC::B3::Value *v215;
  JSC::B3::Value *v216;
  uint64_t v217;
  uint64_t v218;
  JSC::B3::Value *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  JSC::B3::Value *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  JSC::B3::Value *v229;
  JSC::B3::Value *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  JSC::B3::Value *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  JSC::B3::Value *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  JSC::B3::Value *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  JSC::B3::Value *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  JSC::B3::Value *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  JSC::B3::Value *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  JSC::B3::Value *v278;
  uint64_t v279;
  uint64_t v280;
  JSC::B3::Value *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  JSC::B3::Value *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  JSC::B3::Value *v292;
  JSC::B3::Value *v293;
  uint64_t v294;
  JSC::B3::Value *v295;
  JSC::B3::Value *v296;
  uint64_t v297;
  uint64_t v298;
  JSC::B3::BasicBlock *v299;
  JSC::JSCell *v300;
  JSC::B3::Value *v301;
  uint64_t v302;
  uint64_t v303;
  JSC::FTL::IndexedAbstractHeap *v304;
  JSC::B3::BasicBlock *v305;
  uint64_t v306;
  uint64_t v307;
  JSC::B3::Value *v308;
  JSC::B3::Value *v309;
  JSC::B3::Value *v310;
  uint64_t v311[2];

  v2 = *(_QWORD *)a1;
  JSC::CodeOrigin::CodeOrigin(v311, (const JSC::CodeOrigin *)(a1 + 28192));
  v300 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, v311, v3, v4, v5, v6, v7, v8);
  if ((v311[0] & 1) != 0 && (v311[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v311[0] & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v16 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v305 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v302 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v298 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v17 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v306 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v18 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v19 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v299 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 28224) + 24);
  v28 = (v27 >> 50) & 0x3F;
  if ((_DWORD)v28 == 31)
  {
  }
  else
  {
    if ((_DWORD)v28 != 30)
    {
      __break(0xC471u);
      JUMPOUT(0x197DE8BDCLL);
    }
  }
  v30 = v29;
  v303 = v18;
  v310 = v29;
  v309 = v301;
  v38 = *(_QWORD *)(a1 + 28224);
  v39 = *(_QWORD *)(v38 + 32);
  if ((v39 & 0xFC000000000000) != 0)
  {
    v38 = *(_QWORD *)(a1 + 28224);
  }
  v308 = v40;
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), v30, (const JSC::FTL::AbstractHeap *)(a1 + 6160));
  v42 = JSC::FTL::Output::isZero64((JSC::FTL::Output *)(a1 + 27640), Ptr);
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v42, v306, v16, NAN, NAN, v43, v44, v45, v46);
  *(_QWORD *)(a1 + 27776) = v16;
  v297 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v305;
  v48 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), 2);
  v50 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(a1 + 18568), (JSC::FTL::Output *)(a1 + 27640), v47, v48, 0, 0, 0, v49);
  v52 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, v50, v51, 1);
  v53 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 4);
  v54 = JSC::FTL::Output::sub((JSC::FTL::Output *)(a1 + 27640), v52, *(JSC::B3::Value **)(a1 + 27664));
  v55 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v40, v54);
  v56 = (JSC::B3::Value *)v53;
  v57 = v47;
  v58 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v56, v55);
  v59 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)(a1 + 27640), v58, 2);
  v304 = (JSC::FTL::IndexedAbstractHeap *)(a1 + 18568);
  v61 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(a1 + 18568), (JSC::FTL::Output *)(a1 + 27640), v47, v59, 0, 0, 0, v60);
  v63 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, v61, v62, 2);
  v64 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v63);
  v66 = v65;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v305, v67, v68, v69, v70, v71, v72);
  *(_QWORD *)(a1 + 27776) = v305;
  *(_QWORD *)(a1 + 27784) = v17;
  v73 = (JSC::B3::Value *)JSC::FTL::Output::phi((_QWORD *)(a1 + 27640), 2);
  v74 = v73;
  if (v64 || v66)
  {
    if ((*(_WORD *)(v64 + 12) & 0xFFF) == 0x98)
      v75 = v64;
    else
      v75 = 0;
    *(_QWORD *)(v75 + 40) = v73;
  }
  v76 = JSC::FTL::Output::isZero64((JSC::FTL::Output *)(a1 + 27640), v73);
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v76, v306, v17, NAN, NAN, v77, v78, v79, v80);
  *(_QWORD *)(a1 + 27776) = v17;
  *(_QWORD *)(a1 + 27784) = v19;
  v81 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 27640), v74);
  v82 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)(a1 + 27640), (uint64_t)v81, 2);
  v84 = JSC::FTL::IndexedAbstractHeap::baseIndex(v304, (JSC::FTL::Output *)(a1 + 27640), v57, v82, 0, 0, 0, v83);
  v92 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, v84, v85, 2);
  v93 = *(JSC::VM **)(*(_QWORD *)a1 + 16);
  v94 = (JSC::JSCell *)*((_QWORD *)v93 + 5230);
  if (!v94)
    v94 = (JSC::JSCell *)JSC::VM::orderedHashTableDeletedValueSlow(v93, 0, v86, v87, v88, v89, v90, v91);
  v96 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v92, v95);
  v97 = v302;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v96, v302, v19, NAN, NAN, v98, v99, v100, v101);
  *(_QWORD *)(a1 + 27776) = v19;
  *(_QWORD *)(a1 + 27784) = v302;
  v102 = (*(_QWORD *)(*(_QWORD *)(a1 + 28224) + 32) >> 50) & 0x3FLL;
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 28224) + 32) >> 50) & 0x3F) <= 0x14)
  {
    switch((int)v102)
    {
      case 0:
        v103 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
        v293 = v57;
        v104 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
        v295 = v81;
        v105 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
        v292 = v74;
        v106 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
        v107 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
        v291 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
        v108 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v301, v92);
        JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v108, v303, v103, NAN, NAN, v109, v110, v111, v112);
        *(_QWORD *)(a1 + 27776) = v103;
        *(_QWORD *)(a1 + 27784) = v104;
        JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v113, v104, v302, NAN, NAN, v114, v115, v116, v117);
        *(_QWORD *)(a1 + 27776) = v104;
        v57 = v293;
        *(_QWORD *)(a1 + 27784) = v105;
        JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v118, v105, v302, NAN, NAN, v119, v120, v121, v122);
        *(_QWORD *)(a1 + 27776) = v105;
        *(_QWORD *)(a1 + 27784) = v106;
        JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v123, v106, v107, NAN, NAN, v124, v125, v126, v127);
        *(_QWORD *)(a1 + 27776) = v106;
        v74 = v292;
        *(_QWORD *)(a1 + 27784) = v107;
        JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v135, v298, v302, NAN, NAN, v136, v137, v138, v139);
        *(_QWORD *)(a1 + 27776) = v107;
        v140 = v303;
        *(_QWORD *)(a1 + 27784) = v291;
        JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v141, v291, v302, NAN, NAN, v142, v143, v144, v145);
        *(_QWORD *)(a1 + 27776) = v291;
        v146 = v298;
        v81 = v295;
        *(_QWORD *)(a1 + 27784) = v302;
        v154 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)a1;
        v155 = v301;
        goto LABEL_16;
      case 1:
      case 6:
      case 11:
        goto LABEL_29;
      case 8:
        v235 = v74;
        v236 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
        v237 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
        v296 = v81;
        v238 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
        v239 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
        v294 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
        v240 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v301, v92);
        v140 = v303;
        JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v240, v303, v236, NAN, NAN, v241, v242, v243, v244);
        *(_QWORD *)(a1 + 27776) = v236;
        v74 = v235;
        v97 = v302;
        *(_QWORD *)(a1 + 27784) = v237;
        JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v245, v237, v302, NAN, NAN, v246, v247, v248, v249);
        *(_QWORD *)(a1 + 27776) = v237;
        *(_QWORD *)(a1 + 27784) = v238;
        JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v250, v238, v239, NAN, NAN, v251, v252, v253, v254);
        *(_QWORD *)(a1 + 27776) = v238;
        *(_QWORD *)(a1 + 27784) = v239;
        JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v262, v298, v302, NAN, NAN, v263, v264, v265, v266);
        *(_QWORD *)(a1 + 27776) = v239;
        v146 = v298;
        v81 = v296;
        *(_QWORD *)(a1 + 27784) = v294;
        JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v267, v294, v302, NAN, NAN, v268, v269, v270, v271);
        *(_QWORD *)(a1 + 27776) = v294;
        *(_QWORD *)(a1 + 27784) = v302;
        v154 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)a1;
        v155 = v301;
LABEL_16:
        v161 = (_QWORD *)(a1 + 27640);
        goto LABEL_17;
      default:
        goto LABEL_35;
    }
  }
  if ((_DWORD)v102 == 21)
  {
    v216 = v81;
    v217 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v218 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v219 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v301, v92);
    v140 = v303;
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v219, v303, v217, NAN, NAN, v220, v221, v222, v223);
    *(_QWORD *)(a1 + 27776) = v217;
    v81 = v216;
    *(_QWORD *)(a1 + 27784) = v218;
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v224, v218, v302, NAN, NAN, v225, v226, v227, v228);
    *(_QWORD *)(a1 + 27776) = v218;
    *(_QWORD *)(a1 + 27784) = v302;
    goto LABEL_26;
  }
  if ((_DWORD)v102 == 27)
  {
    v278 = v81;
    v279 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v280 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v281 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v301, v92);
    v140 = v303;
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v281, v303, v279, NAN, NAN, v282, v283, v284, v285);
    *(_QWORD *)(a1 + 27776) = v279;
    v81 = v278;
    *(_QWORD *)(a1 + 27784) = v280;
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v286, v280, v302, NAN, NAN, v287, v288, v289, v290);
    *(_QWORD *)(a1 + 27776) = v280;
    *(_QWORD *)(a1 + 27784) = v302;
LABEL_26:
    v156 = v229;
    v161 = (_QWORD *)(a1 + 27640);
    v146 = v298;
LABEL_17:
    JSC::FTL::Output::branch(v161, (uint64_t)v156, v146, v97, NAN, NAN, v157, v158, v159, v160);
    goto LABEL_18;
  }
  if ((_DWORD)v102 != 25)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x197DE8E50);
  }
LABEL_29:
  v230 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v301, v92);
  v140 = v303;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v230, v303, v302, NAN, NAN, v231, v232, v233, v234);
  v146 = v298;
LABEL_18:
  *(_QWORD *)(a1 + 27776) = v97;
  *(_QWORD *)(a1 + 27784) = v140;
  v162 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
  v163 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v162, v81);
  v164 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)(a1 + 27640), v163, 2);
  v166 = JSC::FTL::IndexedAbstractHeap::baseIndex(v304, (JSC::FTL::Output *)(a1 + 27640), v57, v164, 0, 0, 0, v165);
  v168 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, v166, v167, 2);
  v169 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v168);
  if (v169 || v170)
  {
    if ((*(_WORD *)(v169 + 12) & 0xFFF) == 0x98)
      v177 = v169;
    else
      v177 = 0;
    *(_QWORD *)(v177 + 40) = v74;
  }
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v305, v171, v172, v173, v174, v175, v176);
  *(_QWORD *)(a1 + 27776) = v140;
  *(_QWORD *)(a1 + 27784) = v146;
  v178 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v81);
  v180 = v179;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v299, v181, v182, v183, v184, v185, v186);
  *(_QWORD *)(a1 + 27776) = v146;
  *(_QWORD *)(a1 + 27784) = v306;
  v196 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v195);
  v198 = v197;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v299, v199, v200, v201, v202, v203, v204);
  *(_QWORD *)(a1 + 27776) = v306;
  *(_QWORD *)(a1 + 27784) = v299;
  v205 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), -1);
  v206 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v205);
  v208 = v207;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v299, v209, v210, v211, v212, v213, v214);
  *(_QWORD *)(a1 + 27776) = v299;
  *(_QWORD *)(a1 + 27784) = v297;
  v215 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>((_QWORD *)(a1 + 27640), 1, v178, v180, v196, v198, v206, v208);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowMapObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowSetObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  JSC::DFG::Node *v22;
  char **v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  char *v41;
  WTF *v42;
  uint64_t v43;

  v14 = (int *)(a1 + 28260);
  v15 = *(_DWORD *)(a1 + 28260);
  if ((v15 & 0x80000000) == 0)
  {
    v27 = *(_QWORD *)(a1 + 27848);
    v42 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v42 = 0x200000001;
    v43 = 0x200000002;
    v35 = (_QWORD *)(v27 + 32);
    v36 = *(unsigned int *)(v27 + 44);
    if ((_DWORD)v36 == *(_DWORD *)(v27 + 40))
    {
      v37 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)&v42);
      v38 = *(_QWORD *)(v27 + 32) + 16 * *(unsigned int *)(v27 + 44);
    }
    else
    {
      v38 = *v35 + 16 * v36;
      v37 = (unint64_t)&v42;
    }
    *(_QWORD *)v38 = 0;
    *(_QWORD *)(v38 + 8) = 0;
    v39 = *(_QWORD *)v37;
    *(_QWORD *)v37 = 0;
    *(_QWORD *)v38 = v39;
    LODWORD(v39) = *(_DWORD *)(v37 + 8);
    *(_DWORD *)(v37 + 8) = 0;
    *(_DWORD *)(v38 + 8) = v39;
    LODWORD(v39) = *(_DWORD *)(v37 + 12);
    *(_DWORD *)(v37 + 12) = 0;
    *(_DWORD *)(v38 + 12) = v39;
    ++*(_DWORD *)(v27 + 44);
    v15 = v36 | 0x80000000;
    *v14 = v36 | 0x80000000;
    v40 = v42;
    if (v42)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree((unint64_t)v40, v28, v29, v30, v31, v32, v33, v34);
      v15 = *v14;
    }
  }
  v16 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v17 = *a4;
  v18 = *a5;
  v19 = *(_QWORD *)(a1 + 27776);
  v20 = *(JSC::B3::Value **)(a1 + 27760);
  v21 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v15, *(_QWORD *)(a1 + 27768), v16, *a3, v17, v18, *a6);
  JSC::B3::Procedure::addValueImpl(v20, v21);
  v42 = v21;
  v23 = (char **)(v19 + 8);
  v24 = *(unsigned int *)(v19 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v19 + 16))
  {
    v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v19 + 20);
    *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8 * v24) = *(_QWORD *)v41;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v21;
    v25 = v21;
  }
  *(_DWORD *)(v19 + 20) = v24 + 1;
  *((_QWORD *)v25 + 4) = v19;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowMapIteratorObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowSetIteratorObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateMapIteratorObject(uint64_t a1, unint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;

  if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0x8000000, a4, a5, a6, a7, a8))
  {
    v12 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 27640), v11);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateSetIteratorObject(uint64_t a1, unint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;

  if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0x8000000, a4, a5, a6, a7, a8))
  {
    v12 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 27640), v11);
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationSetAdd);
  v14 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), 2, v13, *a2, *a3, *a4, *a5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::DFG::Node *v17;

  v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v16 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v14, v15, *a3, *a4, *a5, *a6);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowWeakMapObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowWeakSetObject(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *,long long,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationWeakMapSet);
  v15 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), 2, v14, *a2, *a3, *a4, *a5, *a6);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,int),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::DFG::Node *v31;
  WTF *v32;
  char **v33;
  uint64_t v34;
  WTF *v35;
  char *v37;
  WTF *v38;
  uint64_t v39;

  v12 = (int *)(a1 + 28264);
  v13 = *(_DWORD *)(a1 + 28264);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = *(_QWORD *)(a1 + 27848);
    v38 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v38 = 0x200000002;
    v39 = 0x200000002;
    v22 = (_QWORD *)(v14 + 32);
    v23 = *(unsigned int *)(v14 + 44);
    if ((_DWORD)v23 == *(_DWORD *)(v14 + 40))
    {
      v24 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v38);
      v25 = *(_QWORD *)(v14 + 32) + 16 * *(unsigned int *)(v14 + 44);
    }
    else
    {
      v25 = *v22 + 16 * v23;
      v24 = (unint64_t)&v38;
    }
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    v26 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    *(_QWORD *)v25 = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 8);
    *(_DWORD *)(v24 + 8) = 0;
    *(_DWORD *)(v25 + 8) = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 12);
    *(_DWORD *)(v24 + 12) = 0;
    *(_DWORD *)(v25 + 12) = v26;
    ++*(_DWORD *)(v14 + 44);
    v13 = v23 | 0x80000000;
    *v12 = v23 | 0x80000000;
    v27 = v38;
    if (v38)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree((unint64_t)v27, v15, v16, v17, v18, v19, v20, v21);
      v13 = *v12;
    }
  }
  v28 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationParseIntGeneric);
  v29 = *a3;
  v30 = *(_QWORD *)(a1 + 27776);
  v32 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v13, *(_QWORD *)(a1 + 27768), v28, *a2, v29, *a4);
  v38 = v32;
  v33 = (char **)(v30 + 8);
  v34 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v34 == *(_DWORD *)(v30 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v33, v34 + 1, (unint64_t)&v38);
    v34 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v34) = *(_QWORD *)v37;
    v35 = v38;
  }
  else
  {
    *(_QWORD *)&(*v33)[8 * v34] = v32;
    v35 = v32;
  }
  *(_DWORD *)(v30 + 20) = v34 + 1;
  *((_QWORD *)v35 + 4) = v30;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationParseIntString);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,int,int),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::DFG::Node *v31;
  WTF *v32;
  char **v33;
  uint64_t v34;
  WTF *v35;
  char *v37;
  WTF *v38;
  uint64_t v39;

  v12 = (int *)(a1 + 28264);
  v13 = *(_DWORD *)(a1 + 28264);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = *(_QWORD *)(a1 + 27848);
    v38 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v38 = 0x200000002;
    v39 = 0x200000002;
    v22 = (_QWORD *)(v14 + 32);
    v23 = *(unsigned int *)(v14 + 44);
    if ((_DWORD)v23 == *(_DWORD *)(v14 + 40))
    {
      v24 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v38);
      v25 = *(_QWORD *)(v14 + 32) + 16 * *(unsigned int *)(v14 + 44);
    }
    else
    {
      v25 = *v22 + 16 * v23;
      v24 = (unint64_t)&v38;
    }
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    v26 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    *(_QWORD *)v25 = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 8);
    *(_DWORD *)(v24 + 8) = 0;
    *(_DWORD *)(v25 + 8) = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 12);
    *(_DWORD *)(v24 + 12) = 0;
    *(_DWORD *)(v25 + 12) = v26;
    ++*(_DWORD *)(v14 + 44);
    v13 = v23 | 0x80000000;
    *v12 = v23 | 0x80000000;
    v27 = v38;
    if (v38)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree((unint64_t)v27, v15, v16, v17, v18, v19, v20, v21);
      v13 = *v12;
    }
  }
  v28 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationParseIntInt32);
  v29 = *a3;
  v30 = *(_QWORD *)(a1 + 27776);
  v32 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v13, *(_QWORD *)(a1 + 27768), v28, *a2, v29, *a4);
  v38 = v32;
  v33 = (char **)(v30 + 8);
  v34 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v34 == *(_DWORD *)(v30 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v33, v34 + 1, (unint64_t)&v38);
    v34 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v34) = *(_QWORD *)v37;
    v35 = v38;
  }
  else
  {
    *(_QWORD *)&(*v33)[8 * v34] = v32;
    v35 = v32;
  }
  *(_DWORD *)(v30 + 20) = v34 + 1;
  *((_QWORD *)v35 + 4) = v30;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double,int),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::DFG::Node *v31;
  WTF *v32;
  char **v33;
  uint64_t v34;
  WTF *v35;
  char *v37;
  WTF *v38;
  uint64_t v39;

  v12 = (int *)(a1 + 28264);
  v13 = *(_DWORD *)(a1 + 28264);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = *(_QWORD *)(a1 + 27848);
    v38 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v38 = 0x200000002;
    v39 = 0x200000002;
    v22 = (_QWORD *)(v14 + 32);
    v23 = *(unsigned int *)(v14 + 44);
    if ((_DWORD)v23 == *(_DWORD *)(v14 + 40))
    {
      v24 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v38);
      v25 = *(_QWORD *)(v14 + 32) + 16 * *(unsigned int *)(v14 + 44);
    }
    else
    {
      v25 = *v22 + 16 * v23;
      v24 = (unint64_t)&v38;
    }
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    v26 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    *(_QWORD *)v25 = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 8);
    *(_DWORD *)(v24 + 8) = 0;
    *(_DWORD *)(v25 + 8) = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 12);
    *(_DWORD *)(v24 + 12) = 0;
    *(_DWORD *)(v25 + 12) = v26;
    ++*(_DWORD *)(v14 + 44);
    v13 = v23 | 0x80000000;
    *v12 = v23 | 0x80000000;
    v27 = v38;
    if (v38)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree((unint64_t)v27, v15, v16, v17, v18, v19, v20, v21);
      v13 = *v12;
    }
  }
  v28 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationParseIntDouble);
  v29 = *a3;
  v30 = *(_QWORD *)(a1 + 27776);
  v32 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v13, *(_QWORD *)(a1 + 27768), v28, *a2, v29, *a4);
  v38 = v32;
  v33 = (char **)(v30 + 8);
  v34 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v34 == *(_DWORD *)(v30 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v33, v34 + 1, (unint64_t)&v38);
    v34 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v34) = *(_QWORD *)v37;
    v35 = v38;
  }
  else
  {
    *(_QWORD *)&(*v33)[8 * v34] = v32;
    v35 = v32;
  }
  *(_DWORD *)(v30 + 20) = v34 + 1;
  *((_QWORD *)v35 + 4) = v30;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::DFG::Node *v14;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationParseIntStringNoRadix);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v11, v12, *a2, *a3);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double),JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::DFG::Node *v14;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationParseIntDoubleNoRadix);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v11, v12, *a2, *a3);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<long long (*)(double),JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  JSC::DFG::Node *v13;

  v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationToLengthDouble);
  v11 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 2, *(_QWORD *)(a1 + 27768), v10, *a2);
  return v11;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildTypeOf<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1}>(uint64_t *a1, unint64_t a2, JSC::B3::Value *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  JSC::B3::Value *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  JSC::B3::Value *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  JSC::B3::Value *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  JSC::B3::Value *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  JSC::B3::Value *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  JSC::B3::Value *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  JSC::B3::Value *v205;
  JSC::B3::Value *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  JSC::B3::Value *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  __int128 v258;
  _BYTE v259[72];
  uint64_t v260[2];

  v7 = *a1;
  JSC::CodeOrigin::CodeOrigin(v260, (const JSC::CodeOrigin *)(a1 + 3524));
  v241 = JSC::DFG::Graph::globalObjectFor(v7, v260, v8, v9, v10, v11, v12, v13);
  if ((v260[0] & 1) != 0 && (v260[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v260[0] & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
  v21 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v22 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v23 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v24 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v240 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v25 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v255 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v239 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v243 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v244 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v245 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v246 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v247 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v248 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v26 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v250 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v251 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v252 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v253 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v254 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v34, v21, v26, NAN, NAN, v35, v36, v37, v38);
  a1[3472] = v21;
  v249 = a1[3473];
  a1[3473] = v22;
  JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v46, v22, v239, NAN, NAN, v47, v48, v49, v50);
  a1[3472] = v22;
  a1[3473] = v23;
  JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v58, v23, v24, NAN, NAN, v59, v60, v61, v62);
  a1[3472] = v23;
  a1[3473] = v24;
  a1[3472] = v24;
  a1[3473] = v240;
  JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v76, v25, v240, 0.0, 1.0, v77, v78, v79, v80);
  a1[3472] = v240;
  a1[3473] = v25;
  a1[3472] = v25;
  a1[3473] = v255;
  *(_QWORD *)&v258 = *(_QWORD *)(*a1 + 16);
  *((_QWORD *)&v258 + 1) = v241;
  *(_QWORD *)&v258 = v259;
  *((_QWORD *)&v258 + 1) = 3;
  *(_QWORD *)&v256 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 0);
  *((_QWORD *)&v256 + 1) = v254;
  LODWORD(v257) = 2143289344;
  if (HIDWORD(v258) == DWORD2(v258))
  {
    WTF::Vector<JSC::FTL::SwitchCase,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::SwitchCase>((uint64_t)&v258, (unint64_t)&v256, v88, v89, v90, v91, v92, v93);
  }
  else
  {
    v94 = v258 + 24 * HIDWORD(v258);
    v95 = v256;
    *(_QWORD *)(v94 + 16) = v257;
    *(_OWORD *)v94 = v95;
    ++HIDWORD(v258);
  }
  *(_QWORD *)&v256 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 6);
  *((_QWORD *)&v256 + 1) = v240;
  LODWORD(v257) = 2143289344;
  if (HIDWORD(v258) == DWORD2(v258))
  {
    WTF::Vector<JSC::FTL::SwitchCase,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::SwitchCase>((uint64_t)&v258, (unint64_t)&v256, v96, v97, v98, v99, v100, v101);
  }
  else
  {
    v102 = v258 + 24 * HIDWORD(v258);
    v103 = v256;
    *(_QWORD *)(v102 + 16) = v257;
    *(_OWORD *)v102 = v103;
    ++HIDWORD(v258);
  }
  *(_QWORD *)&v256 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 7);
  *((_QWORD *)&v256 + 1) = v23;
  LODWORD(v257) = 2143289344;
  if (HIDWORD(v258) == DWORD2(v258))
  {
    WTF::Vector<JSC::FTL::SwitchCase,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::SwitchCase>((uint64_t)&v258, (unint64_t)&v256, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    v110 = v258 + 24 * HIDWORD(v258);
    v111 = v256;
    *(_QWORD *)(v110 + 16) = v257;
    *(_OWORD *)v110 = v111;
    ++HIDWORD(v258);
  }
  v112 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 3455), (JSC::B3::Value *)v87);
  JSC::FTL::Output::switchInstruction<WTF::Vector<JSC::FTL::SwitchCase,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(a1 + 3455), (uint64_t)v112, (uint64_t **)&v258, v255);
  a1[3472] = v255;
  a1[3473] = v239;
  JSC::B3::BasicBlock::appendNewControlValue(v255, a1[3470], 159, a1[3471], v113, v114, v115, v116);
  a1[3472] = v239;
  a1[3473] = v243;
  JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v124, v243, v244, NAN, NAN, v125, v126, v127, v128);
  a1[3472] = v243;
  a1[3473] = v244;
  a1[3472] = v244;
  a1[3473] = v245;
  JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v142, v245, v246, NAN, NAN, v143, v144, v145, v146);
  a1[3472] = v245;
  a1[3473] = v246;
  a1[3472] = v246;
  a1[3473] = v247;
  JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v160, v247, v248, NAN, NAN, v161, v162, v163, v164);
  a1[3472] = v247;
  a1[3473] = v248;
  a1[3472] = v248;
  a1[3473] = v26;
  a1[3472] = v26;
  a1[3473] = v250;
  JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v184, v250, v251, NAN, NAN, v185, v186, v187, v188);
  a1[3472] = v250;
  a1[3473] = v251;
  a1[3472] = v251;
  a1[3473] = v252;
  {
    v205 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), 2);
    v206 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 3455), a3, v205);
  }
  else
  {
    v206 = (JSC::B3::Value *)a1[3456];
  }
  JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v206, v240, v252, NAN, NAN, v201, v202, v203, v204);
  a1[3472] = v252;
  a1[3473] = v253;
  JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v214, v253, v254, NAN, NAN, v215, v216, v217, v218);
  a1[3472] = v253;
  a1[3473] = v254;
  a1[3472] = v254;
  a1[3473] = v249;
  v238 = v258;
  if (v259 != (_BYTE *)v258)
  {
    if ((_QWORD)v258)
    {
      *(_QWORD *)&v258 = 0;
      DWORD2(v258) = 0;
      WTF::fastFree(v238, v231, v232, v233, v234, v235, v236, v237);
    }
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1}::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  __int128 *v33;
  __int128 v34;

  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD **)(a1 + 8);
  v11 = (unint64_t *)(*(_QWORD *)(*v10 + 16) + 41984);
  switch(a2)
  {
    case 0:
      v11 = (unint64_t *)(*(_QWORD *)(*v10 + 16) + 42032);
      break;
    case 1:
      v11 = (unint64_t *)(*(_QWORD *)(*v10 + 16) + 42056);
      break;
    case 2:
      break;
    case 3:
      v11 = (unint64_t *)(*(_QWORD *)(*v10 + 16) + 42008);
      break;
    case 4:
      v11 = (unint64_t *)(*(_QWORD *)(*v10 + 16) + 42040);
      break;
    case 5:
      v11 = (unint64_t *)(*(_QWORD *)(*v10 + 16) + 42048);
      break;
    case 6:
      v11 = (unint64_t *)(*(_QWORD *)(*v10 + 16) + 42024);
      break;
    case 7:
      v11 = (unint64_t *)(*(_QWORD *)(*v10 + 16) + 42000);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197DEA4D0);
  }
  v12 = *v11;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*v10 + 24) + 280), *v11, a3, a4, a5, a6, a7, a8);
  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v10 + 3455), v12);
  v14 = v10[3472];
  v15 = (JSC::B3::Value *)v10[3470];
  v16 = v10[3471];
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v17 + 8) = -1;
  *(_WORD *)(v17 + 12) = 152;
  *(_DWORD *)(v17 + 16) = 0;
  *(_BYTE *)(v17 + 20) = 1;
  *(_QWORD *)v17 = &unk_1E357EDA0;
  *(_QWORD *)(v17 + 40) = 0;
  *(_QWORD *)(v17 + 48) = v13;
  *(_QWORD *)(v17 + 24) = v16;
  *(_QWORD *)(v17 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v15, (JSC::B3::Value *)v17);
  *(_QWORD *)&v34 = v17;
  v21 = (char **)(v14 + 8);
  v22 = *(unsigned int *)(v14 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v14 + 16))
  {
    v32 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v34);
    v22 = *(unsigned int *)(v14 + 20);
    *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v22) = *(_QWORD *)v32;
    v23 = v34;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v17;
    v23 = v17;
  }
  *(_DWORD *)(v14 + 20) = v22 + 1;
  *(_QWORD *)(v23 + 32) = v14;
  v24 = v10[3472];
  *(_QWORD *)&v34 = v17;
  *((_QWORD *)&v34 + 1) = v24;
  v25 = *(unsigned int *)(v9 + 12);
  if ((_DWORD)v25 == *(_DWORD *)(v9 + 8))
  {
    v33 = (__int128 *)WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v25 + 1, (unint64_t)&v34);
    v25 = *(unsigned int *)(v9 + 12);
    v26 = *(_QWORD *)v9;
    v27 = *v33;
  }
  else
  {
    v26 = *(_QWORD *)v9;
    v27 = v34;
  }
  *(_OWORD *)(v26 + 16 * v25) = v27;
  ++*(_DWORD *)(v9 + 12);
  v28 = v10[3472];
  v29 = v10[3470];
  v30 = v10[3471];
  *(_QWORD *)&v34 = **(_QWORD **)(a1 + 16);
  BYTE8(v34) = 0;
  return JSC::B3::BasicBlock::appendNewControlValue(v28, v29, 154, v30, (uint64_t *)&v34, v18, v19, v20);
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildTypeOf<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1}>(JSC::DFG::Edge,JSC::B3::Value *,JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::B3::Value *>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  WTF *v13;
  WTF *v15;
  int v16;
  uint64_t v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v17[0] = a3;
  WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v15, v17, 1uLL);
  v13 = v15;
  if (v15)
  {
    v15 = 0;
    v16 = 0;
    WTF::fastFree((unint64_t)v13, v5, v6, v7, v8, v9, v10, v11);
  }
  return v12;
}

uint64_t JSC::FTL::Output::switchInstruction<WTF::Vector<JSC::FTL::SwitchCase,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  float *v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;

  v6 = JSC::B3::BasicBlock::appendNew<JSC::B3::SwitchValue,JSC::B3::Origin,JSC::B3::Value *>(*(_QWORD *)(a1 + 136), *(JSC::B3::Value **)(a1 + 120), *(_QWORD *)(a1 + 128), a2);
  v28 = a4;
  LOBYTE(v29) = 0;
  result = JSC::B3::SwitchValue::setFallThrough(v6, (unint64_t)&v28, v7, v8, v9, v10, v11, v12);
  v19 = *((_DWORD *)a3 + 3);
  if (v19)
  {
    v20 = (float *)*a3;
    v21 = (uint64_t *)&v20[6 * v19];
    do
    {
      v22 = *(_QWORD *)v20;
      v23 = *(_WORD *)(*(_QWORD *)v20 + 12) & 0xFFF;
      if (*(_QWORD *)v20)
        v24 = v23 == 3;
      else
        v24 = 0;
      if (v24)
      {
        v25 = *(int *)(v22 + 40);
      }
      else
      {
        if (v23 != 4)
          v22 = 0;
        v25 = *(_QWORD *)(v22 + 40);
      }
      v26 = *((_QWORD *)v20 + 1);
      v27 = v20[4] == 0.0;
      v28 = v25;
      v29 = v26;
      v30 = v27;
      result = (uint64_t)JSC::B3::SwitchValue::appendCase(v6, *(_QWORD *)(v6 + 32), &v28, v14, v15, v16, v17, v18);
      v20 += 6;
    }
    while (v20 != (float *)v21);
  }
  return result;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildTypeOf<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1}>(JSC::DFG::Edge,JSC::B3::Value *,JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  JSC::CodeOrigin::CodeOrigin(&v40, (const JSC::CodeOrigin *)(a1 + 3524));
  v11 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v12 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a3;
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      v35 = (unint64_t)v15;
      LOBYTE(v36) = 3;
      JSC::B3::StackmapValue::append(v11, v15, (unint64_t)&v35 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  *((_QWORD *)v11 + 8) |= 0x30000uLL;
  *((_QWORD *)v11 + 10) |= 0x30000uLL;
  v16 = a1[1];
  v35 = *a2;
  v17 = v39;
  if (v39)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = v39;
  }
  else
  {
    v19 = 0;
  }
  v36 = v17;
  v37 = v16;
  JSC::CodeOrigin::CodeOrigin(&v38, (const JSC::CodeOrigin *)&v40);
  if (v19)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v19, v27, v28, v29, v30, v31, v32, v33);
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  return v11;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildTypeOf<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1}>(JSC::DFG::Edge,JSC::B3::Value *,JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildTypeOf<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1}>(JSC::DFG::Edge,JSC::B3::Value *,JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E35773D8;
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  v2 = *(unsigned int **)(a2 + 16);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v5;
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v7 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      result = v12;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v4 = v6 | v9;
  }
  *(_QWORD *)(result + 48) = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildTypeOf<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1}>(JSC::DFG::Edge,JSC::B3::Value *,JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildTypeOf<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1}>(JSC::DFG::Edge,JSC::B3::Value *,JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildTypeOf<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1}>(JSC::DFG::Edge,JSC::B3::Value *,JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildTypeOf<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1}>(JSC::DFG::Edge,JSC::B3::Value *,JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  uint64_t v58[5];
  unsigned int *v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int *v63;
  unint64_t v64;
  uint64_t v65;

  v64 = 0;
  v65 = 0;
  v6 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_BYTE **)(a3 + 8);
    v8 = 16 * v6;
    while (1)
    {
      v9 = v7[8];
      switch(v9)
      {
        case 7:
          v10 = *v7 & 0x7F;
          v11 = 1;
          break;
        case 9:
          v10 = (*(_QWORD *)v7 << 32) | 0x1DLL;
          v11 = 2;
          break;
        case 11:
          v10 = *(_QWORD *)v7;
          v11 = 3;
          break;
        default:
          __break(0xC471u);
          return;
      }
      *(_QWORD *)&v55 = v11;
      *((_QWORD *)&v55 + 1) = v10;
      v12 = HIDWORD(v65);
      if (HIDWORD(v65) == (_DWORD)v65)
      {
        WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::Location>((uint64_t)&v64, (unint64_t)&v55);
      }
      else
      {
        *(_OWORD *)(v64 + 16 * HIDWORD(v65)) = v55;
        HIDWORD(v65) = v12 + 1;
      }
      v7 += 16;
      v8 -= 16;
      if (!v8)
      {
        v13 = v64;
        v14 = HIDWORD(v65);
        goto LABEL_10;
      }
    }
  }
  v14 = 0;
  v13 = 0;
LABEL_10:
  JSC::MacroAssemblerARM64::patchableJump(a2, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v61);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a2, v22, v23, v24, v25, v26, v27, v28, &v60);
  v29 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v31 = v30;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v59);
  LODWORD(v55) = v61;
  *(_QWORD *)((char *)&v55 + 4) = v62;
  v56 = *(_QWORD *)(a1 + 24);
  v57 = v60;
  JSC::CodeOrigin::CodeOrigin(v58, (const JSC::CodeOrigin *)(a1 + 32));
  v32 = v59;
  if (v59)
  {
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  v58[1] = (uint64_t)v32;
  v58[2] = v29;
  v58[3] = v31;
  v34 = (uint64_t)v63;
  if (v63)
  {
    v35 = v63 + 2;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 + 1, v35));
  }
  v58[4] = v34;
  _ZNK3JSC2B324StackmapGenerationParams11addLatePathIZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS5_11buildTypeOfIZNS5_13compileTypeOfEvEUlNS_10TypeofTypeEE_EEvNS_3DFG4EdgeEPNS0_5ValueERKT_EUlRKN3WTF6VectorINS3_8LocationELm0ENSH_15CrashOnOverflowELm16ENSH_10FastMallocEEEE_EEPNS0_15PatchpointValueESG_RKNSI_ISD_Lm0ESK_Lm16ESL_EEENKUlRNS_12CCallHelpersERKS1_E_clESW_SY_EUlSW_E_EEvSG_(*(_QWORD *)(a3 + 56), (uint64_t)&v55);
  if (v59)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v59, v44, v45, v46, v47, v48, v49, v50);
  v51 = v63;
  v63 = 0;
  if (v51)
  {
    v52 = v51 + 2;
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
    }
  }
  if (v64)
    WTF::fastFree(v64, v44, v45, v46, v47, v48, v49, v50);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildTypeOf<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1}>(JSC::DFG::Edge,JSC::B3::Value *,JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;

  if (!a4)
  {
    __break(0xC471u);
    JUMPOUT(0x197DEAD78);
  }
  if (*(_DWORD *)(a3 + 12) || a4 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DEAD50);
  }
  if (*(_DWORD *)(a3 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x197DEAD70);
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = *(_DWORD *)(a3 + 8) & 0x7F;
  v8 = *(_BYTE *)(a3 + 24) & 0x7F;
  result = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3576AC8;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = operationTypeOfObjectAsTypeofType;
  *(_BYTE *)(result + 32) = v7;
  *(_QWORD *)(result + 40) = v6;
  *(_BYTE *)(result + 48) = v8;
  *a1 = result;
  return result;
}

_QWORD *_ZNK3JSC2B324StackmapGenerationParams11addLatePathIZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS5_11buildTypeOfIZNS5_13compileTypeOfEvEUlNS_10TypeofTypeEE_EEvNS_3DFG4EdgeEPNS0_5ValueERKT_EUlRKN3WTF6VectorINS3_8LocationELm0ENSH_15CrashOnOverflowELm16ENSH_10FastMallocEEEE_EEPNS0_15PatchpointValueESG_RKNSI_ISD_Lm0ESK_Lm16ESL_EEENKUlRNS_12CCallHelpersERKS1_E_clESW_SY_EUlSW_E_EEvSG_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[9];
  unsigned int *v19;

  v3 = WTF::fastMalloc((WTF *)0x58);
  v4 = _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_11buildTypeOfIZNSD_13compileTypeOfEvEUlNS1_10TypeofTypeEE_EEvNS1_3DFG4EdgeEPNS4_5ValueERKT_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueESO_RKNSP_ISL_Lm0ESR_Lm16ESS_EEENKUlS3_RKS9_E_clES3_S13_EUlS3_E_EEvSO_EUlS3_S7_E_EC1EOS16_(v3, (uint64_t)v18);
  v19 = (unsigned int *)v4;
  v12 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v19);
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v4;
    *(_DWORD *)(a1 + 12) = v12 + 1;
  }
}

uint64_t _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_11buildTypeOfIZNSD_13compileTypeOfEvEUlNS1_10TypeofTypeEE_EEvNS1_3DFG4EdgeEPNS4_5ValueERKT_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueESO_RKNSP_ISL_Lm0ESR_Lm16ESS_EEENKUlS3_RKS9_E_clES3_S13_EUlS3_E_EEvSO_EUlS3_S7_E_EC1EOS16_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3577400;
  *(_DWORD *)(result + 16) = *(_DWORD *)a2;
  *(_QWORD *)(result + 20) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = result;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      result = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)(result + 48) = v2;
  v3 = *(unsigned int **)(a2 + 40);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 56) = v3;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 80) = v5;
  return result;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_11buildTypeOfIZNSD_13compileTypeOfEvEUlNS1_10TypeofTypeEE_EEvNS1_3DFG4EdgeEPNS4_5ValueERKT_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueESO_RKNSP_ISL_Lm0ESR_Lm16ESS_EEENKUlS3_RKS9_E_clES3_S13_EUlS3_E_EEvSO_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_11buildTypeOfIZNSD_13compileTypeOfEvEUlNS1_10TypeofTypeEE_EEvNS1_3DFG4EdgeEPNS4_5ValueERKT_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueESO_RKNSP_ISL_Lm0ESR_Lm16ESS_EEENKUlS3_RKS9_E_clES3_S13_EUlS3_E_EEvSO_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_11buildTypeOfIZNSD_13compileTypeOfEvEUlNS1_10TypeofTypeEE_EEvNS1_3DFG4EdgeEPNS4_5ValueERKT_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueESO_RKNSP_ISL_Lm0ESR_Lm16ESS_EEENKUlS3_RKS9_E_clES3_S13_EUlS3_E_EEvSO_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

_QWORD *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildTypeOf<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1}>(JSC::DFG::Edge,JSC::B3::Value *,JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(void)::{lambda(JSC::TypeofType)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *result;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[12];
  int v59;
  unsigned int *v60;
  uint64_t v61[2];
  __int128 v62;
  uint64_t v63;
  int v64;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v18 = *(unsigned int *)(v17 + 308);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v17 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v17 + 296) + 8 * v18) = 0;
    *(_DWORD *)(v17 + 308) = v18 + 1;
  }
  JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters((unsigned int *)a2, v18, v11, v12, v13, v14, v15, v16);
  v19 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v19 + 90440), v19, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v20, v21, v22, v23, v24, v58);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, *(uint64_t *)v58, v25, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v58, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 24);
  if (v38)
  {
    v39 = v38 + 2;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
  }
  else
  {
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
  }
  v60 = v38;
  JSC::CodeOrigin::CodeOrigin(v61, (const JSC::CodeOrigin *)(a1 + 32));
  v42 = *(unsigned int **)(a1 + 40);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v61[1] = (uint64_t)v42;
  v62 = *(_OWORD *)(a1 + 48);
  v44 = *(_QWORD *)(a1 + 64);
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v63 = v44;
  v64 = v18;
  _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_11buildTypeOfIZNS6_13compileTypeOfEvEUlNS_10TypeofTypeEE_EEvNS_3DFG4EdgeEPNS_2B35ValueERKT_EUlRKN3WTF6VectorINS4_8LocationELm0ENSJ_15CrashOnOverflowELm16ENSJ_10FastMallocEEEE_EEPNSD_15PatchpointValueESI_RKNSK_ISF_Lm0ESM_Lm16ESN_EEENKUlRNS_12CCallHelpersERKNSD_24StackmapGenerationParamsEE_clESY_S11_ENKUlSY_E_clESY_EUlRNS_10LinkBufferEE_EEvSI_(a2, (uint64_t)v58);
  if (v38)
  {
    v55 = v38 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v38 + 2);
      result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v38 + 32))(v38);
    }
  }
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_11buildTypeOfIZNS6_13compileTypeOfEvEUlNS_10TypeofTypeEE_EEvNS_3DFG4EdgeEPNS_2B35ValueERKT_EUlRKN3WTF6VectorINS4_8LocationELm0ENSJ_15CrashOnOverflowELm16ENSJ_10FastMallocEEEE_EEPNSD_15PatchpointValueESI_RKNSK_ISF_Lm0ESM_Lm16ESN_EEENKUlRNS_12CCallHelpersERKNSD_24StackmapGenerationParamsEE_clESY_S11_ENKUlSY_E_clESY_EUlRNS_10LinkBufferEE_EEvSI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3577428;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)a2;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v4 + 32) = v6;
  v9 = *(_QWORD *)(a2 + 24);
  if ((v9 & 1) != 0)
  {
    v29 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v30 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v33 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = v33;
      *(_DWORD *)(v29 + 8) = v30;
      v32 = 1;
    }
    else
    {
      v32 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = v30 << 36;
    }
    v9 = v29 | v32;
  }
  *(_QWORD *)(v5 + 40) = v9;
  v10 = *(unsigned int **)(a2 + 32);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v5 + 72) = v12;
  *(_DWORD *)(v5 + 80) = *(_DWORD *)(a2 + 64);
  v15 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 240))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
LABEL_21:
    *v16 = v5;
    *(_DWORD *)(a1 + 244) = v15 + 1;
    return;
  }
  v17 = v15 + (v15 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15 + 1)
    v19 = v15 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = *(const void **)(a1 + 232);
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(a1 + 240) = v19;
    *(_QWORD *)(a1 + 232) = v21;
    memcpy(v21, v20, 8 * v15);
    if (v20)
    {
      if (*(const void **)(a1 + 232) == v20)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
    }
    v15 = *(unsigned int *)(a1 + 244);
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
    goto LABEL_21;
  }
  __break(0xC471u);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_11buildTypeOfIZNS7_13compileTypeOfEvEUlNS1_10TypeofTypeEE_EEvNS1_3DFG4EdgeEPNS1_2B35ValueERKT_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNSE_15PatchpointValueESJ_RKNSK_ISG_Lm0ESM_Lm16ESN_EEENKUlRNS1_12CCallHelpersERKNSE_24StackmapGenerationParamsEE_clESY_S11_ENKUlSY_E_clESY_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_11buildTypeOfIZNS7_13compileTypeOfEvEUlNS1_10TypeofTypeEE_EEvNS1_3DFG4EdgeEPNS1_2B35ValueERKT_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNSE_15PatchpointValueESJ_RKNSK_ISG_Lm0ESM_Lm16ESN_EEENKUlRNS1_12CCallHelpersERKNSE_24StackmapGenerationParamsEE_clESY_S11_ENKUlSY_E_clESY_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_11buildTypeOfIZNS7_13compileTypeOfEvEUlNS1_10TypeofTypeEE_EEvNS1_3DFG4EdgeEPNS1_2B35ValueERKT_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNSE_15PatchpointValueESJ_RKNSK_ISG_Lm0ESM_Lm16ESN_EEENKUlRNS1_12CCallHelpersERKNSE_24StackmapGenerationParamsEE_clESY_S11_ENKUlSY_E_clESY_EUlS3_E_E3runES3_(uint64_t a1, JSC::LinkBuffer *a2)
{
}

__n128 WTF::Vector<JSC::FTL::SwitchCase,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::SwitchCase>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 *v10;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::FTL::SwitchCase,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v9;
  v10[1].n128_u64[0] = v9[1].n128_u64[0];
  *v10 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::FTL::SwitchCase,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 24 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v14 = (unint64_t)a2;
      if (v14 <= v12)
      {
        v26 = *(_QWORD *)a1;
        return v26 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
      if (v14 < 4)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 3;
        goto LABEL_32;
      }
      if (v14 < 0xAAAAAAB)
      {
        v15 = 24 * v14;
        v16 = WTF::fastMalloc((WTF *)(24 * v14));
        *(_DWORD *)(a1 + 8) = (v15 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v16;
LABEL_32:
        v27 = 0;
        do
        {
          v28 = v16 + v27;
          v29 = *(_OWORD *)(v10 + v27);
          *(_QWORD *)(v28 + 16) = *(_QWORD *)(v10 + v27 + 16);
          *(_OWORD *)v28 = v29;
          v27 += 24;
        }
        while (24 * v11 != v27);
        v26 = *(_QWORD *)a1;
        if (a1 + 16 != v10 && v10)
        {
          if (v26 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v26 = *(_QWORD *)a1;
        }
        return v26 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x197DEBAD0);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v19 = (unint64_t)a2;
  if (v19 > v17)
  {
    v20 = *(unsigned int *)(a1 + 12);
    if (v19 < 4)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
      if (!(_DWORD)v20)
        goto LABEL_25;
    }
    else
    {
      if (v19 >= 0xAAAAAAB)
        goto LABEL_41;
      v21 = 24 * v19;
      v22 = WTF::fastMalloc((WTF *)(24 * v19));
      *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v20)
        goto LABEL_25;
    }
    v23 = 24 * v20;
    v24 = v10;
    do
    {
      v25 = *(_OWORD *)v24;
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v24 + 16);
      *(_OWORD *)v22 = v25;
      v22 += 24;
      v24 += 24;
      v23 -= 24;
    }
    while (v23);
LABEL_25:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOf(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 32);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOf(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 4);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOf(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  unsigned int v12;
  char *v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  JSC::JITDelByValGenerator *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  _DWORD *v89;
  uint64_t *v90;
  int v91;
  char *v92;
  int i;
  unsigned int v94;
  _QWORD *v95;
  int v96;
  WTF *v97;
  WTF *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 *v104;
  uint64_t v105;
  __int128 v106;
  WTF *v107;
  void *v108;
  WTF *v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  WTF *v139;
  unsigned int v140;
  unsigned int v141;
  WTF *v142;
  _BYTE *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  _BYTE *v151;
  unsigned int v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  char v187;
  unsigned int v188;
  char v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  int v193;
  _QWORD v194[4];
  char v195;
  uint64_t v196;
  uint64_t v197;
  _OWORD *v198;
  int v199;
  int v200;
  void *v201;
  int v202;
  int v203;
  void *v204;
  int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int *v209;
  char v210;
  char v211;
  char v212;
  int v213;
  int v214;
  uint64_t v215;
  WTF *v216;
  uint64_t v217;
  _DWORD v218[3];
  WTF *v219;
  uint64_t v220;
  _BYTE v221[24];
  _BYTE v222[12];
  JSC::FTL::ExceptionTarget *v223[19];
  unsigned int *v224;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "InstanceOf");
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v12 = *((_DWORD *)a3 + 5);
  if (!v12)
    goto LABEL_133;
  if (v12 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DEC588);
  }
  v187 = v11;
  if (v12 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DEC590);
  }
  v13 = (char *)a3[1];
  v14 = *v13;
  v15 = v13[16];
  v16 = v13[32];
  if (!HIBYTE(qword_1ECF4C780))
  {
    v17 = -1;
    goto LABEL_10;
  }
  if (!*((_DWORD *)a3 + 9))
  {
LABEL_133:
    __break(0xC471u);
    JUMPOUT(0x197DEC580);
  }
  v17 = *(_BYTE *)a3[3];
LABEL_10:
  v189 = v15 & 0x7F;
  v190 = v14 & 0x7F;
  v188 = v16 & 0x7F;
  *(_QWORD *)v222 = 0xFFFFFFFFLL;
  *(_DWORD *)&v222[8] = -16773311;
  if (!*(_BYTE *)(a1 + 16))
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 0, v15 & 0x7F, 28, a5, a6, a7, a8, (uint64_t)v223);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)6, v190, v18, v19, v20, v21, v22);
    JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), v23, v24, v25, v26, v27, v28, v29, (int *)&v191);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v30, v31, v32, v33, v34, v35);
    v42 = 0xFF000F4500000000;
    if (!*(_BYTE *)(a2 + 328))
      v42 = 0xFF000F4100000000;
    *(_DWORD *)v222 = v191;
    *(_QWORD *)&v222[4] = v42;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v223, a2, v36, v37, v38, v39, v40, v41);
  }
  v219 = (WTF *)v221;
  v220 = 2;
  if (!*(_BYTE *)(a1 + 17))
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 1, v188, 28, a5, a6, a7, a8, (uint64_t)v218);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v219, v218, v155, v156, v157, v158, v159, v160);
  }
  v43 = *(_QWORD *)(a1 + 32);
  v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 64);
  if ((v43 & 1) != 0)
  {
    v161 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
    if ((v43 & 2) != 0
      || (v162 = *(unsigned int *)((v43 & 0xFFFFFFFF8) + 8), (_DWORD)v162 == 0x3FFFFFFF)
      || (_DWORD)v162 == -1)
    {
      v163 = 2;
    }
    else if (v162 >> 28)
    {
      v182 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v182 = v161;
      *(_DWORD *)(v182 + 8) = v162;
      v163 = 1;
      v161 = v182;
    }
    else
    {
      v163 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
      v161 = v162 << 36;
    }
    v43 = v161 | v163;
  }
  v217 = v43;
  v52 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v44, &v217);
  if ((v217 & 1) != 0 && (v217 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v217 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v223);
  v53 = (unsigned int *)v223[0];
  JSC::FTL::ExceptionTarget::jumps(v223[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v216);
  v223[0] = 0;
  if (v53)
  {
    do
    {
      v61 = __ldaxr(v53);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v53));
    if (!v62)
    {
      atomic_store(1u, v53);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v53, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
    }
  }
  v63 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v64 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v64 = 2;
  *(_DWORD *)(v64 + 96) = 0;
  *(_OWORD *)(v64 + 12) = 0u;
  *(_OWORD *)(v64 + 28) = 0u;
  *(_DWORD *)(v64 + 44) = 0;
  *(_QWORD *)(v64 + 64) = 0;
  *(_QWORD *)(v64 + 72) = 0;
  *(_QWORD *)(v64 + 56) = 0;
  *(_QWORD *)(v64 + 104) = 0;
  *(_QWORD *)(v64 + 112) = -1;
  *(_WORD *)(v64 + 120) = -1;
  *(_DWORD *)(v64 + 122) = 0x10000;
  *(_BYTE *)(v64 + 126) = 0;
  *(_BYTE *)(v64 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v64 + 128) = 0;
  *(_WORD *)(v64 + 129) &= 0xFC00u;
  *(_QWORD *)(v64 + 136) = 0;
  *(_QWORD *)(v64 + 136) = *(_QWORD *)(v63 + 168);
  *(_QWORD *)(v63 + 168) = v64;
  *(_WORD *)(v64 + 129) = *(_WORD *)(v64 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  v65 = *(_QWORD *)(a2 + 336);
  v66 = *(_QWORD *)(*a3 + 104);
  v67 = ~*(_QWORD *)(*(_QWORD *)(a3[7] + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*a3 + 96);
  v68 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v68)
  {
    v144 = (_BYTE *)a3[3];
    do
    {
      v145 = *v144 & 0x7F;
      if (v145 >= 0x40)
        goto LABEL_131;
      v146 = 1 << v145;
      v67 &= ~v146;
      v66 &= ~v146;
      ++v144;
    }
    while (--v68);
  }
  v69 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v69)
  {
    v151 = (_BYTE *)a3[5];
    while (1)
    {
      v152 = (*v151 + 32) & 0x7F;
      if (v152 >= 0x40)
        break;
      v153 = 1 << v152;
      v67 &= ~v153;
      v66 &= ~v153;
      ++v151;
      if (!--v69)
        goto LABEL_24;
    }
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
LABEL_24:
  v223[0] = (JSC::FTL::ExceptionTarget *)v67;
  v223[1] = (JSC::FTL::ExceptionTarget *)v66;
  v70 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v70 = 1;
  v71 = (JSC::JITDelByValGenerator *)(v70 + 8);
  v72 = *(_QWORD *)(a1 + 32);
  if ((v72 & 1) != 0)
  {
    v164 = *(_QWORD *)(v72 & 0xFFFFFFFF8);
    if ((v72 & 2) != 0
      || ((v165 = *(unsigned int *)((v72 & 0xFFFFFFFF8) + 8), (_DWORD)v165 != 0x3FFFFFFF)
        ? (v166 = (_DWORD)v165 == -1)
        : (v166 = 1),
          v166))
    {
      v167 = 2;
    }
    else if (v165 >> 28)
    {
      v185 = *(_DWORD *)((v72 & 0xFFFFFFFF8) + 8);
      v186 = *(_QWORD *)(v72 & 0xFFFFFFFF8);
      v164 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v164 = v186;
      *(_DWORD *)(v164 + 8) = v185;
      v167 = 1;
    }
    else
    {
      v167 = *(_QWORD *)(v72 & 0xFFFFFFFF8);
      v164 = v165 << 36;
    }
    v72 = v164 | v167;
  }
  v191 = v72;
  BYTE4(v184) = *(_BYTE *)(a1 + 48);
  BYTE3(v184) = v17;
  BYTE2(v184) = v188;
  BYTE1(v184) = v189;
  LOBYTE(v184) = v190;
  JSC::JITInstanceOfGenerator::JITInstanceOfGenerator((uint64_t)v71, v65, v64, 0, 0, &v191, v52, (uint64_t)v223, v184);
  if ((v191 & 1) != 0 && (v191 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v191 & 0xFFFFFFFF8, v73, v74, v75, v76, v77, v78, v79);
  JSC::JITDelByValGenerator::generateFastPath(v71, (JSC::CCallHelpers *)a2, v74, v75, v76, v77, v78, v79);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v214 = *(_DWORD *)(v70 + 48);
    v87 = v214;
    v215 = *(_QWORD *)(v70 + 52);
    if (v214 != -1)
    {
      v88 = HIDWORD(v220);
      if (HIDWORD(v220) == (_DWORD)v220)
      {
        v89 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v219, (void *)(HIDWORD(v220) + 1), (unint64_t)&v214, v82, v83, v84, v85, v86);
        v91 = *v89;
        v90 = (uint64_t *)(v89 + 1);
        v87 = v91;
        v88 = HIDWORD(v220);
      }
      else
      {
        v90 = &v215;
      }
      v92 = (char *)v219 + 12 * v88;
      *(_DWORD *)v92 = v87;
      *(_QWORD *)(v92 + 4) = *v90;
      ++HIDWORD(v220);
    }
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v80, v81, v82, v83, v84, v85, v86);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v94 = HIDWORD(v220);
  v95 = v194;
  v191 = (uint64_t)v194;
  v192 = 2;
  v193 = HIDWORD(v220);
  if (HIDWORD(v220) >= 3)
  {
    if (HIDWORD(v220) >= 0x15555556)
    {
LABEL_132:
      __break(0xC471u);
      JUMPOUT(0x197DEC5A0);
    }
    v96 = 12 * HIDWORD(v220);
    v95 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v220)));
    v192 = (v96 & 0xFFFFFFFC) / 0xC;
    v191 = (uint64_t)v95;
    v94 = HIDWORD(v220);
  }
  if (v94)
  {
    v97 = v219;
    v98 = (WTF *)((char *)v219 + 12 * v94);
    do
    {
      *(_DWORD *)v95 = *(_DWORD *)v97;
      *(_QWORD *)((char *)v95 + 4) = *(_QWORD *)((char *)v97 + 4);
      v97 = (WTF *)((char *)v97 + 12);
      v95 = (_QWORD *)((char *)v95 + 12);
    }
    while (v97 != v98);
  }
  do
    v99 = __ldaxr((unsigned int *)v70);
  while (__stlxr(v99 + 1, (unsigned int *)v70));
  v194[3] = v70;
  v195 = v17;
  v100 = *a3;
  v196 = *(_QWORD *)(a1 + 24);
  v197 = v100;
  v101 = *((unsigned int *)a3 + 5);
  v198 = 0;
  v199 = 0;
  v200 = v101;
  if ((_DWORD)v101)
  {
    if (!(v101 >> 28))
    {
      v102 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v101));
      v199 = v101;
      v198 = v102;
      v103 = *((unsigned int *)a3 + 5);
      if ((_DWORD)v103)
      {
        v104 = (__int128 *)a3[1];
        v105 = 16 * v103;
        do
        {
          v106 = *v104++;
          *v102++ = v106;
          v105 -= 16;
        }
        while (v105);
      }
      goto LABEL_45;
    }
    __break(0xC471u);
    goto LABEL_131;
  }
LABEL_45:
  v107 = (WTF *)*((unsigned int *)a3 + 9);
  v201 = 0;
  v202 = 0;
  v203 = (int)v107;
  if ((_DWORD)v107)
  {
    v108 = (void *)WTF::fastMalloc(v107);
    v202 = (int)v107;
    v201 = v108;
    memcpy(v108, (const void *)a3[3], *((unsigned int *)a3 + 9));
  }
  v109 = (WTF *)*((unsigned int *)a3 + 13);
  v204 = 0;
  v205 = 0;
  v206 = (int)v109;
  if ((_DWORD)v109)
  {
    v154 = (void *)WTF::fastMalloc(v109);
    v205 = (int)v109;
    v204 = v154;
    memcpy(v154, (const void *)a3[5], *((unsigned int *)a3 + 13));
  }
  v207 = a3[7];
  v110 = *(_QWORD *)(a1 + 32);
  if ((v110 & 1) != 0)
  {
    v168 = *(_QWORD *)(v110 & 0xFFFFFFFF8);
    if ((v110 & 2) != 0
      || ((v169 = *(unsigned int *)((v110 & 0xFFFFFFFF8) + 8), (_DWORD)v169 != 0x3FFFFFFF)
        ? (v170 = (_DWORD)v169 == -1)
        : (v170 = 1),
          v170))
    {
      v171 = 2;
    }
    else if (v169 >> 28)
    {
      v183 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v183 = v168;
      *(_DWORD *)(v183 + 8) = v169;
      v171 = 1;
      v168 = v183;
    }
    else
    {
      v171 = *(_QWORD *)(v110 & 0xFFFFFFFF8);
      v168 = v169 << 36;
    }
    v110 = v168 | v171;
  }
  v208 = v110;
  v111 = (unsigned int *)v216;
  if (v216)
  {
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 + 1, v111));
  }
  v209 = v111;
  v210 = v190;
  v211 = v189;
  v212 = v188;
  v213 = i;
  v113 = a3[7];
  v114 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v114 + 8) = 1;
  *(_QWORD *)v114 = off_1E3577478;
  v224 = (unsigned int *)v114;
  v122 = *(unsigned int *)(v113 + 12);
  if ((_DWORD)v122 == *(_DWORD *)(v113 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v113, (uint64_t *)&v224);
    v147 = v224;
    v224 = 0;
    if (v147)
    {
      v148 = v147 + 2;
      do
      {
        v149 = __ldaxr(v148);
        v150 = v149 - 1;
      }
      while (__stlxr(v150, v148));
      if (!v150)
      {
        atomic_store(1u, v147 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v147 + 8))(v147);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v113 + 8 * v122) = v114;
    *(_DWORD *)(v113 + 12) = v122 + 1;
  }
  if (*(_DWORD *)v222 != -1)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v222, a2, v131, v132, v133, v134, v135, v136);
  do
  {
    v137 = __ldaxr((unsigned int *)v70);
    v138 = v137 - 1;
  }
  while (__stlxr(v138, (unsigned int *)v70));
  if (!v138)
  {
    atomic_store(1u, (unsigned int *)v70);
    WTF::fastFree(v70, v130, v131, v132, v133, v134, v135, v136);
  }
  v139 = v216;
  v216 = 0;
  if (v139)
  {
    do
    {
      v140 = __ldaxr((unsigned int *)v139);
      v141 = v140 - 1;
    }
    while (__stlxr(v141, (unsigned int *)v139));
    if (!v141)
    {
      atomic_store(1u, (unsigned int *)v139);
      v180 = *((_QWORD *)v139 + 1);
      if ((WTF *)((char *)v139 + 24) != (WTF *)v180 && v180 != 0)
      {
        *((_QWORD *)v139 + 1) = 0;
        *((_DWORD *)v139 + 4) = 0;
        WTF::fastFree(v180, v130, v131, v132, v133, v134, v135, v136);
      }
      WTF::fastFree((unint64_t)v139, v130, v131, v132, v133, v134, v135, v136);
    }
  }
  v142 = v219;
  if (v221 != (_BYTE *)v219 && v219 != 0)
  {
    v219 = 0;
    LODWORD(v220) = 0;
    WTF::fastFree((unint64_t)v142, v130, v131, v132, v133, v134, v135, v136);
  }
  *(_BYTE *)(a2 + 212) = v187;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOf(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOf(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOf(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOf(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOf(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOf(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int i;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int j;
  unsigned int v34;
  char v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  const void *v55;
  void *v56;
  _BYTE *v57;
  unsigned int v58;
  uint64_t v59;
  _BYTE *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int16 v77;
  char v78;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 12 * v11;
    while (v13 < *(unsigned int *)(a1 + 28))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
      ++v13;
      v12 += 12;
      if (v14 == v12)
        goto LABEL_7;
    }
    __break(0xC471u);
LABEL_78:
    JUMPOUT(0x197DECB04);
  }
LABEL_7:
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16), *(char *)(a1 + 64), a4, a5, a6, a7, a8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 48) = operationInstanceOfOptimize;
    v63 = *(unsigned __int8 **)(a1 + 72);
    v73 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 80));
    v74 = v64;
    JSC::CodeOrigin::CodeOrigin(&v72, (const JSC::CodeOrigin *)(a1 + 144));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)&v75, v63, (uint64_t)&v73, a2, v72, *(_QWORD *)(a1 + 152) + 8, *(unsigned __int8 *)(a1 + 64) | 0x3000000000, *(char *)(a1 + 160), *(_WORD *)(a1 + 161), HIBYTE(*(_WORD *)(a1 + 161)), *(_BYTE *)(a1 + 64));
    v32 = v75;
    if ((v72 & 1) != 0)
    {
      v65 = v72 & 0xFFFFFFFF8;
      if ((v72 & 0xFFFFFFFF8) != 0)
LABEL_71:
        WTF::fastFree(v65, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  else
  {
    v16 = *(_QWORD **)(a1 + 72);
    v17 = *(_QWORD *)(a1 + 80);
    v19 = *(_QWORD *)(v17 + 96);
    v18 = *(_QWORD *)(v17 + 104);
    v20 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 48) + 216) & 0xFF003FF80000 | v19;
    v21 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v21)
    {
      v57 = *(_BYTE **)(a1 + 104);
      do
      {
        v58 = *v57 & 0x7F;
        if (v58 >= 0x40)
          goto LABEL_77;
        v59 = 1 << v58;
        v20 &= ~v59;
        v18 &= ~v59;
        ++v57;
      }
      while (--v21);
    }
    v22 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v22)
    {
      v60 = *(_BYTE **)(a1 + 120);
      do
      {
        v61 = (*v60 + 32) & 0x7F;
        if (v61 >= 0x40)
          goto LABEL_77;
        v62 = 1 << v61;
        v20 &= ~v62;
        v18 &= ~v62;
        ++v60;
      }
      while (--v22);
    }
    v73 = v20;
    v74 = v18;
    v23 = *(_QWORD *)(a1 + 144);
    if ((v23 & 1) != 0)
    {
      v66 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      if ((v23 & 2) != 0
        || ((v67 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v67 != 0x3FFFFFFF)
          ? (v68 = (_DWORD)v67 == -1)
          : (v68 = 1),
            v68))
      {
        v69 = 2;
      }
      else if (v67 >> 28)
      {
        v70 = v66;
        v71 = v16;
        v66 = WTF::fastMalloc((WTF *)0x10);
        v16 = v71;
        *(_QWORD *)v66 = v70;
        *(_DWORD *)(v66 + 8) = v67;
        v69 = 1;
      }
      else
      {
        v69 = v66;
        v66 = v67 << 36;
      }
      v23 = v66 | v69;
      v24 = ((v66 | v69) & 1) == 0;
    }
    else
    {
      v24 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v75, v16, &v73, a2, v23, *(_QWORD *)(a1 + 152) + 8, (uint64_t)operationInstanceOfOptimize, *(char *)(a1 + 160), *(_WORD *)(a1 + 161), HIBYTE(*(_WORD *)(a1 + 161)), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 56) + 16));
    v32 = v75;
    if (!v24)
    {
      v65 = v23 & 0xFFFFFFFF8;
      if ((v23 & 0xFFFFFFFF8) != 0)
        goto LABEL_71;
    }
  }
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v34 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
    v34 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v34) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v35 = 69;
  else
    v35 = 65;
  v75 = j;
  v76 = v35;
  v77 = 15;
  v78 = -1;
  LODWORD(v73) = *(_DWORD *)(a1 + 164);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v75, (unsigned int *)&v73, a2, v27, v28, v29, v30, v31);
  v36 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v36 + 36) = i;
  *(_QWORD *)(v36 + 40) = v32;
  do
    v37 = __ldaxr((unsigned int *)v36);
  while (__stlxr(v37 + 1, (unsigned int *)v36));
  v38 = WTF::fastMalloc((WTF *)0x18);
  v46 = v38;
  *(_DWORD *)(v38 + 8) = 1;
  *(_QWORD *)v38 = &off_1E35774A0;
  do
    v47 = __ldaxr((unsigned int *)v36);
  while (__stlxr(v47 + 1, (unsigned int *)v36));
  *(_QWORD *)(v38 + 16) = v36;
  v48 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v48 != *(_DWORD *)(a2 + 240))
  {
    v49 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v48);
    goto LABEL_26;
  }
  v52 = v48 + (v48 >> 2);
  if (v52 >= 0x10)
    v53 = v52 + 1;
  else
    v53 = 16;
  if (v53 <= v48 + 1)
    v54 = v48 + 1;
  else
    v54 = v53;
  if (v54 >> 29)
  {
    __break(0xC471u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v55 = *(const void **)(a2 + 232);
  v56 = (void *)WTF::fastMalloc((WTF *)(8 * v54));
  *(_DWORD *)(a2 + 240) = v54;
  *(_QWORD *)(a2 + 232) = v56;
  memcpy(v56, v55, 8 * v48);
  if (v55)
  {
    if (*(const void **)(a2 + 232) == v55)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v55, v39, v40, v41, v42, v43, v44, v45);
  }
  v48 = *(unsigned int *)(a2 + 244);
  v49 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v48);
LABEL_26:
  *v49 = v46;
  *(_DWORD *)(a2 + 244) = v48 + 1;
  do
  {
    v50 = __ldaxr((unsigned int *)v36);
    v51 = v50 - 1;
  }
  while (__stlxr(v51, (unsigned int *)v36));
  if (!v51)
  {
    atomic_store(1u, (unsigned int *)v36);
    WTF::fastFree(v36, v39, v40, v41, v42, v43, v44, v45);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOf(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOf(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOf(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 28);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
    return JSC::JITInlineCacheGenerator::finalize(v2 + 8, a2, a2, v7);
  result = 366;
  __break(0xC471u);
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileHasIndexedPropertyImpl(uint64_t *a1, JSC::B3::Value *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSCell *v20;
  int8x8_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  JSC::B3::Value *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int8x8_t v44;
  JSC::B3::Value *v45;
  JSC::FTL::IndexedAbstractHeap *v46;
  JSC::FTL::Output *v47;
  uint64_t v48;
  JSC::B3::BasicBlock *v49;
  uint64_t v50;
  unsigned int v51;
  JSC::FTL::IndexedAbstractHeap *v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  JSC::B3::Value *v55;
  JSC::B3::Value *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::B3::Value *v76;
  JSC::B3::Value *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  int8x8_t v96;
  JSC::B3::Value *v97;
  uint64_t v98;
  JSC::B3::BasicBlock *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  JSC::B3::Value *v103;
  JSC::B3::Value *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  JSC::FTL::IndexedAbstractHeap *v110;
  uint64_t v111;
  JSC::B3::Value *v112;
  JSC::B3::Value *v113;
  JSC::B3::Value *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int8x8_t v121;
  uint64_t v122;
  float v123;
  float v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  int8x8_t v143;
  JSC::B3::Value *v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  JSC::FTL::IndexedAbstractHeap *v148;
  uint64_t v149;
  JSC::B3::Value *v150;
  JSC::B3::Value *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  JSC::B3::Value *v156;
  JSC::B3::Value *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  JSC::B3::Value *v168;
  uint64_t v169;
  JSC::B3::Value *v170;
  JSC::B3::Value *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  JSC::B3::Value *v177;
  JSC::B3::Value *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  JSC::B3::Value *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  JSC::B3::Value *v188;
  uint64_t v189;
  JSC::B3::Value *v190;

  v190 = a2;
  v6 = *a1;
  JSC::CodeOrigin::CodeOrigin(&v189, (const JSC::CodeOrigin *)(a1 + 3524));
  v20 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v6, &v189, v7, v8, v9, v10, v11, v12);
  if ((v189 & 1) != 0 && (v189 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v189 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  v22 = a1[3528];
  if (*(_WORD *)(v22 + 18) == 146)
    v23 = *(_DWORD *)(v22 + 80);
  else
    v23 = *(_DWORD *)(v22 + 72);
  v24 = *(_QWORD *)(v22 + 24);
  if (*(_DWORD *)(*a1 + 164) <= v24)
    goto LABEL_66;
  v25 = *(_QWORD *)(*(_QWORD *)(*a1 + 152) + 8 * v24);
  v188 = v26;
  if ((v25 & 0xFC000000000000) == 0x2C000000000000)
  v33 = BYTE2(v23);
  v34 = a1[3528];
  if (*(_WORD *)(v34 + 18) == 146)
    v35 = *(_DWORD *)(v34 + 80);
  else
    v35 = *(_DWORD *)(v34 + 72);
  switch(v35)
  {
    case 9u:
LABEL_10:
      v36 = *a1;
      v43 = JSC::DFG::Node::storageChildIndex((JSC::DFG::Node *)a1[3528]) + *(_DWORD *)(v34 + 24);
      if (*(_DWORD *)(v36 + 164) <= v43)
      {
        __break(0xC471u);
        JUMPOUT(0x197DED3F0);
      }
      v185 = a3;
      if (v23 == 7)
        v46 = (JSC::FTL::IndexedAbstractHeap *)(a1 + 2073);
      else
        v46 = (JSC::FTL::IndexedAbstractHeap *)(a1 + 2321);
      v47 = (JSC::FTL::Output *)(a1 + 3455);
      v48 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
      v49 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
      if (v33 >= 2)
      {
        v169 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
        v170 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::Output *)(a1 + 3455), v45, (const JSC::FTL::AbstractHeap *)(a1 + 38));
        v171 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::Output *)(a1 + 3455), a2, v170);
        JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v171, v48, v169, 0.0, 1.0, v172, v173, v174, v175);
        a1[3472] = v169;
      }
      v50 = a1[3473];
      a1[3473] = v48;
      v51 = *(_DWORD *)(a1[3528] + 24) + 1;
      if (*(_DWORD *)(*a1 + 164) <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x197DED3F8);
      }
      v54 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)(a1 + 3455), v52, v53, 2);
      v55 = JSC::FTL::Output::isZero64((JSC::FTL::Output *)(a1 + 3455), v54);
      v56 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 3455), v55);
      v63 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 3455), v56);
      v66 = v65;
      if (v33)
      {
        if (v33 >= 2)
        {
          JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v55, v48, (uint64_t)v49, 0.0, 1.0, v59, v60, v61, v62);
          goto LABEL_19;
        }
      }
      JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 3455), v49, v57, v58, v59, v60, v61, v62);
LABEL_19:
      a1[3472] = v48;
      a1[3473] = (uint64_t)v49;
      v77 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 3455), v76);
      v78 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 3455), v77);
      v80 = v79;
      JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 3455), v49, v81, v82, v83, v84, v85, v86);
      a1[3472] = (uint64_t)v49;
      a1[3473] = v50;
      return (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v47, 1, v63, v66, v78, v80);
    case 0xAu:
      v88 = *a1;
      v95 = JSC::DFG::Node::storageChildIndex((JSC::DFG::Node *)a1[3528]) + *(_DWORD *)(v34 + 24);
      if (*(_DWORD *)(v88 + 164) <= v95)
      {
        __break(0xC471u);
        JUMPOUT(0x197DED400);
      }
      v47 = (JSC::FTL::Output *)(a1 + 3455);
      v98 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
      v99 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
      v100 = a1[3528];
      if (*(_WORD *)(v100 + 18) == 146)
        v101 = *(_DWORD *)(v100 + 80);
      else
        v101 = *(_DWORD *)(v100 + 72);
      if ((v101 & 0xFE0000) != 0)
      {
        v102 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
        v103 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::Output *)(a1 + 3455), v97, (const JSC::FTL::AbstractHeap *)a1[832]);
        v104 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::Output *)(a1 + 3455), a2, v103);
        JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v104, v98, v102, 0.0, 1.0, v105, v106, v107, v108);
        a1[3472] = v102;
        v186 = a1[3473];
        a1[3473] = v98;
        v100 = a1[3528];
      }
      else
      {
        v186 = a1[3473];
        a1[3473] = v98;
      }
      v109 = *(_DWORD *)(v100 + 24) + 1;
      if (*(_DWORD *)(*a1 + 164) <= v109)
      {
        __break(0xC471u);
        JUMPOUT(0x197DED408);
      }
      v112 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)(a1 + 3455), v110, v111, 2);
      v113 = JSC::FTL::Output::isZero64((JSC::FTL::Output *)(a1 + 3455), v112);
      v114 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 3455), v113);
      v63 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 3455), v114);
      v66 = v122;
      if (!v33)
        goto LABEL_40;
      if (v33 != 1)
      {
        v123 = 0.0;
        v124 = 1.0;
        v125 = a1 + 3455;
        v126 = (uint64_t)v113;
        v127 = v98;
        v128 = (uint64_t)v99;
LABEL_31:
        JSC::FTL::Output::branch(v125, v126, v127, v128, v123, v124, v117, v118, v119, v120);
LABEL_41:
        a1[3472] = v98;
        a1[3473] = (uint64_t)v99;
        v157 = JSC::FTL::Output::notZero64(v47, v156);
        v78 = JSC::FTL::Output::anchor(v47, v157);
        v80 = v158;
        JSC::FTL::Output::jump(v47, v99, v159, v160, v161, v162, v163, v164);
        a1[3472] = (uint64_t)v99;
        a1[3473] = v186;
        return (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v47, 1, v63, v66, v78, v80);
      }
      v184 = (uint64_t)a1;
      v183 = v113;
      goto LABEL_51;
    case 8u:
      v135 = *a1;
      v142 = JSC::DFG::Node::storageChildIndex((JSC::DFG::Node *)a1[3528]) + *(_DWORD *)(v34 + 24);
      if (*(_DWORD *)(v135 + 164) <= v142)
      {
        __break(0xC471u);
        JUMPOUT(0x197DED410);
      }
      v47 = (JSC::FTL::Output *)(a1 + 3455);
      v98 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
      v99 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
      v145 = a1[3528];
      if (*(_WORD *)(v145 + 18) == 146)
        v146 = *(_DWORD *)(v145 + 80);
      else
        v146 = *(_DWORD *)(v145 + 72);
      if ((v146 & 0xFE0000) != 0)
      {
        v176 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
        v177 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::Output *)(a1 + 3455), v144, (const JSC::FTL::AbstractHeap *)(a1 + 38));
        v178 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::Output *)(a1 + 3455), a2, v177);
        JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v178, v98, v176, 0.0, 1.0, v179, v180, v181, v182);
        a1[3472] = v176;
        v186 = a1[3473];
        a1[3473] = v98;
        v145 = a1[3528];
      }
      else
      {
        v186 = a1[3473];
        a1[3473] = v98;
      }
      v147 = *(_DWORD *)(v145 + 24) + 1;
      if (*(_DWORD *)(*a1 + 164) > v147)
      {
        v150 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)(a1 + 3455), v148, v149, 4);
        v151 = JSC::FTL::Output::doubleEqual((JSC::FTL::Output *)(a1 + 3455), v150, v150);
        v63 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 3455), v151);
        v66 = v152;
        if (!v33)
        {
LABEL_40:
          JSC::FTL::Output::jump(v47, v99, v115, v116, v117, v118, v119, v120);
          goto LABEL_41;
        }
        if (v33 != 1)
        {
          v123 = 1.0;
          v124 = 0.0;
          v125 = a1 + 3455;
          v126 = (uint64_t)v151;
          v127 = (uint64_t)v99;
          v128 = v98;
          goto LABEL_31;
        }
        v183 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 3455), v151);
        v184 = (uint64_t)a1;
LABEL_51:
        goto LABEL_40;
      }
LABEL_66:
      __break(0xC471u);
      JUMPOUT(0x197DED3E8);
    case 7u:
      goto LABEL_10;
  }
  return JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 3455), v168);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v15 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v13, v14, *a3, *a4, *a5);
}

uint64_t WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::forEach<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetPropertyEnumerator(void)::{lambda(JSC::DFG::RegisteredStructure)#1}>(uint64_t result, _BYTE **a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;

  v2 = (unsigned int *)(result & 0xFFFFFFFFFFFFFFFCLL);
  if ((result & 1) != 0)
  {
    v3 = *v2;
    if ((_DWORD)v3)
    {
      v4 = v2 + 2;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)v4 + 8) & 0xC) != 0)
          **a2 = 1;
        v4 += 2;
        --v3;
      }
      while (v3);
    }
  }
  else if (v2)
  {
    if ((v2[2] & 0xC) != 0)
      **a2 = 1;
  }
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::UGPRPair (*)(JSC::JSGlobalObject *,long long,unsigned int,int,JSC::JSPropertyNameEnumerator *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  int v13;
  uint64_t v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  JSC::DFG::Node *v18;

  v13 = a2;
  v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationEnumeratorNextUpdateIndexAndMode);
  v16 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v13, v15, *a3, *a4, *a5, *a6, *a7);
  return v16;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorHasProperty<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned int,int)>(double *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  char v16;
  _QWORD *v17;
  JSC::JSCell *v18;
  unint64_t v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  unsigned int v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t v40;
  unsigned int v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int8x8_t v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t **v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t **v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t **v105;
  JSC::B3::Value *v106;
  JSC::B3::Value *v107;
  JSC::B3::Value *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  JSC::B3::Value **v124;
  JSC::B3::Value *v125;
  uint64_t v126;
  JSC::B3::Value *v127;
  JSC::B3::Value *v128;
  char **v129;
  uint64_t v130;
  WTF *v131;
  uint64_t v132;
  uint64_t v133;
  JSC::B3::Value *v134;
  JSC::B3::Value *v135;
  uint64_t v136;
  JSC::B3::Value *v137;
  uint64_t v138;
  JSC::B3::Value *v139;
  JSC::B3::Value *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  JSC::B3::Value *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char **v152;
  uint64_t v153;
  WTF *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  int v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF *v187;
  uint64_t v188;
  JSC::B3::Value *v189;
  JSC::DFG::Node *v190;
  JSC::B3::Value *v191;
  JSC::B3::Value *v192;
  uint64_t v193;
  JSC::B3::Value *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char **v200;
  uint64_t v201;
  WTF *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  JSC::B3::Value *v206;
  uint64_t v207;
  uint64_t v208;
  char **v209;
  uint64_t v210;
  WTF *v211;
  uint64_t v212;
  uint64_t v213;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  uint64_t v219;
  unsigned int v220;
  BOOL v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  JSC::B3::Value *v232;
  JSC::JSCell *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  JSC::B3::Value *v237;
  WTF *v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t *v241;

  v11 = *(_QWORD *)a1;
  v12 = *((_QWORD *)a1 + 3524);
  if ((v12 & 1) == 0)
  {
    v13 = *(_QWORD *)(v11 + 32);
LABEL_3:
    v14 = (_QWORD *)(v12 & 0xFFFFFFFF8);
    v15 = 1;
    v16 = 1;
    goto LABEL_4;
  }
  v219 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v220 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v220 != 0x3FFFFFFF) ? (v221 = v220 == -1) : (v221 = 1), v221))
  {
    v222 = 2;
  }
  else if (v220 >> 28)
  {
    v228 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v228 = v219;
    *(_DWORD *)(v228 + 8) = v220;
    v222 = 1;
    v219 = v228;
  }
  else
  {
    v222 = v219;
    v219 = 0;
  }
  v12 = v219 | v222;
  v13 = *(_QWORD *)(v11 + 32);
  if (((v219 | v222) & 1) == 0)
    goto LABEL_3;
  v223 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v224 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v224 != 0x3FFFFFFF) ? (v225 = v224 == -1) : (v225 = 1), v225))
  {
    v226 = 2;
  }
  else if (v224 >> 28)
  {
    v229 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v229 = v223;
    *(_DWORD *)(v229 + 8) = v224;
    v226 = 1;
    v223 = v229;
  }
  else
  {
    v226 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    v223 = 0;
  }
  v227 = v223 | v226;
  v14 = (_QWORD *)(v227 & 0xFFFFFFFF8);
  if ((v227 & 1) != 0)
  {
    v15 = 0;
    v16 = 0;
    v17 = (_QWORD *)*v14;
    if (!*v14)
      goto LABEL_6;
    goto LABEL_5;
  }
  v16 = 0;
  v15 = 1;
LABEL_4:
  v17 = v14;
  if (v14)
LABEL_5:
    v13 = v17[1];
LABEL_6:
  v18 = *(JSC::JSCell **)(v13 + 8);
  if ((v15 & 1) == 0 && v14)
    WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
  if ((v16 & 1) == 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(*(_QWORD *)a1 + 164) <= *(_QWORD *)(*((_QWORD *)a1 + 3528) + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x197DEE080);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 152) + 8 * *(_QWORD *)(*((_QWORD *)a1 + 3528) + 24));
  if ((v19 & 0xFC000000000000) == 0x20000000000000)
  else
  v21 = (JSC::B3::Value *)v20;
  v22 = *(_DWORD *)(*((_QWORD *)a1 + 3528) + 24) + 1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 164) <= v22)
  {
    __break(0xC471u);
    JUMPOUT(0x197DEE088);
  }
  v31 = *(_DWORD *)(*((_QWORD *)a1 + 3528) + 24) + 2;
  if (*(_DWORD *)(*(_QWORD *)a1 + 164) <= v31)
  {
    __break(0xC471u);
    JUMPOUT(0x197DEE090);
  }
  v32 = v23;
  v41 = *(_DWORD *)(*((_QWORD *)a1 + 3528) + 24) + 3;
  if (*(_DWORD *)(*(_QWORD *)a1 + 164) <= v41)
  {
    __break(0xC471u);
    JUMPOUT(0x197DEE098);
  }
  v42 = v33;
  v49 = *(_DWORD *)(*((_QWORD *)a1 + 3528) + 24) + 4;
  if (*(_DWORD *)(*(_QWORD *)a1 + 164) <= v49)
  {
    __break(0xC471u);
    JUMPOUT(0x197DEE0A0);
  }
  v51 = JSC::B3::Procedure::addBlock(v50, *((JSC::B3::Procedure **)a1 + 3470), a1[3475]);
  v52 = (uint64_t)v51;
  v53 = *((_QWORD *)a1 + 3473);
  v235 = v32;
  v236 = (uint64_t)a2;
  v233 = v18;
  v234 = (uint64_t)v42;
  if (v53)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)a1 + 3476, v53, (uint64_t)v51);
  }
  else
  {
    v241 = v51;
    v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v55 = 0u;
    *((_OWORD *)v55 + 1) = 0u;
    v55[3] = *((_QWORD *)a1 + 3477);
    *((_QWORD *)a1 + 3477) = v55;
    v240 = v55;
    v55[2] = v52;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)a1 + 3476, (uint64_t *)&v241, (uint64_t *)&v240, v56, v57, v58, v59, v60, (uint64_t)&v238);
    v54 = v240;
    v61 = (uint64_t **)*((_QWORD *)a1 + 3479);
    *v240 = (uint64_t)(a1 + 3478);
    v54[1] = (uint64_t)v61;
    *v61 = v54;
    *((_QWORD *)a1 + 3479) = v54;
  }
  v62 = JSC::B3::Procedure::addBlock(v54, *((JSC::B3::Procedure **)a1 + 3470), a1[3475]);
  v63 = (uint64_t)v62;
  v64 = *((_QWORD *)a1 + 3473);
  if (v64)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)a1 + 3476, v64, (uint64_t)v62);
  }
  else
  {
    v241 = v62;
    v66 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v66 = 0u;
    *((_OWORD *)v66 + 1) = 0u;
    v66[3] = *((_QWORD *)a1 + 3477);
    *((_QWORD *)a1 + 3477) = v66;
    v240 = v66;
    v66[2] = v63;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)a1 + 3476, (uint64_t *)&v241, (uint64_t *)&v240, v67, v68, v69, v70, v71, (uint64_t)&v238);
    v65 = v240;
    v72 = (uint64_t **)*((_QWORD *)a1 + 3479);
    *v240 = (uint64_t)(a1 + 3478);
    v65[1] = (uint64_t)v72;
    *v72 = v65;
    *((_QWORD *)a1 + 3479) = v65;
  }
  v73 = JSC::B3::Procedure::addBlock(v65, *((JSC::B3::Procedure **)a1 + 3470), a1[3475]);
  v74 = (uint64_t)v73;
  v75 = *((_QWORD *)a1 + 3473);
  v231 = v19;
  if (v75)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)a1 + 3476, v75, (uint64_t)v73);
  }
  else
  {
    v241 = v73;
    v77 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v77 = 0u;
    *((_OWORD *)v77 + 1) = 0u;
    v77[3] = *((_QWORD *)a1 + 3477);
    *((_QWORD *)a1 + 3477) = v77;
    v240 = v77;
    v77[2] = v74;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)a1 + 3476, (uint64_t *)&v241, (uint64_t *)&v240, v78, v79, v80, v81, v82, (uint64_t)&v238);
    v76 = v240;
    v83 = (uint64_t **)*((_QWORD *)a1 + 3479);
    *v240 = (uint64_t)(a1 + 3478);
    v76[1] = (uint64_t)v83;
    *v83 = v76;
    *((_QWORD *)a1 + 3479) = v76;
  }
  v84 = JSC::B3::Procedure::addBlock(v76, *((JSC::B3::Procedure **)a1 + 3470), a1[3475]);
  v85 = (uint64_t)v84;
  v86 = *((_QWORD *)a1 + 3473);
  if (v86)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)a1 + 3476, v86, (uint64_t)v84);
  }
  else
  {
    v241 = v84;
    v88 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v88 = 0u;
    *((_OWORD *)v88 + 1) = 0u;
    v88[3] = *((_QWORD *)a1 + 3477);
    *((_QWORD *)a1 + 3477) = v88;
    v240 = v88;
    v88[2] = v85;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)a1 + 3476, (uint64_t *)&v241, (uint64_t *)&v240, v89, v90, v91, v92, v93, (uint64_t)&v238);
    v87 = v240;
    v94 = (uint64_t **)*((_QWORD *)a1 + 3479);
    *v240 = (uint64_t)(a1 + 3478);
    v87[1] = (uint64_t)v94;
    *v94 = v87;
    *((_QWORD *)a1 + 3479) = v87;
  }
  v95 = JSC::B3::Procedure::addBlock(v87, *((JSC::B3::Procedure **)a1 + 3470), a1[3475]);
  v96 = v95;
  v97 = *((_QWORD *)a1 + 3473);
  if (v97)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)a1 + 3476, v97, (uint64_t)v95);
  }
  else
  {
    v241 = v95;
    v98 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v98 = 0u;
    *((_OWORD *)v98 + 1) = 0u;
    v98[3] = *((_QWORD *)a1 + 3477);
    *((_QWORD *)a1 + 3477) = v98;
    v240 = v98;
    v98[2] = v96;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)a1 + 3476, (uint64_t *)&v241, (uint64_t *)&v240, v99, v100, v101, v102, v103, (uint64_t)&v238);
    v104 = v240;
    v105 = (uint64_t **)*((_QWORD *)a1 + 3479);
    *v240 = (uint64_t)(a1 + 3478);
    v104[1] = (uint64_t)v105;
    *v105 = v104;
    *((_QWORD *)a1 + 3479) = v104;
  }
  v106 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 2);
  v107 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 3455), v237, v106);
  v108 = JSC::FTL::Output::notZero32((JSC::FTL::Output *)(a1 + 3455), v107);
  JSC::FTL::Output::branch((_QWORD *)a1 + 3455, (uint64_t)v108, v52, v85, NAN, NAN, v109, v110, v111, v112);
  *((_QWORD *)a1 + 3472) = v52;
  v124 = (JSC::B3::Value **)(a1 + 3455);
  if ((v119 & 0xFFFFD3FF00000008) == 0)
  {
LABEL_65:
    v128 = *v124;
    if (*v124)
      goto LABEL_36;
    goto LABEL_33;
  }
  if ((v119 & 0x2C00FFFFFFF7) == 0)
  {
    v124 = (JSC::B3::Value **)(a1 + 3456);
    goto LABEL_65;
  }
LABEL_33:
  v125 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 3455), v21, *((JSC::B3::Value **)a1 + 3488));
  v126 = *((_QWORD *)a1 + 3472);
  v127 = (JSC::B3::Value *)*((_QWORD *)a1 + 3470);
  v128 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)a1 + 3471), (uint64_t)v125, *((_QWORD *)a1 + 3459));
  JSC::B3::Procedure::addValueImpl(v127, v128);
  v238 = v128;
  v129 = (char **)(v126 + 8);
  v130 = *(unsigned int *)(v126 + 20);
  if ((_DWORD)v130 == *(_DWORD *)(v126 + 16))
  {
    v218 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v129, v130 + 1, (unint64_t)&v238);
    v130 = *(unsigned int *)(v126 + 20);
    *(_QWORD *)(*(_QWORD *)(v126 + 8) + 8 * v130) = *(_QWORD *)v218;
    v131 = v238;
  }
  else
  {
    *(_QWORD *)&(*v129)[8 * v130] = v128;
    v131 = v128;
  }
  *(_DWORD *)(v126 + 20) = v130 + 1;
  *((_QWORD *)v131 + 4) = v126;
LABEL_36:
  JSC::FTL::Output::branch((_QWORD *)a1 + 3455, (uint64_t)v128, v63, v85, NAN, NAN, v120, v121, v122, v123);
  *((_QWORD *)a1 + 3472) = v63;
  v132 = *((_QWORD *)a1 + 383);
  v133 = (uint64_t)v21;
  if (v132)
  {
    v134 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v132);
    v133 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), v21, v134);
  }
  v135 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)(a1 + 3455), (const JSC::FTL::AbstractHeap *)(a1 + 380), v133, 1);
  v136 = *((_QWORD *)a1 + 467);
  v230 = (uint64_t)v21;
  if (v136)
  {
    v137 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v136);
    v138 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), v232, v137);
  }
  else
  {
    v138 = (uint64_t)v232;
  }
  v139 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)(a1 + 3455), (const JSC::FTL::AbstractHeap *)(a1 + 464), v138, 1);
  v140 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 3455), v135, v139);
  JSC::FTL::Output::branch((_QWORD *)a1 + 3455, (uint64_t)v140, v74, v85, 1.0, 0.0, v141, v142, v143, v144);
  *((_QWORD *)a1 + 3472) = v74;
  v145 = *((_QWORD *)a1 + 3455);
  v146 = (JSC::B3::Value *)*((_QWORD *)a1 + 3470);
  v147 = *((_QWORD *)a1 + 3471);
  v148 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v148 + 8) = -1;
  *(_WORD *)(v148 + 12) = 152;
  *(_DWORD *)(v148 + 16) = 0;
  *(_BYTE *)(v148 + 20) = 1;
  *(_QWORD *)v148 = &unk_1E357EDA0;
  *(_QWORD *)(v148 + 40) = 0;
  *(_QWORD *)(v148 + 48) = v145;
  *(_QWORD *)(v148 + 24) = v147;
  *(_QWORD *)(v148 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v146, (JSC::B3::Value *)v148);
  v238 = (WTF *)v148;
  v152 = (char **)(v74 + 8);
  v153 = *(unsigned int *)(v74 + 20);
  if ((_DWORD)v153 == *(_DWORD *)(v74 + 16))
  {
    v215 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v152, v153 + 1, (unint64_t)&v238);
    v153 = *(unsigned int *)(v74 + 20);
    *(_QWORD *)(*(_QWORD *)(v74 + 8) + 8 * v153) = *(_QWORD *)v215;
    v154 = v238;
  }
  else
  {
    *(_QWORD *)&(*v152)[8 * v153] = v148;
    v154 = (WTF *)v148;
  }
  *(_DWORD *)(v74 + 20) = v153 + 1;
  *((_QWORD *)v154 + 4) = v74;
  v155 = *((_QWORD *)a1 + 3472);
  v156 = *((_QWORD *)a1 + 3470);
  v157 = *((_QWORD *)a1 + 3471);
  v238 = (WTF *)v96;
  LOBYTE(v239) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v155, v156, 154, v157, (uint64_t *)&v238, v149, v150, v151);
  *((_QWORD *)a1 + 3472) = v85;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 280), (unint64_t)v233, v158, v159, v160, v161, v162, v163);
  v164 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), (uint64_t)v233);
  v172 = (int *)(a1 + 3533);
  v173 = *((_DWORD *)a1 + 7066);
  if ((v173 & 0x80000000) == 0)
  {
    v174 = *((_QWORD *)a1 + 3481);
    v238 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v238 = 0x200000002;
    v239 = 0x200000002;
    v182 = (_QWORD *)(v174 + 32);
    v183 = *(unsigned int *)(v174 + 44);
    if ((_DWORD)v183 == *(_DWORD *)(v174 + 40))
    {
      v184 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v182, v183 + 1, (unint64_t)&v238);
      v185 = *(_QWORD *)(v174 + 32) + 16 * *(unsigned int *)(v174 + 44);
    }
    else
    {
      v185 = *v182 + 16 * v183;
      v184 = (unint64_t)&v238;
    }
    *(_QWORD *)v185 = 0;
    *(_QWORD *)(v185 + 8) = 0;
    v186 = *(_QWORD *)v184;
    *(_QWORD *)v184 = 0;
    *(_QWORD *)v185 = v186;
    LODWORD(v186) = *(_DWORD *)(v184 + 8);
    *(_DWORD *)(v184 + 8) = 0;
    *(_DWORD *)(v185 + 8) = v186;
    LODWORD(v186) = *(_DWORD *)(v184 + 12);
    *(_DWORD *)(v184 + 12) = 0;
    *(_DWORD *)(v185 + 12) = v186;
    ++*(_DWORD *)(v174 + 44);
    v173 = v183 | 0x80000000;
    *v172 = v183 | 0x80000000;
    v187 = v238;
    if (v238)
    {
      v238 = 0;
      LODWORD(v239) = 0;
      WTF::fastFree((unint64_t)v187, v175, v176, v177, v178, v179, v180, v181);
      v173 = *v172;
    }
  }
  v188 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v236);
  v189 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)a1 + 3455, v173, v188, v164, v230, v235, v234, (uint64_t)v237);
  v193 = *((_QWORD *)a1 + 3472);
  v194 = (JSC::B3::Value *)*((_QWORD *)a1 + 3470);
  v195 = *((_QWORD *)a1 + 3471);
  v196 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v196 + 8) = -1;
  *(_WORD *)(v196 + 12) = 152;
  *(_DWORD *)(v196 + 16) = 0;
  *(_BYTE *)(v196 + 20) = 1;
  *(_QWORD *)v196 = &unk_1E357EDA0;
  *(_QWORD *)(v196 + 40) = 0;
  *(_QWORD *)(v196 + 48) = v192;
  *(_QWORD *)(v196 + 24) = v195;
  *(_QWORD *)(v196 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v194, (JSC::B3::Value *)v196);
  v238 = (WTF *)v196;
  v200 = (char **)(v193 + 8);
  v201 = *(unsigned int *)(v193 + 20);
  if ((_DWORD)v201 == *(_DWORD *)(v193 + 16))
  {
    v216 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v200, v201 + 1, (unint64_t)&v238);
    v201 = *(unsigned int *)(v193 + 20);
    *(_QWORD *)(*(_QWORD *)(v193 + 8) + 8 * v201) = *(_QWORD *)v216;
    v202 = v238;
  }
  else
  {
    *(_QWORD *)&(*v200)[8 * v201] = v196;
    v202 = (WTF *)v196;
  }
  *(_DWORD *)(v193 + 20) = v201 + 1;
  *((_QWORD *)v202 + 4) = v193;
  v203 = *((_QWORD *)a1 + 3472);
  v204 = *((_QWORD *)a1 + 3470);
  v205 = *((_QWORD *)a1 + 3471);
  v238 = (WTF *)v96;
  LOBYTE(v239) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v203, v204, 154, v205, (uint64_t *)&v238, v197, v198, v199);
  *((_QWORD *)a1 + 3472) = v96;
  v206 = (JSC::B3::Value *)*((_QWORD *)a1 + 3470);
  v207 = *((_QWORD *)a1 + 3471);
  v208 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v208 = off_1E357F5F0;
  *(_DWORD *)(v208 + 8) = -1;
  *(_WORD *)(v208 + 12) = 153;
  *(_DWORD *)(v208 + 16) = 1;
  *(_BYTE *)(v208 + 20) = 0;
  *(_QWORD *)(v208 + 24) = v207;
  *(_QWORD *)(v208 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v206, (JSC::B3::Value *)v208);
  v238 = (WTF *)v208;
  v209 = (char **)(v96 + 1);
  v210 = *((unsigned int *)v96 + 5);
  if ((_DWORD)v210 == *((_DWORD *)v96 + 4))
  {
    v217 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v209, v210 + 1, (unint64_t)&v238);
    v210 = *((unsigned int *)v96 + 5);
    *(_QWORD *)(v96[1] + 8 * v210) = *(_QWORD *)v217;
    v211 = v238;
  }
  else
  {
    *(_QWORD *)&(*v209)[8 * v210] = v208;
    v211 = (WTF *)v208;
  }
  *((_DWORD *)v96 + 5) = v210 + 1;
  *((_QWORD *)v211 + 4) = v96;
  if ((*(_WORD *)(v148 + 12) & 0xFFF) == 0x98)
    v212 = v148;
  else
    v212 = 0;
  *(_QWORD *)(v212 + 40) = v208;
  if ((*(_WORD *)(v196 + 12) & 0xFFF) == 0x98)
    v213 = v196;
  else
    v213 = 0;
  *(_QWORD *)(v213 + 40) = v208;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x30);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,BOOL,unsigned int,JSC::JSPropertyNameEnumerator *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::DFG::Node *v17;

  v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationEnumeratorRecoverNameAndPutByVal);
  v16 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 2, *(_QWORD *)(a1 + 27768), v15, *a2, *a3, *a4, *a5, *a6, *a7);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E35774C8;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)a2;
  if ((v2 & 1) != 0)
  {
    v5 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v6 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v6 != 0x3FFFFFFF)
        ? (v7 = (_DWORD)v6 == -1)
        : (v7 = 1),
          v7))
    {
      v8 = 2;
    }
    else if (v6 >> 28)
    {
      v11 = a2;
      v12 = result;
      v9 = v5;
      v10 = v6;
      v5 = WTF::fastMalloc((WTF *)0x10);
      a2 = v11;
      result = v12;
      *(_QWORD *)v5 = v9;
      *(_DWORD *)(v5 + 8) = v10;
      v8 = 1;
    }
    else
    {
      v8 = v5;
      v5 = v6 << 36;
    }
    v2 = v5 | v8;
  }
  *(_QWORD *)(result + 24) = v2;
  v3 = *(unsigned int **)(a2 + 16);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 32) = v3;
  *(_BYTE *)(result + 40) = *(_BYTE *)(a2 + 24);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(JSC::FTL::PatchpointExceptionHandle **a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unsigned int *v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t *result;
  char v73;
  JSC::FTL::ExceptionTarget *v74;
  uint64_t v75;
  JSC::FTL::PatchpointExceptionHandle *v76;
  uint64_t v77;
  uint64_t v78[2];
  char v79;
  char v80;
  char v81;
  int v82;
  int v83;
  char v84;
  char v85;
  char v86;
  char v87;
  unsigned int *v88;
  uint64_t v89;
  int v90[3];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "EnumeratorPutByVal");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(*((_QWORD *)*a1 + 3) + 64);
  JSC::CodeOrigin::CodeOrigin(&v89, (const JSC::CodeOrigin *)(a1 + 1));
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v89);
  v90[0] = v15;
  if ((v89 & 1) != 0 && (v89 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v89 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(a1[2], (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v74);
  v16 = (unsigned int *)v74;
  JSC::FTL::ExceptionTarget::jumps(v74, (JSC::CCallHelpers *)a2, (uint64_t *)&v88);
  if (v16)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v16, v17, v18, v19, v20, v21, v22, v23);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind((uint64_t)a1[2], a3, v15, v19, v20, v21, v22, v23);
  v24 = *(_DWORD *)(a3 + 20);
  if (!v24)
    goto LABEL_32;
  if (v24 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DEE700);
  }
  if (v24 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DEE708);
  }
  v25 = *(char **)(a3 + 8);
  v26 = *v25;
  v27 = v25[16];
  v28 = v25[32];
  v73 = v6;
  if (!HIBYTE(qword_1ECF4C780))
  {
    v29 = -1;
    goto LABEL_13;
  }
  if (!*(_DWORD *)(a3 + 36))
  {
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x197DEE6F8);
  }
  v29 = **(_BYTE **)(a3 + 24);
LABEL_13:
  v30 = v26 & 0x7F;
  v31 = v27 & 0x7F;
  v32 = v28 & 0x7F;
  v87 = v29;
  JSC::FTL::State::addStructureStubInfo(*a1);
  v34 = v33;
  v35 = *(_QWORD *)(a2 + 336);
  if (*((_BYTE *)a1 + 24))
    v36 = 11;
  else
    v36 = 10;
  LOBYTE(v83) = v36;
  v74 = (JSC::FTL::ExceptionTarget *)JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v75 = v37;
  v86 = v30;
  v85 = v31;
  v84 = v32;
  v38 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
  v39 = WTF::Box<JSC::JITPutByValGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID const&,JSC::ARM64Registers::RegisterID&>(v38, v35, v34, 5u, (JSC::CodeOrigin *)(a1 + 1), v90, (char *)&v83, (uint64_t)&v74, &v86, &v85, &v84, &v87);
  JSC::JITGetByValGenerator::generateFastPath((JSC::JITGetByValGenerator *)(v39 + 2), (JSC::CCallHelpers *)a2, v40, v41, v42, v43, v44, v45);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v46, v47, v48, v49, v50, v51, v52, &v83);
  do
    v53 = __ldaxr(v38);
  while (__stlxr(v53 + 1, v38));
  v74 = (JSC::FTL::ExceptionTarget *)v38;
  LOBYTE(v75) = *((_BYTE *)a1 + 24);
  BYTE1(v75) = v87;
  v76 = *a1;
  JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v77, (const JSC::B3::StackmapGenerationParams *)a3);
  JSC::CodeOrigin::CodeOrigin(v78, (const JSC::CodeOrigin *)(a1 + 1));
  v54 = v88;
  if (v88)
  {
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 + 1, v54));
  }
  v78[1] = (uint64_t)v54;
  v79 = v30;
  v80 = v31;
  v81 = v32;
  v82 = v83;
  do
  {
    v70 = __ldaxr(v38);
    v71 = v70 - 1;
  }
  while (__stlxr(v71, v38));
  if (!v71)
  {
    atomic_store(1u, v38);
    WTF::fastFree((unint64_t)v38, v63, v64, v65, v66, v67, v68, v69);
  }
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v88, v63, v64, v65, v66, v67, v68, v69);
  *(_BYTE *)(a2 + 212) = v73;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[112];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35774F0;
  *a1 = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, unint64_t, const WTF::StringImpl *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, __n128);
  unsigned __int8 *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int v54;
  int v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[36];
  int v60;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (!HIBYTE(qword_1ECF4C780))
  {
    v11 = *(_QWORD *)a1;
    *(_DWORD *)v59 = *(_DWORD *)(*(_QWORD *)a1 + 52);
    *(_QWORD *)&v59[4] = *(_QWORD *)(v11 + 56);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v59, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, a2, a3, a4, a5, a6, a7, a8, &v60);
  if (a1[8])
    v17 = operationPutByValSloppyOptimize;
  else
    v17 = operationPutByValStrictOptimize;
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)a1 + 16), (char)a1[9], v12, v13, v14, v15, v16);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 48) = v17;
    v52 = (_QWORD *)*((_QWORD *)a1 + 2);
    v57 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 24));
    v58 = v53;
    JSC::CodeOrigin::CodeOrigin(&v56, (const JSC::CodeOrigin *)(a1 + 88));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v59, v52, &v57, a2, v56, *((_QWORD *)a1 + 12) + 8, a1[9] | 0x3000000000, 0xFFFFFFFFLL, *((_WORD *)a1 + 52), HIBYTE(*((_WORD *)a1 + 52)), a1[106], a1[9]);
    v27 = *(_QWORD *)v59;
    v28 = v56;
    if ((v56 & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v18 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
    v57 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 24));
    v58 = v19;
    JSC::CodeOrigin::CodeOrigin((uint64_t *)v55, (const JSC::CodeOrigin *)(a1 + 88));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v59, v18, &v57, a2, *(uint64_t *)v55, *((_QWORD *)a1 + 12) + 8, (uint64_t)v17, 0xFFFFFFFFLL, *((_WORD *)a1 + 52), HIBYTE(*((_WORD *)a1 + 52)), a1[106], *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)a1 + 16));
    v27 = *(_QWORD *)v59;
    v28 = *(_QWORD *)v55;
    if ((v55[0] & 1) == 0)
      goto LABEL_10;
  }
  if ((v28 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v28 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
LABEL_10:
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), (uint64_t)v20, v21, v22, v23, v24, v25, v26, (int *)&v57);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v29, v30, v31, v32, v33, v34);
  if (*(_BYTE *)(a2 + 328))
    v40 = 69;
  else
    v40 = 65;
  *(_QWORD *)v59 = v57;
  v59[8] = v40;
  *(_WORD *)&v59[9] = 15;
  v59[11] = -1;
  v54 = *((_DWORD *)a1 + 27);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v59, &v54, a2, v35, v36, v37, v38, v39);
  v41 = *(_QWORD *)a1;
  *(_DWORD *)(v41 + 36) = v60;
  *(_QWORD *)(v41 + 40) = v27;
  do
    v42 = __ldaxr((unsigned int *)v41);
  while (__stlxr(v42 + 1, (unsigned int *)v41));
  *(_QWORD *)v59 = v41;
  *(_QWORD *)v59 = 0;
  do
  {
    v50 = __ldaxr((unsigned int *)v41);
    v51 = v50 - 1;
  }
  while (__stlxr(v51, (unsigned int *)v41));
  if (!v51)
  {
    atomic_store(1u, (unsigned int *)v41);
    WTF::fastFree(v41, v43, v44, v45, v46, v47, v48, v49);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = v4;
  v6 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3577518;
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 16) = v6;
  v8 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v8 != *(_DWORD *)(a1 + 240))
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
LABEL_14:
    *v9 = v5;
    *(_DWORD *)(a1 + 244) = v8 + 1;
    return;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = *(const void **)(a1 + 232);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 240) = v12;
    *(_QWORD *)(a1 + 232) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*(const void **)(a1 + 232) == v13)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v8 = *(unsigned int *)(a1 + 244);
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
    goto LABEL_14;
  }
  __break(0xC471u);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, JSC::LinkBuffer *a2)
{
  return JSC::JITByIdGenerator::finalize((JSC::JITByIdGenerator *)(*(_QWORD *)(a1 + 16) + 8), a2, a2);
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(_QWORD *a1, __int128 *a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  WTF *v66;
  __int128 v67;
  char v68;

  v10 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  *v10 = a3;
  v10[1] = a4;
  v10[2] = a5;
  v11 = a1[3524];
  if ((v11 & 1) != 0)
  {
    v46 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v47 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v47 != 0x3FFFFFFF)
        ? (v48 = (_DWORD)v47 == -1)
        : (v48 = 1),
          v48))
    {
      v49 = 2;
    }
    else if (v47 >> 28)
    {
      v62 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v62 = v46;
      *(_DWORD *)(v62 + 8) = v47;
      v49 = 1;
      v46 = v62;
    }
    else
    {
      v49 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v46 = v47 << 36;
    }
    v11 = v46 | v49;
  }
  v12 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v13 = *v10;
  v67 = (unint64_t)*v10;
  v68 = 3;
  JSC::B3::StackmapValue::append(v12, v13, (unint64_t)&v67 + 8);
  v14 = v10[1];
  v67 = (unint64_t)v14;
  v68 = 3;
  JSC::B3::StackmapValue::append(v12, v14, (unint64_t)&v67 + 8);
  v15 = v10[2];
  v67 = (unint64_t)v15;
  v68 = 3;
  JSC::B3::StackmapValue::append(v12, v15, (unint64_t)&v67 + 8);
  *((_QWORD *)v12 + 8) |= 0x30000uLL;
  *((_QWORD *)v12 + 10) |= 0x30000uLL;
  v21 = a1[1];
  v67 = *a2;
  v22 = v66;
  if (v66)
  {
    do
      v23 = __ldaxr((unsigned int *)v22);
    while (__stlxr(v23 + 1, (unsigned int *)v22));
  }
  v24 = v11;
  if ((v11 & 1) != 0)
  {
    v50 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v51 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v51 != 0x3FFFFFFF)
        ? (v52 = (_DWORD)v51 == -1)
        : (v52 = 1),
          v52))
    {
      v53 = 2;
    }
    else if (v51 >> 28)
    {
      v63 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v63 = v50;
      *(_DWORD *)(v63 + 8) = v51;
      v53 = 1;
      v50 = v63;
    }
    else
    {
      v53 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v50 = v51 << 36;
    }
    v24 = v50 | v53;
  }
  v25 = WTF::fastMalloc((WTF *)0x38);
  v33 = v25;
  *(_DWORD *)(v25 + 8) = 1;
  *(_QWORD *)v25 = &off_1E3577540;
  *(_OWORD *)(v25 + 16) = v67;
  if (v22)
  {
    do
      v34 = __ldaxr((unsigned int *)v22);
    while (__stlxr(v34 + 1, (unsigned int *)v22));
  }
  *(_QWORD *)(v25 + 32) = v22;
  *(_QWORD *)(v25 + 40) = v21;
  v35 = v24;
  if ((v24 & 1) != 0)
  {
    v54 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
    if ((v24 & 2) != 0
      || ((v55 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v55 != 0x3FFFFFFF)
        ? (v56 = (_DWORD)v55 == -1)
        : (v56 = 1),
          v56))
    {
      v57 = 2;
    }
    else if (v55 >> 28)
    {
      v64 = *(_DWORD *)((v24 & 0xFFFFFFFF8) + 8);
      v65 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v65 = v54;
      *(_DWORD *)(v65 + 8) = v64;
      v57 = 1;
      v54 = v65;
    }
    else
    {
      v57 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      v54 = v55 << 36;
    }
    v35 = v54 | v57;
  }
  *(_QWORD *)(v33 + 48) = v35;
  v36 = (unsigned int *)*((_QWORD *)v12 + 7);
  *((_QWORD *)v12 + 7) = v33;
  if (!v36)
    goto LABEL_12;
  v37 = v36 + 2;
  do
  {
    v38 = __ldaxr(v37);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, v37));
  if (!v39)
  {
    atomic_store(1u, v36 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
    if ((v24 & 1) == 0)
      goto LABEL_13;
  }
  else
  {
LABEL_12:
    if ((v24 & 1) == 0)
      goto LABEL_13;
  }
  if ((v24 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v24 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
LABEL_13:
  if (v22)
  {
    do
    {
      v40 = __ldaxr((unsigned int *)v22);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, (unsigned int *)v22));
    if (!v41)
    {
      atomic_store(1u, (unsigned int *)v22);
      v58 = *((_QWORD *)v22 + 4);
      if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v58 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
      v59 = *((_QWORD *)v22 + 3);
      if ((v59 & 1) != 0 && (v59 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v59 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree((unint64_t)v22, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  v42 = v66;
  v66 = 0;
  if (!v42)
    goto LABEL_19;
  do
  {
    v43 = __ldaxr((unsigned int *)v42);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, (unsigned int *)v42));
  if (v44)
  {
LABEL_19:
    if ((v11 & 1) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
  atomic_store(1u, (unsigned int *)v42);
  v60 = *((_QWORD *)v42 + 4);
  if ((v60 & 1) != 0 && (v60 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v60 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
  v61 = *((_QWORD *)v42 + 3);
  if ((v61 & 1) != 0 && (v61 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v61 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
  WTF::fastFree((unint64_t)v42, v26, v27, v28, v29, v30, v31, v32);
  if ((v11 & 1) != 0)
  {
LABEL_51:
    if ((v11 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v11 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
  }
LABEL_20:
  WTF::fastFree((unint64_t)v10, v26, v27, v28, v29, v30, v31, v32);
  return v12;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2},JSC::B3::Value *,JSC::B3::Value *>(_QWORD *a1, __int128 *a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  WTF *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  WTF *v63;
  __int128 v64;
  char v65;

  v8 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *v8 = a3;
  v8[1] = a4;
  v9 = a1[3524];
  if ((v9 & 1) != 0)
  {
    v43 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v44 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v44 != 0x3FFFFFFF)
        ? (v45 = (_DWORD)v44 == -1)
        : (v45 = 1),
          v45))
    {
      v46 = 2;
    }
    else if (v44 >> 28)
    {
      v59 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v59 = v43;
      *(_DWORD *)(v59 + 8) = v44;
      v46 = 1;
      v43 = v59;
    }
    else
    {
      v46 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v43 = v44 << 36;
    }
    v9 = v43 | v46;
  }
  v10 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v11 = *v8;
  v64 = (unint64_t)*v8;
  v65 = 3;
  JSC::B3::StackmapValue::append(v10, v11, (unint64_t)&v64 + 8);
  v12 = v8[1];
  v64 = (unint64_t)v12;
  v65 = 3;
  JSC::B3::StackmapValue::append(v10, v12, (unint64_t)&v64 + 8);
  *((_QWORD *)v10 + 8) |= 0x30000uLL;
  *((_QWORD *)v10 + 10) |= 0x30000uLL;
  v18 = a1[1];
  v64 = *a2;
  v19 = v63;
  if (v63)
  {
    do
      v20 = __ldaxr((unsigned int *)v19);
    while (__stlxr(v20 + 1, (unsigned int *)v19));
  }
  v21 = v9;
  if ((v9 & 1) != 0)
  {
    v47 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v48 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v48 != 0x3FFFFFFF)
        ? (v49 = (_DWORD)v48 == -1)
        : (v49 = 1),
          v49))
    {
      v50 = 2;
    }
    else if (v48 >> 28)
    {
      v60 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v60 = v47;
      *(_DWORD *)(v60 + 8) = v48;
      v50 = 1;
      v47 = v60;
    }
    else
    {
      v50 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v47 = v48 << 36;
    }
    v21 = v47 | v50;
  }
  v22 = WTF::fastMalloc((WTF *)0x38);
  v30 = v22;
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)v22 = &off_1E35775E0;
  *(_OWORD *)(v22 + 16) = v64;
  if (v19)
  {
    do
      v31 = __ldaxr((unsigned int *)v19);
    while (__stlxr(v31 + 1, (unsigned int *)v19));
  }
  *(_QWORD *)(v22 + 32) = v19;
  *(_QWORD *)(v22 + 40) = v18;
  v32 = v21;
  if ((v21 & 1) != 0)
  {
    v51 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || ((v52 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v52 != 0x3FFFFFFF)
        ? (v53 = (_DWORD)v52 == -1)
        : (v53 = 1),
          v53))
    {
      v54 = 2;
    }
    else if (v52 >> 28)
    {
      v61 = *(_DWORD *)((v21 & 0xFFFFFFFF8) + 8);
      v62 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v62 = v51;
      *(_DWORD *)(v62 + 8) = v61;
      v54 = 1;
      v51 = v62;
    }
    else
    {
      v54 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      v51 = v52 << 36;
    }
    v32 = v51 | v54;
  }
  *(_QWORD *)(v30 + 48) = v32;
  v33 = (unsigned int *)*((_QWORD *)v10 + 7);
  *((_QWORD *)v10 + 7) = v30;
  if (!v33)
    goto LABEL_12;
  v34 = v33 + 2;
  do
  {
    v35 = __ldaxr(v34);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v34));
  if (!v36)
  {
    atomic_store(1u, v33 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    if ((v21 & 1) == 0)
      goto LABEL_13;
  }
  else
  {
LABEL_12:
    if ((v21 & 1) == 0)
      goto LABEL_13;
  }
  if ((v21 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v21 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
LABEL_13:
  if (v19)
  {
    do
    {
      v37 = __ldaxr((unsigned int *)v19);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, (unsigned int *)v19));
    if (!v38)
    {
      atomic_store(1u, (unsigned int *)v19);
      v55 = *((_QWORD *)v19 + 4);
      if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v55 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
      v56 = *((_QWORD *)v19 + 3);
      if ((v56 & 1) != 0 && (v56 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v56 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree((unint64_t)v19, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  v39 = v63;
  v63 = 0;
  if (!v39)
    goto LABEL_19;
  do
  {
    v40 = __ldaxr((unsigned int *)v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, (unsigned int *)v39));
  if (v41)
  {
LABEL_19:
    if ((v9 & 1) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
  atomic_store(1u, (unsigned int *)v39);
  v57 = *((_QWORD *)v39 + 4);
  if ((v57 & 1) != 0 && (v57 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v57 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  v58 = *((_QWORD *)v39 + 3);
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  WTF::fastFree((unint64_t)v39, v23, v24, v25, v26, v27, v28, v29);
  if ((v9 & 1) != 0)
  {
LABEL_51:
    if ((v9 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v9 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  }
LABEL_20:
  WTF::fastFree((unint64_t)v8, v23, v24, v25, v26, v27, v28, v29);
  return v10;
}

_OWORD *WTF::HashMap<int,JSC::B3::Value *,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::Value *&>(_OWORD *result, uint64_t *a2, int *a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _OWORD *v15;
  int v16;
  _OWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<int,WTF::KeyValuePair<int,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,JSC::B3::Value *>>,WTF::DefaultHash<int>,WTF::HashMap<int,JSC::B3::Value *,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (_OWORD *)(v8 + 16 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != 0x7FFFFFFF)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v27 = v8 + 16 * v26;
        goto LABEL_32;
      }
      if (v16 == 2147483646)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (_OWORD *)(v8 + 16 * v14);
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15 != 0x7FFFFFFF);
    if (v17)
    {
      *(_DWORD *)v17 = 0x7FFFFFFF;
      *((_QWORD *)v17 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v15 = v17;
    }
  }
  *(_DWORD *)v15 = v11;
  *((_QWORD *)v15 + 1) = *a4;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_21;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
LABEL_26:
      result = WTF::HashTable<int,WTF::KeyValuePair<int,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,JSC::B3::Value *>>,WTF::DefaultHash<int>,WTF::HashMap<int,JSC::B3::Value *,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(a2, v25, v15);
      v15 = result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_29;
    }
LABEL_21:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_26;
  }
LABEL_29:
  v27 = v21 + 16 * v24;
  v28 = 1;
LABEL_32:
  *(_QWORD *)v7 = v15;
  *((_QWORD *)v7 + 1) = v27;
  *((_BYTE *)v7 + 16) = v28;
  return result;
}

uint64_t WTF::HashMap<int,JSC::B3::Value *,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::get(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(_DWORD *)(result + 16 * v5);
    if (v6 == a2)
    {
      return *(_QWORD *)(result + 16 * v5 + 8);
    }
    else
    {
      v7 = 1;
      while (v6 != 0x7FFFFFFF)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(_DWORD *)(result + 16 * v5);
        ++v7;
        if (v6 == a2)
          return *(_QWORD *)(result + 16 * v5 + 8);
      }
      return 0;
    }
  }
  return result;
}

BOOL WTF::BitVector::set(WTF::BitVector *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::BitVector *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t casual;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v4 = a2 + 1;
  v5 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000000) != 0)
    v6 = 63;
  else
    v6 = *(_QWORD *)(2 * v5);
  if (v6 >= v4)
    goto LABEL_4;
  v11 = a2 + 64;
  v12 = (a2 + 64) & 0xFFFFFFFFFFFFFFC0;
  v13 = ((a2 + 64) >> 3) & 0x1FFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v14)
    goto LABEL_13;
  v15 = (v13 + 23) >> 4;
  if (v13 <= 0x198)
  {
    v16 = 23 * v15 + 7;
    goto LABEL_15;
  }
  if (v13 <= 0x2708)
  {
    v16 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v15 + 626);
    if (*(_DWORD *)(v14 + 8052) > v16)
    {
LABEL_15:
      v19 = v14 + 8 * v16;
      v20 = v19 + 8064;
      *(_BYTE *)(v19 + 8064) = 1;
      v21 = *(unsigned int *)(v19 + 8080);
      if ((_DWORD)v21)
      {
        *(_DWORD *)(v20 + 16) = v21 - *(_DWORD *)(v20 + 20);
        v18 = *(_QWORD *)(v20 + 8) - v21;
      }
      else
      {
        v35 = *(_QWORD *)(v20 + 40);
        v36 = *(_QWORD *)(v20 + 24);
        if (!v35)
        {
          if (*(_BYTE *)(v20 + 5) == 6)
          {
            v38 = *(unsigned int *)(v20 + 32);
            v39 = *(_DWORD *)(v20 + 36);
            if (v38 < v39)
            {
              *(_QWORD *)(v20 + 8 * v38 + 56) = 0;
              v40 = (unint64_t *)(8 * v16 + 8 * v38 + v14 + 8128);
              v41 = v39 - 1 - v38;
              while (v41)
              {
                v36 += 1024;
                v43 = *v40++;
                v42 = v43;
                LODWORD(v38) = v38 + 1;
                --v41;
                if (v43)
                {
                  v35 = __rbit64(v42);
                  *(_DWORD *)(v20 + 32) = v38;
                  *(_QWORD *)(v20 + 24) = v36;
                  goto LABEL_25;
                }
              }
              *(_DWORD *)(v20 + 32) = v39;
            }
          }
          *(_BYTE *)v20 = 0;
          goto LABEL_13;
        }
LABEL_25:
        v37 = __clz(v35);
        *(_QWORD *)(v20 + 40) = v35 & ~(0x8000000000000000 >> v37);
        v18 = v36 + 16 * v37;
      }
      *(_BYTE *)v20 = 0;
      goto LABEL_18;
    }
  }
LABEL_13:
  casual = bmalloc_allocate_casual(v13 + 8, 1);
  v12 = (a2 + 64) & 0xFFFFFFFFFFFFFFC0;
  v11 = a2 + 64;
  v18 = casual;
LABEL_18:
  *(_QWORD *)v18 = v12;
  v22 = v11 >> 6;
  v23 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000000) != 0)
  {
    *(_QWORD *)(v18 + 8) = v23 & 0x7FFFFFFFFFFFFFFFLL;
    if (a2 >= 0xFFFFFFFFFFFFFFC0)
    {
      __break(0xC471u);
      JUMPOUT(0x197DEF880);
    }
    bzero((void *)(v18 + 16), 8 * v22 - 8);
  }
  else
  {
    v24 = (unint64_t *)(2 * v23);
    v25 = *v24;
    if (*v24 >= v4)
    {
      memcpy((void *)(v18 + 8), v24 + 1, 8 * v22);
    }
    else
    {
      v26 = v25 + 63;
      v27 = (v25 + 63) >> 6;
      memcpy((void *)(v18 + 8), v24 + 1, 8 * v27);
      if (v22 < v26 >> 6)
      {
        __break(0xC471u);
        JUMPOUT(0x197DEF904);
      }
      bzero((void *)(v18 + 8 + 8 * v27), 8 * (v22 - v27));
    }
    WTF::fastFree(2 * *(_QWORD *)this, v28, v29, v30, v31, v32, v33, v34);
  }
  v5 = v18 >> 1;
  *(_QWORD *)this = v18 >> 1;
LABEL_4:
  if (v5 >= 0)
    v7 = (WTF::BitVector *)(2 * v5 + 8);
  else
    v7 = this;
  v8 = (a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)((char *)v7 + v8);
  result = (v9 & (1 << a2)) != 0;
  *(_QWORD *)((char *)v7 + v8) = v9 | (1 << a2);
  return result;
}

uint64_t JSC::FTL::Output::phi<WTF::Vector<JSC::FTL::ValueFromBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_QWORD *a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = JSC::FTL::Output::phi(a1, 2);
  v4 = a2[3];
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = (_QWORD *)(*(_QWORD *)a2 + 8);
    do
    {
      v7 = *(v6 - 1);
      if (v7 || *v6)
      {
        if ((*(_WORD *)(v7 + 12) & 0xFFF) != 0x98)
          v7 = 0;
        *(_QWORD *)(v7 + 40) = result;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return result;
}

uint64_t WTF::Vector<JSC::FTL::SwitchCase,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  result = WTF::VectorBuffer<JSC::FTL::SwitchCase,1ul,WTF::FastMalloc>::VectorBuffer(a1, a2, a2);
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(result + 12);
    if (v4)
    {
      v5 = v3 + 24 * v4;
      do
      {
        *(_QWORD *)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 2143289344;
        v3 += 24;
      }
      while (v3 != v5);
    }
  }
  return result;
}

uint64_t WTF::VectorBuffer<JSC::FTL::SwitchCase,1ul,WTF::FastMalloc>::VectorBuffer(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = result;
  *(_QWORD *)result = result + 16;
  *(_DWORD *)(result + 8) = 1;
  *(_DWORD *)(result + 12) = a3;
  if (a2 < 2)
    return v3;
  if (a2 < 0xAAAAAAB)
  {
    v4 = 24 * a2;
    v5 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v3 + 8) = (v4 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v3 = v5;
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  uint64_t v3;
  WTF *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  int i;
  unsigned int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  WTF *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  const void *v79;
  void *v80;
  _BYTE *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF *v123[2];
  WTF *v124;
  uint64_t v125;

  v124 = 0;
  v125 = 0;
  v3 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v3)
    goto LABEL_169;
  v7 = 0;
  v8 = 0;
  v9 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = 16 * v3;
  do
  {
    v11 = v9[8];
    switch(v11)
    {
      case 7:
        v12 = *v9 & 0x7F;
        v13 = 1;
        break;
      case 9:
        v12 = (*(_QWORD *)v9 << 32) | 0x1DLL;
        v13 = 2;
        break;
      case 11:
        v12 = *(_QWORD *)v9;
        v13 = 3;
        break;
      default:
        __break(0xC471u);
        goto LABEL_175;
    }
    v123[0] = (WTF *)v13;
    v123[1] = (WTF *)v12;
    if (v8 == (_DWORD)v125)
    {
      v15 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, v8 + 1, (unint64_t)v123);
      v14 = HIDWORD(v125);
      v7 = v124;
      *((_OWORD *)v124 + HIDWORD(v125)) = *v15;
    }
    else
    {
      *((_OWORD *)v7 + v8) = *(_OWORD *)v123;
      v14 = HIDWORD(v125);
    }
    v8 = v14 + 1;
    HIDWORD(v125) = v8;
    v9 += 16;
    v10 -= 16;
  }
  while (v10);
  if (!v8)
  {
LABEL_169:
    __break(0xC471u);
    JUMPOUT(0x197DF04F0);
  }
  if (*((_DWORD *)v124 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF00DCLL);
  }
  if (v8 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF04F8);
  }
  if (*((_DWORD *)v124 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF00FCLL);
  }
  if (v8 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF0500);
  }
  if (*((_DWORD *)v124 + 11))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF011CLL);
  }
  if (v8 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF0508);
  }
  if (*((_DWORD *)v124 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF013CLL);
  }
  v16 = *((_BYTE *)v124 + 8) & 0x7F;
  v17 = *((_BYTE *)v124 + 24) & 0x7F;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  v20 = *((_BYTE *)v124 + 40) & 0x7F;
  v21 = *((_BYTE *)v124 + 56) & 0x7F;
  v122 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v122 + 8) = 1;
  v29 = (unsigned int *)(v122 + 8);
  *(_QWORD *)v122 = off_1E3577568;
  *(_QWORD *)(v122 + 16) = v18;
  *(_QWORD *)(v122 + 24) = operationNewObjectWithButterflyWithIndexingHeaderAndVectorLength;
  *(_BYTE *)(v122 + 32) = v16;
  *(_BYTE *)(v122 + 33) = v17;
  *(_QWORD *)(v122 + 40) = v19;
  *(_BYTE *)(v122 + 48) = v20;
  *(_BYTE *)(v122 + 49) = v21;
  *(_BYTE *)(a2 + 328) = 1;
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v22, v23, v24, v25, v26, v27, v28);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v31 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v22, v23, v24, v25, v26, v27, v28);
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = 335544320;
  v32 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v32;
  if (*(_BYTE *)(a2 + 328))
    v33 = 0xFF000F4500000000;
  else
    v33 = 0xFF000F4100000000;
  for (*(_BYTE *)(a2 + 328) = 0; v32 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v32)
  {
    if ((v32 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v22, v23, v24, v25, v26, v27, v28);
      v32 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v32) = -721215457;
    v32 = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v34 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v35 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v36 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v36)
  {
    v37 = (_BYTE *)*((_QWORD *)a3 + 3);
    while (1)
    {
      v38 = *v37 & 0x7F;
      if (v38 >= 0x40)
        break;
      v39 = 1 << v38;
      v35 &= ~v39;
      v34 &= ~v39;
      ++v37;
      if (!--v36)
        goto LABEL_33;
    }
LABEL_174:
    __break(1u);
LABEL_175:
    JUMPOUT(0x197DF00BCLL);
  }
LABEL_33:
  v40 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v40)
  {
    v81 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v82 = (*v81 + 32) & 0x7F;
      if (v82 >= 0x40)
        goto LABEL_174;
      v83 = 1 << v82;
      v35 &= ~v83;
      v34 &= ~v83;
      ++v81;
    }
    while (--v40);
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), a3, (uint64_t *)v123);
  v41 = *(_QWORD *)(a1 + 48);
  v120 = *(_QWORD *)(a1 + 40);
  if ((v41 & 1) != 0)
  {
    v84 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
    if ((v41 & 2) != 0
      || ((v85 = *(unsigned int *)((v41 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v84;
      *(_DWORD *)(v117 + 8) = v85;
      v87 = 1;
      v84 = v117;
    }
    else
    {
      v87 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v41 = v84 | v87;
  }
  v42 = v123[0];
  if (v123[0])
  {
    do
      v43 = __ldaxr((unsigned int *)v42);
    while (__stlxr(v43 + 1, (unsigned int *)v42));
  }
  do
    v44 = __ldaxr(v29);
  while (__stlxr(v44 + 1, v29));
  v45 = *((_QWORD *)a3 + 7);
  v46 = v41;
  v121 = v41;
  if ((v41 & 1) != 0)
  {
    v88 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
    if ((v41 & 2) != 0
      || ((v89 = *(unsigned int *)((v41 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
        ? (v90 = (_DWORD)v89 == -1)
        : (v90 = 1),
          v90))
    {
      v91 = 2;
    }
    else if (v89 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v88;
      *(_DWORD *)(v118 + 8) = v89;
      v91 = 1;
      v88 = v118;
    }
    else
    {
      v91 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
      v88 = v89 << 36;
    }
    v46 = v88 | v91;
    if (v42)
      goto LABEL_40;
  }
  else if (v42)
  {
    do
LABEL_40:
      v47 = __ldaxr((unsigned int *)v42);
    while (__stlxr(v47 + 1, (unsigned int *)v42));
    goto LABEL_41;
  }
  do
LABEL_41:
    v48 = __ldaxr(v29);
  while (__stlxr(v48 + 1, v29));
  v56 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v56 + 8) = 1;
  *(_QWORD *)v56 = &off_1E3577590;
  *(_DWORD *)(v56 + 16) = i;
  *(_QWORD *)(v56 + 20) = v33;
  *(_QWORD *)(v56 + 32) = v120;
  *(_DWORD *)(v56 + 40) = v32;
  v57 = v46;
  if ((v46 & 1) != 0)
  {
    v92 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
    if ((v46 & 2) != 0
      || ((v93 = *(unsigned int *)((v46 & 0xFFFFFFFF8) + 8), (_DWORD)v93 != 0x3FFFFFFF)
        ? (v94 = (_DWORD)v93 == -1)
        : (v94 = 1),
          v94))
    {
      v95 = 2;
    }
    else if (v93 >> 28)
    {
      v119 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v119 = v92;
      *(_DWORD *)(v119 + 8) = v93;
      v95 = 1;
      v92 = v119;
    }
    else
    {
      v95 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
      v92 = v93 << 36;
    }
    v57 = v92 | v95;
  }
  *(_QWORD *)(v56 + 48) = v57;
  if (v42)
  {
    do
      v58 = __ldaxr((unsigned int *)v42);
    while (__stlxr(v58 + 1, (unsigned int *)v42));
  }
  *(_QWORD *)(v56 + 56) = v42;
  *(_QWORD *)(v56 + 64) = v35;
  *(_QWORD *)(v56 + 72) = v34;
  do
    v59 = __ldaxr(v29);
  while (__stlxr(v59 + 1, v29));
  *(_QWORD *)(v56 + 80) = v122;
  v60 = *(unsigned int *)(v45 + 12);
  if ((_DWORD)v60 == *(_DWORD *)(v45 + 8))
  {
    v76 = v60 + (v60 >> 2);
    if (v76 >= 0x10)
      v77 = v76 + 1;
    else
      v77 = 16;
    if (v77 <= v60 + 1)
      v78 = v60 + 1;
    else
      v78 = v77;
    if (v78 >> 29)
    {
      __break(0xC471u);
      goto LABEL_174;
    }
    v79 = *(const void **)v45;
    v80 = (void *)WTF::fastMalloc((WTF *)(8 * v78));
    *(_DWORD *)(v45 + 8) = v78;
    *(_QWORD *)v45 = v80;
    memcpy(v80, v79, 8 * v60);
    if (v79)
    {
      if (*(const void **)v45 == v79)
      {
        *(_QWORD *)v45 = 0;
        *(_DWORD *)(v45 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v79, v49, v50, v51, v52, v53, v54, v55);
    }
    v60 = *(unsigned int *)(v45 + 12);
    v61 = (uint64_t *)(*(_QWORD *)v45 + 8 * v60);
  }
  else
  {
    v61 = (uint64_t *)(*(_QWORD *)v45 + 8 * v60);
  }
  *v61 = v56;
  *(_DWORD *)(v45 + 12) = v60 + 1;
  do
  {
    v62 = __ldaxr(v29);
    v63 = v62 - 1;
  }
  while (__stlxr(v63, v29));
  if (v63)
  {
    if (!v42)
      goto LABEL_55;
  }
  else
  {
    v96 = v122;
    atomic_store(1u, (unsigned int *)(v122 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
    if (!v42)
      goto LABEL_55;
  }
  do
  {
    v64 = __ldaxr((unsigned int *)v42);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, (unsigned int *)v42));
  if (!v65)
  {
    atomic_store(1u, (unsigned int *)v42);
    v99 = (unsigned int *)*((_QWORD *)v42 + 2);
    *((_QWORD *)v42 + 2) = 0;
    if (v99)
    {
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        atomic_store(1u, v99);
        WTF::fastFree((unint64_t)v99, v49, v50, v51, v52, v53, v54, v55);
      }
    }
    v102 = (unsigned int *)*((_QWORD *)v42 + 1);
    *((_QWORD *)v42 + 1) = 0;
    if (v102)
    {
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        atomic_store(1u, v102);
        WTF::fastFree((unint64_t)v102, v49, v50, v51, v52, v53, v54, v55);
      }
    }
    WTF::fastFree((unint64_t)v42, v49, v50, v51, v52, v53, v54, v55);
  }
LABEL_55:
  if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v46 & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
  do
  {
    v66 = __ldaxr(v29);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, v29));
  v68 = v121;
  if (v67)
  {
    if (!v42)
      goto LABEL_61;
  }
  else
  {
    v97 = v122;
    atomic_store(1u, (unsigned int *)(v122 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
    v68 = v121;
    if (!v42)
      goto LABEL_61;
  }
  do
  {
    v69 = __ldaxr((unsigned int *)v42);
    v70 = v69 - 1;
  }
  while (__stlxr(v70, (unsigned int *)v42));
  if (!v70)
  {
    atomic_store(1u, (unsigned int *)v42);
    v105 = (unsigned int *)*((_QWORD *)v42 + 2);
    *((_QWORD *)v42 + 2) = 0;
    if (v105)
    {
      do
      {
        v106 = __ldaxr(v105);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v105));
      if (!v107)
      {
        atomic_store(1u, v105);
        WTF::fastFree((unint64_t)v105, v49, v50, v51, v52, v53, v54, v55);
      }
    }
    v108 = (unsigned int *)*((_QWORD *)v42 + 1);
    *((_QWORD *)v42 + 1) = 0;
    if (v108)
    {
      do
      {
        v109 = __ldaxr(v108);
        v110 = v109 - 1;
      }
      while (__stlxr(v110, v108));
      if (!v110)
      {
        atomic_store(1u, v108);
        WTF::fastFree((unint64_t)v108, v49, v50, v51, v52, v53, v54, v55);
      }
    }
    WTF::fastFree((unint64_t)v42, v49, v50, v51, v52, v53, v54, v55);
    v68 = v121;
  }
LABEL_61:
  if ((v68 & 1) != 0 && (v68 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v68 & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
  v71 = v123[0];
  v123[0] = 0;
  if (v71)
  {
    do
    {
      v72 = __ldaxr((unsigned int *)v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, (unsigned int *)v71));
    if (!v73)
    {
      atomic_store(1u, (unsigned int *)v71);
      v111 = (unsigned int *)*((_QWORD *)v71 + 2);
      *((_QWORD *)v71 + 2) = 0;
      if (v111)
      {
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
        {
          atomic_store(1u, v111);
          WTF::fastFree((unint64_t)v111, v49, v50, v51, v52, v53, v54, v55);
        }
      }
      v114 = (unsigned int *)*((_QWORD *)v71 + 1);
      *((_QWORD *)v71 + 1) = 0;
      if (v114)
      {
        do
        {
          v115 = __ldaxr(v114);
          v116 = v115 - 1;
        }
        while (__stlxr(v116, v114));
        if (!v116)
        {
          atomic_store(1u, v114);
          WTF::fastFree((unint64_t)v114, v49, v50, v51, v52, v53, v54, v55);
        }
      }
      WTF::fastFree((unint64_t)v71, v49, v50, v51, v52, v53, v54, v55);
    }
  }
  do
  {
    v74 = __ldaxr(v29);
    v75 = v74 - 1;
  }
  while (__stlxr(v75, v29));
  if (!v75)
  {
    v98 = v122;
    atomic_store(1u, (unsigned int *)(v122 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  }
  if (v124)
    WTF::fastFree((unint64_t)v124, v49, v50, v51, v52, v53, v54, v55);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint8x8_t v40;
  __int32 v41;
  uint8x8_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  char v53;
  char v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  _BYTE *v59;
  int v60;
  unsigned __int8 *v61;
  char *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x8_t v80;
  int v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  unsigned int v85;
  char v86;
  uint64_t v87;
  int *v88;
  int *v89;
  int v90;
  uint64_t v91;
  int64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  JSC::ARM64LogicalImmediate *v96;
  int v97;
  int v98;
  char v99;
  __int16 v100;
  char v101;
  int v102;
  uint64_t v103;
  void *__dst;
  uint64_t v105;
  _WORD v106[8];
  _QWORD v107[9];

  v10 = *(JSC::AssemblerBuffer **)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v16 = *(unsigned __int8 *)(a1 + 33);
  v96 = *(JSC::ARM64LogicalImmediate **)(a1 + 40);
  v17 = *(unsigned __int8 *)(a1 + 48);
  v18 = *(unsigned __int8 *)(a1 + 49);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DF0B74);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
    v24 = *(_DWORD *)(a2 + 200);
    if (v24 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, a7, a8);
      v24 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v107, *(_QWORD *)(v11 + 24), a2, 5u, v15, 0xFFFFFFFFLL, a7, a8);
  __dst = v106;
  v105 = 3;
  if (v16)
  {
    v106[0] = v16;
    v32 = 1;
    HIDWORD(v105) = 1;
  }
  else
  {
    v32 = 0;
  }
  if (v17 != 2)
  {
    v106[v32++] = v17 | 0x200;
    HIDWORD(v105) = v32;
  }
  if (v18 == 3)
  {
    v33 = &v103;
    if (!v32)
      goto LABEL_69;
  }
  else
  {
    v106[v32++] = v18 | 0x300;
    HIDWORD(v105) = v32;
    v33 = &v103;
  }
  do
  {
    v34 = 0;
    v35 = 0;
    v36 = (char *)__dst;
    v37 = v32;
    do
    {
      if ((*((_BYTE *)__dst + v34 + 1) & 0x40) != 0)
      {
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
      v35 |= 1 << *((_BYTE *)__dst + v34 + 1);
      v34 += 2;
    }
    while (2 * v32 != v34);
    v38 = 0;
    do
    {
      v39 = *((_BYTE *)__dst + v38) & 0x7F;
      if (v39 >= 0x40)
        goto LABEL_86;
      v35 &= ~(1 << v39);
      v38 += 2;
    }
    while (2 * v32 != v38);
    v40 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
    v40.i16[0] = vaddlv_u8(v40);
    v41 = v40.i32[0];
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v35));
    v42.i16[0] = vaddlv_u8(v42);
    if (v42.i32[0] + v41)
    {
      v43 = 0;
      if (v32 <= 1)
        v44 = 1;
      else
        v44 = v32;
      v45 = 2 * v44;
      while (1)
      {
        v46 = *((unsigned __int8 *)__dst + v43 + 1);
        if ((v46 & 0x7Fu) >= 0x40)
          goto LABEL_86;
        if (((v35 >> (v46 & 0x7F)) & 1) != 0)
          break;
        v43 += 2;
        if (v45 == v43)
          goto LABEL_62;
      }
      v47 = *((unsigned __int8 *)__dst + v43);
      if (v47 != v46)
      {
        v48 = (char)v47;
        if ((char)v47 == 63)
        {
          v49 = *(_DWORD *)(a2 + 200);
          v50 = *(_DWORD *)(a2 + 192);
          if ((char)v46 == 31)
            goto LABEL_56;
          v52 = v46 & 0x1F | 0xD2800000;
        }
        else
        {
          v49 = *(_DWORD *)(a2 + 200);
          v50 = *(_DWORD *)(a2 + 192);
          v51 = v46 == 31 || v48 == 31;
          if (!v51)
          {
            v52 = v46 & 0xFFE0FFFF | ((v48 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_57;
          }
LABEL_56:
          v52 = (char)v46 | (32 * v48) | 0x91000000;
        }
LABEL_57:
        if (v49 + 4 > v50)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
          v49 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v49) = v52;
        *(_DWORD *)(a2 + 200) += 4;
        v36 = (char *)__dst;
        v37 = HIDWORD(v105);
      }
      memmove(&v36[v43], &v36[v43 + 2], 2 * v37 - v43 - 2);
      v32 = HIDWORD(v105) - 1;
      goto LABEL_61;
    }
    v95 = v14;
    v53 = *(_BYTE *)__dst;
    v54 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v54, v27, v28, v29, v30, v31);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v105) - 2);
    v55 = (HIDWORD(v105) - 1);
    v51 = HIDWORD(v105) == 1;
    HIDWORD(v105) = v55;
    v56 = (unsigned __int8 *)__dst;
    v57 = (unsigned __int8 *)__dst + 2 * v55;
    if (v51)
    {
      v64 = 0;
      v65 = 0;
      v60 = 0;
      v25 = v57;
    }
    else
    {
      v58 = 2 * v55;
      v59 = __dst;
      while (*v59 != v54)
      {
        v59 += 2;
        v58 -= 2;
        if (!v58)
          goto LABEL_41;
      }
      *v59 = v53;
LABEL_41:
      v60 = 0;
      v61 = v56;
      v25 = v57;
      v62 = (char *)v57;
      do
      {
        if (*v56 == v56[1])
        {
          v63 = v56;
          if (v62 != (char *)__dst + 2 * HIDWORD(v105))
          {
            v94 = (char *)v57;
            if (v56 == v25)
            {
              v63 = (unsigned __int8 *)v62;
            }
            else
            {
              v92 = v61 - v25;
              v93 = v62;
              memmove(v62, v25, v61 - v25);
              v63 = (unsigned __int8 *)&v93[v92];
            }
            v57 = (unsigned __int8 *)v94;
          }
          v25 = v56 + 2;
          ++v60;
          v62 = (char *)v63;
        }
        v56 += 2;
        v61 += 2;
      }
      while (v56 < v57);
      v56 = (unsigned __int8 *)__dst;
      v64 = HIDWORD(v105);
      v65 = HIDWORD(v105);
      v57 = (unsigned __int8 *)v62;
    }
    v66 = &v56[2 * v64];
    v14 = v95;
    if (v25 != v66)
    {
      memmove(v57, v25, v66 - v25);
      v65 = HIDWORD(v105);
    }
    v32 = v65 - v60;
LABEL_61:
    HIDWORD(v105) = v32;
LABEL_62:
    ;
  }
  while (v32);
  v67 = __dst;
  if (v106 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v105) = 0;
    WTF::fastFree((unint64_t)v67, v25, v26, v27, v28, v29, v30, v31);
  }
LABEL_69:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)v96, 1, v27, v28, v29, v30, v31);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v107, v13, v14, v68, v69, v70, v71, v72, (uint64_t)&__dst);
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v107, v73, v74, v75, v76, v77, v78, v79);
  if (v10)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a2, v13, 0, 0, 0xFFFFFFFFLL, v29, v30, v31, (uint64_t)&v102, v80);
    v81 = v102;
    if (v102 != -1)
    {
      v82 = *((unsigned int *)v10 + 3);
      if ((_DWORD)v82 == *((_DWORD *)v10 + 2))
      {
        v83 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v82 + 1), (unint64_t)&v102, v27, v28, v29, v30, v31);
        v33 = (uint64_t *)(v83 + 1);
        v81 = *v83;
        LODWORD(v82) = *((_DWORD *)v10 + 3);
      }
      v84 = *(_QWORD *)v10 + 12 * v82;
      *(_DWORD *)v84 = v81;
      *(_QWORD *)(v84 + 4) = *v33;
      ++*((_DWORD *)v10 + 3);
    }
  }
  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (LODWORD(v13) = *(_DWORD *)(a2 + 200); (int)v13 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v13)
  {
LABEL_87:
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
      LODWORD(v13) = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
    LODWORD(v13) = *(_DWORD *)(a2 + 200) + 4;
  }
  v85 = v13;
  if ((v13 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
    v85 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v85) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v86 = 69;
  else
    v86 = 65;
  v97 = v13;
  v98 = 0;
  v99 = v86;
  v100 = 15;
  v101 = -1;
  if ((_DWORD)v13 != -1)
  {
    v87 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v87 == *(_DWORD *)(a3 + 8))
    {
      v88 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v87 + 1), (unint64_t)&v97, v27, v28, v29, v30, v31);
      v90 = *v88;
      v89 = v88 + 1;
      v91 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v91 = v90;
    }
    else
    {
      v89 = &v98;
      v91 = *(_QWORD *)a3 + 12 * v87;
      *(_DWORD *)v91 = v13;
    }
    *(_QWORD *)(v91 + 4) = *(_QWORD *)v89;
    ++*(_DWORD *)(a3 + 12);
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_27compileMaterializeNewObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_27compileMaterializeNewObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_27compileMaterializeNewObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  const void *v89;
  void *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  JSC::ExecutableMemoryHandle *v126[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v23 = v20 + (v20 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v20 + 1)
      v25 = v20 + 1;
    else
      v25 = v24;
    if (v25 >> 29)
    {
      __break(0xC471u);
      goto LABEL_116;
    }
    v26 = *(const void **)(v19 + 296);
    v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(v19 + 304) = v25;
    *(_QWORD *)(v19 + 296) = v27;
    memcpy(v27, v26, 8 * v20);
    if (v26)
    {
      if (*(const void **)(v19 + 296) == v26)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v26, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v36 = *(_DWORD *)(a2 + 200);
  if (v36 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = -134216720;
  v37 = *(_DWORD *)(a2 + 200);
  v38 = v37 + 4;
  *(_DWORD *)(a2 + 200) = v37 + 4;
  if ((v37 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v38 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v39 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v39 + 90440), v39, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v31, v32, v33, v34, v35, v126);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v126[0], v40, v41, v42, v43, v44, v45);
  v53 = (unsigned int *)v126[1];
  v126[1] = 0;
  if (v53)
  {
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v56 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v125 = v11;
  if (v56)
  {
    v57 = v56 + 2;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
    do
      v62 = __ldaxr(v57);
    while (__stlxr(v62 + 1, v57));
  }
  else
  {
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
  }
  v63 = *(_QWORD *)(a1 + 48);
  if ((v63 & 1) != 0)
  {
    v101 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v102 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v123 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = v101;
      *(_DWORD *)(v123 + 8) = v102;
      v104 = 1;
      v101 = v123;
    }
    else
    {
      v104 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v63 = v101 | v104;
  }
  v64 = *(_QWORD *)(a1 + 56);
  if (v64)
  {
    do
      v65 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v65 + 1, (unsigned int *)v64));
  }
  *(_OWORD *)v126 = *(_OWORD *)(a1 + 64);
  v66 = *(unsigned int **)(a1 + 80);
  if (v66)
  {
    v67 = v66 + 2;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 + 1, v67));
  }
  v69 = WTF::fastMalloc((WTF *)0x58);
  v77 = v69;
  *(_DWORD *)(v69 + 8) = 1;
  *(_QWORD *)v69 = &off_1E35775B8;
  *(_DWORD *)(v69 + 16) = v59;
  *(_QWORD *)(v69 + 20) = v60;
  *(_DWORD *)(v69 + 28) = v61;
  if (v56)
  {
    v78 = v56 + 2;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
  }
  *(_QWORD *)(v69 + 32) = v56;
  v80 = v63;
  if ((v63 & 1) != 0)
  {
    v105 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v106 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v124 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v124 = v105;
      *(_DWORD *)(v124 + 8) = v106;
      v108 = 1;
      v105 = v124;
    }
    else
    {
      v108 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v80 = v105 | v108;
  }
  *(_QWORD *)(v77 + 40) = v80;
  if (v64)
  {
    do
      v81 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v81 + 1, (unsigned int *)v64));
  }
  *(_QWORD *)(v77 + 48) = v64;
  *(_OWORD *)(v77 + 56) = *(_OWORD *)v126;
  if (v66)
  {
    v82 = v66 + 2;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 + 1, v82));
  }
  *(_QWORD *)(v77 + 72) = v66;
  *(_DWORD *)(v77 + 80) = v20;
  v84 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v84 != *(_DWORD *)(a2 + 240))
  {
    v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
    goto LABEL_58;
  }
  v86 = v84 + (v84 >> 2);
  if (v86 >= 0x10)
    v87 = v86 + 1;
  else
    v87 = 16;
  if (v87 <= v84 + 1)
    v88 = v84 + 1;
  else
    v88 = v87;
  if (v88 >> 29)
  {
    __break(0xC471u);
LABEL_116:
    JUMPOUT(0x197DF13F0);
  }
  v89 = *(const void **)(a2 + 232);
  v90 = (void *)WTF::fastMalloc((WTF *)(8 * v88));
  *(_DWORD *)(a2 + 240) = v88;
  *(_QWORD *)(a2 + 232) = v90;
  memcpy(v90, v89, 8 * v84);
  if (v89)
  {
    if (*(const void **)(a2 + 232) == v89)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v89, v70, v71, v72, v73, v74, v75, v76);
  }
  v84 = *(unsigned int *)(a2 + 244);
  v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
LABEL_58:
  *v85 = v77;
  *(_DWORD *)(a2 + 244) = v84 + 1;
  if (!v66)
    goto LABEL_62;
  v91 = v66 + 2;
  do
  {
    v92 = __ldaxr(v91);
    v93 = v92 - 1;
  }
  while (__stlxr(v93, v91));
  if (!v93)
  {
    atomic_store(1u, v66 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
    if (!v64)
      goto LABEL_65;
  }
  else
  {
LABEL_62:
    if (!v64)
      goto LABEL_65;
  }
  do
  {
    v94 = __ldaxr((unsigned int *)v64);
    v95 = v94 - 1;
  }
  while (__stlxr(v95, (unsigned int *)v64));
  if (!v95)
  {
    atomic_store(1u, (unsigned int *)v64);
    v117 = *(unsigned int **)(v64 + 16);
    *(_QWORD *)(v64 + 16) = 0;
    if (v117)
    {
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
      {
        atomic_store(1u, v117);
        WTF::fastFree((unint64_t)v117, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    v120 = *(unsigned int **)(v64 + 8);
    *(_QWORD *)(v64 + 8) = 0;
    if (v120)
    {
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        atomic_store(1u, v120);
        WTF::fastFree((unint64_t)v120, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    WTF::fastFree(v64, v70, v71, v72, v73, v74, v75, v76);
  }
LABEL_65:
  if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v63 & 0xFFFFFFFF8, v70, v71, v72, v73, v74, v75, v76);
  if (v56)
  {
    v96 = v56 + 2;
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
    do
    {
      v99 = __ldaxr(v96);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v96));
    if (!v100)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
  }
  *(_BYTE *)(a2 + 212) = v125;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_27compileMaterializeNewObjectEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_27compileMaterializeNewObjectEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_27compileMaterializeNewObjectEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF19A4);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF19C4);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DF19E4);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
    {
LABEL_74:
      __break(0xC471u);
      JUMPOUT(0x197DF196CLL);
    }
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (!v38)
    goto LABEL_32;
  v39 = v38 + 2;
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, v38 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    if (!v33)
      goto LABEL_37;
  }
  else
  {
LABEL_32:
    if (!v33)
      goto LABEL_37;
  }
  v42 = v33 + 2;
  do
  {
    v43 = __ldaxr(v42);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v42));
  if (!v44)
  {
    atomic_store(1u, v33 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
  }
LABEL_37:
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
    goto LABEL_74;
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  uint64_t v3;
  WTF *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  int i;
  unsigned int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  WTF *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  WTF *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  const void *v83;
  void *v84;
  _BYTE *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF *v124[2];
  WTF *v125;
  uint64_t v126;

  v125 = 0;
  v126 = 0;
  v3 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v3)
    goto LABEL_168;
  v7 = 0;
  v8 = 0;
  v9 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = 16 * v3;
  do
  {
    v11 = v9[8];
    switch(v11)
    {
      case 7:
        v12 = *v9 & 0x7F;
        v13 = 1;
        break;
      case 9:
        v12 = (*(_QWORD *)v9 << 32) | 0x1DLL;
        v13 = 2;
        break;
      case 11:
        v12 = *(_QWORD *)v9;
        v13 = 3;
        break;
      default:
        __break(0xC471u);
        goto LABEL_173;
    }
    v124[0] = (WTF *)v13;
    v124[1] = (WTF *)v12;
    if (v8 == (_DWORD)v126)
    {
      v15 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v125, v8 + 1, (unint64_t)v124);
      v14 = HIDWORD(v126);
      v7 = v125;
      *((_OWORD *)v125 + HIDWORD(v126)) = *v15;
    }
    else
    {
      *((_OWORD *)v7 + v8) = *(_OWORD *)v124;
      v14 = HIDWORD(v126);
    }
    v8 = v14 + 1;
    HIDWORD(v126) = v8;
    v9 += 16;
    v10 -= 16;
  }
  while (v10);
  if (!v8)
  {
LABEL_168:
    __break(0xC471u);
    JUMPOUT(0x197DF255CLL);
  }
  if (*((_DWORD *)v125 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF2164);
  }
  if (v8 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF2564);
  }
  if (*((_DWORD *)v125 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF2184);
  }
  if (v8 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF256CLL);
  }
  if (*((_DWORD *)v125 + 11))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF21A4);
  }
  v16 = *((_BYTE *)v125 + 8) & 0x7F;
  v17 = *((_BYTE *)v125 + 24) & 0x7F;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  v20 = *((_BYTE *)v125 + 40) & 0x7F;
  v28 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v28 + 8) = 1;
  v29 = (unsigned int *)(v28 + 8);
  *(_QWORD *)v28 = off_1E3577608;
  *(_QWORD *)(v28 + 16) = v18;
  *(_QWORD *)(v28 + 24) = operationNewObjectWithButterfly;
  *(_BYTE *)(v28 + 32) = v16;
  *(_BYTE *)(v28 + 33) = v17;
  *(_QWORD *)(v28 + 40) = v19;
  *(_BYTE *)(v28 + 48) = v20;
  *(_BYTE *)(a2 + 328) = 1;
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v31 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = 335544320;
  v32 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v32;
  if (*(_BYTE *)(a2 + 328))
    v33 = 0xFF000F4500000000;
  else
    v33 = 0xFF000F4100000000;
  for (*(_BYTE *)(a2 + 328) = 0; v32 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v32)
  {
    if ((v32 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
      v32 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v32) = -721215457;
    v32 = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v34 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v35 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v36 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v36)
  {
    v37 = (_BYTE *)*((_QWORD *)a3 + 3);
    while (1)
    {
      v38 = *v37 & 0x7F;
      if (v38 >= 0x40)
        break;
      v39 = 1 << v38;
      v35 &= ~v39;
      v34 &= ~v39;
      ++v37;
      if (!--v36)
        goto LABEL_31;
    }
LABEL_172:
    __break(1u);
LABEL_173:
    JUMPOUT(0x197DF2144);
  }
LABEL_31:
  v40 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v40)
  {
    v85 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v86 = (*v85 + 32) & 0x7F;
      if (v86 >= 0x40)
        goto LABEL_172;
      v87 = 1 << v86;
      v35 &= ~v87;
      v34 &= ~v87;
      ++v85;
    }
    while (--v40);
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), a3, (uint64_t *)v124);
  v41 = *(_QWORD *)(a1 + 48);
  v121 = *(_QWORD *)(a1 + 40);
  v122 = v35;
  if ((v41 & 1) != 0)
  {
    v88 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
    if ((v41 & 2) != 0
      || ((v89 = *(unsigned int *)((v41 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
        ? (v90 = (_DWORD)v89 == -1)
        : (v90 = 1),
          v90))
    {
      v91 = 2;
    }
    else if (v89 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v88;
      *(_DWORD *)(v118 + 8) = v89;
      v91 = 1;
      v88 = v118;
    }
    else
    {
      v91 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
      v88 = v89 << 36;
    }
    v42 = v32;
    v41 = v88 | v91;
  }
  else
  {
    v42 = v32;
  }
  v43 = v34;
  v44 = v124[0];
  if (v124[0])
  {
    do
      v45 = __ldaxr((unsigned int *)v44);
    while (__stlxr(v45 + 1, (unsigned int *)v44));
  }
  v46 = v33;
  do
    v47 = __ldaxr(v29);
  while (__stlxr(v47 + 1, v29));
  v48 = *((_QWORD *)a3 + 7);
  v49 = v41;
  v123 = v41;
  if ((v41 & 1) != 0)
  {
    v92 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
    if ((v41 & 2) != 0
      || ((v93 = *(unsigned int *)((v41 & 0xFFFFFFFF8) + 8), (_DWORD)v93 != 0x3FFFFFFF)
        ? (v94 = (_DWORD)v93 == -1)
        : (v94 = 1),
          v94))
    {
      v95 = 2;
    }
    else if (v93 >> 28)
    {
      v119 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v119 = v92;
      *(_DWORD *)(v119 + 8) = v93;
      v95 = 1;
      v92 = v119;
    }
    else
    {
      v95 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
      v92 = v93 << 36;
    }
    v49 = v92 | v95;
    if (v44)
      goto LABEL_40;
  }
  else if (v44)
  {
    do
LABEL_40:
      v50 = __ldaxr((unsigned int *)v44);
    while (__stlxr(v50 + 1, (unsigned int *)v44));
    goto LABEL_41;
  }
  do
LABEL_41:
    v51 = __ldaxr(v29);
  while (__stlxr(v51 + 1, v29));
  v59 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v59 + 8) = 1;
  *(_QWORD *)v59 = &off_1E3577630;
  *(_DWORD *)(v59 + 16) = i;
  *(_QWORD *)(v59 + 20) = v46;
  *(_QWORD *)(v59 + 32) = v121;
  *(_DWORD *)(v59 + 40) = v42;
  v60 = v49;
  v61 = v43;
  if ((v49 & 1) != 0)
  {
    v96 = *(_QWORD *)(v49 & 0xFFFFFFFF8);
    if ((v49 & 2) != 0
      || ((v97 = *(unsigned int *)((v49 & 0xFFFFFFFF8) + 8), (_DWORD)v97 != 0x3FFFFFFF)
        ? (v98 = (_DWORD)v97 == -1)
        : (v98 = 1),
          v98))
    {
      v99 = 2;
    }
    else if (v97 >> 28)
    {
      v120 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v120 = v96;
      *(_DWORD *)(v120 + 8) = v97;
      v99 = 1;
      v96 = v120;
    }
    else
    {
      v99 = *(_QWORD *)(v49 & 0xFFFFFFFF8);
      v96 = v97 << 36;
    }
    v60 = v96 | v99;
  }
  *(_QWORD *)(v59 + 48) = v60;
  if (v44)
  {
    do
      v62 = __ldaxr((unsigned int *)v44);
    while (__stlxr(v62 + 1, (unsigned int *)v44));
  }
  *(_QWORD *)(v59 + 56) = v44;
  *(_QWORD *)(v59 + 64) = v122;
  *(_QWORD *)(v59 + 72) = v61;
  do
    v63 = __ldaxr(v29);
  while (__stlxr(v63 + 1, v29));
  *(_QWORD *)(v59 + 80) = v28;
  v64 = *(unsigned int *)(v48 + 12);
  if ((_DWORD)v64 == *(_DWORD *)(v48 + 8))
  {
    v80 = v64 + (v64 >> 2);
    if (v80 >= 0x10)
      v81 = v80 + 1;
    else
      v81 = 16;
    if (v81 <= v64 + 1)
      v82 = v64 + 1;
    else
      v82 = v81;
    if (v82 >> 29)
    {
      __break(0xC471u);
      goto LABEL_172;
    }
    v83 = *(const void **)v48;
    v84 = (void *)WTF::fastMalloc((WTF *)(8 * v82));
    *(_DWORD *)(v48 + 8) = v82;
    *(_QWORD *)v48 = v84;
    memcpy(v84, v83, 8 * v64);
    if (v83)
    {
      if (*(const void **)v48 == v83)
      {
        *(_QWORD *)v48 = 0;
        *(_DWORD *)(v48 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v83, v52, v53, v54, v55, v56, v57, v58);
    }
    v64 = *(unsigned int *)(v48 + 12);
    v65 = (uint64_t *)(*(_QWORD *)v48 + 8 * v64);
  }
  else
  {
    v65 = (uint64_t *)(*(_QWORD *)v48 + 8 * v64);
  }
  *v65 = v59;
  *(_DWORD *)(v48 + 12) = v64 + 1;
  do
  {
    v66 = __ldaxr(v29);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, v29));
  if (v67)
  {
    if (!v44)
      goto LABEL_55;
  }
  else
  {
    atomic_store(1u, (unsigned int *)(v28 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    if (!v44)
      goto LABEL_55;
  }
  do
  {
    v68 = __ldaxr((unsigned int *)v44);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)v44));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)v44);
    v100 = (unsigned int *)*((_QWORD *)v44 + 2);
    *((_QWORD *)v44 + 2) = 0;
    if (v100)
    {
      do
      {
        v101 = __ldaxr(v100);
        v102 = v101 - 1;
      }
      while (__stlxr(v102, v100));
      if (!v102)
      {
        atomic_store(1u, v100);
        WTF::fastFree((unint64_t)v100, v52, v53, v54, v55, v56, v57, v58);
      }
    }
    v103 = (unsigned int *)*((_QWORD *)v44 + 1);
    *((_QWORD *)v44 + 1) = 0;
    if (v103)
    {
      do
      {
        v104 = __ldaxr(v103);
        v105 = v104 - 1;
      }
      while (__stlxr(v105, v103));
      if (!v105)
      {
        atomic_store(1u, v103);
        WTF::fastFree((unint64_t)v103, v52, v53, v54, v55, v56, v57, v58);
      }
    }
    WTF::fastFree((unint64_t)v44, v52, v53, v54, v55, v56, v57, v58);
  }
LABEL_55:
  if ((v49 & 1) != 0 && (v49 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v49 & 0xFFFFFFFF8, v52, v53, v54, v55, v56, v57, v58);
  do
  {
    v70 = __ldaxr(v29);
    v71 = v70 - 1;
  }
  while (__stlxr(v71, v29));
  v72 = v123;
  if (v71)
  {
    if (!v44)
      goto LABEL_61;
  }
  else
  {
    atomic_store(1u, (unsigned int *)(v28 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v72 = v123;
    if (!v44)
      goto LABEL_61;
  }
  do
  {
    v73 = __ldaxr((unsigned int *)v44);
    v74 = v73 - 1;
  }
  while (__stlxr(v74, (unsigned int *)v44));
  if (!v74)
  {
    atomic_store(1u, (unsigned int *)v44);
    v106 = (unsigned int *)*((_QWORD *)v44 + 2);
    *((_QWORD *)v44 + 2) = 0;
    if (v106)
    {
      do
      {
        v107 = __ldaxr(v106);
        v108 = v107 - 1;
      }
      while (__stlxr(v108, v106));
      if (!v108)
      {
        atomic_store(1u, v106);
        WTF::fastFree((unint64_t)v106, v52, v53, v54, v55, v56, v57, v58);
      }
    }
    v109 = (unsigned int *)*((_QWORD *)v44 + 1);
    *((_QWORD *)v44 + 1) = 0;
    if (v109)
    {
      do
      {
        v110 = __ldaxr(v109);
        v111 = v110 - 1;
      }
      while (__stlxr(v111, v109));
      if (!v111)
      {
        atomic_store(1u, v109);
        WTF::fastFree((unint64_t)v109, v52, v53, v54, v55, v56, v57, v58);
      }
    }
    WTF::fastFree((unint64_t)v44, v52, v53, v54, v55, v56, v57, v58);
    v72 = v123;
  }
LABEL_61:
  if ((v72 & 1) != 0 && (v72 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v72 & 0xFFFFFFFF8, v52, v53, v54, v55, v56, v57, v58);
  v75 = v124[0];
  v124[0] = 0;
  if (v75)
  {
    do
    {
      v76 = __ldaxr((unsigned int *)v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, (unsigned int *)v75));
    if (!v77)
    {
      atomic_store(1u, (unsigned int *)v75);
      v112 = (unsigned int *)*((_QWORD *)v75 + 2);
      *((_QWORD *)v75 + 2) = 0;
      if (v112)
      {
        do
        {
          v113 = __ldaxr(v112);
          v114 = v113 - 1;
        }
        while (__stlxr(v114, v112));
        if (!v114)
        {
          atomic_store(1u, v112);
          WTF::fastFree((unint64_t)v112, v52, v53, v54, v55, v56, v57, v58);
        }
      }
      v115 = (unsigned int *)*((_QWORD *)v75 + 1);
      *((_QWORD *)v75 + 1) = 0;
      if (v115)
      {
        do
        {
          v116 = __ldaxr(v115);
          v117 = v116 - 1;
        }
        while (__stlxr(v117, v115));
        if (!v117)
        {
          atomic_store(1u, v115);
          WTF::fastFree((unint64_t)v115, v52, v53, v54, v55, v56, v57, v58);
        }
      }
      WTF::fastFree((unint64_t)v75, v52, v53, v54, v55, v56, v57, v58);
    }
  }
  do
  {
    v78 = __ldaxr(v29);
    v79 = v78 - 1;
  }
  while (__stlxr(v79, v29));
  if (!v79)
  {
    atomic_store(1u, (unsigned int *)(v28 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  if (v125)
    WTF::fastFree((unint64_t)v125, v52, v53, v54, v55, v56, v57, v58);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint8x8_t v39;
  __int32 v40;
  uint8x8_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  char v52;
  char v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  unsigned __int8 *v60;
  char *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned __int8 *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int8x8_t v79;
  int v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  unsigned int v84;
  char v85;
  uint64_t v86;
  int *v87;
  int *v88;
  int v89;
  uint64_t v90;
  int64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  JSC::ARM64LogicalImmediate *v95;
  int v96;
  int v97;
  char v98;
  __int16 v99;
  char v100;
  int v101;
  uint64_t v102;
  void *__dst;
  int v104;
  unsigned int v105;
  _WORD v106[8];
  _QWORD v107[9];

  v10 = *(JSC::AssemblerBuffer **)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v16 = *(unsigned __int8 *)(a1 + 33);
  v95 = *(JSC::ARM64LogicalImmediate **)(a1 + 40);
  v17 = *(unsigned __int8 *)(a1 + 48);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DF2BACLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
    v23 = *(_DWORD *)(a2 + 200);
    if (v23 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v18, v19, v20, v21, v22, a7, a8);
      v23 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v107, *(_QWORD *)(v11 + 24), a2, 4u, v15, 0xFFFFFFFFLL, a7, a8);
  __dst = v106;
  v104 = 2;
  if (!v16)
  {
    if (v17 == 2)
    {
      v32 = &v102;
      goto LABEL_67;
    }
    v31 = 0;
    goto LABEL_11;
  }
  v106[0] = v16;
  v31 = 1;
  v105 = 1;
  if (v17 != 2)
  {
LABEL_11:
    v106[v31++] = v17 | 0x200;
    v105 = v31;
  }
  v32 = &v102;
  do
  {
    v33 = 0;
    v34 = 0;
    v35 = (char *)__dst;
    v36 = v31;
    do
    {
      if ((*((_BYTE *)__dst + v33 + 1) & 0x40) != 0)
      {
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      v34 |= 1 << *((_BYTE *)__dst + v33 + 1);
      v33 += 2;
    }
    while (2 * v31 != v33);
    v37 = 0;
    do
    {
      v38 = *((_BYTE *)__dst + v37) & 0x7F;
      if (v38 >= 0x40)
        goto LABEL_85;
      v34 &= ~(1 << v38);
      v37 += 2;
    }
    while (2 * v31 != v37);
    v39 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
    v39.i16[0] = vaddlv_u8(v39);
    v40 = v39.i32[0];
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v34));
    v41.i16[0] = vaddlv_u8(v41);
    if (v41.i32[0] + v40)
    {
      v42 = 0;
      if (v31 <= 1)
        v43 = 1;
      else
        v43 = v31;
      v44 = 2 * v43;
      while (1)
      {
        v45 = *((unsigned __int8 *)__dst + v42 + 1);
        if ((v45 & 0x7Fu) >= 0x40)
          goto LABEL_85;
        if (((v34 >> (v45 & 0x7F)) & 1) != 0)
          break;
        v42 += 2;
        if (v44 == v42)
          goto LABEL_63;
      }
      v46 = *((unsigned __int8 *)__dst + v42);
      if (v46 != v45)
      {
        v47 = (char)v46;
        if ((char)v46 == 63)
        {
          v48 = *(_DWORD *)(a2 + 200);
          v49 = *(_DWORD *)(a2 + 192);
          if ((char)v45 == 31)
            goto LABEL_57;
          v51 = v45 & 0x1F | 0xD2800000;
        }
        else
        {
          v48 = *(_DWORD *)(a2 + 200);
          v49 = *(_DWORD *)(a2 + 192);
          v50 = v45 == 31 || v47 == 31;
          if (!v50)
          {
            v51 = v45 & 0xFFE0FFFF | ((v47 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_58;
          }
LABEL_57:
          v51 = (char)v45 | (32 * v47) | 0x91000000;
        }
LABEL_58:
        if (v48 + 4 > v49)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v24, v25, v26, v27, v28, v29, v30);
          v48 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v48) = v51;
        *(_DWORD *)(a2 + 200) += 4;
        v35 = (char *)__dst;
        v36 = v105;
      }
      memmove(&v35[v42], &v35[v42 + 2], 2 * v36 - v42 - 2);
      v31 = v105 - 1;
      goto LABEL_62;
    }
    v94 = v14;
    v52 = *(_BYTE *)__dst;
    v53 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v53, v26, v27, v28, v29, v30);
    memmove(__dst, (char *)__dst + 2, 2 * v105 - 2);
    v54 = v105 - 1;
    v50 = v105 == 1;
    v105 = v54;
    v55 = (unsigned __int8 *)__dst;
    v56 = (unsigned __int8 *)__dst + 2 * v54;
    if (v50)
    {
      v63 = 0;
      v64 = 0;
      v59 = 0;
      v24 = v56;
    }
    else
    {
      v57 = 2 * v54;
      v58 = __dst;
      while (*v58 != v53)
      {
        v58 += 2;
        v57 -= 2;
        if (!v57)
          goto LABEL_41;
      }
      *v58 = v52;
LABEL_41:
      v59 = 0;
      v60 = v55;
      v24 = v56;
      v61 = (char *)v56;
      do
      {
        if (*v55 == v55[1])
        {
          v62 = v55;
          if (v61 != (char *)__dst + 2 * v105)
          {
            v93 = (char *)v56;
            if (v55 == v24)
            {
              v62 = (unsigned __int8 *)v61;
            }
            else
            {
              v91 = v60 - v24;
              v92 = v61;
              memmove(v61, v24, v60 - v24);
              v62 = (unsigned __int8 *)&v92[v91];
            }
            v56 = (unsigned __int8 *)v93;
          }
          v24 = v55 + 2;
          ++v59;
          v61 = (char *)v62;
        }
        v55 += 2;
        v60 += 2;
      }
      while (v55 < v56);
      v55 = (unsigned __int8 *)__dst;
      v63 = v105;
      v64 = v105;
      v56 = (unsigned __int8 *)v61;
    }
    v65 = &v55[2 * v63];
    v14 = v94;
    if (v24 != v65)
    {
      memmove(v56, v24, v65 - v24);
      v64 = v105;
    }
    v31 = v64 - v59;
LABEL_62:
    v105 = v31;
LABEL_63:
    ;
  }
  while (v31);
  v66 = __dst;
  if (v106 != __dst && __dst)
  {
    __dst = 0;
    v104 = 0;
    WTF::fastFree((unint64_t)v66, v24, v25, v26, v27, v28, v29, v30);
  }
LABEL_67:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)v95, 1, v26, v27, v28, v29, v30);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v107, v13, v14, v67, v68, v69, v70, v71, (uint64_t)&__dst);
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v107, v72, v73, v74, v75, v76, v77, v78);
  if (v10)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a2, v13, 0, 0, 0xFFFFFFFFLL, v28, v29, v30, (uint64_t)&v101, v79);
    v80 = v101;
    if (v101 != -1)
    {
      v81 = *((unsigned int *)v10 + 3);
      if ((_DWORD)v81 == *((_DWORD *)v10 + 2))
      {
        v82 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v81 + 1), (unint64_t)&v101, v26, v27, v28, v29, v30);
        v32 = (uint64_t *)(v82 + 1);
        v80 = *v82;
        LODWORD(v81) = *((_DWORD *)v10 + 3);
      }
      v83 = *(_QWORD *)v10 + 12 * v81;
      *(_DWORD *)v83 = v80;
      *(_QWORD *)(v83 + 4) = *v32;
      ++*((_DWORD *)v10 + 3);
    }
  }
  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (LODWORD(v13) = *(_DWORD *)(a2 + 200); (int)v13 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v13)
  {
LABEL_86:
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
      LODWORD(v13) = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
    LODWORD(v13) = *(_DWORD *)(a2 + 200) + 4;
  }
  v84 = v13;
  if ((v13 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
    v84 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v84) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v85 = 69;
  else
    v85 = 65;
  v96 = v13;
  v97 = 0;
  v98 = v85;
  v99 = 15;
  v100 = -1;
  if ((_DWORD)v13 != -1)
  {
    v86 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v86 == *(_DWORD *)(a3 + 8))
    {
      v87 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v86 + 1), (unint64_t)&v96, v26, v27, v28, v29, v30);
      v89 = *v87;
      v88 = v87 + 1;
      v90 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v90 = v89;
    }
    else
    {
      v88 = &v97;
      v90 = *(_QWORD *)a3 + 12 * v86;
      *(_DWORD *)v90 = v13;
    }
    *(_QWORD *)(v90 + 4) = *(_QWORD *)v88;
    ++*(_DWORD *)(a3 + 12);
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_27compileMaterializeNewObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_27compileMaterializeNewObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_27compileMaterializeNewObjectEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  const void *v89;
  void *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  JSC::ExecutableMemoryHandle *v126[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v23 = v20 + (v20 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v20 + 1)
      v25 = v20 + 1;
    else
      v25 = v24;
    if (v25 >> 29)
    {
      __break(0xC471u);
      goto LABEL_116;
    }
    v26 = *(const void **)(v19 + 296);
    v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(v19 + 304) = v25;
    *(_QWORD *)(v19 + 296) = v27;
    memcpy(v27, v26, 8 * v20);
    if (v26)
    {
      if (*(const void **)(v19 + 296) == v26)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v26, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v36 = *(_DWORD *)(a2 + 200);
  if (v36 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = -134216720;
  v37 = *(_DWORD *)(a2 + 200);
  v38 = v37 + 4;
  *(_DWORD *)(a2 + 200) = v37 + 4;
  if ((v37 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v38 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v39 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v39 + 90440), v39, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v31, v32, v33, v34, v35, v126);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v126[0], v40, v41, v42, v43, v44, v45);
  v53 = (unsigned int *)v126[1];
  v126[1] = 0;
  if (v53)
  {
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v56 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v125 = v11;
  if (v56)
  {
    v57 = v56 + 2;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
    do
      v62 = __ldaxr(v57);
    while (__stlxr(v62 + 1, v57));
  }
  else
  {
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
  }
  v63 = *(_QWORD *)(a1 + 48);
  if ((v63 & 1) != 0)
  {
    v101 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v102 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v123 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = v101;
      *(_DWORD *)(v123 + 8) = v102;
      v104 = 1;
      v101 = v123;
    }
    else
    {
      v104 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v63 = v101 | v104;
  }
  v64 = *(_QWORD *)(a1 + 56);
  if (v64)
  {
    do
      v65 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v65 + 1, (unsigned int *)v64));
  }
  *(_OWORD *)v126 = *(_OWORD *)(a1 + 64);
  v66 = *(unsigned int **)(a1 + 80);
  if (v66)
  {
    v67 = v66 + 2;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 + 1, v67));
  }
  v69 = WTF::fastMalloc((WTF *)0x58);
  v77 = v69;
  *(_DWORD *)(v69 + 8) = 1;
  *(_QWORD *)v69 = &off_1E3577658;
  *(_DWORD *)(v69 + 16) = v59;
  *(_QWORD *)(v69 + 20) = v60;
  *(_DWORD *)(v69 + 28) = v61;
  if (v56)
  {
    v78 = v56 + 2;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
  }
  *(_QWORD *)(v69 + 32) = v56;
  v80 = v63;
  if ((v63 & 1) != 0)
  {
    v105 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v106 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v124 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v124 = v105;
      *(_DWORD *)(v124 + 8) = v106;
      v108 = 1;
      v105 = v124;
    }
    else
    {
      v108 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v80 = v105 | v108;
  }
  *(_QWORD *)(v77 + 40) = v80;
  if (v64)
  {
    do
      v81 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v81 + 1, (unsigned int *)v64));
  }
  *(_QWORD *)(v77 + 48) = v64;
  *(_OWORD *)(v77 + 56) = *(_OWORD *)v126;
  if (v66)
  {
    v82 = v66 + 2;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 + 1, v82));
  }
  *(_QWORD *)(v77 + 72) = v66;
  *(_DWORD *)(v77 + 80) = v20;
  v84 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v84 != *(_DWORD *)(a2 + 240))
  {
    v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
    goto LABEL_58;
  }
  v86 = v84 + (v84 >> 2);
  if (v86 >= 0x10)
    v87 = v86 + 1;
  else
    v87 = 16;
  if (v87 <= v84 + 1)
    v88 = v84 + 1;
  else
    v88 = v87;
  if (v88 >> 29)
  {
    __break(0xC471u);
LABEL_116:
    JUMPOUT(0x197DF343CLL);
  }
  v89 = *(const void **)(a2 + 232);
  v90 = (void *)WTF::fastMalloc((WTF *)(8 * v88));
  *(_DWORD *)(a2 + 240) = v88;
  *(_QWORD *)(a2 + 232) = v90;
  memcpy(v90, v89, 8 * v84);
  if (v89)
  {
    if (*(const void **)(a2 + 232) == v89)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v89, v70, v71, v72, v73, v74, v75, v76);
  }
  v84 = *(unsigned int *)(a2 + 244);
  v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
LABEL_58:
  *v85 = v77;
  *(_DWORD *)(a2 + 244) = v84 + 1;
  if (!v66)
    goto LABEL_62;
  v91 = v66 + 2;
  do
  {
    v92 = __ldaxr(v91);
    v93 = v92 - 1;
  }
  while (__stlxr(v93, v91));
  if (!v93)
  {
    atomic_store(1u, v66 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
    if (!v64)
      goto LABEL_65;
  }
  else
  {
LABEL_62:
    if (!v64)
      goto LABEL_65;
  }
  do
  {
    v94 = __ldaxr((unsigned int *)v64);
    v95 = v94 - 1;
  }
  while (__stlxr(v95, (unsigned int *)v64));
  if (!v95)
  {
    atomic_store(1u, (unsigned int *)v64);
    v117 = *(unsigned int **)(v64 + 16);
    *(_QWORD *)(v64 + 16) = 0;
    if (v117)
    {
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
      {
        atomic_store(1u, v117);
        WTF::fastFree((unint64_t)v117, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    v120 = *(unsigned int **)(v64 + 8);
    *(_QWORD *)(v64 + 8) = 0;
    if (v120)
    {
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        atomic_store(1u, v120);
        WTF::fastFree((unint64_t)v120, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    WTF::fastFree(v64, v70, v71, v72, v73, v74, v75, v76);
  }
LABEL_65:
  if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v63 & 0xFFFFFFFF8, v70, v71, v72, v73, v74, v75, v76);
  if (v56)
  {
    v96 = v56 + 2;
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
    do
    {
      v99 = __ldaxr(v96);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v96));
    if (!v100)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
  }
  *(_BYTE *)(a2 + 212) = v125;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_27compileMaterializeNewObjectEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_27compileMaterializeNewObjectEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_27compileMaterializeNewObjectEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF39F0);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF3A10);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DF3A30);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
    {
LABEL_74:
      __break(0xC471u);
      JUMPOUT(0x197DF39B8);
    }
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (!v38)
    goto LABEL_32;
  v39 = v38 + 2;
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, v38 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    if (!v33)
      goto LABEL_37;
  }
  else
  {
LABEL_32:
    if (!v33)
      goto LABEL_37;
  }
  v42 = v33 + 2;
  do
  {
    v43 = __ldaxr(v42);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v42));
  if (!v44)
  {
    atomic_store(1u, v33 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
  }
LABEL_37:
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
    goto LABEL_74;
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

_OWORD *WTF::HashTable<int,WTF::KeyValuePair<int,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,JSC::B3::Value *>>,WTF::DefaultHash<int>,WTF::HashMap<int,JSC::B3::Value *,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 24);
    do
    {
      *((_DWORD *)v18 - 2) = 0x7FFFFFFF;
      *v18 = 0;
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (_DWORD *)(v6 + 16 * v19);
      if ((int)*v21 <= 2147483645)
      {
        v22 = *a1;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 8);
        else
          v23 = 0;
        v24 = 0;
        v25 = 9 * ((*v21 + ~(*v21 << 15)) ^ ((*v21 + ~(*v21 << 15)) >> 10));
        v26 = ((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) ^ (((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) >> 16);
        do
        {
          v27 = v26 & v23;
          v10 = (void *)*(unsigned int *)(v22 + 16 * v27);
          v26 = ++v24 + v27;
        }
        while ((_DWORD)v10 != 0x7FFFFFFF);
        v28 = (_OWORD *)(v22 + 16 * v27);
        *v28 = *(_OWORD *)v21;
        if (v21 == a3)
          v20 = v28;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

uint64_t WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)a1 + 4 * *(unsigned int *)(a1 + 12)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 30))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 4 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

__n128 WTF::Vector<JSC::FTL::ValueFromBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::FTL::ValueFromBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

unint64_t WTF::Vector<JSC::FTL::ValueFromBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::FTL::ValueFromBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::FTL::ValueFromBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::FTL::ValueFromBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::FTL::ValueFromBlock,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    if ((_DWORD)v4)
    {
      v12 = *(_OWORD **)a1;
      v13 = 16 * v4;
      v14 = (__int128 *)v3;
      do
      {
        v15 = *v14++;
        *v12++ = v15;
        v13 -= 16;
      }
      while (v13);
    }
    if (a1 + 16 != v3 && v3)
    {
      if (*(_QWORD *)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::FTL::ValueFromBlock,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 2)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
  }
  else
  {
    v3 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

_QWORD *JSC::SymbolTable::begin(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *(_QWORD **)(a1 + 8);
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeCreateActivation(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeCreateActivation(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeCreateActivation(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeCreateActivation(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeCreateActivation(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeCreateActivation(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  WTF *v13;
  unsigned int v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _OWORD *v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  _BYTE *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  _BYTE *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int *v125;
  JSC::FTL::ExceptionTarget *v126;
  __int128 v127;
  WTF *v128;
  uint64_t v129;

  v128 = 0;
  v129 = 0;
  v9 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v9)
    goto LABEL_134;
  v13 = 0;
  v14 = 0;
  v15 = (unsigned int *)*((_QWORD *)a3 + 1);
  v16 = 16 * v9;
  v17 = 29;
  do
  {
    v18 = *((unsigned __int8 *)v15 + 8);
    switch(v18)
    {
      case 7:
        v19 = *(_BYTE *)v15 & 0x7F;
        v20 = 1;
        break;
      case 9:
        v19 = (*(_QWORD *)v15 << 32) | 0x1DLL;
        v20 = 2;
        break;
      case 11:
        v19 = *(_QWORD *)v15;
        v20 = 3;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197DF4868);
    }
    *(_QWORD *)&v127 = v20;
    *((_QWORD *)&v127 + 1) = v19;
    if (v14 == (_DWORD)v129)
    {
      v22 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v128, v14 + 1, (unint64_t)&v127);
      v21 = HIDWORD(v129);
      v13 = v128;
      *((_OWORD *)v128 + HIDWORD(v129)) = *v22;
    }
    else
    {
      *((_OWORD *)v13 + v14) = v127;
      v21 = HIDWORD(v129);
    }
    v14 = v21 + 1;
    HIDWORD(v129) = v14;
    v15 += 4;
    v16 -= 16;
  }
  while (v16);
  if (!v14)
  {
LABEL_134:
    __break(0xC471u);
    JUMPOUT(0x197DF4928);
  }
  if (*((_DWORD *)v128 + 3))
    goto LABEL_136;
  if (v14 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF4930);
  }
  if (*((_DWORD *)v128 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF4658);
  }
  if (v14 <= 2)
  {
LABEL_136:
    __break(0xC471u);
    JUMPOUT(0x197DF4638);
  }
  if (*((_DWORD *)v128 + 11))
  {
    v30 = "./ftl/FTLLocation.cpp";
    v31 = "GPRReg JSC::FTL::Location::directGPR() const";
    v32 = 399;
    __break(0xC471u);
    goto LABEL_87;
  }
  v23 = *((_BYTE *)v128 + 8) & 0x7F;
  v24 = *((_BYTE *)v128 + 24) & 0x7F;
  v25 = *(_QWORD *)(a1 + 16);
  v26 = *(_QWORD *)(a1 + 24);
  v27 = *((_BYTE *)v128 + 40) & 0x7F;
  v28 = *(_QWORD *)(a1 + 32);
  v29 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v29 + 8) = 1;
  v17 = v29 + 8;
  *(_QWORD *)v29 = off_1E3576848;
  *(_QWORD *)(v29 + 16) = v25;
  *(_QWORD *)(v29 + 24) = operationCreateActivationDirect;
  *(_BYTE *)(v29 + 32) = v23;
  *(_BYTE *)(v29 + 33) = v24;
  *(_QWORD *)(v29 + 40) = v26;
  *(_BYTE *)(v29 + 48) = v27;
  *(_QWORD *)(v29 + 56) = v28;
  *(_QWORD *)(v29 + 64) = 10;
  v15 = (unsigned int *)v29;
  *(_BYTE *)(a2 + 328) = 1;
  v16 = a2 + 56;
  v8 = *(_DWORD *)(a2 + 200);
  if (v8 < *(_DWORD *)(a2 + 52))
    goto LABEL_88;
  while (1)
  {
    v33 = v8;
    if ((v8 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v30, (uint64_t)v31, v32, a5, a6, a7, a8);
      v33 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = 335544320;
    v34 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v34;
    if (*(_BYTE *)(a2 + 328))
      v35 = 0xFF000F4500000000;
    else
      v35 = 0xFF000F4100000000;
    for (*(_BYTE *)(a2 + 328) = 0; v34 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v34)
    {
      if ((v34 + 4) > *(_DWORD *)(a2 + 192))
      {
        v119 = v35;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v30, (uint64_t)v31, v32, a5, a6, a7, a8);
        v35 = v119;
        v34 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v34) = -721215457;
      v34 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    v16 = *(_QWORD *)(*(_QWORD *)a3 + 104);
    v36 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
    v37 = *((unsigned int *)a3 + 9);
    if ((_DWORD)v37)
    {
      v73 = (_BYTE *)*((_QWORD *)a3 + 3);
      do
      {
        v74 = *v73 & 0x7F;
        if (v74 >= 0x40)
          goto LABEL_87;
        v75 = 1 << v74;
        v36 &= ~v75;
        v16 &= ~v75;
        ++v73;
      }
      while (--v37);
    }
    v38 = *((unsigned int *)a3 + 13);
    if (!(_DWORD)v38)
      break;
    v80 = (_BYTE *)*((_QWORD *)a3 + 5);
    while (1)
    {
      v81 = (*v80 + 32) & 0x7F;
      if (v81 >= 0x40)
        break;
      v82 = 1 << v81;
      v36 &= ~v82;
      v16 &= ~v82;
      ++v80;
      if (!--v38)
        goto LABEL_25;
    }
LABEL_87:
    __break(1u);
    do
    {
LABEL_88:
      if ((v8 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v30, (uint64_t)v31, v32, a5, a6, a7, a8);
        v8 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v8) = -721215457;
      v8 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v8;
    }
    while (v8 < *(_DWORD *)(a2 + 52));
  }
LABEL_25:
  v124 = v35;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), a3, (uint64_t *)&v126);
  v39 = *(_QWORD *)(a1 + 56);
  v123 = *(_QWORD *)(a1 + 48);
  if ((v39 & 1) != 0)
  {
    v83 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v84 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v84 != 0x3FFFFFFF)
        ? (v85 = (_DWORD)v84 == -1)
        : (v85 = 1),
          v85))
    {
      v86 = 2;
    }
    else if (v84 >> 28)
    {
      v120 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v120 = v83;
      *(_DWORD *)(v120 + 8) = v84;
      v86 = 1;
      v83 = v120;
    }
    else
    {
      v86 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v83 = v84 << 36;
    }
    v39 = v83 | v86;
  }
  v125 = v15;
  v40 = (unsigned int *)v126;
  if (v126)
  {
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
  }
  v42 = v16;
  do
    v43 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v43 + 1, (unsigned int *)v17));
  v44 = *((_QWORD *)a3 + 7);
  v45 = v39;
  if ((v39 & 1) != 0)
  {
    v87 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v88 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
        ? (v89 = (_DWORD)v88 == -1)
        : (v89 = 1),
          v89))
    {
      v90 = 2;
    }
    else if (v88 >> 28)
    {
      v121 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v121 = v87;
      *(_DWORD *)(v121 + 8) = v88;
      v90 = 1;
      v87 = v121;
    }
    else
    {
      v90 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v87 = v88 << 36;
    }
    v45 = v87 | v90;
  }
  if (v40)
  {
    do
      v46 = __ldaxr(v40);
    while (__stlxr(v46 + 1, v40));
  }
  do
    v47 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v47 + 1, (unsigned int *)v17));
  v55 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v55 + 8) = 1;
  *(_QWORD *)v55 = &off_1E35776A8;
  *(_DWORD *)(v55 + 16) = v8;
  *(_QWORD *)(v55 + 20) = v124;
  *(_QWORD *)(v55 + 32) = v123;
  *(_DWORD *)(v55 + 40) = v34;
  v56 = v45;
  if ((v45 & 1) != 0)
  {
    v91 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
    if ((v45 & 2) != 0
      || ((v92 = *(unsigned int *)((v45 & 0xFFFFFFFF8) + 8), (_DWORD)v92 != 0x3FFFFFFF)
        ? (v93 = (_DWORD)v92 == -1)
        : (v93 = 1),
          v93))
    {
      v94 = 2;
    }
    else if (v92 >> 28)
    {
      v122 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v122 = v91;
      *(_DWORD *)(v122 + 8) = v92;
      v94 = 1;
      v91 = v122;
    }
    else
    {
      v94 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
      v91 = v92 << 36;
    }
    v56 = v91 | v94;
  }
  *(_QWORD *)(v55 + 48) = v56;
  if (v40)
  {
    do
      v57 = __ldaxr(v40);
    while (__stlxr(v57 + 1, v40));
  }
  *(_QWORD *)(v55 + 56) = v40;
  *(_QWORD *)(v55 + 64) = v36;
  *(_QWORD *)(v55 + 72) = v42;
  do
    v58 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v58 + 1, (unsigned int *)v17));
  *(_QWORD *)(v55 + 80) = v125;
  *(_QWORD *)&v127 = v55;
  v59 = *(unsigned int *)(v44 + 12);
  if ((_DWORD)v59 == *(_DWORD *)(v44 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v44, (uint64_t *)&v127);
    v76 = (unsigned int *)v127;
    *(_QWORD *)&v127 = 0;
    if (v76)
    {
      v77 = v76 + 2;
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        atomic_store(1u, v76 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v76 + 8))(v76);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v44 + 8 * v59) = v55;
    *(_DWORD *)(v44 + 12) = v59 + 1;
    *(_QWORD *)&v127 = 0;
  }
  do
  {
    v60 = __ldaxr((unsigned int *)v17);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, (unsigned int *)v17));
  if (!v61)
  {
    atomic_store(1u, v125 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v125 + 8))(v125);
  }
  if (v40)
  {
    do
    {
      v62 = __ldaxr(v40);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v40));
    if (!v63)
    {
      atomic_store(1u, v40);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v40, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
  }
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  do
  {
    v64 = __ldaxr((unsigned int *)v17);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, (unsigned int *)v17));
  if (!v65)
  {
    atomic_store(1u, v125 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v125 + 8))(v125);
  }
  if (v40)
  {
    do
    {
      v66 = __ldaxr(v40);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v40));
    if (!v67)
    {
      atomic_store(1u, v40);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v40, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
  }
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  v68 = (unsigned int *)v126;
  v126 = 0;
  if (v68)
  {
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v68, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
  }
  do
  {
    v71 = __ldaxr((unsigned int *)v17);
    v72 = v71 - 1;
  }
  while (__stlxr(v72, (unsigned int *)v17));
  if (!v72)
  {
    atomic_store(1u, v125 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v125 + 8))(v125);
  }
  if (v128)
    WTF::fastFree((unint64_t)v128, v48, v49, v50, v51, v52, v53, v54);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_34compileMaterializeCreateActivationEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_34compileMaterializeCreateActivationEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_34compileMaterializeCreateActivationEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::ARM64LogicalImmediate *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  const void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  JSC::ExecutableMemoryHandle *v120[2];

  v10 = (unsigned int *)(a1 + 16);
  v119 = *(_BYTE *)(a2 + 212);
  if (!v119)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v19 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v18 + 308);
  if ((_DWORD)v19 == *(_DWORD *)(v18 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v18 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v18 + 296) + 8 * (_QWORD)v19) = 0;
    *(_DWORD *)(v18 + 308) = (_DWORD)v19 + 1;
  }
  v20 = *(_DWORD *)(a2 + 200);
  if (v20 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v11, v12, v13, v14, v15, v16, v17);
    v20 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v19, 16, v13, v14, v15, v16, v17);
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -134216720;
  v29 = *(_DWORD *)(a2 + 200);
  v30 = v29 + 4;
  *(_DWORD *)(a2 + 200) = v29 + 4;
  if ((v29 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v30 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v31 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v31 + 90440), v31, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v23, v24, v25, v26, v27, v120);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v120[0], v32, v33, v34, v35, v36, v37);
  v45 = (unsigned int *)v120[1];
  v120[1] = 0;
  if (v45)
  {
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v45, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
  }
  v48 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  if (v48)
  {
    v49 = v48 + 2;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
    v51 = *(_DWORD *)(a1 + 16);
    v52 = *(_QWORD *)(a1 + 20);
    v53 = *(_DWORD *)(a1 + 40);
    do
      v54 = __ldaxr(v49);
    while (__stlxr(v54 + 1, v49));
  }
  else
  {
    v51 = *(_DWORD *)(a1 + 16);
    v52 = *(_QWORD *)(a1 + 20);
    v53 = *(_DWORD *)(a1 + 40);
  }
  v55 = *(_QWORD *)(a1 + 48);
  if ((v55 & 1) != 0)
  {
    v93 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v94 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v94 != 0x3FFFFFFF)
        ? (v95 = (_DWORD)v94 == -1)
        : (v95 = 1),
          v95))
    {
      v96 = 2;
    }
    else if (v94 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v93;
      *(_DWORD *)(v117 + 8) = v94;
      v96 = 1;
      v93 = v117;
    }
    else
    {
      v96 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      v93 = v94 << 36;
    }
    v55 = v93 | v96;
  }
  v56 = *(unsigned int **)(a1 + 56);
  if (v56)
  {
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  *(_OWORD *)v120 = *(_OWORD *)(a1 + 64);
  v58 = *(unsigned int **)(a1 + 80);
  if (v58)
  {
    v59 = v58 + 2;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  v61 = WTF::fastMalloc((WTF *)0x58);
  v69 = v61;
  *(_DWORD *)(v61 + 8) = 1;
  *(_QWORD *)v61 = &off_1E35776D0;
  *(_DWORD *)(v61 + 16) = v51;
  *(_QWORD *)(v61 + 20) = v52;
  *(_DWORD *)(v61 + 28) = v53;
  if (v48)
  {
    v70 = v48 + 2;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 + 1, v70));
  }
  *(_QWORD *)(v61 + 32) = v48;
  v72 = v55;
  if ((v55 & 1) != 0)
  {
    v97 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v98 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v98 != 0x3FFFFFFF)
        ? (v99 = (_DWORD)v98 == -1)
        : (v99 = 1),
          v99))
    {
      v100 = 2;
    }
    else if (v98 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v97;
      *(_DWORD *)(v118 + 8) = v98;
      v100 = 1;
      v97 = v118;
    }
    else
    {
      v100 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      v97 = v98 << 36;
    }
    v72 = v97 | v100;
  }
  *(_QWORD *)(v69 + 40) = v72;
  if (v56)
  {
    do
      v73 = __ldaxr(v56);
    while (__stlxr(v73 + 1, v56));
  }
  *(_QWORD *)(v69 + 48) = v56;
  *(_OWORD *)(v69 + 56) = *(_OWORD *)v120;
  if (v58)
  {
    v74 = v58 + 2;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 + 1, v74));
  }
  *(_QWORD *)(v69 + 72) = v58;
  *(_DWORD *)(v69 + 80) = (_DWORD)v19;
  v76 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v76 == *(_DWORD *)(a2 + 240))
  {
    v88 = v76 + (v76 >> 2);
    if (v88 >= 0x10)
      v89 = v88 + 1;
    else
      v89 = 16;
    if (v89 <= v76 + 1)
      v90 = v76 + 1;
    else
      v90 = v89;
    if (v90 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v91 = *(const void **)(a2 + 232);
    v92 = (void *)WTF::fastMalloc((WTF *)(8 * v90));
    *(_DWORD *)(a2 + 240) = v90;
    *(_QWORD *)(a2 + 232) = v92;
    memcpy(v92, v91, 8 * v76);
    if (v91)
    {
      if (*(const void **)(a2 + 232) == v91)
      {
        *(_QWORD *)(a2 + 232) = 0;
        *(_DWORD *)(a2 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v91, v62, v63, v64, v65, v66, v67, v68);
    }
    v76 = *(unsigned int *)(a2 + 244);
    v77 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v76);
  }
  else
  {
    v77 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v76);
  }
  *v77 = v69;
  *(_DWORD *)(a2 + 244) = v76 + 1;
  if (v58)
  {
    v78 = v58 + 2;
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
  if (v56)
  {
    do
    {
      v81 = __ldaxr(v56);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v56));
    if (!v82)
    {
      atomic_store(1u, v56);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v56, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v55 & 0xFFFFFFFF8, v62, v63, v64, v65, v66, v67, v68);
  if (v48)
  {
    v83 = v48 + 2;
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 32))(v48);
    }
    do
    {
      v86 = __ldaxr(v83);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, v83));
    if (!v87)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 32))(v48);
    }
  }
  *(_BYTE *)(a2 + 212) = v119;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_34compileMaterializeCreateActivationEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_34compileMaterializeCreateActivationEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_34compileMaterializeCreateActivationEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF5680);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF56A0);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DF56C0);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
      goto LABEL_73;
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x197DF5648);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 4)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 3;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 4)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 3;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSArrayIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSArrayIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSArrayIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSArrayIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSArrayIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSArrayIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  uint64_t v3;
  WTF *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  int i;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  const void *v78;
  void *v79;
  _BYTE *v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  __int128 v119;
  uint64_t v120;
  WTF *v121[2];
  WTF *v122;
  uint64_t v123;

  v122 = 0;
  v123 = 0;
  v3 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v3)
    goto LABEL_163;
  v7 = 0;
  v8 = 0;
  v9 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = 16 * v3;
  do
  {
    v11 = v9[8];
    switch(v11)
    {
      case 7:
        v12 = *v9 & 0x7F;
        v13 = 1;
        break;
      case 9:
        v12 = (*(_QWORD *)v9 << 32) | 0x1DLL;
        v13 = 2;
        break;
      case 11:
        v12 = *(_QWORD *)v9;
        v13 = 3;
        break;
      default:
        __break(0xC471u);
        goto LABEL_167;
    }
    v121[0] = (WTF *)v13;
    v121[1] = (WTF *)v12;
    if (v8 == (_DWORD)v123)
    {
      v15 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v122, v8 + 1, (unint64_t)v121);
      v14 = HIDWORD(v123);
      v7 = v122;
      *((_OWORD *)v122 + HIDWORD(v123)) = *v15;
    }
    else
    {
      *((_OWORD *)v7 + v8) = *(_OWORD *)v121;
      v14 = HIDWORD(v123);
    }
    v8 = v14 + 1;
    HIDWORD(v123) = v8;
    v9 += 16;
    v10 -= 16;
  }
  while (v10);
  if (!v8)
  {
LABEL_163:
    __break(0xC471u);
    JUMPOUT(0x197DF63C4);
  }
  if (*((_DWORD *)v122 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF5FE8);
  }
  if (v8 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF63CCLL);
  }
  if (*((_DWORD *)v122 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF6008);
  }
  v119 = *(_OWORD *)(a1 + 16);
  v16 = *((_BYTE *)v122 + 8) & 0x7F;
  v17 = *((_BYTE *)v122 + 24) & 0x7F;
  v18 = *(_QWORD *)(a1 + 32);
  v26 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v26 + 8) = 1;
  v27 = (unsigned int *)(v26 + 8);
  *(_QWORD *)v26 = off_1E3576BE0;
  *(_OWORD *)(v26 + 16) = v119;
  *(_BYTE *)(v26 + 32) = v16;
  *(_BYTE *)(v26 + 33) = v17;
  *(_QWORD *)(v26 + 40) = v18;
  *(_BYTE *)(a2 + 328) = 1;
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v29 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
    v29 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = 335544320;
  v30 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v30;
  if (*(_BYTE *)(a2 + 328))
    v31 = 0xFF000F4500000000;
  else
    v31 = 0xFF000F4100000000;
  for (*(_BYTE *)(a2 + 328) = 0; v30 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v30)
  {
    if ((v30 + 4) > *(_DWORD *)(a2 + 192))
    {
      v83 = v31;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      v31 = v83;
      v30 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -721215457;
    v30 = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v32 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v33 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v34 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v34)
  {
    v35 = (_BYTE *)*((_QWORD *)a3 + 3);
    while (1)
    {
      v36 = *v35 & 0x7F;
      if (v36 >= 0x40)
        break;
      v37 = 1 << v36;
      v33 &= ~v37;
      v32 &= ~v37;
      ++v35;
      if (!--v34)
        goto LABEL_29;
    }
LABEL_166:
    __break(1u);
LABEL_167:
    JUMPOUT(0x197DF5FC8);
  }
LABEL_29:
  v38 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v38)
  {
    v80 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v81 = (*v80 + 32) & 0x7F;
      if (v81 >= 0x40)
        goto LABEL_166;
      v82 = 1 << v81;
      v33 &= ~v82;
      v32 &= ~v82;
      ++v80;
    }
    while (--v38);
  }
  v117 = v31;
  v118 = (unsigned int *)v26;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), a3, (uint64_t *)v121);
  v40 = *(_QWORD *)(a1 + 48);
  v39 = *(_QWORD *)(a1 + 56);
  if ((v39 & 1) != 0)
  {
    v84 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v85 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v114 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v114 = v84;
      *(_DWORD *)(v114 + 8) = v85;
      v87 = 1;
      v84 = v114;
    }
    else
    {
      v87 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v39 = v84 | v87;
  }
  v41 = v121[0];
  if (v121[0])
  {
    do
      v42 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v42 + 1, (unsigned int *)v41));
  }
  do
    v43 = __ldaxr(v27);
  while (__stlxr(v43 + 1, v27));
  v44 = *((_QWORD *)a3 + 7);
  v45 = v39;
  v120 = v39;
  if ((v39 & 1) != 0)
  {
    v88 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v89 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
        ? (v90 = (_DWORD)v89 == -1)
        : (v90 = 1),
          v90))
    {
      v91 = 2;
    }
    else if (v89 >> 28)
    {
      v115 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v115 = v88;
      *(_DWORD *)(v115 + 8) = v89;
      v91 = 1;
      v88 = v115;
    }
    else
    {
      v91 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v88 = v89 << 36;
    }
    v45 = v88 | v91;
    if (v41)
      goto LABEL_36;
  }
  else if (v41)
  {
    do
LABEL_36:
      v46 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v46 + 1, (unsigned int *)v41));
    goto LABEL_37;
  }
  do
LABEL_37:
    v47 = __ldaxr(v27);
  while (__stlxr(v47 + 1, v27));
  v55 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v55 + 8) = 1;
  *(_QWORD *)v55 = &off_1E3577720;
  *(_DWORD *)(v55 + 16) = i;
  *(_QWORD *)(v55 + 20) = v117;
  *(_QWORD *)(v55 + 32) = v40;
  *(_DWORD *)(v55 + 40) = v30;
  v56 = v45;
  if ((v45 & 1) != 0)
  {
    v92 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
    if ((v45 & 2) != 0
      || ((v93 = *(unsigned int *)((v45 & 0xFFFFFFFF8) + 8), (_DWORD)v93 != 0x3FFFFFFF)
        ? (v94 = (_DWORD)v93 == -1)
        : (v94 = 1),
          v94))
    {
      v95 = 2;
    }
    else if (v93 >> 28)
    {
      v116 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v116 = v92;
      *(_DWORD *)(v116 + 8) = v93;
      v95 = 1;
      v92 = v116;
    }
    else
    {
      v95 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
      v92 = v93 << 36;
    }
    v56 = v92 | v95;
  }
  *(_QWORD *)(v55 + 48) = v56;
  if (v41)
  {
    do
      v57 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v57 + 1, (unsigned int *)v41));
  }
  *(_QWORD *)(v55 + 56) = v41;
  *(_QWORD *)(v55 + 64) = v33;
  *(_QWORD *)(v55 + 72) = v32;
  do
    v58 = __ldaxr(v27);
  while (__stlxr(v58 + 1, v27));
  *(_QWORD *)(v55 + 80) = v118;
  v59 = *(unsigned int *)(v44 + 12);
  if ((_DWORD)v59 == *(_DWORD *)(v44 + 8))
  {
    v75 = v59 + (v59 >> 2);
    if (v75 >= 0x10)
      v76 = v75 + 1;
    else
      v76 = 16;
    if (v76 <= v59 + 1)
      v77 = v59 + 1;
    else
      v77 = v76;
    if (v77 >> 29)
    {
      __break(0xC471u);
      goto LABEL_166;
    }
    v78 = *(const void **)v44;
    v79 = (void *)WTF::fastMalloc((WTF *)(8 * v77));
    *(_DWORD *)(v44 + 8) = v77;
    *(_QWORD *)v44 = v79;
    memcpy(v79, v78, 8 * v59);
    if (v78)
    {
      if (*(const void **)v44 == v78)
      {
        *(_QWORD *)v44 = 0;
        *(_DWORD *)(v44 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v78, v48, v49, v50, v51, v52, v53, v54);
    }
    v59 = *(unsigned int *)(v44 + 12);
    v60 = (uint64_t *)(*(_QWORD *)v44 + 8 * v59);
  }
  else
  {
    v60 = (uint64_t *)(*(_QWORD *)v44 + 8 * v59);
  }
  *v60 = v55;
  *(_DWORD *)(v44 + 12) = v59 + 1;
  do
  {
    v61 = __ldaxr(v27);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, v27));
  if (v62)
  {
    if (!v41)
      goto LABEL_51;
  }
  else
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
    if (!v41)
      goto LABEL_51;
  }
  do
  {
    v63 = __ldaxr((unsigned int *)v41);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, (unsigned int *)v41));
  if (!v64)
  {
    atomic_store(1u, (unsigned int *)v41);
    v96 = (unsigned int *)*((_QWORD *)v41 + 2);
    *((_QWORD *)v41 + 2) = 0;
    if (v96)
    {
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (!v98)
      {
        atomic_store(1u, v96);
        WTF::fastFree((unint64_t)v96, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    v99 = (unsigned int *)*((_QWORD *)v41 + 1);
    *((_QWORD *)v41 + 1) = 0;
    if (v99)
    {
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        atomic_store(1u, v99);
        WTF::fastFree((unint64_t)v99, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    WTF::fastFree((unint64_t)v41, v48, v49, v50, v51, v52, v53, v54);
  }
LABEL_51:
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  do
  {
    v65 = __ldaxr(v27);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, v27));
  v67 = v120;
  if (v66)
  {
    if (!v41)
      goto LABEL_57;
  }
  else
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
    v67 = v120;
    if (!v41)
      goto LABEL_57;
  }
  do
  {
    v68 = __ldaxr((unsigned int *)v41);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)v41));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)v41);
    v102 = (unsigned int *)*((_QWORD *)v41 + 2);
    *((_QWORD *)v41 + 2) = 0;
    if (v102)
    {
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        atomic_store(1u, v102);
        WTF::fastFree((unint64_t)v102, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    v105 = (unsigned int *)*((_QWORD *)v41 + 1);
    *((_QWORD *)v41 + 1) = 0;
    if (v105)
    {
      do
      {
        v106 = __ldaxr(v105);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v105));
      if (!v107)
      {
        atomic_store(1u, v105);
        WTF::fastFree((unint64_t)v105, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    WTF::fastFree((unint64_t)v41, v48, v49, v50, v51, v52, v53, v54);
    v67 = v120;
  }
LABEL_57:
  if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v67 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  v70 = v121[0];
  v121[0] = 0;
  if (v70)
  {
    do
    {
      v71 = __ldaxr((unsigned int *)v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, (unsigned int *)v70));
    if (!v72)
    {
      atomic_store(1u, (unsigned int *)v70);
      v108 = (unsigned int *)*((_QWORD *)v70 + 2);
      *((_QWORD *)v70 + 2) = 0;
      if (v108)
      {
        do
        {
          v109 = __ldaxr(v108);
          v110 = v109 - 1;
        }
        while (__stlxr(v110, v108));
        if (!v110)
        {
          atomic_store(1u, v108);
          WTF::fastFree((unint64_t)v108, v48, v49, v50, v51, v52, v53, v54);
        }
      }
      v111 = (unsigned int *)*((_QWORD *)v70 + 1);
      *((_QWORD *)v70 + 1) = 0;
      if (v111)
      {
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
        {
          atomic_store(1u, v111);
          WTF::fastFree((unint64_t)v111, v48, v49, v50, v51, v52, v53, v54);
        }
      }
      WTF::fastFree((unint64_t)v70, v48, v49, v50, v51, v52, v53, v54);
    }
  }
  do
  {
    v73 = __ldaxr(v27);
    v74 = v73 - 1;
  }
  while (__stlxr(v74, v27));
  if (!v74)
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
  }
  if (v122)
    WTF::fastFree((unint64_t)v122, v48, v49, v50, v51, v52, v53, v54);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_15JSArrayIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_15JSArrayIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_15JSArrayIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  const void *v89;
  void *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  JSC::ExecutableMemoryHandle *v126[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v23 = v20 + (v20 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v20 + 1)
      v25 = v20 + 1;
    else
      v25 = v24;
    if (v25 >> 29)
    {
      __break(0xC471u);
      goto LABEL_116;
    }
    v26 = *(const void **)(v19 + 296);
    v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(v19 + 304) = v25;
    *(_QWORD *)(v19 + 296) = v27;
    memcpy(v27, v26, 8 * v20);
    if (v26)
    {
      if (*(const void **)(v19 + 296) == v26)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v26, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v36 = *(_DWORD *)(a2 + 200);
  if (v36 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = -134216720;
  v37 = *(_DWORD *)(a2 + 200);
  v38 = v37 + 4;
  *(_DWORD *)(a2 + 200) = v37 + 4;
  if ((v37 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v38 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v39 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v39 + 90440), v39, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v31, v32, v33, v34, v35, v126);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v126[0], v40, v41, v42, v43, v44, v45);
  v53 = (unsigned int *)v126[1];
  v126[1] = 0;
  if (v53)
  {
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v56 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v125 = v11;
  if (v56)
  {
    v57 = v56 + 2;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
    do
      v62 = __ldaxr(v57);
    while (__stlxr(v62 + 1, v57));
  }
  else
  {
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
  }
  v63 = *(_QWORD *)(a1 + 48);
  if ((v63 & 1) != 0)
  {
    v101 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v102 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v123 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = v101;
      *(_DWORD *)(v123 + 8) = v102;
      v104 = 1;
      v101 = v123;
    }
    else
    {
      v104 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v63 = v101 | v104;
  }
  v64 = *(_QWORD *)(a1 + 56);
  if (v64)
  {
    do
      v65 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v65 + 1, (unsigned int *)v64));
  }
  *(_OWORD *)v126 = *(_OWORD *)(a1 + 64);
  v66 = *(unsigned int **)(a1 + 80);
  if (v66)
  {
    v67 = v66 + 2;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 + 1, v67));
  }
  v69 = WTF::fastMalloc((WTF *)0x58);
  v77 = v69;
  *(_DWORD *)(v69 + 8) = 1;
  *(_QWORD *)v69 = &off_1E3577748;
  *(_DWORD *)(v69 + 16) = v59;
  *(_QWORD *)(v69 + 20) = v60;
  *(_DWORD *)(v69 + 28) = v61;
  if (v56)
  {
    v78 = v56 + 2;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
  }
  *(_QWORD *)(v69 + 32) = v56;
  v80 = v63;
  if ((v63 & 1) != 0)
  {
    v105 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v106 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v124 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v124 = v105;
      *(_DWORD *)(v124 + 8) = v106;
      v108 = 1;
      v105 = v124;
    }
    else
    {
      v108 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v80 = v105 | v108;
  }
  *(_QWORD *)(v77 + 40) = v80;
  if (v64)
  {
    do
      v81 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v81 + 1, (unsigned int *)v64));
  }
  *(_QWORD *)(v77 + 48) = v64;
  *(_OWORD *)(v77 + 56) = *(_OWORD *)v126;
  if (v66)
  {
    v82 = v66 + 2;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 + 1, v82));
  }
  *(_QWORD *)(v77 + 72) = v66;
  *(_DWORD *)(v77 + 80) = v20;
  v84 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v84 != *(_DWORD *)(a2 + 240))
  {
    v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
    goto LABEL_58;
  }
  v86 = v84 + (v84 >> 2);
  if (v86 >= 0x10)
    v87 = v86 + 1;
  else
    v87 = 16;
  if (v87 <= v84 + 1)
    v88 = v84 + 1;
  else
    v88 = v87;
  if (v88 >> 29)
  {
    __break(0xC471u);
LABEL_116:
    JUMPOUT(0x197DF6C40);
  }
  v89 = *(const void **)(a2 + 232);
  v90 = (void *)WTF::fastMalloc((WTF *)(8 * v88));
  *(_DWORD *)(a2 + 240) = v88;
  *(_QWORD *)(a2 + 232) = v90;
  memcpy(v90, v89, 8 * v84);
  if (v89)
  {
    if (*(const void **)(a2 + 232) == v89)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v89, v70, v71, v72, v73, v74, v75, v76);
  }
  v84 = *(unsigned int *)(a2 + 244);
  v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
LABEL_58:
  *v85 = v77;
  *(_DWORD *)(a2 + 244) = v84 + 1;
  if (!v66)
    goto LABEL_62;
  v91 = v66 + 2;
  do
  {
    v92 = __ldaxr(v91);
    v93 = v92 - 1;
  }
  while (__stlxr(v93, v91));
  if (!v93)
  {
    atomic_store(1u, v66 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
    if (!v64)
      goto LABEL_65;
  }
  else
  {
LABEL_62:
    if (!v64)
      goto LABEL_65;
  }
  do
  {
    v94 = __ldaxr((unsigned int *)v64);
    v95 = v94 - 1;
  }
  while (__stlxr(v95, (unsigned int *)v64));
  if (!v95)
  {
    atomic_store(1u, (unsigned int *)v64);
    v117 = *(unsigned int **)(v64 + 16);
    *(_QWORD *)(v64 + 16) = 0;
    if (v117)
    {
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
      {
        atomic_store(1u, v117);
        WTF::fastFree((unint64_t)v117, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    v120 = *(unsigned int **)(v64 + 8);
    *(_QWORD *)(v64 + 8) = 0;
    if (v120)
    {
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        atomic_store(1u, v120);
        WTF::fastFree((unint64_t)v120, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    WTF::fastFree(v64, v70, v71, v72, v73, v74, v75, v76);
  }
LABEL_65:
  if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v63 & 0xFFFFFFFF8, v70, v71, v72, v73, v74, v75, v76);
  if (v56)
  {
    v96 = v56 + 2;
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
    do
    {
      v99 = __ldaxr(v96);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v96));
    if (!v100)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
  }
  *(_BYTE *)(a2 + 212) = v125;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_15JSArrayIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_15JSArrayIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_15JSArrayIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF71F4);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF7214);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DF7234);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
    {
LABEL_74:
      __break(0xC471u);
      JUMPOUT(0x197DF71BCLL);
    }
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (!v38)
    goto LABEL_32;
  v39 = v38 + 2;
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, v38 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    if (!v33)
      goto LABEL_37;
  }
  else
  {
LABEL_32:
    if (!v33)
      goto LABEL_37;
  }
  v42 = v33 + 2;
  do
  {
    v43 = __ldaxr(v42);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v42));
  if (!v44)
  {
    atomic_store(1u, v33 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
  }
LABEL_37:
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
    goto LABEL_74;
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 5)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 5)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 4;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSMapIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSMapIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSMapIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSMapIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSMapIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSMapIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  uint64_t v3;
  WTF *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  int i;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  const void *v78;
  void *v79;
  _BYTE *v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  __int128 v119;
  uint64_t v120;
  WTF *v121[2];
  WTF *v122;
  uint64_t v123;

  v122 = 0;
  v123 = 0;
  v3 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v3)
    goto LABEL_163;
  v7 = 0;
  v8 = 0;
  v9 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = 16 * v3;
  do
  {
    v11 = v9[8];
    switch(v11)
    {
      case 7:
        v12 = *v9 & 0x7F;
        v13 = 1;
        break;
      case 9:
        v12 = (*(_QWORD *)v9 << 32) | 0x1DLL;
        v13 = 2;
        break;
      case 11:
        v12 = *(_QWORD *)v9;
        v13 = 3;
        break;
      default:
        __break(0xC471u);
        goto LABEL_167;
    }
    v121[0] = (WTF *)v13;
    v121[1] = (WTF *)v12;
    if (v8 == (_DWORD)v123)
    {
      v15 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v122, v8 + 1, (unint64_t)v121);
      v14 = HIDWORD(v123);
      v7 = v122;
      *((_OWORD *)v122 + HIDWORD(v123)) = *v15;
    }
    else
    {
      *((_OWORD *)v7 + v8) = *(_OWORD *)v121;
      v14 = HIDWORD(v123);
    }
    v8 = v14 + 1;
    HIDWORD(v123) = v8;
    v9 += 16;
    v10 -= 16;
  }
  while (v10);
  if (!v8)
  {
LABEL_163:
    __break(0xC471u);
    JUMPOUT(0x197DF7F3CLL);
  }
  if (*((_DWORD *)v122 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF7B60);
  }
  if (v8 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF7F44);
  }
  if (*((_DWORD *)v122 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF7B80);
  }
  v119 = *(_OWORD *)(a1 + 16);
  v16 = *((_BYTE *)v122 + 8) & 0x7F;
  v17 = *((_BYTE *)v122 + 24) & 0x7F;
  v18 = *(_QWORD *)(a1 + 32);
  v26 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v26 + 8) = 1;
  v27 = (unsigned int *)(v26 + 8);
  *(_QWORD *)v26 = off_1E3576BE0;
  *(_OWORD *)(v26 + 16) = v119;
  *(_BYTE *)(v26 + 32) = v16;
  *(_BYTE *)(v26 + 33) = v17;
  *(_QWORD *)(v26 + 40) = v18;
  *(_BYTE *)(a2 + 328) = 1;
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v29 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
    v29 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = 335544320;
  v30 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v30;
  if (*(_BYTE *)(a2 + 328))
    v31 = 0xFF000F4500000000;
  else
    v31 = 0xFF000F4100000000;
  for (*(_BYTE *)(a2 + 328) = 0; v30 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v30)
  {
    if ((v30 + 4) > *(_DWORD *)(a2 + 192))
    {
      v83 = v31;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      v31 = v83;
      v30 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -721215457;
    v30 = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v32 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v33 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v34 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v34)
  {
    v35 = (_BYTE *)*((_QWORD *)a3 + 3);
    while (1)
    {
      v36 = *v35 & 0x7F;
      if (v36 >= 0x40)
        break;
      v37 = 1 << v36;
      v33 &= ~v37;
      v32 &= ~v37;
      ++v35;
      if (!--v34)
        goto LABEL_29;
    }
LABEL_166:
    __break(1u);
LABEL_167:
    JUMPOUT(0x197DF7B40);
  }
LABEL_29:
  v38 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v38)
  {
    v80 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v81 = (*v80 + 32) & 0x7F;
      if (v81 >= 0x40)
        goto LABEL_166;
      v82 = 1 << v81;
      v33 &= ~v82;
      v32 &= ~v82;
      ++v80;
    }
    while (--v38);
  }
  v117 = v31;
  v118 = (unsigned int *)v26;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), a3, (uint64_t *)v121);
  v40 = *(_QWORD *)(a1 + 48);
  v39 = *(_QWORD *)(a1 + 56);
  if ((v39 & 1) != 0)
  {
    v84 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v85 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v114 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v114 = v84;
      *(_DWORD *)(v114 + 8) = v85;
      v87 = 1;
      v84 = v114;
    }
    else
    {
      v87 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v39 = v84 | v87;
  }
  v41 = v121[0];
  if (v121[0])
  {
    do
      v42 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v42 + 1, (unsigned int *)v41));
  }
  do
    v43 = __ldaxr(v27);
  while (__stlxr(v43 + 1, v27));
  v44 = *((_QWORD *)a3 + 7);
  v45 = v39;
  v120 = v39;
  if ((v39 & 1) != 0)
  {
    v88 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v89 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
        ? (v90 = (_DWORD)v89 == -1)
        : (v90 = 1),
          v90))
    {
      v91 = 2;
    }
    else if (v89 >> 28)
    {
      v115 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v115 = v88;
      *(_DWORD *)(v115 + 8) = v89;
      v91 = 1;
      v88 = v115;
    }
    else
    {
      v91 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v88 = v89 << 36;
    }
    v45 = v88 | v91;
    if (v41)
      goto LABEL_36;
  }
  else if (v41)
  {
    do
LABEL_36:
      v46 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v46 + 1, (unsigned int *)v41));
    goto LABEL_37;
  }
  do
LABEL_37:
    v47 = __ldaxr(v27);
  while (__stlxr(v47 + 1, v27));
  v55 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v55 + 8) = 1;
  *(_QWORD *)v55 = &off_1E3577798;
  *(_DWORD *)(v55 + 16) = i;
  *(_QWORD *)(v55 + 20) = v117;
  *(_QWORD *)(v55 + 32) = v40;
  *(_DWORD *)(v55 + 40) = v30;
  v56 = v45;
  if ((v45 & 1) != 0)
  {
    v92 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
    if ((v45 & 2) != 0
      || ((v93 = *(unsigned int *)((v45 & 0xFFFFFFFF8) + 8), (_DWORD)v93 != 0x3FFFFFFF)
        ? (v94 = (_DWORD)v93 == -1)
        : (v94 = 1),
          v94))
    {
      v95 = 2;
    }
    else if (v93 >> 28)
    {
      v116 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v116 = v92;
      *(_DWORD *)(v116 + 8) = v93;
      v95 = 1;
      v92 = v116;
    }
    else
    {
      v95 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
      v92 = v93 << 36;
    }
    v56 = v92 | v95;
  }
  *(_QWORD *)(v55 + 48) = v56;
  if (v41)
  {
    do
      v57 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v57 + 1, (unsigned int *)v41));
  }
  *(_QWORD *)(v55 + 56) = v41;
  *(_QWORD *)(v55 + 64) = v33;
  *(_QWORD *)(v55 + 72) = v32;
  do
    v58 = __ldaxr(v27);
  while (__stlxr(v58 + 1, v27));
  *(_QWORD *)(v55 + 80) = v118;
  v59 = *(unsigned int *)(v44 + 12);
  if ((_DWORD)v59 == *(_DWORD *)(v44 + 8))
  {
    v75 = v59 + (v59 >> 2);
    if (v75 >= 0x10)
      v76 = v75 + 1;
    else
      v76 = 16;
    if (v76 <= v59 + 1)
      v77 = v59 + 1;
    else
      v77 = v76;
    if (v77 >> 29)
    {
      __break(0xC471u);
      goto LABEL_166;
    }
    v78 = *(const void **)v44;
    v79 = (void *)WTF::fastMalloc((WTF *)(8 * v77));
    *(_DWORD *)(v44 + 8) = v77;
    *(_QWORD *)v44 = v79;
    memcpy(v79, v78, 8 * v59);
    if (v78)
    {
      if (*(const void **)v44 == v78)
      {
        *(_QWORD *)v44 = 0;
        *(_DWORD *)(v44 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v78, v48, v49, v50, v51, v52, v53, v54);
    }
    v59 = *(unsigned int *)(v44 + 12);
    v60 = (uint64_t *)(*(_QWORD *)v44 + 8 * v59);
  }
  else
  {
    v60 = (uint64_t *)(*(_QWORD *)v44 + 8 * v59);
  }
  *v60 = v55;
  *(_DWORD *)(v44 + 12) = v59 + 1;
  do
  {
    v61 = __ldaxr(v27);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, v27));
  if (v62)
  {
    if (!v41)
      goto LABEL_51;
  }
  else
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
    if (!v41)
      goto LABEL_51;
  }
  do
  {
    v63 = __ldaxr((unsigned int *)v41);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, (unsigned int *)v41));
  if (!v64)
  {
    atomic_store(1u, (unsigned int *)v41);
    v96 = (unsigned int *)*((_QWORD *)v41 + 2);
    *((_QWORD *)v41 + 2) = 0;
    if (v96)
    {
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (!v98)
      {
        atomic_store(1u, v96);
        WTF::fastFree((unint64_t)v96, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    v99 = (unsigned int *)*((_QWORD *)v41 + 1);
    *((_QWORD *)v41 + 1) = 0;
    if (v99)
    {
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        atomic_store(1u, v99);
        WTF::fastFree((unint64_t)v99, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    WTF::fastFree((unint64_t)v41, v48, v49, v50, v51, v52, v53, v54);
  }
LABEL_51:
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  do
  {
    v65 = __ldaxr(v27);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, v27));
  v67 = v120;
  if (v66)
  {
    if (!v41)
      goto LABEL_57;
  }
  else
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
    v67 = v120;
    if (!v41)
      goto LABEL_57;
  }
  do
  {
    v68 = __ldaxr((unsigned int *)v41);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)v41));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)v41);
    v102 = (unsigned int *)*((_QWORD *)v41 + 2);
    *((_QWORD *)v41 + 2) = 0;
    if (v102)
    {
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        atomic_store(1u, v102);
        WTF::fastFree((unint64_t)v102, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    v105 = (unsigned int *)*((_QWORD *)v41 + 1);
    *((_QWORD *)v41 + 1) = 0;
    if (v105)
    {
      do
      {
        v106 = __ldaxr(v105);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v105));
      if (!v107)
      {
        atomic_store(1u, v105);
        WTF::fastFree((unint64_t)v105, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    WTF::fastFree((unint64_t)v41, v48, v49, v50, v51, v52, v53, v54);
    v67 = v120;
  }
LABEL_57:
  if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v67 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  v70 = v121[0];
  v121[0] = 0;
  if (v70)
  {
    do
    {
      v71 = __ldaxr((unsigned int *)v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, (unsigned int *)v70));
    if (!v72)
    {
      atomic_store(1u, (unsigned int *)v70);
      v108 = (unsigned int *)*((_QWORD *)v70 + 2);
      *((_QWORD *)v70 + 2) = 0;
      if (v108)
      {
        do
        {
          v109 = __ldaxr(v108);
          v110 = v109 - 1;
        }
        while (__stlxr(v110, v108));
        if (!v110)
        {
          atomic_store(1u, v108);
          WTF::fastFree((unint64_t)v108, v48, v49, v50, v51, v52, v53, v54);
        }
      }
      v111 = (unsigned int *)*((_QWORD *)v70 + 1);
      *((_QWORD *)v70 + 1) = 0;
      if (v111)
      {
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
        {
          atomic_store(1u, v111);
          WTF::fastFree((unint64_t)v111, v48, v49, v50, v51, v52, v53, v54);
        }
      }
      WTF::fastFree((unint64_t)v70, v48, v49, v50, v51, v52, v53, v54);
    }
  }
  do
  {
    v73 = __ldaxr(v27);
    v74 = v73 - 1;
  }
  while (__stlxr(v74, v27));
  if (!v74)
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
  }
  if (v122)
    WTF::fastFree((unint64_t)v122, v48, v49, v50, v51, v52, v53, v54);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_13JSMapIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_13JSMapIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_13JSMapIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  const void *v89;
  void *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  JSC::ExecutableMemoryHandle *v126[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v23 = v20 + (v20 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v20 + 1)
      v25 = v20 + 1;
    else
      v25 = v24;
    if (v25 >> 29)
    {
      __break(0xC471u);
      goto LABEL_116;
    }
    v26 = *(const void **)(v19 + 296);
    v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(v19 + 304) = v25;
    *(_QWORD *)(v19 + 296) = v27;
    memcpy(v27, v26, 8 * v20);
    if (v26)
    {
      if (*(const void **)(v19 + 296) == v26)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v26, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v36 = *(_DWORD *)(a2 + 200);
  if (v36 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = -134216720;
  v37 = *(_DWORD *)(a2 + 200);
  v38 = v37 + 4;
  *(_DWORD *)(a2 + 200) = v37 + 4;
  if ((v37 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v38 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v39 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v39 + 90440), v39, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v31, v32, v33, v34, v35, v126);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v126[0], v40, v41, v42, v43, v44, v45);
  v53 = (unsigned int *)v126[1];
  v126[1] = 0;
  if (v53)
  {
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v56 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v125 = v11;
  if (v56)
  {
    v57 = v56 + 2;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
    do
      v62 = __ldaxr(v57);
    while (__stlxr(v62 + 1, v57));
  }
  else
  {
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
  }
  v63 = *(_QWORD *)(a1 + 48);
  if ((v63 & 1) != 0)
  {
    v101 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v102 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v123 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = v101;
      *(_DWORD *)(v123 + 8) = v102;
      v104 = 1;
      v101 = v123;
    }
    else
    {
      v104 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v63 = v101 | v104;
  }
  v64 = *(_QWORD *)(a1 + 56);
  if (v64)
  {
    do
      v65 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v65 + 1, (unsigned int *)v64));
  }
  *(_OWORD *)v126 = *(_OWORD *)(a1 + 64);
  v66 = *(unsigned int **)(a1 + 80);
  if (v66)
  {
    v67 = v66 + 2;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 + 1, v67));
  }
  v69 = WTF::fastMalloc((WTF *)0x58);
  v77 = v69;
  *(_DWORD *)(v69 + 8) = 1;
  *(_QWORD *)v69 = &off_1E35777C0;
  *(_DWORD *)(v69 + 16) = v59;
  *(_QWORD *)(v69 + 20) = v60;
  *(_DWORD *)(v69 + 28) = v61;
  if (v56)
  {
    v78 = v56 + 2;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
  }
  *(_QWORD *)(v69 + 32) = v56;
  v80 = v63;
  if ((v63 & 1) != 0)
  {
    v105 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v106 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v124 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v124 = v105;
      *(_DWORD *)(v124 + 8) = v106;
      v108 = 1;
      v105 = v124;
    }
    else
    {
      v108 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v80 = v105 | v108;
  }
  *(_QWORD *)(v77 + 40) = v80;
  if (v64)
  {
    do
      v81 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v81 + 1, (unsigned int *)v64));
  }
  *(_QWORD *)(v77 + 48) = v64;
  *(_OWORD *)(v77 + 56) = *(_OWORD *)v126;
  if (v66)
  {
    v82 = v66 + 2;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 + 1, v82));
  }
  *(_QWORD *)(v77 + 72) = v66;
  *(_DWORD *)(v77 + 80) = v20;
  v84 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v84 != *(_DWORD *)(a2 + 240))
  {
    v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
    goto LABEL_58;
  }
  v86 = v84 + (v84 >> 2);
  if (v86 >= 0x10)
    v87 = v86 + 1;
  else
    v87 = 16;
  if (v87 <= v84 + 1)
    v88 = v84 + 1;
  else
    v88 = v87;
  if (v88 >> 29)
  {
    __break(0xC471u);
LABEL_116:
    JUMPOUT(0x197DF87B8);
  }
  v89 = *(const void **)(a2 + 232);
  v90 = (void *)WTF::fastMalloc((WTF *)(8 * v88));
  *(_DWORD *)(a2 + 240) = v88;
  *(_QWORD *)(a2 + 232) = v90;
  memcpy(v90, v89, 8 * v84);
  if (v89)
  {
    if (*(const void **)(a2 + 232) == v89)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v89, v70, v71, v72, v73, v74, v75, v76);
  }
  v84 = *(unsigned int *)(a2 + 244);
  v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
LABEL_58:
  *v85 = v77;
  *(_DWORD *)(a2 + 244) = v84 + 1;
  if (!v66)
    goto LABEL_62;
  v91 = v66 + 2;
  do
  {
    v92 = __ldaxr(v91);
    v93 = v92 - 1;
  }
  while (__stlxr(v93, v91));
  if (!v93)
  {
    atomic_store(1u, v66 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
    if (!v64)
      goto LABEL_65;
  }
  else
  {
LABEL_62:
    if (!v64)
      goto LABEL_65;
  }
  do
  {
    v94 = __ldaxr((unsigned int *)v64);
    v95 = v94 - 1;
  }
  while (__stlxr(v95, (unsigned int *)v64));
  if (!v95)
  {
    atomic_store(1u, (unsigned int *)v64);
    v117 = *(unsigned int **)(v64 + 16);
    *(_QWORD *)(v64 + 16) = 0;
    if (v117)
    {
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
      {
        atomic_store(1u, v117);
        WTF::fastFree((unint64_t)v117, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    v120 = *(unsigned int **)(v64 + 8);
    *(_QWORD *)(v64 + 8) = 0;
    if (v120)
    {
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        atomic_store(1u, v120);
        WTF::fastFree((unint64_t)v120, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    WTF::fastFree(v64, v70, v71, v72, v73, v74, v75, v76);
  }
LABEL_65:
  if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v63 & 0xFFFFFFFF8, v70, v71, v72, v73, v74, v75, v76);
  if (v56)
  {
    v96 = v56 + 2;
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
    do
    {
      v99 = __ldaxr(v96);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v96));
    if (!v100)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
  }
  *(_BYTE *)(a2 + 212) = v125;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_13JSMapIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_13JSMapIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_13JSMapIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF8D6CLL);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF8D8CLL);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DF8DACLL);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
    {
LABEL_74:
      __break(0xC471u);
      JUMPOUT(0x197DF8D34);
    }
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (!v38)
    goto LABEL_32;
  v39 = v38 + 2;
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, v38 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    if (!v33)
      goto LABEL_37;
  }
  else
  {
LABEL_32:
    if (!v33)
      goto LABEL_37;
  }
  v42 = v33 + 2;
  do
  {
    v43 = __ldaxr(v42);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v42));
  if (!v44)
  {
    atomic_store(1u, v33 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
  }
LABEL_37:
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
    goto LABEL_74;
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSSetIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSSetIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSSetIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSSetIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSSetIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSSetIterator,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  uint64_t v3;
  WTF *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  int i;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  const void *v78;
  void *v79;
  _BYTE *v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  __int128 v119;
  uint64_t v120;
  WTF *v121[2];
  WTF *v122;
  uint64_t v123;

  v122 = 0;
  v123 = 0;
  v3 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v3)
    goto LABEL_163;
  v7 = 0;
  v8 = 0;
  v9 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = 16 * v3;
  do
  {
    v11 = v9[8];
    switch(v11)
    {
      case 7:
        v12 = *v9 & 0x7F;
        v13 = 1;
        break;
      case 9:
        v12 = (*(_QWORD *)v9 << 32) | 0x1DLL;
        v13 = 2;
        break;
      case 11:
        v12 = *(_QWORD *)v9;
        v13 = 3;
        break;
      default:
        __break(0xC471u);
        goto LABEL_167;
    }
    v121[0] = (WTF *)v13;
    v121[1] = (WTF *)v12;
    if (v8 == (_DWORD)v123)
    {
      v15 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v122, v8 + 1, (unint64_t)v121);
      v14 = HIDWORD(v123);
      v7 = v122;
      *((_OWORD *)v122 + HIDWORD(v123)) = *v15;
    }
    else
    {
      *((_OWORD *)v7 + v8) = *(_OWORD *)v121;
      v14 = HIDWORD(v123);
    }
    v8 = v14 + 1;
    HIDWORD(v123) = v8;
    v9 += 16;
    v10 -= 16;
  }
  while (v10);
  if (!v8)
  {
LABEL_163:
    __break(0xC471u);
    JUMPOUT(0x197DF98E0);
  }
  if (*((_DWORD *)v122 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF9504);
  }
  if (v8 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DF98E8);
  }
  if (*((_DWORD *)v122 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DF9524);
  }
  v119 = *(_OWORD *)(a1 + 16);
  v16 = *((_BYTE *)v122 + 8) & 0x7F;
  v17 = *((_BYTE *)v122 + 24) & 0x7F;
  v18 = *(_QWORD *)(a1 + 32);
  v26 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v26 + 8) = 1;
  v27 = (unsigned int *)(v26 + 8);
  *(_QWORD *)v26 = off_1E3576BE0;
  *(_OWORD *)(v26 + 16) = v119;
  *(_BYTE *)(v26 + 32) = v16;
  *(_BYTE *)(v26 + 33) = v17;
  *(_QWORD *)(v26 + 40) = v18;
  *(_BYTE *)(a2 + 328) = 1;
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v29 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
    v29 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = 335544320;
  v30 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v30;
  if (*(_BYTE *)(a2 + 328))
    v31 = 0xFF000F4500000000;
  else
    v31 = 0xFF000F4100000000;
  for (*(_BYTE *)(a2 + 328) = 0; v30 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v30)
  {
    if ((v30 + 4) > *(_DWORD *)(a2 + 192))
    {
      v83 = v31;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      v31 = v83;
      v30 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -721215457;
    v30 = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v32 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v33 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v34 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v34)
  {
    v35 = (_BYTE *)*((_QWORD *)a3 + 3);
    while (1)
    {
      v36 = *v35 & 0x7F;
      if (v36 >= 0x40)
        break;
      v37 = 1 << v36;
      v33 &= ~v37;
      v32 &= ~v37;
      ++v35;
      if (!--v34)
        goto LABEL_29;
    }
LABEL_166:
    __break(1u);
LABEL_167:
    JUMPOUT(0x197DF94E4);
  }
LABEL_29:
  v38 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v38)
  {
    v80 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v81 = (*v80 + 32) & 0x7F;
      if (v81 >= 0x40)
        goto LABEL_166;
      v82 = 1 << v81;
      v33 &= ~v82;
      v32 &= ~v82;
      ++v80;
    }
    while (--v38);
  }
  v117 = v31;
  v118 = (unsigned int *)v26;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), a3, (uint64_t *)v121);
  v40 = *(_QWORD *)(a1 + 48);
  v39 = *(_QWORD *)(a1 + 56);
  if ((v39 & 1) != 0)
  {
    v84 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v85 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v114 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v114 = v84;
      *(_DWORD *)(v114 + 8) = v85;
      v87 = 1;
      v84 = v114;
    }
    else
    {
      v87 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v39 = v84 | v87;
  }
  v41 = v121[0];
  if (v121[0])
  {
    do
      v42 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v42 + 1, (unsigned int *)v41));
  }
  do
    v43 = __ldaxr(v27);
  while (__stlxr(v43 + 1, v27));
  v44 = *((_QWORD *)a3 + 7);
  v45 = v39;
  v120 = v39;
  if ((v39 & 1) != 0)
  {
    v88 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v89 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
        ? (v90 = (_DWORD)v89 == -1)
        : (v90 = 1),
          v90))
    {
      v91 = 2;
    }
    else if (v89 >> 28)
    {
      v115 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v115 = v88;
      *(_DWORD *)(v115 + 8) = v89;
      v91 = 1;
      v88 = v115;
    }
    else
    {
      v91 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v88 = v89 << 36;
    }
    v45 = v88 | v91;
    if (v41)
      goto LABEL_36;
  }
  else if (v41)
  {
    do
LABEL_36:
      v46 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v46 + 1, (unsigned int *)v41));
    goto LABEL_37;
  }
  do
LABEL_37:
    v47 = __ldaxr(v27);
  while (__stlxr(v47 + 1, v27));
  v55 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v55 + 8) = 1;
  *(_QWORD *)v55 = &off_1E3577810;
  *(_DWORD *)(v55 + 16) = i;
  *(_QWORD *)(v55 + 20) = v117;
  *(_QWORD *)(v55 + 32) = v40;
  *(_DWORD *)(v55 + 40) = v30;
  v56 = v45;
  if ((v45 & 1) != 0)
  {
    v92 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
    if ((v45 & 2) != 0
      || ((v93 = *(unsigned int *)((v45 & 0xFFFFFFFF8) + 8), (_DWORD)v93 != 0x3FFFFFFF)
        ? (v94 = (_DWORD)v93 == -1)
        : (v94 = 1),
          v94))
    {
      v95 = 2;
    }
    else if (v93 >> 28)
    {
      v116 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v116 = v92;
      *(_DWORD *)(v116 + 8) = v93;
      v95 = 1;
      v92 = v116;
    }
    else
    {
      v95 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
      v92 = v93 << 36;
    }
    v56 = v92 | v95;
  }
  *(_QWORD *)(v55 + 48) = v56;
  if (v41)
  {
    do
      v57 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v57 + 1, (unsigned int *)v41));
  }
  *(_QWORD *)(v55 + 56) = v41;
  *(_QWORD *)(v55 + 64) = v33;
  *(_QWORD *)(v55 + 72) = v32;
  do
    v58 = __ldaxr(v27);
  while (__stlxr(v58 + 1, v27));
  *(_QWORD *)(v55 + 80) = v118;
  v59 = *(unsigned int *)(v44 + 12);
  if ((_DWORD)v59 == *(_DWORD *)(v44 + 8))
  {
    v75 = v59 + (v59 >> 2);
    if (v75 >= 0x10)
      v76 = v75 + 1;
    else
      v76 = 16;
    if (v76 <= v59 + 1)
      v77 = v59 + 1;
    else
      v77 = v76;
    if (v77 >> 29)
    {
      __break(0xC471u);
      goto LABEL_166;
    }
    v78 = *(const void **)v44;
    v79 = (void *)WTF::fastMalloc((WTF *)(8 * v77));
    *(_DWORD *)(v44 + 8) = v77;
    *(_QWORD *)v44 = v79;
    memcpy(v79, v78, 8 * v59);
    if (v78)
    {
      if (*(const void **)v44 == v78)
      {
        *(_QWORD *)v44 = 0;
        *(_DWORD *)(v44 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v78, v48, v49, v50, v51, v52, v53, v54);
    }
    v59 = *(unsigned int *)(v44 + 12);
    v60 = (uint64_t *)(*(_QWORD *)v44 + 8 * v59);
  }
  else
  {
    v60 = (uint64_t *)(*(_QWORD *)v44 + 8 * v59);
  }
  *v60 = v55;
  *(_DWORD *)(v44 + 12) = v59 + 1;
  do
  {
    v61 = __ldaxr(v27);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, v27));
  if (v62)
  {
    if (!v41)
      goto LABEL_51;
  }
  else
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
    if (!v41)
      goto LABEL_51;
  }
  do
  {
    v63 = __ldaxr((unsigned int *)v41);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, (unsigned int *)v41));
  if (!v64)
  {
    atomic_store(1u, (unsigned int *)v41);
    v96 = (unsigned int *)*((_QWORD *)v41 + 2);
    *((_QWORD *)v41 + 2) = 0;
    if (v96)
    {
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (!v98)
      {
        atomic_store(1u, v96);
        WTF::fastFree((unint64_t)v96, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    v99 = (unsigned int *)*((_QWORD *)v41 + 1);
    *((_QWORD *)v41 + 1) = 0;
    if (v99)
    {
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        atomic_store(1u, v99);
        WTF::fastFree((unint64_t)v99, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    WTF::fastFree((unint64_t)v41, v48, v49, v50, v51, v52, v53, v54);
  }
LABEL_51:
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  do
  {
    v65 = __ldaxr(v27);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, v27));
  v67 = v120;
  if (v66)
  {
    if (!v41)
      goto LABEL_57;
  }
  else
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
    v67 = v120;
    if (!v41)
      goto LABEL_57;
  }
  do
  {
    v68 = __ldaxr((unsigned int *)v41);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)v41));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)v41);
    v102 = (unsigned int *)*((_QWORD *)v41 + 2);
    *((_QWORD *)v41 + 2) = 0;
    if (v102)
    {
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        atomic_store(1u, v102);
        WTF::fastFree((unint64_t)v102, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    v105 = (unsigned int *)*((_QWORD *)v41 + 1);
    *((_QWORD *)v41 + 1) = 0;
    if (v105)
    {
      do
      {
        v106 = __ldaxr(v105);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v105));
      if (!v107)
      {
        atomic_store(1u, v105);
        WTF::fastFree((unint64_t)v105, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    WTF::fastFree((unint64_t)v41, v48, v49, v50, v51, v52, v53, v54);
    v67 = v120;
  }
LABEL_57:
  if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v67 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  v70 = v121[0];
  v121[0] = 0;
  if (v70)
  {
    do
    {
      v71 = __ldaxr((unsigned int *)v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, (unsigned int *)v70));
    if (!v72)
    {
      atomic_store(1u, (unsigned int *)v70);
      v108 = (unsigned int *)*((_QWORD *)v70 + 2);
      *((_QWORD *)v70 + 2) = 0;
      if (v108)
      {
        do
        {
          v109 = __ldaxr(v108);
          v110 = v109 - 1;
        }
        while (__stlxr(v110, v108));
        if (!v110)
        {
          atomic_store(1u, v108);
          WTF::fastFree((unint64_t)v108, v48, v49, v50, v51, v52, v53, v54);
        }
      }
      v111 = (unsigned int *)*((_QWORD *)v70 + 1);
      *((_QWORD *)v70 + 1) = 0;
      if (v111)
      {
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
        {
          atomic_store(1u, v111);
          WTF::fastFree((unint64_t)v111, v48, v49, v50, v51, v52, v53, v54);
        }
      }
      WTF::fastFree((unint64_t)v70, v48, v49, v50, v51, v52, v53, v54);
    }
  }
  do
  {
    v73 = __ldaxr(v27);
    v74 = v73 - 1;
  }
  while (__stlxr(v74, v27));
  if (!v74)
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
  }
  if (v122)
    WTF::fastFree((unint64_t)v122, v48, v49, v50, v51, v52, v53, v54);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_13JSSetIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_13JSSetIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_13JSSetIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  const void *v89;
  void *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  JSC::ExecutableMemoryHandle *v126[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v23 = v20 + (v20 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v20 + 1)
      v25 = v20 + 1;
    else
      v25 = v24;
    if (v25 >> 29)
    {
      __break(0xC471u);
      goto LABEL_116;
    }
    v26 = *(const void **)(v19 + 296);
    v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(v19 + 304) = v25;
    *(_QWORD *)(v19 + 296) = v27;
    memcpy(v27, v26, 8 * v20);
    if (v26)
    {
      if (*(const void **)(v19 + 296) == v26)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v26, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v36 = *(_DWORD *)(a2 + 200);
  if (v36 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = -134216720;
  v37 = *(_DWORD *)(a2 + 200);
  v38 = v37 + 4;
  *(_DWORD *)(a2 + 200) = v37 + 4;
  if ((v37 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v38 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v39 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v39 + 90440), v39, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v31, v32, v33, v34, v35, v126);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v126[0], v40, v41, v42, v43, v44, v45);
  v53 = (unsigned int *)v126[1];
  v126[1] = 0;
  if (v53)
  {
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v56 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v125 = v11;
  if (v56)
  {
    v57 = v56 + 2;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
    do
      v62 = __ldaxr(v57);
    while (__stlxr(v62 + 1, v57));
  }
  else
  {
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
  }
  v63 = *(_QWORD *)(a1 + 48);
  if ((v63 & 1) != 0)
  {
    v101 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v102 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v123 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = v101;
      *(_DWORD *)(v123 + 8) = v102;
      v104 = 1;
      v101 = v123;
    }
    else
    {
      v104 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v63 = v101 | v104;
  }
  v64 = *(_QWORD *)(a1 + 56);
  if (v64)
  {
    do
      v65 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v65 + 1, (unsigned int *)v64));
  }
  *(_OWORD *)v126 = *(_OWORD *)(a1 + 64);
  v66 = *(unsigned int **)(a1 + 80);
  if (v66)
  {
    v67 = v66 + 2;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 + 1, v67));
  }
  v69 = WTF::fastMalloc((WTF *)0x58);
  v77 = v69;
  *(_DWORD *)(v69 + 8) = 1;
  *(_QWORD *)v69 = &off_1E3577838;
  *(_DWORD *)(v69 + 16) = v59;
  *(_QWORD *)(v69 + 20) = v60;
  *(_DWORD *)(v69 + 28) = v61;
  if (v56)
  {
    v78 = v56 + 2;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
  }
  *(_QWORD *)(v69 + 32) = v56;
  v80 = v63;
  if ((v63 & 1) != 0)
  {
    v105 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v106 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v124 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v124 = v105;
      *(_DWORD *)(v124 + 8) = v106;
      v108 = 1;
      v105 = v124;
    }
    else
    {
      v108 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v80 = v105 | v108;
  }
  *(_QWORD *)(v77 + 40) = v80;
  if (v64)
  {
    do
      v81 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v81 + 1, (unsigned int *)v64));
  }
  *(_QWORD *)(v77 + 48) = v64;
  *(_OWORD *)(v77 + 56) = *(_OWORD *)v126;
  if (v66)
  {
    v82 = v66 + 2;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 + 1, v82));
  }
  *(_QWORD *)(v77 + 72) = v66;
  *(_DWORD *)(v77 + 80) = v20;
  v84 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v84 != *(_DWORD *)(a2 + 240))
  {
    v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
    goto LABEL_58;
  }
  v86 = v84 + (v84 >> 2);
  if (v86 >= 0x10)
    v87 = v86 + 1;
  else
    v87 = 16;
  if (v87 <= v84 + 1)
    v88 = v84 + 1;
  else
    v88 = v87;
  if (v88 >> 29)
  {
    __break(0xC471u);
LABEL_116:
    JUMPOUT(0x197DFA15CLL);
  }
  v89 = *(const void **)(a2 + 232);
  v90 = (void *)WTF::fastMalloc((WTF *)(8 * v88));
  *(_DWORD *)(a2 + 240) = v88;
  *(_QWORD *)(a2 + 232) = v90;
  memcpy(v90, v89, 8 * v84);
  if (v89)
  {
    if (*(const void **)(a2 + 232) == v89)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v89, v70, v71, v72, v73, v74, v75, v76);
  }
  v84 = *(unsigned int *)(a2 + 244);
  v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
LABEL_58:
  *v85 = v77;
  *(_DWORD *)(a2 + 244) = v84 + 1;
  if (!v66)
    goto LABEL_62;
  v91 = v66 + 2;
  do
  {
    v92 = __ldaxr(v91);
    v93 = v92 - 1;
  }
  while (__stlxr(v93, v91));
  if (!v93)
  {
    atomic_store(1u, v66 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
    if (!v64)
      goto LABEL_65;
  }
  else
  {
LABEL_62:
    if (!v64)
      goto LABEL_65;
  }
  do
  {
    v94 = __ldaxr((unsigned int *)v64);
    v95 = v94 - 1;
  }
  while (__stlxr(v95, (unsigned int *)v64));
  if (!v95)
  {
    atomic_store(1u, (unsigned int *)v64);
    v117 = *(unsigned int **)(v64 + 16);
    *(_QWORD *)(v64 + 16) = 0;
    if (v117)
    {
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
      {
        atomic_store(1u, v117);
        WTF::fastFree((unint64_t)v117, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    v120 = *(unsigned int **)(v64 + 8);
    *(_QWORD *)(v64 + 8) = 0;
    if (v120)
    {
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        atomic_store(1u, v120);
        WTF::fastFree((unint64_t)v120, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    WTF::fastFree(v64, v70, v71, v72, v73, v74, v75, v76);
  }
LABEL_65:
  if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v63 & 0xFFFFFFFF8, v70, v71, v72, v73, v74, v75, v76);
  if (v56)
  {
    v96 = v56 + 2;
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
    do
    {
      v99 = __ldaxr(v96);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v96));
    if (!v100)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
  }
  *(_BYTE *)(a2 + 212) = v125;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_13JSSetIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_13JSSetIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_13JSSetIteratorEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DFA710);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DFA730);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DFA750);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
    {
LABEL_74:
      __break(0xC471u);
      JUMPOUT(0x197DFA6D8);
    }
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (!v38)
    goto LABEL_32;
  v39 = v38 + 2;
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, v38 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    if (!v33)
      goto LABEL_37;
  }
  else
  {
LABEL_32:
    if (!v33)
      goto LABEL_37;
  }
  v42 = v33 + 2;
  do
  {
    v43 = __ldaxr(v42);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v42));
  if (!v44)
  {
    atomic_store(1u, v33 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
  }
LABEL_37:
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
    goto LABEL_74;
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSInternalPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSInternalPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSInternalPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSInternalPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSInternalPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSInternalPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  uint64_t v3;
  WTF *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  int i;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  const void *v78;
  void *v79;
  _BYTE *v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  __int128 v119;
  uint64_t v120;
  WTF *v121[2];
  WTF *v122;
  uint64_t v123;

  v122 = 0;
  v123 = 0;
  v3 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v3)
    goto LABEL_163;
  v7 = 0;
  v8 = 0;
  v9 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = 16 * v3;
  do
  {
    v11 = v9[8];
    switch(v11)
    {
      case 7:
        v12 = *v9 & 0x7F;
        v13 = 1;
        break;
      case 9:
        v12 = (*(_QWORD *)v9 << 32) | 0x1DLL;
        v13 = 2;
        break;
      case 11:
        v12 = *(_QWORD *)v9;
        v13 = 3;
        break;
      default:
        __break(0xC471u);
        goto LABEL_167;
    }
    v121[0] = (WTF *)v13;
    v121[1] = (WTF *)v12;
    if (v8 == (_DWORD)v123)
    {
      v15 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v122, v8 + 1, (unint64_t)v121);
      v14 = HIDWORD(v123);
      v7 = v122;
      *((_OWORD *)v122 + HIDWORD(v123)) = *v15;
    }
    else
    {
      *((_OWORD *)v7 + v8) = *(_OWORD *)v121;
      v14 = HIDWORD(v123);
    }
    v8 = v14 + 1;
    HIDWORD(v123) = v8;
    v9 += 16;
    v10 -= 16;
  }
  while (v10);
  if (!v8)
  {
LABEL_163:
    __break(0xC471u);
    JUMPOUT(0x197DFB284);
  }
  if (*((_DWORD *)v122 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197DFAEA8);
  }
  if (v8 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DFB28CLL);
  }
  if (*((_DWORD *)v122 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DFAEC8);
  }
  v119 = *(_OWORD *)(a1 + 16);
  v16 = *((_BYTE *)v122 + 8) & 0x7F;
  v17 = *((_BYTE *)v122 + 24) & 0x7F;
  v18 = *(_QWORD *)(a1 + 32);
  v26 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v26 + 8) = 1;
  v27 = (unsigned int *)(v26 + 8);
  *(_QWORD *)v26 = off_1E3576BE0;
  *(_OWORD *)(v26 + 16) = v119;
  *(_BYTE *)(v26 + 32) = v16;
  *(_BYTE *)(v26 + 33) = v17;
  *(_QWORD *)(v26 + 40) = v18;
  *(_BYTE *)(a2 + 328) = 1;
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v29 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
    v29 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = 335544320;
  v30 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v30;
  if (*(_BYTE *)(a2 + 328))
    v31 = 0xFF000F4500000000;
  else
    v31 = 0xFF000F4100000000;
  for (*(_BYTE *)(a2 + 328) = 0; v30 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v30)
  {
    if ((v30 + 4) > *(_DWORD *)(a2 + 192))
    {
      v83 = v31;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      v31 = v83;
      v30 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -721215457;
    v30 = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v32 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v33 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v34 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v34)
  {
    v35 = (_BYTE *)*((_QWORD *)a3 + 3);
    while (1)
    {
      v36 = *v35 & 0x7F;
      if (v36 >= 0x40)
        break;
      v37 = 1 << v36;
      v33 &= ~v37;
      v32 &= ~v37;
      ++v35;
      if (!--v34)
        goto LABEL_29;
    }
LABEL_166:
    __break(1u);
LABEL_167:
    JUMPOUT(0x197DFAE88);
  }
LABEL_29:
  v38 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v38)
  {
    v80 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v81 = (*v80 + 32) & 0x7F;
      if (v81 >= 0x40)
        goto LABEL_166;
      v82 = 1 << v81;
      v33 &= ~v82;
      v32 &= ~v82;
      ++v80;
    }
    while (--v38);
  }
  v117 = v31;
  v118 = (unsigned int *)v26;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), a3, (uint64_t *)v121);
  v40 = *(_QWORD *)(a1 + 48);
  v39 = *(_QWORD *)(a1 + 56);
  if ((v39 & 1) != 0)
  {
    v84 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v85 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v114 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v114 = v84;
      *(_DWORD *)(v114 + 8) = v85;
      v87 = 1;
      v84 = v114;
    }
    else
    {
      v87 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v39 = v84 | v87;
  }
  v41 = v121[0];
  if (v121[0])
  {
    do
      v42 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v42 + 1, (unsigned int *)v41));
  }
  do
    v43 = __ldaxr(v27);
  while (__stlxr(v43 + 1, v27));
  v44 = *((_QWORD *)a3 + 7);
  v45 = v39;
  v120 = v39;
  if ((v39 & 1) != 0)
  {
    v88 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v89 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
        ? (v90 = (_DWORD)v89 == -1)
        : (v90 = 1),
          v90))
    {
      v91 = 2;
    }
    else if (v89 >> 28)
    {
      v115 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v115 = v88;
      *(_DWORD *)(v115 + 8) = v89;
      v91 = 1;
      v88 = v115;
    }
    else
    {
      v91 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v88 = v89 << 36;
    }
    v45 = v88 | v91;
    if (v41)
      goto LABEL_36;
  }
  else if (v41)
  {
    do
LABEL_36:
      v46 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v46 + 1, (unsigned int *)v41));
    goto LABEL_37;
  }
  do
LABEL_37:
    v47 = __ldaxr(v27);
  while (__stlxr(v47 + 1, v27));
  v55 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v55 + 8) = 1;
  *(_QWORD *)v55 = &off_1E3577888;
  *(_DWORD *)(v55 + 16) = i;
  *(_QWORD *)(v55 + 20) = v117;
  *(_QWORD *)(v55 + 32) = v40;
  *(_DWORD *)(v55 + 40) = v30;
  v56 = v45;
  if ((v45 & 1) != 0)
  {
    v92 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
    if ((v45 & 2) != 0
      || ((v93 = *(unsigned int *)((v45 & 0xFFFFFFFF8) + 8), (_DWORD)v93 != 0x3FFFFFFF)
        ? (v94 = (_DWORD)v93 == -1)
        : (v94 = 1),
          v94))
    {
      v95 = 2;
    }
    else if (v93 >> 28)
    {
      v116 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v116 = v92;
      *(_DWORD *)(v116 + 8) = v93;
      v95 = 1;
      v92 = v116;
    }
    else
    {
      v95 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
      v92 = v93 << 36;
    }
    v56 = v92 | v95;
  }
  *(_QWORD *)(v55 + 48) = v56;
  if (v41)
  {
    do
      v57 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v57 + 1, (unsigned int *)v41));
  }
  *(_QWORD *)(v55 + 56) = v41;
  *(_QWORD *)(v55 + 64) = v33;
  *(_QWORD *)(v55 + 72) = v32;
  do
    v58 = __ldaxr(v27);
  while (__stlxr(v58 + 1, v27));
  *(_QWORD *)(v55 + 80) = v118;
  v59 = *(unsigned int *)(v44 + 12);
  if ((_DWORD)v59 == *(_DWORD *)(v44 + 8))
  {
    v75 = v59 + (v59 >> 2);
    if (v75 >= 0x10)
      v76 = v75 + 1;
    else
      v76 = 16;
    if (v76 <= v59 + 1)
      v77 = v59 + 1;
    else
      v77 = v76;
    if (v77 >> 29)
    {
      __break(0xC471u);
      goto LABEL_166;
    }
    v78 = *(const void **)v44;
    v79 = (void *)WTF::fastMalloc((WTF *)(8 * v77));
    *(_DWORD *)(v44 + 8) = v77;
    *(_QWORD *)v44 = v79;
    memcpy(v79, v78, 8 * v59);
    if (v78)
    {
      if (*(const void **)v44 == v78)
      {
        *(_QWORD *)v44 = 0;
        *(_DWORD *)(v44 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v78, v48, v49, v50, v51, v52, v53, v54);
    }
    v59 = *(unsigned int *)(v44 + 12);
    v60 = (uint64_t *)(*(_QWORD *)v44 + 8 * v59);
  }
  else
  {
    v60 = (uint64_t *)(*(_QWORD *)v44 + 8 * v59);
  }
  *v60 = v55;
  *(_DWORD *)(v44 + 12) = v59 + 1;
  do
  {
    v61 = __ldaxr(v27);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, v27));
  if (v62)
  {
    if (!v41)
      goto LABEL_51;
  }
  else
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
    if (!v41)
      goto LABEL_51;
  }
  do
  {
    v63 = __ldaxr((unsigned int *)v41);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, (unsigned int *)v41));
  if (!v64)
  {
    atomic_store(1u, (unsigned int *)v41);
    v96 = (unsigned int *)*((_QWORD *)v41 + 2);
    *((_QWORD *)v41 + 2) = 0;
    if (v96)
    {
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (!v98)
      {
        atomic_store(1u, v96);
        WTF::fastFree((unint64_t)v96, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    v99 = (unsigned int *)*((_QWORD *)v41 + 1);
    *((_QWORD *)v41 + 1) = 0;
    if (v99)
    {
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        atomic_store(1u, v99);
        WTF::fastFree((unint64_t)v99, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    WTF::fastFree((unint64_t)v41, v48, v49, v50, v51, v52, v53, v54);
  }
LABEL_51:
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  do
  {
    v65 = __ldaxr(v27);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, v27));
  v67 = v120;
  if (v66)
  {
    if (!v41)
      goto LABEL_57;
  }
  else
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
    v67 = v120;
    if (!v41)
      goto LABEL_57;
  }
  do
  {
    v68 = __ldaxr((unsigned int *)v41);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)v41));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)v41);
    v102 = (unsigned int *)*((_QWORD *)v41 + 2);
    *((_QWORD *)v41 + 2) = 0;
    if (v102)
    {
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        atomic_store(1u, v102);
        WTF::fastFree((unint64_t)v102, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    v105 = (unsigned int *)*((_QWORD *)v41 + 1);
    *((_QWORD *)v41 + 1) = 0;
    if (v105)
    {
      do
      {
        v106 = __ldaxr(v105);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v105));
      if (!v107)
      {
        atomic_store(1u, v105);
        WTF::fastFree((unint64_t)v105, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    WTF::fastFree((unint64_t)v41, v48, v49, v50, v51, v52, v53, v54);
    v67 = v120;
  }
LABEL_57:
  if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v67 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  v70 = v121[0];
  v121[0] = 0;
  if (v70)
  {
    do
    {
      v71 = __ldaxr((unsigned int *)v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, (unsigned int *)v70));
    if (!v72)
    {
      atomic_store(1u, (unsigned int *)v70);
      v108 = (unsigned int *)*((_QWORD *)v70 + 2);
      *((_QWORD *)v70 + 2) = 0;
      if (v108)
      {
        do
        {
          v109 = __ldaxr(v108);
          v110 = v109 - 1;
        }
        while (__stlxr(v110, v108));
        if (!v110)
        {
          atomic_store(1u, v108);
          WTF::fastFree((unint64_t)v108, v48, v49, v50, v51, v52, v53, v54);
        }
      }
      v111 = (unsigned int *)*((_QWORD *)v70 + 1);
      *((_QWORD *)v70 + 1) = 0;
      if (v111)
      {
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
        {
          atomic_store(1u, v111);
          WTF::fastFree((unint64_t)v111, v48, v49, v50, v51, v52, v53, v54);
        }
      }
      WTF::fastFree((unint64_t)v70, v48, v49, v50, v51, v52, v53, v54);
    }
  }
  do
  {
    v73 = __ldaxr(v27);
    v74 = v73 - 1;
  }
  while (__stlxr(v74, v27));
  if (!v74)
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
  }
  if (v122)
    WTF::fastFree((unint64_t)v122, v48, v49, v50, v51, v52, v53, v54);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_17JSInternalPromiseEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_17JSInternalPromiseEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_17JSInternalPromiseEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  const void *v89;
  void *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  JSC::ExecutableMemoryHandle *v126[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v23 = v20 + (v20 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v20 + 1)
      v25 = v20 + 1;
    else
      v25 = v24;
    if (v25 >> 29)
    {
      __break(0xC471u);
      goto LABEL_116;
    }
    v26 = *(const void **)(v19 + 296);
    v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(v19 + 304) = v25;
    *(_QWORD *)(v19 + 296) = v27;
    memcpy(v27, v26, 8 * v20);
    if (v26)
    {
      if (*(const void **)(v19 + 296) == v26)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v26, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v36 = *(_DWORD *)(a2 + 200);
  if (v36 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = -134216720;
  v37 = *(_DWORD *)(a2 + 200);
  v38 = v37 + 4;
  *(_DWORD *)(a2 + 200) = v37 + 4;
  if ((v37 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v38 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v39 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v39 + 90440), v39, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v31, v32, v33, v34, v35, v126);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v126[0], v40, v41, v42, v43, v44, v45);
  v53 = (unsigned int *)v126[1];
  v126[1] = 0;
  if (v53)
  {
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v56 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v125 = v11;
  if (v56)
  {
    v57 = v56 + 2;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
    do
      v62 = __ldaxr(v57);
    while (__stlxr(v62 + 1, v57));
  }
  else
  {
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
  }
  v63 = *(_QWORD *)(a1 + 48);
  if ((v63 & 1) != 0)
  {
    v101 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v102 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v123 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = v101;
      *(_DWORD *)(v123 + 8) = v102;
      v104 = 1;
      v101 = v123;
    }
    else
    {
      v104 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v63 = v101 | v104;
  }
  v64 = *(_QWORD *)(a1 + 56);
  if (v64)
  {
    do
      v65 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v65 + 1, (unsigned int *)v64));
  }
  *(_OWORD *)v126 = *(_OWORD *)(a1 + 64);
  v66 = *(unsigned int **)(a1 + 80);
  if (v66)
  {
    v67 = v66 + 2;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 + 1, v67));
  }
  v69 = WTF::fastMalloc((WTF *)0x58);
  v77 = v69;
  *(_DWORD *)(v69 + 8) = 1;
  *(_QWORD *)v69 = &off_1E35778B0;
  *(_DWORD *)(v69 + 16) = v59;
  *(_QWORD *)(v69 + 20) = v60;
  *(_DWORD *)(v69 + 28) = v61;
  if (v56)
  {
    v78 = v56 + 2;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
  }
  *(_QWORD *)(v69 + 32) = v56;
  v80 = v63;
  if ((v63 & 1) != 0)
  {
    v105 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v106 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v124 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v124 = v105;
      *(_DWORD *)(v124 + 8) = v106;
      v108 = 1;
      v105 = v124;
    }
    else
    {
      v108 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v80 = v105 | v108;
  }
  *(_QWORD *)(v77 + 40) = v80;
  if (v64)
  {
    do
      v81 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v81 + 1, (unsigned int *)v64));
  }
  *(_QWORD *)(v77 + 48) = v64;
  *(_OWORD *)(v77 + 56) = *(_OWORD *)v126;
  if (v66)
  {
    v82 = v66 + 2;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 + 1, v82));
  }
  *(_QWORD *)(v77 + 72) = v66;
  *(_DWORD *)(v77 + 80) = v20;
  v84 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v84 != *(_DWORD *)(a2 + 240))
  {
    v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
    goto LABEL_58;
  }
  v86 = v84 + (v84 >> 2);
  if (v86 >= 0x10)
    v87 = v86 + 1;
  else
    v87 = 16;
  if (v87 <= v84 + 1)
    v88 = v84 + 1;
  else
    v88 = v87;
  if (v88 >> 29)
  {
    __break(0xC471u);
LABEL_116:
    JUMPOUT(0x197DFBB00);
  }
  v89 = *(const void **)(a2 + 232);
  v90 = (void *)WTF::fastMalloc((WTF *)(8 * v88));
  *(_DWORD *)(a2 + 240) = v88;
  *(_QWORD *)(a2 + 232) = v90;
  memcpy(v90, v89, 8 * v84);
  if (v89)
  {
    if (*(const void **)(a2 + 232) == v89)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v89, v70, v71, v72, v73, v74, v75, v76);
  }
  v84 = *(unsigned int *)(a2 + 244);
  v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
LABEL_58:
  *v85 = v77;
  *(_DWORD *)(a2 + 244) = v84 + 1;
  if (!v66)
    goto LABEL_62;
  v91 = v66 + 2;
  do
  {
    v92 = __ldaxr(v91);
    v93 = v92 - 1;
  }
  while (__stlxr(v93, v91));
  if (!v93)
  {
    atomic_store(1u, v66 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
    if (!v64)
      goto LABEL_65;
  }
  else
  {
LABEL_62:
    if (!v64)
      goto LABEL_65;
  }
  do
  {
    v94 = __ldaxr((unsigned int *)v64);
    v95 = v94 - 1;
  }
  while (__stlxr(v95, (unsigned int *)v64));
  if (!v95)
  {
    atomic_store(1u, (unsigned int *)v64);
    v117 = *(unsigned int **)(v64 + 16);
    *(_QWORD *)(v64 + 16) = 0;
    if (v117)
    {
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
      {
        atomic_store(1u, v117);
        WTF::fastFree((unint64_t)v117, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    v120 = *(unsigned int **)(v64 + 8);
    *(_QWORD *)(v64 + 8) = 0;
    if (v120)
    {
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        atomic_store(1u, v120);
        WTF::fastFree((unint64_t)v120, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    WTF::fastFree(v64, v70, v71, v72, v73, v74, v75, v76);
  }
LABEL_65:
  if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v63 & 0xFFFFFFFF8, v70, v71, v72, v73, v74, v75, v76);
  if (v56)
  {
    v96 = v56 + 2;
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
    do
    {
      v99 = __ldaxr(v96);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v96));
    if (!v100)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
  }
  *(_BYTE *)(a2 + 212) = v125;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_17JSInternalPromiseEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_17JSInternalPromiseEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_17JSInternalPromiseEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DFC0B4);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DFC0D4);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DFC0F4);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
    {
LABEL_74:
      __break(0xC471u);
      JUMPOUT(0x197DFC07CLL);
    }
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (!v38)
    goto LABEL_32;
  v39 = v38 + 2;
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, v38 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    if (!v33)
      goto LABEL_37;
  }
  else
  {
LABEL_32:
    if (!v33)
      goto LABEL_37;
  }
  v42 = v33 + 2;
  do
  {
    v43 = __ldaxr(v42);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v42));
  if (!v44)
  {
    atomic_store(1u, v33 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
  }
LABEL_37:
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
    goto LABEL_74;
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl<JSC::JSPromise,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *)>(JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *))::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  uint64_t v3;
  WTF *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  int i;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  const void *v78;
  void *v79;
  _BYTE *v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int *v118;
  __int128 v119;
  uint64_t v120;
  WTF *v121[2];
  WTF *v122;
  uint64_t v123;

  v122 = 0;
  v123 = 0;
  v3 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v3)
    goto LABEL_163;
  v7 = 0;
  v8 = 0;
  v9 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = 16 * v3;
  do
  {
    v11 = v9[8];
    switch(v11)
    {
      case 7:
        v12 = *v9 & 0x7F;
        v13 = 1;
        break;
      case 9:
        v12 = (*(_QWORD *)v9 << 32) | 0x1DLL;
        v13 = 2;
        break;
      case 11:
        v12 = *(_QWORD *)v9;
        v13 = 3;
        break;
      default:
        __break(0xC471u);
        goto LABEL_167;
    }
    v121[0] = (WTF *)v13;
    v121[1] = (WTF *)v12;
    if (v8 == (_DWORD)v123)
    {
      v15 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v122, v8 + 1, (unint64_t)v121);
      v14 = HIDWORD(v123);
      v7 = v122;
      *((_OWORD *)v122 + HIDWORD(v123)) = *v15;
    }
    else
    {
      *((_OWORD *)v7 + v8) = *(_OWORD *)v121;
      v14 = HIDWORD(v123);
    }
    v8 = v14 + 1;
    HIDWORD(v123) = v8;
    v9 += 16;
    v10 -= 16;
  }
  while (v10);
  if (!v8)
  {
LABEL_163:
    __break(0xC471u);
    JUMPOUT(0x197DFCC28);
  }
  if (*((_DWORD *)v122 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197DFC84CLL);
  }
  if (v8 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DFCC30);
  }
  if (*((_DWORD *)v122 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DFC86CLL);
  }
  v119 = *(_OWORD *)(a1 + 16);
  v16 = *((_BYTE *)v122 + 8) & 0x7F;
  v17 = *((_BYTE *)v122 + 24) & 0x7F;
  v18 = *(_QWORD *)(a1 + 32);
  v26 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v26 + 8) = 1;
  v27 = (unsigned int *)(v26 + 8);
  *(_QWORD *)v26 = off_1E3576BE0;
  *(_OWORD *)(v26 + 16) = v119;
  *(_BYTE *)(v26 + 32) = v16;
  *(_BYTE *)(v26 + 33) = v17;
  *(_QWORD *)(v26 + 40) = v18;
  *(_BYTE *)(a2 + 328) = 1;
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v29 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
    v29 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = 335544320;
  v30 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v30;
  if (*(_BYTE *)(a2 + 328))
    v31 = 0xFF000F4500000000;
  else
    v31 = 0xFF000F4100000000;
  for (*(_BYTE *)(a2 + 328) = 0; v30 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v30)
  {
    if ((v30 + 4) > *(_DWORD *)(a2 + 192))
    {
      v83 = v31;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      v31 = v83;
      v30 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -721215457;
    v30 = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v32 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v33 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v34 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v34)
  {
    v35 = (_BYTE *)*((_QWORD *)a3 + 3);
    while (1)
    {
      v36 = *v35 & 0x7F;
      if (v36 >= 0x40)
        break;
      v37 = 1 << v36;
      v33 &= ~v37;
      v32 &= ~v37;
      ++v35;
      if (!--v34)
        goto LABEL_29;
    }
LABEL_166:
    __break(1u);
LABEL_167:
    JUMPOUT(0x197DFC82CLL);
  }
LABEL_29:
  v38 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v38)
  {
    v80 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v81 = (*v80 + 32) & 0x7F;
      if (v81 >= 0x40)
        goto LABEL_166;
      v82 = 1 << v81;
      v33 &= ~v82;
      v32 &= ~v82;
      ++v80;
    }
    while (--v38);
  }
  v117 = v31;
  v118 = (unsigned int *)v26;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), a3, (uint64_t *)v121);
  v40 = *(_QWORD *)(a1 + 48);
  v39 = *(_QWORD *)(a1 + 56);
  if ((v39 & 1) != 0)
  {
    v84 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v85 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v114 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v114 = v84;
      *(_DWORD *)(v114 + 8) = v85;
      v87 = 1;
      v84 = v114;
    }
    else
    {
      v87 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v39 = v84 | v87;
  }
  v41 = v121[0];
  if (v121[0])
  {
    do
      v42 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v42 + 1, (unsigned int *)v41));
  }
  do
    v43 = __ldaxr(v27);
  while (__stlxr(v43 + 1, v27));
  v44 = *((_QWORD *)a3 + 7);
  v45 = v39;
  v120 = v39;
  if ((v39 & 1) != 0)
  {
    v88 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v89 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
        ? (v90 = (_DWORD)v89 == -1)
        : (v90 = 1),
          v90))
    {
      v91 = 2;
    }
    else if (v89 >> 28)
    {
      v115 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v115 = v88;
      *(_DWORD *)(v115 + 8) = v89;
      v91 = 1;
      v88 = v115;
    }
    else
    {
      v91 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v88 = v89 << 36;
    }
    v45 = v88 | v91;
    if (v41)
      goto LABEL_36;
  }
  else if (v41)
  {
    do
LABEL_36:
      v46 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v46 + 1, (unsigned int *)v41));
    goto LABEL_37;
  }
  do
LABEL_37:
    v47 = __ldaxr(v27);
  while (__stlxr(v47 + 1, v27));
  v55 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v55 + 8) = 1;
  *(_QWORD *)v55 = &off_1E3577900;
  *(_DWORD *)(v55 + 16) = i;
  *(_QWORD *)(v55 + 20) = v117;
  *(_QWORD *)(v55 + 32) = v40;
  *(_DWORD *)(v55 + 40) = v30;
  v56 = v45;
  if ((v45 & 1) != 0)
  {
    v92 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
    if ((v45 & 2) != 0
      || ((v93 = *(unsigned int *)((v45 & 0xFFFFFFFF8) + 8), (_DWORD)v93 != 0x3FFFFFFF)
        ? (v94 = (_DWORD)v93 == -1)
        : (v94 = 1),
          v94))
    {
      v95 = 2;
    }
    else if (v93 >> 28)
    {
      v116 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v116 = v92;
      *(_DWORD *)(v116 + 8) = v93;
      v95 = 1;
      v92 = v116;
    }
    else
    {
      v95 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
      v92 = v93 << 36;
    }
    v56 = v92 | v95;
  }
  *(_QWORD *)(v55 + 48) = v56;
  if (v41)
  {
    do
      v57 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v57 + 1, (unsigned int *)v41));
  }
  *(_QWORD *)(v55 + 56) = v41;
  *(_QWORD *)(v55 + 64) = v33;
  *(_QWORD *)(v55 + 72) = v32;
  do
    v58 = __ldaxr(v27);
  while (__stlxr(v58 + 1, v27));
  *(_QWORD *)(v55 + 80) = v118;
  v59 = *(unsigned int *)(v44 + 12);
  if ((_DWORD)v59 == *(_DWORD *)(v44 + 8))
  {
    v75 = v59 + (v59 >> 2);
    if (v75 >= 0x10)
      v76 = v75 + 1;
    else
      v76 = 16;
    if (v76 <= v59 + 1)
      v77 = v59 + 1;
    else
      v77 = v76;
    if (v77 >> 29)
    {
      __break(0xC471u);
      goto LABEL_166;
    }
    v78 = *(const void **)v44;
    v79 = (void *)WTF::fastMalloc((WTF *)(8 * v77));
    *(_DWORD *)(v44 + 8) = v77;
    *(_QWORD *)v44 = v79;
    memcpy(v79, v78, 8 * v59);
    if (v78)
    {
      if (*(const void **)v44 == v78)
      {
        *(_QWORD *)v44 = 0;
        *(_DWORD *)(v44 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v78, v48, v49, v50, v51, v52, v53, v54);
    }
    v59 = *(unsigned int *)(v44 + 12);
    v60 = (uint64_t *)(*(_QWORD *)v44 + 8 * v59);
  }
  else
  {
    v60 = (uint64_t *)(*(_QWORD *)v44 + 8 * v59);
  }
  *v60 = v55;
  *(_DWORD *)(v44 + 12) = v59 + 1;
  do
  {
    v61 = __ldaxr(v27);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, v27));
  if (v62)
  {
    if (!v41)
      goto LABEL_51;
  }
  else
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
    if (!v41)
      goto LABEL_51;
  }
  do
  {
    v63 = __ldaxr((unsigned int *)v41);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, (unsigned int *)v41));
  if (!v64)
  {
    atomic_store(1u, (unsigned int *)v41);
    v96 = (unsigned int *)*((_QWORD *)v41 + 2);
    *((_QWORD *)v41 + 2) = 0;
    if (v96)
    {
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (!v98)
      {
        atomic_store(1u, v96);
        WTF::fastFree((unint64_t)v96, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    v99 = (unsigned int *)*((_QWORD *)v41 + 1);
    *((_QWORD *)v41 + 1) = 0;
    if (v99)
    {
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        atomic_store(1u, v99);
        WTF::fastFree((unint64_t)v99, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    WTF::fastFree((unint64_t)v41, v48, v49, v50, v51, v52, v53, v54);
  }
LABEL_51:
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  do
  {
    v65 = __ldaxr(v27);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, v27));
  v67 = v120;
  if (v66)
  {
    if (!v41)
      goto LABEL_57;
  }
  else
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
    v67 = v120;
    if (!v41)
      goto LABEL_57;
  }
  do
  {
    v68 = __ldaxr((unsigned int *)v41);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)v41));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)v41);
    v102 = (unsigned int *)*((_QWORD *)v41 + 2);
    *((_QWORD *)v41 + 2) = 0;
    if (v102)
    {
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        atomic_store(1u, v102);
        WTF::fastFree((unint64_t)v102, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    v105 = (unsigned int *)*((_QWORD *)v41 + 1);
    *((_QWORD *)v41 + 1) = 0;
    if (v105)
    {
      do
      {
        v106 = __ldaxr(v105);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v105));
      if (!v107)
      {
        atomic_store(1u, v105);
        WTF::fastFree((unint64_t)v105, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    WTF::fastFree((unint64_t)v41, v48, v49, v50, v51, v52, v53, v54);
    v67 = v120;
  }
LABEL_57:
  if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v67 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  v70 = v121[0];
  v121[0] = 0;
  if (v70)
  {
    do
    {
      v71 = __ldaxr((unsigned int *)v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, (unsigned int *)v70));
    if (!v72)
    {
      atomic_store(1u, (unsigned int *)v70);
      v108 = (unsigned int *)*((_QWORD *)v70 + 2);
      *((_QWORD *)v70 + 2) = 0;
      if (v108)
      {
        do
        {
          v109 = __ldaxr(v108);
          v110 = v109 - 1;
        }
        while (__stlxr(v110, v108));
        if (!v110)
        {
          atomic_store(1u, v108);
          WTF::fastFree((unint64_t)v108, v48, v49, v50, v51, v52, v53, v54);
        }
      }
      v111 = (unsigned int *)*((_QWORD *)v70 + 1);
      *((_QWORD *)v70 + 1) = 0;
      if (v111)
      {
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
        {
          atomic_store(1u, v111);
          WTF::fastFree((unint64_t)v111, v48, v49, v50, v51, v52, v53, v54);
        }
      }
      WTF::fastFree((unint64_t)v70, v48, v49, v50, v51, v52, v53, v54);
    }
  }
  do
  {
    v73 = __ldaxr(v27);
    v74 = v73 - 1;
  }
  while (__stlxr(v74, v27));
  if (!v74)
  {
    atomic_store(1u, v118 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
  }
  if (v122)
    WTF::fastFree((unint64_t)v122, v48, v49, v50, v51, v52, v53, v54);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_9JSPromiseEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_9JSPromiseEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_44compileMaterializeNewInternalFieldObjectImplINS1_9JSPromiseEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSS_IPNS4_5ValueELm0ESU_Lm16ESV_EEENKUlS3_RKS9_E_clES3_S1B_EUlS3_E_EEvS14_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  const void *v89;
  void *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  JSC::ExecutableMemoryHandle *v126[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v23 = v20 + (v20 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v20 + 1)
      v25 = v20 + 1;
    else
      v25 = v24;
    if (v25 >> 29)
    {
      __break(0xC471u);
      goto LABEL_116;
    }
    v26 = *(const void **)(v19 + 296);
    v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(v19 + 304) = v25;
    *(_QWORD *)(v19 + 296) = v27;
    memcpy(v27, v26, 8 * v20);
    if (v26)
    {
      if (*(const void **)(v19 + 296) == v26)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v26, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v36 = *(_DWORD *)(a2 + 200);
  if (v36 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = -134216720;
  v37 = *(_DWORD *)(a2 + 200);
  v38 = v37 + 4;
  *(_DWORD *)(a2 + 200) = v37 + 4;
  if ((v37 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v38 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v39 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v39 + 90440), v39, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v31, v32, v33, v34, v35, v126);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v126[0], v40, v41, v42, v43, v44, v45);
  v53 = (unsigned int *)v126[1];
  v126[1] = 0;
  if (v53)
  {
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v56 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v125 = v11;
  if (v56)
  {
    v57 = v56 + 2;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
    do
      v62 = __ldaxr(v57);
    while (__stlxr(v62 + 1, v57));
  }
  else
  {
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
  }
  v63 = *(_QWORD *)(a1 + 48);
  if ((v63 & 1) != 0)
  {
    v101 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v102 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v123 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = v101;
      *(_DWORD *)(v123 + 8) = v102;
      v104 = 1;
      v101 = v123;
    }
    else
    {
      v104 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v63 = v101 | v104;
  }
  v64 = *(_QWORD *)(a1 + 56);
  if (v64)
  {
    do
      v65 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v65 + 1, (unsigned int *)v64));
  }
  *(_OWORD *)v126 = *(_OWORD *)(a1 + 64);
  v66 = *(unsigned int **)(a1 + 80);
  if (v66)
  {
    v67 = v66 + 2;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 + 1, v67));
  }
  v69 = WTF::fastMalloc((WTF *)0x58);
  v77 = v69;
  *(_DWORD *)(v69 + 8) = 1;
  *(_QWORD *)v69 = &off_1E3577928;
  *(_DWORD *)(v69 + 16) = v59;
  *(_QWORD *)(v69 + 20) = v60;
  *(_DWORD *)(v69 + 28) = v61;
  if (v56)
  {
    v78 = v56 + 2;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
  }
  *(_QWORD *)(v69 + 32) = v56;
  v80 = v63;
  if ((v63 & 1) != 0)
  {
    v105 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v106 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v124 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v124 = v105;
      *(_DWORD *)(v124 + 8) = v106;
      v108 = 1;
      v105 = v124;
    }
    else
    {
      v108 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v80 = v105 | v108;
  }
  *(_QWORD *)(v77 + 40) = v80;
  if (v64)
  {
    do
      v81 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v81 + 1, (unsigned int *)v64));
  }
  *(_QWORD *)(v77 + 48) = v64;
  *(_OWORD *)(v77 + 56) = *(_OWORD *)v126;
  if (v66)
  {
    v82 = v66 + 2;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 + 1, v82));
  }
  *(_QWORD *)(v77 + 72) = v66;
  *(_DWORD *)(v77 + 80) = v20;
  v84 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v84 != *(_DWORD *)(a2 + 240))
  {
    v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
    goto LABEL_58;
  }
  v86 = v84 + (v84 >> 2);
  if (v86 >= 0x10)
    v87 = v86 + 1;
  else
    v87 = 16;
  if (v87 <= v84 + 1)
    v88 = v84 + 1;
  else
    v88 = v87;
  if (v88 >> 29)
  {
    __break(0xC471u);
LABEL_116:
    JUMPOUT(0x197DFD4A4);
  }
  v89 = *(const void **)(a2 + 232);
  v90 = (void *)WTF::fastMalloc((WTF *)(8 * v88));
  *(_DWORD *)(a2 + 240) = v88;
  *(_QWORD *)(a2 + 232) = v90;
  memcpy(v90, v89, 8 * v84);
  if (v89)
  {
    if (*(const void **)(a2 + 232) == v89)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v89, v70, v71, v72, v73, v74, v75, v76);
  }
  v84 = *(unsigned int *)(a2 + 244);
  v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
LABEL_58:
  *v85 = v77;
  *(_DWORD *)(a2 + 244) = v84 + 1;
  if (!v66)
    goto LABEL_62;
  v91 = v66 + 2;
  do
  {
    v92 = __ldaxr(v91);
    v93 = v92 - 1;
  }
  while (__stlxr(v93, v91));
  if (!v93)
  {
    atomic_store(1u, v66 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
    if (!v64)
      goto LABEL_65;
  }
  else
  {
LABEL_62:
    if (!v64)
      goto LABEL_65;
  }
  do
  {
    v94 = __ldaxr((unsigned int *)v64);
    v95 = v94 - 1;
  }
  while (__stlxr(v95, (unsigned int *)v64));
  if (!v95)
  {
    atomic_store(1u, (unsigned int *)v64);
    v117 = *(unsigned int **)(v64 + 16);
    *(_QWORD *)(v64 + 16) = 0;
    if (v117)
    {
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
      {
        atomic_store(1u, v117);
        WTF::fastFree((unint64_t)v117, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    v120 = *(unsigned int **)(v64 + 8);
    *(_QWORD *)(v64 + 8) = 0;
    if (v120)
    {
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        atomic_store(1u, v120);
        WTF::fastFree((unint64_t)v120, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    WTF::fastFree(v64, v70, v71, v72, v73, v74, v75, v76);
  }
LABEL_65:
  if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v63 & 0xFFFFFFFF8, v70, v71, v72, v73, v74, v75, v76);
  if (v56)
  {
    v96 = v56 + 2;
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
    do
    {
      v99 = __ldaxr(v96);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v96));
    if (!v100)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
  }
  *(_BYTE *)(a2 + 212) = v125;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_9JSPromiseEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_9JSPromiseEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_44compileMaterializeNewInternalFieldObjectImplINS1_9JSPromiseEPFNS1_24ExceptionOperationResultIPNS1_6JSCellEEEPNS1_2VMEPNS1_9StructureEEEEvT0_EUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNSM_IPNSU_5ValueELm0ESO_Lm16ESP_EEENKUlRNS1_12CCallHelpersERKNSU_24StackmapGenerationParamsEE_clES16_S19_ENKUlS16_E_clES16_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DFDA58);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DFDA78);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DFDA98);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
    {
LABEL_74:
      __break(0xC471u);
      JUMPOUT(0x197DFDA20);
    }
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (!v38)
    goto LABEL_32;
  v39 = v38 + 2;
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, v38 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    if (!v33)
      goto LABEL_37;
  }
  else
  {
LABEL_32:
    if (!v33)
      goto LABEL_37;
  }
  v42 = v33 + 2;
  do
  {
    v43 = __ldaxr(v42);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v42));
  if (!v44)
  {
    atomic_store(1u, v33 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
  }
LABEL_37:
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
    goto LABEL_74;
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckTraps(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckTraps(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckTraps(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckTraps(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckTraps(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckTraps(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  uint64_t v6;
  WTF *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t i;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  int j;
  unsigned int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  WTF *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  const void *v77;
  void *v78;
  _BYTE *v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  WTF *v119[2];
  WTF *v120;
  uint64_t v121;

  v120 = 0;
  v121 = 0;
  v6 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (_BYTE *)*((_QWORD *)a3 + 1);
    for (i = 16 * v6; i; i -= 16)
    {
      v11 = v9[8];
      switch(v11)
      {
        case 7:
          v12 = *v9 & 0x7F;
          v13 = 1;
          break;
        case 9:
          v12 = (*(_QWORD *)v9 << 32) | 0x1DLL;
          v13 = 2;
          break;
        case 11:
          v12 = *(_QWORD *)v9;
          v13 = 3;
          break;
        default:
          __break(0xC471u);
          goto LABEL_159;
      }
      v119[0] = (WTF *)v13;
      v119[1] = (WTF *)v12;
      if (v8 == (_DWORD)v121)
      {
        v15 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v120, v8 + 1, (unint64_t)v119);
        v14 = HIDWORD(v121);
        v7 = v120;
        *((_OWORD *)v120 + HIDWORD(v121)) = *v15;
      }
      else
      {
        *((_OWORD *)v7 + v8) = *(_OWORD *)v119;
        v14 = HIDWORD(v121);
      }
      v8 = v14 + 1;
      HIDWORD(v121) = v8;
      v9 += 16;
    }
  }
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v25 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v25 + 8) = 1;
  v26 = (unsigned int *)(v25 + 8);
  *(_QWORD *)v25 = off_1E3577978;
  *(_QWORD *)(v25 + 16) = v16;
  *(_QWORD *)(v25 + 24) = operationHandleTraps;
  *(_BYTE *)(v25 + 32) = -1;
  *(_QWORD *)(v25 + 40) = v17;
  *(_BYTE *)(a2 + 328) = 1;
  for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v18, v19, v20, v21, v22, v23, v24);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v28 = j;
  if ((j + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v18, v19, v20, v21, v22, v23, v24);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = 335544320;
  v29 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v29;
  if (*(_BYTE *)(a2 + 328))
    v30 = 0xFF000F4500000000;
  else
    v30 = 0xFF000F4100000000;
  for (*(_BYTE *)(a2 + 328) = 0; v29 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v29)
  {
    if ((v29 + 4) > *(_DWORD *)(a2 + 192))
    {
      v82 = v30;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v18, v19, v20, v21, v22, v23, v24);
      v30 = v82;
      v29 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = -721215457;
    v29 = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v31 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v32 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v33 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v33)
  {
    v34 = (_BYTE *)*((_QWORD *)a3 + 3);
    do
    {
      v35 = *v34 & 0x7F;
      if (v35 >= 0x40)
        goto LABEL_158;
      v36 = 1 << v35;
      v32 &= ~v36;
      v31 &= ~v36;
      ++v34;
    }
    while (--v33);
  }
  v37 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v37)
  {
    v79 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v80 = (*v79 + 32) & 0x7F;
      if (v80 >= 0x40)
        goto LABEL_158;
      v81 = 1 << v80;
      v32 &= ~v81;
      v31 &= ~v81;
      ++v79;
    }
    while (--v37);
  }
  v116 = v30;
  v117 = (unsigned int *)v25;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), a3, (uint64_t *)v119);
  v39 = *(_QWORD *)(a1 + 40);
  v38 = *(_QWORD *)(a1 + 48);
  if ((v38 & 1) != 0)
  {
    v83 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
    if ((v38 & 2) != 0
      || ((v84 = *(unsigned int *)((v38 & 0xFFFFFFFF8) + 8), (_DWORD)v84 != 0x3FFFFFFF)
        ? (v85 = (_DWORD)v84 == -1)
        : (v85 = 1),
          v85))
    {
      v86 = 2;
    }
    else if (v84 >> 28)
    {
      v113 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v113 = v83;
      *(_DWORD *)(v113 + 8) = v84;
      v86 = 1;
      v83 = v113;
    }
    else
    {
      v86 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
      v83 = v84 << 36;
    }
    v38 = v83 | v86;
  }
  v40 = v119[0];
  if (v119[0])
  {
    do
      v41 = __ldaxr((unsigned int *)v40);
    while (__stlxr(v41 + 1, (unsigned int *)v40));
  }
  do
    v42 = __ldaxr(v26);
  while (__stlxr(v42 + 1, v26));
  v43 = *((_QWORD *)a3 + 7);
  v44 = v38;
  v118 = v38;
  if ((v38 & 1) != 0)
  {
    v87 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
    if ((v38 & 2) != 0
      || ((v88 = *(unsigned int *)((v38 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
        ? (v89 = (_DWORD)v88 == -1)
        : (v89 = 1),
          v89))
    {
      v90 = 2;
    }
    else if (v88 >> 28)
    {
      v114 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v114 = v87;
      *(_DWORD *)(v114 + 8) = v88;
      v90 = 1;
      v87 = v114;
    }
    else
    {
      v90 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
      v87 = v88 << 36;
    }
    v44 = v87 | v90;
    if (v40)
      goto LABEL_32;
  }
  else if (v40)
  {
    do
LABEL_32:
      v45 = __ldaxr((unsigned int *)v40);
    while (__stlxr(v45 + 1, (unsigned int *)v40));
    goto LABEL_33;
  }
  do
LABEL_33:
    v46 = __ldaxr(v26);
  while (__stlxr(v46 + 1, v26));
  v54 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v54 + 8) = 1;
  *(_QWORD *)v54 = &off_1E35779A0;
  *(_DWORD *)(v54 + 16) = j;
  *(_QWORD *)(v54 + 20) = v116;
  *(_QWORD *)(v54 + 32) = v39;
  *(_DWORD *)(v54 + 40) = v29;
  v55 = v44;
  if ((v44 & 1) != 0)
  {
    v91 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
    if ((v44 & 2) != 0
      || ((v92 = *(unsigned int *)((v44 & 0xFFFFFFFF8) + 8), (_DWORD)v92 != 0x3FFFFFFF)
        ? (v93 = (_DWORD)v92 == -1)
        : (v93 = 1),
          v93))
    {
      v94 = 2;
    }
    else if (v92 >> 28)
    {
      v115 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v115 = v91;
      *(_DWORD *)(v115 + 8) = v92;
      v94 = 1;
      v91 = v115;
    }
    else
    {
      v94 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
      v91 = v92 << 36;
    }
    v55 = v91 | v94;
  }
  *(_QWORD *)(v54 + 48) = v55;
  if (v40)
  {
    do
      v56 = __ldaxr((unsigned int *)v40);
    while (__stlxr(v56 + 1, (unsigned int *)v40));
  }
  *(_QWORD *)(v54 + 56) = v40;
  *(_QWORD *)(v54 + 64) = v32;
  *(_QWORD *)(v54 + 72) = v31;
  do
    v57 = __ldaxr(v26);
  while (__stlxr(v57 + 1, v26));
  *(_QWORD *)(v54 + 80) = v117;
  v58 = *(unsigned int *)(v43 + 12);
  if ((_DWORD)v58 != *(_DWORD *)(v43 + 8))
  {
    v59 = (uint64_t *)(*(_QWORD *)v43 + 8 * v58);
    goto LABEL_41;
  }
  v74 = v58 + (v58 >> 2);
  if (v74 >= 0x10)
    v75 = v74 + 1;
  else
    v75 = 16;
  if (v75 <= v58 + 1)
    v76 = v58 + 1;
  else
    v76 = v75;
  if (v76 >> 29)
  {
    __break(0xC471u);
LABEL_158:
    __break(1u);
LABEL_159:
    JUMPOUT(0x197DFE19CLL);
  }
  v77 = *(const void **)v43;
  v78 = (void *)WTF::fastMalloc((WTF *)(8 * v76));
  *(_DWORD *)(v43 + 8) = v76;
  *(_QWORD *)v43 = v78;
  memcpy(v78, v77, 8 * v58);
  if (v77)
  {
    if (*(const void **)v43 == v77)
    {
      *(_QWORD *)v43 = 0;
      *(_DWORD *)(v43 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v77, v47, v48, v49, v50, v51, v52, v53);
  }
  v58 = *(unsigned int *)(v43 + 12);
  v59 = (uint64_t *)(*(_QWORD *)v43 + 8 * v58);
LABEL_41:
  *v59 = v54;
  *(_DWORD *)(v43 + 12) = v58 + 1;
  do
  {
    v60 = __ldaxr(v26);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, v26));
  if (v61)
  {
    if (!v40)
      goto LABEL_47;
  }
  else
  {
    atomic_store(1u, v117 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v117 + 8))(v117);
    if (!v40)
      goto LABEL_47;
  }
  do
  {
    v62 = __ldaxr((unsigned int *)v40);
    v63 = v62 - 1;
  }
  while (__stlxr(v63, (unsigned int *)v40));
  if (!v63)
  {
    atomic_store(1u, (unsigned int *)v40);
    v95 = (unsigned int *)*((_QWORD *)v40 + 2);
    *((_QWORD *)v40 + 2) = 0;
    if (v95)
    {
      do
      {
        v96 = __ldaxr(v95);
        v97 = v96 - 1;
      }
      while (__stlxr(v97, v95));
      if (!v97)
      {
        atomic_store(1u, v95);
        WTF::fastFree((unint64_t)v95, v47, v48, v49, v50, v51, v52, v53);
      }
    }
    v98 = (unsigned int *)*((_QWORD *)v40 + 1);
    *((_QWORD *)v40 + 1) = 0;
    if (v98)
    {
      do
      {
        v99 = __ldaxr(v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, v98));
      if (!v100)
      {
        atomic_store(1u, v98);
        WTF::fastFree((unint64_t)v98, v47, v48, v49, v50, v51, v52, v53);
      }
    }
    WTF::fastFree((unint64_t)v40, v47, v48, v49, v50, v51, v52, v53);
  }
LABEL_47:
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
  do
  {
    v64 = __ldaxr(v26);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, v26));
  v66 = v118;
  if (v65)
  {
    if (!v40)
      goto LABEL_53;
  }
  else
  {
    atomic_store(1u, v117 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v117 + 8))(v117);
    v66 = v118;
    if (!v40)
      goto LABEL_53;
  }
  do
  {
    v67 = __ldaxr((unsigned int *)v40);
    v68 = v67 - 1;
  }
  while (__stlxr(v68, (unsigned int *)v40));
  if (!v68)
  {
    atomic_store(1u, (unsigned int *)v40);
    v101 = (unsigned int *)*((_QWORD *)v40 + 2);
    *((_QWORD *)v40 + 2) = 0;
    if (v101)
    {
      do
      {
        v102 = __ldaxr(v101);
        v103 = v102 - 1;
      }
      while (__stlxr(v103, v101));
      if (!v103)
      {
        atomic_store(1u, v101);
        WTF::fastFree((unint64_t)v101, v47, v48, v49, v50, v51, v52, v53);
      }
    }
    v104 = (unsigned int *)*((_QWORD *)v40 + 1);
    *((_QWORD *)v40 + 1) = 0;
    if (v104)
    {
      do
      {
        v105 = __ldaxr(v104);
        v106 = v105 - 1;
      }
      while (__stlxr(v106, v104));
      if (!v106)
      {
        atomic_store(1u, v104);
        WTF::fastFree((unint64_t)v104, v47, v48, v49, v50, v51, v52, v53);
      }
    }
    WTF::fastFree((unint64_t)v40, v47, v48, v49, v50, v51, v52, v53);
    v66 = v118;
  }
LABEL_53:
  if ((v66 & 1) != 0 && (v66 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v66 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
  v69 = v119[0];
  v119[0] = 0;
  if (v69)
  {
    do
    {
      v70 = __ldaxr((unsigned int *)v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, (unsigned int *)v69));
    if (!v71)
    {
      atomic_store(1u, (unsigned int *)v69);
      v107 = (unsigned int *)*((_QWORD *)v69 + 2);
      *((_QWORD *)v69 + 2) = 0;
      if (v107)
      {
        do
        {
          v108 = __ldaxr(v107);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v107));
        if (!v109)
        {
          atomic_store(1u, v107);
          WTF::fastFree((unint64_t)v107, v47, v48, v49, v50, v51, v52, v53);
        }
      }
      v110 = (unsigned int *)*((_QWORD *)v69 + 1);
      *((_QWORD *)v69 + 1) = 0;
      if (v110)
      {
        do
        {
          v111 = __ldaxr(v110);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v110));
        if (!v112)
        {
          atomic_store(1u, v110);
          WTF::fastFree((unint64_t)v110, v47, v48, v49, v50, v51, v52, v53);
        }
      }
      WTF::fastFree((unint64_t)v69, v47, v48, v49, v50, v51, v52, v53);
    }
  }
  do
  {
    v72 = __ldaxr(v26);
    v73 = v72 - 1;
  }
  while (__stlxr(v73, v26));
  if (!v73)
  {
    atomic_store(1u, v117 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v117 + 8))(v117);
  }
  if (v120)
    WTF::fastFree((unint64_t)v120, v47, v48, v49, v50, v51, v52, v53);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x8_t v47;
  int v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  int i;
  unsigned int v55;
  char v56;
  uint64_t v57;
  int *v58;
  int *v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  char v64;
  __int16 v65;
  char v66;
  int v67;
  uint64_t v68;
  _BYTE v69[32];
  _QWORD v70[8];

  v10 = *(_QWORD *)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DFE818);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
    v22 = *(_DWORD *)(a2 + 200);
    if (v22 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v17, v18, v19, v20, v21, a7, a8);
      v22 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v22) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v70, *(_QWORD *)(v11 + 24), a2, 2u, v15, 0xFFFFFFFFLL, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v16, 0, v23, v24, v25, v26, v27);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v70, v13, v14, v28, v29, v30, v31, v32, (uint64_t)v69);
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v70, v33, v34, v35, v36, v37, v38, v39);
  if (v10)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a2, v13, 0, 0, 0xFFFFFFFFLL, v44, v45, v46, (uint64_t)&v67, v47);
    v48 = v67;
    if (v67 != -1)
    {
      v49 = *(unsigned int *)(v10 + 12);
      if ((_DWORD)v49 == *(_DWORD *)(v10 + 8))
      {
        v50 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (void *)(v49 + 1), (unint64_t)&v67, v42, v43, v44, v45, v46);
        v52 = *v50;
        v51 = (uint64_t *)(v50 + 1);
        v48 = v52;
        LODWORD(v49) = *(_DWORD *)(v10 + 12);
      }
      else
      {
        v51 = &v68;
      }
      v53 = *(_QWORD *)v10 + 12 * v49;
      *(_DWORD *)v53 = v48;
      *(_QWORD *)(v53 + 4) = *v51;
      ++*(_DWORD *)(v10 + 12);
    }
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v40, v41, v42, v43, v44, v45, v46);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v55 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v40, v41, v42, v43, v44, v45, v46);
    v55 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v55) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v56 = 69;
  else
    v56 = 65;
  v62 = i;
  v63 = 0;
  v64 = v56;
  v65 = 15;
  v66 = -1;
  if (i != -1)
  {
    v57 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v57 == *(_DWORD *)(a3 + 8))
    {
      v58 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v57 + 1), (unint64_t)&v62, v42, v43, v44, v45, v46);
      v60 = *v58;
      v59 = v58 + 1;
      v61 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v61 = v60;
    }
    else
    {
      v59 = &v63;
      v61 = *(_QWORD *)a3 + 12 * v57;
      *(_DWORD *)v61 = i;
    }
    *(_QWORD *)(v61 + 4) = *(_QWORD *)v59;
    ++*(_DWORD *)(a3 + 12);
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_17compileCheckTrapsEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_17compileCheckTrapsEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_17compileCheckTrapsEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  const void *v89;
  void *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  JSC::ExecutableMemoryHandle *v126[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v23 = v20 + (v20 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v20 + 1)
      v25 = v20 + 1;
    else
      v25 = v24;
    if (v25 >> 29)
    {
      __break(0xC471u);
      goto LABEL_116;
    }
    v26 = *(const void **)(v19 + 296);
    v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(v19 + 304) = v25;
    *(_QWORD *)(v19 + 296) = v27;
    memcpy(v27, v26, 8 * v20);
    if (v26)
    {
      if (*(const void **)(v19 + 296) == v26)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v26, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v36 = *(_DWORD *)(a2 + 200);
  if (v36 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = -134216720;
  v37 = *(_DWORD *)(a2 + 200);
  v38 = v37 + 4;
  *(_DWORD *)(a2 + 200) = v37 + 4;
  if ((v37 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v38 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v39 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v39 + 90440), v39, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v31, v32, v33, v34, v35, v126);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v126[0], v40, v41, v42, v43, v44, v45);
  v53 = (unsigned int *)v126[1];
  v126[1] = 0;
  if (v53)
  {
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v56 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v125 = v11;
  if (v56)
  {
    v57 = v56 + 2;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
    do
      v62 = __ldaxr(v57);
    while (__stlxr(v62 + 1, v57));
  }
  else
  {
    v59 = *(_DWORD *)(a1 + 16);
    v60 = *(_QWORD *)(a1 + 20);
    v61 = *(_DWORD *)(a1 + 40);
  }
  v63 = *(_QWORD *)(a1 + 48);
  if ((v63 & 1) != 0)
  {
    v101 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v102 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v123 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = v101;
      *(_DWORD *)(v123 + 8) = v102;
      v104 = 1;
      v101 = v123;
    }
    else
    {
      v104 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v63 = v101 | v104;
  }
  v64 = *(_QWORD *)(a1 + 56);
  if (v64)
  {
    do
      v65 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v65 + 1, (unsigned int *)v64));
  }
  *(_OWORD *)v126 = *(_OWORD *)(a1 + 64);
  v66 = *(unsigned int **)(a1 + 80);
  if (v66)
  {
    v67 = v66 + 2;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 + 1, v67));
  }
  v69 = WTF::fastMalloc((WTF *)0x58);
  v77 = v69;
  *(_DWORD *)(v69 + 8) = 1;
  *(_QWORD *)v69 = &off_1E35779C8;
  *(_DWORD *)(v69 + 16) = v59;
  *(_QWORD *)(v69 + 20) = v60;
  *(_DWORD *)(v69 + 28) = v61;
  if (v56)
  {
    v78 = v56 + 2;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
  }
  *(_QWORD *)(v69 + 32) = v56;
  v80 = v63;
  if ((v63 & 1) != 0)
  {
    v105 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
    if ((v63 & 2) != 0
      || ((v106 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v124 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v124 = v105;
      *(_DWORD *)(v124 + 8) = v106;
      v108 = 1;
      v105 = v124;
    }
    else
    {
      v108 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v80 = v105 | v108;
  }
  *(_QWORD *)(v77 + 40) = v80;
  if (v64)
  {
    do
      v81 = __ldaxr((unsigned int *)v64);
    while (__stlxr(v81 + 1, (unsigned int *)v64));
  }
  *(_QWORD *)(v77 + 48) = v64;
  *(_OWORD *)(v77 + 56) = *(_OWORD *)v126;
  if (v66)
  {
    v82 = v66 + 2;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 + 1, v82));
  }
  *(_QWORD *)(v77 + 72) = v66;
  *(_DWORD *)(v77 + 80) = v20;
  v84 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v84 != *(_DWORD *)(a2 + 240))
  {
    v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
    goto LABEL_58;
  }
  v86 = v84 + (v84 >> 2);
  if (v86 >= 0x10)
    v87 = v86 + 1;
  else
    v87 = 16;
  if (v87 <= v84 + 1)
    v88 = v84 + 1;
  else
    v88 = v87;
  if (v88 >> 29)
  {
    __break(0xC471u);
LABEL_116:
    JUMPOUT(0x197DFF094);
  }
  v89 = *(const void **)(a2 + 232);
  v90 = (void *)WTF::fastMalloc((WTF *)(8 * v88));
  *(_DWORD *)(a2 + 240) = v88;
  *(_QWORD *)(a2 + 232) = v90;
  memcpy(v90, v89, 8 * v84);
  if (v89)
  {
    if (*(const void **)(a2 + 232) == v89)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v89, v70, v71, v72, v73, v74, v75, v76);
  }
  v84 = *(unsigned int *)(a2 + 244);
  v85 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v84);
LABEL_58:
  *v85 = v77;
  *(_DWORD *)(a2 + 244) = v84 + 1;
  if (!v66)
    goto LABEL_62;
  v91 = v66 + 2;
  do
  {
    v92 = __ldaxr(v91);
    v93 = v92 - 1;
  }
  while (__stlxr(v93, v91));
  if (!v93)
  {
    atomic_store(1u, v66 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
    if (!v64)
      goto LABEL_65;
  }
  else
  {
LABEL_62:
    if (!v64)
      goto LABEL_65;
  }
  do
  {
    v94 = __ldaxr((unsigned int *)v64);
    v95 = v94 - 1;
  }
  while (__stlxr(v95, (unsigned int *)v64));
  if (!v95)
  {
    atomic_store(1u, (unsigned int *)v64);
    v117 = *(unsigned int **)(v64 + 16);
    *(_QWORD *)(v64 + 16) = 0;
    if (v117)
    {
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
      {
        atomic_store(1u, v117);
        WTF::fastFree((unint64_t)v117, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    v120 = *(unsigned int **)(v64 + 8);
    *(_QWORD *)(v64 + 8) = 0;
    if (v120)
    {
      do
      {
        v121 = __ldaxr(v120);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v120));
      if (!v122)
      {
        atomic_store(1u, v120);
        WTF::fastFree((unint64_t)v120, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    WTF::fastFree(v64, v70, v71, v72, v73, v74, v75, v76);
  }
LABEL_65:
  if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v63 & 0xFFFFFFFF8, v70, v71, v72, v73, v74, v75, v76);
  if (v56)
  {
    v96 = v56 + 2;
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
    do
    {
      v99 = __ldaxr(v96);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v96));
    if (!v100)
    {
      atomic_store(1u, v56 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 32))(v56);
    }
  }
  *(_BYTE *)(a2 + 212) = v125;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_17compileCheckTrapsEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_17compileCheckTrapsEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_17compileCheckTrapsEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DFF648);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DFF668);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DFF688);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
    {
LABEL_74:
      __break(0xC471u);
      JUMPOUT(0x197DFF610);
    }
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (!v38)
    goto LABEL_32;
  v39 = v38 + 2;
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, v38 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    if (!v33)
      goto LABEL_37;
  }
  else
  {
LABEL_32:
    if (!v33)
      goto LABEL_37;
  }
  v42 = v33 + 2;
  do
  {
    v43 = __ldaxr(v42);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v42));
  if (!v44)
  {
    atomic_store(1u, v33 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
  }
LABEL_37:
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
    goto LABEL_74;
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::Register *,unsigned int,unsigned int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  JSC::B3::Value *v34;
  JSC::DFG::Node *v35;
  char **v36;
  uint64_t v37;
  WTF *v38;
  char *v40;
  WTF *v41;
  uint64_t v42;

  v13 = (int *)(a1 + 28264);
  v14 = *(_DWORD *)(a1 + 28264);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 27848);
    v41 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v41 = 0x200000002;
    v42 = 0x200000002;
    v23 = (_QWORD *)(v15 + 32);
    v24 = *(unsigned int *)(v15 + 44);
    if ((_DWORD)v24 == *(_DWORD *)(v15 + 40))
    {
      v25 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v41);
      v26 = *(_QWORD *)(v15 + 32) + 16 * *(unsigned int *)(v15 + 44);
    }
    else
    {
      v26 = *v23 + 16 * v24;
      v25 = (unint64_t)&v41;
    }
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v27 = *(_QWORD *)v25;
    *(_QWORD *)v25 = 0;
    *(_QWORD *)v26 = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 8);
    *(_DWORD *)(v25 + 8) = 0;
    *(_DWORD *)(v26 + 8) = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 12);
    *(_DWORD *)(v25 + 12) = 0;
    *(_DWORD *)(v26 + 12) = v27;
    ++*(_DWORD *)(v15 + 44);
    v14 = v24 | 0x80000000;
    *v13 = v24 | 0x80000000;
    v28 = v41;
    if (v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v28, v16, v17, v18, v19, v20, v21, v22);
      v14 = *v13;
    }
  }
  v29 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationCreateRest);
  v30 = *a3;
  v31 = *a4;
  v32 = *(_QWORD *)(a1 + 27776);
  v33 = *(JSC::B3::Value **)(a1 + 27760);
  v34 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v14, *(_QWORD *)(a1 + 27768), v29, *a2, v30, v31, *a5);
  JSC::B3::Procedure::addValueImpl(v33, v34);
  v41 = v34;
  v36 = (char **)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v41);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)v40;
    v38 = v41;
  }
  else
  {
    *(_QWORD *)&(*v36)[8 * v37] = v34;
    v38 = v34;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *((_QWORD *)v38 + 4) = v32;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowRegExpObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::RegExpObject *,long long),JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationRegExpExec);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::DFG::Node *v31;
  WTF *v32;
  char **v33;
  uint64_t v34;
  WTF *v35;
  char *v37;
  WTF *v38;
  uint64_t v39;

  v12 = (int *)(a1 + 28264);
  v13 = *(_DWORD *)(a1 + 28264);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = *(_QWORD *)(a1 + 27848);
    v38 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v38 = 0x200000002;
    v39 = 0x200000002;
    v22 = (_QWORD *)(v14 + 32);
    v23 = *(unsigned int *)(v14 + 44);
    if ((_DWORD)v23 == *(_DWORD *)(v14 + 40))
    {
      v24 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v38);
      v25 = *(_QWORD *)(v14 + 32) + 16 * *(unsigned int *)(v14 + 44);
    }
    else
    {
      v25 = *v22 + 16 * v23;
      v24 = (unint64_t)&v38;
    }
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    v26 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    *(_QWORD *)v25 = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 8);
    *(_DWORD *)(v24 + 8) = 0;
    *(_DWORD *)(v25 + 8) = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 12);
    *(_DWORD *)(v24 + 12) = 0;
    *(_DWORD *)(v25 + 12) = v26;
    ++*(_DWORD *)(v14 + 44);
    v13 = v23 | 0x80000000;
    *v12 = v23 | 0x80000000;
    v27 = v38;
    if (v38)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree((unint64_t)v27, v15, v16, v17, v18, v19, v20, v21);
      v13 = *v12;
    }
  }
  v28 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationRegExpExecGeneric);
  v29 = *a3;
  v30 = *(_QWORD *)(a1 + 27776);
  v32 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v13, *(_QWORD *)(a1 + 27768), v28, *a2, v29, *a4);
  v38 = v32;
  v33 = (char **)(v30 + 8);
  v34 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v34 == *(_DWORD *)(v30 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v33, v34 + 1, (unint64_t)&v38);
    v34 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v34) = *(_QWORD *)v37;
    v35 = v38;
  }
  else
  {
    *(_QWORD *)&(*v33)[8 * v34] = v32;
    v35 = v32;
  }
  *(_DWORD *)(v30 + 20) = v34 + 1;
  *((_QWORD *)v35 + 4) = v30;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::RegExpObject *,JSC::JSString *),JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationRegExpTestString);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::RegExpObject *,long long),JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::DFG::Node *v17;
  WTF *v18;
  char **v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  char *v32;
  WTF *v33;
  uint64_t v34;

  v12 = (int *)(a1 + 28260);
  v13 = *(_DWORD *)(a1 + 28260);
  if ((v13 & 0x80000000) == 0)
  {
    v23 = *(_QWORD *)(a1 + 27848);
    v33 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v33 = 0x200000001;
    v34 = 0x200000002;
    v13 = JSC::B3::Procedure::addTuple(v23, (unint64_t)&v33);
    *v12 = v13;
    v31 = v33;
    if (v33)
    {
      v33 = 0;
      LODWORD(v34) = 0;
      WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
      v13 = *v12;
    }
  }
  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationRegExpTest);
  v15 = *a3;
  v16 = *(_QWORD *)(a1 + 27776);
  v18 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v13, *(_QWORD *)(a1 + 27768), v14, *a2, v15, *a4);
  v33 = v18;
  v19 = (char **)(v16 + 8);
  v20 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v20 == *(_DWORD *)(v16 + 16))
  {
    v32 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, v20 + 1, (unint64_t)&v33);
    v20 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v20) = *(_QWORD *)v32;
    v21 = v33;
  }
  else
  {
    *(_QWORD *)&(*v19)[8 * v20] = v18;
    v21 = v18;
  }
  *(_DWORD *)(v16 + 20) = v20 + 1;
  *((_QWORD *)v21 + 4) = v16;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationRegExpTestGeneric);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileRegExpTestInline(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  char *v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  _DWORD *v43;
  uint64_t *v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  char v89;
  int *v90;
  int *v91;
  int v92;
  char *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  WTF *v105;
  char v107;
  char v108;
  JSC::AssemblerBuffer *v109;
  unsigned __int8 v110;
  int v111;
  char v112;
  int v113;
  int v114;
  char v115;
  __int16 v116;
  char v117;
  unsigned int v118[3];
  int v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v122;
  _BYTE v123[28];
  _BYTE v124[4];
  _QWORD v125[2];
  __int128 v126;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(_DWORD *)(a3 + 20);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x197E00374);
  }
  if (v11 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E0037CLL);
  }
  if (v11 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197E00384);
  }
  if (v11 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197E0038CLL);
  }
  v12 = *(_DWORD *)(a3 + 36);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x197E00394);
  }
  if (v12 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E0039CLL);
  }
  if (v12 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197E003A4);
  }
  if (v12 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197E003ACLL);
  }
  if (v12 <= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x197E003B4);
  }
  v13 = *(unsigned __int8 **)(a3 + 8);
  v14 = *v13;
  v15 = v13[16];
  v16 = v13[32];
  v110 = v13[48];
  v17 = *(char **)(a3 + 24);
  v18 = *v17;
  v19 = v17[1];
  v20 = v17[2];
  v21 = v17[3];
  v22 = v17[4];
  v112 = v10;
  if ((*(_BYTE *)(a1 + 23) & 0x40) != 0)
  {
    if (v12 <= 5)
    {
      __break(0xC471u);
      goto LABEL_73;
    }
    v23 = v17[5];
  }
  else
  {
    v23 = -1;
  }
  v111 = v14;
  v24 = v14 & 0x7F;
  v25 = v15 & 0x7F;
  v26 = v16 & 0x7F;
  v109 = (JSC::AssemblerBuffer *)(a2 + 56);
  v27 = *(_DWORD *)(a2 + 200);
  if (v27 + 4 > *(_DWORD *)(a2 + 192))
  {
    v107 = v23;
    v108 = v20;
    JSC::AssemblerBuffer::outOfLineGrow(v109, a2, a3, a4, a5, a6, a7, a8);
    v23 = v107;
    v20 = v108;
    v27 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = v18 & 0x1F | 0x52800000;
  *(_DWORD *)(a2 + 200) += 4;
  v125[0] = -1;
  *(_QWORD *)((char *)v125 + 6) = -1;
  v126 = xmmword_199124350;
  v124[0] = v25;
  v124[1] = v18;
  v124[2] = v26;
  v124[3] = v20;
  BYTE5(v125[0]) = v21;
  BYTE6(v125[0]) = v22;
  if ((*(_BYTE *)(a1 + 23) & 0x40) != 0)
    HIBYTE(v125[0]) = v23;
  BYTE3(v125[0]) = v24;
  BYTE4(v125[0]) = v19;
  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(_QWORD *)(v28 + 8);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 8);
    v31 = *(unsigned int *)(v29 + 4) | ((unint64_t)((*(_DWORD *)(v29 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v30 = 0;
    v31 = 0x100000000;
  }
  JSC::Yarr::jitCompileInlinedTest(*(_QWORD *)(a1 + 24), v30, v31, *(unsigned __int16 *)(v28 + 18), 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 168, a2, (uint64_t)v124);
  v121 = (WTF *)v123;
  v122 = 2;
  JSC::MacroAssemblerARM64::branch32(a2, 0, v24, 4294967294, v32, v33, v34, v35, (uint64_t)&v119);
  v41 = v119;
  if (v119 != -1)
  {
    v42 = HIDWORD(v122);
    if (HIDWORD(v122) == (_DWORD)v122)
    {
      v43 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v121, (void *)(HIDWORD(v122) + 1), (unint64_t)&v119, v36, v37, v38, v39, v40);
      v45 = *v43;
      v44 = (uint64_t *)(v43 + 1);
      v41 = v45;
      v42 = HIDWORD(v122);
    }
    else
    {
      v44 = &v120;
    }
    v46 = (char *)v121 + 12 * v42;
    *(_DWORD *)v46 = v41;
    *(_QWORD *)(v46 + 4) = *v44;
    ++HIDWORD(v122);
  }
  JSC::MacroAssemblerARM64::branchTest32(a2, 4, v24, v24, v37, v38, v39, v40, (uint64_t)v118);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a1 + 56), (char)v21, v47, v48, v49, v50, v51);
  v57 = *(_QWORD *)(a1 + 32);
  if (v57)
  {
    if (*(_BYTE *)(a2 + 212))
    {
      JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a2, v57, a2 + 264, v52, v53, v54, v55, v56);
      v58 = 16;
      goto LABEL_29;
    }
    __break(0xC471u);
LABEL_73:
    JUMPOUT(0x197E0034CLL);
  }
  v58 = 63;
LABEL_29:
  JSC::MacroAssemblerARM64::store64(a2, v58, v21 | 0x86800000000, v52, v53, v54, v55, v56);
  JSC::MacroAssemblerARM64::store64(a2, v110 & 0x7F, v21 | 0x86000000000, v59, v60, v61, v62, v63);
  JSC::MacroAssemblerARM64::store32(a2, v24, v21 | 0x84800000000, v64, v65, v66, v67, v68);
  JSC::MacroAssemblerARM64::store32(a2, v19, v21 | 0x85000000000, v69, v70, v71, v72, v73);
  JSC::MacroAssemblerARM64::store8(a2, 63, v21 | 0x85800000000, v74, v75, v76, v77, v78);
  v86 = *(_DWORD *)(a2 + 200);
  if (v86 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v109, v79, v80, v81, v82, v83, v84, v85);
    v86 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v86) = v111 | 0x320003E0;
  v87 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v87; v87 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v87)
  {
    if ((v87 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v109, v79, v80, v81, v82, v83, v84, v85);
      v87 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v87) = -721215457;
    v87 = *(_DWORD *)(a2 + 200) + 4;
  }
  v88 = v87;
  if ((v87 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v109, v79, v80, v81, v82, v83, v84, v85);
    v88 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v88) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v89 = 69;
  else
    v89 = 65;
  v113 = v87;
  v114 = 0;
  v115 = v89;
  v116 = 15;
  v117 = -1;
  if (v87 != -1)
  {
    if (HIDWORD(v122) == (_DWORD)v122)
    {
      v90 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v121, (void *)(HIDWORD(v122) + 1), (unint64_t)&v113, v81, v82, v83, v84, v85);
      v92 = *v90;
      v91 = v90 + 1;
      v93 = (char *)v121 + 12 * HIDWORD(v122);
      *(_DWORD *)v93 = v92;
    }
    else
    {
      v91 = &v114;
      v93 = (char *)v121 + 12 * HIDWORD(v122);
      *(_DWORD *)v93 = v87;
    }
    *(_QWORD *)(v93 + 4) = *(_QWORD *)v91;
    ++HIDWORD(v122);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v118, a2, v80, v81, v82, v83, v84, v85);
  v101 = *(_DWORD *)(a2 + 200);
  if (v101 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v109, (uint64_t)v94, v95, v96, v97, v98, v99, v100);
    v101 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v101) = v111 & 0x1F | 0x52800000;
  *(_DWORD *)(a2 + 200) += 4;
  if (HIDWORD(v122))
  {
    v102 = 0;
    v103 = 0;
    v104 = 12 * HIDWORD(v122);
    do
    {
      if (v103 >= HIDWORD(v122))
      {
        __break(0xC471u);
        JUMPOUT(0x197E00364);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v121 + v102), a2, v95, v96, v97, v98, v99, v100);
      ++v103;
      v102 += 12;
    }
    while (v104 != v102);
  }
  v105 = v121;
  if (v123 != (_BYTE *)v121 && v121 != 0)
  {
    v121 = 0;
    LODWORD(v122) = 0;
    WTF::fastFree((unint64_t)v105, v94, v95, v96, v97, v98, v99, v100);
  }
  *(_BYTE *)(a2 + 212) = v112;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewRegexp(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewRegexp(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewRegexp(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewRegexp(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewRegexp(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewRegexp(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _OWORD *v22;
  uint64_t v23;
  char v24;
  char v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  _BYTE *v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  _BYTE *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  __int128 v120;
  unint64_t v121;
  JSC::FTL::ExceptionTarget *v122;
  __int128 v123;
  WTF *v124;
  uint64_t v125;

  v124 = 0;
  v125 = 0;
  v9 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v9)
    goto LABEL_131;
  v13 = 0;
  v14 = 0;
  v15 = *((_QWORD *)a3 + 1);
  v16 = 16 * v9;
  v17 = 29;
  do
  {
    v18 = *(unsigned __int8 *)(v15 + 8);
    switch(v18)
    {
      case 7:
        v19 = *(_BYTE *)v15 & 0x7F;
        v20 = 1;
        break;
      case 9:
        v19 = (*(_QWORD *)v15 << 32) | 0x1DLL;
        v20 = 2;
        break;
      case 11:
        v19 = *(_QWORD *)v15;
        v20 = 3;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197E00BFCLL);
    }
    *(_QWORD *)&v123 = v20;
    *((_QWORD *)&v123 + 1) = v19;
    if (v14 == (_DWORD)v125)
    {
      v22 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, v14 + 1, (unint64_t)&v123);
      v21 = HIDWORD(v125);
      v13 = v124;
      *((_OWORD *)v124 + HIDWORD(v125)) = *v22;
    }
    else
    {
      *((_OWORD *)v13 + v14) = v123;
      v21 = HIDWORD(v125);
    }
    v14 = v21 + 1;
    HIDWORD(v125) = v14;
    v15 += 16;
    v16 -= 16;
  }
  while (v16);
  if (!v14)
  {
LABEL_131:
    __break(0xC471u);
    JUMPOUT(0x197E00CBCLL);
  }
  if (*((_DWORD *)v124 + 3) || v14 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E009ECLL);
  }
  if (*((_DWORD *)v124 + 7))
  {
    v26 = "./ftl/FTLLocation.cpp";
    v27 = "GPRReg JSC::FTL::Location::directGPR() const";
    v28 = 399;
    __break(0xC471u);
    goto LABEL_84;
  }
  v23 = *(_QWORD *)(a1 + 16);
  v24 = *((_BYTE *)v124 + 8) & 0x7F;
  v25 = *((_BYTE *)v124 + 24) & 0x7F;
  v120 = *(_OWORD *)(a1 + 24);
  v15 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v15 + 8) = 1;
  v17 = v15 + 8;
  *(_QWORD *)v15 = off_1E3577A40;
  *(_QWORD *)(v15 + 16) = v23;
  *(_QWORD *)(v15 + 24) = operationNewRegexpWithLastIndex;
  *(_BYTE *)(v15 + 32) = v24;
  *(_OWORD *)(v15 + 40) = v120;
  *(_BYTE *)(v15 + 56) = v25;
  *(_BYTE *)(a2 + 328) = 1;
  v16 = a2 + 56;
  v8 = *(_DWORD *)(a2 + 200);
  if (v8 < *(_DWORD *)(a2 + 52))
    goto LABEL_85;
  while (1)
  {
    v29 = v8;
    if ((v8 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v26, (uint64_t)v27, v28, a5, a6, a7, a8);
      v29 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = 335544320;
    v30 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v30;
    if (*(_BYTE *)(a2 + 328))
      v31 = 0xFF000F4500000000;
    else
      v31 = 0xFF000F4100000000;
    for (*(_BYTE *)(a2 + 328) = 0; v30 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v30)
    {
      if ((v30 + 4) > *(_DWORD *)(a2 + 192))
      {
        v114 = v31;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v26, (uint64_t)v27, v28, a5, a6, a7, a8);
        v31 = v114;
        v30 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -721215457;
      v30 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    v16 = *(_QWORD *)(*(_QWORD *)a3 + 104);
    v32 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
    v33 = *((unsigned int *)a3 + 9);
    if ((_DWORD)v33)
    {
      v68 = (_BYTE *)*((_QWORD *)a3 + 3);
      do
      {
        v69 = *v68 & 0x7F;
        if (v69 >= 0x40)
          goto LABEL_84;
        v70 = 1 << v69;
        v32 &= ~v70;
        v16 &= ~v70;
        ++v68;
      }
      while (--v33);
    }
    v34 = *((unsigned int *)a3 + 13);
    if (!(_DWORD)v34)
      break;
    v75 = (_BYTE *)*((_QWORD *)a3 + 5);
    while (1)
    {
      v76 = (*v75 + 32) & 0x7F;
      if (v76 >= 0x40)
        break;
      v77 = 1 << v76;
      v32 &= ~v77;
      v16 &= ~v77;
      ++v75;
      if (!--v34)
        goto LABEL_23;
    }
LABEL_84:
    __break(1u);
    do
    {
LABEL_85:
      if ((v8 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v16, (uint64_t)v26, (uint64_t)v27, v28, a5, a6, a7, a8);
        v8 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v8) = -721215457;
      v8 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v8;
    }
    while (v8 < *(_DWORD *)(a2 + 52));
  }
LABEL_23:
  v119 = v31;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), a3, (uint64_t *)&v122);
  v35 = *(_QWORD *)(a1 + 56);
  v118 = *(_QWORD *)(a1 + 48);
  if ((v35 & 1) != 0)
  {
    v78 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
    if ((v35 & 2) != 0
      || ((v79 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v79 != 0x3FFFFFFF)
        ? (v80 = (_DWORD)v79 == -1)
        : (v80 = 1),
          v80))
    {
      v81 = 2;
    }
    else if (v79 >> 28)
    {
      v115 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v115 = v78;
      *(_DWORD *)(v115 + 8) = v79;
      v81 = 1;
      v78 = v115;
    }
    else
    {
      v81 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      v78 = v79 << 36;
    }
    v35 = v78 | v81;
  }
  v36 = (unsigned int *)v122;
  if (v122)
  {
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v121 = v16;
  do
    v38 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v38 + 1, (unsigned int *)v17));
  v39 = *((_QWORD *)a3 + 7);
  v40 = v35;
  if ((v35 & 1) != 0)
  {
    v82 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
    if ((v35 & 2) != 0
      || ((v83 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v83 != 0x3FFFFFFF)
        ? (v84 = (_DWORD)v83 == -1)
        : (v84 = 1),
          v84))
    {
      v85 = 2;
    }
    else if (v83 >> 28)
    {
      v116 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v116 = v82;
      *(_DWORD *)(v116 + 8) = v83;
      v85 = 1;
      v82 = v116;
    }
    else
    {
      v85 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      v82 = v83 << 36;
    }
    v40 = v82 | v85;
  }
  if (v36)
  {
    do
      v41 = __ldaxr(v36);
    while (__stlxr(v41 + 1, v36));
  }
  do
    v42 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v42 + 1, (unsigned int *)v17));
  v50 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v50 + 8) = 1;
  *(_QWORD *)v50 = &off_1E3577A68;
  *(_DWORD *)(v50 + 16) = v8;
  *(_QWORD *)(v50 + 20) = v119;
  *(_QWORD *)(v50 + 32) = v118;
  *(_DWORD *)(v50 + 40) = v30;
  v51 = v40;
  if ((v40 & 1) != 0)
  {
    v86 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
    if ((v40 & 2) != 0
      || ((v87 = *(unsigned int *)((v40 & 0xFFFFFFFF8) + 8), (_DWORD)v87 != 0x3FFFFFFF)
        ? (v88 = (_DWORD)v87 == -1)
        : (v88 = 1),
          v88))
    {
      v89 = 2;
    }
    else if (v87 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v86;
      *(_DWORD *)(v117 + 8) = v87;
      v89 = 1;
      v86 = v117;
    }
    else
    {
      v89 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
      v86 = v87 << 36;
    }
    v51 = v86 | v89;
  }
  *(_QWORD *)(v50 + 48) = v51;
  if (v36)
  {
    do
      v52 = __ldaxr(v36);
    while (__stlxr(v52 + 1, v36));
  }
  *(_QWORD *)(v50 + 56) = v36;
  *(_QWORD *)(v50 + 64) = v32;
  *(_QWORD *)(v50 + 72) = v121;
  do
    v53 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v53 + 1, (unsigned int *)v17));
  *(_QWORD *)(v50 + 80) = v15;
  *(_QWORD *)&v123 = v50;
  v54 = *(unsigned int *)(v39 + 12);
  if ((_DWORD)v54 == *(_DWORD *)(v39 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v39, (uint64_t *)&v123);
    v71 = (unsigned int *)v123;
    *(_QWORD *)&v123 = 0;
    if (v71)
    {
      v72 = v71 + 2;
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        atomic_store(1u, v71 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v71 + 8))(v71);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v39 + 8 * v54) = v50;
    *(_DWORD *)(v39 + 12) = v54 + 1;
    *(_QWORD *)&v123 = 0;
  }
  do
  {
    v55 = __ldaxr((unsigned int *)v17);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, (unsigned int *)v17));
  if (!v56)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v36)
  {
    do
    {
      v57 = __ldaxr(v36);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v36));
    if (!v58)
    {
      atomic_store(1u, v36);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v36, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
    }
  }
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  do
  {
    v59 = __ldaxr((unsigned int *)v17);
    v60 = v59 - 1;
  }
  while (__stlxr(v60, (unsigned int *)v17));
  if (!v60)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v36)
  {
    do
    {
      v61 = __ldaxr(v36);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v36));
    if (!v62)
    {
      atomic_store(1u, v36);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v36, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
  }
  if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v35 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  v63 = (unsigned int *)v122;
  v122 = 0;
  if (v63)
  {
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
    {
      atomic_store(1u, v63);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v63, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
  }
  do
  {
    v66 = __ldaxr((unsigned int *)v17);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, (unsigned int *)v17));
  if (!v67)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v124)
    WTF::fastFree((unint64_t)v124, v43, v44, v45, v46, v47, v48, v49);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  JSC::ARM64LogicalImmediate *v17;
  char *v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  uint64_t v43;
  _BYTE *v44;
  char *v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int8x8_t v72;
  int v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t *v76;
  int v77;
  uint64_t v78;
  int i;
  unsigned int v80;
  char v81;
  uint64_t v82;
  int *v83;
  int *v84;
  int v85;
  uint64_t v86;
  int64_t v87;
  char *v88;
  char v89;
  int v90;
  char *__src;
  JSC::ARM64LogicalImmediate *v92;
  int v93;
  int v94;
  char v95;
  __int16 v96;
  char v97;
  int v98;
  uint64_t v99;
  void *__dst;
  int v101;
  unsigned int v102;
  _WORD v103[8];
  _QWORD v104[9];

  v10 = *(_QWORD *)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  LOBYTE(v15) = *(_BYTE *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(JSC::ARM64LogicalImmediate **)(a1 + 48);
  LODWORD(v18) = *(unsigned __int8 *)(a1 + 56);
  if (!(_DWORD)v12)
    goto LABEL_5;
  if (!*(_BYTE *)(a2 + 212))
  {
    v19 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
    v20 = "CachedTempRegister &JSC::MacroAssemblerARM64::dataMemoryTempRegister()";
    v21 = 165;
    __break(0xC471u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
  v22 = *(_DWORD *)(a2 + 200);
  if (v22 + 4 > *(_DWORD *)(a2 + 192))
  {
LABEL_82:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v19, (uint64_t)v20, v21, a5, a6, a7, a8);
    v22 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v22) = -1207811152;
  *(_DWORD *)(a2 + 200) += 4;
LABEL_5:
  v92 = v17;
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v104, *(_QWORD *)(v11 + 24), a2, 4u, (char)v15, 0xFFFFFFFFLL, a7, a8);
  v17 = (JSC::ARM64LogicalImmediate *)v103;
  __dst = v103;
  v11 = 1;
  v101 = 1;
  if ((_DWORD)v18 == 2)
    goto LABEL_58;
  v103[0] = (unsigned __int16)v18 | 0x200;
  v102 = 1;
  v23 = 1;
  do
  {
    v24 = 0;
    v25 = 0;
    v26 = __dst;
    v27 = v23;
    do
    {
      if ((*((_BYTE *)__dst + v24 + 1) & 0x40) != 0)
        goto LABEL_81;
      v25 |= 1 << *((_BYTE *)__dst + v24 + 1);
      v24 += 2;
    }
    while (2 * v23 != v24);
    v28 = 0;
    do
    {
      v29 = *((_BYTE *)__dst + v28) & 0x7F;
      if (v29 >= 0x40)
        goto LABEL_81;
      v25 &= ~(1 << v29);
      v28 += 2;
    }
    while (2 * v23 != v28);
    v30 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
    v30.i16[0] = vaddlv_u8(v30);
    v31 = v30.i32[0];
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.i32[0] + v31)
    {
      v18 = 0;
      if (v23 <= 1)
        v33 = 1;
      else
        v33 = v23;
      v34 = 2 * v33;
      while (1)
      {
        v35 = v18[(_QWORD)__dst + 1];
        if ((v35 & 0x7Fu) >= 0x40)
          goto LABEL_81;
        if (((v25 >> (v35 & 0x7F)) & 1) != 0)
          break;
        v18 += 2;
        if ((char *)v34 == v18)
          goto LABEL_37;
      }
      v36 = v18[(_QWORD)__dst];
      if (v36 == v35)
      {
LABEL_35:
        memmove(&v18[(_QWORD)v26], &v18[(_QWORD)v26 + 2], 2 * v27 - (_QWORD)v18 - 2);
        v23 = v102 - 1;
        goto LABEL_36;
      }
      if ((char)v36 == 63)
      {
        if ((char)v35 != 31)
        {
          LODWORD(v15) = v35 & 0x1F | 0xD2800000;
          goto LABEL_32;
        }
      }
      else
      {
        v37 = v35 == 31 || (char)v36 == 31;
        if (!v37)
        {
          LODWORD(v15) = v35 & 0xFFE0FFFF | ((v36 & 0x1F) << 16) | 0xAA0003E0;
LABEL_32:
          v38 = *(_DWORD *)(a2 + 200);
          if (v38 + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v19, (uint64_t)v20, v21, a5, a6, a7, a8);
            v38 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = (_DWORD)v15;
          *(_DWORD *)(a2 + 200) += 4;
          v26 = __dst;
          v27 = v102;
          goto LABEL_35;
        }
      }
      LODWORD(v15) = (char)v35 | (32 * (char)v36) | 0x91000000;
      goto LABEL_32;
    }
    LODWORD(v18) = *((char *)__dst + 1);
    v89 = *(_BYTE *)__dst;
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v18, v21, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v102 - 2);
    v39 = v102 - 1;
    v37 = v102 == 1;
    v102 = v39;
    v15 = (char *)__dst;
    __src = (char *)__dst + 2 * v39;
    if (v37)
    {
      v40 = 0;
      v41 = 0;
      v90 = 0;
      v19 = (char *)__dst + 2 * v39;
    }
    else
    {
      v43 = 2 * v39;
      v44 = __dst;
      while (*v44 != v18)
      {
        v44 += 2;
        v43 -= 2;
        if (!v43)
          goto LABEL_47;
      }
      *v44 = v89;
LABEL_47:
      v90 = 0;
      v18 = v15;
      v19 = __src;
      v45 = __src;
      do
      {
        if (*v15 == v15[1])
        {
          v46 = v15;
          if (v45 != (char *)__dst + 2 * v102)
          {
            if (v15 == v19)
            {
              v46 = v45;
            }
            else
            {
              v87 = v18 - v19;
              v88 = v45;
              memmove(v45, v19, v18 - v19);
              v46 = &v88[v87];
            }
          }
          v19 = v15 + 2;
          ++v90;
          v45 = v46;
        }
        v15 += 2;
        v18 += 2;
      }
      while (v15 < __src);
      v15 = (char *)__dst;
      v40 = v102;
      v41 = v102;
      __src = v45;
    }
    v42 = &v15[2 * v40];
    if (v19 != v42)
    {
      memmove(__src, v19, v42 - v19);
      v41 = v102;
    }
    v23 = v41 - v90;
LABEL_36:
    v102 = v23;
LABEL_37:
    ;
  }
  while (v23);
  v47 = __dst;
  if (v103 != __dst && __dst)
  {
    __dst = 0;
    v101 = 0;
    WTF::fastFree((unint64_t)v47, v19, (uint64_t)v20, v21, a5, a6, a7, a8);
  }
LABEL_58:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)v92, 1, v21, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v16, 0, v48, v49, v50, v51, v52);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v104, v13, v14, v53, v54, v55, v56, v57, (uint64_t)&__dst);
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v104, v58, v59, v60, v61, v62, v63, v64);
  if (v10)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a2, v13, 0, 0, 0xFFFFFFFFLL, v69, v70, v71, (uint64_t)&v98, v72);
    v73 = v98;
    if (v98 != -1)
    {
      v74 = *(unsigned int *)(v10 + 12);
      if ((_DWORD)v74 == *(_DWORD *)(v10 + 8))
      {
        v75 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (void *)(v74 + 1), (unint64_t)&v98, v67, v68, v69, v70, v71);
        v77 = *v75;
        v76 = (uint64_t *)(v75 + 1);
        v73 = v77;
        LODWORD(v74) = *(_DWORD *)(v10 + 12);
      }
      else
      {
        v76 = &v99;
      }
      v78 = *(_QWORD *)v10 + 12 * v74;
      *(_DWORD *)v78 = v73;
      *(_QWORD *)(v78 + 4) = *v76;
      ++*(_DWORD *)(v10 + 12);
    }
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v65, v66, v67, v68, v69, v70, v71);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v80 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v65, v66, v67, v68, v69, v70, v71);
    v80 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v80) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v81 = 69;
  else
    v81 = 65;
  v93 = i;
  v94 = 0;
  v95 = v81;
  v96 = 15;
  v97 = -1;
  if (i != -1)
  {
    v82 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v82 == *(_DWORD *)(a3 + 8))
    {
      v83 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v82 + 1), (unint64_t)&v93, v67, v68, v69, v70, v71);
      v85 = *v83;
      v84 = v83 + 1;
      v86 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v86 = v85;
    }
    else
    {
      v84 = &v94;
      v86 = *(_QWORD *)a3 + 12 * v82;
      *(_DWORD *)v86 = i;
    }
    *(_QWORD *)(v86 + 4) = *(_QWORD *)v84;
    ++*(_DWORD *)(a3 + 12);
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_16compileNewRegexpEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_16compileNewRegexpEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_16compileNewRegexpEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::ARM64LogicalImmediate *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  const void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  JSC::ExecutableMemoryHandle *v120[2];

  v10 = (unsigned int *)(a1 + 16);
  v119 = *(_BYTE *)(a2 + 212);
  if (!v119)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v19 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v18 + 308);
  if ((_DWORD)v19 == *(_DWORD *)(v18 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v18 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v18 + 296) + 8 * (_QWORD)v19) = 0;
    *(_DWORD *)(v18 + 308) = (_DWORD)v19 + 1;
  }
  v20 = *(_DWORD *)(a2 + 200);
  if (v20 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v11, v12, v13, v14, v15, v16, v17);
    v20 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v19, 16, v13, v14, v15, v16, v17);
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -134216720;
  v29 = *(_DWORD *)(a2 + 200);
  v30 = v29 + 4;
  *(_DWORD *)(a2 + 200) = v29 + 4;
  if ((v29 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v30 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v31 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v31 + 90440), v31, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v23, v24, v25, v26, v27, v120);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v120[0], v32, v33, v34, v35, v36, v37);
  v45 = (unsigned int *)v120[1];
  v120[1] = 0;
  if (v45)
  {
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v45, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
  }
  v48 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  if (v48)
  {
    v49 = v48 + 2;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
    v51 = *(_DWORD *)(a1 + 16);
    v52 = *(_QWORD *)(a1 + 20);
    v53 = *(_DWORD *)(a1 + 40);
    do
      v54 = __ldaxr(v49);
    while (__stlxr(v54 + 1, v49));
  }
  else
  {
    v51 = *(_DWORD *)(a1 + 16);
    v52 = *(_QWORD *)(a1 + 20);
    v53 = *(_DWORD *)(a1 + 40);
  }
  v55 = *(_QWORD *)(a1 + 48);
  if ((v55 & 1) != 0)
  {
    v93 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v94 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v94 != 0x3FFFFFFF)
        ? (v95 = (_DWORD)v94 == -1)
        : (v95 = 1),
          v95))
    {
      v96 = 2;
    }
    else if (v94 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v93;
      *(_DWORD *)(v117 + 8) = v94;
      v96 = 1;
      v93 = v117;
    }
    else
    {
      v96 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      v93 = v94 << 36;
    }
    v55 = v93 | v96;
  }
  v56 = *(unsigned int **)(a1 + 56);
  if (v56)
  {
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  *(_OWORD *)v120 = *(_OWORD *)(a1 + 64);
  v58 = *(unsigned int **)(a1 + 80);
  if (v58)
  {
    v59 = v58 + 2;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  v61 = WTF::fastMalloc((WTF *)0x58);
  v69 = v61;
  *(_DWORD *)(v61 + 8) = 1;
  *(_QWORD *)v61 = &off_1E3577A90;
  *(_DWORD *)(v61 + 16) = v51;
  *(_QWORD *)(v61 + 20) = v52;
  *(_DWORD *)(v61 + 28) = v53;
  if (v48)
  {
    v70 = v48 + 2;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 + 1, v70));
  }
  *(_QWORD *)(v61 + 32) = v48;
  v72 = v55;
  if ((v55 & 1) != 0)
  {
    v97 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v98 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v98 != 0x3FFFFFFF)
        ? (v99 = (_DWORD)v98 == -1)
        : (v99 = 1),
          v99))
    {
      v100 = 2;
    }
    else if (v98 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v97;
      *(_DWORD *)(v118 + 8) = v98;
      v100 = 1;
      v97 = v118;
    }
    else
    {
      v100 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      v97 = v98 << 36;
    }
    v72 = v97 | v100;
  }
  *(_QWORD *)(v69 + 40) = v72;
  if (v56)
  {
    do
      v73 = __ldaxr(v56);
    while (__stlxr(v73 + 1, v56));
  }
  *(_QWORD *)(v69 + 48) = v56;
  *(_OWORD *)(v69 + 56) = *(_OWORD *)v120;
  if (v58)
  {
    v74 = v58 + 2;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 + 1, v74));
  }
  *(_QWORD *)(v69 + 72) = v58;
  *(_DWORD *)(v69 + 80) = (_DWORD)v19;
  v76 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v76 == *(_DWORD *)(a2 + 240))
  {
    v88 = v76 + (v76 >> 2);
    if (v88 >= 0x10)
      v89 = v88 + 1;
    else
      v89 = 16;
    if (v89 <= v76 + 1)
      v90 = v76 + 1;
    else
      v90 = v89;
    if (v90 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v91 = *(const void **)(a2 + 232);
    v92 = (void *)WTF::fastMalloc((WTF *)(8 * v90));
    *(_DWORD *)(a2 + 240) = v90;
    *(_QWORD *)(a2 + 232) = v92;
    memcpy(v92, v91, 8 * v76);
    if (v91)
    {
      if (*(const void **)(a2 + 232) == v91)
      {
        *(_QWORD *)(a2 + 232) = 0;
        *(_DWORD *)(a2 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v91, v62, v63, v64, v65, v66, v67, v68);
    }
    v76 = *(unsigned int *)(a2 + 244);
    v77 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v76);
  }
  else
  {
    v77 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v76);
  }
  *v77 = v69;
  *(_DWORD *)(a2 + 244) = v76 + 1;
  if (v58)
  {
    v78 = v58 + 2;
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
  if (v56)
  {
    do
    {
      v81 = __ldaxr(v56);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v56));
    if (!v82)
    {
      atomic_store(1u, v56);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v56, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v55 & 0xFFFFFFFF8, v62, v63, v64, v65, v66, v67, v68);
  if (v48)
  {
    v83 = v48 + 2;
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 32))(v48);
    }
    do
    {
      v86 = __ldaxr(v83);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, v83));
    if (!v87)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 32))(v48);
    }
  }
  *(_BYTE *)(a2 + 212) = v119;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_16compileNewRegexpEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_16compileNewRegexpEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_16compileNewRegexpEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197E0203CLL);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197E0205CLL);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197E0207CLL);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
      goto LABEL_73;
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x197E02004);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::B3::Value *>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  WTF *v13;
  WTF *v15;
  int v16;
  uint64_t v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v17[0] = a3;
  WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v15, v17, 1uLL);
  v13 = v15;
  if (v15)
  {
    v15 = 0;
    v16 = 0;
    WTF::fastFree((unint64_t)v13, v5, v6, v7, v8, v9, v10, v11);
  }
  return v12;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  JSC::CodeOrigin::CodeOrigin(&v40, (const JSC::CodeOrigin *)(a1 + 3524));
  v11 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v12 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a3;
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      v35 = (unint64_t)v15;
      LOBYTE(v36) = 3;
      JSC::B3::StackmapValue::append(v11, v15, (unint64_t)&v35 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  *((_QWORD *)v11 + 8) |= 0x30000uLL;
  *((_QWORD *)v11 + 10) |= 0x30000uLL;
  v16 = a1[1];
  v35 = *a2;
  v17 = v39;
  if (v39)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = v39;
  }
  else
  {
    v19 = 0;
  }
  v36 = v17;
  v37 = v16;
  JSC::CodeOrigin::CodeOrigin(&v38, (const JSC::CodeOrigin *)&v40);
  if (v19)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v19, v27, v28, v29, v30, v31, v32, v33);
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  return v11;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3577AB8;
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  v2 = *(unsigned int **)(a2 + 16);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v5;
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v7 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      result = v12;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v4 = v6 | v9;
  }
  *(_QWORD *)(result + 48) = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  uint64_t v58[5];
  unsigned int *v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int *v63;
  unint64_t v64;
  uint64_t v65;

  v64 = 0;
  v65 = 0;
  v6 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_BYTE **)(a3 + 8);
    v8 = 16 * v6;
    while (1)
    {
      v9 = v7[8];
      switch(v9)
      {
        case 7:
          v10 = *v7 & 0x7F;
          v11 = 1;
          break;
        case 9:
          v10 = (*(_QWORD *)v7 << 32) | 0x1DLL;
          v11 = 2;
          break;
        case 11:
          v10 = *(_QWORD *)v7;
          v11 = 3;
          break;
        default:
          __break(0xC471u);
          return;
      }
      *(_QWORD *)&v55 = v11;
      *((_QWORD *)&v55 + 1) = v10;
      v12 = HIDWORD(v65);
      if (HIDWORD(v65) == (_DWORD)v65)
      {
        WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::Location>((uint64_t)&v64, (unint64_t)&v55);
      }
      else
      {
        *(_OWORD *)(v64 + 16 * HIDWORD(v65)) = v55;
        HIDWORD(v65) = v12 + 1;
      }
      v7 += 16;
      v8 -= 16;
      if (!v8)
      {
        v13 = v64;
        v14 = HIDWORD(v65);
        goto LABEL_10;
      }
    }
  }
  v14 = 0;
  v13 = 0;
LABEL_10:
  JSC::MacroAssemblerARM64::patchableJump(a2, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v61);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a2, v22, v23, v24, v25, v26, v27, v28, &v60);
  v29 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v31 = v30;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v59);
  LODWORD(v55) = v61;
  *(_QWORD *)((char *)&v55 + 4) = v62;
  v56 = *(_QWORD *)(a1 + 24);
  v57 = v60;
  JSC::CodeOrigin::CodeOrigin(v58, (const JSC::CodeOrigin *)(a1 + 32));
  v32 = v59;
  if (v59)
  {
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  v58[1] = (uint64_t)v32;
  v58[2] = v29;
  v58[3] = v31;
  v34 = (uint64_t)v63;
  if (v63)
  {
    v35 = v63 + 2;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 + 1, v35));
  }
  v58[4] = v34;
  if (v59)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v59, v44, v45, v46, v47, v48, v49, v50);
  v51 = v63;
  v63 = 0;
  if (v51)
  {
    v52 = v51 + 2;
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
    }
  }
  if (v64)
    WTF::fastFree(v64, v44, v45, v46, v47, v48, v49, v50);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a4)
  {
    __break(0xC471u);
    JUMPOUT(0x197E02924);
  }
  if (*(_DWORD *)(a3 + 12) || a4 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E028FCLL);
  }
  if (*(_DWORD *)(a3 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x197E0291CLL);
  }
  v5 = *(_DWORD *)(a3 + 8) & 0x7F;
  v6 = *(_BYTE *)(a3 + 24) & 0x7F;
  v7 = *a2;
  v8 = a2[1];
  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3576BE0;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = operationNewMap;
  *(_BYTE *)(result + 32) = v5;
  *(_BYTE *)(result + 33) = v6;
  *(_QWORD *)(result + 40) = v8;
  *a1 = result;
  return result;
}

_QWORD *JSC::B3::StackmapGenerationParams::addLatePath<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[9];
  unsigned int *v19;

  v3 = WTF::fastMalloc((WTF *)0x58);
  v4 = _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_13compileNewMapEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(v3, (uint64_t)v18);
  v19 = (unsigned int *)v4;
  v12 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v19);
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v4;
    *(_DWORD *)(a1 + 12) = v12 + 1;
  }
}

uint64_t _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_13compileNewMapEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3577AE0;
  *(_DWORD *)(result + 16) = *(_DWORD *)a2;
  *(_QWORD *)(result + 20) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = result;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      result = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)(result + 48) = v2;
  v3 = *(unsigned int **)(a2 + 40);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 56) = v3;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 80) = v5;
  return result;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_13compileNewMapEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_13compileNewMapEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_13compileNewMapEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

_QWORD *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *result;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[12];
  int v59;
  unsigned int *v60;
  uint64_t v61[2];
  __int128 v62;
  uint64_t v63;
  int v64;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v18 = *(unsigned int *)(v17 + 308);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v17 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v17 + 296) + 8 * v18) = 0;
    *(_DWORD *)(v17 + 308) = v18 + 1;
  }
  JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters((unsigned int *)a2, v18, v11, v12, v13, v14, v15, v16);
  v19 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v19 + 90440), v19, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v20, v21, v22, v23, v24, v58);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, *(uint64_t *)v58, v25, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v58, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 24);
  if (v38)
  {
    v39 = v38 + 2;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
  }
  else
  {
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
  }
  v60 = v38;
  JSC::CodeOrigin::CodeOrigin(v61, (const JSC::CodeOrigin *)(a1 + 32));
  v42 = *(unsigned int **)(a1 + 40);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v61[1] = (uint64_t)v42;
  v62 = *(_OWORD *)(a1 + 48);
  v44 = *(_QWORD *)(a1 + 64);
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v63 = v44;
  v64 = v18;
  _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_13compileNewMapEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(a2, (uint64_t)v58);
  if (v38)
  {
    v55 = v38 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v38 + 2);
      result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v38 + 32))(v38);
    }
  }
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_13compileNewMapEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3577B08;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)a2;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v4 + 32) = v6;
  v9 = *(_QWORD *)(a2 + 24);
  if ((v9 & 1) != 0)
  {
    v29 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v30 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v33 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = v33;
      *(_DWORD *)(v29 + 8) = v30;
      v32 = 1;
    }
    else
    {
      v32 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = v30 << 36;
    }
    v9 = v29 | v32;
  }
  *(_QWORD *)(v5 + 40) = v9;
  v10 = *(unsigned int **)(a2 + 32);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v5 + 72) = v12;
  *(_DWORD *)(v5 + 80) = *(_DWORD *)(a2 + 64);
  v15 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 240))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
LABEL_21:
    *v16 = v5;
    *(_DWORD *)(a1 + 244) = v15 + 1;
    return;
  }
  v17 = v15 + (v15 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15 + 1)
    v19 = v15 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = *(const void **)(a1 + 232);
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(a1 + 240) = v19;
    *(_QWORD *)(a1 + 232) = v21;
    memcpy(v21, v20, 8 * v15);
    if (v20)
    {
      if (*(const void **)(a1 + 232) == v20)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
    }
    v15 = *(unsigned int *)(a1 + 244);
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
    goto LABEL_21;
  }
  __break(0xC471u);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_13compileNewMapEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_13compileNewMapEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_13compileNewMapEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, JSC::LinkBuffer *a2)
{
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::B3::Value *>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  WTF *v13;
  WTF *v15;
  int v16;
  uint64_t v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v17[0] = a3;
  WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v15, v17, 1uLL);
  v13 = v15;
  if (v15)
  {
    v15 = 0;
    v16 = 0;
    WTF::fastFree((unint64_t)v13, v5, v6, v7, v8, v9, v10, v11);
  }
  return v12;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  JSC::CodeOrigin::CodeOrigin(&v40, (const JSC::CodeOrigin *)(a1 + 3524));
  v11 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v12 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a3;
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      v35 = (unint64_t)v15;
      LOBYTE(v36) = 3;
      JSC::B3::StackmapValue::append(v11, v15, (unint64_t)&v35 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  *((_QWORD *)v11 + 8) |= 0x30000uLL;
  *((_QWORD *)v11 + 10) |= 0x30000uLL;
  v16 = a1[1];
  v35 = *a2;
  v17 = v39;
  if (v39)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = v39;
  }
  else
  {
    v19 = 0;
  }
  v36 = v17;
  v37 = v16;
  JSC::CodeOrigin::CodeOrigin(&v38, (const JSC::CodeOrigin *)&v40);
  if (v19)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v19, v27, v28, v29, v30, v31, v32, v33);
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  return v11;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3577B30;
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  v2 = *(unsigned int **)(a2 + 16);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v5;
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v7 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      result = v12;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v4 = v6 | v9;
  }
  *(_QWORD *)(result + 48) = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56[5];
  unsigned int *v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  unint64_t v62;
  uint64_t v63;

  v62 = 0;
  v63 = 0;
  v6 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a3 + 8);
    v8 = 16 * v6;
    do
    {
      *(_QWORD *)&v53 = JSC::FTL::Location::forValueRep(v7);
      *((_QWORD *)&v53 + 1) = v9;
      v10 = HIDWORD(v63);
      if (HIDWORD(v63) == (_DWORD)v63)
      {
        WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::Location>((uint64_t)&v62, (unint64_t)&v53);
      }
      else
      {
        *(_OWORD *)(v62 + 16 * HIDWORD(v63)) = v53;
        HIDWORD(v63) = v10 + 1;
      }
      v7 += 16;
      v8 -= 16;
    }
    while (v8);
    v11 = v62;
    v12 = HIDWORD(v63);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  JSC::MacroAssemblerARM64::patchableJump(a2, v13, v14, v15, v16, v17, v18, v19, (uint64_t)&v59);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a2, v20, v21, v22, v23, v24, v25, v26, &v58);
  v27 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v29 = v28;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v57);
  LODWORD(v53) = v59;
  *(_QWORD *)((char *)&v53 + 4) = v60;
  v54 = *(_QWORD *)(a1 + 24);
  v55 = v58;
  JSC::CodeOrigin::CodeOrigin(v56, (const JSC::CodeOrigin *)(a1 + 32));
  v30 = v57;
  if (v57)
  {
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v56[1] = (uint64_t)v30;
  v56[2] = v27;
  v56[3] = v29;
  v32 = (uint64_t)v61;
  if (v61)
  {
    v33 = v61 + 2;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  v56[4] = v32;
  if (v57)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v57, v42, v43, v44, v45, v46, v47, v48);
  v49 = v61;
  v61 = 0;
  if (v49)
  {
    v50 = v49 + 2;
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v49 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
    }
  }
  if (v62)
    WTF::fastFree(v62, v42, v43, v44, v45, v46, v47, v48);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a4)
  {
    __break(0xC471u);
    JUMPOUT(0x197E03B3CLL);
  }
  if (*(_DWORD *)(a3 + 12) || a4 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E03B14);
  }
  if (*(_DWORD *)(a3 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x197E03B34);
  }
  v5 = *(_DWORD *)(a3 + 8) & 0x7F;
  v6 = *(_BYTE *)(a3 + 24) & 0x7F;
  v7 = *a2;
  v8 = a2[1];
  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3576BE0;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = operationNewSet;
  *(_BYTE *)(result + 32) = v5;
  *(_BYTE *)(result + 33) = v6;
  *(_QWORD *)(result + 40) = v8;
  *a1 = result;
  return result;
}

_QWORD *JSC::B3::StackmapGenerationParams::addLatePath<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[9];
  unsigned int *v19;

  v3 = WTF::fastMalloc((WTF *)0x58);
  v4 = _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_13compileNewSetEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(v3, (uint64_t)v18);
  v19 = (unsigned int *)v4;
  v12 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v19);
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v4;
    *(_DWORD *)(a1 + 12) = v12 + 1;
  }
}

uint64_t _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_13compileNewSetEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3577B58;
  *(_DWORD *)(result + 16) = *(_DWORD *)a2;
  *(_QWORD *)(result + 20) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = result;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      result = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)(result + 48) = v2;
  v3 = *(unsigned int **)(a2 + 40);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 56) = v3;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 80) = v5;
  return result;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_13compileNewSetEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_13compileNewSetEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_13compileNewSetEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

_QWORD *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *result;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[12];
  int v59;
  unsigned int *v60;
  uint64_t v61[2];
  __int128 v62;
  uint64_t v63;
  int v64;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v18 = *(unsigned int *)(v17 + 308);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v17 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v17 + 296) + 8 * v18) = 0;
    *(_DWORD *)(v17 + 308) = v18 + 1;
  }
  JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters((unsigned int *)a2, v18, v11, v12, v13, v14, v15, v16);
  v19 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v19 + 90440), v19, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v20, v21, v22, v23, v24, v58);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, *(uint64_t *)v58, v25, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v58, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 24);
  if (v38)
  {
    v39 = v38 + 2;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
  }
  else
  {
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
  }
  v60 = v38;
  JSC::CodeOrigin::CodeOrigin(v61, (const JSC::CodeOrigin *)(a1 + 32));
  v42 = *(unsigned int **)(a1 + 40);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v61[1] = (uint64_t)v42;
  v62 = *(_OWORD *)(a1 + 48);
  v44 = *(_QWORD *)(a1 + 64);
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v63 = v44;
  v64 = v18;
  _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_13compileNewSetEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(a2, (uint64_t)v58);
  if (v38)
  {
    v55 = v38 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v38 + 2);
      result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v38 + 32))(v38);
    }
  }
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_13compileNewSetEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3577B80;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)a2;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v4 + 32) = v6;
  v9 = *(_QWORD *)(a2 + 24);
  if ((v9 & 1) != 0)
  {
    v29 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v30 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v33 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = v33;
      *(_DWORD *)(v29 + 8) = v30;
      v32 = 1;
    }
    else
    {
      v32 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = v30 << 36;
    }
    v9 = v29 | v32;
  }
  *(_QWORD *)(v5 + 40) = v9;
  v10 = *(unsigned int **)(a2 + 32);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v5 + 72) = v12;
  *(_DWORD *)(v5 + 80) = *(_DWORD *)(a2 + 64);
  v15 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 240))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
LABEL_21:
    *v16 = v5;
    *(_DWORD *)(a1 + 244) = v15 + 1;
    return;
  }
  v17 = v15 + (v15 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15 + 1)
    v19 = v15 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = *(const void **)(a1 + 232);
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(a1 + 240) = v19;
    *(_QWORD *)(a1 + 232) = v21;
    memcpy(v21, v20, 8 * v15);
    if (v20)
    {
      if (*(const void **)(a1 + 232) == v20)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
    }
    v15 = *(unsigned int *)(a1 + 244);
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
    goto LABEL_21;
  }
  __break(0xC471u);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_13compileNewSetEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_13compileNewSetEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_13compileNewSetEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, JSC::LinkBuffer *a2)
{
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::RegExpObject *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringProtoFuncReplaceRegExpEmptyStr);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringProtoFuncReplaceGeneric);
  v15 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v13, v14, *a2, *a3, *a4, *a5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,WTF::BoyerMooreHorspoolTable<unsigned char> const*),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  JSC::B3::Value *v34;
  JSC::DFG::Node *v35;
  char **v36;
  uint64_t v37;
  WTF *v38;
  char *v40;
  WTF *v41;
  uint64_t v42;

  v13 = (int *)(a1 + 28264);
  v14 = *(_DWORD *)(a1 + 28264);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 27848);
    v41 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v41 = 0x200000002;
    v42 = 0x200000002;
    v23 = (_QWORD *)(v15 + 32);
    v24 = *(unsigned int *)(v15 + 44);
    if ((_DWORD)v24 == *(_DWORD *)(v15 + 40))
    {
      v25 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v41);
      v26 = *(_QWORD *)(v15 + 32) + 16 * *(unsigned int *)(v15 + 44);
    }
    else
    {
      v26 = *v23 + 16 * v24;
      v25 = (unint64_t)&v41;
    }
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v27 = *(_QWORD *)v25;
    *(_QWORD *)v25 = 0;
    *(_QWORD *)v26 = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 8);
    *(_DWORD *)(v25 + 8) = 0;
    *(_DWORD *)(v26 + 8) = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 12);
    *(_DWORD *)(v25 + 12) = 0;
    *(_DWORD *)(v26 + 12) = v27;
    ++*(_DWORD *)(v15 + 44);
    v14 = v24 | 0x80000000;
    *v13 = v24 | 0x80000000;
    v28 = v41;
    if (v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v28, v16, v17, v18, v19, v20, v21, v22);
      v14 = *v13;
    }
  }
  v29 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringReplaceStringEmptyStringWithTable8);
  v30 = *a3;
  v31 = *a4;
  v32 = *(_QWORD *)(a1 + 27776);
  v33 = *(JSC::B3::Value **)(a1 + 27760);
  v34 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v14, *(_QWORD *)(a1 + 27768), v29, *a2, v30, v31, *a5);
  JSC::B3::Procedure::addValueImpl(v33, v34);
  v41 = v34;
  v36 = (char **)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v41);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)v40;
    v38 = v41;
  }
  else
  {
    *(_QWORD *)&(*v36)[8 * v37] = v34;
    v38 = v34;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *((_QWORD *)v38 + 4) = v32;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *,WTF::BoyerMooreHorspoolTable<unsigned char> const*),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  int *v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  JSC::DFG::Node *v33;
  WTF *v35;
  uint64_t v36;

  v15 = (int *)(a1 + 28264);
  v16 = *(_DWORD *)(a1 + 28264);
  if ((v16 & 0x80000000) == 0)
  {
    v17 = *(_QWORD *)(a1 + 27848);
    v35 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v35 = 0x200000002;
    v36 = 0x200000002;
    v25 = (_QWORD *)(v17 + 32);
    v26 = *(unsigned int *)(v17 + 44);
    if ((_DWORD)v26 == *(_DWORD *)(v17 + 40))
    {
      v27 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v35);
      v28 = *(_QWORD *)(v17 + 32) + 16 * *(unsigned int *)(v17 + 44);
    }
    else
    {
      v28 = *v25 + 16 * v26;
      v27 = (unint64_t)&v35;
    }
    *(_QWORD *)v28 = 0;
    *(_QWORD *)(v28 + 8) = 0;
    v29 = *(_QWORD *)v27;
    *(_QWORD *)v27 = 0;
    *(_QWORD *)v28 = v29;
    LODWORD(v29) = *(_DWORD *)(v27 + 8);
    *(_DWORD *)(v27 + 8) = 0;
    *(_DWORD *)(v28 + 8) = v29;
    LODWORD(v29) = *(_DWORD *)(v27 + 12);
    *(_DWORD *)(v27 + 12) = 0;
    *(_DWORD *)(v28 + 12) = v29;
    ++*(_DWORD *)(v17 + 44);
    v16 = v26 | 0x80000000;
    *v15 = v26 | 0x80000000;
    v30 = v35;
    if (v35)
    {
      v35 = 0;
      LODWORD(v36) = 0;
      WTF::fastFree((unint64_t)v30, v18, v19, v20, v21, v22, v23, v24);
      v16 = *v15;
    }
  }
  v31 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v32 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v16, v31, *a3, *a4, *a5, *a6, *a7);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,long long),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  JSC::B3::Value *v34;
  JSC::DFG::Node *v35;
  char **v36;
  uint64_t v37;
  WTF *v38;
  char *v40;
  WTF *v41;
  uint64_t v42;

  v13 = (int *)(a1 + 28264);
  v14 = *(_DWORD *)(a1 + 28264);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 27848);
    v41 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v41 = 0x200000002;
    v42 = 0x200000002;
    v23 = (_QWORD *)(v15 + 32);
    v24 = *(unsigned int *)(v15 + 44);
    if ((_DWORD)v24 == *(_DWORD *)(v15 + 40))
    {
      v25 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v41);
      v26 = *(_QWORD *)(v15 + 32) + 16 * *(unsigned int *)(v15 + 44);
    }
    else
    {
      v26 = *v23 + 16 * v24;
      v25 = (unint64_t)&v41;
    }
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v27 = *(_QWORD *)v25;
    *(_QWORD *)v25 = 0;
    *(_QWORD *)v26 = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 8);
    *(_DWORD *)(v25 + 8) = 0;
    *(_DWORD *)(v26 + 8) = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 12);
    *(_DWORD *)(v25 + 12) = 0;
    *(_DWORD *)(v26 + 12) = v27;
    ++*(_DWORD *)(v15 + 44);
    v14 = v24 | 0x80000000;
    *v13 = v24 | 0x80000000;
    v28 = v41;
    if (v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v28, v16, v17, v18, v19, v20, v21, v22);
      v14 = *v13;
    }
  }
  v29 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringReplaceStringGeneric);
  v30 = *a3;
  v31 = *a4;
  v32 = *(_QWORD *)(a1 + 27776);
  v33 = *(JSC::B3::Value **)(a1 + 27760);
  v34 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v14, *(_QWORD *)(a1 + 27768), v29, *a2, v30, v31, *a5);
  JSC::B3::Procedure::addValueImpl(v33, v34);
  v41 = v34;
  v36 = (char **)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v41);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)v40;
    v38 = v41;
  }
  else
  {
    *(_QWORD *)&(*v36)[8 * v37] = v34;
    v38 = v34;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *((_QWORD *)v38 + 4) = v32;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::ensureShadowChickenPacket(JSC::B3::Procedure **this)
{
  uint64_t v1;
  JSC::FTL::Output *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t **v33;
  JSC::FTL::AbstractHeap *v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  JSC::B3::Value *v38;
  uint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  JSC::B3::Value *v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::DFG::Node *v61;
  uint64_t v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  JSC::B3::Value *v77;
  uint64_t v78;
  uint64_t v79;
  char **v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  JSC::B3::Value *v86;
  uint64_t v87;
  uint64_t v89;
  const JSC::FTL::AbstractHeap *v90;
  uint64_t v91;
  char v92;
  uint64_t *v93;
  uint64_t *v94;

  v1 = *(_QWORD *)(*((_QWORD *)*this + 2) + 93384);
  if ((v1 & 1) != 0 || !v1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E04C28);
  }
  v3 = (JSC::FTL::Output *)(this + 3455);
  v4 = JSC::B3::Procedure::addBlock((uint64_t *)0x6BF8, this[3470], *((double *)this + 3475));
  v5 = (uint64_t)v4;
  v6 = (uint64_t)this[3473];
  v7 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)this;
  v8 = (uint64_t *)(this + 3476);
  if (v6)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v6, (uint64_t)v4);
  }
  else
  {
    v94 = v4;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    v10[3] = this[3477];
    this[3477] = (JSC::B3::Procedure *)v10;
    v93 = v10;
    v10[2] = v5;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>(v8, (uint64_t *)&v94, (uint64_t *)&v93, v11, v12, v13, v14, v15, (uint64_t)&v91);
    v9 = v93;
    v16 = (uint64_t **)this[3479];
    *v93 = (uint64_t)(this + 3478);
    v9[1] = (uint64_t)v16;
    *v16 = v9;
    this[3479] = (JSC::B3::Procedure *)v9;
  }
  v17 = JSC::B3::Procedure::addBlock(v9, this[3470], *((double *)this + 3475));
  v18 = (uint64_t)v17;
  v19 = *((_QWORD *)v7 + 3473);
  if (v19)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore(v8, v19, (uint64_t)v17);
  }
  else
  {
    v94 = v17;
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v26 = 0u;
    *((_OWORD *)v26 + 1) = 0u;
    v26[3] = *((_QWORD *)v7 + 3477);
    *((_QWORD *)v7 + 3477) = v26;
    v93 = v26;
    v26[2] = v18;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>(v8, (uint64_t *)&v94, (uint64_t *)&v93, v27, v28, v29, v30, v31, (uint64_t)&v91);
    v32 = v93;
    v33 = (uint64_t **)*((_QWORD *)v7 + 3479);
    *v93 = (uint64_t)v7 + 27824;
    v32[1] = (uint64_t)v33;
    *v33 = v32;
    *((_QWORD *)v7 + 3479) = v32;
  }
  v34 = JSC::FTL::Output::absolute(v3, v1 + 16, v20, v21, v22, v23, v24, v25);
  v89 = v35;
  v90 = v34;
  v36 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)v3, v34, v35, 2);
  v37 = *((_QWORD *)v7 + 3472);
  v38 = (JSC::B3::Value *)*((_QWORD *)v7 + 3470);
  v39 = *((_QWORD *)v7 + 3471);
  v40 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v40 + 8) = -1;
  *(_WORD *)(v40 + 12) = 152;
  *(_BYTE *)(v40 + 20) = 1;
  *(_QWORD *)v40 = &unk_1E357EDA0;
  *(_DWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 40) = 0;
  *(_QWORD *)(v40 + 48) = v36;
  *(_QWORD *)(v40 + 24) = v39;
  *(_QWORD *)(v40 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v38, (JSC::B3::Value *)v40);
  v91 = v40;
  v41 = (char **)(v37 + 8);
  v42 = *(unsigned int *)(v37 + 20);
  if ((_DWORD)v42 == *(_DWORD *)(v37 + 16))
  {
    v44 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v41, v42 + 1, (unint64_t)&v91);
    v42 = *(unsigned int *)(v37 + 20);
    *(_QWORD *)(*(_QWORD *)(v37 + 8) + 8 * v42) = *(_QWORD *)v44;
    v43 = v91;
  }
  else
  {
    *(_QWORD *)&(*v41)[8 * v42] = v40;
    v43 = v40;
  }
  *(_DWORD *)(v37 + 20) = v42 + 1;
  *(_QWORD *)(v43 + 32) = v37;
  v45 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v3, *(_QWORD *)(v1 + 24));
  v46 = JSC::FTL::Output::below(v3, v36, v45);
  JSC::FTL::Output::branch(v3, (uint64_t)v46, v18, v5, 1.0, 0.0, v47, v48, v49, v50);
  *((_QWORD *)v7 + 3472) = v5;
  v51 = *((_QWORD *)v7 + 3473);
  *((_QWORD *)v7 + 3473) = v18;
  v59 = JSC::FTL::Output::constInt64(v3, (uint64_t)operationProcessShadowChickenLog);
  JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::BasicBlock **)v7 + 3472), *((JSC::B3::Value **)v7 + 3470), 0, *((_QWORD *)v7 + 3471), v59, *((_QWORD *)v7 + 3485));
  v62 = JSC::FTL::Output::load((uint64_t)v3, v90, v89, 2);
  v63 = *((_QWORD *)v7 + 3472);
  v64 = (JSC::B3::Value *)*((_QWORD *)v7 + 3470);
  v65 = *((_QWORD *)v7 + 3471);
  v66 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v66 + 8) = -1;
  *(_WORD *)(v66 + 12) = 152;
  *(_DWORD *)(v66 + 16) = 0;
  *(_BYTE *)(v66 + 20) = 1;
  *(_QWORD *)v66 = &unk_1E357EDA0;
  *(_QWORD *)(v66 + 40) = 0;
  *(_QWORD *)(v66 + 48) = v62;
  *(_QWORD *)(v66 + 24) = v65;
  *(_QWORD *)(v66 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v64, (JSC::B3::Value *)v66);
  v91 = v66;
  v70 = (char **)(v63 + 8);
  v71 = *(unsigned int *)(v63 + 20);
  if ((_DWORD)v71 == *(_DWORD *)(v63 + 16))
  {
    v73 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v70, v71 + 1, (unint64_t)&v91);
    v71 = *(unsigned int *)(v63 + 20);
    *(_QWORD *)(*(_QWORD *)(v63 + 8) + 8 * v71) = *(_QWORD *)v73;
    v72 = v91;
  }
  else
  {
    *(_QWORD *)&(*v70)[8 * v71] = v66;
    v72 = v66;
  }
  *(_DWORD *)(v63 + 20) = v71 + 1;
  *(_QWORD *)(v72 + 32) = v63;
  v74 = *((_QWORD *)v7 + 3472);
  v75 = *((_QWORD *)v7 + 3470);
  v76 = *((_QWORD *)v7 + 3471);
  v91 = v18;
  v92 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v74, v75, 154, v76, &v91, v67, v68, v69);
  *((_QWORD *)v7 + 3472) = v18;
  *((_QWORD *)v7 + 3473) = v51;
  v77 = (JSC::B3::Value *)*((_QWORD *)v7 + 3470);
  v78 = *((_QWORD *)v7 + 3471);
  v79 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v79 = off_1E357F5F0;
  *(_DWORD *)(v79 + 8) = -1;
  *(_WORD *)(v79 + 12) = 153;
  *(_DWORD *)(v79 + 16) = 2;
  *(_BYTE *)(v79 + 20) = 0;
  *(_QWORD *)(v79 + 24) = v78;
  *(_QWORD *)(v79 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v77, (JSC::B3::Value *)v79);
  v91 = v79;
  v80 = (char **)(v18 + 8);
  v81 = *(unsigned int *)(v18 + 20);
  if ((_DWORD)v81 == *(_DWORD *)(v18 + 16))
  {
    v83 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v80, v81 + 1, (unint64_t)&v91);
    v81 = *(unsigned int *)(v18 + 20);
    *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v81) = *(_QWORD *)v83;
    v82 = v91;
  }
  else
  {
    *(_QWORD *)&(*v80)[8 * v81] = v79;
    v82 = v79;
  }
  *(_DWORD *)(v18 + 20) = v81 + 1;
  *(_QWORD *)(v82 + 32) = v18;
  if ((*(_WORD *)(v40 + 12) & 0xFFF) == 0x98)
    v84 = v40;
  else
    v84 = 0;
  *(_QWORD *)(v84 + 40) = v79;
  if ((*(_WORD *)(v66 + 12) & 0xFFF) == 0x98)
    v85 = v66;
  else
    v85 = 0;
  *(_QWORD *)(v85 + 40) = v79;
  v86 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v3, 56);
  v87 = JSC::FTL::Output::add(v3, (JSC::B3::Value *)v79, v86);
  JSC::FTL::Output::store((uint64_t)v3, v87, v90, v89);
  return v79;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringSlice);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

__n128 WTF::Vector<JSC::FTL::ValueFromBlock,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::FTL::ValueFromBlock,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  result = *v9;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v9;
  return result;
}

uint64_t WTF::Vector<JSC::FTL::ValueFromBlock,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 16 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      if (v15 < 6)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 5;
        goto LABEL_33;
      }
      if (!(v15 >> 28))
      {
        v16 = WTF::fastMalloc((WTF *)(16 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_33:
        v26 = 0;
        do
        {
          *(_OWORD *)(v16 + v26) = *(_OWORD *)(v10 + v26);
          v26 += 16;
        }
        while (16 * v11 != v26);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x197E05328);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 6)
    {
      v22 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 5;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 28)
        goto LABEL_42;
      v22 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 16 * v21;
    v24 = (__int128 *)v10;
    do
    {
      v25 = *v24++;
      *v22++ = v25;
      v23 -= 16;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,int,int),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringSubstringWithEnd);
  v15 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v13, v14, *a2, *a3, *a4, *a5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStringSubstring);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,unsigned int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationToLowerCase);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckJSCast(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;

  v9 = a1[10];
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = a1[7];
  if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v11 = a1[6];
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = a1[3];
  a1[3] = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v16 = *(unsigned int **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v16 + 2);
          v20 = v12;
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
          v12 = v20;
        }
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckJSCast(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;

  v9 = *((_QWORD *)this + 10);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 7);
  if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_QWORD *)this + 6);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v15 = *(unsigned int **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v15)
      {
        v16 = v15 + 2;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v15 + 2);
          v19 = v12;
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
          v12 = v19;
        }
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckJSCast(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  int v17;
  _BYTE *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  WTF *v50;
  JSC::AssemblerBuffer *v51;
  int i;
  unsigned int v53;
  char v54;
  _DWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _BYTE *v61;
  WTF *v62;
  WTF *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  _BYTE *v67;
  WTF *v68;
  WTF *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  WTF *v80;
  WTF *v81;
  unsigned int *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  WTF *v87;
  WTF *v88;
  unint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const void *v94;
  void *v95;
  WTF *v96;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  WTF *v102;
  WTF *v104;
  WTF *v105;
  unsigned int v106;
  unsigned int v107;
  WTF *v108;
  WTF *v109;
  WTF *v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  WTF *v126;
  JSC::AssemblerBuffer *v127;
  uint64_t v128;
  uint64_t v129;
  __int16 v130;
  WTF *v131;
  unsigned int v132;
  _BYTE v133[24];
  WTF *v134;
  WTF *v135;
  unsigned int v136;
  unsigned int v137;
  _BYTE v138[28];
  int v139;
  int v140;
  char v141;
  __int16 v142;
  char v143;
  WTF *v144;
  uint64_t v145;
  _BYTE v146[24];
  WTF *v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  void (**v151)(JSC::SnippetParams *__hidden);
  uint64_t v152;
  WTF *v153;
  uint64_t v154;
  WTF *v155;
  uint64_t v156;
  WTF *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF *v162;
  WTF *v163;
  uint64_t v164;
  WTF *v165;
  uint64_t v166;
  WTF *v167;
  uint64_t v168;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v167 = 0;
  v168 = 0;
  v165 = 0;
  v166 = 0;
  v163 = 0;
  v164 = 0;
  if (!*(_DWORD *)(a3 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x197E060F4);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v151 = (void (**)(JSC::SnippetParams *__hidden))(**(_BYTE **)(a3 + 8) & 0x7F);
  v152 = v7;
  v8 = (_OWORD *)WTF::Vector<JSC::SnippetParams::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v163, 1uLL, (unint64_t)&v151);
  *((_OWORD *)v163 + HIDWORD(v164)) = *v8;
  v10 = *(_QWORD *)(a1 + 24);
  ++HIDWORD(v164);
  if (*(_BYTE *)(v10 + 4))
  {
    v11 = 0;
    while (v11 < *(unsigned int *)(a3 + 36))
    {
      v12 = *(_BYTE *)(*(_QWORD *)(a3 + 24) + v11);
      LOBYTE(v151) = v12;
      v13 = HIDWORD(v168);
      if (HIDWORD(v168) == (_DWORD)v168)
      {
        v14 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v167, (WTF *)(HIDWORD(v168) + 1), (unint64_t)&v151);
        v13 = HIDWORD(v168);
        *((_BYTE *)v167 + HIDWORD(v168)) = *v14;
        v10 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        *((_BYTE *)v167 + HIDWORD(v168)) = v12;
      }
      HIDWORD(v168) = v13 + 1;
      if (++v11 >= *(unsigned __int8 *)(v10 + 4))
        goto LABEL_11;
    }
    __break(0xC471u);
LABEL_172:
    JUMPOUT(0x197E060D4);
  }
LABEL_11:
  if (*(_BYTE *)(v10 + 5))
  {
    v15 = 0;
    do
    {
      if (v15 >= *(unsigned int *)(a3 + 52))
      {
        __break(0xC471u);
        JUMPOUT(0x197E060DCLL);
      }
      v16 = *(_BYTE *)(*(_QWORD *)(a3 + 40) + v15);
      LOBYTE(v151) = v16;
      v17 = HIDWORD(v166);
      if (HIDWORD(v166) == (_DWORD)v166)
      {
        v18 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v165, (WTF *)(HIDWORD(v166) + 1), (unint64_t)&v151);
        v17 = HIDWORD(v166);
        *((_BYTE *)v165 + HIDWORD(v166)) = *v18;
        v10 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        *((_BYTE *)v165 + HIDWORD(v166)) = v16;
      }
      HIDWORD(v166) = v17 + 1;
      ++v15;
    }
    while (v15 < *(unsigned __int8 *)(v10 + 5));
  }
  JSC::FTL::OSRExitDescriptor::emitOSRExitLater(*(_QWORD *)(a1 + 32), *(_QWORD **)(a1 + 40), 1, a1 + 48, a3, *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76), v9, (unsigned int **)&v151);
  v26 = (unsigned int *)v151;
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 80);
  if ((v28 & 1) != 0)
  {
    v116 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
    if ((v28 & 2) != 0
      || ((v117 = *(unsigned int *)((v28 & 0xFFFFFFFF8) + 8), (_DWORD)v117 != 0x3FFFFFFF)
        ? (v118 = (_DWORD)v117 == -1)
        : (v118 = 1),
          v118))
    {
      v119 = 2;
    }
    else if (v117 >> 28)
    {
      v128 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v128 = v116;
      *(_DWORD *)(v128 + 8) = v117;
      v119 = 1;
      v116 = v128;
    }
    else
    {
      v119 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
      v116 = v117 << 36;
    }
    v28 = v116 | v119;
  }
  v29 = *(_QWORD *)(*(_QWORD *)v27 + 16);
  v30 = v163;
  v163 = 0;
  v152 = v29;
  v153 = v30;
  v31 = v164;
  v164 = 0;
  v154 = v31;
  v32 = v167;
  v167 = 0;
  v155 = v32;
  v33 = v168;
  v168 = 0;
  v156 = v33;
  v34 = v165;
  v165 = 0;
  v157 = v34;
  v35 = v166;
  v166 = 0;
  v158 = v35;
  v151 = (void (**)(JSC::SnippetParams *__hidden))&off_1E3590198;
  v159 = v27;
  v160 = a3;
  if ((v28 & 1) != 0)
  {
    v120 = v28 & 0xFFFFFFFF8;
    v121 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
    if ((v28 & 2) != 0
      || (v122 = *(unsigned int *)((v28 & 0xFFFFFFFF8) + 8), (_DWORD)v122 == 0x3FFFFFFF)
      || (_DWORD)v122 == -1)
    {
      v123 = 2;
    }
    else if (v122 >> 28)
    {
      v129 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v129 = v121;
      *(_DWORD *)(v129 + 8) = v122;
      v123 = 1;
      v121 = v129;
    }
    else
    {
      v123 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
      v121 = v122 << 36;
    }
    v161 = v121 | v123;
    v162 = 0;
    if (v120)
      WTF::fastFree(v120, v19, v20, v21, v22, v23, v24, v25);
  }
  else
  {
    v161 = v28;
    v162 = 0;
  }
  v36 = &v140;
  v37 = *(unsigned int **)(*(_QWORD *)(a1 + 24) + 8);
  if (v37)
  {
    v38 = v37 + 2;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
  }
  v40 = v37 + 2;
  (*(void (**)(WTF **__return_ptr, unsigned int *, uint64_t, void (***)(JSC::SnippetParams *__hidden)))(*(_QWORD *)v37 + 16))(&v147, v37, a2, &v151);
  do
  {
    v48 = __ldaxr(v40);
    v49 = v48 - 1;
  }
  while (__stlxr(v49, v40));
  if (!v49)
  {
    atomic_store(1u, v37 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
  }
  v50 = (WTF *)v146;
  v144 = (WTF *)v146;
  v145 = 2;
  if (*(_WORD *)(a1 + 88) == 192)
  {
    v51 = (JSC::AssemblerBuffer *)(a2 + 56);
    for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a2 + 192))
      {
        v126 = v50;
        v127 = v51;
        JSC::AssemblerBuffer::outOfLineGrow(v51, v41, v42, v43, v44, v45, v46, v47);
        v51 = v127;
        v50 = v126;
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
      i = *(_DWORD *)(a2 + 200) + 4;
    }
    v53 = i;
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v51, v41, v42, v43, v44, v45, v46, v47);
      v53 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v53) = 335544320;
    *(_DWORD *)(a2 + 200) += 4;
    if (*(_BYTE *)(a2 + 328))
      v54 = 69;
    else
      v54 = 65;
    v139 = i;
    v140 = 0;
    v141 = v54;
    v142 = 15;
    v143 = -1;
    if (i != -1)
    {
      if (HIDWORD(v145) == (_DWORD)v145)
      {
        v55 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v144, (void *)(HIDWORD(v145) + 1), (unint64_t)&v139, v43, v44, v45, v46, v47);
        v36 = v55 + 1;
        v56 = (char *)v144 + 12 * HIDWORD(v145);
        *(_DWORD *)v56 = *v55;
      }
      else
      {
        v56 = (char *)v144 + 12 * HIDWORD(v145);
        *(_DWORD *)v56 = i;
      }
      *(_QWORD *)(v56 + 4) = *(_QWORD *)v36;
      ++HIDWORD(v145);
    }
    if (v149)
    {
      v57 = 0;
      v58 = 0;
      v59 = 12 * v149;
      do
      {
        if (v58 >= v149)
        {
          __break(0xC471u);
          JUMPOUT(0x197E060E4);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v147 + v57), a2, v42, v43, v44, v45, v46, v47);
        ++v58;
        v57 += 12;
      }
      while (v59 != v57);
    }
  }
  v130 = *(_WORD *)(a1 + 88);
  v60 = v149;
  v131 = (WTF *)v133;
  v132 = v149;
  if (v149 < 3)
  {
    v61 = v133;
    if (!v149)
      goto LABEL_51;
    goto LABEL_49;
  }
  if (v149 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197E060FCLL);
  }
  v61 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v149));
  v131 = (WTF *)v61;
  v60 = v149;
  if (v149)
  {
LABEL_49:
    v62 = v147;
    v63 = (WTF *)((char *)v147 + 12 * v60);
    do
    {
      *(_DWORD *)v61 = *(_DWORD *)v62;
      *(_QWORD *)(v61 + 4) = *(_QWORD *)((char *)v62 + 4);
      v62 = (WTF *)((char *)v62 + 12);
      v61 += 12;
    }
    while (v62 != v63);
  }
LABEL_51:
  if (v26)
  {
    do
      v64 = __ldaxr(v26);
    while (__stlxr(v64 + 1, v26));
  }
  v65 = HIDWORD(v145);
  v134 = (WTF *)v26;
  v135 = (WTF *)v138;
  v136 = 2;
  v137 = HIDWORD(v145);
  if (HIDWORD(v145) < 3)
  {
    v67 = v138;
    if (!HIDWORD(v145))
      goto LABEL_60;
    goto LABEL_58;
  }
  if (HIDWORD(v145) >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197E06104);
  }
  v66 = 12 * HIDWORD(v145);
  v67 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v145)));
  v136 = (v66 & 0xFFFFFFFC) / 0xC;
  v135 = (WTF *)v67;
  v65 = HIDWORD(v145);
  if (HIDWORD(v145))
  {
LABEL_58:
    v68 = v144;
    v69 = (WTF *)((char *)v144 + 12 * v65);
    do
    {
      *(_DWORD *)v67 = *(_DWORD *)v68;
      *(_QWORD *)(v67 + 4) = *(_QWORD *)((char *)v68 + 4);
      v68 = (WTF *)((char *)v68 + 12);
      v67 += 12;
    }
    while (v68 != v69);
  }
LABEL_60:
  v77 = WTF::fastMalloc((WTF *)0x70);
  *(_DWORD *)(v77 + 8) = 1;
  *(_QWORD *)v77 = &off_1E3577BD0;
  *(_WORD *)(v77 + 16) = v130;
  v78 = v132;
  v79 = v77 + 40;
  *(_QWORD *)(v77 + 24) = v77 + 40;
  *(_DWORD *)(v77 + 32) = 2;
  *(_DWORD *)(v77 + 36) = v132;
  if (v132 >= 3)
  {
    if (v132 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197E0610CLL);
    }
    v79 = WTF::fastMalloc((WTF *)(12 * v132));
    *(_DWORD *)(v77 + 32) = 12 * v132 / 0xC;
    *(_QWORD *)(v77 + 24) = v79;
    v78 = v132;
  }
  if (v78)
  {
    v80 = v131;
    v81 = (WTF *)((char *)v131 + 12 * v78);
    do
    {
      *(_DWORD *)v79 = *(_DWORD *)v80;
      *(_QWORD *)(v79 + 4) = *(_QWORD *)((char *)v80 + 4);
      v80 = (WTF *)((char *)v80 + 12);
      v79 += 12;
    }
    while (v80 != v81);
  }
  v82 = (unsigned int *)v134;
  if (v134)
  {
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 + 1, v82));
  }
  v84 = v77 + 88;
  *(_QWORD *)(v77 + 64) = v82;
  *(_QWORD *)(v77 + 72) = v77 + 88;
  v85 = v137;
  *(_DWORD *)(v77 + 80) = 2;
  *(_DWORD *)(v77 + 84) = v85;
  if (v85 >= 3)
  {
    if (v85 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197E06114);
    }
    v86 = 12 * v85;
    v84 = WTF::fastMalloc((WTF *)(12 * v85));
    *(_DWORD *)(v77 + 80) = (v86 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)(v77 + 72) = v84;
    LODWORD(v85) = v137;
  }
  if ((_DWORD)v85)
  {
    v87 = v135;
    v88 = (WTF *)((char *)v135 + 12 * v85);
    do
    {
      *(_DWORD *)v84 = *(_DWORD *)v87;
      *(_QWORD *)(v84 + 4) = *(_QWORD *)((char *)v87 + 4);
      v87 = (WTF *)((char *)v87 + 12);
      v84 += 12;
    }
    while (v87 != v88);
  }
  v89 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v89 == *(_DWORD *)(a2 + 240))
  {
    v91 = v89 + (v89 >> 2);
    if (v91 >= 0x10)
      v92 = v91 + 1;
    else
      v92 = 16;
    if (v92 <= v89 + 1)
      v93 = v89 + 1;
    else
      v93 = v92;
    if (v93 >> 29)
    {
      __break(0xC471u);
      goto LABEL_172;
    }
    v94 = *(const void **)(a2 + 232);
    v95 = (void *)WTF::fastMalloc((WTF *)(8 * v93));
    *(_DWORD *)(a2 + 240) = v93;
    *(_QWORD *)(a2 + 232) = v95;
    memcpy(v95, v94, 8 * v89);
    if (v94)
    {
      if (*(const void **)(a2 + 232) == v94)
      {
        *(_QWORD *)(a2 + 232) = 0;
        *(_DWORD *)(a2 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v94, v70, v71, v72, v73, v74, v75, v76);
    }
    v89 = *(unsigned int *)(a2 + 244);
    v90 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v89);
  }
  else
  {
    v90 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v89);
  }
  *v90 = v77;
  *(_DWORD *)(a2 + 244) = v89 + 1;
  v96 = v135;
  if (v138 != (_BYTE *)v135 && v135 != 0)
  {
    v135 = 0;
    v136 = 0;
    WTF::fastFree((unint64_t)v96, v70, v71, v72, v73, v74, v75, v76);
  }
  v98 = (unsigned int *)v134;
  v134 = 0;
  if (v98)
  {
    do
    {
      v99 = __ldaxr(v98);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v98));
    if (!v100)
    {
      atomic_store(1u, v98);
      WTF::fastFree((unint64_t)v98, v70, v71, v72, v73, v74, v75, v76);
    }
  }
  if (v133 != (_BYTE *)v131 && v131 != 0)
    WTF::fastFree((unint64_t)v131, v70, v71, v72, v73, v74, v75, v76);
  v102 = v144;
  if (v50 != v144 && v144 != 0)
  {
    v144 = 0;
    LODWORD(v145) = 0;
    WTF::fastFree((unint64_t)v102, v70, v71, v72, v73, v74, v75, v76);
  }
  v104 = v147;
  if (&v150 != (uint64_t *)v147 && v147)
  {
    v147 = 0;
    v148 = 0;
    WTF::fastFree((unint64_t)v104, v70, v71, v72, v73, v74, v75, v76);
  }
  v105 = v162;
  v162 = 0;
  if (v105)
  {
    do
    {
      v106 = __ldaxr((unsigned int *)v105);
      v107 = v106 - 1;
    }
    while (__stlxr(v107, (unsigned int *)v105));
    if (!v107)
    {
      atomic_store(1u, (unsigned int *)v105);
      v124 = *((_QWORD *)v105 + 1);
      if ((WTF *)((char *)v105 + 24) != (WTF *)v124 && v124 != 0)
      {
        *((_QWORD *)v105 + 1) = 0;
        *((_DWORD *)v105 + 4) = 0;
        WTF::fastFree(v124, v70, v71, v72, v73, v74, v75, v76);
      }
      WTF::fastFree((unint64_t)v105, v70, v71, v72, v73, v74, v75, v76);
    }
  }
  if ((v161 & 1) != 0 && (v161 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v161 & 0xFFFFFFFF8, v70, v71, v72, v73, v74, v75, v76);
  v151 = off_1E35747E0;
  v108 = v157;
  if (v157)
  {
    v157 = 0;
    LODWORD(v158) = 0;
    WTF::fastFree((unint64_t)v108, v70, v71, v72, v73, v74, v75, v76);
  }
  v109 = v155;
  if (v155)
  {
    v155 = 0;
    LODWORD(v156) = 0;
    WTF::fastFree((unint64_t)v109, v70, v71, v72, v73, v74, v75, v76);
  }
  v110 = v153;
  if (v153)
  {
    v153 = 0;
    LODWORD(v154) = 0;
    WTF::fastFree((unint64_t)v110, v70, v71, v72, v73, v74, v75, v76);
  }
  if (v26)
  {
    do
    {
      v111 = __ldaxr(v26);
      v112 = v111 - 1;
    }
    while (__stlxr(v112, v26));
    if (!v112)
    {
      atomic_store(1u, v26);
      WTF::fastFree((unint64_t)v26, v70, v71, v72, v73, v74, v75, v76);
    }
  }
  v113 = (unint64_t)v163;
  if (v163)
  {
    v163 = 0;
    LODWORD(v164) = 0;
    WTF::fastFree(v113, v70, v71, v72, v73, v74, v75, v76);
  }
  v114 = (unint64_t)v165;
  if (v165)
  {
    v165 = 0;
    LODWORD(v166) = 0;
    WTF::fastFree(v114, v70, v71, v72, v73, v74, v75, v76);
  }
  v115 = (unint64_t)v167;
  if (v167)
  {
    v167 = 0;
    LODWORD(v168) = 0;
    WTF::fastFree(v115, v70, v71, v72, v73, v74, v75, v76);
  }
  *(_BYTE *)(a2 + 212) = v6;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckJSCast(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;

  v9 = *(_QWORD *)(a1 + 72);
  if (a1 + 88 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(unsigned int **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v14 = *(_QWORD *)(a1 + 24);
  if (a1 + 40 != v14 && v14 != 0)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckJSCast(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;

  v9 = (WTF *)*((_QWORD *)this + 9);
  if ((WTF *)((char *)this + 88) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v14 = (WTF *)*((_QWORD *)this + 3);
  if ((WTF *)((char *)this + 40) != v14 && v14 != 0)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckJSCast(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  JSC::ExecutableAllocator *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  int v24;
  JSC::ExecutableAllocator *v25;
  unsigned int v26;
  unsigned int v27;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 16);
  if (*(_WORD *)(a1 + 16) == 191)
  {
    if (v3 < 4)
      v4 = 0;
    else
      v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
    v5 = (v3 - v4);
    v6 = a2[23];
    v7 = v5 + v6;
    if (v6 > v5 + v6 || v6 + a2[1] < v7)
      goto LABEL_8;
    v9 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v9)
    {
      v10 = *(int **)(a1 + 24);
      v11 = 12 * v9;
      do
      {
        v12 = *v10;
        if (*v10 < 4)
          v13 = 0;
        else
          v13 = *(_DWORD *)((v12 & 0xFFFFFFFC) + a2[3] - 4);
        v14 = (JSC::ExecutableAllocator *)a2[23];
        v26 = v12 - v13;
        JSC::ARM64Assembler::linkJump(v14, &v26, v7);
        v10 += 3;
        v11 -= 12;
      }
      while (v11);
    }
  }
  else
  {
    if (v3 < 4)
      v15 = 0;
    else
      v15 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
    v16 = (v3 - v15);
    v17 = a2[23];
    v18 = v16 + v17;
    if (v17 > v16 + v17 || v17 + a2[1] < v18)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x197E063DCLL);
    }
    v20 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v20)
    {
      v21 = *(int **)(a1 + 72);
      v22 = 12 * v20;
      do
      {
        v23 = *v21;
        if (*v21 < 4)
          v24 = 0;
        else
          v24 = *(_DWORD *)((v23 & 0xFFFFFFFC) + a2[3] - 4);
        v25 = (JSC::ExecutableAllocator *)a2[23];
        v27 = v23 - v24;
        JSC::ARM64Assembler::linkJump(v25, &v27, v18);
        v21 += 3;
        v22 -= 12;
      }
      while (v22);
    }
  }
}

uint64_t JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDOMGetter(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  result = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3577BF8;
  v5 = *a2;
  *(_QWORD *)(result + 32) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(result + 16) = v5;
  v6 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v9 = *((_QWORD *)a2 + 4);
  v8 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(result + 40) = v6;
  *(_QWORD *)(result + 48) = v9;
  if ((v8 & 1) != 0)
  {
    v14 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v15 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
        ? (v16 = (_DWORD)v15 == -1)
        : (v16 = 1),
          v16))
    {
      v17 = 2;
    }
    else if (v15 >> 28)
    {
      v20 = result;
      v18 = *(_DWORD *)((v8 & 0xFFFFFFFF8) + 8);
      v19 = WTF::fastMalloc((WTF *)0x10);
      result = v20;
      *(_QWORD *)v19 = v14;
      *(_DWORD *)(v19 + 8) = v18;
      v17 = 1;
      v14 = v19;
    }
    else
    {
      v17 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
      v14 = v15 << 36;
    }
    v8 = v14 | v17;
  }
  *(_QWORD *)(result + 56) = v8;
  v10 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = result;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDOMGetter(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDOMGetter(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDOMGetter(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  WTF *v8;
  unsigned int v9;
  uint64_t v10;
  JSC::FTL::ExceptionTarget *v11;
  WTF *v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 *v15;
  JSC::FTL::ExceptionTarget *v16;
  unint64_t v17;
  char v18;
  int v19;
  _BYTE *v20;
  unint64_t v21;
  char v22;
  int v23;
  _BYTE *v24;
  JSC::FTL::ExceptionTarget *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  JSC::FTL::ExceptionTarget *v39;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  WTF *v65;
  unsigned int v66;
  unsigned int v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v92;
  unint64_t v94;
  __int128 *v96;
  _OWORD *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  int v103;
  uint64_t v104;
  JSC::FTL::ExceptionTarget *v105[2];
  WTF *v106;
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  WTF *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF *v115;
  unint64_t v116;
  WTF *v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v122;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v121 = 0;
  v122 = 0;
  v119 = 0;
  v120 = 0;
  v117 = 0;
  v118 = 0;
  if (!*(_DWORD *)(a3 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x197E06DACLL);
  }
  v7 = **(_BYTE **)(a3 + 8);
  v8 = (WTF *)WTF::fastMalloc((WTF *)0x100);
  LODWORD(v118) = 16;
  v117 = v8;
  *(_QWORD *)v8 = v7 & 0x7F | 0x200000000;
  *((_QWORD *)v8 + 1) = 0;
  v9 = *(_DWORD *)(a3 + 20);
  v10 = ++HIDWORD(v118);
  if (v9 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E06DB4);
  }
  v11 = *(JSC::FTL::ExceptionTarget **)(a1 + 16);
  v105[0] = (JSC::FTL::ExceptionTarget *)(*(_BYTE *)(*(_QWORD *)(a3 + 8) + 16) & 0x7F);
  v105[1] = v11;
  if ((_DWORD)v10 == (_DWORD)v118)
  {
    v96 = (__int128 *)WTF::Vector<JSC::SnippetParams::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v117, v10 + 1, (unint64_t)v105);
    v10 = HIDWORD(v118);
    v12 = v117;
    v13 = *v96;
  }
  else
  {
    v12 = v117;
    v13 = *(_OWORD *)v105;
  }
  *((_OWORD *)v12 + v10) = v13;
  v14 = ++HIDWORD(v118);
  v15 = *(unsigned __int8 **)(a1 + 24);
  if (v15[16])
  {
    if (*(_DWORD *)(a3 + 20) <= 2u)
      goto LABEL_128;
    v16 = *(JSC::FTL::ExceptionTarget **)(a1 + 32);
    v105[0] = (JSC::FTL::ExceptionTarget *)(*(_BYTE *)(*(_QWORD *)(a3 + 8) + 32) & 0x7F);
    v105[1] = v16;
    if ((_DWORD)v14 == (_DWORD)v118)
    {
      v97 = (_OWORD *)WTF::Vector<JSC::SnippetParams::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v117, v14 + 1, (unint64_t)v105);
      *((_OWORD *)v117 + HIDWORD(v118)) = *v97;
    }
    else
    {
      *((_OWORD *)v117 + v14) = *(_OWORD *)v105;
    }
    ++HIDWORD(v118);
    v15 = *(unsigned __int8 **)(a1 + 24);
  }
  if (v15[4])
  {
    v17 = 0;
    while (v17 < *(unsigned int *)(a3 + 36))
    {
      v18 = *(_BYTE *)(*(_QWORD *)(a3 + 24) + v17);
      LOBYTE(v105[0]) = v18;
      v19 = HIDWORD(v122);
      if (HIDWORD(v122) == (_DWORD)v122)
      {
        v20 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v121, (WTF *)(HIDWORD(v122) + 1), (unint64_t)v105);
        v19 = HIDWORD(v122);
        *((_BYTE *)v121 + HIDWORD(v122)) = *v20;
        v15 = *(unsigned __int8 **)(a1 + 24);
      }
      else
      {
        *((_BYTE *)v121 + HIDWORD(v122)) = v18;
      }
      HIDWORD(v122) = v19 + 1;
      if (++v17 >= v15[4])
        goto LABEL_19;
    }
LABEL_128:
    __break(0xC471u);
    JUMPOUT(0x197E06D94);
  }
LABEL_19:
  if (v15[5])
  {
    v21 = 0;
    do
    {
      if (v21 >= *(unsigned int *)(a3 + 52))
      {
        __break(0xC471u);
        JUMPOUT(0x197E06D9CLL);
      }
      v22 = *(_BYTE *)(*(_QWORD *)(a3 + 40) + v21);
      LOBYTE(v105[0]) = v22;
      v23 = HIDWORD(v120);
      if (HIDWORD(v120) == (_DWORD)v120)
      {
        v24 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v119, (WTF *)(HIDWORD(v120) + 1), (unint64_t)v105);
        v23 = HIDWORD(v120);
        *((_BYTE *)v119 + HIDWORD(v120)) = *v24;
        v15 = *(unsigned __int8 **)(a1 + 24);
      }
      else
      {
        *((_BYTE *)v119 + HIDWORD(v120)) = v22;
      }
      HIDWORD(v120) = v23 + 1;
      ++v21;
    }
    while (v21 < v15[5]);
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v105);
  v25 = v105[0];
  JSC::FTL::ExceptionTarget::jumps(v105[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v116);
  v105[0] = 0;
  if (v25)
  {
    do
    {
      v33 = __ldaxr((unsigned int *)v25);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, (unsigned int *)v25));
    if (!v34)
    {
      atomic_store(1u, (unsigned int *)v25);
      v84 = (unsigned int *)*((_QWORD *)v25 + 2);
      *((_QWORD *)v25 + 2) = 0;
      if (v84)
      {
        do
        {
          v85 = __ldaxr(v84);
          v86 = v85 - 1;
        }
        while (__stlxr(v86, v84));
        if (!v86)
        {
          atomic_store(1u, v84);
          WTF::fastFree((unint64_t)v84, v26, v27, v28, v29, v30, v31, v32);
        }
      }
      v87 = (unsigned int *)*((_QWORD *)v25 + 1);
      *((_QWORD *)v25 + 1) = 0;
      if (v87)
      {
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89)
        {
          atomic_store(1u, v87);
          WTF::fastFree((unint64_t)v87, v26, v27, v28, v29, v30, v31, v32);
        }
      }
      WTF::fastFree((unint64_t)v25, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  v35 = *(_QWORD *)(a1 + 48);
  v36 = *(_QWORD *)(a1 + 56);
  if ((v36 & 1) != 0)
  {
    v77 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
    if ((v36 & 2) != 0
      || ((v78 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v78 != 0x3FFFFFFF)
        ? (v79 = (_DWORD)v78 == -1)
        : (v79 = 1),
          v79))
    {
      v80 = 2;
    }
    else if (v78 >> 28)
    {
      v101 = *(_QWORD *)(a1 + 48);
      v98 = WTF::fastMalloc((WTF *)0x10);
      v35 = v101;
      *(_QWORD *)v98 = v77;
      *(_DWORD *)(v98 + 8) = v78;
      v80 = 1;
      v77 = v98;
    }
    else
    {
      v80 = v77;
      v77 = v78 << 36;
    }
    v36 = v77 | v80;
  }
  v37 = v116;
  if (v116)
  {
    do
      v38 = __ldaxr((unsigned int *)v37);
    while (__stlxr(v38 + 1, (unsigned int *)v37));
  }
  v39 = *(JSC::FTL::ExceptionTarget **)(*(_QWORD *)v35 + 16);
  v40 = v117;
  v117 = 0;
  v105[1] = v39;
  v106 = v40;
  v41 = v118;
  v118 = 0;
  v107 = v41;
  v42 = v121;
  v121 = 0;
  v108 = v42;
  v43 = v122;
  v122 = 0;
  v109 = v43;
  v44 = v119;
  v119 = 0;
  v110 = v44;
  v45 = v120;
  v120 = 0;
  v111 = v45;
  v105[0] = (JSC::FTL::ExceptionTarget *)&off_1E3590198;
  v46 = v36;
  v112 = v35;
  v113 = a3;
  if ((v36 & 1) != 0)
  {
    v81 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
    if ((v36 & 2) != 0
      || (v82 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v82 == 0x3FFFFFFF)
      || (_DWORD)v82 == -1)
    {
      v83 = 2;
    }
    else if (v82 >> 28)
    {
      v99 = *(_DWORD *)((v36 & 0xFFFFFFFF8) + 8);
      v100 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v100 = v81;
      *(_DWORD *)(v100 + 8) = v99;
      v83 = 1;
      v81 = v100;
    }
    else
    {
      v83 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
      v81 = v82 << 36;
    }
    v46 = v81 | v83;
  }
  v114 = v46;
  if (v37)
  {
    do
      v47 = __ldaxr((unsigned int *)v37);
    while (__stlxr(v47 + 1, (unsigned int *)v37));
    v115 = (WTF *)v37;
    do
    {
      v48 = __ldaxr((unsigned int *)v37);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, (unsigned int *)v37));
    if (!v49)
    {
      atomic_store(1u, (unsigned int *)v37);
      v90 = *(_QWORD *)(v37 + 8);
      if (v37 + 24 != v90 && v90 != 0)
      {
        *(_QWORD *)(v37 + 8) = 0;
        *(_DWORD *)(v37 + 16) = 0;
        WTF::fastFree(v90, v26, v27, v28, v29, v30, v31, v32);
      }
      WTF::fastFree(v37, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  else
  {
    v115 = 0;
  }
  if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v36 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
  v50 = *(unsigned int **)(*(_QWORD *)(a1 + 24) + 8);
  if (v50)
  {
    v51 = v50 + 2;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 + 1, v51));
  }
  (*(void (**)(WTF **__return_ptr, unsigned int *, uint64_t, JSC::FTL::ExceptionTarget **))(*(_QWORD *)v50 + 16))(&v102, v50, a2, v105);
  v60 = v102;
  if (&v104 != (uint64_t *)v102 && v102 != 0)
  {
    v102 = 0;
    v103 = 0;
    WTF::fastFree((unint64_t)v60, v53, v54, v55, v56, v57, v58, v59);
  }
  v62 = v50 + 2;
  do
  {
    v63 = __ldaxr(v62);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, v62));
  if (!v64)
  {
    atomic_store(1u, v50 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
  }
  v65 = v115;
  v115 = 0;
  if (v65)
  {
    do
    {
      v66 = __ldaxr((unsigned int *)v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, (unsigned int *)v65));
    if (!v67)
    {
      atomic_store(1u, (unsigned int *)v65);
      v92 = *((_QWORD *)v65 + 1);
      if ((WTF *)((char *)v65 + 24) != (WTF *)v92 && v92 != 0)
      {
        *((_QWORD *)v65 + 1) = 0;
        *((_DWORD *)v65 + 4) = 0;
        WTF::fastFree(v92, v53, v54, v55, v56, v57, v58, v59);
      }
      WTF::fastFree((unint64_t)v65, v53, v54, v55, v56, v57, v58, v59);
    }
  }
  if ((v114 & 1) != 0 && (v114 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v114 & 0xFFFFFFFF8, v53, v54, v55, v56, v57, v58, v59);
  v105[0] = (JSC::FTL::ExceptionTarget *)off_1E35747E0;
  v68 = v110;
  if (v110)
  {
    v110 = 0;
    LODWORD(v111) = 0;
    WTF::fastFree((unint64_t)v68, v53, v54, v55, v56, v57, v58, v59);
  }
  v69 = v108;
  if (v108)
  {
    v108 = 0;
    LODWORD(v109) = 0;
    WTF::fastFree((unint64_t)v69, v53, v54, v55, v56, v57, v58, v59);
  }
  v70 = v106;
  if (v106)
  {
    v106 = 0;
    LODWORD(v107) = 0;
    WTF::fastFree((unint64_t)v70, v53, v54, v55, v56, v57, v58, v59);
  }
  v71 = v116;
  v116 = 0;
  if (v71)
  {
    do
    {
      v72 = __ldaxr((unsigned int *)v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, (unsigned int *)v71));
    if (!v73)
    {
      atomic_store(1u, (unsigned int *)v71);
      v94 = *(_QWORD *)(v71 + 8);
      if (v71 + 24 != v94 && v94 != 0)
      {
        *(_QWORD *)(v71 + 8) = 0;
        *(_DWORD *)(v71 + 16) = 0;
        WTF::fastFree(v94, v53, v54, v55, v56, v57, v58, v59);
      }
      WTF::fastFree(v71, v53, v54, v55, v56, v57, v58, v59);
    }
  }
  v74 = (unint64_t)v117;
  if (v117)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree(v74, v53, v54, v55, v56, v57, v58, v59);
  }
  v75 = (unint64_t)v119;
  if (v119)
  {
    v119 = 0;
    LODWORD(v120) = 0;
    WTF::fastFree(v75, v53, v54, v55, v56, v57, v58, v59);
  }
  v76 = (unint64_t)v121;
  if (v121)
  {
    v121 = 0;
    LODWORD(v122) = 0;
    WTF::fastFree(v76, v53, v54, v55, v56, v57, v58, v59);
  }
  *(_BYTE *)(a2 + 212) = v6;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowDateObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

uint64_t JSC::FTL::Output::loadDouble(JSC::FTL::Output *this, JSC::B3::Value *a2, const JSC::FTL::AbstractHeap *a3)
{
  const JSC::FTL::AbstractHeap *v4;
  uint64_t v5;

  v4 = JSC::FTL::Output::address(this, a2, a3);
  return JSC::FTL::Output::load((uint64_t)this, v4, v5, 4);
}

double _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB314compileDateGetEvENKUlRKNS0_12AbstractHeapES5_PT_T0_E_clIFNS_24ExceptionOperationResultIxEEPNS_2VMEPNS_12DateInstanceEEZNS2_14compileDateGetEvEUlPNS_2B35ValueEE_EEDaS5_S5_S7_S8_@<D0>(JSC::B3::Value ***a1@<X0>, JSC::FTL::AbstractHeap *a2@<X1>, const JSC::FTL::AbstractHeap *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t **v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  JSC::B3::Value *v56;
  JSC::B3::Value *v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t Double;
  uint64_t v64;
  uint64_t v65;
  JSC::B3::Value *v66;
  JSC::B3::Value *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::B3::Value *v76;
  JSC::B3::Value *v77;
  JSC::B3::Value *v78;
  uint64_t v79;
  uint64_t v80;
  JSC::B3::Value *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  JSC::B3::Value *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char **v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  JSC::B3::Value *v111;
  uint64_t v112;
  uint64_t v113;
  char **v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  double result;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  JSC::FTL::AbstractHeap *v126;
  const JSC::FTL::AbstractHeap *v127;
  uint64_t v128;
  __n128 v129;
  uint64_t v130;
  char v131;
  uint64_t *v132;

  v9 = (uint64_t)*a1;
  v10 = JSC::B3::Procedure::addBlock(a5, (*a1)[3470], *((double *)*a1 + 3475));
  v11 = (uint64_t)v10;
  v12 = *(_QWORD *)(v9 + 27784);
  v127 = a3;
  v128 = a4;
  if (v12)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(v9 + 27808), v12, (uint64_t)v10);
  }
  else
  {
    v129.n128_u64[0] = (unint64_t)v10;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    v14[3] = *(_QWORD *)(v9 + 27816);
    *(_QWORD *)(v9 + 27816) = v14;
    v132 = v14;
    v14[2] = v11;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(v9 + 27808), (uint64_t *)&v129, (uint64_t *)&v132, v15, v16, v17, v18, v19, (uint64_t)&v130);
    v13 = v132;
    v20 = *(uint64_t ***)(v9 + 27832);
    *v132 = v9 + 27824;
    v13[1] = (uint64_t)v20;
    *v20 = v13;
    *(_QWORD *)(v9 + 27832) = v13;
  }
  v21 = JSC::B3::Procedure::addBlock(v13, *(JSC::B3::Procedure **)(v9 + 27760), *(double *)(v9 + 27800));
  v22 = (uint64_t)v21;
  v23 = *(_QWORD *)(v9 + 27784);
  v126 = a2;
  if (v23)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(v9 + 27808), v23, (uint64_t)v21);
  }
  else
  {
    v129.n128_u64[0] = (unint64_t)v21;
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v25 = 0u;
    *((_OWORD *)v25 + 1) = 0u;
    v25[3] = *(_QWORD *)(v9 + 27816);
    *(_QWORD *)(v9 + 27816) = v25;
    v132 = v25;
    v25[2] = v22;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(v9 + 27808), (uint64_t *)&v129, (uint64_t *)&v132, v26, v27, v28, v29, v30, (uint64_t)&v130);
    v24 = v132;
    v31 = *(uint64_t ***)(v9 + 27832);
    *v132 = v9 + 27824;
    v24[1] = (uint64_t)v31;
    *v31 = v24;
    *(_QWORD *)(v9 + 27832) = v24;
  }
  v32 = JSC::B3::Procedure::addBlock(v24, *(JSC::B3::Procedure **)(v9 + 27760), *(double *)(v9 + 27800));
  v33 = (uint64_t)v32;
  v34 = *(_QWORD *)(v9 + 27784);
  if (v34)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(v9 + 27808), v34, (uint64_t)v32);
  }
  else
  {
    v129.n128_u64[0] = (unint64_t)v32;
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v36 = 0u;
    *((_OWORD *)v36 + 1) = 0u;
    v36[3] = *(_QWORD *)(v9 + 27816);
    *(_QWORD *)(v9 + 27816) = v36;
    v132 = v36;
    v36[2] = v33;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(v9 + 27808), (uint64_t *)&v129, (uint64_t *)&v132, v37, v38, v39, v40, v41, (uint64_t)&v130);
    v35 = v132;
    v42 = *(uint64_t ***)(v9 + 27832);
    *v132 = v9 + 27824;
    v35[1] = (uint64_t)v42;
    *v42 = v35;
    *(_QWORD *)(v9 + 27832) = v35;
  }
  v43 = JSC::B3::Procedure::addBlock(v35, *(JSC::B3::Procedure **)(v9 + 27760), *(double *)(v9 + 27800));
  v44 = (uint64_t)v43;
  v45 = *(_QWORD *)(v9 + 27784);
  if (v45)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(v9 + 27808), v45, (uint64_t)v43);
  }
  else
  {
    v129.n128_u64[0] = (unint64_t)v43;
    v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v46 = 0u;
    *((_OWORD *)v46 + 1) = 0u;
    v46[3] = *(_QWORD *)(v9 + 27816);
    *(_QWORD *)(v9 + 27816) = v46;
    v132 = v46;
    v46[2] = v44;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(v9 + 27808), (uint64_t *)&v129, (uint64_t *)&v132, v47, v48, v49, v50, v51, (uint64_t)&v130);
    v52 = v132;
    v53 = *(uint64_t ***)(v9 + 27832);
    *v132 = v9 + 27824;
    v52[1] = (uint64_t)v53;
    *v53 = v52;
    *(_QWORD *)(v9 + 27832) = v52;
  }
  v54 = *a1[1];
  v55 = *(_QWORD *)(v9 + 616);
  if (v55)
  {
    v56 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v9 + 27640), v55);
    v54 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(v9 + 27640), v54, v56);
  }
  v57 = (JSC::B3::Value *)JSC::FTL::Output::load(v9 + 27640, (const JSC::FTL::AbstractHeap *)(v9 + 592), (uint64_t)v54, 2);
  v58 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(v9 + 27640), v57);
  JSC::FTL::Output::branch((_QWORD *)(v9 + 27640), (uint64_t)v58, v11, v33, NAN, NAN, v59, v60, v61, v62);
  *(_QWORD *)(v9 + 27776) = v11;
  v125 = *(_QWORD *)(v9 + 27784);
  *(_QWORD *)(v9 + 27784) = v22;
  Double = JSC::FTL::Output::loadDouble((JSC::FTL::Output *)(v9 + 27640), *a1[1], (const JSC::FTL::AbstractHeap *)(v9 + 544));
  v64 = JSC::FTL::Output::loadDouble((JSC::FTL::Output *)(v9 + 27640), v57, v126);
  v65 = *(_QWORD *)(v9 + 27776);
  v66 = *(JSC::B3::Value **)(v9 + 27760);
  v67 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(v9 + 27768), Double, v64);
  JSC::B3::Procedure::addValueImpl(v66, v67);
  v130 = (uint64_t)v67;
  v72 = (char **)(v65 + 8);
  v73 = *(unsigned int *)(v65 + 20);
  if ((_DWORD)v73 == *(_DWORD *)(v65 + 16))
  {
    v121 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72, v73 + 1, (unint64_t)&v130);
    v73 = *(unsigned int *)(v65 + 20);
    *(_QWORD *)(*(_QWORD *)(v65 + 8) + 8 * v73) = *(_QWORD *)v121;
    v74 = v130;
  }
  else
  {
    *(_QWORD *)&(*v72)[8 * v73] = v67;
    v74 = (uint64_t)v67;
  }
  *(_DWORD *)(v65 + 20) = v73 + 1;
  *(_QWORD *)(v74 + 32) = v65;
  JSC::FTL::Output::branch((_QWORD *)(v9 + 27640), (uint64_t)v67, v33, v22, NAN, NAN, v68, v69, v70, v71);
  *(_QWORD *)(v9 + 27776) = v22;
  *(_QWORD *)(v9 + 27784) = v33;
  v75 = *((_QWORD *)v127 + 3);
  if (v75)
  {
    v76 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v9 + 27640), v75);
    v57 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(v9 + 27640), v57, v76);
  }
  v77 = (JSC::B3::Value *)JSC::FTL::Output::load(v9 + 27640, v127, (uint64_t)v57, 1);
  v78 = (JSC::B3::Value *)JSC::FTL::Output::neg((JSC::FTL::Output *)(v128 + 27640), v77);
  v80 = *(_QWORD *)(v9 + 27776);
  v81 = *(JSC::B3::Value **)(v9 + 27760);
  v82 = *(_QWORD *)(v9 + 27768);
  v83 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v83 + 8) = -1;
  *(_WORD *)(v83 + 12) = 152;
  *(_DWORD *)(v83 + 16) = 0;
  *(_BYTE *)(v83 + 20) = 1;
  *(_QWORD *)v83 = &unk_1E357EDA0;
  *(_QWORD *)(v83 + 40) = 0;
  *(_QWORD *)(v83 + 48) = v79;
  *(_QWORD *)(v83 + 24) = v82;
  *(_QWORD *)(v83 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v81, (JSC::B3::Value *)v83);
  v130 = v83;
  v87 = (char **)(v80 + 8);
  v88 = *(unsigned int *)(v80 + 20);
  if ((_DWORD)v88 == *(_DWORD *)(v80 + 16))
  {
    v122 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v87, v88 + 1, (unint64_t)&v130);
    v88 = *(unsigned int *)(v80 + 20);
    *(_QWORD *)(*(_QWORD *)(v80 + 8) + 8 * v88) = *(_QWORD *)v122;
    v89 = v130;
  }
  else
  {
    *(_QWORD *)&(*v87)[8 * v88] = v83;
    v89 = v83;
  }
  *(_DWORD *)(v80 + 20) = v88 + 1;
  *(_QWORD *)(v89 + 32) = v80;
  v90 = *(_QWORD *)(v9 + 27776);
  v91 = *(_QWORD *)(v9 + 27760);
  v92 = *(_QWORD *)(v9 + 27768);
  v130 = v44;
  v131 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v90, v91, 154, v92, &v130, v84, v85, v86);
  *(_QWORD *)(v9 + 27776) = v33;
  *(_QWORD *)(v9 + 27784) = v44;
  v98 = *(_QWORD *)(v9 + 27776);
  v99 = *(JSC::B3::Value **)(v9 + 27760);
  v100 = *(_QWORD *)(v9 + 27768);
  v101 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v101 + 8) = -1;
  *(_WORD *)(v101 + 12) = 152;
  *(_DWORD *)(v101 + 16) = 0;
  *(_BYTE *)(v101 + 20) = 1;
  *(_QWORD *)v101 = &unk_1E357EDA0;
  *(_QWORD *)(v101 + 40) = 0;
  *(_QWORD *)(v101 + 48) = v97;
  *(_QWORD *)(v101 + 24) = v100;
  *(_QWORD *)(v101 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v99, (JSC::B3::Value *)v101);
  v130 = v101;
  v105 = (char **)(v98 + 8);
  v106 = *(unsigned int *)(v98 + 20);
  if ((_DWORD)v106 == *(_DWORD *)(v98 + 16))
  {
    v123 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v105, v106 + 1, (unint64_t)&v130);
    v106 = *(unsigned int *)(v98 + 20);
    *(_QWORD *)(*(_QWORD *)(v98 + 8) + 8 * v106) = *(_QWORD *)v123;
    v107 = v130;
  }
  else
  {
    *(_QWORD *)&(*v105)[8 * v106] = v101;
    v107 = v101;
  }
  *(_DWORD *)(v98 + 20) = v106 + 1;
  *(_QWORD *)(v107 + 32) = v98;
  v108 = *(_QWORD *)(v9 + 27776);
  v109 = *(_QWORD *)(v9 + 27760);
  v110 = *(_QWORD *)(v9 + 27768);
  v130 = v44;
  v131 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v108, v109, 154, v110, &v130, v102, v103, v104);
  *(_QWORD *)(v9 + 27776) = v44;
  *(_QWORD *)(v9 + 27784) = v125;
  v111 = *(JSC::B3::Value **)(v9 + 27760);
  v112 = *(_QWORD *)(v9 + 27768);
  v113 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v113 = off_1E357F5F0;
  *(_DWORD *)(v113 + 8) = -1;
  *(_WORD *)(v113 + 12) = 153;
  *(_DWORD *)(v113 + 16) = 2;
  *(_BYTE *)(v113 + 20) = 0;
  *(_QWORD *)(v113 + 24) = v112;
  *(_QWORD *)(v113 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v111, (JSC::B3::Value *)v113);
  v130 = v113;
  v114 = (char **)(v44 + 8);
  v115 = *(unsigned int *)(v44 + 20);
  if ((_DWORD)v115 == *(_DWORD *)(v44 + 16))
  {
    v124 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v114, v115 + 1, (unint64_t)&v130);
    v115 = *(unsigned int *)(v44 + 20);
    *(_QWORD *)(*(_QWORD *)(v44 + 8) + 8 * v115) = *(_QWORD *)v124;
    v116 = v130;
  }
  else
  {
    *(_QWORD *)&(*v114)[8 * v115] = v113;
    v116 = v113;
  }
  *(_DWORD *)(v44 + 20) = v115 + 1;
  *(_QWORD *)(v116 + 32) = v44;
  if ((*(_WORD *)(v83 + 12) & 0xFFF) == 0x98)
    v117 = v83;
  else
    v117 = 0;
  *(_QWORD *)(v117 + 40) = v113;
  if ((*(_WORD *)(v101 + 12) & 0xFFF) == 0x98)
    v118 = v101;
  else
    v118 = 0;
  *(_QWORD *)(v118 + 40) = v113;
  v132 = *(uint64_t **)(v9 + 28224);
  v119 = *(_QWORD *)(v9 + 28168);
  v129.n128_u64[0] = v113;
  v129.n128_u64[1] = v119;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v130, (uint64_t *)(v9 + 27936), (uint64_t *)&v132, &v129).n128_u64[0];
  return result;
}

double _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB314compileDateGetEvENKUlRKNS0_12AbstractHeapES5_PT_T0_E_clIFNS_24ExceptionOperationResultIxEEPNS_2VMEPNS_12DateInstanceEEZNS2_14compileDateGetEvEUlPNS_2B35ValueEE0_EEDaS5_S5_S7_S8_(JSC::B3::Value ***a1, const JSC::FTL::AbstractHeap *a2, const JSC::FTL::AbstractHeap *a3, uint64_t a4)
{
  uint64_t *v7;
  JSC::FTL::Output *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::B3::BasicBlock *v12;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *Double;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  uint64_t v54;

  v7 = (uint64_t *)*a1;
  v8 = (JSC::FTL::Output *)(*a1 + 3455);
  v9 = JSC::FTL::Output::newBlock(v8);
  v10 = JSC::FTL::Output::newBlock(v8);
  v11 = JSC::FTL::Output::newBlock(v8);
  v12 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v8);
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr(v8, *a1[1], (const JSC::FTL::AbstractHeap *)(v7 + 74));
  v14 = JSC::FTL::Output::notZero64(v8, Ptr);
  JSC::FTL::Output::branch(v8, (uint64_t)v14, v9, v11, NAN, NAN, v15, v16, v17, v18);
  v7[3472] = v9;
  v54 = v7[3473];
  v7[3473] = v10;
  Double = (JSC::B3::Value *)JSC::FTL::Output::loadDouble(v8, *a1[1], (const JSC::FTL::AbstractHeap *)(v7 + 68));
  v20 = (JSC::B3::Value *)JSC::FTL::Output::loadDouble(v8, Ptr, a2);
  v21 = JSC::FTL::Output::doubleNotEqualOrUnordered(v8, Double, v20);
  JSC::FTL::Output::branch(v8, (uint64_t)v21, v11, v10, NAN, NAN, v22, v23, v24, v25);
  v7[3472] = v10;
  v7[3473] = v11;
  v26 = (JSC::B3::Value *)JSC::FTL::Output::load32(v8, Ptr, a3);
  v29 = JSC::FTL::Output::anchor(v8, v28);
  v31 = v30;
  JSC::FTL::Output::jump(v8, v12, v32, v33, v34, v35, v36, v37);
  v7[3472] = v11;
  v7[3473] = (uint64_t)v12;
  v43 = JSC::FTL::Output::anchor(v8, v42);
  v45 = v44;
  JSC::FTL::Output::jump(v8, v12, v46, v47, v48, v49, v50, v51);
  v7[3472] = (uint64_t)v12;
  v7[3473] = v54;
  v52 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v8, 2, v29, v31, v43, v45);
}

double _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB314compileDateGetEvENKUlRKNS0_12AbstractHeapES5_PT_T0_E_clIFNS_24ExceptionOperationResultIxEEPNS_2VMEPNS_12DateInstanceEEZZNS2_14compileDateGetEvENKUlS5_S5_S7_E_clISH_EEDaS5_S5_S7_EUlPNS_2B35ValueEE_EESK_S5_S5_S7_S8_(JSC::B3::Value ***a1, const JSC::FTL::AbstractHeap *a2, const JSC::FTL::AbstractHeap *a3, uint64_t a4)
{
  uint64_t *v7;
  JSC::FTL::Output *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::B3::BasicBlock *v12;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *Double;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  JSC::B3::Value *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::B3::Value *v51;
  uint64_t v53;

  v7 = (uint64_t *)*a1;
  v8 = (JSC::FTL::Output *)(*a1 + 3455);
  v9 = JSC::FTL::Output::newBlock(v8);
  v10 = JSC::FTL::Output::newBlock(v8);
  v11 = JSC::FTL::Output::newBlock(v8);
  v12 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v8);
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr(v8, *a1[1], (const JSC::FTL::AbstractHeap *)(v7 + 74));
  v14 = JSC::FTL::Output::notZero64(v8, Ptr);
  JSC::FTL::Output::branch(v8, (uint64_t)v14, v9, v11, NAN, NAN, v15, v16, v17, v18);
  v7[3472] = v9;
  v53 = v7[3473];
  v7[3473] = v10;
  Double = (JSC::B3::Value *)JSC::FTL::Output::loadDouble(v8, *a1[1], (const JSC::FTL::AbstractHeap *)(v7 + 68));
  v20 = (JSC::B3::Value *)JSC::FTL::Output::loadDouble(v8, Ptr, a2);
  v21 = JSC::FTL::Output::doubleNotEqualOrUnordered(v8, Double, v20);
  JSC::FTL::Output::branch(v8, (uint64_t)v21, v11, v10, NAN, NAN, v22, v23, v24, v25);
  v7[3472] = v10;
  v7[3473] = v11;
  v26 = (JSC::B3::Value *)JSC::FTL::Output::load32(v8, Ptr, a3);
  v28 = JSC::FTL::Output::anchor(v8, v27);
  v30 = v29;
  JSC::FTL::Output::jump(v8, v12, v31, v32, v33, v34, v35, v36);
  v7[3472] = v11;
  v7[3473] = (uint64_t)v12;
  v42 = JSC::FTL::Output::anchor(v8, v41);
  v44 = v43;
  JSC::FTL::Output::jump(v8, v12, v45, v46, v47, v48, v49, v50);
  v7[3472] = (uint64_t)v12;
  v7[3473] = v53;
  v51 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v8, 2, v28, v30, v42, v44);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDateGet(void)::{lambda(JSC::B3::Value *)#2}::operator()(uint64_t a1, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;

  v3 = (JSC::FTL::Output *)(a1 + 27640);
  v4 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1900);
  return JSC::FTL::Output::sub(v3, a2, v4);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowDataViewObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#2}::operator()(uint64_t **a1)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  char v13;

  v2 = *a1 + 3455;
  v3 = JSC::FTL::Output::load16ZeroExt32(v2, *a1[1], a1[1][1]);
  v4 = (__int128 *)JSC::FTL::Output::patchpoint(v2, 1);
  v12 = 0;
  v13 = 3;
  JSC::B3::StackmapValue::append(v4, v3, (unint64_t)&v12);
  v5 = *a1[2];
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E3577C20;
  *(_QWORD *)(v6 + 16) = v5;
  v7 = (unsigned int *)*((_QWORD *)v4 + 7);
  *((_QWORD *)v4 + 7) = v6;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 15) = 0;
  *((_QWORD *)v4 + 16) = 0;
  return v4;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#1}::operator()(_QWORD *a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  const JSC::FTL::AbstractHeap *v5;
  uint64_t v6;

  v2 = *(unsigned __int8 *)(*a1 + 1);
  v3 = (_QWORD *)(a1[1] + 27640);
  v4 = a1[2];
  v5 = *(const JSC::FTL::AbstractHeap **)v4;
  v6 = *(_QWORD *)(v4 + 8);
  if (v2)
    return JSC::FTL::Output::load16SignExt32((uint64_t)v3, v5, v6);
  else
    return (JSC::B3::Value *)JSC::FTL::Output::load16ZeroExt32(v3, (uint64_t)v5, v6);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitCodeBasedOnEndiannessBranch<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#1},JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#2}>@<X0>(uint64_t a1@<X0>, JSC::B3::Value *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t **v40;
  JSC::B3::Value *v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  const JSC::FTL::AbstractHeap *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  JSC::B3::Value *v86;
  uint64_t v87;
  uint64_t v88;
  char **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::B3::Value *v96;
  uint64_t v97;
  uint64_t v98;
  char **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  char v115;

  v8 = JSC::B3::Procedure::addBlock(a5, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v9 = (uint64_t)v8;
  v10 = *(_QWORD *)(a1 + 27784);
  if (v10)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v10, (uint64_t)v8);
  }
  else
  {
    v112 = v8;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    v12[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v12;
    v111 = v12;
    v12[2] = v9;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v112, (uint64_t *)&v111, v13, v14, v15, v16, v17, (uint64_t)&v113);
    v11 = v111;
    v18 = *(uint64_t ***)(a1 + 27832);
    *v111 = a1 + 27824;
    v11[1] = (uint64_t)v18;
    *v18 = v11;
    *(_QWORD *)(a1 + 27832) = v11;
  }
  v19 = JSC::B3::Procedure::addBlock(v11, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v20 = (uint64_t)v19;
  v21 = *(_QWORD *)(a1 + 27784);
  if (v21)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v21, (uint64_t)v19);
  }
  else
  {
    v112 = v19;
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    v23[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v23;
    v111 = v23;
    v23[2] = v20;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v112, (uint64_t *)&v111, v24, v25, v26, v27, v28, (uint64_t)&v113);
    v22 = v111;
    v29 = *(uint64_t ***)(a1 + 27832);
    *v111 = a1 + 27824;
    v22[1] = (uint64_t)v29;
    *v29 = v22;
    *(_QWORD *)(a1 + 27832) = v22;
  }
  v30 = JSC::B3::Procedure::addBlock(v22, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v31 = (uint64_t)v30;
  v32 = *(_QWORD *)(a1 + 27784);
  if (v32)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v32, (uint64_t)v30);
  }
  else
  {
    v112 = v30;
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v33 = 0u;
    *((_OWORD *)v33 + 1) = 0u;
    v33[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v33;
    v111 = v33;
    v33[2] = v31;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v112, (uint64_t *)&v111, v34, v35, v36, v37, v38, (uint64_t)&v113);
    v39 = v111;
    v40 = *(uint64_t ***)(a1 + 27832);
    *v111 = a1 + 27824;
    v39[1] = (uint64_t)v40;
    *v40 = v39;
    *(_QWORD *)(a1 + 27832) = v39;
  }
  v41 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
  v42 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), a2, v41);
  v43 = *(_QWORD *)(a1 + 27776);
  v44 = *(JSC::B3::Value **)(a1 + 27760);
  v45 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v42, *(_QWORD *)(a1 + 27656));
  JSC::B3::Procedure::addValueImpl(v44, v45);
  v113 = (uint64_t)v45;
  v50 = (char **)(v43 + 8);
  v51 = *(unsigned int *)(v43 + 20);
  if ((_DWORD)v51 == *(_DWORD *)(v43 + 16))
  {
    v105 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50, v51 + 1, (unint64_t)&v113);
    v51 = *(unsigned int *)(v43 + 20);
    *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v51) = *(_QWORD *)v105;
    v52 = v113;
  }
  else
  {
    *(_QWORD *)&(*v50)[8 * v51] = v45;
    v52 = (uint64_t)v45;
  }
  *(_DWORD *)(v43 + 20) = v51 + 1;
  *(_QWORD *)(v52 + 32) = v43;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v45, v9, v20, NAN, NAN, v46, v47, v48, v49);
  *(_QWORD *)(a1 + 27776) = v9;
  v109 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v20;
  v53 = *a4 + 3455;
  v54 = JSC::FTL::Output::load16ZeroExt32(v53, *a4[1], a4[1][1]);
  v55 = (__int128 *)JSC::FTL::Output::patchpoint(v53, 1);
  v113 = v54;
  v114 = 0;
  v115 = 3;
  JSC::B3::StackmapValue::append(v55, v54, (unint64_t)&v114);
  v56 = *a4[2];
  v57 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v57 + 8) = 1;
  *(_QWORD *)v57 = off_1E3577C20;
  *(_QWORD *)(v57 + 16) = v56;
  v58 = (unsigned int *)*((_QWORD *)v55 + 7);
  *((_QWORD *)v55 + 7) = v57;
  if (v58)
  {
    v59 = v58 + 2;
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
  *((_QWORD *)v55 + 14) = 0;
  *((_QWORD *)v55 + 15) = 0;
  *((_QWORD *)v55 + 16) = 0;
  v62 = *((_DWORD *)v55 + 4);
  v63 = *(_QWORD *)(a1 + 27776);
  v64 = *(JSC::B3::Value **)(a1 + 27760);
  v65 = *(_QWORD *)(a1 + 27768);
  v66 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v66 + 8) = -1;
  *(_WORD *)(v66 + 12) = 152;
  *(_DWORD *)(v66 + 16) = 0;
  *(_BYTE *)(v66 + 20) = 1;
  *(_QWORD *)v66 = &unk_1E357EDA0;
  *(_QWORD *)(v66 + 40) = 0;
  *(_QWORD *)(v66 + 48) = v55;
  *(_QWORD *)(v66 + 24) = v65;
  *(_QWORD *)(v66 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v64, (JSC::B3::Value *)v66);
  v113 = v66;
  v70 = (char **)(v63 + 8);
  v71 = *(unsigned int *)(v63 + 20);
  if ((_DWORD)v71 == *(_DWORD *)(v63 + 16))
  {
    v106 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v70, v71 + 1, (unint64_t)&v113);
    v71 = *(unsigned int *)(v63 + 20);
    *(_QWORD *)(*(_QWORD *)(v63 + 8) + 8 * v71) = *(_QWORD *)v106;
    v72 = v113;
  }
  else
  {
    *(_QWORD *)&(*v70)[8 * v71] = v66;
    v72 = v66;
  }
  *(_DWORD *)(v63 + 20) = v71 + 1;
  *(_QWORD *)(v72 + 32) = v63;
  v73 = *(_QWORD *)(a1 + 27776);
  v74 = *(_QWORD *)(a1 + 27760);
  v75 = *(_QWORD *)(a1 + 27768);
  v113 = v31;
  LOBYTE(v114) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v73, v74, 154, v75, &v113, v67, v68, v69);
  *(_QWORD *)(a1 + 27776) = v20;
  *(_QWORD *)(a1 + 27784) = v31;
  v76 = (_QWORD *)(a3[1] + 27640);
  v77 = a3[2];
  v78 = *(const JSC::FTL::AbstractHeap **)v77;
  v79 = *(_QWORD *)(v77 + 8);
  if (*(_BYTE *)(*a3 + 1))
    v80 = (uint64_t)JSC::FTL::Output::load16SignExt32((uint64_t)v76, v78, v79);
  else
    v80 = JSC::FTL::Output::load16ZeroExt32(v76, (uint64_t)v78, v79);
  v84 = v80;
  if (v80)
  {
    v85 = *(_QWORD *)(a1 + 27776);
    v86 = *(JSC::B3::Value **)(a1 + 27760);
    v87 = *(_QWORD *)(a1 + 27768);
    v88 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v88 + 8) = -1;
    *(_WORD *)(v88 + 12) = 152;
    *(_DWORD *)(v88 + 16) = 0;
    *(_BYTE *)(v88 + 20) = 1;
    *(_QWORD *)v88 = &unk_1E357EDA0;
    *(_QWORD *)(v88 + 40) = 0;
    *(_QWORD *)(v88 + 48) = v84;
    *(_QWORD *)(v88 + 24) = v87;
    *(_QWORD *)(v88 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v86, (JSC::B3::Value *)v88);
    v113 = v88;
    v89 = (char **)(v85 + 8);
    v90 = *(unsigned int *)(v85 + 20);
    if ((_DWORD)v90 == *(_DWORD *)(v85 + 16))
    {
      v108 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v89, v90 + 1, (unint64_t)&v113);
      v90 = *(unsigned int *)(v85 + 20);
      *(_QWORD *)(*(_QWORD *)(v85 + 8) + 8 * v90) = *(_QWORD *)v108;
      v91 = v113;
    }
    else
    {
      *(_QWORD *)&(*v89)[8 * v90] = v88;
      v91 = v88;
    }
    *(_DWORD *)(v85 + 20) = v90 + 1;
    *(_QWORD *)(v91 + 32) = v85;
    v92 = *(_QWORD *)(a1 + 27776);
  }
  else
  {
    v88 = 0;
    v92 = 0;
  }
  if (v62 != *(_DWORD *)(v84 + 16))
  {
    __break(0xC471u);
    JUMPOUT(0x197E080B8);
  }
  v93 = *(_QWORD *)(a1 + 27776);
  v94 = *(_QWORD *)(a1 + 27760);
  v95 = *(_QWORD *)(a1 + 27768);
  v113 = v31;
  LOBYTE(v114) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v93, v94, 154, v95, &v113, v81, v82, v83);
  *(_QWORD *)(a1 + 27776) = v31;
  *(_QWORD *)(a1 + 27784) = v109;
  if (!v88 && !v92)
  {
    __break(0xC471u);
    JUMPOUT(0x197E080F8);
  }
  v96 = *(JSC::B3::Value **)(a1 + 27760);
  v97 = *(_QWORD *)(a1 + 27768);
  v98 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v98 = off_1E357F5F0;
  *(_DWORD *)(v98 + 8) = -1;
  *(_WORD *)(v98 + 12) = 153;
  *(_DWORD *)(v98 + 16) = v62;
  *(_BYTE *)(v98 + 20) = 0;
  *(_QWORD *)(v98 + 24) = v97;
  *(_QWORD *)(v98 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v96, (JSC::B3::Value *)v98);
  v113 = v98;
  v99 = (char **)(v31 + 8);
  v100 = *(unsigned int *)(v31 + 20);
  if ((_DWORD)v100 == *(_DWORD *)(v31 + 16))
  {
    v107 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v99, v100 + 1, (unint64_t)&v113);
    v100 = *(unsigned int *)(v31 + 20);
    *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v100) = *(_QWORD *)v107;
    v101 = v113;
  }
  else
  {
    *(_QWORD *)&(*v99)[8 * v100] = v98;
    v101 = v98;
  }
  *(_DWORD *)(v31 + 20) = v100 + 1;
  *(_QWORD *)(v101 + 32) = v31;
  if ((*(_WORD *)(v66 + 12) & 0xFFF) == 0x98)
    v102 = v66;
  else
    v102 = 0;
  *(_QWORD *)(v102 + 40) = v98;
  if (v88 || v92)
  {
    if ((*(_WORD *)(v88 + 12) & 0xFFF) == 0x98)
      v103 = v88;
    else
      v103 = 0;
    *(_QWORD *)(v103 + 40) = v98;
  }
  return v98;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::byteSwap32(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  __int128 *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  char v11;

  if (*((_DWORD *)a2 + 4) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E081D8);
  }
  v3 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 1);
  v10 = 0;
  v11 = 3;
  JSC::B3::StackmapValue::append(v3, (uint64_t)a2, (unint64_t)&v10);
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3577C48;
  v5 = (unsigned int *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 7) = v4;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  *((_QWORD *)v3 + 14) = 0;
  *((_QWORD *)v3 + 15) = 0;
  *((_QWORD *)v3 + 16) = 0;
  return v3;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitCodeBasedOnEndiannessBranch<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#3},JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#4}>@<X0>(uint64_t a1@<X0>, JSC::B3::Value *a2@<X1>, uint64_t **a3@<X2>, _QWORD **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t **v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::B3::Value *v80;
  uint64_t v81;
  uint64_t v82;
  char **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  JSC::B3::Value *v89;
  uint64_t v90;
  uint64_t v91;
  char **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  char v107;

  v9 = JSC::B3::Procedure::addBlock(a5, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v10 = (uint64_t)v9;
  v11 = *(_QWORD *)(a1 + 27784);
  if (v11)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v11, (uint64_t)v9);
  }
  else
  {
    v104 = v9;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v13 = 0u;
    *((_OWORD *)v13 + 1) = 0u;
    v13[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v13;
    v103 = v13;
    v13[2] = v10;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v104, (uint64_t *)&v103, v14, v15, v16, v17, v18, (uint64_t)&v105);
    v12 = v103;
    v19 = *(uint64_t ***)(a1 + 27832);
    *v103 = a1 + 27824;
    v12[1] = (uint64_t)v19;
    *v19 = v12;
    *(_QWORD *)(a1 + 27832) = v12;
  }
  v20 = JSC::B3::Procedure::addBlock(v12, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v21 = (uint64_t)v20;
  v22 = *(_QWORD *)(a1 + 27784);
  if (v22)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v22, (uint64_t)v20);
  }
  else
  {
    v104 = v20;
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v24 = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    v24[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v24;
    v103 = v24;
    v24[2] = v21;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v104, (uint64_t *)&v103, v25, v26, v27, v28, v29, (uint64_t)&v105);
    v23 = v103;
    v30 = *(uint64_t ***)(a1 + 27832);
    *v103 = a1 + 27824;
    v23[1] = (uint64_t)v30;
    *v30 = v23;
    *(_QWORD *)(a1 + 27832) = v23;
  }
  v31 = JSC::B3::Procedure::addBlock(v23, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v32 = (uint64_t)v31;
  v33 = *(_QWORD *)(a1 + 27784);
  if (v33)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v33, (uint64_t)v31);
  }
  else
  {
    v104 = v31;
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v34 = 0u;
    *((_OWORD *)v34 + 1) = 0u;
    v34[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v34;
    v103 = v34;
    v34[2] = v32;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v104, (uint64_t *)&v103, v35, v36, v37, v38, v39, (uint64_t)&v105);
    v40 = v103;
    v41 = *(uint64_t ***)(a1 + 27832);
    *v103 = a1 + 27824;
    v40[1] = (uint64_t)v41;
    *v41 = v40;
    *(_QWORD *)(a1 + 27832) = v40;
  }
  v42 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
  v43 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), a2, v42);
  v44 = *(_QWORD *)(a1 + 27776);
  v45 = *(JSC::B3::Value **)(a1 + 27760);
  v46 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v43, *(_QWORD *)(a1 + 27656));
  JSC::B3::Procedure::addValueImpl(v45, v46);
  v105 = (uint64_t)v46;
  v51 = (char **)(v44 + 8);
  v52 = *(unsigned int *)(v44 + 20);
  if ((_DWORD)v52 == *(_DWORD *)(v44 + 16))
  {
    v98 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v51, v52 + 1, (unint64_t)&v105);
    v52 = *(unsigned int *)(v44 + 20);
    *(_QWORD *)(*(_QWORD *)(v44 + 8) + 8 * v52) = *(_QWORD *)v98;
    v53 = v105;
  }
  else
  {
    *(_QWORD *)&(*v51)[8 * v52] = v46;
    v53 = (uint64_t)v46;
  }
  *(_DWORD *)(v44 + 20) = v52 + 1;
  *(_QWORD *)(v53 + 32) = v44;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v46, v10, v21, NAN, NAN, v47, v48, v49, v50);
  *(_QWORD *)(a1 + 27776) = v10;
  v54 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v21;
  v55 = *a4[1];
  if (*(_DWORD *)(v55 + 16) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E087E8);
  }
  v102 = v54;
  v56 = (__int128 *)JSC::FTL::Output::patchpoint(*a4 + 3455, 1);
  v105 = v55;
  v106 = 0;
  v107 = 3;
  JSC::B3::StackmapValue::append(v56, v55, (unint64_t)&v106);
  v57 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v57 + 8) = 1;
  *(_QWORD *)v57 = off_1E3577C48;
  v58 = (unsigned int *)*((_QWORD *)v56 + 7);
  *((_QWORD *)v56 + 7) = v57;
  if (v58)
  {
    v59 = v58 + 2;
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
  *((_QWORD *)v56 + 14) = 0;
  *((_QWORD *)v56 + 15) = 0;
  *((_QWORD *)v56 + 16) = 0;
  v62 = *((_DWORD *)v56 + 4);
  v63 = *(_QWORD *)(a1 + 27776);
  v64 = *(JSC::B3::Value **)(a1 + 27760);
  v65 = *(_QWORD *)(a1 + 27768);
  v66 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v66 + 8) = -1;
  *(_WORD *)(v66 + 12) = 152;
  *(_DWORD *)(v66 + 16) = 0;
  *(_BYTE *)(v66 + 20) = 1;
  *(_QWORD *)v66 = &unk_1E357EDA0;
  *(_QWORD *)(v66 + 40) = 0;
  *(_QWORD *)(v66 + 48) = v56;
  *(_QWORD *)(v66 + 24) = v65;
  *(_QWORD *)(v66 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v64, (JSC::B3::Value *)v66);
  v105 = v66;
  v70 = (char **)(v63 + 8);
  v71 = *(unsigned int *)(v63 + 20);
  if ((_DWORD)v71 == *(_DWORD *)(v63 + 16))
  {
    v99 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v70, v71 + 1, (unint64_t)&v105);
    v71 = *(unsigned int *)(v63 + 20);
    *(_QWORD *)(*(_QWORD *)(v63 + 8) + 8 * v71) = *(_QWORD *)v99;
    v72 = v105;
  }
  else
  {
    *(_QWORD *)&(*v70)[8 * v71] = v66;
    v72 = v66;
  }
  *(_DWORD *)(v63 + 20) = v71 + 1;
  *(_QWORD *)(v72 + 32) = v63;
  v73 = *(_QWORD *)(a1 + 27776);
  v74 = *(_QWORD *)(a1 + 27760);
  v75 = *(_QWORD *)(a1 + 27768);
  v105 = v32;
  LOBYTE(v106) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v73, v74, 154, v75, &v105, v67, v68, v69);
  *(_QWORD *)(a1 + 27776) = v21;
  *(_QWORD *)(a1 + 27784) = v32;
  v79 = **a3;
  if (v79)
  {
    v80 = *(JSC::B3::Value **)(a1 + 27760);
    v81 = *(_QWORD *)(a1 + 27768);
    v82 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v82 + 8) = -1;
    *(_WORD *)(v82 + 12) = 152;
    *(_DWORD *)(v82 + 16) = 0;
    *(_BYTE *)(v82 + 20) = 1;
    *(_QWORD *)v82 = &unk_1E357EDA0;
    *(_QWORD *)(v82 + 40) = 0;
    *(_QWORD *)(v82 + 48) = v79;
    *(_QWORD *)(v82 + 24) = v81;
    *(_QWORD *)(v82 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v80, (JSC::B3::Value *)v82);
    v105 = v82;
    v83 = (char **)(v21 + 8);
    v84 = *(unsigned int *)(v21 + 20);
    if ((_DWORD)v84 == *(_DWORD *)(v21 + 16))
    {
      v101 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83, v84 + 1, (unint64_t)&v105);
      v84 = *(unsigned int *)(v21 + 20);
      *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8 * v84) = *(_QWORD *)v101;
      v85 = v105;
    }
    else
    {
      *(_QWORD *)&(*v83)[8 * v84] = v82;
      v85 = v82;
    }
    *(_DWORD *)(v21 + 20) = v84 + 1;
    *(_QWORD *)(v85 + 32) = v21;
    v21 = *(_QWORD *)(a1 + 27776);
    v86 = v21;
  }
  else
  {
    v82 = 0;
    v86 = 0;
  }
  if (v62 != *(_DWORD *)(v79 + 16))
  {
    __break(0xC471u);
    JUMPOUT(0x197E08808);
  }
  v87 = *(_QWORD *)(a1 + 27760);
  v88 = *(_QWORD *)(a1 + 27768);
  v105 = v32;
  LOBYTE(v106) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v21, v87, 154, v88, &v105, v76, v77, v78);
  *(_QWORD *)(a1 + 27776) = v32;
  *(_QWORD *)(a1 + 27784) = v102;
  if (!v82 && !v86)
  {
    __break(0xC471u);
    JUMPOUT(0x197E08848);
  }
  v89 = *(JSC::B3::Value **)(a1 + 27760);
  v90 = *(_QWORD *)(a1 + 27768);
  v91 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v91 = off_1E357F5F0;
  *(_DWORD *)(v91 + 8) = -1;
  *(_WORD *)(v91 + 12) = 153;
  *(_DWORD *)(v91 + 16) = v62;
  *(_BYTE *)(v91 + 20) = 0;
  *(_QWORD *)(v91 + 24) = v90;
  *(_QWORD *)(v91 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v89, (JSC::B3::Value *)v91);
  v105 = v91;
  v92 = (char **)(v32 + 8);
  v93 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v93 == *(_DWORD *)(v32 + 16))
  {
    v100 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v92, v93 + 1, (unint64_t)&v105);
    v93 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v93) = *(_QWORD *)v100;
    v94 = v105;
  }
  else
  {
    *(_QWORD *)&(*v92)[8 * v93] = v91;
    v94 = v91;
  }
  *(_DWORD *)(v32 + 20) = v93 + 1;
  *(_QWORD *)(v94 + 32) = v32;
  if ((*(_WORD *)(v66 + 12) & 0xFFF) == 0x98)
    v95 = v66;
  else
    v95 = 0;
  *(_QWORD *)(v95 + 40) = v91;
  if (v82 || v86)
  {
    if ((*(_WORD *)(v82 + 12) & 0xFFF) == 0x98)
      v96 = v82;
    else
      v96 = 0;
    *(_QWORD *)(v96 + 40) = v91;
  }
  return v91;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#5}::operator()(uint64_t a1, const JSC::FTL::AbstractHeap *a2, uint64_t a3)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;

  v3 = (JSC::FTL::Output *)(a1 + 27640);
  v4 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, a2, a3, 3);
  return JSC::FTL::Output::floatToDouble(v3, v4);
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#6}::operator()(uint64_t a1, const JSC::FTL::AbstractHeap *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  char v13;

  v3 = (_QWORD *)(a1 + 27640);
  v4 = JSC::FTL::Output::load(a1 + 27640, a2, a3, 1);
  v5 = (__int128 *)JSC::FTL::Output::patchpoint(v3, 4);
  v12 = 0;
  v13 = 3;
  JSC::B3::StackmapValue::append(v5, v4, (unint64_t)&v12);
  *((_BYTE *)v5 + 168) = 1;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E3577C70;
  v7 = (unsigned int *)*((_QWORD *)v5 + 7);
  *((_QWORD *)v5 + 7) = v6;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  *((_QWORD *)v5 + 14) = 0;
  *((_QWORD *)v5 + 15) = 0;
  *((_QWORD *)v5 + 16) = 0;
  return v5;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitCodeBasedOnEndiannessBranch<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#5},JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#6}>@<X0>(uint64_t a1@<X0>, JSC::B3::Value *a2@<X1>, const JSC::FTL::AbstractHeap ***a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t **v40;
  JSC::B3::Value *v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::FTL::Output *v76;
  JSC::B3::Value *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  JSC::B3::Value *v83;
  uint64_t v84;
  uint64_t v85;
  char **v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  JSC::B3::Value *v93;
  uint64_t v94;
  uint64_t v95;
  char **v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char v112;

  v8 = JSC::B3::Procedure::addBlock(a5, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v9 = (uint64_t)v8;
  v10 = *(_QWORD *)(a1 + 27784);
  if (v10)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v10, (uint64_t)v8);
  }
  else
  {
    v109 = v8;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    v12[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v12;
    v108 = v12;
    v12[2] = v9;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v109, (uint64_t *)&v108, v13, v14, v15, v16, v17, (uint64_t)&v110);
    v11 = v108;
    v18 = *(uint64_t ***)(a1 + 27832);
    *v108 = a1 + 27824;
    v11[1] = (uint64_t)v18;
    *v18 = v11;
    *(_QWORD *)(a1 + 27832) = v11;
  }
  v19 = JSC::B3::Procedure::addBlock(v11, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v20 = (uint64_t)v19;
  v21 = *(_QWORD *)(a1 + 27784);
  if (v21)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v21, (uint64_t)v19);
  }
  else
  {
    v109 = v19;
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    v23[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v23;
    v108 = v23;
    v23[2] = v20;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v109, (uint64_t *)&v108, v24, v25, v26, v27, v28, (uint64_t)&v110);
    v22 = v108;
    v29 = *(uint64_t ***)(a1 + 27832);
    *v108 = a1 + 27824;
    v22[1] = (uint64_t)v29;
    *v29 = v22;
    *(_QWORD *)(a1 + 27832) = v22;
  }
  v30 = JSC::B3::Procedure::addBlock(v22, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v31 = (uint64_t)v30;
  v32 = *(_QWORD *)(a1 + 27784);
  if (v32)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v32, (uint64_t)v30);
  }
  else
  {
    v109 = v30;
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v33 = 0u;
    *((_OWORD *)v33 + 1) = 0u;
    v33[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v33;
    v108 = v33;
    v33[2] = v31;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v109, (uint64_t *)&v108, v34, v35, v36, v37, v38, (uint64_t)&v110);
    v39 = v108;
    v40 = *(uint64_t ***)(a1 + 27832);
    *v108 = a1 + 27824;
    v39[1] = (uint64_t)v40;
    *v40 = v39;
    *(_QWORD *)(a1 + 27832) = v39;
  }
  v41 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
  v42 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), a2, v41);
  v43 = *(_QWORD *)(a1 + 27776);
  v44 = *(JSC::B3::Value **)(a1 + 27760);
  v45 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v42, *(_QWORD *)(a1 + 27656));
  JSC::B3::Procedure::addValueImpl(v44, v45);
  v110 = (uint64_t)v45;
  v50 = (char **)(v43 + 8);
  v51 = *(unsigned int *)(v43 + 20);
  if ((_DWORD)v51 == *(_DWORD *)(v43 + 16))
  {
    v102 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50, v51 + 1, (unint64_t)&v110);
    v51 = *(unsigned int *)(v43 + 20);
    *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v51) = *(_QWORD *)v102;
    v52 = v110;
  }
  else
  {
    *(_QWORD *)&(*v50)[8 * v51] = v45;
    v52 = (uint64_t)v45;
  }
  *(_DWORD *)(v43 + 20) = v51 + 1;
  *(_QWORD *)(v52 + 32) = v43;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v45, v9, v20, NAN, NAN, v46, v47, v48, v49);
  *(_QWORD *)(a1 + 27776) = v9;
  v106 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v20;
  v53 = a4[1];
  v54 = (_QWORD *)(*a4 + 27640);
  v55 = JSC::FTL::Output::load((uint64_t)v54, *(const JSC::FTL::AbstractHeap **)v53, *(_QWORD *)(v53 + 8), 1);
  v56 = (__int128 *)JSC::FTL::Output::patchpoint(v54, 4);
  v110 = v55;
  v111 = 0;
  v112 = 3;
  JSC::B3::StackmapValue::append(v56, v55, (unint64_t)&v111);
  *((_BYTE *)v56 + 168) = 1;
  v57 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v57 + 8) = 1;
  *(_QWORD *)v57 = off_1E3577C70;
  v58 = (unsigned int *)*((_QWORD *)v56 + 7);
  *((_QWORD *)v56 + 7) = v57;
  if (v58)
  {
    v59 = v58 + 2;
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
  *((_QWORD *)v56 + 14) = 0;
  *((_QWORD *)v56 + 15) = 0;
  *((_QWORD *)v56 + 16) = 0;
  v62 = *((_DWORD *)v56 + 4);
  v63 = *(_QWORD *)(a1 + 27776);
  v64 = *(JSC::B3::Value **)(a1 + 27760);
  v65 = *(_QWORD *)(a1 + 27768);
  v66 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v66 + 8) = -1;
  *(_WORD *)(v66 + 12) = 152;
  *(_DWORD *)(v66 + 16) = 0;
  *(_BYTE *)(v66 + 20) = 1;
  *(_QWORD *)v66 = &unk_1E357EDA0;
  *(_QWORD *)(v66 + 40) = 0;
  *(_QWORD *)(v66 + 48) = v56;
  *(_QWORD *)(v66 + 24) = v65;
  *(_QWORD *)(v66 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v64, (JSC::B3::Value *)v66);
  v110 = v66;
  v70 = (char **)(v63 + 8);
  v71 = *(unsigned int *)(v63 + 20);
  if ((_DWORD)v71 == *(_DWORD *)(v63 + 16))
  {
    v103 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v70, v71 + 1, (unint64_t)&v110);
    v71 = *(unsigned int *)(v63 + 20);
    *(_QWORD *)(*(_QWORD *)(v63 + 8) + 8 * v71) = *(_QWORD *)v103;
    v72 = v110;
  }
  else
  {
    *(_QWORD *)&(*v70)[8 * v71] = v66;
    v72 = v66;
  }
  *(_DWORD *)(v63 + 20) = v71 + 1;
  *(_QWORD *)(v72 + 32) = v63;
  v73 = *(_QWORD *)(a1 + 27776);
  v74 = *(_QWORD *)(a1 + 27760);
  v75 = *(_QWORD *)(a1 + 27768);
  v110 = v31;
  LOBYTE(v111) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v73, v74, 154, v75, &v110, v67, v68, v69);
  *(_QWORD *)(a1 + 27776) = v20;
  *(_QWORD *)(a1 + 27784) = v31;
  v76 = (JSC::FTL::Output *)(*a3 + 3455);
  v77 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)v76, *a3[1], (uint64_t)a3[1][1], 3);
  v81 = JSC::FTL::Output::floatToDouble(v76, v77);
  if (v81)
  {
    v82 = *(_QWORD *)(a1 + 27776);
    v83 = *(JSC::B3::Value **)(a1 + 27760);
    v84 = *(_QWORD *)(a1 + 27768);
    v85 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v85 + 8) = -1;
    *(_WORD *)(v85 + 12) = 152;
    *(_DWORD *)(v85 + 16) = 0;
    *(_BYTE *)(v85 + 20) = 1;
    *(_QWORD *)v85 = &unk_1E357EDA0;
    *(_QWORD *)(v85 + 40) = 0;
    *(_QWORD *)(v85 + 48) = v81;
    *(_QWORD *)(v85 + 24) = v84;
    *(_QWORD *)(v85 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v83, (JSC::B3::Value *)v85);
    v110 = v85;
    v86 = (char **)(v82 + 8);
    v87 = *(unsigned int *)(v82 + 20);
    if ((_DWORD)v87 == *(_DWORD *)(v82 + 16))
    {
      v105 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, v87 + 1, (unint64_t)&v110);
      v87 = *(unsigned int *)(v82 + 20);
      *(_QWORD *)(*(_QWORD *)(v82 + 8) + 8 * v87) = *(_QWORD *)v105;
      v88 = v110;
    }
    else
    {
      *(_QWORD *)&(*v86)[8 * v87] = v85;
      v88 = v85;
    }
    *(_DWORD *)(v82 + 20) = v87 + 1;
    *(_QWORD *)(v88 + 32) = v82;
    v89 = *(_QWORD *)(a1 + 27776);
  }
  else
  {
    v85 = 0;
    v89 = 0;
  }
  if (v62 != *(_DWORD *)(v81 + 16))
  {
    __break(0xC471u);
    JUMPOUT(0x197E08F80);
  }
  v90 = *(_QWORD *)(a1 + 27776);
  v91 = *(_QWORD *)(a1 + 27760);
  v92 = *(_QWORD *)(a1 + 27768);
  v110 = v31;
  LOBYTE(v111) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v90, v91, 154, v92, &v110, v78, v79, v80);
  *(_QWORD *)(a1 + 27776) = v31;
  *(_QWORD *)(a1 + 27784) = v106;
  if (!v85 && !v89)
  {
    __break(0xC471u);
    JUMPOUT(0x197E08FC0);
  }
  v93 = *(JSC::B3::Value **)(a1 + 27760);
  v94 = *(_QWORD *)(a1 + 27768);
  v95 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v95 = off_1E357F5F0;
  *(_DWORD *)(v95 + 8) = -1;
  *(_WORD *)(v95 + 12) = 153;
  *(_DWORD *)(v95 + 16) = v62;
  *(_BYTE *)(v95 + 20) = 0;
  *(_QWORD *)(v95 + 24) = v94;
  *(_QWORD *)(v95 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v93, (JSC::B3::Value *)v95);
  v110 = v95;
  v96 = (char **)(v31 + 8);
  v97 = *(unsigned int *)(v31 + 20);
  if ((_DWORD)v97 == *(_DWORD *)(v31 + 16))
  {
    v104 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96, v97 + 1, (unint64_t)&v110);
    v97 = *(unsigned int *)(v31 + 20);
    *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v97) = *(_QWORD *)v104;
    v98 = v110;
  }
  else
  {
    *(_QWORD *)&(*v96)[8 * v97] = v95;
    v98 = v95;
  }
  *(_DWORD *)(v31 + 20) = v97 + 1;
  *(_QWORD *)(v98 + 32) = v31;
  if ((*(_WORD *)(v66 + 12) & 0xFFF) == 0x98)
    v99 = v66;
  else
    v99 = 0;
  *(_QWORD *)(v99 + 40) = v95;
  if (v85 || v89)
  {
    if ((*(_WORD *)(v85 + 12) & 0xFFF) == 0x98)
      v100 = v85;
    else
      v100 = 0;
    *(_QWORD *)(v100 + 40) = v95;
  }
  return v95;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#8}::operator()(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *a1, const JSC::FTL::AbstractHeap *a2, uint64_t a3)
{
  _QWORD *v4;
  JSC::B3::Value *v5;
  uint64_t v6;

  v4 = (_QWORD *)((char *)a1 + 27640);
  v5 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)a1 + 27640, a2, a3, 2);
  return JSC::FTL::Output::bitCast(v4, v6);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitCodeBasedOnEndiannessBranch<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#7},JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#8}>@<X0>(uint64_t a1@<X0>, JSC::B3::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t **v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *v55;
  _QWORD *v56;
  JSC::B3::Value *v57;
  uint64_t v58;
  JSC::B3::Value *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::B3::Value *v63;
  uint64_t v64;
  int v65;
  JSC::B3::Value *v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  JSC::B3::Value *v81;
  uint64_t v82;
  uint64_t v83;
  char **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  JSC::B3::Value *v91;
  uint64_t v92;
  uint64_t v93;
  char **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t *v108;
  uint64_t *v109;

  v9 = JSC::B3::Procedure::addBlock(a5, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v10 = (uint64_t)v9;
  v11 = *(_QWORD *)(a1 + 27784);
  if (v11)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v11, (uint64_t)v9);
  }
  else
  {
    v109 = v9;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v13 = 0u;
    *((_OWORD *)v13 + 1) = 0u;
    v13[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v13;
    v108 = v13;
    v13[2] = v10;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v109, (uint64_t *)&v108, v14, v15, v16, v17, v18, (uint64_t)&v106);
    v12 = v108;
    v19 = *(uint64_t ***)(a1 + 27832);
    *v108 = a1 + 27824;
    v12[1] = (uint64_t)v19;
    *v19 = v12;
    *(_QWORD *)(a1 + 27832) = v12;
  }
  v20 = JSC::B3::Procedure::addBlock(v12, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v21 = (uint64_t)v20;
  v22 = *(_QWORD *)(a1 + 27784);
  if (v22)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v22, (uint64_t)v20);
  }
  else
  {
    v109 = v20;
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v24 = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    v24[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v24;
    v108 = v24;
    v24[2] = v21;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v109, (uint64_t *)&v108, v25, v26, v27, v28, v29, (uint64_t)&v106);
    v23 = v108;
    v30 = *(uint64_t ***)(a1 + 27832);
    *v108 = a1 + 27824;
    v23[1] = (uint64_t)v30;
    *v30 = v23;
    *(_QWORD *)(a1 + 27832) = v23;
  }
  v31 = JSC::B3::Procedure::addBlock(v23, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v32 = (uint64_t)v31;
  v33 = *(_QWORD *)(a1 + 27784);
  if (v33)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v33, (uint64_t)v31);
  }
  else
  {
    v109 = v31;
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v34 = 0u;
    *((_OWORD *)v34 + 1) = 0u;
    v34[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v34;
    v108 = v34;
    v34[2] = v32;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v109, (uint64_t *)&v108, v35, v36, v37, v38, v39, (uint64_t)&v106);
    v40 = v108;
    v41 = *(uint64_t ***)(a1 + 27832);
    *v108 = a1 + 27824;
    v40[1] = (uint64_t)v41;
    *v41 = v40;
    *(_QWORD *)(a1 + 27832) = v40;
  }
  v42 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
  v43 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), a2, v42);
  v44 = *(_QWORD *)(a1 + 27776);
  v45 = *(JSC::B3::Value **)(a1 + 27760);
  v46 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v43, *(_QWORD *)(a1 + 27656));
  JSC::B3::Procedure::addValueImpl(v45, v46);
  v106 = (uint64_t)v46;
  v51 = (char **)(v44 + 8);
  v52 = *(unsigned int *)(v44 + 20);
  if ((_DWORD)v52 == *(_DWORD *)(v44 + 16))
  {
    v100 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v51, v52 + 1, (unint64_t)&v106);
    v52 = *(unsigned int *)(v44 + 20);
    *(_QWORD *)(*(_QWORD *)(v44 + 8) + 8 * v52) = *(_QWORD *)v100;
    v53 = v106;
  }
  else
  {
    *(_QWORD *)&(*v51)[8 * v52] = v46;
    v53 = (uint64_t)v46;
  }
  *(_DWORD *)(v44 + 20) = v52 + 1;
  *(_QWORD *)(v53 + 32) = v44;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v46, v10, v21, NAN, NAN, v47, v48, v49, v50);
  *(_QWORD *)(a1 + 27776) = v10;
  v105 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v21;
  v55 = *(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 **)a4;
  v54 = *(_QWORD *)(a4 + 8);
  v56 = (_QWORD *)(*(_QWORD *)a4 + 27640);
  v57 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)v56, *(const JSC::FTL::AbstractHeap **)v54, *(_QWORD *)(v54 + 8), 2);
  v59 = JSC::FTL::Output::bitCast(v56, v58);
  v63 = v59;
  v64 = *(_QWORD *)(a1 + 27776);
  if (v59)
  {
    v104 = a3;
    v65 = *((_DWORD *)v59 + 4);
    v66 = *(JSC::B3::Value **)(a1 + 27760);
    v67 = *(_QWORD *)(a1 + 27768);
    v68 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v68 + 8) = -1;
    *(_WORD *)(v68 + 12) = 152;
    *(_DWORD *)(v68 + 16) = 0;
    *(_BYTE *)(v68 + 20) = 1;
    *(_QWORD *)v68 = &unk_1E357EDA0;
    *(_QWORD *)(v68 + 40) = 0;
    *(_QWORD *)(v68 + 48) = v63;
    *(_QWORD *)(v68 + 24) = v67;
    *(_QWORD *)(v68 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v66, (JSC::B3::Value *)v68);
    v106 = v68;
    v69 = (char **)(v64 + 8);
    v70 = *(unsigned int *)(v64 + 20);
    if ((_DWORD)v70 == *(_DWORD *)(v64 + 16))
    {
      v102 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v69, v70 + 1, (unint64_t)&v106);
      v70 = *(unsigned int *)(v64 + 20);
      *(_QWORD *)(*(_QWORD *)(v64 + 8) + 8 * v70) = *(_QWORD *)v102;
      v71 = v106;
    }
    else
    {
      *(_QWORD *)&(*v69)[8 * v70] = v68;
      v71 = v68;
    }
    *(_DWORD *)(v64 + 20) = v70 + 1;
    *(_QWORD *)(v71 + 32) = v64;
    v64 = *(_QWORD *)(a1 + 27776);
    v72 = v64;
    v73 = v65;
    a3 = v104;
  }
  else
  {
    v73 = 0;
    v68 = 0;
    v72 = 0;
  }
  v74 = *(_QWORD *)(a1 + 27760);
  v75 = *(_QWORD *)(a1 + 27768);
  v106 = v32;
  v107 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v64, v74, 154, v75, &v106, v60, v61, v62);
  *(_QWORD *)(a1 + 27776) = v21;
  *(_QWORD *)(a1 + 27784) = v32;
  v79 = JSC::FTL::Output::load(*(_QWORD *)a3 + 27640, **(const JSC::FTL::AbstractHeap ***)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), 4);
  if (v79)
  {
    v80 = *(_QWORD *)(a1 + 27776);
    v81 = *(JSC::B3::Value **)(a1 + 27760);
    v82 = *(_QWORD *)(a1 + 27768);
    v83 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v83 + 8) = -1;
    *(_WORD *)(v83 + 12) = 152;
    *(_DWORD *)(v83 + 16) = 0;
    *(_BYTE *)(v83 + 20) = 1;
    *(_QWORD *)v83 = &unk_1E357EDA0;
    *(_QWORD *)(v83 + 40) = 0;
    *(_QWORD *)(v83 + 48) = v79;
    *(_QWORD *)(v83 + 24) = v82;
    *(_QWORD *)(v83 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v81, (JSC::B3::Value *)v83);
    v106 = v83;
    v84 = (char **)(v80 + 8);
    v85 = *(unsigned int *)(v80 + 20);
    if ((_DWORD)v85 == *(_DWORD *)(v80 + 16))
    {
      v103 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v84, v85 + 1, (unint64_t)&v106);
      v85 = *(unsigned int *)(v80 + 20);
      *(_QWORD *)(*(_QWORD *)(v80 + 8) + 8 * v85) = *(_QWORD *)v103;
      v86 = v106;
    }
    else
    {
      *(_QWORD *)&(*v84)[8 * v85] = v83;
      v86 = v83;
    }
    *(_DWORD *)(v80 + 20) = v85 + 1;
    *(_QWORD *)(v86 + 32) = v80;
    v87 = *(_QWORD *)(a1 + 27776);
  }
  else
  {
    v87 = 0;
    v83 = 0;
    if (!v63)
      goto LABEL_23;
  }
  if (v73 != *(_DWORD *)(v79 + 16))
  {
    __break(0xC471u);
    JUMPOUT(0x197E0963CLL);
  }
LABEL_23:
  v88 = *(_QWORD *)(a1 + 27776);
  v89 = *(_QWORD *)(a1 + 27760);
  v90 = *(_QWORD *)(a1 + 27768);
  v106 = v32;
  v107 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v88, v89, 154, v90, &v106, v76, v77, v78);
  *(_QWORD *)(a1 + 27776) = v32;
  *(_QWORD *)(a1 + 27784) = v105;
  if (v68)
  {
    if (!v83 && !v87)
    {
LABEL_44:
      __break(0xC471u);
      JUMPOUT(0x197E09604);
    }
  }
  else if (v83)
  {
    if (!v72)
      goto LABEL_44;
  }
  else
  {
    if ((v72 != 0) != (v87 != 0))
      goto LABEL_44;
    if (!v72)
      return 0;
  }
  v91 = *(JSC::B3::Value **)(a1 + 27760);
  v92 = *(_QWORD *)(a1 + 27768);
  v93 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v93 = off_1E357F5F0;
  *(_DWORD *)(v93 + 8) = -1;
  *(_WORD *)(v93 + 12) = 153;
  *(_DWORD *)(v93 + 16) = v73;
  *(_BYTE *)(v93 + 20) = 0;
  *(_QWORD *)(v93 + 24) = v92;
  *(_QWORD *)(v93 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v91, (JSC::B3::Value *)v93);
  v106 = v93;
  v94 = (char **)(v32 + 8);
  v95 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v95 == *(_DWORD *)(v32 + 16))
  {
    v101 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v94, v95 + 1, (unint64_t)&v106);
    v95 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v95) = *(_QWORD *)v101;
    v96 = v106;
  }
  else
  {
    *(_QWORD *)&(*v94)[8 * v95] = v93;
    v96 = v93;
  }
  *(_DWORD *)(v32 + 20) = v95 + 1;
  *(_QWORD *)(v96 + 32) = v32;
  if (v68 || v72)
  {
    if ((*(_WORD *)(v68 + 12) & 0xFFF) == 0x98)
      v97 = v68;
    else
      v97 = 0;
    *(_QWORD *)(v97 + 40) = v93;
  }
  if (v83 || v87)
  {
    if ((*(_WORD *)(v83 + 12) & 0xFFF) == 0x98)
      v98 = v83;
    else
      v98 = 0;
    *(_QWORD *)(v98 + 40) = v93;
  }
  return v93;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#2}::operator() const(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  unsigned __int8 v12;
  int v13;
  int v14;
  int v15;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;

  if (*(_DWORD *)(a3 + 20) <= 1u)
    goto LABEL_26;
  v11 = *(unsigned __int8 **)(a3 + 8);
  v12 = v11[16];
  v13 = v12 & 0x7F;
  v14 = *v11;
  v15 = v14 & 0x7F;
  if (v13 == v15)
    goto LABEL_16;
  if (v13 == 63)
  {
    if (v15 != 31)
    {
      v17 = v14 & 0x1F | 0xD2800000;
      goto LABEL_12;
    }
LABEL_11:
    v17 = v15 | (32 * v13) | 0x91000000;
    goto LABEL_12;
  }
  if (v13 == 31 || v15 == 31)
    goto LABEL_11;
  v17 = v14 & 0xFFE0FFFF | ((v12 & 0x1F) << 16) | 0xAA0003E0;
LABEL_12:
  v19 = a2 + 50;
  v18 = a2[50];
  v20 = a2 + 14;
  if (v18 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v18 = *v19;
  }
  *(_DWORD *)(*v20 + v18) = v17;
  *v19 += 4;
  if (!*(_DWORD *)(a3 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x197E09838);
  }
  LOBYTE(v14) = **(_BYTE **)(a3 + 8);
  v13 = v14 & 0x7F;
LABEL_16:
  v21 = a2[50];
  if (v21 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v21 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v21) = v14 & 0x1F | (32 * (v14 & 0x1F)) | 0x5AC00400;
  a2[50] += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)a2, (JSC::ARM64LogicalImmediate *)0xFFFF, v13, v13);
  if (*(_BYTE *)(a1 + 17))
  {
    if (*(_DWORD *)(a3 + 20))
    {
      v29 = **(_BYTE **)(a3 + 8) & 0x1F | (32 * **(unsigned __int8 **)(a3 + 8)) | 0x13003C00;
      v30 = a2[50];
      if (v30 + 4 > a2[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v22, v23, v24, v25, v26, v27, v28);
        v30 = a2[50];
      }
      *(_DWORD *)(*((_QWORD *)a2 + 7) + v30) = v29;
      a2[50] += 4;
      return;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x197E09830);
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::byteSwap32(JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  unsigned __int8 v11;
  int v12;
  int v13;
  int v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  _QWORD *v19;
  unsigned int v20;

  if (*(_DWORD *)(a3 + 20) <= 1u)
    goto LABEL_19;
  v10 = *(unsigned __int8 **)(a3 + 8);
  v11 = v10[16];
  v12 = v11 & 0x7F;
  v13 = *v10;
  v14 = v13 & 0x7F;
  if (v12 == v14)
    goto LABEL_16;
  if (v12 == 63)
  {
    if (v14 != 31)
    {
      v16 = v13 & 0x1F | 0xD2800000;
      goto LABEL_12;
    }
  }
  else if (v12 != 31 && v14 != 31)
  {
    v16 = v13 & 0xFFE0FFFF | ((v11 & 0x1F) << 16) | 0xAA0003E0;
    goto LABEL_12;
  }
  v16 = v14 | (32 * v12) | 0x91000000;
LABEL_12:
  v18 = a2 + 50;
  v17 = a2[50];
  v19 = a2 + 14;
  if (v17 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*v19 + v17) = v16;
  *v18 += 4;
  if (!*(_DWORD *)(a3 + 20))
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x197E0998CLL);
  }
  LOBYTE(v13) = **(_BYTE **)(a3 + 8);
LABEL_16:
  v20 = a2[50];
  if (v20 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v20 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v20) = v13 & 0x1F | (32 * (v13 & 0x1F)) | 0x5AC00800;
  a2[50] += 4;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(void)::{lambda(void)#6}::operator() const(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  _QWORD *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  char v29;

  if (*(_DWORD *)(a3 + 20) <= 1u)
    goto LABEL_33;
  if (!*(_DWORD *)(a3 + 36))
  {
    __break(0xC471u);
    JUMPOUT(0x197E09BBCLL);
  }
  v10 = *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16);
  v11 = v10 & 0x7F;
  v12 = *(unsigned __int8 **)(a3 + 24);
  v13 = (char)*v12;
  if (v11 != *v12)
  {
    v14 = *v12;
    if (v11 == 63)
    {
      if (v14 != 31)
      {
        v18 = v13 & 0x1F | 0xD2800000;
        goto LABEL_14;
      }
    }
    else if (v11 != 31 && v13 != 31)
    {
      v16 = v13 | ((v10 & 0x1F) << 16);
      v17 = -1442839584;
LABEL_13:
      v18 = v16 | v17;
LABEL_14:
      v20 = a2 + 50;
      v19 = a2[50];
      v21 = a2 + 14;
      if (v19 + 4 > a2[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v19 = *v20;
      }
      *(_DWORD *)(*v21 + v19) = v18;
      *v20 += 4;
      if (*(_DWORD *)(a3 + 36))
      {
        LOBYTE(v11) = **(_BYTE **)(a3 + 24);
        goto LABEL_18;
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x197E09BB4);
    }
    v16 = v13 | (32 * v11);
    v17 = -1862270976;
    goto LABEL_13;
  }
LABEL_18:
  v22 = a2[50];
  if (v22 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v22 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v22) = v11 & 0x1F | (32 * (v11 & 0x1F)) | 0x5AC00800;
  v23 = a2[50];
  v24 = v23 + 4;
  a2[50] = v23 + 4;
  if (!*(_DWORD *)(a3 + 36))
  {
    __break(0xC471u);
    JUMPOUT(0x197E09BC4);
  }
  if (!*(_DWORD *)(a3 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x197E09BCCLL);
  }
  v25 = **(_BYTE **)(a3 + 24);
  v26 = (**(_BYTE **)(a3 + 8) & 0x7F) - 32;
  if ((v23 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v24 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v24) = v26 | (32 * (v25 & 0x1F)) | 0x1E270000;
  v27 = a2[50];
  v28 = v27 + 4;
  a2[50] = v27 + 4;
  if (!*(_DWORD *)(a3 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x197E09BD4);
  }
  v29 = **(_BYTE **)(a3 + 8);
  if ((v27 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v28 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v28) = ((v29 & 0x7F) - 32) | (32 * ((v29 & 0x7F) - 32)) | 0x1E22C000;
  a2[50] += 4;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::byteSwap64(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  __int128 *v3;
  uint64_t result;
  uint64_t v5;
  char v6;

  if (*((_DWORD *)a2 + 4) == 2)
  {
    v3 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
    v5 = 0;
    v6 = 3;
    JSC::B3::StackmapValue::append(v3, (uint64_t)a2, (unint64_t)&v5);
    *((_QWORD *)v3 + 14) = 0;
    *((_QWORD *)v3 + 15) = 0;
    *((_QWORD *)v3 + 16) = 0;
    return (uint64_t)v3;
  }
  else
  {
    result = 17988;
    __break(0xC471u);
  }
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::byteSwap64(JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E3577C98;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::byteSwap64(JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::byteSwap64(JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (*(_DWORD *)(a2 + 20) <= 1u
    || (JSC::MacroAssemblerARM64::move(a1, *(_BYTE *)(*(_QWORD *)(a2 + 8) + 16) & 0x7F, **(_BYTE **)(a2 + 8) & 0x7F, a4, a5, a6, a7, a8), !*(_DWORD *)(a2 + 20)))
  {
    __break(0xC471u);
    JUMPOUT(0x197E09D78);
  }
  v16 = **(_BYTE **)(a2 + 8) & 0x1F;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 14), v16 | (32 * v16) | 0xDAC00C00, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#2}::operator()(uint64_t a1)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  char v12;

  v2 = (_QWORD *)(*(_QWORD *)a1 + 27640);
  v3 = (__int128 *)JSC::FTL::Output::patchpoint(v2, 1);
  v4 = **(_QWORD **)(a1 + 8);
  v11 = 0;
  v12 = 3;
  JSC::B3::StackmapValue::append(v3, v4, (unint64_t)&v11);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E3577CC0;
  v6 = (unsigned int *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 7) = v5;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  *((_QWORD *)v3 + 14) = 0;
  *((_QWORD *)v3 + 15) = 0;
  *((_QWORD *)v3 + 16) = 0;
  return JSC::FTL::Output::store((uint64_t)v2, (uint64_t)v3, **(const JSC::FTL::AbstractHeap ***)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
}

