uint64_t JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::LargeMaps>>::operator()(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned __int16 *v23;
  int i;
  unsigned int v25;
  unsigned __int16 *v26;
  int v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  JSC::DFG::Node *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int j;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  BOOL v65;
  BOOL v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  BOOL v79;
  BOOL v80;
  int v81;
  unsigned __int16 v82;

  v9 = *a2;
  v81 = *(_DWORD *)(a2 + 1);
  v82 = a2[3];
  v10 = *((_QWORD *)a2 + 1);
  v11 = *((_QWORD *)a2 + 2);
  v12 = *((_QWORD *)a2 + 3);
  v13 = *((_QWORD *)a2 + 4);
  v14 = *((_QWORD *)a2 + 5);
  v16 = (uint64_t *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 16);
  if (v15
    || (WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::rehash((uint64_t *)(a1 + 32), 8u, 0), (v15 = *v16) != 0))
  {
    v18 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    v18 = 0;
  }
  v19 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
  v21 = (v20 ^ HIWORD(v20)) + v13;
  if (v14)
  {
    if (!(_DWORD)v11)
    {
LABEL_8:
      v23 = 0;
      for (i = 1; ; ++i)
      {
        v25 = v21 & v18;
        v26 = (unsigned __int16 *)(v15 + 56 * v25);
        v27 = *v26;
        v29 = *((_QWORD *)v26 + 4);
        result = *((_QWORD *)v26 + 5);
        v31 = *((_QWORD *)v26 + 1);
        v30 = *((_QWORD *)v26 + 2);
        if (!result)
        {
          v32 = v27 == 433 && v29 == 0;
          v33 = v32 && v31 == 0;
          v34 = v33 && v30 == 0;
          if (v34 && !*((_QWORD *)v26 + 3))
            break;
        }
        v35 = result != 0;
        if ((v14 == 0) != (_DWORD)v35 && v27 == v9 && v29 == v13)
        {
          if (result)
          {
            if (!(_DWORD)v30)
              goto LABEL_37;
          }
          else
          {
            v79 = v31 == v10 && v30 == v11;
            if (v79 && *((_QWORD *)v26 + 3) == v12)
              goto LABEL_37;
          }
        }
        if (v27 == 433 && v29 != 0)
          v23 = (unsigned __int16 *)(v15 + 56 * v25);
        v21 = i + v25;
      }
      goto LABEL_93;
    }
    v50 = *(_DWORD *)(v14 + 164);
    v51 = v50 >= v10;
    v52 = v50 - v10;
    if (!v51)
      v52 = 0;
    if (v52 <= (int)v11 - 1)
    {
LABEL_125:
      __break(0xC471u);
      JUMPOUT(0x198367F90);
    }
    v53 = v11;
    v54 = (uint64_t *)(*(_QWORD *)(v14 + 152) + 8 * v10);
    do
    {
      v55 = *v54++;
      v56 = ((v55 & 0xFFFCFFFFFFFFFFFFLL) + ~(v55 << 32)) ^ (((v55 & 0xFFFCFFFFFFFFFFFFLL) + ~(v55 << 32)) >> 22);
      v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
      v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
      v21 ^= v58 ^ (v58 >> 31);
      --v53;
    }
    while (v53);
  }
  else
  {
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v40 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
      v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
      v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
      v22 = (v42 >> 31) ^ v42;
      if ((v11 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v43 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
        v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
        v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
        v22 = 3 * v22 + ((v45 >> 31) ^ v45);
        if ((v12 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v46 = 3 * v22;
          v47 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
          v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
          v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
          v22 = v46 + ((v49 >> 31) ^ v49);
        }
      }
    }
    else
    {
      v22 = 0;
    }
    v21 ^= v22;
  }
  if (!(_DWORD)v11)
    goto LABEL_8;
  v23 = 0;
  for (j = 0; ; v21 = v25 + j)
  {
    v25 = v21 & v18;
    v26 = (unsigned __int16 *)(v15 + 56 * v25);
    v60 = *v26;
    v61 = *((_QWORD *)v26 + 4);
    v62 = *((_QWORD *)v26 + 5);
    v35 = *((_QWORD *)v26 + 1);
    v63 = *((_QWORD *)v26 + 2);
    if (!v62)
    {
      v64 = v60 == 433 && v61 == 0;
      v65 = v64 && v35 == 0;
      if (v65 && v63 == 0)
      {
        result = *((_QWORD *)v26 + 3);
        if (!result)
          break;
      }
    }
    result = v14 == 0;
    if ((_DWORD)result != (v62 != 0) && v60 == v9 && v61 == v13)
    {
      if (v62)
      {
        if ((_DWORD)v11 == (_DWORD)v63)
        {
          result = 0;
          v70 = 0;
          v71 = *(_DWORD *)(v62 + 164);
          v51 = v71 >= v35;
          LODWORD(v35) = v71 - v35;
          v35 = v51 ? v35 : 0;
          a5 = v63;
          v51 = v71 >= v10;
          LODWORD(a6) = v71 - v10;
          a6 = v51 ? a6 : 0;
          a7 = 8 * *((_QWORD *)v26 + 1);
          do
          {
            if (v35 == result)
            {
              __break(0xC471u);
              JUMPOUT(0x198367FB4);
            }
            if (a6 == result)
              goto LABEL_125;
            a8 = *(_QWORD *)(*(_QWORD *)(v62 + 152) + 8 * (v10 + result)) ^ *(_QWORD *)(*(_QWORD *)(v62 + 152) + a7 + 8 * result);
            if ((a8 & 0xFFFCFFFFFFFFFFFFLL) != 0)
              break;
            v70 = ++result >= (unint64_t)v63;
          }
          while (v63 != result);
          if (v70)
          {
LABEL_37:
            v39 = *(JSC::DFG::Node **)(v15 + 56 * v25 + 48);
            if (v39)
            {
              result = JSC::DFG::Node::replaceWith(*(_QWORD *)(a1 + 16), *(JSC::DFG::Graph **)a1, v39, v35, a5, a6, a7, a8);
              *(_BYTE *)(a1 + 8) = 1;
            }
            return result;
          }
        }
      }
      else
      {
        v80 = v35 == v10 && v63 == v11;
        if (v80 && *((_QWORD *)v26 + 3) == v12)
          goto LABEL_37;
      }
    }
    if (v60 == 433 && v61 != 0)
      v23 = (unsigned __int16 *)(v15 + 56 * v25);
    ++j;
  }
LABEL_93:
  if (v23)
  {
    *v23 = 433;
    *(_OWORD *)(v23 + 4) = 0u;
    *(_OWORD *)(v23 + 12) = 0u;
    *(_OWORD *)(v23 + 20) = 0u;
    --*(_DWORD *)(*v16 - 16);
    v26 = v23;
  }
  *v26 = v9;
  v26[3] = v82;
  *(_DWORD *)(v26 + 1) = v81;
  *((_QWORD *)v26 + 1) = v10;
  *((_QWORD *)v26 + 2) = v11;
  *((_QWORD *)v26 + 3) = v12;
  *((_QWORD *)v26 + 4) = v13;
  *((_QWORD *)v26 + 5) = v14;
  *((_QWORD *)v26 + 6) = v17;
  v72 = *v16;
  if (*v16)
    v73 = *(_DWORD *)(v72 - 12) + 1;
  else
    v73 = 1;
  *(_DWORD *)(v72 - 12) = v73;
  v74 = *v16;
  if (*v16)
    v75 = *(_DWORD *)(v74 - 12);
  else
    v75 = 0;
  v76 = (*(_DWORD *)(v74 - 16) + v75);
  v77 = *(unsigned int *)(v74 - 4);
  if (v77 <= 0x400)
  {
    if (3 * v77 > 4 * v76)
      return result;
    if (!(_DWORD)v77)
    {
      v78 = 8;
      return WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::rehash(v16, v78, v26);
    }
LABEL_106:
    v78 = (_DWORD)v77 << (6 * *(_DWORD *)(v74 - 12) >= (2 * v77));
    return WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::rehash(v16, v78, v26);
  }
  if (v77 <= 2 * v76)
    goto LABEL_106;
  return result;
}

void JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::LargeMaps>>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _BOOL4 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  double v58;
  double v59;
  double v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  unsigned int v78;
  unsigned int v79;
  BOOL v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;

  v9 = a2 & 0x3FFF;
  if (v9 == 40)
    return;
  v11 = a1 + 5;
  if (v9 == 2)
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = *(_DWORD *)(v12 - 8);
      v14 = (a2 >> 15) + ~(a2 >> 15 << 32);
      v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = *(_QWORD *)(v12 + 16 * v17);
      if (v18 != a2 >> 15)
      {
        v19 = 1;
        while (v18 != 0x8000000000000000)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = *(_QWORD *)(v12 + 16 * v17);
          ++v19;
          if (v18 == a2 >> 15)
            goto LABEL_11;
        }
        v17 = *(unsigned int *)(v12 - 4);
      }
LABEL_11:
      if (v17 != *(_DWORD *)(v12 - 4))
      {
        v33 = (_QWORD *)(v12 + 16 * v17);
        v34 = v33[1];
        *v33 = 0x7FFFFFFFFFFFFFFFLL;
        v33[1] = 0;
        if (v34)
          WTF::fastFree(v34, (void *)a2, a3, a4, a5, a6, a7, a8);
        ++*(_DWORD *)(*v11 - 16);
        v35 = *v11;
        if (*v11)
          v36 = *(_DWORD *)(v35 - 12) - 1;
        else
          v36 = -1;
        *(_DWORD *)(v35 - 12) = v36;
        v37 = *v11;
        if (*v11)
        {
          v38 = 6 * *(_DWORD *)(v37 - 12);
          v39 = *(_DWORD *)(v37 - 4);
          if (v38 < v39 && v39 >= 9)
        }
      }
    }
    v22 = a1[6];
    v20 = a1 + 6;
    v21 = v22;
    if (!v22)
      return;
    v23 = *(_DWORD *)(v21 - 4);
    if (!v23)
      return;
    v24 = 0;
    while (1)
    {
      v25 = *(_QWORD *)(v21 + 8 * --v23);
      if (v25 + 1 >= 2)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26 == a2)
          goto LABEL_48;
        LOWORD(v27) = a2;
        if ((a2 & 0x3FFF) == 0x25 && (LOWORD(v27) = a2, (*(_QWORD *)(v25 + 8) & 0x3FFFLL) == 0x25))
        {
          if ((a2 & 0x4000) != 0)
          {
            v30 = 0;
          }
          else
          {
            if ((v26 & 0x4000) != 0)
              goto LABEL_48;
            v30 = 0;
            v64 = (unsigned __int16)(a2 >> 15);
            if (v64 != (unsigned __int16)((unint64_t)a2 >> 31))
            {
              v65 = (unsigned __int16)(v26 >> 15);
              v66 = (unsigned __int16)(v26 >> 31);
              if (v65 != v66)
              {
                v67 = (unsigned __int16)((unint64_t)a2 >> 31);
                v68 = v67 > v66;
                v69 = v67 == v66 && v64 == v65;
                v70 = v68 || v65 > v64;
                if (v70 || v69)
                {
LABEL_153:
                  v78 = (unsigned __int16)(a2 >> 15);
                  if (v78 == (unsigned __int16)((unint64_t)a2 >> 31) || v65 == v66)
                    goto LABEL_16;
                  v79 = (unsigned __int16)((unint64_t)a2 >> 31);
                  v80 = v66 == v79;
                  if (v65 != v78)
                    v80 = 0;
                  if (v66 > v79 || v65 < v78 || v80)
                    goto LABEL_16;
                }
                goto LABEL_48;
              }
            }
          }
        }
        else
        {
          while (1)
          {
            v28 = v27 & 0x3FFF;
            if (v28 == 1)
              break;
            if (v28 == 2)
              v29 = 16385;
            else
              v29 = 16387;
            if ((v27 & 0x4000) != 0)
              v27 = v29;
            else
              v27 = v28 | 0x4000u;
            if (v28 == 40)
              v27 = 16385;
            if (v28 == 3)
              v27 = 16385;
            if (v27 == v26)
              goto LABEL_48;
          }
          v30 = (*(_QWORD *)(v25 + 8) & 0x3FFFLL) != 37;
        }
        if ((a2 & 0x3FFF) != 0x25 || v30)
        {
          while (1)
          {
            v31 = v26 & 0x3FFF;
            if (v31 == 1)
              goto LABEL_16;
            if (v31 == 2)
              v32 = 16385;
            else
              v32 = 16387;
            if ((v26 & 0x4000) != 0)
              v26 = v32;
            else
              v26 = v31 | 0x4000u;
            if (v31 == 40)
              v26 = 16385;
            if (v31 == 3)
              v26 = 16385;
            if (v26 == a2)
              goto LABEL_48;
          }
        }
        if ((v26 & 0x4000) == 0)
        {
          if ((a2 & 0x4000) == 0)
          {
            v65 = (unsigned __int16)(v26 >> 15);
            v66 = (unsigned __int16)(v26 >> 31);
            goto LABEL_153;
          }
LABEL_48:
          *(_QWORD *)(v21 + 8 * v23) = -1;
          WTF::fastFree(v25, (void *)a2, a3, a4, a5, a6, a7, a8);
          ++v24;
        }
      }
LABEL_16:
      if (!v23)
        goto LABEL_98;
    }
  }
  if (v9 == 1)
  {
    return;
  }
  v20 = a1 + 7;
  v41 = a1[7];
  if (v41)
  {
    v42 = *(_DWORD *)(v41 - 4);
    if (v42)
    {
      v24 = 0;
      while (1)
      {
        v43 = *(_QWORD *)(v41 + 8 * --v42);
        if (v43 + 1 >= 2)
        {
          v44 = *(_QWORD *)(v43 + 8);
          if (v44 == a2)
            goto LABEL_97;
          LOWORD(v45) = a2;
          if ((a2 & 0x3FFF) == 0x25 && (LOWORD(v45) = a2, (*(_QWORD *)(v43 + 8) & 0x3FFFLL) == 0x25))
          {
            if ((a2 & 0x4000) != 0)
            {
              v48 = 0;
            }
            else
            {
              if ((v44 & 0x4000) != 0)
                goto LABEL_97;
              v48 = 0;
              v71 = (unsigned __int16)(a2 >> 15);
              if (v71 != (unsigned __int16)((unint64_t)a2 >> 31))
              {
                v72 = (unsigned __int16)(v44 >> 15);
                v73 = (unsigned __int16)(v44 >> 31);
                if (v72 != v73)
                {
                  v74 = (unsigned __int16)((unint64_t)a2 >> 31);
                  v75 = v74 > v73;
                  v76 = v74 == v73 && v71 == v72;
                  v77 = v75 || v72 > v71;
                  if (v77 || v76)
                  {
LABEL_165:
                    v81 = (unsigned __int16)(a2 >> 15);
                    if (v81 == (unsigned __int16)((unint64_t)a2 >> 31) || v72 == v73)
                      goto LABEL_65;
                    v82 = (unsigned __int16)((unint64_t)a2 >> 31);
                    v83 = v73 == v82;
                    if (v72 != v81)
                      v83 = 0;
                    if (v73 > v82 || v72 < v81 || v83)
                      goto LABEL_65;
                  }
                  goto LABEL_97;
                }
              }
            }
          }
          else
          {
            while (1)
            {
              v46 = v45 & 0x3FFF;
              if (v46 == 1)
                break;
              if (v46 == 2)
                v47 = 16385;
              else
                v47 = 16387;
              if ((v45 & 0x4000) != 0)
                v45 = v47;
              else
                v45 = v46 | 0x4000u;
              if (v46 == 40)
                v45 = 16385;
              if (v46 == 3)
                v45 = 16385;
              if (v45 == v44)
                goto LABEL_97;
            }
            v48 = (*(_QWORD *)(v43 + 8) & 0x3FFFLL) != 37;
          }
          if ((a2 & 0x3FFF) != 0x25 || v48)
          {
            while (1)
            {
              v49 = v44 & 0x3FFF;
              if (v49 == 1)
                goto LABEL_65;
              if (v49 == 2)
                v50 = 16385;
              else
                v50 = 16387;
              if ((v44 & 0x4000) != 0)
                v44 = v50;
              else
                v44 = v49 | 0x4000u;
              if (v49 == 40)
                v44 = 16385;
              if (v49 == 3)
                v44 = 16385;
              if (v44 == a2)
                goto LABEL_97;
            }
          }
          if ((v44 & 0x4000) == 0)
          {
            if ((a2 & 0x4000) == 0)
            {
              v72 = (unsigned __int16)(v44 >> 15);
              v73 = (unsigned __int16)(v44 >> 31);
              goto LABEL_165;
            }
LABEL_97:
            *(_QWORD *)(v41 + 8 * v42) = -1;
            WTF::fastFree(v43, (void *)a2, a3, a4, a5, a6, a7, a8);
            ++v24;
          }
        }
LABEL_65:
        if (!v42)
        {
LABEL_98:
          v51 = *v20;
          if (v24)
          {
            *(_DWORD *)(v51 - 16) += v24;
            v62 = *v20;
            if (*v20)
              v63 = *(_DWORD *)(v62 - 12);
            else
              v63 = 0;
            *(_DWORD *)(v62 - 12) = v63 - v24;
            v51 = *v20;
          }
          if (v51)
          {
            v52 = *(_DWORD *)(v51 - 4);
            v53 = *(unsigned int *)(v51 - 12);
            if (v52 >= 9 && 6 * (int)v53 < v52)
            {
              v55 = (v53 - 1) | ((v53 - 1) >> 1) | ((((_DWORD)v53 - 1) | ((v53 - 1) >> 1)) >> 2);
              v56 = v55 | (v55 >> 4) | ((v55 | (v55 >> 4)) >> 8);
              v57 = (v56 | HIWORD(v56)) + 1;
              if (v57 > 0x400)
              {
                if (v57 <= 2 * v53)
                {
LABEL_106:
                  LODWORD(v57) = 2 * v57;
                  if (v57 <= 0x400)
                    goto LABEL_107;
                }
                v58 = (double)v53;
                v59 = (double)v57;
                v60 = 0.416666667;
              }
              else
              {
                if (3 * v57 <= 4 * v53)
                  goto LABEL_106;
LABEL_107:
                v58 = (double)v53;
                v59 = (double)v57;
                v60 = 0.604166667;
              }
              if (v59 * v60 <= v58)
                LODWORD(v57) = 2 * v57;
              if (v57 <= 8)
                v61 = 8;
              else
                v61 = v57;
            }
          }
          return;
        }
      }
    }
  }
}

void JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::LargeMaps>>::operator()(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  unint64_t v40;
  JSC::DFG::Node *v41;
  JSC::DFG::Node *v42;
  uint64_t v44;
  uint64_t *v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unint64_t *v63;
  int i;
  unsigned int v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  int j;
  unsigned int v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v98;
  unint64_t v99;
  BOOL v100;
  unsigned int v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  _QWORD *v107;
  __n128 v108;
  JSC::DFG::Node *v109[2];

  v108.n128_u64[0] = a3;
  v108.n128_u64[1] = a4;
  v10 = *((_QWORD *)a2 + 1);
  v11 = v10 & 0x3FFF;
  if (v11 != 2)
  {
    if (v11 == 40 || v11 == 1)
    {
      __break(0xC471u);
      goto LABEL_138;
    }
    v45 = a1 + 7;
    v44 = a1[7];
    if (v44
    {
      v46 = *(_DWORD *)(v44 - 8);
    }
    else
    {
      v46 = 0;
    }
    v47 = *(_DWORD *)a2;
    v48 = *((_QWORD *)a2 + 1);
    v49 = *((_QWORD *)a2 + 2);
    v50 = (v48 + ~(v48 << 32)) ^ ((unint64_t)(v48 + ~(v48 << 32)) >> 22);
    v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
    v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
    v53 = (v52 >> 31) ^ v52;
    v54 = *((_QWORD *)a2 + 4);
    v55 = v54 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v54 & 0xFFFFFFFFFFFFFFFCLL) == 0)
      v55 = *((_QWORD *)a2 + 3);
    v56 = (~(v55 << 32) + v55) ^ ((~(v55 << 32) + v55) >> 22);
    v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
    v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
    v59 = *((_QWORD *)a2 + 5);
    v60 = *((_QWORD *)a2 + 6);
    v61 = v47 + v49 + v59 + v60 + v53 + ((v58 >> 31) ^ v58);
    if (v54 < 4)
    {
      v62 = 0;
      v63 = 0;
      for (i = v61; ; i = v62 + v65)
      {
        v65 = i & v46;
        v66 = (unint64_t *)(v44 + 8 * (i & v46));
        v67 = *v66;
        if (!*v66)
          goto LABEL_58;
        if (v67 != -1 && *(_DWORD *)v67 == v47 && *(_QWORD *)(v67 + 8) == v48 && *(_QWORD *)(v67 + 16) == v49)
        {
          v68 = *(_QWORD *)(v67 + 32);
          if (v68 >= 4)
          {
            if (v68 != v54)
              goto LABEL_132;
          }
          else if (*(_QWORD *)(v67 + 24) != *((_QWORD *)a2 + 3))
          {
            goto LABEL_132;
          }
          if (*(_QWORD *)(v67 + 40) == v59)
          {
            a5 = *(_QWORD *)(v67 + 48);
            if (a5 == v60)
              goto LABEL_57;
          }
        }
LABEL_132:
        if (v67 == -1)
          v63 = (unint64_t *)(v44 + 8 * v65);
        ++v62;
      }
    }
    v69 = 0;
    v63 = 0;
    for (j = v61; ; j = v69 + v71)
    {
      v71 = j & v46;
      v66 = (unint64_t *)(v44 + 8 * (j & v46));
      v67 = *v66;
      if (!*v66)
        break;
      if (v67 != -1
        && *(_DWORD *)v67 == v47
        && *(_QWORD *)(v67 + 8) == v48
        && *(_QWORD *)(v67 + 16) == v49
        && *(_QWORD *)(v67 + 32) == v54
        && *(_QWORD *)(v67 + 40) == v59
        && *(_QWORD *)(v67 + 48) == v60)
      {
LABEL_57:
        v42 = *(JSC::DFG::Node **)(v67 + 56);
        v41 = *(JSC::DFG::Node **)(v67 + 64);
        goto LABEL_25;
      }
      if (v67 == -1)
        v63 = (unint64_t *)(v44 + 8 * v71);
      ++v69;
    }
LABEL_58:
    if (v63)
      v72 = v63;
    else
      v72 = v66;
    if (*v72 == -1)
    {
      *v72 = 0;
      --*(_DWORD *)(*v45 - 16);
    }
    v73 = WTF::fastMalloc((WTF *)0x50);
    v75 = a2[2];
    v76 = *((_QWORD *)a2 + 6);
    v77 = *a2;
    *(_OWORD *)(v73 + 16) = a2[1];
    *(_OWORD *)(v73 + 32) = v75;
    *(_OWORD *)v73 = v77;
    *(_QWORD *)(v73 + 56) = 0;
    *(_QWORD *)(v73 + 64) = 0;
    *(_QWORD *)(v73 + 48) = v76;
    *(_DWORD *)(v73 + 72) = v61;
    *v72 = v73;
    v78 = *v45;
    if (*v45)
      v79 = *(_DWORD *)(v78 - 12) + 1;
    else
      v79 = 1;
    *(_DWORD *)(v78 - 12) = v79;
    v80 = *v45;
    if (*v45)
      v81 = *(_DWORD *)(v80 - 12);
    else
      v81 = 0;
    v82 = (*(_DWORD *)(v80 - 16) + v81);
    v83 = *(unsigned int *)(v80 - 4);
    if (v83 > 0x400)
    {
      if (v83 > 2 * v82)
        goto LABEL_69;
    }
    else
    {
      if (3 * v83 > 4 * v82)
      {
LABEL_69:
        v41 = 0;
        v42 = 0;
        *(__n128 *)(v73 + 56) = v108;
        goto LABEL_25;
      }
      if (!(_DWORD)v83)
      {
        v99 = 8;
        goto LABEL_110;
      }
    }
    v99 = ((_DWORD)v83 << (6 * *(_DWORD *)(v80 - 12) >= (2 * v83)));
LABEL_110:
    goto LABEL_69;
  }
  if ((v10 & 0x4000) != 0)
    goto LABEL_99;
  v14 = a1 + 5;
  v15 = v10 >> 15;
  v16 = a1[5];
  if (v16
  {
    v17 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v17 = 0;
  }
  v18 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = (uint64_t *)(v16 + 16 * v21);
  v23 = *v22;
  if (*v22 != 0x8000000000000000)
  {
    v24 = 0;
    v25 = 1;
    while (v23 != v15)
    {
      if (v23 == 0x7FFFFFFFFFFFFFFFLL)
        v24 = v22;
      v21 = (v21 + v25) & v17;
      v22 = (uint64_t *)(v16 + 16 * v21);
      v23 = *v22;
      ++v25;
      if (*v22 == 0x8000000000000000)
      {
        if (!v24)
          goto LABEL_13;
        *v24 = 0x8000000000000000;
        v24[1] = 0;
        --*(_DWORD *)(*v14 - 16);
        *v24 = v15;
        v24[1] = 0;
        goto LABEL_16;
      }
    }
    v67 = v22[1];
    if (*(_DWORD *)v67 == *(_DWORD *)a2
      && *(_QWORD *)(v67 + 8) == *((_QWORD *)a2 + 1)
      && *(_QWORD *)(v67 + 16) == *((_QWORD *)a2 + 2))
    {
      v95 = *(_QWORD *)(v67 + 32);
      v96 = *((_QWORD *)a2 + 4);
      if (v95 <= 3 && v96 < 4)
      {
        v95 = *(_QWORD *)(v67 + 24);
        v96 = *((_QWORD *)a2 + 3);
      }
      if (v95 == v96 && *(_QWORD *)(v67 + 40) == *((_QWORD *)a2 + 5) && *(_QWORD *)(v67 + 48) == *((_QWORD *)a2 + 6))
        goto LABEL_57;
    }
LABEL_99:
    if (v98)
    {
      v42 = *(JSC::DFG::Node **)(v98 + 56);
      v41 = *(JSC::DFG::Node **)(v98 + 64);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_13:
  v26 = v22[1];
  *v22 = v15;
  v22[1] = 0;
  if (v26)
    WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
  v24 = v22;
LABEL_16:
  v27 = *v14;
  if (*v14)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *v14;
  if (*v14)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31)
      goto LABEL_22;
  }
  else
  {
    if (3 * v32 > 4 * v31)
      goto LABEL_22;
    if (!(_DWORD)v32)
    {
      v94 = 8;
      goto LABEL_87;
    }
  }
  v94 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
LABEL_87:
LABEL_22:
  v36 = WTF::fastMalloc((WTF *)0x50);
  v37 = a2[2];
  v38 = *((_QWORD *)a2 + 6);
  v39 = *a2;
  *(_OWORD *)(v36 + 16) = a2[1];
  *(_OWORD *)(v36 + 32) = v37;
  *(_OWORD *)v36 = v39;
  *(_QWORD *)(v36 + 48) = v38;
  *(_QWORD *)(v36 + 56) = a3;
  *(_QWORD *)(v36 + 64) = a4;
  *(_DWORD *)(v36 + 72) = 0;
  v40 = v24[1];
  v24[1] = v36;
  if (v40)
    WTF::fastFree(v40, v33, v34, v35, a5, a6, a7, a8);
LABEL_24:
  v41 = 0;
  v42 = 0;
LABEL_25:
  v109[0] = v42;
  v109[1] = v41;
  if ((unint64_t)v41 > 3 || v42)
  {
    v84 = a1[2];
    if (*(_WORD *)(v84 + 18) == 15)
    {
      *(_QWORD *)(v84 + 24) = 0;
      v85 = *a1;
      v86 = *(_DWORD *)(*a1 + 944);
      if (v86 && v86 != 2)
      {
        if ((_BYTE)qword_1ECF4C32A)
          v100 = 0;
        else
          v100 = byte_1ECF4C323 == 0;
        if (!v100 || BYTE2(qword_1ECF4C32A) != 0)
          WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
        v102 = *(_DWORD *)(v85 + 60);
        while (v102)
        {
          if (*(_DWORD *)(v85 + 60) <= --v102)
          {
            __break(0xC471u);
LABEL_138:
            JUMPOUT(0x198368CA4);
          }
          v103 = *(_QWORD *)(*(_QWORD *)(v85 + 48) + 8 * v102);
          if (v103)
          {
            v104 = *(_DWORD *)(v103 + 36);
            if (v104)
            {
              v105 = v104 - 1;
              v106 = 8 * v105;
              do
              {
                if (*(_DWORD *)(v103 + 36) <= v105)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198368CACLL);
                }
                v107 = *(_QWORD **)(*(_QWORD *)(v103 + 24) + v106);
                v107[3] = 0;
                v107[4] = 0;
                v107[5] = 0;
                v106 -= 8;
                --v105;
              }
              while (v105 != -1);
            }
          }
        }
        *(_DWORD *)(v85 + 944) = 0;
      }
    }
    if (v108.n128_u64[0] && v108.n128_u64[0] == a1[2])
    {
      v88 = a1[3];
      *(_QWORD *)(JSC::DFG::LazyNode::ensureIsNode((uint64_t *)v109, (uint64_t)(a1 + 8), v88, 0, a5, a6, a7, a8) + 96) = v88;
      JSC::DFG::Node::replaceWith(a1[2], (JSC::DFG::Graph *)*a1, v109[0], v89, v90, v91, v92, v93);
      *((_BYTE *)a1 + 8) = 1;
    }
  }
}

uint64_t WTF::HashMap<JSC::DFG::PureValue,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, _QWORD *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  int i;
  unsigned int v24;
  unsigned __int16 *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  unsigned int v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  BOOL v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = v13 ^ HIWORD(v13);
  v15 = *((_QWORD *)a3 + 4);
  v16 = *((_QWORD *)a3 + 5);
  v17 = v14 + v15;
  if (v16)
  {
    v18 = *((_QWORD *)a3 + 1);
    v21 = *((_QWORD *)a3 + 2);
    if ((_DWORD)v21)
    {
      v60 = *(_DWORD *)(v16 + 164);
      v61 = v60 >= v18;
      v62 = v60 - v18;
      if (!v61)
        v62 = 0;
      if (v62 <= (int)v21 - 1)
      {
LABEL_94:
        __break(0xC471u);
        JUMPOUT(0x198369134);
      }
      v63 = *((_QWORD *)a3 + 2);
      v64 = (uint64_t *)(*(_QWORD *)(v16 + 152) + 8 * *((_QWORD *)a3 + 1));
      do
      {
        v65 = *v64++;
        v66 = ((v65 & 0xFFFCFFFFFFFFFFFFLL) + ~(v65 << 32)) ^ (((v65 & 0xFFFCFFFFFFFFFFFFLL) + ~(v65 << 32)) >> 22);
        v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
        v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
        v17 ^= v68 ^ (v68 >> 31);
        --v63;
      }
      while (v63);
      v20 = *((_QWORD *)a3 + 2);
    }
    else
    {
      LODWORD(v20) = 0;
    }
  }
  else
  {
    v18 = *((_QWORD *)a3 + 1);
    if ((v18 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v48 = (v18 + ~(v18 << 32)) ^ ((unint64_t)(v18 + ~(v18 << 32)) >> 22);
      v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
      v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
      v19 = (v50 >> 31) ^ v50;
      v20 = *((_QWORD *)a3 + 2);
      if ((v20 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v51 = (v20 + ~(v20 << 32)) ^ ((unint64_t)(v20 + ~(v20 << 32)) >> 22);
        v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
        v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
        v19 = 3 * v19 + ((v53 >> 31) ^ v53);
        v54 = *((_QWORD *)a3 + 3);
        v31 = (v54 & 0xFF00FFFFFFFFFFFFLL) == 0;
        v55 = (v54 + ~(v54 << 32)) ^ ((unint64_t)(v54 + ~(v54 << 32)) >> 22);
        v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
        v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
        v58 = 3 * v19 + ((v57 >> 31) ^ v57);
        if (!v31)
          v19 = v58;
      }
    }
    else
    {
      v19 = 0;
      v20 = *((_QWORD *)a3 + 2);
    }
    v17 ^= v19;
    v21 = v20;
  }
  result = 0;
  for (i = 0; ; v17 = v24 + i)
  {
    v24 = v17 & v10;
    v25 = (unsigned __int16 *)(v8 + 56 * v24);
    v26 = *v25;
    v27 = *((_QWORD *)v25 + 4);
    v28 = *((_QWORD *)v25 + 5);
    v30 = *((_QWORD *)v25 + 1);
    v29 = *((_QWORD *)v25 + 2);
    if (!v28)
    {
      v31 = v26 == 433 && v27 == 0;
      v32 = v31 && v30 == 0;
      v33 = v32 && v29 == 0;
      if (v33 && !*((_QWORD *)v25 + 3))
      {
        if (result)
        {
          *(_WORD *)result = 433;
          *(_OWORD *)(result + 8) = 0u;
          *(_OWORD *)(result + 24) = 0u;
          *(_OWORD *)(result + 40) = 0u;
          --*(_DWORD *)(*a2 - 16);
          v25 = (unsigned __int16 *)result;
        }
        v40 = *(_OWORD *)a3;
        v41 = *((_OWORD *)a3 + 2);
        *((_OWORD *)v25 + 1) = *((_OWORD *)a3 + 1);
        *((_OWORD *)v25 + 2) = v41;
        *(_OWORD *)v25 = v40;
        *((_QWORD *)v25 + 6) = *a4;
        v42 = *a2;
        if (*a2)
          v43 = *(_DWORD *)(v42 - 12) + 1;
        else
          v43 = 1;
        *(_DWORD *)(v42 - 12) = v43;
        v44 = *a2;
        if (*a2)
          v45 = *(_DWORD *)(v44 - 12);
        else
          v45 = 0;
        v46 = (*(_DWORD *)(v44 - 16) + v45);
        v47 = *(unsigned int *)(v44 - 4);
        if (v47 > 0x400)
        {
          if (v47 > 2 * v46)
            goto LABEL_48;
        }
        else
        {
          if (3 * v47 > 4 * v46)
          {
LABEL_48:
            v39 = v44 + 56 * v47;
            v38 = 1;
            goto LABEL_49;
          }
          if (!(_DWORD)v47)
          {
            v59 = 8;
            goto LABEL_55;
          }
        }
        v59 = (_DWORD)v47 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v47));
LABEL_55:
        result = WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::rehash(a2, v59, v25);
        v25 = (unsigned __int16 *)result;
        v44 = *a2;
        if (*a2)
          LODWORD(v47) = *(_DWORD *)(v44 - 4);
        else
          LODWORD(v47) = 0;
        goto LABEL_48;
      }
    }
    if ((v16 == 0) == (v28 != 0) || v26 != v11 || v27 != v15)
      goto LABEL_26;
    if (v28)
      break;
    v69 = v30 == v18 && v29 == v21;
    if (v69 && *((_QWORD *)v25 + 3) == *((_QWORD *)a3 + 3))
      goto LABEL_37;
LABEL_26:
    if (v26 == 433 && v27 != 0)
      result = v8 + 56 * v24;
    ++i;
  }
  if ((_DWORD)v20 != (_DWORD)v29)
    goto LABEL_26;
  if ((_DWORD)v20)
  {
    v70 = *((_QWORD *)v25 + 1);
    v71 = 0;
    v72 = 0;
    v73 = *(_DWORD *)(v28 + 164);
    v74 = v73 >= v18 ? v73 - v18 : 0;
    v61 = v73 >= v70;
    LODWORD(v75) = v73 - v70;
    v75 = v61 ? v75 : 0;
    do
    {
      if (v75 == v71)
        goto LABEL_94;
      if (v74 == v71)
      {
        __break(0xC471u);
        JUMPOUT(0x19836913CLL);
      }
      if (((*(_QWORD *)(*(_QWORD *)(v28 + 152) + 8 * (v18 + v71)) ^ *(_QWORD *)(*(_QWORD *)(v28 + 152)
                                                                                               + 8
                                                                                               * *((_QWORD *)v25 + 1)
                                                                                               + 8 * v71)) & 0xFFFCFFFFFFFFFFFFLL) != 0)
        break;
      v72 = ++v71 >= (unint64_t)v29;
    }
    while (v29 != v71);
    if (!v72)
      goto LABEL_26;
  }
LABEL_37:
  if ((v9 & 1) != 0)
    v37 = 0;
  else
    v37 = *(_DWORD *)(v8 - 4);
  v38 = 0;
  v39 = v8 + 56 * v37;
LABEL_49:
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v39;
  *(_BYTE *)(a1 + 16) = v38;
  return result;
}

uint64_t WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int i;
  int v36;
  uint64_t v37;
  BOOL v38;
  BOOL v39;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_OWORD *)(v9 + 24);
    do
    {
      *((_WORD *)v18 - 4) = 433;
      *v18 = 0uLL;
      v18[1] = 0uLL;
      v18[2] = 0uLL;
      v18 = (_OWORD *)((char *)v18 + 56);
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = (unsigned __int16 *)(v6 + 56 * v19);
      v11 = *v21;
      v22 = *((_QWORD *)v21 + 4);
      if ((_DWORD)v11 != 433 || v22 == 0)
      {
        v10 = *((_QWORD *)v21 + 5);
        result = *((_QWORD *)v21 + 1);
        v25 = *((_QWORD *)v21 + 2);
        v26 = (_DWORD)v11 == 433 && v10 == 0;
        v27 = v26 && v22 == 0;
        v28 = v27 && result == 0;
        v29 = v28 && v25 == 0;
        if (!v29 || *((_QWORD *)v21 + 3))
        {
          v30 = *a1;
          if (*a1)
            v31 = *(_DWORD *)(v30 - 8);
          else
            v31 = 0;
          v32 = 9 * ((~((_DWORD)v11 << 15) + v11) ^ ((~((_DWORD)v11 << 15) + v11) >> 10));
          v33 = (((v32 ^ (v32 >> 6)) + ~((v32 ^ (v32 >> 6)) << 11)) ^ (((v32 ^ (v32 >> 6)) + ~((v32 ^ (v32 >> 6)) << 11)) >> 16))
              + v22;
          if (v10)
          {
            if ((_DWORD)v25)
            {
              v54 = *(_DWORD *)(v10 + 164);
              v55 = v54 >= result;
              v56 = v54 - result;
              if (!v55)
                v56 = 0;
              if (v56 <= (int)v25 - 1)
              {
                __break(0xC471u);
                return result;
              }
              v57 = *((_QWORD *)v21 + 2);
              v58 = (uint64_t *)(*(_QWORD *)(v10 + 152) + 8 * *((_QWORD *)v21 + 1));
              do
              {
                v59 = *v58++;
                v60 = ((v59 & 0xFFFCFFFFFFFFFFFFLL) + ~(v59 << 32)) ^ (((v59 & 0xFFFCFFFFFFFFFFFFLL) + ~(v59 << 32)) >> 22);
                v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
                v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
                v33 ^= v62 ^ (v62 >> 31);
                --v57;
              }
              while (v57);
            }
          }
          else
          {
            if ((result & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v44 = (result + ~(result << 32)) ^ ((unint64_t)(result + ~(result << 32)) >> 22);
              v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
              v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
              v34 = (v46 >> 31) ^ v46;
              if ((v25 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v47 = (v25 + ~(v25 << 32)) ^ ((unint64_t)(v25 + ~(v25 << 32)) >> 22);
                v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
                v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
                v34 = 3 * v34 + ((v49 >> 31) ^ v49);
                v50 = *((_QWORD *)v21 + 3);
                if ((v50 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v51 = (v50 + ~(v50 << 32)) ^ ((unint64_t)(v50 + ~(v50 << 32)) >> 22);
                  v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
                  v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
                  v34 = 3 * v34 + ((v53 >> 31) ^ v53);
                }
              }
            }
            else
            {
              v34 = 0;
            }
            v33 ^= v34;
          }
          for (i = 0; ; v33 = i + v36)
          {
            v36 = v33 & v31;
            v37 = v30 + 56 * (v33 & v31);
            if (!*(_QWORD *)(v37 + 40))
            {
              v11 = *(_QWORD *)(v37 + 32);
              v12 = *(_QWORD *)(v37 + 8);
              v13 = *(_QWORD *)(v37 + 16);
              v38 = *(_WORD *)v37 == 433 && v11 == 0;
              v39 = v38 && v12 == 0;
              if (v39 && v13 == 0)
              {
                v10 = *(_QWORD *)(v37 + 24);
                if (!v10)
                  break;
              }
            }
            ++i;
          }
          v41 = *(_OWORD *)v21;
          v42 = *((_OWORD *)v21 + 1);
          v43 = *((_OWORD *)v21 + 2);
          *(_QWORD *)(v37 + 48) = *((_QWORD *)v21 + 6);
          *(_OWORD *)(v37 + 16) = v42;
          *(_OWORD *)(v37 + 32) = v43;
          *(_OWORD *)v37 = v41;
          if (v21 == a3)
            v20 = v37;
        }
      }
      if (++v19 == v7)
        goto LABEL_57;
    }
  }
  v20 = 0;
  result = 0;
  if (v6)
  {
LABEL_57:
    WTF::fastFree(v6 - 16, (void *)v10, v11, v12, v13, v14, v15, v16);
    return v20;
  }
  return result;
}

uint64_t JSC::DFG::PureValueHash::hash(unsigned __int16 *a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v2 = 9 * ((~(*a1 << 15) + *a1) ^ ((~(*a1 << 15) + *a1) >> 10));
  v3 = (v2 ^ (v2 >> 6)) + ~((v2 ^ (v2 >> 6)) << 11);
  result = (v3 ^ HIWORD(v3)) + *((_DWORD *)a1 + 8);
  v5 = *((_QWORD *)a1 + 5);
  if (v5)
  {
    v19 = *((_QWORD *)a1 + 2);
    if ((_DWORD)v19)
    {
      v20 = *((_QWORD *)a1 + 1);
      v21 = *(_DWORD *)(v5 + 164);
      v22 = v21 >= v20;
      v23 = v21 - v20;
      if (!v22)
        v23 = 0;
      if (v23 <= (int)v19 - 1)
      {
        __break(0xC471u);
      }
      else
      {
        v24 = v19;
        v25 = (uint64_t *)(*(_QWORD *)(v5 + 152) + 8 * v20);
        do
        {
          v26 = *v25++;
          v27 = ((v26 & 0xFFFCFFFFFFFFFFFFLL) + ~(v26 << 32)) ^ (((v26 & 0xFFFCFFFFFFFFFFFFLL) + ~(v26 << 32)) >> 22);
          v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
          v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
          result = result ^ v29 ^ (v29 >> 31);
          --v24;
        }
        while (v24);
      }
    }
  }
  else
  {
    v6 = *((_QWORD *)a1 + 1);
    if ((v6 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v7 = (v10 >> 31) ^ v10;
      v11 = *((_QWORD *)a1 + 2);
      if ((v11 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v12 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
        v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        v7 = 3 * v7 + ((v14 >> 31) ^ v14);
        v15 = *((_QWORD *)a1 + 3);
        if ((v15 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v16 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v7 = 3 * v7 + ((v18 >> 31) ^ v18);
        }
      }
    }
    else
    {
      v7 = 0;
    }
    return v7 ^ result;
  }
  return result;
}

void JSC::DFG::`anonymous namespace'::ImpureMap::clobber(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t **v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v8 = a2 & 0x3FFF;
  if (v8 != 40)
  {
    if (v8 == 2)
    {
      v10 = *a1;
      if (*a1)
      {
        v11 = *(_DWORD *)(v10 - 8);
        v12 = (a2 >> 15) + ~(a2 >> 15 << 32);
        v13 = 9
            * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22))
                                                                      + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
        v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        v15 = v11 & ((v14 >> 31) ^ v14);
        v16 = *(_QWORD *)(v10 + 16 * v15);
        if (v16 != a2 >> 15)
        {
          v17 = 1;
          while (v16 != 0x8000000000000000)
          {
            v15 = ((_DWORD)v15 + v17) & v11;
            v16 = *(_QWORD *)(v10 + 16 * v15);
            ++v17;
            if (v16 == a2 >> 15)
              goto LABEL_10;
          }
          v15 = *(unsigned int *)(v10 - 4);
        }
LABEL_10:
        if (v15 != *(_DWORD *)(v10 - 4))
        {
          v19 = (_QWORD *)(v10 + 16 * v15);
          v20 = v19[1];
          *v19 = 0x7FFFFFFFFFFFFFFFLL;
          v19[1] = 0;
          if (v20)
            WTF::fastFree(v20, (void *)a2, a3, a4, a5, a6, a7, a8);
          ++*(_DWORD *)(*a1 - 16);
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 12) - 1;
          else
            v22 = -1;
          *(_DWORD *)(v21 - 12) = v22;
          v23 = *a1;
          if (*a1)
          {
            v24 = 6 * *(_DWORD *)(v23 - 12);
            v25 = *(_DWORD *)(v23 - 4);
            if (v24 < v25 && v25 >= 9)
          }
        }
      }
      v18 = (unint64_t **)(a1 + 1);
      goto LABEL_12;
    }
    if (v8 != 1)
    {
      v18 = (unint64_t **)(a1 + 2);
LABEL_12:
      return;
    }
  }
}

_QWORD *WTF::HashTable<long long,WTF::KeyValuePair<long long,std::unique_ptr<JSC::DFG::`anonymous namespace'::ImpureDataSlot>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,std::unique_ptr<JSC::DFG::`anonymous namespace'::ImpureDataSlot>>>,WTF::DefaultHash<long long>,WTF::HashMap<long long,std::unique_ptr<JSC::DFG::`anonymous namespace'::ImpureDataSlot>,WTF::DefaultHash<long long>,WTF::SignedWithZeroKeyHashTraits<long long>,WTF::HashTraits<std::unique_ptr<JSC::DFG::`anonymous namespace'::ImpureDataSlot>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SignedWithZeroKeyHashTraits<long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t StatusReg;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *result;
  unint64_t v42;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v16 = a2;
    v17 = (_QWORD *)(v8 + 24);
    do
    {
      *(v17 - 1) = 0x8000000000000000;
      *v17 = 0;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v18 = 0;
    v19 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v42 = StatusReg;
    while (1)
    {
      v21 = (uint64_t *)(v5 + 16 * v18);
      v22 = *v21;
      if (*v21 == 0x8000000000000000)
      {
        v40 = v21[1];
        v21[1] = 0;
        if (v40)
        {
          WTF::fastFree(v40, (void *)v9, v10, v11, v12, v13, v14, v15);
          StatusReg = v42;
        }
        goto LABEL_29;
      }
      if (v22 != 0x7FFFFFFFFFFFFFFFLL)
        break;
LABEL_29:
      if (++v18 == v6)
        goto LABEL_35;
    }
    v23 = *a1;
    if (*a1)
      v24 = *(_DWORD *)(v23 - 8);
    else
      v24 = 0;
    v25 = (v22 + ~(v22 << 32)) ^ ((unint64_t)(v22 + ~(v22 << 32)) >> 22);
    v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
    v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
    v28 = v24 & ((v27 >> 31) ^ v27);
    v29 = 1;
    do
    {
      v30 = v28;
      v31 = *(_QWORD *)(v23 + 16 * v28);
      v28 = (v28 + v29++) & v24;
    }
    while (v31 != 0x8000000000000000);
    v32 = (_QWORD *)(v23 + 16 * v30);
    v33 = v32[1];
    v32[1] = 0;
    if (!v33)
    {
LABEL_21:
      *v32 = v22;
      v36 = v5 + 16 * v18;
      v37 = *(_QWORD *)(v36 + 8);
      *(_QWORD *)(v36 + 8) = 0;
      v32[1] = v37;
      v9 = *(_QWORD *)(v36 + 8);
      *(_QWORD *)(v36 + 8) = 0;
      if (!v9)
        goto LABEL_27;
      v38 = *(_QWORD *)(StatusReg + 752);
      if (!v38)
      {
        pas_try_deallocate_slow_no_cache(v9, (uint64_t)&bmalloc_heap_config, 1);
        goto LABEL_46;
      }
      if (!(v9 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v9 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v9)) & 1) != 0)
      {
        goto LABEL_25;
      }
      if (v9 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v9 >> 24)
      {
        v11 = 0;
      }
      else
      {
        v11 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v9 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v9) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v11 == 1)
        {
LABEL_25:
          v39 = *(unsigned int *)(v38 + 8000);
          if (v39 < 0x3E7)
          {
            *(_QWORD *)(v38 + 8 * v39) = v9 | 0x5000000000000;
            *(_DWORD *)(v38 + 8000) = v39 + 1;
            goto LABEL_27;
          }
          pas_thread_local_cache_append_deallocation_slow(v38, v9, (os_unfair_lock_s *)5, v11, v12, v13, v14, v15);
LABEL_46:
          StatusReg = v42;
LABEL_27:
          if (v21 == a3)
            v19 = v32;
          goto LABEL_29;
        }
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v38, v9, 1, v11, v12, v13, v14, v15);
      goto LABEL_46;
    }
    v34 = *(_QWORD *)(StatusReg + 752);
    if (!v34)
    {
      pas_try_deallocate_slow_no_cache(v33, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_41;
    }
    if (!(v33 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v33 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v33)) & 1) != 0)
    {
      goto LABEL_18;
    }
    if (v33 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v33 >> 24)
    {
      v11 = 0;
    }
    else
    {
      v11 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v33 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v33) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v11 == 1)
      {
LABEL_18:
        v35 = *(unsigned int *)(v34 + 8000);
        if (v35 < 0x3E7)
        {
          *(_QWORD *)(v34 + 8 * v35) = v33 | 0x5000000000000;
          *(_DWORD *)(v34 + 8000) = v35 + 1;
LABEL_20:
          v22 = *v21;
          goto LABEL_21;
        }
        pas_thread_local_cache_append_deallocation_slow(v34, v33, (os_unfair_lock_s *)5, v11, v12, v13, v14, v15);
LABEL_41:
        StatusReg = v42;
        goto LABEL_20;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v34, v33, 1, v11, v12, v13, v14, v15);
    goto LABEL_41;
  }
  v19 = 0;
  result = 0;
  if (v5)
  {
LABEL_35:
    WTF::fastFree(v5 - 16, (void *)v9, v10, v11, v12, v13, v14, v15);
    return v19;
  }
  return result;
}

unint64_t *WTF::HashTable<std::unique_ptr<JSC::DFG::`anonymous namespace'::ImpureDataSlot>,std::unique_ptr<JSC::DFG::`anonymous namespace'::ImpureDataSlot>,WTF::IdentityExtractor,JSC::DFG::`anonymous namespace'::ImpureDataSlotHash,WTF::HashTraits<std::unique_ptr<JSC::DFG::`anonymous namespace'::ImpureDataSlot>>,WTF::HashTraits<std::unique_ptr<JSC::DFG::`anonymous namespace'::ImpureDataSlot>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (unint64_t *)(v11 + 8 * v22);
      v25 = *v24;
      if (*v24)
      {
        if (v25 != -1)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = 0;
          v29 = *(_DWORD *)(v25 + 72);
          do
          {
            v30 = v29 & v27;
            v29 = ++v28 + v30;
          }
          while (*(_QWORD *)(v26 + 8 * v30));
          v31 = (unint64_t *)(v26 + 8 * v30);
          *v31 = 0;
          v32 = *v24;
          *v24 = 0;
          *v31 = v32;
          v33 = *v24;
          *v24 = 0;
          if (v33)
            WTF::fastFree(v33, v15, v16, v17, v18, v19, v20, v21);
          if (v24 == (unint64_t *)a3)
            v23 = v31;
        }
      }
      else
      {
        *v24 = 0;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void JSC::DFG::`anonymous namespace'::ImpureMap::add(uint64_t *a1, __int128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t *v64;
  int i;
  unsigned int v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  int j;
  unsigned int v72;
  unint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v95;

  v11 = *((_QWORD *)a2 + 1);
  v12 = v11 & 0x3FFF;
  if (v12 != 2)
  {
    if (v12 == 40 || v12 == 1)
    {
      __break(0xC471u);
      return;
    }
    v46 = a1 + 2;
    v45 = a1[2];
    if (v45
    {
      v47 = *(_DWORD *)(v45 - 8);
    }
    else
    {
      v47 = 0;
    }
    v48 = *(_DWORD *)a2;
    v49 = *((_QWORD *)a2 + 1);
    v50 = *((_QWORD *)a2 + 2);
    v51 = (v49 + ~(v49 << 32)) ^ ((unint64_t)(v49 + ~(v49 << 32)) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = (v53 >> 31) ^ v53;
    v55 = *((_QWORD *)a2 + 4);
    v56 = v55 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v55 & 0xFFFFFFFFFFFFFFFCLL) == 0)
      v56 = *((_QWORD *)a2 + 3);
    v57 = (~(v56 << 32) + v56) ^ ((~(v56 << 32) + v56) >> 22);
    v58 = 9 * ((v57 + ~(v57 << 13)) ^ ((v57 + ~(v57 << 13)) >> 8));
    v59 = (v58 ^ (v58 >> 15)) + ~((v58 ^ (v58 >> 15)) << 27);
    v60 = *((_QWORD *)a2 + 5);
    v61 = *((_QWORD *)a2 + 6);
    v62 = v48 + v50 + v60 + v61 + v54 + ((v59 >> 31) ^ v59);
    if (v55 < 4)
    {
      v63 = 0;
      v64 = 0;
      for (i = v62; ; i = v63 + v66)
      {
        v66 = i & v47;
        v67 = (unint64_t *)(v45 + 8 * (i & v47));
        v68 = *v67;
        if (!*v67)
          goto LABEL_57;
        if (v68 != -1 && *(_DWORD *)v68 == v48 && *(_QWORD *)(v68 + 8) == v49 && *(_QWORD *)(v68 + 16) == v50)
        {
          v69 = *(_QWORD *)(v68 + 32);
          if (v69 >= 4)
          {
            if (v69 != v55)
              goto LABEL_100;
          }
          else if (*(_QWORD *)(v68 + 24) != *((_QWORD *)a2 + 3))
          {
            goto LABEL_100;
          }
          if (*(_QWORD *)(v68 + 40) == v60 && *(_QWORD *)(v68 + 48) == v61)
            return;
        }
LABEL_100:
        if (v68 == -1)
          v64 = (unint64_t *)(v45 + 8 * v66);
        ++v63;
      }
    }
    v70 = 0;
    v64 = 0;
    for (j = v62; ; j = v70 + v72)
    {
      v72 = j & v47;
      v67 = (unint64_t *)(v45 + 8 * (j & v47));
      v73 = *v67;
      if (!*v67)
        break;
      if (v73 != -1
        && *(_DWORD *)v73 == v48
        && *(_QWORD *)(v73 + 8) == v49
        && *(_QWORD *)(v73 + 16) == v50
        && *(_QWORD *)(v73 + 32) == v55
        && *(_QWORD *)(v73 + 40) == v60
        && *(_QWORD *)(v73 + 48) == v61)
      {
        return;
      }
      if (v73 == -1)
        v64 = (unint64_t *)(v45 + 8 * v72);
      ++v70;
    }
LABEL_57:
    if (v64)
      v74 = v64;
    else
      v74 = v67;
    if (*v74 == -1)
    {
      *v74 = 0;
      --*(_DWORD *)(*v46 - 16);
    }
    v80 = WTF::fastMalloc((WTF *)0x50);
    v81 = a2[2];
    v82 = *((_QWORD *)a2 + 6);
    v83 = *a2;
    *(_OWORD *)(v80 + 16) = a2[1];
    *(_OWORD *)(v80 + 32) = v81;
    *(_OWORD *)v80 = v83;
    *(_QWORD *)(v80 + 56) = 0;
    *(_QWORD *)(v80 + 64) = 0;
    *(_QWORD *)(v80 + 48) = v82;
    *(_DWORD *)(v80 + 72) = v62;
    *v74 = v80;
    v84 = *v46;
    if (*v46)
      v85 = *(_DWORD *)(v84 - 12) + 1;
    else
      v85 = 1;
    *(_DWORD *)(v84 - 12) = v85;
    v86 = *v46;
    if (*v46)
      v87 = *(_DWORD *)(v86 - 12);
    else
      v87 = 0;
    v88 = (*(_DWORD *)(v86 - 16) + v87);
    v89 = *(unsigned int *)(v86 - 4);
    if (v89 > 0x400)
    {
      if (v89 > 2 * v88)
        goto LABEL_68;
    }
    else
    {
      if (3 * v89 > 4 * v88)
      {
LABEL_68:
        *(__n128 *)(v80 + 56) = *a3;
        return;
      }
      if (!(_DWORD)v89)
      {
        v95 = 8;
        goto LABEL_96;
      }
    }
    v95 = ((_DWORD)v89 << (6 * *(_DWORD *)(v86 - 12) >= (2 * v89)));
LABEL_96:
    goto LABEL_68;
  }
  if ((v11 & 0x4000) != 0)
  {
LABEL_89:
    return;
  }
  v13 = v11 >> 15;
  v14 = *a1;
  if (*a1
  {
    v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v14 + 16 * v19);
  v21 = *v20;
  if (*v20 != 0x8000000000000000)
  {
    v22 = 0;
    v23 = 1;
    while (v21 != v13)
    {
      if (v21 == 0x7FFFFFFFFFFFFFFFLL)
        v22 = v20;
      v19 = (v19 + v23) & v15;
      v20 = (uint64_t *)(v14 + 16 * v19);
      v21 = *v20;
      ++v23;
      if (*v20 == 0x8000000000000000)
      {
        if (!v22)
          goto LABEL_13;
        *v22 = 0x8000000000000000;
        v22[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        *v22 = v13;
        v22[1] = 0;
        goto LABEL_16;
      }
    }
    v91 = v20[1];
    if (*(_DWORD *)v91 == *(_DWORD *)a2
      && *(_QWORD *)(v91 + 8) == *((_QWORD *)a2 + 1)
      && *(_QWORD *)(v91 + 16) == *((_QWORD *)a2 + 2))
    {
      v92 = *(_QWORD *)(v91 + 32);
      v93 = *((_QWORD *)a2 + 4);
      if (v92 <= 3 && v93 < 4)
      {
        v92 = *(_QWORD *)(v91 + 24);
        v93 = *((_QWORD *)a2 + 3);
      }
      if (v92 == v93 && *(_QWORD *)(v91 + 40) == *((_QWORD *)a2 + 5) && *(_QWORD *)(v91 + 48) == *((_QWORD *)a2 + 6))
        return;
    }
    goto LABEL_89;
  }
LABEL_13:
  v24 = v20[1];
  *v20 = v13;
  v20[1] = 0;
  if (v24)
    WTF::fastFree(v24, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v22 = v20;
LABEL_16:
  v25 = *a1;
  if (*a1)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *a1;
  if (*a1)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_22;
  }
  else
  {
    if (3 * v30 > 4 * v29)
      goto LABEL_22;
    if (!(_DWORD)v30)
    {
      v90 = 8;
      goto LABEL_77;
    }
  }
  v90 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
LABEL_77:
LABEL_22:
  v38 = WTF::fastMalloc((WTF *)0x50);
  v39 = *a3;
  v40 = *((_QWORD *)a2 + 6);
  v42 = a2[1];
  v41 = a2[2];
  *(_OWORD *)v38 = *a2;
  *(_OWORD *)(v38 + 16) = v42;
  *(_OWORD *)(v38 + 32) = v41;
  *(_QWORD *)(v38 + 48) = v40;
  *(__n128 *)(v38 + 56) = v39;
  *(_DWORD *)(v38 + 72) = 0;
  v43 = v22[1];
  v22[1] = v38;
  if (v43)
    WTF::fastFree(v43, v31, v32, v33, v34, v35, v36, v37);
}

__n128 JSC::DFG::`anonymous namespace'::ImpureMap::add(uint64_t *a1, int *a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t *v29;
  int i;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int j;
  unsigned int v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  __n128 result;
  unint64_t v56;

  v11 = *a1;
  if (*a1
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = *a2;
  v14 = *((_QWORD *)a2 + 1);
  v15 = *((_QWORD *)a2 + 2);
  v16 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = (v18 >> 31) ^ v18;
  v20 = *((_QWORD *)a2 + 4);
  v21 = v20 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v20 & 0xFFFFFFFFFFFFFFFCLL) == 0)
    v21 = *((_QWORD *)a2 + 3);
  v22 = (~(v21 << 32) + v21) ^ ((~(v21 << 32) + v21) >> 22);
  v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  v25 = *((_QWORD *)a2 + 5);
  v26 = *((_QWORD *)a2 + 6);
  v27 = v13 + v15 + v25 + v26 + v19 + ((v24 >> 31) ^ v24);
  if (v20 < 4)
  {
    v28 = 0;
    v29 = 0;
    for (i = v27; ; i = v28 + v31)
    {
      v31 = i & v12;
      v32 = (unint64_t *)(v11 + 8 * (i & v12));
      v33 = *v32;
      if (!*v32)
        goto LABEL_29;
      if (v33 != -1 && *(_DWORD *)v33 == v13 && *(_QWORD *)(v33 + 8) == v14 && *(_QWORD *)(v33 + 16) == v15)
      {
        v34 = *(_QWORD *)(v33 + 32);
        if (v34 >= 4)
        {
          if (v34 != v20)
            goto LABEL_52;
        }
        else if (*(_QWORD *)(v33 + 24) != *((_QWORD *)a2 + 3))
        {
          goto LABEL_52;
        }
        if (*(_QWORD *)(v33 + 40) == v25 && *(_QWORD *)(v33 + 48) == v26)
          return result;
      }
LABEL_52:
      if (v33 == -1)
        v29 = (unint64_t *)(v11 + 8 * v31);
      ++v28;
    }
  }
  v35 = 0;
  v29 = 0;
  for (j = v27; ; j = v35 + v37)
  {
    v37 = j & v12;
    v32 = (unint64_t *)(v11 + 8 * (j & v12));
    v38 = *v32;
    if (!*v32)
      break;
    if (v38 != -1
      && *(_DWORD *)v38 == v13
      && *(_QWORD *)(v38 + 8) == v14
      && *(_QWORD *)(v38 + 16) == v15
      && *(_QWORD *)(v38 + 32) == v20
      && *(_QWORD *)(v38 + 40) == v25
      && *(_QWORD *)(v38 + 48) == v26)
    {
      return result;
    }
    if (v38 == -1)
      v29 = (unint64_t *)(v11 + 8 * v37);
    ++v35;
  }
LABEL_29:
  if (v29)
    v39 = v29;
  else
    v39 = v32;
  if (*v39 == -1)
  {
    *v39 = 0;
    --*(_DWORD *)(*a1 - 16);
  }
  v45 = WTF::fastMalloc((WTF *)0x50);
  v46 = *((_OWORD *)a2 + 2);
  v47 = *((_QWORD *)a2 + 6);
  v48 = *(_OWORD *)a2;
  *(_OWORD *)(v45 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v45 + 32) = v46;
  *(_OWORD *)v45 = v48;
  *(_QWORD *)(v45 + 56) = 0;
  *(_QWORD *)(v45 + 64) = 0;
  *(_QWORD *)(v45 + 48) = v47;
  *(_DWORD *)(v45 + 72) = v27;
  *v39 = v45;
  v49 = *a1;
  if (*a1)
    v50 = *(_DWORD *)(v49 - 12) + 1;
  else
    v50 = 1;
  *(_DWORD *)(v49 - 12) = v50;
  v51 = *a1;
  if (*a1)
    v52 = *(_DWORD *)(v51 - 12);
  else
    v52 = 0;
  v53 = (*(_DWORD *)(v51 - 16) + v52);
  v54 = *(unsigned int *)(v51 - 4);
  if (v54 > 0x400)
  {
    if (v54 > 2 * v53)
      goto LABEL_40;
    goto LABEL_47;
  }
  if (3 * v54 <= 4 * v53)
  {
    if (!(_DWORD)v54)
    {
      v56 = 8;
      goto LABEL_50;
    }
LABEL_47:
    v56 = ((_DWORD)v54 << (6 * *(_DWORD *)(v51 - 12) >= (2 * v54)));
LABEL_50:
  }
LABEL_40:
  result = *a3;
  *(__n128 *)(v45 + 56) = *a3;
  return result;
}

void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::HugeMaps>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::HugeMaps>>,JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::HugeMaps>>,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::HugeMaps>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::HugeMaps>>,JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::HugeMaps>>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::HugeMaps>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::HugeMaps>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::HugeMaps>> const&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::DFG::Node *v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t **v12;
  unsigned __int16 *v13;
  uint64_t v14;
  int hasArrayMode;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t **v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  int *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t **v87;
  uint64_t v88;
  unsigned __int16 *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  unsigned __int16 *v97;
  uint64_t **v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  __int16 v112;
  unint64_t v113;
  unint64_t v114;
  __int16 v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  uint64_t **v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t **v123;
  unsigned __int16 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  uint64_t **v130;
  unint64_t v131;
  unint64_t v132;
  __int16 v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  __int16 v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  void *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t **v362;
  uint64_t **v363;
  unsigned __int16 *v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unsigned __int16 *v378;
  uint64_t v379;
  void *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t **v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unsigned int v402;
  unsigned int v403;
  unint64_t v404;
  uint64_t **v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t **v422;
  unint64_t v423;
  unsigned __int16 *v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t **v428;
  unsigned __int16 *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  uint64_t v438;
  uint64_t **v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unsigned int v451;
  int v452;
  BOOL v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t **v456;
  unsigned __int16 *v457;
  unsigned int v458;
  unsigned int v459;
  uint64_t **v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  unint64_t v466;
  unint64_t v467;
  BOOL v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t **v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t **v488;
  unint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t **v495;
  unint64_t v496;
  unsigned __int16 *v497;
  uint64_t v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  __int16 v512;
  _QWORD *v513;
  _QWORD *v514;
  _QWORD *v515;
  unint64_t v516;
  uint64_t **v517;
  unint64_t v518;
  uint64_t v519;
  _QWORD *v520;
  void *v521;
  uint64_t v522;
  uint64_t v523;
  _QWORD *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unsigned int v528;
  uint64_t v529;
  uint64_t v530;
  _BOOL4 v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t **v540;
  unsigned __int16 *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  __int128 *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unsigned __int16 *v561;
  int v562;
  int v563;
  unsigned __int8 v564;
  uint64_t v565;
  int v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  __int128 *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  unint64_t v579;
  uint64_t v580;
  unsigned int v581;
  BOOL v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  BOOL v586;
  _QWORD *v587;
  _QWORD *v588;
  unsigned __int16 *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  __int128 *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  void *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  int v610;
  int v611;
  int v612;
  char v613;
  uint64_t v614;
  uint64_t **v615;
  unsigned __int16 *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  unint64_t v625;
  uint64_t v626;
  _DWORD *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  int v635;
  uint64_t v636;
  int v637;
  unint64_t v638;
  unsigned int *v639;
  unint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  JSC::DFG::Node *v648;
  uint64_t **v649;
  unsigned __int16 *v650;
  uint64_t v651;
  void *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  unsigned __int16 *v662;
  uint64_t v663;
  _DWORD *v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  int v677;
  uint64_t v678;
  int v679;
  int v680;
  unsigned int v681;
  uint64_t **v682;
  unint64_t v683;
  unsigned __int16 *v684;
  _QWORD *v685;
  uint64_t **v686;
  unsigned __int16 *v687;
  unint64_t v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t **v694;
  unint64_t v695;
  _QWORD *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  unint64_t v701;
  uint64_t v702;
  _QWORD *v703;
  _QWORD *v704;
  _QWORD *v705;
  _QWORD *v706;
  _QWORD *v707;
  uint64_t v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unsigned int v715;
  uint64_t v716;
  unsigned int v717;
  unsigned int v718;
  uint64_t v719;
  uint64_t v720;
  unint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  __int128 *v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  unint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  unsigned int *v742;
  unsigned int v743;
  unsigned int *v744;
  uint64_t v745;
  unsigned int v746;
  _DWORD *v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  __int128 *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unsigned int v767;
  unsigned int v768;
  uint64_t v769;
  uint64_t v770;
  unint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unsigned int v775;
  unsigned int v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  uint64_t v780;
  uint64_t v781;
  unsigned int v782;
  unint64_t v783;
  unsigned __int16 *v784;
  uint64_t *v785;
  int v786;
  uint64_t **v787;
  unsigned __int16 *v788;
  uint64_t v789;
  void *v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  int v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t **v802;
  unsigned __int16 *v803;
  uint64_t v804;
  void *v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  int v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t **v817;
  unsigned __int16 *v818;
  uint64_t v819;
  void *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  int v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  unint64_t v833;
  int v834;
  uint64_t v835;
  unsigned int v836;
  unsigned int v837;
  uint64_t v838;
  uint64_t v839;
  unint64_t v840;
  uint64_t v841;
  uint64_t v842;
  int v843;
  uint64_t v844;
  unsigned int v845;
  unsigned int v846;
  uint64_t v847;
  uint64_t v848;
  unint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  uint64_t v853;
  unsigned int v854;
  unsigned int v855;
  uint64_t v856;
  uint64_t v857;
  unint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  unsigned int v862;
  unsigned int v863;
  uint64_t v864;
  uint64_t v865;
  unint64_t v866;
  uint64_t v867;
  unsigned int *v868;
  uint64_t v869;
  uint64_t v870;
  unsigned int v871;
  uint64_t v872;
  uint64_t v873;
  __int128 *v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  unsigned int v883;
  unsigned int v884;
  uint64_t v885;
  uint64_t v886;
  unint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  JSC::DFG::Node *v910;
  const char *v911;
  void *v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t **v919;
  JSC::DFG::Node *v920;
  uint64_t v921;
  int v922;
  uint64_t **v923;
  unint64_t v924;
  uint64_t v925;
  uint64_t v926;
  JSC::DFG::Node *v927;
  uint64_t **v928;
  int v929;
  uint64_t v930;
  JSC::DFG::Node *v931;
  uint64_t **v932;
  int v933;
  uint64_t **v934;
  JSC::DFG::Node *v935;
  int v936;
  uint64_t v937;
  JSC::DFG::Node *v938;
  uint64_t **v939;
  int v940;
  int v941;
  int v942;
  uint64_t v943;
  uint64_t **v944;
  JSC::DFG::Graph *v945;
  int v946;
  uint64_t v947;
  unint64_t v948;
  unint64_t v949;
  uint64_t v950;
  unint64_t v951;
  uint64_t v952;
  int v953;
  unint64_t v954;
  unint64_t v955;
  __int128 v956;
  __int128 v957;
  int v958;
  uint64_t v959;
  unint64_t v960;
  unint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  int v965;
  uint64_t v966;
  unint64_t v967;
  unint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  int v972;
  uint64_t v973;
  unint64_t v974;
  unint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  int v979;
  uint64_t v980;
  unint64_t v981;
  unint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  int v986;
  uint64_t v987;
  unint64_t v988;
  unint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  int v993;
  uint64_t v994;
  unint64_t v995;
  __int128 v996;
  __int128 v997;
  int v998;
  uint64_t v999;
  unint64_t v1000;
  __int128 v1001;
  __int128 v1002;
  int v1003;
  uint64_t v1004;
  unint64_t v1005;
  __int128 v1006;
  __int128 v1007;
  int v1008;
  uint64_t v1009;
  unint64_t v1010;
  unint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  int v1015;
  uint64_t v1016;
  unint64_t v1017;
  __int128 v1018;
  __int128 v1019;
  int v1020;
  uint64_t v1021;
  unint64_t v1022;
  __int128 v1023;
  __int128 v1024;
  int v1025;
  uint64_t v1026;
  unint64_t v1027;
  __int128 v1028;
  __int128 v1029;
  int v1030;
  uint64_t v1031;
  unint64_t v1032;
  __int128 v1033;
  __int128 v1034;
  int v1035;
  uint64_t v1036;
  unint64_t v1037;
  unint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  int v1042;
  uint64_t v1043;
  unint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  unint64_t v1047;
  uint64_t v1048;
  __int128 v1049;
  unsigned __int16 *v1050;
  uint64_t v1051;
  __int128 *v1052;
  uint64_t v1053;
  uint64_t v1054;
  __int128 v1055;
  unsigned __int16 *v1056;
  uint64_t v1057;
  __int128 *v1058;
  uint64_t v1059;
  uint64_t v1060;
  __int128 v1061;
  unsigned __int16 *v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  unsigned __int16 *v1066;
  uint64_t v1067;
  __int128 *v1068;
  uint64_t v1069;
  uint64_t v1070;
  __int128 v1071;
  unsigned __int16 *v1072;
  uint64_t v1073;
  __int128 *v1074;
  uint64_t v1075;
  uint64_t v1076;
  __int128 v1077;
  unsigned __int16 *v1078;
  __int128 v1079;
  __int128 v1080;
  int v1081;
  uint64_t v1082;
  unsigned __int16 *v1083;
  __int128 v1084;
  __int128 v1085;
  int v1086;
  uint64_t v1087;
  __int128 v1088;
  __int128 v1089;
  uint64_t v1090;
  int v1091;
  uint64_t v1092;
  __int128 v1093;
  __int128 v1094;
  uint64_t v1095;
  int v1096;
  unint64_t v1097;
  unint64_t v1098;
  __int128 v1099;
  __int128 v1100;
  int v1101;
  unint64_t v1102;
  unint64_t v1103;
  __int128 v1104;
  __int128 v1105;
  int v1106;
  uint64_t v1107;
  unint64_t v1108;
  __int128 v1109;
  __int128 v1110;
  int v1111;
  uint64_t v1112;
  unint64_t v1113;
  __int128 v1114;
  __int128 v1115;
  int v1116;
  unint64_t v1117;
  unint64_t v1118;
  __int128 v1119;
  __int128 v1120;
  int v1121;
  unint64_t v1122;
  unint64_t v1123;
  __int128 v1124;
  __int128 v1125;
  int v1126;
  unint64_t v1127;
  unint64_t v1128;
  __int128 v1129;
  __int128 v1130;
  int v1131;
  unint64_t v1132;
  unint64_t v1133;
  __int128 v1134;
  __int128 v1135;
  int v1136;
  uint64_t v1137;
  unint64_t v1138;
  __int128 v1139;
  __int128 v1140;
  int v1141;
  uint64_t v1142;
  unint64_t v1143;
  __int128 v1144;
  __int128 v1145;
  int v1146;
  uint64_t v1147;
  unint64_t v1148;
  __int128 v1149;
  __int128 v1150;
  int v1151;
  uint64_t v1152;
  unint64_t v1153;
  __int128 v1154;
  __int128 v1155;
  int v1156;
  uint64_t v1157;
  unint64_t v1158;
  __int128 v1159;
  __int128 v1160;
  int v1161;
  unint64_t v1162;
  unint64_t v1163;
  __int128 v1164;
  __int128 v1165;
  int v1166;
  unint64_t v1167;
  unint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  int v1173;
  unint64_t v1174;
  unint64_t v1175;
  __int128 v1176;
  __int128 v1177;
  int v1178;
  unint64_t v1179;
  unint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  int v1185;
  unint64_t v1186;
  unint64_t v1187;
  __int128 v1188;
  __int128 v1189;
  int v1190;
  unint64_t v1191;
  unint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  unsigned int *v1196;
  int v1197;
  unint64_t v1198;
  unint64_t v1199;
  __int128 v1200;
  __int128 v1201;
  int v1202;
  unint64_t v1203;
  unint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  int v1209;
  uint64_t v1210;
  unint64_t v1211;
  __int128 v1212;
  __int128 v1213;
  int v1214;
  uint64_t v1215;
  unint64_t v1216;
  __int128 v1217;
  __int128 v1218;
  int v1219;
  uint64_t v1220;
  unint64_t v1221;
  __int128 v1222;
  __int128 v1223;
  int v1224;
  uint64_t v1225;
  unint64_t v1226;
  __int128 v1227;
  __int128 v1228;
  int v1229;
  unint64_t v1230;
  unint64_t v1231;
  __int128 v1232;
  __int128 v1233;
  int v1234;
  uint64_t v1235;
  unint64_t v1236;
  __int128 v1237;
  __int128 v1238;
  int v1239;
  uint64_t v1240;
  unint64_t v1241;
  __int128 v1242;
  __int128 v1243;
  int v1244;
  uint64_t v1245;
  unint64_t v1246;
  __int128 v1247;
  __int128 v1248;
  int v1249;
  uint64_t v1250;
  unint64_t v1251;
  __int128 v1252;
  __int128 v1253;
  int v1254;
  uint64_t v1255;
  unint64_t v1256;
  unint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  __int128 v1261;
  unint64_t v1262;
  unint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  int v1267;
  uint64_t v1268;
  unint64_t v1269;
  unint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  __int128 v1274;
  unint64_t v1275;
  unint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  __int128 v1280;
  unint64_t v1281;
  unint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  int v1286;
  uint64_t v1287;
  unint64_t v1288;
  unint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  __int128 v1293;
  unint64_t v1294;
  unint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  int v1299;
  uint64_t v1300;
  unint64_t v1301;
  unint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  int v1306;
  uint64_t v1307;
  unint64_t v1308;
  unint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  int v1313;
  uint64_t v1314;
  unint64_t v1315;
  unint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  int v1320;
  uint64_t v1321;
  unint64_t v1322;
  unint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  int v1327;
  uint64_t v1328;
  unint64_t v1329;
  unint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  int v1334;
  uint64_t v1335;
  unint64_t v1336;
  unint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  int v1341;
  uint64_t v1342;
  __int128 v1343;
  __int128 v1344;
  uint64_t v1345;
  int v1346;
  uint64_t v1347;
  __int128 v1348;
  __int128 v1349;
  uint64_t v1350;
  int v1351;
  uint64_t v1352;
  __int128 v1353;
  __int128 v1354;
  uint64_t v1355;
  int v1356;
  uint64_t v1357;
  __int128 v1358;
  __int128 v1359;
  uint64_t v1360;
  int v1361;
  unint64_t v1362;
  __int128 v1363;
  __int128 v1364;
  uint64_t v1365;
  int v1366;
  uint64_t v1367;
  __int128 v1368;
  __int128 v1369;
  uint64_t v1370;
  int v1371;
  uint64_t v1372;
  unint64_t v1373;
  __int128 v1374;
  __int128 v1375;
  int v1376;
  uint64_t v1377;
  unint64_t v1378;
  __int128 v1379;
  __int128 v1380;
  int v1381;
  uint64_t v1382;
  unint64_t v1383;
  __int128 v1384;
  __int128 v1385;
  int v1386;
  uint64_t v1387;
  unint64_t v1388;
  __int128 v1389;
  __int128 v1390;
  int v1391;
  uint64_t v1392;
  unint64_t v1393;
  __int128 v1394;
  __int128 v1395;
  int v1396;
  uint64_t v1397;
  unint64_t v1398;
  __int128 v1399;
  __int128 v1400;
  int v1401;
  uint64_t v1402;
  __int128 v1403;
  __int128 v1404;
  uint64_t v1405;
  int v1406;
  uint64_t v1407;
  unint64_t v1408;
  unint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  int v1413;
  uint64_t v1414;
  unint64_t v1415;
  unint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  int v1420;
  uint64_t v1421;
  unint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  _BYTE v1427[32];
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430[2];
  char v1431;
  uint64_t v1432;
  _BYTE v1433[30];
  _BYTE v1434[30];
  _BYTE v1435[30];
  _BYTE v1436[30];
  uint64_t v1437;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = (unsigned __int16 *)v3;
  v11 = v2;
  v1437 = *MEMORY[0x1E0C80C00];
  if (*(int *)(v2 + 952) > 0)
    goto LABEL_12;
  v12 = v5;
  v13 = (unsigned __int16 *)v3;
  v14 = v4;
  hasArrayMode = JSC::DFG::Node::hasArrayMode(v3);
  v4 = v14;
  v10 = v13;
  v5 = v12;
  if (!hasArrayMode)
    goto LABEL_12;
  v17 = v13[9];
  if (v17 > 0xC9)
  {
    if (v17 - 202 > 0x3E || ((1 << (v17 + 54)) & 0x400000000E002FEFLL) == 0)
    {
      v18 = v17 - 333;
      if (v18 > 0x3A || ((1 << v18) & 0x7A8000000000003) == 0)
      {
LABEL_33:
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v13, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
        __break(0xC471u);
        JUMPOUT(0x19836A828);
      }
    }
    goto LABEL_13;
  }
  v19 = v17 - 101;
  if (v17 - 101 > 0x3E)
    goto LABEL_32;
  if (((1 << v19) & 0x7E0070000000000FLL) == 0)
  {
    if (((1 << v19) & 0x18000000000) != 0)
    {
LABEL_12:
      v945 = (JSC::DFG::Graph *)v11;
      v16 = v1427;
      v20 = v10[9];
      switch(v10[9])
      {
        case 0u:
        case 1u:
        case 2u:
        case 0xBFu:
        case 0xC0u:
          v30 = *((_QWORD *)v10 + 9);
          goto LABEL_35;
        case 3u:
        case 4u:
        case 5u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Du:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x60u:
        case 0x61u:
        case 0x84u:
        case 0x85u:
        case 0x8Cu:
        case 0x8Du:
        case 0x90u:
        case 0xAAu:
        case 0xB8u:
        case 0xB9u:
        case 0xBAu:
        case 0x101u:
        case 0x102u:
        case 0x113u:
        case 0x117u:
        case 0x118u:
        case 0x126u:
        case 0x129u:
        case 0x153u:
        case 0x154u:
        case 0x166u:
        case 0x16Cu:
        case 0x16Du:
        case 0x16Eu:
        case 0x16Fu:
        case 0x170u:
        case 0x171u:
        case 0x172u:
        case 0x173u:
        case 0x174u:
        case 0x175u:
        case 0x176u:
        case 0x177u:
        case 0x17Bu:
        case 0x1A2u:
        case 0x1A3u:
        case 0x1A4u:
        case 0x1A5u:
        case 0x1A6u:
        case 0x1A7u:
        case 0x1A8u:
        case 0x1A9u:
        case 0x1AAu:
          return;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0x22u:
        case 0x4Bu:
        case 0x54u:
        case 0x5Eu:
        case 0x5Fu:
        case 0x62u:
        case 0x69u:
        case 0x6Au:
        case 0x6Bu:
        case 0x6Cu:
        case 0x6Eu:
        case 0x6Fu:
        case 0x70u:
        case 0x71u:
        case 0x72u:
        case 0x73u:
        case 0x74u:
        case 0x75u:
        case 0x76u:
        case 0x77u:
        case 0x78u:
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Cu:
        case 0x7Du:
        case 0x7Eu:
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x82u:
        case 0x83u:
        case 0x88u:
        case 0x89u:
        case 0x8Eu:
        case 0x8Fu:
        case 0xA7u:
        case 0xA8u:
        case 0xB0u:
        case 0xB1u:
        case 0xB2u:
        case 0xB5u:
        case 0xC3u:
        case 0xC5u:
        case 0xC6u:
        case 0xC7u:
        case 0xC8u:
        case 0xC9u:
        case 0xD4u:
        case 0xD5u:
        case 0xD6u:
        case 0xD8u:
        case 0xD9u:
        case 0xDAu:
        case 0xDBu:
        case 0xDCu:
        case 0xDEu:
        case 0xF1u:
        case 0xF2u:
        case 0xF3u:
        case 0xF4u:
        case 0xF5u:
        case 0xF6u:
        case 0xF7u:
        case 0xF8u:
        case 0xF9u:
        case 0xFAu:
        case 0xFBu:
        case 0xFCu:
        case 0xFDu:
        case 0xFEu:
        case 0xFFu:
        case 0x100u:
        case 0x103u:
        case 0x104u:
        case 0x105u:
        case 0x108u:
        case 0x109u:
        case 0x10Cu:
        case 0x10Eu:
        case 0x10Fu:
        case 0x110u:
        case 0x111u:
        case 0x112u:
        case 0x116u:
        case 0x119u:
        case 0x11Au:
        case 0x11Bu:
        case 0x11Cu:
        case 0x11Du:
        case 0x11Eu:
        case 0x11Fu:
        case 0x120u:
        case 0x121u:
        case 0x122u:
        case 0x124u:
        case 0x125u:
        case 0x13Bu:
        case 0x13Cu:
        case 0x13Du:
        case 0x140u:
        case 0x141u:
        case 0x144u:
        case 0x147u:
        case 0x14Au:
        case 0x14Du:
        case 0x14Eu:
        case 0x14Fu:
        case 0x150u:
        case 0x151u:
        case 0x152u:
        case 0x155u:
        case 0x156u:
        case 0x15Au:
        case 0x15Bu:
        case 0x15Cu:
        case 0x15Du:
        case 0x15Eu:
        case 0x15Fu:
        case 0x160u:
        case 0x161u:
        case 0x162u:
        case 0x163u:
        case 0x16Bu:
        case 0x178u:
        case 0x179u:
        case 0x17Au:
        case 0x17Du:
        case 0x17Eu:
        case 0x17Fu:
        case 0x181u:
        case 0x184u:
        case 0x185u:
        case 0x186u:
        case 0x187u:
        case 0x19Bu:
        case 0x1B0u:
          goto LABEL_13;
        case 0xBu:
          v1366 = 36;
          v1367 = 98306;
          v1368 = 0u;
          v1369 = 0u;
          v1370 = 0;
          v65 = *v5;
          v66 = &v1366;
          goto LABEL_856;
        case 0xCu:
          v105 = (uint64_t *)(*(_QWORD *)v4 + 40);
          v106 = 98306;
          goto LABEL_271;
        case 0xDu:
          v692 = *((_QWORD *)v10 + 9);
          if (v692)
          {
            v782 = (HIDWORD(*(_QWORD *)(v692 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v692 + 24) >> 28) >> 24 << 20)) + 4;
            v693 = ((unint64_t)v782 << 15) | ((unint64_t)(v782 >> 31) << 47) | 2;
          }
          else
          {
            v693 = 131074;
          }
          v1361 = 37;
          v1363 = 0u;
          v1364 = 0u;
          v1362 = v693;
          v1365 = 0;
          v65 = *v5;
          v66 = &v1361;
          goto LABEL_856;
        case 0xEu:
          v105 = (uint64_t *)(*(_QWORD *)v4 + 40);
          v106 = 131074;
          goto LABEL_271;
        case 0xFu:
          v703 = (_QWORD *)*((_QWORD *)v10 + 9);
          v704 = v703;
          do
          {
            v705 = v704;
            v704 = (_QWORD *)*v704;
          }
          while (v704);
          if (v705 != v703)
          {
            *v703 = v705;
            v703 = (_QWORD *)*((_QWORD *)v10 + 9);
          }
          v706 = v703;
          do
          {
            v707 = v706;
            v706 = (_QWORD *)*v706;
          }
          while (v706);
          if (v707 != v703)
            *v703 = v707;
          v708 = (v707[3] << 15) | 2;
          v1356 = 36;
          v1357 = v708;
          v1358 = 0u;
          v1359 = 0u;
          v1360 = 0;
          v65 = *v5;
          v66 = &v1356;
          goto LABEL_856;
        case 0x10u:
          v94 = (_QWORD *)*((_QWORD *)v10 + 9);
          v95 = v94;
          do
          {
            v96 = v95;
            v95 = (_QWORD *)*v95;
          }
          while (v95);
          v97 = v10;
          v98 = v5;
          if (v96 != v94)
            *v94 = v96;
          v99 = (_QWORD *)*((_QWORD *)v97 + 9);
          v100 = v99;
          do
          {
            v101 = v100;
            v100 = (_QWORD *)*v100;
          }
          while (v100);
          if (v101 != v99)
            *v99 = v101;
          v90 = 0;
          v102 = (v101[3] << 15) | 2;
          v1351 = 36;
          v1353 = 0u;
          v1354 = 0u;
          v1352 = v102;
          v1355 = 0;
          v103 = *((_QWORD *)v97 + 3);
          v92 = v103 & 0xFF00FFFFFFFFFFFFLL;
          if ((v103 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v104 = *(unsigned __int16 *)((v103 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v104 <= 2)
            {
              v90 = *(_QWORD *)(v92 + 72);
              if ((_DWORD)v104)
              {
                if ((_DWORD)v104 != 1)
                  v104 = 2;
                v90 |= v104;
              }
            }
            else
            {
              v90 = 0;
            }
          }
          v65 = *v98;
          v66 = &v1351;
          goto LABEL_858;
        case 0x11u:
          v87 = v5;
          v88 = (**((_QWORD **)v10 + 9) << 15) | 2;
          v89 = v10;
          v90 = 0;
          v1341 = 36;
          v1343 = 0u;
          v1344 = 0u;
          v1342 = v88;
          v1345 = 0;
          v91 = *((_QWORD *)v89 + 3);
          v92 = v91 & 0xFF00FFFFFFFFFFFFLL;
          if ((v91 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v93 = *(unsigned __int16 *)((v91 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v93 <= 2)
            {
              v90 = *(_QWORD *)(v92 + 72);
              if ((_DWORD)v93)
              {
                if ((_DWORD)v93 != 1)
                  v93 = 2;
                v90 |= v93;
              }
            }
            else
            {
              v90 = 0;
            }
          }
          v65 = *v87;
          v66 = &v1341;
          goto LABEL_858;
        case 0x12u:
          v107 = *((_QWORD *)v10 + 9);
          v108 = *(_QWORD *)v4;
          v109 = 2;
          goto LABEL_270;
        case 0x13u:
          v374 = (**((_QWORD **)v10 + 9) << 15) | 2;
          v1346 = 36;
          v1347 = v374;
          v1348 = 0u;
          v1349 = 0u;
          v1350 = 0;
          v65 = *v5;
          v66 = &v1346;
          goto LABEL_856;
        case 0x1Cu:
          v513 = (_QWORD *)*((_QWORD *)v10 + 9);
          v514 = v513;
          do
          {
            v515 = v514;
            v514 = (_QWORD *)*v514;
          }
          while (v514);
          if (v515 != v513)
            *v513 = v515;
          return;
        case 0x1Eu:
          v110 = *((unsigned int *)v10 + 18);
          v111 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          v112 = 30;
          goto LABEL_421;
        case 0x28u:
          v1401 = 23;
          v1403 = 0u;
          v1404 = 0u;
          v1402 = 16422;
          v1405 = 0;
          v65 = *v5;
          v66 = &v1401;
          goto LABEL_856;
        case 0x29u:
          v113 = *((_QWORD *)v10 + 3);
          if (((v113 >> 50) & 0x3F) - 26 > 2)
            goto LABEL_13;
          v114 = v113 & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v115 = 41;
          goto LABEL_428;
        case 0x2Au:
          v642 = *((_QWORD *)v10 + 3);
          if ((v642 & 0xFC000000000000) == 0)
            goto LABEL_13;
          v114 = v642 & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v115 = 42;
          goto LABEL_428;
        case 0x2Bu:
        case 0x2Du:
        case 0x2Fu:
        case 0x32u:
        case 0x34u:
        case 0x55u:
        case 0x56u:
        case 0x57u:
        case 0x58u:
        case 0x59u:
        case 0x5Au:
          v24 = *((_QWORD *)v10 + 3);
          v25 = (v24 >> 50) & 0x3F;
          switch((_DWORD)v25)
          {
            case 0x1A:
              v26 = *((_QWORD *)v10 + 4);
              v27 = v26 & 0xFC000000000000;
              v28 = 0x68000000000000;
              break;
            case 0x1C:
              v26 = *((_QWORD *)v10 + 4);
              v27 = v26 & 0xFC000000000000;
              v28 = 0x70000000000000;
              break;
            case 0x1B:
              v26 = *((_QWORD *)v10 + 4);
              v27 = v26 & 0xFC000000000000;
              v28 = 0x6C000000000000;
              break;
            default:
              goto LABEL_13;
          }
          if (v27 == v28)
            goto LABEL_110;
          goto LABEL_13;
        case 0x2Cu:
        case 0x2Eu:
        case 0x30u:
        case 0x31u:
        case 0x33u:
        case 0x35u:
          v24 = *((_QWORD *)v10 + 3);
          if ((v24 & 0xFC000000000000) != 0)
            goto LABEL_26;
          goto LABEL_13;
        case 0x36u:
        case 0x38u:
        case 0x3Au:
        case 0x3Bu:
        case 0x3Cu:
        case 0x3Du:
        case 0x43u:
        case 0x4Au:
        case 0x5Bu:
        case 0x86u:
        case 0xA5u:
        case 0xA6u:
        case 0xA9u:
        case 0xBBu:
        case 0xBCu:
        case 0xE2u:
        case 0xE3u:
        case 0xE4u:
        case 0xEBu:
        case 0xECu:
        case 0xEEu:
        case 0xF0u:
        case 0x128u:
        case 0x12Au:
        case 0x12Du:
        case 0x12Eu:
        case 0x12Fu:
        case 0x130u:
        case 0x133u:
        case 0x134u:
        case 0x137u:
        case 0x138u:
        case 0x139u:
        case 0x13Au:
        case 0x14Bu:
        case 0x14Cu:
        case 0x17Cu:
        case 0x19Cu:
        case 0x19Du:
          v22 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          *(_WORD *)v1427 = v20;
          *(int8x16_t *)&v1427[8] = vandq_s8(*(int8x16_t *)(v10 + 12), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
          v1428 = 0;
          *(_QWORD *)&v1427[24] = v22;
          goto LABEL_430;
        case 0x37u:
        case 0x39u:
        case 0x3Eu:
        case 0x45u:
          v30 = *((unsigned int *)v10 + 18);
LABEL_35:
          v32 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          *(_WORD *)v1427 = v10[9];
          goto LABEL_36;
        case 0x3Fu:
          v411 = *((_QWORD *)v10 + 3);
          if (((v411 >> 50) & 0x3F) - 1 > 1)
            goto LABEL_13;
          v114 = v411 & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v115 = 63;
          goto LABEL_428;
        case 0x40u:
        case 0x42u:
        case 0x44u:
          v33 = *((_QWORD *)v10 + 3);
          v48 = (v33 >> 50) & 0x3F;
          if (((v33 >> 50) & 0x3F) > 0x30)
          {
            if ((_DWORD)v48 != 52 && (_DWORD)v48 != 49)
            {
LABEL_976:
              JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
              __break(0xC471u);
              JUMPOUT(0x19836E714);
            }
LABEL_106:
            v34 = *((unsigned int *)v10 + 18);
LABEL_107:
            v23 = *v5;
            *(_WORD *)v1427 = v10[9];
            *(int8x16_t *)&v1427[16] = vandq_s8(*((int8x16_t *)v10 + 2), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
            *(_QWORD *)&v1427[8] = v33 & 0xFFFCFFFFFFFFFFFFLL;
            v1428 = v34;
LABEL_422:
            v1429 = 0;
LABEL_430:
            v1432 = v23[2];
            WTF::HashMap<JSC::DFG::PureValue,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>((uint64_t)v1430, v23 + 4, (unsigned __int16 *)v1427, &v1432);
            if (!v1431)
            {
              v648 = *(JSC::DFG::Node **)(v1430[0] + 48);
              if (v648)
              {
                JSC::DFG::Node::replaceWith(v23[2], (JSC::DFG::Graph *)*v23, v648, v643, v644, v645, v646, v647);
                *((_BYTE *)v23 + 8) = 1;
              }
            }
            return;
          }
          if ((_DWORD)v48)
          {
            if ((_DWORD)v48 != 1)
              goto LABEL_976;
            goto LABEL_106;
          }
          goto LABEL_13;
        case 0x41u:
          v701 = *((_QWORD *)v10 + 3);
          v702 = (v701 >> 50) & 0x3F;
          if (v702 > 0x34 || ((1 << v702) & 0x12000000000002) == 0)
            goto LABEL_13;
          v30 = *((unsigned int *)v10 + 18);
          v511 = v701 & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          v512 = 65;
          goto LABEL_461;
        case 0x46u:
          v625 = *((_QWORD *)v10 + 3);
          v626 = (v625 >> 50) & 0x3F;
          if ((_DWORD)v626 != 49 && (_DWORD)v626 != 1)
            goto LABEL_13;
          v30 = *((unsigned int *)v10 + 18);
          v511 = v625 & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          v512 = 70;
          goto LABEL_461;
        case 0x47u:
        case 0x48u:
          *(_QWORD *)&v1436[22] = *((_QWORD *)v10 + 5);
          *(_OWORD *)&v1436[6] = *(_OWORD *)(v10 + 12);
          v23 = *v5;
          *(_WORD *)v1427 = v20;
          *(_OWORD *)&v1427[2] = *(_OWORD *)v1436;
          v81 = *(_OWORD *)&v1436[14];
LABEL_95:
          *(_OWORD *)&v1427[16] = v81;
          v1428 = 0;
LABEL_96:
          v1429 = v11;
          goto LABEL_430;
        case 0x49u:
        case 0x50u:
          v53 = *((_QWORD *)v10 + 3);
          if ((v53 & 0xFC000000000000) == 0xC4000000000000)
            goto LABEL_98;
          goto LABEL_13;
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
          v33 = *((_QWORD *)v10 + 3);
          if ((v33 & 0xFC000000000000) != 0xC4000000000000)
            goto LABEL_13;
          v34 = *((int *)v10 + 18);
          goto LABEL_107;
        case 0x51u:
          v510 = *((_QWORD *)v10 + 3);
          if ((v510 & 0xFC000000000000) != 0xC4000000000000)
            goto LABEL_13;
          v30 = *((unsigned int *)v10 + 18);
          v511 = v510 & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          v512 = 81;
LABEL_461:
          *(_WORD *)v1427 = v512;
          *(int8x16_t *)&v1427[16] = vandq_s8(*((int8x16_t *)v10 + 2), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
          *(_QWORD *)&v1427[8] = v511;
          goto LABEL_37;
        case 0x52u:
        case 0x53u:
          v49 = *((_QWORD *)v10 + 3);
          v50 = (v49 >> 50) & 0x3F;
          if (v50 > 0x34)
            goto LABEL_60;
          if (((1 << v50) & 0x1200001C000002) != 0)
            goto LABEL_93;
          if (v50)
          {
LABEL_60:
            JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
            __break(0xC471u);
            JUMPOUT(0x19836A9F0);
          }
          goto LABEL_13;
        case 0x5Cu:
        case 0x5Du:
          v54 = *((unsigned int *)v10 + 18);
          v55 = *((_DWORD *)v10 + 14) & 7;
          if (v55 >= 2)
          {
            switch(v55)
            {
              case 3u:
                v56 = 13;
                break;
              case 4u:
                v56 = 17;
                break;
              case 5u:
                v56 = 19;
                break;
              case 7u:
                __break(0xC471u);
                JUMPOUT(0x19836E544);
              default:
                __break(0xC471u);
                JUMPOUT(0x19836E574);
            }
          }
          else
          {
            v56 = 21;
          }
          switch(*((_DWORD *)v10 + 18))
          {
            case 0u:
            case 1u:
            case 2u:
            case 4u:
            case 0x17u:
            case 0x18u:
              goto LABEL_13;
            case 3u:
              return;
            case 5u:
              if (BYTE2(v54) - 3 <= 1)
                goto LABEL_13;
              *(_QWORD *)&v1434[22] = *((_QWORD *)v10 + 5);
              *(_OWORD *)&v1434[6] = *(_OWORD *)(v10 + 12);
              v23 = *v5;
              *(_WORD *)v1427 = v20;
              *(_OWORD *)&v1427[2] = *(_OWORD *)v1434;
              *(_OWORD *)&v1427[16] = *(_OWORD *)&v1434[14];
              v1428 = v54;
              goto LABEL_96;
            case 6u:
              *(_QWORD *)&v1433[22] = *((_QWORD *)v10 + 5);
              *(_OWORD *)&v1433[6] = *(_OWORD *)(v10 + 12);
              v23 = *v5;
              *(_WORD *)v1427 = v20;
              *(_OWORD *)&v1427[2] = *(_OWORD *)v1433;
              v81 = *(_OWORD *)&v1433[14];
              goto LABEL_95;
            case 7u:
              if (BYTE2(v54) > 3u || BYTE2(v54) == 2)
                goto LABEL_13;
              if (BYTE2(v54) == 3)
                v852 = 18;
              else
                v852 = v56;
              v853 = *((_QWORD *)v10 + 3);
              v854 = *(_DWORD *)(v11 + 164);
              if (v854 <= v853)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F604);
              }
              v855 = v853 + 1;
              if (v854 <= (int)v853 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F60CLL);
              }
              v92 = (unint64_t)v10;
              v856 = *(_QWORD *)(v11 + 152);
              v857 = *(_QWORD *)(v856 + 8 * *((_QWORD *)v10 + 3));
              v858 = *(_QWORD *)(v856 + 8 * v855) & 0xFF00FFFFFFFFFFFFLL;
              if (v858
                && (v859 = *(unsigned __int16 *)((*(_QWORD *)(v856 + 8 * v855) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                    v859 <= 2))
              {
                v860 = *(_QWORD *)(v858 + 72);
                if ((_DWORD)v859)
                {
                  if ((_DWORD)v859 != 1)
                    v859 = 2;
                  v860 |= v859;
                }
              }
              else
              {
                v860 = 0;
              }
              v1320 = v852;
              v1321 = 16400;
              v1322 = v857 & 0xFF00FFFFFFFFFFFFLL;
              v1323 = v858;
              v1324 = v860;
              v1326 = 0;
              v1325 = 0;
              v65 = *v5;
              v66 = &v1320;
              goto LABEL_857;
            case 8u:
              if (BYTE2(v54) >= 2u)
              {
                if (BYTE2(v54) != 3)
                {
                  v44 = (uint64_t *)v4;
                  goto LABEL_48;
                }
                if (v55 == 3)
                {
LABEL_764:
                  if (BYTE2(v54) == 3)
                    v834 = 15;
                  else
                    v834 = 13;
LABEL_772:
                  v882 = *((_QWORD *)v10 + 3);
                  v883 = *(_DWORD *)(v11 + 164);
                  if (v883 <= v882)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19836F614);
                  }
                  v884 = v882 + 1;
                  if (v883 <= (int)v882 + 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19836F61CLL);
                  }
                  v885 = *(_QWORD *)(v11 + 152);
                  v886 = *(_QWORD *)(v885 + 8 * *((_QWORD *)v10 + 3));
                  v887 = *(_QWORD *)(v885 + 8 * v884) & 0xFF00FFFFFFFFFFFFLL;
                  if (v887
                    && (v888 = *(unsigned __int16 *)((*(_QWORD *)(v885 + 8 * v884) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                        v888 <= 2))
                  {
                    v889 = *(_QWORD *)(v887 + 72);
                    if ((_DWORD)v888)
                    {
                      if ((_DWORD)v888 != 1)
                        v888 = 2;
                      v889 |= v888;
                    }
                  }
                  else
                  {
                    v889 = 0;
                  }
                  v1313 = v834;
                  v1314 = 16401;
                  v1315 = v886 & 0xFF00FFFFFFFFFFFFLL;
                  v1316 = v887;
                  v1317 = v889;
                  v1319 = 0;
                  v1318 = 0;
                  v65 = *v5;
                  v66 = &v1313;
LABEL_856:
                  v92 = (unint64_t)v10;
LABEL_857:
                  v90 = 0;
                  goto LABEL_858;
                }
              }
              else if (v55 == 3)
              {
                if (!BYTE2(v54))
                {
                  v834 = 14;
                  goto LABEL_772;
                }
                goto LABEL_764;
              }
              v834 = 16;
              goto LABEL_772;
            case 9u:
              if (BYTE2(v54) > 3u || BYTE2(v54) == 2)
                goto LABEL_13;
              if (BYTE2(v54) == 3)
                v843 = 20;
              else
                v843 = v56;
              v844 = *((_QWORD *)v10 + 3);
              v845 = *(_DWORD *)(v11 + 164);
              if (v845 <= v844)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F5F4);
              }
              v846 = v844 + 1;
              if (v845 <= (int)v844 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F5FCLL);
              }
              v92 = (unint64_t)v10;
              v847 = *(_QWORD *)(v11 + 152);
              v848 = *(_QWORD *)(v847 + 8 * *((_QWORD *)v10 + 3));
              v849 = *(_QWORD *)(v847 + 8 * v846) & 0xFF00FFFFFFFFFFFFLL;
              if (v849
                && (v850 = *(unsigned __int16 *)((*(_QWORD *)(v847 + 8 * v846) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                    v850 <= 2))
              {
                v851 = *(_QWORD *)(v849 + 72);
                if ((_DWORD)v850)
                {
                  if ((_DWORD)v850 != 1)
                    v850 = 2;
                  v851 |= v850;
                }
              }
              else
              {
                v851 = 0;
              }
              v1306 = v843;
              v1307 = 16402;
              v1308 = v848 & 0xFF00FFFFFFFFFFFFLL;
              v1309 = v849;
              v1310 = v851;
              v1312 = 0;
              v1311 = 0;
              v65 = *v5;
              v66 = &v1306;
              goto LABEL_857;
            case 0xAu:
            case 0xBu:
              if (BYTE2(v54) < 2u)
                return;
              goto LABEL_13;
            case 0xCu:
              if (BYTE2(v54) > 1u)
                goto LABEL_13;
              v835 = *((_QWORD *)v10 + 3);
              v836 = *(_DWORD *)(v11 + 164);
              if (v836 <= v835)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F664);
              }
              v837 = v835 + 1;
              if (v836 <= (int)v835 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F66CLL);
              }
              v92 = (unint64_t)v10;
              v838 = *(_QWORD *)(v11 + 152);
              v839 = *(_QWORD *)(v838 + 8 * *((_QWORD *)v10 + 3));
              v840 = *(_QWORD *)(v838 + 8 * v837) & 0xFF00FFFFFFFFFFFFLL;
              if (v840
                && (v841 = *(unsigned __int16 *)((*(_QWORD *)(v838 + 8 * v837) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                    v841 <= 2))
              {
                v842 = *(_QWORD *)(v840 + 72);
                if ((_DWORD)v841)
                {
                  if ((_DWORD)v841 != 1)
                    v841 = 2;
                  v842 |= v841;
                }
              }
              else
              {
                v842 = 0;
              }
              v1334 = v56;
              v1335 = 16404;
              v1336 = v839 & 0xFF00FFFFFFFFFFFFLL;
              v1337 = v840;
              v1338 = v842;
              v1340 = 0;
              v1339 = 0;
              v65 = *v5;
              v66 = &v1334;
              goto LABEL_857;
            case 0xDu:
              v861 = *((_QWORD *)v10 + 3);
              v862 = *(_DWORD *)(v11 + 164);
              if (v862 <= v861)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F5DCLL);
              }
              v863 = v861 + 1;
              if (v862 <= (int)v861 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F5E4);
              }
              v864 = *(_QWORD *)(v11 + 152);
              v865 = *(_QWORD *)(v864 + 8 * *((_QWORD *)v10 + 3));
              v866 = *(_QWORD *)(v864 + 8 * v863) & 0xFF00FFFFFFFFFFFFLL;
              if (v866)
              {
                v881 = *(unsigned __int16 *)((*(_QWORD *)(v864 + 8 * v863) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                if (v881 <= 2)
                {
                  v867 = *(_QWORD *)(v866 + 72);
                  if ((_DWORD)v881)
                  {
                    if ((_DWORD)v881 != 1)
                      v881 = 2;
                    v867 |= v881;
                  }
                }
                else
                {
                  v867 = 0;
                }
              }
              else
              {
                v867 = 0;
              }
              v1327 = v56;
              v1328 = 16405;
              v1329 = v865 & 0xFF00FFFFFFFFFFFFLL;
              v1330 = v866;
              v1331 = v867;
              v1333 = 0;
              v1332 = 0;
              v65 = *v5;
              v66 = &v1327;
              goto LABEL_856;
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
              if ((v54 & 0x40000000) != 0)
                goto LABEL_252;
              v57 = *((_QWORD *)v10 + 3);
              v58 = *(_DWORD *)(v11 + 164);
              if (v58 <= v57)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F534);
              }
              v59 = v57 + 1;
              if (v58 <= (int)v57 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F53CLL);
              }
              v60 = *(_QWORD *)(v11 + 152);
              v61 = *(_QWORD *)(v60 + 8 * *((_QWORD *)v10 + 3));
              v62 = *(_QWORD *)(v60 + 8 * v59) & 0xFF00FFFFFFFFFFFFLL;
              if (v62
                && (v63 = *(unsigned __int16 *)((*(_QWORD *)(v60 + 8 * v59) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                    v63 <= 2))
              {
                v64 = *(_QWORD *)(v62 + 72);
                if ((_DWORD)v63)
                {
                  if ((_DWORD)v63 != 1)
                    v63 = 2;
                  v64 |= v63;
                }
              }
              else
              {
                v64 = 0;
              }
              v1299 = v56;
              v1300 = 16406;
              v1301 = v61 & 0xFF00FFFFFFFFFFFFLL;
              v1302 = v62;
              v1303 = v64;
              v1305 = 0;
              v1304 = 0;
              v65 = *v5;
              v66 = &v1299;
              goto LABEL_856;
            case 0x19u:
              JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
              __break(0xC471u);
              JUMPOUT(0x19836E9E8);
            default:
              __break(0xC471u);
              JUMPOUT(0x19836E9A0);
          }
        case 0x63u:
          v662 = v10;
          v663 = v4;
          v664 = (_DWORD *)*((_QWORD *)v662 + 9);
          v677 = v664[6];
          if (v677)
          {
            v678 = v663;
            v679 = v677 - 1;
            do
            {
              v678 = v663;
              --v679;
            }
            while (v679 != -1);
          }
          return;
        case 0x64u:
          v627 = (_DWORD *)*((_QWORD *)v10 + 9);
          v628 = v4;
          v635 = v627[6];
          if (v635)
          {
            v636 = v628;
            v637 = v635 - 1;
            do
            {
              v636 = v628;
              --v637;
            }
            while (v637 != -1);
          }
          return;
        case 0x65u:
        case 0x66u:
        case 0x67u:
        case 0x68u:
          v35 = *((_QWORD *)v10 + 3);
          v36 = *(_DWORD *)(v11 + 164);
          if (v36 > v35)
          {
            if (v36 > (int)v35 + 1)
            {
              if (v36 > (int)v35 + 2)
              {
                v37 = *(_QWORD *)(v11 + 152);
                v38 = *((_DWORD *)v10 + 18);
                if ((*((_DWORD *)v10 + 14) & 7u) >= 2)
                {
                  switch(*((_DWORD *)v10 + 14) & 7)
                  {
                    case 3:
                      v39 = 13;
                      break;
                    case 4:
                      v39 = 17;
                      break;
                    case 5:
                      v39 = 19;
                      break;
                    case 7:
                      __break(0xC471u);
                      JUMPOUT(0x19836E4F4);
                    default:
                      __break(0xC471u);
                      JUMPOUT(0x19836E524);
                  }
                }
                else
                {
                  v39 = 21;
                }
                v40 = *(_QWORD *)(v37 + 8 * *((_QWORD *)v10 + 3)) & 0xFF00FFFFFFFFFFFFLL;
                v41 = *(_QWORD *)(v37 + 8 * (v35 + 1)) & 0xFF00FFFFFFFFFFFFLL;
                v42 = *(_QWORD *)(v37 + 8 * (v35 + 2)) & 0xFF00FFFFFFFFFFFFLL;
                switch(*((_DWORD *)v10 + 18))
                {
                  case 0u:
                  case 1u:
                  case 2u:
                  case 4u:
                  case 5u:
                  case 6u:
                  case 0xBu:
                  case 0xCu:
                  case 0xDu:
                  case 0x17u:
                  case 0x18u:
                    goto LABEL_13;
                  case 3u:
                    return;
                  case 7u:
                    v787 = v5;
                    v788 = v10;
                    v789 = v4;
                    if (BYTE2(v38) - 3 < 2)
                      return;
                    if (v788[9] == 146)
                      v797 = *((_DWORD *)v788 + 20);
                    else
                      v797 = *((_DWORD *)v788 + 18);
                    if ((v797 & 0xFE0000) != 0)
                    if (v41 && (v798 = *(unsigned __int16 *)(v41 + 18), v798 <= 2))
                    {
                      v799 = *(_QWORD *)(v41 + 72);
                      if (*(_WORD *)(v41 + 18))
                      {
                        if ((_DWORD)v798 != 1)
                          v798 = 2;
                        v799 |= v798;
                      }
                    }
                    else
                    {
                      v799 = 0;
                    }
                    v800 = 0;
                    LODWORD(v1293) = v39;
                    *((_QWORD *)&v1293 + 1) = 16400;
                    v1294 = v40;
                    v1295 = v41;
                    v1296 = v799;
                    v1298 = 0;
                    v1297 = 0;
                    if (v42)
                    {
                      v801 = *(unsigned __int16 *)(v42 + 18);
                      if (v801 <= 2)
                      {
                        v800 = *(_QWORD *)(v42 + 72);
                        if (*(_WORD *)(v42 + 18))
                        {
                          if ((_DWORD)v801 != 1)
                            v801 = 2;
                          v800 |= v801;
                        }
                      }
                      else
                      {
                        v800 = 0;
                      }
                    }
                    if (v41 && (v890 = *(unsigned __int16 *)(v41 + 18), v890 <= 2))
                    {
                      v891 = *(_QWORD *)(v41 + 72);
                      if (*(_WORD *)(v41 + 18))
                      {
                        if ((_DWORD)v890 != 1)
                          v890 = 2;
                        v891 |= v890;
                      }
                    }
                    else
                    {
                      v891 = 0;
                    }
                    v90 = 0;
                    v1286 = 18;
                    v1287 = 16400;
                    v1288 = v40;
                    v1289 = v41;
                    v1290 = v891;
                    v1292 = 0;
                    v1291 = 0;
                    if (v42)
                    {
                      v892 = *(unsigned __int16 *)(v42 + 18);
                      if (v892 <= 2)
                      {
                        v90 = *(_QWORD *)(v42 + 72);
                        if (*(_WORD *)(v42 + 18))
                        {
                          if ((_DWORD)v892 != 1)
                            v892 = 2;
                          v90 |= v892;
                        }
                      }
                      else
                      {
                        v90 = 0;
                      }
                    }
                    v65 = *v787;
                    v66 = &v1286;
                    goto LABEL_853;
                  case 8u:
                    v817 = v5;
                    v818 = v10;
                    v819 = v4;
                    if (BYTE2(v38) - 3 < 2)
                      return;
                    if (v818[9] == 146)
                      v827 = *((_DWORD *)v818 + 20);
                    else
                      v827 = *((_DWORD *)v818 + 18);
                    if ((v827 & 0xFE0000) != 0)
                    if (v41 && (v828 = *(unsigned __int16 *)(v41 + 18), v828 <= 2))
                    {
                      v829 = *(_QWORD *)(v41 + 72);
                      if (*(_WORD *)(v41 + 18))
                      {
                        if ((_DWORD)v828 != 1)
                          v828 = 2;
                        v829 |= v828;
                      }
                    }
                    else
                    {
                      v829 = 0;
                    }
                    v830 = 0;
                    LODWORD(v1280) = 13;
                    *((_QWORD *)&v1280 + 1) = 16401;
                    v1281 = v40;
                    v1282 = v41;
                    v1283 = v829;
                    v1285 = 0;
                    v1284 = 0;
                    if (v42)
                    {
                      v831 = *(unsigned __int16 *)(v42 + 18);
                      if (v831 <= 2)
                      {
                        v830 = *(_QWORD *)(v42 + 72);
                        if (*(_WORD *)(v42 + 18))
                        {
                          if ((_DWORD)v831 != 1)
                            v831 = 2;
                          v830 |= v831;
                        }
                      }
                      else
                      {
                        v830 = 0;
                      }
                    }
                    if (v41 && (v900 = *(unsigned __int16 *)(v41 + 18), v900 <= 2))
                    {
                      v901 = *(_QWORD *)(v41 + 72);
                      if (*(_WORD *)(v41 + 18))
                      {
                        if ((_DWORD)v900 != 1)
                          v900 = 2;
                        v901 |= v900;
                      }
                    }
                    else
                    {
                      v901 = 0;
                    }
                    v902 = 0;
                    LODWORD(v1274) = 14;
                    *((_QWORD *)&v1274 + 1) = 16401;
                    v1275 = v40;
                    v1276 = v41;
                    v1277 = v901;
                    v1279 = 0;
                    v1278 = 0;
                    if (v42)
                    {
                      v903 = *(unsigned __int16 *)(v42 + 18);
                      if (v903 <= 2)
                      {
                        v902 = *(_QWORD *)(v42 + 72);
                        if (*(_WORD *)(v42 + 18))
                        {
                          if ((_DWORD)v903 != 1)
                            v903 = 2;
                          v902 |= v903;
                        }
                      }
                      else
                      {
                        v902 = 0;
                      }
                    }
                    if (v41 && (v904 = *(unsigned __int16 *)(v41 + 18), v904 <= 2))
                    {
                      v905 = *(_QWORD *)(v41 + 72);
                      if (*(_WORD *)(v41 + 18))
                      {
                        if ((_DWORD)v904 != 1)
                          v904 = 2;
                        v905 |= v904;
                      }
                    }
                    else
                    {
                      v905 = 0;
                    }
                    v90 = 0;
                    v1267 = 15;
                    v1268 = 16401;
                    v1269 = v40;
                    v1270 = v41;
                    v1271 = v905;
                    v1273 = 0;
                    v1272 = 0;
                    if (v42)
                    {
                      v906 = *(unsigned __int16 *)(v42 + 18);
                      if (v906 <= 2)
                      {
                        v90 = *(_QWORD *)(v42 + 72);
                        if (*(_WORD *)(v42 + 18))
                        {
                          if ((_DWORD)v906 != 1)
                            v906 = 2;
                          v90 |= v906;
                        }
                      }
                      else
                      {
                        v90 = 0;
                      }
                    }
                    v65 = *v817;
                    v66 = &v1267;
                    goto LABEL_853;
                  case 9u:
                    v802 = v5;
                    v803 = v10;
                    v804 = v4;
                    if (BYTE2(v38) - 3 < 2)
                      return;
                    if (v803[9] == 146)
                      v812 = *((_DWORD *)v803 + 20);
                    else
                      v812 = *((_DWORD *)v803 + 18);
                    if ((v812 & 0xFE0000) != 0)
                    if (v41 && (v813 = *(unsigned __int16 *)(v41 + 18), v813 <= 2))
                    {
                      v814 = *(_QWORD *)(v41 + 72);
                      if (*(_WORD *)(v41 + 18))
                      {
                        if ((_DWORD)v813 != 1)
                          v813 = 2;
                        v814 |= v813;
                      }
                    }
                    else
                    {
                      v814 = 0;
                    }
                    v815 = 0;
                    LODWORD(v1261) = v39;
                    *((_QWORD *)&v1261 + 1) = 16402;
                    v1262 = v40;
                    v1263 = v41;
                    v1264 = v814;
                    v1266 = 0;
                    v1265 = 0;
                    if (v42)
                    {
                      v816 = *(unsigned __int16 *)(v42 + 18);
                      if (v816 <= 2)
                      {
                        v815 = *(_QWORD *)(v42 + 72);
                        if (*(_WORD *)(v42 + 18))
                        {
                          if ((_DWORD)v816 != 1)
                            v816 = 2;
                          v815 |= v816;
                        }
                      }
                      else
                      {
                        v815 = 0;
                      }
                    }
                    if (v41 && (v893 = *(unsigned __int16 *)(v41 + 18), v893 <= 2))
                    {
                      v894 = *(_QWORD *)(v41 + 72);
                      if (*(_WORD *)(v41 + 18))
                      {
                        if ((_DWORD)v893 != 1)
                          v893 = 2;
                        v894 |= v893;
                      }
                    }
                    else
                    {
                      v894 = 0;
                    }
                    v90 = 0;
                    v1254 = 20;
                    v1255 = 16402;
                    v1256 = v40;
                    v1257 = v41;
                    v1258 = v894;
                    v1260 = 0;
                    v1259 = 0;
                    if (v42)
                    {
                      v895 = *(unsigned __int16 *)(v42 + 18);
                      if (v895 <= 2)
                      {
                        v90 = *(_QWORD *)(v42 + 72);
                        if (*(_WORD *)(v42 + 18))
                        {
                          if ((_DWORD)v895 != 1)
                            v895 = 2;
                          v90 |= v895;
                        }
                      }
                      else
                      {
                        v90 = 0;
                      }
                    }
                    v65 = *v802;
                    v66 = &v1254;
LABEL_853:
                    v92 = v42;
                    goto LABEL_858;
                  case 0xAu:
                    v784 = v10;
                    v785 = (uint64_t *)v4;
                    if (BYTE2(v38) - 3 < 2)
                      return;
                    v786 = v784[9] == 146 ? *((_DWORD *)v784 + 20) : *((_DWORD *)v784 + 18);
                    if ((v786 & 0xFE0000) == 0)
                      return;
                    v21 = *v785;
                    goto LABEL_14;
                  case 0xEu:
                  case 0xFu:
                  case 0x10u:
                  case 0x11u:
                  case 0x12u:
                  case 0x13u:
                  case 0x14u:
                  case 0x15u:
                  case 0x16u:
                    v43 = (uint64_t *)v4;
                    if ((v38 & 0x40000000) == 0)
                      return;
                    v44 = v43;
LABEL_48:
                    v21 = *v44;
                    goto LABEL_14;
                  case 0x19u:
                    JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
                    __break(0xC471u);
                    JUMPOUT(0x19836D4B0);
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x19836D72CLL);
                }
              }
              __break(0xC471u);
              JUMPOUT(0x19836EFA8);
            }
            __break(0xC471u);
            JUMPOUT(0x19836EFA0);
          }
          __break(0xC471u);
          JUMPOUT(0x19836EF98);
        case 0x6Du:
          v52 = (_QWORD *)v4;
          v51 = (unint64_t **)(*v52 + 56);
          goto LABEL_160;
        case 0x87u:
          v378 = v10;
          v379 = v4;
          if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v378 + 9) + 8) + 16) & 0x3E000) != 0x4000)
            return;
          v21 = *(_QWORD *)v379;
          goto LABEL_14;
        case 0x8Au:
          v134 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1234 = 4;
          v1235 = 16396;
          v1236 = v134;
          v1237 = 0u;
          v1238 = 0u;
          v65 = *v5;
          v66 = &v1234;
          goto LABEL_856;
        case 0x8Bu:
          v649 = v5;
          v650 = v10;
          v651 = v4;
          v659 = *((_QWORD *)v650 + 4);
          v660 = *((_QWORD *)v650 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1239 = 4;
          v1240 = 16396;
          v1241 = v660;
          v1242 = 0u;
          v1243 = 0u;
          v92 = v659 & 0xFF00FFFFFFFFFFFFLL;
          if ((v659 & 0xFF00FFFFFFFFFFFFLL) != 0
            && (v661 = *(unsigned __int16 *)((v659 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v661 <= 2))
          {
            v90 = *(_QWORD *)((v659 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (*(_WORD *)((v659 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if ((_DWORD)v661 != 1)
                v661 = 2;
              v90 |= v661;
            }
          }
          else
          {
            v90 = 0;
          }
          v65 = *v649;
          v66 = &v1239;
          goto LABEL_858;
        case 0x91u:
        case 0x92u:
          v51 = (unint64_t **)(*(_QWORD *)v4 + 56);
          v52 = (_QWORD *)v4;
LABEL_160:
          v362 = (unint64_t **)(*v52 + 56);
          goto LABEL_253;
        case 0x93u:
          v377 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1224 = 22;
          v1225 = 16423;
          v1226 = v377;
          v1227 = 0u;
          v1228 = 0u;
          v65 = *v5;
          v66 = &v1224;
          goto LABEL_856;
        case 0x94u:
          v143 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v144 = 148;
          goto LABEL_333;
        case 0x95u:
          v110 = *((_QWORD *)v10 + 9);
          v111 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          v112 = 149;
          goto LABEL_421;
        case 0x96u:
          v638 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1376 = 9;
          v1377 = 16390;
          v1378 = v638;
          v1379 = 0u;
          v1380 = 0u;
          v65 = *v5;
          v66 = &v1376;
          goto LABEL_856;
        case 0x97u:
          v122 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1371 = 30;
          v1372 = 16391;
          v1373 = v122;
          v1374 = 0u;
          v1375 = 0u;
          v65 = *v5;
          v66 = &v1371;
          goto LABEL_856;
        case 0x98u:
        case 0x99u:
          v82 = *((_QWORD *)v10 + 9);
          v83 = ((unint64_t)*(unsigned int *)(v82 + 4) << 15) | 0xF;
          v84 = *((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL;
          if (*(int *)(v11 + 952) < 2)
          {
            v1197 = 28;
            v1198 = v83;
            v1199 = v84;
            v1200 = 0u;
            v1201 = 0u;
            v65 = *v5;
            v66 = &v1197;
          }
          else
          {
            v1202 = 28;
            v1203 = v83;
            v1204 = v84;
            v1205 = 0;
            v1206 = 0;
            v1207 = 0;
            v1208 = v82;
            v65 = *v5;
            v66 = &v1202;
          }
          goto LABEL_856;
        case 0x9Au:
          v639 = (unsigned int *)*((_QWORD *)v10 + 9);
          v640 = ((unint64_t)*v639 << 15) | 0xF;
          v641 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          if (*(int *)(v11 + 952) < 2)
          {
            v1185 = 28;
            v1186 = v640;
            v1187 = v641;
            v1188 = 0u;
            v1189 = 0u;
            v65 = *v5;
            v66 = &v1185;
          }
          else
          {
            v1190 = 28;
            v1191 = v640;
            v1192 = v641;
            v1193 = 0;
            v1194 = 0;
            v1195 = 0;
            v1196 = v639;
            v65 = *v5;
            v66 = &v1190;
          }
          goto LABEL_856;
        case 0x9Bu:
          v694 = v5;
          v695 = ((unint64_t)*(unsigned int *)(*((_QWORD *)v10 + 9) + 4) << 15) | 0xF;
          v696 = v10;
          v697 = v696[4];
          if (*(int *)(v11 + 952) < 2)
          {
            v1161 = 28;
            v1162 = v695;
            v1163 = v697 & 0xFF00FFFFFFFFFFFFLL;
            v1164 = 0u;
            v1165 = 0u;
            v712 = v696[5];
            v92 = v712 & 0xFF00FFFFFFFFFFFFLL;
            if ((v712 & 0xFF00FFFFFFFFFFFFLL) != 0
              && (v713 = *(unsigned __int16 *)((v712 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v713 <= 2))
            {
              v90 = *(_QWORD *)(v92 + 72);
              if ((_DWORD)v713)
              {
                if ((_DWORD)v713 != 1)
                  v713 = 2;
                v90 |= v713;
              }
            }
            else
            {
              v90 = 0;
            }
            v65 = *v694;
            v66 = &v1161;
          }
          else
          {
            v90 = 0;
            v698 = v696[9];
            v1166 = 28;
            v1167 = v695;
            v1168 = v697 & 0xFF00FFFFFFFFFFFFLL;
            v1169 = 0;
            v1170 = 0;
            v1171 = 0;
            v1172 = v698;
            v699 = v696[5];
            v92 = v699 & 0xFF00FFFFFFFFFFFFLL;
            if ((v699 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v700 = *(unsigned __int16 *)((v699 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v700 <= 2)
              {
                v90 = *(_QWORD *)(v92 + 72);
                if ((_DWORD)v700)
                {
                  if ((_DWORD)v700 != 1)
                    v700 = 2;
                  v90 |= v700;
                }
              }
              else
              {
                v90 = 0;
              }
            }
            v65 = *v694;
            v66 = &v1166;
          }
          goto LABEL_858;
        case 0x9Cu:
          v517 = v5;
          v518 = ((unint64_t)**((unsigned int **)v10 + 9) << 15) | 0xF;
          v519 = v4;
          v520 = v10;
          v524 = v520;
          v525 = v520[9];
          v526 = *(unsigned int *)(v525 + 20);
          v527 = (v526 << 6) - 64;
          while (v527 != -64)
          {
            v528 = *(_DWORD *)(*(_QWORD *)(v525 + 8) + v527) - 2;
            v527 -= 64;
            if (v528 <= 3)
            {
              v524 = v520;
              v525 = v520[9];
              v526 = *(unsigned int *)(v525 + 20);
              break;
            }
          }
          v529 = (v526 << 6) - 64;
          while (v526)
          {
            if (--v526 >= (unint64_t)*(unsigned int *)(v525 + 20))
            {
              __break(0xC471u);
              JUMPOUT(0x19836F494);
            }
            v530 = v529 - 64;
            v531 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v525 + 8) + v529));
            v529 = v530;
            v524 = v520;
            if (v531)
            {
              v524 = v520;
              break;
            }
          }
          v535 = v524[3];
          if (*((int *)v945 + 238) < 2)
          {
            v1173 = 28;
            v1174 = v518;
            v1175 = v535 & 0xFF00FFFFFFFFFFFFLL;
            v1176 = 0u;
            v1177 = 0u;
            v710 = v524[4];
            v92 = v710 & 0xFF00FFFFFFFFFFFFLL;
            if ((v710 & 0xFF00FFFFFFFFFFFFLL) != 0
              && (v711 = *(unsigned __int16 *)((v710 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v711 <= 2))
            {
              v90 = *(_QWORD *)(v92 + 72);
              if ((_DWORD)v711)
              {
                if ((_DWORD)v711 != 1)
                  v711 = 2;
                v90 |= v711;
              }
            }
            else
            {
              v90 = 0;
            }
            v65 = *v517;
            v66 = &v1173;
          }
          else
          {
            v90 = 0;
            v536 = v524[9];
            v1178 = 28;
            v1179 = v518;
            v1180 = v535 & 0xFF00FFFFFFFFFFFFLL;
            v1181 = 0;
            v1182 = 0;
            v1183 = 0;
            v1184 = v536;
            v537 = v524[4];
            v92 = v537 & 0xFF00FFFFFFFFFFFFLL;
            if ((v537 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v538 = *(unsigned __int16 *)((v537 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v538 <= 2)
              {
                v90 = *(_QWORD *)(v92 + 72);
                if ((_DWORD)v538)
                {
                  if ((_DWORD)v538 != 1)
                    v538 = 2;
                  v90 |= v538;
                }
              }
              else
              {
                v90 = 0;
              }
            }
            v65 = *v517;
            v66 = &v1178;
          }
          goto LABEL_858;
        case 0x9Du:
          v684 = v10;
          v685 = (_QWORD *)v4;
          if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)v684 + 9)))
            return;
          v362 = (unint64_t **)(*v685 + 56);
          v52 = v685;
          goto LABEL_253;
        case 0x9Eu:
          v139 = *((unsigned int *)v10 + 18);
          switch(*((_DWORD *)v10 + 18))
          {
            case 3u:
              return;
            case 5u:
              v833 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
              v23 = *v5;
              *(_WORD *)v1427 = 158;
              *(int8x16_t *)&v1427[8] = vandq_s8(*(int8x16_t *)(v10 + 12), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
              *(_QWORD *)&v1427[24] = v833;
              goto LABEL_156;
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
            case 0xBu:
              v579 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
              v1156 = 1;
              v1157 = 16388;
              v1158 = v579;
              v1159 = 0u;
              v1160 = 0u;
              v65 = *v5;
              v66 = &v1156;
              goto LABEL_856;
            case 0xCu:
            case 0xDu:
              v783 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
              v1151 = 1;
              v1152 = 16423;
              v1153 = v783;
              v1154 = 0u;
              v1155 = 0u;
              v65 = *v5;
              v66 = &v1151;
              goto LABEL_856;
            case 0x19u:
              goto LABEL_992;
            default:
              v919 = v5;
              v920 = (JSC::DFG::Node *)v10;
              v921 = v4;
              v922 = JSC::DFG::toTypedArrayType(*((_DWORD *)v10 + 18));
              v10 = (unsigned __int16 *)v920;
              if (v922 == 12 || (v4 = v921, v5 = v919, !v922))
              {
                JSC::DFG::Graph::logAssertionFailure(v945, v920, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
                __break(0xC471u);
                JUMPOUT(0x19836F6B4);
              }
LABEL_992:
              if ((v139 & 0x40000000) != 0)
                goto LABEL_13;
              v923 = v5;
              v924 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
              v1146 = 1;
              v1147 = 16423;
              v1148 = v924;
              v1149 = 0u;
              v1150 = 0u;
              v92 = (unint64_t)v10;
              v925 = v10[9];
              if (v925 <= 2)
              {
                v90 = *((_QWORD *)v10 + 9);
                if (v10[9])
                {
                  if ((_DWORD)v925 != 1)
                    v925 = 2;
                  v90 |= v925;
                }
              }
              else
              {
                v90 = 0;
              }
              v65 = *v923;
              v66 = &v1146;
              break;
          }
          goto LABEL_858;
        case 0x9Fu:
          v139 = *((unsigned int *)v10 + 18);
          v140 = *((_DWORD *)v10 + 18);
          if (v140 != 25)
          {
            v934 = v5;
            v935 = (JSC::DFG::Node *)v10;
            v936 = JSC::DFG::toTypedArrayType(v140);
            v10 = (unsigned __int16 *)v935;
            if (v936 == 12 || (v5 = v934, !v936))
            {
              JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, v935, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
              __break(0xC471u);
              JUMPOUT(0x19836F464);
            }
          }
          if ((v139 & 0x40000000) != 0)
          {
            JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
            __break(0xC471u);
            JUMPOUT(0x19836E68CLL);
          }
          v141 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          *(_WORD *)v1427 = v10[9];
          *(int8x16_t *)&v1427[8] = vandq_s8(*(int8x16_t *)(v10 + 12), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
          *(_QWORD *)&v1427[24] = v141;
LABEL_156:
          v1428 = v139;
          goto LABEL_422;
        case 0xA0u:
          v118 = *((_DWORD *)v10 + 18);
          if (v118 == 25)
            goto LABEL_135;
          v926 = v4;
          v927 = (JSC::DFG::Node *)v10;
          v928 = v5;
          v929 = JSC::DFG::toTypedArrayType(*((_DWORD *)v10 + 18));
          if (v929 == 12 || !v929)
          {
            if (v118 != 3)
            {
              JSC::DFG::Graph::logAssertionFailure(v945, v927, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
              __break(0xC471u);
              JUMPOUT(0x19836F384);
            }
            return;
          }
          v5 = v928;
          v10 = (unsigned __int16 *)v927;
          v4 = v926;
          if (v118 == 3)
            return;
LABEL_135:
          if ((v118 & 0x40000000) != 0)
            goto LABEL_13;
          v119 = v5;
          v120 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1141 = 34;
          v1142 = 16423;
          v1143 = v120;
          v1144 = 0u;
          v1145 = 0u;
          v121 = v10[9];
          if (v121 <= 2)
          {
            v90 = *((_QWORD *)v10 + 9);
            if (v10[9])
            {
              if ((_DWORD)v121 != 1)
                v121 = 2;
              v90 |= v121;
            }
          }
          else
          {
            v90 = 0;
          }
          v65 = *v119;
          v66 = &v1141;
          goto LABEL_614;
        case 0xA1u:
          if ((*((_DWORD *)v10 + 18) & 0xFE) != 0xA)
          {
            __break(0xC471u);
            JUMPOUT(0x19836E644);
          }
          v117 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1136 = 3;
          v1137 = 16389;
          v1138 = v117;
          v1139 = 0u;
          v1140 = 0u;
          v65 = *v5;
          v66 = &v1136;
          goto LABEL_856;
        case 0xA2u:
          v680 = *((_DWORD *)v10 + 18);
          if (v680 == 25)
          {
            v681 = 162;
            if ((*((_DWORD *)v10 + 18) & 0x40000000) != 0)
              goto LABEL_13;
          }
          else
          {
            v937 = v4;
            v938 = (JSC::DFG::Node *)v10;
            v939 = v5;
            v940 = JSC::DFG::toTypedArrayType(*((_DWORD *)v10 + 18));
            if (v940 == 12 || !v940)
            {
              if (v680 != 3)
              {
                JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, v938, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
                __break(0xC471u);
                JUMPOUT(0x19836F504);
              }
              return;
            }
            if (v680 == 3)
              return;
            v681 = *((unsigned __int16 *)v938 + 9);
            v10 = (unsigned __int16 *)v938;
            if (v681 == 146)
              v942 = *((_DWORD *)v938 + 20);
            else
              v942 = *((_DWORD *)v938 + 18);
            v5 = v939;
            v4 = v937;
            if ((v942 & 0x40000000) != 0)
              goto LABEL_13;
          }
          v682 = v5;
          v683 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1219 = 32;
          v1220 = 16423;
          v1221 = v683;
          v1222 = 0u;
          v1223 = 0u;
          if (v681 <= 2)
          {
            v90 = *((_QWORD *)v10 + 9);
            if (v681)
            {
              if (v681 == 1)
                v908 = 1;
              else
                v908 = 2;
              v90 |= v908;
            }
          }
          else
          {
            v90 = 0;
          }
          v65 = *v682;
          v66 = &v1219;
          goto LABEL_614;
        case 0xA3u:
          v128 = *((_DWORD *)v10 + 18);
          if (v128 == 25)
          {
            v129 = 163;
            if ((*((_DWORD *)v10 + 18) & 0x40000000) != 0)
              goto LABEL_13;
          }
          else
          {
            v930 = v4;
            v931 = (JSC::DFG::Node *)v10;
            v932 = v5;
            v933 = JSC::DFG::toTypedArrayType(*((_DWORD *)v10 + 18));
            if (v933 == 12 || !v933)
            {
              if (v128 != 3)
              {
                JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, v931, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
                __break(0xC471u);
                JUMPOUT(0x19836F3F4);
              }
              return;
            }
            if (v128 == 3)
              return;
            v129 = *((unsigned __int16 *)v931 + 9);
            v10 = (unsigned __int16 *)v931;
            if (v129 == 146)
              v941 = *((_DWORD *)v931 + 20);
            else
              v941 = *((_DWORD *)v931 + 18);
            v5 = v932;
            v4 = v930;
            if ((v941 & 0x40000000) != 0)
              goto LABEL_13;
          }
          v130 = v5;
          v131 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1214 = 33;
          v1215 = 16423;
          v1216 = v131;
          v1217 = 0u;
          v1218 = 0u;
          if (v129 <= 2)
          {
            v90 = *((_QWORD *)v10 + 9);
            if (v129)
            {
              if (v129 == 1)
                v907 = 1;
              else
                v907 = 2;
              v90 |= v907;
            }
          }
          else
          {
            v90 = 0;
          }
          v65 = *v130;
          v66 = &v1214;
          goto LABEL_614;
        case 0xA4u:
          v143 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v144 = 164;
          goto LABEL_333;
        case 0xABu:
          v478 = ((unint64_t)*((unsigned int *)v10 + 18) << 15) | 0x15;
          v479 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1131 = 7;
          v1132 = v478;
          v1133 = v479;
          v1134 = 0u;
          v1135 = 0u;
          v65 = *v5;
          v66 = &v1131;
          goto LABEL_856;
        case 0xACu:
          v686 = v5;
          v687 = v10;
          v688 = ((unint64_t)*((unsigned int *)v687 + 18) << 15) | 0x15;
          v689 = *((_QWORD *)v687 + 4);
          v690 = *((_QWORD *)v687 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1126 = 7;
          v1127 = v688;
          v1128 = v690;
          v1129 = 0u;
          v1130 = 0u;
          v92 = v689 & 0xFF00FFFFFFFFFFFFLL;
          if ((v689 & 0xFF00FFFFFFFFFFFFLL) != 0
            && (v691 = *(unsigned __int16 *)((v689 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v691 <= 2))
          {
            v90 = *(_QWORD *)((v689 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (*(_WORD *)((v689 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if ((_DWORD)v691 != 1)
                v691 = 2;
              v90 |= v691;
            }
          }
          else
          {
            v90 = 0;
          }
          v65 = *v686;
          v66 = &v1126;
          goto LABEL_858;
        case 0xADu:
        case 0xAEu:
          v85 = (*((_QWORD *)v10 + 9) << 15) | 0x24;
          v1091 = 10;
          v1093 = 0u;
          v1094 = 0u;
          v1092 = v85;
          v1095 = 0;
          v65 = *v5;
          v66 = &v1091;
          goto LABEL_856;
        case 0xAFu:
          v123 = v5;
          v124 = v10;
          v90 = 0;
          v125 = (*((_QWORD *)v124 + 9) << 15) | 0x24;
          v1086 = 10;
          v1087 = v125;
          v1088 = 0u;
          v1089 = 0u;
          v1090 = 0;
          v126 = *((_QWORD *)v124 + 4);
          v92 = v126 & 0xFF00FFFFFFFFFFFFLL;
          if ((v126 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v127 = *(unsigned __int16 *)((v126 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v127 <= 2)
            {
              v90 = *(_QWORD *)(v92 + 72);
              if ((_DWORD)v127)
              {
                if ((_DWORD)v127 != 1)
                  v127 = 2;
                v90 |= v127;
              }
            }
            else
            {
              v90 = 0;
            }
          }
          v65 = *v123;
          v66 = &v1086;
          goto LABEL_858;
        case 0xB3u:
          v116 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1111 = 29;
          v1112 = 16398;
          v1113 = v116;
          v1114 = 0u;
          v1115 = 0u;
          v65 = *v5;
          v66 = &v1111;
          goto LABEL_856;
        case 0xB4u:
          v363 = v5;
          v364 = v10;
          v365 = *((_QWORD *)v364 + 4);
          v366 = *((_QWORD *)v364 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1106 = 29;
          v1107 = 16398;
          v1108 = v366;
          v1109 = 0u;
          v1110 = 0u;
          v92 = v365 & 0xFF00FFFFFFFFFFFFLL;
          if ((v365 & 0xFF00FFFFFFFFFFFFLL) != 0
            && (v367 = *(unsigned __int16 *)((v365 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v367 <= 2))
          {
            v90 = *(_QWORD *)((v365 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (*(_WORD *)((v365 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if ((_DWORD)v367 != 1)
                v367 = 2;
              v90 |= v367;
            }
          }
          else
          {
            v90 = 0;
          }
          v65 = *v363;
          v66 = &v1106;
          goto LABEL_858;
        case 0xB6u:
          v30 = *((_QWORD *)v10 + 9);
          v132 = *((_QWORD *)v10 + 3) & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          v133 = 182;
          goto LABEL_396;
        case 0xB7u:
          v464 = *((_QWORD *)v10 + 3) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          *(_WORD *)v1427 = 183;
          v1428 = 0;
          *(_QWORD *)&v1427[24] = 0;
          *(_QWORD *)&v1427[8] = v464;
          *(_QWORD *)&v1427[16] = 0;
          goto LABEL_430;
        case 0xBDu:
          v30 = *((_QWORD *)v10 + 9);
          v132 = *((_QWORD *)v10 + 3) & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          v133 = 189;
LABEL_396:
          *(_WORD *)v1427 = v133;
          *(_QWORD *)&v1427[8] = v132;
          *(_QWORD *)&v1427[16] = 0;
          *(_QWORD *)&v1427[24] = 0;
          goto LABEL_37;
        case 0xBEu:
          v412 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1249 = 5;
          v1250 = 16395;
          v1251 = v412;
          v1252 = 0u;
          v1253 = 0u;
          v65 = *v5;
          v66 = &v1249;
          goto LABEL_856;
        case 0xC1u:
          v135 = *((_QWORD *)v10 + 3);
          v136 = (v135 >> 50) & 0x3F;
          if (v136 > 0x31)
            goto LABEL_13;
          if (((1 << v136) & 0x2000000200002) == 0)
            goto LABEL_13;
          v137 = *((_QWORD *)v10 + 4);
          if ((v137 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v137 & 0xFC000000000000) != 0x4000000000000)
            goto LABEL_13;
          v138 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          *(_WORD *)v1427 = 193;
          *(_QWORD *)&v1427[8] = v135 & 0xFFFCFFFFFFFFFFFFLL;
          *(_QWORD *)&v1427[16] = v137 & 0xFFFCFFFFFFFFFFFFLL;
          v1428 = 0;
          *(_QWORD *)&v1427[24] = v138;
          goto LABEL_430;
        case 0xC2u:
          v516 = *((_QWORD *)v10 + 3);
          if (((v516 >> 50) & 0x3F) - 12 > 2)
            goto LABEL_13;
          v1209 = 35;
          v1210 = 16399;
          v1211 = v516 & 0xFF00FFFFFFFFFFFFLL;
          v1212 = 0u;
          v1213 = 0u;
          v65 = *v5;
          v66 = &v1209;
          goto LABEL_856;
        case 0xC4u:
          v463 = (*((_QWORD *)v10 + 3) >> 50) & 0x3FLL;
          if (!(_DWORD)v463)
            goto LABEL_13;
          if ((_DWORD)v463 != 11)
          {
            __break(0xC471u);
            JUMPOUT(0x19836E864);
          }
          goto LABEL_252;
        case 0xCAu:
        case 0xCBu:
        case 0xCCu:
        case 0xCDu:
        case 0xCFu:
        case 0xD0u:
        case 0xD1u:
        case 0xD2u:
        case 0xD3u:
          v29 = v20 - 202;
          if (v29 >= 0xA || ((0x3EFu >> v29) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19836E454);
          }
          if ((v10[28] & 0x10) != 0
            && *(_DWORD *)(v11 + 164) <= (dword_199155574[(__int16)v29] + *((_DWORD *)v10 + 6)))
          {
            __break(0xC471u);
            JUMPOUT(0x19836A794);
          }
          goto LABEL_13;
        case 0xCEu:
          v587 = v10 + 12;
          v588 = v10 + 12;
          if ((v10[28] & 0x10) != 0)
          {
            if (*(_DWORD *)(v11 + 164) <= *v587)
            {
              __break(0xC471u);
              JUMPOUT(0x19836F5ECLL);
            }
            v588 = (_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * *v587);
          }
          if ((*v588 & 0xFC000000000000) != 0x4000000000000)
            goto LABEL_13;
          *(_QWORD *)&v1435[22] = *((_QWORD *)v10 + 5);
          *(_OWORD *)&v1435[6] = *(_OWORD *)v587;
          v23 = *v5;
          *(_WORD *)v1427 = 206;
          *(_OWORD *)&v1427[2] = *(_OWORD *)v1435;
          *(_OWORD *)&v1427[16] = *(_OWORD *)&v1435[14];
          v1428 = 0;
          v1429 = v11;
          goto LABEL_430;
        case 0xD7u:
          if (*((unsigned __int8 *)v10 + 72) - 7 >= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x19836BFDCLL);
          }
          return;
        case 0xDDu:
          goto LABEL_252;
        case 0xDFu:
        case 0xE0u:
          if ((*((_QWORD *)v10 + 3) & 0xFC000000000000) == 0x54000000000000
            && (*((_QWORD *)v10 + 4) & 0xFC000000000000) == 0x40000000000000
            && (*((_QWORD *)v10 + 5) & 0xFC000000000000) == 0x54000000000000)
          {
            goto LABEL_252;
          }
          goto LABEL_13;
        case 0xE1u:
          v77 = *((_QWORD *)v10 + 5) & 0xFC000000000000;
          v78 = 0x54000000000000;
          goto LABEL_378;
        case 0xE5u:
          v143 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v144 = 229;
          goto LABEL_333;
        case 0xE6u:
          v372 = *((_QWORD *)v10 + 3);
          v373 = (v372 >> 50) & 0x3F;
          if ((v373 - 1) >= 2)
          {
            if ((_DWORD)v373)
            {
              JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
              __break(0xC471u);
              JUMPOUT(0x19836CFB8);
            }
            goto LABEL_13;
          }
          v114 = v372 & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v115 = 230;
LABEL_428:
          *(_WORD *)v1427 = v115;
          v1428 = 0;
          *(_QWORD *)&v1427[8] = v114;
          goto LABEL_429;
        case 0xE7u:
        case 0xE8u:
        case 0xE9u:
        case 0xEAu:
        case 0xEDu:
          v24 = *((_QWORD *)v10 + 3);
          v31 = (v24 >> 50) & 0x3F;
          if ((_DWORD)v31 != 21)
          {
            if ((_DWORD)v31)
            {
              v26 = *((_QWORD *)v10 + 4);
            }
            else
            {
LABEL_26:
              v26 = *((_QWORD *)v10 + 4);
              if ((v26 & 0xFC000000000000) == 0)
                goto LABEL_13;
            }
            goto LABEL_110;
          }
          v26 = *((_QWORD *)v10 + 4);
          if ((v26 & 0xFC000000000000) != 0x54000000000000)
          {
LABEL_110:
            v86 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
            v1429 = 0;
            v23 = *v5;
            *(_WORD *)v1427 = v20;
            *(_QWORD *)&v1427[8] = v24 & 0xFFFCFFFFFFFFFFFFLL;
            *(_QWORD *)&v1427[16] = v26 & 0xFFFCFFFFFFFFFFFFLL;
            v1428 = 0;
            *(_QWORD *)&v1427[24] = v86;
            goto LABEL_430;
          }
          goto LABEL_13;
        case 0xEFu:
          v110 = **((_QWORD **)v10 + 9);
          v111 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          v112 = 239;
          goto LABEL_421;
        case 0x106u:
          v540 = v5;
          v541 = v10;
          v548 = *((_QWORD *)v541 + 4);
          LODWORD(v1077) = 1;
          *((_QWORD *)&v1077 + 1) = 16388;
          v1078 = v541;
          v1079 = 0u;
          v1080 = 0u;
          if ((v548 & 0x80000000) != 0)
            v549 = COERCE__INT64((double)v548) + 0x2000000000000;
          else
            v549 = v548 | 0xFFFE000000000000;
          v550 = JSC::DFG::Graph::freeze(v11, v549, v542, v543, v544, v545, v546, v547);
          if (!(_DWORD)v548)
            return;
          v561 = v541;
          v562 = v541[9];
          switch(v562)
          {
            case 267:
              goto LABEL_767;
            case 264:
              v563 = *((_DWORD *)v541 + 19);
              break;
            case 352:
LABEL_767:
              v563 = *((_DWORD *)v541 + 21);
              break;
            default:
              v563 = *((_DWORD *)v541 + 18);
              goto LABEL_358;
          }
          LOBYTE(v563) = v563 & 0xF;
LABEL_358:
          v564 = v563 - 4;
          if (v564 <= 0x15u && ((0x2A003Fu >> v564) & 1) != 0)
          {
            v565 = qword_1991555A0[(char)v564];
            v566 = dword_199155650[(char)v564];
            v567 = *((unsigned int *)v945 + 107);
            if (v548 >= v567)
            {
              if ((_DWORD)v567)
              {
                v868 = (unsigned int *)*((_QWORD *)v945 + 52);
                v869 = 4 * v567;
                do
                {
                  v870 = *v868;
                  if (v870 < v548)
                  {
                    v871 = v870 + *((_DWORD *)v561 + 6);
                    if (*((_DWORD *)v945 + 41) <= v871)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19836F50CLL);
                    }
                    v872 = *(_QWORD *)(*((_QWORD *)v945 + 19) + 8 * v871);
                    if ((int)v870 < 0)
                      v873 = COERCE__INT64((double)v870) + 0x2000000000000;
                    else
                      v873 = v870 | 0xFFFE000000000000;
                    v874 = JSC::DFG::Graph::freeze((uint64_t)v945, v873, v555, v556, v557, v558, v559, v560);
                    v879 = 0;
                    LODWORD(v1065) = v566;
                    *((_QWORD *)&v1065 + 1) = v565;
                    v1066 = v561;
                    v1067 = 0;
                    v1068 = v874;
                    v1069 = 0;
                    v1070 = 0;
                    if ((v872 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v880 = *(unsigned __int16 *)((v872 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                      if (v880 <= 2)
                      {
                        v879 = *(_QWORD *)((v872 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                        if (*(_WORD *)((v872 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
                        {
                          if ((_DWORD)v880 != 1)
                            v880 = 2;
                          v879 |= v880;
                        }
                      }
                      else
                      {
                        v879 = 0;
                      }
                    }
                    v561 = v541;
                  }
                  ++v868;
                  v869 -= 4;
                }
                while (v869);
              }
            }
            else
            {
              v568 = 0;
              do
              {
                v569 = v568 + *((_QWORD *)v561 + 3);
                if (*((_DWORD *)v945 + 41) <= v569)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19836EFB0);
                }
                v570 = *(_QWORD *)(*((_QWORD *)v945 + 19) + 8 * v569);
                if ((int)v568 < 0)
                  v571 = COERCE__INT64((double)v568) + 0x2000000000000;
                else
                  v571 = v568 | 0xFFFE000000000000;
                v572 = JSC::DFG::Graph::freeze((uint64_t)v945, v571, v555, v556, v557, v558, v559, v560);
                v577 = 0;
                LODWORD(v1071) = v566;
                *((_QWORD *)&v1071 + 1) = v565;
                v1072 = v561;
                v1073 = 0;
                v1074 = v572;
                v1075 = 0;
                v1076 = 0;
                if ((v570 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v578 = *(unsigned __int16 *)((v570 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if (v578 <= 2)
                  {
                    v577 = *(_QWORD *)((v570 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                    if (*(_WORD *)((v570 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
                    {
                      if ((_DWORD)v578 != 1)
                        v578 = 2;
                      v577 |= v578;
                    }
                  }
                  else
                  {
                    v577 = 0;
                  }
                }
                ++v568;
                v561 = v541;
              }
              while (v548 != v568);
            }
          }
          return;
        case 0x107u:
          if (*((_DWORD *)v10 + 8))
          {
            v580 = *((_QWORD *)v10 + 3);
            v581 = *(_DWORD *)(v11 + 164);
            v582 = v581 >= v580;
            LODWORD(v583) = v581 - v580;
            if (v582)
              v583 = v583;
            else
              v583 = 0;
            v584 = *((unsigned int *)v10 + 8) - 1;
            do
            {
              if (!v583)
              {
                __break(0xC471u);
                JUMPOUT(0x19836EC70);
              }
              v585 = *(unsigned __int16 *)((*(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * v580++) & 0xFF00FFFFFFFFFFFFLL)
                                         + 0x12);
              v586 = v585 == 350 || v584-- == 0;
              --v583;
            }
            while (!v586);
          }
          goto LABEL_13;
        case 0x10Au:
          v615 = v5;
          v616 = v10;
          v1081 = 1;
          v1082 = 16388;
          v1083 = v616;
          v1084 = 0u;
          v1085 = 0u;
          v623 = *((unsigned int *)v616 + 20);
          if ((v623 & 0x80000000) != 0)
            v624 = COERCE__INT64((double)v623) + 0x2000000000000;
          else
            v624 = v623 | 0xFFFE000000000000;
          v90 = (uint64_t)JSC::DFG::Graph::freeze(v11, v624, v617, v618, v619, v620, v621, v622);
          v65 = *v615;
          v66 = &v1081;
          v92 = 0;
          goto LABEL_858;
        case 0x10Bu:
          v944 = v5;
          v589 = v10;
          v943 = **((_QWORD **)v589 + 9);
          v596 = *(unsigned int *)(v943 + 8);
          LODWORD(v1061) = 1;
          *((_QWORD *)&v1061 + 1) = 16388;
          v1062 = v589;
          v1063 = 0u;
          v1064 = 0u;
          if ((v596 & 0x80000000) != 0)
            v597 = COERCE__INT64((double)v596) + 0x2000000000000;
          else
            v597 = v596 | 0xFFFE000000000000;
          v598 = JSC::DFG::Graph::freeze(v11, v597, v590, v591, v592, v593, v594, v595);
          v610 = v589[9];
          switch(v610)
          {
            case 267:
              goto LABEL_756;
            case 264:
              v611 = *((_DWORD *)v589 + 19);
              break;
            case 352:
LABEL_756:
              v611 = *((_DWORD *)v589 + 21);
              break;
            default:
              v611 = *((_DWORD *)v589 + 18);
              goto LABEL_403;
          }
          LOBYTE(v611) = v611 & 0xF;
LABEL_403:
          if (v611 > 0x19u)
            return;
          if (((1 << v611) & 0x200030) != 0)
          {
            v612 = 21;
            v613 = 1;
            v614 = 16400;
          }
          else if (((1 << v611) & 0x8000C0) != 0)
          {
            v613 = 0;
            v612 = 13;
            v614 = 16401;
          }
          else
          {
            if (((1 << v611) & 0x2000300) == 0)
              return;
            v612 = 21;
            v613 = 1;
            v614 = 16402;
          }
          v724 = *(unsigned int *)(v11 + 428);
          if (v724 <= v596)
          {
            *(_QWORD *)&v1427[8] = 0;
            *(_QWORD *)v1427 = 0;
            if ((_DWORD)v724)
            {
              v742 = 0;
              v743 = 0;
              v744 = *(unsigned int **)(v11 + 416);
              v745 = 4 * v724;
              do
              {
                v746 = *v744;
                LODWORD(v1430[0]) = v746;
                if (v746 < v596)
                {
                  if (v743 == *(_DWORD *)&v1427[8])
                  {
                    v747 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1427, v743 + 1, (unint64_t)v1430);
                    v742 = *(unsigned int **)v1427;
                    *(_DWORD *)(*(_QWORD *)v1427 + 4 * *(unsigned int *)&v1427[12]) = *v747;
                  }
                  else
                  {
                    v742[v743] = v746;
                  }
                  v743 = ++*(_DWORD *)&v1427[12];
                }
                ++v744;
                v745 -= 4;
              }
              while (v745);
              if (v743)
              {
                v748 = v943 + 16;
                v749 = 4 * v743;
                do
                {
                  v750 = *v742;
                  if ((v750 & 0x80000000) != 0)
                    v751 = COERCE__INT64((double)v750) + 0x2000000000000;
                  else
                    v751 = v750 | 0xFFFE000000000000;
                  v752 = JSC::DFG::Graph::freeze(v11, v751, v604, v605, v606, v607, v608, v609);
                  LODWORD(v1049) = v612;
                  *((_QWORD *)&v1049 + 1) = v614;
                  v1050 = v589;
                  v1051 = 0;
                  v1052 = v752;
                  v1053 = 0;
                  v1054 = 0;
                  if ((*(_BYTE *)(v943 + 4) & 0xE) == 6)
                    v759 = *(_QWORD *)(v748 + 8 * v750) + 0x2000000000000;
                  else
                    v759 = *(_QWORD *)(v748 + 8 * v750);
                  v760 = (uint64_t)JSC::DFG::Graph::freeze(v11, v759, v753, v754, v755, v756, v757, v758);
                  v765 = v760;
                  if ((v613 & 1) == 0)
                    v765 = v760 | 1;
                  ++v742;
                  v749 -= 4;
                }
                while (v749);
                v742 = *(unsigned int **)v1427;
              }
              if (v742)
              {
                *(_QWORD *)v1427 = 0;
                *(_DWORD *)&v1427[8] = 0;
                WTF::fastFree((unint64_t)v742, v603, v604, v605, v606, v607, v608, v609);
              }
            }
          }
          else if ((_DWORD)v596)
          {
            v725 = 0;
            v726 = v943 + 16;
            do
            {
              if ((v725 & 0x80000000) != 0)
                v727 = COERCE__INT64((double)v725) + 0x2000000000000;
              else
                v727 = v725 | 0xFFFE000000000000;
              v728 = JSC::DFG::Graph::freeze(v11, v727, v604, v605, v606, v607, v608, v609);
              LODWORD(v1055) = v612;
              *((_QWORD *)&v1055 + 1) = v614;
              v1056 = v589;
              v1057 = 0;
              v1058 = v728;
              v1059 = 0;
              v1060 = 0;
              if ((*(_BYTE *)(v943 + 4) & 0xE) == 6)
                v735 = *(_QWORD *)(v726 + 8 * v725) + 0x2000000000000;
              else
                v735 = *(_QWORD *)(v726 + 8 * v725);
              v736 = (uint64_t)JSC::DFG::Graph::freeze(v11, v735, v729, v730, v731, v732, v733, v734);
              v741 = v736;
              if ((v613 & 1) == 0)
                v741 = v736 | 1;
              ++v725;
            }
            while (v596 != v725);
          }
          return;
        case 0x10Du:
          v539 = (*((_QWORD *)v10 + 3) >> 50) & 0x3FLL;
          if ((_DWORD)v539 && (_DWORD)v539 != 52 && (_DWORD)v539 != 1)
          {
            JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
            __break(0xC471u);
            JUMPOUT(0x19836C3C4);
          }
          goto LABEL_13;
        case 0x114u:
          v52 = (_QWORD *)v4;
          JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, v4, (uint64_t)v5, v6, v7, v8, v9);
          goto LABEL_254;
        case 0x115u:
          if (*(_WORD *)((*((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 352)
            goto LABEL_13;
          return;
        case 0x123u:
          v142 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1244 = 6;
          v1245 = 16395;
          v1246 = v142;
          v1247 = 0u;
          v1248 = 0u;
          v65 = *v5;
          v66 = &v1244;
          goto LABEL_856;
        case 0x127u:
          v110 = *((unsigned __int8 *)v10 + 72);
          v111 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          v112 = 295;
          goto LABEL_421;
        case 0x12Bu:
          v371 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1396 = 26;
          v1397 = 16423;
          v1398 = v371;
          v1399 = 0u;
          v1400 = 0u;
          v65 = *v5;
          v66 = &v1396;
          goto LABEL_856;
        case 0x12Cu:
          v370 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1391 = 27;
          v1392 = 16423;
          v1393 = v370;
          v1394 = 0u;
          v1395 = 0u;
          v65 = *v5;
          v66 = &v1391;
          goto LABEL_856;
        case 0x131u:
          v501 = *((_QWORD *)v10 + 3);
          if ((v501 & 0xFC000000000000) != 0xC4000000000000)
            goto LABEL_13;
          v114 = v501 & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v115 = 305;
          goto LABEL_428;
        case 0x132u:
          v143 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v144 = 306;
          goto LABEL_333;
        case 0x135u:
          v448 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1386 = 24;
          v1387 = 16423;
          v1388 = v448;
          v1389 = 0u;
          v1390 = 0u;
          v65 = *v5;
          v66 = &v1386;
          goto LABEL_856;
        case 0x136u:
          v467 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1381 = 25;
          v1382 = 16423;
          v1383 = v467;
          v1384 = 0u;
          v1385 = 0u;
          v65 = *v5;
          v66 = &v1381;
          goto LABEL_856;
        case 0x13Eu:
        case 0x145u:
          v49 = *((_QWORD *)v10 + 3);
          v79 = (v49 >> 50) & 0x3F;
          if (v79 > 0x34)
            goto LABEL_478;
          if (((1 << v79) & 0x12026000400002) != 0)
          {
LABEL_93:
            v80 = v49 & 0xFFFCFFFFFFFFFFFFLL;
LABEL_99:
            v1429 = 0;
            v23 = *v5;
            *(_WORD *)v1427 = v20;
            v1428 = 0;
            *(_QWORD *)&v1427[8] = v80;
LABEL_429:
            *(int8x16_t *)&v1427[16] = vandq_s8(*((int8x16_t *)v10 + 2), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
            goto LABEL_430;
          }
          if (((1 << v79) & 0x101) != 0)
            goto LABEL_13;
          if (v79 != 24)
          {
LABEL_478:
            __break(0xC471u);
            JUMPOUT(0x19836CE70);
          }
          return;
        case 0x13Fu:
          v469 = *((_QWORD *)v10 + 3);
          if ((v469 & 0xFC000000000000) != 0x54000000000000)
            goto LABEL_13;
          v114 = v469 & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v115 = 319;
          goto LABEL_428;
        case 0x142u:
        case 0x143u:
          v53 = *((_QWORD *)v10 + 3);
          if ((v53 & 0xFC000000000000) == 0)
            goto LABEL_13;
LABEL_98:
          v80 = v53 & 0xFFFCFFFFFFFFFFFFLL;
          goto LABEL_99;
        case 0x146u:
          v470 = *((_QWORD *)v10 + 3);
          v471 = (v470 >> 50) & 0x3F;
          if (!(_DWORD)v471)
            goto LABEL_13;
          if ((_DWORD)v471 != 28)
          {
            JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, (JSC::DFG::Node *)v10, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
            __break(0xC471u);
            JUMPOUT(0x19836E8ACLL);
          }
          v114 = v470 & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v115 = 326;
          goto LABEL_428;
        case 0x148u:
          v110 = *((int *)v10 + 18);
          v111 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          v112 = 328;
          goto LABEL_421;
        case 0x149u:
          v143 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v144 = 329;
          goto LABEL_333;
        case 0x157u:
          v508 = ((unint64_t)*((unsigned int *)v10 + 18) << 15) | 0x21;
          v509 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1121 = 56;
          v1122 = v508;
          v1123 = v509;
          v1124 = 0u;
          v1125 = 0u;
          v65 = *v5;
          v66 = &v1121;
          goto LABEL_856;
        case 0x158u:
          v495 = v5;
          v496 = ((unint64_t)*((unsigned int *)v10 + 18) << 15) | 0x21;
          v497 = v10;
          v498 = *((_QWORD *)v497 + 4);
          v499 = *((_QWORD *)v497 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1116 = 56;
          v1117 = v496;
          v1118 = v499;
          v1119 = 0u;
          v1120 = 0u;
          v92 = v498 & 0xFF00FFFFFFFFFFFFLL;
          if ((v498 & 0xFF00FFFFFFFFFFFFLL) != 0
            && (v500 = *(unsigned __int16 *)((v498 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v500 <= 2))
          {
            v90 = *(_QWORD *)((v498 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (*(_WORD *)((v498 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if ((_DWORD)v500 != 1)
                v500 = 2;
              v90 |= v500;
            }
          }
          else
          {
            v90 = 0;
          }
          v65 = *v495;
          v66 = &v1116;
          goto LABEL_858;
        case 0x159u:
          v45 = *(_QWORD *)(**((_QWORD **)v10 + 9) + 40);
          if ((v45 & 1) == 0)
            goto LABEL_328;
          goto LABEL_50;
        case 0x164u:
          v368 = ((unint64_t)*((unsigned int *)v10 + 18) << 15) | 0x14;
          v369 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1101 = 8;
          v1102 = v368;
          v1103 = v369;
          v1104 = 0u;
          v1105 = 0u;
          v65 = *v5;
          v66 = &v1101;
          goto LABEL_856;
        case 0x165u:
          v422 = v5;
          v423 = ((unint64_t)*((unsigned int *)v10 + 18) << 15) | 0x14;
          v424 = v10;
          v425 = *((_QWORD *)v424 + 4);
          v426 = *((_QWORD *)v424 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1096 = 8;
          v1097 = v423;
          v1098 = v426;
          v1099 = 0u;
          v1100 = 0u;
          v92 = v425 & 0xFF00FFFFFFFFFFFFLL;
          if ((v425 & 0xFF00FFFFFFFFFFFFLL) != 0
            && (v427 = *(unsigned __int16 *)((v425 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v427 <= 2))
          {
            v90 = *(_QWORD *)((v425 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (*(_WORD *)((v425 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if ((_DWORD)v427 != 1)
                v427 = 2;
              v90 |= v427;
            }
          }
          else
          {
            v90 = 0;
          }
          v65 = *v422;
          v66 = &v1096;
          goto LABEL_858;
        case 0x167u:
        case 0x168u:
        case 0x169u:
        case 0x16Au:
          v45 = *(_QWORD *)(**((_QWORD **)v10 + 9) + 112);
          if ((v45 & 1) != 0)
LABEL_50:
            v46 = (v45 >> 1) & 3;
          else
LABEL_328:
            v46 = *(unsigned __int8 *)(v45 + 4);
          if (v46 != 2)
            goto LABEL_52;
          goto LABEL_13;
        case 0x180u:
        case 0x182u:
          if ((_DWORD)v20 == 386)
          {
            v76 = *((unsigned __int8 *)v10 + 80);
            if (v76 != 1)
            {
              if (v76 == 2)
              {
                if (*(_DWORD *)(v11 + 164) <= *((_QWORD *)v10 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19836F544);
                }
                v77 = *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * *((_QWORD *)v10 + 3)) & 0xFC000000000000;
                v78 = 0x20000000000000;
LABEL_378:
                if (v77 == v78)
                  return;
              }
              goto LABEL_13;
            }
            v709 = 11;
          }
          else
          {
            v709 = 12;
          }
          v715 = BYTE2(*((_DWORD *)v10 + 18));
          switch(*((_DWORD *)v10 + 18))
          {
            case 3u:
              return;
            case 7u:
              if (v715 > 1)
                goto LABEL_13;
              v716 = *((_QWORD *)v10 + 3);
              v717 = *(_DWORD *)(v11 + 164);
              if (v717 <= v716)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F5ACLL);
              }
              v718 = v716 + 1;
              if (v717 <= (int)v716 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F5B4);
              }
              v719 = *(_QWORD *)(v11 + 152);
              v720 = *(_QWORD *)(v719 + 8 * *((_QWORD *)v10 + 3));
              v721 = *(_QWORD *)(v719 + 8 * v718) & 0xFF00FFFFFFFFFFFFLL;
              if (v721
                && (v722 = *(unsigned __int16 *)((*(_QWORD *)(v719 + 8 * v718) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                    v722 <= 2))
              {
                v723 = *(_QWORD *)(v721 + 72);
                if ((_DWORD)v722)
                {
                  if ((_DWORD)v722 != 1)
                    v722 = 2;
                  v723 |= v722;
                }
              }
              else
              {
                v723 = 0;
              }
              v1420 = v709;
              v1421 = 16400;
              v1422 = v720 & 0xFF00FFFFFFFFFFFFLL;
              v1423 = v721;
              v1424 = v723;
              v1426 = 0;
              v1425 = 0;
              v65 = *v5;
              v66 = &v1420;
              goto LABEL_856;
            case 8u:
              if (v715 > 1)
                goto LABEL_13;
              v766 = *((_QWORD *)v10 + 3);
              v767 = *(_DWORD *)(v11 + 164);
              if (v767 <= v766)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F5BCLL);
              }
              v768 = v766 + 1;
              if (v767 <= (int)v766 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F5C4);
              }
              v769 = *(_QWORD *)(v11 + 152);
              v770 = *(_QWORD *)(v769 + 8 * *((_QWORD *)v10 + 3));
              v771 = *(_QWORD *)(v769 + 8 * v768) & 0xFF00FFFFFFFFFFFFLL;
              if (v771
                && (v772 = *(unsigned __int16 *)((*(_QWORD *)(v769 + 8 * v768) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                    v772 <= 2))
              {
                v773 = *(_QWORD *)(v771 + 72);
                if ((_DWORD)v772)
                {
                  if ((_DWORD)v772 != 1)
                    v772 = 2;
                  v773 |= v772;
                }
              }
              else
              {
                v773 = 0;
              }
              v1413 = v709;
              v1414 = 16401;
              v1415 = v770 & 0xFF00FFFFFFFFFFFFLL;
              v1416 = v771;
              v1417 = v773;
              v1419 = 0;
              v1418 = 0;
              v65 = *v5;
              v66 = &v1413;
              goto LABEL_856;
            case 9u:
              if (v715 > 1)
                goto LABEL_13;
              v774 = *((_QWORD *)v10 + 3);
              v775 = *(_DWORD *)(v11 + 164);
              if (v775 <= v774)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F5CCLL);
              }
              v776 = v774 + 1;
              if (v775 <= (int)v774 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19836F5D4);
              }
              v777 = *(_QWORD *)(v11 + 152);
              v778 = *(_QWORD *)(v777 + 8 * *((_QWORD *)v10 + 3));
              v779 = *(_QWORD *)(v777 + 8 * v776) & 0xFF00FFFFFFFFFFFFLL;
              if (v779
                && (v780 = *(unsigned __int16 *)((*(_QWORD *)(v777 + 8 * v776) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                    v780 <= 2))
              {
                v781 = *(_QWORD *)(v779 + 72);
                if ((_DWORD)v780)
                {
                  if ((_DWORD)v780 != 1)
                    v780 = 2;
                  v781 |= v780;
                }
              }
              else
              {
                v781 = 0;
              }
              v1406 = v709;
              v1407 = 16402;
              v1408 = v778 & 0xFF00FFFFFFFFFFFFLL;
              v1409 = v779;
              v1410 = v781;
              v1412 = 0;
              v1411 = 0;
              v65 = *v5;
              v66 = &v1406;
              goto LABEL_856;
            case 0xAu:
              if (v715 >= 2)
                goto LABEL_13;
              return;
            default:
              goto LABEL_13;
          }
        case 0x183u:
          v110 = *((unsigned __int8 *)v10 + 80);
          v111 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v23 = *v5;
          v112 = 387;
LABEL_421:
          *(_WORD *)v1427 = v112;
          *(int8x16_t *)&v1427[8] = vandq_s8(*(int8x16_t *)(v10 + 12), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
          *(_QWORD *)&v1427[24] = v111;
          v1428 = v110;
          goto LABEL_422;
        case 0x188u:
          v143 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v144 = 392;
          goto LABEL_333;
        case 0x189u:
          v143 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v144 = 393;
          goto LABEL_333;
        case 0x18Au:
          v502 = *((_QWORD *)v10 + 3);
          v503 = 16411;
          if ((v502 & 0xFC000000000000) != 0x78000000000000)
            v503 = 16412;
          v504 = *((_QWORD *)v10 + 5);
          v505 = *((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL;
          if (v505
            && (v506 = *(unsigned __int16 *)((*((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v506 <= 2))
          {
            v507 = *(_QWORD *)((*((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (*(_WORD *)((*((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if ((_DWORD)v506 != 1)
                v506 = 2;
              v507 |= v506;
            }
          }
          else
          {
            v507 = 0;
          }
          v1042 = 52;
          v1043 = v503;
          v1044 = v502 & 0xFF00FFFFFFFFFFFFLL;
          v1045 = v505;
          v1046 = v507;
          v1047 = v504 & 0xFF00FFFFFFFFFFFFLL;
          v1048 = 0;
          v65 = *v5;
          v66 = &v1042;
          goto LABEL_856;
        case 0x18Bu:
          v474 = *((_QWORD *)v10 + 3);
          v475 = *((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL;
          if (v475
            && (v476 = *(unsigned __int16 *)((*((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v476 <= 2))
          {
            v477 = *(_QWORD *)((*((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (*(_WORD *)((*((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if ((_DWORD)v476 != 1)
                v476 = 2;
              v477 |= v476;
            }
          }
          else
          {
            v477 = 0;
          }
          v1035 = 54;
          v1036 = 16411;
          v1037 = v474 & 0xFF00FFFFFFFFFFFFLL;
          v1038 = v475;
          v1039 = v477;
          v1041 = 0;
          v1040 = 0;
          v65 = *v5;
          v66 = &v1035;
          goto LABEL_856;
        case 0x18Cu:
          v394 = v5;
          if ((*((_QWORD *)v10 + 3) & 0xFC000000000000) == 0x80000000000000)
            v395 = 16413;
          else
            v395 = 16414;
          v396 = (unint64_t)v10;
          v92 = v396;
          v397 = *(_QWORD *)(v396 + 24) & 0xFF00FFFFFFFFFFFFLL;
          v1030 = 44;
          v1031 = v395;
          v1032 = v397;
          v1033 = 0u;
          v1034 = 0u;
          v398 = *(unsigned __int16 *)(v396 + 18);
          if (v398 <= 2)
          {
            v90 = *(_QWORD *)(v396 + 72);
            if (*(_WORD *)(v396 + 18))
            {
              if ((_DWORD)v398 != 1)
                v398 = 2;
              v90 |= v398;
              v92 = v396;
            }
          }
          else
          {
            v90 = 0;
          }
          v65 = *v394;
          v66 = &v1030;
          goto LABEL_858;
        case 0x18Du:
          v375 = *((_QWORD *)v10 + 3);
          v376 = 16413;
          if ((v375 & 0xFC000000000000) != 0x80000000000000)
            v376 = 16414;
          v1025 = 45;
          v1026 = v376;
          v1027 = v375 & 0xFF00FFFFFFFFFFFFLL;
          v1028 = 0u;
          v1029 = 0u;
          v65 = *v5;
          v66 = &v1025;
          goto LABEL_856;
        case 0x18Eu:
          v420 = *((_QWORD *)v10 + 3);
          v421 = 16413;
          if ((v420 & 0xFC000000000000) != 0x80000000000000)
            v421 = 16414;
          v1020 = 46;
          v1021 = v421;
          v1022 = v420 & 0xFF00FFFFFFFFFFFFLL;
          v1023 = 0u;
          v1024 = 0u;
          v65 = *v5;
          v66 = &v1020;
          goto LABEL_856;
        case 0x18Fu:
          v399 = *((_QWORD *)v10 + 3);
          v400 = 16411;
          if ((v399 & 0xFC000000000000) != 0x78000000000000)
            v400 = 16412;
          v1015 = 47;
          v1016 = v400;
          v1017 = v399 & 0xFF00FFFFFFFFFFFFLL;
          v1018 = 0u;
          v1019 = 0u;
          v65 = *v5;
          v66 = &v1015;
          goto LABEL_856;
        case 0x190u:
          v480 = v5;
          if (*((_DWORD *)v10 + 18))
            v481 = 16412;
          else
            v481 = 16411;
          v482 = (unint64_t)v10;
          v92 = v482;
          v483 = *(_QWORD *)(v482 + 24);
          v484 = *(_QWORD *)(v482 + 32) & 0xFF00FFFFFFFFFFFFLL;
          if (v484
            && (v485 = *(unsigned __int16 *)((*(_QWORD *)(v482 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v485 <= 2))
          {
            v486 = *(_QWORD *)((*(_QWORD *)(v482 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (*(_WORD *)((*(_QWORD *)(v482 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if ((_DWORD)v485 != 1)
                v485 = 2;
              v486 |= v485;
              v92 = v482;
            }
          }
          else
          {
            v486 = 0;
          }
          v90 = 0;
          v1008 = 48;
          v1009 = v481;
          v1010 = v483 & 0xFF00FFFFFFFFFFFFLL;
          v1011 = v484;
          v1012 = v486;
          v1014 = 0;
          v1013 = 0;
          v487 = *(unsigned __int16 *)(v92 + 18);
          if (v487 <= 2)
          {
            v90 = *(_QWORD *)(v92 + 72);
            if (*(_WORD *)(v92 + 18))
            {
              if ((_DWORD)v487 != 1)
                v487 = 2;
              v90 |= v487;
              v92 = v482;
            }
          }
          v65 = *v480;
          v66 = &v1008;
          goto LABEL_858;
        case 0x191u:
          v465 = 16411;
          if (*((_DWORD *)v10 + 18))
            v465 = 16412;
          v466 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1003 = 49;
          v1004 = v465;
          v1005 = v466;
          v1006 = 0u;
          v1007 = 0u;
          v65 = *v5;
          v66 = &v1003;
          goto LABEL_856;
        case 0x192u:
          v472 = 16411;
          if (*((_DWORD *)v10 + 18))
            v472 = 16412;
          v473 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v998 = 50;
          v999 = v472;
          v1000 = v473;
          v1001 = 0u;
          v1002 = 0u;
          v65 = *v5;
          v66 = &v998;
          goto LABEL_856;
        case 0x193u:
          v413 = 16411;
          if (*((_DWORD *)v10 + 18))
            v413 = 16412;
          v414 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v993 = 51;
          v994 = v413;
          v995 = v414;
          v996 = 0u;
          v997 = 0u;
          v65 = *v5;
          v66 = &v993;
          goto LABEL_856;
        case 0x194u:
          v488 = v5;
          v489 = (unint64_t)v10;
          v92 = v489;
          v490 = *(_QWORD *)(v489 + 24);
          v491 = *(_QWORD *)(v489 + 32) & 0xFF00FFFFFFFFFFFFLL;
          if (v491
            && (v492 = *(unsigned __int16 *)((*(_QWORD *)(v489 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v492 <= 2))
          {
            v493 = *(_QWORD *)((*(_QWORD *)(v489 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (*(_WORD *)((*(_QWORD *)(v489 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if ((_DWORD)v492 != 1)
                v492 = 2;
              v493 |= v492;
              v92 = v489;
            }
          }
          else
          {
            v493 = 0;
          }
          v90 = 0;
          v979 = 53;
          v980 = 16412;
          v981 = v490 & 0xFF00FFFFFFFFFFFFLL;
          v982 = v491;
          v983 = v493;
          v984 = 0;
          v985 = 0;
          v494 = *(unsigned __int16 *)(v92 + 18);
          if (v494 <= 2)
          {
            v90 = *(_QWORD *)(v92 + 72);
            if (*(_WORD *)(v92 + 18))
            {
              if ((_DWORD)v494 != 1)
                v494 = 2;
              v90 |= v494;
              v92 = v489;
            }
          }
          v65 = *v488;
          v66 = &v979;
          goto LABEL_858;
        case 0x195u:
          v401 = *((_QWORD *)v10 + 3);
          v402 = *(_DWORD *)(v11 + 164);
          if (v402 <= v401)
          {
            __break(0xC471u);
            JUMPOUT(0x19836F46CLL);
          }
          v403 = v401 + 1;
          if (v402 <= (int)v401 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19836F474);
          }
          v404 = (unint64_t)v10;
          v405 = v5;
          v406 = *((_QWORD *)v10 + 3);
          v407 = *((_QWORD *)v945 + 19);
          v408 = *(_QWORD *)(v407 + 8 * v406);
          v409 = *(_QWORD *)(v407 + 8 * v403) & 0xFF00FFFFFFFFFFFFLL;
          if (!v409)
          {
            v410 = 0;
LABEL_191:
            v92 = v404;
            goto LABEL_626;
          }
          v714 = *(unsigned __int16 *)((*(_QWORD *)(v407 + 8 * v403) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
          v92 = v404;
          if (v714 <= 2)
          {
            v410 = *(_QWORD *)((*(_QWORD *)(v407 + 8 * v403) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (*(_WORD *)((*(_QWORD *)(v407 + 8 * v403) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if ((_DWORD)v714 != 1)
                v714 = 2;
              v410 |= v714;
              goto LABEL_191;
            }
          }
          else
          {
            v410 = 0;
          }
LABEL_626:
          v90 = 0;
          v972 = 53;
          v973 = 16411;
          v974 = v408 & 0xFF00FFFFFFFFFFFFLL;
          v975 = v409;
          v976 = v410;
          v977 = 0;
          v978 = 0;
          v832 = *(unsigned __int16 *)(v92 + 18);
          if (v832 <= 2)
          {
            v90 = *(_QWORD *)(v92 + 72);
            if (*(_WORD *)(v92 + 18))
            {
              if ((_DWORD)v832 != 1)
                v832 = 2;
              v90 |= v832;
              v92 = v404;
            }
          }
          v65 = *v405;
          v66 = &v972;
LABEL_858:
          return;
        case 0x196u:
          if ((*((_QWORD *)v10 + 3) & 0xFC000000000000) == 0x78000000000000)
            v106 = 16411;
          else
            v106 = 16412;
          v105 = (uint64_t *)(*(_QWORD *)v4 + 40);
          goto LABEL_271;
        case 0x197u:
          v415 = *((_QWORD *)v10 + 3);
          v416 = 16415;
          if ((v415 & 0xFC000000000000) != 0x88000000000000)
            v416 = 16416;
          v417 = *((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL;
          if (v417
            && (v418 = *(unsigned __int16 *)((*((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v418 <= 2))
          {
            v419 = *(_QWORD *)((*((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (*(_WORD *)((*((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if ((_DWORD)v418 != 1)
                v418 = 2;
              v419 |= v418;
            }
          }
          else
          {
            v419 = 0;
          }
          v986 = 55;
          v987 = v416;
          v988 = v415 & 0xFF00FFFFFFFFFFFFLL;
          v989 = v417;
          v990 = v419;
          v991 = 0;
          v992 = 0;
          v65 = *v5;
          v66 = &v986;
          goto LABEL_856;
        case 0x198u:
          v428 = v5;
          v429 = v10;
          v430 = *((_QWORD *)v429 + 3);
          v431 = *((_QWORD *)v429 + 4);
          v92 = v431 & 0xFF00FFFFFFFFFFFFLL;
          if ((v431 & 0xFF00FFFFFFFFFFFFLL) != 0
            && (v432 = *(unsigned __int16 *)((v431 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v432 <= 2))
          {
            v433 = *(_QWORD *)((v431 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if ((_DWORD)v432)
            {
              if ((_DWORD)v432 != 1)
                v432 = 2;
              v433 |= v432;
            }
          }
          else
          {
            v433 = 0;
          }
          v90 = 0;
          v965 = 55;
          v966 = 16416;
          v967 = v430 & 0xFF00FFFFFFFFFFFFLL;
          v968 = v92;
          v969 = v433;
          v970 = 0;
          v971 = 0;
          if (v92)
          {
            v434 = *(unsigned __int16 *)(v92 + 18);
            if (v434 <= 2)
            {
              v90 = *(_QWORD *)(v92 + 72);
              if (*(_WORD *)(v92 + 18))
              {
                if ((_DWORD)v434 != 1)
                  v434 = 2;
                v90 |= v434;
              }
            }
            else
            {
              v90 = 0;
            }
          }
          v65 = *v428;
          v66 = &v965;
          goto LABEL_858;
        case 0x199u:
          v435 = *((_QWORD *)v10 + 3);
          v436 = *(_DWORD *)(v11 + 164);
          if (v436 <= v435)
          {
            __break(0xC471u);
            JUMPOUT(0x19836F47CLL);
          }
          v437 = v435 + 1;
          if (v436 <= (int)v435 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19836F484);
          }
          v438 = (v435 + 2);
          if (v436 <= v438)
          {
            __break(0xC471u);
            JUMPOUT(0x19836F48CLL);
          }
          v439 = v5;
          v440 = *((_QWORD *)v10 + 3);
          v441 = *((_QWORD *)v945 + 19);
          v442 = *(_QWORD *)(v441 + 8 * v440);
          v443 = *(_QWORD *)(v441 + 8 * v437) & 0xFF00FFFFFFFFFFFFLL;
          if (v443
            && (v444 = *(unsigned __int16 *)((*(_QWORD *)(v441 + 8 * v437) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v444 <= 2))
          {
            v445 = *(_QWORD *)((*(_QWORD *)(v441 + 8 * v437) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if (*(_WORD *)((*(_QWORD *)(v441 + 8 * v437) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
            {
              if ((_DWORD)v444 != 1)
                v444 = 2;
              v445 |= v444;
            }
          }
          else
          {
            v445 = 0;
          }
          v90 = 0;
          v958 = 55;
          v959 = 16415;
          v960 = v442 & 0xFF00FFFFFFFFFFFFLL;
          v961 = v443;
          v962 = v445;
          v963 = 0;
          v964 = 0;
          v446 = *(_QWORD *)(v441 + 8 * v438);
          v92 = v446 & 0xFF00FFFFFFFFFFFFLL;
          if ((v446 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v447 = *(unsigned __int16 *)((v446 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v447 <= 2)
            {
              v90 = *(_QWORD *)(v92 + 72);
              if ((_DWORD)v447)
              {
                if ((_DWORD)v447 != 1)
                  v447 = 2;
                v90 |= v447;
              }
            }
            else
            {
              v90 = 0;
            }
          }
          v65 = *v439;
          v66 = &v958;
          goto LABEL_858;
        case 0x19Au:
          v143 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v144 = 410;
          goto LABEL_333;
        case 0x19Eu:
          v143 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v144 = 414;
          goto LABEL_333;
        case 0x19Fu:
          v143 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
          v1429 = 0;
          v23 = *v5;
          v144 = 415;
LABEL_333:
          *(_WORD *)v1427 = v144;
          *(int8x16_t *)&v1427[8] = vandq_s8(*(int8x16_t *)(v10 + 12), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
          v1428 = 0;
          *(_QWORD *)&v1427[24] = v143;
          goto LABEL_430;
        case 0x1A0u:
          v449 = *(_QWORD *)(*((_QWORD *)v10 + 9) + 16);
          if (!v449)
            goto LABEL_13;
          v450 = *(unsigned int *)(v449 + 24);
          v451 = *(_DWORD *)(v449 + 28);
          v452 = (unsigned __int16)*(_DWORD *)(v449 + 24);
          if (v452 != WORD1(v450))
          {
            v453 = WORD1(v450) == 0xFFFF && v452 == 0;
            v454 = (v450 << 15) | 0x25;
            if (v453)
              v455 = 16387;
            else
              v455 = v454;
            v456 = v5;
            v457 = v10;
            v10 = v457;
            v5 = v456;
          }
          if ((_WORD)v451)
          {
            v458 = HIWORD(v451);
            v459 = v10[9];
            if ((unsigned __int16)v451 == 0xFFFF && v458 == 0xFFFF)
            {
              v30 = **((_QWORD **)v10 + 9);
              v32 = *((_QWORD *)v10 + 5) & 0xFFFCFFFFFFFFFFFFLL;
              v23 = *v5;
              *(_WORD *)v1427 = v10[9];
LABEL_36:
              *(int8x16_t *)&v1427[8] = vandq_s8(*(int8x16_t *)(v10 + 12), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
              *(_QWORD *)&v1427[24] = v32;
LABEL_37:
              v1428 = v30;
              goto LABEL_422;
            }
          }
          else
          {
            if (v451 > 0xFFFEFFFF)
              return;
            v458 = HIWORD(v451);
            v459 = v10[9];
          }
          v461 = v5;
          v462 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v1229 = 57;
          v1230 = ((unint64_t)((unsigned __int16)v451 | ((unsigned __int16)v458 << 16)) << 15) | 0x25;
          v1231 = v462;
          v1232 = 0u;
          v1233 = 0u;
          if (v459 <= 2)
          {
            v90 = *((_QWORD *)v10 + 9);
            if (v459)
            {
              if (v459 == 1)
                v909 = 1;
              else
                v909 = 2;
              v90 |= v909;
            }
          }
          else
          {
            v90 = 0;
          }
          v65 = *v461;
          v66 = &v1229;
LABEL_614:
          v92 = (unint64_t)v10;
          goto LABEL_858;
        case 0x1A1u:
          v107 = *(unsigned int *)(*((_QWORD *)v10 + 9) + 48);
          if ((unsigned __int16)*(_DWORD *)(*((_QWORD *)v10 + 9) + 48) == WORD1(v107))
            return;
          if ((unsigned __int16)*(_DWORD *)(*((_QWORD *)v10 + 9) + 48))
            v468 = 0;
          else
            v468 = WORD1(v107) == 0xFFFF;
          if (v468)
            goto LABEL_13;
          v108 = *(_QWORD *)v4;
          v109 = 37;
LABEL_270:
          v106 = v109 | (v107 << 15);
          v105 = (uint64_t *)(v108 + 40);
LABEL_271:
          return;
        case 0x1ABu:
        case 0x1ACu:
          v67 = *((_QWORD *)v10 + 9);
          if ((v67 & 0x10000) == 0)
          {
            if ((*((_DWORD *)v10 + 14) & 7u) >= 2)
            {
              switch(*((_DWORD *)v10 + 14) & 7)
              {
                case 3:
                  v68 = 13;
                  break;
                case 4:
                  v68 = 17;
                  break;
                case 5:
                  v68 = 19;
                  break;
                case 7:
                  __break(0xC471u);
                  JUMPOUT(0x19836E5D4);
                default:
                  __break(0xC471u);
                  JUMPOUT(0x19836E604);
              }
            }
            else
            {
              v68 = 21;
            }
            v69 = *((_QWORD *)v10 + 3);
            v70 = *((_QWORD *)v10 + 5);
            v71 = *((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL;
            if (v71
              && (v72 = *(unsigned __int16 *)((*((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                  v72 <= 2))
            {
              v73 = *(_QWORD *)((*((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
              if (*(_WORD *)((*((_QWORD *)v10 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
              {
                if ((_DWORD)v72 != 1)
                  v72 = 2;
                v73 |= v72;
              }
            }
            else
            {
              v73 = 0;
            }
            v946 = v68;
            v947 = (v67 << 15) | 0x16;
            v948 = v69 & 0xFF00FFFFFFFFFFFFLL;
            v949 = v71;
            v950 = v73;
            v951 = v70 & 0xFF00FFFFFFFFFFFFLL;
            v952 = 0;
            v65 = *v5;
            v66 = &v946;
            goto LABEL_856;
          }
LABEL_252:
          v362 = (unint64_t **)(*(_QWORD *)v4 + 56);
          v52 = (_QWORD *)v4;
LABEL_253:
LABEL_254:
          v21 = *v52;
          goto LABEL_14;
        case 0x1ADu:
          if ((v10[37] & 1) != 0)
          {
LABEL_52:
            v47 = v4;
            v4 = v47;
          }
          goto LABEL_13;
        case 0x1AEu:
        case 0x1AFu:
          v74 = ((unint64_t)*((_DWORD *)v10 + 18) << 15) | 0x1A;
          v75 = *((_QWORD *)v10 + 3) & 0xFF00FFFFFFFFFFFFLL;
          v953 = 38;
          v954 = v74;
          v955 = v75;
          v956 = 0u;
          v957 = 0u;
          v65 = *v5;
          v66 = &v953;
          goto LABEL_856;
        case 0x1B1u:
          __break(0xC471u);
          JUMPOUT(0x19836E624);
        default:
          *(_OWORD *)v1427 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v20];
          v910 = (JSC::DFG::Node *)v10;
          WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)v1427, v1430);
          if (v1430[0])
            v911 = (const char *)(v1430[0] + 16);
          else
            v911 = 0;
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v11, v910, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v911);
          WTF::CString::~CString((WTF::CString *)v1430, v912, v913, v914, v915, v916, v917, v918);
          __break(0xC471u);
          JUMPOUT(0x19836E980);
      }
    }
LABEL_32:
    if (v17 - 92 >= 2)
      goto LABEL_33;
  }
LABEL_13:
  v21 = *(_QWORD *)v4;
LABEL_14:
}

void JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::LocalCSEPhase::BlockCSE<JSC::DFG::`anonymous namespace'::LocalCSEPhase::HugeMaps>>::operator()(uint64_t *a1, __int128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::DFG::Node *v15;
  JSC::DFG::Node *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __n128 v36;
  JSC::DFG::Node *v37[2];

  v36.n128_u64[0] = a3;
  v36.n128_u64[1] = a4;
  if (v10)
  {
    v15 = *(JSC::DFG::Node **)(v10 + 56);
    v16 = *(JSC::DFG::Node **)(v10 + 64);
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  v37[0] = v15;
  v37[1] = v16;
  if ((unint64_t)v16 <= 3 && !v15)
    return;
  v17 = a1[2];
  if (*(_WORD *)(v17 + 18) != 15
    || ((*(_QWORD *)(v17 + 24) = 0, v18 = *a1, (v19 = *(_DWORD *)(*a1 + 944)) != 0) ? (v20 = v19 == 2) : (v20 = 1), v20))
  {
    if (!a3)
      return;
    goto LABEL_13;
  }
  if ((_BYTE)qword_1ECF4C32A)
    v27 = 0;
  else
    v27 = byte_1ECF4C323 == 0;
  if (!v27 || BYTE2(qword_1ECF4C32A) != 0)
  {
    v35 = *a1;
    WTF::dataLog<char [16]>("Dethreading DFG graph.\n");
    v18 = v35;
  }
  v29 = *(_DWORD *)(v18 + 60);
LABEL_25:
  while (v29)
  {
    if (*(_DWORD *)(v18 + 60) <= --v29)
      goto LABEL_35;
    v30 = *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * v29);
    if (v30)
    {
      v31 = *(_DWORD *)(v30 + 36);
      if (v31)
      {
        v32 = v31 - 1;
        v33 = 8 * v32;
        while (*(_DWORD *)(v30 + 36) > v32)
        {
          v34 = *(_QWORD **)(*(_QWORD *)(v30 + 24) + v33);
          v34[3] = 0;
          v34[4] = 0;
          v34[5] = 0;
          v33 -= 8;
          if (--v32 == -1)
            goto LABEL_25;
        }
LABEL_35:
        __break(0xC471u);
        JUMPOUT(0x198370080);
      }
    }
  }
  *(_DWORD *)(v18 + 944) = 0;
  if (a3)
  {
LABEL_13:
    if (a1[2] == a3)
    {
      v21 = a1[3];
      *(_QWORD *)(JSC::DFG::LazyNode::ensureIsNode((uint64_t *)v37, (uint64_t)(a1 + 8), v21, 0, v11, v12, v13, v14) + 96) = v21;
      JSC::DFG::Node::replaceWith(a1[2], (JSC::DFG::Graph *)*a1, v37[0], v22, v23, v24, v25, v26);
      *((_BYTE *)a1 + 8) = 1;
    }
  }
}

void JSC::DFG::`anonymous namespace'::ImpureMap::~ImpureMap(JSC::DFG::_anonymous_namespace_::ImpureMap *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    v12 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v12)
    {
      v13 = (unint64_t *)*((_QWORD *)this + 2);
      do
      {
        v14 = *v13;
        if (*v13 != -1)
        {
          *v13 = 0;
          if (v14)
            WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        }
        ++v13;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    v15 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v15)
    {
      v16 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v17 = *v16;
        if (*v16 != -1)
        {
          *v16 = 0;
          if (v17)
            WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
        }
        ++v16;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v18 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v18)
    {
      v19 = (unint64_t *)(v11 + 8);
      do
      {
        if (*(v19 - 1) != 0x7FFFFFFFFFFFFFFFLL)
        {
          v20 = *v19;
          *v19 = 0;
          if (v20)
            WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
        }
        v19 += 2;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::`anonymous namespace'::GlobalCSEPhase>,JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::GlobalCSEPhase>,JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::GlobalCSEPhase>,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::`anonymous namespace'::GlobalCSEPhase>,JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::GlobalCSEPhase>,JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::GlobalCSEPhase>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::`anonymous namespace'::GlobalCSEPhase> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::GlobalCSEPhase> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::GlobalCSEPhase> const&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::DFG::Node *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 *v9;
  int *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  __int16 *v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  unsigned int v153;
  int v154;
  int v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  int v198;
  int v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  unsigned int v222;
  unint64_t v223;
  double v224;
  double v225;
  double v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int *v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __int128 *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  int v260;
  unsigned __int8 v261;
  uint64_t v262;
  int v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  __int128 *v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  int v277;
  uint64_t v278;
  unsigned int v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t *v296;
  int v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t *v332;
  unint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  _BOOL4 v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t *v390;
  int v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  unsigned int v397;
  uint64_t *v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  __int128 *v426;
  void *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  int v435;
  char v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  __int128 *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  unsigned int v471;
  uint64_t v472;
  unsigned int v473;
  unsigned int v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t *v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t *v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t *v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t *v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  unsigned int v508;
  int v509;
  BOOL v510;
  uint64_t v511;
  uint64_t v512;
  unsigned int v513;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t *v520;
  uint64_t *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t *v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  unint64_t v536;
  unint64_t v537;
  uint64_t *v538;
  uint64_t *v539;
  uint64_t v540;
  uint64_t v541;
  JSC::DFG::Node *v542;
  uint64_t *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  uint64_t *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  int v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  unsigned int v577;
  uint64_t v578;
  uint64_t *v579;
  uint64_t *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  unint64_t v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  unsigned int *v796;
  uint64_t v797;
  unsigned int v798;
  _DWORD *v799;
  uint64_t *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  int v807;
  uint64_t *v808;
  int v809;
  uint64_t *v810;
  char isWatchingHavingABadTimeWatchpoint;
  WTF *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  __int128 *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  unint64_t v824;
  unint64_t v825;
  unint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t *v829;
  uint64_t v830;
  uint64_t *v831;
  JSC::DFG::Node *v832;
  unint64_t v833;
  unsigned int *v834;
  uint64_t v835;
  uint64_t v836;
  unsigned int v837;
  uint64_t v838;
  uint64_t v839;
  __int128 *v840;
  unint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t *v845;
  int v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t *v851;
  uint64_t v852;
  unint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t *v861;
  _DWORD *v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  int v875;
  uint64_t *v876;
  int v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t *v880;
  uint64_t v881;
  uint64_t *v882;
  unint64_t v883;
  uint64_t v884;
  unint64_t v885;
  uint64_t v886;
  unint64_t v887;
  unsigned int v888;
  uint64_t v889;
  _DWORD *v890;
  _QWORD *v891;
  uint64_t v892;
  uint64_t v893;
  unsigned int v894;
  JSC::DFG::Node *v895;
  uint64_t *v896;
  unint64_t v897;
  uint64_t *v898;
  uint64_t *v899;
  int v900;
  unint64_t v901;
  unint64_t v902;
  uint64_t *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t *v911;
  uint64_t v912;
  JSC::DFG::Node *v913;
  uint64_t v914;
  unsigned int v915;
  uint64_t *v916;
  uint64_t v917;
  unint64_t v918;
  uint64_t *v919;
  unsigned __int16 *v920;
  uint64_t *v921;
  int hasArrayMode;
  unsigned int v923;
  uint64_t *v924;
  _QWORD *v925;
  _QWORD *v926;
  _QWORD *v927;
  _QWORD *v928;
  _QWORD *v929;
  uint64_t v930;
  uint64_t *v931;
  uint64_t v932;
  _QWORD *v933;
  _QWORD *v934;
  _QWORD *v935;
  _QWORD *v936;
  _QWORD *v937;
  _QWORD *v938;
  uint64_t v939;
  unint64_t v940;
  uint64_t *v941;
  uint64_t *v942;
  uint64_t v943;
  int v944;
  int v945;
  unint64_t v946;
  _QWORD *v947;
  _QWORD *v948;
  uint64_t *v949;
  JSC::DFG::Node *v950;
  int v951;
  unint64_t v952;
  unint64_t v953;
  uint64_t *v954;
  unint64_t v955;
  unint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t *v959;
  uint64_t *v960;
  JSC::DFG::Node *v961;
  const char *v962;
  void *v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  unint64_t v971;
  uint64_t *v972;
  uint64_t v973;
  unint64_t v974;
  uint64_t *v975;
  uint64_t v976;
  unint64_t v977;
  uint64_t *v978;
  uint64_t *v979;
  uint64_t *v980;
  uint64_t v981;
  uint64_t v982;
  unint64_t v983;
  unint64_t v984;
  uint64_t *v985;
  unint64_t v986;
  uint64_t *v987;
  uint64_t v988;
  uint64_t v989;
  unint64_t v990;
  uint64_t v991;
  unint64_t v992;
  unint64_t v993;
  uint64_t *v994;
  uint64_t v995;
  unsigned int v996;
  uint64_t v997;
  uint64_t v998;
  int v999;
  BOOL v1000;
  uint64_t *v1001;
  unint64_t v1002;
  uint64_t *v1003;
  uint64_t v1004;
  int v1005;
  int v1006;
  unint64_t v1007;
  unint64_t v1008;
  uint64_t *v1009;
  unint64_t v1010;
  uint64_t *v1011;
  _QWORD *v1012;
  _QWORD *v1013;
  _QWORD *v1014;
  uint64_t *v1015;
  JSC::DFG::Node *v1016;
  uint64_t *v1017;
  int v1018;
  uint64_t v1019;
  unsigned int v1020;
  uint64_t *v1021;
  JSC::DFG::Node *v1022;
  uint64_t v1023;
  unsigned int v1024;
  JSC::DFG::Node *v1025;
  unsigned int v1026;
  uint64_t v1027;
  uint64_t *v1028;
  int v1029;
  char v1030;
  unsigned int v1031;
  uint64_t v1032;
  unint64_t v1033;
  uint64_t *v1034;
  JSC::DFG::Node *v1035;
  int v1036;
  int v1037;
  int v1038;
  int v1039;
  int v1040;
  uint64_t *v1041;
  JSC::DFG::Graph *v1042;
  uint64_t v1043;
  _QWORD v1044[2];
  _BYTE v1045[56];
  _QWORD v1046[2];
  int v1047;
  unint64_t v1048;
  unint64_t v1049;
  __int128 v1050;
  __int128 v1051;
  __int16 v1052;
  int8x16_t v1053;
  unint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  __int16 v1057;
  int8x16_t v1058;
  unint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  __int16 v1062;
  int8x16_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  __int16 v1067;
  int8x16_t v1068;
  unint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  _QWORD v1072[2];
  _BYTE v1073[56];
  _QWORD v1074[2];
  _BYTE v1075[56];
  int v1076;
  uint64_t v1077;
  unint64_t v1078;
  unint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  int v1083;
  uint64_t v1084;
  unint64_t v1085;
  unint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  _QWORD v1090[2];
  _BYTE v1091[56];
  _QWORD v1092[2];
  int v1093;
  uint64_t v1094;
  unint64_t v1095;
  __int128 v1096;
  __int128 v1097;
  _QWORD v1098[2];
  int v1099;
  uint64_t v1100;
  unint64_t v1101;
  __int128 v1102;
  __int128 v1103;
  _QWORD v1104[2];
  int v1105;
  uint64_t v1106;
  unint64_t v1107;
  __int128 v1108;
  __int128 v1109;
  _QWORD v1110[2];
  _BYTE v1111[56];
  _QWORD v1112[2];
  int v1113;
  uint64_t v1114;
  unint64_t v1115;
  __int128 v1116;
  __int128 v1117;
  _QWORD v1118[2];
  int v1119;
  uint64_t v1120;
  unint64_t v1121;
  __int128 v1122;
  __int128 v1123;
  _QWORD v1124[2];
  int v1125;
  uint64_t v1126;
  unint64_t v1127;
  __int128 v1128;
  __int128 v1129;
  _QWORD v1130[2];
  int v1131;
  uint64_t v1132;
  unint64_t v1133;
  __int128 v1134;
  __int128 v1135;
  int v1136;
  uint64_t v1137;
  unint64_t v1138;
  unint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  int v1143;
  uint64_t v1144;
  unint64_t v1145;
  unint64_t v1146;
  uint64_t v1147;
  unint64_t v1148;
  uint64_t v1149;
  __int16 v1150;
  int8x16_t v1151;
  unint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  __int16 v1155;
  int8x16_t v1156;
  unint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  __int16 v1160;
  int8x16_t v1161;
  unint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  __int16 v1165;
  unint64_t v1166;
  int8x16_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  __int16 v1170;
  unint64_t v1171;
  unint64_t v1172;
  unint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  __int16 v1176;
  int8x16_t v1177;
  unint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  __int16 v1181;
  int8x16_t v1182;
  unint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  int v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  __int128 *v1190;
  uint64_t v1191;
  uint64_t v1192;
  WTF *v1193[3];
  int v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  __int128 *v1198;
  uint64_t v1199;
  uint64_t v1200;
  int v1201;
  uint64_t v1202;
  uint64_t v1203;
  __int128 v1204;
  __int128 v1205;
  int v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  __int128 *v1210;
  uint64_t v1211;
  uint64_t v1212;
  int v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  __int128 *v1217;
  uint64_t v1218;
  uint64_t v1219;
  int v1220;
  uint64_t v1221;
  uint64_t v1222;
  __int128 v1223;
  __int128 v1224;
  int v1225;
  uint64_t v1226;
  uint64_t v1227;
  __int128 v1228;
  __int128 v1229;
  int v1230;
  uint64_t v1231;
  __int128 v1232;
  __int128 v1233;
  uint64_t v1234;
  int v1235;
  uint64_t v1236;
  __int128 v1237;
  __int128 v1238;
  uint64_t v1239;
  _QWORD v1240[2];
  int v1241;
  unint64_t v1242;
  unint64_t v1243;
  __int128 v1244;
  __int128 v1245;
  _QWORD v1246[2];
  int v1247;
  unint64_t v1248;
  unint64_t v1249;
  __int128 v1250;
  __int128 v1251;
  _QWORD v1252[2];
  int v1253;
  uint64_t v1254;
  unint64_t v1255;
  __int128 v1256;
  __int128 v1257;
  int v1258;
  uint64_t v1259;
  unint64_t v1260;
  __int128 v1261;
  __int128 v1262;
  int v1263;
  unint64_t v1264;
  unint64_t v1265;
  __int128 v1266;
  __int128 v1267;
  int v1268;
  unint64_t v1269;
  unint64_t v1270;
  __int128 v1271;
  __int128 v1272;
  int v1273;
  unint64_t v1274;
  unint64_t v1275;
  __int128 v1276;
  __int128 v1277;
  int v1278;
  unint64_t v1279;
  unint64_t v1280;
  __int128 v1281;
  __int128 v1282;
  _QWORD v1283[2];
  int v1284;
  uint64_t v1285;
  unint64_t v1286;
  __int128 v1287;
  __int128 v1288;
  _QWORD v1289[2];
  int v1290;
  uint64_t v1291;
  unint64_t v1292;
  __int128 v1293;
  __int128 v1294;
  __int16 v1295;
  int8x16_t v1296;
  unint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  int v1300;
  uint64_t v1301;
  unint64_t v1302;
  __int128 v1303;
  __int128 v1304;
  _QWORD v1305[2];
  int v1306;
  uint64_t v1307;
  unint64_t v1308;
  __int128 v1309;
  __int128 v1310;
  __int16 v1311;
  int8x16_t v1312;
  unint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  int v1316;
  uint64_t v1317;
  unint64_t v1318;
  __int128 v1319;
  __int128 v1320;
  int v1321;
  unint64_t v1322;
  unint64_t v1323;
  __int128 v1324;
  __int128 v1325;
  int v1326;
  unint64_t v1327;
  unint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  int v1333;
  unint64_t v1334;
  unint64_t v1335;
  __int128 v1336;
  __int128 v1337;
  int v1338;
  unint64_t v1339;
  unint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  int v1345;
  unint64_t v1346;
  unint64_t v1347;
  __int128 v1348;
  __int128 v1349;
  int v1350;
  unint64_t v1351;
  unint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  unsigned int *v1356;
  int v1357;
  unint64_t v1358;
  unint64_t v1359;
  __int128 v1360;
  __int128 v1361;
  int v1362;
  unint64_t v1363;
  unint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  _QWORD v1369[2];
  int v1370;
  uint64_t v1371;
  unint64_t v1372;
  __int128 v1373;
  __int128 v1374;
  __int16 v1375;
  int8x16_t v1376;
  unint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  _QWORD v1380[2];
  int v1381;
  uint64_t v1382;
  unint64_t v1383;
  __int128 v1384;
  __int128 v1385;
  _QWORD v1386[2];
  int v1387;
  uint64_t v1388;
  unint64_t v1389;
  __int128 v1390;
  __int128 v1391;
  __int16 v1392;
  int8x16_t v1393;
  unint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  int v1397;
  uint64_t v1398;
  unint64_t v1399;
  __int128 v1400;
  __int128 v1401;
  _QWORD v1402[2];
  int v1403;
  unint64_t v1404;
  unint64_t v1405;
  __int128 v1406;
  __int128 v1407;
  __int16 v1408;
  int8x16_t v1409;
  unint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  __int16 v1413;
  int8x16_t v1414;
  unint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  int v1418;
  uint64_t v1419;
  unint64_t v1420;
  __int128 v1421;
  __int128 v1422;
  int v1423;
  uint64_t v1424;
  unint64_t v1425;
  __int128 v1426;
  __int128 v1427;
  _QWORD v1428[2];
  int v1429;
  uint64_t v1430;
  unint64_t v1431;
  __int128 v1432;
  __int128 v1433;
  __int16 v1434;
  unint64_t v1435;
  int8x16_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  __int16 v1439;
  unint64_t v1440;
  unint64_t v1441;
  unint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  _QWORD v1445[2];
  int v1446;
  uint64_t v1447;
  unint64_t v1448;
  __int128 v1449;
  __int128 v1450;
  int v1451;
  uint64_t v1452;
  unint64_t v1453;
  unint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  int v1458;
  uint64_t v1459;
  unint64_t v1460;
  unint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  int v1465;
  uint64_t v1466;
  unint64_t v1467;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  int v1472;
  uint64_t v1473;
  unint64_t v1474;
  unint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  int v1479;
  uint64_t v1480;
  unint64_t v1481;
  unint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  int v1486;
  uint64_t v1487;
  unint64_t v1488;
  unint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  int v1493;
  uint64_t v1494;
  unint64_t v1495;
  unint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  int v1500;
  uint64_t v1501;
  unint64_t v1502;
  unint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  __int16 v1507;
  __int128 v1508;
  uint64_t v1509;
  uint64_t v1510;
  JSC::DFG::Graph *v1511;
  int v1512;
  uint64_t v1513;
  unint64_t v1514;
  unint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  int v1519;
  uint64_t v1520;
  unint64_t v1521;
  unint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  int v1526;
  uint64_t v1527;
  unint64_t v1528;
  unint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  _QWORD v1533[2];
  _BYTE v1534[56];
  _QWORD v1535[2];
  _BYTE v1536[56];
  __int16 v1537;
  __int128 v1538;
  uint64_t v1539;
  uint64_t v1540;
  JSC::DFG::Graph *v1541;
  int v1542;
  uint64_t v1543;
  __int128 v1544;
  __int128 v1545;
  uint64_t v1546;
  int v1547;
  uint64_t v1548;
  __int128 v1549;
  __int128 v1550;
  uint64_t v1551;
  _QWORD v1552[2];
  int v1553;
  uint64_t v1554;
  __int128 v1555;
  __int128 v1556;
  uint64_t v1557;
  _QWORD v1558[2];
  int v1559;
  uint64_t v1560;
  __int128 v1561;
  __int128 v1562;
  uint64_t v1563;
  int v1564;
  unint64_t v1565;
  __int128 v1566;
  __int128 v1567;
  uint64_t v1568;
  int v1569;
  uint64_t v1570;
  __int128 v1571;
  __int128 v1572;
  uint64_t v1573;
  _QWORD v1574[2];
  int v1575;
  uint64_t v1576;
  unint64_t v1577;
  __int128 v1578;
  __int128 v1579;
  _QWORD v1580[2];
  int v1581;
  uint64_t v1582;
  unint64_t v1583;
  __int128 v1584;
  __int128 v1585;
  __int16 v1586;
  int8x16_t v1587;
  unint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  __int16 v1591;
  unint64_t v1592;
  int8x16_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  __int16 v1596;
  unint64_t v1597;
  int8x16_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  __int16 v1601;
  unint64_t v1602;
  int8x16_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  _QWORD v1606[2];
  int v1607;
  uint64_t v1608;
  unint64_t v1609;
  __int128 v1610;
  __int128 v1611;
  int v1612;
  uint64_t v1613;
  unint64_t v1614;
  __int128 v1615;
  __int128 v1616;
  int v1617;
  uint64_t v1618;
  unint64_t v1619;
  __int128 v1620;
  __int128 v1621;
  int v1622;
  uint64_t v1623;
  unint64_t v1624;
  __int128 v1625;
  __int128 v1626;
  int v1627;
  uint64_t v1628;
  __int128 v1629;
  __int128 v1630;
  uint64_t v1631;
  __int16 v1632;
  int8x16_t v1633;
  unint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  __int16 v1637;
  unint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  __int16 v1643;
  unint64_t v1644;
  __int128 v1645;
  __int128 v1646;
  __int16 v1647;
  unint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  __int16 v1653;
  unint64_t v1654;
  int8x16_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  __int16 v1658;
  unint64_t v1659;
  int8x16_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  __int16 v1663;
  int8x16_t v1664;
  unint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  __int16 v1668;
  unint64_t v1669;
  int8x16_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  int v1673;
  uint64_t v1674;
  unint64_t v1675;
  unint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  _QWORD v1680[2];
  _BYTE v1681[56];
  _QWORD v1682[2];
  _BYTE v1683[56];
  __int16 v1684;
  int8x16_t v1685;
  unint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  __int16 v1689;
  int8x16_t v1690;
  unint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  __int16 v1694;
  unint64_t v1695;
  unint64_t v1696;
  unint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  __int16 v1700;
  unint64_t v1701;
  int8x16_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  __int16 v1705;
  unint64_t v1706;
  int8x16_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  __int16 v1710;
  int8x16_t v1711;
  unint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  __int16 v1715;
  unint64_t v1716;
  int8x16_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  __int16 v1720;
  unint64_t v1721;
  int8x16_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  __int16 v1725;
  unint64_t v1726;
  int8x16_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  __int16 v1730;
  unint64_t v1731;
  int8x16_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  __int16 v1735;
  unint64_t v1736;
  int8x16_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  __int16 v1740;
  __int128 v1741;
  uint64_t v1742;
  uint64_t v1743;
  JSC::DFG::Graph *v1744;
  __int16 v1745;
  __int128 v1746;
  uint64_t v1747;
  uint64_t v1748;
  JSC::DFG::Graph *v1749;
  __int16 v1750;
  int8x16_t v1751;
  unint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  __int16 v1755;
  unint64_t v1756;
  int8x16_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  __int16 v1760;
  int8x16_t v1761;
  unint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  __int16 v1765;
  int8x16_t v1766;
  unint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  __int16 v1770;
  int8x16_t v1771;
  unint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  __int16 v1775;
  int8x16_t v1776;
  unint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v6 = (uint64_t *)v5;
  v7 = (uint64_t)v3;
  v1042 = (JSC::DFG::Graph *)v2;
  if (*(int *)(v2 + 952) <= 0)
  {
    v919 = (uint64_t *)v5;
    v920 = (unsigned __int16 *)v3;
    v921 = v4;
    hasArrayMode = JSC::DFG::Node::hasArrayMode(v3);
    v4 = v921;
    v7 = (uint64_t)v920;
    v6 = v919;
    if (hasArrayMode)
    {
      v923 = v920[9];
      if (v923 > 0xC9)
      {
        if (v923 - 202 > 0x3E || ((1 << (v923 + 54)) & 0x400000000E002FEFLL) == 0)
        {
          v1031 = v923 - 333;
          if (v1031 > 0x3A || ((1 << v1031) & 0x7A8000000000003) == 0)
          {
LABEL_1036:
            JSC::DFG::Graph::logAssertionFailure(v1042, (JSC::DFG::Node *)v920, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
            __break(0xC471u);
            JUMPOUT(0x1983751B0);
          }
        }
        goto LABEL_899;
      }
      v1030 = v923 - 101;
      if (v923 - 101 > 0x3E)
        goto LABEL_1035;
      if (((1 << v1030) & 0x7E0070000000000FLL) != 0)
      {
LABEL_899:
        v201 = *v921;
        goto LABEL_362;
      }
      v6 = v919;
      v7 = (uint64_t)v920;
      v4 = v921;
      if (((1 << v1030) & 0x18000000000) == 0)
      {
LABEL_1035:
        if (v923 - 92 >= 2)
          goto LABEL_1036;
        goto LABEL_899;
      }
    }
  }
  v8 = *(unsigned __int16 *)(v7 + 18);
  v9 = &v1537;
  v10 = &v1333;
  switch(*(_WORD *)(v7 + 18))
  {
    case 0:
    case 1:
    case 2:
      v116 = *(_QWORD *)(v7 + 72);
      v1775 = *(_WORD *)(v7 + 18);
      v117 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1776 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1777 = v117;
      v1778 = v116;
      v1779 = 0;
      v118 = *v6;
      v119 = &v1775;
      goto LABEL_140;
    case 3:
    case 4:
    case 5:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x20:
    case 0x21:
    case 0x60:
    case 0x61:
    case 0x84:
    case 0x85:
    case 0x8C:
    case 0x8D:
    case 0x90:
    case 0xAA:
    case 0x113:
    case 0x118:
    case 0x126:
    case 0x129:
    case 0x166:
      return;
    case 6:
    case 0x88:
    case 0x89:
    case 0xD6:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x109:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x116:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x144:
    case 0x15A:
    case 0x15B:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x161:
    case 0x162:
    case 0x163:
    case 0x16B:
      goto LABEL_304;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x62:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC3:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xD9:
    case 0xDB:
    case 0xDC:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x108:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14A:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x184:
    case 0x185:
    case 0x186:
    case 0x187:
    case 0x19B:
      goto LABEL_361;
    case 0xB:
      v1569 = 36;
      v1570 = 98306;
      v1571 = 0u;
      v1572 = 0u;
      v1573 = 0;
      v126 = *v6;
      v127 = &v1569;
      goto LABEL_151;
    case 0xC:
      v201 = *v4;
      v239 = 98306;
      goto LABEL_363;
    case 0xD:
      v123 = v7;
      v411 = *(_QWORD *)(v7 + 72);
      if (v411)
      {
        v577 = (HIDWORD(*(_QWORD *)(v411 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v411 + 24) >> 28) >> 24 << 20)) + 4;
        v412 = ((unint64_t)v577 << 15) | ((unint64_t)(v577 >> 31) << 47) | 2;
      }
      else
      {
        v412 = 131074;
      }
      v1564 = 37;
      v1566 = 0u;
      v1567 = 0u;
      v1565 = v412;
      v1568 = 0;
      v126 = *v6;
      v127 = &v1564;
      goto LABEL_152;
    case 0xE:
      v201 = *v4;
      v239 = 131074;
      goto LABEL_363;
    case 0xF:
      v924 = v6;
      v925 = *(_QWORD **)(v7 + 72);
      v926 = v925;
      do
      {
        v927 = v926;
        v926 = (_QWORD *)*v926;
      }
      while (v926);
      if (v927 != v925)
      {
        *v925 = v927;
        v925 = *(_QWORD **)(v7 + 72);
      }
      v928 = v925;
      do
      {
        v929 = v928;
        v928 = (_QWORD *)*v928;
      }
      while (v928);
      if (v929 != v925)
        *v925 = v929;
      v930 = (v929[3] << 15) | 2;
      v1559 = 36;
      v1560 = v930;
      v1561 = 0u;
      v1562 = 0u;
      v1563 = 0;
      JSC::DFG::LazyNode::LazyNode(v1558, (JSC::DFG::Node *)v7);
      v123 = v1558[0];
      v124 = v1558[1];
      v126 = *v924;
      v127 = &v1559;
      goto LABEL_153;
    case 0x10:
      v931 = v6;
      v932 = v7;
      v933 = *(_QWORD **)(v7 + 72);
      v934 = v933;
      do
      {
        v935 = v934;
        v934 = (_QWORD *)*v934;
      }
      while (v934);
      if (v935 != v933)
        *v933 = v935;
      v936 = *(_QWORD **)(v932 + 72);
      v937 = v936;
      do
      {
        v938 = v937;
        v937 = (_QWORD *)*v937;
      }
      while (v937);
      if (v938 != v936)
        *v936 = v938;
      v939 = (v938[3] << 15) | 2;
      v1553 = 36;
      v1555 = 0u;
      v1556 = 0u;
      v1554 = v939;
      v1557 = 0;
      JSC::DFG::LazyNode::LazyNode(v1552, (JSC::DFG::Node *)(*(_QWORD *)(v932 + 24) & 0xFF00FFFFFFFFFFFFLL));
      v123 = v1552[0];
      v124 = v1552[1];
      v126 = *v931;
      v127 = &v1553;
      goto LABEL_153;
    case 0x11:
      v187 = (**(_QWORD **)(v7 + 72) << 15) | 2;
      v188 = v6;
      v189 = v7;
      v190 = v188;
      v124 = 0;
      v1542 = 36;
      v1544 = 0u;
      v1545 = 0u;
      v1543 = v187;
      v1546 = 0;
      v191 = *(_QWORD *)(v189 + 24);
      v123 = v191 & 0xFF00FFFFFFFFFFFFLL;
      if ((v191 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v228 = *(unsigned __int16 *)((v191 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v228 <= 2)
        {
          v124 = *(_QWORD *)(v123 + 72);
          if ((_DWORD)v228)
          {
            if ((_DWORD)v228 != 1)
              v228 = 2;
            v124 |= v228;
            v190 = v188;
          }
        }
        else
        {
          v124 = 0;
        }
      }
      v126 = *v190;
      v127 = &v1542;
      goto LABEL_153;
    case 0x12:
      v44 = *(_QWORD *)(v7 + 72);
      v45 = (v44 << 15) | 2;
      v46 = *v4;
      v47 = *(_QWORD *)(*v4 + 136);
      v49 = (uint64_t *)(v47 + 8);
      v48 = *(_QWORD *)(v47 + 8);
      if (!v48)
        goto LABEL_55;
      v50 = v44 << 15 >> 15;
      v51 = *(_DWORD *)(v48 - 8);
      v52 = (v50 + ~(v44 << 32)) ^ ((unint64_t)(v50 + ~(v44 << 32)) >> 22);
      v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
      v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
      v55 = v51 & ((v54 >> 31) ^ v54);
      v56 = *(_QWORD *)(v48 + 16 * v55);
      if (v56 == v50)
        goto LABEL_54;
      v57 = 1;
      while (v56 != 0x8000000000000000)
      {
        v55 = ((_DWORD)v55 + v57) & v51;
        v56 = *(_QWORD *)(v48 + 16 * v55);
        ++v57;
        if (v56 == v50)
          goto LABEL_54;
      }
      v55 = *(unsigned int *)(v48 - 4);
LABEL_54:
      if (v55 != *(_DWORD *)(v48 - 4))
      {
        v108 = (_QWORD *)(v48 + 16 * v55);
        v109 = v108[1];
        *v108 = 0x7FFFFFFFFFFFFFFFLL;
        v108[1] = 0;
        if (v109)
          WTF::fastFree(v109, v3, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)&v1537, v7, (uint64_t)&v1333);
        ++*(_DWORD *)(*v49 - 16);
        v110 = *v49;
        if (*v49)
          v111 = *(_DWORD *)(v110 - 12) - 1;
        else
          v111 = -1;
        *(_DWORD *)(v110 - 12) = v111;
        v112 = *v49;
        if (*v49)
        {
          v113 = 6 * *(_DWORD *)(v112 - 12);
          v114 = *(_DWORD *)(v112 - 4);
          if (v113 < v114 && v114 >= 9)
        }
      }
LABEL_55:
      v60 = *(_QWORD *)(v47 + 16);
      v58 = (uint64_t *)(v47 + 16);
      v59 = v60;
      if (!v60)
        goto LABEL_83;
      v61 = *(unsigned int *)(v59 - 4);
      if (!(_DWORD)v61)
        goto LABEL_83;
      v62 = 0;
      do
      {
        v63 = *(_QWORD *)(v59 + 8 * --v61);
        if (v63 + 1 >= 2)
        {
          v64 = *(_QWORD *)(v63 + 8);
          if (v64 == v45)
          {
LABEL_75:
            *(_QWORD *)(v59 + 8 * v61) = -1;
            WTF::fastFree(v63, v3, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)v9, v7, (uint64_t)v10);
            ++v62;
          }
          else
          {
            LOWORD(v65) = v45;
            while (1)
            {
              v66 = v65 & 0x3FFF;
              if (v66 == 1)
                break;
              if (v66 == 2)
                v67 = 16385;
              else
                v67 = 16387;
              if ((v65 & 0x4000) != 0)
                v65 = v67;
              else
                v65 = v66 | 0x4000u;
              if (v66 == 40)
                v65 = 16385;
              if (v66 == 3)
                v65 = 16385;
              if (v65 == v64)
                goto LABEL_75;
            }
          }
        }
      }
      while ((_DWORD)v61);
      v68 = *v58;
      if (v62)
      {
        *(_DWORD *)(v68 - 16) += v62;
        v132 = *v58;
        if (*v58)
          v133 = *(_DWORD *)(v132 - 12);
        else
          v133 = 0;
        *(_DWORD *)(v132 - 12) = v133 - v62;
        v68 = *v58;
      }
      if (!v68)
        goto LABEL_83;
      v69 = *(_DWORD *)(v68 - 4);
      v70 = *(unsigned int *)(v68 - 12);
      v71 = v69 < 9 || 6 * (int)v70 >= v69;
      if (v71)
        goto LABEL_83;
      v221 = (v70 - 1) | ((v70 - 1) >> 1) | ((((_DWORD)v70 - 1) | ((v70 - 1) >> 1)) >> 2);
      v222 = v221 | (v221 >> 4) | ((v221 | (v221 >> 4)) >> 8);
      v223 = (v222 | HIWORD(v222)) + 1;
      if (v223 > 0x400)
      {
        if (v223 > 2 * v70)
          goto LABEL_506;
      }
      else if (3 * v223 > 4 * v70)
      {
LABEL_256:
        v224 = (double)v70;
        v225 = (double)v223;
        v226 = 0.604166667;
        goto LABEL_257;
      }
      LODWORD(v223) = 2 * v223;
      if (v223 <= 0x400)
        goto LABEL_256;
LABEL_506:
      v224 = (double)v70;
      v225 = (double)v223;
      v226 = 0.416666667;
LABEL_257:
      if (v225 * v226 <= v224)
        LODWORD(v223) = 2 * v223;
      if (v223 <= 8)
        v227 = 8;
      else
        v227 = v223;
LABEL_83:
      v74 = *(_QWORD *)(v46 + 144);
      v73 = (uint64_t *)(v46 + 144);
      v72 = v74;
      if (v74
        || (WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v73, 0, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)v9, v7, (uint64_t)v10), (v72 = *v73) != 0))
      {
        v75 = *(_DWORD *)(v72 - 8);
      }
      else
      {
        v75 = 0;
      }
      v76 = (v45 + ~(v45 << 32)) ^ ((unint64_t)(v45 + ~(v45 << 32)) >> 22);
      v77 = 9 * ((v76 + ~(v76 << 13)) ^ ((v76 + ~(v76 << 13)) >> 8));
      v78 = (v77 ^ (v77 >> 15)) + ~((v77 ^ (v77 >> 15)) << 27);
      v79 = v75 & ((v78 >> 31) ^ v78);
      v80 = (uint64_t *)(v72 + 16 * v79);
      v81 = *v80;
      if (!*v80)
      {
LABEL_93:
        *v80 = v45;
        v84 = 1;
        *((_BYTE *)v80 + 8) = 1;
        v85 = *v73;
        if (*v73)
          v84 = *(_DWORD *)(v85 - 12) + 1;
        *(_DWORD *)(v85 - 12) = v84;
        v86 = *v73;
        if (*v73)
          v87 = *(_DWORD *)(v86 - 12);
        else
          v87 = 0;
        v88 = (*(_DWORD *)(v86 - 16) + v87);
        v89 = *(unsigned int *)(v86 - 4);
        if (v89 > 0x400)
        {
          if (v89 <= 2 * v88)
            goto LABEL_125;
        }
        else if (3 * v89 <= 4 * v88)
        {
          goto LABEL_125;
        }
        while (1)
        {
          while (1)
          {
LABEL_99:
            v90 = v45 & 0x3FFF;
            if (v90 == 1)
              return;
            v91 = v90 | 0x4000u;
            if (v90 == 2)
              v92 = 16385;
            else
              v92 = 16387;
            if ((v45 & 0x4000) != 0)
              v91 = v92;
            if (v90 == 40)
              v91 = 16385;
            if (v90 == 3)
              v45 = 16385;
            else
              v45 = v91;
            v93 = *v73;
            if (*v73
              || (WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v73, 0, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)v9, v7, (uint64_t)v10), (v93 = *v73) != 0))
            {
              v94 = *(_DWORD *)(v93 - 8);
            }
            else
            {
              v94 = 0;
            }
            v95 = (v45 + ~(v45 << 32)) ^ ((unint64_t)(v45 + ~(v45 << 32)) >> 22);
            v96 = 9 * ((v95 + ~(v95 << 13)) ^ ((v95 + ~(v95 << 13)) >> 8));
            v97 = (v96 ^ (v96 >> 15)) + ~((v96 ^ (v96 >> 15)) << 27);
            v98 = v94 & ((v97 >> 31) ^ v97);
            v80 = (uint64_t *)(v93 + 16 * v98);
            v99 = *v80;
            if (*v80)
            {
              v100 = 0;
              v101 = 1;
              while (v99 != v45)
              {
                if ((v99 & 0x7FFF) == 0x4000)
                  v100 = v80;
                v98 = (v98 + v101) & v94;
                v80 = (uint64_t *)(v93 + 16 * v98);
                v99 = *v80;
                ++v101;
                if (!*v80)
                {
                  if (v100)
                  {
                    *v100 = 0;
                    v100[1] = 0;
                    --*(_DWORD *)(*v73 - 16);
                    v80 = v100;
                  }
                  goto LABEL_119;
                }
              }
              return;
            }
LABEL_119:
            *v80 = v45;
            *((_BYTE *)v80 + 8) = 0;
            v102 = *v73;
            v103 = *v73 ? *(_DWORD *)(v102 - 12) + 1 : 1;
            *(_DWORD *)(v102 - 12) = v103;
            v104 = *v73;
            v105 = *v73 ? *(_DWORD *)(v104 - 12) : 0;
            v106 = (*(_DWORD *)(v104 - 16) + v105);
            v107 = *(unsigned int *)(v104 - 4);
            if (v107 > 0x400)
              break;
            if (3 * v107 <= 4 * v106)
              goto LABEL_125;
          }
          if (v107 <= 2 * v106)
LABEL_125:
            WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v73, v80, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)v9, v7, (uint64_t)v10);
        }
      }
      v82 = 0;
      v83 = 1;
      while (v81 != v45)
      {
        if ((v81 & 0x7FFF) == 0x4000)
          v82 = v80;
        v79 = (v79 + v83) & v75;
        v80 = (uint64_t *)(v72 + 16 * v79);
        v81 = *v80;
        ++v83;
        if (!*v80)
        {
          if (v82)
          {
            *v82 = 0;
            v82[1] = 0;
            --*(_DWORD *)(*v73 - 16);
            v80 = v82;
          }
          goto LABEL_93;
        }
      }
      if (!*((_BYTE *)v80 + 8))
      {
        *((_BYTE *)v80 + 8) = 1;
        goto LABEL_99;
      }
      return;
    case 0x13:
      v131 = (**(_QWORD **)(v7 + 72) << 15) | 2;
      v1547 = 36;
      v1548 = v131;
      v1549 = 0u;
      v1550 = 0u;
      v1551 = 0;
      v126 = *v6;
      v127 = &v1547;
      goto LABEL_151;
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1F:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0xB9:
    case 0x117:
    case 0x153:
    case 0x154:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x175:
    case 0x17B:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
      v12 = (uint64_t *)(*v4 + 144);
      v11 = *v12;
      if (*v12
        || (WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand((uint64_t *)(*v4 + 144), 0, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)&v1537, v7, (uint64_t)&v1333), (v11 = *v12) != 0))
      {
        v13 = *(_DWORD *)(v11 - 8);
      }
      else
      {
        v13 = 0;
      }
      v14 = v13 & 0x1A0F4972;
      v15 = (_QWORD *)(v11 + 16 * (v13 & 0x1A0F4972));
      v16 = *v15;
      if (!*v15)
        goto LABEL_13;
      v17 = 0;
      v18 = 1;
      while (v16 != 16424)
      {
        if ((v16 & 0x7FFF) == 0x4000)
          v17 = v15;
        v14 = (v14 + v18) & v13;
        v15 = (_QWORD *)(v11 + 16 * v14);
        v16 = *v15;
        ++v18;
        if (!*v15)
        {
          if (v17)
          {
            *v17 = 0;
            v17[1] = 0;
            --*(_DWORD *)(*v12 - 16);
            v15 = v17;
          }
LABEL_13:
          *v15 = 16424;
          v19 = 1;
          *((_BYTE *)v15 + 8) = 1;
          v20 = *v12;
          if (*v12)
            v19 = *(_DWORD *)(v20 - 12) + 1;
          *(_DWORD *)(v20 - 12) = v19;
          v21 = *v12;
          if (*v12)
            v22 = *(_DWORD *)(v21 - 12);
          else
            v22 = 0;
          v23 = (*(_DWORD *)(v21 - 16) + v22);
          v24 = *(unsigned int *)(v21 - 4);
          if (v24 > 0x400)
          {
            if (v24 <= 2 * v23)
              goto LABEL_165;
          }
          else
          {
            if (3 * v24 > 4 * v23)
              goto LABEL_19;
LABEL_165:
            WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v12, v15, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)v9, v7, (uint64_t)v10);
          }
LABEL_19:
          LOWORD(v25) = 16424;
          while (1)
          {
LABEL_20:
            v26 = v25 & 0x3FFF;
            switch(v26)
            {
              case 1:
                return;
              case 2:
                v27 = 16385;
                break;
              case 40:
                v27 = 16385;
                break;
              default:
                v27 = 16387;
                break;
            }
            if (v26 == 3)
              v25 = 16385;
            else
              v25 = v27;
            v28 = *v12;
            if (*v12
              || (WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v12, 0, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)v9, v7, (uint64_t)v10), (v28 = *v12) != 0))
            {
              v29 = *(_DWORD *)(v28 - 8);
            }
            else
            {
              v29 = 0;
            }
            v30 = (v25 + ~(v25 << 32)) ^ ((unint64_t)(v25 + ~(v25 << 32)) >> 22);
            v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
            v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
            v33 = v29 & ((v32 >> 31) ^ v32);
            v34 = (uint64_t *)(v28 + 16 * v33);
            v35 = *v34;
            if (*v34)
            {
              v36 = 0;
              v37 = 1;
              while (v35 != v25)
              {
                if ((v35 & 0x7FFF) == 0x4000)
                  v36 = v34;
                v33 = (v33 + v37) & v29;
                v34 = (uint64_t *)(v28 + 16 * v33);
                v35 = *v34;
                ++v37;
                if (!*v34)
                {
                  if (v36)
                  {
                    *v36 = 0;
                    v36[1] = 0;
                    --*(_DWORD *)(*v12 - 16);
                    v34 = v36;
                  }
                  goto LABEL_38;
                }
              }
              return;
            }
LABEL_38:
            *v34 = v25;
            *((_BYTE *)v34 + 8) = 0;
            v38 = *v12;
            v39 = *v12 ? *(_DWORD *)(v38 - 12) + 1 : 1;
            *(_DWORD *)(v38 - 12) = v39;
            v40 = *v12;
            v41 = *v12 ? *(_DWORD *)(v40 - 12) : 0;
            v42 = (*(_DWORD *)(v40 - 16) + v41);
            v43 = *(unsigned int *)(v40 - 4);
            if (v43 <= 0x400)
              break;
            if (v43 <= 2 * v42)
              goto LABEL_44;
          }
          if (3 * v43 > 4 * v42)
            goto LABEL_20;
LABEL_44:
          WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v12, v34, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)v9, v7, (uint64_t)v10);
          goto LABEL_20;
        }
      }
      if (!*((_BYTE *)v15 + 8))
      {
        *((_BYTE *)v15 + 8) = 1;
        goto LABEL_19;
      }
      return;
    case 0x1C:
      v1012 = *(_QWORD **)(v7 + 72);
      v1013 = v1012;
      do
      {
        v1014 = v1013;
        v1013 = (_QWORD *)*v1013;
      }
      while (v1013);
      if (v1014 != v1012)
        *v1012 = v1014;
      goto LABEL_437;
    case 0x1E:
      v413 = *(unsigned int *)(v7 + 72);
      v1684 = 30;
      v414 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1685 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1686 = v414;
      v1687 = v413;
      v1688 = 0;
      v118 = *v6;
      v119 = &v1684;
      goto LABEL_140;
    case 0x22:
      v201 = *v4;
      v239 = 16419;
      goto LABEL_363;
    case 0x28:
      v121 = v6;
      v122 = v7;
      JSC::DFG::ClobberSet::add((uint64_t *)(*v4 + 144), 16424, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)&v1537, v7, (uint64_t)&v1333);
      v123 = v122;
      v124 = 0;
      v1627 = 23;
      v1629 = 0u;
      v1630 = 0u;
      v1628 = 16422;
      v1631 = 0;
      v125 = *(unsigned __int16 *)(v122 + 18);
      if (v125 <= 2)
      {
        v124 = *(_QWORD *)(v122 + 72);
        if (*(_WORD *)(v122 + 18))
        {
          if ((_DWORD)v125 != 1)
            v125 = 2;
          v124 |= v125;
          v123 = v122;
        }
      }
      v126 = *v121;
      v127 = &v1627;
      goto LABEL_153;
    case 0x29:
      v955 = *(_QWORD *)(v7 + 24);
      if (((v955 >> 50) & 0x3F) - 26 > 2)
        goto LABEL_361;
      v1705 = 41;
      v1707 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1709 = 0;
      v1706 = v955 & 0xFFFCFFFFFFFFFFFFLL;
      v1708 = 0;
      v118 = *v6;
      v119 = &v1705;
      goto LABEL_140;
    case 0x2A:
      v479 = *(_QWORD *)(v7 + 24);
      if ((v479 & 0xFC000000000000) == 0)
        goto LABEL_361;
      v1700 = 42;
      v1702 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1704 = 0;
      v1701 = v479 & 0xFFFCFFFFFFFFFFFFLL;
      v1703 = 0;
      v118 = *v6;
      v119 = &v1700;
      goto LABEL_140;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v289 = (*(_QWORD *)(v7 + 24) >> 50) & 0x3FLL;
      switch((_DWORD)v289)
      {
        case 0x1A:
          v482 = *(_QWORD *)(v7 + 32) & 0xFC000000000000;
          v483 = 0x68000000000000;
          break;
        case 0x1C:
          v482 = *(_QWORD *)(v7 + 32) & 0xFC000000000000;
          v483 = 0x70000000000000;
          break;
        case 0x1B:
          v482 = *(_QWORD *)(v7 + 32) & 0xFC000000000000;
          v483 = 0x6C000000000000;
          break;
        default:
          goto LABEL_361;
      }
      if (v482 != v483)
        goto LABEL_361;
      v484 = v6;
      v485 = v7;
      JSC::DFG::ClobberSet::add((uint64_t *)(*v4 + 144), 16424, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)&v1537, v7, (uint64_t)&v1333);
      v1586 = *(_WORD *)(v485 + 18);
      v486 = *(_QWORD *)(v485 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1587 = vandq_s8(*(int8x16_t *)(v485 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1590 = 0;
      v1588 = v486;
      v1589 = 0;
      v118 = *v484;
      v119 = &v1586;
      goto LABEL_140;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      v166 = *(_QWORD *)(v7 + 24);
      if ((v166 & 0xFC000000000000) == 0)
        goto LABEL_361;
      v167 = *(_QWORD *)(v7 + 32);
      if ((v167 & 0xFC000000000000) == 0)
        goto LABEL_361;
      v1694 = *(_WORD *)(v7 + 18);
      v168 = v166 & 0xFFFCFFFFFFFFFFFFLL;
      v169 = v167 & 0xFFFCFFFFFFFFFFFFLL;
      v170 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1695 = v168;
      v1696 = v169;
      v1699 = 0;
      v1697 = v170;
      v1698 = 0;
      v118 = *v6;
      v119 = &v1694;
      goto LABEL_140;
    case 0x36:
    case 0x38:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x43:
    case 0x4A:
    case 0x5B:
    case 0x86:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xBB:
    case 0xBC:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xEE:
    case 0xF0:
    case 0x128:
    case 0x12A:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x133:
    case 0x134:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x14B:
    case 0x14C:
    case 0x17C:
      v1765 = *(_WORD *)(v7 + 18);
      v120 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1766 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1768 = 0;
      v1769 = 0;
      v1767 = v120;
      v118 = *v6;
      v119 = &v1765;
      goto LABEL_140;
    case 0x37:
    case 0x39:
    case 0x3E:
    case 0x45:
      v140 = *(unsigned int *)(v7 + 72);
      v1663 = *(_WORD *)(v7 + 18);
      v141 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1664 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1665 = v141;
      v1666 = v140;
      v1667 = 0;
      v118 = *v6;
      v119 = &v1663;
      goto LABEL_140;
    case 0x3F:
      v940 = *(_QWORD *)(v7 + 24);
      if (((v940 >> 50) & 0x3F) - 1 > 1)
        goto LABEL_361;
      v1720 = 63;
      v1722 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1724 = 0;
      v1721 = v940 & 0xFFFCFFFFFFFFFFFFLL;
      v1723 = 0;
      v118 = *v6;
      v119 = &v1720;
      goto LABEL_140;
    case 0x40:
    case 0x42:
    case 0x44:
      v192 = *(_QWORD *)(v7 + 24);
      v193 = (v192 >> 50) & 0x3F;
      if ((_DWORD)v193 == 49 || (_DWORD)v193 == 1 || (_DWORD)v193 == 52)
      {
        v194 = *(unsigned int *)(v7 + 72);
        v1658 = *(_WORD *)(v7 + 18);
        v1659 = v192 & 0xFFFCFFFFFFFFFFFFLL;
        v1660 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v1661 = v194;
        v1662 = 0;
        v118 = *v6;
        v119 = &v1658;
        goto LABEL_140;
      }
      if ((_DWORD)v193)
      {
        JSC::DFG::Graph::logAssertionFailure(v1042, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1983713C8);
      }
      goto LABEL_361;
    case 0x41:
      v463 = *(_QWORD *)(v7 + 24);
      v464 = (v463 >> 50) & 0x3F;
      if ((_DWORD)v464 != 49 && (_DWORD)v464 != 1 && (_DWORD)v464 != 52)
        goto LABEL_361;
      v465 = *(unsigned int *)(v7 + 72);
      v1715 = 65;
      v1717 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1716 = v463 & 0xFFFCFFFFFFFFFFFFLL;
      v1718 = v465;
      v1719 = 0;
      v118 = *v6;
      v119 = &v1715;
      goto LABEL_140;
    case 0x46:
      v559 = *(_QWORD *)(v7 + 24);
      v560 = (v559 >> 50) & 0x3F;
      if ((_DWORD)v560 != 49 && (_DWORD)v560 != 1)
        goto LABEL_361;
      v561 = *(unsigned int *)(v7 + 72);
      v1725 = 70;
      v1727 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1726 = v559 & 0xFFFCFFFFFFFFFFFFLL;
      v1728 = v561;
      v1729 = 0;
      v118 = *v6;
      v119 = &v1725;
      goto LABEL_140;
    case 0x47:
    case 0x48:
      v1745 = *(_WORD *)(v7 + 18);
      v1746 = *(_OWORD *)(v7 + 24);
      v1747 = *(_QWORD *)(v7 + 40);
      v1748 = 0;
      v1749 = v1042;
      v118 = *v6;
      v119 = &v1745;
      goto LABEL_140;
    case 0x49:
    case 0x50:
      v480 = *(_QWORD *)(v7 + 24);
      if ((v480 & 0xFC000000000000) != 0xC4000000000000)
        goto LABEL_361;
      v1730 = *(_WORD *)(v7 + 18);
      v1732 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1734 = 0;
      v1731 = v480 & 0xFFFCFFFFFFFFFFFFLL;
      v1733 = 0;
      v118 = *v6;
      v119 = &v1730;
      goto LABEL_140;
    case 0x4B:
      v201 = *v4;
      v239 = 16409;
      goto LABEL_363;
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
      v466 = *(_QWORD *)(v7 + 24);
      if ((v466 & 0xFC000000000000) != 0xC4000000000000)
        goto LABEL_361;
      v467 = *(int *)(v7 + 72);
      v1653 = *(_WORD *)(v7 + 18);
      v1654 = v466 & 0xFFFCFFFFFFFFFFFFLL;
      v1655 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1656 = v467;
      v1657 = 0;
      v118 = *v6;
      v119 = &v1653;
      goto LABEL_140;
    case 0x51:
      v534 = *(_QWORD *)(v7 + 24);
      if ((v534 & 0xFC000000000000) != 0xC4000000000000)
        goto LABEL_361;
      v535 = *(unsigned int *)(v7 + 72);
      v1735 = 81;
      v1737 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1736 = v534 & 0xFFFCFFFFFFFFFFFFLL;
      v1738 = v535;
      v1739 = 0;
      v118 = *v6;
      v119 = &v1735;
      goto LABEL_140;
    case 0x52:
    case 0x53:
      v883 = *(_QWORD *)(v7 + 24);
      v884 = (v883 >> 50) & 0x3F;
      if (v884 > 0x34)
        goto LABEL_1021;
      if (!v884)
        goto LABEL_361;
      if (((1 << v884) & 0x1200001C000002) == 0)
      {
LABEL_1021:
        JSC::DFG::Graph::logAssertionFailure(v1042, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198375030);
      }
      v1591 = *(_WORD *)(v7 + 18);
      v1593 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1595 = 0;
      v1592 = v883 & 0xFFFCFFFFFFFFFFFFLL;
      v1594 = 0;
      v118 = *v6;
      v119 = &v1591;
      goto LABEL_140;
    case 0x5C:
    case 0x5D:
      v152 = *(unsigned int *)(v7 + 72);
      v153 = *(_DWORD *)(v7 + 56) & 7;
      if (v153 >= 2)
      {
        switch(v153)
        {
          case 3u:
            v154 = 13;
            break;
          case 4u:
            v154 = 17;
            break;
          case 5u:
            v154 = 19;
            break;
          case 7u:
            __break(0xC471u);
            JUMPOUT(0x198375344);
          default:
            __break(0xC471u);
            JUMPOUT(0x198375374);
        }
      }
      else
      {
        v154 = 21;
      }
      switch(*(_DWORD *)(v7 + 72))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 0x17u:
        case 0x18u:
          goto LABEL_361;
        case 3u:
          goto LABEL_437;
        case 5u:
          if (BYTE2(v152) - 3 <= 1)
            goto LABEL_361;
          v1537 = *(_WORD *)(v7 + 18);
          v1538 = *(_OWORD *)(v7 + 24);
          v1539 = *(_QWORD *)(v7 + 40);
          v1540 = v152;
          v1541 = v1042;
          v118 = *v6;
          v119 = &v1537;
          goto LABEL_140;
        case 6u:
          v1507 = *(_WORD *)(v7 + 18);
          v1508 = *(_OWORD *)(v7 + 24);
          v1509 = *(_QWORD *)(v7 + 40);
          v1510 = 0;
          v1511 = v1042;
          v118 = *v6;
          v119 = &v1507;
          goto LABEL_140;
        case 7u:
          if (BYTE2(v152) > 3u || BYTE2(v152) == 2)
            goto LABEL_361;
          if (BYTE2(v152) == 3)
            v277 = 18;
          else
            v277 = v154;
          v278 = *(_QWORD *)(v7 + 24);
          v279 = *((_DWORD *)v1042 + 41);
          if (v279 <= v278)
          {
            __break(0xC471u);
            JUMPOUT(0x198375B00);
          }
          v280 = v278 + 1;
          if (v279 <= (int)v278 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198375B08);
          }
          v281 = *((_QWORD *)v1042 + 19);
          v282 = *(_QWORD *)(v281 + 8 * *(_QWORD *)(v7 + 24));
          v283 = *(_QWORD *)(v281 + 8 * v280) & 0xFF00FFFFFFFFFFFFLL;
          if (v283
            && (v410 = *(unsigned __int16 *)((*(_QWORD *)(v281 + 8 * v280) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v410 <= 2))
          {
            v284 = *(_QWORD *)(v283 + 72);
            if ((_DWORD)v410)
            {
              if ((_DWORD)v410 != 1)
                v410 = 2;
              v284 |= v410;
            }
          }
          else
          {
            v284 = 0;
          }
          v1526 = v277;
          v1527 = 16400;
          v1528 = v282 & 0xFF00FFFFFFFFFFFFLL;
          v1529 = v283;
          v1530 = v284;
          v1532 = 0;
          v1531 = 0;
          v126 = *v6;
          v127 = &v1526;
          goto LABEL_151;
        case 8u:
          if (BYTE2(v152) >= 2u)
          {
            if (BYTE2(v152) != 3)
              goto LABEL_361;
            if (v153 == 3)
            {
LABEL_1010:
              if (BYTE2(v152) == 3)
                v297 = 15;
              else
                v297 = 13;
LABEL_374:
              v298 = *(_QWORD *)(v7 + 24);
              v299 = *((_DWORD *)v1042 + 41);
              if (v299 <= v298)
              {
                __break(0xC471u);
                JUMPOUT(0x198375A50);
              }
              v300 = v298 + 1;
              if (v299 <= (int)v298 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198375A58);
              }
              v301 = *((_QWORD *)v1042 + 19);
              v302 = *(_QWORD *)(v301 + 8 * *(_QWORD *)(v7 + 24));
              v303 = *(_QWORD *)(v301 + 8 * v300) & 0xFF00FFFFFFFFFFFFLL;
              if (v303
                && (v406 = *(unsigned __int16 *)((*(_QWORD *)(v301 + 8 * v300) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                    v406 <= 2))
              {
                v304 = *(_QWORD *)(v303 + 72);
                if ((_DWORD)v406)
                {
                  if ((_DWORD)v406 != 1)
                    v406 = 2;
                  v304 |= v406;
                }
              }
              else
              {
                v304 = 0;
              }
              v1519 = v297;
              v1520 = 16401;
              v1521 = v302 & 0xFF00FFFFFFFFFFFFLL;
              v1522 = v303;
              v1523 = v304;
              v1525 = 0;
              v1524 = 0;
              v126 = *v6;
              v127 = &v1519;
LABEL_151:
              v123 = v7;
              goto LABEL_152;
            }
          }
          else if (v153 == 3)
          {
            if (!BYTE2(v152))
            {
              v297 = 14;
              goto LABEL_374;
            }
            goto LABEL_1010;
          }
          v297 = 16;
          goto LABEL_374;
        case 9u:
          if (BYTE2(v152) >= 2u && BYTE2(v152) != 3)
            goto LABEL_361;
          if (BYTE2(v152) == 3)
            v155 = 20;
          else
            v155 = v154;
          v156 = *(_QWORD *)(v7 + 24);
          v157 = *((_DWORD *)v1042 + 41);
          if (v157 <= v156)
          {
            __break(0xC471u);
            JUMPOUT(0x198375854);
          }
          v158 = v156 + 1;
          if (v157 <= (int)v156 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19837585CLL);
          }
          v159 = *((_QWORD *)v1042 + 19);
          v160 = *(_QWORD *)(v159 + 8 * *(_QWORD *)(v7 + 24));
          v161 = *(_QWORD *)(v159 + 8 * v158) & 0xFF00FFFFFFFFFFFFLL;
          if (v161
            && (v229 = *(unsigned __int16 *)((*(_QWORD *)(v159 + 8 * v158) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v229 <= 2))
          {
            v162 = *(_QWORD *)(v161 + 72);
            if ((_DWORD)v229)
            {
              if ((_DWORD)v229 != 1)
                v229 = 2;
              v162 |= v229;
            }
          }
          else
          {
            v162 = 0;
          }
          v1512 = v155;
          v1513 = 16402;
          v1514 = v160 & 0xFF00FFFFFFFFFFFFLL;
          v1515 = v161;
          v1516 = v162;
          v1518 = 0;
          v1517 = 0;
          v126 = *v6;
          v127 = &v1512;
          goto LABEL_151;
        case 0xAu:
        case 0xBu:
          if (BYTE2(v152) < 2u)
            return;
          goto LABEL_361;
        case 0xCu:
          if (BYTE2(v152) > 1u)
            goto LABEL_361;
          v913 = (JSC::DFG::Node *)v7;
          v914 = *(_QWORD *)(v7 + 24);
          v915 = *((_DWORD *)v1042 + 41);
          if (v915 <= v914)
          {
            __break(0xC471u);
            JUMPOUT(0x198375CA8);
          }
          if (v915 <= (int)v914 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198375CB0);
          }
          v916 = v6;
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1536, v154, 16404, *(_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * *(_QWORD *)(v7 + 24)), *(_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * (*(_QWORD *)(v7 + 24) + 1)), 0);
          JSC::DFG::LazyNode::LazyNode(v1535, v913);
          v123 = v1535[0];
          v124 = v1535[1];
          v126 = *v916;
          v127 = (int *)v1536;
          goto LABEL_153;
        case 0xDu:
          v1019 = *(_QWORD *)(v7 + 24);
          v1020 = *((_DWORD *)v1042 + 41);
          if (v1020 <= v1019)
          {
            __break(0xC471u);
            JUMPOUT(0x198375DA4);
          }
          if (v1020 <= (int)v1019 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198375DACLL);
          }
          v1021 = v6;
          v1022 = (JSC::DFG::Node *)v7;
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1534, v154, 16405, *(_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * *(_QWORD *)(v7 + 24)), *(_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * (*(_QWORD *)(v7 + 24) + 1)), 0);
          JSC::DFG::LazyNode::LazyNode(v1533, v1022);
          v123 = v1533[0];
          v124 = v1533[1];
          v126 = *v1021;
          v127 = (int *)v1534;
          goto LABEL_153;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          if ((v152 & 0x40000000) != 0)
          {
            v912 = *v4;
            v911 = v4;
            goto LABEL_954;
          }
          v212 = *(_QWORD *)(v7 + 24);
          v213 = *((_DWORD *)v1042 + 41);
          if (v213 <= v212)
          {
            __break(0xC471u);
            JUMPOUT(0x19837589CLL);
          }
          v214 = v212 + 1;
          if (v213 <= (int)v212 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1983758A4);
          }
          v215 = *((_QWORD *)v1042 + 19);
          v216 = *(_QWORD *)(v215 + 8 * *(_QWORD *)(v7 + 24));
          v217 = *(_QWORD *)(v215 + 8 * v214) & 0xFF00FFFFFFFFFFFFLL;
          if (v217
            && (v234 = *(unsigned __int16 *)((*(_QWORD *)(v215 + 8 * v214) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
                v234 <= 2))
          {
            v218 = *(_QWORD *)(v217 + 72);
            if ((_DWORD)v234)
            {
              if ((_DWORD)v234 != 1)
                v234 = 2;
              v218 |= v234;
            }
          }
          else
          {
            v218 = 0;
          }
          v1500 = v154;
          v1501 = 16406;
          v1502 = v216 & 0xFF00FFFFFFFFFFFFLL;
          v1503 = v217;
          v1504 = v218;
          v1506 = 0;
          v1505 = 0;
          v126 = *v6;
          v127 = &v1500;
          goto LABEL_151;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(v1042, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x198374E14);
        default:
          __break(0xC471u);
          JUMPOUT(0x198374DCCLL);
      }
    case 0x63:
      v860 = v7;
      v861 = v4;
      v862 = *(_DWORD **)(v860 + 72);
      v875 = v862[6];
      if (v875)
      {
        v876 = v861;
        v877 = v875 - 1;
        do
        {
          v876 = v861;
          --v877;
        }
        while (v877 != -1);
      }
      return;
    case 0x64:
      v799 = *(_DWORD **)(v7 + 72);
      v800 = v4;
      v807 = v799[6];
      if (v807)
      {
        v808 = v800;
        v809 = v807 - 1;
        do
        {
          v808 = v800;
          --v809;
        }
        while (v809 != -1);
      }
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v195 = *(_QWORD *)(v7 + 24);
      v196 = *((_DWORD *)v1042 + 41);
      if (v196 <= v195)
      {
        __break(0xC471u);
        JUMPOUT(0x198375864);
      }
      if (v196 <= (int)v195 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19837586CLL);
      }
      if (v196 <= (int)v195 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198375874);
      }
      v197 = *((_QWORD *)v1042 + 19);
      v198 = *(_DWORD *)(v7 + 72);
      if ((*(_DWORD *)(v7 + 56) & 7u) >= 2)
      {
        switch(*(_DWORD *)(v7 + 56) & 7)
        {
          case 3:
            v199 = 13;
            break;
          case 4:
            v199 = 17;
            break;
          case 5:
            v199 = 19;
            break;
          case 7:
            __break(0xC471u);
            JUMPOUT(0x1983753B4);
          default:
            __break(0xC471u);
            JUMPOUT(0x1983753E4);
        }
      }
      else
      {
        v199 = 21;
      }
      if (*(_DWORD *)(v7 + 72) - 14 >= 9)
      {
        v312 = *(_QWORD *)(v197 + 8 * *(_QWORD *)(v7 + 24)) & 0xFF00FFFFFFFFFFFFLL;
        v313 = *(_QWORD *)(v197 + 8 * (v195 + 1)) & 0xFF00FFFFFFFFFFFFLL;
        v314 = *(_QWORD *)(v197 + 8 * (v195 + 2)) & 0xFF00FFFFFFFFFFFFLL;
        switch(*(_DWORD *)(v7 + 72))
        {
          case 0u:
          case 1u:
          case 2u:
          case 4u:
          case 5u:
          case 6u:
          case 0xCu:
          case 0xDu:
          case 0x17u:
          case 0x18u:
            goto LABEL_361;
          case 3u:
            goto LABEL_437;
          case 7u:
            v201 = *v4;
            if (BYTE2(v198) - 3 <= 1)
              goto LABEL_362;
            v562 = v7;
            v563 = v6;
            v564 = v4;
            if (*(_WORD *)(v562 + 18) == 146)
              v571 = *(_DWORD *)(v562 + 80);
            else
              v571 = *(_DWORD *)(v562 + 72);
            if ((v571 & 0xFE0000) != 0)
            if (v313 && (v847 = *(unsigned __int16 *)(v313 + 18), v847 <= 2))
            {
              v572 = *(_QWORD *)(v313 + 72);
              if (*(_WORD *)(v313 + 18))
              {
                if ((_DWORD)v847 != 1)
                  v847 = 2;
                v572 |= v847;
              }
            }
            else
            {
              v572 = 0;
            }
            v573 = 0;
            v1493 = v199;
            v1494 = 16400;
            v1495 = v312;
            v1496 = v313;
            v1497 = v572;
            v1499 = 0;
            v1498 = 0;
            if (v314)
            {
              v848 = *(unsigned __int16 *)(v314 + 18);
              if (v848 <= 2)
              {
                v573 = *(_QWORD *)(v314 + 72);
                if (*(_WORD *)(v314 + 18))
                {
                  if ((_DWORD)v848 != 1)
                    v848 = 2;
                  v573 |= v848;
                }
              }
              else
              {
                v573 = 0;
              }
            }
            if (v313 && (v849 = *(unsigned __int16 *)(v313 + 18), v849 <= 2))
            {
              v574 = *(_QWORD *)(v313 + 72);
              if (*(_WORD *)(v313 + 18))
              {
                if ((_DWORD)v849 != 1)
                  v849 = 2;
                v574 |= v849;
              }
            }
            else
            {
              v574 = 0;
            }
            v124 = 0;
            v1486 = 18;
            v1487 = 16400;
            v1488 = v312;
            v1489 = v313;
            v1490 = v574;
            v1492 = 0;
            v1491 = 0;
            if (v314)
            {
              v850 = *(unsigned __int16 *)(v314 + 18);
              if (v850 <= 2)
              {
                v124 = *(_QWORD *)(v314 + 72);
                if (*(_WORD *)(v314 + 18))
                {
                  if ((_DWORD)v850 != 1)
                    v850 = 2;
                  v124 |= v850;
                }
              }
              else
              {
                v124 = 0;
              }
            }
            v126 = *v563;
            v127 = &v1486;
            goto LABEL_402;
          case 8u:
            v201 = *v4;
            if (BYTE2(v198) - 3 <= 1)
              goto LABEL_362;
            v578 = v7;
            v579 = v6;
            v580 = v4;
            if (*(_WORD *)(v578 + 18) == 146)
              v587 = *(_DWORD *)(v578 + 80);
            else
              v587 = *(_DWORD *)(v578 + 72);
            if ((v587 & 0xFE0000) != 0)
            if (v313 && (v854 = *(unsigned __int16 *)(v313 + 18), v854 <= 2))
            {
              v588 = *(_QWORD *)(v313 + 72);
              if (*(_WORD *)(v313 + 18))
              {
                if ((_DWORD)v854 != 1)
                  v854 = 2;
                v588 |= v854;
              }
            }
            else
            {
              v588 = 0;
            }
            v589 = 0;
            v1479 = 13;
            v1480 = 16401;
            v1481 = v312;
            v1482 = v313;
            v1483 = v588;
            v1485 = 0;
            v1484 = 0;
            if (v314)
            {
              v855 = *(unsigned __int16 *)(v314 + 18);
              if (v855 <= 2)
              {
                v589 = *(_QWORD *)(v314 + 72);
                if (*(_WORD *)(v314 + 18))
                {
                  if ((_DWORD)v855 != 1)
                    v855 = 2;
                  v589 |= v855;
                }
              }
              else
              {
                v589 = 0;
              }
            }
            if (v313 && (v856 = *(unsigned __int16 *)(v313 + 18), v856 <= 2))
            {
              v590 = *(_QWORD *)(v313 + 72);
              if (*(_WORD *)(v313 + 18))
              {
                if ((_DWORD)v856 != 1)
                  v856 = 2;
                v590 |= v856;
              }
            }
            else
            {
              v590 = 0;
            }
            v591 = 0;
            v1472 = 14;
            v1473 = 16401;
            v1474 = v312;
            v1475 = v313;
            v1476 = v590;
            v1478 = 0;
            v1477 = 0;
            if (v314)
            {
              v857 = *(unsigned __int16 *)(v314 + 18);
              if (v857 <= 2)
              {
                v591 = *(_QWORD *)(v314 + 72);
                if (*(_WORD *)(v314 + 18))
                {
                  if ((_DWORD)v857 != 1)
                    v857 = 2;
                  v591 |= v857;
                }
              }
              else
              {
                v591 = 0;
              }
            }
            if (v313 && (v858 = *(unsigned __int16 *)(v313 + 18), v858 <= 2))
            {
              v592 = *(_QWORD *)(v313 + 72);
              if (*(_WORD *)(v313 + 18))
              {
                if ((_DWORD)v858 != 1)
                  v858 = 2;
                v592 |= v858;
              }
            }
            else
            {
              v592 = 0;
            }
            v124 = 0;
            v1465 = 15;
            v1466 = 16401;
            v1467 = v312;
            v1468 = v313;
            v1469 = v592;
            v1471 = 0;
            v1470 = 0;
            if (v314)
            {
              v859 = *(unsigned __int16 *)(v314 + 18);
              if (v859 <= 2)
              {
                v124 = *(_QWORD *)(v314 + 72);
                if (*(_WORD *)(v314 + 18))
                {
                  if ((_DWORD)v859 != 1)
                    v859 = 2;
                  v124 |= v859;
                }
              }
              else
              {
                v124 = 0;
              }
            }
            v126 = *v579;
            v127 = &v1465;
            goto LABEL_402;
          case 9u:
            v201 = *v4;
            if (BYTE2(v198) - 3 <= 1)
              goto LABEL_362;
            v315 = v7;
            v316 = v6;
            v317 = v4;
            if (*(_WORD *)(v315 + 18) == 146)
              v324 = *(_DWORD *)(v315 + 80);
            else
              v324 = *(_DWORD *)(v315 + 72);
            if ((v324 & 0xFE0000) != 0)
            if (v313 && (v526 = *(unsigned __int16 *)(v313 + 18), v526 <= 2))
            {
              v325 = *(_QWORD *)(v313 + 72);
              if (*(_WORD *)(v313 + 18))
              {
                if ((_DWORD)v526 != 1)
                  v526 = 2;
                v325 |= v526;
              }
            }
            else
            {
              v325 = 0;
            }
            v326 = 0;
            v1458 = v199;
            v1459 = 16402;
            v1460 = v312;
            v1461 = v313;
            v1462 = v325;
            v1464 = 0;
            v1463 = 0;
            if (v314)
            {
              v527 = *(unsigned __int16 *)(v314 + 18);
              if (v527 <= 2)
              {
                v326 = *(_QWORD *)(v314 + 72);
                if (*(_WORD *)(v314 + 18))
                {
                  if ((_DWORD)v527 != 1)
                    v527 = 2;
                  v326 |= v527;
                }
              }
              else
              {
                v326 = 0;
              }
            }
            if (v313 && (v528 = *(unsigned __int16 *)(v313 + 18), v528 <= 2))
            {
              v327 = *(_QWORD *)(v313 + 72);
              if (*(_WORD *)(v313 + 18))
              {
                if ((_DWORD)v528 != 1)
                  v528 = 2;
                v327 |= v528;
              }
            }
            else
            {
              v327 = 0;
            }
            v124 = 0;
            v1451 = 20;
            v1452 = 16402;
            v1453 = v312;
            v1454 = v313;
            v1455 = v327;
            v1457 = 0;
            v1456 = 0;
            if (v314)
            {
              v529 = *(unsigned __int16 *)(v314 + 18);
              if (v529 <= 2)
              {
                v124 = *(_QWORD *)(v314 + 72);
                if (*(_WORD *)(v314 + 18))
                {
                  if ((_DWORD)v529 != 1)
                    v529 = 2;
                  v124 |= v529;
                }
              }
              else
              {
                v124 = 0;
              }
            }
            v126 = *v316;
            v127 = &v1451;
LABEL_402:
            v123 = v314;
            goto LABEL_153;
          case 0xAu:
            v201 = *v4;
            if (BYTE2(v198) - 3 <= 1)
              goto LABEL_362;
            v1027 = v7;
            v1028 = v4;
            if (*(_WORD *)(v1027 + 18) == 146)
              v1029 = *(_DWORD *)(v1027 + 80);
            else
              v1029 = *(_DWORD *)(v1027 + 72);
            if ((v1029 & 0xFE0000) == 0)
              return;
            v201 = *v1028;
            v239 = 16388;
            break;
          case 0xBu:
            v201 = *v4;
            if ((v198 & 0xFE0000) != 0)
              goto LABEL_362;
            v239 = 16403;
            goto LABEL_363;
          case 0x19u:
            JSC::DFG::Graph::logAssertionFailure(v1042, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
            __break(0xC471u);
            JUMPOUT(0x198374FECLL);
          default:
            __break(0xC471u);
            JUMPOUT(0x1983751E4);
        }
        goto LABEL_363;
      }
      v200 = v4;
      if ((v198 & 0x40000000) == 0)
        return;
      v201 = *v200;
      goto LABEL_990;
    case 0x6D:
      v593 = v4;
      v792 = *v593;
      v793 = 16423;
      goto LABEL_675;
    case 0x87:
      v173 = v7;
      v174 = v4;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v173 + 72) + 8) + 16) & 0x3E000) == 0x4000)
        goto LABEL_881;
      return;
    case 0x8A:
      v142 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1418 = 4;
      v1419 = 16396;
      v1420 = v142;
      v1421 = 0u;
      v1422 = 0u;
      v126 = *v6;
      v127 = &v1418;
      goto LABEL_151;
    case 0x8B:
      v375 = v6;
      v376 = v7;
      v377 = v4;
      v384 = *(_QWORD *)(v376 + 32);
      v385 = *(_QWORD *)(v376 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1423 = 4;
      v1424 = 16396;
      v1425 = v385;
      v1426 = 0u;
      v1427 = 0u;
      v123 = v384 & 0xFF00FFFFFFFFFFFFLL;
      if ((v384 & 0xFF00FFFFFFFFFFFFLL) != 0
        && (v468 = *(unsigned __int16 *)((v384 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v468 <= 2))
      {
        v124 = *(_QWORD *)((v384 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        v386 = v375;
        if (!(_DWORD)v468)
        {
LABEL_426:
          v126 = *v386;
          v127 = &v1423;
          goto LABEL_153;
        }
        if ((_DWORD)v468 != 1)
          v468 = 2;
        v124 |= v468;
      }
      else
      {
        v124 = 0;
      }
      v386 = v375;
      goto LABEL_426;
    case 0x91:
    case 0x92:
      v359 = v4;
      v201 = *v359;
      v239 = 16422;
      goto LABEL_363;
    case 0x93:
      v273 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1397 = 22;
      v1398 = 16423;
      v1399 = v273;
      v1400 = 0u;
      v1401 = 0u;
      v126 = *v6;
      v127 = &v1397;
      goto LABEL_151;
    case 0x94:
      v1392 = 148;
      v274 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1393 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1396 = 0;
      v1394 = v274;
      v1395 = 0;
      v118 = *v6;
      v119 = &v1392;
      goto LABEL_140;
    case 0x95:
      v285 = *(_QWORD *)(v7 + 72);
      v1632 = 149;
      v286 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1633 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1634 = v286;
      v1635 = v285;
      v1636 = 0;
      v118 = *v6;
      v119 = &v1632;
      goto LABEL_140;
    case 0x96:
      v1008 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1581 = 9;
      v1582 = 16390;
      v1583 = v1008;
      v1584 = 0u;
      v1585 = 0u;
      v1009 = v6;
      JSC::DFG::LazyNode::LazyNode(v1580, (JSC::DFG::Node *)v7);
      v123 = v1580[0];
      v124 = v1580[1];
      v126 = *v1009;
      v127 = &v1581;
      goto LABEL_153;
    case 0x97:
      v1010 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1575 = 30;
      v1576 = 16391;
      v1577 = v1010;
      v1578 = 0u;
      v1579 = 0u;
      v1011 = v6;
      JSC::DFG::LazyNode::LazyNode(v1574, (JSC::DFG::Node *)v7);
      v123 = v1574[0];
      v124 = v1574[1];
      v126 = *v1011;
      v127 = &v1575;
      goto LABEL_153;
    case 0x98:
    case 0x99:
      v128 = *(_QWORD *)(v7 + 72);
      v129 = ((unint64_t)*(unsigned int *)(v128 + 4) << 15) | 0xF;
      v130 = *(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (*((int *)v1042 + 238) >= 2)
      {
        v1362 = 28;
        v1363 = v129;
        v1364 = v130;
        v1365 = 0;
        v1366 = 0;
        v1367 = 0;
        v1368 = v128;
        v126 = *v6;
        v127 = &v1362;
      }
      else
      {
        v1357 = 28;
        v1358 = v129;
        v1359 = v130;
        v1360 = 0u;
        v1361 = 0u;
        v126 = *v6;
        v127 = &v1357;
      }
      goto LABEL_151;
    case 0x9A:
      v230 = *(unsigned int **)(v7 + 72);
      v231 = ((unint64_t)*v230 << 15) | 0xF;
      v232 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      if (*((int *)v1042 + 238) >= 2)
      {
        v1350 = 28;
        v1351 = v231;
        v1352 = v232;
        v1353 = 0;
        v1354 = 0;
        v1355 = 0;
        v1356 = v230;
        v126 = *v6;
        v127 = &v1350;
      }
      else
      {
        v1345 = 28;
        v1346 = v231;
        v1347 = v232;
        v1348 = 0u;
        v1349 = 0u;
        v126 = *v6;
        v127 = &v1345;
      }
      goto LABEL_151;
    case 0x9B:
      v134 = v6;
      v135 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(v7 + 72) + 4) << 15) | 0xF;
      v136 = (_QWORD *)v7;
      v137 = v136[4];
      if (*((int *)v1042 + 238) >= 2)
      {
        v124 = 0;
        v163 = v136[9];
        v1326 = 28;
        v1327 = v135;
        v1328 = v137 & 0xFF00FFFFFFFFFFFFLL;
        v1329 = 0;
        v1330 = 0;
        v1331 = 0;
        v1332 = v163;
        v164 = v136[5];
        v123 = v164 & 0xFF00FFFFFFFFFFFFLL;
        v165 = v134;
        if ((v164 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v209 = *(unsigned __int16 *)((v164 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
          if (v209 <= 2)
          {
            v124 = *(_QWORD *)(v123 + 72);
            if ((_DWORD)v209)
            {
              if ((_DWORD)v209 != 1)
                v209 = 2;
              v124 |= v209;
              v165 = v134;
            }
          }
          else
          {
            v124 = 0;
          }
        }
        v126 = *v165;
        v127 = &v1326;
      }
      else
      {
        v1321 = 28;
        v1322 = v135;
        v1323 = v137 & 0xFF00FFFFFFFFFFFFLL;
        v1324 = 0u;
        v1325 = 0u;
        v138 = v136[5];
        v123 = v138 & 0xFF00FFFFFFFFFFFFLL;
        v139 = v134;
        if ((v138 & 0xFF00FFFFFFFFFFFFLL) != 0
          && (v208 = *(unsigned __int16 *)((v138 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v208 <= 2))
        {
          v124 = *(_QWORD *)(v123 + 72);
          if ((_DWORD)v208)
          {
            if ((_DWORD)v208 != 1)
              v208 = 2;
            v124 |= v208;
            v139 = v134;
          }
        }
        else
        {
          v124 = 0;
        }
        v126 = *v139;
        v127 = &v1321;
      }
      goto LABEL_153;
    case 0x9C:
      v332 = v6;
      v333 = ((unint64_t)**(unsigned int **)(v7 + 72) << 15) | 0xF;
      v334 = v4;
      v335 = v7;
      v342 = (_QWORD *)v335;
      v343 = *(_QWORD *)(v335 + 72);
      v344 = *(unsigned int *)(v343 + 20);
      v345 = (v344 << 6) - 64;
      while (v345 != -64)
      {
        v346 = *(_DWORD *)(*(_QWORD *)(v343 + 8) + v345) - 2;
        v345 -= 64;
        if (v346 <= 3)
        {
          v347 = v342;
          v343 = v342[9];
          v344 = *(unsigned int *)(v343 + 20);
          goto LABEL_411;
        }
      }
      v347 = v342;
LABEL_411:
      v348 = (v344 << 6) - 64;
      while (v344)
      {
        if (--v344 >= (unint64_t)*(unsigned int *)(v343 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x198375C38);
        }
        v349 = v348 - 64;
        v350 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v343 + 8) + v348));
        v348 = v349;
        v347 = v342;
        if (v350)
        {
          v347 = v342;
          break;
        }
      }
      v357 = v347[3];
      if (*((int *)v1042 + 238) >= 2)
      {
        v124 = 0;
        v408 = v347[9];
        v1338 = 28;
        v1339 = v333;
        v1340 = v357 & 0xFF00FFFFFFFFFFFFLL;
        v1341 = 0;
        v1342 = 0;
        v1343 = 0;
        v1344 = v408;
        v409 = v347[4];
        v123 = v409 & 0xFF00FFFFFFFFFFFFLL;
        if ((v409 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v494 = *(unsigned __int16 *)((v409 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
          if (v494 <= 2)
          {
            v124 = *(_QWORD *)(v123 + 72);
            if ((_DWORD)v494)
            {
              if ((_DWORD)v494 != 1)
                v494 = 2;
              v124 |= v494;
            }
          }
          else
          {
            v124 = 0;
          }
        }
        v126 = *v332;
        v127 = &v1338;
      }
      else
      {
        v1333 = 28;
        v1334 = v333;
        v1335 = v357 & 0xFF00FFFFFFFFFFFFLL;
        v1336 = 0u;
        v1337 = 0u;
        v358 = v347[4];
        v123 = v358 & 0xFF00FFFFFFFFFFFFLL;
        if ((v358 & 0xFF00FFFFFFFFFFFFLL) != 0
          && (v493 = *(unsigned __int16 *)((v358 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v493 <= 2))
        {
          v124 = *(_QWORD *)(v123 + 72);
          if ((_DWORD)v493)
          {
            if ((_DWORD)v493 != 1)
              v493 = 2;
            v124 |= v493;
          }
        }
        else
        {
          v124 = 0;
        }
        v126 = *v332;
        v127 = &v1333;
      }
      goto LABEL_153;
    case 0x9D:
      v904 = v7;
      v174 = v4;
      if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*(_QWORD *)(v904 + 72)))
        return;
LABEL_881:
      v201 = *v174;
      v239 = 16399;
      goto LABEL_363;
    case 0x9E:
      v149 = *(unsigned int *)(v7 + 72);
      v150 = *(_DWORD *)(v7 + 72);
      if ((v150 - 6) < 6)
      {
        v151 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
        v1316 = 1;
        v1317 = 16388;
        v1318 = v151;
        v1319 = 0u;
        v1320 = 0u;
        v126 = *v6;
        v127 = &v1316;
        goto LABEL_151;
      }
      if (*(_DWORD *)(v7 + 72) <= 0x18u)
      {
        if (v150 == 5)
        {
          v1311 = 158;
          v290 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
          v1312 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
          v1313 = v290;
          v1314 = v149;
          v1315 = 0;
          v118 = *v6;
          v119 = &v1311;
          goto LABEL_140;
        }
        v896 = v6;
        if ((v150 - 12) < 2)
        {
          v897 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
          v1306 = 1;
          v1307 = 16423;
          v1308 = v897;
          v1309 = 0u;
          v1310 = 0u;
          JSC::DFG::LazyNode::LazyNode(v1305, (JSC::DFG::Node *)v7);
          v123 = v1305[0];
          v124 = v1305[1];
          v126 = *v896;
          v127 = &v1306;
          goto LABEL_153;
        }
        if (v150 == 3)
          goto LABEL_437;
      }
      else if (v150 == 25)
      {
        goto LABEL_240;
      }
      v1015 = v6;
      v1016 = (JSC::DFG::Node *)v7;
      v1017 = v4;
      v1018 = JSC::DFG::toTypedArrayType(*(_DWORD *)(v7 + 72));
      v7 = (uint64_t)v1016;
      if (v1018 == 12 || (v4 = v1017, v6 = v1015, !v1018))
      {
        JSC::DFG::Graph::logAssertionFailure(v1042, v1016, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
        __break(0xC471u);
        JUMPOUT(0x198374DA4);
      }
LABEL_240:
      if ((v149 & 0x40000000) != 0)
      {
        v201 = *v4;
        goto LABEL_990;
      }
      v210 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1300 = 1;
      v1301 = 16423;
      v1302 = v210;
      v1303 = 0u;
      v1304 = 0u;
      v211 = *(unsigned __int16 *)(v7 + 18);
      if (v211 <= 2)
      {
        v124 = *(_QWORD *)(v7 + 72);
        if (*(_WORD *)(v7 + 18))
        {
          if ((_DWORD)v211 != 1)
            v211 = 2;
          v124 |= v211;
        }
      }
      else
      {
        v124 = 0;
      }
      v126 = *v6;
      v127 = &v1300;
      v123 = v7;
      goto LABEL_153;
    case 0x9F:
      v328 = *(unsigned int *)(v7 + 72);
      v329 = *(_DWORD *)(v7 + 72);
      if (v329 != 25)
      {
        v1034 = v6;
        v1035 = (JSC::DFG::Node *)v7;
        v1036 = JSC::DFG::toTypedArrayType(v329);
        v7 = (uint64_t)v1035;
        if (v1036 == 12 || (v6 = v1034, !v1036))
        {
          JSC::DFG::Graph::logAssertionFailure(v1042, v1035, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x198375C30);
        }
      }
      if ((v328 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(v1042, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x198374ED4);
      }
      v1295 = *(_WORD *)(v7 + 18);
      v330 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1296 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1297 = v330;
      v1298 = v328;
      v1299 = 0;
      v118 = *v6;
      v119 = &v1295;
      goto LABEL_140;
    case 0xA0:
      v941 = v4;
      v949 = v6;
      v950 = (JSC::DFG::Node *)v7;
      v951 = *(_DWORD *)(v7 + 72);
      if (v951 == 25)
        goto LABEL_928;
      v1038 = JSC::DFG::toTypedArrayType(*(_DWORD *)(v7 + 72));
      if (v1038 == 12 || !v1038)
      {
        if (v951 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(v1042, v950, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x198375D78);
        }
        goto LABEL_1108;
      }
      if (v951 == 3)
        goto LABEL_1108;
LABEL_928:
      if ((v951 & 0x40000000) != 0)
        goto LABEL_989;
      v952 = *((_QWORD *)v950 + 3) & 0xFF00FFFFFFFFFFFFLL;
      v1290 = 34;
      v1291 = 16423;
      v1292 = v952;
      v1293 = 0u;
      v1294 = 0u;
      JSC::DFG::LazyNode::LazyNode(v1289, v950);
      v123 = v1289[0];
      v124 = v1289[1];
      v126 = *v949;
      v127 = &v1290;
      goto LABEL_153;
    case 0xA1:
      if ((*(_DWORD *)(v7 + 72) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x1983759E4);
      }
      v1001 = v6;
      v1002 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1284 = 3;
      v1285 = 16389;
      v1286 = v1002;
      v1287 = 0u;
      v1288 = 0u;
      JSC::DFG::LazyNode::LazyNode(v1283, (JSC::DFG::Node *)v7);
      v123 = v1283[0];
      v124 = v1283[1];
      v126 = *v1001;
      v127 = &v1284;
      goto LABEL_153;
    case 0xA2:
      v941 = v4;
      v1003 = v6;
      v1004 = v7;
      v1005 = *(_DWORD *)(v7 + 72);
      v1006 = v1005;
      if (v1005 == 25)
        goto LABEL_987;
      v1039 = JSC::DFG::toTypedArrayType(*(_DWORD *)(v7 + 72));
      if (v1039 == 12 || !v1039)
      {
        if (v1006 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(v1042, (JSC::DFG::Node *)v1004, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x198375E78);
        }
        goto LABEL_1108;
      }
      if (v1006 == 3)
        goto LABEL_1108;
      if (*(_WORD *)(v1004 + 18) == 146)
        v1005 = *(_DWORD *)(v1004 + 80);
      else
        v1005 = *(_DWORD *)(v1004 + 72);
LABEL_987:
      if ((v1005 & 0x40000000) == 0)
      {
        v1007 = *(_QWORD *)(v1004 + 24) & 0xFF00FFFFFFFFFFFFLL;
        v1387 = 32;
        v1388 = 16423;
        v1389 = v1007;
        v1390 = 0u;
        v1391 = 0u;
        JSC::DFG::LazyNode::LazyNode(v1386, (JSC::DFG::Node *)v1004);
        v123 = v1386[0];
        v124 = v1386[1];
        v126 = *v1003;
        v127 = &v1387;
        goto LABEL_153;
      }
      goto LABEL_989;
    case 0xA3:
      v941 = v4;
      v942 = v6;
      v943 = v7;
      v944 = *(_DWORD *)(v7 + 72);
      v945 = v944;
      if (v944 == 25)
        goto LABEL_922;
      v1037 = JSC::DFG::toTypedArrayType(*(_DWORD *)(v7 + 72));
      if (v1037 != 12 && v1037)
      {
        if (v945 != 3)
        {
          if (*(_WORD *)(v943 + 18) == 146)
            v944 = *(_DWORD *)(v943 + 80);
          else
            v944 = *(_DWORD *)(v943 + 72);
LABEL_922:
          if ((v944 & 0x40000000) == 0)
          {
            v946 = *(_QWORD *)(v943 + 24) & 0xFF00FFFFFFFFFFFFLL;
            v1381 = 33;
            v1382 = 16423;
            v1383 = v946;
            v1384 = 0u;
            v1385 = 0u;
            JSC::DFG::LazyNode::LazyNode(v1380, (JSC::DFG::Node *)v943);
            v123 = v1380[0];
            v124 = v1380[1];
            v126 = *v942;
            v127 = &v1381;
            goto LABEL_153;
          }
LABEL_989:
          v201 = *v941;
LABEL_990:
          v239 = 16423;
          goto LABEL_363;
        }
      }
      else if (v945 != 3)
      {
        JSC::DFG::Graph::logAssertionFailure(v1042, (JSC::DFG::Node *)v943, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
        __break(0xC471u);
        JUMPOUT(0x198375D14);
      }
LABEL_1108:
      v393 = *v941;
      goto LABEL_438;
    case 0xA4:
      v1375 = 164;
      v983 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1376 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1379 = 0;
      v1377 = v983;
      v1378 = 0;
      v118 = *v6;
      v119 = &v1375;
      goto LABEL_140;
    case 0xAB:
      v171 = ((unint64_t)*(unsigned int *)(v7 + 72) << 15) | 0x15;
      v172 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1278 = 7;
      v1279 = v171;
      v1280 = v172;
      v1281 = 0u;
      v1282 = 0u;
      v126 = *v6;
      v127 = &v1278;
      goto LABEL_151;
    case 0xAC:
      v202 = v6;
      v203 = v7;
      v204 = ((unint64_t)*(unsigned int *)(v203 + 72) << 15) | 0x15;
      v205 = *(_QWORD *)(v203 + 32);
      v206 = *(_QWORD *)(v203 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1273 = 7;
      v1274 = v204;
      v1275 = v206;
      v1276 = 0u;
      v1277 = 0u;
      v123 = v205 & 0xFF00FFFFFFFFFFFFLL;
      if ((v205 & 0xFF00FFFFFFFFFFFFLL) != 0
        && (v233 = *(unsigned __int16 *)((v205 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v233 <= 2))
      {
        v124 = *(_QWORD *)((v205 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        v207 = v202;
        if (!*(_WORD *)((v205 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
LABEL_228:
          v126 = *v207;
          v127 = &v1273;
          goto LABEL_153;
        }
        if ((_DWORD)v233 != 1)
          v233 = 2;
        v124 |= v233;
      }
      else
      {
        v124 = 0;
      }
      v207 = v202;
      goto LABEL_228;
    case 0xAD:
    case 0xAE:
      v458 = (*(_QWORD *)(v7 + 72) << 15) | 0x24;
      v1235 = 10;
      v1237 = 0u;
      v1238 = 0u;
      v1236 = v458;
      v1239 = 0;
      v126 = *v6;
      v127 = &v1235;
      goto LABEL_151;
    case 0xAF:
      v459 = v6;
      v460 = v7;
      v124 = 0;
      v461 = (*(_QWORD *)(v460 + 72) << 15) | 0x24;
      v1230 = 10;
      v1231 = v461;
      v1232 = 0u;
      v1233 = 0u;
      v1234 = 0;
      v462 = *(_QWORD *)(v460 + 32);
      v123 = v462 & 0xFF00FFFFFFFFFFFFLL;
      if ((v462 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v524 = *(unsigned __int16 *)((v462 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v524 <= 2)
        {
          v124 = *(_QWORD *)(v123 + 72);
          if ((_DWORD)v524)
          {
            if ((_DWORD)v524 != 1)
              v524 = 2;
            v124 |= v524;
          }
        }
        else
        {
          v124 = 0;
        }
      }
      v126 = *v459;
      v127 = &v1230;
      goto LABEL_153;
    case 0xB2:
      v792 = *v4;
      v793 = 16422;
      v593 = v4;
LABEL_675:
      v393 = *v593;
      goto LABEL_438;
    case 0xB3:
      v407 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1258 = 29;
      v1259 = 16398;
      v1260 = v407;
      v1261 = 0u;
      v1262 = 0u;
      v126 = *v6;
      v127 = &v1258;
      goto LABEL_151;
    case 0xB4:
      v530 = v6;
      v531 = v7;
      v532 = *(_QWORD *)(v531 + 32);
      v533 = *(_QWORD *)(v531 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1253 = 29;
      v1254 = 16398;
      v1255 = v533;
      v1256 = 0u;
      v1257 = 0u;
      JSC::DFG::LazyNode::LazyNode(v1252, (JSC::DFG::Node *)(v532 & 0xFF00FFFFFFFFFFFFLL));
      v123 = v1252[0];
      v124 = v1252[1];
      v126 = *v530;
      v127 = &v1253;
      goto LABEL_153;
    case 0xB5:
    case 0xDA:
    case 0xDE:
      v201 = *v4;
      v239 = 16408;
      goto LABEL_363;
    case 0xB6:
      v219 = *(_QWORD *)(v7 + 24);
      v220 = *(_QWORD *)(v7 + 72);
      v1647 = 182;
      v1648 = v219 & 0xFFFCFFFFFFFFFFFFLL;
      v1649 = 0;
      v1650 = 0;
      v1651 = v220;
      v1652 = 0;
      v118 = *v6;
      v119 = &v1647;
      goto LABEL_140;
    case 0xB7:
      v240 = *(_QWORD *)(v7 + 24);
      v1643 = 183;
      v1644 = v240 & 0xFFFCFFFFFFFFFFFFLL;
      v1645 = 0u;
      v1646 = 0u;
      v118 = *v6;
      v119 = &v1643;
      goto LABEL_140;
    case 0xB8:
    case 0xBA:
    case 0x101:
    case 0x102:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x176:
    case 0x177:
      goto LABEL_437;
    case 0xBD:
      v557 = *(_QWORD *)(v7 + 24);
      v558 = *(_QWORD *)(v7 + 72);
      v1637 = 189;
      v1638 = v557 & 0xFFFCFFFFFFFFFFFFLL;
      v1639 = 0;
      v1640 = 0;
      v1641 = v558;
      v1642 = 0;
      v118 = *v6;
      v119 = &v1637;
      goto LABEL_140;
    case 0xBE:
      v993 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1446 = 5;
      v1447 = 16395;
      v1448 = v993;
      v1449 = 0u;
      v1450 = 0u;
      v994 = v6;
      JSC::DFG::LazyNode::LazyNode(v1445, (JSC::DFG::Node *)v7);
      v123 = v1445[0];
      v124 = v1445[1];
      v126 = *v994;
      v127 = &v1446;
      goto LABEL_153;
    case 0xBF:
    case 0xC0:
      v917 = *(_QWORD *)(v7 + 72);
      v1413 = *(_WORD *)(v7 + 18);
      v918 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1414 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1415 = v918;
      v1416 = v917;
      v1417 = 0;
      v118 = *v6;
      v119 = &v1413;
      goto LABEL_140;
    case 0xC1:
      v553 = *(_QWORD *)(v7 + 24);
      v554 = (v553 >> 50) & 0x3F;
      if ((_DWORD)v554 != 21 && (_DWORD)v554 != 49 && (_DWORD)v554 != 1)
        goto LABEL_361;
      v555 = *(_QWORD *)(v7 + 32);
      if ((v555 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v555 & 0xFC000000000000) != 0x4000000000000)
        goto LABEL_361;
      v1439 = 193;
      v556 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1440 = v553 & 0xFFFCFFFFFFFFFFFFLL;
      v1441 = v555 & 0xFFFCFFFFFFFFFFFFLL;
      v1444 = 0;
      v1442 = v556;
      v1443 = 0;
      v118 = *v6;
      v119 = &v1439;
      goto LABEL_140;
    case 0xC2:
      v501 = *(_QWORD *)(v7 + 24);
      if (((v501 >> 50) & 0x3F) - 12 > 2)
        goto LABEL_361;
      v502 = v6;
      v1370 = 35;
      v1371 = 16399;
      v1372 = v501 & 0xFF00FFFFFFFFFFFFLL;
      v1373 = 0u;
      v1374 = 0u;
      JSC::DFG::LazyNode::LazyNode(v1369, (JSC::DFG::Node *)v7);
      v123 = v1369[0];
      v124 = v1369[1];
      v126 = *v502;
      v127 = &v1370;
      goto LABEL_153;
    case 0xC4:
      v881 = (*(_QWORD *)(v7 + 24) >> 50) & 0x3FLL;
      if ((_DWORD)v881 == 11)
      {
        v882 = v4;
        v201 = *v882;
        v239 = 16394;
        goto LABEL_363;
      }
      if ((_DWORD)v881)
      {
        __break(0xC471u);
        JUMPOUT(0x1983742A0);
      }
      goto LABEL_361;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      v888 = v8 - 202;
      if (v888 >= 0xA || ((0x3EFu >> v888) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19837574CLL);
      }
      v889 = dword_199155574[(__int16)v888];
      v890 = (_DWORD *)(v7 + 24);
      if ((*(_BYTE *)(v7 + 56) & 0x10) != 0)
      {
        v1026 = v889 + *v890;
        if (*((_DWORD *)v1042 + 41) <= v1026)
        {
          __break(0xC471u);
          JUMPOUT(0x198375DB4);
        }
        v891 = (_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * v1026);
      }
      else
      {
        v891 = &v890[2 * v889];
      }
      v201 = *v4;
      if ((*v891 & 0xFF00FFFFFFFFFFFFLL) != 0)
        goto LABEL_832;
      goto LABEL_362;
    case 0xCE:
      v947 = (_QWORD *)(v7 + 24);
      v948 = (_QWORD *)(v7 + 24);
      if ((*(_BYTE *)(v7 + 56) & 0x10) != 0)
      {
        if (*((_DWORD *)v1042 + 41) <= *v947)
        {
          __break(0xC471u);
          JUMPOUT(0x198375E10);
        }
        v948 = (_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * *v947);
      }
      if ((*v948 & 0xFC000000000000) != 0x4000000000000)
        goto LABEL_361;
      v1740 = 206;
      v1741 = *(_OWORD *)v947;
      v1742 = *(_QWORD *)(v7 + 40);
      v1743 = 0;
      v1744 = v1042;
      v118 = *v6;
      v119 = &v1740;
      goto LABEL_140;
    case 0xD7:
      if (*(unsigned __int8 *)(v7 + 72) - 7 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198372E5CLL);
      }
      return;
    case 0xDD:
      goto LABEL_499;
    case 0xDF:
    case 0xE0:
      if ((*(_QWORD *)(v7 + 24) & 0xFC000000000000) != 0x54000000000000
        || (*(_QWORD *)(v7 + 32) & 0xFC000000000000) != 0x40000000000000
        || (*(_QWORD *)(v7 + 40) & 0xFC000000000000) != 0x54000000000000)
      {
        goto LABEL_361;
      }
LABEL_499:
      v457 = v4;
      v201 = *v457;
      v239 = 16398;
      goto LABEL_363;
    case 0xE1:
      if ((*(_QWORD *)(v7 + 40) & 0xFC000000000000) != 0x54000000000000)
        goto LABEL_361;
      return;
    case 0xE5:
      v1181 = 229;
      v503 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1182 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1185 = 0;
      v1183 = v503;
      v1184 = 0;
      v118 = *v6;
      v119 = &v1181;
      goto LABEL_140;
    case 0xE6:
      v489 = *(_QWORD *)(v7 + 24);
      v490 = (v489 >> 50) & 0x3F;
      if ((v490 - 1) < 2)
      {
        v1668 = 230;
        v1669 = v489 & 0xFFFCFFFFFFFFFFFFLL;
        v1670 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v1672 = 0;
        v1671 = 0;
        v118 = *v6;
        v119 = &v1668;
        goto LABEL_140;
      }
      if ((_DWORD)v490)
      {
        JSC::DFG::Graph::logAssertionFailure(v1042, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198373F2CLL);
      }
      goto LABEL_361;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v143 = *(_QWORD *)(v7 + 24);
      v144 = (v143 >> 50) & 0x3F;
      if ((_DWORD)v144 == 21)
      {
        v145 = *(_QWORD *)(v7 + 32);
        if ((v145 & 0xFC000000000000) == 0x54000000000000)
        {
LABEL_304:
          v201 = *v4;
LABEL_305:
          v239 = 16407;
          goto LABEL_363;
        }
LABEL_174:
        v1170 = *(_WORD *)(v7 + 18);
        v146 = v143 & 0xFFFCFFFFFFFFFFFFLL;
        v147 = v145 & 0xFFFCFFFFFFFFFFFFLL;
        v148 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
        v1171 = v146;
        v1172 = v147;
        v1175 = 0;
        v1173 = v148;
        v1174 = 0;
        v118 = *v6;
        v119 = &v1170;
        goto LABEL_140;
      }
      if ((_DWORD)v144)
      {
        v145 = *(_QWORD *)(v7 + 32);
        goto LABEL_174;
      }
      v145 = *(_QWORD *)(v7 + 32);
      if ((v145 & 0xFC000000000000) != 0)
        goto LABEL_174;
      goto LABEL_361;
    case 0xEB:
    case 0xEC:
      v1176 = *(_WORD *)(v7 + 18);
      v492 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1177 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1180 = 0;
      v1178 = v492;
      v1179 = 0;
      v118 = *v6;
      v119 = &v1176;
      goto LABEL_140;
    case 0xEF:
      v372 = **(_QWORD **)(v7 + 72);
      v1770 = 239;
      v373 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1771 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1772 = v373;
      v1773 = v372;
      v1774 = 0;
      v118 = *v6;
      v119 = &v1770;
      goto LABEL_140;
    case 0x106:
      v241 = v6;
      v242 = v7;
      v249 = *(_QWORD *)(v242 + 32);
      v250 = v249;
      v1220 = 1;
      v1221 = 16388;
      v1222 = v242;
      v1223 = 0u;
      v1224 = 0u;
      if ((v249 & 0x80000000) != 0)
        v251 = COERCE__INT64((double)v249) + 0x2000000000000;
      else
        v251 = v249 | 0xFFFE000000000000;
      v252 = JSC::DFG::Graph::freeze((uint64_t)v1042, v251, v243, v244, v245, v246, v247, v248);
      if (!(_DWORD)v249)
        return;
      v259 = *(unsigned __int16 *)(v242 + 18);
      switch(v259)
      {
        case 267:
          goto LABEL_672;
        case 264:
          v260 = *(_DWORD *)(v242 + 76);
          break;
        case 352:
LABEL_672:
          v260 = *(_DWORD *)(v242 + 84);
          break;
        default:
          v260 = *(_DWORD *)(v242 + 72);
          goto LABEL_318;
      }
      LOBYTE(v260) = v260 & 0xF;
LABEL_318:
      v261 = v260 - 4;
      if (v261 <= 0x15u && ((0x2A003Fu >> v261) & 1) != 0)
      {
        v262 = qword_1991555A0[(char)v261];
        v263 = dword_199155650[(char)v261];
        v264 = *((unsigned int *)v1042 + 107);
        if (v249 >= v264)
        {
          if ((_DWORD)v264)
          {
            v834 = (unsigned int *)*((_QWORD *)v1042 + 52);
            v835 = 4 * v264;
            do
            {
              v836 = *v834;
              if (v836 < v249)
              {
                v837 = v836 + *(_DWORD *)(v242 + 24);
                if (*((_DWORD *)v1042 + 41) <= v837)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198375C88);
                }
                v838 = *(_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * v837);
                if ((int)v836 < 0)
                  v839 = COERCE__INT64((double)v836) + 0x2000000000000;
                else
                  v839 = v836 | 0xFFFE000000000000;
                v840 = JSC::DFG::Graph::freeze((uint64_t)v1042, v839, v253, v254, v255, v256, v257, v258);
                v841 = 0;
                v1206 = v263;
                v1207 = v262;
                v1208 = v242;
                v1209 = 0;
                v1210 = v840;
                v1211 = 0;
                v1212 = 0;
                if ((v838 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v842 = *(unsigned __int16 *)((v838 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if (v842 <= 2)
                  {
                    v841 = *(_QWORD *)((v838 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                    if (*(_WORD *)((v838 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
                    {
                      if ((_DWORD)v842 != 1)
                        v842 = 2;
                      v841 |= v842;
                    }
                  }
                  else
                  {
                    v841 = 0;
                  }
                }
              }
              ++v834;
              v835 -= 4;
            }
            while (v835);
          }
        }
        else
        {
          v265 = 0;
          v266 = v242;
          do
          {
            v267 = v265 + *(_QWORD *)(v266 + 24);
            if (*((_DWORD *)v1042 + 41) <= v267)
            {
              __break(0xC471u);
              JUMPOUT(0x198375C40);
            }
            v268 = *(_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * v267);
            if ((int)v265 < 0)
              v269 = COERCE__INT64((double)v265) + 0x2000000000000;
            else
              v269 = v265 | 0xFFFE000000000000;
            v270 = JSC::DFG::Graph::freeze((uint64_t)v1042, v269, v253, v254, v255, v256, v257, v258);
            v271 = 0;
            v1213 = v263;
            v1214 = v262;
            v1215 = v266;
            v1216 = 0;
            v1217 = v270;
            v1218 = 0;
            v1219 = 0;
            if ((v268 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v272 = *(unsigned __int16 *)((v268 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v272 <= 2)
              {
                v271 = *(_QWORD *)((v268 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                if (*(_WORD *)((v268 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
                {
                  if ((_DWORD)v272 != 1)
                    v272 = 2;
                  v271 |= v272;
                }
              }
              else
              {
                v271 = 0;
              }
            }
            ++v265;
            v266 = v242;
          }
          while (v250 != v265);
        }
      }
      return;
    case 0x107:
      if (*(_DWORD *)(v7 + 32))
      {
        v995 = *(_QWORD *)(v7 + 24);
        v996 = *((_DWORD *)v1042 + 41);
        v71 = v996 >= v995;
        LODWORD(v997) = v996 - v995;
        if (v71)
          v997 = v997;
        else
          v997 = 0;
        v998 = *(unsigned int *)(v7 + 32) - 1;
        do
        {
          if (!v997)
          {
            __break(0xC471u);
            JUMPOUT(0x198375C90);
          }
          v999 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * v995++) & 0xFF00FFFFFFFFFFFFLL)
                                     + 0x12);
          v1000 = v999 == 350 || v998-- == 0;
          --v997;
        }
        while (!v1000);
      }
      goto LABEL_304;
    case 0x10A:
      v543 = v6;
      v544 = v7;
      v1225 = 1;
      v1226 = 16388;
      v1227 = v544;
      v1228 = 0u;
      v1229 = 0u;
      v551 = *(unsigned int *)(v544 + 80);
      if ((v551 & 0x80000000) != 0)
        v552 = COERCE__INT64((double)v551) + 0x2000000000000;
      else
        v552 = v551 | 0xFFFE000000000000;
      v124 = (unint64_t)JSC::DFG::Graph::freeze((uint64_t)v1042, v552, v545, v546, v547, v548, v549, v550);
      v126 = *v543;
      v127 = &v1225;
      v123 = 0;
      goto LABEL_153;
    case 0x10B:
      v1041 = v6;
      v415 = v7;
      v422 = **(_QWORD **)(v415 + 72);
      v423 = *(unsigned int *)(v422 + 8);
      v1201 = 1;
      v1202 = 16388;
      v424 = v415;
      v1203 = v415;
      v1204 = 0u;
      v1205 = 0u;
      if ((v423 & 0x80000000) != 0)
        v425 = COERCE__INT64((double)v423) + 0x2000000000000;
      else
        v425 = v423 | 0xFFFE000000000000;
      v426 = JSC::DFG::Graph::freeze((uint64_t)v1042, v425, v416, v417, v418, v419, v420, v421);
      v434 = *(unsigned __int16 *)(v415 + 18);
      switch(v434)
      {
        case 267:
          goto LABEL_805;
        case 264:
          v435 = *(_DWORD *)(v415 + 76);
          break;
        case 352:
LABEL_805:
          v435 = *(_DWORD *)(v415 + 84);
          break;
        default:
          v435 = *(_DWORD *)(v415 + 72);
          goto LABEL_473;
      }
      LOBYTE(v435) = v435 & 0xF;
LABEL_473:
      if (v435 - 4 < 2)
        goto LABEL_474;
      if (v435 > 0x19u)
        return;
      if (((1 << v435) & 0x8000C0) != 0)
      {
        v436 = 0;
        v1040 = 13;
        v437 = 16401;
      }
      else if (((1 << v435) & 0x2000300) != 0)
      {
        v1040 = 21;
        v436 = 1;
        v437 = 16402;
      }
      else
      {
        if (v435 != 21)
          return;
LABEL_474:
        v1040 = 21;
        v436 = 1;
        v437 = 16400;
      }
      v438 = *((unsigned int *)v1042 + 107);
      if (v438 <= v423)
      {
        v1193[1] = 0;
        v1193[0] = 0;
        if ((_DWORD)v438)
        {
          v796 = (unsigned int *)*((_QWORD *)v1042 + 52);
          v797 = 4 * v438;
          do
          {
            v798 = *v796;
            LODWORD(v1043) = v798;
            if (v798 < v423)
            {
              if (HIDWORD(v1193[1]) == LODWORD(v1193[1]))
              {
                WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v1193, (unint64_t)&v1043);
              }
              else
              {
                *((_DWORD *)v1193[0] + HIDWORD(v1193[1])) = v798;
                ++HIDWORD(v1193[1]);
              }
            }
            ++v796;
            v797 -= 4;
          }
          while (v797);
          v812 = v1193[0];
          if (HIDWORD(v1193[1]))
          {
            v813 = v422 + 16;
            v814 = 4 * HIDWORD(v1193[1]);
            do
            {
              v815 = *(unsigned int *)v812;
              if ((v815 & 0x80000000) != 0)
                v816 = COERCE__INT64((double)v815) + 0x2000000000000;
              else
                v816 = v815 | 0xFFFE000000000000;
              v817 = JSC::DFG::Graph::freeze((uint64_t)v1042, v816, v428, v429, v430, v431, v432, v433);
              v1186 = v1040;
              v1187 = v437;
              v1188 = v424;
              v1189 = 0;
              v1190 = v817;
              v1191 = 0;
              v1192 = 0;
              if ((*(_BYTE *)(v422 + 4) & 0xE) == 6)
                v824 = *(_QWORD *)(v813 + 8 * v815) + 0x2000000000000;
              else
                v824 = *(_QWORD *)(v813 + 8 * v815);
              v825 = (unint64_t)JSC::DFG::Graph::freeze((uint64_t)v1042, v824, v818, v819, v820, v821, v822, v823);
              v826 = v825;
              if ((v436 & 1) == 0)
                v826 = v825 | 1;
              v812 = (WTF *)((char *)v812 + 4);
              v814 -= 4;
            }
            while (v814);
            v812 = v1193[0];
          }
          if (v812)
          {
            v1193[0] = 0;
            LODWORD(v1193[1]) = 0;
            WTF::fastFree((unint64_t)v812, v427, v428, v429, v430, v431, v432, v433);
          }
        }
      }
      else if ((_DWORD)v423)
      {
        v439 = 0;
        v440 = v422 + 16;
        do
        {
          if ((v439 & 0x80000000) != 0)
            v441 = COERCE__INT64((double)v439) + 0x2000000000000;
          else
            v441 = v439 | 0xFFFE000000000000;
          v442 = JSC::DFG::Graph::freeze((uint64_t)v1042, v441, v428, v429, v430, v431, v432, v433);
          v1194 = v1040;
          v1195 = v437;
          v1196 = v415;
          v1197 = 0;
          v1198 = v442;
          v1199 = 0;
          v1200 = 0;
          if ((*(_BYTE *)(v422 + 4) & 0xE) == 6)
            v449 = *(_QWORD *)(v440 + 8 * v439) + 0x2000000000000;
          else
            v449 = *(_QWORD *)(v440 + 8 * v439);
          v450 = (unint64_t)JSC::DFG::Graph::freeze((uint64_t)v1042, v449, v443, v444, v445, v446, v447, v448);
          v451 = v450;
          if ((v436 & 1) == 0)
            v451 = v450 | 1;
          ++v439;
        }
        while (v423 != v439);
      }
      return;
    case 0x10D:
      v481 = (*(_QWORD *)(v7 + 24) >> 50) & 0x3FLL;
      if (!(_DWORD)v481)
        goto LABEL_361;
      if ((_DWORD)v481 != 1 && (_DWORD)v481 != 52)
      {
        JSC::DFG::Graph::logAssertionFailure(v1042, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198372804);
      }
      goto LABEL_304;
    case 0x10F:
      v991 = *(_QWORD *)(v7 + 24);
      v201 = *v4;
      if ((v991 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v991 & 0xFC000000000000) == 0x54000000000000)
        goto LABEL_305;
      goto LABEL_362;
    case 0x114:
      v810 = v4;
      isWatchingHavingABadTimeWatchpoint = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(v1042, (JSC::DFG::Node *)v7, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)&v1537, v7, (uint64_t)&v1333);
      v201 = *v810;
      if ((isWatchingHavingABadTimeWatchpoint & 1) == 0)
        goto LABEL_362;
      goto LABEL_305;
    case 0x115:
      v846 = *(unsigned __int16 *)((*(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v846 == 352)
        return;
      if (v846 == 349)
        goto LABEL_304;
      goto LABEL_361;
    case 0x123:
      v984 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1429 = 6;
      v1430 = 16395;
      v1431 = v984;
      v1432 = 0u;
      v1433 = 0u;
      v985 = v6;
      JSC::DFG::LazyNode::LazyNode(v1428, (JSC::DFG::Node *)v7);
      v123 = v1428[0];
      v124 = v1428[1];
      v126 = *v985;
      v127 = &v1429;
      goto LABEL_153;
    case 0x127:
      v235 = *(unsigned __int8 *)(v7 + 72);
      v1710 = 295;
      v236 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1711 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1712 = v236;
      v1713 = v235;
      v1714 = 0;
      v118 = *v6;
      v119 = &v1710;
      goto LABEL_140;
    case 0x12B:
      v276 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1622 = 26;
      v1623 = 16423;
      v1624 = v276;
      v1625 = 0u;
      v1626 = 0u;
      v126 = *v6;
      v127 = &v1622;
      goto LABEL_151;
    case 0x12C:
      v454 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1617 = 27;
      v1618 = 16423;
      v1619 = v454;
      v1620 = 0u;
      v1621 = 0u;
      v126 = *v6;
      v127 = &v1617;
      goto LABEL_151;
    case 0x131:
      v525 = *(_QWORD *)(v7 + 24);
      if ((v525 & 0xFC000000000000) != 0xC4000000000000)
        goto LABEL_361;
      v1755 = 305;
      v1757 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1759 = 0;
      v1756 = v525 & 0xFFFCFFFFFFFFFFFFLL;
      v1758 = 0;
      v118 = *v6;
      v119 = &v1755;
      goto LABEL_140;
    case 0x132:
      v1760 = 306;
      v795 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1761 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1764 = 0;
      v1762 = v795;
      v1763 = 0;
      v118 = *v6;
      v119 = &v1760;
      goto LABEL_140;
    case 0x135:
      v491 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1612 = 24;
      v1613 = 16423;
      v1614 = v491;
      v1615 = 0u;
      v1616 = 0u;
      v126 = *v6;
      v127 = &v1612;
      goto LABEL_151;
    case 0x136:
      v953 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1607 = 25;
      v1608 = 16423;
      v1609 = v953;
      v1610 = 0u;
      v1611 = 0u;
      v954 = v6;
      JSC::DFG::LazyNode::LazyNode(v1606, (JSC::DFG::Node *)v7);
      v123 = v1606[0];
      v124 = v1606[1];
      v126 = *v954;
      v127 = &v1607;
      goto LABEL_153;
    case 0x13E:
    case 0x145:
      v287 = *(_QWORD *)(v7 + 24);
      v288 = (v287 >> 50) & 0x3F;
      if (v288 > 0x34)
        goto LABEL_1015;
      if (((1 << v288) & 0x12026000400002) != 0)
      {
        v1165 = *(_WORD *)(v7 + 18);
        v1166 = v287 & 0xFFFCFFFFFFFFFFFFLL;
        v1167 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
        v1169 = 0;
        v1168 = 0;
        v118 = *v6;
        v119 = &v1165;
        goto LABEL_140;
      }
      if (((1 << v288) & 0x101) != 0)
        goto LABEL_361;
      if (v288 != 24)
      {
LABEL_1015:
        __break(0xC471u);
        JUMPOUT(0x198374F28);
      }
LABEL_437:
      v393 = *v4;
LABEL_438:
      JSC::DFG::ClobberSet::add((uint64_t *)(v393 + 144), 16424, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)v9, v7, (uint64_t)v10);
      return;
    case 0x13F:
      v892 = *(_QWORD *)(v7 + 24);
      if ((v892 & 0xFC000000000000) != 0x54000000000000)
        goto LABEL_361;
      v1601 = 319;
      v1603 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1605 = 0;
      v1602 = v892 & 0xFFFCFFFFFFFFFFFFLL;
      v1604 = 0;
      v118 = *v6;
      v119 = &v1601;
      goto LABEL_140;
    case 0x142:
    case 0x143:
      v456 = *(_QWORD *)(v7 + 24);
      if ((v456 & 0xFC000000000000) == 0)
        goto LABEL_361;
      v1434 = *(_WORD *)(v7 + 18);
      v1436 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1438 = 0;
      v1435 = v456 & 0xFFFCFFFFFFFFFFFFLL;
      v1437 = 0;
      v118 = *v6;
      v119 = &v1434;
      goto LABEL_140;
    case 0x146:
      v956 = *(_QWORD *)(v7 + 24);
      v957 = (v956 >> 50) & 0x3F;
      if (!(_DWORD)v957)
        goto LABEL_361;
      if ((_DWORD)v957 != 28)
      {
        JSC::DFG::Graph::logAssertionFailure(v1042, (JSC::DFG::Node *)v7, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198375A48);
      }
      v1596 = 326;
      v1598 = vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1600 = 0;
      v1597 = v956 & 0xFFFCFFFFFFFFFFFFLL;
      v1599 = 0;
      v118 = *v6;
      v119 = &v1596;
      goto LABEL_140;
    case 0x148:
      v886 = *(int *)(v7 + 72);
      v1052 = 328;
      v887 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1053 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1054 = v887;
      v1055 = v886;
      v1056 = 0;
      v118 = *v6;
      v119 = &v1052;
      goto LABEL_140;
    case 0x149:
      v1160 = 329;
      v992 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1161 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1164 = 0;
      v1162 = v992;
      v1163 = 0;
      v118 = *v6;
      v119 = &v1160;
      goto LABEL_140;
    case 0x157:
      v305 = ((unint64_t)*(unsigned int *)(v7 + 72) << 15) | 0x21;
      v306 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1268 = 56;
      v1269 = v305;
      v1270 = v306;
      v1271 = 0u;
      v1272 = 0u;
      v126 = *v6;
      v127 = &v1268;
      goto LABEL_151;
    case 0x158:
      v291 = v6;
      v292 = ((unint64_t)*(unsigned int *)(v7 + 72) << 15) | 0x21;
      v293 = v7;
      v294 = *(_QWORD *)(v293 + 32);
      v295 = *(_QWORD *)(v293 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1263 = 56;
      v1264 = v292;
      v1265 = v295;
      v1266 = 0u;
      v1267 = 0u;
      v123 = v294 & 0xFF00FFFFFFFFFFFFLL;
      if ((v294 & 0xFF00FFFFFFFFFFFFLL) != 0
        && (v394 = *(unsigned __int16 *)((v294 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v394 <= 2))
      {
        v124 = *(_QWORD *)((v294 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        v296 = v291;
        if (!(_DWORD)v394)
        {
LABEL_369:
          v126 = *v296;
          v127 = &v1263;
          goto LABEL_153;
        }
        if ((_DWORD)v394 != 1)
          v394 = 2;
        v124 |= v394;
      }
      else
      {
        v124 = 0;
      }
      v296 = v291;
      goto LABEL_369;
    case 0x159:
      v237 = *(_QWORD *)(**(_QWORD **)(v7 + 72) + 40);
      if ((v237 & 1) == 0)
        goto LABEL_381;
      goto LABEL_301;
    case 0x164:
      v901 = ((unint64_t)*(unsigned int *)(v7 + 72) << 15) | 0x14;
      v902 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1247 = 8;
      v1248 = v901;
      v1249 = v902;
      v1250 = 0u;
      v1251 = 0u;
      v903 = v6;
      JSC::DFG::LazyNode::LazyNode(v1246, (JSC::DFG::Node *)v7);
      v123 = v1246[0];
      v124 = v1246[1];
      v126 = *v903;
      v127 = &v1247;
      goto LABEL_153;
    case 0x165:
      v986 = ((unint64_t)*(unsigned int *)(v7 + 72) << 15) | 0x14;
      v987 = v6;
      v988 = v7;
      v989 = *(_QWORD *)(v988 + 32);
      v990 = *(_QWORD *)(v988 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1241 = 8;
      v1242 = v986;
      v1243 = v990;
      v1244 = 0u;
      v1245 = 0u;
      JSC::DFG::LazyNode::LazyNode(v1240, (JSC::DFG::Node *)(v989 & 0xFF00FFFFFFFFFFFFLL));
      v123 = v1240[0];
      v124 = v1240[1];
      v126 = *v987;
      v127 = &v1241;
      goto LABEL_153;
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
      v237 = *(_QWORD *)(**(_QWORD **)(v7 + 72) + 112);
      if ((v237 & 1) != 0)
LABEL_301:
        v238 = (v237 >> 1) & 3;
      else
LABEL_381:
        v238 = *(unsigned __int8 *)(v237 + 4);
      if (v238 != 2)
      {
        v487 = v4;
        v4 = v487;
      }
      goto LABEL_304;
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17D:
      v201 = *v4;
      v239 = 16418;
      goto LABEL_363;
    case 0x17E:
    case 0x17F:
      v201 = *v4;
      v239 = 16392;
      goto LABEL_363;
    case 0x180:
    case 0x182:
      v390 = v6;
      if ((_DWORD)v8 == 386)
      {
        v391 = *(unsigned __int8 *)(v7 + 80);
        if (v391 == 2)
        {
          if (*((_DWORD *)v1042 + 41) <= *(_QWORD *)(v7 + 24))
          {
            __break(0xC471u);
            JUMPOUT(0x198375C58);
          }
          v392 = v4;
          if ((*(_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * *(_QWORD *)(v7 + 24)) & 0xFC000000000000) == 0x20000000000000)
            return;
LABEL_812:
          v201 = *v392;
          goto LABEL_362;
        }
        v510 = v391 == 1;
        v392 = v4;
        if (!v510)
          goto LABEL_812;
        v470 = 11;
      }
      else
      {
        v470 = 12;
      }
      v471 = BYTE2(*(_DWORD *)(v7 + 72));
      if (*(_DWORD *)(v7 + 72) != 9)
      {
        switch(*(_DWORD *)(v7 + 72))
        {
          case 3u:
            goto LABEL_437;
          case 7u:
            if (v471 > 1)
              goto LABEL_361;
            v1023 = *(_QWORD *)(v7 + 24);
            v1024 = *((_DWORD *)v1042 + 41);
            if (v1024 <= v1023)
            {
              __break(0xC471u);
              JUMPOUT(0x198375DBCLL);
            }
            if (v1024 <= (int)v1023 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198375DC4);
            }
            v1025 = (JSC::DFG::Node *)v7;
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1683, v470, 16400, *(_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * *(_QWORD *)(v7 + 24)), *(_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * (*(_QWORD *)(v7 + 24) + 1)), 0);
            JSC::DFG::LazyNode::LazyNode(v1682, v1025);
            v123 = v1682[0];
            v124 = v1682[1];
            v126 = *v390;
            v127 = (int *)v1683;
            goto LABEL_153;
          case 8u:
            if (v471 > 1)
              goto LABEL_361;
            v893 = *(_QWORD *)(v7 + 24);
            v894 = *((_DWORD *)v1042 + 41);
            if (v894 <= v893)
            {
              __break(0xC471u);
              JUMPOUT(0x198375C98);
            }
            if (v894 <= (int)v893 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198375CA0);
            }
            v895 = (JSC::DFG::Node *)v7;
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1681, v470, 16401, *(_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * *(_QWORD *)(v7 + 24)), *(_QWORD *)(*((_QWORD *)v1042 + 19) + 8 * (*(_QWORD *)(v7 + 24) + 1)), 0);
            JSC::DFG::LazyNode::LazyNode(v1680, v895);
            v123 = v1680[0];
            v124 = v1680[1];
            v126 = *v390;
            v127 = (int *)v1681;
            goto LABEL_153;
          case 0xAu:
            if (v471 >= 2)
              goto LABEL_361;
            return;
          default:
            goto LABEL_361;
        }
      }
      if (v471 <= 1)
      {
        v472 = *(_QWORD *)(v7 + 24);
        v473 = *((_DWORD *)v1042 + 41);
        if (v473 <= v472)
        {
          __break(0xC471u);
          JUMPOUT(0x198375C60);
        }
        v474 = v472 + 1;
        if (v473 <= (int)v472 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198375C68);
        }
        v123 = v7;
        v475 = *((_QWORD *)v1042 + 19);
        v476 = *(_QWORD *)(v475 + 8 * *(_QWORD *)(v7 + 24));
        v477 = *(_QWORD *)(v475 + 8 * v474) & 0xFF00FFFFFFFFFFFFLL;
        if (v477
          && (v576 = *(unsigned __int16 *)((*(_QWORD *)(v475 + 8 * v474) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
              v576 <= 2))
        {
          v478 = *(_QWORD *)(v477 + 72);
          if ((_DWORD)v576)
          {
            if ((_DWORD)v576 != 1)
              v576 = 2;
            v478 |= v576;
          }
        }
        else
        {
          v478 = 0;
        }
        v1673 = v470;
        v1674 = 16402;
        v1675 = v476 & 0xFF00FFFFFFFFFFFFLL;
        v1676 = v477;
        v1677 = v478;
        v1679 = 0;
        v1678 = 0;
        v126 = *v6;
        v127 = &v1673;
LABEL_152:
        v124 = 0;
LABEL_153:
        return;
      }
LABEL_361:
      v201 = *v4;
LABEL_362:
      v239 = 16387;
LABEL_363:
      return;
    case 0x183:
      v452 = *(unsigned __int8 *)(v7 + 80);
      v1689 = 387;
      v453 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1690 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1691 = v453;
      v1692 = v452;
      v1693 = 0;
      v118 = *v6;
      v119 = &v1689;
      goto LABEL_140;
    case 0x188:
      v1155 = 392;
      v275 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1156 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1159 = 0;
      v1157 = v275;
      v1158 = 0;
      v118 = *v6;
      v119 = &v1155;
      goto LABEL_140;
    case 0x189:
      v1150 = 393;
      v374 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1151 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1154 = 0;
      v1152 = v374;
      v1153 = 0;
      v118 = *v6;
      v119 = &v1150;
      goto LABEL_140;
    case 0x18A:
      v307 = *(_QWORD *)(v7 + 24);
      v308 = 16411;
      if ((v307 & 0xFC000000000000) != 0x78000000000000)
        v308 = 16412;
      v309 = *(_QWORD *)(v7 + 40);
      v310 = *(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (v310
        && (v455 = *(unsigned __int16 *)((*(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12), v455 <= 2))
      {
        v311 = *(_QWORD *)((*(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((*(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v455 != 1)
            v455 = 2;
          v311 |= v455;
        }
      }
      else
      {
        v311 = 0;
      }
      v1143 = 52;
      v1144 = v308;
      v1145 = v307 & 0xFF00FFFFFFFFFFFFLL;
      v1146 = v310;
      v1147 = v311;
      v1148 = v309 & 0xFF00FFFFFFFFFFFFLL;
      v1149 = 0;
      v126 = *v6;
      v127 = &v1143;
      goto LABEL_151;
    case 0x18B:
      v387 = *(_QWORD *)(v7 + 24);
      v388 = *(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (v388)
      {
        v469 = *(unsigned __int16 *)((*(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v469 <= 2)
        {
          v389 = *(_QWORD *)((*(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          if (*(_WORD *)((*(_QWORD *)(v7 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
          {
            if ((_DWORD)v469 != 1)
              v469 = 2;
            v389 |= v469;
          }
        }
        else
        {
          v389 = 0;
        }
      }
      else
      {
        v389 = 0;
      }
      v1136 = 54;
      v1137 = 16411;
      v1138 = v387 & 0xFF00FFFFFFFFFFFFLL;
      v1139 = v388;
      v1140 = v389;
      v1142 = 0;
      v1141 = 0;
      v126 = *v6;
      v127 = &v1136;
      goto LABEL_151;
    case 0x18C:
      if ((*(_QWORD *)(v7 + 24) & 0xFC000000000000) == 0x80000000000000)
        v830 = 16413;
      else
        v830 = 16414;
      v831 = v6;
      v832 = (JSC::DFG::Node *)v7;
      v833 = *((_QWORD *)v832 + 3) & 0xFF00FFFFFFFFFFFFLL;
      v1131 = 44;
      v1132 = v830;
      v1133 = v833;
      v1134 = 0u;
      v1135 = 0u;
      JSC::DFG::LazyNode::LazyNode(v1130, v832);
      v123 = v1130[0];
      v124 = v1130[1];
      v126 = *v831;
      v127 = &v1131;
      goto LABEL_153;
    case 0x18D:
      v827 = *(_QWORD *)(v7 + 24);
      v828 = 16413;
      if ((v827 & 0xFC000000000000) != 0x80000000000000)
        v828 = 16414;
      v1125 = 45;
      v1126 = v828;
      v1127 = v827 & 0xFF00FFFFFFFFFFFFLL;
      v1128 = 0u;
      v1129 = 0u;
      v829 = v6;
      JSC::DFG::LazyNode::LazyNode(v1124, (JSC::DFG::Node *)v7);
      v123 = v1124[0];
      v124 = v1124[1];
      v126 = *v829;
      v127 = &v1125;
      goto LABEL_153;
    case 0x18E:
      v878 = *(_QWORD *)(v7 + 24);
      v879 = 16413;
      if ((v878 & 0xFC000000000000) != 0x80000000000000)
        v879 = 16414;
      v1119 = 46;
      v1120 = v879;
      v1121 = v878 & 0xFF00FFFFFFFFFFFFLL;
      v1122 = 0u;
      v1123 = 0u;
      v880 = v6;
      JSC::DFG::LazyNode::LazyNode(v1118, (JSC::DFG::Node *)v7);
      v123 = v1118[0];
      v124 = v1118[1];
      v126 = *v880;
      v127 = &v1119;
      goto LABEL_153;
    case 0x18F:
      v843 = *(_QWORD *)(v7 + 24);
      v844 = 16411;
      if ((v843 & 0xFC000000000000) != 0x78000000000000)
        v844 = 16412;
      v1113 = 47;
      v1114 = v844;
      v1115 = v843 & 0xFF00FFFFFFFFFFFFLL;
      v1116 = 0u;
      v1117 = 0u;
      v845 = v6;
      JSC::DFG::LazyNode::LazyNode(v1112, (JSC::DFG::Node *)v7);
      v123 = v1112[0];
      v124 = v1112[1];
      v126 = *v845;
      v127 = &v1113;
      goto LABEL_153;
    case 0x190:
      if (*(_DWORD *)(v7 + 72))
        v958 = 16412;
      else
        v958 = 16411;
      v959 = v6;
      v960 = (uint64_t *)v7;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1111, 48, v958, v960[3], v960[4], 0);
      JSC::DFG::LazyNode::LazyNode(v1110, (JSC::DFG::Node *)v960);
      v123 = v1110[0];
      v124 = v1110[1];
      v126 = *v959;
      v127 = (int *)v1111;
      goto LABEL_153;
    case 0x191:
      v970 = 16411;
      if (*(_DWORD *)(v7 + 72))
        v970 = 16412;
      v971 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1105 = 49;
      v1106 = v970;
      v1107 = v971;
      v1108 = 0u;
      v1109 = 0u;
      v972 = v6;
      JSC::DFG::LazyNode::LazyNode(v1104, (JSC::DFG::Node *)v7);
      v123 = v1104[0];
      v124 = v1104[1];
      v126 = *v972;
      v127 = &v1105;
      goto LABEL_153;
    case 0x192:
      v976 = 16411;
      if (*(_DWORD *)(v7 + 72))
        v976 = 16412;
      v977 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1099 = 50;
      v1100 = v976;
      v1101 = v977;
      v1102 = 0u;
      v1103 = 0u;
      v978 = v6;
      JSC::DFG::LazyNode::LazyNode(v1098, (JSC::DFG::Node *)v7);
      v123 = v1098[0];
      v124 = v1098[1];
      v126 = *v978;
      v127 = &v1099;
      goto LABEL_153;
    case 0x193:
      v973 = 16411;
      if (*(_DWORD *)(v7 + 72))
        v973 = 16412;
      v974 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1093 = 51;
      v1094 = v973;
      v1095 = v974;
      v1096 = 0u;
      v1097 = 0u;
      v975 = v6;
      JSC::DFG::LazyNode::LazyNode(v1092, (JSC::DFG::Node *)v7);
      v123 = v1092[0];
      v124 = v1092[1];
      v126 = *v975;
      v127 = &v1093;
      goto LABEL_153;
    case 0x194:
      v495 = v6;
      v496 = v7;
      v497 = *(_QWORD *)(v496 + 24);
      v123 = v496;
      v498 = *(_QWORD *)(v496 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (v498
        && (v794 = *(unsigned __int16 *)((*(_QWORD *)(v496 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12), v794 <= 2))
      {
        v499 = *(_QWORD *)((*(_QWORD *)(v496 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((*(_QWORD *)(v496 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v794 != 1)
            v794 = 2;
          v499 |= v794;
        }
      }
      else
      {
        v499 = 0;
      }
      v124 = 0;
      v1083 = 53;
      v1084 = 16412;
      v1085 = v497 & 0xFF00FFFFFFFFFFFFLL;
      v1086 = v498;
      v1087 = v499;
      v1089 = 0;
      v1088 = 0;
      v500 = *(unsigned __int16 *)(v496 + 18);
      if (v500 <= 2)
      {
        v124 = *(_QWORD *)(v496 + 72);
        if (*(_WORD *)(v496 + 18))
        {
          if ((_DWORD)v500 != 1)
            v500 = 2;
          v124 |= v500;
        }
      }
      v126 = *v495;
      v127 = &v1083;
      goto LABEL_153;
    case 0x195:
      v395 = *(_QWORD *)(v7 + 24);
      v396 = *((_DWORD *)v1042 + 41);
      if (v396 <= v395)
      {
        __break(0xC471u);
        JUMPOUT(0x198375C48);
      }
      v397 = v395 + 1;
      if (v396 <= (int)v395 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198375C50);
      }
      v398 = v6;
      v399 = v7;
      v400 = *(_QWORD *)(v7 + 24);
      v401 = *((_QWORD *)v1042 + 19);
      v402 = *(_QWORD *)(v401 + 8 * v400);
      v403 = *(_QWORD *)(v401 + 8 * v397) & 0xFF00FFFFFFFFFFFFLL;
      if (v403
        && (v488 = *(unsigned __int16 *)((*(_QWORD *)(v401 + 8 * v397) & 0xFF00FFFFFFFFFFFFLL) + 0x12),
            v488 <= 2))
      {
        v404 = *(_QWORD *)((*(_QWORD *)(v401 + 8 * v397) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_WORD *)((*(_QWORD *)(v401 + 8 * v397) & 0xFF00FFFFFFFFFFFFLL) + 0x12))
        {
          if ((_DWORD)v488 != 1)
            v488 = 2;
          v404 |= v488;
        }
      }
      else
      {
        v404 = 0;
      }
      v124 = 0;
      v1076 = 53;
      v1077 = 16411;
      v1078 = v402 & 0xFF00FFFFFFFFFFFFLL;
      v1079 = v403;
      v1080 = v404;
      v1082 = 0;
      v1081 = 0;
      v123 = v399;
      v405 = *(unsigned __int16 *)(v399 + 18);
      if (v405 <= 2)
      {
        v124 = *(_QWORD *)(v399 + 72);
        if (*(_WORD *)(v399 + 18))
        {
          if ((_DWORD)v405 != 1)
            v405 = 2;
          v124 |= v405;
          v123 = v399;
        }
      }
      v126 = *v398;
      v127 = &v1076;
      goto LABEL_153;
    case 0x196:
      if ((*(_QWORD *)(v7 + 24) & 0xFC000000000000) == 0x78000000000000)
        v239 = 16411;
      else
        v239 = 16412;
      goto LABEL_855;
    case 0x197:
      v539 = v6;
      v540 = *(_QWORD *)(v7 + 24);
      if ((v540 & 0xFC000000000000) == 0x88000000000000)
        v541 = 16415;
      else
        v541 = 16416;
      v542 = (JSC::DFG::Node *)v7;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1091, 55, v541, v540, *(_QWORD *)(v7 + 32), 0);
      JSC::DFG::LazyNode::LazyNode(v1090, v542);
      v123 = v1090[0];
      v124 = v1090[1];
      v126 = *v539;
      v127 = (int *)v1091;
      goto LABEL_153;
    case 0x198:
      v979 = v4;
      v980 = v6;
      v981 = v7;
      if ((*(_QWORD *)(v7 + 32) & 0xFC000000000000) != 0x2C000000000000)
        JSC::DFG::ClobberSet::add((uint64_t *)(*v4 + 144), 16424, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)&v1537, v7, (uint64_t)&v1333);
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1075, 55, 16416, *(_QWORD *)(v981 + 24), *(_QWORD *)(v981 + 32), 0);
      JSC::DFG::LazyNode::LazyNode(v1074, (JSC::DFG::Node *)(*(_QWORD *)(v981 + 32) & 0xFF00FFFFFFFFFFFFLL));
      v123 = v1074[0];
      v124 = v1074[1];
      v126 = *v980;
      v127 = (int *)v1075;
      goto LABEL_153;
    case 0x199:
      v516 = *(_QWORD *)(v7 + 24);
      v517 = *((_DWORD *)v1042 + 41);
      if (v517 <= v516)
      {
        __break(0xC471u);
        JUMPOUT(0x198375C70);
      }
      v518 = (v516 + 1);
      if (v517 <= v518)
      {
        __break(0xC471u);
        JUMPOUT(0x198375C78);
      }
      v519 = (v516 + 2);
      if (v517 <= v519)
      {
        __break(0xC471u);
        JUMPOUT(0x198375C80);
      }
      v520 = v4;
      v521 = v6;
      v522 = *(_QWORD *)(v7 + 24);
      v523 = *((_QWORD *)v1042 + 19);
      if ((*(_QWORD *)(v523 + 8 * v518) & 0xFC000000000000) != 0x2C000000000000)
        JSC::DFG::ClobberSet::add((uint64_t *)(*v4 + 144), 16424, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)&v1537, v7, (uint64_t)&v1333);
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1073, 55, 16415, *(_QWORD *)(v523 + 8 * v522), *(_QWORD *)(v523 + 8 * v518), 0);
      JSC::DFG::LazyNode::LazyNode(v1072, (JSC::DFG::Node *)(*(_QWORD *)(v523 + 8 * v519) & 0xFF00FFFFFFFFFFFFLL));
      v123 = v1072[0];
      v124 = v1072[1];
      v126 = *v521;
      v127 = (int *)v1073;
      goto LABEL_153;
    case 0x19A:
      v1067 = 410;
      v575 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1068 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1070 = 0;
      v1071 = 0;
      v1069 = v575;
      v118 = *v6;
      v119 = &v1067;
      goto LABEL_140;
    case 0x19C:
    case 0x19D:
      v1062 = *(_WORD *)(v7 + 18);
      v331 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1063 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1065 = 0;
      v1066 = 0;
      v1064 = v331;
      v118 = *v6;
      v119 = &v1062;
      goto LABEL_140;
    case 0x19E:
      v851 = v6;
      v852 = v7;
      JSC::DFG::ClobberSet::add((uint64_t *)(*v4 + 144), 16424, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t)&v1537, v7, (uint64_t)&v1333);
      v1750 = *(_WORD *)(v852 + 18);
      v853 = *(_QWORD *)(v852 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1751 = vandq_s8(*(int8x16_t *)(v852 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1754 = 0;
      v1752 = v853;
      v1753 = 0;
      v118 = *v851;
      v119 = &v1750;
      goto LABEL_140;
    case 0x19F:
      v1057 = 415;
      v885 = *(_QWORD *)(v7 + 40) & 0xFFFCFFFFFFFFFFFFLL;
      v1058 = vandq_s8(*(int8x16_t *)(v7 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
      v1060 = 0;
      v1061 = 0;
      v1059 = v885;
      v118 = *v6;
      v119 = &v1057;
      goto LABEL_140;
    case 0x1A0:
      v504 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 16);
      if (!v504)
        goto LABEL_361;
      v505 = v6;
      v506 = v7;
      v507 = *(unsigned int *)(v504 + 24);
      v508 = *(_DWORD *)(v504 + 28);
      v509 = (unsigned __int16)*(_DWORD *)(v504 + 24);
      if (v509 != WORD1(v507))
      {
        v510 = WORD1(v507) == 0xFFFF && v509 == 0;
        v511 = (v507 << 15) | 0x25;
        if (v510)
          v512 = 16387;
        else
          v512 = v511;
      }
      if ((_WORD)v508)
      {
        v513 = HIWORD(v508);
        if ((unsigned __int16)v508 == 0xFFFF && v513 == 0xFFFF)
        {
          v1032 = **(_QWORD **)(v506 + 72);
          v1408 = *(_WORD *)(v506 + 18);
          v1033 = *(_QWORD *)(v506 + 40) & 0xFFFCFFFFFFFFFFFFLL;
          v1409 = vandq_s8(*(int8x16_t *)(v506 + 24), (int8x16_t)vdupq_n_s64(0xFFFCFFFFFFFFFFFFLL));
          v1410 = v1033;
          v1411 = v1032;
          v1412 = 0;
          v118 = *v505;
          v119 = &v1408;
LABEL_140:
          return;
        }
      }
      else
      {
        if (v508 > 0xFFFEFFFF)
          return;
        v513 = HIWORD(v508);
      }
      v515 = *(_QWORD *)(v506 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1403 = 57;
      v1404 = ((unint64_t)((unsigned __int16)v508 | ((unsigned __int16)v513 << 16)) << 15) | 0x25;
      v1405 = v515;
      v1406 = 0u;
      v1407 = 0u;
      JSC::DFG::LazyNode::LazyNode(v1402, (JSC::DFG::Node *)v506);
      v123 = v1402[0];
      v124 = v1402[1];
      v126 = *v505;
      v127 = &v1403;
      goto LABEL_153;
    case 0x1A1:
      v982 = *(unsigned int *)(*(_QWORD *)(v7 + 72) + 48);
      if ((unsigned __int16)*(_DWORD *)(*(_QWORD *)(v7 + 72) + 48) == WORD1(v982))
        return;
      if (!(unsigned __int16)*(_DWORD *)(*(_QWORD *)(v7 + 72) + 48) && WORD1(v982) == 0xFFFF)
        goto LABEL_361;
      v239 = (v982 << 15) | 0x25;
LABEL_855:
      v201 = *v4;
      goto LABEL_363;
    case 0x1AB:
    case 0x1AC:
      if ((*(_BYTE *)(v7 + 74) & 1) == 0)
      {
        v898 = v6;
        v899 = (uint64_t *)v7;
        v900 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*(_DWORD *)(v7 + 56) & 7));
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1045, v900, (v899[9] << 15) | 0x16, v899[3], v899[4], v899[5]);
        JSC::DFG::LazyNode::LazyNode(v1044, (JSC::DFG::Node *)v899);
        v123 = v1044[0];
        v124 = v1044[1];
        v126 = *v898;
        v127 = (int *)v1045;
        goto LABEL_153;
      }
      v911 = v4;
      v912 = *v4;
LABEL_954:
LABEL_955:
      v201 = *v911;
LABEL_832:
      v239 = 16406;
      goto LABEL_363;
    case 0x1AD:
      v911 = v4;
      if ((*(_BYTE *)(v7 + 74) & 1) == 0)
        goto LABEL_955;
      v912 = *v4;
      goto LABEL_954;
    case 0x1AE:
    case 0x1AF:
      v536 = ((unint64_t)*(_DWORD *)(v7 + 72) << 15) | 0x1A;
      v537 = *(_QWORD *)(v7 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v1047 = 38;
      v1048 = v536;
      v1049 = v537;
      v1050 = 0u;
      v1051 = 0u;
      v538 = v6;
      JSC::DFG::LazyNode::LazyNode(v1046, (JSC::DFG::Node *)v7);
      v123 = v1046[0];
      v124 = v1046[1];
      v126 = *v538;
      v127 = &v1047;
      goto LABEL_153;
    case 0x1B0:
      v201 = *v4;
      v239 = 16410;
      goto LABEL_363;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x1983748F0);
    default:
      *(_OWORD *)v1193 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v8];
      v961 = (JSC::DFG::Node *)v7;
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)v1193, &v1043);
      if (v1043)
        v962 = (const char *)(v1043 + 16);
      else
        v962 = 0;
      JSC::DFG::Graph::logAssertionFailure(v1042, v961, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v962);
      WTF::CString::~CString((WTF::CString *)&v1043, v963, v964, v965, v966, v967, v968, v969);
      __break(0xC471u);
      JUMPOUT(0x1983747B4);
  }
}

void JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::GlobalCSEPhase>::operator()(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  int j;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  _QWORD *v27;
  uint64_t v28;
  JSC::DFG::Graph *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::DFG::Node *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  int i;
  uint64_t v45;
  int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  unsigned int v54;
  BOOL v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  v3 = a2[1];
  v73 = *a2;
  v74 = v3;
  v75 = a2[2];
  v4 = (uint64_t *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 88);
  if (v5
    || (WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::rehash((uint64_t *)(a1 + 88), 8u, 0), (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = JSC::DFG::PureValueHash::hash((unsigned __int16 *)&v73);
  v12 = 0;
  if ((_DWORD)v74)
  {
    for (i = 0; ; v7 = v45 + i)
    {
      v45 = v7 & v6;
      v15 = (unsigned __int16 *)(v5 + (v45 << 6));
      v46 = *v15;
      v47 = *((_QWORD *)v15 + 4);
      v19 = *((_QWORD *)v15 + 5);
      v9 = *((_QWORD *)v15 + 1);
      v20 = *((_QWORD *)v15 + 2);
      if (!v19)
      {
        v48 = v46 == 433 && v47 == 0;
        v49 = v48 && v9 == 0;
        if (v49 && v20 == 0)
        {
          v18 = *((_QWORD *)v15 + 3);
          if (!v18)
            break;
        }
      }
      v18 = *((_QWORD *)&v75 + 1) == 0;
      v8 = v19 != 0;
      if ((_DWORD)v18 != (_DWORD)v8 && v46 == (unsigned __int16)v73 && v47 == (_QWORD)v75)
      {
        if (v19)
        {
          if ((_DWORD)v20 == (_DWORD)v74)
          {
            v18 = 0;
            v8 = 0;
            v54 = *(_DWORD *)(v19 + 164);
            v55 = v54 >= v9;
            LODWORD(v9) = v54 - v9;
            v9 = v55 ? v9 : 0;
            v10 = v20;
            v55 = v54 >= DWORD2(v73);
            LODWORD(v11) = v54 - DWORD2(v73);
            v11 = v55 ? v11 : 0;
            do
            {
              if (v9 == v18)
              {
                __break(0xC471u);
                JUMPOUT(0x198376AD8);
              }
              if (v11 == v18)
              {
LABEL_129:
                __break(0xC471u);
                JUMPOUT(0x198376A88);
              }
              if (((*(_QWORD *)(*(_QWORD *)(v19 + 152) + 8 * (DWORD2(v73) + v18)) ^ *(_QWORD *)(*(_QWORD *)(v19 + 152) + 8 * *((_QWORD *)v15 + 1) + 8 * v18)) & 0xFFFCFFFFFFFFFFFFLL) != 0)
                break;
              v8 = ++v18 >= (unint64_t)v20;
            }
            while (v20 != v18);
            if ((v8 & 1) != 0)
            {
LABEL_33:
              v27 = v15 + 24;
              v28 = *((unsigned int *)v15 + 15);
              if ((_DWORD)v28)
              {
                v29 = *(JSC::DFG::Graph **)(a1 + 32);
                v30 = *((_QWORD *)v29 + 98);
                v31 = *(_QWORD *)(a1 + 112);
                v32 = 8 * v28;
                while (1)
                {
                  v33 = *(JSC::DFG::Node **)(*v27 - 8 + v32);
                  v34 = *((_QWORD *)v33 + 12);
                  if (v34 == v31)
                    break;
                  v35 = *(unsigned int *)(v31 + 8);
                  v36 = *(_DWORD *)(v30 + 20);
                  if (v36 <= v35)
                    goto LABEL_129;
                  v37 = *(unsigned int *)(v34 + 8);
                  if (v36 <= v37)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198376A90);
                  }
                  v38 = *(_QWORD *)(v30 + 8);
                  v39 = v38 + 32 * v35;
                  v40 = v38 + 32 * v37;
                  if (*(_DWORD *)(v39 + 24) > *(_DWORD *)(v40 + 24) && *(_DWORD *)(v39 + 28) < *(_DWORD *)(v40 + 28))
                    break;
                  v32 -= 8;
                  if (!v32)
                  {
                    v41 = *((unsigned int *)v15 + 15);
                    goto LABEL_44;
                  }
                }
                JSC::DFG::Node::replaceWith(*(_QWORD *)(a1 + 120), v29, v33, v18, v8, v9, v10, v11);
                *(_BYTE *)(a1 + 304) = 1;
                return;
              }
              v41 = 0;
LABEL_44:
              v42 = (_QWORD *)(a1 + 120);
              if ((_DWORD)v28 != *((_DWORD *)v15 + 14))
              {
                *(_QWORD *)(*((_QWORD *)v15 + 6) + 8 * v41) = *v42;
                *((_DWORD *)v15 + 15) = v28 + 1;
                return;
              }
              v43 = v41 + 1;
              goto LABEL_104;
            }
          }
        }
        else
        {
          v72 = v9 == *((_QWORD *)&v73 + 1) && v20 == (_QWORD)v74;
          if (v72 && *((_QWORD *)v15 + 3) == *((_QWORD *)&v74 + 1))
            goto LABEL_33;
        }
      }
      if (v46 == 433 && v47 != 0)
        v12 = (unsigned __int16 *)(v5 + (v45 << 6));
      ++i;
    }
  }
  else
  {
    for (j = 1; ; ++j)
    {
      v14 = v7 & v6;
      v15 = (unsigned __int16 *)(v5 + (v14 << 6));
      v16 = *v15;
      v17 = *((_QWORD *)v15 + 4);
      v18 = *((_QWORD *)v15 + 5);
      v20 = *((_QWORD *)v15 + 1);
      v19 = *((_QWORD *)v15 + 2);
      if (!v18)
      {
        v21 = v16 == 433 && v17 == 0;
        v22 = v21 && v20 == 0;
        if (v22 && v19 == 0)
        {
          v8 = *((_QWORD *)v15 + 3);
          if (!v8)
            break;
        }
      }
      v8 = *((_QWORD *)&v75 + 1) == 0;
      v9 = v18 != 0;
      if ((_DWORD)v8 != (_DWORD)v9 && v16 == (unsigned __int16)v73 && v17 == (_QWORD)v75)
      {
        if (v18)
        {
          if (!(_DWORD)v19)
            goto LABEL_33;
        }
        else
        {
          v71 = v20 == *((_QWORD *)&v73 + 1) && v19 == (_QWORD)v74;
          if (v71 && *((_QWORD *)v15 + 3) == *((_QWORD *)&v74 + 1))
            goto LABEL_33;
        }
      }
      if (v16 == 433 && v17 != 0)
        v12 = (unsigned __int16 *)(v5 + (v14 << 6));
      v7 = j + v14;
    }
  }
  if (v12)
  {
    *v12 = 433;
    *(_OWORD *)(v12 + 4) = 0u;
    *(_OWORD *)(v12 + 12) = 0u;
    *(_OWORD *)(v12 + 20) = 0u;
    *((_QWORD *)v12 + 7) = 0;
    --*(_DWORD *)(*v4 - 16);
    v15 = v12;
  }
  v56 = v73;
  v57 = v75;
  *((_OWORD *)v15 + 1) = v74;
  *((_OWORD *)v15 + 2) = v57;
  *(_OWORD *)v15 = v56;
  v58 = *((_QWORD *)v15 + 6);
  if (v58)
  {
    *((_QWORD *)v15 + 6) = 0;
    *((_DWORD *)v15 + 14) = 0;
    WTF::fastFree(v58, (void *)v19, v20, v18, v8, v9, v10, v11);
  }
  *((_QWORD *)v15 + 6) = 0;
  *((_QWORD *)v15 + 7) = 0;
  v59 = *v4;
  if (*v4)
    v60 = *(_DWORD *)(v59 - 12) + 1;
  else
    v60 = 1;
  *(_DWORD *)(v59 - 12) = v60;
  v61 = *v4;
  if (*v4)
    v62 = *(_DWORD *)(v61 - 12);
  else
    v62 = 0;
  v63 = (*(_DWORD *)(v61 - 16) + v62);
  v64 = *(unsigned int *)(v61 - 4);
  if (v64 <= 0x400)
  {
    if (3 * v64 > 4 * v63)
      goto LABEL_100;
    if (!(_DWORD)v64)
    {
      v70 = 8;
LABEL_107:
      v15 = (unsigned __int16 *)WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::rehash(v4, v70, v15);
      goto LABEL_100;
    }
LABEL_109:
    v70 = (_DWORD)v64 << (6 * *(_DWORD *)(v61 - 12) >= (2 * v64));
    goto LABEL_107;
  }
  if (v64 <= 2 * v63)
    goto LABEL_109;
LABEL_100:
  v42 = (_QWORD *)(a1 + 120);
  v65 = *((unsigned int *)v15 + 15);
  if ((_DWORD)v65 == *((_DWORD *)v15 + 14))
  {
    v27 = v15 + 24;
    v43 = v65 + 1;
LABEL_104:
    v69 = (uint64_t *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v43, (unint64_t)v42);
    v65 = *((unsigned int *)v15 + 15);
    v66 = v65 + 1;
    v67 = *((_QWORD *)v15 + 6);
    v68 = *v69;
  }
  else
  {
    v66 = v65 + 1;
    v67 = *((_QWORD *)v15 + 6);
    v68 = *v42;
  }
  *(_QWORD *)(v67 + 8 * v65) = v68;
  *((_DWORD *)v15 + 15) = v66;
}

uint64_t *JSC::DFG::WriteMethodClobberize<JSC::DFG::`anonymous namespace'::GlobalCSEPhase>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _BOOL4 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  double v61;
  double v62;
  double v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  unsigned int v85;
  BOOL v86;

  v10 = a2 & 0x3FFF;
  if (v10 == 40)
    return JSC::DFG::ClobberSet::add((uint64_t *)(a1 + 144), a2, a3, a4, a5, a6, a7, a8);
  v12 = *(uint64_t **)(a1 + 136);
  v13 = v12 + 1;
  if (v10 == 2)
  {
    v14 = *v13;
    if (*v13)
    {
      v15 = *(_DWORD *)(v14 - 8);
      v16 = (a2 >> 15) + ~(a2 >> 15 << 32);
      v17 = 9
          * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      v20 = *(_QWORD *)(v14 + 16 * v19);
      if (v20 != a2 >> 15)
      {
        v21 = 1;
        while (v20 != 0x8000000000000000)
        {
          v19 = ((_DWORD)v19 + v21) & v15;
          v20 = *(_QWORD *)(v14 + 16 * v19);
          ++v21;
          if (v20 == a2 >> 15)
            goto LABEL_11;
        }
        v19 = *(unsigned int *)(v14 - 4);
      }
LABEL_11:
      if (v19 != *(_DWORD *)(v14 - 4))
      {
        v35 = (_QWORD *)(v14 + 16 * v19);
        v36 = v35[1];
        *v35 = 0x7FFFFFFFFFFFFFFFLL;
        v35[1] = 0;
        if (v36)
          WTF::fastFree(v36, (void *)a2, a3, a4, a5, a6, a7, a8);
        ++*(_DWORD *)(*v13 - 16);
        v37 = *v13;
        if (*v13)
          v38 = *(_DWORD *)(v37 - 12) - 1;
        else
          v38 = -1;
        *(_DWORD *)(v37 - 12) = v38;
        v39 = *v13;
        if (*v13)
        {
          v40 = 6 * *(_DWORD *)(v39 - 12);
          v41 = *(_DWORD *)(v39 - 4);
          if (v40 < v41 && v41 >= 9)
        }
      }
    }
    v24 = v12[2];
    v22 = v12 + 2;
    v23 = v24;
    if (!v24)
      return JSC::DFG::ClobberSet::add((uint64_t *)(a1 + 144), a2, a3, a4, a5, a6, a7, a8);
    v25 = *(_DWORD *)(v23 - 4);
    if (!v25)
      return JSC::DFG::ClobberSet::add((uint64_t *)(a1 + 144), a2, a3, a4, a5, a6, a7, a8);
    v26 = 0;
    while (1)
    {
      v27 = *(_QWORD *)(v23 + 8 * --v25);
      if (v27 + 1 >= 2)
      {
        v28 = *(_QWORD *)(v27 + 8);
        if (v28 == a2)
          goto LABEL_48;
        LOWORD(v29) = a2;
        if ((a2 & 0x3FFF) == 0x25 && (LOWORD(v29) = a2, (*(_QWORD *)(v27 + 8) & 0x3FFFLL) == 0x25))
        {
          if ((a2 & 0x4000) != 0)
          {
            v32 = 0;
          }
          else
          {
            if ((v28 & 0x4000) != 0)
              goto LABEL_48;
            v32 = 0;
            v67 = (unsigned __int16)(a2 >> 15);
            if (v67 != (unsigned __int16)((unint64_t)a2 >> 31))
            {
              v68 = (unsigned __int16)(v28 >> 15);
              v69 = (unsigned __int16)(v28 >> 31);
              if (v68 != v69)
              {
                v70 = (unsigned __int16)((unint64_t)a2 >> 31);
                v71 = v70 > v69;
                v72 = v70 == v69 && v67 == v68;
                v73 = v71 || v68 > v67;
                if (v73 || v72)
                {
LABEL_153:
                  v81 = (unsigned __int16)(a2 >> 15);
                  if (v81 == (unsigned __int16)((unint64_t)a2 >> 31) || v68 == v69)
                    goto LABEL_16;
                  v82 = (unsigned __int16)((unint64_t)a2 >> 31);
                  v83 = v69 == v82;
                  if (v68 != v81)
                    v83 = 0;
                  if (v69 > v82 || v68 < v81 || v83)
                    goto LABEL_16;
                }
                goto LABEL_48;
              }
            }
          }
        }
        else
        {
          while (1)
          {
            v30 = v29 & 0x3FFF;
            if (v30 == 1)
              break;
            if (v30 == 2)
              v31 = 16385;
            else
              v31 = 16387;
            if ((v29 & 0x4000) != 0)
              v29 = v31;
            else
              v29 = v30 | 0x4000u;
            if (v30 == 40)
              v29 = 16385;
            if (v30 == 3)
              v29 = 16385;
            if (v29 == v28)
              goto LABEL_48;
          }
          v32 = (*(_QWORD *)(v27 + 8) & 0x3FFFLL) != 37;
        }
        if ((a2 & 0x3FFF) != 0x25 || v32)
        {
          while (1)
          {
            v33 = v28 & 0x3FFF;
            if (v33 == 1)
              goto LABEL_16;
            if (v33 == 2)
              v34 = 16385;
            else
              v34 = 16387;
            if ((v28 & 0x4000) != 0)
              v28 = v34;
            else
              v28 = v33 | 0x4000u;
            if (v33 == 40)
              v28 = 16385;
            if (v33 == 3)
              v28 = 16385;
            if (v28 == a2)
              goto LABEL_48;
          }
        }
        if ((v28 & 0x4000) == 0)
        {
          if ((a2 & 0x4000) == 0)
          {
            v68 = (unsigned __int16)(v28 >> 15);
            v69 = (unsigned __int16)(v28 >> 31);
            goto LABEL_153;
          }
LABEL_48:
          *(_QWORD *)(v23 + 8 * v25) = -1;
          WTF::fastFree(v27, (void *)a2, a3, a4, a5, a6, a7, a8);
          ++v26;
        }
      }
LABEL_16:
      if (!v25)
        goto LABEL_98;
    }
  }
  if (v10 == 1)
  {
    return JSC::DFG::ClobberSet::add((uint64_t *)(a1 + 144), a2, a3, a4, a5, a6, a7, a8);
  }
  v44 = v12[3];
  v22 = v12 + 3;
  v43 = v44;
  if (v44)
  {
    v45 = *(_DWORD *)(v43 - 4);
    if (v45)
    {
      v26 = 0;
      while (1)
      {
        v46 = *(_QWORD *)(v43 + 8 * --v45);
        if (v46 + 1 >= 2)
        {
          v47 = *(_QWORD *)(v46 + 8);
          if (v47 == a2)
            goto LABEL_97;
          LOWORD(v48) = a2;
          if ((a2 & 0x3FFF) == 0x25 && (LOWORD(v48) = a2, (*(_QWORD *)(v46 + 8) & 0x3FFFLL) == 0x25))
          {
            if ((a2 & 0x4000) != 0)
            {
              v51 = 0;
            }
            else
            {
              if ((v47 & 0x4000) != 0)
                goto LABEL_97;
              v51 = 0;
              v74 = (unsigned __int16)(a2 >> 15);
              if (v74 != (unsigned __int16)((unint64_t)a2 >> 31))
              {
                v75 = (unsigned __int16)(v47 >> 15);
                v76 = (unsigned __int16)(v47 >> 31);
                if (v75 != v76)
                {
                  v77 = (unsigned __int16)((unint64_t)a2 >> 31);
                  v78 = v77 > v76;
                  v79 = v77 == v76 && v74 == v75;
                  v80 = v78 || v75 > v74;
                  if (v80 || v79)
                  {
LABEL_165:
                    v84 = (unsigned __int16)(a2 >> 15);
                    if (v84 == (unsigned __int16)((unint64_t)a2 >> 31) || v75 == v76)
                      goto LABEL_65;
                    v85 = (unsigned __int16)((unint64_t)a2 >> 31);
                    v86 = v76 == v85;
                    if (v75 != v84)
                      v86 = 0;
                    if (v76 > v85 || v75 < v84 || v86)
                      goto LABEL_65;
                  }
                  goto LABEL_97;
                }
              }
            }
          }
          else
          {
            while (1)
            {
              v49 = v48 & 0x3FFF;
              if (v49 == 1)
                break;
              if (v49 == 2)
                v50 = 16385;
              else
                v50 = 16387;
              if ((v48 & 0x4000) != 0)
                v48 = v50;
              else
                v48 = v49 | 0x4000u;
              if (v49 == 40)
                v48 = 16385;
              if (v49 == 3)
                v48 = 16385;
              if (v48 == v47)
                goto LABEL_97;
            }
            v51 = (*(_QWORD *)(v46 + 8) & 0x3FFFLL) != 37;
          }
          if ((a2 & 0x3FFF) != 0x25 || v51)
          {
            while (1)
            {
              v52 = v47 & 0x3FFF;
              if (v52 == 1)
                goto LABEL_65;
              if (v52 == 2)
                v53 = 16385;
              else
                v53 = 16387;
              if ((v47 & 0x4000) != 0)
                v47 = v53;
              else
                v47 = v52 | 0x4000u;
              if (v52 == 40)
                v47 = 16385;
              if (v52 == 3)
                v47 = 16385;
              if (v47 == a2)
                goto LABEL_97;
            }
          }
          if ((v47 & 0x4000) == 0)
          {
            if ((a2 & 0x4000) == 0)
            {
              v75 = (unsigned __int16)(v47 >> 15);
              v76 = (unsigned __int16)(v47 >> 31);
              goto LABEL_165;
            }
LABEL_97:
            *(_QWORD *)(v43 + 8 * v45) = -1;
            WTF::fastFree(v46, (void *)a2, a3, a4, a5, a6, a7, a8);
            ++v26;
          }
        }
LABEL_65:
        if (!v45)
        {
LABEL_98:
          v54 = *v22;
          if (v26)
          {
            *(_DWORD *)(v54 - 16) += v26;
            v65 = *v22;
            if (*v22)
              v66 = *(_DWORD *)(v65 - 12);
            else
              v66 = 0;
            *(_DWORD *)(v65 - 12) = v66 - v26;
            v54 = *v22;
          }
          if (v54)
          {
            v55 = *(_DWORD *)(v54 - 4);
            v56 = *(unsigned int *)(v54 - 12);
            if (v55 >= 9 && 6 * (int)v56 < v55)
            {
              v58 = (v56 - 1) | ((v56 - 1) >> 1) | ((((_DWORD)v56 - 1) | ((v56 - 1) >> 1)) >> 2);
              v59 = v58 | (v58 >> 4) | ((v58 | (v58 >> 4)) >> 8);
              v60 = (v59 | HIWORD(v59)) + 1;
              if (v60 > 0x400)
              {
                if (v60 <= 2 * v56)
                {
LABEL_106:
                  LODWORD(v60) = 2 * v60;
                  if (v60 <= 0x400)
                    goto LABEL_107;
                }
                v61 = (double)v56;
                v62 = (double)v60;
                v63 = 0.416666667;
              }
              else
              {
                if (3 * v60 <= 4 * v56)
                  goto LABEL_106;
LABEL_107:
                v61 = (double)v56;
                v62 = (double)v60;
                v63 = 0.604166667;
              }
              if (v62 * v63 <= v61)
                LODWORD(v60) = 2 * v60;
              if (v60 <= 8)
                v64 = 8;
              else
                v64 = v60;
            }
          }
          return JSC::DFG::ClobberSet::add((uint64_t *)(a1 + 144), a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  return JSC::DFG::ClobberSet::add((uint64_t *)(a1 + 144), a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::DefMethodClobberize<JSC::DFG::`anonymous namespace'::GlobalCSEPhase>::operator()(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  WTF *v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  JSC::DFG::Graph *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  unsigned int v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  __int128 *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned __int16 *v81;
  void *v82;
  uint64_t v83;
  unsigned __int16 *v84;
  int v85;
  int v86;
  __int128 *v87;
  BOOL v88;
  BOOL v90;
  _DWORD *v91;
  uint64_t v92;
  JSC::DFG::Graph *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  JSC::DFG::Node *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  JSC::DFG::Node *v121;
  unint64_t v122;
  __int128 v123[3];
  uint64_t v124;
  __int128 v125[3];
  uint64_t v126;
  __n128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF *v131;
  uint64_t v132;
  _BYTE v133[64];
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __n128 v137;

  v5 = *(_OWORD *)(a2 + 16);
  v123[0] = *(_OWORD *)a2;
  v123[1] = v5;
  v7 = *(_OWORD *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  v123[2] = *(_OWORD *)(a2 + 32);
  v124 = *(_QWORD *)(a2 + 48);
  v127.n128_u64[0] = a3;
  v127.n128_u64[1] = a4;
  v125[0] = v7;
  v125[1] = v6;
  v125[2] = *(_OWORD *)(a2 + 32);
  v8 = (uint64_t *)(*(_QWORD *)(a1 + 136) + 8);
  v126 = *(_QWORD *)(a2 + 48);
  v15 = (WTF *)v9;
  v17 = v16;
  v137.n128_u64[0] = v9;
  v137.n128_u64[1] = v16;
  if (v16 > 3 || v9)
    goto LABEL_18;
  v18 = *((_QWORD *)&v125[0] + 1);
  if ((JSC::DFG::ClobberSet::overlaps((_QWORD **)(a1 + 144), *((uint64_t *)&v125[0] + 1)) & 1) != 0)
  {
    v15 = 0;
    v17 = 0;
    goto LABEL_18;
  }
  *(_QWORD *)&v134 = &v135;
  *((_QWORD *)&v134 + 1) = 8;
  v132 = 8;
  v130 = 0x8000000000000000;
  v131 = (WTF *)v133;
  v21 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 52);
  if (!v21)
  {
    v15 = 0;
    v22 = 0;
    goto LABEL_6;
  }
  v25 = v21 - 1;
  v26 = 8 * (v21 - 1);
  do
  {
    v129 = 0;
    v27 = *(_QWORD *)(a1 + 112);
    if (*(_DWORD *)(v27 + 52) <= v25)
    {
      __break(0xC471u);
      JUMPOUT(0x198377AD0);
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v27 + 40) + v26);
    v129 = v28;
    v29 = v130;
    v30 = (_QWORD *)(2 * v130);
    if (v130 < 0)
      v31 = 63;
    else
      v31 = *v30;
    v32 = *(unsigned int *)(v28 + 8);
    if (v31 <= v32)
      goto LABEL_30;
    v33 = v30 + 1;
    if (v130 < 0)
      v33 = &v130;
    if (((*(unint64_t *)((char *)v33 + ((v32 >> 3) & 0x1FFFFFF8)) >> v32) & 1) == 0)
    {
LABEL_30:
      v34 = HIDWORD(v134);
      if (HIDWORD(v134) == DWORD2(v134))
      {
        v73 = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v134, HIDWORD(v134) + 1, (unint64_t)&v129);
        v34 = HIDWORD(v134);
        *(_QWORD *)(v134 + 8 * HIDWORD(v134)) = *v73;
      }
      else
      {
        *(_QWORD *)(v134 + 8 * HIDWORD(v134)) = v28;
      }
      HIDWORD(v134) = v34 + 1;
      v35 = *(unsigned int *)(v129 + 8);
      if (v29 < 0)
        v36 = 63;
      else
        v36 = *v30;
      if (v36 <= v35)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v130, v35 + 1, 0);
        v29 = v130;
      }
      v37 = (uint64_t *)(2 * v29 + 8);
      if (v29 < 0)
        v37 = &v130;
      *(uint64_t *)((char *)v37 + ((v35 >> 3) & 0x1FFFFFF8)) |= 1 << v35;
    }
    v26 -= 8;
    --v25;
  }
  while (v25 != -1);
  v38 = HIDWORD(v134);
  if (HIDWORD(v134))
  {
    v116 = v18;
    v118 = 0;
    v15 = 0;
    v22 = 0;
    v39 = 0;
    while (1)
    {
      v129 = 0;
      v40 = *(_QWORD *)(v134 + 8 * v38 - 8);
      HIDWORD(v134) = v38 - 1;
      v129 = v40;
      v41 = HIDWORD(v132);
      if (HIDWORD(v132) == (_DWORD)v132)
      {
        v71 = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v131, HIDWORD(v132) + 1, (unint64_t)&v129);
        v41 = HIDWORD(v132);
        *((_QWORD *)v131 + HIDWORD(v132)) = *v71;
      }
      else
      {
        *((_QWORD *)v131 + HIDWORD(v132)) = v40;
      }
      HIDWORD(v132) = v41 + 1;
      v42 = *(unsigned int *)(v129 + 8);
      if (*(_DWORD *)(a1 + 108) <= v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198377A98);
      }
      v43 = *(JSC::DFG::Graph **)(a1 + 32);
      v44 = *((_QWORD *)v43 + 98);
      v45 = *(unsigned int *)(*(_QWORD *)(a1 + 112) + 8);
      v46 = *(_DWORD *)(v44 + 20);
      if (v46 <= v45)
      {
        __break(0xC471u);
        JUMPOUT(0x198377AA0);
      }
      if (v46 <= v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198377AA8);
      }
      v47 = *(_QWORD *)(a1 + 96);
      v48 = *(_QWORD *)(v44 + 8);
      v49 = v48 + 32 * v45;
      v50 = v48 + 32 * v42;
      if (*(_DWORD *)(v49 + 24) > *(_DWORD *)(v50 + 24) && *(_DWORD *)(v49 + 28) < *(_DWORD *)(v50 + 28))
      {
        if (!*(_BYTE *)(v47 + 40 * v42 + 32))
        {
          JSC::DFG::Graph::logAssertionFailure(v43, *(JSC::DFG::Node **)(a1 + 120), (const WTF::CString *)"./dfg/DFGCSEPhase.cpp", (const char *)0x36E, "LazyNode JSC::DFG::(anonymous namespace)::GlobalCSEPhase::findReplacement(HeapLocation)", "data.didVisit");
          __break(0xC471u);
          JUMPOUT(0x198377A70);
        }
        if (v17 > 3 || v39)
        {
          JSC::DFG::Graph::logAssertionFailure(v43, *(JSC::DFG::Node **)(a1 + 120), (const WTF::CString *)"./dfg/DFGCSEPhase.cpp", (const char *)0x36F, "LazyNode JSC::DFG::(anonymous namespace)::GlobalCSEPhase::findReplacement(HeapLocation)", "!match");
          __break(0xC471u);
          goto LABEL_168;
        }
        v22 = v51;
        v17 = (unint64_t)v19;
        if ((unint64_t)v19 > 3 || v51 != 0)
        {
          v118 = v51;
          v15 = (WTF *)v51;
          v39 = v51;
          goto LABEL_84;
        }
        v118 = 0;
        v15 = 0;
        v39 = v51;
      }
      if (JSC::DFG::ClobberSet::overlaps((_QWORD **)(v47 + 40 * v42), v18))
      {
        v15 = 0;
        v17 = 0;
        goto LABEL_9;
      }
      v53 = *(_DWORD *)(v129 + 52);
      if (v53)
      {
        v54 = v39;
        v55 = v53 - 1;
        v56 = 8 * (v53 - 1);
        do
        {
          v128 = 0;
          if (*(_DWORD *)(v129 + 52) <= v55)
          {
            __break(0xC471u);
            JUMPOUT(0x198377AB0);
          }
          v57 = *(_QWORD *)(*(_QWORD *)(v129 + 40) + v56);
          v128 = v57;
          v58 = v130;
          v59 = (_QWORD *)(2 * v130);
          if (v130 < 0)
            v60 = 63;
          else
            v60 = *v59;
          v61 = *(unsigned int *)(v57 + 8);
          if (v60 <= v61)
            goto LABEL_71;
          v62 = v59 + 1;
          if (v130 < 0)
            v62 = &v130;
          if (((*(unint64_t *)((char *)v62 + ((v61 >> 3) & 0x1FFFFFF8)) >> v61) & 1) == 0)
          {
LABEL_71:
            v63 = HIDWORD(v134);
            if (HIDWORD(v134) == DWORD2(v134))
            {
              v72 = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v134, HIDWORD(v134) + 1, (unint64_t)&v128);
              v63 = HIDWORD(v134);
              *(_QWORD *)(v134 + 8 * HIDWORD(v134)) = *v72;
            }
            else
            {
              *(_QWORD *)(v134 + 8 * HIDWORD(v134)) = v57;
            }
            HIDWORD(v134) = v63 + 1;
            v64 = *(unsigned int *)(v128 + 8);
            if (v58 < 0)
              v65 = 63;
            else
              v65 = *v59;
            if (v65 <= v64)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v130, v64 + 1, 0);
              v58 = v130;
            }
            v66 = (uint64_t *)(2 * v58 + 8);
            if (v58 < 0)
              v66 = &v130;
            *(uint64_t *)((char *)v66 + ((v64 >> 3) & 0x1FFFFFF8)) |= 1 << v64;
          }
          v56 -= 8;
          --v55;
        }
        while (v55 != -1);
        v39 = v54;
        v18 = v116;
      }
LABEL_84:
      v38 = HIDWORD(v134);
      if (!HIDWORD(v134))
      {
        v137.n128_u64[0] = v118;
        v137.n128_u64[1] = v17;
        goto LABEL_6;
      }
    }
  }
  v15 = 0;
  v22 = 0;
LABEL_6:
  if (v17 > 3 || v22)
  {
    if (HIDWORD(v132))
    {
      v68 = v131;
      v69 = 8 * HIDWORD(v132);
      do
      {
        v70 = *(_DWORD *)(*(_QWORD *)v68 + 8);
        if (*(_DWORD *)(a1 + 108) <= v70)
        {
          __break(0xC471u);
          JUMPOUT(0x198377AE4);
        }
        v68 = (WTF *)((char *)v68 + 8);
        v69 -= 8;
      }
      while (v69);
    }
  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
LABEL_9:
  if ((v130 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v130, v19, v20, v10, v11, v12, v13, v14);
  v23 = v131;
  if (v133 != (_BYTE *)v131 && v131)
  {
    v131 = 0;
    LODWORD(v132) = 0;
    WTF::fastFree((unint64_t)v23, v19, v20, v10, v11, v12, v13, v14);
  }
  v24 = v134;
  if (&v135 != (__int128 *)v134 && (_QWORD)v134)
  {
    *(_QWORD *)&v134 = 0;
    DWORD2(v134) = 0;
    WTF::fastFree(v24, v19, v20, v10, v11, v12, v13, v14);
  }
LABEL_18:
  v131 = v15;
  v132 = v17;
  if (v17 <= 3 && !v15)
  {
    return;
  }
  v67 = a3;
  if (a3 && *(_QWORD *)(a1 + 120) == a3)
  {
    if (v15)
      goto LABEL_90;
    v74 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(JSC::DFG::LazyNode::ensureIsNode((uint64_t *)&v131, a1 + 152, v74, *(_DWORD *)(a1 + 128), v11, v12, v13, v14)+ 96) = v74;
    v75 = (uint64_t *)(a1 + 88);
    v76 = *((unsigned __int16 *)v131 + 9);
    if (v76 == 355 || v76 == 348)
    {
      v77 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        LODWORD(qword_1EE342DB8) = 0;
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        v76 = *((unsigned __int16 *)v131 + 9);
      }
    }
    else
    {
      v77 = (__int128 *)*((_QWORD *)v131 + 9);
    }
    LOWORD(v134) = v76;
    v119 = *((_QWORD *)v131 + 5) & 0xFFFCFFFFFFFFFFFFLL;
    v121 = (JSC::DFG::Node *)(*((_QWORD *)v131 + 4) & 0xFFFCFFFFFFFFFFFFLL);
    v122 = *((_QWORD *)v131 + 3) & 0xFFFCFFFFFFFFFFFFLL;
    *((_QWORD *)&v134 + 1) = v122;
    *(_QWORD *)&v135 = v121;
    *((_QWORD *)&v135 + 1) = v119;
    v136 = (unint64_t)v77;
    v78 = *v75;
    v117 = (uint64_t *)(a1 + 88);
    if (*v75
      || (WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::expand((uint64_t *)(a1 + 88), 0), (v78 = *v75) != 0))
    {
      v79 = *(_DWORD *)(v78 - 8);
    }
    else
    {
      v79 = 0;
    }
    v80 = JSC::DFG::PureValueHash::hash((unsigned __int16 *)&v134) & v79;
    v81 = (unsigned __int16 *)(v78 + (v80 << 6));
    if (!WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::isEmptyBucket((uint64_t)v81))
    {
      v84 = 0;
      v85 = 1;
      while (1)
      {
        v86 = *v81;
        v87 = (__int128 *)*((_QWORD *)v81 + 4);
        if (*((_QWORD *)v81 + 5))
          v88 = 0;
        else
          v88 = v86 == v76;
        if (v88 && v87 == v77)
        {
          if (*((_QWORD *)v81 + 1) == v122 && *((JSC::DFG::Node **)v81 + 2) == v121 && *((_QWORD *)v81 + 3) == v119)
          {
            v91 = v81 + 30;
            v92 = *((unsigned int *)v81 + 15);
            if (!(_DWORD)v92)
              goto LABEL_144;
            v93 = *(JSC::DFG::Graph **)(a1 + 32);
            v94 = *(_QWORD *)(a1 + 112);
            v95 = 8 * v92;
            while (1)
            {
              v96 = *((_QWORD *)v81 + 6) - 8;
              v97 = *(JSC::DFG::Node **)(v96 + v95);
              v98 = *((_QWORD *)v97 + 12);
              if (v98 == v94)
                break;
              v99 = *((_QWORD *)v93 + 98);
              v100 = *(unsigned int *)(v94 + 8);
              v101 = *(_DWORD *)(v99 + 20);
              if (v101 <= v100)
              {
                __break(0xC471u);
                JUMPOUT(0x198377AECLL);
              }
              v102 = *(unsigned int *)(v98 + 8);
              if (v101 <= v102)
              {
                __break(0xC471u);
LABEL_168:
                JUMPOUT(0x198377730);
              }
              v103 = *(_QWORD *)(v99 + 8);
              v104 = v103 + 32 * v100;
              v105 = v103 + 32 * v102;
              if (*(_DWORD *)(v104 + 24) > *(_DWORD *)(v105 + 24) && *(_DWORD *)(v104 + 28) < *(_DWORD *)(v105 + 28))
                break;
              v95 -= 8;
              if (!v95)
                goto LABEL_144;
            }
            JSC::DFG::Node::replaceWith((uint64_t)v131, v93, *(JSC::DFG::Node **)(v96 + v95), v10, v11, v12, v13, v14);
            JSC::DFG::LazyNode::setNode(&v131, v97);
LABEL_132:
            v67 = *(_QWORD *)(a1 + 120);
            v15 = v131;
LABEL_90:
            JSC::DFG::Node::replaceWith(v67, *(JSC::DFG::Graph **)(a1 + 32), v15, v10, v11, v12, v13, v14);
            *(_BYTE *)(a1 + 304) = 1;
            return;
          }
          v87 = v77;
        }
        if (v87)
          v90 = v86 == 433;
        else
          v90 = 0;
        if (v90)
          v84 = v81;
        v80 = ((_DWORD)v80 + v85) & v79;
        v81 = (unsigned __int16 *)(v78 + (v80 << 6));
        ++v85;
        if (WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::isEmptyBucket((uint64_t)v81))
        {
          if (v84)
          {
            *v84 = 433;
            *(_OWORD *)(v84 + 4) = 0u;
            *(_OWORD *)(v84 + 12) = 0u;
            *(_OWORD *)(v84 + 20) = 0u;
            *((_QWORD *)v84 + 7) = 0;
            --*(_DWORD *)(*v117 - 16);
            v81 = v84;
          }
          break;
        }
      }
    }
    v106 = v134;
    v107 = v136;
    *((_OWORD *)v81 + 1) = v135;
    *((_OWORD *)v81 + 2) = v107;
    *(_OWORD *)v81 = v106;
    v108 = *((_QWORD *)v81 + 6);
    if (v108)
    {
      *((_QWORD *)v81 + 6) = 0;
      *((_DWORD *)v81 + 14) = 0;
      WTF::fastFree(v108, v82, v83, v10, v11, v12, v13, v14);
    }
    *((_QWORD *)v81 + 6) = 0;
    *((_QWORD *)v81 + 7) = 0;
    v109 = *v117;
    if (*v117)
      v110 = *(_DWORD *)(v109 - 12) + 1;
    else
      v110 = 1;
    *(_DWORD *)(v109 - 12) = v110;
    v111 = *v117;
    if (*v117)
      v112 = *(_DWORD *)(v111 - 12);
    else
      v112 = 0;
    v113 = (*(_DWORD *)(v111 - 16) + v112);
    v114 = *(unsigned int *)(v111 - 4);
    if (v114 > 0x400)
    {
      if (v114 > 2 * v113)
        goto LABEL_143;
    }
    else if (3 * v114 > 4 * v113)
    {
      goto LABEL_143;
    }
    v81 = (unsigned __int16 *)WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::expand(v117, v81);
LABEL_143:
    v91 = v81 + 30;
    LODWORD(v92) = *((_DWORD *)v81 + 15);
LABEL_144:
    v115 = v81 + 24;
    *(_QWORD *)&v134 = v131;
    if ((_DWORD)v92 == *((_DWORD *)v81 + 14))
    {
      WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>((uint64_t)v115, (unint64_t)&v134);
    }
    else
    {
      *(_QWORD *)(*v115 + 8 * v92) = v131;
      *v91 = v92 + 1;
    }
    goto LABEL_132;
  }
}

uint64_t WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::expand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::rehash(a1, v5, a2);
}

BOOL WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::isEmptyBucket(uint64_t a1)
{
  _BOOL8 result;

  result = 0;
  if (!*(_QWORD *)(a1 + 40)
    && *(_WORD *)a1 == 433
    && *(_QWORD *)(a1 + 32) == 0
    && *(_QWORD *)(a1 + 8) == 0
    && *(_QWORD *)(a1 + 16) == 0)
  {
    return *(_QWORD *)(a1 + 24) == 0;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::rehash(uint64_t *a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int i;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  if (a2)
  {
    v18 = v10 + 24;
    do
    {
      *(_WORD *)(v18 - 8) = 433;
      *(_OWORD *)v18 = 0uLL;
      *(_OWORD *)(v18 + 16) = 0uLL;
      *(_OWORD *)(v18 + 32) = 0uLL;
      *(_QWORD *)(v18 + 48) = 0;
      v18 += 64;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (_OWORD *)(v6 + (v19 << 6));
      if (*(_WORD *)v21 != 433 || *((_QWORD *)v21 + 4) == 0)
      {
        if (WTF::HashTable<JSC::DFG::PureValue,WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashMap<JSC::DFG::PureValue,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::PureValue>,WTF::HashTraits<JSC::DFG::PureValue>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PureValue>>::isEmptyBucket(v6 + (v19 << 6)))
        {
          v43 = v6 + (v19 << 6);
          v46 = *(_QWORD *)(v43 + 48);
          v45 = (_QWORD *)(v43 + 48);
          v44 = v46;
          if (v46)
          {
            *v45 = 0;
            *(_DWORD *)(v6 + (v19 << 6) + 56) = 0;
            WTF::fastFree(v44, v11, v12, v13, v14, v15, v16, v17);
          }
        }
        else
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = JSC::DFG::PureValueHash::hash((unsigned __int16 *)(v6 + (v19 << 6)));
          for (i = 0; ; v25 = i + v27)
          {
            v27 = v25 & v24;
            v28 = v23 + (v27 << 6);
            if (!*(_QWORD *)(v28 + 40))
            {
              v29 = *(_WORD *)v28 == 433 && *(_QWORD *)(v28 + 32) == 0;
              v30 = v29 && *(_QWORD *)(v28 + 8) == 0;
              v31 = v30 && *(_QWORD *)(v28 + 16) == 0;
              if (v31 && !*(_QWORD *)(v28 + 24))
                break;
            }
            ++i;
          }
          v32 = v23 + (v27 << 6);
          v34 = (_QWORD *)(v32 + 48);
          v33 = *(_QWORD *)(v32 + 48);
          if (v33)
          {
            *v34 = 0;
            *(_DWORD *)(v32 + 56) = 0;
            WTF::fastFree(v33, v11, v12, v13, v14, v15, v16, v17);
          }
          v35 = *v21;
          v36 = v21[2];
          *(_OWORD *)(v28 + 16) = v21[1];
          *(_OWORD *)(v28 + 32) = v36;
          *(_OWORD *)v28 = v35;
          v37 = v6 + (v19 << 6);
          *v34 = 0;
          *(_QWORD *)(v32 + 56) = 0;
          v39 = *(_QWORD *)(v37 + 48);
          v38 = v37 + 48;
          *(_QWORD *)v38 = 0;
          *v34 = v39;
          v40 = *(_DWORD *)(v38 + 8);
          *(_DWORD *)(v38 + 8) = 0;
          *(_DWORD *)(v32 + 56) = v40;
          v41 = *(_DWORD *)(v38 + 12);
          *(_DWORD *)(v38 + 12) = 0;
          *(_DWORD *)(v32 + 60) = v41;
          v42 = *(_QWORD *)v38;
          if (*(_QWORD *)v38)
          {
            *(_QWORD *)v38 = 0;
            *(_DWORD *)(v38 + 8) = 0;
            WTF::fastFree(v42, v11, v12, v13, v14, v15, v16, v17);
          }
          if (v21 == a3)
            v20 = v28;
        }
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v11, v12, v13, v14, v15, v16, v17);
  return v20;
}

_QWORD *JSC::DFG::LazyNode::setNode(_QWORD *this, JSC::DFG::Node *a2)
{
  uint64_t v2;
  uint64_t v3;

  *this = a2;
  if (a2)
  {
    v2 = *((unsigned __int16 *)a2 + 9);
    if (v2 <= 2)
    {
      v3 = *((_QWORD *)a2 + 9);
      this[1] = v3;
      if ((_DWORD)v2)
      {
        if ((_DWORD)v2 != 1)
          v2 = 2;
        this[1] = v2 | v3;
      }
    }
  }
  return this;
}

uint64_t *JSC::DFG::ClobberSet::add(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;

  v9 = result;
  v10 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(result, 0, a3, a4, a5, a6, a7, a8), (v10 = *v9) != 0))
  {
    v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v10 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_11:
    *v16 = a2;
    v20 = 1;
    *((_BYTE *)v16 + 8) = 1;
    v21 = *v9;
    if (*v9)
      v20 = *(_DWORD *)(v21 - 12) + 1;
    *(_DWORD *)(v21 - 12) = v20;
    v22 = *v9;
    if (*v9)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_43;
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_43;
    }
    while (1)
    {
      while (1)
      {
LABEL_17:
        v26 = a2 & 0x3FFF;
        if (v26 == 1)
          return result;
        v27 = v26 | 0x4000u;
        if (v26 == 2)
          v28 = 16385;
        else
          v28 = 16387;
        if ((a2 & 0x4000) != 0)
          v27 = v28;
        if (v26 == 40)
          v27 = 16385;
        if (v26 == 3)
          a2 = 16385;
        else
          a2 = v27;
        v29 = *v9;
        if (*v9
          || (result = (uint64_t *)WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v9, 0, a3, a4, a5, a6, a7, a8), (v29 = *v9) != 0))
        {
          v30 = *(_DWORD *)(v29 - 8);
        }
        else
        {
          v30 = 0;
        }
        v31 = (a2 + ~(a2 << 32)) ^ ((unint64_t)(a2 + ~(a2 << 32)) >> 22);
        v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
        v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
        v34 = v30 & ((v33 >> 31) ^ v33);
        v16 = (uint64_t *)(v29 + 16 * v34);
        v35 = *v16;
        if (*v16)
        {
          v36 = 0;
          v37 = 1;
          while (v35 != a2)
          {
            if ((v35 & 0x7FFF) == 0x4000)
              v36 = v16;
            v34 = (v34 + v37) & v30;
            v16 = (uint64_t *)(v29 + 16 * v34);
            v35 = *v16;
            ++v37;
            if (!*v16)
            {
              if (v36)
              {
                *v36 = 0;
                v36[1] = 0;
                --*(_DWORD *)(*v9 - 16);
                v16 = v36;
              }
              goto LABEL_37;
            }
          }
          return result;
        }
LABEL_37:
        *v16 = a2;
        *((_BYTE *)v16 + 8) = 0;
        v38 = *v9;
        v39 = *v9 ? *(_DWORD *)(v38 - 12) + 1 : 1;
        *(_DWORD *)(v38 - 12) = v39;
        v40 = *v9;
        v41 = *v9 ? *(_DWORD *)(v40 - 12) : 0;
        v42 = (*(_DWORD *)(v40 - 16) + v41);
        v43 = *(unsigned int *)(v40 - 4);
        if (v43 > 0x400)
          break;
        if (3 * v43 <= 4 * v42)
          goto LABEL_43;
      }
      if (v43 <= 2 * v42)
LABEL_43:
        result = (uint64_t *)WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v9, v16, a3, a4, a5, a6, a7, a8);
    }
  }
  v18 = 0;
  v19 = 1;
  while (v17 != a2)
  {
    if ((v17 & 0x7FFF) == 0x4000)
      v18 = v16;
    v15 = (v15 + v19) & v11;
    v16 = (uint64_t *)(v10 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*v9 - 16);
        v16 = v18;
      }
      goto LABEL_11;
    }
  }
  if (!*((_BYTE *)v16 + 8))
  {
    *((_BYTE *)v16 + 8) = 1;
    goto LABEL_17;
  }
  return result;
}

_QWORD *WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while (!*result || (*result & 0x7FFFLL) == 0x4000)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t *WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL const&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _BYTE *v34;

  v9 = a2;
  v10 = result;
  v12 = *result;
  if (*result
    || (v34 = a3,
        result = (uint64_t *)WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(result, 0, (uint64_t)a3, a4, a5, a6, a7, a8), v9 = a2, a3 = v34, (v12 = *v10) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *v9;
  v16 = *v9 + ~(*v9 << 32);
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        v31 = 0;
        v30 = v12 + 16 * v32;
        goto LABEL_21;
      }
      if ((v21 & 0x7FFF) == 0x4000)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (uint64_t *)(v12 + 16 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*v10 - 16);
      v15 = *v9;
      v20 = v22;
    }
  }
  *v20 = v15;
  *((_BYTE *)v20 + 8) = *a3;
  v24 = *v10;
  if (*v10)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *v10;
  if (*v10)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_17;
LABEL_26:
    result = (uint64_t *)WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v10, v20, (uint64_t)a3, a4, a5, a6, a7, a8);
    v20 = result;
    v26 = *v10;
    if (*v10)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
    goto LABEL_17;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_26;
LABEL_17:
  v30 = v26 + 16 * v29;
  v31 = 1;
LABEL_21:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v30;
  *(_BYTE *)(a9 + 16) = v31;
  return result;
}

uint64_t JSC::DFG::ClobberSet::overlaps(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v31;

  v2 = *a1;
  if (*a1)
  {
    v3 = *((_DWORD *)v2 - 2);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = v2[2 * v7];
    if (v8 != a2)
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = v2[2 * v7];
        ++v9;
        if (v8 == a2)
          goto LABEL_8;
      }
      v7 = *((unsigned int *)v2 - 1);
    }
LABEL_8:
    if (v7 != *((_DWORD *)v2 - 1))
      return 1;
  }
  if ((a2 & 0x3FFF) == 0x25 && (a2 & 0x4000) == 0)
  {
    v31 = a2;
    v22 = WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::begin(a1);
    v2 = *a1;
    if (*a1)
      v24 = &v2[2 * *((unsigned int *)v2 - 1)];
    else
      v24 = 0;
    if (v24 != v22)
    {
      v25 = (unsigned __int16)(v31 >> 31);
      v26 = (unsigned __int16)(v31 >> 15);
      do
      {
        if ((v22[1] & 1) != 0)
        {
          v27 = *v22;
          if ((*v22 & 0x3FFF) == 0x25)
          {
            if ((v27 & 0x4000) != 0)
              return 1;
            if (v26 != v25)
            {
              v28 = (unsigned __int16)(v27 >> 15);
              v29 = (unsigned __int16)(v27 >> 31);
              if (v28 != v29 && v25 > v28 && v29 > v26)
                return 1;
            }
          }
        }
        while (1)
        {
          v22 += 2;
          if (v22 == v23)
            break;
          if (*v22 && (*v22 & 0x7FFF) != 0x4000)
            goto LABEL_49;
        }
        v22 = v23;
LABEL_49:
        ;
      }
      while (v22 != v24);
    }
    LOWORD(a2) = v31;
  }
  if (v2)
  {
    while (1)
    {
      v10 = a2 & 0x3FFF;
      if (v10 == 1)
        break;
      v11 = v10 | 0x4000u;
      if (v10 == 2)
        v12 = 16385;
      else
        v12 = 16387;
      if ((a2 & 0x4000) != 0)
        v11 = v12;
      if (v10 == 40)
        v11 = 16385;
      if (v10 == 3)
        a2 = 16385;
      else
        a2 = v11;
      v13 = *((_DWORD *)v2 - 2);
      v14 = (a2 + ~(a2 << 32)) ^ ((unint64_t)(a2 + ~(a2 << 32)) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = v2[2 * v17];
      if (v18 != a2)
      {
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = v2[2 * v17];
          ++v19;
          if (v18 == a2)
            goto LABEL_28;
        }
        v17 = *((unsigned int *)v2 - 1);
      }
LABEL_28:
      if (v17 != *((_DWORD *)v2 - 1) && LOBYTE(v2[2 * v17 + 1]))
        return 1;
    }
  }
  return 0;
}

uint64_t JSC::DFG::writesOverlap(JSC::DFG::Graph *a1, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  char v12;

  v9 = a3;
  v10 = 0;
  JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(a1, a2, (uint64_t)&v11, (uint64_t)&v9, (uint64_t)&v11, (uint64_t)&v12, a7, a8);
  return v10;
}

unint64_t JSC::DFG::clobbersHeap(JSC::DFG *this, JSC::DFG::Graph *a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t result;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t *v27;
  JSC::DFG::Node *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  BOOL v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  unint64_t v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v109;
  int v110;
  uint64_t v112;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BOOL4 v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  BOOL v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int16 v161;
  uint64_t v162;
  _DWORD *v163;
  _QWORD *v164;
  unsigned int v165;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v179;
  int v180;
  int v181;
  int v182;
  int v184;
  int v185;
  const char *v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  char v195;
  uint64_t v196;
  int v197;
  int v199;
  int v201;
  uint64_t v203[2];
  _OWORD v204[4];

  if (*((int *)this + 238) > 0 || !JSC::DFG::Node::hasArrayMode(a2))
  {
LABEL_2:
    v10 = *((unsigned __int16 *)a2 + 9);
    result = 0;
    switch(*((_WORD *)a2 + 9))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x43:
      case 0x45:
      case 0x47:
      case 0x48:
      case 0x4A:
      case 0x4B:
      case 0x5B:
      case 0x60:
      case 0x61:
      case 0x64:
      case 0x6D:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x98:
      case 0x99:
      case 0x9B:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB2:
      case 0xB3:
      case 0xB4:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC0:
      case 0xD6:
      case 0xDA:
      case 0xDD:
      case 0xDE:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE5:
      case 0xEB:
      case 0xEC:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x109:
      case 0x10C:
      case 0x10E:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x122:
      case 0x123:
      case 0x126:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x135:
      case 0x136:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x144:
      case 0x148:
      case 0x149:
      case 0x14B:
      case 0x14C:
      case 0x153:
      case 0x154:
      case 0x157:
      case 0x158:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
      case 0x163:
      case 0x164:
      case 0x166:
      case 0x167:
      case 0x168:
      case 0x169:
      case 0x16A:
      case 0x16B:
      case 0x16C:
      case 0x16D:
      case 0x16E:
      case 0x16F:
      case 0x170:
      case 0x171:
      case 0x172:
      case 0x173:
      case 0x174:
      case 0x175:
      case 0x176:
      case 0x177:
      case 0x178:
      case 0x179:
      case 0x17A:
      case 0x17B:
      case 0x17C:
      case 0x17D:
      case 0x17E:
      case 0x17F:
      case 0x183:
      case 0x188:
      case 0x189:
      case 0x18A:
      case 0x18B:
      case 0x18C:
      case 0x18D:
      case 0x18E:
      case 0x18F:
      case 0x194:
      case 0x196:
      case 0x197:
      case 0x19A:
      case 0x19C:
      case 0x19D:
      case 0x19E:
      case 0x19F:
      case 0x1A2:
      case 0x1A3:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1A9:
      case 0x1AA:
      case 0x1AD:
      case 0x1AE:
      case 0x1AF:
      case 0x1B0:
        return result;
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0x54:
      case 0x5E:
      case 0x5F:
      case 0x62:
      case 0x63:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x8E:
      case 0x8F:
      case 0xA7:
      case 0xA8:
      case 0xB0:
      case 0xB1:
      case 0xC3:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xD4:
      case 0xD5:
      case 0xD8:
      case 0xD9:
      case 0xDB:
      case 0xDC:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x108:
      case 0x124:
      case 0x125:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x140:
      case 0x141:
      case 0x147:
      case 0x14A:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x155:
      case 0x156:
      case 0x181:
      case 0x184:
      case 0x185:
      case 0x186:
      case 0x187:
      case 0x19B:
        return 1;
      case 0xF:
        v12 = (_QWORD *)*((_QWORD *)a2 + 9);
        v18 = v12;
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
        if (v19 != v12)
        {
          *v12 = v19;
          v12 = (_QWORD *)*((_QWORD *)a2 + 9);
        }
        v20 = v12;
        do
        {
          v16 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
        goto LABEL_10;
      case 0x10:
        v12 = (_QWORD *)*((_QWORD *)a2 + 9);
        v13 = v12;
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
        if (v14 != v12)
        {
          *v12 = v14;
          v12 = (_QWORD *)*((_QWORD *)a2 + 9);
        }
        v15 = v12;
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
        goto LABEL_10;
      case 0x1C:
        v12 = (_QWORD *)*((_QWORD *)a2 + 9);
        v17 = v12;
        do
        {
          v16 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
LABEL_10:
        if (v16 == v12)
          return 0;
        result = 0;
        *v12 = v16;
        return result;
      case 0x29:
        v136 = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 29;
        return v136 < 0xFFFFFFFD;
      case 0x2A:
        return (*((_BYTE *)a2 + 30) & 0xFC) == 0;
      case 0x2B:
      case 0x2D:
      case 0x2F:
      case 0x32:
      case 0x34:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
        v65 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        switch((_DWORD)v65)
        {
          case 0x1A:
            v66 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v67 = 0x68000000000000;
            break;
          case 0x1C:
            v66 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v67 = 0x70000000000000;
            break;
          case 0x1B:
            v66 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v67 = 0x6C000000000000;
            break;
          default:
            return 1;
        }
        return v66 != v67;
      case 0x2C:
      case 0x2E:
      case 0x30:
      case 0x31:
      case 0x33:
      case 0x35:
        return (*((_BYTE *)a2 + 30) & 0xFC) == 0 || (*((_BYTE *)a2 + 38) & 0xFC) == 0;
      case 0x3F:
        return ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 >= 2;
      case 0x40:
      case 0x42:
      case 0x44:
        v29 = *((_QWORD *)a2 + 3);
        v30 = (v29 >> 50) & 0x3F;
        if (v30 >= 0x35 || ((0x12000000000003uLL >> (v29 >> 50)) & 1) == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x1983799CCLL);
        }
        return (_DWORD)v30 == 0;
      case 0x41:
        v98 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        v99 = v98 >= 0x35;
        v100 = (0xDFFFFFFFFFFFDuLL >> v98) & 1;
        if (v99)
          return 1;
        else
          return v100;
      case 0x46:
        v112 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        return (_DWORD)v112 != 1 && (_DWORD)v112 != 49;
      case 0x49:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
        return (*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0xC4000000000000;
      case 0x51:
      case 0x131:
        v96 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
        v97 = 0xC4000000000000;
        return v96 != v97;
      case 0x52:
      case 0x53:
        v149 = *((_QWORD *)a2 + 3);
        v30 = (v149 >> 50) & 0x3F;
        if (v30 >= 0x35 || ((0x1200001C000003uLL >> (v149 >> 50)) & 1) == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198379188);
        }
        return (_DWORD)v30 == 0;
      case 0x5C:
      case 0x5D:
        v22 = *((_DWORD *)a2 + 18);
        if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
        {
          switch(*((_DWORD *)a2 + 14) & 7)
          {
            case 3:
              v23 = 13;
              break;
            case 4:
              v23 = 17;
              break;
            case 5:
              v23 = 19;
              break;
            case 7:
              __break(0xC471u);
              JUMPOUT(0x198379944);
            default:
              __break(0xC471u);
              JUMPOUT(0x198379974);
          }
        }
        else
        {
          v23 = 21;
        }
        result = 0;
        switch(*((_DWORD *)a2 + 18))
        {
          case 0u:
          case 1u:
          case 2u:
          case 4u:
          case 0x17u:
          case 0x18u:
            return 1;
          case 3u:
          case 6u:
            return result;
          case 5u:
            v35 = BYTE2(v22) - 3;
            return v35 < 2;
          case 7u:
            result = 1;
            if (BYTE2(v22) > 3u || BYTE2(v22) == 2)
              return result;
            v60 = *((_DWORD *)a2 + 6);
            v61 = *((_DWORD *)this + 41);
            if (v61 <= v60)
            {
              __break(0xC471u);
              JUMPOUT(0x198379AE4);
            }
            if (v61 <= v60 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198378A14);
            }
            return result;
          case 8u:
            if (BYTE2(v22) >= 2u && BYTE2(v22) != 3)
              return 1;
            v51 = *((_DWORD *)a2 + 6);
            v52 = *((_DWORD *)this + 41);
            if (v52 <= v51)
            {
              __break(0xC471u);
              JUMPOUT(0x198379ADCLL);
            }
            if (v52 <= v51 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198378934);
            }
            return result;
          case 9u:
            result = 1;
            if (BYTE2(v22) > 3u || BYTE2(v22) == 2)
              return result;
            v24 = *((_DWORD *)a2 + 6);
            v25 = *((_DWORD *)this + 41);
            if (v25 <= v24)
            {
              __break(0xC471u);
              JUMPOUT(0x198379A8CLL);
            }
            if (v25 <= v24 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198378740);
            }
            return result;
          case 0xAu:
          case 0xBu:
            return BYTE2(v22) > 1u;
          case 0xCu:
            if (BYTE2(v22) > 1u)
              return 1;
            v147 = *((_DWORD *)a2 + 6);
            v148 = *((_DWORD *)this + 41);
            if (v148 <= v147)
            {
              __break(0xC471u);
              JUMPOUT(0x198379B84);
            }
            if (v148 <= v147 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198379118);
            }
            return result;
          case 0xDu:
            v173 = *((_QWORD *)a2 + 3);
            v174 = *((_DWORD *)this + 41);
            if (v174 <= v173)
            {
              __break(0xC471u);
              JUMPOUT(0x198379B94);
            }
            if (v174 <= (int)v173 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198379B9CLL);
            }
            v175 = *((_QWORD *)this + 19);
            v158 = *(_QWORD *)(v175 + 8 * *((_QWORD *)a2 + 3));
            v159 = *(_QWORD *)(v175 + 8 * (v173 + 1));
            v157 = 16405;
            goto LABEL_265;
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
            if ((v22 & 0x40000000) == 0)
            {
              v49 = *((_DWORD *)a2 + 6);
              v50 = *((_DWORD *)this + 41);
              if (v50 <= v49)
              {
                __break(0xC471u);
                JUMPOUT(0x198379AD4);
              }
              if (v50 <= v49 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198378908);
              }
            }
            return 0;
          case 0x19u:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
            __break(0xC471u);
            JUMPOUT(0x198379674);
          default:
            __break(0xC471u);
            JUMPOUT(0x19837962CLL);
        }
        return 0;
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
        v31 = *((_DWORD *)a2 + 6);
        v32 = *((_DWORD *)this + 41);
        if (v32 <= v31)
        {
          __break(0xC471u);
          JUMPOUT(0x198379A94);
        }
        if (v32 <= v31 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198379A9CLL);
        }
        if (v32 <= v31 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198379AA4);
        }
        v33 = *((_DWORD *)a2 + 18);
        v34 = *((_DWORD *)a2 + 14) & 7;
        if (v34 >= 2 && v34 - 3 >= 3)
        {
          if (v34 == 7)
          {
            __break(0xC471u);
            JUMPOUT(0x198378A9CLL);
          }
          __break(0xC471u);
          JUMPOUT(0x1983799FCLL);
        }
        result = 0;
        if (*((_DWORD *)a2 + 18) - 14 >= 9)
        {
          switch(*((_DWORD *)a2 + 18))
          {
            case 0u:
            case 1u:
            case 2u:
            case 4u:
            case 5u:
            case 6u:
            case 0xCu:
            case 0xDu:
            case 0x17u:
            case 0x18u:
              return 1;
            case 3u:
              return result;
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              v35 = BYTE2(v33) - 3;
              return v35 < 2;
            case 0xBu:
              return (v33 & 0xFE0000) != 0;
            case 0x19u:
              JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
              __break(0xC471u);
              JUMPOUT(0x198379430);
            default:
              __break(0xC471u);
              JUMPOUT(0x19837988CLL);
          }
        }
        return result;
      case 0x97:
      case 0xBE:
      case 0x191:
      case 0x192:
      case 0x193:
        goto LABEL_40;
      case 0x9A:
        if (*((int *)this + 238) <= 1)
          goto LABEL_40;
        return 0;
      case 0x9C:
        v137 = *((_QWORD *)a2 + 9);
        v138 = *(unsigned int *)(v137 + 20);
        v139 = (v138 << 6) - 64;
        do
        {
          if (!v138)
            break;
          if (--v138 >= (unint64_t)*(unsigned int *)(v137 + 20))
          {
            __break(0xC471u);
            JUMPOUT(0x198379B64);
          }
          v140 = v139 - 64;
          v141 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v137 + 8) + v139));
          v139 = v140;
        }
        while (!v141);
        if (*((int *)this + 238) <= 1)
          goto LABEL_214;
        return 0;
      case 0x9D:
        JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9));
        return 0;
      case 0x9E:
        result = 0;
        v26 = *((_DWORD *)a2 + 18);
        if (v26 - 5 < 9)
          return result;
        if (v26 == 25)
          goto LABEL_39;
        if (v26 == 3)
          return result;
        v171 = JSC::DFG::toTypedArrayType(v26);
        if (v171 == 12 || !v171)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x1983795B0);
        }
LABEL_39:
        if ((v26 & 0x40000000) == 0)
          goto LABEL_40;
        return 0;
      case 0x9F:
        v104 = *((_DWORD *)a2 + 18);
        if (v104 != 25)
        {
          v197 = JSC::DFG::toTypedArrayType(v104);
          if (v197 == 12 || v197 == 0)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
            __break(0xC471u);
            JUMPOUT(0x198379B5CLL);
          }
        }
        if ((v104 & 0x40000000) != 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
          __break(0xC471u);
          JUMPOUT(0x198378D8CLL);
        }
        return 0;
      case 0xA0:
        v184 = *((_DWORD *)a2 + 18);
        v185 = HIBYTE(*((_DWORD *)a2 + 18));
        if (v184 == 25)
        {
          if ((v185 & 0x40) == 0)
            goto LABEL_40;
          return 0;
        }
        v201 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v201 == 12 || v201 == 0)
        {
          if (v184 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x198379C64);
          }
          return 0;
        }
        result = 0;
        if (v184 != 3 && (v185 & 0x40) == 0)
          goto LABEL_40;
        return result;
      case 0xA1:
        if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
        {
          __break(0xC471u);
          JUMPOUT(0x1983797A0);
        }
        goto LABEL_40;
      case 0xA2:
        v180 = *((_DWORD *)a2 + 18);
        v181 = v180;
        if (v180 == 25)
          goto LABEL_339;
        v199 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v199 != 12 && v199 != 0)
          goto LABEL_413;
        if (v181 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x198379C00);
        }
        return 0;
      case 0xA3:
        v180 = *((_DWORD *)a2 + 18);
        v181 = v180;
        if (v180 == 25)
          goto LABEL_339;
        v182 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v182 == 12 || v182 == 0)
        {
          if (v181 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x198379758);
          }
          return 0;
        }
LABEL_413:
        if (v181 == 3)
          return 0;
        v180 = *((_WORD *)a2 + 9) == 146 ? *((_DWORD *)a2 + 20) : *((_DWORD *)a2 + 18);
LABEL_339:
        if ((v180 & 0x40000000) != 0)
          return 0;
LABEL_40:
        v27 = (uint64_t *)v204;
LABEL_41:
        v28 = a2;
LABEL_42:
        JSC::DFG::LazyNode::LazyNode(v27, v28);
        return 0;
      case 0xC1:
        v105 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        v106 = v105 > 0x31;
        v107 = (1 << v105) & 0x2000000200002;
        if (v106 || v107 == 0)
          return 1;
        result = 0;
        v109 = *((_QWORD *)a2 + 4);
        if ((v109 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v109 & 0xFC000000000000) != 0x4000000000000)
          return 1;
        return result;
      case 0xC2:
        v136 = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 15;
        return v136 < 0xFFFFFFFD;
      case 0xC4:
        v150 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v150 == 11)
          return 0;
        if ((_DWORD)v150)
        {
          __break(0xC471u);
          JUMPOUT(0x1983791C8);
        }
        return 1;
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
        v161 = v10 - 202;
        if (v161 >= 0xAu || ((0x3EFu >> v161) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198379AC4);
        }
        v162 = dword_1991556C8[(__int16)v161];
        v163 = (_DWORD *)((char *)a2 + 24);
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
        {
          v194 = v162 + *v163;
          if (*((_DWORD *)this + 41) <= v194)
          {
            __break(0xC471u);
            JUMPOUT(0x198379C88);
          }
          v164 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v194);
        }
        else
        {
          v164 = &v163[2 * v162];
        }
        return (*v164 & 0xFF00FFFFFFFFFFFFLL) == 0;
      case 0xCE:
        v179 = (uint64_t *)((char *)a2 + 24);
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
        {
          v196 = *v179;
          if (*((_DWORD *)this + 41) <= v196)
          {
            __break(0xC471u);
            JUMPOUT(0x198379CC4);
          }
          v179 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v196);
        }
        v96 = *v179 & 0xFC000000000000;
        v97 = 0x4000000000000;
        return v96 != v97;
      case 0xD7:
        if (*((unsigned __int8 *)a2 + 72) - 7 >= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x198378E80);
        }
        return 0;
      case 0xDF:
      case 0xE0:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000
          || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x40000000000000)
        {
          return 1;
        }
        v66 = *((_QWORD *)a2 + 5) & 0xFC000000000000;
        v67 = 0x54000000000000;
        return v66 != v67;
      case 0xE1:
        v103 = *((_QWORD *)a2 + 5);
        goto LABEL_159;
      case 0xE6:
        v114 = *((_QWORD *)a2 + 3);
        if (((v114 >> 50) & 0x3F) >= 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198379A84);
        }
        return (v114 & 0x1C000000000000) == 0;
      case 0xE7:
      case 0xE8:
      case 0xE9:
      case 0xEA:
      case 0xED:
        if ((*((_BYTE *)a2 + 30) & 0xFC) != 0)
          return 0;
        v21 = *((_BYTE *)a2 + 38);
        return (v21 & 0xFC) == 0;
      case 0x106:
        v36 = *((_QWORD *)a2 + 4);
        v37 = v36;
        if ((v36 & 0x80000000) != 0)
        {
          JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v36) + 0x2000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        else
        {
          JSC::DFG::Graph::freeze((uint64_t)this, v36 | 0xFFFE000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (!(_DWORD)v36)
            return 0;
        }
        v44 = *((unsigned __int16 *)a2 + 9);
        switch(v44)
        {
          case 267:
            goto LABEL_233;
          case 264:
            LOBYTE(v45) = *((_DWORD *)a2 + 19) & 0xF;
            break;
          case 352:
LABEL_233:
            LOBYTE(v45) = *((_DWORD *)a2 + 21) & 0xF;
            break;
          default:
            v45 = *((_DWORD *)a2 + 18);
            break;
        }
        if (v45 - 4 >= 6)
        {
          result = 0;
          if (v45 > 0x19u || ((1 << v45) & 0x2A00000) == 0)
            return result;
        }
        v46 = *((unsigned int *)this + 107);
        if (v36 >= v46)
        {
          if (!(_DWORD)v46)
            return 0;
          v69 = (unsigned int *)*((_QWORD *)this + 52);
          v70 = 4 * v46;
          do
          {
            v71 = *v69;
            if (v71 < v36)
            {
              if (*((_DWORD *)this + 41) <= (v71 + *((_DWORD *)a2 + 6)))
              {
                __break(0xC471u);
                JUMPOUT(0x198379AF4);
              }
              if ((v71 & 0x80000000) != 0)
                v72 = COERCE__INT64((double)v71) + 0x2000000000000;
              else
                v72 = v71 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v72, v38, v39, v40, v41, v42, v43);
            }
            result = 0;
            ++v69;
            v70 -= 4;
          }
          while (v70);
        }
        else
        {
          v47 = 0;
          do
          {
            if (*((_DWORD *)this + 41) <= (v47 + *((_DWORD *)a2 + 6)))
            {
              __break(0xC471u);
              JUMPOUT(0x198379ACCLL);
            }
            if ((v47 & 0x80000000) != 0)
              v48 = COERCE__INT64((double)v47) + 0x2000000000000;
            else
              v48 = v47 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v48, v38, v39, v40, v41, v42, v43);
            result = 0;
            ++v47;
          }
          while (v37 != v47);
        }
        return result;
      case 0x107:
        if (!*((_DWORD *)a2 + 8))
          return 0;
        v151 = *((_QWORD *)a2 + 3);
        v152 = *((_DWORD *)this + 41);
        v99 = v152 >= v151;
        LODWORD(v153) = v152 - v151;
        if (v99)
          v153 = v153;
        else
          v153 = 0;
        v154 = *((unsigned int *)a2 + 8) - 1;
        do
        {
          if (!v153)
          {
            __break(0xC471u);
            JUMPOUT(0x198379B7CLL);
          }
          result = 0;
          v155 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v151++) & 0xFF00FFFFFFFFFFFFLL)
                                     + 0x12);
          v156 = v155 == 350 || v154-- == 0;
          --v153;
        }
        while (!v156);
        return result;
      case 0x10A:
        v73 = *((unsigned int *)a2 + 20);
        if ((v73 & 0x80000000) != 0)
          v74 = COERCE__INT64((double)v73) + 0x2000000000000;
        else
          v74 = v73 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v74, (uint64_t)a3, a4, a5, a6, a7, a8);
        return 0;
      case 0x10B:
        v75 = (uint64_t *)*((_QWORD *)a2 + 9);
        v76 = *v75;
        v77 = *(unsigned int *)(*v75 + 8);
        if ((v77 & 0x80000000) != 0)
          v78 = COERCE__INT64((double)v77) + 0x2000000000000;
        else
          v78 = v77 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v78, (uint64_t)a3, a4, a5, a6, a7, a8);
        v86 = *((unsigned __int16 *)a2 + 9);
        switch(v86)
        {
          case 267:
            goto LABEL_259;
          case 264:
            LOBYTE(v87) = *((_DWORD *)a2 + 19) & 0xF;
            break;
          case 352:
LABEL_259:
            LOBYTE(v87) = *((_DWORD *)a2 + 21) & 0xF;
            break;
          default:
            v87 = *((_DWORD *)a2 + 18);
            break;
        }
        if (v87 - 4 >= 6)
        {
          result = 0;
          if (v87 > 0x19u || ((1 << v87) & 0x2A00000) == 0)
            return result;
        }
        v88 = *((unsigned int *)this + 107);
        if (v88 <= v77)
        {
          v204[0] = 0uLL;
          if ((_DWORD)v88)
          {
            v89 = 0;
            v90 = 0;
            v91 = (unsigned int *)*((_QWORD *)this + 52);
            v92 = 4 * v88;
            do
            {
              v93 = *v91;
              LODWORD(v203[0]) = v93;
              if (v93 < v77)
              {
                v94 = v92;
                if (v90 == DWORD2(v204[0]))
                {
                  v95 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v204, v90 + 1, (unint64_t)v203);
                  v89 = *(unsigned int **)&v204[0];
                  *(_DWORD *)(*(_QWORD *)&v204[0] + 4 * HIDWORD(v204[0])) = *v95;
                }
                else
                {
                  v89[v90] = v93;
                }
                v90 = ++HIDWORD(v204[0]);
                v92 = v94;
              }
              ++v91;
              v92 -= 4;
            }
            while (v92);
            if (v90)
            {
              v115 = v76 + 16;
              v116 = 4 * v90;
              do
              {
                v117 = *v89;
                if ((v117 & 0x80000000) != 0)
                  v118 = COERCE__INT64((double)v117) + 0x2000000000000;
                else
                  v118 = v117 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v118, v80, v81, v82, v83, v84, v85);
                if ((*(_BYTE *)(v76 + 4) & 0xE) == 6)
                  v125 = *(_QWORD *)(v115 + 8 * v117) + 0x2000000000000;
                else
                  v125 = *(_QWORD *)(v115 + 8 * v117);
                JSC::DFG::Graph::freeze((uint64_t)this, v125, v119, v120, v121, v122, v123, v124);
                ++v89;
                v116 -= 4;
              }
              while (v116);
              v89 = *(unsigned int **)&v204[0];
            }
            if (v89)
            {
              *(_QWORD *)&v204[0] = 0;
              DWORD2(v204[0]) = 0;
              WTF::fastFree((unint64_t)v89, v79, v80, v81, v82, v83, v84, v85);
              return 0;
            }
          }
          return 0;
        }
        if (!(_DWORD)v77)
          return 0;
        v126 = 0;
        v127 = v76 + 16;
        do
        {
          if ((v126 & 0x80000000) != 0)
            v128 = COERCE__INT64((double)v126) + 0x2000000000000;
          else
            v128 = v126 | 0xFFFE000000000000;
          JSC::DFG::Graph::freeze((uint64_t)this, v128, v80, v81, v82, v83, v84, v85);
          if ((*(_BYTE *)(v76 + 4) & 0xE) == 6)
            v135 = *(_QWORD *)(v127 + 8 * v126) + 0x2000000000000;
          else
            v135 = *(_QWORD *)(v127 + 8 * v126);
          JSC::DFG::Graph::freeze((uint64_t)this, v135, v129, v130, v131, v132, v133, v134);
          result = 0;
          ++v126;
        }
        while (v77 != v126);
        return result;
      case 0x10D:
        result = 0;
        v146 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v146 == 1)
          return result;
        if (!(_DWORD)v146)
          return 1;
        if ((_DWORD)v146 != 52)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x1983790C8);
        }
        return result;
      case 0x10F:
        v176 = *((_QWORD *)a2 + 3);
        v57 = (v176 & 0xFF00FFFFFFFFFFFFLL) == 0;
        v177 = v176 & 0xFC000000000000;
        return !v57 && v177 != 0x54000000000000;
      case 0x114:
        return (JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) == 0;
      case 0x115:
        v110 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        return v110 != 352 && v110 != 349;
      case 0x13E:
      case 0x145:
        v58 = *((_QWORD *)a2 + 3);
        v59 = (v58 >> 50) & 0x3F;
        if (v59 >= 0x35 || ((0x12026001400103uLL >> (v58 >> 50)) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198379A3CLL);
        }
        return (0xDFD9FFEBFFFFDuLL >> v59) & 1;
      case 0x13F:
        v103 = *((_QWORD *)a2 + 3);
LABEL_159:
        v96 = v103 & 0xFC000000000000;
        v97 = 0x54000000000000;
        return v96 != v97;
      case 0x142:
      case 0x143:
        v21 = *((_BYTE *)a2 + 30);
        return (v21 & 0xFC) == 0;
      case 0x146:
        v172 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v172 == 28)
          return 0;
        if ((_DWORD)v172)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19837960CLL);
        }
        return 1;
      case 0x165:
LABEL_214:
        v28 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v27 = (uint64_t *)v204;
        goto LABEL_42;
      case 0x180:
      case 0x182:
        if ((_DWORD)v10 == 386)
        {
          v68 = *((unsigned __int8 *)a2 + 80);
          if (v68 == 2)
          {
            if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x198379AFCLL);
            }
            v66 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000;
            v67 = 0x20000000000000;
            return v66 != v67;
          }
          if (v68 != 1)
            return 1;
          v23 = 11;
        }
        else
        {
          v23 = 12;
        }
        v62 = BYTE2(*((_DWORD *)a2 + 18));
        if (*((_DWORD *)a2 + 18) != 9)
        {
          result = 0;
          switch(*((_DWORD *)a2 + 18))
          {
            case 3u:
              return result;
            case 7u:
              if (v62 > 1)
                return 1;
              v168 = *((_QWORD *)a2 + 3);
              v169 = *((_DWORD *)this + 41);
              if (v169 <= v168)
              {
                __break(0xC471u);
                JUMPOUT(0x198379C90);
              }
              if (v169 <= (int)v168 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198379C98);
              }
              v170 = *((_QWORD *)this + 19);
              v158 = *(_QWORD *)(v170 + 8 * *((_QWORD *)a2 + 3));
              v159 = *(_QWORD *)(v170 + 8 * (v168 + 1));
              v157 = 16400;
              goto LABEL_265;
            case 8u:
              if (v62 > 1)
                return 1;
              v142 = *((_DWORD *)a2 + 6);
              v143 = *((_DWORD *)this + 41);
              if (v143 <= v142)
              {
                __break(0xC471u);
                JUMPOUT(0x198379B8CLL);
              }
              if (v143 <= v142 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198379030);
              }
              return 0;
            case 0xAu:
              return v62 >= 2;
            default:
              return 1;
          }
        }
        if (v62 <= 1)
        {
          v63 = *((_DWORD *)a2 + 6);
          v64 = *((_DWORD *)this + 41);
          if (v64 <= v63)
          {
            __break(0xC471u);
            JUMPOUT(0x198379AECLL);
          }
          if (v64 <= v63 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198378A60);
          }
          return 0;
        }
        return 1;
      case 0x190:
        if (*((_DWORD *)a2 + 18))
          v157 = 16412;
        else
          v157 = 16411;
        v158 = *((_QWORD *)a2 + 3);
        v159 = *((_QWORD *)a2 + 4);
        v23 = 48;
LABEL_265:
        v160 = 0;
        goto LABEL_266;
      case 0x195:
        v101 = *((_DWORD *)a2 + 6);
        v102 = *((_DWORD *)this + 41);
        if (v102 <= v101)
        {
          __break(0xC471u);
          JUMPOUT(0x198379B04);
        }
        if (v102 <= v101 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198378D18);
        }
        return 0;
      case 0x198:
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v204, 55, 16416, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v28 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v27 = v203;
        goto LABEL_42;
      case 0x199:
        v144 = *((_DWORD *)a2 + 6);
        v145 = *((_DWORD *)this + 41);
        if (v145 <= v144)
        {
          __break(0xC471u);
          JUMPOUT(0x198379B6CLL);
        }
        if (v145 <= v144 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198379B74);
        }
        if (v145 <= v144 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198379060);
        }
        return 0;
      case 0x1A0:
        v53 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
        if (!v53)
          return 1;
        v54 = *(_DWORD *)(v53 + 24);
LABEL_80:
        v55 = (unsigned __int16)v54;
        if ((unsigned __int16)v54 == HIWORD(v54))
          return 0;
        v56 = HIWORD(v54);
        return !v55 && v56 == 0xFFFF;
      case 0x1A1:
        v54 = *(_DWORD *)(*((_QWORD *)a2 + 9) + 48);
        goto LABEL_80;
      case 0x1AB:
      case 0x1AC:
        if ((*((_BYTE *)a2 + 74) & 1) != 0)
          return 0;
        v23 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
        v157 = (*((_QWORD *)a2 + 9) << 15) | 0x16;
        v158 = *((_QWORD *)a2 + 3);
        v159 = *((_QWORD *)a2 + 4);
        v160 = *((_QWORD *)a2 + 5);
LABEL_266:
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v204, v23, v157, v158, v159, v160);
        v27 = v203;
        goto LABEL_41;
      case 0x1B1:
        __break(0xC471u);
        JUMPOUT(0x198379524);
      default:
        v204[0] = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v10];
        WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)v204, v203);
        if (v203[0])
          v186 = (const char *)(v203[0] + 16);
        else
          v186 = 0;
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v186);
        WTF::CString::~CString((WTF::CString *)v203, v187, v188, v189, v190, v191, v192, v193);
        __break(0xC471u);
        JUMPOUT(0x198379838);
    }
  }
  v165 = *((unsigned __int16 *)a2 + 9);
  result = 1;
  if (v165 <= 0xC9)
  {
    v195 = v165 - 101;
    if (v165 - 101 > 0x3E)
      goto LABEL_358;
    if (((1 << v195) & 0x7E0070000000000FLL) != 0)
      return result;
    if (((1 << v195) & 0x18000000000) == 0)
    {
LABEL_358:
      if (v165 - 92 >= 2)
        goto LABEL_359;
      return result;
    }
    goto LABEL_2;
  }
  if (v165 - 202 > 0x3E || ((1 << (v165 + 54)) & 0x400000000E002FEFLL) == 0)
  {
    v167 = v165 - 333;
    if (v167 > 0x3A || ((1 << v167) & 0x7A8000000000003) == 0)
    {
LABEL_359:
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
      __break(0xC471u);
      JUMPOUT(0x198379924);
    }
  }
  return result;
}

BOOL JSC::DFG::clobbersExitState(JSC::DFG *this, JSC::DFG::Graph *a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _BOOL8 result;
  unint64_t v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  unsigned int v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  unsigned int v100;
  int v101;
  int v102;
  int v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  char v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  uint64_t v139;
  unsigned int v140;
  _DWORD *v141;
  unsigned int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  const char *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v182;
  int v183;
  int v185;
  int v187;
  uint64_t v188;
  __int128 v189;

  v10 = *((unsigned __int16 *)a2 + 9);
  result = 1;
  switch(*((_WORD *)a2 + 9))
  {
    case 0x10:
    case 0x11:
    case 0x6D:
    case 0x88:
    case 0x89:
    case 0x91:
    case 0x92:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x116:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x16B:
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17E:
    case 0x17F:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
      return 0;
    case 0x12:
    case 0x14:
    case 0x15:
    case 0x117:
    case 0x1A2:
      return result;
    case 0x159:
      v133 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 40);
      if ((v133 & 1) == 0)
        goto LABEL_267;
      goto LABEL_244;
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
      v133 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 112);
      if ((v133 & 1) != 0)
LABEL_244:
        v134 = (v133 >> 1) & 3;
      else
LABEL_267:
        v134 = *(unsigned __int8 *)(v133 + 4);
      v13 = v134 == 2;
      return !v13;
    default:
      if (*((int *)this + 238) > 0)
        goto LABEL_3;
      break;
  }
  switch(*((_WORD *)a2 + 9))
  {
    case 0x5C:
    case 0x5D:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x8C:
    case 0x8D:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xD7:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0x108:
    case 0x14D:
    case 0x14E:
    case 0x180:
    case 0x182:
    case 0x184:
    case 0x185:
    case 0x186:
    case 0x187:
      LODWORD(v12) = 1;
      if (*((unsigned __int16 *)a2 + 9) <= 0xC9u)
      {
        v135 = v10 - 101;
        if ((v10 - 101) <= 0x3E)
        {
          if (((1 << v135) & 0x7E0070000000000FLL) != 0)
            goto LABEL_4;
          if (((1 << v135) & 0x18000000000) != 0)
          {
LABEL_3:
            LODWORD(v12) = 0;
            switch(*((_WORD *)a2 + 9))
            {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 0xB:
              case 0xD:
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x16:
              case 0x17:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0x20:
              case 0x21:
              case 0x23:
              case 0x24:
              case 0x25:
              case 0x26:
              case 0x27:
              case 0x28:
              case 0x36:
              case 0x37:
              case 0x38:
              case 0x39:
              case 0x3A:
              case 0x3B:
              case 0x3C:
              case 0x3D:
              case 0x3E:
              case 0x43:
              case 0x45:
              case 0x47:
              case 0x48:
              case 0x4A:
              case 0x5B:
              case 0x60:
              case 0x61:
              case 0x84:
              case 0x85:
              case 0x86:
              case 0x88:
              case 0x89:
              case 0x8A:
              case 0x8C:
              case 0x8D:
              case 0x90:
              case 0x93:
              case 0x94:
              case 0x95:
              case 0x96:
              case 0x97:
              case 0x98:
              case 0x99:
              case 0x9A:
              case 0xA4:
              case 0xA5:
              case 0xA6:
              case 0xA9:
              case 0xAA:
              case 0xAB:
              case 0xAD:
              case 0xAE:
              case 0xB3:
              case 0xB6:
              case 0xB7:
              case 0xB8:
              case 0xB9:
              case 0xBA:
              case 0xBB:
              case 0xBC:
              case 0xBD:
              case 0xBE:
              case 0xBF:
              case 0xC0:
              case 0xD6:
              case 0xE2:
              case 0xE3:
              case 0xE4:
              case 0xE5:
              case 0xEB:
              case 0xEC:
              case 0xEE:
              case 0xEF:
              case 0xF0:
              case 0x101:
              case 0x102:
              case 0x103:
              case 0x104:
              case 0x105:
              case 0x109:
              case 0x10C:
              case 0x10E:
              case 0x110:
              case 0x111:
              case 0x112:
              case 0x113:
              case 0x116:
              case 0x117:
              case 0x118:
              case 0x119:
              case 0x11A:
              case 0x11B:
              case 0x11C:
              case 0x11D:
              case 0x11E:
              case 0x11F:
              case 0x120:
              case 0x121:
              case 0x122:
              case 0x123:
              case 0x126:
              case 0x127:
              case 0x128:
              case 0x129:
              case 0x12A:
              case 0x12B:
              case 0x12C:
              case 0x12D:
              case 0x12E:
              case 0x12F:
              case 0x130:
              case 0x132:
              case 0x133:
              case 0x134:
              case 0x135:
              case 0x136:
              case 0x137:
              case 0x138:
              case 0x139:
              case 0x13A:
              case 0x144:
              case 0x148:
              case 0x149:
              case 0x14B:
              case 0x14C:
              case 0x153:
              case 0x154:
              case 0x157:
              case 0x15A:
              case 0x15B:
              case 0x15C:
              case 0x15D:
              case 0x15E:
              case 0x15F:
              case 0x160:
              case 0x161:
              case 0x162:
              case 0x163:
              case 0x164:
              case 0x166:
              case 0x16B:
              case 0x16C:
              case 0x16D:
              case 0x16E:
              case 0x16F:
              case 0x170:
              case 0x171:
              case 0x172:
              case 0x173:
              case 0x174:
              case 0x175:
              case 0x176:
              case 0x177:
              case 0x17B:
              case 0x17C:
              case 0x183:
              case 0x188:
              case 0x189:
              case 0x18A:
              case 0x18B:
              case 0x18D:
              case 0x18E:
              case 0x18F:
              case 0x191:
              case 0x192:
              case 0x193:
              case 0x197:
              case 0x19A:
              case 0x19C:
              case 0x19D:
              case 0x19E:
              case 0x19F:
              case 0x1A2:
              case 0x1A3:
              case 0x1A4:
              case 0x1A5:
              case 0x1A6:
              case 0x1A7:
              case 0x1A8:
              case 0x1A9:
              case 0x1AA:
              case 0x1AE:
              case 0x1AF:
                goto LABEL_4;
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xC:
              case 0xE:
              case 0x11:
              case 0x12:
              case 0x22:
              case 0x4B:
              case 0x54:
              case 0x5E:
              case 0x5F:
              case 0x62:
              case 0x63:
              case 0x64:
              case 0x69:
              case 0x6A:
              case 0x6B:
              case 0x6C:
              case 0x6D:
              case 0x6E:
              case 0x6F:
              case 0x70:
              case 0x71:
              case 0x72:
              case 0x73:
              case 0x74:
              case 0x75:
              case 0x76:
              case 0x77:
              case 0x78:
              case 0x79:
              case 0x7A:
              case 0x7B:
              case 0x7C:
              case 0x7D:
              case 0x7E:
              case 0x7F:
              case 0x80:
              case 0x81:
              case 0x82:
              case 0x83:
              case 0x87:
              case 0x8B:
              case 0x8E:
              case 0x8F:
              case 0x91:
              case 0x92:
              case 0x9B:
              case 0xA7:
              case 0xA8:
              case 0xAC:
              case 0xAF:
              case 0xB0:
              case 0xB1:
              case 0xB2:
              case 0xB4:
              case 0xB5:
              case 0xC3:
              case 0xC5:
              case 0xC6:
              case 0xC7:
              case 0xC8:
              case 0xC9:
              case 0xD4:
              case 0xD5:
              case 0xD8:
              case 0xD9:
              case 0xDA:
              case 0xDB:
              case 0xDC:
              case 0xDD:
              case 0xDE:
              case 0xDF:
              case 0xE0:
              case 0xF1:
              case 0xF2:
              case 0xF3:
              case 0xF4:
              case 0xF5:
              case 0xF6:
              case 0xF7:
              case 0xF8:
              case 0xF9:
              case 0xFA:
              case 0xFB:
              case 0xFC:
              case 0xFD:
              case 0xFE:
              case 0xFF:
              case 0x100:
              case 0x108:
              case 0x124:
              case 0x125:
              case 0x13B:
              case 0x13C:
              case 0x13D:
              case 0x140:
              case 0x141:
              case 0x147:
              case 0x14A:
              case 0x14D:
              case 0x14E:
              case 0x14F:
              case 0x150:
              case 0x151:
              case 0x152:
              case 0x155:
              case 0x156:
              case 0x158:
              case 0x165:
              case 0x178:
              case 0x179:
              case 0x17A:
              case 0x17D:
              case 0x17E:
              case 0x17F:
              case 0x181:
              case 0x184:
              case 0x185:
              case 0x186:
              case 0x187:
              case 0x18C:
              case 0x190:
              case 0x194:
              case 0x196:
              case 0x198:
              case 0x19B:
              case 0x1AD:
              case 0x1B0:
                goto LABEL_24;
              case 0xF:
                v59 = (_QWORD *)*((_QWORD *)a2 + 9);
                v97 = v59;
                do
                {
                  v98 = v97;
                  v97 = (_QWORD *)*v97;
                }
                while (v97);
                if (v98 != v59)
                {
                  *v59 = v98;
                  v59 = (_QWORD *)*((_QWORD *)a2 + 9);
                }
                v99 = v59;
                do
                {
                  v61 = v99;
                  v99 = (_QWORD *)*v99;
                }
                while (v99);
                goto LABEL_172;
              case 0x10:
                v127 = (_QWORD *)*((_QWORD *)a2 + 9);
                v128 = v127;
                do
                {
                  v129 = v128;
                  v128 = (_QWORD *)*v128;
                }
                while (v128);
                if (v129 != v127)
                {
                  *v127 = v129;
                  v127 = (_QWORD *)*((_QWORD *)a2 + 9);
                }
                v130 = v127;
                do
                {
                  v131 = v130;
                  v130 = (_QWORD *)*v130;
                }
                while (v130);
                if (v131 != v127)
                  *v127 = v131;
                goto LABEL_24;
              case 0x1C:
                v59 = (_QWORD *)*((_QWORD *)a2 + 9);
                v60 = v59;
                do
                {
                  v61 = v60;
                  v60 = (_QWORD *)*v60;
                }
                while (v60);
LABEL_172:
                if (v61 == v59)
                  goto LABEL_34;
                LODWORD(v12) = 0;
                *v59 = v61;
                goto LABEL_4;
              case 0x29:
                v50 = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 29;
                goto LABEL_242;
              case 0x2A:
              case 0x142:
              case 0x143:
                v27 = *((_BYTE *)a2 + 30);
                goto LABEL_49;
              case 0x2B:
              case 0x2D:
              case 0x2F:
              case 0x32:
              case 0x34:
              case 0x55:
              case 0x56:
              case 0x57:
              case 0x58:
              case 0x59:
              case 0x5A:
                v15 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
                switch((_DWORD)v15)
                {
                  case 0x1A:
                    v16 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
                    v17 = 0x68000000000000;
                    break;
                  case 0x1C:
                    v16 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
                    v17 = 0x70000000000000;
                    break;
                  case 0x1B:
                    v16 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
                    v17 = 0x6C000000000000;
                    break;
                  default:
                    goto LABEL_24;
                }
LABEL_75:
                if (v16 == v17)
                  goto LABEL_34;
                goto LABEL_24;
              case 0x2C:
              case 0x2E:
              case 0x30:
              case 0x31:
              case 0x33:
              case 0x35:
                if ((*((_BYTE *)a2 + 30) & 0xFC) == 0 || (*((_BYTE *)a2 + 38) & 0xFC) == 0)
                  goto LABEL_24;
                goto LABEL_34;
              case 0x3F:
                LODWORD(v12) = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 3 < 0xFFFFFFFE;
                goto LABEL_4;
              case 0x40:
              case 0x42:
              case 0x44:
                LODWORD(v12) = 0;
                v26 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
                if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) > 0x30)
                {
                  if ((_DWORD)v26 == 49 || (_DWORD)v26 == 52)
                    goto LABEL_4;
                }
                else
                {
                  if (!(_DWORD)v26)
                  {
LABEL_24:
                    LODWORD(v12) = 1;
                    goto LABEL_4;
                  }
                  if ((_DWORD)v26 == 1)
                    goto LABEL_4;
                }
                JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 491, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
                __break(0xC471u);
                JUMPOUT(0x19837A9A8);
              case 0x41:
                v55 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
                v56 = v55 > 0x34;
                v57 = (1 << v55) & 0x12000000000002;
                LODWORD(v12) = v56 || v57 == 0;
                goto LABEL_4;
              case 0x46:
                v125 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
                v20 = (_DWORD)v125 == 1 || (_DWORD)v125 == 49;
                goto LABEL_27;
              case 0x49:
              case 0x4C:
              case 0x4D:
              case 0x4E:
              case 0x4F:
              case 0x50:
              case 0x51:
              case 0x131:
                v18 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
                v19 = 0xC4000000000000;
                goto LABEL_26;
              case 0x52:
              case 0x53:
                v35 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
                if (v35 > 0x34)
                  goto LABEL_73;
                if (((1 << v35) & 0x1200001C000002) != 0)
                  goto LABEL_34;
                if (v35)
                {
LABEL_73:
                  JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 849, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
                  __break(0xC471u);
                  JUMPOUT(0x19837A938);
                }
                goto LABEL_24;
              case 0x5C:
              case 0x5D:
                v29 = *((_DWORD *)a2 + 18);
                v30 = *((_DWORD *)a2 + 14) & 7;
                if (v30 >= 2 && v30 - 3 >= 3)
                {
                  if (v30 == 7)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19837B468);
                  }
                  __break(0xC471u);
                  JUMPOUT(0x19837B6F4);
                }
                LODWORD(v12) = 0;
                switch(*((_DWORD *)a2 + 18))
                {
                  case 0u:
                  case 1u:
                  case 2u:
                  case 4u:
                  case 0x17u:
                  case 0x18u:
                    goto LABEL_24;
                  case 3u:
                  case 6u:
                    goto LABEL_4;
                  case 5u:
                    LODWORD(v12) = BYTE2(v29) - 3 < 2;
                    goto LABEL_4;
                  case 7u:
                    LODWORD(v12) = 1;
                    if (BYTE2(v29) > 3u || BYTE2(v29) == 2)
                      goto LABEL_4;
                    v161 = *((_DWORD *)a2 + 6);
                    v162 = *((_DWORD *)this + 41);
                    if (v162 <= v161)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837BAACLL);
                    }
                    if (v162 <= v161 + 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837B4CCLL);
                    }
                    return result;
                  case 8u:
                    LODWORD(v12) = 1;
                    if (BYTE2(v29) > 3u || BYTE2(v29) == 2)
                      goto LABEL_4;
                    v163 = *((_DWORD *)a2 + 6);
                    v164 = *((_DWORD *)this + 41);
                    if (v164 <= v163)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837BAB4);
                    }
                    if (v164 <= v163 + 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837B504);
                    }
                    return result;
                  case 9u:
                    LODWORD(v12) = 1;
                    if (BYTE2(v29) > 3u || BYTE2(v29) == 2)
                      goto LABEL_4;
                    v167 = *((_DWORD *)a2 + 6);
                    v168 = *((_DWORD *)this + 41);
                    if (v168 <= v167)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837BABCLL);
                    }
                    if (v168 <= v167 + 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837B578);
                    }
                    return result;
                  case 0xAu:
                  case 0xBu:
                    LODWORD(v12) = BYTE2(v29) > 1u;
                    goto LABEL_4;
                  case 0xCu:
                    if (BYTE2(v29) > 1u)
                      goto LABEL_24;
                    v165 = *((_DWORD *)a2 + 6);
                    v166 = *((_DWORD *)this + 41);
                    if (v166 <= v165)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837BAC4);
                    }
                    if (v166 <= v165 + 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837B530);
                    }
                    return result;
                  case 0xDu:
                    v169 = *((_DWORD *)a2 + 6);
                    v170 = *((_DWORD *)this + 41);
                    if (v170 <= v169)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837BA9CLL);
                    }
                    if (v170 <= v169 + 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837B59CLL);
                    }
                    goto LABEL_34;
                  case 0xEu:
                  case 0xFu:
                  case 0x10u:
                  case 0x11u:
                  case 0x12u:
                  case 0x13u:
                  case 0x14u:
                  case 0x15u:
                  case 0x16u:
                    if ((v29 & 0x40000000) != 0)
                      goto LABEL_24;
                    v31 = *((_DWORD *)a2 + 6);
                    v32 = *((_DWORD *)this + 41);
                    if (v32 <= v31)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837B9F4);
                    }
                    if (v32 <= v31 + 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837A818);
                    }
                    return result;
                  case 0x19u:
                    JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 1115, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
                    __break(0xC471u);
                    JUMPOUT(0x19837B860);
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x19837B818);
                }
                goto LABEL_34;
              case 0x65:
              case 0x66:
              case 0x67:
              case 0x68:
                v21 = *((_DWORD *)a2 + 6);
                v22 = *((_DWORD *)this + 41);
                if (v22 > v21)
                {
                  if (v22 > v21 + 1)
                  {
                    if (v22 > v21 + 2)
                    {
                      v23 = *((_DWORD *)a2 + 14) & 7;
                      if (v23 >= 2 && v23 - 3 >= 3)
                      {
                        if (v23 == 7)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19837B2E4);
                        }
                        __break(0xC471u);
                        JUMPOUT(0x19837B6D4);
                      }
                      LODWORD(v12) = 0;
                      switch(*((_DWORD *)a2 + 18))
                      {
                        case 0u:
                        case 1u:
                        case 2u:
                        case 4u:
                        case 5u:
                        case 6u:
                        case 7u:
                        case 8u:
                        case 9u:
                        case 0xAu:
                        case 0xBu:
                        case 0xCu:
                        case 0xDu:
                        case 0xEu:
                        case 0xFu:
                        case 0x10u:
                        case 0x11u:
                        case 0x12u:
                        case 0x13u:
                        case 0x14u:
                        case 0x15u:
                        case 0x16u:
                        case 0x17u:
                        case 0x18u:
                          goto LABEL_24;
                        case 3u:
                          goto LABEL_4;
                        case 0x19u:
                          JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 1254, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
                          __break(0xC471u);
                          JUMPOUT(0x19837A70CLL);
                        default:
                          __break(0xC471u);
                          JUMPOUT(0x19837B488);
                      }
                    }
                    __break(0xC471u);
                    JUMPOUT(0x19837B888);
                  }
                  __break(0xC471u);
                  JUMPOUT(0x19837B880);
                }
                __break(0xC471u);
                JUMPOUT(0x19837B878);
              case 0x9C:
                v64 = *((_QWORD *)a2 + 9);
                v65 = *(unsigned int *)(v64 + 20);
                v66 = (v65 << 6) - 64;
                while (v65)
                {
                  if (--v65 >= (unint64_t)*(unsigned int *)(v64 + 20))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19837B908);
                  }
                  v67 = v66 - 64;
                  v68 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v64 + 8) + v66));
                  LODWORD(v12) = 1;
                  v66 = v67;
                  if (v68)
                    goto LABEL_4;
                }
                goto LABEL_24;
              case 0x9D:
                JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9));
                goto LABEL_24;
              case 0x9E:
                v123 = *((_DWORD *)a2 + 18);
                if (v123 - 5 < 9 || v123 == 3)
                  goto LABEL_34;
                if (v123 != 25)
                {
                  v187 = JSC::DFG::toTypedArrayType(v123);
                  if (v187 == 12 || !v187)
                  {
                    JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 1592, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
                    __break(0xC471u);
                    JUMPOUT(0x19837BA94);
                  }
                }
                LODWORD(v12) = (v123 >> 30) & 1;
                goto LABEL_4;
              case 0x9F:
                v49 = *((_DWORD *)a2 + 18);
                if (v49 != 25)
                {
                  v180 = JSC::DFG::toTypedArrayType(v49);
                  if (v180 == 12 || v180 == 0)
                  {
                    JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 1604, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
                    __break(0xC471u);
                    JUMPOUT(0x19837B8F0);
                  }
                }
                if ((v49 & 0x40000000) != 0)
                {
                  JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 1605, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
                  __break(0xC471u);
                  JUMPOUT(0x19837AAF0);
                }
                goto LABEL_34;
              case 0xA0:
                v104 = *((_DWORD *)a2 + 18);
                if (v104 == 25)
                {
                  if ((v104 & 0x40000000) != 0)
                    goto LABEL_24;
                  goto LABEL_34;
                }
                v182 = *((_DWORD *)a2 + 18);
                v183 = JSC::DFG::toTypedArrayType(v104);
                if (v183 == 12 || v183 == 0)
                {
                  if (v182 != 3)
                  {
                    JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 1612, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
                    __break(0xC471u);
                    JUMPOUT(0x19837B96CLL);
                  }
                  goto LABEL_34;
                }
                LODWORD(v12) = 0;
                if (v182 != 3 && (v104 & 0x40000000) != 0)
                  goto LABEL_24;
                goto LABEL_4;
              case 0xA1:
                if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19837AB20);
                }
                goto LABEL_34;
              case 0xA2:
                v100 = *((_DWORD *)a2 + 18);
                if (v100 == 25)
                  goto LABEL_200;
                v101 = *((_DWORD *)a2 + 18);
                v102 = JSC::DFG::toTypedArrayType(v100);
                if (v102 != 12 && v102 != 0)
                  goto LABEL_382;
                if (v101 != 3)
                {
                  JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 1437, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
                  __break(0xC471u);
                  JUMPOUT(0x19837AE94);
                }
                goto LABEL_34;
              case 0xA3:
                v100 = *((_DWORD *)a2 + 18);
                if (v100 == 25)
                  goto LABEL_200;
                v101 = *((_DWORD *)a2 + 18);
                v185 = JSC::DFG::toTypedArrayType(v100);
                if (v185 == 12 || v185 == 0)
                {
                  if (v101 != 3)
                  {
                    JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 1455, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
                    __break(0xC471u);
                    JUMPOUT(0x19837B9D0);
                  }
                  goto LABEL_34;
                }
LABEL_382:
                if (v101 == 3)
                  goto LABEL_34;
                if (*((_WORD *)a2 + 9) == 146)
                  v100 = *((_DWORD *)a2 + 20);
                else
                  v100 = *((_DWORD *)a2 + 18);
LABEL_200:
                LODWORD(v12) = (v100 >> 30) & 1;
                goto LABEL_4;
              case 0xC1:
                v107 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
                v56 = v107 > 0x31;
                v108 = (1 << v107) & 0x2000000200002;
                if (!v56 && v108 != 0)
                {
                  LODWORD(v12) = 0;
                  v110 = *((_QWORD *)a2 + 4);
                  if ((v110 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v110 & 0xFC000000000000) == 0x4000000000000)
                    goto LABEL_4;
                }
                goto LABEL_24;
              case 0xC2:
                v50 = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 15;
LABEL_242:
                LODWORD(v12) = v50 < 0xFFFFFFFD;
                goto LABEL_4;
              case 0xC4:
                v126 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
                LODWORD(v12) = 1;
                if ((_DWORD)v126 && (_DWORD)v126 != 11)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19837B0C0);
                }
                goto LABEL_4;
              case 0xCA:
              case 0xCB:
              case 0xCC:
              case 0xCD:
              case 0xCF:
              case 0xD0:
              case 0xD1:
              case 0xD2:
              case 0xD3:
                if ((v10 - 202) >= 0xA || ((0x3EFu >> (v10 + 54)) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19837B6B4);
                }
                if ((*((_BYTE *)a2 + 56) & 0x10) != 0
                  && *((_DWORD *)this + 41) <= (dword_1991556C8[(__int16)(v10 - 202)] + *((_DWORD *)a2 + 6)))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19837B234);
                }
                goto LABEL_24;
              case 0xCE:
                v95 = (uint64_t *)((char *)a2 + 24);
                if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
                {
                  v171 = *v95;
                  if (*((_DWORD *)this + 41) <= v171)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19837BAA4);
                  }
                  v95 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v171);
                }
                v18 = *v95 & 0xFC000000000000;
                v19 = 0x4000000000000;
                goto LABEL_26;
              case 0xD7:
                if (*((unsigned __int8 *)a2 + 72) - 7 >= 3)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19837B12CLL);
                }
                goto LABEL_34;
              case 0xE1:
                v48 = *((_QWORD *)a2 + 5);
                goto LABEL_114;
              case 0xE6:
                v12 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
                if (v12 >= 3)
                {
                  JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 467, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
                  __break(0xC471u);
                  JUMPOUT(0x19837B77CLL);
                }
                LODWORD(v12) = 1u >> (8 * v12);
                goto LABEL_4;
              case 0xE7:
              case 0xE8:
              case 0xE9:
              case 0xEA:
              case 0xED:
                if ((*((_BYTE *)a2 + 30) & 0xFC) != 0)
                  goto LABEL_34;
                v27 = *((_BYTE *)a2 + 38);
LABEL_49:
                LODWORD(v12) = (v27 & 0xFC) == 0;
                goto LABEL_4;
              case 0x106:
                v111 = *((_QWORD *)a2 + 4);
                v112 = v111;
                if ((v111 & 0x80000000) != 0)
                {
                  JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v111) + 0x2000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
                }
                else
                {
                  JSC::DFG::Graph::freeze((uint64_t)this, v111 | 0xFFFE000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
                  if (!(_DWORD)v111)
                    goto LABEL_34;
                }
                v119 = *((unsigned __int16 *)a2 + 9);
                switch(v119)
                {
                  case 267:
                    goto LABEL_328;
                  case 264:
                    v120 = *((_DWORD *)a2 + 19) & 0xF;
                    break;
                  case 352:
LABEL_328:
                    v120 = *((_DWORD *)a2 + 21) & 0xF;
                    break;
                  default:
                    v120 = *((_DWORD *)a2 + 18);
                    break;
                }
                LODWORD(v12) = 0;
                if (v120 <= 0x19u && ((1 << v120) & 0x2A003F0) != 0)
                {
                  v12 = *((unsigned int *)this + 107);
                  if (v111 >= v12)
                  {
                    if ((_DWORD)v12)
                    {
                      v142 = (unsigned int *)*((_QWORD *)this + 52);
                      v143 = 4 * v12;
                      do
                      {
                        v144 = *v142;
                        if (v144 < v111)
                        {
                          if (*((_DWORD *)this + 41) <= (v144 + *((_DWORD *)a2 + 6)))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19837B890);
                          }
                          if ((v144 & 0x80000000) != 0)
                            v145 = COERCE__INT64((double)v144) + 0x2000000000000;
                          else
                            v145 = v144 | 0xFFFE000000000000;
                          JSC::DFG::Graph::freeze((uint64_t)this, v145, v113, v114, v115, v116, v117, v118);
                        }
                        LODWORD(v12) = 0;
                        ++v142;
                        v143 -= 4;
                      }
                      while (v143);
                    }
                  }
                  else
                  {
                    v121 = 0;
                    do
                    {
                      if (*((_DWORD *)this + 41) <= (v121 + *((_DWORD *)a2 + 6)))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19837B870);
                      }
                      if ((v121 & 0x80000000) != 0)
                        v122 = COERCE__INT64((double)v121) + 0x2000000000000;
                      else
                        v122 = v121 | 0xFFFE000000000000;
                      JSC::DFG::Graph::freeze((uint64_t)this, v122, v113, v114, v115, v116, v117, v118);
                      LODWORD(v12) = 0;
                      ++v121;
                    }
                    while (v112 != v121);
                  }
                }
                goto LABEL_4;
              case 0x107:
                v12 = *((unsigned int *)a2 + 8);
                if (*((_DWORD *)a2 + 8))
                {
                  v41 = *((_QWORD *)a2 + 3);
                  v42 = *((_DWORD *)this + 41);
                  v43 = v42 >= v41;
                  LODWORD(v44) = v42 - v41;
                  if (v43)
                    v44 = v44;
                  else
                    v44 = 0;
                  v45 = v12 - 1;
                  do
                  {
                    if (!v44)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19837B868);
                    }
                    LODWORD(v12) = 0;
                    v46 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v41++) & 0xFF00FFFFFFFFFFFFLL)
                                              + 0x12);
                    v47 = v46 == 350 || v45-- == 0;
                    --v44;
                  }
                  while (!v47);
                }
                goto LABEL_4;
              case 0x10A:
                v62 = *((unsigned int *)a2 + 20);
                if ((v62 & 0x80000000) != 0)
                  v63 = COERCE__INT64((double)v62) + 0x2000000000000;
                else
                  v63 = v62 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v63, (uint64_t)a3, a4, a5, a6, a7, a8);
                goto LABEL_34;
              case 0x10B:
                v69 = (uint64_t *)*((_QWORD *)a2 + 9);
                v70 = *v69;
                v71 = *(unsigned int *)(*v69 + 8);
                if ((v71 & 0x80000000) != 0)
                  v72 = COERCE__INT64((double)v71) + 0x2000000000000;
                else
                  v72 = v71 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v72, (uint64_t)a3, a4, a5, a6, a7, a8);
                v80 = *((unsigned __int16 *)a2 + 9);
                switch(v80)
                {
                  case 267:
                    goto LABEL_327;
                  case 264:
                    v81 = *((_DWORD *)a2 + 19) & 0xF;
                    break;
                  case 352:
LABEL_327:
                    v81 = *((_DWORD *)a2 + 21) & 0xF;
                    break;
                  default:
                    v81 = *((_DWORD *)a2 + 18);
                    break;
                }
                LODWORD(v12) = 0;
                if (v81 > 0x19u || ((1 << v81) & 0x2A003F0) == 0)
                  goto LABEL_4;
                v82 = *((unsigned int *)this + 107);
                if (v82 <= v71)
                {
                  v189 = 0uLL;
                  if ((_DWORD)v82)
                  {
                    v136 = 0;
                    v137 = 0;
                    v138 = (unsigned int *)*((_QWORD *)this + 52);
                    v139 = 4 * v82;
                    do
                    {
                      v140 = *v138;
                      LODWORD(v188) = v140;
                      if (v140 < v71)
                      {
                        if (v137 == DWORD2(v189))
                        {
                          v141 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v189, v137 + 1, (unint64_t)&v188);
                          v136 = (unsigned int *)v189;
                          *(_DWORD *)(v189 + 4 * HIDWORD(v189)) = *v141;
                        }
                        else
                        {
                          v136[v137] = v140;
                        }
                        v137 = ++HIDWORD(v189);
                      }
                      ++v138;
                      v139 -= 4;
                    }
                    while (v139);
                    if (v137)
                    {
                      v146 = v70 + 16;
                      v147 = 4 * v137;
                      do
                      {
                        v148 = *v136;
                        if ((v148 & 0x80000000) != 0)
                          v149 = COERCE__INT64((double)v148) + 0x2000000000000;
                        else
                          v149 = v148 | 0xFFFE000000000000;
                        JSC::DFG::Graph::freeze((uint64_t)this, v149, v74, v75, v76, v77, v78, v79);
                        if ((*(_BYTE *)(v70 + 4) & 0xE) == 6)
                          v156 = *(_QWORD *)(v146 + 8 * v148) + 0x2000000000000;
                        else
                          v156 = *(_QWORD *)(v146 + 8 * v148);
                        JSC::DFG::Graph::freeze((uint64_t)this, v156, v150, v151, v152, v153, v154, v155);
                        ++v136;
                        v147 -= 4;
                      }
                      while (v147);
                      v136 = (unsigned int *)v189;
                    }
                    if (v136)
                    {
                      *(_QWORD *)&v189 = 0;
                      DWORD2(v189) = 0;
                      WTF::fastFree((unint64_t)v136, v73, v74, v75, v76, v77, v78, v79);
                    }
                  }
                }
                else if ((_DWORD)v71)
                {
                  v83 = 0;
                  v84 = v70 + 16;
                  do
                  {
                    if ((v83 & 0x80000000) != 0)
                      v85 = COERCE__INT64((double)v83) + 0x2000000000000;
                    else
                      v85 = v83 | 0xFFFE000000000000;
                    JSC::DFG::Graph::freeze((uint64_t)this, v85, v74, v75, v76, v77, v78, v79);
                    if ((*(_BYTE *)(v70 + 4) & 0xE) == 6)
                      v92 = *(_QWORD *)(v84 + 8 * v83) + 0x2000000000000;
                    else
                      v92 = *(_QWORD *)(v84 + 8 * v83);
                    JSC::DFG::Graph::freeze((uint64_t)this, v92, v86, v87, v88, v89, v90, v91);
                    LODWORD(v12) = 0;
                    ++v83;
                  }
                  while (v71 != v83);
                  goto LABEL_4;
                }
LABEL_34:
                LODWORD(v12) = 0;
                goto LABEL_4;
              case 0x10D:
                v105 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
                if ((_DWORD)v105 == 52 || (_DWORD)v105 == 1)
                  goto LABEL_34;
                if ((_DWORD)v105)
                {
                  JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 1738, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
                  __break(0xC471u);
                  JUMPOUT(0x19837AF24);
                }
                goto LABEL_24;
              case 0x10F:
                v93 = *((_QWORD *)a2 + 3);
                v13 = (v93 & 0xFF00FFFFFFFFFFFFLL) == 0;
                v94 = v93 & 0xFC000000000000;
                v20 = v13 || v94 == 0x54000000000000;
                goto LABEL_27;
              case 0x114:
                LODWORD(v12) = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8) ^ 1;
                goto LABEL_4;
              case 0x115:
                v52 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                v20 = v52 == 352 || v52 == 349;
                goto LABEL_27;
              case 0x13E:
              case 0x145:
                v33 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
                if (v33 > 0x34)
                  goto LABEL_64;
                if (((1 << v33) & 0x12026001400002) != 0)
                  goto LABEL_34;
                if (((1 << v33) & 0x101) == 0)
                {
LABEL_64:
                  __break(0xC471u);
                  JUMPOUT(0x19837A87CLL);
                }
                goto LABEL_24;
              case 0x13F:
                v48 = *((_QWORD *)a2 + 3);
LABEL_114:
                v18 = v48 & 0xFC000000000000;
                v19 = 0x54000000000000;
LABEL_26:
                v20 = v18 == v19;
                goto LABEL_27;
              case 0x146:
                v51 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
                if ((_DWORD)v51 == 28)
                  goto LABEL_34;
                if ((_DWORD)v51)
                {
                  JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 831, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
                  __break(0xC471u);
                  JUMPOUT(0x19837ABA4);
                }
                goto LABEL_24;
              case 0x159:
                v24 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 40);
                if ((v24 & 1) == 0)
                  goto LABEL_109;
                goto LABEL_42;
              case 0x167:
              case 0x168:
              case 0x169:
              case 0x16A:
                v24 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 112);
                if ((v24 & 1) != 0)
LABEL_42:
                  v25 = (v24 >> 1) & 3;
                else
LABEL_109:
                  v25 = *(unsigned __int8 *)(v24 + 4);
                v20 = v25 == 2;
                goto LABEL_27;
              case 0x180:
              case 0x182:
                if ((_DWORD)v10 != 386 || (v34 = *((unsigned __int8 *)a2 + 80), v34 == 1))
                {
                  LODWORD(v12) = 0;
                  v36 = BYTE2(*((_DWORD *)a2 + 18));
                  switch(*((_DWORD *)a2 + 18))
                  {
                    case 3u:
                      goto LABEL_4;
                    case 7u:
                      if (v36 > 1)
                        goto LABEL_24;
                      v37 = *((_DWORD *)a2 + 6);
                      v38 = *((_DWORD *)this + 41);
                      if (v38 <= v37)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19837BA18);
                      }
                      if (v38 <= v37 + 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19837AA18);
                      }
                      goto LABEL_34;
                    case 8u:
                      if (v36 > 1)
                        goto LABEL_24;
                      v157 = *((_DWORD *)a2 + 6);
                      v158 = *((_DWORD *)this + 41);
                      if (v158 <= v157)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19837BA20);
                      }
                      if (v158 <= v157 + 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19837B3E4);
                      }
                      goto LABEL_34;
                    case 9u:
                      if (v36 > 1)
                        goto LABEL_24;
                      v159 = *((_DWORD *)a2 + 6);
                      v160 = *((_DWORD *)this + 41);
                      if (v160 <= v159)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19837BA28);
                      }
                      if (v160 <= v159 + 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19837B410);
                      }
                      goto LABEL_34;
                    case 0xAu:
                      if (v36 < 2)
                        goto LABEL_34;
                      goto LABEL_24;
                    default:
                      goto LABEL_24;
                  }
                }
                if (v34 != 2)
                  goto LABEL_24;
                if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19837B9FCLL);
                }
                v16 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000;
                v17 = 0x20000000000000;
                goto LABEL_75;
              case 0x195:
                v39 = *((_DWORD *)a2 + 6);
                v40 = *((_DWORD *)this + 41);
                if (v40 <= v39)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19837B898);
                }
                if (v40 <= v39 + 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19837AA3CLL);
                }
                goto LABEL_24;
              case 0x199:
                v53 = *((_DWORD *)a2 + 6);
                v54 = *((_DWORD *)this + 41);
                if (v54 <= v53)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19837B8F8);
                }
                if (v54 <= v53 + 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19837B900);
                }
                if (v54 <= v53 + 2)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19837AC00);
                }
                goto LABEL_24;
              case 0x1A0:
                v132 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
                if (!v132)
                  goto LABEL_24;
                v96 = *(_DWORD *)(v132 + 24);
LABEL_165:
                v20 = (unsigned __int16)v96 == HIWORD(v96);
LABEL_27:
                LODWORD(v12) = !v20;
                goto LABEL_4;
              case 0x1A1:
                v96 = *(_DWORD *)(*((_QWORD *)a2 + 9) + 48);
                goto LABEL_165;
              case 0x1AB:
              case 0x1AC:
                if ((*((_BYTE *)a2 + 74) & 1) != 0)
                  goto LABEL_24;
                LODWORD(v12) = 0;
                v28 = *((_DWORD *)a2 + 14) & 7;
                if (v28 >= 2 && v28 - 3 >= 3)
                {
                  if (v28 == 7)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19837A7ACLL);
                  }
                  __break(0xC471u);
                  JUMPOUT(0x19837B714);
                }
                goto LABEL_4;
              case 0x1B1:
                __break(0xC471u);
                JUMPOUT(0x19837B734);
              default:
                v189 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v10];
                WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v189, &v188);
                if (v188)
                  v172 = (const char *)(v188 + 16);
                else
                  v172 = 0;
                JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 2279, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v172);
                WTF::CString::~CString((WTF::CString *)&v188, v173, v174, v175, v176, v177, v178, v179);
                __break(0xC471u);
                JUMPOUT(0x19837B7F8);
            }
          }
        }
        if ((v10 - 92) >= 2)
          goto LABEL_250;
      }
      else if ((v10 - 202) > 0x3E || ((1 << (v10 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v14 = v10 - 333;
        if (v14 > 0x3A || ((1 << v14) & 0x7A8000000000003) == 0)
        {
LABEL_250:
          JSC::DFG::Graph::logAssertionFailure(this, a2, "./dfg/DFGClobberize.h", 191, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:114:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x19837B200);
        }
      }
LABEL_4:
      v13 = (_DWORD)v12 == 0;
      return !v13;
    default:
      goto LABEL_3;
  }
}

uint64_t JSC::DFG::CodeOriginPool::addCodeOrigin(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = (uint64_t *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v4)
  {
    v5 = 0;
LABEL_10:
    if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
    {
      v13 = (uint64_t *)WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v5 + 1, (unint64_t)a2);
      v14 = *(unsigned int *)(a1 + 20);
      LODWORD(v4) = *(_DWORD *)(a1 + 20);
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *v13;
      if ((*v13 & 1) != 0)
      {
        v29 = *(unsigned int *)(a1 + 20);
        v30 = *(_QWORD *)(a1 + 8);
        v23 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        if ((v16 & 2) != 0
          || ((v24 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v24 != 0x3FFFFFFF)
            ? (v25 = (_DWORD)v24 == -1)
            : (v25 = 1),
              v25))
        {
          v26 = 2;
        }
        else if (v24 >> 28)
        {
          v28 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v28 = v23;
          *(_DWORD *)(v28 + 8) = v24;
          LODWORD(v4) = *(_DWORD *)(a1 + 20);
          v26 = 1;
          v23 = v28;
        }
        else
        {
          v26 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
          v23 = v24 << 36;
        }
        v16 = v23 | v26;
        v14 = v29;
        v15 = v30;
      }
      *(_QWORD *)(v15 + 8 * v14) = v16;
    }
    else
    {
      v10 = *v3;
      v11 = *a2;
      if ((*a2 & 1) != 0)
      {
        v19 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
        if ((v11 & 2) != 0
          || ((v20 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v20 != 0x3FFFFFFF)
            ? (v21 = (_DWORD)v20 == -1)
            : (v21 = 1),
              v21))
        {
          v22 = 2;
        }
        else if (v20 >> 28)
        {
          v27 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
          v31 = v5;
          v19 = WTF::fastMalloc((WTF *)0x10);
          v5 = v31;
          *(_QWORD *)v19 = v27;
          *(_DWORD *)(v19 + 8) = v20;
          LODWORD(v4) = *(_DWORD *)(a1 + 20);
          v22 = 1;
        }
        else
        {
          v22 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
          v19 = v20 << 36;
        }
        v11 = v19 | v22;
      }
      *(_QWORD *)(v10 + 8 * v5) = v11;
    }
    LODWORD(v4) = v4 + 1;
    *(_DWORD *)(a1 + 20) = v4;
    return (v4 - 1);
  }
  v5 = *(unsigned int *)(a1 + 20);
  v6 = *(_QWORD *)(*v3 + 8 * v4 - 8);
  v7 = *a2;
  if (v6 != *a2)
  {
    if ((v6 & 2) != 0)
    {
      LODWORD(v8) = -1;
    }
    else if ((v6 & 1) != 0)
    {
      LODWORD(v8) = *(_DWORD *)((v6 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v8 = v6 >> 36;
    }
    if ((v7 & 2) != 0)
    {
      LODWORD(v9) = -1;
    }
    else if ((v7 & 1) != 0)
    {
      LODWORD(v9) = *(_DWORD *)((v7 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v9 = v7 >> 36;
    }
    if ((_DWORD)v8 != (_DWORD)v9)
      goto LABEL_10;
    v17 = (_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 1) != 0)
      v17 = (_QWORD *)*v17;
    v18 = (_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 1) != 0)
      v18 = (_QWORD *)*v18;
    if (v17 != v18)
      goto LABEL_10;
  }
  return (v4 - 1);
}

uint64_t JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = (uint64_t *)(a1 + 8);
  result = *(unsigned int *)(a1 + 20);
  v5 = result;
  if ((_DWORD)result == *(_DWORD *)(a1 + 16))
  {
    v8 = (uint64_t *)WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, result + 1, (unint64_t)a2);
    v9 = *(unsigned int *)(a1 + 20);
    result = v9;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *v8;
    if ((v11 & 1) != 0)
    {
      v23 = *(unsigned int *)(a1 + 20);
      v24 = *(_QWORD *)(a1 + 8);
      v16 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      if ((v11 & 2) != 0
        || ((v17 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v17 != 0x3FFFFFFF)
          ? (v18 = (_DWORD)v17 == -1)
          : (v18 = 1),
            v18))
      {
        v19 = 2;
      }
      else if (v17 >> 28)
      {
        v22 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v22 = v16;
        *(_DWORD *)(v22 + 8) = v17;
        result = *(unsigned int *)(a1 + 20);
        v19 = 1;
        v16 = v22;
      }
      else
      {
        v19 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
        v16 = v17 << 36;
      }
      v11 = v16 | v19;
      v9 = v23;
      v10 = v24;
    }
    *(_QWORD *)(v10 + 8 * v9) = v11;
  }
  else
  {
    v6 = *v3;
    v7 = *a2;
    if ((*a2 & 1) != 0)
    {
      v12 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      if ((v7 & 2) != 0
        || ((v13 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v13 != 0x3FFFFFFF)
          ? (v14 = (_DWORD)v13 == -1)
          : (v14 = 1),
            v14))
      {
        v15 = 2;
      }
      else if (v13 >> 28)
      {
        v25 = v6;
        v20 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
        v21 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v21 = v20;
        *(_DWORD *)(v21 + 8) = v13;
        result = *(unsigned int *)(a1 + 20);
        v15 = 1;
        v12 = v21;
        v6 = v25;
      }
      else
      {
        v15 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
        v12 = v13 << 36;
      }
      v7 = v12 | v15;
    }
    *(_QWORD *)(v6 + 8 * v5) = v7;
  }
  *(_DWORD *)(a1 + 20) = result + 1;
  return result;
}

uint64_t JSC::DFG::CodeOriginPool::addDisposableCallSiteIndex(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9)
  {
    v11 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * v9 - 4);
    *(_DWORD *)(a1 + 36) = v9 - 1;
    JSC::CodeOrigin::operator=((uint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v11), a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 16))
    {
      WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::CodeOrigin&>(a1 + 8, (unint64_t)a2);
      return (*(_DWORD *)(a1 + 20) - 1);
    }
    else
    {
      JSC::CodeOrigin::CodeOrigin((uint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v10), (const JSC::CodeOrigin *)a2);
      v11 = *(unsigned int *)(a1 + 20);
      *(_DWORD *)(a1 + 20) = v11 + 1;
    }
  }
  return v11;
}

uint64_t *JSC::CodeOrigin::operator=(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v10 = *a1;
    if ((*a1 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v11 = *a2;
    if ((*a2 & 1) != 0)
    {
      v13 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      if ((v11 & 2) != 0
        || ((v14 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v14 != 0x3FFFFFFF)
          ? (v15 = (_DWORD)v14 == -1)
          : (v15 = 1),
            v15))
      {
        v16 = 2;
      }
      else if (v14 >> 28)
      {
        v17 = v14;
        v18 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v18 = v13;
        *(_DWORD *)(v18 + 8) = v17;
        v16 = 1;
        v13 = v18;
      }
      else
      {
        v16 = v13;
        v13 = v14 << 36;
      }
      v11 = v13 | v16;
    }
    *a1 = v11;
  }
  return a1;
}

{
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v10 = *a1;
    if ((*a1 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v11 = *a2;
    *a2 = 0;
    *a1 = v11;
  }
  return a1;
}

void JSC::DFG::CodeOriginPool::removeDisposableCallSiteIndex(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  v8 = a2;
  if (a2 >= (unint64_t)*(unsigned int *)(a1 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x19837D2D4);
  }
  v19 = a2;
  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 32))
  {
    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(a1 + 24, (unint64_t)&v19);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v10) = a2;
    ++*(_DWORD *)(a1 + 36);
  }
  v18 = 2;
  JSC::CodeOrigin::operator=((uint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v8), &v18, a3, a4, a5, a6, a7, a8);
  if ((v18 & 1) != 0 && (v18 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v18 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
}

void JSC::DFG::addBytecodeLiveness(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t StatusReg;
  uint64_t v13;
  char v14;
  unint64_t v15;
  int v16;
  char v17;
  JSC::UnlinkedCodeBlock ***v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  JSC::UnlinkedCodeBlock **v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  unsigned int v76;
  BOOL v77;
  int v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  JSC::BytecodeLivenessAnalysis *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t ii;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  BOOL v121;
  int v122;
  int v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  size_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t i;
  uint64_t v163;
  uint64_t v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  void *v179;
  size_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  BOOL v190;
  int v191;
  int v192;
  BOOL v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unsigned int v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char v219;
  unsigned int v220;
  uint64_t v221;
  size_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t j;
  uint64_t v232;
  uint64_t v233;
  int v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  void *v248;
  size_t v249;
  uint64_t v250;
  BOOL v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t *v261;
  int v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  unint64_t v268;
  int v269;
  unsigned int v270;
  uint64_t v271;
  size_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t k;
  uint64_t v280;
  uint64_t v281;
  int v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  _BYTE *v291;
  uint64_t v292;
  _OWORD *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  BOOL v303;
  int v304;
  int v305;
  BOOL v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unsigned int v314;
  uint64_t v315;
  int v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unsigned int v320;
  unint64_t *v321;
  unint64_t v322;
  unint64_t *v323;
  int v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  char v329;
  unsigned int v330;
  uint64_t v331;
  size_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t m;
  uint64_t v341;
  uint64_t v342;
  int v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unsigned int v347;
  int v348;
  unsigned int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  size_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  unsigned int v359;
  unint64_t v360;
  unint64_t v361;
  int v362;
  unsigned __int8 *v363;
  int v364;
  unint64_t v365;
  uint64_t v366;
  int v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unsigned int v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t *v374;
  int v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  int v379;
  unint64_t v380;
  uint64_t v381;
  unint64_t v382;
  int v383;
  unsigned int v384;
  uint64_t v385;
  size_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  int v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unsigned int v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t *v407;
  int v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char v420;
  uint64_t v421;
  int v422;
  int v423;
  BOOL v424;
  int v425;
  int v426;
  BOOL v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unsigned int v435;
  uint64_t v436;
  int v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  unsigned int v441;
  unint64_t *v442;
  unint64_t v443;
  unint64_t *v444;
  int v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  int v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  char v453;
  unsigned int v454;
  uint64_t v455;
  size_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t n;
  uint64_t v466;
  uint64_t v467;
  int v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  unsigned int v472;
  int v473;
  unsigned int v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  void *v482;
  size_t v483;
  uint64_t v484;
  _DWORD *v485;
  uint64_t v486;
  _BYTE *v487;
  uint64_t v488;
  _OWORD *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  char v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  int v502;
  BOOL v503;
  int v504;
  int v505;
  BOOL v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unsigned int v514;
  uint64_t v515;
  int v516;
  unint64_t v517;
  unint64_t v518;
  unint64_t v519;
  unsigned int v520;
  unint64_t *v521;
  unint64_t v522;
  unint64_t *v523;
  int v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  int v528;
  unint64_t v529;
  uint64_t v530;
  unint64_t v531;
  char v532;
  unsigned int v533;
  uint64_t v534;
  size_t v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t jj;
  uint64_t v544;
  uint64_t v545;
  int v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  unsigned int v550;
  int v551;
  unsigned int v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unint64_t v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  void *v560;
  size_t v561;
  _DWORD *v562;
  unsigned int v563;
  unint64_t v564;
  uint64_t v565;
  int v566;
  unint64_t v567;
  unint64_t v568;
  unint64_t v569;
  unsigned int v570;
  unint64_t *v571;
  unint64_t v572;
  unint64_t *v573;
  int v574;
  uint64_t v575;
  int v576;
  uint64_t v577;
  int v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  int v582;
  unsigned int v583;
  uint64_t v584;
  size_t v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  _BYTE *v590;
  uint64_t v591;
  _OWORD *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t kk;
  uint64_t v601;
  uint64_t v602;
  int v603;
  unint64_t v604;
  unint64_t v605;
  unint64_t v606;
  unsigned int v607;
  int v608;
  unsigned int v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  unint64_t v615;
  unint64_t v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  char v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  int v627;
  BOOL v628;
  int v629;
  int v630;
  BOOL v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t v634;
  int v635;
  unint64_t v636;
  unint64_t v637;
  unint64_t v638;
  unsigned int v639;
  uint64_t v640;
  int v641;
  unint64_t v642;
  unint64_t v643;
  unint64_t v644;
  unsigned int v645;
  unint64_t *v646;
  unint64_t v647;
  unint64_t *v648;
  int v649;
  uint64_t v650;
  unint64_t v651;
  uint64_t v652;
  unint64_t v653;
  char v654;
  unsigned int v655;
  uint64_t v656;
  size_t v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  unint64_t v664;
  uint64_t v665;
  uint64_t mm;
  uint64_t v667;
  uint64_t v668;
  int v669;
  unint64_t v670;
  unint64_t v671;
  unint64_t v672;
  unsigned int v673;
  int v674;
  unsigned int v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  size_t v681;
  uint64_t v682;
  void *v683;
  _DWORD *v684;
  uint64_t v685;
  uint64_t v686;
  unint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  int v692;
  unint64_t v693;
  unint64_t v694;
  unint64_t v695;
  unsigned int v696;
  uint64_t v697;
  _QWORD *v698;
  int v699;
  uint64_t v700;
  int v701;
  uint64_t v702;
  int v703;
  uint64_t v704;
  unint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  char v710;
  uint64_t v711;
  uint64_t v712;
  int v713;
  int v714;
  BOOL v715;
  int v716;
  int v717;
  BOOL v718;
  unint64_t v719;
  uint64_t v720;
  uint64_t v721;
  int v722;
  unint64_t v723;
  unint64_t v724;
  unint64_t v725;
  unsigned int v726;
  uint64_t v727;
  int v728;
  unint64_t v729;
  unint64_t v730;
  unint64_t v731;
  unsigned int v732;
  unint64_t *v733;
  unint64_t v734;
  unint64_t *v735;
  int v736;
  uint64_t v737;
  int v738;
  uint64_t v739;
  int v740;
  unint64_t v741;
  uint64_t v742;
  unint64_t v743;
  char v744;
  unsigned int v745;
  uint64_t v746;
  size_t v747;
  uint64_t v748;
  unint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  unint64_t v754;
  uint64_t nn;
  uint64_t v756;
  uint64_t v757;
  int v758;
  unint64_t v759;
  unint64_t v760;
  unint64_t v761;
  unsigned int v762;
  int v763;
  unsigned int v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  unint64_t v768;
  uint64_t v769;
  unint64_t v770;
  uint64_t v771;
  void *v772;
  size_t v773;
  unint64_t v774;
  uint64_t v775;
  unint64_t v776;
  unint64_t v777;
  uint64_t v778;
  unint64_t v779;
  uint64_t v780;
  unsigned int v781;
  unsigned int v782;
  unint64_t v783;
  uint64_t v784;
  unint64_t v785;
  uint64_t v787;
  unint64_t v788;
  uint64_t v789;
  unsigned int v790;
  unint64_t *v791;
  uint64_t v792;
  unint64_t v793;
  unint64_t v794;
  uint64_t v795;
  unsigned int v796;
  unint64_t *v797;
  uint64_t v798;
  unint64_t v799;
  unint64_t v800;
  uint64_t v801;
  unsigned int v802;
  unint64_t *v803;
  uint64_t v804;
  unint64_t v805;
  unint64_t v806;
  uint64_t v807;
  unsigned int v808;
  unint64_t *v809;
  uint64_t v810;
  unint64_t v811;
  unint64_t v812;
  uint64_t v813;
  unsigned int v814;
  unint64_t *v815;
  uint64_t v816;
  unint64_t v817;
  unint64_t v818;
  unsigned int v819;
  uint64_t v820;
  unint64_t *v821;
  uint64_t v822;
  unint64_t v823;
  unint64_t v824;
  _DWORD *v825;
  uint64_t v826;
  unsigned int v827;
  unint64_t *v828;
  uint64_t v829;
  unint64_t v830;
  unint64_t v831;
  unsigned int v832;
  uint64_t v833;
  unint64_t *v834;
  uint64_t v835;
  unint64_t v836;
  unint64_t v837;
  _DWORD *v838;
  uint64_t v839;
  unsigned int v840;
  unint64_t *v841;
  uint64_t v842;
  unint64_t v843;
  unint64_t v844;
  _DWORD *impl_casual_case;
  _DWORD *v846;
  uint64_t v847;
  uint64_t v848;
  BOOL v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  BOOL v854;
  uint64_t v855;
  _DWORD *v856;
  _DWORD *v857;
  _DWORD *v858;
  uint64_t v859;
  unsigned int v860;
  unint64_t *v861;
  uint64_t v862;
  unint64_t v863;
  unint64_t v864;
  unsigned int v865;
  uint64_t v866;
  unint64_t *v867;
  uint64_t v868;
  unint64_t v869;
  unint64_t v870;
  _DWORD *v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  char v877;
  uint64_t *v878;
  JSC::UnlinkedCodeBlock **v879;
  uint64_t *v880;
  uint64_t v881;
  unsigned int v882;
  unsigned int *v883;
  unsigned int v884;
  unsigned int v885;
  unsigned int v886;
  unsigned int v887;
  unsigned int v888;
  unsigned int v889;
  int v890;
  unint64_t v891;
  uint64_t *v892;
  unsigned int v893;
  unsigned int v894;
  uint64_t v895;
  unsigned int v896;
  unint64_t v897;
  unsigned int v898;
  unsigned int v899;
  int v900;
  unsigned int v901;
  unsigned int v902;
  uint64_t v903;
  unsigned int v904;
  unsigned int v905;
  int v906;
  int v907;
  unsigned int v908;
  unsigned int v909;
  unsigned int v910;
  unsigned int v911;
  char v912;
  size_t v913;
  unsigned int v914;
  unsigned int v915;
  size_t v916;
  unsigned int v917;
  unsigned int v918;
  unsigned int v919;
  unsigned int v920;
  uint64_t v922;
  char v923[24];
  WTF *v924;
  JSC::UnlinkedCodeBlock **v925;

  v892 = a3;
  if ((a4 & 1) != 0)
  {
    v847 = *(_QWORD *)(a4 & 0xFFFFFFFF8);
    v10 = a2;
    if ((a4 & 2) != 0
      || ((v848 = *(unsigned int *)((a4 & 0xFFFFFFFF8) + 8), (_DWORD)v848 != 0x3FFFFFFF)
        ? (v849 = (_DWORD)v848 == -1)
        : (v849 = 1),
          v849))
    {
      v850 = 2;
    }
    else if (v848 >> 28)
    {
      v873 = WTF::fastMalloc((WTF *)0x10);
      a3 = v892;
      *(_QWORD *)v873 = v847;
      *(_DWORD *)(v873 + 8) = v848;
      v850 = 1;
      v847 = v873;
      v10 = a2;
    }
    else
    {
      v850 = *(_QWORD *)(a4 & 0xFFFFFFFF8);
      v847 = v848 << 36;
    }
    v851 = v847 | v850;
    v875 = v847 | v850;
    if (((v847 | v850) & 1) != 0)
    {
      v852 = *(_QWORD *)(v851 & 0xFFFFFFFF8);
      if ((v851 & 2) != 0
        || ((v853 = *(unsigned int *)((v851 & 0xFFFFFFFF8) + 8), (_DWORD)v853 != 0x3FFFFFFF)
          ? (v854 = (_DWORD)v853 == -1)
          : (v854 = 1),
            v854))
      {
        v855 = 2;
      }
      else if (v853 >> 28)
      {
        v874 = WTF::fastMalloc((WTF *)0x10);
        a3 = v892;
        *(_QWORD *)v874 = v852;
        *(_DWORD *)(v874 + 8) = v853;
        v855 = 1;
        v852 = v874;
        v10 = a2;
      }
      else
      {
        v855 = *(_QWORD *)(v851 & 0xFFFFFFFF8);
        v852 = v853 << 36;
      }
      v877 = 0;
      v9 = v852 | v855;
    }
    else
    {
      v877 = 1;
      v9 = v847 | v850;
    }
  }
  else
  {
    v877 = 1;
    v875 = a4;
    v9 = a4;
    v10 = a2;
  }
  v912 = 0;
  v922 = v9;
  v876 = v9;
  v878 = (uint64_t *)(a1 + 744);
  v11 = &v922;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v900 = 0x3FFFFFFF;
  v890 = 0x3FFFFFFF;
  v891 = StatusReg;
  while (2)
  {
    v13 = v9 & 0xFFFFFFFF8;
    if ((v9 & 1) != 0)
      v13 = *(_QWORD *)v13;
    v880 = v11;
    v881 = v13;
    if (!v13)
    {
      v16 = 0;
      goto LABEL_10;
    }
    v14 = *(_BYTE *)(v13 + 32);
    v15 = *(_QWORD *)(v13 + 24);
    v16 = HIDWORD(v15) & 0xFFFFF | ((int)(v15 >> 28) >> 24 << 20);
    v906 = v16;
    if ((v14 & 1) == 0)
    {
      v17 = (v15 >> 60) | (16 * v14);
      goto LABEL_29;
    }
    v33 = (v16 + 3);
    if (v16 >= -3)
      v34 = ((v33 << 32) - 0x500000000) >> 32;
    else
      v34 = (v33 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v10 + 16);
    v35 = *(_QWORD *)(*(_QWORD *)v10 + 16 * v34);
    if (v35 >= 2)
    {
      v55 = *a3;
      if (*a3
        || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(a3, 0, (uint64_t)a3, a4, a5, a6, a7, a8), StatusReg = v891, a3 = v892, v10 = a2, (v55 = *v892) != 0))
      {
        v56 = *(_DWORD *)(v55 - 8);
      }
      else
      {
        v56 = 0;
      }
      v57 = (~(v35 << 32) + v35) ^ ((~(v35 << 32) + v35) >> 22);
      v58 = 9 * ((v57 + ~(v57 << 13)) ^ ((v57 + ~(v57 << 13)) >> 8));
      v59 = (v58 ^ (v58 >> 15)) + ~((v58 ^ (v58 >> 15)) << 27);
      v60 = v56 & ((v59 >> 31) ^ v59);
      v61 = (uint64_t *)(v55 + 8 * v60);
      v62 = *v61;
      if (*v61)
      {
        v63 = 0;
        v64 = 1;
        do
        {
          if (v62 == v35)
            goto LABEL_28;
          if (v62 == -1)
            v63 = v61;
          v60 = (v60 + v64) & v56;
          v61 = (uint64_t *)(v55 + 8 * v60);
          v62 = *v61;
          ++v64;
        }
        while (*v61);
        if (v63)
        {
          *v63 = 0;
          --*(_DWORD *)(*a3 - 16);
          v61 = v63;
        }
      }
      *v61 = v35;
      v65 = *a3;
      if (*a3)
        v66 = *(_DWORD *)(v65 - 12) + 1;
      else
        v66 = 1;
      *(_DWORD *)(v65 - 12) = v66;
      v67 = *a3;
      if (*a3)
        v68 = *(_DWORD *)(v67 - 12);
      else
        v68 = 0;
      v69 = (*(_DWORD *)(v67 - 16) + v68);
      v70 = *(unsigned int *)(v67 - 4);
      if (v70 <= 0x400)
      {
        if (3 * v70 > 4 * v69)
          goto LABEL_128;
        goto LABEL_66;
      }
      if (v70 <= 2 * v69)
      {
LABEL_66:
        WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(a3, v61, (uint64_t)a3, a4, a5, a6, a7, a8);
        StatusReg = v891;
        a3 = v892;
        v10 = a2;
      }
LABEL_128:
      v112 = *(_QWORD *)(v10 + 24);
      if (!v112)
      {
        v113 = 0;
        v114 = 0;
        goto LABEL_130;
      }
      v117 = *(unsigned int *)(v112 - 4);
      v114 = v112 + 32 * v117;
      if (*(_DWORD *)(v112 - 12))
      {
        v113 = *(_QWORD *)(v10 + 24);
        if (!(_DWORD)v117)
          goto LABEL_130;
        v118 = 32 * v117;
        v113 = *(_QWORD *)(v10 + 24);
        while (1)
        {
          v119 = *(_DWORD *)(v113 + 8);
          if (*(_QWORD *)v113)
            break;
          v120 = *(_DWORD *)(v113 + 12);
          if (v119 | v120)
            goto LABEL_142;
LABEL_140:
          v113 += 32;
          v118 -= 32;
          if (!v118)
          {
            v113 = v114;
            goto LABEL_130;
          }
        }
        v120 = *(_DWORD *)(v113 + 12);
LABEL_142:
        if (v119)
          v121 = 1;
        else
          v121 = v120 == 0;
        if (v121)
          goto LABEL_130;
        goto LABEL_140;
      }
      v113 = v112 + 32 * v117;
      v114 = v113;
LABEL_130:
      if (v112)
        v115 = v112 + 32 * *(unsigned int *)(v112 - 4);
      else
        v115 = 0;
      if (v115 == v113)
        goto LABEL_28;
      v116 = 0;
LABEL_157:
      while (2)
      {
        v125 = *(_QWORD *)(v113 + 16);
        if (v125 < 2)
          goto LABEL_158;
        v127 = *a3;
        if (!*a3)
          goto LABEL_158;
        v128 = *(_DWORD *)(v127 - 8);
        v129 = ~(*(_QWORD *)v113 << 32) + *(_QWORD *)v113;
        v130 = (v129 ^ (v129 >> 22)) + ~((v129 ^ (v129 >> 22)) << 13);
        v131 = (9 * (v130 ^ (v130 >> 8))) ^ ((9 * (v130 ^ (v130 >> 8))) >> 15);
        v132 = v128 & (((v131 + ~(v131 << 27)) >> 31) ^ (v131 + ~((_DWORD)v131 << 27)));
        v133 = *(_QWORD *)(v127 + 8 * v132);
        if (v133 != *(_QWORD *)v113)
        {
          v134 = 1;
          while (v133)
          {
            v132 = (v132 + v134) & v128;
            v133 = *(_QWORD *)(v127 + 8 * v132);
            ++v134;
            if (v133 == *(_QWORD *)v113)
              goto LABEL_165;
          }
          goto LABEL_158;
        }
LABEL_165:
        v135 = (~(v125 << 32) + v125) ^ ((~(v125 << 32) + v125) >> 22);
        v136 = 9 * ((v135 + ~(v135 << 13)) ^ ((v135 + ~(v135 << 13)) >> 8));
        v137 = (v136 ^ (v136 >> 15)) + ~((v136 ^ (v136 >> 15)) << 27);
        v138 = v128 & ((v137 >> 31) ^ v137);
        v139 = (unint64_t *)(v127 + 8 * v138);
        v140 = *v139;
        if (*v139)
        {
          v141 = 0;
          v142 = 1;
          do
          {
            if (v140 == v125)
            {
              v150 = 0;
              goto LABEL_180;
            }
            if (v140 == -1)
              v141 = v139;
            v138 = (v138 + v142) & v128;
            v139 = (unint64_t *)(v127 + 8 * v138);
            v140 = *v139;
            ++v142;
          }
          while (*v139);
          if (v141)
          {
            *v141 = 0;
            --*(_DWORD *)(*a3 - 16);
            v139 = v141;
          }
        }
        *v139 = v125;
        v143 = *a3;
        if (*a3)
          v144 = *(_DWORD *)(v143 - 12) + 1;
        else
          v144 = 1;
        *(_DWORD *)(v143 - 12) = v144;
        v145 = *a3;
        if (*a3)
          v146 = *(_DWORD *)(v145 - 12);
        else
          v146 = 0;
        v147 = v145 - 16;
        v148 = (*(_DWORD *)(v145 - 16) + v146);
        v149 = *(unsigned int *)(v145 - 4);
        if (v149 > 0x400)
        {
          if (v149 > 2 * v148)
            goto LABEL_179;
          a4 = *(unsigned int *)(v145 - 12);
        }
        else
        {
          if (3 * v149 > 4 * v148)
          {
LABEL_179:
            v150 = 1;
LABEL_180:
            v116 |= v150;
LABEL_158:
            v126 = v113 + 32;
            v113 = v114;
            if (v126 == v114)
            {
LABEL_156:
              if (v113 == v115)
                goto LABEL_127;
              continue;
            }
            v113 = v126;
            while (1)
            {
              v122 = *(_DWORD *)(v113 + 8);
              if (*(_QWORD *)v113)
                break;
              v123 = *(_DWORD *)(v113 + 12);
              if (v122 | v123)
                goto LABEL_151;
LABEL_149:
              v113 += 32;
              if (v113 == v114)
              {
                v113 = v114;
                if (v114 == v115)
                {
LABEL_127:
                  if ((v116 & 1) == 0)
                    goto LABEL_28;
                  goto LABEL_128;
                }
                goto LABEL_157;
              }
            }
            v123 = *(_DWORD *)(v113 + 12);
LABEL_151:
            if (v122)
              v124 = 1;
            else
              v124 = v123 == 0;
            if (v124)
              goto LABEL_156;
            goto LABEL_149;
          }
          a4 = *(unsigned int *)(v145 - 12);
          if (!(_DWORD)v149)
          {
            v151 = 8;
LABEL_186:
            v152 = 8 * v151;
            v153 = v152 + 16;
            v154 = *(_QWORD *)(StatusReg + 752);
            if (v154)
            {
              v155 = (unint64_t)(v152 + 31) >> 4;
              if (v151 <= 0x32)
              {
                v156 = 23 * v155 + 7;
              }
              else
              {
                if (v151 > 0x4E0)
                  goto LABEL_1317;
                v156 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v155 + 626);
                if (*(_DWORD *)(v154 + 8052) <= v156)
                  goto LABEL_1317;
              }
              v157 = v154 + 8 * v156;
              v158 = v157 + 8064;
              *(_BYTE *)(v157 + 8064) = 1;
              v159 = *(unsigned int *)(v157 + 8080);
              if ((_DWORD)v159)
              {
                *(_DWORD *)(v158 + 16) = v159 - *(_DWORD *)(v158 + 20);
                v160 = *(_QWORD *)(v158 + 8) - v159;
              }
              else
              {
                v175 = *(_QWORD *)(v158 + 40);
                v176 = *(_QWORD *)(v158 + 24);
                if (!v175)
                {
                  if (*(_BYTE *)(v158 + 5) == 6)
                  {
                    v801 = *(unsigned int *)(v158 + 32);
                    v802 = *(_DWORD *)(v158 + 36);
                    if (v801 < v802)
                    {
                      *(_QWORD *)(v158 + 8 * v801 + 56) = 0;
                      v803 = (unint64_t *)(v154 + 8128 + 8 * v156 + 8 * v801);
                      v804 = v802 - 1 - v801;
                      while (v804)
                      {
                        v176 += 1024;
                        v806 = *v803++;
                        v805 = v806;
                        LODWORD(v801) = v801 + 1;
                        --v804;
                        if (v806)
                        {
                          v175 = __rbit64(v805);
                          *(_DWORD *)(v158 + 32) = v801;
                          *(_QWORD *)(v158 + 24) = v176;
                          goto LABEL_224;
                        }
                      }
                      *(_DWORD *)(v158 + 32) = v802;
                    }
                  }
                  *(_BYTE *)v158 = 0;
                  goto LABEL_1317;
                }
LABEL_224:
                v177 = __clz(v175);
                *(_QWORD *)(v158 + 40) = v175 & ~(0x8000000000000000 >> v177);
                v160 = v176 + 16 * v177;
              }
              *(_BYTE *)v158 = 0;
              v161 = 1;
LABEL_199:
              if ((v161 & 1) == 0 || (v161 & 0xFFFFFFFF00000000) == 0x100000000)
                goto LABEL_206;
              v893 = a4;
              v884 = v151;
              if (v151 <= 0x1FFFFD)
              {
                v179 = (void *)v160;
                v180 = v153;
              }
              else
              {
                v178 = pas_page_malloc_cached_alignment;
                if (!pas_page_malloc_cached_alignment)
                {
                  v178 = pas_page_malloc_alignment_slow();
                  pas_page_malloc_cached_alignment = v178;
                }
                if (((v178 - 1) & (v153 | v160)) == 0)
                {
                  if (!v178)
                    pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
                  mmap((void *)v160, v153, 3, 4114, 889192448, 0);
                  goto LABEL_205;
                }
                v180 = v153;
                v179 = (void *)v160;
              }
              bzero(v179, v180);
LABEL_205:
              StatusReg = v891;
              a3 = v892;
              v10 = a2;
              v151 = v884;
              a4 = v893;
LABEL_206:
              *a3 = v160 + 16;
              *(_DWORD *)(v160 + 12) = v151;
              *(_DWORD *)(*a3 - 8) = v151 - 1;
              *(_DWORD *)(*a3 - 16) = 0;
              *(_DWORD *)(*a3 - 12) = a4;
              if ((_DWORD)v149)
              {
                for (i = 0; i != v149; ++i)
                {
                  v163 = *(_QWORD *)(v145 + 8 * i);
                  if ((unint64_t)(v163 + 1) >= 2)
                  {
                    v164 = *a3;
                    if (*a3)
                      v165 = *(_DWORD *)(v164 - 8);
                    else
                      v165 = 0;
                    v166 = (~(v163 << 32) + v163) ^ ((unint64_t)(~(v163 << 32) + v163) >> 22);
                    v167 = 9 * ((v166 + ~(v166 << 13)) ^ ((v166 + ~(v166 << 13)) >> 8));
                    v168 = (v167 ^ (v167 >> 15)) + ~((v167 ^ (v167 >> 15)) << 27);
                    v169 = v165 & ((v168 >> 31) ^ v168);
                    v170 = 1;
                    do
                    {
                      v171 = v169;
                      v172 = *(_QWORD *)(v164 + 8 * v169);
                      v169 = (v169 + v170++) & v165;
                    }
                    while (v172);
                    *(_QWORD *)(v164 + 8 * v171) = v163;
                  }
                }
                if (!v145)
                  goto LABEL_179;
              }
              v173 = *(_QWORD *)(StatusReg + 752);
              if (v173)
              {
                if (!(v147 >> 43)
                  && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                       + (((unint64_t)(v145 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v145 - 16) >> 24)) & 1) != 0)
                {
LABEL_219:
                  v174 = *(unsigned int *)(v173 + 8000);
                  if (v174 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v173, v145 - 16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                    StatusReg = v891;
                    a3 = v892;
                  }
                  else
                  {
                    *(_QWORD *)(v173 + 8 * v174) = v147 | 0x5000000000000;
                    *(_DWORD *)(v173 + 8000) = v174 + 1;
                  }
                  v150 = 1;
                  goto LABEL_222;
                }
                if (v147 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v147 >> 24)
                {
                  a4 = 0;
                }
                else
                {
                  a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + (((((unint64_t)(v145 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((((v145 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)a4 == 1)
                    goto LABEL_219;
                }
                v150 = 1;
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v173, v145 - 16, 1, a4, a5, a6, a7, a8);
              }
              else
              {
                v150 = 1;
                pas_try_deallocate_slow_no_cache(v145 - 16, (uint64_t)&bmalloc_heap_config, 1);
              }
              StatusReg = v891;
              a3 = v892;
LABEL_222:
              v10 = a2;
              goto LABEL_180;
            }
LABEL_1317:
            v898 = a4;
            v888 = v151;
            impl_casual_case = bmalloc_allocate_impl_casual_case(v153, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
            StatusReg = v891;
            a3 = v892;
            v160 = (unint64_t)impl_casual_case;
            v151 = v888;
            a4 = v898;
            v10 = a2;
            goto LABEL_199;
          }
        }
        break;
      }
      v151 = (_DWORD)v149 << (6 * (int)a4 >= (2 * v149));
      goto LABEL_186;
    }
LABEL_28:
    v11 = v880;
    v17 = (*(_QWORD *)(v881 + 24) >> 60) | (16 * *(_BYTE *)(v881 + 32));
    v16 = v906;
LABEL_29:
    if ((v17 & 0xFu) - 3 > 2)
      goto LABEL_10;
    v36 = (v16 + 4);
    v37 = v16 >= -4 ? ((v36 << 32) - 0x500000000) >> 32 : (v36 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v10 + 16);
    v38 = *(_QWORD *)(*(_QWORD *)v10 + 16 * v37);
    if (v38 < 2)
      goto LABEL_10;
    v39 = *a3;
    if (*a3
      || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(a3, 0, (uint64_t)a3, a4, a5, a6, a7, a8), StatusReg = v891, a3 = v892, v10 = a2, (v39 = *v892) != 0))
    {
      v40 = *(_DWORD *)(v39 - 8);
    }
    else
    {
      v40 = 0;
    }
    v41 = (~(v38 << 32) + v38) ^ ((~(v38 << 32) + v38) >> 22);
    v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
    v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
    v44 = v40 & ((v43 >> 31) ^ v43);
    v45 = (uint64_t *)(v39 + 8 * v44);
    v46 = *v45;
    if (*v45)
    {
      v47 = 0;
      v48 = 1;
      do
      {
        if (v46 == v38)
          goto LABEL_10;
        if (v46 == -1)
          v47 = v45;
        v44 = (v44 + v48) & v40;
        v45 = (uint64_t *)(v39 + 8 * v44);
        v46 = *v45;
        ++v48;
      }
      while (*v45);
      if (v47)
      {
        *v47 = 0;
        --*(_DWORD *)(*a3 - 16);
        v45 = v47;
      }
    }
    *v45 = v38;
    v49 = *a3;
    if (*a3)
      v50 = *(_DWORD *)(v49 - 12) + 1;
    else
      v50 = 1;
    *(_DWORD *)(v49 - 12) = v50;
    v51 = *a3;
    if (*a3)
      v52 = *(_DWORD *)(v51 - 12);
    else
      v52 = 0;
    v53 = (*(_DWORD *)(v51 - 16) + v52);
    v54 = *(unsigned int *)(v51 - 4);
    if (v54 <= 0x400)
    {
      if (3 * v54 > 4 * v53)
        goto LABEL_234;
      goto LABEL_49;
    }
    if (v54 <= 2 * v53)
    {
LABEL_49:
      WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(a3, v45, (uint64_t)a3, a4, a5, a6, a7, a8);
      StatusReg = v891;
      a3 = v892;
      v10 = a2;
    }
LABEL_234:
    v181 = *(_QWORD *)(v10 + 24);
    if (!v181)
    {
      v182 = 0;
      v183 = 0;
      goto LABEL_236;
    }
    v186 = *(unsigned int *)(v181 - 4);
    v183 = v181 + 32 * v186;
    if (*(_DWORD *)(v181 - 12))
    {
      v182 = *(_QWORD *)(v10 + 24);
      if (!(_DWORD)v186)
        goto LABEL_236;
      v187 = 32 * v186;
      v182 = *(_QWORD *)(v10 + 24);
      while (1)
      {
        v188 = *(_DWORD *)(v182 + 8);
        if (*(_QWORD *)v182)
          break;
        v189 = *(_DWORD *)(v182 + 12);
        if (v188 | v189)
          goto LABEL_248;
LABEL_246:
        v182 += 32;
        v187 -= 32;
        if (!v187)
        {
          v182 = v183;
          goto LABEL_236;
        }
      }
      v189 = *(_DWORD *)(v182 + 12);
LABEL_248:
      if (v188)
        v190 = 1;
      else
        v190 = v189 == 0;
      if (v190)
        goto LABEL_236;
      goto LABEL_246;
    }
    v182 = v181 + 32 * v186;
    v183 = v182;
LABEL_236:
    if (v181)
      v184 = v181 + 32 * *(unsigned int *)(v181 - 4);
    else
      v184 = 0;
    if (v184 != v182)
    {
      v185 = 0;
      while (1)
      {
        v194 = *(_QWORD *)(v182 + 16);
        if (v194 < 2)
          goto LABEL_264;
        v196 = *a3;
        if (!*a3)
          goto LABEL_264;
        v197 = *(_DWORD *)(v196 - 8);
        v198 = ~(*(_QWORD *)v182 << 32) + *(_QWORD *)v182;
        v199 = (v198 ^ (v198 >> 22)) + ~((v198 ^ (v198 >> 22)) << 13);
        v200 = (9 * (v199 ^ (v199 >> 8))) ^ ((9 * (v199 ^ (v199 >> 8))) >> 15);
        v201 = v197 & (((v200 + ~(v200 << 27)) >> 31) ^ (v200 + ~((_DWORD)v200 << 27)));
        v202 = *(_QWORD *)(v196 + 8 * v201);
        if (v202 != *(_QWORD *)v182)
        {
          v203 = 1;
          while (v202)
          {
            v201 = (v201 + v203) & v197;
            v202 = *(_QWORD *)(v196 + 8 * v201);
            ++v203;
            if (v202 == *(_QWORD *)v182)
              goto LABEL_271;
          }
          goto LABEL_264;
        }
LABEL_271:
        v204 = (~(v194 << 32) + v194) ^ ((~(v194 << 32) + v194) >> 22);
        v205 = 9 * ((v204 + ~(v204 << 13)) ^ ((v204 + ~(v204 << 13)) >> 8));
        v206 = (v205 ^ (v205 >> 15)) + ~((v205 ^ (v205 >> 15)) << 27);
        v207 = v197 & ((v206 >> 31) ^ v206);
        v208 = (unint64_t *)(v196 + 8 * v207);
        v209 = *v208;
        if (*v208)
        {
          v210 = 0;
          v211 = 1;
          do
          {
            if (v209 == v194)
            {
              v219 = 0;
              goto LABEL_286;
            }
            if (v209 == -1)
              v210 = v208;
            v207 = (v207 + v211) & v197;
            v208 = (unint64_t *)(v196 + 8 * v207);
            v209 = *v208;
            ++v211;
          }
          while (*v208);
          if (v210)
          {
            *v210 = 0;
            --*(_DWORD *)(*a3 - 16);
            v208 = v210;
          }
        }
        *v208 = v194;
        v212 = *a3;
        v213 = *a3 ? *(_DWORD *)(v212 - 12) + 1 : 1;
        *(_DWORD *)(v212 - 12) = v213;
        v214 = *a3;
        v215 = *a3 ? *(_DWORD *)(v214 - 12) : 0;
        v216 = v214 - 16;
        v217 = (*(_DWORD *)(v214 - 16) + v215);
        v218 = *(unsigned int *)(v214 - 4);
        if (v218 > 0x400)
          break;
        if (3 * v218 > 4 * v217)
          goto LABEL_285;
        a4 = *(unsigned int *)(v214 - 12);
        if ((_DWORD)v218)
          goto LABEL_291;
        v220 = 8;
LABEL_292:
        v221 = 8 * v220;
        v222 = v221 + 16;
        v223 = *(_QWORD *)(StatusReg + 752);
        if (!v223)
          goto LABEL_1320;
        v224 = (unint64_t)(v221 + 31) >> 4;
        if (v220 <= 0x32)
        {
          v225 = 23 * v224 + 7;
        }
        else
        {
          if (v220 > 0x4E0)
            goto LABEL_1320;
          v225 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v224 + 626);
          if (*(_DWORD *)(v223 + 8052) <= v225)
            goto LABEL_1320;
        }
        v226 = v223 + 8 * v225;
        v227 = v226 + 8064;
        *(_BYTE *)(v226 + 8064) = 1;
        v228 = *(unsigned int *)(v226 + 8080);
        if ((_DWORD)v228)
        {
          *(_DWORD *)(v227 + 16) = v228 - *(_DWORD *)(v227 + 20);
          v229 = *(_QWORD *)(v227 + 8) - v228;
        }
        else
        {
          v244 = *(_QWORD *)(v227 + 40);
          v245 = *(_QWORD *)(v227 + 24);
          if (!v244)
          {
            if (*(_BYTE *)(v227 + 5) == 6)
            {
              v807 = *(unsigned int *)(v227 + 32);
              v808 = *(_DWORD *)(v227 + 36);
              if (v807 < v808)
              {
                *(_QWORD *)(v227 + 8 * v807 + 56) = 0;
                v809 = (unint64_t *)(v223 + 8128 + 8 * v225 + 8 * v807);
                v810 = v808 - 1 - v807;
                while (v810)
                {
                  v245 += 1024;
                  v812 = *v809++;
                  v811 = v812;
                  LODWORD(v807) = v807 + 1;
                  --v810;
                  if (v812)
                  {
                    v244 = __rbit64(v811);
                    *(_DWORD *)(v227 + 32) = v807;
                    *(_QWORD *)(v227 + 24) = v245;
                    goto LABEL_330;
                  }
                }
                *(_DWORD *)(v227 + 32) = v808;
              }
            }
            *(_BYTE *)v227 = 0;
LABEL_1320:
            v899 = a4;
            v889 = v220;
            v846 = bmalloc_allocate_impl_casual_case(v222, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
            StatusReg = v891;
            a3 = v892;
            v229 = (unint64_t)v846;
            v220 = v889;
            a4 = v899;
            v10 = a2;
            goto LABEL_305;
          }
LABEL_330:
          v246 = __clz(v244);
          *(_QWORD *)(v227 + 40) = v244 & ~(0x8000000000000000 >> v246);
          v229 = v245 + 16 * v246;
        }
        *(_BYTE *)v227 = 0;
        v230 = 1;
LABEL_305:
        if ((v230 & 1) == 0 || (v230 & 0xFFFFFFFF00000000) == 0x100000000)
          goto LABEL_312;
        v894 = a4;
        v885 = v220;
        if (v220 <= 0x1FFFFD)
        {
          v248 = (void *)v229;
          v249 = v222;
        }
        else
        {
          v247 = pas_page_malloc_cached_alignment;
          if (!pas_page_malloc_cached_alignment)
          {
            v247 = pas_page_malloc_alignment_slow();
            pas_page_malloc_cached_alignment = v247;
          }
          if (((v247 - 1) & (v222 | v229)) == 0)
          {
            if (!v247)
              pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
            mmap((void *)v229, v222, 3, 4114, 889192448, 0);
            goto LABEL_311;
          }
          v249 = v222;
          v248 = (void *)v229;
        }
        bzero(v248, v249);
LABEL_311:
        StatusReg = v891;
        a3 = v892;
        v10 = a2;
        v220 = v885;
        a4 = v894;
LABEL_312:
        *a3 = v229 + 16;
        *(_DWORD *)(v229 + 12) = v220;
        *(_DWORD *)(*a3 - 8) = v220 - 1;
        *(_DWORD *)(*a3 - 16) = 0;
        *(_DWORD *)(*a3 - 12) = a4;
        if (!(_DWORD)v218)
          goto LABEL_322;
        for (j = 0; j != v218; ++j)
        {
          v232 = *(_QWORD *)(v214 + 8 * j);
          if ((unint64_t)(v232 + 1) >= 2)
          {
            v233 = *a3;
            if (*a3)
              v234 = *(_DWORD *)(v233 - 8);
            else
              v234 = 0;
            v235 = (~(v232 << 32) + v232) ^ ((unint64_t)(~(v232 << 32) + v232) >> 22);
            v236 = 9 * ((v235 + ~(v235 << 13)) ^ ((v235 + ~(v235 << 13)) >> 8));
            v237 = (v236 ^ (v236 >> 15)) + ~((v236 ^ (v236 >> 15)) << 27);
            v238 = v234 & ((v237 >> 31) ^ v237);
            v239 = 1;
            do
            {
              v240 = v238;
              v241 = *(_QWORD *)(v233 + 8 * v238);
              v238 = (v238 + v239++) & v234;
            }
            while (v241);
            *(_QWORD *)(v233 + 8 * v240) = v232;
          }
        }
        if (v214)
        {
LABEL_322:
          v242 = *(_QWORD *)(StatusReg + 752);
          if (v242)
          {
            if (!(v216 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                   + (((unint64_t)(v214 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v214 - 16) >> 24)) & 1) != 0)
            {
              goto LABEL_325;
            }
            if (v216 >> 24 >= *off_1ECF425F8 && off_1ECF425F8[1] > v216 >> 24)
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + (((((unint64_t)(v214 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((((v214 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 != 1)
                goto LABEL_1220;
LABEL_325:
              v243 = *(unsigned int *)(v242 + 8000);
              if (v243 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v242, v214 - 16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                StatusReg = v891;
                a3 = v892;
              }
              else
              {
                *(_QWORD *)(v242 + 8 * v243) = v216 | 0x5000000000000;
                *(_DWORD *)(v242 + 8000) = v243 + 1;
              }
              v219 = 1;
LABEL_328:
              v10 = a2;
              goto LABEL_286;
            }
            a4 = 0;
LABEL_1220:
            v219 = 1;
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v242, v214 - 16, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            v219 = 1;
            pas_try_deallocate_slow_no_cache(v214 - 16, (uint64_t)&bmalloc_heap_config, 1);
          }
          StatusReg = v891;
          a3 = v892;
          goto LABEL_328;
        }
LABEL_285:
        v219 = 1;
LABEL_286:
        v185 |= v219;
LABEL_264:
        v195 = v182 + 32;
        v182 = v183;
        if (v195 == v183)
        {
LABEL_262:
          if (v182 == v184)
            goto LABEL_233;
        }
        else
        {
          v182 = v195;
          do
          {
            v191 = *(_DWORD *)(v182 + 8);
            if (*(_QWORD *)v182)
            {
              v192 = *(_DWORD *)(v182 + 12);
            }
            else
            {
              v192 = *(_DWORD *)(v182 + 12);
              if (!(v191 | v192))
                goto LABEL_255;
            }
            if (v191)
              v193 = 1;
            else
              v193 = v192 == 0;
            if (v193)
              goto LABEL_262;
LABEL_255:
            v182 += 32;
          }
          while (v182 != v183);
          v182 = v183;
          if (v183 == v184)
          {
LABEL_233:
            v16 = v906;
            if ((v185 & 1) == 0)
              goto LABEL_340;
            goto LABEL_234;
          }
        }
      }
      if (v218 > 2 * v217)
        goto LABEL_285;
      a4 = *(unsigned int *)(v214 - 12);
LABEL_291:
      v220 = (_DWORD)v218 << (6 * (int)a4 >= (2 * v218));
      goto LABEL_292;
    }
    v16 = v906;
LABEL_340:
    v11 = v880;
LABEL_10:
    v18 = (JSC::UnlinkedCodeBlock ***)(v881 + 8);
    if (!v881)
      v18 = (JSC::UnlinkedCodeBlock ***)(a1 + 40);
    v925 = *v18;
    v19 = (uint64_t)v925;
    v20 = *v878;
    v879 = v925;
    if (!*v878)
      goto LABEL_90;
    v21 = *(_DWORD *)(v20 - 8);
    v22 = ((unint64_t)v925 + ~((_QWORD)v925 << 32)) ^ (((unint64_t)v925 + ~((_QWORD)v925 << 32)) >> 22);
    v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
    v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
    v25 = v21 & ((v24 >> 31) ^ v24);
    v26 = *(JSC::UnlinkedCodeBlock ***)(v20 + 16 * v25);
    if (v26 != v925)
    {
      v78 = 1;
      while (v26)
      {
        v25 = ((_DWORD)v25 + v78) & v21;
        v26 = *(JSC::UnlinkedCodeBlock ***)(v20 + 16 * v25);
        ++v78;
        if (v26 == v925)
          goto LABEL_14;
      }
      v25 = *(unsigned int *)(v20 - 4);
    }
LABEL_14:
    if (v25 == *(_DWORD *)(v20 - 4))
    {
LABEL_90:
      v85 = (JSC::BytecodeLivenessAnalysis *)*((_QWORD *)v925[7] + 11);
      if (!v85)
      {
        v85 = (JSC::BytecodeLivenessAnalysis *)JSC::UnlinkedCodeBlock::livenessAnalysisSlow(v925[7], v925, (uint64_t)a3, a4, a5, a6, a7, a8);
        v19 = (uint64_t)v879;
      }
      JSC::BytecodeLivenessAnalysis::computeFullLiveness(v85, (JSC::CodeBlock *)v19, &v924);
      v27 = (uint64_t)v924;
      WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::FullBytecodeLiveness>>(v878, (uint64_t *)&v925, (uint64_t *)&v924, v86, v87, v88, v89, v90, (uint64_t)v923);
      v92 = v924;
      v924 = 0;
      if (v92)
        std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)&v924, v92, v91, a4, a5, a6, a7, a8);
      StatusReg = v891;
      a3 = v892;
      v19 = (uint64_t)v879;
    }
    else
    {
      v27 = *(_QWORD *)(v20 + 16 * v25 + 8);
    }
    v28 = *v11;
    if ((*v11 & 2) != 0)
    {
      if ((v28 & 1) == 0)
      {
        v29 = 0xFFFFFFFFLL;
        goto LABEL_19;
      }
      v785 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
      v29 = 0xFFFFFFFFLL;
LABEL_1208:
      v787 = 2;
      goto LABEL_1209;
    }
    if ((v28 & 1) == 0)
    {
      v29 = v28 >> 36;
      goto LABEL_19;
    }
    v784 = v28 & 0xFFFFFFFF8;
    v29 = *(unsigned int *)(v784 + 8);
    v785 = *(_QWORD *)v784;
    if ((_DWORD)v29 == -1 || v29 == 0x3FFFFFFF)
      goto LABEL_1208;
    if (v29 >> 28)
    {
      v872 = WTF::fastMalloc((WTF *)0x10);
      v19 = (uint64_t)v879;
      StatusReg = v891;
      a3 = v892;
      *(_QWORD *)v872 = v785;
      *(_DWORD *)(v872 + 8) = v29;
      v787 = 1;
      v785 = v872;
    }
    else
    {
      v787 = *(_QWORD *)v784;
      v785 = v29 << 36;
    }
LABEL_1209:
    v28 = v785 | v787;
LABEL_19:
    if ((v912 & 1) == 0)
    {
LABEL_20:
      v30 = (v29 & 3) + (v29 >> 2);
      v31 = *(unsigned int **)v27;
      if (*v31 <= v30)
      {
        __break(0xC471u);
        JUMPOUT(0x1983811CCLL);
      }
      v32 = v28 & 1;
      goto LABEL_22;
    }
    v32 = v28 & 1;
    if ((v28 & 2) != 0)
    {
      v72 = (_QWORD *)(v28 & 0xFFFFFFFF8);
      LODWORD(v71) = -1;
      if ((v28 & 1) == 0)
        goto LABEL_70;
LABEL_1284:
      v72 = (_QWORD *)*v72;
      goto LABEL_70;
    }
    if ((v28 & 1) != 0)
    {
      v72 = (_QWORD *)(v28 & 0xFFFFFFFF8);
      LODWORD(v71) = *(_DWORD *)((v28 & 0xFFFFFFFF8) + 8);
      goto LABEL_1284;
    }
    v71 = v28 >> 36;
    v72 = (_QWORD *)(v28 & 0xFFFFFFFF8);
LABEL_70:
    v73 = v72 + 1;
    v77 = v72 == 0;
    v74 = (_QWORD *)(a1 + 40);
    if (!v77)
      v74 = v73;
    v75 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*v74 + 56) + 80) + ((unint64_t)v71 >> 2));
    v76 = *v75;
    if ((v76 | 2) == 0x82)
      v76 = v75[1];
    v77 = v76 > 3 || v76 == 2;
    if (v77)
      goto LABEL_20;
    v30 = (v29 & 3) + (v29 >> 2);
    v31 = *(unsigned int **)(v27 + 8);
    if (*v31 <= v30)
    {
      __break(0xC471u);
      JUMPOUT(0x1983810C4);
    }
LABEL_22:
    if (v32 && (v28 & 0xFFFFFFFF8) != 0)
    {
      WTF::fastFree(v28 & 0xFFFFFFFF8, (void *)v19, (uint64_t)a3, a4, a5, a6, a7, a8);
      v19 = (uint64_t)v879;
      StatusReg = v891;
      a3 = v892;
    }
    a6 = *(unsigned int *)(v19 + 20);
    v10 = a2;
    v907 = v16;
    if (!(_DWORD)a6)
      goto LABEL_502;
    v883 = &v31[4 * v30 + 2];
    while (2)
    {
      v250 = (v16 - a6--);
      v251 = (int)v250 >= v890 && (int)v250 < v900;
      if (v251 || ((*(_DWORD *)(*(_QWORD *)v883 + 4 * (a6 >> 5)) >> a6) & 1) == 0)
        goto LABEL_341;
      if ((v250 & 0x80000000) != 0)
      {
        v252 = *(_QWORD *)(*(_QWORD *)v10 + 16 * ((v250 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v10 + 16)));
        if (v252 < 2)
          goto LABEL_341;
      }
      else
      {
        v252 = *(_QWORD *)(*(_QWORD *)v10 + 16 * (((v250 << 32) - 0x500000000) >> 32));
        if (v252 < 2)
          goto LABEL_341;
      }
      v253 = *a3;
      v895 = a6;
      if (*a3)
      {
LABEL_350:
        v254 = *(_DWORD *)(v253 - 8);
        goto LABEL_351;
      }
      v290 = *(_QWORD *)(StatusReg + 752);
      if (!v290)
        goto LABEL_1369;
      v291 = (_BYTE *)(v290 + 9040);
      *(_BYTE *)(v290 + 9040) = 1;
      v292 = *(unsigned int *)(v290 + 9056);
      if ((_DWORD)v292)
      {
        *(_DWORD *)(v290 + 9056) = v292 - *(_DWORD *)(v290 + 9060);
        v293 = (_OWORD *)(*(_QWORD *)(v290 + 9048) - v292);
        goto LABEL_391;
      }
      v395 = *(_QWORD *)(v290 + 9080);
      v396 = *(_QWORD *)(v290 + 9064);
      if (!v395)
      {
        if (*(_BYTE *)(v290 + 9045) == 6)
        {
          v832 = *(_DWORD *)(v290 + 9076);
          v833 = *(unsigned int *)(v290 + 9072);
          if (v833 < v832)
          {
            *(_QWORD *)&v291[8 * v833 + 56] = 0;
            v834 = (unint64_t *)(v290 + 8 * v833 + 9104);
            v835 = v832 - 1 - v833;
            while (v835)
            {
              v396 += 1024;
              v837 = *v834++;
              v836 = v837;
              LODWORD(v833) = v833 + 1;
              --v835;
              if (v837)
              {
                v395 = __rbit64(v836);
                *(_DWORD *)(v290 + 9072) = v833;
                *(_QWORD *)(v290 + 9064) = v396;
                goto LABEL_557;
              }
            }
            *(_DWORD *)(v290 + 9072) = v832;
          }
        }
        *v291 = 0;
LABEL_1369:
        v293 = bmalloc_allocate_impl_casual_case(0x50uLL, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
        a3 = v892;
        goto LABEL_392;
      }
LABEL_557:
      v397 = __clz(v395);
      *(_QWORD *)(v290 + 9080) = v395 & ~(0x8000000000000000 >> v397);
      v293 = (_OWORD *)(v396 + 16 * v397);
LABEL_391:
      *v291 = 0;
      v19 = 1;
LABEL_392:
      if ((v19 & 1) != 0)
      {
        StatusReg = v891;
        if ((v19 & 0xFFFFFFFF00000000) != 0x100000000)
        {
          v293[3] = 0u;
          v293[4] = 0u;
          v293[1] = 0u;
          v293[2] = 0u;
          *v293 = 0u;
        }
      }
      else
      {
        StatusReg = v891;
      }
      *a3 = (uint64_t)(v293 + 1);
      *((_DWORD *)v293 + 3) = 8;
      *(_DWORD *)(*a3 - 8) = 7;
      *(_DWORD *)(*a3 - 16) = 0;
      *(_DWORD *)(*a3 - 12) = 0;
      v253 = *a3;
      v10 = a2;
      a6 = v895;
      if (*a3)
        goto LABEL_350;
      v254 = 0;
LABEL_351:
      v255 = (~(v252 << 32) + v252) ^ ((~(v252 << 32) + v252) >> 22);
      v256 = 9 * ((v255 + ~(v255 << 13)) ^ ((v255 + ~(v255 << 13)) >> 8));
      v257 = (v256 ^ (v256 >> 15)) + ~((v256 ^ (v256 >> 15)) << 27);
      v258 = v254 & ((v257 >> 31) ^ v257);
      v259 = (unint64_t *)(v253 + 8 * v258);
      v260 = *v259;
      if (*v259)
      {
        v261 = 0;
        v262 = 1;
        do
        {
          if (v260 == v252)
            goto LABEL_341;
          if (v260 == -1)
            v261 = v259;
          v258 = (v258 + v262) & v254;
          v259 = (unint64_t *)(v253 + 8 * v258);
          v260 = *v259;
          ++v262;
        }
        while (*v259);
        if (v261)
        {
          *v261 = 0;
          --*(_DWORD *)(*a3 - 16);
          v259 = v261;
        }
      }
      *v259 = v252;
      v263 = *a3;
      if (*a3)
        v264 = *(_DWORD *)(v263 - 12) + 1;
      else
        v264 = 1;
      *(_DWORD *)(v263 - 12) = v264;
      v265 = *a3;
      if (*a3)
        v266 = *(_DWORD *)(v265 - 12);
      else
        v266 = 0;
      v267 = (*(_DWORD *)(v265 - 16) + v266);
      v268 = *(unsigned int *)(v265 - 4);
      if (v268 > 0x400)
      {
        if (v268 > 2 * v267)
          goto LABEL_400;
        v269 = *(_DWORD *)(v265 - 12);
LABEL_366:
        v270 = (_DWORD)v268 << (6 * v269 >= (2 * v268));
      }
      else
      {
        if (3 * v268 > 4 * v267)
          goto LABEL_400;
        v269 = *(_DWORD *)(v265 - 12);
        if ((_DWORD)v268)
          goto LABEL_366;
        v270 = 8;
      }
      v271 = 8 * v270;
      v272 = v271 + 16;
      v273 = *(_QWORD *)(StatusReg + 752);
      if (!v273)
        goto LABEL_1364;
      v274 = (unint64_t)(v271 + 31) >> 4;
      if (v270 <= 0x32)
      {
        v391 = 23 * v274 + 7;
      }
      else
      {
        if (v270 > 0x4E0)
          goto LABEL_1364;
        v391 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v274 + 626);
        if (*(_DWORD *)(v273 + 8052) <= v391)
          goto LABEL_1364;
      }
      v275 = v273 + 8 * v391;
      v276 = v275 + 8064;
      *(_BYTE *)(v275 + 8064) = 1;
      v277 = *(unsigned int *)(v275 + 8080);
      if ((_DWORD)v277)
      {
        *(_DWORD *)(v276 + 16) = v277 - *(_DWORD *)(v276 + 20);
        v278 = *(_QWORD *)(v276 + 8) - v277;
        goto LABEL_374;
      }
      v392 = *(_QWORD *)(v276 + 40);
      v393 = *(_QWORD *)(v276 + 24);
      if (!v392)
      {
        if (*(_BYTE *)(v276 + 5) == 6)
        {
          v826 = *(unsigned int *)(v276 + 32);
          v827 = *(_DWORD *)(v276 + 36);
          if (v826 < v827)
          {
            *(_QWORD *)(v276 + 8 * v826 + 56) = 0;
            v828 = (unint64_t *)(v273 + 8128 + 8 * v391 + 8 * v826);
            v829 = v827 - 1 - v826;
            while (v829)
            {
              v393 += 1024;
              v831 = *v828++;
              v830 = v831;
              LODWORD(v826) = v826 + 1;
              --v829;
              if (v831)
              {
                v392 = __rbit64(v830);
                *(_DWORD *)(v276 + 32) = v826;
                *(_QWORD *)(v276 + 24) = v393;
                goto LABEL_555;
              }
            }
            *(_DWORD *)(v276 + 32) = v827;
          }
        }
        *(_BYTE *)v276 = 0;
LABEL_1364:
        v857 = bmalloc_allocate_impl_casual_case(v272, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
        StatusReg = v891;
        a3 = v892;
        v278 = (unint64_t)v857;
        a6 = v895;
        v10 = a2;
        goto LABEL_375;
      }
LABEL_555:
      v394 = __clz(v392);
      *(_QWORD *)(v276 + 40) = v392 & ~(0x8000000000000000 >> v394);
      v278 = v393 + 16 * v394;
LABEL_374:
      *(_BYTE *)v276 = 0;
      v19 = 1;
LABEL_375:
      if ((v19 & 1) != 0 && (v19 & 0xFFFFFFFF00000000) != 0x100000000)
      {
        if (v270 <= 0x1FFFFD)
          goto LABEL_552;
        v390 = pas_page_malloc_cached_alignment;
        if (!pas_page_malloc_cached_alignment)
        {
          v390 = pas_page_malloc_alignment_slow();
          pas_page_malloc_cached_alignment = v390;
        }
        if (((v390 - 1) & (v272 | v278)) != 0)
        {
LABEL_552:
          bzero((void *)v278, v272);
        }
        else
        {
          if (!v390)
            pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
          mmap((void *)v278, v272, 3, 4114, 889192448, 0);
        }
        StatusReg = v891;
        a3 = v892;
        v10 = a2;
        a6 = v895;
      }
      *a3 = v278 + 16;
      *(_DWORD *)(v278 + 12) = v270;
      *(_DWORD *)(*a3 - 8) = v270 - 1;
      *(_DWORD *)(*a3 - 16) = 0;
      *(_DWORD *)(*a3 - 12) = v269;
      v16 = v907;
      if (!(_DWORD)v268)
        goto LABEL_387;
      for (k = 0; k != v268; ++k)
      {
        v280 = *(_QWORD *)(v265 + 8 * k);
        if ((unint64_t)(v280 + 1) >= 2)
        {
          v281 = *a3;
          if (*a3)
            v282 = *(_DWORD *)(v281 - 8);
          else
            v282 = 0;
          v283 = (~(v280 << 32) + v280) ^ ((unint64_t)(~(v280 << 32) + v280) >> 22);
          v284 = 9 * ((v283 + ~(v283 << 13)) ^ ((v283 + ~(v283 << 13)) >> 8));
          v285 = (v284 ^ (v284 >> 15)) + ~((v284 ^ (v284 >> 15)) << 27);
          v286 = v282 & ((v285 >> 31) ^ v285);
          v287 = 1;
          do
          {
            v288 = v286;
            v289 = *(_QWORD *)(v281 + 8 * v286);
            v286 = (v286 + v287++) & v282;
          }
          while (v289);
          *(_QWORD *)(v281 + 8 * v288) = v280;
        }
      }
      if (v265)
      {
LABEL_387:
        WTF::fastFree(v265 - 16, (void *)v19, (uint64_t)a3, a4, a5, a6, a7, a8);
        a3 = v892;
        a6 = v895;
        StatusReg = v891;
        v10 = a2;
      }
LABEL_400:
      while (2)
      {
        v294 = *(_QWORD *)(v10 + 24);
        if (!v294)
        {
          v295 = 0;
          v296 = 0;
          goto LABEL_402;
        }
        v299 = *(unsigned int *)(v294 - 4);
        v296 = v294 + 32 * v299;
        if (*(_DWORD *)(v294 - 12))
        {
          v295 = *(_QWORD *)(v10 + 24);
          if (!(_DWORD)v299)
            goto LABEL_402;
          v300 = 32 * v299;
          v295 = *(_QWORD *)(v10 + 24);
          while (1)
          {
            v301 = *(_DWORD *)(v295 + 8);
            if (*(_QWORD *)v295)
              break;
            v302 = *(_DWORD *)(v295 + 12);
            if (v301 | v302)
              goto LABEL_414;
LABEL_412:
            v295 += 32;
            v300 -= 32;
            if (!v300)
            {
              v295 = v296;
              goto LABEL_402;
            }
          }
          v302 = *(_DWORD *)(v295 + 12);
LABEL_414:
          if (v301)
            v303 = 1;
          else
            v303 = v302 == 0;
          if (v303)
            goto LABEL_402;
          goto LABEL_412;
        }
        v295 = v294 + 32 * v299;
        v296 = v295;
LABEL_402:
        if (v294)
        {
          v297 = v294 + 32 * *(unsigned int *)(v294 - 4);
          if (v297 == v295)
            break;
        }
        else
        {
          v297 = 0;
          if (!v295)
            break;
        }
        v298 = 0;
        do
        {
          while (1)
          {
            v307 = *(_QWORD *)(v295 + 16);
            if (v307 < 2)
              goto LABEL_430;
            v309 = *a3;
            if (!*a3)
              goto LABEL_430;
            v310 = *(_DWORD *)(v309 - 8);
            v311 = ~(*(_QWORD *)v295 << 32) + *(_QWORD *)v295;
            v312 = (v311 ^ (v311 >> 22)) + ~((v311 ^ (v311 >> 22)) << 13);
            v313 = (9 * (v312 ^ (v312 >> 8))) ^ ((9 * (v312 ^ (v312 >> 8))) >> 15);
            v314 = v310 & (((v313 + ~(v313 << 27)) >> 31) ^ (v313 + ~((_DWORD)v313 << 27)));
            v315 = *(_QWORD *)(v309 + 8 * v314);
            if (v315 == *(_QWORD *)v295)
            {
LABEL_437:
              v317 = (~(v307 << 32) + v307) ^ ((~(v307 << 32) + v307) >> 22);
              v318 = 9 * ((v317 + ~(v317 << 13)) ^ ((v317 + ~(v317 << 13)) >> 8));
              v319 = (v318 ^ (v318 >> 15)) + ~((v318 ^ (v318 >> 15)) << 27);
              v320 = v310 & ((v319 >> 31) ^ v319);
              v321 = (unint64_t *)(v309 + 8 * v320);
              v322 = *v321;
              if (*v321)
              {
                v323 = 0;
                v324 = 1;
                do
                {
                  if (v322 == v307)
                  {
                    v329 = 0;
                    goto LABEL_450;
                  }
                  if (v322 == -1)
                    v323 = v321;
                  v320 = (v320 + v324) & v310;
                  v321 = (unint64_t *)(v309 + 8 * v320);
                  v322 = *v321;
                  ++v324;
                }
                while (*v321);
                if (v323)
                {
                  *v323 = 0;
                  --*(_DWORD *)(*a3 - 16);
                  v321 = v323;
                }
              }
              *v321 = v307;
              if (*a3)
              {
                ++*(_DWORD *)(*a3 - 12);
                v325 = *a3;
                if (*a3)
                  goto LABEL_447;
              }
              else
              {
                MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                v325 = *a3;
                if (*a3)
                {
LABEL_447:
                  v326 = v325 - 16;
                  v327 = (*(_DWORD *)(v325 - 16) + *(_DWORD *)(v325 - 12));
                  v328 = *(unsigned int *)(v325 - 4);
                  if (v328 <= 0x400)
                    goto LABEL_448;
                  goto LABEL_463;
                }
              }
              v326 = v325 - 16;
              v327 = *(unsigned int *)(v325 - 16);
              v328 = *(unsigned int *)(v325 - 4);
              if (v328 <= 0x400)
              {
LABEL_448:
                if (3 * v328 > 4 * v327)
                {
LABEL_449:
                  v329 = 1;
LABEL_450:
                  v298 |= v329;
                  goto LABEL_430;
                }
                a5 = *(unsigned int *)(v325 - 12);
                if (!(_DWORD)v328)
                {
                  v330 = 8;
LABEL_456:
                  v331 = 8 * v330;
                  v332 = v331 + 16;
                  v333 = *(_QWORD *)(StatusReg + 752);
                  v913 = v331 + 16;
                  if (v333)
                  {
                    v334 = (unint64_t)(v331 + 31) >> 4;
                    if (v330 <= 0x32)
                    {
                      v335 = 23 * v334 + 7;
                    }
                    else
                    {
                      if (v330 > 0x4E0)
                        goto LABEL_682;
                      v335 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v334 + 626);
                      if (*(_DWORD *)(v333 + 8052) <= v335)
                        goto LABEL_682;
                    }
                    v336 = v333 + 8 * v335;
                    v337 = v336 + 8064;
                    *(_BYTE *)(v336 + 8064) = 1;
                    v338 = *(unsigned int *)(v336 + 8080);
                    if ((_DWORD)v338)
                    {
                      *(_DWORD *)(v337 + 16) = v338 - *(_DWORD *)(v337 + 20);
                      v339 = *(_QWORD *)(v337 + 8) - v338;
                    }
                    else
                    {
                      v788 = *(_QWORD *)(v337 + 40);
                      v93 = *(_QWORD *)(v337 + 24);
                      if (!v788)
                      {
                        if (*(_BYTE *)(v337 + 5) == 6)
                        {
                          v97 = *(unsigned int *)(v337 + 32);
                          v782 = *(_DWORD *)(v337 + 36);
                          if (v97 < v782)
                          {
                            *(_QWORD *)(v337 + 8 * v97 + 56) = 0;
                            v94 = (unint64_t *)(v333 + 8128 + 8 * v335 + 8 * v97);
                            v98 = v782 - 1 - v97;
                            while (v98)
                            {
                              v93 += 1024;
                              v96 = *v94++;
                              v95 = v96;
                              LODWORD(v97) = v97 + 1;
                              --v98;
                              if (v96)
                              {
                                v788 = __rbit64(v95);
                                *(_DWORD *)(v337 + 32) = v97;
                                *(_QWORD *)(v337 + 24) = v93;
                                goto LABEL_492;
                              }
                            }
                            *(_DWORD *)(v337 + 32) = v782;
                          }
                        }
                        *(_BYTE *)v337 = 0;
                        goto LABEL_682;
                      }
LABEL_492:
                      v353 = __clz(v788);
                      *(_QWORD *)(v337 + 40) = v788 & ~(0x8000000000000000 >> v353);
                      v339 = v93 + 16 * v353;
                    }
                    *(_BYTE *)v337 = 0;
                    v19 = 1;
LABEL_469:
                    if ((v19 & 1) == 0 || (v19 & 0xFFFFFFFF00000000) == 0x100000000)
                      goto LABEL_473;
                    if (v330 <= 0x1FFFFD)
                    {
                      v886 = v330;
                      v357 = a5;
                      bzero((void *)v339, v913);
                      a5 = v357;
                      v330 = v886;
                      StatusReg = v891;
                      a3 = v892;
                      v10 = a2;
                      a6 = v895;
LABEL_473:
                      *a3 = v339 + 16;
                      *(_DWORD *)(v339 + 12) = v330;
                      *(_DWORD *)(*a3 - 8) = v330 - 1;
                      *(_DWORD *)(*a3 - 16) = 0;
                      *(_DWORD *)(*a3 - 12) = a5;
                      v16 = v907;
                      if ((_DWORD)v328)
                      {
                        for (m = 0; m != v328; ++m)
                        {
                          v341 = *(_QWORD *)(v325 + 8 * m);
                          if ((unint64_t)(v341 + 1) >= 2)
                          {
                            v342 = *a3;
                            if (*a3)
                              v343 = *(_DWORD *)(v342 - 8);
                            else
                              v343 = 0;
                            v344 = (~(v341 << 32) + v341) ^ ((unint64_t)(~(v341 << 32) + v341) >> 22);
                            v345 = 9 * ((v344 + ~(v344 << 13)) ^ ((v344 + ~(v344 << 13)) >> 8));
                            v346 = (v345 ^ (v345 >> 15)) + ~((v345 ^ (v345 >> 15)) << 27);
                            v347 = v343 & ((v346 >> 31) ^ v346);
                            v348 = 1;
                            do
                            {
                              v349 = v347;
                              v350 = *(_QWORD *)(v342 + 8 * v347);
                              v347 = (v347 + v348++) & v343;
                            }
                            while (v350);
                            *(_QWORD *)(v342 + 8 * v349) = v341;
                          }
                        }
                        if (!v325)
                          goto LABEL_449;
                      }
                      v351 = *(_QWORD *)(StatusReg + 752);
                      if (v351)
                      {
                        if (!(v326 >> 43)
                          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v326 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v326)) & 1) != 0)
                        {
LABEL_486:
                          v352 = *(unsigned int *)(v351 + 8000);
                          if (v352 >= 0x3E7)
                          {
                            pas_thread_local_cache_append_deallocation_slow(v351, v326, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                            StatusReg = v891;
                            a3 = v892;
                          }
                          else
                          {
                            *(_QWORD *)(v351 + 8 * v352) = v326 | 0x5000000000000;
                            *(_DWORD *)(v351 + 8000) = v352 + 1;
                          }
                          v329 = 1;
                          goto LABEL_489;
                        }
                        if (v326 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v326 >> 24)
                        {
                          a4 = 0;
                        }
                        else
                        {
                          a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + ((((v326 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2 * ((BYTE3(v326) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                          if ((_DWORD)a4 == 1)
                            goto LABEL_486;
                        }
                        v329 = 1;
                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v351, v326, 1, a4, a5, a6, a7, a8);
                      }
                      else
                      {
                        v329 = 1;
                        pas_try_deallocate_slow_no_cache(v326, (uint64_t)&bmalloc_heap_config, 1);
                      }
                      StatusReg = v891;
                      a3 = v892;
LABEL_489:
                      v10 = a2;
                      a6 = v895;
                      goto LABEL_450;
                    }
                    v354 = pas_page_malloc_cached_alignment;
                    v355 = v913;
                    if (pas_page_malloc_cached_alignment)
                    {
                      v882 = a5;
                      if (((pas_page_malloc_cached_alignment - 1) & (v913 | v339)) == 0)
                      {
LABEL_495:
                        if (!v354)
                        {
                          v356 = pas_page_malloc_alignment_slow();
                          v355 = v913;
                          pas_page_malloc_cached_alignment = v356;
                        }
                        mmap((void *)v339, v355, 3, 4114, 889192448, 0);
                        goto LABEL_501;
                      }
                    }
                    else
                    {
                      v887 = v330;
                      v358 = a5;
                      v354 = pas_page_malloc_alignment_slow();
                      v355 = v913;
                      v359 = v358;
                      v330 = v887;
                      pas_page_malloc_cached_alignment = v354;
                      v882 = v359;
                      if (((v354 - 1) & (v913 | v339)) == 0)
                        goto LABEL_495;
                    }
                    bzero((void *)v339, v355);
LABEL_501:
                    StatusReg = v891;
                    a3 = v892;
                    v10 = a2;
                    a6 = v895;
                    a5 = v882;
                    goto LABEL_473;
                  }
LABEL_682:
                  v484 = a5;
                  v485 = bmalloc_allocate_impl_casual_case(v332, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
                  a5 = v484;
                  StatusReg = v891;
                  a3 = v892;
                  v339 = (unint64_t)v485;
                  a6 = v895;
                  v10 = a2;
                  goto LABEL_469;
                }
LABEL_455:
                v330 = (_DWORD)v328 << (6 * (int)a5 >= (2 * v328));
                goto LABEL_456;
              }
LABEL_463:
              if (v328 > 2 * v327)
                goto LABEL_449;
              a5 = *(unsigned int *)(v325 - 12);
              goto LABEL_455;
            }
            v316 = 1;
            while (v315)
            {
              v314 = (v314 + v316) & v310;
              v315 = *(_QWORD *)(v309 + 8 * v314);
              ++v316;
              if (v315 == *(_QWORD *)v295)
                goto LABEL_437;
            }
LABEL_430:
            v308 = v295 + 32;
            v295 = v296;
            if (v308 != v296)
              break;
LABEL_428:
            if (v295 == v297)
              goto LABEL_399;
          }
          v295 = v308;
          do
          {
            v304 = *(_DWORD *)(v295 + 8);
            if (*(_QWORD *)v295)
            {
              v305 = *(_DWORD *)(v295 + 12);
            }
            else
            {
              v305 = *(_DWORD *)(v295 + 12);
              if (!(v304 | v305))
                goto LABEL_421;
            }
            if (v304)
              v306 = 1;
            else
              v306 = v305 == 0;
            if (v306)
              goto LABEL_428;
LABEL_421:
            v295 += 32;
          }
          while (v295 != v296);
          v295 = v296;
        }
        while (v296 != v297);
LABEL_399:
        if ((v298 & 1) != 0)
          continue;
        break;
      }
LABEL_341:
      if ((_DWORD)a6)
        continue;
      break;
    }
LABEL_502:
    v360 = *v880;
    if ((*v880 & 2) != 0)
    {
      v362 = 3;
      v361 = 0xFFFFFFFFLL;
    }
    else
    {
      if ((v360 & 1) != 0)
      {
        LODWORD(v361) = *(_DWORD *)((v360 & 0xFFFFFFFF8) + 8);
        if ((v361 & 3) == 0)
          goto LABEL_814;
      }
      else
      {
        if ((v360 & 0x3000000000) == 0)
          goto LABEL_814;
        v361 = v360 >> 36;
      }
      v362 = v361 & 3;
      if ((v361 & 3) == 0)
        goto LABEL_814;
      v361 = v361;
    }
    v363 = (unsigned __int8 *)(**((_QWORD **)v879[7] + 10) + (v361 >> 2));
    v364 = *v363;
    if ((v364 | 2) == 0x82)
      v364 = v363[1];
    switch(v364)
    {
      case 0:
      case 1:
      case 3:
        if (v362 == 1)
          goto LABEL_512;
        goto LABEL_814;
      case 2:
LABEL_512:
        if (v881)
        {
          v398 = *(_QWORD *)(*(_QWORD *)v10
                           + 16
                           * (*(unsigned int *)(v10 + 20)
                            + (unint64_t)*(unsigned int *)(v10 + 16)
                            + (*(_QWORD *)(v881 + 24) >> 22)));
          if (v398 < 2)
            goto LABEL_815;
          v399 = *a3;
          if (*a3
            || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(a3, 0, (uint64_t)a3, a4, a5, a6, a7, a8), StatusReg = v891, a3 = v892, v10 = a2, (v399 = *v892) != 0))
          {
            v400 = *(_DWORD *)(v399 - 8);
          }
          else
          {
            v400 = 0;
          }
          v401 = (~(v398 << 32) + v398) ^ ((~(v398 << 32) + v398) >> 22);
          v402 = 9 * ((v401 + ~(v401 << 13)) ^ ((v401 + ~(v401 << 13)) >> 8));
          v403 = (v402 ^ (v402 >> 15)) + ~((v402 ^ (v402 >> 15)) << 27);
          v404 = v400 & ((v403 >> 31) ^ v403);
          v405 = (uint64_t *)(v399 + 8 * v404);
          v406 = *v405;
          if (*v405)
          {
            v407 = 0;
            v408 = 1;
            do
            {
              if (v406 == v398)
                goto LABEL_815;
              if (v406 == -1)
                v407 = v405;
              v404 = (v404 + v408) & v400;
              v405 = (uint64_t *)(v399 + 8 * v404);
              v406 = *v405;
              ++v408;
            }
            while (*v405);
            if (v407)
            {
              *v407 = 0;
              --*(_DWORD *)(*a3 - 16);
              v405 = v407;
            }
          }
          *v405 = v398;
          v409 = *a3;
          if (*a3)
            v410 = *(_DWORD *)(v409 - 12) + 1;
          else
            v410 = 1;
          *(_DWORD *)(v409 - 12) = v410;
          v411 = *a3;
          if (*a3)
            v412 = *(_DWORD *)(v411 - 12);
          else
            v412 = 0;
          v413 = (*(_DWORD *)(v411 - 16) + v412);
          v414 = *(unsigned int *)(v411 - 4);
          if (v414 > 0x400)
          {
            if (v414 > 2 * v413)
              goto LABEL_575;
          }
          else if (3 * v414 > 4 * v413)
          {
            goto LABEL_575;
          }
          WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(a3, v405, (uint64_t)a3, a4, a5, a6, a7, a8);
          StatusReg = v891;
          a3 = v892;
          v10 = a2;
          while (1)
          {
LABEL_575:
            v415 = *(_QWORD *)(v10 + 24);
            if (!v415)
            {
              v416 = 0;
              v417 = 0;
LABEL_577:
              v418 = v415 + 32 * v417;
              goto LABEL_578;
            }
            v417 = *(unsigned int *)(v415 - 4);
            v418 = v415 + 32 * v417;
            if (!*(_DWORD *)(v415 - 12))
            {
              v416 = v415 + 32 * v417;
              goto LABEL_577;
            }
            v416 = *(_QWORD *)(v10 + 24);
            if (!(_DWORD)v417)
              goto LABEL_578;
            v421 = 32 * v417;
            v416 = *(_QWORD *)(v10 + 24);
            do
            {
              v422 = *(_DWORD *)(v416 + 8);
              if (*(_QWORD *)v416)
              {
                v423 = *(_DWORD *)(v416 + 12);
              }
              else
              {
                v423 = *(_DWORD *)(v416 + 12);
                if (!(v422 | v423))
                  goto LABEL_588;
              }
              if (v422)
                v424 = 1;
              else
                v424 = v423 == 0;
              if (v424)
                goto LABEL_578;
LABEL_588:
              v416 += 32;
              v421 -= 32;
            }
            while (v421);
            v416 = v418;
LABEL_578:
            if (v415)
              v419 = v415 + 32 * *(unsigned int *)(v415 - 4);
            else
              v419 = 0;
            if (v419 == v416)
              goto LABEL_815;
            v420 = 0;
            while (2)
            {
              v428 = *(_QWORD *)(v416 + 16);
              if (v428 < 2)
                goto LABEL_606;
              v430 = *a3;
              if (!*a3)
                goto LABEL_606;
              v431 = *(_DWORD *)(v430 - 8);
              v432 = ~(*(_QWORD *)v416 << 32) + *(_QWORD *)v416;
              v433 = (v432 ^ (v432 >> 22)) + ~((v432 ^ (v432 >> 22)) << 13);
              v434 = (9 * (v433 ^ (v433 >> 8))) ^ ((9 * (v433 ^ (v433 >> 8))) >> 15);
              v435 = v431 & (((v434 + ~(v434 << 27)) >> 31) ^ (v434 + ~((_DWORD)v434 << 27)));
              v436 = *(_QWORD *)(v430 + 8 * v435);
              if (v436 != *(_QWORD *)v416)
              {
                v437 = 1;
                do
                {
                  if (!v436)
                    goto LABEL_606;
                  v435 = (v435 + v437) & v431;
                  v436 = *(_QWORD *)(v430 + 8 * v435);
                  ++v437;
                }
                while (v436 != *(_QWORD *)v416);
              }
              v438 = (~(v428 << 32) + v428) ^ ((~(v428 << 32) + v428) >> 22);
              v439 = 9 * ((v438 + ~(v438 << 13)) ^ ((v438 + ~(v438 << 13)) >> 8));
              v440 = (v439 ^ (v439 >> 15)) + ~((v439 ^ (v439 >> 15)) << 27);
              v441 = v431 & ((v440 >> 31) ^ v440);
              v442 = (unint64_t *)(v430 + 8 * v441);
              v443 = *v442;
              if (*v442)
              {
                v444 = 0;
                v445 = 1;
                do
                {
                  if (v443 == v428)
                  {
                    v453 = 0;
                    goto LABEL_628;
                  }
                  if (v443 == -1)
                    v444 = v442;
                  v441 = (v441 + v445) & v431;
                  v442 = (unint64_t *)(v430 + 8 * v441);
                  v443 = *v442;
                  ++v445;
                }
                while (*v442);
                if (v444)
                {
                  *v444 = 0;
                  --*(_DWORD *)(*a3 - 16);
                  v442 = v444;
                }
              }
              *v442 = v428;
              v446 = *a3;
              if (*a3)
                v447 = *(_DWORD *)(v446 - 12) + 1;
              else
                v447 = 1;
              *(_DWORD *)(v446 - 12) = v447;
              v448 = *a3;
              if (*a3)
                v449 = *(_DWORD *)(v448 - 12);
              else
                v449 = 0;
              v450 = v448 - 16;
              v451 = (*(_DWORD *)(v448 - 16) + v449);
              v452 = *(unsigned int *)(v448 - 4);
              if (v452 > 0x400)
              {
                if (v452 > 2 * v451)
                  goto LABEL_627;
                a4 = *(unsigned int *)(v448 - 12);
LABEL_631:
                v454 = (_DWORD)v452 << (6 * (int)a4 >= (2 * v452));
              }
              else
              {
                if (3 * v452 > 4 * v451)
                  goto LABEL_627;
                a4 = *(unsigned int *)(v448 - 12);
                if ((_DWORD)v452)
                  goto LABEL_631;
                v454 = 8;
              }
              v455 = 8 * v454;
              v456 = v455 + 16;
              v457 = *(_QWORD *)(StatusReg + 752);
              if (!v457)
                goto LABEL_1372;
              v458 = (unint64_t)(v455 + 31) >> 4;
              if (v454 <= 0x32)
              {
                v459 = 23 * v458 + 7;
              }
              else
              {
                if (v454 > 0x4E0)
                  goto LABEL_1372;
                v459 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v458 + 626);
                if (*(_DWORD *)(v457 + 8052) <= v459)
                  goto LABEL_1372;
              }
              v460 = v457 + 8 * v459;
              v461 = v460 + 8064;
              *(_BYTE *)(v460 + 8064) = 1;
              v462 = *(unsigned int *)(v460 + 8080);
              if ((_DWORD)v462)
              {
                *(_DWORD *)(v461 + 16) = v462 - *(_DWORD *)(v461 + 20);
                v463 = *(_QWORD *)(v461 + 8) - v462;
                goto LABEL_644;
              }
              v478 = *(_QWORD *)(v461 + 40);
              v479 = *(_QWORD *)(v461 + 24);
              if (v478)
                goto LABEL_670;
              if (*(_BYTE *)(v461 + 5) != 6)
                goto LABEL_1371;
              v839 = *(unsigned int *)(v461 + 32);
              v840 = *(_DWORD *)(v461 + 36);
              if (v839 >= v840)
                goto LABEL_1371;
              *(_QWORD *)(v461 + 8 * v839 + 56) = 0;
              v841 = (unint64_t *)(v457 + 8128 + 8 * v459 + 8 * v839);
              v842 = v840 - 1 - v839;
              do
              {
                if (!v842)
                {
                  *(_DWORD *)(v461 + 32) = v840;
LABEL_1371:
                  *(_BYTE *)v461 = 0;
LABEL_1372:
                  v920 = a4;
                  v905 = v454;
                  v858 = bmalloc_allocate_impl_casual_case(v456, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
                  StatusReg = v891;
                  a3 = v892;
                  v463 = (unint64_t)v858;
                  v454 = v905;
                  a4 = v920;
                  v10 = a2;
                  goto LABEL_645;
                }
                v479 += 1024;
                v844 = *v841++;
                v843 = v844;
                LODWORD(v839) = v839 + 1;
                --v842;
              }
              while (!v844);
              v478 = __rbit64(v843);
              *(_DWORD *)(v461 + 32) = v839;
              *(_QWORD *)(v461 + 24) = v479;
LABEL_670:
              v480 = __clz(v478);
              *(_QWORD *)(v461 + 40) = v478 & ~(0x8000000000000000 >> v480);
              v463 = v479 + 16 * v480;
LABEL_644:
              *(_BYTE *)v461 = 0;
              v464 = 1;
LABEL_645:
              if ((v464 & 1) == 0 || (v464 & 0xFFFFFFFF00000000) == 0x100000000)
                goto LABEL_652;
              v914 = a4;
              v901 = v454;
              if (v454 <= 0x1FFFFD)
              {
                v482 = (void *)v463;
                v483 = v456;
LABEL_650:
                bzero(v482, v483);
                goto LABEL_651;
              }
              v481 = pas_page_malloc_cached_alignment;
              if (!pas_page_malloc_cached_alignment)
              {
                v481 = pas_page_malloc_alignment_slow();
                pas_page_malloc_cached_alignment = v481;
              }
              if (((v481 - 1) & (v456 | v463)) != 0)
              {
                v483 = v456;
                v482 = (void *)v463;
                goto LABEL_650;
              }
              if (!v481)
                pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
              mmap((void *)v463, v456, 3, 4114, 889192448, 0);
LABEL_651:
              StatusReg = v891;
              a3 = v892;
              v10 = a2;
              v454 = v901;
              a4 = v914;
LABEL_652:
              *a3 = v463 + 16;
              *(_DWORD *)(v463 + 12) = v454;
              *(_DWORD *)(*a3 - 8) = v454 - 1;
              *(_DWORD *)(*a3 - 16) = 0;
              *(_DWORD *)(*a3 - 12) = a4;
              if ((_DWORD)v452)
              {
                for (n = 0; n != v452; ++n)
                {
                  v466 = *(_QWORD *)(v448 + 8 * n);
                  if ((unint64_t)(v466 + 1) >= 2)
                  {
                    v467 = *a3;
                    if (*a3)
                      v468 = *(_DWORD *)(v467 - 8);
                    else
                      v468 = 0;
                    v469 = (~(v466 << 32) + v466) ^ ((unint64_t)(~(v466 << 32) + v466) >> 22);
                    v470 = 9 * ((v469 + ~(v469 << 13)) ^ ((v469 + ~(v469 << 13)) >> 8));
                    v471 = (v470 ^ (v470 >> 15)) + ~((v470 ^ (v470 >> 15)) << 27);
                    v472 = v468 & ((v471 >> 31) ^ v471);
                    v473 = 1;
                    do
                    {
                      v474 = v472;
                      v475 = *(_QWORD *)(v467 + 8 * v472);
                      v472 = (v472 + v473++) & v468;
                    }
                    while (v475);
                    *(_QWORD *)(v467 + 8 * v474) = v466;
                  }
                }
                if (!v448)
                {
LABEL_627:
                  v453 = 1;
                  goto LABEL_628;
                }
              }
              v476 = *(_QWORD *)(StatusReg + 752);
              if (!v476)
              {
                v453 = 1;
                pas_try_deallocate_slow_no_cache(v448 - 16, (uint64_t)&bmalloc_heap_config, 1);
LABEL_1280:
                StatusReg = v891;
                a3 = v892;
                goto LABEL_668;
              }
              if (!(v450 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                     + (((unint64_t)(v448 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v448 - 16) >> 24)) & 1) != 0)
              {
                goto LABEL_665;
              }
              if (v450 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v450 >> 24)
              {
                a4 = 0;
LABEL_1279:
                v453 = 1;
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v476, v448 - 16, 1, a4, a5, a6, a7, a8);
                goto LABEL_1280;
              }
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + (((((unint64_t)(v448 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((((v448 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 != 1)
                goto LABEL_1279;
LABEL_665:
              v477 = *(unsigned int *)(v476 + 8000);
              if (v477 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v476, v448 - 16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                StatusReg = v891;
                a3 = v892;
              }
              else
              {
                *(_QWORD *)(v476 + 8 * v477) = v450 | 0x5000000000000;
                *(_DWORD *)(v476 + 8000) = v477 + 1;
              }
              v453 = 1;
LABEL_668:
              v10 = a2;
LABEL_628:
              v420 |= v453;
LABEL_606:
              v429 = v416 + 32;
              v416 = v418;
              if (v429 != v418)
              {
                v416 = v429;
                while (1)
                {
                  v425 = *(_DWORD *)(v416 + 8);
                  if (*(_QWORD *)v416)
                    break;
                  v426 = *(_DWORD *)(v416 + 12);
                  if (v425 | v426)
                    goto LABEL_599;
LABEL_597:
                  v416 += 32;
                  if (v416 == v418)
                  {
                    v416 = v418;
                    goto LABEL_604;
                  }
                }
                v426 = *(_DWORD *)(v416 + 12);
LABEL_599:
                if (v425)
                  v427 = 1;
                else
                  v427 = v426 == 0;
                if (v427)
                  goto LABEL_604;
                goto LABEL_597;
              }
LABEL_604:
              if (v416 != v419)
                continue;
              break;
            }
            if ((v420 & 1) == 0)
              goto LABEL_815;
          }
        }
        v365 = *(_QWORD *)(*(_QWORD *)v10
                         + 16 * (*(unsigned int *)(v10 + 16) + (unint64_t)*(unsigned int *)(v10 + 20)));
        if (v365 < 2)
          goto LABEL_1012;
        v366 = *a3;
        if (*a3)
          goto LABEL_515;
        v486 = *(_QWORD *)(StatusReg + 752);
        if (v486)
        {
          v487 = (_BYTE *)(v486 + 9040);
          *(_BYTE *)(v486 + 9040) = 1;
          v488 = *(unsigned int *)(v486 + 9056);
          if ((_DWORD)v488)
          {
            *(_DWORD *)(v486 + 9056) = v488 - *(_DWORD *)(v486 + 9060);
            v489 = (_OWORD *)(*(_QWORD *)(v486 + 9048) - v488);
LABEL_686:
            *v487 = 0;
            v19 = 1;
            goto LABEL_687;
          }
          v777 = *(_QWORD *)(v486 + 9080);
          v778 = *(_QWORD *)(v486 + 9064);
          if (v777)
          {
LABEL_1161:
            v779 = __clz(v777);
            *(_QWORD *)(v486 + 9080) = v777 & ~(0x8000000000000000 >> v779);
            v489 = (_OWORD *)(v778 + 16 * v779);
            goto LABEL_686;
          }
          if (*(_BYTE *)(v486 + 9045) == 6)
          {
            v865 = *(_DWORD *)(v486 + 9076);
            v866 = *(unsigned int *)(v486 + 9072);
            if (v866 < v865)
            {
              *(_QWORD *)&v487[8 * v866 + 56] = 0;
              v867 = (unint64_t *)(v486 + 8 * v866 + 9104);
              v868 = v865 - 1 - v866;
              while (v868)
              {
                v778 += 1024;
                v870 = *v867++;
                v869 = v870;
                LODWORD(v866) = v866 + 1;
                --v868;
                if (v870)
                {
                  v777 = __rbit64(v869);
                  *(_DWORD *)(v486 + 9072) = v866;
                  *(_QWORD *)(v486 + 9064) = v778;
                  a3 = v892;
                  goto LABEL_1161;
                }
              }
              *(_DWORD *)(v486 + 9072) = v865;
            }
          }
          *v487 = 0;
        }
        v489 = bmalloc_allocate_impl_casual_case(0x50uLL, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
        a3 = v892;
LABEL_687:
        if ((v19 & 1) != 0)
        {
          StatusReg = v891;
          if ((v19 & 0xFFFFFFFF00000000) != 0x100000000)
          {
            v489[3] = 0u;
            v489[4] = 0u;
            v489[1] = 0u;
            v489[2] = 0u;
            *v489 = 0u;
          }
        }
        else
        {
          StatusReg = v891;
        }
        *a3 = (uint64_t)(v489 + 1);
        *((_DWORD *)v489 + 3) = 8;
        *(_DWORD *)(*a3 - 8) = 7;
        *(_DWORD *)(*a3 - 16) = 0;
        *(_DWORD *)(*a3 - 12) = 0;
        v366 = *a3;
        v10 = a2;
        if (*a3)
        {
LABEL_515:
          v367 = *(_DWORD *)(v366 - 8);
          goto LABEL_516;
        }
        v367 = 0;
LABEL_516:
        v368 = (~(v365 << 32) + v365) ^ ((~(v365 << 32) + v365) >> 22);
        v369 = 9 * ((v368 + ~(v368 << 13)) ^ ((v368 + ~(v368 << 13)) >> 8));
        v370 = (v369 ^ (v369 >> 15)) + ~((v369 ^ (v369 >> 15)) << 27);
        v371 = v367 & ((v370 >> 31) ^ v370);
        v372 = (unint64_t *)(v366 + 8 * v371);
        v373 = *v372;
        if (*v372)
        {
          v374 = 0;
          v375 = 1;
          do
          {
            if (v373 == v365)
              goto LABEL_814;
            if (v373 == -1)
              v374 = v372;
            v371 = (v371 + v375) & v367;
            v372 = (unint64_t *)(v366 + 8 * v371);
            v373 = *v372;
            ++v375;
          }
          while (*v372);
          if (v374)
          {
            *v374 = 0;
            --*(_DWORD *)(*a3 - 16);
            v372 = v374;
          }
        }
        *v372 = v365;
        v376 = *a3;
        if (*a3)
          v377 = *(_DWORD *)(v376 - 12) + 1;
        else
          v377 = 1;
        *(_DWORD *)(v376 - 12) = v377;
        v378 = *a3;
        if (*a3)
          v379 = *(_DWORD *)(v378 - 12);
        else
          v379 = 0;
        v380 = v378 - 16;
        v381 = (*(_DWORD *)(v378 - 16) + v379);
        v382 = *(unsigned int *)(v378 - 4);
        if (v382 > 0x400)
        {
          if (v382 > 2 * v381)
            goto LABEL_709;
          v383 = *(_DWORD *)(v378 - 12);
          goto LABEL_531;
        }
        if (3 * v382 > 4 * v381)
          goto LABEL_709;
        v383 = *(_DWORD *)(v378 - 12);
        if ((_DWORD)v382)
        {
LABEL_531:
          v384 = (_DWORD)v382 << (6 * v383 >= (2 * v382));
          goto LABEL_532;
        }
        v384 = 8;
LABEL_532:
        v385 = 8 * v384;
        v386 = v385 + 16;
        v387 = *(_QWORD *)(StatusReg + 752);
        if (v387)
        {
          v388 = (unint64_t)(v385 + 31) >> 4;
          if (v384 <= 0x32)
          {
            v389 = 23 * v388 + 7;
          }
          else
          {
            if (v384 > 0x4E0)
              goto LABEL_1394;
            v389 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v388 + 626);
            if (*(_DWORD *)(v387 + 8052) <= v389)
              goto LABEL_1394;
          }
          v490 = v387 + 8 * v389;
          v491 = v490 + 8064;
          *(_BYTE *)(v490 + 8064) = 1;
          v492 = *(unsigned int *)(v490 + 8080);
          if ((_DWORD)v492)
          {
            *(_DWORD *)(v491 + 16) = v492 - *(_DWORD *)(v491 + 20);
            v493 = *(_QWORD *)(v491 + 8) - v492;
          }
          else
          {
            v774 = *(_QWORD *)(v491 + 40);
            v775 = *(_QWORD *)(v491 + 24);
            if (!v774)
            {
              if (*(_BYTE *)(v491 + 5) == 6)
              {
                v859 = *(unsigned int *)(v491 + 32);
                v860 = *(_DWORD *)(v491 + 36);
                if (v859 < v860)
                {
                  *(_QWORD *)(v491 + 8 * v859 + 56) = 0;
                  v861 = (unint64_t *)(v387 + 8128 + 8 * v389 + 8 * v859);
                  v862 = v860 - 1 - v859;
                  while (v862)
                  {
                    v775 += 1024;
                    v864 = *v861++;
                    v863 = v864;
                    LODWORD(v859) = v859 + 1;
                    --v862;
                    if (v864)
                    {
                      v774 = __rbit64(v863);
                      *(_DWORD *)(v491 + 32) = v859;
                      *(_QWORD *)(v491 + 24) = v775;
                      StatusReg = v891;
                      a3 = v892;
                      v10 = a2;
                      goto LABEL_1155;
                    }
                  }
                  *(_DWORD *)(v491 + 32) = v860;
                }
              }
              *(_BYTE *)v491 = 0;
              goto LABEL_1394;
            }
LABEL_1155:
            v776 = __clz(v774);
            *(_QWORD *)(v491 + 40) = v774 & ~(0x8000000000000000 >> v776);
            v493 = v775 + 16 * v776;
          }
          *(_BYTE *)v491 = 0;
          v19 = 1;
          goto LABEL_704;
        }
LABEL_1394:
        v871 = bmalloc_allocate_impl_casual_case(v386, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
        StatusReg = v891;
        a3 = v892;
        v493 = (unint64_t)v871;
        v10 = a2;
LABEL_704:
        if ((v19 & 1) != 0 && (v19 & 0xFFFFFFFF00000000) != 0x100000000)
        {
          if (v384 <= 0x1FFFFD)
            goto LABEL_1170;
          v780 = pas_page_malloc_cached_alignment;
          if (!pas_page_malloc_cached_alignment)
          {
            v780 = pas_page_malloc_alignment_slow();
            pas_page_malloc_cached_alignment = v780;
          }
          if (((v780 - 1) & (v386 | v493)) != 0)
          {
LABEL_1170:
            bzero((void *)v493, v386);
          }
          else
          {
            if (!v780)
              pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
            mmap((void *)v493, v386, 3, 4114, 889192448, 0);
          }
          StatusReg = v891;
          a3 = v892;
          v10 = a2;
        }
        *a3 = v493 + 16;
        *(_DWORD *)(v493 + 12) = v384;
        *(_DWORD *)(*a3 - 8) = v384 - 1;
        *(_DWORD *)(*a3 - 16) = 0;
        *(_DWORD *)(*a3 - 12) = v383;
        if (!(_DWORD)v382)
          goto LABEL_116;
        for (ii = 0; ii != v382; ++ii)
        {
          v100 = *(_QWORD *)(v378 + 8 * ii);
          if ((unint64_t)(v100 + 1) >= 2)
          {
            v101 = *a3;
            if (*a3)
              v102 = *(_DWORD *)(v101 - 8);
            else
              v102 = 0;
            v103 = (~(v100 << 32) + v100) ^ ((unint64_t)(~(v100 << 32) + v100) >> 22);
            v104 = 9 * ((v103 + ~(v103 << 13)) ^ ((v103 + ~(v103 << 13)) >> 8));
            v105 = (v104 ^ (v104 >> 15)) + ~((v104 ^ (v104 >> 15)) << 27);
            v106 = v102 & ((v105 >> 31) ^ v105);
            v107 = 1;
            do
            {
              v108 = v106;
              v109 = *(_QWORD *)(v101 + 8 * v106);
              v106 = (v106 + v107++) & v102;
            }
            while (v109);
            *(_QWORD *)(v101 + 8 * v108) = v100;
          }
        }
        if (v378)
        {
LABEL_116:
          v110 = *(_QWORD *)(StatusReg + 752);
          if (!v110)
          {
            pas_try_deallocate_slow_no_cache(v378 - 16, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_1354;
          }
          if (!(v380 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                 + (((unint64_t)(v378 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v378 - 16) >> 24)) & 1) != 0)
          {
            goto LABEL_119;
          }
          if (v380 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v380 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8
                            + (((((unint64_t)(v378 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2 * ((((v378 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
            {
LABEL_119:
              v111 = *(unsigned int *)(v110 + 8000);
              if (v111 < 0x3E7)
              {
                *(_QWORD *)(v110 + 8 * v111) = v380 | 0x5000000000000;
                *(_DWORD *)(v110 + 8000) = v111 + 1;
LABEL_121:
                v10 = a2;
                goto LABEL_709;
              }
              pas_thread_local_cache_append_deallocation_slow(v110, v378 - 16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
LABEL_1354:
              StatusReg = v891;
              a3 = v892;
              goto LABEL_121;
            }
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v110, v378 - 16, 1, a4, a5, a6, a7, a8);
          goto LABEL_1354;
        }
LABEL_709:
        while (2)
        {
          v494 = *(_QWORD *)(v10 + 24);
          if (!v494)
          {
            v495 = 0;
            v496 = 0;
            goto LABEL_711;
          }
          v499 = *(unsigned int *)(v494 - 4);
          v496 = v494 + 32 * v499;
          if (*(_DWORD *)(v494 - 12))
          {
            v495 = *(_QWORD *)(v10 + 24);
            if (!(_DWORD)v499)
              goto LABEL_711;
            v500 = 32 * v499;
            v495 = *(_QWORD *)(v10 + 24);
            while (1)
            {
              v501 = *(_DWORD *)(v495 + 8);
              if (*(_QWORD *)v495)
                break;
              v502 = *(_DWORD *)(v495 + 12);
              if (v501 | v502)
                goto LABEL_723;
LABEL_721:
              v495 += 32;
              v500 -= 32;
              if (!v500)
              {
                v495 = v496;
                goto LABEL_711;
              }
            }
            v502 = *(_DWORD *)(v495 + 12);
LABEL_723:
            if (v501)
              v503 = 1;
            else
              v503 = v502 == 0;
            if (v503)
              goto LABEL_711;
            goto LABEL_721;
          }
          v495 = v494 + 32 * v499;
          v496 = v495;
LABEL_711:
          if (v494)
            v497 = v494 + 32 * *(unsigned int *)(v494 - 4);
          else
            v497 = 0;
          if (v497 == v495)
            break;
          v498 = 0;
          do
          {
            while (1)
            {
              v507 = *(_QWORD *)(v495 + 16);
              if (v507 < 2)
                goto LABEL_739;
              v509 = *a3;
              if (!*a3)
                goto LABEL_739;
              v510 = *(_DWORD *)(v509 - 8);
              v511 = ~(*(_QWORD *)v495 << 32) + *(_QWORD *)v495;
              v512 = (v511 ^ (v511 >> 22)) + ~((v511 ^ (v511 >> 22)) << 13);
              v513 = (9 * (v512 ^ (v512 >> 8))) ^ ((9 * (v512 ^ (v512 >> 8))) >> 15);
              v514 = v510 & (((v513 + ~(v513 << 27)) >> 31) ^ (v513 + ~((_DWORD)v513 << 27)));
              v515 = *(_QWORD *)(v509 + 8 * v514);
              if (v515 == *(_QWORD *)v495)
              {
LABEL_746:
                v517 = (~(v507 << 32) + v507) ^ ((~(v507 << 32) + v507) >> 22);
                v518 = 9 * ((v517 + ~(v517 << 13)) ^ ((v517 + ~(v517 << 13)) >> 8));
                v519 = (v518 ^ (v518 >> 15)) + ~((v518 ^ (v518 >> 15)) << 27);
                v520 = v510 & ((v519 >> 31) ^ v519);
                v521 = (unint64_t *)(v509 + 8 * v520);
                v522 = *v521;
                if (*v521)
                {
                  v523 = 0;
                  v524 = 1;
                  do
                  {
                    if (v522 == v507)
                    {
                      v532 = 0;
                      goto LABEL_761;
                    }
                    if (v522 == -1)
                      v523 = v521;
                    v520 = (v520 + v524) & v510;
                    v521 = (unint64_t *)(v509 + 8 * v520);
                    v522 = *v521;
                    ++v524;
                  }
                  while (*v521);
                  if (v523)
                  {
                    *v523 = 0;
                    --*(_DWORD *)(*a3 - 16);
                    v521 = v523;
                  }
                }
                *v521 = v507;
                v525 = *a3;
                if (*a3)
                  v526 = *(_DWORD *)(v525 - 12) + 1;
                else
                  v526 = 1;
                *(_DWORD *)(v525 - 12) = v526;
                v527 = *a3;
                if (*a3)
                  v528 = *(_DWORD *)(v527 - 12);
                else
                  v528 = 0;
                v529 = v527 - 16;
                v530 = (*(_DWORD *)(v527 - 16) + v528);
                v531 = *(unsigned int *)(v527 - 4);
                if (v531 > 0x400)
                {
                  if (v531 > 2 * v530)
                    goto LABEL_760;
                  a4 = *(unsigned int *)(v527 - 12);
                }
                else
                {
                  if (3 * v531 > 4 * v530)
                  {
LABEL_760:
                    v532 = 1;
LABEL_761:
                    v498 |= v532;
                    goto LABEL_739;
                  }
                  a4 = *(unsigned int *)(v527 - 12);
                  if (!(_DWORD)v531)
                  {
                    v533 = 8;
LABEL_767:
                    v534 = 8 * v533;
                    v535 = v534 + 16;
                    v536 = *(_QWORD *)(StatusReg + 752);
                    if (v536)
                    {
                      v537 = (unint64_t)(v534 + 31) >> 4;
                      if (v533 <= 0x32)
                      {
                        v538 = 23 * v537 + 7;
                      }
                      else
                      {
                        if (v533 > 0x4E0)
                          goto LABEL_1307;
                        v538 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v537 + 626);
                        if (*(_DWORD *)(v536 + 8052) <= v538)
                          goto LABEL_1307;
                      }
                      v539 = v536 + 8 * v538;
                      v540 = v539 + 8064;
                      *(_BYTE *)(v539 + 8064) = 1;
                      v541 = *(unsigned int *)(v539 + 8080);
                      if ((_DWORD)v541)
                      {
                        *(_DWORD *)(v540 + 16) = v541 - *(_DWORD *)(v540 + 20);
                        v542 = *(_QWORD *)(v540 + 8) - v541;
                      }
                      else
                      {
                        v556 = *(_QWORD *)(v540 + 40);
                        v557 = *(_QWORD *)(v540 + 24);
                        if (!v556)
                        {
                          if (*(_BYTE *)(v540 + 5) == 6)
                          {
                            v795 = *(unsigned int *)(v540 + 32);
                            v796 = *(_DWORD *)(v540 + 36);
                            if (v795 < v796)
                            {
                              *(_QWORD *)(v540 + 8 * v795 + 56) = 0;
                              v797 = (unint64_t *)(v536 + 8128 + 8 * v538 + 8 * v795);
                              v798 = v796 - 1 - v795;
                              while (v798)
                              {
                                v557 += 1024;
                                v800 = *v797++;
                                v799 = v800;
                                LODWORD(v795) = v795 + 1;
                                --v798;
                                if (v800)
                                {
                                  v556 = __rbit64(v799);
                                  *(_DWORD *)(v540 + 32) = v795;
                                  *(_QWORD *)(v540 + 24) = v557;
                                  goto LABEL_805;
                                }
                              }
                              *(_DWORD *)(v540 + 32) = v796;
                            }
                          }
                          *(_BYTE *)v540 = 0;
                          goto LABEL_1307;
                        }
LABEL_805:
                        v558 = __clz(v556);
                        *(_QWORD *)(v540 + 40) = v556 & ~(0x8000000000000000 >> v558);
                        v542 = v557 + 16 * v558;
                      }
                      *(_BYTE *)v540 = 0;
                      v19 = 1;
LABEL_780:
                      if ((v19 & 1) == 0 || (v19 & 0xFFFFFFFF00000000) == 0x100000000)
                        goto LABEL_787;
                      v915 = a4;
                      v902 = v533;
                      if (v533 <= 0x1FFFFD)
                      {
                        v560 = (void *)v542;
                        v561 = v535;
                      }
                      else
                      {
                        v559 = pas_page_malloc_cached_alignment;
                        if (!pas_page_malloc_cached_alignment)
                        {
                          v559 = pas_page_malloc_alignment_slow();
                          pas_page_malloc_cached_alignment = v559;
                        }
                        if (((v559 - 1) & (v535 | v542)) == 0)
                        {
                          if (!v559)
                            pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
                          mmap((void *)v542, v535, 3, 4114, 889192448, 0);
                          goto LABEL_786;
                        }
                        v561 = v535;
                        v560 = (void *)v542;
                      }
                      bzero(v560, v561);
LABEL_786:
                      StatusReg = v891;
                      a3 = v892;
                      v10 = a2;
                      v533 = v902;
                      a4 = v915;
LABEL_787:
                      *a3 = v542 + 16;
                      *(_DWORD *)(v542 + 12) = v533;
                      *(_DWORD *)(*a3 - 8) = v533 - 1;
                      *(_DWORD *)(*a3 - 16) = 0;
                      *(_DWORD *)(*a3 - 12) = a4;
                      if ((_DWORD)v531)
                      {
                        for (jj = 0; jj != v531; ++jj)
                        {
                          v544 = *(_QWORD *)(v527 + 8 * jj);
                          if ((unint64_t)(v544 + 1) >= 2)
                          {
                            v545 = *a3;
                            if (*a3)
                              v546 = *(_DWORD *)(v545 - 8);
                            else
                              v546 = 0;
                            v547 = (~(v544 << 32) + v544) ^ ((unint64_t)(~(v544 << 32) + v544) >> 22);
                            v548 = 9 * ((v547 + ~(v547 << 13)) ^ ((v547 + ~(v547 << 13)) >> 8));
                            v549 = (v548 ^ (v548 >> 15)) + ~((v548 ^ (v548 >> 15)) << 27);
                            v550 = v546 & ((v549 >> 31) ^ v549);
                            v551 = 1;
                            do
                            {
                              v552 = v550;
                              v553 = *(_QWORD *)(v545 + 8 * v550);
                              v550 = (v550 + v551++) & v546;
                            }
                            while (v553);
                            *(_QWORD *)(v545 + 8 * v552) = v544;
                          }
                        }
                        if (!v527)
                          goto LABEL_760;
                      }
                      v554 = *(_QWORD *)(StatusReg + 752);
                      if (v554)
                      {
                        if (!(v529 >> 43)
                          && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                               + (((unint64_t)(v527 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v527 - 16) >> 24)) & 1) != 0)
                        {
LABEL_800:
                          v555 = *(unsigned int *)(v554 + 8000);
                          if (v555 >= 0x3E7)
                          {
                            pas_thread_local_cache_append_deallocation_slow(v554, v527 - 16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                            StatusReg = v891;
                            a3 = v892;
                          }
                          else
                          {
                            *(_QWORD *)(v554 + 8 * v555) = v529 | 0x5000000000000;
                            *(_DWORD *)(v554 + 8000) = v555 + 1;
                          }
                          v532 = 1;
                          goto LABEL_803;
                        }
                        if (v529 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v529 >> 24)
                        {
                          a4 = 0;
                        }
                        else
                        {
                          a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + (((((unint64_t)(v527 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2
                                                  * ((((v527 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                          if ((_DWORD)a4 == 1)
                            goto LABEL_800;
                        }
                        v532 = 1;
                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v554, v527 - 16, 1, a4, a5, a6, a7, a8);
                      }
                      else
                      {
                        v532 = 1;
                        pas_try_deallocate_slow_no_cache(v527 - 16, (uint64_t)&bmalloc_heap_config, 1);
                      }
                      StatusReg = v891;
                      a3 = v892;
LABEL_803:
                      v10 = a2;
                      goto LABEL_761;
                    }
LABEL_1307:
                    v919 = a4;
                    v904 = v533;
                    v838 = bmalloc_allocate_impl_casual_case(v535, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
                    StatusReg = v891;
                    a3 = v892;
                    v542 = (unint64_t)v838;
                    v533 = v904;
                    a4 = v919;
                    v10 = a2;
                    goto LABEL_780;
                  }
                }
                v533 = (_DWORD)v531 << (6 * (int)a4 >= (2 * v531));
                goto LABEL_767;
              }
              v516 = 1;
              while (v515)
              {
                v514 = (v514 + v516) & v510;
                v515 = *(_QWORD *)(v509 + 8 * v514);
                ++v516;
                if (v515 == *(_QWORD *)v495)
                  goto LABEL_746;
              }
LABEL_739:
              v508 = v495 + 32;
              v495 = v496;
              if (v508 != v496)
                break;
LABEL_737:
              if (v495 == v497)
                goto LABEL_708;
            }
            v495 = v508;
            do
            {
              v504 = *(_DWORD *)(v495 + 8);
              if (*(_QWORD *)v495)
              {
                v505 = *(_DWORD *)(v495 + 12);
              }
              else
              {
                v505 = *(_DWORD *)(v495 + 12);
                if (!(v504 | v505))
                  goto LABEL_730;
              }
              if (v504)
                v506 = 1;
              else
                v506 = v505 == 0;
              if (v506)
                goto LABEL_737;
LABEL_730:
              v495 += 32;
            }
            while (v495 != v496);
            v495 = v496;
          }
          while (v496 != v497);
LABEL_708:
          if ((v498 & 1) != 0)
            continue;
          break;
        }
LABEL_814:
        if (v881)
        {
LABEL_815:
          v562 = *(_DWORD **)v881;
          if (*(_QWORD *)v881)
            LODWORD(v562) = *v562;
          v890 = v907 + 5;
          v900 = (_DWORD)v562 + v907 + 5;
          if (v907 + 5 >= v900)
          {
LABEL_998:
            v9 = *(_QWORD *)(v881 + 16);
            v912 = 1;
            v11 = (uint64_t *)(v881 + 16);
            continue;
          }
          v563 = v907 + 5;
LABEL_820:
          v896 = v563;
          if ((v563 & 0x80000000) != 0)
          {
            v564 = *(_QWORD *)(*(_QWORD *)v10 + 16 * ((v563 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v10 + 16)));
            if (v564 < 2)
              goto LABEL_819;
          }
          else
          {
            v564 = *(_QWORD *)(*(_QWORD *)v10 + 16 * ((uint64_t)(((unint64_t)v563 << 32) - 0x500000000) >> 32));
            if (v564 < 2)
              goto LABEL_819;
          }
          v565 = *a3;
          if (*a3)
          {
LABEL_823:
            v566 = *(_DWORD *)(v565 - 8);
            goto LABEL_824;
          }
          v589 = *(_QWORD *)(StatusReg + 752);
          if (v589)
          {
            v590 = (_BYTE *)(v589 + 9040);
            *(_BYTE *)(v589 + 9040) = 1;
            v591 = *(unsigned int *)(v589 + 9056);
            if ((_DWORD)v591)
            {
              *(_DWORD *)(v589 + 9056) = v591 - *(_DWORD *)(v589 + 9060);
              v592 = (_OWORD *)(*(_QWORD *)(v589 + 9048) - v591);
              goto LABEL_850;
            }
            v616 = *(_QWORD *)(v589 + 9080);
            v617 = *(_QWORD *)(v589 + 9064);
            if (v616)
            {
LABEL_892:
              v618 = __clz(v616);
              *(_QWORD *)(v589 + 9080) = v616 & ~(0x8000000000000000 >> v618);
              v592 = (_OWORD *)(v617 + 16 * v618);
LABEL_850:
              *v590 = 0;
              v593 = 1;
LABEL_851:
              if ((v593 & 1) != 0)
              {
                StatusReg = v891;
                if ((v593 & 0xFFFFFFFF00000000) != 0x100000000)
                {
                  v592[3] = 0u;
                  v592[4] = 0u;
                  v592[1] = 0u;
                  v592[2] = 0u;
                  *v592 = 0u;
                }
              }
              else
              {
                StatusReg = v891;
              }
              *a3 = (uint64_t)(v592 + 1);
              *((_DWORD *)v592 + 3) = 8;
              *(_DWORD *)(*a3 - 8) = 7;
              *(_DWORD *)(*a3 - 16) = 0;
              *(_DWORD *)(*a3 - 12) = 0;
              v565 = *a3;
              v10 = a2;
              if (*a3)
                goto LABEL_823;
              v566 = 0;
LABEL_824:
              v567 = (~(v564 << 32) + v564) ^ ((~(v564 << 32) + v564) >> 22);
              v568 = 9 * ((v567 + ~(v567 << 13)) ^ ((v567 + ~(v567 << 13)) >> 8));
              v569 = (v568 ^ (v568 >> 15)) + ~((v568 ^ (v568 >> 15)) << 27);
              v570 = v566 & ((v569 >> 31) ^ v569);
              v571 = (unint64_t *)(v565 + 8 * v570);
              v572 = *v571;
              if (*v571)
              {
                v573 = 0;
                v574 = 1;
                do
                {
                  if (v572 == v564)
                    goto LABEL_819;
                  if (v572 == -1)
                    v573 = v571;
                  v570 = (v570 + v574) & v566;
                  v571 = (unint64_t *)(v565 + 8 * v570);
                  v572 = *v571;
                  ++v574;
                }
                while (*v571);
                if (v573)
                {
                  *v573 = 0;
                  --*(_DWORD *)(*a3 - 16);
                  v571 = v573;
                }
              }
              *v571 = v564;
              v575 = *a3;
              if (*a3)
                v576 = *(_DWORD *)(v575 - 12) + 1;
              else
                v576 = 1;
              *(_DWORD *)(v575 - 12) = v576;
              v577 = *a3;
              if (*a3)
                v578 = *(_DWORD *)(v577 - 12);
              else
                v578 = 0;
              v579 = v577 - 16;
              v580 = (*(_DWORD *)(v577 - 16) + v578);
              v581 = *(unsigned int *)(v577 - 4);
              if (v581 > 0x400)
              {
                if (v581 > 2 * v580)
                  goto LABEL_895;
                v582 = *(_DWORD *)(v577 - 12);
LABEL_839:
                v583 = (_DWORD)v581 << (6 * v582 >= (2 * v581));
              }
              else
              {
                if (3 * v581 > 4 * v580)
                  goto LABEL_895;
                v582 = *(_DWORD *)(v577 - 12);
                if ((_DWORD)v581)
                  goto LABEL_839;
                v583 = 8;
              }
              v584 = 8 * v583;
              v585 = v584 + 16;
              v586 = *(_QWORD *)(StatusReg + 752);
              if (v586)
              {
                v587 = (unint64_t)(v584 + 31) >> 4;
                if (v583 <= 0x32)
                {
                  v588 = 23 * v587 + 7;
                }
                else
                {
                  if (v583 > 0x4E0)
                    goto LABEL_1344;
                  v588 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v587 + 626);
                  if (*(_DWORD *)(v586 + 8052) <= v588)
                    goto LABEL_1344;
                }
                v594 = v586 + 8 * v588;
                v595 = v594 + 8064;
                *(_BYTE *)(v594 + 8064) = 1;
                v596 = *(unsigned int *)(v594 + 8080);
                if ((_DWORD)v596)
                {
                  *(_DWORD *)(v595 + 16) = v596 - *(_DWORD *)(v595 + 20);
                  v597 = *(_QWORD *)(v595 + 8) - v596;
                  goto LABEL_863;
                }
                v613 = *(_QWORD *)(v595 + 40);
                v614 = *(_QWORD *)(v595 + 24);
                if (v613)
                {
LABEL_890:
                  v615 = __clz(v613);
                  *(_QWORD *)(v595 + 40) = v613 & ~(0x8000000000000000 >> v615);
                  v597 = v614 + 16 * v615;
LABEL_863:
                  *(_BYTE *)v595 = 0;
                  v598 = 1;
LABEL_864:
                  if ((v598 & 1) != 0 && (v598 & 0xFFFFFFFF00000000) != 0x100000000)
                  {
                    if (v583 <= 0x1FFFFD)
                      goto LABEL_870;
                    v599 = pas_page_malloc_cached_alignment;
                    if (!pas_page_malloc_cached_alignment)
                    {
                      v599 = pas_page_malloc_alignment_slow();
                      pas_page_malloc_cached_alignment = v599;
                    }
                    if (((v599 - 1) & (v585 | v597)) != 0)
                    {
LABEL_870:
                      bzero((void *)v597, v585);
                    }
                    else
                    {
                      if (!v599)
                        pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
                      mmap((void *)v597, v585, 3, 4114, 889192448, 0);
                    }
                    StatusReg = v891;
                    a3 = v892;
                    v10 = a2;
                  }
                  *a3 = v597 + 16;
                  *(_DWORD *)(v597 + 12) = v583;
                  *(_DWORD *)(*a3 - 8) = v583 - 1;
                  *(_DWORD *)(*a3 - 16) = 0;
                  *(_DWORD *)(*a3 - 12) = v582;
                  if (!(_DWORD)v581)
                    goto LABEL_882;
                  for (kk = 0; kk != v581; ++kk)
                  {
                    v601 = *(_QWORD *)(v577 + 8 * kk);
                    if ((unint64_t)(v601 + 1) >= 2)
                    {
                      v602 = *a3;
                      if (*a3)
                        v603 = *(_DWORD *)(v602 - 8);
                      else
                        v603 = 0;
                      v604 = (~(v601 << 32) + v601) ^ ((unint64_t)(~(v601 << 32) + v601) >> 22);
                      v605 = 9 * ((v604 + ~(v604 << 13)) ^ ((v604 + ~(v604 << 13)) >> 8));
                      v606 = (v605 ^ (v605 >> 15)) + ~((v605 ^ (v605 >> 15)) << 27);
                      v607 = v603 & ((v606 >> 31) ^ v606);
                      v608 = 1;
                      do
                      {
                        v609 = v607;
                        v610 = *(_QWORD *)(v602 + 8 * v607);
                        v607 = (v607 + v608++) & v603;
                      }
                      while (v610);
                      *(_QWORD *)(v602 + 8 * v609) = v601;
                    }
                  }
                  if (v577)
                  {
LABEL_882:
                    v611 = *(_QWORD *)(StatusReg + 752);
                    if (v611)
                    {
                      if (v579 >> 43
                        || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                             + (((unint64_t)(v577 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v577 - 16) >> 24)) & 1) == 0)
                      {
                        if (v579 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v579 >> 24)
                        {
                          a4 = 0;
                        }
                        else
                        {
                          a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + (((((unint64_t)(v577 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2
                                                  * ((((v577 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                          if ((_DWORD)a4 == 1)
                            goto LABEL_885;
                        }
                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v611, v577 - 16, 1, a4, a5, a6, a7, a8);
                      }
                      else
                      {
LABEL_885:
                        v612 = *(unsigned int *)(v611 + 8000);
                        if (v612 < 0x3E7)
                        {
                          *(_QWORD *)(v611 + 8 * v612) = v579 | 0x5000000000000;
                          *(_DWORD *)(v611 + 8000) = v612 + 1;
LABEL_887:
                          a3 = v892;
                          v10 = a2;
                          goto LABEL_895;
                        }
                        pas_thread_local_cache_append_deallocation_slow(v611, v577 - 16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                      }
                    }
                    else
                    {
                      pas_try_deallocate_slow_no_cache(v577 - 16, (uint64_t)&bmalloc_heap_config, 1);
                    }
                    StatusReg = v891;
                    goto LABEL_887;
                  }
LABEL_895:
                  while (2)
                  {
                    v619 = *(_QWORD *)(v10 + 24);
                    if (!v619)
                    {
                      v620 = 0;
                      v621 = 0;
                      goto LABEL_897;
                    }
                    v624 = *(unsigned int *)(v619 - 4);
                    v621 = v619 + 32 * v624;
                    if (*(_DWORD *)(v619 - 12))
                    {
                      v620 = *(_QWORD *)(v10 + 24);
                      if (!(_DWORD)v624)
                        goto LABEL_897;
                      v625 = 32 * v624;
                      v620 = *(_QWORD *)(v10 + 24);
                      while (1)
                      {
                        v626 = *(_DWORD *)(v620 + 8);
                        if (*(_QWORD *)v620)
                          break;
                        v627 = *(_DWORD *)(v620 + 12);
                        if (v626 | v627)
                          goto LABEL_909;
LABEL_907:
                        v620 += 32;
                        v625 -= 32;
                        if (!v625)
                        {
                          v620 = v621;
                          goto LABEL_897;
                        }
                      }
                      v627 = *(_DWORD *)(v620 + 12);
LABEL_909:
                      if (v626)
                        v628 = 1;
                      else
                        v628 = v627 == 0;
                      if (v628)
                        goto LABEL_897;
                      goto LABEL_907;
                    }
                    v620 = v619 + 32 * v624;
                    v621 = v620;
LABEL_897:
                    if (v619)
                    {
                      v622 = v619 + 32 * *(unsigned int *)(v619 - 4);
                      if (v622 == v620)
                        goto LABEL_819;
                    }
                    else
                    {
                      v622 = 0;
                      if (!v620)
                        goto LABEL_819;
                    }
                    v623 = 0;
LABEL_924:
                    while (2)
                    {
                      v632 = *(_QWORD *)(v620 + 16);
                      if (v632 >= 2)
                      {
                        v634 = *a3;
                        if (*a3)
                        {
                          v635 = *(_DWORD *)(v634 - 8);
                          v636 = ~(*(_QWORD *)v620 << 32) + *(_QWORD *)v620;
                          v637 = (v636 ^ (v636 >> 22)) + ~((v636 ^ (v636 >> 22)) << 13);
                          v638 = (9 * (v637 ^ (v637 >> 8))) ^ ((9 * (v637 ^ (v637 >> 8))) >> 15);
                          v639 = v635 & (((v638 + ~(v638 << 27)) >> 31) ^ (v638 + ~((_DWORD)v638 << 27)));
                          v640 = *(_QWORD *)(v634 + 8 * v639);
                          if (v640 != *(_QWORD *)v620)
                          {
                            v641 = 1;
                            while (v640)
                            {
                              v639 = (v639 + v641) & v635;
                              v640 = *(_QWORD *)(v634 + 8 * v639);
                              ++v641;
                              if (v640 == *(_QWORD *)v620)
                                goto LABEL_932;
                            }
                            goto LABEL_925;
                          }
LABEL_932:
                          v642 = (~(v632 << 32) + v632) ^ ((~(v632 << 32) + v632) >> 22);
                          v643 = 9 * ((v642 + ~(v642 << 13)) ^ ((v642 + ~(v642 << 13)) >> 8));
                          v644 = (v643 ^ (v643 >> 15)) + ~((v643 ^ (v643 >> 15)) << 27);
                          v645 = v635 & ((v644 >> 31) ^ v644);
                          v646 = (unint64_t *)(v634 + 8 * v645);
                          v647 = *v646;
                          if (*v646)
                          {
                            v648 = 0;
                            v649 = 1;
                            do
                            {
                              if (v647 == v632)
                              {
                                v654 = 0;
                                goto LABEL_945;
                              }
                              if (v647 == -1)
                                v648 = v646;
                              v645 = (v645 + v649) & v635;
                              v646 = (unint64_t *)(v634 + 8 * v645);
                              v647 = *v646;
                              ++v649;
                            }
                            while (*v646);
                            if (v648)
                            {
                              *v648 = 0;
                              --*(_DWORD *)(*a3 - 16);
                              v646 = v648;
                            }
                          }
                          *v646 = v632;
                          if (*a3)
                          {
                            ++*(_DWORD *)(*a3 - 12);
                            v650 = *a3;
                            if (*a3)
                              goto LABEL_942;
LABEL_957:
                            v651 = v650 - 16;
                            v652 = *(unsigned int *)(v650 - 16);
                            v653 = *(unsigned int *)(v650 - 4);
                            if (v653 > 0x400)
                              goto LABEL_958;
LABEL_943:
                            if (3 * v653 > 4 * v652)
                              goto LABEL_944;
                            a4 = *(unsigned int *)(v650 - 12);
                            if ((_DWORD)v653)
LABEL_950:
                              v655 = (_DWORD)v653 << (6 * (int)a4 >= (2 * v653));
                            else
                              v655 = 8;
                            v656 = 8 * v655;
                            v657 = v656 + 16;
                            v658 = *(_QWORD *)(StatusReg + 752);
                            v916 = v656 + 16;
                            if (v658)
                            {
                              v659 = (unint64_t)(v656 + 31) >> 4;
                              if (v655 <= 0x32)
                              {
                                v660 = 23 * v659 + 7;
                              }
                              else
                              {
                                if (v655 > 0x4E0)
                                  goto LABEL_1011;
                                v660 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v659 + 626);
                                if (*(_DWORD *)(v658 + 8052) <= v660)
                                  goto LABEL_1011;
                              }
                              v661 = v658 + 8 * v660;
                              v662 = v661 + 8064;
                              *(_BYTE *)(v661 + 8064) = 1;
                              v663 = *(unsigned int *)(v661 + 8080);
                              if ((_DWORD)v663)
                              {
                                *(_DWORD *)(v662 + 16) = v663 - *(_DWORD *)(v662 + 20);
                                v664 = *(_QWORD *)(v662 + 8) - v663;
                                goto LABEL_963;
                              }
                              v783 = *(_QWORD *)(v662 + 40);
                              v79 = *(_QWORD *)(v662 + 24);
                              if (v783)
                              {
LABEL_989:
                                v679 = __clz(v783);
                                *(_QWORD *)(v662 + 40) = v783 & ~(0x8000000000000000 >> v679);
                                v664 = v79 + 16 * v679;
LABEL_963:
                                *(_BYTE *)v662 = 0;
                                v665 = 1;
LABEL_964:
                                if ((v665 & 1) != 0 && (v665 & 0xFFFFFFFF00000000) != 0x100000000)
                                {
                                  v908 = a4;
                                  if (v655 <= 0x1FFFFD)
                                  {
                                    v683 = (void *)v664;
                                    v681 = v916;
                                    goto LABEL_969;
                                  }
                                  v680 = pas_page_malloc_cached_alignment;
                                  v681 = v916;
                                  if (pas_page_malloc_cached_alignment)
                                  {
                                    if (((pas_page_malloc_cached_alignment - 1) & (v916 | v664)) == 0)
                                      goto LABEL_992;
LABEL_997:
                                    v683 = (void *)v664;
LABEL_969:
                                    bzero(v683, v681);
                                  }
                                  else
                                  {
                                    v680 = pas_page_malloc_alignment_slow();
                                    v681 = v916;
                                    pas_page_malloc_cached_alignment = v680;
                                    if (((v680 - 1) & (v916 | v664)) != 0)
                                      goto LABEL_997;
LABEL_992:
                                    if (!v680)
                                    {
                                      v682 = pas_page_malloc_alignment_slow();
                                      v681 = v916;
                                      pas_page_malloc_cached_alignment = v682;
                                    }
                                    mmap((void *)v664, v681, 3, 4114, 889192448, 0);
                                  }
                                  StatusReg = v891;
                                  a3 = v892;
                                  v10 = a2;
                                  a4 = v908;
                                }
                                *a3 = v664 + 16;
                                *(_DWORD *)(v664 + 12) = v655;
                                *(_DWORD *)(*a3 - 8) = v655 - 1;
                                *(_DWORD *)(*a3 - 16) = 0;
                                *(_DWORD *)(*a3 - 12) = a4;
                                if ((_DWORD)v653)
                                {
                                  for (mm = 0; mm != v653; ++mm)
                                  {
                                    v667 = *(_QWORD *)(v650 + 8 * mm);
                                    if ((unint64_t)(v667 + 1) >= 2)
                                    {
                                      v668 = *a3;
                                      if (*a3)
                                        v669 = *(_DWORD *)(v668 - 8);
                                      else
                                        v669 = 0;
                                      v670 = (~(v667 << 32) + v667) ^ ((unint64_t)(~(v667 << 32) + v667) >> 22);
                                      v671 = 9 * ((v670 + ~(v670 << 13)) ^ ((v670 + ~(v670 << 13)) >> 8));
                                      v672 = (v671 ^ (v671 >> 15)) + ~((v671 ^ (v671 >> 15)) << 27);
                                      v673 = v669 & ((v672 >> 31) ^ v672);
                                      v674 = 1;
                                      do
                                      {
                                        v675 = v673;
                                        v676 = *(_QWORD *)(v668 + 8 * v673);
                                        v673 = (v673 + v674++) & v669;
                                      }
                                      while (v676);
                                      *(_QWORD *)(v668 + 8 * v675) = v667;
                                    }
                                  }
                                  if (!v650)
                                    goto LABEL_944;
                                }
                                v677 = *(_QWORD *)(StatusReg + 752);
                                if (v677)
                                {
                                  if (!(v651 >> 43)
                                    && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                         + ((v651 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v651)) & 1) != 0)
                                  {
                                    goto LABEL_984;
                                  }
                                  if (v651 >> 24 >= *off_1ECF425F8 && off_1ECF425F8[1] > v651 >> 24)
                                  {
                                    a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                                    + ((((v651 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v651) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                    if ((_DWORD)a4 != 1)
                                      goto LABEL_1005;
LABEL_984:
                                    v678 = *(unsigned int *)(v677 + 8000);
                                    if (v678 >= 0x3E7)
                                    {
                                      pas_thread_local_cache_append_deallocation_slow(v677, v651, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                                      StatusReg = v891;
                                      a3 = v892;
                                    }
                                    else
                                    {
                                      *(_QWORD *)(v677 + 8 * v678) = v651 | 0x5000000000000;
                                      *(_DWORD *)(v677 + 8000) = v678 + 1;
                                    }
                                    v654 = 1;
LABEL_987:
                                    v10 = a2;
LABEL_945:
                                    v623 |= v654;
                                    goto LABEL_925;
                                  }
                                  a4 = 0;
LABEL_1005:
                                  v654 = 1;
                                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v677, v651, 1, a4, a5, a6, a7, a8);
                                }
                                else
                                {
                                  v654 = 1;
                                  pas_try_deallocate_slow_no_cache(v651, (uint64_t)&bmalloc_heap_config, 1);
                                }
                                StatusReg = v891;
                                a3 = v892;
                                goto LABEL_987;
                              }
                              if (*(_BYTE *)(v662 + 5) == 6)
                              {
                                v83 = *(unsigned int *)(v662 + 32);
                                v781 = *(_DWORD *)(v662 + 36);
                                if (v83 < v781)
                                {
                                  *(_QWORD *)(v662 + 8 * v83 + 56) = 0;
                                  v80 = (unint64_t *)(v658 + 8128 + 8 * v660 + 8 * v83);
                                  v84 = v781 - 1 - v83;
                                  while (v84)
                                  {
                                    v79 += 1024;
                                    v82 = *v80++;
                                    v81 = v82;
                                    LODWORD(v83) = v83 + 1;
                                    --v84;
                                    if (v82)
                                    {
                                      v783 = __rbit64(v81);
                                      *(_DWORD *)(v662 + 32) = v83;
                                      *(_QWORD *)(v662 + 24) = v79;
                                      goto LABEL_989;
                                    }
                                  }
                                  *(_DWORD *)(v662 + 32) = v781;
                                }
                              }
                              *(_BYTE *)v662 = 0;
                            }
LABEL_1011:
                            v909 = a4;
                            v684 = bmalloc_allocate_impl_casual_case(v657, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
                            StatusReg = v891;
                            a3 = v892;
                            v664 = (unint64_t)v684;
                            a4 = v909;
                            v10 = a2;
                            goto LABEL_964;
                          }
                          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                          v650 = *a3;
                          if (!*a3)
                            goto LABEL_957;
LABEL_942:
                          v651 = v650 - 16;
                          v652 = (*(_DWORD *)(v650 - 16) + *(_DWORD *)(v650 - 12));
                          v653 = *(unsigned int *)(v650 - 4);
                          if (v653 <= 0x400)
                            goto LABEL_943;
LABEL_958:
                          if (v653 <= 2 * v652)
                          {
                            a4 = *(unsigned int *)(v650 - 12);
                            goto LABEL_950;
                          }
LABEL_944:
                          v654 = 1;
                          goto LABEL_945;
                        }
                      }
LABEL_925:
                      v633 = v620 + 32;
                      v620 = v621;
                      if (v633 == v621)
                      {
LABEL_923:
                        if (v620 == v622)
                          goto LABEL_894;
                        continue;
                      }
                      break;
                    }
                    v620 = v633;
LABEL_914:
                    v629 = *(_DWORD *)(v620 + 8);
                    if (*(_QWORD *)v620)
                    {
                      v630 = *(_DWORD *)(v620 + 12);
                    }
                    else
                    {
                      v630 = *(_DWORD *)(v620 + 12);
                      if (!(v629 | v630))
                        goto LABEL_916;
                    }
                    if (v629)
                      v631 = 1;
                    else
                      v631 = v630 == 0;
                    if (v631)
                      goto LABEL_923;
LABEL_916:
                    v620 += 32;
                    if (v620 == v621)
                    {
                      v620 = v621;
                      if (v621 == v622)
                      {
LABEL_894:
                        if ((v623 & 1) != 0)
                          continue;
LABEL_819:
                        v563 = v896 + 1;
                        if (v896 + 1 == v900)
                          goto LABEL_998;
                        goto LABEL_820;
                      }
                      goto LABEL_924;
                    }
                    goto LABEL_914;
                  }
                }
                if (*(_BYTE *)(v595 + 5) == 6)
                {
                  v813 = *(unsigned int *)(v595 + 32);
                  v814 = *(_DWORD *)(v595 + 36);
                  if (v813 < v814)
                  {
                    *(_QWORD *)(v595 + 8 * v813 + 56) = 0;
                    v815 = (unint64_t *)(v586 + 8128 + 8 * v588 + 8 * v813);
                    v816 = v814 - 1 - v813;
                    while (v816)
                    {
                      v614 += 1024;
                      v818 = *v815++;
                      v817 = v818;
                      LODWORD(v813) = v813 + 1;
                      --v816;
                      if (v818)
                      {
                        v613 = __rbit64(v817);
                        *(_DWORD *)(v595 + 32) = v813;
                        *(_QWORD *)(v595 + 24) = v614;
                        goto LABEL_890;
                      }
                    }
                    *(_DWORD *)(v595 + 32) = v814;
                  }
                }
                *(_BYTE *)v595 = 0;
              }
LABEL_1344:
              v856 = bmalloc_allocate_impl_casual_case(v585, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
              StatusReg = v891;
              a3 = v892;
              v597 = (unint64_t)v856;
              v10 = a2;
              goto LABEL_864;
            }
            if (*(_BYTE *)(v589 + 9045) == 6)
            {
              v819 = *(_DWORD *)(v589 + 9076);
              v820 = *(unsigned int *)(v589 + 9072);
              if (v820 < v819)
              {
                *(_QWORD *)&v590[8 * v820 + 56] = 0;
                v821 = (unint64_t *)(v589 + 8 * v820 + 9104);
                v822 = v819 - 1 - v820;
                while (v822)
                {
                  v617 += 1024;
                  v824 = *v821++;
                  v823 = v824;
                  LODWORD(v820) = v820 + 1;
                  --v822;
                  if (v824)
                  {
                    v616 = __rbit64(v823);
                    *(_DWORD *)(v589 + 9072) = v820;
                    *(_QWORD *)(v589 + 9064) = v617;
                    goto LABEL_892;
                  }
                }
                *(_DWORD *)(v589 + 9072) = v819;
              }
            }
            *v590 = 0;
          }
          v592 = bmalloc_allocate_impl_casual_case(0x50uLL, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
          a3 = v892;
          goto LABEL_851;
        }
LABEL_1012:
        if ((v876 & 1) != 0 && (v876 & 0xFFFFFFFF8) != 0)
        {
          WTF::fastFree(v876 & 0xFFFFFFFF8, (void *)v19, (uint64_t)a3, a4, a5, a6, a7, a8);
          a3 = v892;
        }
        if (!*(_DWORD *)(a1 + 60))
        {
          __break(0xC471u);
          JUMPOUT(0x198381FBCLL);
        }
        v685 = *(unsigned int *)(**(_QWORD **)(a1 + 48) + 88);
        v686 = a2;
        if ((_DWORD)v685)
        {
          v687 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          v897 = v687;
          while (1)
          {
            v688 = (v685 + 4);
            v903 = v685;
            v689 = (_DWORD)v685 + 4 < 0
                 ? (v688 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v686 + 16)
                 : ((v688 << 32) - 0x500000000) >> 32;
            v690 = *(_QWORD *)(*(_QWORD *)v686 + 16 * v689);
            if (v690 >= 2)
              break;
LABEL_1019:
            v685 = v903 - 1;
            if ((_DWORD)v903 == 1)
              goto LABEL_1151;
          }
          v691 = *a3;
          if (*a3
            || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(a3, 0, (uint64_t)a3, a4, a5, a6, a7, a8), a3 = v892, v687 = v897, v686 = a2, (v691 = *v892) != 0))
          {
            v692 = *(_DWORD *)(v691 - 8);
          }
          else
          {
            v692 = 0;
          }
          v693 = (~(v690 << 32) + v690) ^ ((~(v690 << 32) + v690) >> 22);
          v694 = 9 * ((v693 + ~(v693 << 13)) ^ ((v693 + ~(v693 << 13)) >> 8));
          v695 = (v694 ^ (v694 >> 15)) + ~((v694 ^ (v694 >> 15)) << 27);
          v696 = v692 & ((v695 >> 31) ^ v695);
          v19 = v691 + 8 * v696;
          v697 = *(_QWORD *)v19;
          if (*(_QWORD *)v19)
          {
            v698 = 0;
            v699 = 1;
            do
            {
              if (v697 == v690)
                goto LABEL_1019;
              if (v697 == -1)
                v698 = (_QWORD *)v19;
              v696 = (v696 + v699) & v692;
              v19 = v691 + 8 * v696;
              v697 = *(_QWORD *)v19;
              ++v699;
            }
            while (*(_QWORD *)v19);
            if (v698)
            {
              *v698 = 0;
              --*(_DWORD *)(*a3 - 16);
              v19 = (uint64_t)v698;
            }
          }
          *(_QWORD *)v19 = v690;
          v700 = *a3;
          if (*a3)
            v701 = *(_DWORD *)(v700 - 12) + 1;
          else
            v701 = 1;
          *(_DWORD *)(v700 - 12) = v701;
          v702 = *a3;
          if (*a3)
            v703 = *(_DWORD *)(v702 - 12);
          else
            v703 = 0;
          v704 = (*(_DWORD *)(v702 - 16) + v703);
          v705 = *(unsigned int *)(v702 - 4);
          if (v705 <= 0x400)
          {
            if (3 * v705 > 4 * v704)
              goto LABEL_1046;
            goto LABEL_1037;
          }
          if (v705 <= 2 * v704)
          {
LABEL_1037:
            WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(a3, (uint64_t *)v19, (uint64_t)a3, a4, a5, a6, a7, a8);
            a3 = v892;
            v687 = v897;
            v686 = a2;
          }
LABEL_1046:
          while (2)
          {
            v706 = *(_QWORD *)(v686 + 24);
            if (!v706)
            {
              v707 = 0;
              v708 = 0;
              goto LABEL_1048;
            }
            v711 = *(unsigned int *)(v706 - 4);
            v708 = v706 + 32 * v711;
            if (*(_DWORD *)(v706 - 12))
            {
              v707 = *(_QWORD *)(v686 + 24);
              if (!(_DWORD)v711)
                goto LABEL_1048;
              v712 = 32 * v711;
              v707 = *(_QWORD *)(v686 + 24);
              while (1)
              {
                v713 = *(_DWORD *)(v707 + 8);
                if (*(_QWORD *)v707)
                  break;
                v714 = *(_DWORD *)(v707 + 12);
                if (v713 | v714)
                  goto LABEL_1060;
LABEL_1058:
                v707 += 32;
                v712 -= 32;
                if (!v712)
                {
                  v707 = v708;
                  goto LABEL_1048;
                }
              }
              v714 = *(_DWORD *)(v707 + 12);
LABEL_1060:
              if (v713)
                v715 = 1;
              else
                v715 = v714 == 0;
              if (v715)
                goto LABEL_1048;
              goto LABEL_1058;
            }
            v707 = v706 + 32 * v711;
            v708 = v707;
LABEL_1048:
            if (v706)
              v709 = v706 + 32 * *(unsigned int *)(v706 - 4);
            else
              v709 = 0;
            if (v709 == v707)
              goto LABEL_1019;
            v710 = 0;
LABEL_1075:
            while (2)
            {
              v719 = *(_QWORD *)(v707 + 16);
              if (v719 >= 2)
              {
                v721 = *a3;
                if (*a3)
                {
                  v722 = *(_DWORD *)(v721 - 8);
                  v723 = ~(*(_QWORD *)v707 << 32) + *(_QWORD *)v707;
                  v724 = (v723 ^ (v723 >> 22)) + ~((v723 ^ (v723 >> 22)) << 13);
                  v725 = (9 * (v724 ^ (v724 >> 8))) ^ ((9 * (v724 ^ (v724 >> 8))) >> 15);
                  v726 = v722 & (((v725 + ~(v725 << 27)) >> 31) ^ (v725 + ~((_DWORD)v725 << 27)));
                  v727 = *(_QWORD *)(v721 + 8 * v726);
                  if (v727 != *(_QWORD *)v707)
                  {
                    v728 = 1;
                    while (v727)
                    {
                      v726 = (v726 + v728) & v722;
                      v727 = *(_QWORD *)(v721 + 8 * v726);
                      ++v728;
                      if (v727 == *(_QWORD *)v707)
                        goto LABEL_1083;
                    }
                    goto LABEL_1076;
                  }
LABEL_1083:
                  v729 = (~(v719 << 32) + v719) ^ ((~(v719 << 32) + v719) >> 22);
                  v730 = 9 * ((v729 + ~(v729 << 13)) ^ ((v729 + ~(v729 << 13)) >> 8));
                  v731 = (v730 ^ (v730 >> 15)) + ~((v730 ^ (v730 >> 15)) << 27);
                  v732 = v722 & ((v731 >> 31) ^ v731);
                  v733 = (unint64_t *)(v721 + 8 * v732);
                  v734 = *v733;
                  if (*v733)
                  {
                    v735 = 0;
                    v736 = 1;
                    do
                    {
                      if (v734 == v719)
                      {
                        v744 = 0;
                        goto LABEL_1098;
                      }
                      if (v734 == -1)
                        v735 = v733;
                      v732 = (v732 + v736) & v722;
                      v733 = (unint64_t *)(v721 + 8 * v732);
                      v734 = *v733;
                      ++v736;
                    }
                    while (*v733);
                    if (v735)
                    {
                      *v735 = 0;
                      --*(_DWORD *)(*a3 - 16);
                      v733 = v735;
                    }
                  }
                  *v733 = v719;
                  v737 = *a3;
                  if (*a3)
                    v738 = *(_DWORD *)(v737 - 12) + 1;
                  else
                    v738 = 1;
                  *(_DWORD *)(v737 - 12) = v738;
                  v739 = *a3;
                  if (*a3)
                    v740 = *(_DWORD *)(v739 - 12);
                  else
                    v740 = 0;
                  v741 = v739 - 16;
                  v742 = (*(_DWORD *)(v739 - 16) + v740);
                  v743 = *(unsigned int *)(v739 - 4);
                  if (v743 <= 0x400)
                  {
                    if (3 * v743 > 4 * v742)
                      goto LABEL_1097;
                    a4 = *(unsigned int *)(v739 - 12);
                    if ((_DWORD)v743)
LABEL_1103:
                      v745 = (_DWORD)v743 << (6 * (int)a4 >= (2 * v743));
                    else
                      v745 = 8;
                    v746 = 8 * v745;
                    v747 = v746 + 16;
                    v748 = *(_QWORD *)(v687 + 752);
                    if (v748)
                    {
                      v749 = (unint64_t)(v746 + 31) >> 4;
                      if (v745 <= 0x32)
                      {
                        v750 = 23 * v749 + 7;
                      }
                      else
                      {
                        if (v745 > 0x4E0)
                          goto LABEL_1287;
                        v750 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v749 + 626);
                        if (*(_DWORD *)(v748 + 8052) <= v750)
                          goto LABEL_1287;
                      }
                      v751 = v748 + 8 * v750;
                      v752 = v751 + 8064;
                      *(_BYTE *)(v751 + 8064) = 1;
                      v753 = *(unsigned int *)(v751 + 8080);
                      if ((_DWORD)v753)
                      {
                        *(_DWORD *)(v752 + 16) = v753 - *(_DWORD *)(v752 + 20);
                        v754 = *(_QWORD *)(v752 + 8) - v753;
                        goto LABEL_1116;
                      }
                      v768 = *(_QWORD *)(v752 + 40);
                      v769 = *(_QWORD *)(v752 + 24);
                      if (v768)
                      {
LABEL_1142:
                        v770 = __clz(v768);
                        *(_QWORD *)(v752 + 40) = v768 & ~(0x8000000000000000 >> v770);
                        v754 = v769 + 16 * v770;
LABEL_1116:
                        *(_BYTE *)v752 = 0;
                        v19 = 1;
LABEL_1117:
                        if ((v19 & 1) == 0 || (v19 & 0xFFFFFFFF00000000) == 0x100000000)
                          goto LABEL_1124;
                        v917 = a4;
                        v910 = v745;
                        if (v745 <= 0x1FFFFD)
                        {
                          v772 = (void *)v754;
                          v773 = v747;
                        }
                        else
                        {
                          v771 = pas_page_malloc_cached_alignment;
                          if (!pas_page_malloc_cached_alignment)
                          {
                            v771 = pas_page_malloc_alignment_slow();
                            pas_page_malloc_cached_alignment = v771;
                          }
                          if (((v771 - 1) & (v747 | v754)) == 0)
                          {
                            if (!v771)
                              pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
                            mmap((void *)v754, v747, 3, 4114, 889192448, 0);
LABEL_1123:
                            a3 = v892;
                            v687 = v897;
                            v686 = a2;
                            v745 = v910;
                            a4 = v917;
LABEL_1124:
                            *a3 = v754 + 16;
                            *(_DWORD *)(v754 + 12) = v745;
                            *(_DWORD *)(*a3 - 8) = v745 - 1;
                            *(_DWORD *)(*a3 - 16) = 0;
                            *(_DWORD *)(*a3 - 12) = a4;
                            if (!(_DWORD)v743)
                              goto LABEL_1134;
                            for (nn = 0; nn != v743; ++nn)
                            {
                              v756 = *(_QWORD *)(v739 + 8 * nn);
                              if ((unint64_t)(v756 + 1) >= 2)
                              {
                                v757 = *a3;
                                if (*a3)
                                  v758 = *(_DWORD *)(v757 - 8);
                                else
                                  v758 = 0;
                                v759 = (~(v756 << 32) + v756) ^ ((unint64_t)(~(v756 << 32) + v756) >> 22);
                                v760 = 9 * ((v759 + ~(v759 << 13)) ^ ((v759 + ~(v759 << 13)) >> 8));
                                v761 = (v760 ^ (v760 >> 15)) + ~((v760 ^ (v760 >> 15)) << 27);
                                v762 = v758 & ((v761 >> 31) ^ v761);
                                v763 = 1;
                                do
                                {
                                  v764 = v762;
                                  v765 = *(_QWORD *)(v757 + 8 * v762);
                                  v762 = (v762 + v763++) & v758;
                                }
                                while (v765);
                                *(_QWORD *)(v757 + 8 * v764) = v756;
                              }
                            }
                            if (v739)
                            {
LABEL_1134:
                              v766 = *(_QWORD *)(v687 + 752);
                              if (v766)
                              {
                                if (!(v741 >> 43)
                                  && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                       + (((unint64_t)(v739 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v739 - 16) >> 24)) & 1) != 0)
                                {
                                  goto LABEL_1137;
                                }
                                if (v741 >> 24 >= *off_1ECF425F8 && off_1ECF425F8[1] > v741 >> 24)
                                {
                                  a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                                  + (((((unint64_t)(v739 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                  + 24) >> (2
                                                          * ((((v739 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                  if ((_DWORD)a4 != 1)
                                    goto LABEL_1185;
LABEL_1137:
                                  v767 = *(unsigned int *)(v766 + 8000);
                                  if (v767 >= 0x3E7)
                                  {
                                    pas_thread_local_cache_append_deallocation_slow(v766, v739 - 16, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                                    a3 = v892;
                                    v687 = v897;
                                  }
                                  else
                                  {
                                    *(_QWORD *)(v766 + 8 * v767) = v741 | 0x5000000000000;
                                    *(_DWORD *)(v766 + 8000) = v767 + 1;
                                  }
                                  v744 = 1;
LABEL_1140:
                                  v686 = a2;
LABEL_1098:
                                  v710 |= v744;
                                  goto LABEL_1076;
                                }
                                a4 = 0;
LABEL_1185:
                                v744 = 1;
                                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v766, v739 - 16, 1, a4, a5, a6, a7, a8);
                              }
                              else
                              {
                                v744 = 1;
                                pas_try_deallocate_slow_no_cache(v739 - 16, (uint64_t)&bmalloc_heap_config, 1);
                              }
                              a3 = v892;
                              v687 = v897;
                              goto LABEL_1140;
                            }
LABEL_1097:
                            v744 = 1;
                            goto LABEL_1098;
                          }
                          v773 = v747;
                          v772 = (void *)v754;
                        }
                        bzero(v772, v773);
                        goto LABEL_1123;
                      }
                      if (*(_BYTE *)(v752 + 5) == 6)
                      {
                        v789 = *(unsigned int *)(v752 + 32);
                        v790 = *(_DWORD *)(v752 + 36);
                        if (v789 < v790)
                        {
                          *(_QWORD *)(v752 + 8 * v789 + 56) = 0;
                          v791 = (unint64_t *)(v748 + 8128 + 8 * v750 + 8 * v789);
                          v792 = v790 - 1 - v789;
                          while (v792)
                          {
                            v769 += 1024;
                            v794 = *v791++;
                            v793 = v794;
                            LODWORD(v789) = v789 + 1;
                            --v792;
                            if (v794)
                            {
                              v768 = __rbit64(v793);
                              *(_DWORD *)(v752 + 32) = v789;
                              *(_QWORD *)(v752 + 24) = v769;
                              goto LABEL_1142;
                            }
                          }
                          *(_DWORD *)(v752 + 32) = v790;
                        }
                      }
                      *(_BYTE *)v752 = 0;
                    }
LABEL_1287:
                    v918 = a4;
                    v911 = v745;
                    v825 = bmalloc_allocate_impl_casual_case(v747, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
                    a3 = v892;
                    v687 = v897;
                    v754 = (unint64_t)v825;
                    v745 = v911;
                    a4 = v918;
                    v686 = a2;
                    goto LABEL_1117;
                  }
                  if (v743 <= 2 * v742)
                  {
                    a4 = *(unsigned int *)(v739 - 12);
                    goto LABEL_1103;
                  }
                  goto LABEL_1097;
                }
              }
LABEL_1076:
              v720 = v707 + 32;
              v707 = v708;
              if (v720 == v708)
              {
LABEL_1074:
                if (v707 == v709)
                  goto LABEL_1045;
                continue;
              }
              break;
            }
            v707 = v720;
LABEL_1065:
            v716 = *(_DWORD *)(v707 + 8);
            if (*(_QWORD *)v707)
            {
              v717 = *(_DWORD *)(v707 + 12);
            }
            else
            {
              v717 = *(_DWORD *)(v707 + 12);
              if (!(v716 | v717))
                goto LABEL_1067;
            }
            if (v716)
              v718 = 1;
            else
              v718 = v717 == 0;
            if (v718)
              goto LABEL_1074;
LABEL_1067:
            v707 += 32;
            if (v707 == v708)
            {
              v707 = v708;
              if (v708 == v709)
              {
LABEL_1045:
                if ((v710 & 1) == 0)
                  goto LABEL_1019;
                continue;
              }
              goto LABEL_1075;
            }
            goto LABEL_1065;
          }
        }
LABEL_1151:
        if ((v877 & 1) == 0 && (v875 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v875 & 0xFFFFFFFF8, (void *)v19, (uint64_t)a3, a4, a5, a6, a7, a8);
        return;
      case 4:
        goto LABEL_814;
      default:
        __break(0xC471u);
        JUMPOUT(0x19838177CLL);
    }
  }
}

JSC::DFG::CombinedLiveness *JSC::DFG::CombinedLiveness::CombinedLiveness(JSC::DFG::CombinedLiveness *this, JSC::DFG::Graph *a2)
{
  JSC::DFG::Graph *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  _QWORD *v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;

  v2 = a2;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  WTF::Vector<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)this, *((unsigned int *)a2 + 15));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (uint64_t *)((char *)this + 16);
  WTF::Vector<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)this + 16, *((unsigned int *)v2 + 15));
  v11 = *((unsigned int *)v2 + 15);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v103 = (uint64_t)v2;
    while (!*(_QWORD *)(*((_QWORD *)v2 + 6) + 8 * v12))
    {
      if (v11 == ++v12)
        goto LABEL_5;
    }
    if ((_DWORD)v11 != (_DWORD)v12)
    {
      LODWORD(v13) = *((_DWORD *)v2 + 15);
      while (1)
      {
        if (v13 <= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198382820);
        }
        v16 = *(_QWORD *)(*((_QWORD *)v2 + 6) + 8 * v12);
        v106 = 0;
        v17 = *(_QWORD *)(v16 + 200);
        v18 = *(unsigned int *)(v17 + 76);
        if ((_DWORD)v18)
        {
          v19 = *(uint64_t **)(v17 + 64);
          v20 = &v19[v18];
          do
          {
            v21 = *v19;
            if ((*v19 & 1) == 0)
            {
              v22 = v106;
              if (v106
                || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(&v106, 0, v5, v6, v7, v8, v9, v10), (v22 = v106) != 0))
              {
                v23 = *(_DWORD *)(v22 - 8);
              }
              else
              {
                v23 = 0;
              }
              v24 = v21 & 0xFFFFFFFFFFFFFFFELL;
              v25 = (v21 & 0xFFFFFFFFFFFFFFFELL) + ~((v21 & 0xFFFFFFFFFFFFFFFELL) << 32);
              v26 = (v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13);
              v27 = (9 * (v26 ^ (v26 >> 8))) ^ ((9 * (v26 ^ (v26 >> 8))) >> 15);
              v28 = v23 & (((v27 + ~(v27 << 27)) >> 31) ^ (v27 + ~((_DWORD)v27 << 27)));
              v29 = (uint64_t *)(v22 + 8 * v28);
              v30 = *v29;
              if (*v29)
              {
                v31 = 0;
                v32 = 1;
                while (v30 != v24)
                {
                  if (v30 == -1)
                    v31 = v29;
                  v28 = (v28 + v32) & v23;
                  v29 = (uint64_t *)(v22 + 8 * v28);
                  v30 = *v29;
                  ++v32;
                  if (!*v29)
                  {
                    if (v31)
                    {
                      *v31 = 0;
                      --*(_DWORD *)(v106 - 16);
                      v29 = v31;
                    }
                    goto LABEL_27;
                  }
                }
                goto LABEL_33;
              }
LABEL_27:
              *v29 = v24;
              if (v106)
                v33 = *(_DWORD *)(v106 - 12) + 1;
              else
                v33 = 1;
              *(_DWORD *)(v106 - 12) = v33;
              if (v106)
                v34 = *(_DWORD *)(v106 - 12);
              else
                v34 = 0;
              v35 = (*(_DWORD *)(v106 - 16) + v34);
              v36 = *(unsigned int *)(v106 - 4);
              if (v36 > 0x400)
              {
                if (v36 <= 2 * v35)
LABEL_38:
                  WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(&v106, v29, v5, v6, v7, v8, v9, v10);
              }
              else if (3 * v36 <= 4 * v35)
              {
                goto LABEL_38;
              }
            }
LABEL_33:
            ++v19;
          }
          while (v19 != v20);
        }
        if (!*(_DWORD *)(v16 + 220))
        {
          __break(0xC471u);
          JUMPOUT(0x198382838);
        }
        v2 = (JSC::DFG::Graph *)v103;
        JSC::DFG::addBytecodeLiveness(v103, *(_QWORD *)(v16 + 200), &v106, *(_QWORD *)(**(_QWORD **)(v16 + 208) + 8), v7, v8, v9, v10);
        v38 = *(unsigned int *)(v16 + 8);
        if (*((_DWORD *)this + 3) <= v38)
        {
          __break(0xC471u);
          JUMPOUT(0x198382828);
        }
        v39 = *(_QWORD *)this;
        v40 = v106;
        v106 = 0;
        v41 = *(_QWORD *)(v39 + 8 * v38);
        *(_QWORD *)(v39 + 8 * v38) = v40;
        if (v41)
          WTF::fastFree(v41 - 16, v37, v5, v6, v7, v8, v9, v10);
        if (v106)
          WTF::fastFree(v106 - 16, v37, v5, v6, v7, v8, v9, v10);
        v42 = *(unsigned int *)(v16 + 220);
        v43 = v42 - 1;
        do
        {
          if (v43 >= v42)
          {
            __break(0xC471u);
            JUMPOUT(0x198382830);
          }
          v44 = *(_QWORD *)(v16 + 208);
          v45 = *(_QWORD *)(v44 + 8 * v43);
          v46 = *(unsigned __int16 *)(v45 + 18);
          --v43;
        }
        while ((v46 - 364) > 0xB);
        if ((v46 - 364) >= 2)
        {
          if (v46 == 366)
          {
            v57 = *(_DWORD *)(*(_QWORD *)(v45 + 72) + 12) + 1;
          }
          else
          {
            if (v46 != 367)
              goto LABEL_59;
            v57 = *(_DWORD *)(*(_QWORD *)(v45 + 72) + 12);
          }
          if (!v57)
          {
LABEL_59:
            v105 = 0;
            if (!(_DWORD)v42)
            {
              __break(0xC471u);
              JUMPOUT(0x198382740);
            }
            JSC::DFG::addBytecodeLiveness(v103, *(_QWORD *)(v16 + 200) + 32, &v105, *(_QWORD *)(*(_QWORD *)(v44 + 8 * v42 - 8) + 8), v7, v8, v9, v10);
            v53 = *(unsigned int *)(v16 + 8);
            if (*((_DWORD *)this + 7) <= v53)
            {
              __break(0xC471u);
              JUMPOUT(0x198382850);
            }
            v54 = *v4;
            WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::HashTable(&v106, &v105, v47, v48, v49, v50, v51, v52);
            v56 = *(_QWORD *)(v54 + 8 * v53);
            *(_QWORD *)(v54 + 8 * v53) = v106;
            v106 = v56;
            if (v56)
              WTF::fastFree(v56 - 16, v55, v5, v6, v7, v8, v9, v10);
            if (v105)
              WTF::fastFree(v105 - 16, v55, v5, v6, v7, v8, v9, v10);
          }
        }
        v12 = (v12 + 1);
        v13 = *(unsigned int *)(v103 + 60);
        if (v13 > v12)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v103 + 48) + 8 * v12))
          {
            if (v13 == ++v12)
            {
              LODWORD(v12) = *(_DWORD *)(v103 + 60);
              break;
            }
          }
        }
        if ((_DWORD)v11 == (_DWORD)v12)
          goto LABEL_6;
      }
    }
LABEL_5:
    LODWORD(v13) = *((_DWORD *)v2 + 15);
LABEL_6:
    if ((_DWORD)v13)
    {
      v14 = 0;
      v99 = v13;
      while (!*(_QWORD *)(*((_QWORD *)v2 + 6) + 8 * v14))
      {
        if (v13 == ++v14)
          return this;
      }
      if ((_DWORD)v13 != (_DWORD)v14)
      {
        LODWORD(v58) = v14;
        do
        {
          if (v13 <= v58)
          {
            __break(0xC471u);
            JUMPOUT(0x198382840);
          }
          v59 = *(_QWORD *)(*((_QWORD *)v2 + 6) + 8 * v58);
          v60 = *(unsigned int *)(v59 + 220);
          if ((_DWORD)v60)
          {
            v61 = 8 * v60;
            while (1)
            {
              v62 = *(_QWORD *)(*(_QWORD *)(v59 + 208) - 8 + v61);
              v63 = *(unsigned __int16 *)(v62 + 18);
              if ((v63 - 364) < 0xC)
                break;
              if ((v63 - 28) < 2 || (v63 - 23) <= 2)
              {
                v61 -= 8;
                if (v61)
                  continue;
              }
              goto LABEL_152;
            }
          }
          else
          {
LABEL_152:
            v62 = 0;
          }
          v64 = 1;
          switch(*(_WORD *)(v62 + 18))
          {
            case 0x16C:
              goto LABEL_79;
            case 0x16D:
              v64 = 2;
              goto LABEL_79;
            case 0x16E:
              v64 = *(_DWORD *)(*(_QWORD *)(v62 + 72) + 12) + 1;
              goto LABEL_150;
            case 0x16F:
              v64 = *(_DWORD *)(*(_QWORD *)(v62 + 72) + 12);
LABEL_150:
              if (!v64)
                goto LABEL_134;
LABEL_79:
              v101 = v64;
              v100 = v58;
              v65 = 0;
              v66 = 0;
              v104 = (uint64_t *)(v62 + 72);
              v102 = v62;
              break;
            default:
              goto LABEL_134;
          }
          do
          {
            v67 = *(unsigned __int16 *)(v62 + 18);
            if (v67 == 366)
            {
              v97 = (_QWORD *)*v104;
              v98 = *(_DWORD *)(*v104 + 12);
              if (v98 > v65)
              {
                v69 = *v97 + 32 * v66;
LABEL_87:
                v68 = v69 + 16;
                goto LABEL_88;
              }
              if (v98 != v65)
              {
                __break(0xC471u);
                JUMPOUT(0x198382760);
              }
              v68 = (uint64_t)(v97 + 2);
            }
            else if (v67 == 367)
            {
              if (*(_DWORD *)(*v104 + 12) <= v65)
              {
                __break(0xC471u);
                JUMPOUT(0x198382848);
              }
              v68 = *(_QWORD *)*v104 + 8 * v66;
            }
            else
            {
              if (v65)
              {
                if (v65 != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198382800);
                }
                v69 = *v104;
                goto LABEL_87;
              }
              v68 = (uint64_t)v104;
              if (v67 != 364)
                v68 = *v104;
            }
LABEL_88:
            v70 = *(unsigned int *)(*(_QWORD *)v68 + 8);
            if (*((_DWORD *)this + 3) <= v70)
            {
              __break(0xC471u);
              JUMPOUT(0x198382818);
            }
            v71 = *(_QWORD **)(*(_QWORD *)this + 8 * v70);
            if (!v71)
            {
              v74 = 0;
              v72 = 0;
LABEL_143:
              v73 = &v71[v72];
              goto LABEL_96;
            }
            v72 = *((unsigned int *)v71 - 1);
            v73 = &v71[v72];
            if (!*((_DWORD *)v71 - 3))
            {
              v74 = &v71[v72];
              goto LABEL_143;
            }
            v74 = v71;
            if ((_DWORD)v72)
            {
              v75 = 8 * v72;
              v74 = v71;
              while ((unint64_t)(*v74 + 1) <= 1)
              {
                ++v74;
                v75 -= 8;
                if (!v75)
                {
                  v74 = v73;
                  break;
                }
              }
            }
LABEL_96:
            if (v71)
              v76 = &v71[*((unsigned int *)v71 - 1)];
            else
              v76 = 0;
            while (v74 != v76)
            {
              v77 = *(unsigned int *)(v59 + 8);
              if (*((_DWORD *)this + 7) <= v77)
              {
                __break(0xC471u);
                JUMPOUT(0x198382808);
              }
              v78 = *v74;
              v79 = (uint64_t *)(*v4 + 8 * v77);
              v80 = *v79;
              if (*v79
                || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(v79, 0, v5, v6, v7, v8, v9, v10), (v80 = *v79) != 0))
              {
                v81 = *(_DWORD *)(v80 - 8);
              }
              else
              {
                v81 = 0;
              }
              v82 = (~(v78 << 32) + v78) ^ ((unint64_t)(~(v78 << 32) + v78) >> 22);
              v83 = 9 * ((v82 + ~(v82 << 13)) ^ ((v82 + ~(v82 << 13)) >> 8));
              v84 = (v83 ^ (v83 >> 15)) + ~((v83 ^ (v83 >> 15)) << 27);
              v85 = v81 & ((v84 >> 31) ^ v84);
              v86 = (uint64_t *)(v80 + 8 * v85);
              v87 = *v86;
              if (*v86)
              {
                v88 = 0;
                v89 = 1;
                while (v87 != v78)
                {
                  if (v87 == -1)
                    v88 = v86;
                  v85 = (v85 + v89) & v81;
                  v86 = (uint64_t *)(v80 + 8 * v85);
                  v87 = *v86;
                  ++v89;
                  if (!*v86)
                  {
                    if (v88)
                    {
                      *v88 = 0;
                      --*(_DWORD *)(*v79 - 16);
                      v86 = v88;
                    }
                    goto LABEL_110;
                  }
                }
                goto LABEL_116;
              }
LABEL_110:
              *v86 = v78;
              v90 = *v79;
              if (*v79)
                v91 = *(_DWORD *)(v90 - 12) + 1;
              else
                v91 = 1;
              *(_DWORD *)(v90 - 12) = v91;
              v92 = *v79;
              if (*v79)
                v93 = *(_DWORD *)(v92 - 12);
              else
                v93 = 0;
              v94 = (*(_DWORD *)(v92 - 16) + v93);
              v95 = *(unsigned int *)(v92 - 4);
              if (v95 > 0x400)
              {
                if (v95 <= 2 * v94)
LABEL_126:
                  WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(v79, v86, v5, v6, v7, v8, v9, v10);
              }
              else if (3 * v95 <= 4 * v94)
              {
                goto LABEL_126;
              }
LABEL_116:
              v96 = v74 + 1;
              v74 = v73;
              if (v96 != v73)
              {
                v74 = v96;
                while ((unint64_t)(*v74 + 1) <= 1)
                {
                  if (++v74 == v73)
                  {
                    v74 = v73;
                    break;
                  }
                }
              }
            }
            v65 = v66 + 1;
            v66 = (v66 + 1);
            v62 = v102;
          }
          while (v101 != v65);
          LODWORD(v13) = *(_DWORD *)(v103 + 60);
          LODWORD(v58) = v100;
LABEL_134:
          v58 = (v58 + 1);
          if (v13 <= v58)
          {
            v2 = (JSC::DFG::Graph *)v103;
          }
          else
          {
            v2 = (JSC::DFG::Graph *)v103;
            while (!*(_QWORD *)(*(_QWORD *)(v103 + 48) + 8 * v58))
            {
              if (v13 == ++v58)
              {
                LODWORD(v58) = v13;
                break;
              }
            }
          }
        }
        while (v99 != (_DWORD)v58);
      }
    }
  }
  return this;
}

uint64_t JSC::DFG::startCrashing(JSC::DFG *this)
{
  uint64_t result;

  if (__ldaxr((unsigned __int8 *)&JSC::DFG::crashLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&JSC::DFG::crashLock))
  {
    return result;
  }
  return WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::crashLock);
}

uint64_t JSC::DFG::isCrashing(JSC::DFG *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&JSC::DFG::crashLock);
  return v1 & 1;
}

BOOL JSC::DFG::stringLessThan(JSC::DFG *this, WTF::StringImpl *a2, WTF::StringImpl *a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  unsigned int v13;
  unsigned int v14;

  v3 = *((_DWORD *)this + 1);
  v4 = *((_DWORD *)a2 + 1);
  if (v4 >= v3)
    v5 = v3;
  else
    v5 = v4;
  if (!(_DWORD)v5)
  {
LABEL_10:
    v11 = v3 >= v4;
    return !v11;
  }
  v6 = *((_DWORD *)this + 4);
  v7 = *((_QWORD *)this + 1);
  v8 = *((_DWORD *)a2 + 4);
  v9 = *((_QWORD *)a2 + 1);
  if ((v6 & 4) == 0)
  {
    if ((v8 & 4) != 0)
    {
      v10 = 0;
      while (*(_WORD *)(v7 + 2 * v10) == *(unsigned __int8 *)(v9 + v10))
      {
        if (v5 == ++v10)
          goto LABEL_10;
      }
      goto LABEL_16;
    }
    v10 = 0;
    while (*(unsigned __int16 *)(v7 + 2 * v10) == *(unsigned __int16 *)(v9 + 2 * v10))
    {
      if (v5 == ++v10)
        goto LABEL_10;
    }
LABEL_35:
    v12 = 1;
    goto LABEL_17;
  }
  if ((v8 & 4) == 0)
  {
    v10 = 0;
    while (*(_WORD *)(v9 + 2 * v10) == *(unsigned __int8 *)(v7 + v10))
    {
      if (v5 == ++v10)
        goto LABEL_10;
    }
    goto LABEL_35;
  }
  v10 = 0;
  while (*(unsigned __int8 *)(v7 + v10) == *(unsigned __int8 *)(v9 + v10))
  {
    if (v5 == ++v10)
      goto LABEL_10;
  }
LABEL_16:
  v12 = 0;
LABEL_17:
  if ((v6 & 4) != 0)
    v13 = *(unsigned __int8 *)(v7 + v10);
  else
    v13 = *(unsigned __int16 *)(v7 + 2 * v10);
  if ((v12 & 1) != 0)
    v14 = *(unsigned __int16 *)(v9 + 2 * v10);
  else
    v14 = *(unsigned __int8 *)(v9 + v10);
  v11 = v13 >= v14;
  return !v11;
}

uint64_t JSC::DFG::CommonData::invalidateLinkedCode(JSC::DFG::CommonData *this, uint64_t a2, void *a3)
{
  JSC::DFG::CommonData *v3;
  int *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  int v31;
  const void *v32;
  const void *v33;

  if (*((_BYTE *)this + 208))
    return 1;
  v3 = this;
  if (*((_BYTE *)this + 209))
  {
    if (!*((_BYTE *)this + 210))
      goto LABEL_4;
    if (__ldaxr((unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock))
    {
LABEL_17:
      JSC::DFG::pcCodeBlockMap(this);
      v17 = (unsigned int *)*((_QWORD *)v3 + 16);
      if (v17)
        v18 = v17 + 2;
      else
        v18 = 0;
      if (v17)
        v19 = (uint64_t)&v17[4 * *v17 + 2];
      else
        v19 = 0;
      if (v18 != (_QWORD *)v19)
      {
        v20 = JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap;
        if (JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap)
        {
          while (1)
          {
            if (v20)
            {
              v21 = *(_DWORD *)(v20 - 8);
              v22 = ~(*v18 << 32) + *v18;
              v23 = (v22 ^ (v22 >> 22)) + ~((v22 ^ (v22 >> 22)) << 13);
              v24 = (9 * (v23 ^ (v23 >> 8))) ^ ((9 * (v23 ^ (v23 >> 8))) >> 15);
              v25 = v21 & (((v24 + ~(v24 << 27)) >> 31) ^ ((_DWORD)v24 + ~((_DWORD)v24 << 27)));
              v26 = *(_QWORD *)(v20 + 16 * v25);
              if (v26 != *v18)
              {
                v27 = 1;
                while (v26)
                {
                  v25 = ((_DWORD)v25 + v27) & v21;
                  v26 = *(_QWORD *)(v20 + 16 * v25);
                  ++v27;
                  if (v26 == *v18)
                    goto LABEL_31;
                }
                v25 = *(unsigned int *)(v20 - 4);
              }
LABEL_31:
              if (v25 != *(_DWORD *)(v20 - 4))
              {
                *(_QWORD *)(v20 + 16 * v25) = -1;
                ++*(_DWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 16);
                v28 = JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap
                    ? *(_DWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 12) - 1
                    : -1;
                *(_DWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 12) = v28;
                if (JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap)
                {
                  v29 = *(_DWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 4);
                  if (6 * *(_DWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 12) < v29 && v29 >= 9)
                    WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(&JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap, v29 >> 1, 0, v12, v13, v14, v15, v16);
                }
              }
            }
            v18 += 2;
            if (v18 == (_QWORD *)v19)
              break;
            v20 = JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap;
          }
        }
      }
      *((_BYTE *)v3 + 210) = 0;
      v31 = __ldxr((unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock);
      if (v31 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock))
        {
LABEL_4:
          v4 = (int *)*((_QWORD *)v3 + 16);
          if (v4)
          {
            v5 = *v4;
            if (v5)
            {
              v6 = v5 - 1;
              v7 = 4 * (v5 - 1);
              do
              {
                v8 = (unsigned int *)*((_QWORD *)v3 + 16);
                if (*v8 <= v6)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198382A78);
                }
                v9 = &v8[v7];
                if (HIBYTE(word_1ECF4C286))
                {
                  v33 = (const void *)*((_QWORD *)v9 + 1);
                  v32 = (const void *)*((_QWORD *)v9 + 2);
                  WTF::dataLog<char [41],WTF::RawPointer,char [5],WTF::RawPointer,char [2]>("Firing jump replacement watchpoint from ", &v33, " to ", &v32, "\n");
                }
                JSC::ARM64Assembler::replaceWithJump(*((JSC::ARM64Assembler **)v9 + 1), *((_BYTE **)v9 + 2), a3);
                v7 -= 4;
                --v6;
              }
              while (v6 != -1);
            }
          }
          *((_BYTE *)v3 + 209) = 0;
          return 1;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock, 0, (uint64_t)a3, v12, v13, v14, v15, v16);
      goto LABEL_4;
    }
    this = (JSC::DFG::CommonData *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::pcCodeBlockMapLock);
    goto LABEL_17;
  }
  return 0;
}

void JSC::DFG::pcCodeBlockMap(JSC::DFG *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&JSC::DFG::pcCodeBlockMap(void)::onceKey);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&JSC::DFG::pcCodeBlockMap(void)::onceKey, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::DFG::pcCodeBlockMap(void)::{lambda(void)#1} &&>>);
  }
}

void JSC::DFG::CommonData::~CommonData(JSC::DFG::CommonData *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  JSC::DFG::CommonData *v9;
  JSC::Profiler::Compilation *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  JSC::CallLinkInfo *v14;
  JSC::CallLinkInfo *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::StructureStubInfo *v24;
  JSC::StructureStubInfo *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  JSC::RecordedStatuses *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  WTF::StringImpl **v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unsigned int v130;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  int v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;

  v9 = this;
  if (!*((_BYTE *)this + 208) && *((_BYTE *)this + 210))
  {
    if (__ldaxr((unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock))
    {
LABEL_85:
      JSC::DFG::pcCodeBlockMap(this);
      v118 = (unsigned int *)*((_QWORD *)v9 + 16);
      if (v118)
        v119 = v118 + 2;
      else
        v119 = 0;
      if (v118)
        v120 = (uint64_t)&v118[4 * *v118 + 2];
      else
        v120 = 0;
      if (v119 != (_QWORD *)v120)
      {
        v121 = JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap;
        if (JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap)
        {
          while (1)
          {
            if (v121)
            {
              v122 = *(_DWORD *)(v121 - 8);
              v123 = ~(*v119 << 32) + *v119;
              v124 = (v123 ^ (v123 >> 22)) + ~((v123 ^ (v123 >> 22)) << 13);
              v125 = (9 * (v124 ^ (v124 >> 8))) ^ ((9 * (v124 ^ (v124 >> 8))) >> 15);
              v126 = v122 & (((v125 + ~(v125 << 27)) >> 31) ^ ((_DWORD)v125 + ~((_DWORD)v125 << 27)));
              v127 = *(_QWORD *)(v121 + 16 * v126);
              if (v127 != *v119)
              {
                v128 = 1;
                while (v127)
                {
                  v126 = ((_DWORD)v126 + v128) & v122;
                  v127 = *(_QWORD *)(v121 + 16 * v126);
                  ++v128;
                  if (v127 == *v119)
                    goto LABEL_99;
                }
                v126 = *(unsigned int *)(v121 - 4);
              }
LABEL_99:
              if (v126 != *(_DWORD *)(v121 - 4))
              {
                *(_QWORD *)(v121 + 16 * v126) = -1;
                ++*(_DWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 16);
                v129 = JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap
                     ? *(_DWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 12) - 1
                     : -1;
                *(_DWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 12) = v129;
                if (JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap)
                {
                  v130 = *(_DWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 4);
                  if (6 * *(_DWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 12) < v130 && v130 >= 9)
                    WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(&JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap, v130 >> 1, 0, a4, a5, a6, a7, a8);
                }
              }
            }
            v119 += 2;
            if (v119 == (_QWORD *)v120)
              break;
            v121 = JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap;
          }
        }
      }
      v136 = __ldxr((unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock);
      if (v136 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock))
          goto LABEL_3;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock, 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_3;
    }
    this = (JSC::DFG::CommonData *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::pcCodeBlockMapLock);
    goto LABEL_85;
  }
LABEL_3:
  v10 = (JSC::Profiler::Compilation *)*((_QWORD *)v9 + 24);
  *((_QWORD *)v9 + 24) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      JSC::Profiler::Compilation::~Compilation(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = *((unsigned int *)v9 + 45);
  if ((_DWORD)v11)
  {
    v114 = (unint64_t *)*((_QWORD *)v9 + 21);
    v115 = 8 * v11;
    do
    {
      v116 = *v114;
      *v114 = 0;
      if (v116)
        WTF::fastFree(v116, a2, a3, a4, a5, a6, a7, a8);
      ++v114;
      v115 -= 8;
    }
    while (v115);
  }
  v12 = *((_QWORD *)v9 + 21);
  if (v12)
  {
    *((_QWORD *)v9 + 21) = 0;
    *((_DWORD *)v9 + 44) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (uint64_t *)*((_QWORD *)v9 + 20);
  if (v13)
  {
    do
    {
      v139 = (uint64_t *)v13[13];
      v13[3] = 0;
      v13[4] = 0;
      v140 = v13[5];
      if ((v140 & 1) != 0 && (v140 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v140 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v141 = (uint64_t *)v13[1];
      if (v141)
      {
        v142 = *v13;
        *v141 = *v13;
        *(_QWORD *)(v142 + 8) = v141;
        *v13 = 0;
        v13[1] = 0;
      }
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
      v13 = v139;
    }
    while (v139);
  }
  *((_QWORD *)v9 + 20) = 0;
  v14 = (JSC::CallLinkInfo *)*((_QWORD *)v9 + 19);
  if (v14)
  {
    do
    {
      v15 = (JSC::CallLinkInfo *)*((_QWORD *)v14 + 12);
      JSC::CallLinkInfo::~CallLinkInfo(v14, a2, a3, a4, a5, a6, a7, a8, a9);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      v14 = v15;
    }
    while (v15);
  }
  *((_QWORD *)v9 + 19) = 0;
  v24 = (JSC::StructureStubInfo *)*((_QWORD *)v9 + 18);
  if (v24)
  {
    do
    {
      v25 = (JSC::StructureStubInfo *)*((_QWORD *)v24 + 17);
      JSC::StructureStubInfo::~StructureStubInfo(v24, a2, a3, a4, a5, a6, a7, a8, a9);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      v24 = v25;
    }
    while (v25);
  }
  v34 = (unsigned int *)*((_QWORD *)v9 + 17);
  *((_QWORD *)v9 + 17) = 0;
  *((_QWORD *)v9 + 18) = 0;
  if (v34)
  {
    v35 = WTF::TrailingArray<WTF::EmbeddedFixedVector<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>::~TrailingArray(v34, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v35, v36, v37, v38, v39, v40, v41, v42);
  }
  v43 = *((_QWORD *)v9 + 16);
  *((_QWORD *)v9 + 16) = 0;
  if (v43)
    WTF::fastFree(v43, a2, a3, a4, a5, a6, a7, a8);
  v44 = (JSC::RecordedStatuses *)*((_QWORD *)v9 + 15);
  *((_QWORD *)v9 + 15) = 0;
  if (v44)
  {
    JSC::RecordedStatuses::~RecordedStatuses(v44, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  v53 = *((_QWORD *)v9 + 14);
  *((_QWORD *)v9 + 14) = 0;
  if (v53)
  {
    v54 = *(_QWORD *)(v53 + 16);
    if (v54)
      WTF::fastFree(v54, a2, a3, a4, a5, a6, a7, a8);
    v55 = *(_QWORD *)(v53 + 24);
    if (v55)
      WTF::fastFree(v55, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v53, a2, a3, a4, a5, a6, a7, a8);
  }
  v56 = (_DWORD *)*((_QWORD *)v9 + 13);
  *((_QWORD *)v9 + 13) = 0;
  if (v56)
  {
    if (*v56)
    {
      v57 = (uint64_t)&v56[22 * *v56 + 2];
      v58 = (uint64_t *)(v56 + 10);
      do
      {
        *(v58 - 4) = (uint64_t)off_1E3580B60;
        v59 = v58 - 4;
        v60 = (_QWORD *)v58[4];
        if (v60)
        {
          v61 = v58[3];
          *v60 = v61;
          *(_QWORD *)(v61 + 8) = v60;
          v58[3] = 0;
          v58[4] = 0;
        }
        v62 = (uint64_t *)v58[1];
        if (v62)
        {
          v63 = *v58;
          *v62 = *v58;
          *(_QWORD *)(v63 + 8) = v62;
          *v58 = 0;
          v58[1] = 0;
        }
        v58 += 11;
      }
      while (v59 + 11 != (uint64_t *)v57);
    }
    WTF::fastFree((unint64_t)v56, a2, a3, a4, a5, a6, a7, a8);
  }
  v64 = (unsigned int *)*((_QWORD *)v9 + 12);
  *((_QWORD *)v9 + 12) = 0;
  if (v64)
  {
    v65 = (uint64_t *)(v64 + 2);
    v66 = *v64;
    if ((_DWORD)v66)
    {
      v67 = 48 * v66;
      do
      {
        v68 = (uint64_t *)v65[1];
        if (v68)
        {
          v69 = *v65;
          *v68 = *v65;
          *(_QWORD *)(v69 + 8) = v68;
          *v65 = 0;
          v65[1] = 0;
        }
        v65 += 6;
        v67 -= 48;
      }
      while (v67);
    }
    WTF::fastFree((unint64_t)v64, a2, a3, a4, a5, a6, a7, a8);
  }
  v70 = (unsigned int *)*((_QWORD *)v9 + 11);
  *((_QWORD *)v9 + 11) = 0;
  if (v70)
  {
    v71 = (uint64_t *)(v70 + 2);
    v72 = *v70;
    if ((_DWORD)v72)
    {
      v73 = 24 * v72;
      do
      {
        v74 = (uint64_t *)v71[1];
        if (v74)
        {
          v75 = *v71;
          *v74 = *v71;
          *(_QWORD *)(v75 + 8) = v74;
          *v71 = 0;
          v71[1] = 0;
        }
        v71 += 3;
        v73 -= 24;
      }
      while (v73);
    }
    WTF::fastFree((unint64_t)v70, a2, a3, a4, a5, a6, a7, a8);
  }
  v76 = (unsigned int *)*((_QWORD *)v9 + 10);
  *((_QWORD *)v9 + 10) = 0;
  if (v76)
  {
    v77 = WTF::TrailingArray<WTF::EmbeddedFixedVector<JSC::DFG::CatchEntrypointData>,JSC::DFG::CatchEntrypointData>::~TrailingArray(v76, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v77, v78, v79, v80, v81, v82, v83, v84);
  }
  v85 = *((_QWORD *)v9 + 9);
  *((_QWORD *)v9 + 9) = 0;
  if (v85)
    WTF::fastFree(v85, a2, a3, a4, a5, a6, a7, a8);
  v86 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v9 + 8) = 0;
  if (v86)
    WTF::fastFree(v86, a2, a3, a4, a5, a6, a7, a8);
  v87 = *((_QWORD *)v9 + 7);
  *((_QWORD *)v9 + 7) = 0;
  if (v87)
    WTF::fastFree(v87, a2, a3, a4, a5, a6, a7, a8);
  v88 = (unsigned int *)*((_QWORD *)v9 + 6);
  *((_QWORD *)v9 + 6) = 0;
  if (v88)
  {
    v90 = (WTF::StringImpl **)(v88 + 2);
    v89 = *v88;
    if ((_DWORD)v89)
    {
      v91 = 8 * v89;
      do
      {
        v92 = *v90;
        *v90 = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 2)
          {
            WTF::StringImpl::~StringImpl(v92, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
          }
          else
          {
            *(_DWORD *)v92 -= 2;
          }
        }
        ++v90;
        v91 -= 8;
      }
      while (v91);
    }
    WTF::fastFree((unint64_t)v88, a2, a3, a4, a5, a6, a7, a8);
  }
  v101 = *((_QWORD *)v9 + 5);
  *((_QWORD *)v9 + 5) = 0;
  if (v101)
  {
    do
    {
      v102 = __ldaxr((unsigned int *)v101);
      v103 = v102 - 1;
    }
    while (__stlxr(v103, (unsigned int *)v101));
    if (!v103)
    {
      atomic_store(1u, (unsigned int *)v101);
      v132 = *(_QWORD *)(v101 + 24);
      if (v132)
      {
        *(_QWORD *)(v101 + 24) = 0;
        *(_DWORD *)(v101 + 32) = 0;
        WTF::fastFree(v132, a2, a3, a4, a5, a6, a7, a8);
      }
      v133 = *(unsigned int *)(v101 + 20);
      v134 = *(_QWORD **)(v101 + 8);
      if ((_DWORD)v133)
      {
        v135 = 8 * v133;
        do
        {
          if ((*v134 & 1) != 0)
          {
            v137 = *v134 & 0xFFFFFFFF8;
            if (v137)
            {
              v138 = v134;
              WTF::fastFree(v137, a2, a3, a4, a5, a6, a7, a8);
              v134 = v138;
            }
          }
          ++v134;
          v135 -= 8;
        }
        while (v135);
        v134 = *(_QWORD **)(v101 + 8);
      }
      if (v134)
      {
        *(_QWORD *)(v101 + 8) = 0;
        *(_DWORD *)(v101 + 16) = 0;
        WTF::fastFree((unint64_t)v134, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v101, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v104 = *((_QWORD *)v9 + 4);
  *((_QWORD *)v9 + 4) = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 1)
    {
      v113 = *(unint64_t **)(v104 + 8);
      if (v113)
      {
        do
        {
          v143 = (unint64_t *)v113[7];
          v144 = v113[2];
          if ((v144 & 1) != 0 && (v144 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v144 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v145 = *v113;
          *v113 = 0;
          if (v145)
            WTF::fastFree(v145, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree((unint64_t)v113, a2, a3, a4, a5, a6, a7, a8);
          v113 = v143;
        }
        while (v143);
      }
      *(_QWORD *)(v104 + 8) = 0;
      WTF::fastFree(v104, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      --*(_DWORD *)v104;
    }
  }
  JSC::MathICHolder::~MathICHolder(v9, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::MathICHolder::~MathICHolder(JSC::MathICHolder *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;

  v9 = *((_QWORD *)this + 3);
  while (v9)
  {
    v39 = v9;
    v9 = *(_QWORD *)(v9 + 88);
    v40 = *(unsigned int **)(v39 + 16);
    *(_QWORD *)(v39 + 16) = 0;
    if (v40)
    {
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        v67 = v9;
        v71 = v39;
        v43 = v40;
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v40, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v44 = (unint64_t)v43;
        v9 = v67;
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
        v39 = v71;
      }
    }
    WTF::fastFree(v39, a2, a3, a4, a5, a6, a7, a8);
  }
  *((_QWORD *)this + 3) = 0;
  v10 = *((_QWORD *)this + 2);
  while (v10)
  {
    v52 = v10;
    v10 = *(_QWORD *)(v10 + 64);
    v53 = *(unsigned int **)(v52 + 16);
    *(_QWORD *)(v52 + 16) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        v68 = v10;
        v72 = v52;
        v56 = v53;
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v57 = (unint64_t)v56;
        v10 = v68;
        WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
        v52 = v72;
      }
    }
    WTF::fastFree(v52, a2, a3, a4, a5, a6, a7, a8);
  }
  *((_QWORD *)this + 2) = 0;
  v11 = *((_QWORD *)this + 1);
  while (v11)
  {
    v26 = v11;
    v11 = *(_QWORD *)(v11 + 88);
    v27 = *(unsigned int **)(v26 + 16);
    *(_QWORD *)(v26 + 16) = 0;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        v66 = v11;
        v70 = v26;
        v30 = v27;
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v27, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v31 = (unint64_t)v30;
        v11 = v66;
        WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        v26 = v70;
      }
    }
    WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
  }
  *((_QWORD *)this + 1) = 0;
  v12 = *(_QWORD *)this;
  while (v12)
  {
    v13 = v12;
    v12 = *(_QWORD *)(v12 + 88);
    v14 = *(unsigned int **)(v13 + 16);
    *(_QWORD *)(v13 + 16) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        v65 = v12;
        v69 = v13;
        v17 = v14;
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v18 = (unint64_t)v17;
        v12 = v65;
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
        v13 = v69;
      }
    }
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = 0;
}

void JSC::DFG::CommonData::installVMTrapBreakpoints(JSC::DFG::CommonData *this, JSC::CodeBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  unsigned int *v12;
  JSC::ARM64Assembler **v13;
  uint64_t v14;
  JSC::ARM64Assembler *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21[3];
  JSC::CodeBlock *v22;
  char v23;
  const void **v24;

  v22 = a2;
  if (__ldaxr((unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::pcCodeBlockMapLock);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock))
    goto LABEL_4;
LABEL_5:
  if (*((_BYTE *)this + 209) && !*((_BYTE *)this + 210))
  {
    *((_BYTE *)this + 210) = 1;
    v11 = atomic_load(&JSC::DFG::pcCodeBlockMap(void)::onceKey);
    if (v11 != -1)
    {
      v21[0] = &v23;
      v24 = v21;
      std::__call_once(&JSC::DFG::pcCodeBlockMap(void)::onceKey, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::DFG::pcCodeBlockMap(void)::{lambda(void)#1} &&>>);
    }
    v12 = (unsigned int *)*((_QWORD *)this + 16);
    if (v12)
      v13 = (JSC::ARM64Assembler **)(v12 + 2);
    else
      v13 = 0;
    if (v12)
      v14 = (uint64_t)&v12[4 * *v12 + 2];
    else
      v14 = 0;
    while (v13 != (JSC::ARM64Assembler **)v14)
    {
      if (HIBYTE(word_1ECF4C286))
      {
        v21[0] = *v13;
        WTF::dataLog<char [25],WTF::RawPointer,char [2]>("Inserting VMTrap breakpoint at ", v21, "\n");
      }
      JSC::ARM64Assembler::replaceWithVMHalt(*v13, a2);
      v15 = *v13;
      v13 += 2;
      v24 = (const void **)v15;
      WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::add<JSC::CodeBlock *&>(&JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap, (uint64_t *)&v24, (uint64_t *)&v22, v16, v17, v18, v19, v20, (uint64_t)v21);
    }
  }
  v10 = __ldxr((unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t *WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::add<JSC::CodeBlock *&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v13 + 16 * v20);
  v22 = *v21;
  if (*v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v13 - 4);
        v33 = 0;
        v34 = v13 + 16 * v27;
        goto LABEL_32;
      }
      if (v22 == -1)
        v23 = v21;
      v20 = (v20 + v24) & v15;
      v21 = (uint64_t *)(v13 + 16 * v20);
      v22 = *v21;
      ++v24;
    }
    while (*v21);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v21 = v23;
    }
  }
  *v21 = v16;
  v21[1] = *a3;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v28 = *v11;
  if (*v11)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
      goto LABEL_23;
  }
  else if (3 * v31 <= 4 * v30)
  {
    if (!(_DWORD)v31)
    {
      v32 = 8;
LABEL_28:
      result = (uint64_t *)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v11, v32, (uint64_t)v21, a4, a5, a6, a7, a8);
      v21 = result;
      v28 = *v11;
      if (*v11)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v32 = ((_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31)));
    goto LABEL_28;
  }
LABEL_31:
  v34 = v28 + 16 * v31;
  v33 = 1;
LABEL_32:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v34;
  *(_BYTE *)(a9 + 16) = v33;
  return result;
}

uint64_t JSC::DFG::codeBlockForVMTrapPC(JSC::DFG *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  JSC::DFG *v16;
  int v17;
  uint64_t v18;
  int v19;
  char v21;
  char **v22;
  char *v23;

  if (__ldaxr((unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::DFG::pcCodeBlockMapLock);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock))
    goto LABEL_4;
LABEL_5:
  v10 = atomic_load(&JSC::DFG::pcCodeBlockMap(void)::onceKey);
  if (v10 != -1)
  {
    v23 = &v21;
    v22 = &v23;
    std::__call_once(&JSC::DFG::pcCodeBlockMap(void)::onceKey, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::DFG::pcCodeBlockMap(void)::{lambda(void)#1} &&>>);
  }
  if (!JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap)
    goto LABEL_15;
  v11 = *(_DWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 8);
  v12 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = *(JSC::DFG **)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap + 16 * v15);
  if (v16 != this)
  {
    v17 = 1;
    while (v16)
    {
      v15 = ((_DWORD)v15 + v17) & v11;
      v16 = *(JSC::DFG **)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap + 16 * v15);
      ++v17;
      if (v16 == this)
        goto LABEL_14;
    }
    v15 = *(unsigned int *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 4);
  }
LABEL_14:
  if (v15 != *(_DWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap - 4))
    v18 = *(_QWORD *)(JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap + 16 * v15 + 8);
  else
LABEL_15:
    v18 = 0;
  v19 = __ldxr((unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::DFG::pcCodeBlockMapLock, 0, a3, a4, a5, a6, a7, a8);
  return v18;
}

uint64_t JSC::DFG::CommonData::validateReferences(uint64_t this, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *i;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  const void **v10;
  int v11;
  int v12;
  unsigned int *v13;
  int v14;
  const void **v15;
  int v16;
  int v17;
  unsigned int *v18;
  int v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;

  v3 = this;
  v4 = *(_QWORD *)(this + 32);
  if (v4)
  {
    for (i = *(unsigned int **)(v4 + 8); i; i = (unsigned int *)*((_QWORD *)i + 7))
    {
      v6 = *(unsigned int **)i;
      if (*(_QWORD *)i)
        v7 = *(_QWORD *)i + 4;
      else
        v7 = 0;
      if (v6)
        v8 = *(_QWORD *)i + 4 + 9 * *v6;
      else
        v8 = 0;
      while (v7 != v8)
      {
        if (*(_BYTE *)v7 == 17)
        {
          v9 = *(unsigned int **)(v7 + 1);
          if (((unint64_t)v9 & 0xFFFE000000000002) == 0)
          {
            v24 = *(unsigned int **)(v7 + 1);
            if (v9)
            {
              v10 = *a2;
              if (!*a2)
                goto LABEL_38;
              v11 = *((_DWORD *)v10 - 2);
              this = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v24);
              v9 = v24;
              v12 = this & v11;
              v13 = (unsigned int *)v10[this & v11];
              if (v13 != v24)
              {
                v14 = 1;
                while (v13)
                {
                  v12 = (v12 + v14) & v11;
                  v13 = (unsigned int *)v10[v12];
                  ++v14;
                  if (v13 == v24)
                    goto LABEL_12;
                }
                goto LABEL_38;
              }
            }
          }
        }
LABEL_12:
        v7 += 9;
      }
      v9 = (unsigned int *)*((_QWORD *)i + 1);
      if (v9)
      {
        v24 = (unsigned int *)*((_QWORD *)i + 1);
        v15 = *a2;
        if (!*a2)
          goto LABEL_38;
        v16 = *((_DWORD *)v15 - 2);
        this = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v24);
        v9 = v24;
        v17 = this & v16;
        v18 = (unsigned int *)v15[this & v16];
        if (v18 != v24)
        {
          v19 = 1;
          while (v18)
          {
            v17 = (v17 + v19) & v16;
            v18 = (unsigned int *)v15[v17];
            ++v19;
            if (v18 == v24)
              goto LABEL_26;
          }
LABEL_38:
          v23 = v9;
          WTF::dataLog<char [20],JSC::JSValue,char [2]>("Found untracked reference: ", (JSC::JSValue *)&v23, "\n");
          WTF::dataLog<char [25],JSC::TrackedReferences,char [2]>("All tracked references: ", a2, "\n");
          __break(0xC471u);
          JUMPOUT(0x198383B84);
        }
      }
LABEL_26:
      if (*((_BYTE *)i + 40) == 17)
        this = JSC::TrackedReferences::check((uint64_t)a2, *(_QWORD *)((char *)i + 41));
    }
  }
  v20 = *(unsigned int **)(v3 + 96);
  if (v20)
    v21 = v20 + 2;
  else
    v21 = 0;
  if (v20)
    v22 = (uint64_t)&v20[12 * *v20 + 2];
  else
    v22 = 0;
  while (v21 != (unsigned int *)v22)
  {
    this = JSC::ObjectPropertyCondition::validateReferences((uint64_t)(v21 + 6), a2);
    v21 += 12;
  }
  return this;
}

unsigned int **JSC::DFG::CommonData::finalizeCatchEntrypoints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = *(_QWORD *)a2;
  v11 = *(unsigned int *)(a2 + 12);
  v12 = (_QWORD *)(*(_QWORD *)a2 + 24 * v11);
  v13 = 126 - 2 * __clz(v11);
  if ((_DWORD)v11)
    v14 = v13;
  else
    v14 = 0;
  std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*,false>(v10, v12, v14, 1, a5, a6, a7, a8);
  return WTF::FixedVector<JSC::DFG::CatchEntrypointData>::operator=<0ul,WTF::CrashOnOverflow>((unsigned int **)(a1 + 80), a2, v15, v16, v17, v18, v19, v20);
}

unsigned int **WTF::FixedVector<JSC::DFG::CatchEntrypointData>::operator=<0ul,WTF::CrashOnOverflow>(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned int *v35;
  WTF *v36;
  int v37;
  unsigned int v38;

  v36 = *(WTF **)a2;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v37 = v9;
  v38 = v10;
  if (v10)
  {
    WTF::EmbeddedFixedVector<JSC::DFG::CatchEntrypointData>::createFromVector<0ul,WTF::CrashOnOverflow>((uint64_t *)&v36, &v35);
    v11 = v35;
    v35 = 0;
  }
  else
  {
    v11 = 0;
  }
  v12 = *a1;
  *a1 = v11;
  if (v12)
  {
    v13 = WTF::TrailingArray<WTF::EmbeddedFixedVector<JSC::DFG::CatchEntrypointData>,JSC::DFG::CatchEntrypointData>::~TrailingArray(v12, (void *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v13, v14, v15, v16, v17, v18, v19, v20);
  }
  if (v10)
  {
    v21 = v35;
    v35 = 0;
    if (v21)
    {
      v22 = WTF::TrailingArray<WTF::EmbeddedFixedVector<JSC::DFG::CatchEntrypointData>,JSC::DFG::CatchEntrypointData>::~TrailingArray(v21, (void *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree((unint64_t)v22, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  v30 = v36;
  if (v38)
  {
    v32 = 24 * v38;
    v33 = (unint64_t *)((char *)v36 + 8);
    do
    {
      v34 = *v33;
      *v33 = 0;
      if (v34)
        WTF::fastFree(v34, (void *)a2, a3, a4, a5, a6, a7, a8);
      v33 += 3;
      v32 -= 24;
    }
    while (v32);
    v30 = v36;
  }
  if (v30)
  {
    v36 = 0;
    v37 = 0;
    WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::DFG::CommonData::clearWatchpoints(JSC::DFG::CommonData *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
  {
    v10 = (uint64_t *)(v9 + 2);
    v11 = *v9;
    if ((_DWORD)v11)
    {
      v12 = 24 * v11;
      do
      {
        v13 = (uint64_t *)v10[1];
        if (v13)
        {
          v14 = *v10;
          *v13 = *v10;
          *(_QWORD *)(v14 + 8) = v13;
          *v10 = 0;
          v10[1] = 0;
        }
        v10 += 3;
        v12 -= 24;
      }
      while (v12);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v15)
  {
    v16 = (uint64_t *)(v15 + 2);
    v17 = *v15;
    if ((_DWORD)v17)
    {
      v18 = 48 * v17;
      do
      {
        v19 = (uint64_t *)v16[1];
        if (v19)
        {
          v20 = *v16;
          *v19 = *v16;
          *(_QWORD *)(v20 + 8) = v19;
          *v16 = 0;
          v16[1] = 0;
        }
        v16 += 6;
        v18 -= 48;
      }
      while (v18);
    }
    WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v21)
  {
    if (*v21)
    {
      v22 = (uint64_t)&v21[22 * *v21 + 2];
      v23 = (uint64_t *)(v21 + 10);
      do
      {
        *(v23 - 4) = (uint64_t)off_1E3580B60;
        v24 = v23 - 4;
        v25 = (_QWORD *)v23[4];
        if (v25)
        {
          v26 = v23[3];
          *v25 = v26;
          *(_QWORD *)(v26 + 8) = v25;
          v23[3] = 0;
          v23[4] = 0;
        }
        v27 = (uint64_t *)v23[1];
        if (v27)
        {
          v28 = *v23;
          *v27 = *v23;
          *(_QWORD *)(v28 + 8) = v27;
          *v23 = 0;
          v23[1] = 0;
        }
        v23 += 11;
      }
      while (v24 + 11 != (uint64_t *)v22);
    }
    WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::DFG::performConstantFolding(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  void *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  JSC::DFG::Graph *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  JSC::DFG::PhiChildren *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  const void **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  void *v88;
  JSC::DFG *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  JSC::DFG::AbstractValue *v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  JSC::DFG::Graph *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  BOOL v126;
  BOOL v127;
  JSC::DFG::Graph *v128;
  JSC::DFG::Node **v129;
  uint64_t v130;
  JSC::DFG::Node *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  JSC::DFG::Graph *v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  int v158;
  WTF *v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  __int16 v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  const void *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;
  uint64_t v190;
  __int16 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int16 v210;
  __int16 v211;
  __int16 v212;
  _QWORD *v213;
  char v214;
  uint64_t v215;
  char v216;
  WTF *v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  __int16 v224;
  JSC::DFG::Graph *v225;
  __int128 v226;
  char v227;
  WTF *v228;
  _QWORD v229[2];
  uint64_t v230;
  int v231;
  unsigned int v232;
  uint64_t v233;
  void *v234;
  int v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  char v241;
  int v242;
  int v243;
  char v244;
  uint64_t v245;
  JSC::DFG *v246;
  uint64_t v247;
  _QWORD *v248;
  WTF *v249;
  JSC::DFG *v250;
  WTF *v251;
  uint64_t v252;
  _BYTE v253[128];
  _OWORD v254[2];
  double v255;
  __int128 *v256;
  uint64_t v257;
  __int128 v258;
  __int16 v259;
  _QWORD v260[3];

  v221 = -1;
  v222 = -1;
  v223 = 0;
  v224 = 256;
  v225 = this;
  *(_QWORD *)&v226 = "constant folding";
  *((_QWORD *)&v226 + 1) = 17;
  v227 = 0;
  v228 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v221);
  v10 = *((_QWORD *)this + 123);
  v229[0] = this;
  v229[1] = v10;
  if (!*((_DWORD *)this + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x198385208);
  }
  v11 = **((_QWORD **)this + 6);
  memset(v254, 0, sizeof(v254));
  v12 = *(unsigned int *)(v11 + 84);
  v230 = 0;
  v231 = 0;
  v232 = v12;
  if ((_DWORD)v12)
  {
    if (v12 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x198385210);
    }
    v13 = WTF::fastMalloc((WTF *)(32 * v12));
    v231 = v12;
    v230 = v13;
    if (v232)
    {
      v14 = v13 + 32 * v232;
      do
      {
        *(_QWORD *)v13 = 0;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)((char *)v254 + 8);
        *(_QWORD *)(v13 + 24) = *((_QWORD *)&v254[1] + 1);
        v13 += 32;
      }
      while (v13 != v14);
    }
  }
  v233 = *(_QWORD *)(v11 + 88);
  v15 = *((unsigned int *)this + 77);
  v234 = 0;
  v235 = 0;
  v236 = v15;
  if ((_DWORD)v15)
  {
    if (v15 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x198385218);
    }
    v16 = (void *)WTF::fastMalloc((WTF *)(32 * v15));
    v235 = v15;
    v234 = v16;
    bzero(v16, 32 * v236);
  }
  v242 = 0;
  v243 = 0;
  v238 = 0;
  v239 = 0;
  v237 = 0;
  v245 = *((_QWORD *)this + 4);
  v246 = this;
  v247 = *((_QWORD *)this + 2);
  v248 = v229;
  v249 = 0;
  if (*((_DWORD *)this + 236) == 2)
  {
    v50 = (JSC::DFG::PhiChildren *)WTF::fastMalloc((WTF *)8);
    v57 = JSC::DFG::PhiChildren::PhiChildren(v50, this, v51, v52, v53, v54, v55, v56);
    v58 = v249;
    v249 = v57;
    if (v58)
    {
      v59 = *(_QWORD *)v58;
      if (*(_QWORD *)v58)
      {
        v60 = *(unsigned int *)(v59 - 4);
        if ((_DWORD)v60)
        {
          v61 = v59 + 24;
          do
          {
            if (*(_QWORD *)(v61 - 24) != -1)
            {
              v62 = *(_QWORD *)(v61 - 16);
              if (v61 != v62 && v62 != 0)
              {
                *(_QWORD *)(v61 - 16) = 0;
                *(_DWORD *)(v61 - 8) = 0;
                WTF::fastFree(v62, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
              }
            }
            v61 += 48;
            --v60;
          }
          while (v60);
        }
        WTF::fastFree(v59 - 16, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
      }
      WTF::fastFree((unint64_t)v58, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
    }
  }
  v17 = (WTF *)v253;
  v250 = this;
  v251 = (WTF *)v253;
  v252 = 8;
  *(_QWORD *)&v254[0] = "DFG";
  *((_QWORD *)&v254[0] + 1) = 4;
  v254[1] = v226;
  v255 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v166 = mach_absolute_time();
    v168 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v168 != -1)
    {
      *(_QWORD *)&v258 = v260;
      v256 = &v258;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v256, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v167) = dword_1ECF4400C;
    v255 = (double)(v166 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v167 * 1000000000.0);
  }
  v18 = v225;
  v19 = *((unsigned int *)v225 + 15);
  if (!(_DWORD)v19)
    goto LABEL_29;
  v20 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v225 + 6) + 8 * v20))
  {
    if (v19 == ++v20)
      goto LABEL_29;
  }
  if ((_DWORD)v19 == (_DWORD)v20)
    goto LABEL_29;
  v21 = 0;
  v22 = v20;
  v23 = *((unsigned int *)v225 + 15);
  do
  {
    if (v23 <= v22)
    {
      __break(0xC471u);
      JUMPOUT(0x198385118);
    }
    v24 = JSC::DFG::ConstantFoldingPhase::foldConstants((JSC::DFG::ConstantFoldingPhase *)&v221, *(_QWORD *)(*((_QWORD *)v18 + 6) + 8 * v22++), v4, v5, v6, v7, v8, v9);
    v23 = *((unsigned int *)v18 + 15);
    if (v23 > v22)
    {
      while (!*(_QWORD *)(*((_QWORD *)v18 + 6) + 8 * v22))
      {
        if (v23 == ++v22)
        {
          v22 = *((unsigned int *)v18 + 15);
          goto LABEL_25;
        }
      }
      v22 = v22;
    }
LABEL_25:
    v21 |= v24;
  }
  while (v19 != v22);
  v18 = v225;
  if ((v21 & 1) != 0)
  {
    if (*((_DWORD *)v225 + 236) != 2)
      goto LABEL_28;
    v153 = *((unsigned int *)v225 + 15);
    if (!(_DWORD)v153)
      goto LABEL_28;
    v154 = 0;
    v25 = 1;
    while (!*(_QWORD *)(*((_QWORD *)v225 + 6) + 8 * v154))
    {
      if (v153 == ++v154)
        goto LABEL_30;
    }
    if ((_DWORD)v153 != (_DWORD)v154)
    {
      v155 = v154;
      v156 = *((unsigned int *)v225 + 15);
      do
      {
        if (v156 <= v155)
        {
          __break(0xC471u);
          JUMPOUT(0x198385238);
        }
        v157 = *(_QWORD *)(*((_QWORD *)v18 + 6) + 8 * v155);
        v158 = *(_DWORD *)(v157 + 220);
        if (v158)
        {
          v159 = v17;
          v160 = v158 - 1;
          v161 = 8 * (v158 - 1);
          do
          {
            if (*(_DWORD *)(v157 + 220) <= v160)
            {
              __break(0xC471u);
              JUMPOUT(0x198385128);
            }
            v162 = *(_QWORD *)(*(_QWORD *)(v157 + 208) + v161);
            if (*(_WORD *)(v162 + 18) == 26)
            {
              v163 = *(unsigned __int16 *)(*(_QWORD *)(v162 + 72) + 18);
              if (v163 != 27)
              {
                v220 = v153;
                if (v163 > 2)
                {
                  JSC::DFG::Graph::logAssertionFailure(v225, (JSC::DFG::Node *)v162, (const WTF::CString *)"./dfg/DFGConstantFoldingPhase.cpp", (const char *)0x62D, "void JSC::DFG::ConstantFoldingPhase::fixUpsilons(BasicBlock *)", "Bad Upsilon phi() pointer");
                  __break(0xC471u);
                  JUMPOUT(0x198384FC0);
                }
                JSC::DFG::Node::remove((JSC::DFG::Node *)v162, v225, v4, v5, v6, v7, v8, v9);
                v153 = v220;
              }
            }
            v161 -= 8;
            --v160;
          }
          while (v160 != -1);
          v156 = *((unsigned int *)v18 + 15);
          v17 = v159;
        }
        if (v156 > ++v155)
        {
          while (!*(_QWORD *)(*((_QWORD *)v18 + 6) + 8 * v155))
          {
            if (v156 == ++v155)
            {
              v155 = v156;
              goto LABEL_213;
            }
          }
          v155 = v155;
        }
LABEL_213:
        ;
      }
      while (v153 != v155);
      v25 = 1;
      v18 = v225;
    }
    else
    {
LABEL_28:
      v25 = 1;
    }
  }
  else
  {
LABEL_29:
    v25 = 0;
  }
LABEL_30:
  if (*((_DWORD *)v18 + 236) == 2)
  {
    v256 = 0;
    v257 = 0;
    v218 = *((unsigned int *)v18 + 15);
    if (!(_DWORD)v218)
      goto LABEL_169;
    v64 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v18 + 6) + 8 * v64))
    {
      if (v218 == ++v64)
        goto LABEL_157;
    }
    if ((_DWORD)v218 != (_DWORD)v64)
    {
      v214 = 0;
      LODWORD(v65) = *((_DWORD *)v18 + 15);
      LODWORD(v66) = v64;
      v217 = v17;
      v216 = v25;
      do
      {
        if (v65 <= v66)
        {
          __break(0xC471u);
          JUMPOUT(0x198385220);
        }
        v219 = v66;
        v67 = *(_QWORD *)(*((_QWORD *)v18 + 6) + 8 * v66);
        JSC::DFG::InPlaceAbstractState::beginBasicBlock((JSC::DFG::InPlaceAbstractState *)v229, (JSC::DFG::BasicBlock *)v67, (uint64_t)v4, v5, v6, v7, v8, v9);
        if (*(_DWORD *)(v67 + 220))
        {
          v68 = 0;
          v69 = 0;
          v70 = (const void **)(v67 + 208);
          do
          {
            v71 = *((_QWORD *)*v70 + v69);
            if (*(unsigned __int16 *)(v71 + 18) - 364 < 0xC)
              break;
            if (!v240)
            {
              v106 = *(_QWORD *)v71;
              if ((*(_QWORD *)v71 & 1) != 0)
              {
                v183 = *(_QWORD *)(v106 & 0xFFFFFFFF8);
                if ((v106 & 2) != 0
                  || ((v184 = *(unsigned int *)((v106 & 0xFFFFFFFF8) + 8), (_DWORD)v184 != 0x3FFFFFFF)
                    ? (v185 = (_DWORD)v184 == -1)
                    : (v185 = 1),
                      v185))
                {
                  v186 = 2;
                }
                else if (v184 >> 28)
                {
                  v204 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v204 = v183;
                  *(_DWORD *)(v204 + 8) = v184;
                  v186 = 1;
                  v183 = v204;
                }
                else
                {
                  v186 = *(_QWORD *)(v106 & 0xFFFFFFFF8);
                  v183 = v184 << 36;
                }
                v106 = v183 | v186;
              }
              v107 = *(_QWORD *)(v71 + 8);
              if ((v107 & 1) != 0)
              {
                v187 = *(_QWORD *)(v107 & 0xFFFFFFFF8);
                if ((v107 & 2) != 0
                  || ((v188 = *(unsigned int *)((v107 & 0xFFFFFFFF8) + 8), (_DWORD)v188 != 0x3FFFFFFF)
                    ? (v189 = (_DWORD)v188 == -1)
                    : (v189 = 1),
                      v189))
                {
                  v190 = 2;
                }
                else if (v188 >> 28)
                {
                  v205 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v205 = v187;
                  *(_DWORD *)(v205 + 8) = v188;
                  v190 = 1;
                  v187 = v205;
                }
                else
                {
                  v190 = v187;
                  v187 = v188 << 36;
                }
                v107 = v187 | v190;
              }
              v108 = v69;
              v109 = *(unsigned __int16 *)(v71 + 16);
              v110 = *(unsigned int *)(v67 + 220);
              if (v110 > v69)
              {
                v111 = HIDWORD(v257);
                v112 = v69;
                do
                {
                  v113 = (char *)*v70 + v68;
                  if (v111 == (_DWORD)v257)
                  {
                    v114 = v109;
                    v115 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v256, v111 + 1, (unint64_t)v113);
                    v109 = v114;
                    v111 = HIDWORD(v257);
                    *((_QWORD *)v256 + HIDWORD(v257)) = *v115;
                    v110 = *(unsigned int *)(v67 + 220);
                  }
                  else
                  {
                    *((_QWORD *)v256 + v111) = *v113;
                  }
                  HIDWORD(v257) = ++v111;
                  ++v112;
                  v68 += 8;
                }
                while (v112 < v110);
              }
              v215 = v107;
              if (v110 < v69)
              {
                v169 = *(unsigned int *)(v67 + 216);
                if (v169 < v69)
                {
                  v170 = v109;
                  v171 = v169 + (v169 >> 2);
                  if (v171 >= 0x10)
                    v172 = v171 + 1;
                  else
                    v172 = 16;
                  if (v172 <= v69)
                    v173 = v69;
                  else
                    v173 = v172;
                  v174 = *v70;
                  if (v173 < 9)
                  {
                    v175 = (void *)(v67 + 224);
                    *(_QWORD *)(v67 + 208) = v67 + 224;
                    *(_DWORD *)(v67 + 216) = 8;
                  }
                  else
                  {
                    if (v173 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198385254);
                    }
                    v175 = (void *)WTF::fastMalloc((WTF *)(8 * v173));
                    *(_DWORD *)(v67 + 216) = v173;
                    *(_QWORD *)(v67 + 208) = v175;
                  }
                  memcpy(v175, v174, 8 * v110);
                  v107 = v215;
                  LOWORD(v109) = v170;
                  if ((const void *)(v67 + 224) != v174 && v174)
                  {
                    if (*v70 == v174)
                    {
                      *(_QWORD *)(v67 + 208) = 0;
                      *(_DWORD *)(v67 + 216) = 0;
                    }
                    WTF::fastFree((unint64_t)v174, v176, v177, v178, v6, v7, v8, v9);
                    v107 = v215;
                    LOWORD(v109) = v170;
                  }
                }
              }
              *(_DWORD *)(v67 + 220) = v108;
              v116 = v225;
              v117 = v106;
              v118 = v106;
              if ((v106 & 1) != 0)
              {
                v191 = v109;
                v192 = *(_QWORD *)(v106 & 0xFFFFFFFF8);
                if ((v106 & 2) != 0
                  || (v193 = *(unsigned int *)((v106 & 0xFFFFFFFF8) + 8), (_DWORD)v193 == 0x3FFFFFFF)
                  || (_DWORD)v193 == -1)
                {
                  v194 = 2;
                }
                else if (v193 >> 28)
                {
                  v206 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v206 = v192;
                  *(_DWORD *)(v206 + 8) = v193;
                  v194 = 1;
                  v192 = v206;
                }
                else
                {
                  v194 = *(_QWORD *)(v106 & 0xFFFFFFFF8);
                  v192 = v193 << 36;
                }
                v118 = v192 | v194;
                v117 = v106;
                v107 = v215;
                LOWORD(v109) = v191;
              }
              v119 = v107;
              if ((v107 & 1) != 0)
              {
                v210 = v109;
                v195 = *(_QWORD *)(v107 & 0xFFFFFFFF8);
                if ((v107 & 2) != 0
                  || (v196 = *(unsigned int *)((v107 & 0xFFFFFFFF8) + 8), (_DWORD)v196 == 0x3FFFFFFF)
                  || (_DWORD)v196 == -1)
                {
                  v197 = 2;
                }
                else if (v196 >> 28)
                {
                  v207 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v207 = v195;
                  *(_DWORD *)(v207 + 8) = v196;
                  v197 = 1;
                  v195 = v207;
                }
                else
                {
                  v197 = v195;
                  v195 = v196 << 36;
                }
                v119 = v195 | v197;
                v117 = v106;
                LOWORD(v109) = v210;
              }
              v120 = v118;
              if ((v118 & 1) != 0)
              {
                v211 = v109;
                v198 = *(_QWORD *)(v118 & 0xFFFFFFFF8);
                if ((v118 & 2) != 0
                  || (v199 = *(unsigned int *)((v118 & 0xFFFFFFFF8) + 8), (_DWORD)v199 == 0x3FFFFFFF)
                  || (_DWORD)v199 == -1)
                {
                  v200 = 2;
                }
                else if (v199 >> 28)
                {
                  v208 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v208 = v198;
                  *(_DWORD *)(v208 + 8) = v199;
                  v200 = 1;
                  v198 = v208;
                }
                else
                {
                  v200 = *(_QWORD *)(v118 & 0xFFFFFFFF8);
                  v198 = v199 << 36;
                }
                v120 = v198 | v200;
                v117 = v106;
                LOWORD(v109) = v211;
              }
              *(_QWORD *)&v258 = v120;
              v121 = v119;
              if ((v119 & 1) != 0)
              {
                v212 = v109;
                v201 = *(_QWORD *)(v119 & 0xFFFFFFFF8);
                if ((v119 & 2) != 0
                  || (v202 = *(unsigned int *)((v119 & 0xFFFFFFFF8) + 8), (_DWORD)v202 == 0x3FFFFFFF)
                  || (_DWORD)v202 == -1)
                {
                  v203 = 2;
                }
                else if (v202 >> 28)
                {
                  v209 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v209 = v201;
                  *(_DWORD *)(v209 + 8) = v202;
                  v203 = 1;
                  v201 = v209;
                }
                else
                {
                  v203 = *(_QWORD *)(v119 & 0xFFFFFFFF8);
                  v201 = v202 << 36;
                }
                v121 = v201 | v203;
                v117 = v106;
                LOWORD(v109) = v212;
              }
              *((_QWORD *)&v258 + 1) = v121;
              v259 = v109;
              v122 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>((uint64_t)v116, 0, 373, (uint64_t)&v258, v6, v7, v8, v9);
              if ((BYTE8(v258) & 1) != 0 && (*((_QWORD *)&v258 + 1) & 0xFFFFFFFF8) != 0)
                WTF::fastFree(*((_QWORD *)&v258 + 1) & 0xFFFFFFFF8, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
              if ((v258 & 1) != 0 && (v258 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v258 & 0xFFFFFFFF8, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
              v260[0] = v122;
              v123 = *(unsigned int *)(v67 + 220);
              if ((_DWORD)v123 == *(_DWORD *)(v67 + 216))
              {
                v165 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67 + 208, v123 + 1, (unint64_t)v260);
                v123 = *(unsigned int *)(v67 + 220);
                *(_QWORD *)(*(_QWORD *)(v67 + 208) + 8 * v123) = *v165;
              }
              else
              {
                *((_QWORD *)*v70 + v123) = v122;
              }
              v17 = v217;
              v104 = v218;
              *(_DWORD *)(v67 + 220) = v123 + 1;
              v105 = v219;
              if ((v119 & 1) != 0 && (v119 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v119 & 0xFFFFFFFF8, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
              LOBYTE(v25) = v216;
              if ((v118 & 1) != 0 && (v118 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v118 & 0xFFFFFFFF8, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
              if ((v215 & 1) != 0 && (v215 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v215 & 0xFFFFFFFF8, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
              if ((v117 & 1) == 0)
              {
                v214 = 1;
                goto LABEL_116;
              }
              if ((v117 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v117 & 0xFFFFFFFF8, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
              v214 = 1;
              break;
            }
            v72 = v248[9];
            if (v69 >= *(unsigned int *)(v72 + 220))
            {
              __break(0xC471u);
              JUMPOUT(0x198385108);
            }
            v73 = *(_QWORD *)(*(_QWORD *)(v72 + 208) + 8 * v69);
            *((_BYTE *)v248 + 81) = 0;
            if ((*(_BYTE *)(v73 + 56) & 0x10) != 0)
            {
              if (*(_DWORD *)(v73 + 32) + *(_QWORD *)(v73 + 24) > *(_QWORD *)(v73 + 24))
              {
                v89 = v246;
                v90 = *(_QWORD *)(v73 + 24);
                do
                {
                  if (v90 >= *((unsigned int *)v89 + 41))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198385228);
                  }
                  v91 = *((_QWORD *)v89 + 19);
                  v92 = *(_QWORD *)(v91 + 8 * v90);
                  v93 = (v92 >> 50) & 0x3F;
                  if ((v92 & 0xFF00FFFFFFFFFFFFLL) != 0 && (_DWORD)v93 != 0)
                  {
                    v95 = 0x300000000;
                    switch((int)v93)
                    {
                      case 1:
                      case 2:
                        break;
                      case 3:
                        v95 = 0x1300000000;
                        break;
                      case 4:
                        v95 = 0x7300000000;
                        break;
                      case 5:
                        v95 = 0x3300000000;
                        break;
                      case 6:
                      case 7:
                        v95 = 0x10000000000;
                        break;
                      case 8:
                      case 9:
                        v95 = 0x2C00FFFFFFF7;
                        break;
                      case 10:
                        v95 = 0x2E00FFFFFFF7;
                        break;
                      case 11:
                        v95 = 0x20000FFFFFF7;
                        break;
                      case 12:
                        v95 = 2;
                        break;
                      case 13:
                        v95 = 4;
                        break;
                      case 14:
                        v95 = 1;
                        break;
                      case 15:
                        v95 = 0x100000;
                        break;
                      case 16:
                        v95 = 0x40000;
                        break;
                      case 17:
                        v95 = 0x2000000;
                        break;
                      case 18:
                        v95 = 0x4000000;
                        break;
                      case 19:
                        v95 = 0x22000FFFFFF7;
                        break;
                      case 20:
                        v95 = 0x10000000;
                        break;
                      case 21:
                      case 23:
                        v95 = 805306368;
                        break;
                      case 22:
                        v95 = 0x20030000000;
                        break;
                      case 24:
                        v95 = 0x1B73F0000000;
                        break;
                      case 25:
                        v95 = 0x40000000;
                        break;
                      case 26:
                      case 27:
                        v95 = 0x80000000000;
                        break;
                      case 28:
                        v95 = 0x100000000000;
                        break;
                      case 29:
                        v95 = 0x80000;
                        break;
                      case 30:
                        v95 = 0x200000;
                        break;
                      case 31:
                        v95 = 0x400000;
                        break;
                      case 32:
                      case 33:
                        v95 = 0x8000000;
                        break;
                      case 34:
                        v95 = 0x800000;
                        break;
                      case 35:
                        v95 = 0x1000000;
                        break;
                      case 36:
                        v95 = 0x200000000000;
                        break;
                      case 37:
                        v95 = 0x20000;
                        break;
                      case 38:
                        v95 = 805437440;
                        break;
                      case 39:
                        v95 = -536870913;
                        break;
                      case 40:
                        v95 = -1073741825;
                        break;
                      case 41:
                      case 42:
                        v95 = 0xFFFFD3FF00000008;
                        break;
                      case 43:
                        v95 = 0xFFFFFF0FFFFFFFFFLL;
                        break;
                      case 44:
                        v95 = 0xFFFFF70FFFFFFFFFLL;
                        break;
                      case 45:
                        v95 = 0xFFFFF70FCFFFFFFFLL;
                        break;
                      case 46:
                      case 47:
                        v95 = 0x20000000000;
                        break;
                      case 48:
                        v95 = 0x30000000000;
                        break;
                      case 49:
                        v95 = 0xF000000000;
                        break;
                      case 50:
                        v95 = 0x3000000000;
                        break;
                      case 51:
                        v95 = 0x1000000000;
                        break;
                      case 52:
                        v95 = 0xC00000000;
                        break;
                      default:
                        __break(0xC471u);
                        JUMPOUT(0x198385158);
                    }
                    v96 = v248;
                    v97 = v248[1];
                    v98 = *(unsigned int *)((v92 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                    v99 = (uint64_t *)(v97 + 24);
                    v100 = (uint64_t *)(v97 + 8);
                    if ((v92 & 1) != 0)
                      v100 = v99;
                    v101 = *v100;
                    v102 = (JSC::DFG::AbstractValue *)(*v100 + 32 * v98);
                    v103 = *((_QWORD *)v102 + 1);
                    if ((v103 & ~v95) != 0)
                    {
                      *(_QWORD *)(v91 + 8 * v90) = v92 & 0xFFFEFFFFFFFFFFFFLL;
                      v124 = *((unsigned int *)v96 + 22);
                      if ((v103 & 0x2800FFFFFFF7) != 0)
                      {
                        JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v102, (void *)v124, v95, v5, v6, v7, v8, v9);
                      }
                      else
                      {
                        *(_DWORD *)(v101 + 32 * v98 + 20) = v124;
                        *((_QWORD *)v102 + 1) = v103 & v95;
                        if ((v103 & v95) == 0)
                          JSC::DFG::AbstractValue::clear(v102, v124, v95, v5, v6, v7, v8, v9);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v91 + 8 * v90) = v92 | 0x1000000000000;
                    }
                  }
                  ++v90;
                }
                while (v90 < (*(_DWORD *)(v73 + 32) + *(_DWORD *)(v73 + 24)));
              }
            }
            else
            {
              v74 = 0;
              v75 = v73 + 24;
              do
              {
                v76 = *(_QWORD *)(v75 + v74);
                if ((v76 & 0xFF00FFFFFFFFFFFFLL) == 0)
                  break;
                v77 = (v76 >> 50) & 0x3F;
                if ((_DWORD)v77)
                {
                  v78 = 0x300000000;
                  switch((int)v77)
                  {
                    case 1:
                    case 2:
                      break;
                    case 3:
                      v78 = 0x1300000000;
                      break;
                    case 4:
                      v78 = 0x7300000000;
                      break;
                    case 5:
                      v78 = 0x3300000000;
                      break;
                    case 6:
                    case 7:
                      v78 = 0x10000000000;
                      break;
                    case 8:
                    case 9:
                      v78 = 0x2C00FFFFFFF7;
                      break;
                    case 10:
                      v78 = 0x2E00FFFFFFF7;
                      break;
                    case 11:
                      v78 = 0x20000FFFFFF7;
                      break;
                    case 12:
                      v78 = 2;
                      break;
                    case 13:
                      v78 = 4;
                      break;
                    case 14:
                      v78 = 1;
                      break;
                    case 15:
                      v78 = 0x100000;
                      break;
                    case 16:
                      v78 = 0x40000;
                      break;
                    case 17:
                      v78 = 0x2000000;
                      break;
                    case 18:
                      v78 = 0x4000000;
                      break;
                    case 19:
                      v78 = 0x22000FFFFFF7;
                      break;
                    case 20:
                      v78 = 0x10000000;
                      break;
                    case 21:
                    case 23:
                      v78 = 805306368;
                      break;
                    case 22:
                      v78 = 0x20030000000;
                      break;
                    case 24:
                      v78 = 0x1B73F0000000;
                      break;
                    case 25:
                      v78 = 0x40000000;
                      break;
                    case 26:
                    case 27:
                      v78 = 0x80000000000;
                      break;
                    case 28:
                      v78 = 0x100000000000;
                      break;
                    case 29:
                      v78 = 0x80000;
                      break;
                    case 30:
                      v78 = 0x200000;
                      break;
                    case 31:
                      v78 = 0x400000;
                      break;
                    case 32:
                    case 33:
                      v78 = 0x8000000;
                      break;
                    case 34:
                      v78 = 0x800000;
                      break;
                    case 35:
                      v78 = 0x1000000;
                      break;
                    case 36:
                      v78 = 0x200000000000;
                      break;
                    case 37:
                      v78 = 0x20000;
                      break;
                    case 38:
                      v78 = 805437440;
                      break;
                    case 39:
                      v78 = -536870913;
                      break;
                    case 40:
                      v78 = -1073741825;
                      break;
                    case 41:
                    case 42:
                      v78 = 0xFFFFD3FF00000008;
                      break;
                    case 43:
                      v78 = 0xFFFFFF0FFFFFFFFFLL;
                      break;
                    case 44:
                      v78 = 0xFFFFF70FFFFFFFFFLL;
                      break;
                    case 45:
                      v78 = 0xFFFFF70FCFFFFFFFLL;
                      break;
                    case 46:
                    case 47:
                      v78 = 0x20000000000;
                      break;
                    case 48:
                      v78 = 0x30000000000;
                      break;
                    case 49:
                      v78 = 0xF000000000;
                      break;
                    case 50:
                      v78 = 0x3000000000;
                      break;
                    case 51:
                      v78 = 0x1000000000;
                      break;
                    case 52:
                      v78 = 0xC00000000;
                      break;
                    default:
                      __break(0xC471u);
                      JUMPOUT(0x1983850F0);
                  }
                  v79 = v248;
                  v80 = v248[1];
                  v81 = *(unsigned int *)((v76 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                  v82 = (uint64_t *)(v80 + 24);
                  v83 = (uint64_t *)(v80 + 8);
                  if ((v76 & 1) != 0)
                    v83 = v82;
                  v84 = *v83;
                  v85 = (_QWORD *)(*v83 + 32 * v81);
                  v86 = v85 + 1;
                  v87 = v85[1];
                  if ((v87 & ~v78) != 0)
                  {
                    *(_QWORD *)(v75 + v74) = v76 & 0xFFFEFFFFFFFFFFFFLL;
                    v88 = (void *)*((unsigned int *)v79 + 22);
                    if ((v87 & 0x2800FFFFFFF7) != 0)
                    {
                      JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v85, v88, v78, v5, v6, v7, v8, v9);
                    }
                    else
                    {
                      v164 = v84 + 32 * v81;
                      *(_DWORD *)(v164 + 20) = (_DWORD)v88;
                      *v86 = v87 & v78;
                      if ((v87 & v78) == 0)
                      {
                        *v86 = 0;
                        *(_DWORD *)(v164 + 16) = 0;
                        if ((*v85 & 1) != 0)
                        {
                          v213 = v85;
                          WTF::fastFree(*v85 & 0xFFFFFFFFFFFFFFFCLL, v88, v78, v5, v6, v7, v8, v9);
                          v85 = v213;
                        }
                        *v85 = 0;
                        *(_QWORD *)(v84 + 32 * v81 + 24) = 0;
                      }
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v75 + v74) = v76 | 0x1000000000000;
                  }
                }
                v74 += 8;
              }
              while (v74 != 24);
            }
            JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(&v245, v69++, v73);
            v68 += 8;
          }
          while (v69 < *(unsigned int *)(v67 + 220));
        }
        v17 = v217;
        v104 = v218;
        LOBYTE(v25) = v216;
        v105 = v219;
LABEL_116:
        v239 = 0;
        v240 = 0;
        v244 = 0;
        v241 = 0;
        v66 = (v105 + 1);
        v65 = *((unsigned int *)v18 + 15);
        if (v65 > v66)
        {
          while (!*(_QWORD *)(*((_QWORD *)v18 + 6) + 8 * v66))
          {
            if (v65 == ++v66)
            {
              LODWORD(v66) = *((_DWORD *)v18 + 15);
              break;
            }
          }
        }
      }
      while (v104 != (_DWORD)v66);
      if ((v214 & 1) != 0)
      {
        v128 = v225;
        if (*((_DWORD *)v225 + 236) == 2)
        {
          v179 = *((unsigned int *)v225 + 15);
          if ((_DWORD)v179)
          {
            v180 = 0;
            while (!*(_QWORD *)(*((_QWORD *)v225 + 6) + 8 * v180))
            {
              if (v179 == ++v180)
                goto LABEL_172;
            }
            if ((_DWORD)v179 != (_DWORD)v180)
            {
              v181 = v180;
              v182 = *((unsigned int *)v225 + 15);
              do
              {
                if (v182 <= v181)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19838525CLL);
                }
                JSC::DFG::BasicBlock::SSAData::invalidate(*(JSC::DFG::BasicBlock::SSAData **)(*(_QWORD *)(*((_QWORD *)v128 + 6) + 8 * v181++) + 200), v3, (uint64_t)v4, v5, v6, v7, v8, v9);
                v182 = *((unsigned int *)v128 + 15);
                if (v182 > v181)
                {
                  while (!*(_QWORD *)(*((_QWORD *)v128 + 6) + 8 * v181))
                  {
                    if (v182 == ++v181)
                    {
                      v181 = *((unsigned int *)v128 + 15);
                      goto LABEL_275;
                    }
                  }
                  v181 = v181;
                }
LABEL_275:
                ;
              }
              while (v179 != v181);
            }
          }
        }
LABEL_172:
        if (HIDWORD(v257))
        {
          v129 = (JSC::DFG::Node **)v256;
          v130 = 8 * HIDWORD(v257);
          do
          {
            v131 = *v129++;
            JSC::DFG::Graph::deleteNode(v225, v131, (uint64_t)v4, v5, v6, v7, v8, v9);
            v130 -= 8;
          }
          while (v130);
        }
        JSC::DFG::Graph::invalidateCFG(v225, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
        v139 = v225;
        v140 = *((_DWORD *)v225 + 15);
        if (v140)
        {
          v141 = v140 - 1;
          v142 = 8 * (v140 - 1);
          do
          {
            if (*((_DWORD *)v139 + 15) <= v141)
            {
              __break(0xC471u);
              JUMPOUT(0x198385230);
            }
            v143 = *(_QWORD *)(*((_QWORD *)v139 + 6) + v142);
            if (v143)
            {
              *(_BYTE *)(v143 + 21) = 0;
              if (*(_DWORD *)(v143 + 48))
              {
                if (*(_DWORD *)(v143 + 52))
                  *(_DWORD *)(v143 + 52) = 0;
                v144 = *(_QWORD *)(v143 + 40);
                if (v143 + 56 != v144 && v144 != 0)
                {
                  *(_QWORD *)(v143 + 40) = 0;
                  *(_DWORD *)(v143 + 48) = 0;
                  WTF::fastFree(v144, v132, v133, v134, v135, v136, v137, v138);
                  v144 = *(_QWORD *)(v143 + 40);
                }
                if (!v144)
                {
                  *(_QWORD *)(v143 + 40) = v143 + 56;
                  *(_DWORD *)(v143 + 48) = 2;
                }
              }
            }
            v142 -= 8;
            --v141;
          }
          while (v141 != -1);
        }
        JSC::DFG::Graph::determineReachability(v139, v132, v133, v134, v135, v136, v137, v138);
        JSC::DFG::Graph::killUnreachableBlocks(v225, v146, v147, v148, v149, v150, v151, v152);
        LOBYTE(v25) = 1;
        v17 = v217;
      }
    }
LABEL_157:
    v125 = (unint64_t)v256;
    if (v256)
    {
      v256 = 0;
      LODWORD(v257) = 0;
      WTF::fastFree(v125, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
      v26 = 0;
      if ((v25 & 1) == 0)
        goto LABEL_33;
    }
    else
    {
LABEL_169:
      if ((v25 & 1) == 0)
        goto LABEL_32;
    }
  }
  else if (!v25)
  {
LABEL_32:
    v26 = 0;
    goto LABEL_33;
  }
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v126 = (*(_DWORD *)(*((_QWORD *)v225 + 3) + 16) & 0xFFFFFFFE) == 4) : (v126 = 0),
        !v126 ? (v127 = BYTE2(qword_1ECF4C32A) == 0) : (v127 = 0),
        !v127))
  {
    v258 = v226;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v225 + 1088, "Phase ", (uint64_t)&v258, " changed the IR.\n", "\n");
  }
  v26 = 1;
LABEL_33:
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v254);
  v34 = v251;
  if (v17 != v251 && v251)
  {
    v251 = 0;
    LODWORD(v252) = 0;
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  }
  v35 = v249;
  v249 = 0;
  if (v35)
  {
    v36 = *(_QWORD *)v35;
    if (*(_QWORD *)v35)
    {
      v37 = *(unsigned int *)(v36 - 4);
      if ((_DWORD)v37)
      {
        v38 = v36 + 24;
        do
        {
          if (*(_QWORD *)(v38 - 24) != -1)
          {
            v39 = *(_QWORD *)(v38 - 16);
            if (v38 != v39 && v39 != 0)
            {
              *(_QWORD *)(v38 - 16) = 0;
              *(_DWORD *)(v38 - 8) = 0;
              WTF::fastFree(v39, v27, v28, v29, v30, v31, v32, v33);
            }
          }
          v38 += 48;
          --v37;
        }
        while (v37);
      }
      WTF::fastFree(v36 - 16, v27, v28, v29, v30, v31, v32, v33);
    }
    WTF::fastFree((unint64_t)v35, v27, v28, v29, v30, v31, v32, v33);
  }
  JSC::DFG::InPlaceAbstractState::~InPlaceAbstractState((JSC::DFG::InPlaceAbstractState *)v229, v27, v28, v29, v30, v31, v32, v33);
  if (HIBYTE(qword_1ECF4C32A) && !v227)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v221, (uint64_t)v41, v42, v43, v44, v45, v46, v47);
  v48 = v228;
  v228 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 1)
      WTF::fastFree((unint64_t)v48, v41, v42, v43, v44, v45, v46, v47);
    else
      --*(_DWORD *)v48;
  }
  return v26;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::DFG::pcCodeBlockMap(void)::{lambda(void)#1} &&>>()
{
  JSC::DFG::pcCodeBlockMap(void)::pcCodeBlockMap = 0;
}

unsigned int *WTF::TrailingArray<WTF::EmbeddedFixedVector<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>,std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>::~TrailingArray(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;

  v10 = (unint64_t *)(a1 + 2);
  v9 = *a1;
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  return a1;
}

void JSC::RecordedStatuses::~RecordedStatuses(JSC::RecordedStatuses *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;

  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::SetPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 24, a2, a3, a4, a5, a6, a7, a8);
  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v9, v10, v11, v12, v13, v14, v15);
  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 16, v16, v17, v18, v19, v20, v21, v22);
  v30 = *((unsigned int *)this + 15);
  if ((_DWORD)v30)
  {
    v41 = 16 * v30;
    v42 = (unint64_t *)(*((_QWORD *)this + 6) + 8);
    do
    {
      std::unique_ptr<JSC::InByStatus>::reset[abi:sn180100](v42, 0, v24, v25, v26, v27, v28, v29);
      v43 = *(v42 - 1);
      if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v43 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
      v42 += 2;
      v41 -= 16;
    }
    while (v41);
  }
  v31 = *((_QWORD *)this + 6);
  if (v31)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v31, v23, v24, v25, v26, v27, v28, v29);
  }
  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 8, v23, v24, v25, v26, v27, v28, v29);
  v39 = *((unsigned int *)this + 7);
  if ((_DWORD)v39)
    WTF::VectorDestructor<true,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::GetByStatus>>>::destruct(*((uint64_t **)this + 2), (uint64_t *)(*((_QWORD *)this + 2) + 16 * v39), v33, v34, v35, v36, v37, v38);
  v40 = *((_QWORD *)this + 2);
  if (v40)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v40, v32, v33, v34, v35, v36, v37, v38);
  }
  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this, v32, v33, v34, v35, v36, v37, v38);
}

unsigned int *WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::SetPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  WTF *v18;

  v9 = a1[3];
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    v13 = (unint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
      {
        v15 = *(_QWORD *)v14;
        if (v14 + 16 != *(_QWORD *)v14 && v15 != 0)
        {
          *(_QWORD *)v14 = 0;
          *(_DWORD *)(v14 + 8) = 0;
          v18 = (WTF *)v14;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v14 = (unint64_t)v18;
        }
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      v17 = *(v13 - 1);
      if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v17 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v13 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v12 = *(uint64_t **)a1;
    v13 = *(_QWORD *)a1 + 16 * v9;
    do
    {
      v14 = v12[1];
      v12[1] = 0;
      if (v14)
      {
        v15 = *(unsigned int *)(v14 + 12);
        v16 = *(_QWORD *)v14;
        if ((_DWORD)v15)
        {
          v21 = (unint64_t *)v14;
          v22 = *(_QWORD **)v14;
          v19 = 16 * v15;
          do
          {
            if ((*v22 & 1) != 0)
              WTF::fastFree(*v22 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            v22 += 2;
            v19 -= 16;
          }
          while (v19);
          v14 = (unint64_t)v21;
          v16 = *v21;
        }
        if (v14 + 16 != v16 && v16 != 0)
        {
          *(_QWORD *)v14 = 0;
          *(_DWORD *)(v14 + 8) = 0;
          v20 = v14;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v14 = v20;
        }
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      v18 = *v12;
      if ((*v12 & 1) != 0 && (v18 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v18 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v12 += 2;
    }
    while (v12 != (uint64_t *)v13);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unsigned int *WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v9 = a1[3];
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    v13 = (unint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
      {
        v15 = *(_QWORD *)v14;
        if (v14 + 16 != *(_QWORD *)v14 && v15 != 0)
        {
          *(_QWORD *)v14 = 0;
          *(_DWORD *)(v14 + 8) = 0;
          v18 = v14;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v14 = v18;
        }
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      v17 = *(v13 - 1);
      if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v17 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v13 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unsigned int *WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;

  v9 = a1[3];
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    v13 = (unint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
      {
        v15 = *(unsigned int *)(v14 + 20);
        if ((_DWORD)v15)
          WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(*(_QWORD **)(v14 + 8), (_QWORD *)(*(_QWORD *)(v14 + 8) + (v15 << 6)), a3, a4, a5, a6, a7, a8);
        v16 = *(_QWORD *)(v14 + 8);
        if (v14 + 24 != v16 && v16 != 0)
        {
          *(_QWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v14 + 16) = 0;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      v18 = *(v13 - 1);
      if ((v18 & 1) != 0 && (v18 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v18 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v13 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::VectorDestructor<true,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::GetByStatus>>>::destruct(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  JSC::GetByVariant *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = v9[1];
      v9[1] = 0;
      if (v10)
      {
        v11 = *(unsigned int **)(v10 + 80);
        *(_QWORD *)(v10 + 80) = 0;
        if (v11)
        {
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            atomic_store(1u, v11);
            WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v14 = *(unsigned int *)(v10 + 12);
        if ((_DWORD)v14)
        {
          v18 = *(JSC::GetByVariant **)v10;
          v19 = v14 << 6;
          do
          {
            JSC::GetByVariant::~GetByVariant(v18, a2, a3, a4, a5, a6, a7, a8);
            v18 = (JSC::GetByVariant *)(v20 + 64);
            v19 -= 64;
          }
          while (v19);
        }
        v15 = *(_QWORD *)v10;
        if (v10 + 16 != *(_QWORD *)v10 && v15 != 0)
        {
          *(_QWORD *)v10 = 0;
          *(_DWORD *)(v10 + 8) = 0;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
      v17 = *v9;
      if ((*v9 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v17 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v9 += 2;
    }
    while (v9 != a2);
  }
}

unsigned int *WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;

  v9 = a1[3];
  if ((_DWORD)v9)
  {
    v10 = 16 * v9;
    v11 = (unint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
      {
        v13 = *(_QWORD *)v12;
        if (v12 + 16 != *(_QWORD *)v12 && v13 != 0)
        {
          *(_QWORD *)v12 = 0;
          *(_DWORD *)(v12 + 8) = 0;
          WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      v15 = *(v11 - 1);
      if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v11 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  v16 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unsigned int *WTF::TrailingArray<WTF::EmbeddedFixedVector<JSC::DFG::CatchEntrypointData>,JSC::DFG::CatchEntrypointData>::~TrailingArray(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v9 = *a1;
  if ((_DWORD)v9)
  {
    v10 = 24 * v9;
    v11 = (unint64_t *)(a1 + 4);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      v11 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*,false>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unsigned int v47;
  _QWORD *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  _QWORD *v77;
  _QWORD *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  BOOL v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  int64_t v116;
  int64_t v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unint64_t v132;
  int64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _DWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unsigned int *v172;
  unsigned int v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;

  v179 = a4;
  v8 = a3;
  v9 = a2;
LABEL_2:
  v176 = (uint64_t)(v9 - 3);
  v11 = a1;
  while (2)
  {
    a1 = v11;
    v12 = (uint64_t)v9 - v11;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v9 - v11) >> 3);
    switch(v13)
    {
      case 0:
      case 1:
        return;
      case 2:
        v93 = *(_DWORD *)(v11 + 16);
        if (*((_DWORD *)v9 - 2) < v93)
        {
          v94 = *(_QWORD *)v11;
          v95 = *(_QWORD *)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)v11 = *(v9 - 3);
          v96 = *(v9 - 2);
          *(v9 - 2) = 0;
          v97 = *(_QWORD *)(v11 + 8);
          *(_QWORD *)(v11 + 8) = v96;
          if (v97)
            WTF::fastFree(v97, a2, a3, a4, a5, a6, a7, a8);
          *(_DWORD *)(v11 + 16) = *((_DWORD *)v9 - 2);
          v98 = *(v9 - 2);
          *(v9 - 3) = v94;
          *(v9 - 2) = v95;
          if (v98)
            WTF::fastFree(v98, a2, a3, a4, a5, a6, a7, a8);
          *((_DWORD *)v9 - 2) = v93;
        }
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>((uint64_t *)v11, (uint64_t *)(v11 + 24), v176, a4, a5, a6, a7, a8);
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>(v11, v11 + 24, v11 + 48, v176, a5, a6, a7, a8);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*,0>(v11, v11 + 24, v11 + 48, v11 + 72, v176, a6, a7, a8);
        return;
      default:
        if (v12 <= 575)
        {
          v99 = (_QWORD *)(v11 + 24);
          v101 = (_QWORD *)v11 == v9 || v99 == v9;
          if ((v179 & 1) != 0)
          {
            if (!v101)
            {
              v102 = 0;
              v103 = v11;
              do
              {
                v104 = v99;
                v105 = *(_DWORD *)(v103 + 40);
                if (v105 < *(_DWORD *)(v103 + 16))
                {
                  v106 = *v99;
                  v107 = *(_QWORD *)(v103 + 32);
                  v108 = v102;
                  *(_QWORD *)(v103 + 32) = 0;
                  while (1)
                  {
                    v109 = a1 + v108;
                    v110 = *(_QWORD *)(a1 + v108);
                    v111 = *(_QWORD *)(a1 + v108 + 8);
                    *(_QWORD *)(v109 + 8) = 0;
                    v112 = *(_QWORD *)(a1 + v108 + 32);
                    *(_QWORD *)(v109 + 24) = v110;
                    *(_QWORD *)(v109 + 32) = v111;
                    if (v112)
                      WTF::fastFree(v112, a2, a3, a4, a5, a6, a7, a8);
                    *(_DWORD *)(v109 + 40) = *(_DWORD *)(v109 + 16);
                    if (!v108)
                      break;
                    v113 = *(_DWORD *)(a1 + v108 - 8);
                    v108 -= 24;
                    if (v105 >= v113)
                    {
                      v114 = a1 + v108 + 24;
                      goto LABEL_111;
                    }
                  }
                  v114 = a1;
LABEL_111:
                  v115 = *(_QWORD *)(v114 + 8);
                  *(_QWORD *)v114 = v106;
                  *(_QWORD *)(v114 + 8) = v107;
                  if (v115)
                    WTF::fastFree(v115, a2, a3, a4, a5, a6, a7, a8);
                  *(_DWORD *)(v114 + 16) = v105;
                }
                v99 = v104 + 3;
                v102 += 24;
                v103 = (unint64_t)v104;
              }
              while (v104 + 3 != v9);
            }
          }
          else if (!v101)
          {
            v161 = (_DWORD *)(v11 + 40);
            v162 = -2;
            v163 = 1;
            v164 = v11;
            while (1)
            {
              v165 = *(_DWORD *)(v164 + 40);
              if (v165 < *(_DWORD *)(v164 + 16))
                break;
LABEL_175:
              v164 = a1 + 24 * v163++;
              v99 = (_QWORD *)(v164 + 24);
              v161 += 6;
              --v162;
              if ((_QWORD *)(v164 + 24) == v9)
                return;
            }
            v185 = *v99;
            v166 = *(_QWORD *)(v164 + 32);
            v167 = v162;
            v168 = v161;
            *(_QWORD *)(v164 + 32) = 0;
            while (1)
            {
              v169 = *((_QWORD *)v168 - 5);
              v170 = *((_QWORD *)v168 - 4);
              *((_QWORD *)v168 - 4) = 0;
              v171 = *((_QWORD *)v168 - 1);
              *((_QWORD *)v168 - 2) = v169;
              *((_QWORD *)v168 - 1) = v170;
              if (v171)
                WTF::fastFree(v171, a2, a3, a4, a5, a6, a7, a8);
              v172 = v168 - 6;
              *v168 = *(v168 - 6);
              if (__CFADD__(v167++, 1))
                break;
              v174 = *(v168 - 12);
              v168 -= 6;
              if (v165 >= v174)
              {
                v175 = *((_QWORD *)v172 - 1);
                *((_QWORD *)v172 - 2) = v185;
                *((_QWORD *)v172 - 1) = v166;
                if (v175)
                  WTF::fastFree(v175, a2, a3, a4, a5, a6, a7, a8);
                *v172 = v165;
                goto LABEL_175;
              }
            }
LABEL_177:
            __break(1u);
          }
          return;
        }
        if (!v8)
        {
          if ((_QWORD *)v11 != v9)
          {
            v116 = (unint64_t)(v13 - 2) >> 1;
            v117 = v116;
            do
            {
              v118 = v117;
              if (v116 >= v117)
              {
                v119 = (2 * v117) | 1;
                v120 = a1 + 24 * v119;
                if (2 * v118 + 2 < v13)
                {
                  v121 = *(_DWORD *)(v120 + 16);
                  v122 = *(_DWORD *)(v120 + 40);
                  v120 += 24 * (v121 < v122);
                  if (v121 < v122)
                    v119 = 2 * v118 + 2;
                }
                v123 = a1 + 24 * v118;
                v124 = *(_DWORD *)(v123 + 16);
                if (*(_DWORD *)(v120 + 16) >= v124)
                {
                  v125 = a1 + 24 * v118;
                  v180 = *(_QWORD *)(v125 + 8);
                  v183 = *(_QWORD *)v123;
                  *(_QWORD *)(v125 + 8) = 0;
                  do
                  {
                    v126 = v120;
                    *(_QWORD *)v123 = *(_QWORD *)v120;
                    v127 = *(_QWORD *)(v120 + 8);
                    *(_QWORD *)(v126 + 8) = 0;
                    v128 = *(_QWORD *)(v123 + 8);
                    *(_QWORD *)(v123 + 8) = v127;
                    if (v128)
                      WTF::fastFree(v128, a2, a3, a4, a5, a6, a7, a8);
                    *(_DWORD *)(v123 + 16) = *(_DWORD *)(v126 + 16);
                    if (v116 < v119)
                      break;
                    v129 = (2 * v119) | 1;
                    v120 = a1 + 24 * v129;
                    if (2 * v119 + 2 < v13)
                    {
                      v130 = *(_DWORD *)(v120 + 16);
                      v131 = *(_DWORD *)(v120 + 40);
                      v120 += 24 * (v130 < v131);
                      if (v130 < v131)
                        v129 = 2 * v119 + 2;
                    }
                    v123 = v126;
                    v119 = v129;
                  }
                  while (*(_DWORD *)(v120 + 16) >= v124);
                  v132 = *(_QWORD *)(v126 + 8);
                  *(_QWORD *)v126 = v183;
                  *(_QWORD *)(v126 + 8) = v180;
                  if (v132)
                    WTF::fastFree(v132, a2, a3, a4, a5, a6, a7, a8);
                  *(_DWORD *)(v126 + 16) = v124;
                }
              }
              v117 = v118 - 1;
            }
            while (v118);
            v133 = v12 / 0x18uLL;
            do
            {
              v134 = 0;
              v136 = *(_QWORD *)a1;
              v135 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;
              v184 = *(_DWORD *)(a1 + 16);
              v137 = a1;
              do
              {
                v138 = v137 + 24 * v134 + 24;
                v139 = 2 * v134;
                v134 = (2 * v134) | 1;
                v140 = v139 + 2;
                if (v139 + 2 < v133)
                {
                  v141 = *(_DWORD *)(v138 + 16);
                  v142 = *(_DWORD *)(v138 + 40);
                  v138 += 24 * (v141 < v142);
                  if (v141 < v142)
                    v134 = v140;
                }
                *(_QWORD *)v137 = *(_QWORD *)v138;
                v143 = *(_QWORD *)(v138 + 8);
                *(_QWORD *)(v138 + 8) = 0;
                v144 = *(_QWORD *)(v137 + 8);
                *(_QWORD *)(v137 + 8) = v143;
                if (v144)
                  WTF::fastFree(v144, a2, a3, a4, a5, a6, a7, a8);
                *(_DWORD *)(v137 + 16) = *(_DWORD *)(v138 + 16);
                v137 = v138;
              }
              while (v134 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
              v145 = v9 - 3;
              if ((_QWORD *)v138 == v9 - 3)
              {
                v159 = *(_QWORD *)(v138 + 8);
                *(_QWORD *)v138 = v136;
                *(_QWORD *)(v138 + 8) = v135;
                if (v159)
                  WTF::fastFree(v159, a2, a3, a4, a5, a6, a7, a8);
                *(_DWORD *)(v138 + 16) = v184;
              }
              else
              {
                *(_QWORD *)v138 = *(v9 - 3);
                v146 = *(v9 - 2);
                *(v9 - 2) = 0;
                v147 = *(_QWORD *)(v138 + 8);
                *(_QWORD *)(v138 + 8) = v146;
                if (v147)
                  WTF::fastFree(v147, a2, a3, a4, a5, a6, a7, a8);
                *(_DWORD *)(v138 + 16) = *((_DWORD *)v9 - 2);
                v148 = *(v9 - 2);
                *(v9 - 3) = v136;
                *(v9 - 2) = v135;
                if (v148)
                  WTF::fastFree(v148, a2, a3, a4, a5, a6, a7, a8);
                *((_DWORD *)v9 - 2) = v184;
                v149 = v138 + 24 - a1;
                if (v149 >= 25)
                {
                  v150 = (v149 / 0x18uLL - 2) >> 1;
                  v151 = a1 + 24 * v150;
                  v152 = *(_DWORD *)(v138 + 16);
                  if (*(_DWORD *)(v151 + 16) < v152)
                  {
                    v153 = *(_QWORD *)v138;
                    v154 = *(_QWORD *)(v138 + 8);
                    *(_QWORD *)(v138 + 8) = 0;
                    do
                    {
                      v155 = v151;
                      *(_QWORD *)v138 = *(_QWORD *)v151;
                      v156 = *(_QWORD *)(v151 + 8);
                      *(_QWORD *)(v155 + 8) = 0;
                      v157 = *(_QWORD *)(v138 + 8);
                      *(_QWORD *)(v138 + 8) = v156;
                      if (v157)
                        WTF::fastFree(v157, a2, a3, a4, a5, a6, a7, a8);
                      *(_DWORD *)(v138 + 16) = *(_DWORD *)(v155 + 16);
                      if (!v150)
                        break;
                      v150 = (v150 - 1) >> 1;
                      v151 = a1 + 24 * v150;
                      v138 = v155;
                    }
                    while (*(_DWORD *)(v151 + 16) < v152);
                    v158 = *(_QWORD *)(v155 + 8);
                    *(_QWORD *)v155 = v153;
                    *(_QWORD *)(v155 + 8) = v154;
                    if (v158)
                      WTF::fastFree(v158, a2, a3, a4, a5, a6, a7, a8);
                    *(_DWORD *)(v155 + 16) = v152;
                  }
                }
              }
              v9 = v145;
            }
            while (v133-- > 2);
          }
          return;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = (uint64_t *)(v11 + 24 * v14);
        if ((unint64_t)v12 < 0xC01)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>((uint64_t *)(a1 + 24 * v14), (uint64_t *)a1, v176, a4, a5, a6, a7, a8);
        }
        else
        {
          v181 = v8;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>((uint64_t *)a1, (uint64_t *)(a1 + 24 * v14), v176, a4, a5, a6, a7, a8);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 24 * v14 - 24), (uint64_t)(v9 - 6), v16, v17, v18, v19, v20);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>((uint64_t *)(a1 + 48), (uint64_t *)(a1 + 24 + 24 * v14), (uint64_t)(v9 - 9), v21, v22, v23, v24, v25);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>((uint64_t *)(a1 + 24 * v14 - 24), (uint64_t *)(a1 + 24 * v14), a1 + 24 + 24 * v14, v26, v27, v28, v29, v30);
          v31 = *(_QWORD *)a1;
          v32 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          v33 = *(_DWORD *)(a1 + 16);
          *(_QWORD *)a1 = *v15;
          v34 = (unint64_t *)(a1 + 8 + 24 * v14);
          v35 = *v34;
          *v34 = 0;
          v36 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v35;
          if (v36)
            WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
          v37 = (_DWORD *)(a1 + 16 + 24 * v14);
          *(_DWORD *)(a1 + 16) = *v37;
          *v15 = v31;
          v38 = *v34;
          *v34 = v32;
          if (v38)
            WTF::fastFree(v38, a2, a3, a4, a5, a6, a7, a8);
          *v37 = v33;
          v8 = v181;
        }
        v182 = v8 - 1;
        if ((v179 & 1) == 0)
        {
          v39 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(a1 - 8) < v39)
            goto LABEL_16;
          v72 = *(_QWORD *)a1;
          v71 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          if (v39 >= *((_DWORD *)v9 - 2))
          {
            v75 = a1 + 24;
            do
            {
              v11 = v75;
              if (v75 >= (unint64_t)v9)
                break;
              v76 = *(_DWORD *)(v75 + 16);
              v75 += 24;
            }
            while (v39 >= v76);
          }
          else
          {
            v73 = a1 + 24;
            do
            {
              if ((_QWORD *)v73 == v9)
                goto LABEL_177;
              v74 = *(_DWORD *)(v73 + 16);
              v73 += 24;
            }
            while (v39 >= v74);
            v11 = v73 - 24;
          }
          v77 = v9;
          if (v11 < (unint64_t)v9)
          {
            v78 = v9;
            while (v78 != (_QWORD *)a1)
            {
              v77 = v78 - 3;
              v79 = *((_DWORD *)v78 - 2);
              v78 -= 3;
              if (v39 >= v79)
                goto LABEL_63;
            }
            goto LABEL_177;
          }
LABEL_63:
          if (v11 < (unint64_t)v77)
          {
            do
            {
              v80 = *(_QWORD *)v11;
              v81 = *(_QWORD *)(v11 + 8);
              *(_QWORD *)(v11 + 8) = 0;
              v82 = *(_DWORD *)(v11 + 16);
              *(_QWORD *)v11 = *v77;
              v83 = v77[1];
              v77[1] = 0;
              v84 = *(_QWORD *)(v11 + 8);
              *(_QWORD *)(v11 + 8) = v83;
              if (v84)
                WTF::fastFree(v84, a2, a3, a4, a5, a6, a7, a8);
              *(_DWORD *)(v11 + 16) = *((_DWORD *)v77 + 4);
              v85 = v77[1];
              *v77 = v80;
              v77[1] = v81;
              if (v85)
                WTF::fastFree(v85, a2, a3, a4, a5, a6, a7, a8);
              *((_DWORD *)v77 + 4) = v82;
              v86 = v11 + 24;
              do
              {
                if ((_QWORD *)v86 == v9)
                  goto LABEL_177;
                v87 = *(_DWORD *)(v86 + 16);
                v86 += 24;
              }
              while (v39 >= v87);
              v11 = v86 - 24;
              do
              {
                if (v77 == (_QWORD *)a1)
                  goto LABEL_177;
                v88 = (unint64_t)(v77 - 3);
                v89 = *((_DWORD *)v77 - 2);
                v77 -= 3;
              }
              while (v39 < v89);
              v77 = (_QWORD *)v88;
            }
            while (v11 < v88);
          }
          if (v11 - 24 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v11 - 24);
            v90 = *(_QWORD *)(v11 - 16);
            *(_QWORD *)(v11 - 16) = 0;
            v91 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v90;
            if (v91)
              WTF::fastFree(v91, a2, a3, a4, a5, a6, a7, a8);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v11 - 8);
          }
          v92 = *(_QWORD *)(v11 - 16);
          *(_QWORD *)(v11 - 24) = v72;
          *(_QWORD *)(v11 - 16) = v71;
          if (v92)
            WTF::fastFree(v92, a2, a3, a4, a5, a6, a7, a8);
          v179 = 0;
          *(_DWORD *)(v11 - 8) = v39;
          v8 = v182;
          continue;
        }
        v39 = *(_DWORD *)(a1 + 16);
LABEL_16:
        v40 = 0;
        v41 = *(_QWORD *)a1;
        v42 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        do
        {
          if ((_QWORD *)(a1 + v40 + 24) == v9)
            goto LABEL_177;
          v43 = *(_DWORD *)(a1 + v40 + 40);
          v40 += 24;
        }
        while (v43 < v39);
        v44 = a1 + v40;
        v45 = v9;
        if (v40 != 24)
        {
          while (v45 != (_QWORD *)a1)
          {
            v46 = v45 - 3;
            v47 = *((_DWORD *)v45 - 2);
            v45 -= 3;
            if (v47 < v39)
              goto LABEL_28;
          }
          goto LABEL_177;
        }
        v48 = v9;
        while (v44 < (unint64_t)v48)
        {
          v46 = v48 - 3;
          v49 = *((_DWORD *)v48 - 2);
          v48 -= 3;
          if (v49 < v39)
            goto LABEL_28;
        }
        v46 = v48;
LABEL_28:
        v177 = v42;
        v178 = v41;
        v11 = v44;
        if (v44 < (unint64_t)v46)
        {
          v50 = (unint64_t)v46;
          do
          {
            v51 = *(_QWORD *)v11;
            v52 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)(v11 + 8) = 0;
            v53 = *(_DWORD *)(v11 + 16);
            *(_QWORD *)v11 = *(_QWORD *)v50;
            v54 = *(_QWORD *)(v50 + 8);
            *(_QWORD *)(v50 + 8) = 0;
            v55 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)(v11 + 8) = v54;
            if (v55)
              WTF::fastFree(v55, a2, a3, a4, a5, a6, a7, a8);
            *(_DWORD *)(v11 + 16) = *(_DWORD *)(v50 + 16);
            v56 = *(_QWORD *)(v50 + 8);
            *(_QWORD *)v50 = v51;
            *(_QWORD *)(v50 + 8) = v52;
            if (v56)
              WTF::fastFree(v56, a2, a3, a4, a5, a6, a7, a8);
            *(_DWORD *)(v50 + 16) = v53;
            v57 = v11 + 24;
            do
            {
              if ((_QWORD *)v57 == v9)
                goto LABEL_177;
              v58 = *(_DWORD *)(v57 + 16);
              v57 += 24;
            }
            while (v58 < v39);
            v11 = v57 - 24;
            do
            {
              if (v50 == a1)
                goto LABEL_177;
              v59 = v50 - 24;
              v60 = *(_DWORD *)(v50 - 8);
              v50 -= 24;
            }
            while (v60 >= v39);
            v50 = v59;
          }
          while (v11 < v59);
        }
        if (v11 - 24 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v11 - 24);
          v61 = *(_QWORD *)(v11 - 16);
          *(_QWORD *)(v11 - 16) = 0;
          v62 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v61;
          if (v62)
            WTF::fastFree(v62, a2, a3, a4, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v11 - 8);
        }
        v63 = *(_QWORD *)(v11 - 16);
        *(_QWORD *)(v11 - 24) = v178;
        *(_QWORD *)(v11 - 16) = v177;
        if (v63)
          WTF::fastFree(v63, a2, a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(v11 - 8) = v39;
        v8 = v182;
        if (v44 < (unint64_t)v46)
        {
LABEL_50:
          std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*,false>(a1, v11 - 24, v182, v179 & 1);
          v179 = 0;
          continue;
        }
        v64 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>(a1, (_QWORD *)(v11 - 24), a3, a4, a5, a6, a7, a8);
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>(v11, v9, v65, v66, v67, v68, v69, v70))
        {
          if (v64)
            continue;
          goto LABEL_50;
        }
        v9 = (_QWORD *)(v11 - 24);
        if (!v64)
          goto LABEL_2;
        return;
    }
  }
}

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>(a1, a2, a3, a4, a5, a6, a7, a8);
  v20 = *(_DWORD *)(a4 + 16);
  if (*(_DWORD *)(a5 + 16) < v20)
  {
    v21 = *(_QWORD *)a4;
    v22 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    v23 = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = 0;
    v24 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v23;
    if (v24)
      WTF::fastFree(v24, v13, v14, v15, v16, v17, v18, v19);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    v25 = *(_QWORD *)(a5 + 8);
    *(_QWORD *)a5 = v21;
    *(_QWORD *)(a5 + 8) = v22;
    if (v25)
      WTF::fastFree(v25, v13, v14, v15, v16, v17, v18, v19);
    *(_DWORD *)(a5 + 16) = v20;
    v26 = *(_DWORD *)(a3 + 16);
    if (*(_DWORD *)(a4 + 16) < v26)
    {
      v27 = *(_QWORD *)a3;
      v28 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      v29 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = 0;
      v30 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v29;
      if (v30)
        WTF::fastFree(v30, v13, v14, v15, v16, v17, v18, v19);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      v31 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)a4 = v27;
      *(_QWORD *)(a4 + 8) = v28;
      if (v31)
        WTF::fastFree(v31, v13, v14, v15, v16, v17, v18, v19);
      *(_DWORD *)(a4 + 16) = v26;
      v32 = *(_DWORD *)(a2 + 16);
      if (*(_DWORD *)(a3 + 16) < v32)
      {
        v33 = *(_QWORD *)a2;
        v34 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v35 = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = 0;
        v36 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v35;
        if (v36)
          WTF::fastFree(v36, v13, v14, v15, v16, v17, v18, v19);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        v37 = *(_QWORD *)(a3 + 8);
        *(_QWORD *)a3 = v33;
        *(_QWORD *)(a3 + 8) = v34;
        if (v37)
          WTF::fastFree(v37, v13, v14, v15, v16, v17, v18, v19);
        *(_DWORD *)(a3 + 16) = v32;
        v38 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a2 + 16) < v38)
        {
          v39 = *(_QWORD *)a1;
          v40 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v41 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = 0;
          v42 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v41;
          if (v42)
            WTF::fastFree(v42, v13, v14, v15, v16, v17, v18, v19);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          v43 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a2 = v39;
          *(_QWORD *)(a2 + 8) = v40;
          if (v43)
            WTF::fastFree(v43, v13, v14, v15, v16, v17, v18, v19);
          *(_DWORD *)(a2 + 16) = v38;
        }
      }
    }
  }
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v11 = *((_DWORD *)a2 + 4);
  v12 = *((_DWORD *)a1 + 4);
  v13 = *(_DWORD *)(a3 + 16);
  if (v11 >= v12)
  {
    if (v13 < v11)
    {
      v19 = *a2;
      v20 = a2[1];
      a2[1] = 0;
      *a2 = *(_QWORD *)a3;
      v21 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      v22 = a2[1];
      a2[1] = v21;
      if (v22)
        WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
      *((_DWORD *)a2 + 4) = *(_DWORD *)(a3 + 16);
      v23 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)a3 = v19;
      *(_QWORD *)(a3 + 8) = v20;
      if (v23)
        WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a3 + 16) = v11;
      v24 = *((_DWORD *)a1 + 4);
      if (*((_DWORD *)a2 + 4) < v24)
      {
        v25 = *a1;
        v26 = a1[1];
        a1[1] = 0;
        *a1 = *a2;
        v27 = a2[1];
        a2[1] = 0;
        v28 = a1[1];
        a1[1] = v27;
        if (v28)
          WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        v29 = a2[1];
        *a2 = v25;
        a2[1] = v26;
        if (v29)
          WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
        *((_DWORD *)a2 + 4) = v24;
      }
    }
  }
  else
  {
    v14 = *a1;
    v15 = a1[1];
    a1[1] = 0;
    if (v13 < v11)
    {
      *a1 = *(_QWORD *)a3;
      v16 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      v17 = a1[1];
      a1[1] = v16;
      if (v17)
        WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
      *((_DWORD *)a1 + 4) = *(_DWORD *)(a3 + 16);
      v18 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)a3 = v14;
      *(_QWORD *)(a3 + 8) = v15;
      if (!v18)
        goto LABEL_7;
      goto LABEL_6;
    }
    *a1 = *a2;
    v30 = a2[1];
    a2[1] = 0;
    v31 = a1[1];
    a1[1] = v30;
    if (v31)
      WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    v32 = a2[1];
    *a2 = v14;
    a2[1] = v15;
    if (v32)
      WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
    *((_DWORD *)a2 + 4) = v12;
    if (*(_DWORD *)(a3 + 16) < v12)
    {
      v33 = *a2;
      v34 = a2[1];
      a2[1] = 0;
      *a2 = *(_QWORD *)a3;
      v35 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      v36 = a2[1];
      a2[1] = v35;
      if (v36)
        WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
      *((_DWORD *)a2 + 4) = *(_DWORD *)(a3 + 16);
      v18 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)a3 = v33;
      *(_QWORD *)(a3 + 8) = v34;
      if (!v18)
        goto LABEL_7;
LABEL_6:
      WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
LABEL_7:
      *(_DWORD *)(a3 + 16) = v12;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  _BOOL8 result;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;

  v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v10)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v12 = *(_DWORD *)(a1 + 16);
      if (*((_DWORD *)a2 - 2) < v12)
      {
        v13 = *(_QWORD *)a1;
        v14 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)a1 = *(a2 - 3);
        v15 = *(a2 - 2);
        *(a2 - 2) = 0;
        v16 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v15;
        if (v16)
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 - 2);
        v17 = *(a2 - 2);
        *(a2 - 3) = v13;
        *(a2 - 2) = v14;
        if (v17)
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
        *((_DWORD *)a2 - 2) = v12;
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t)(a2 - 3), a4, a5, a6, a7, a8);
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>(a1, a1 + 24, a1 + 48, (uint64_t)(a2 - 3), a5, a6, a7, a8);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*,0>(a1, a1 + 24, a1 + 48, a1 + 72, (uint64_t)(a2 - 3), a6, a7, a8);
      return 1;
    default:
      v18 = a1 + 48;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>((uint64_t *)a1, (uint64_t *)(a1 + 24), a1 + 48, a4, a5, a6, a7, a8);
      v26 = (_DWORD *)(a1 + 72);
      if ((_QWORD *)(a1 + 72) == a2)
        return 1;
      v27 = 0;
      v28 = 0;
      break;
  }
  while (1)
  {
    v29 = v26[4];
    if (v29 < *(_DWORD *)(v18 + 16))
    {
      v30 = *(_QWORD *)v26;
      v31 = *((_QWORD *)v26 + 1);
      v32 = v27;
      *((_QWORD *)v26 + 1) = 0;
      while (1)
      {
        v33 = a1 + v32;
        v34 = *(_QWORD *)(a1 + v32 + 48);
        v35 = *(_QWORD *)(a1 + v32 + 56);
        *(_QWORD *)(v33 + 56) = 0;
        v36 = *(_QWORD *)(a1 + v32 + 80);
        *(_QWORD *)(v33 + 72) = v34;
        *(_QWORD *)(v33 + 80) = v35;
        if (v36)
          WTF::fastFree(v36, v19, v20, v21, v22, v23, v24, v25);
        *(_DWORD *)(v33 + 88) = *(_DWORD *)(v33 + 64);
        if (v32 == -48)
          break;
        v37 = *(_DWORD *)(a1 + v32 + 40);
        v32 -= 24;
        if (v29 >= v37)
        {
          v38 = a1 + v32 + 72;
          goto LABEL_18;
        }
      }
      v38 = a1;
LABEL_18:
      v39 = *(_QWORD *)(v38 + 8);
      *(_QWORD *)v38 = v30;
      *(_QWORD *)(v38 + 8) = v31;
      if (v39)
        WTF::fastFree(v39, v19, v20, v21, v22, v23, v24, v25);
      *(_DWORD *)(v38 + 16) = v29;
      if (++v28 == 8)
        return v26 + 6 == (_DWORD *)a2;
    }
    v18 = (uint64_t)v26;
    v27 += 24;
    v26 += 6;
    if (v26 == (_DWORD *)a2)
      return 1;
  }
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::CommonData::finalizeCatchEntrypoints(WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,JSC::DFG::CatchEntrypointData*>((uint64_t *)a1, (uint64_t *)a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_DWORD *)(a3 + 16);
  if (*(_DWORD *)(a4 + 16) < v19)
  {
    v20 = *(_QWORD *)a3;
    v21 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    v22 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    v23 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v22;
    if (v23)
      WTF::fastFree(v23, v12, v13, v14, v15, v16, v17, v18);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    v24 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)a4 = v20;
    *(_QWORD *)(a4 + 8) = v21;
    if (v24)
      WTF::fastFree(v24, v12, v13, v14, v15, v16, v17, v18);
    *(_DWORD *)(a4 + 16) = v19;
    v25 = *(_DWORD *)(a2 + 16);
    if (*(_DWORD *)(a3 + 16) < v25)
    {
      v26 = *(_QWORD *)a2;
      v27 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v28 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      v29 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v28;
      if (v29)
        WTF::fastFree(v29, v12, v13, v14, v15, v16, v17, v18);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      v30 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)a3 = v26;
      *(_QWORD *)(a3 + 8) = v27;
      if (v30)
        WTF::fastFree(v30, v12, v13, v14, v15, v16, v17, v18);
      *(_DWORD *)(a3 + 16) = v25;
      v31 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a2 + 16) < v31)
      {
        v32 = *(_QWORD *)a1;
        v33 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v34 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v35 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v34;
        if (v35)
          WTF::fastFree(v35, v12, v13, v14, v15, v16, v17, v18);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        v36 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a2 = v32;
        *(_QWORD *)(a2 + 8) = v33;
        if (v36)
          WTF::fastFree(v36, v12, v13, v14, v15, v16, v17, v18);
        *(_DWORD *)(a2 + 16) = v31;
      }
    }
  }
}

_OWORD *WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t impl_casual_case;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *result;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;

  v10 = *a1;
  if (!*a1)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_3;
  }
  v11 = *(_DWORD *)(v10 - 4);
  v12 = *(_DWORD *)(v10 - 12);
  if (!v11)
  {
LABEL_3:
    v13 = 8;
    goto LABEL_4;
  }
  v13 = v11 << (6 * v12 >= (2 * v11));
LABEL_4:
  v14 = 16 * v13;
  v15 = v14 + 16;
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v16)
  {
    v17 = (unint64_t)(v14 + 31) >> 4;
    if (v13 <= 0x19)
    {
      v18 = 23 * v17 + 7;
    }
    else
    {
      if (v13 > 0x270)
        goto LABEL_8;
      v18 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v17 + 626);
      if (*(_DWORD *)(v16 + 8052) <= v18)
        goto LABEL_8;
    }
    v21 = v16 + 8 * v18;
    v22 = v21 + 8064;
    *(_BYTE *)(v21 + 8064) = 1;
    v23 = *(unsigned int *)(v21 + 8080);
    if ((_DWORD)v23)
    {
      *(_DWORD *)(v22 + 16) = v23 - *(_DWORD *)(v22 + 20);
      impl_casual_case = *(_QWORD *)(v22 + 8) - v23;
    }
    else
    {
      v39 = *(_QWORD *)(v22 + 40);
      v40 = *(_QWORD *)(v22 + 24);
      if (!v39)
      {
        if (*(_BYTE *)(v22 + 5) == 6)
        {
          v42 = *(unsigned int *)(v22 + 32);
          v43 = *(_DWORD *)(v22 + 36);
          if (v42 < v43)
          {
            *(_QWORD *)(v22 + 8 * v42 + 56) = 0;
            v44 = (unint64_t *)(8 * v18 + 8 * v42 + v16 + 8128);
            v45 = v43 - 1 - v42;
            while (v45)
            {
              v40 += 1024;
              v47 = *v44++;
              v46 = v47;
              LODWORD(v42) = v42 + 1;
              --v45;
              if (v47)
              {
                v39 = __rbit64(v46);
                *(_DWORD *)(v22 + 32) = v42;
                *(_QWORD *)(v22 + 24) = v40;
                goto LABEL_37;
              }
            }
            *(_DWORD *)(v22 + 32) = v43;
          }
        }
        *(_BYTE *)v22 = 0;
        goto LABEL_8;
      }
LABEL_37:
      v41 = __clz(v39);
      *(_QWORD *)(v22 + 40) = v39 & ~(0x8000000000000000 >> v41);
      impl_casual_case = v40 + 16 * v41;
    }
    *(_BYTE *)v22 = 0;
    v19 = 1;
    goto LABEL_13;
  }
LABEL_8:
  impl_casual_case = (unint64_t)bmalloc_allocate_impl_casual_case(v15, 1, a3, a4, a5, a6, a7, a8);
LABEL_13:
  if ((v19 & 1) != 0 && (v19 & 0xFFFFFFFF00000000) != 0x100000000)
  {
    if (v13 < 0xFFFFF)
      goto LABEL_22;
    v24 = pas_page_malloc_cached_alignment;
    if (!pas_page_malloc_cached_alignment)
    {
      v24 = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = v24;
    }
    if (((v24 - 1) & (v15 | impl_casual_case)) != 0)
    {
LABEL_22:
      bzero((void *)impl_casual_case, v15);
    }
    else
    {
      if (!v24)
        pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
      mmap((void *)impl_casual_case, v15, 3, 4114, 889192448, 0);
    }
  }
  *a1 = impl_casual_case + 16;
  *(_DWORD *)(impl_casual_case + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      v27 = (_QWORD *)(v10 + 16 * v25);
      if (*v27 && (*v27 & 0x7FFFLL) != 0x4000)
      {
        v28 = *a1;
        if (*a1)
          v29 = *(_DWORD *)(v28 - 8);
        else
          v29 = 0;
        v30 = (*v27 + ~(*v27 << 32)) ^ ((*v27 + ~(*v27 << 32)) >> 22);
        v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((unint64_t)(v30 + ~(v30 << 13)) >> 8));
        v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
        v33 = v29 & ((v32 >> 31) ^ v32);
        v34 = 1;
        do
        {
          v35 = v33;
          v36 = *(_QWORD *)(v28 + 16 * v33);
          v33 = (v33 + v34++) & v29;
        }
        while (v36);
        v37 = (_OWORD *)(v28 + 16 * v35);
        *v37 = *(_OWORD *)v27;
        if (v27 == a2)
          v26 = v37;
      }
      ++v25;
    }
    while (v25 != v11);
    goto LABEL_34;
  }
  v26 = 0;
  result = 0;
  if (v10)
  {
LABEL_34:
    WTF::fastFree(v10 - 16, (void *)v19, a3, a4, a5, a6, a7, a8);
    return v26;
  }
  return result;
}

void WTF::sortedListDump<WTF::HashSet<JSC::DFG::AbstractHeap,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTableTraits>,std::less<void>>(_QWORD *a1@<X0>, char *a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  WTF *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  size_t v24;
  WTF *v25;
  WTF::PrintStream *v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  WTF *v43;
  uint64_t *v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  void (**v50)(WTF::StringPrintStream *__hidden);
  _BYTE *v51;
  __int128 v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  v46 = 0;
  v7 = (_QWORD *)*a1;
  if (*a1)
  {
    v8 = *((unsigned int *)v7 - 1);
    v9 = &v7[v8];
    if (*((_DWORD *)v7 - 3))
    {
      v10 = (_QWORD *)*a1;
      if ((_DWORD)v8)
      {
        v11 = 8 * v8;
        v10 = (_QWORD *)*a1;
        while (!*v10 || (*v10 & 0x7FFFLL) == 0x4000)
        {
          ++v10;
          v11 -= 8;
          if (!v11)
          {
            v10 = v9;
            break;
          }
        }
      }
      if (v7)
        goto LABEL_10;
      goto LABEL_14;
    }
    v10 = &v7[v8];
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = &v7[v8];
  if (v7)
  {
LABEL_10:
    v12 = &v7[*((unsigned int *)v7 - 1)];
    goto LABEL_15;
  }
LABEL_14:
  v12 = 0;
LABEL_15:
  if (v12 == v10)
  {
    v18 = 0;
    v13 = 0;
  }
  else
  {
    v13 = 0;
    LODWORD(v14) = 0;
    do
    {
      if ((_DWORD)v14 == (_DWORD)v46)
      {
        v15 = (_QWORD *)WTF::Vector<JSC::DFG::AbstractHeap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v45, v14 + 1, (unint64_t)v10);
        LODWORD(v14) = HIDWORD(v46);
        v13 = v45;
        v16 = (_QWORD *)((char *)v45 + 8 * HIDWORD(v46));
      }
      else
      {
        v16 = (_QWORD *)((char *)v13 + 8 * v14);
        v15 = v10;
      }
      *v16 = *v15;
      v14 = (v14 + 1);
      HIDWORD(v46) = v14;
      v17 = v10 + 1;
      v10 = v9;
      if (v17 != v9)
      {
        v10 = v17;
        while (!*v10 || (*v10 & 0x7FFFLL) == 0x4000)
        {
          if (++v10 == v9)
          {
            v10 = v9;
            break;
          }
        }
      }
    }
    while (v10 != v12);
    v18 = (uint64_t *)((char *)v13 + 8 * v14);
    if ((_DWORD)v14)
    {
      v19 = 126 - 2 * __clz(v14);
      goto LABEL_31;
    }
  }
  v19 = 0;
LABEL_31:
  std::__introsort<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *,false>((unint64_t)v13, v18, (uint64_t)&v50, v19, 1);
  v50 = off_1E3572250;
  v51 = v53;
  v52 = xmmword_199122F80;
  v53[0] = 0;
  if (HIDWORD(v46))
  {
    v44 = a4;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = a3 - 1;
    if (!a3)
      v23 = 0;
    v24 = v23;
    do
    {
      v25 = v45;
      v26 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v50[4])(&v50);
      v27 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v26 + 32))(v26);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      if (v22)
      {
        if (a2)
        {
          WTF::StringImpl::utf8ForCharacters(a2, v24, (uint64_t)&v47, v29);
        }
        else
        {
          v30 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v30 = 1;
          *(_QWORD *)(v30 + 8) = 0;
          *(_BYTE *)(v30 + 16) = 0;
          v47 = v30;
          v48 = 0;
        }
        WTF::printExpectedCStringHelper(v28, "StringView", &v47);
        if (v48 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v48])(&v49, &v47);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v47, v29);
        WTF::printExpectedCStringHelper(v28, "StringView", &v47);
        if (v48 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v48])(&v49, &v47);
        v22 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v26 + 40))(v26);
      JSC::DFG::AbstractHeap::dump((WTF *)((char *)v25 + v20), v26);
      v50[5]((WTF::StringPrintStream *)&v50);
      ++v21;
      v20 += 8;
    }
    while (v21 < HIDWORD(v46));
    v39 = v51;
    v38 = v52;
    a4 = v44;
    *v44 = 0;
    if (!v39)
    {
      v42 = 0;
LABEL_52:
      WTF::fastFree(v42, v31, v32, v33, v34, v35, v36, v37);
      goto LABEL_53;
    }
  }
  else
  {
    v38 = 0;
    v39 = v53;
  }
  if (v38 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x198387270);
  }
  v40 = WTF::fastMalloc((WTF *)(v38 + 17));
  *(_DWORD *)v40 = 1;
  *(_QWORD *)(v40 + 8) = v38;
  *a4 = v40;
  v41 = v40 + 16;
  memcpy((void *)(v40 + 16), v39, v38);
  *(_BYTE *)(v41 + v38) = 0;
  v42 = (unint64_t)v51;
  if (v51 != v53)
    goto LABEL_52;
LABEL_53:
  v43 = v45;
  if (v45)
  {
    v45 = 0;
    LODWORD(v46) = 0;
    WTF::fastFree((unint64_t)v43, v31, v32, v33, v34, v35, v36, v37);
  }
}

uint64_t WTF::Vector<JSC::DFG::AbstractHeap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v11 = *(_QWORD *)a1;
        return v11 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_QWORD *)(v11 + v19) = *(_QWORD *)(v5 + v19);
          v19 += 8;
        }
        while (8 * v6 != v19);
        if (v5)
        {
          if (v11 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v11 = *(_QWORD *)a1;
        }
        return v11 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x1983873DCLL);
    }
  }
  v20 = *(unsigned int *)(a1 + 8);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= a2)
    v23 = a2;
  else
    v23 = v22;
  if (v23 > v20)
  {
    if (v23 >> 29)
      goto LABEL_35;
    v24 = *(unsigned int *)(a1 + 12);
    v25 = WTF::fastMalloc((WTF *)(8 * v23));
    *(_DWORD *)(a1 + 8) = v23;
    *(_QWORD *)a1 = v25;
    if ((_DWORD)v24)
    {
      v33 = 8 * v24;
      v34 = (_QWORD *)v25;
      v35 = (uint64_t *)v5;
      do
      {
        v36 = *v35++;
        *v34++ = v36;
        v33 -= 8;
      }
      while (v33);
    }
    if (v5)
    {
      if (v25 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return v3;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *,false>(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  _BOOL4 v62;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = (char *)a2 - (char *)v9;
    v12 = v11 >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v27 = *(a2 - 1);
        v28 = *v8;
        v29 = *v8 & 0x3FFF;
        if ((v27 & 0x3FFF) == (_DWORD)v29)
        {
          v30 = v27 >> 15 < v28 >> 15;
          if ((((unsigned __int16)v27 | (unsigned __int16)v28) & 0x4000) != 0)
            v30 = ((*v8 & 0x4000) == 0) & (v27 >> 14);
          if (v30 != 1)
            return result;
        }
        else if (((unsigned __int16)v27 & 0x3FFFu) >= v29)
        {
          return result;
        }
        *v8 = v27;
        *(a2 - 1) = v28;
        return result;
      case 3uLL:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v11 > 191)
        {
          v13 = v10;
          if (v10 == 1)
          {
            if (v8 != a2)
            {
              v46 = (v12 - 2) >> 1;
              v47 = v46 + 1;
              v48 = &v8[v46];
              do
              {
                std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>((uint64_t)v8, a3, v11 >> 3, v48--);
                --v47;
              }
              while (v47);
              v49 = (unint64_t)v11 >> 3;
              do
                result = (unint64_t)std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void>,JSC::DFG::AbstractHeap *>(v8, (uint64_t)a2--, a3, v49);
              while (v49-- > 2);
            }
            return result;
          }
          v14 = v12 >> 1;
          v15 = &v8[v12 >> 1];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(v15, v8, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_17;
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(v8, v15, a2 - 1);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(v8 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(v8 + 2, &v8[v14 + 1], a2 - 3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(v15 - 1, v15, &v8[v14 + 1]);
            v16 = *v8;
            *v8 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_17;
          }
          v17 = *(v8 - 1);
          v18 = *v8;
          v19 = *v8 & 0x3FFF;
          if ((v17 & 0x3FFF) == (_DWORD)v19)
          {
            v20 = v17 >> 15;
            v21 = v17 | v18;
            v22 = ((*v8 & 0x4000) == 0) & (v17 >> 14);
            v23 = v20 < v18 >> 15;
            if ((v21 & 0x4000) == 0)
              LOBYTE(v22) = v23;
            if ((v22 & 1) == 0)
            {
LABEL_21:
              result = (unint64_t)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::AbstractHeap *,std::less<void> &>(v8, a2);
              v9 = (uint64_t *)result;
              goto LABEL_22;
            }
          }
          else if (((unsigned __int16)v17 & 0x3FFFu) >= v19)
          {
            goto LABEL_21;
          }
LABEL_17:
          v24 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::AbstractHeap *,std::less<void> &>(v8, a2);
          if ((v25 & 1) == 0)
            goto LABEL_20;
          v26 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(v8, v24);
          v9 = v24 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(v24 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v13 + 1;
            if (v26)
              continue;
LABEL_20:
            result = std::__introsort<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *,false>(v8, v24, a3, -v13, a5 & 1);
            v9 = v24 + 1;
LABEL_22:
            a5 = 0;
            a4 = -v13;
            goto LABEL_3;
          }
          a4 = -v13;
          a2 = v24;
          if (v26)
            return result;
          goto LABEL_2;
        }
        v31 = v8 + 1;
        v33 = v8 == a2 || v31 == a2;
        if ((a5 & 1) == 0)
        {
          if (v33)
            return result;
          v51 = 0;
          v52 = 1;
          while (1)
          {
            v53 = v51;
            v51 = v52;
            v54 = *v31;
            v55 = *v31 & 0x3FFF;
            v56 = v8[v53];
            if ((_DWORD)v55 == (v56 & 0x3FFF))
              break;
            if (v55 < ((unsigned __int16)v56 & 0x3FFFu))
            {
              v57 = v54 >> 15;
              v58 = *v31 & 0x4000;
LABEL_82:
              *v31 = v56;
              while (1)
              {
                v60 = &v8[v53];
                v61 = *(v60 - 1);
                if ((_DWORD)v55 == (v61 & 0x3FFF))
                {
                  v62 = v58 != 0;
                  if ((v61 & 0x4000) != 0)
                    v62 = 0;
                  result = v57 < v61 >> 15;
                  if (!(v58 | v61 & 0x4000))
                    v62 = v57 < v61 >> 15;
                  if (!v62)
                  {
LABEL_93:
                    v8[v53] = v54;
                    break;
                  }
                }
                else if (v55 >= ((unsigned __int16)v61 & 0x3FFFu))
                {
                  goto LABEL_93;
                }
                --v53;
                *v60 = v61;
                if (v53 == -1)
                {
                  __break(1u);
                  return result;
                }
              }
            }
LABEL_94:
            v52 = v51 + 1;
            v31 = &v8[v51 + 1];
            if (v31 == a2)
              return result;
          }
          v57 = v54 >> 15;
          v58 = *v31 & 0x4000;
          result = v54 >> 15 < v56 >> 15;
          if (v58 | v56 & 0x4000)
            v59 = ((v56 & 0x4000) == 0) & (v54 >> 14);
          else
            v59 = v54 >> 15 < v56 >> 15;
          if (v59 != 1)
            goto LABEL_94;
          goto LABEL_82;
        }
        if (v33)
          return result;
        v34 = 0;
        v35 = v8;
        do
        {
          v36 = v35;
          v35 = v31;
          v38 = *v36;
          v37 = v36[1];
          v39 = v37 & 0x3FFF;
          v40 = *v36 & 0x3FFF;
          if (v39 == (_DWORD)v40)
          {
            v41 = v37 >> 15 < v38 >> 15;
            if ((((unsigned __int16)v37 | (unsigned __int16)v38) & 0x4000) != 0)
              v41 = ((*v36 & 0x4000) == 0) & (v37 >> 14);
            if (v41 != 1)
              goto LABEL_62;
          }
          else if (v39 >= v40)
          {
            goto LABEL_62;
          }
          v36[1] = v38;
          v42 = v8;
          if (v36 == v8)
            goto LABEL_61;
          v43 = v34;
          while (1)
          {
            v44 = *(uint64_t *)((char *)v8 + v43 - 8);
            if (v39 == (v44 & 0x3FFF))
            {
              result = ((v44 & 0x4000) == 0) & (v37 >> 14);
              if ((((unsigned __int16)v37 | (unsigned __int16)v44) & 0x4000) != 0)
                v45 = ((v44 & 0x4000) == 0) & (v37 >> 14);
              else
                v45 = v37 >> 15 < v44 >> 15;
              if (v45 != 1)
              {
                v42 = (uint64_t *)((char *)v8 + v43);
                goto LABEL_61;
              }
              goto LABEL_58;
            }
            if (v39 >= ((unsigned __int16)v44 & 0x3FFFu))
              break;
LABEL_58:
            --v36;
            *(uint64_t *)((char *)v8 + v43) = v44;
            v43 -= 8;
            if (!v43)
            {
              v42 = v8;
              goto LABEL_61;
            }
          }
          v42 = v36;
LABEL_61:
          *v42 = v37;
LABEL_62:
          v31 = v35 + 1;
          v34 += 8;
        }
        while (v35 + 1 != a2);
        return result;
    }
  }
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v3 = *a2;
  v4 = *a2 & 0x3FFF;
  v5 = *a1;
  v6 = *a1 & 0x3FFF;
  if ((_DWORD)v4 == (_DWORD)v6)
  {
    v7 = v3 >> 15 < v5 >> 15;
    if ((((unsigned __int16)v3 | (unsigned __int16)v5) & 0x4000) != 0)
      v7 = ((*a1 & 0x4000) == 0) & (v3 >> 14);
    if ((v7 & 1) == 0)
      goto LABEL_5;
LABEL_13:
    v13 = *a3;
    v14 = *a3 & 0x3FFF;
    if ((_DWORD)v14 == (_DWORD)v4)
    {
      v15 = ((unint64_t)v13 >> 14) & 1;
      if ((v3 & 0x4000) != 0)
        LODWORD(v15) = 0;
      v16 = v13 >> 15 < v3 >> 15;
      if (*a3 & 0x4000 | *a2 & 0x4000)
        v16 = v15;
      if (!v16)
      {
LABEL_19:
        *a1 = v3;
        *a2 = v5;
        v17 = *a3;
        v18 = *a3 & 0x3FFF;
        if ((_DWORD)v18 == (_DWORD)v6)
        {
          v19 = ((unint64_t)v17 >> 14) & 1;
          if ((v5 & 0x4000) != 0)
            LODWORD(v19) = 0;
          v20 = v17 >> 15 < v5 >> 15;
          if (*a3 & 0x4000 | v5 & 0x4000)
            v20 = v19;
          if (!v20)
            return 1;
        }
        else if (v18 >= v6)
        {
          return 1;
        }
        *a2 = v17;
        *a3 = v5;
        return 2;
      }
    }
    else if (v14 >= v4)
    {
      goto LABEL_19;
    }
    *a1 = v13;
    *a3 = v5;
    return 1;
  }
  if (v4 < v6)
    goto LABEL_13;
LABEL_5:
  v8 = *a3;
  v9 = *a3 & 0x3FFF;
  if ((_DWORD)v9 == (_DWORD)v4)
  {
    v10 = ((unint64_t)v8 >> 14) & 1;
    if ((v3 & 0x4000) != 0)
      LODWORD(v10) = 0;
    v11 = v8 >> 15 < v3 >> 15;
    if (*a3 & 0x4000 | *a2 & 0x4000)
      v11 = v10;
    if (!v11)
      return 0;
  }
  else if (v9 >= v4)
  {
    return 0;
  }
  *a2 = v8;
  *a3 = v3;
  v21 = *a2;
  v22 = *a2 & 0x3FFF;
  v23 = *a1;
  v24 = *a1 & 0x3FFF;
  if ((_DWORD)v22 == (_DWORD)v24)
  {
    v25 = v21 >> 15 < v23 >> 15;
    if ((((unsigned __int16)v21 | (unsigned __int16)v23) & 0x4000) != 0)
      v25 = ((*a1 & 0x4000) == 0) & (v21 >> 14);
    if (v25 != 1)
      return 1;
    goto LABEL_37;
  }
  if (v22 < v24)
  {
LABEL_37:
    *a1 = v21;
    *a2 = v23;
    return 2;
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::AbstractHeap *,std::less<void> &>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  unsigned int v6;
  _BOOL4 v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = *result;
  v3 = *result & 0x3FFF;
  v4 = *(a2 - 1);
  if ((_DWORD)v3 == (v4 & 0x3FFF))
  {
    v5 = v2 | v4;
    v6 = ((v4 & 0x4000) == 0) & (v2 >> 14);
    v7 = v2 >> 15 < v4 >> 15;
    if ((v5 & 0x4000) != 0)
      v7 = v6;
    if (!v7)
      goto LABEL_5;
LABEL_54:
    for (i = result + 1; i != a2; ++i)
    {
      v26 = *i;
      v27 = *i & 0x3FFF;
      if ((_DWORD)v3 == (_DWORD)v27)
      {
        v28 = v2 | v26;
        v29 = v2 >> 15 < v26 >> 15;
        if ((v28 & 0x4000) != 0)
          v29 = ((*i & 0x4000) == 0) & (v2 >> 14);
        if ((v29 & 1) != 0)
          goto LABEL_13;
      }
      else if (v3 < v27)
      {
        goto LABEL_13;
      }
    }
LABEL_62:
    __break(1u);
    return result;
  }
  if (v3 < ((unsigned __int16)v4 & 0x3FFFu))
    goto LABEL_54;
LABEL_5:
  for (i = result + 1; i < a2; ++i)
  {
    v9 = *i;
    v10 = *i & 0x3FFF;
    if ((_DWORD)v3 == (_DWORD)v10)
    {
      v11 = v2 | v9;
      v12 = v2 >> 15 < v9 >> 15;
      if ((v11 & 0x4000) != 0)
        v12 = ((*i & 0x4000) == 0) & (v2 >> 14);
      if ((v12 & 1) != 0)
        break;
    }
    else if (v3 < v10)
    {
      break;
    }
  }
LABEL_13:
  v13 = a2;
  if (i < a2)
  {
    if (a2 != result)
    {
      v13 = a2 - 1;
      while (1)
      {
        v14 = *v13;
        v15 = *v13 & 0x3FFF;
        if ((_DWORD)v3 == (_DWORD)v15)
        {
          v16 = v2 | v14;
          v17 = v2 >> 15 < v14 >> 15;
          if ((v16 & 0x4000) != 0)
            v17 = ((*v13 & 0x4000) == 0) & (v2 >> 14);
          if (v17 != 1)
            goto LABEL_25;
        }
        else if (v3 >= v15)
        {
          goto LABEL_25;
        }
        v18 = v13-- == result;
        if (v18)
          goto LABEL_62;
      }
    }
    goto LABEL_62;
  }
LABEL_25:
  if (i >= v13)
    goto LABEL_50;
  v19 = v2 >> 15;
  v20 = *i;
  v21 = *v13;
  do
  {
    *i++ = v21;
    *v13 = v20;
    while (1)
    {
      if (i == a2)
        goto LABEL_62;
      v20 = *i;
      v22 = *i & 0x3FFF;
      if ((_DWORD)v3 == (_DWORD)v22)
        break;
      if (v3 < v22)
        goto LABEL_37;
LABEL_36:
      ++i;
    }
    if ((((unsigned __int16)v2 | (unsigned __int16)v20) & 0x4000) != 0)
      v23 = ((*i & 0x4000) == 0) & (v2 >> 14);
    else
      v23 = v19 < v20 >> 15;
    if ((v23 & 1) == 0)
      goto LABEL_36;
LABEL_37:
    if (v13 == result)
      goto LABEL_62;
    --v13;
LABEL_39:
    v21 = *v13;
    v24 = *v13 & 0x3FFF;
    if ((_DWORD)v3 != (_DWORD)v24)
    {
      if (v3 >= v24)
        continue;
LABEL_46:
      v18 = v13-- == result;
      if (v18)
        goto LABEL_62;
      goto LABEL_39;
    }
    if ((((unsigned __int16)v2 | (unsigned __int16)v21) & 0x4000) != 0)
      v25 = ((*v13 & 0x4000) == 0) & (v2 >> 14);
    else
      v25 = v19 < v21 >> 15;
    if (v25 == 1)
      goto LABEL_46;
  }
  while (i < v13);
LABEL_50:
  if (i - 1 != result)
    *result = *(i - 1);
  *(i - 1) = v2;
  return i;
}

uint64_t *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::AbstractHeap *,std::less<void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;

  LODWORD(v6) = (_DWORD)a1 + 8;
  v7 = *a1;
  if (a1 + 1 == a2)
    goto LABEL_26;
  v6 = *a1 & 0x3FFF;
  v2 = v7 >> 15;
  v3 = ((unint64_t)v7 >> 14) & 1;
  v8 = 1;
  while (1)
  {
    v5 = a1[v8];
    if ((v5 & 0x3FFF) == (_DWORD)v6)
      break;
    if (((unsigned __int16)v5 & 0x3FFFu) >= v6)
      goto LABEL_13;
LABEL_11:
    v4 = &a1[++v8];
    if (&a1[v8] == a2)
      goto LABEL_26;
  }
  v9 = ((unint64_t)v5 >> 14) & 1;
  v10 = v9 | v3;
  if ((v7 & 0x4000) != 0)
    LODWORD(v9) = 0;
  if (!v10)
    LODWORD(v9) = v2 > v5 >> 15;
  if ((_DWORD)v9 == 1)
    goto LABEL_11;
LABEL_13:
  v4 = &a1[v8];
  if (v8 != 1)
  {
    if (a2 != a1)
    {
      i = a2 - 1;
      do
      {
        v12 = *i;
        v13 = *i & 0x3FFF;
        if ((_DWORD)v13 == (_DWORD)v6)
        {
          v14 = ((unint64_t)v12 >> 14) & 1;
          v15 = v14 | v3;
          if ((v7 & 0x4000) != 0)
            LOBYTE(v14) = 0;
          v16 = v2 > v12 >> 15;
          if (v15)
            v16 = v14;
          if (v16)
            goto LABEL_40;
        }
        else if (v13 < v6)
        {
          goto LABEL_40;
        }
        v17 = i-- == a1;
      }
      while (!v17);
    }
LABEL_26:
    __break(1u);
  }
  i = a2;
  if (v4 < a2)
  {
    for (i = a2 - 1; ; --i)
    {
      v18 = *i;
      v19 = *i & 0x3FFF;
      if ((_DWORD)v19 == (_DWORD)v6)
      {
        v20 = ((unint64_t)v18 >> 14) & 1;
        v21 = v20 | v3;
        if ((v7 & 0x4000) != 0)
          LOBYTE(v20) = 0;
        v22 = v2 > v18 >> 15;
        if (v21)
          v22 = v20;
        if (v4 >= i || v22)
          break;
      }
      else if (v4 >= i || v19 < v6)
      {
        break;
      }
    }
  }
LABEL_40:
  if (v4 >= i)
  {
    v24 = v4;
    goto LABEL_69;
  }
  v23 = *i;
  v24 = v4;
  v25 = i;
  while (2)
  {
    *v24++ = v23;
    *v25 = v5;
    while (2)
    {
      if (v24 == a2)
        goto LABEL_26;
      v5 = *v24;
      v26 = *v24 & 0x3FFF;
      if ((_DWORD)v26 != (_DWORD)v6)
      {
        if (v26 >= v6)
          break;
        goto LABEL_52;
      }
      v27 = ((unint64_t)v5 >> 14) & 1;
      v28 = v27 | v3;
      if ((v7 & 0x4000) != 0)
        LODWORD(v27) = 0;
      if (!v28)
        LODWORD(v27) = v2 > v5 >> 15;
      if ((_DWORD)v27 == 1)
      {
LABEL_52:
        ++v24;
        continue;
      }
      break;
    }
    if (v25 == a1)
      goto LABEL_26;
    --v25;
    while (2)
    {
      v23 = *v25;
      v29 = *v25 & 0x3FFF;
      if ((_DWORD)v29 != (_DWORD)v6)
      {
        if (v29 < v6)
          goto LABEL_66;
LABEL_63:
        v17 = v25-- == a1;
        if (v17)
          goto LABEL_26;
        continue;
      }
      break;
    }
    v30 = ((unint64_t)v23 >> 14) & 1;
    v31 = v30 | v3;
    if ((v7 & 0x4000) != 0)
      LOBYTE(v30) = 0;
    if (!v31)
      LOBYTE(v30) = v2 > v23 >> 15;
    if ((v30 & 1) == 0)
      goto LABEL_63;
LABEL_66:
    if (v24 < v25)
      continue;
    break;
  }
LABEL_69:
  v32 = v24 - 1;
  if (v24 - 1 != a1)
    *a1 = *v32;
  *v32 = v7;
  return v24 - 1;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *a1 & 0x3FFF;
      if ((v6 & 0x3FFF) != (_DWORD)v8)
      {
        if (((unsigned __int16)v6 & 0x3FFFu) >= v8)
          return result;
        goto LABEL_36;
      }
      v9 = v6 >> 15 < v7 >> 15;
      if ((((unsigned __int16)v6 | (unsigned __int16)v7) & 0x4000) != 0)
        v9 = ((*a1 & 0x4000) == 0) & (v6 >> 14);
      if (v9 == 1)
      {
LABEL_36:
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_9:
  v14 = *v11;
  v15 = *v11 & 0x3FFF;
  v16 = *v10;
  v17 = *v10 & 0x3FFF;
  if ((_DWORD)v15 == (_DWORD)v17)
  {
    v18 = v14 >> 15 < v16 >> 15;
    if ((((unsigned __int16)v14 | (unsigned __int16)v16) & 0x4000) != 0)
      v18 = ((*v10 & 0x4000) == 0) & (v14 >> 14);
    if (v18 != 1)
      goto LABEL_28;
  }
  else if (v15 >= v17)
  {
    goto LABEL_28;
  }
  *v11 = v16;
  v19 = a1;
  if (v10 == a1)
    goto LABEL_27;
  v20 = v12;
  while (1)
  {
    v21 = *(uint64_t *)((char *)a1 + v20 + 8);
    if ((_DWORD)v15 == (v21 & 0x3FFF))
    {
      if ((((unsigned __int16)v14 | (unsigned __int16)v21) & 0x4000) != 0)
        v22 = ((v21 & 0x4000) == 0) & (v14 >> 14);
      else
        v22 = v14 >> 15 < v21 >> 15;
      if (v22 != 1)
      {
        v19 = v10;
        goto LABEL_27;
      }
    }
    else if (v15 >= ((unsigned __int16)v21 & 0x3FFFu))
    {
      v19 = (uint64_t *)((char *)a1 + v20 + 16);
LABEL_27:
      *v19 = v14;
      if (++v13 == 8)
        return v11 + 1 == a2;
LABEL_28:
      v10 = v11;
      v12 += 8;
      if (++v11 == a2)
        return 1;
      goto LABEL_9;
    }
    --v10;
    *(uint64_t *)((char *)a1 + v20 + 16) = v21;
    v20 -= 8;
    if (v20 == -16)
    {
      v19 = a1;
      goto LABEL_27;
    }
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a4 & 0x3FFF;
  v11 = *a3;
  v12 = *a3 & 0x3FFF;
  if ((_DWORD)v10 != (_DWORD)v12)
  {
    if (v10 >= v12)
      return result;
LABEL_7:
    *a3 = v9;
    *a4 = v11;
    v14 = *a3;
    v15 = *a3 & 0x3FFF;
    v16 = *a2;
    v17 = *a2 & 0x3FFF;
    if ((_DWORD)v15 == (_DWORD)v17)
    {
      v18 = v14 >> 15 < v16 >> 15;
      if ((((unsigned __int16)v14 | (unsigned __int16)v16) & 0x4000) != 0)
        v18 = ((*a2 & 0x4000) == 0) & (v14 >> 14);
      if (v18 != 1)
        return result;
    }
    else if (v15 >= v17)
    {
      return result;
    }
    *a2 = v14;
    *a3 = v16;
    v19 = *a2;
    v20 = *a2 & 0x3FFF;
    v21 = *a1;
    v22 = *a1 & 0x3FFF;
    if ((_DWORD)v20 == (_DWORD)v22)
    {
      v23 = v19 >> 15 < v21 >> 15;
      if ((((unsigned __int16)v19 | (unsigned __int16)v21) & 0x4000) != 0)
        v23 = ((*a1 & 0x4000) == 0) & (v19 >> 14);
      if (v23 != 1)
        return result;
    }
    else if (v20 >= v22)
    {
      return result;
    }
    *a1 = v19;
    *a2 = v21;
    return result;
  }
  v13 = v9 >> 15 < v11 >> 15;
  if ((((unsigned __int16)v9 | (unsigned __int16)v11) & 0x4000) != 0)
    v13 = ((*a3 & 0x4000) == 0) & (v9 >> 14);
  if (v13 == 1)
    goto LABEL_7;
  return result;
}

uint64_t std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a5 & 0x3FFF;
  v13 = *a4;
  v14 = *a4 & 0x3FFF;
  if ((_DWORD)v12 != (_DWORD)v14)
  {
    if (v12 >= v14)
      return result;
LABEL_7:
    *a4 = v11;
    *a5 = v13;
    v16 = *a4;
    v17 = *a4 & 0x3FFF;
    v18 = *a3;
    v19 = *a3 & 0x3FFF;
    if ((_DWORD)v17 == (_DWORD)v19)
    {
      v20 = v16 >> 15 < v18 >> 15;
      if ((((unsigned __int16)v16 | (unsigned __int16)v18) & 0x4000) != 0)
        v20 = ((*a3 & 0x4000) == 0) & (v16 >> 14);
      if (v20 != 1)
        return result;
    }
    else if (v17 >= v19)
    {
      return result;
    }
    *a3 = v16;
    *a4 = v18;
    v21 = *a3;
    v22 = *a3 & 0x3FFF;
    v23 = *a2;
    v24 = *a2 & 0x3FFF;
    if ((_DWORD)v22 == (_DWORD)v24)
    {
      v25 = v21 >> 15 < v23 >> 15;
      if ((((unsigned __int16)v21 | (unsigned __int16)v23) & 0x4000) != 0)
        v25 = ((*a2 & 0x4000) == 0) & (v21 >> 14);
      if (v25 != 1)
        return result;
    }
    else if (v22 >= v24)
    {
      return result;
    }
    *a2 = v21;
    *a3 = v23;
    v26 = *a2;
    v27 = *a2 & 0x3FFF;
    v28 = *a1;
    v29 = *a1 & 0x3FFF;
    if ((_DWORD)v27 == (_DWORD)v29)
    {
      v30 = v26 >> 15 < v28 >> 15;
      if ((((unsigned __int16)v26 | (unsigned __int16)v28) & 0x4000) != 0)
        v30 = ((*a1 & 0x4000) == 0) & (v26 >> 14);
      if (v30 != 1)
        return result;
    }
    else if (v27 >= v29)
    {
      return result;
    }
    *a1 = v26;
    *a2 = v28;
    return result;
  }
  v15 = v11 >> 15 < v13 >> 15;
  if ((((unsigned __int16)v11 | (unsigned __int16)v13) & 0x4000) != 0)
    v15 = ((*a4 & 0x4000) == 0) & (v11 >> 14);
  if (v15 == 1)
    goto LABEL_7;
  return result;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void> &,JSC::DFG::AbstractHeap *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  unsigned int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  if (a3 < 2)
    return result;
  v4 = (uint64_t)a4 - result;
  v5 = (unint64_t)(a3 - 2) >> 1;
  if (v5 < ((uint64_t)a4 - result) >> 3)
    return result;
  v6 = v4 >> 2;
  v7 = (v4 >> 2) + 1;
  v8 = (uint64_t *)(result + 8 * v7);
  v9 = v6 + 2;
  if (v9 < a3)
  {
    v10 = v8[1];
    v11 = *v8;
    v12 = *v8 & 0x3FFF;
    if ((_DWORD)v12 == (v10 & 0x3FFF))
    {
      v13 = v11 >> 15;
      v14 = v11 | v10;
      v15 = ((v10 & 0x4000) == 0) & (v11 >> 14);
      v16 = v13 < v10 >> 15;
      if ((v14 & 0x4000) != 0)
        v16 = v15;
      if (!v16)
        goto LABEL_11;
    }
    else if (v12 >= ((unsigned __int16)v10 & 0x3FFFu))
    {
      goto LABEL_11;
    }
    ++v8;
    v7 = v9;
  }
LABEL_11:
  v17 = *v8;
  v18 = *v8 & 0x3FFF;
  v19 = *a4;
  v20 = *a4 & 0x3FFF;
  if ((_DWORD)v18 == (_DWORD)v20)
  {
    v21 = v17 >> 15 < v19 >> 15;
    if ((((unsigned __int16)v17 | (unsigned __int16)v19) & 0x4000) != 0)
      v21 = ((*a4 & 0x4000) == 0) & (v17 >> 14);
    if ((v21 & 1) != 0)
      return result;
  }
  else if (v18 < v20)
  {
    return result;
  }
  *a4 = v17;
  if (v5 >= v7)
  {
    while (1)
    {
      v23 = 2 * v7;
      v7 = (2 * v7) | 1;
      v22 = (uint64_t *)(result + 8 * v7);
      v24 = v23 + 2;
      if (v24 >= a3)
        goto LABEL_27;
      v25 = v22[1];
      v26 = *v22;
      v27 = *v22 & 0x3FFF;
      if ((_DWORD)v27 != (v25 & 0x3FFF))
        break;
      v28 = v26 >> 15;
      v29 = v26 | v25;
      v30 = ((v25 & 0x4000) == 0) & (v26 >> 14);
      v31 = v28 < v25 >> 15;
      if ((v29 & 0x4000) != 0)
        v31 = v30;
      if (v31)
        goto LABEL_26;
LABEL_27:
      v32 = *v22;
      v33 = *v22 & 0x3FFF;
      if ((_DWORD)v33 == (_DWORD)v20)
      {
        v34 = ((unint64_t)v32 >> 14) & 1;
        v35 = v34 | ((unint64_t)v19 >> 14) & 1;
        if ((v19 & 0x4000) != 0)
          LOBYTE(v34) = 0;
        if (!v35)
          LOBYTE(v34) = v19 >> 15 > v32 >> 15;
        if ((v34 & 1) != 0)
          goto LABEL_18;
      }
      else if (v33 < v20)
      {
        goto LABEL_18;
      }
      *v8 = v32;
      v8 = v22;
      if (v5 < v7)
        goto LABEL_36;
    }
    if (v27 >= ((unsigned __int16)v25 & 0x3FFFu))
      goto LABEL_27;
LABEL_26:
    ++v22;
    v7 = v24;
    goto LABEL_27;
  }
LABEL_18:
  v22 = v8;
LABEL_36:
  *v22 = v19;
  return result;
}

uint64_t *std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,std::less<void>,JSC::DFG::AbstractHeap *>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;
  _BOOL4 v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  if (a4 <= 0)
  {
    __break(1u);
    return result;
  }
  if (a4 == 1)
    return result;
  v4 = 0;
  v5 = *result;
  v6 = result;
  do
  {
    v7 = v6;
    v6 += v4 + 1;
    v8 = 2 * v4;
    v4 = (2 * v4) | 1;
    v9 = v8 + 2;
    if (v9 >= a4)
      goto LABEL_12;
    v10 = v6[1];
    v11 = *v6;
    v12 = *v6 & 0x3FFF;
    if ((_DWORD)v12 != (v10 & 0x3FFF))
    {
      if (v12 >= ((unsigned __int16)v10 & 0x3FFFu))
        goto LABEL_12;
LABEL_11:
      ++v6;
      v4 = v9;
      goto LABEL_12;
    }
    v13 = v11 >> 15;
    v14 = v11 | v10;
    v15 = ((v10 & 0x4000) == 0) & (v11 >> 14);
    v16 = v13 < v10 >> 15;
    if ((v14 & 0x4000) != 0)
      v16 = v15;
    if (v16)
      goto LABEL_11;
LABEL_12:
    *v7 = *v6;
  }
  while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
  v17 = (uint64_t *)(a2 - 8);
  if (v6 == (uint64_t *)(a2 - 8))
  {
    *v6 = v5;
    return result;
  }
  *v6 = *v17;
  *v17 = v5;
  v18 = (char *)v6 - (char *)result + 8;
  if (v18 >= 9)
  {
    v19 = ((unint64_t)v18 >> 3) - 2;
    v20 = v19 >> 1;
    v21 = &result[v19 >> 1];
    v22 = *v21;
    v23 = *v21 & 0x3FFF;
    v24 = *v6;
    v25 = *v6 & 0x3FFF;
    if ((_DWORD)v23 == (_DWORD)v25)
    {
      v26 = v22 >> 15 < v24 >> 15;
      if ((((unsigned __int16)v22 | (unsigned __int16)v24) & 0x4000) != 0)
        v26 = ((*v6 & 0x4000) == 0) & (v22 >> 14);
      if (v26 != 1)
        return result;
    }
    else if (v23 >= v25)
    {
      return result;
    }
    *v6 = v22;
    if (v19 >= 2)
    {
      while (1)
      {
        v28 = v20 - 1;
        v20 = (v20 - 1) >> 1;
        v27 = &result[v20];
        v29 = *v27;
        v30 = *v27 & 0x3FFF;
        if ((_DWORD)v30 == (_DWORD)v25)
        {
          v31 = ((unint64_t)v29 >> 14) & 1;
          v32 = v31 | ((unint64_t)v24 >> 14) & 1;
          if ((v24 & 0x4000) != 0)
            LODWORD(v31) = 0;
          if (!v32)
            LODWORD(v31) = v24 >> 15 > v29 >> 15;
          if ((_DWORD)v31 != 1)
            break;
        }
        else if (v30 >= v25)
        {
          break;
        }
        *v21 = v29;
        v21 = &result[v20];
        if (v28 <= 1)
          goto LABEL_33;
      }
    }
    v27 = v21;
LABEL_33:
    *v27 = v24;
  }
  return result;
}

uint64_t *WTF::HashTable<JSC::DFG::AbstractHeap,JSC::DFG::AbstractHeap,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v9 = result;
  v11 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::DFG::AbstractHeap,JSC::DFG::AbstractHeap,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a2;
  v15 = *a2 + ~(*a2 << 32);
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v11 - 4);
        v31 = 0;
        v32 = v11 + 8 * v25;
        goto LABEL_32;
      }
      if ((v20 & 0x7FFF) == 0x4000)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (uint64_t *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*v9 - 16);
      v14 = *a2;
      v19 = v21;
    }
  }
  *v19 = v14;
  v23 = *v9;
  if (*v9)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v26 = *v9;
  if (*v9)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
      goto LABEL_23;
  }
  else if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v30 = 8;
LABEL_28:
      result = WTF::HashTable<JSC::DFG::AbstractHeap,JSC::DFG::AbstractHeap,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>>::rehash(v9, v30, (uint64_t)v19, a3, a4, a5, a6, a7);
      v19 = result;
      v26 = *v9;
      if (*v9)
        v29 = *(unsigned int *)(v26 - 4);
      else
        v29 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v30 = ((_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29)));
    goto LABEL_28;
  }
LABEL_31:
  v32 = v26 + 8 * v29;
  v31 = 1;
LABEL_32:
  *(_QWORD *)a8 = v19;
  *(_QWORD *)(a8 + 8) = v32;
  *(_BYTE *)(a8 + 16) = v31;
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::AbstractHeap,JSC::DFG::AbstractHeap,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (!v12)
  {
    v23 = 0;
    if (!v11)
      return v23;
    goto LABEL_17;
  }
  v22 = 0;
  v23 = 0;
  do
  {
    v24 = (uint64_t *)(v11 + 8 * v22);
    v25 = *v24;
    if (*v24 && (*v24 & 0x7FFF) != 0x4000)
    {
      v26 = *a1;
      if (*a1)
        v27 = *(_DWORD *)(v26 - 8);
      else
        v27 = 0;
      v28 = (v25 + ~(v25 << 32)) ^ ((unint64_t)(v25 + ~(v25 << 32)) >> 22);
      v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
      v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
      v31 = v27 & ((v30 >> 31) ^ v30);
      v32 = 1;
      do
      {
        v33 = v31;
        v34 = *(_QWORD *)(v26 + 8 * v31);
        v31 = (v31 + v32++) & v27;
      }
      while (v34);
      v35 = (_QWORD *)(v26 + 8 * v33);
      *v35 = v25;
      if (v24 == (uint64_t *)a3)
        v23 = v35;
    }
    ++v22;
  }
  while (v22 != v12);
  if (v11)
LABEL_17:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::ClobberSetAdd,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::ClobberSetAdd,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::ClobberSetAdd const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  char *v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  _BOOL4 v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  BOOL v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  int v219;
  BOOL v220;
  uint64_t v221;
  uint64_t v222;
  JSC::DFG::Node *v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  _DWORD *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  int v456;
  unsigned int *v457;
  uint64_t v458;
  unsigned int v459;
  uint64_t v460;
  char isWatchingHavingABadTimeWatchpoint;
  WTF *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  int v474;
  _DWORD *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  int v489;
  uint64_t v490;
  uint64_t v492;
  unsigned __int16 v493;
  uint64_t v494;
  _DWORD *v495;
  _QWORD *v496;
  uint64_t v497;
  unsigned int v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v510;
  _QWORD *v511;
  _QWORD *v512;
  _QWORD *v513;
  uint64_t v514;
  _QWORD *v515;
  _QWORD *v516;
  _QWORD *v517;
  _QWORD *v518;
  _QWORD *v519;
  _QWORD *v520;
  _QWORD *v521;
  _QWORD *v522;
  _QWORD *v523;
  _QWORD *v524;
  _QWORD *v525;
  BOOL v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  BOOL v530;
  uint64_t v531;
  uint64_t v532;
  unsigned int v533;
  BOOL v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  BOOL v538;
  uint64_t *v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  uint64_t v546;
  unsigned int v547;
  uint64_t v548;
  unsigned int v549;
  const char *v550;
  void *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unsigned int v558;
  char v559;
  uint64_t v560;
  int v561;
  int v563;
  int v565;
  int v567;
  uint64_t v569;
  char v570;
  char v571[56];
  char v572;
  char v573;
  char v574[56];
  char v575;
  char v576[56];
  char v577;
  char v578[56];
  char v579;
  char v580;
  char v581;
  char v582;
  char v583[56];
  char v584;
  char v585;
  char v586;
  char v587;
  WTF *v588[2];
  char v589;
  char v590;
  char v591;
  char v592;
  char v593;
  char v594;
  char v595;
  char v596;
  char v597;
  char v598;
  char v599;
  char v600;
  char v601[56];
  char v602;
  char v603[56];
  char v604;
  char v605;
  char v606;
  char v607;
  char v608;
  char v609;
  char v610[56];
  char v611;
  char v612[56];

  if (*((int *)this + 238) > 0 || !JSC::DFG::Node::hasArrayMode(a2))
  {
LABEL_2:
    v11 = *((unsigned __int16 *)a2 + 9);
    switch(*((_WORD *)a2 + 9))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 0xB:
      case 0xD:
      case 0x13:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1E:
      case 0x20:
      case 0x21:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x43:
      case 0x45:
      case 0x47:
      case 0x48:
      case 0x4A:
      case 0x5B:
      case 0x60:
      case 0x61:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x8A:
      case 0x8C:
      case 0x8D:
      case 0x90:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x98:
      case 0x99:
      case 0x9A:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAD:
      case 0xAE:
      case 0xB3:
      case 0xB6:
      case 0xB7:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC0:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE5:
      case 0xEB:
      case 0xEC:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0x113:
      case 0x118:
      case 0x126:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x135:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x148:
      case 0x149:
      case 0x14B:
      case 0x14C:
      case 0x157:
      case 0x166:
      case 0x17C:
      case 0x183:
      case 0x188:
      case 0x189:
      case 0x18A:
      case 0x18B:
      case 0x19A:
      case 0x19C:
      case 0x19D:
      case 0x19F:
        return;
      case 6:
      case 0x88:
      case 0x89:
      case 0xD6:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x109:
      case 0x10C:
      case 0x10E:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x116:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x122:
      case 0x144:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
      case 0x163:
      case 0x16B:
        goto LABEL_170;
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0x54:
      case 0x5E:
      case 0x5F:
      case 0x62:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x8E:
      case 0x8F:
      case 0xA7:
      case 0xA8:
      case 0xB0:
      case 0xB1:
      case 0xC3:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xD4:
      case 0xD5:
      case 0xD8:
      case 0xD9:
      case 0xDB:
      case 0xDC:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x108:
      case 0x124:
      case 0x125:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x140:
      case 0x141:
      case 0x147:
      case 0x14A:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x155:
      case 0x156:
      case 0x181:
      case 0x184:
      case 0x185:
      case 0x186:
      case 0x187:
      case 0x19B:
        goto LABEL_194;
      case 0xC:
        v84 = *a4;
        v83 = 98306;
        goto LABEL_357;
      case 0xE:
        v84 = *a4;
        v83 = 131074;
        goto LABEL_357;
      case 0xF:
        v521 = (_QWORD *)*((_QWORD *)a2 + 9);
        v522 = v521;
        do
        {
          v523 = v522;
          v522 = (_QWORD *)*v522;
        }
        while (v522);
        if (v523 != v521)
        {
          *v521 = v523;
          v521 = (_QWORD *)*((_QWORD *)a2 + 9);
        }
        v524 = v521;
        do
        {
          v525 = v524;
          v524 = (_QWORD *)*v524;
        }
        while (v524);
        if (v525 != v521)
          *v521 = v525;
        v91 = &v605;
        goto LABEL_319;
      case 0x10:
        v515 = (_QWORD *)*((_QWORD *)a2 + 9);
        v516 = v515;
        do
        {
          v517 = v516;
          v516 = (_QWORD *)*v516;
        }
        while (v516);
        if (v517 != v515)
          *v515 = v517;
        JSC::DFG::ClobberSet::add(*a4, (v517[3] << 15) | 2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v518 = (_QWORD *)*((_QWORD *)a2 + 9);
        v519 = v518;
        do
        {
          v520 = v519;
          v519 = (_QWORD *)*v519;
        }
        while (v519);
        if (v520 != v518)
          *v518 = v520;
        v224 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
        v91 = &v604;
        goto LABEL_320;
      case 0x11:
        v81 = **((_QWORD **)a2 + 9);
        v82 = 2;
        goto LABEL_102;
      case 0x12:
        v45 = (*((_QWORD *)a2 + 9) << 15) | 2;
        v46 = *a4;
        v47 = *v46;
        if (*v46
          || (WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v46, 0, a3, (uint64_t)a4, a5, a6, a7, a8), (v47 = *v46) != 0))
        {
          v48 = *(_DWORD *)(v47 - 8);
        }
        else
        {
          v48 = 0;
        }
        v49 = (v45 + ~(v45 << 32)) ^ ((unint64_t)(v45 + ~(v45 << 32)) >> 22);
        v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
        v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
        v52 = v48 & ((v51 >> 31) ^ v51);
        v53 = (uint64_t *)(v47 + 16 * v52);
        v54 = *v53;
        if (!*v53)
          goto LABEL_57;
        v55 = 0;
        v56 = 1;
        while (v54 != v45)
        {
          if ((v54 & 0x7FFF) == 0x4000)
            v55 = v53;
          v52 = (v52 + v56) & v48;
          v53 = (uint64_t *)(v47 + 16 * v52);
          v54 = *v53;
          ++v56;
          if (!*v53)
          {
            if (v55)
            {
              *v55 = 0;
              v55[1] = 0;
              --*(_DWORD *)(*v46 - 16);
              v53 = v55;
            }
LABEL_57:
            *v53 = v45;
            v57 = 1;
            *((_BYTE *)v53 + 8) = 1;
            v58 = *v46;
            if (*v46)
              v57 = *(_DWORD *)(v58 - 12) + 1;
            *(_DWORD *)(v58 - 12) = v57;
            v59 = *v46;
            if (*v46)
              v60 = *(_DWORD *)(v59 - 12);
            else
              v60 = 0;
            v61 = (*(_DWORD *)(v59 - 16) + v60);
            v62 = *(unsigned int *)(v59 - 4);
            if (v62 > 0x400)
            {
              if (v62 <= 2 * v61)
                goto LABEL_89;
            }
            else if (3 * v62 <= 4 * v61)
            {
              goto LABEL_89;
            }
            while (1)
            {
LABEL_63:
              v63 = v45 & 0x3FFF;
              if (v63 == 1)
                return;
              v64 = v63 | 0x4000u;
              if (v63 == 2)
                v65 = 16385;
              else
                v65 = 16387;
              if ((v45 & 0x4000) != 0)
                v64 = v65;
              if (v63 == 40)
                v64 = 16385;
              if (v63 == 3)
                v45 = 16385;
              else
                v45 = v64;
              v66 = *v46;
              if (*v46
                || (WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v46, 0, a3, (uint64_t)a4, a5, a6, a7, a8), (v66 = *v46) != 0))
              {
                v67 = *(_DWORD *)(v66 - 8);
              }
              else
              {
                v67 = 0;
              }
              v68 = (v45 + ~(v45 << 32)) ^ ((unint64_t)(v45 + ~(v45 << 32)) >> 22);
              v69 = 9 * ((v68 + ~(v68 << 13)) ^ ((v68 + ~(v68 << 13)) >> 8));
              v70 = (v69 ^ (v69 >> 15)) + ~((v69 ^ (v69 >> 15)) << 27);
              v71 = v67 & ((v70 >> 31) ^ v70);
              v53 = (uint64_t *)(v66 + 16 * v71);
              v72 = *v53;
              if (*v53)
              {
                v73 = 0;
                v74 = 1;
                while (v72 != v45)
                {
                  if ((v72 & 0x7FFF) == 0x4000)
                    v73 = v53;
                  v71 = (v71 + v74) & v67;
                  v53 = (uint64_t *)(v66 + 16 * v71);
                  v72 = *v53;
                  ++v74;
                  if (!*v53)
                  {
                    if (v73)
                    {
                      *v73 = 0;
                      v73[1] = 0;
                      --*(_DWORD *)(*v46 - 16);
                      v53 = v73;
                    }
                    goto LABEL_83;
                  }
                }
                return;
              }
LABEL_83:
              *v53 = v45;
              *((_BYTE *)v53 + 8) = 0;
              v75 = *v46;
              v76 = *v46 ? *(_DWORD *)(v75 - 12) + 1 : 1;
              *(_DWORD *)(v75 - 12) = v76;
              v77 = *v46;
              v78 = *v46 ? *(_DWORD *)(v77 - 12) : 0;
              v79 = (*(_DWORD *)(v77 - 16) + v78);
              v80 = *(unsigned int *)(v77 - 4);
              if (v80 <= 0x400)
                break;
              if (v80 <= 2 * v79)
                goto LABEL_89;
            }
            if (3 * v80 > 4 * v79)
              goto LABEL_63;
LABEL_89:
            WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v46, v53, a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_63;
          }
        }
        if (!*((_BYTE *)v53 + 8))
        {
          *((_BYTE *)v53 + 8) = 1;
          goto LABEL_63;
        }
        return;
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x1A:
      case 0x1B:
      case 0x1D:
      case 0x1F:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0xB9:
      case 0x117:
      case 0x153:
      case 0x154:
      case 0x16C:
      case 0x16D:
      case 0x16E:
      case 0x16F:
      case 0x170:
      case 0x175:
      case 0x17B:
      case 0x1A2:
      case 0x1A3:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1A9:
      case 0x1AA:
        v12 = *a4;
        v13 = *v12;
        if (*v12
          || (WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v12, 0, a3, (uint64_t)a4, a5, a6, a7, a8), (v13 = *v12) != 0))
        {
          v14 = *(_DWORD *)(v13 - 8);
        }
        else
        {
          v14 = 0;
        }
        v15 = v14 & 0x1A0F4972;
        v16 = (_QWORD *)(v13 + 16 * (v14 & 0x1A0F4972));
        v17 = *v16;
        if (!*v16)
          goto LABEL_13;
        v18 = 0;
        v19 = 1;
        while (v17 != 16424)
        {
          if ((v17 & 0x7FFF) == 0x4000)
            v18 = v16;
          v15 = (v15 + v19) & v14;
          v16 = (_QWORD *)(v13 + 16 * v15);
          v17 = *v16;
          ++v19;
          if (!*v16)
          {
            if (v18)
            {
              *v18 = 0;
              v18[1] = 0;
              --*(_DWORD *)(*v12 - 16);
              v16 = v18;
            }
LABEL_13:
            *v16 = 16424;
            v20 = 1;
            *((_BYTE *)v16 + 8) = 1;
            v21 = *v12;
            if (*v12)
              v20 = *(_DWORD *)(v21 - 12) + 1;
            *(_DWORD *)(v21 - 12) = v20;
            v22 = *v12;
            if (*v12)
              v23 = *(_DWORD *)(v22 - 12);
            else
              v23 = 0;
            v24 = (*(_DWORD *)(v22 - 16) + v23);
            v25 = *(unsigned int *)(v22 - 4);
            if (v25 > 0x400)
            {
              if (v25 <= 2 * v24)
                goto LABEL_100;
            }
            else
            {
              if (3 * v25 > 4 * v24)
                goto LABEL_19;
LABEL_100:
              WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v12, v16, a3, (uint64_t)a4, a5, a6, a7, a8);
            }
LABEL_19:
            LOWORD(v26) = 16424;
            while (1)
            {
LABEL_20:
              v27 = v26 & 0x3FFF;
              switch(v27)
              {
                case 1:
                  return;
                case 2:
                  v28 = 16385;
                  break;
                case 40:
                  v28 = 16385;
                  break;
                default:
                  v28 = 16387;
                  break;
              }
              if (v27 == 3)
                v26 = 16385;
              else
                v26 = v28;
              v29 = *v12;
              if (*v12
                || (WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v12, 0, a3, (uint64_t)a4, a5, a6, a7, a8), (v29 = *v12) != 0))
              {
                v30 = *(_DWORD *)(v29 - 8);
              }
              else
              {
                v30 = 0;
              }
              v31 = (v26 + ~(v26 << 32)) ^ ((unint64_t)(v26 + ~(v26 << 32)) >> 22);
              v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
              v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
              v34 = v30 & ((v33 >> 31) ^ v33);
              v35 = (uint64_t *)(v29 + 16 * v34);
              v36 = *v35;
              if (*v35)
              {
                v37 = 0;
                v38 = 1;
                while (v36 != v26)
                {
                  if ((v36 & 0x7FFF) == 0x4000)
                    v37 = v35;
                  v34 = (v34 + v38) & v30;
                  v35 = (uint64_t *)(v29 + 16 * v34);
                  v36 = *v35;
                  ++v38;
                  if (!*v35)
                  {
                    if (v37)
                    {
                      *v37 = 0;
                      v37[1] = 0;
                      --*(_DWORD *)(*v12 - 16);
                      v35 = v37;
                    }
                    goto LABEL_38;
                  }
                }
                return;
              }
LABEL_38:
              *v35 = v26;
              *((_BYTE *)v35 + 8) = 0;
              v39 = *v12;
              v40 = *v12 ? *(_DWORD *)(v39 - 12) + 1 : 1;
              *(_DWORD *)(v39 - 12) = v40;
              v41 = *v12;
              v42 = *v12 ? *(_DWORD *)(v41 - 12) : 0;
              v43 = (*(_DWORD *)(v41 - 16) + v42);
              v44 = *(unsigned int *)(v41 - 4);
              if (v44 <= 0x400)
                break;
              if (v44 <= 2 * v43)
                goto LABEL_44;
            }
            if (3 * v44 > 4 * v43)
              goto LABEL_20;
LABEL_44:
            WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::expand(v12, v35, a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_20;
          }
        }
        if (!*((_BYTE *)v16 + 8))
        {
          *((_BYTE *)v16 + 8) = 1;
          goto LABEL_19;
        }
        return;
      case 0x1C:
        v511 = (_QWORD *)*((_QWORD *)a2 + 9);
        v512 = v511;
        do
        {
          v513 = v512;
          v512 = (_QWORD *)*v512;
        }
        while (v512);
        if (v513 != v511)
          *v511 = v513;
        goto LABEL_356;
      case 0x22:
        v84 = *a4;
        v83 = 16419;
        goto LABEL_357;
      case 0x28:
      case 0xB8:
      case 0xBA:
      case 0x101:
      case 0x102:
      case 0x171:
      case 0x172:
      case 0x173:
      case 0x174:
      case 0x176:
      case 0x177:
      case 0x19E:
        goto LABEL_356;
      case 0x29:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26 >= 3)
          goto LABEL_194;
        return;
      case 0x2A:
      case 0x142:
      case 0x143:
        v92 = *((_BYTE *)a2 + 30);
        goto LABEL_124;
      case 0x2B:
      case 0x2D:
      case 0x2F:
      case 0x32:
      case 0x34:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
        v135 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        switch((_DWORD)v135)
        {
          case 0x1A:
            v208 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v209 = 0x68000000000000;
            break;
          case 0x1C:
            v208 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v209 = 0x70000000000000;
            break;
          case 0x1B:
            v208 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v209 = 0x6C000000000000;
            break;
          default:
            goto LABEL_194;
        }
        if (v208 == v209)
          goto LABEL_356;
        goto LABEL_194;
      case 0x2C:
      case 0x2E:
      case 0x30:
      case 0x31:
      case 0x33:
      case 0x35:
        if ((*((_BYTE *)a2 + 30) & 0xFC) != 0)
          goto LABEL_123;
        goto LABEL_194;
      case 0x3F:
        v203 = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1;
LABEL_392:
        if (v203 < 2)
          return;
        goto LABEL_194;
      case 0x40:
      case 0x42:
      case 0x44:
        v105 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        v106 = (_DWORD)v105 == 49 || (_DWORD)v105 == 1;
        if (v106 || (_DWORD)v105 == 52)
          return;
        if ((_DWORD)v105)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198389228);
        }
        goto LABEL_194;
      case 0x41:
        v206 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        v207 = (_DWORD)v206 == 49 || (_DWORD)v206 == 1;
        if (!v207 && (_DWORD)v206 != 52)
          goto LABEL_194;
        return;
      case 0x46:
        v231 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v231 != 49 && (_DWORD)v231 != 1)
          goto LABEL_194;
        return;
      case 0x49:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x131:
        v155 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
        v156 = 0xC4000000000000;
        goto LABEL_236;
      case 0x4B:
        v84 = *a4;
        v83 = 16409;
        goto LABEL_357;
      case 0x52:
      case 0x53:
        v490 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (v490 > 0x34)
          goto LABEL_408;
        if (!v490)
          goto LABEL_194;
        if (((1 << v490) & 0x1200001C000002) == 0)
        {
LABEL_408:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19838A164);
        }
        return;
      case 0x5C:
      case 0x5D:
        v86 = *((_DWORD *)a2 + 18);
        if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
        {
          switch(*((_DWORD *)a2 + 14) & 7)
          {
            case 3:
              v87 = 13;
              break;
            case 4:
              v87 = 17;
              break;
            case 5:
              v87 = 19;
              break;
            case 7:
              __break(0xC471u);
              JUMPOUT(0x19838AC94);
            default:
              __break(0xC471u);
              JUMPOUT(0x19838ACC4);
          }
        }
        else
        {
          v87 = 21;
        }
        switch(*((_DWORD *)a2 + 18))
        {
          case 0u:
          case 1u:
          case 2u:
          case 4u:
          case 0x17u:
          case 0x18u:
            goto LABEL_194;
          case 3u:
            goto LABEL_356;
          case 5u:
            if (BYTE2(v86) - 3 <= 1)
              goto LABEL_194;
            return;
          case 6u:
            return;
          case 7u:
            if (BYTE2(v86) > 3u || BYTE2(v86) == 2)
              goto LABEL_194;
            v114 = *((_DWORD *)a2 + 6);
            v115 = *((_DWORD *)this + 41);
            if (v115 <= v114)
            {
              __break(0xC471u);
              JUMPOUT(0x19838AD7CLL);
            }
            if (v115 <= v114 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19838938CLL);
            }
            return;
          case 8u:
            if (BYTE2(v86) >= 2u && BYTE2(v86) != 3)
              goto LABEL_194;
            v136 = *((_DWORD *)a2 + 6);
            v137 = *((_DWORD *)this + 41);
            if (v137 <= v136)
            {
              __break(0xC471u);
              JUMPOUT(0x19838AD84);
            }
            if (v137 <= v136 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198389480);
            }
            return;
          case 9u:
            if (BYTE2(v86) >= 2u && BYTE2(v86) != 3)
              goto LABEL_194;
            v88 = *((_DWORD *)a2 + 6);
            v89 = *((_DWORD *)this + 41);
            if (v89 <= v88)
            {
              __break(0xC471u);
              JUMPOUT(0x19838AD2CLL);
            }
            if (v89 <= v88 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1983890B0);
            }
            return;
          case 0xAu:
          case 0xBu:
            if (BYTE2(v86) < 2u)
              return;
            goto LABEL_194;
          case 0xCu:
            if (BYTE2(v86) > 1u)
              goto LABEL_194;
            v506 = *((_QWORD *)a2 + 3);
            v507 = *((_DWORD *)this + 41);
            if (v507 <= v506)
            {
              __break(0xC471u);
              JUMPOUT(0x19838AE44);
            }
            if (v507 <= (int)v506 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19838AE4CLL);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v603, v87, 16404, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v91 = &v602;
            goto LABEL_319;
          case 0xDu:
            v546 = *((_QWORD *)a2 + 3);
            v547 = *((_DWORD *)this + 41);
            if (v547 <= v546)
            {
              __break(0xC471u);
              JUMPOUT(0x19838AF80);
            }
            if (v547 <= (int)v546 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19838AF88);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v601, v87, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v91 = &v600;
            goto LABEL_319;
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
            if ((v86 & 0x40000000) != 0)
              goto LABEL_442;
            v110 = *((_DWORD *)a2 + 6);
            v111 = *((_DWORD *)this + 41);
            if (v111 <= v110)
            {
              __break(0xC471u);
              JUMPOUT(0x19838AD4CLL);
            }
            if (v111 <= v110 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1983892C8);
            }
            return;
          case 0x19u:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
            __break(0xC471u);
            JUMPOUT(0x19838A8D0);
          default:
            __break(0xC471u);
            JUMPOUT(0x19838A934);
        }
      case 0x63:
        JSC::DFG::ClobberSet::add(*a4, 16387, a3, (uint64_t)a4, a5, a6, a7, a8);
        v475 = (_DWORD *)*((_QWORD *)a2 + 9);
        JSC::DFG::ClobberSet::add(*a4, ((v475[1] | ((((unint64_t)v475[1] >> 31) & 1) << 32)) << 15) | 2, v476, v477, v478, v479, v480, v481);
        v488 = v475[6];
        if (v488)
        {
          v489 = v488 - 1;
          do
          {
            JSC::DFG::ClobberSet::add(*a4, (((v489 + *v475) | ((((unint64_t)(v489 + *v475) >> 31) & 1) << 32)) << 15) | 2, v482, v483, v484, v485, v486, v487);
            --v489;
          }
          while (v489 != -1);
        }
        return;
      case 0x64:
        v448 = (_DWORD *)*((_QWORD *)a2 + 9);
        JSC::DFG::ClobberSet::add(*a4, ((v448[1] | ((((unint64_t)v448[1] >> 31) & 1) << 32)) << 15) | 2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v455 = v448[6];
        if (v455)
        {
          v456 = v455 - 1;
          do
          {
            JSC::DFG::ClobberSet::add(*a4, (((v456 + *v448) | ((((unint64_t)(v456 + *v448) >> 31) & 1) << 32)) << 15) | 2, v449, v450, v451, v452, v453, v454);
            --v456;
          }
          while (v456 != -1);
        }
        return;
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
        v107 = *((_DWORD *)a2 + 6);
        v108 = *((_DWORD *)this + 41);
        if (v108 <= v107)
        {
          __break(0xC471u);
          JUMPOUT(0x19838AD34);
        }
        if (v108 <= v107 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19838AD3CLL);
        }
        if (v108 <= v107 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x19838AD44);
        }
        v90 = *((_DWORD *)a2 + 18);
        v109 = *((_DWORD *)a2 + 14) & 7;
        if (v109 >= 2 && v109 - 3 >= 3)
        {
          if (v109 == 7)
          {
            __break(0xC471u);
            JUMPOUT(0x198389588);
          }
          __break(0xC471u);
          JUMPOUT(0x19838ACF4);
        }
        if (*((_DWORD *)a2 + 18) - 14 < 9)
        {
          JSC::DFG::ClobberSet::add(*a4, 16406, a3, (uint64_t)a4, a5, a6, a7, a8);
          goto LABEL_150;
        }
        switch(*((_DWORD *)a2 + 18))
        {
          case 0u:
          case 1u:
          case 2u:
          case 4u:
          case 5u:
          case 6u:
          case 0xCu:
          case 0xDu:
          case 0x17u:
          case 0x18u:
            goto LABEL_194;
          case 3u:
            goto LABEL_356;
          case 7u:
            v84 = *a4;
            if (BYTE2(v90) - 3 <= 1)
              goto LABEL_195;
            v140 = 16400;
            goto LABEL_215;
          case 8u:
            v84 = *a4;
            if (BYTE2(v90) - 3 <= 1)
              goto LABEL_195;
            v140 = 16401;
            goto LABEL_215;
          case 9u:
            v84 = *a4;
            if (BYTE2(v90) - 3 <= 1)
              goto LABEL_195;
            v140 = 16402;
            goto LABEL_215;
          case 0xAu:
            v84 = *a4;
            if (BYTE2(v90) - 3 <= 1)
              goto LABEL_195;
            v140 = 16403;
LABEL_215:
            JSC::DFG::ClobberSet::add(v84, v140, a3, (uint64_t)a4, a5, a6, a7, a8);
            if (*((_WORD *)a2 + 9) == 146)
              v141 = *((_DWORD *)a2 + 20);
            else
              v141 = *((_DWORD *)a2 + 18);
            if ((v141 & 0xFE0000) == 0)
              return;
            v84 = *a4;
            v83 = 16388;
            break;
          case 0xBu:
            v84 = *a4;
            if ((v90 & 0xFE0000) != 0)
              goto LABEL_195;
            v83 = 16403;
            goto LABEL_357;
          case 0x19u:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
            __break(0xC471u);
            JUMPOUT(0x19838AA80);
          default:
            __break(0xC471u);
            JUMPOUT(0x19838ABD4);
        }
        goto LABEL_357;
      case 0x6D:
        JSC::DFG::ClobberSet::add(*a4, 16388, a3, (uint64_t)a4, a5, a6, a7, a8);
        JSC::DFG::ClobberSet::add(*a4, 16389, v248, v249, v250, v251, v252, v253);
        JSC::DFG::ClobberSet::add(*a4, 16390, v254, v255, v256, v257, v258, v259);
        JSC::DFG::ClobberSet::add(*a4, 16391, v260, v261, v262, v263, v264, v265);
        JSC::DFG::ClobberSet::add(*a4, 16392, v266, v267, v268, v269, v270, v271);
        JSC::DFG::ClobberSet::add(*a4, 16393, v272, v273, v274, v275, v276, v277);
        JSC::DFG::ClobberSet::add(*a4, 16394, v278, v279, v280, v281, v282, v283);
        JSC::DFG::ClobberSet::add(*a4, 16395, v284, v285, v286, v287, v288, v289);
        JSC::DFG::ClobberSet::add(*a4, 16396, v290, v291, v292, v293, v294, v295);
        JSC::DFG::ClobberSet::add(*a4, 16397, v296, v297, v298, v299, v300, v301);
        JSC::DFG::ClobberSet::add(*a4, 16399, v302, v303, v304, v305, v306, v307);
        JSC::DFG::ClobberSet::add(*a4, 16400, v308, v309, v310, v311, v312, v313);
        JSC::DFG::ClobberSet::add(*a4, 16401, v314, v315, v316, v317, v318, v319);
        JSC::DFG::ClobberSet::add(*a4, 16402, v320, v321, v322, v323, v324, v325);
        JSC::DFG::ClobberSet::add(*a4, 16403, v326, v327, v328, v329, v330, v331);
        JSC::DFG::ClobberSet::add(*a4, 16404, v332, v333, v334, v335, v336, v337);
        JSC::DFG::ClobberSet::add(*a4, 16405, v338, v339, v340, v341, v342, v343);
        JSC::DFG::ClobberSet::add(*a4, 16406, v344, v345, v346, v347, v348, v349);
        JSC::DFG::ClobberSet::add(*a4, 16407, v350, v351, v352, v353, v354, v355);
        JSC::DFG::ClobberSet::add(*a4, 16408, v356, v357, v358, v359, v360, v361);
        JSC::DFG::ClobberSet::add(*a4, 16409, v362, v363, v364, v365, v366, v367);
        JSC::DFG::ClobberSet::add(*a4, 16410, v368, v369, v370, v371, v372, v373);
        JSC::DFG::ClobberSet::add(*a4, 16411, v374, v375, v376, v377, v378, v379);
        JSC::DFG::ClobberSet::add(*a4, 16412, v380, v381, v382, v383, v384, v385);
        JSC::DFG::ClobberSet::add(*a4, 16413, v386, v387, v388, v389, v390, v391);
        JSC::DFG::ClobberSet::add(*a4, 16414, v392, v393, v394, v395, v396, v397);
        JSC::DFG::ClobberSet::add(*a4, 16415, v398, v399, v400, v401, v402, v403);
        JSC::DFG::ClobberSet::add(*a4, 16416, v404, v405, v406, v407, v408, v409);
        JSC::DFG::ClobberSet::add(*a4, 16417, v410, v411, v412, v413, v414, v415);
        JSC::DFG::ClobberSet::add(*a4, 16418, v416, v417, v418, v419, v420, v421);
        JSC::DFG::ClobberSet::add(*a4, 16419, v422, v423, v424, v425, v426, v427);
        JSC::DFG::ClobberSet::add(*a4, 16420, v428, v429, v430, v431, v432, v433);
        JSC::DFG::ClobberSet::add(*a4, 16421, v434, v435, v436, v437, v438, v439);
        JSC::DFG::ClobberSet::add(*a4, 16422, v440, v441, v442, v443, v444, v445);
        v446 = *a4;
        v447 = 16423;
        goto LABEL_355;
      case 0x87:
        JSC::DFG::ClobberSet::add(*a4, 16394, a3, (uint64_t)a4, a5, a6, a7, a8);
        JSC::DFG::ClobberSet::add(*a4, 16395, v93, v94, v95, v96, v97, v98);
        JSC::DFG::ClobberSet::add(*a4, 16393, v99, v100, v101, v102, v103, v104);
        if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 8) + 16) & 0x3E000) == 0x4000)
          goto LABEL_455;
        return;
      case 0x8B:
        JSC::DFG::ClobberSet::add(*a4, 16396, a3, (uint64_t)a4, a5, a6, a7, a8);
        v84 = *a4;
        v83 = 16394;
        goto LABEL_357;
      case 0x91:
      case 0x92:
        JSC::DFG::ClobberSet::add(*a4, 16394, a3, (uint64_t)a4, a5, a6, a7, a8);
        JSC::DFG::ClobberSet::add(*a4, 16393, v142, v143, v144, v145, v146, v147);
        JSC::DFG::ClobberSet::add(*a4, 16396, v148, v149, v150, v151, v152, v153);
        v84 = *a4;
        v83 = 16422;
        goto LABEL_357;
      case 0x96:
        v91 = &v607;
        goto LABEL_319;
      case 0x97:
        v91 = &v606;
        goto LABEL_319;
      case 0x9B:
        v81 = *(unsigned int *)(*((_QWORD *)a2 + 9) + 4);
        v82 = 15;
        goto LABEL_102;
      case 0x9C:
        JSC::DFG::ClobberSet::add(*a4, ((unint64_t)**((unsigned int **)a2 + 9) << 15) | 0xF, a3, (uint64_t)a4, a5, a6, a7, a8);
        v163 = *((_QWORD *)a2 + 9);
        v164 = *(unsigned int *)(v163 + 20);
        v165 = (v164 << 6) - 64;
        while (v165 != -64)
        {
          v166 = *(_DWORD *)(*(_QWORD *)(v163 + 8) + v165) - 2;
          v165 -= 64;
          if (v166 <= 3)
          {
            JSC::DFG::ClobberSet::add(*a4, 16394, v157, v158, v159, v160, v161, v162);
            v163 = *((_QWORD *)a2 + 9);
            v164 = *(unsigned int *)(v163 + 20);
            break;
          }
        }
        v167 = (v164 << 6) - 64;
        while (v164)
        {
          if (--v164 >= (unint64_t)*(unsigned int *)(v163 + 20))
          {
            __break(0xC471u);
            JUMPOUT(0x19838ADE4);
          }
          v168 = v167 - 64;
          v169 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v163 + 8) + v167));
          v167 = v168;
          if (v169)
          {
            v84 = *a4;
            v83 = 16396;
            goto LABEL_357;
          }
        }
        return;
      case 0x9D:
        JSC::DFG::ClobberSet::add(*a4, ((unint64_t)**((unsigned int **)a2 + 9) << 15) | 0xF, a3, (uint64_t)a4, a5, a6, a7, a8);
        if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9)))
          return;
        JSC::DFG::ClobberSet::add(*a4, 16394, v500, v501, v502, v503, v504, v505);
LABEL_455:
        v84 = *a4;
        v83 = 16399;
        goto LABEL_357;
      case 0x9E:
        v90 = *((_DWORD *)a2 + 18);
        if (v90 - 5 < 7)
          return;
        if (v90 == 25)
          goto LABEL_150;
        if (v90 - 12 < 2)
        {
          v91 = &v593;
          goto LABEL_319;
        }
        if (v90 == 3)
          goto LABEL_356;
        v545 = JSC::DFG::toTypedArrayType(v90);
        if (v545 == 12 || !v545)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x19838A888);
        }
LABEL_150:
        if ((v90 & 0x40000000) != 0)
          goto LABEL_151;
        return;
      case 0x9F:
        v138 = *((_DWORD *)a2 + 18);
        if (v138 != 25)
        {
          v561 = JSC::DFG::toTypedArrayType(v138);
          if (v561 == 12 || v561 == 0)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
            __break(0xC471u);
            JUMPOUT(0x19838ADDCLL);
          }
        }
        if ((v138 & 0x40000000) != 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
          __break(0xC471u);
          JUMPOUT(0x1983894DCLL);
        }
        return;
      case 0xA0:
        v544 = *((_DWORD *)a2 + 18);
        if (v544 == 25)
          goto LABEL_552;
        v567 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v567 == 12 || v567 == 0)
        {
          if (v544 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x19838AF78);
          }
          goto LABEL_356;
        }
        if (v544 == 3)
          goto LABEL_356;
LABEL_552:
        if ((v544 & 0x40000000) != 0)
          goto LABEL_151;
        v91 = &v592;
        goto LABEL_319;
      case 0xA1:
        if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
        {
          __break(0xC471u);
          JUMPOUT(0x19838AD74);
        }
        v91 = &v591;
        goto LABEL_319;
      case 0xA2:
        v542 = *((_DWORD *)a2 + 18);
        v543 = v542;
        if (v542 == 25)
          goto LABEL_547;
        v565 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v565 == 12 || v565 == 0)
        {
          if (v543 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x19838AF14);
          }
          goto LABEL_356;
        }
        if (v543 == 3)
          goto LABEL_356;
        if (*((_WORD *)a2 + 9) == 146)
          v542 = *((_DWORD *)a2 + 20);
        else
          v542 = *((_DWORD *)a2 + 18);
LABEL_547:
        if ((v542 & 0x40000000) == 0)
        {
          v91 = &v596;
          goto LABEL_319;
        }
        goto LABEL_151;
      case 0xA3:
        v540 = *((_DWORD *)a2 + 18);
        v541 = v540;
        if (v540 == 25)
          goto LABEL_544;
        v563 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v563 == 12 || v563 == 0)
        {
          if (v541 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x19838AEB0);
          }
        }
        else if (v541 != 3)
        {
          if (*((_WORD *)a2 + 9) == 146)
            v540 = *((_DWORD *)a2 + 20);
          else
            v540 = *((_DWORD *)a2 + 18);
LABEL_544:
          if ((v540 & 0x40000000) != 0)
          {
LABEL_151:
            v84 = *a4;
            v83 = 16423;
            goto LABEL_357;
          }
          v91 = &v595;
LABEL_319:
          v224 = a2;
LABEL_320:
          JSC::DFG::LazyNode::LazyNode(v91, v224);
          return;
        }
LABEL_356:
        v84 = *a4;
        v83 = 16424;
        goto LABEL_357;
      case 0xAC:
        v81 = *((unsigned int *)a2 + 18);
        v82 = 21;
        goto LABEL_102;
      case 0xAF:
        v81 = *((_QWORD *)a2 + 9);
        v82 = 36;
        goto LABEL_102;
      case 0xB2:
        v446 = *a4;
        v447 = 16422;
LABEL_355:
        JSC::DFG::ClobberSet::add(v446, v447, a3, (uint64_t)a4, a5, a6, a7, a8);
        goto LABEL_356;
      case 0xB4:
        goto LABEL_263;
      case 0xB5:
      case 0xDA:
      case 0xDE:
        v84 = *a4;
        v83 = 16408;
        goto LABEL_357;
      case 0xBE:
        v91 = &v599;
        goto LABEL_319;
      case 0xC1:
        v233 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v233 != 21 && (_DWORD)v233 != 49 && (_DWORD)v233 != 1)
          goto LABEL_194;
        v234 = *((_QWORD *)a2 + 4);
        v235 = v234 & 0xFF00FFFFFFFFFFFFLL;
        v236 = v234 & 0xFC000000000000;
        if (v235 && v236 != 0x4000000000000)
          goto LABEL_194;
        return;
      case 0xC2:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 > 2)
          goto LABEL_194;
        v91 = &v594;
        goto LABEL_319;
      case 0xC4:
        v492 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v492 == 11)
        {
          JSC::DFG::ClobberSet::add(*a4, 16407, a3, (uint64_t)a4, a5, a6, a7, a8);
          v84 = *a4;
          v83 = 16394;
          goto LABEL_357;
        }
        if ((_DWORD)v492)
        {
          __break(0xC471u);
          JUMPOUT(0x19838A440);
        }
        goto LABEL_194;
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
        v493 = v11 - 202;
        if (v493 >= 0xAu || ((0x3EFu >> v493) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19838AD24);
        }
        v494 = dword_1991556C8[(__int16)v493];
        v495 = (_DWORD *)((char *)a2 + 24);
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
        {
          v558 = v494 + *v495;
          if (*((_DWORD *)this + 41) <= v558)
          {
            __break(0xC471u);
            JUMPOUT(0x19838AF90);
          }
          v496 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v558);
        }
        else
        {
          v496 = &v495[2 * v494];
        }
        v84 = *a4;
        if ((*v496 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_195;
        goto LABEL_444;
      case 0xCE:
        v539 = (uint64_t *)((char *)a2 + 24);
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
        {
          v560 = *v539;
          if (*((_DWORD *)this + 41) <= v560)
          {
            __break(0xC471u);
            JUMPOUT(0x19838AFECLL);
          }
          v539 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v560);
        }
        v155 = *v539 & 0xFC000000000000;
        v156 = 0x4000000000000;
        goto LABEL_236;
      case 0xD7:
        if (*((unsigned __int8 *)a2 + 72) - 7 >= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x198389BC0);
        }
        return;
      case 0xDD:
        goto LABEL_262;
      case 0xDF:
      case 0xE0:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000
          || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x40000000000000
          || (*((_QWORD *)a2 + 5) & 0xFC000000000000) != 0x54000000000000)
        {
          goto LABEL_194;
        }
LABEL_262:
        JSC::DFG::ClobberSet::add(*a4, 16408, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_263:
        v84 = *a4;
        v83 = 16398;
        goto LABEL_357;
      case 0xE1:
        v155 = *((_QWORD *)a2 + 5) & 0xFC000000000000;
        v156 = 0x54000000000000;
        goto LABEL_236;
      case 0xE6:
        v211 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((v211 - 1) < 2)
          return;
        if ((_DWORD)v211)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x1983899F0);
        }
        goto LABEL_194;
      case 0xE7:
      case 0xE8:
      case 0xE9:
      case 0xEA:
      case 0xED:
        v85 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v85 == 21)
        {
          if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x54000000000000)
            return;
LABEL_170:
          v84 = *a4;
LABEL_171:
          v83 = 16407;
          goto LABEL_357;
        }
        if ((_DWORD)v85)
          return;
LABEL_123:
        v92 = *((_BYTE *)a2 + 38);
LABEL_124:
        if ((v92 & 0xFC) != 0)
          return;
        goto LABEL_194;
      case 0x106:
        JSC::DFG::ClobberSet::add(*a4, 16407, a3, (uint64_t)a4, a5, a6, a7, a8);
        v122 = *((_QWORD *)a2 + 4);
        v123 = v122;
        if ((v122 & 0x80000000) != 0)
        {
          JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v122) + 0x2000000000000, v116, v117, v118, v119, v120, v121);
        }
        else
        {
          JSC::DFG::Graph::freeze((uint64_t)this, v122 | 0xFFFE000000000000, v116, v117, v118, v119, v120, v121);
          if (!(_DWORD)v122)
            return;
        }
        v130 = *((unsigned __int16 *)a2 + 9);
        switch(v130)
        {
          case 267:
            goto LABEL_358;
          case 264:
            LOBYTE(v131) = *((_DWORD *)a2 + 19) & 0xF;
            break;
          case 352:
LABEL_358:
            LOBYTE(v131) = *((_DWORD *)a2 + 21) & 0xF;
            break;
          default:
            v131 = *((_DWORD *)a2 + 18);
            break;
        }
        if (v131 - 4 < 6
          || v131 <= 0x19u && ((1 << v131) & 0x2A00000) != 0)
        {
          v132 = *((unsigned int *)this + 107);
          if (v122 >= v132)
          {
            if ((_DWORD)v132)
            {
              v212 = (unsigned int *)*((_QWORD *)this + 52);
              v213 = 4 * v132;
              do
              {
                v214 = *v212;
                if (v214 < v122)
                {
                  if (*((_DWORD *)this + 41) <= (v214 + *((_DWORD *)a2 + 6)))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19838AE0CLL);
                  }
                  if ((v214 & 0x80000000) != 0)
                    v215 = COERCE__INT64((double)v214) + 0x2000000000000;
                  else
                    v215 = v214 | 0xFFFE000000000000;
                  JSC::DFG::Graph::freeze((uint64_t)this, v215, v124, v125, v126, v127, v128, v129);
                }
                ++v212;
                v213 -= 4;
              }
              while (v213);
            }
          }
          else
          {
            v133 = 0;
            do
            {
              if (*((_DWORD *)this + 41) <= (v133 + *((_DWORD *)a2 + 6)))
              {
                __break(0xC471u);
                JUMPOUT(0x19838AD54);
              }
              if ((v133 & 0x80000000) != 0)
                v134 = COERCE__INT64((double)v133) + 0x2000000000000;
              else
                v134 = v133 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v134, v124, v125, v126, v127, v128, v129);
              ++v133;
            }
            while (v123 != v133);
          }
        }
        return;
      case 0x107:
        if (*((_DWORD *)a2 + 8))
        {
          v532 = *((_QWORD *)a2 + 3);
          v533 = *((_DWORD *)this + 41);
          v534 = v533 >= v532;
          LODWORD(v535) = v533 - v532;
          if (v534)
            v535 = v535;
          else
            v535 = 0;
          v536 = *((unsigned int *)a2 + 8) - 1;
          do
          {
            if (!v535)
            {
              __break(0xC471u);
              JUMPOUT(0x19838AE2CLL);
            }
            v537 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v532++) & 0xFF00FFFFFFFFFFFFLL)
                                       + 0x12);
            v538 = v537 == 350 || v536-- == 0;
            --v535;
          }
          while (!v538);
        }
        goto LABEL_170;
      case 0x10A:
        JSC::DFG::ClobberSet::add(*a4, 16407, a3, (uint64_t)a4, a5, a6, a7, a8);
        v244 = *((unsigned int *)a2 + 20);
        if ((v244 & 0x80000000) != 0)
          v245 = COERCE__INT64((double)v244) + 0x2000000000000;
        else
          v245 = v244 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v245, v238, v239, v240, v241, v242, v243);
        return;
      case 0x10B:
        JSC::DFG::ClobberSet::add(*a4, 16407, a3, (uint64_t)a4, a5, a6, a7, a8);
        v178 = (uint64_t *)*((_QWORD *)a2 + 9);
        v179 = *v178;
        v180 = *(unsigned int *)(*v178 + 8);
        if ((v180 & 0x80000000) != 0)
          v181 = COERCE__INT64((double)v180) + 0x2000000000000;
        else
          v181 = v180 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v181, v172, v173, v174, v175, v176, v177);
        v189 = *((unsigned __int16 *)a2 + 9);
        switch(v189)
        {
          case 267:
            goto LABEL_404;
          case 264:
            LOBYTE(v190) = *((_DWORD *)a2 + 19) & 0xF;
            break;
          case 352:
LABEL_404:
            LOBYTE(v190) = *((_DWORD *)a2 + 21) & 0xF;
            break;
          default:
            v190 = *((_DWORD *)a2 + 18);
            break;
        }
        if (v190 - 4 < 6
          || v190 <= 0x19u && ((1 << v190) & 0x2A00000) != 0)
        {
          v191 = *((unsigned int *)this + 107);
          if (v191 <= v180)
          {
            v588[0] = 0;
            v588[1] = 0;
            if ((_DWORD)v191)
            {
              v457 = (unsigned int *)*((_QWORD *)this + 52);
              v458 = 4 * v191;
              do
              {
                v459 = *v457;
                LODWORD(v569) = v459;
                if (v459 < v180)
                {
                  if (HIDWORD(v588[1]) == LODWORD(v588[1]))
                  {
                    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v588, (unint64_t)&v569);
                  }
                  else
                  {
                    *((_DWORD *)v588[0] + HIDWORD(v588[1])) = v459;
                    ++HIDWORD(v588[1]);
                  }
                }
                ++v457;
                v458 -= 4;
              }
              while (v458);
              v462 = v588[0];
              if (HIDWORD(v588[1]))
              {
                v463 = v179 + 16;
                v464 = 4 * HIDWORD(v588[1]);
                do
                {
                  v465 = *(unsigned int *)v462;
                  if ((v465 & 0x80000000) != 0)
                    v466 = COERCE__INT64((double)v465) + 0x2000000000000;
                  else
                    v466 = v465 | 0xFFFE000000000000;
                  JSC::DFG::Graph::freeze((uint64_t)this, v466, v183, v184, v185, v186, v187, v188);
                  if ((*(_BYTE *)(v179 + 4) & 0xE) == 6)
                    v473 = *(_QWORD *)(v463 + 8 * v465) + 0x2000000000000;
                  else
                    v473 = *(_QWORD *)(v463 + 8 * v465);
                  JSC::DFG::Graph::freeze((uint64_t)this, v473, v467, v468, v469, v470, v471, v472);
                  v462 = (WTF *)((char *)v462 + 4);
                  v464 -= 4;
                }
                while (v464);
                v462 = v588[0];
              }
              if (v462)
              {
                v588[0] = 0;
                LODWORD(v588[1]) = 0;
                WTF::fastFree((unint64_t)v462, v182, v183, v184, v185, v186, v187, v188);
              }
            }
          }
          else if ((_DWORD)v180)
          {
            v192 = 0;
            v193 = v179 + 16;
            do
            {
              if ((v192 & 0x80000000) != 0)
                v194 = COERCE__INT64((double)v192) + 0x2000000000000;
              else
                v194 = v192 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v194, v183, v184, v185, v186, v187, v188);
              if ((*(_BYTE *)(v179 + 4) & 0xE) == 6)
                v201 = *(_QWORD *)(v193 + 8 * v192) + 0x2000000000000;
              else
                v201 = *(_QWORD *)(v193 + 8 * v192);
              JSC::DFG::Graph::freeze((uint64_t)this, v201, v195, v196, v197, v198, v199, v200);
              ++v192;
            }
            while (v180 != v192);
          }
        }
        return;
      case 0x10D:
        v210 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (!(_DWORD)v210)
          goto LABEL_194;
        if ((_DWORD)v210 != 1 && (_DWORD)v210 != 52)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198389990);
        }
        goto LABEL_170;
      case 0x10F:
        v527 = *((_QWORD *)a2 + 3);
        v528 = v527 & 0xFF00FFFFFFFFFFFFLL;
        v529 = v527 & 0xFC000000000000;
        v84 = *a4;
        if (v528)
          v530 = v529 == 0x54000000000000;
        else
          v530 = 1;
        if (!v530)
          goto LABEL_195;
        goto LABEL_171;
      case 0x114:
        isWatchingHavingABadTimeWatchpoint = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v84 = *a4;
        if ((isWatchingHavingABadTimeWatchpoint & 1) == 0)
          goto LABEL_195;
        goto LABEL_171;
      case 0x115:
        v474 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v474 == 352)
          return;
        if (v474 == 349)
          goto LABEL_170;
        goto LABEL_194;
      case 0x123:
        v91 = &v598;
        goto LABEL_319;
      case 0x136:
        v91 = &v608;
        goto LABEL_319;
      case 0x13E:
      case 0x145:
        v139 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (v139 > 0x34)
          goto LABEL_207;
        if (((1 << v139) & 0x12026000400002) != 0)
          return;
        if (((1 << v139) & 0x101) != 0)
          goto LABEL_194;
        if (v139 != 24)
        {
LABEL_207:
          __break(0xC471u);
          JUMPOUT(0x198389548);
        }
        goto LABEL_356;
      case 0x13F:
        v155 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
        v156 = 0x54000000000000;
        goto LABEL_236;
      case 0x146:
        v514 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v514 == 28)
          return;
        if ((_DWORD)v514)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19838A550);
        }
        goto LABEL_194;
      case 0x158:
        v81 = *((unsigned int *)a2 + 18);
        v82 = 33;
        goto LABEL_102;
      case 0x159:
        v112 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 40);
        if ((v112 & 1) == 0)
          goto LABEL_220;
        goto LABEL_167;
      case 0x164:
        v91 = &v590;
        goto LABEL_319;
      case 0x165:
        JSC::DFG::ClobberSet::add(*a4, ((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x14, a3, (uint64_t)a4, a5, a6, a7, a8);
        v224 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v91 = &v589;
        goto LABEL_320;
      case 0x167:
      case 0x168:
      case 0x169:
      case 0x16A:
        v112 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 112);
        if ((v112 & 1) != 0)
LABEL_167:
          v113 = (v112 >> 1) & 3;
        else
LABEL_220:
          v113 = *(unsigned __int8 *)(v112 + 4);
        if (v113 != 2)
          JSC::DFG::ClobberSet::add(*a4, 16422, a3, (uint64_t)a4, a5, a6, a7, a8);
        goto LABEL_170;
      case 0x178:
      case 0x179:
      case 0x17A:
      case 0x17D:
        v84 = *a4;
        v83 = 16418;
        goto LABEL_357;
      case 0x17E:
      case 0x17F:
        v84 = *a4;
        v83 = 16392;
        goto LABEL_357;
      case 0x180:
      case 0x182:
        if ((_DWORD)v11 == 386)
        {
          v154 = *((unsigned __int8 *)a2 + 80);
          if (v154 == 2)
          {
            if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x19838ADECLL);
            }
            v155 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000;
            v156 = 0x20000000000000;
LABEL_236:
            if (v155 == v156)
              return;
            goto LABEL_194;
          }
          if (v154 != 1)
            goto LABEL_194;
          v202 = 11;
        }
        else
        {
          v202 = 12;
        }
        v203 = BYTE2(*((_DWORD *)a2 + 18));
        if (*((_DWORD *)a2 + 18) != 9)
        {
          switch(*((_DWORD *)a2 + 18))
          {
            case 3u:
              goto LABEL_356;
            case 7u:
              if (v203 > 1)
                goto LABEL_194;
              v548 = *((_QWORD *)a2 + 3);
              v549 = *((_DWORD *)this + 41);
              if (v549 <= v548)
              {
                __break(0xC471u);
                JUMPOUT(0x19838AF98);
              }
              if (v549 <= (int)v548 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19838AFA0);
              }
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)v612, v202, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
              v91 = &v611;
              break;
            case 8u:
              if (v203 > 1)
                goto LABEL_194;
              v497 = *((_QWORD *)a2 + 3);
              v498 = *((_DWORD *)this + 41);
              if (v498 <= v497)
              {
                __break(0xC471u);
                JUMPOUT(0x19838AE34);
              }
              if (v498 <= (int)v497 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19838AE3CLL);
              }
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)v610, v202, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
              v91 = &v609;
              break;
            case 0xAu:
              goto LABEL_392;
            default:
              goto LABEL_194;
          }
          goto LABEL_319;
        }
        if (v203 > 1)
          goto LABEL_194;
        v204 = *((_DWORD *)a2 + 6);
        v205 = *((_DWORD *)this + 41);
        if (v205 <= v204)
        {
          __break(0xC471u);
          JUMPOUT(0x19838AE04);
        }
        if (v205 <= v204 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1983898B8);
        }
        return;
      case 0x18C:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
          v460 = 16413;
        else
          v460 = 16414;
        JSC::DFG::ClobberSet::add(*a4, v460, a3, (uint64_t)a4, a5, a6, a7, a8);
        v91 = &v587;
        goto LABEL_319;
      case 0x18D:
        v91 = &v586;
        goto LABEL_319;
      case 0x18E:
        v91 = &v585;
        goto LABEL_319;
      case 0x18F:
        v91 = &v584;
        goto LABEL_319;
      case 0x190:
        if (*((_DWORD *)a2 + 18))
          v531 = 16412;
        else
          v531 = 16411;
        JSC::DFG::ClobberSet::add(*a4, v531, a3, (uint64_t)a4, a5, a6, a7, a8);
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v583, 48, v531, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v91 = &v582;
        goto LABEL_319;
      case 0x191:
        v91 = &v581;
        goto LABEL_319;
      case 0x192:
        v91 = &v580;
        goto LABEL_319;
      case 0x193:
        v91 = &v579;
        goto LABEL_319;
      case 0x194:
        v84 = *a4;
        v83 = 16412;
        goto LABEL_357;
      case 0x195:
        v170 = *((_DWORD *)a2 + 6);
        v171 = *((_DWORD *)this + 41);
        if (v171 <= v170)
        {
          __break(0xC471u);
          JUMPOUT(0x19838ADF4);
        }
        if (v171 <= v170 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19838ADFCLL);
        }
        v84 = *a4;
        v83 = 16411;
        goto LABEL_357;
      case 0x196:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
          v83 = 16411;
        else
          v83 = 16412;
        v84 = *a4;
        goto LABEL_357;
      case 0x197:
        v246 = *((_QWORD *)a2 + 3);
        if ((v246 & 0xFC000000000000) == 0x88000000000000)
          v247 = 16415;
        else
          v247 = 16416;
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v578, 55, v247, v246, *((_QWORD *)a2 + 4), 0);
        v91 = &v577;
        goto LABEL_319;
      case 0x198:
        if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x2C000000000000)
          JSC::DFG::ClobberSet::add(*a4, 16424, a3, (uint64_t)a4, a5, a6, a7, a8);
        JSC::DFG::ClobberSet::add(*a4, 16416, a3, (uint64_t)a4, a5, a6, a7, a8);
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v576, 55, 16416, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v224 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v91 = &v575;
        goto LABEL_320;
      case 0x199:
        v225 = *((_QWORD *)a2 + 3);
        v226 = *((_DWORD *)this + 41);
        if (v226 <= v225)
        {
          __break(0xC471u);
          JUMPOUT(0x19838AE14);
        }
        v227 = (v225 + 1);
        if (v226 <= v227)
        {
          __break(0xC471u);
          JUMPOUT(0x19838AE1CLL);
        }
        v228 = (v225 + 2);
        if (v226 <= v228)
        {
          __break(0xC471u);
          JUMPOUT(0x19838AE24);
        }
        v229 = v225;
        v230 = *((_QWORD *)this + 19);
        if ((*(_QWORD *)(v230 + 8 * v227) & 0xFC000000000000) != 0x2C000000000000)
          JSC::DFG::ClobberSet::add(*a4, 16424, a3, (uint64_t)a4, a5, a6, a7, a8);
        JSC::DFG::ClobberSet::add(*a4, 16415, a3, (uint64_t)a4, a5, a6, a7, a8);
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v574, 55, 16415, *(_QWORD *)(v230 + 8 * v229), *(_QWORD *)(v230 + 8 * v227), 0);
        v224 = (JSC::DFG::Node *)(*(_QWORD *)(v230 + 8 * v228) & 0xFF00FFFFFFFFFFFFLL);
        v91 = &v573;
        goto LABEL_320;
      case 0x1A0:
        v216 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
        if (!v216)
          goto LABEL_194;
        v217 = *(unsigned int *)(v216 + 24);
        v218 = *(_DWORD *)(v216 + 28);
        v219 = (unsigned __int16)*(_DWORD *)(v216 + 24);
        if (v219 != WORD1(v217))
        {
          v220 = WORD1(v217) == 0xFFFF && v219 == 0;
          v221 = (v217 << 15) | 0x25;
          if (v220)
            v222 = 16387;
          else
            v222 = v221;
          JSC::DFG::ClobberSet::add(*a4, v222, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        if ((_WORD)v218)
        {
          if (v218 >= 0xFFFF0000 && (unsigned __int16)v218 == 0xFFFF)
            return;
        }
        else if (v218 > 0xFFFEFFFF)
        {
          return;
        }
        v91 = &v597;
        goto LABEL_319;
      case 0x1A1:
        v81 = *(unsigned int *)(*((_QWORD *)a2 + 9) + 48);
        if ((unsigned __int16)*(_DWORD *)(*((_QWORD *)a2 + 9) + 48) == WORD1(v81))
          return;
        if ((unsigned __int16)*(_DWORD *)(*((_QWORD *)a2 + 9) + 48))
          v526 = 0;
        else
          v526 = WORD1(v81) == 0xFFFF;
        if (v526)
          goto LABEL_194;
        v82 = 37;
LABEL_102:
        v83 = v82 | (v81 << 15);
        v84 = *a4;
        goto LABEL_357;
      case 0x1AB:
      case 0x1AC:
        if ((*((_BYTE *)a2 + 74) & 1) != 0)
          goto LABEL_442;
        v499 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v571, v499, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
        v91 = &v570;
        goto LABEL_319;
      case 0x1AD:
        if ((*((_BYTE *)a2 + 74) & 1) != 0)
LABEL_442:
          JSC::DFG::ClobberSet::add(*a4, 16423, a3, (uint64_t)a4, a5, a6, a7, a8);
        v84 = *a4;
LABEL_444:
        v83 = 16406;
        goto LABEL_357;
      case 0x1AE:
      case 0x1AF:
        v91 = &v572;
        goto LABEL_319;
      case 0x1B0:
        v84 = *a4;
        v83 = 16410;
        goto LABEL_357;
      case 0x1B1:
        __break(0xC471u);
        JUMPOUT(0x19838A620);
      default:
        *(_OWORD *)v588 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v11];
        WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)v588, &v569);
        if (v569)
          v550 = (const char *)(v569 + 16);
        else
          v550 = 0;
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v550);
        WTF::CString::~CString((WTF::CString *)&v569, v551, v552, v553, v554, v555, v556, v557);
        __break(0xC471u);
        JUMPOUT(0x19838AA08);
    }
  }
  v508 = *((unsigned __int16 *)a2 + 9);
  if (v508 > 0xC9)
  {
    if (v508 - 202 > 0x3E || ((1 << (v508 + 54)) & 0x400000000E002FEFLL) == 0)
    {
      v510 = v508 - 333;
      if (v510 > 0x3A || ((1 << v510) & 0x7A8000000000003) == 0)
      {
LABEL_588:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
        __break(0xC471u);
        JUMPOUT(0x19838ABA0);
      }
    }
    goto LABEL_194;
  }
  v559 = v508 - 101;
  if (v508 - 101 > 0x3E)
    goto LABEL_587;
  if (((1 << v559) & 0x7E0070000000000FLL) == 0)
  {
    if (((1 << v559) & 0x18000000000) == 0)
    {
LABEL_587:
      if (v508 - 92 >= 2)
        goto LABEL_588;
      goto LABEL_194;
    }
    goto LABEL_2;
  }
LABEL_194:
  v84 = *a4;
LABEL_195:
  v83 = 16387;
LABEL_357:
  JSC::DFG::ClobberSet::add(v84, v83, a3, (uint64_t)a4, a5, a6, a7, a8);
}

void JSC::DFG::clobberize<JSC::DFG::ClobberSetAdd,JSC::DFG::ClobberSetAdd,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::ClobberSetAdd,JSC::DFG::ClobberSetAdd,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ClobberSetAdd const&,JSC::DFG::ClobberSetAdd const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(uint64_t a1, JSC::DFG::Node *this, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v8;
  uint64_t i;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  _DWORD *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t *v126;
  uint64_t v127;
  int v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  char v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  _DWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  _QWORD *v480;
  _QWORD *v481;
  _QWORD *v482;
  _QWORD *v483;
  _QWORD *v484;
  _QWORD *v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  _BOOL4 v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t v514;
  _QWORD *v515;
  _QWORD *v516;
  _QWORD *v517;
  int v518;
  uint64_t v519;
  unsigned int v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  BOOL v529;
  uint64_t v530;
  uint64_t v531;
  BOOL v532;
  uint64_t v533;
  uint64_t v534;
  unsigned int v535;
  BOOL v536;
  uint64_t v537;
  _QWORD *v538;
  _QWORD *v539;
  _QWORD *v540;
  _QWORD *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  int v562;
  int v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unsigned int v588;
  uint64_t v589;
  uint64_t v590;
  _BOOL4 v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  _DWORD *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  int v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  BOOL v615;
  uint64_t v616;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t *v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  int v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  unsigned int v676;
  unint64_t v677;
  unsigned int v678;
  unsigned int *v679;
  uint64_t v680;
  unsigned int v681;
  _DWORD *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unint64_t v693;
  unsigned int *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  unsigned int v704;
  unsigned int v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unsigned int v712;
  unsigned int v713;
  unsigned int v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t *v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  int v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  unsigned int v792;
  unsigned int v793;
  unsigned int v794;
  unsigned int v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  unsigned int v802;
  unsigned int v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  unsigned int v810;
  unsigned int v811;
  unsigned int v812;
  unsigned int v813;
  uint64_t v814;
  uint64_t v815;
  unsigned int v816;
  BOOL v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  unint64_t v821;
  uint64_t v822;
  unint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  unsigned int v827;
  BOOL v828;
  uint64_t v829;
  uint64_t v830;
  const char *v831;
  void *v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  _BYTE *v840;
  uint64_t v841;
  uint64_t casual;
  uint64_t v843;
  _BYTE *v844;
  uint64_t v845;
  uint64_t v846;
  unint64_t v847;
  uint64_t v848;
  unint64_t v849;
  unint64_t v850;
  uint64_t v851;
  unint64_t v852;
  unsigned int v853;
  uint64_t v854;
  unint64_t *v855;
  uint64_t v856;
  unint64_t v857;
  unint64_t v858;
  unsigned int v859;
  uint64_t v860;
  unint64_t *v861;
  uint64_t v862;
  unint64_t v863;
  unint64_t v864;
  uint64_t v865;
  uint64_t v866;
  __int128 v867;

  v8 = (uint64_t **)a4;
  i = *(_QWORD *)this & 0xFFFFFFFF8;
  if ((*(_QWORD *)this & 1) != 0)
  {
    for (i = *(_QWORD *)i; i; i = *(_QWORD *)i)
    {
      while (1)
      {
LABEL_3:
        v13 = *(_QWORD *)(i + 24);
        if ((*(_BYTE *)(i + 32) & 1) != 0)
        {
          v14 = (HIDWORD(v13) & 0xFFFFF | ((int)(v13 >> 28) >> 24 << 20)) + 3;
          JSC::DFG::ClobberSet::add(*a3, ((v14 & 0xFFFFFFFEFFFFFFFFLL | (((v14 >> 31) & 1) << 32)) << 15) | 2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v13 = *(_QWORD *)(i + 24);
        }
        if ((v13 >> 60) - 3 <= 2)
        {
          v15 = (HIDWORD(v13) & 0xFFFFF | ((int)(v13 >> 28) >> 24 << 20)) + 4;
          JSC::DFG::ClobberSet::add(*a3, ((v15 & 0xFFFFFFFEFFFFFFFFLL | (((v15 >> 31) & 1) << 32)) << 15) | 2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v16 = *(_QWORD *)(i + 16);
        i = v16 & 0xFFFFFFFF8;
        if ((v16 & 1) != 0)
          break;
        if (!i)
          goto LABEL_13;
      }
    }
  }
  else if (i)
  {
    goto LABEL_3;
  }
LABEL_13:
  if (*(_BYTE *)(a1 + 960))
  {
    v17 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48);
    JSC::DFG::ClobberSet::add(*a3, ((v17 & 0xFFFFFFFEFFFFFFFFLL | (((v17 >> 31) & 1) << 32)) << 15) | 2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  if (*(int *)(a1 + 952) <= 0 && JSC::DFG::Node::hasArrayMode(this))
  {
    v18 = *((unsigned __int16 *)this + 9);
    if (v18 > 0xC9)
    {
      if (v18 - 202 > 0x3E || ((1 << (v18 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v19 = v18 - 333;
        if (v19 > 0x3A || ((1 << v19) & 0x7A8000000000003) == 0)
        {
LABEL_48:
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 191, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x19838BAECLL);
        }
      }
      goto LABEL_27;
    }
    v20 = v18 - 101;
    if (v18 - 101 > 0x3E)
      goto LABEL_47;
    if (((1 << v20) & 0x7E0070000000000FLL) != 0)
      goto LABEL_27;
    if (((1 << v20) & 0x18000000000) == 0)
    {
LABEL_47:
      if (v18 - 92 >= 2)
        goto LABEL_48;
      goto LABEL_27;
    }
  }
  v21 = *((unsigned __int16 *)this + 9);
  switch(*((_WORD *)this + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1E:
    case 0x20:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x5B:
    case 0x86:
    case 0x94:
    case 0x95:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xB6:
    case 0xB7:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBF:
    case 0xC0:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xEB:
    case 0xEC:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x118:
    case 0x127:
    case 0x128:
    case 0x12A:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x17C:
    case 0x183:
    case 0x188:
    case 0x189:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19F:
      return;
    case 6:
      v22 = *a3;
      v39 = 16423;
      goto LABEL_106;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x62:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC3:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xD9:
    case 0xDB:
    case 0xDC:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x108:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14A:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x184:
    case 0x185:
    case 0x186:
    case 0x187:
    case 0x19B:
      goto LABEL_27;
    case 0xB:
      v23 = *a3;
      goto LABEL_313;
    case 0xC:
      v23 = *v8;
LABEL_313:
      v24 = 98306;
      goto LABEL_30;
    case 0xD:
      v613 = *((_QWORD *)this + 9);
      if (v613)
      {
        v714 = (HIDWORD(*(_QWORD *)(v613 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v613 + 24) >> 28) >> 24 << 20)) + 4;
        v24 = ((unint64_t)v714 << 15) | ((unint64_t)(v714 >> 31) << 47) | 2;
      }
      else
      {
        v24 = 131074;
      }
      goto LABEL_373;
    case 0xE:
      v23 = *v8;
      v24 = 131074;
      goto LABEL_30;
    case 0xF:
      v538 = (_QWORD *)*((_QWORD *)this + 9);
      v539 = v538;
      do
      {
        v540 = v539;
        v539 = (_QWORD *)*v539;
      }
      while (v539);
      if (v540 != v538)
        *v538 = v540;
      JSC::DFG::ClobberSet::add(*a3, (v540[3] << 15) | 2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v483 = (_QWORD *)*((_QWORD *)this + 9);
      v541 = v483;
      do
      {
        v485 = v541;
        v541 = (_QWORD *)*v541;
      }
      while (v541);
      goto LABEL_322;
    case 0x10:
      v480 = (_QWORD *)*((_QWORD *)this + 9);
      v481 = v480;
      do
      {
        v482 = v481;
        v481 = (_QWORD *)*v481;
      }
      while (v481);
      if (v482 != v480)
        *v480 = v482;
      JSC::DFG::ClobberSet::add(*v8, (v482[3] << 15) | 2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v483 = (_QWORD *)*((_QWORD *)this + 9);
      v484 = v483;
      do
      {
        v485 = v484;
        v484 = (_QWORD *)*v484;
      }
      while (v484);
LABEL_322:
      if (v485 != v483)
        *v483 = v485;
      return;
    case 0x11:
      v238 = **((_QWORD **)this + 9);
      goto LABEL_273;
    case 0x12:
      v238 = *((_QWORD *)this + 9);
LABEL_273:
      v239 = 2;
      goto LABEL_362;
    case 0x13:
      v117 = **((_QWORD **)this + 9);
      v118 = 2;
      goto LABEL_372;
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1F:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0x101:
    case 0x102:
    case 0x117:
    case 0x153:
    case 0x154:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x175:
    case 0x17B:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
      goto LABEL_131;
    case 0x1C:
      v515 = (_QWORD *)*((_QWORD *)this + 9);
      v516 = v515;
      do
      {
        v517 = v516;
        v516 = (_QWORD *)*v516;
      }
      while (v516);
      if (v517 != v515)
        *v515 = v517;
      v127 = (v517[3] << 15) | 2;
      v126 = *a3;
      goto LABEL_130;
    case 0x21:
      v117 = *((unsigned int *)this + 18);
      v118 = 35;
      goto LABEL_372;
    case 0x22:
      v23 = *v8;
      v24 = 16419;
      goto LABEL_30;
    case 0x29:
      if (((*((_QWORD *)this + 3) >> 50) & 0x3F) - 26 < 3)
        return;
      goto LABEL_27;
    case 0x2A:
    case 0x142:
    case 0x143:
      v35 = *((_BYTE *)this + 30);
      goto LABEL_68;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v25 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      switch((_DWORD)v25)
      {
        case 0x1A:
          v26 = *((_QWORD *)this + 4) & 0xFC000000000000;
          v27 = 0x68000000000000;
          break;
        case 0x1C:
          v26 = *((_QWORD *)this + 4) & 0xFC000000000000;
          v27 = 0x70000000000000;
          break;
        case 0x1B:
          v26 = *((_QWORD *)this + 4) & 0xFC000000000000;
          v27 = 0x6C000000000000;
          break;
        default:
          goto LABEL_27;
      }
      if (v26 != v27)
        goto LABEL_27;
LABEL_129:
      v126 = *a3;
      v127 = 16385;
LABEL_130:
      JSC::DFG::ClobberSet::add(v126, v127, (uint64_t)a3, a4, a5, a6, a7, a8);
      goto LABEL_131;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*((_BYTE *)this + 30) & 0xFC) != 0)
        goto LABEL_43;
      goto LABEL_27;
    case 0x3F:
      if (((*((_QWORD *)this + 3) >> 50) & 0x3F) - 1 < 2)
        return;
      goto LABEL_27;
    case 0x40:
    case 0x42:
    case 0x44:
      v57 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if (((*((_QWORD *)this + 3) >> 50) & 0x3F) <= 0x30)
      {
        if ((_DWORD)v57)
        {
          if ((_DWORD)v57 != 1)
            goto LABEL_134;
          return;
        }
LABEL_27:
        v22 = *a3;
        goto LABEL_28;
      }
      if ((_DWORD)v57 != 49 && (_DWORD)v57 != 52)
      {
LABEL_134:
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 491, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19838C04CLL);
      }
      return;
    case 0x41:
      v614 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      v615 = v614 > 0x34;
      v616 = (1 << v614) & 0x12000000000002;
      if (!v615 && v616 != 0)
        return;
      goto LABEL_27;
    case 0x46:
      v642 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v642 != 1 && (_DWORD)v642 != 49)
        goto LABEL_27;
      return;
    case 0x49:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x131:
      v33 = *((_QWORD *)this + 3) & 0xFC000000000000;
      v34 = 0xC4000000000000;
      goto LABEL_386;
    case 0x4B:
      JSC::DFG::ClobberSet::add(*a3, 16409, (uint64_t)a3, a4, a5, a6, a7, a8);
      v23 = *v8;
      v24 = 16409;
      goto LABEL_30;
    case 0x52:
    case 0x53:
      v114 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if (v114 > 0x34)
        goto LABEL_102;
      if (((1 << v114) & 0x1200001C000002) != 0)
        return;
      if (v114)
      {
LABEL_102:
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 849, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19838BE8CLL);
      }
      goto LABEL_27;
    case 0x5C:
    case 0x5D:
      v104 = *((_DWORD *)this + 18);
      v105 = *((_DWORD *)this + 14) & 7;
      if (v105 >= 2 && v105 - 3 >= 3)
      {
        if (v105 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x19838D430);
        }
        __break(0xC471u);
        JUMPOUT(0x19838DAF0);
      }
      switch(*((_DWORD *)this + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 0x17u:
        case 0x18u:
          goto LABEL_27;
        case 3u:
          goto LABEL_131;
        case 5u:
          if (BYTE2(v104) - 3 > 1)
            return;
          goto LABEL_27;
        case 6u:
          return;
        case 7u:
          if (BYTE2(v104) > 3u || BYTE2(v104) == 2)
            goto LABEL_27;
          JSC::DFG::ClobberSet::add(*a3, 16388, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::ClobberSet::add(*a3, 16400, v804, v805, v806, v807, v808, v809);
          v810 = *((_DWORD *)this + 6);
          v811 = *(_DWORD *)(a1 + 164);
          if (v811 <= v810)
          {
            __break(0xC471u);
            JUMPOUT(0x19838E060);
          }
          if (v811 <= v810 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19838D7D4);
          }
          return;
        case 8u:
          if (BYTE2(v104) > 3u || BYTE2(v104) == 2)
            goto LABEL_27;
          JSC::DFG::ClobberSet::add(*a3, 16388, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::ClobberSet::add(*a3, 16401, v786, v787, v788, v789, v790, v791);
          v792 = *((_DWORD *)this + 6);
          v793 = *(_DWORD *)(a1 + 164);
          if (v793 <= v792)
          {
            __break(0xC471u);
            JUMPOUT(0x19838E050);
          }
          if (v793 <= v792 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19838D6F4);
          }
          return;
        case 9u:
          if (BYTE2(v104) > 3u || BYTE2(v104) == 2)
            goto LABEL_27;
          JSC::DFG::ClobberSet::add(*a3, 16388, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::ClobberSet::add(*a3, 16402, v796, v797, v798, v799, v800, v801);
          v802 = *((_DWORD *)this + 6);
          v803 = *(_DWORD *)(a1 + 164);
          if (v803 <= v802)
          {
            __break(0xC471u);
            JUMPOUT(0x19838E058);
          }
          if (v803 <= v802 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19838D788);
          }
          return;
        case 0xAu:
        case 0xBu:
          v22 = *a3;
          if (BYTE2(v104) <= 1u)
            goto LABEL_482;
          goto LABEL_28;
        case 0xCu:
          v22 = *a3;
          if (BYTE2(v104) > 1u)
            goto LABEL_28;
          JSC::DFG::ClobberSet::add(v22, 16404, (uint64_t)a3, a4, a5, a6, a7, a8);
          v794 = *((_DWORD *)this + 6);
          v795 = *(_DWORD *)(a1 + 164);
          if (v795 <= v794)
          {
            __break(0xC471u);
            JUMPOUT(0x19838E068);
          }
          if (v795 <= v794 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19838D72CLL);
          }
          return;
        case 0xDu:
          JSC::DFG::ClobberSet::add(*a3, 16405, (uint64_t)a3, a4, a5, a6, a7, a8);
          v812 = *((_DWORD *)this + 6);
          v813 = *(_DWORD *)(a1 + 164);
          if (v813 <= v812)
          {
            __break(0xC471u);
            JUMPOUT(0x19838E040);
          }
          if (v813 <= v812 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19838D804);
          }
          return;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          JSC::DFG::ClobberSet::add(*a3, 16406, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::ClobberSet::add(*a3, 16423, v106, v107, v108, v109, v110, v111);
          if ((v104 & 0x40000000) != 0)
            goto LABEL_403;
          v112 = *((_DWORD *)this + 6);
          v113 = *(_DWORD *)(a1 + 164);
          if (v113 <= v112)
          {
            __break(0xC471u);
            JUMPOUT(0x19838E010);
          }
          if (v113 <= v112 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19838BE14);
          }
          return;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 1115, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x19838DD70);
        default:
          __break(0xC471u);
          JUMPOUT(0x19838DD28);
      }
      return;
    case 0x60:
    case 0x61:
    case 0x113:
    case 0x166:
      v23 = *a3;
      v24 = 16386;
      goto LABEL_30;
    case 0x63:
      JSC::DFG::ClobberSet::add(*a3, 16385, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*v8, 16387, v592, v593, v594, v595, v596, v597);
      v598 = (_DWORD *)*((_QWORD *)this + 9);
      JSC::DFG::ClobberSet::add(*v8, ((v598[1] | ((((unint64_t)v598[1] >> 31) & 1) << 32)) << 15) | 2, v599, v600, v601, v602, v603, v604);
      v611 = v598[6];
      if (v611)
      {
        v612 = v611 - 1;
        do
        {
          JSC::DFG::ClobberSet::add(*v8, (((v612 + *v598) | ((((unint64_t)(v612 + *v598) >> 31) & 1) << 32)) << 15) | 2, v605, v606, v607, v608, v609, v610);
          --v612;
        }
        while (v612 != -1);
      }
      return;
    case 0x64:
      JSC::DFG::ClobberSet::add(*a3, 16386, (uint64_t)a3, a4, a5, a6, a7, a8);
      v261 = (_DWORD *)*((_QWORD *)this + 9);
      JSC::DFG::ClobberSet::add(*v8, ((v261[1] | ((((unint64_t)v261[1] >> 31) & 1) << 32)) << 15) | 2, v262, v263, v264, v265, v266, v267);
      v274 = v261[6];
      if (v274)
      {
        v275 = v274 - 1;
        do
        {
          JSC::DFG::ClobberSet::add(*v8, (((v275 + *v261) | ((((unint64_t)(v275 + *v261) >> 31) & 1) << 32)) << 15) | 2, v268, v269, v270, v271, v272, v273);
          --v275;
        }
        while (v275 != -1);
      }
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v40 = *((_DWORD *)this + 6);
      v41 = *(_DWORD *)(a1 + 164);
      if (v41 <= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x19838DE78);
      }
      if (v41 <= v40 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19838DE80);
      }
      if (v41 <= v40 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19838DE88);
      }
      v42 = *((_DWORD *)this + 18);
      v43 = *((_DWORD *)this + 14) & 7;
      if (v43 >= 2 && v43 - 3 >= 3)
      {
        if (v43 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x19838D2ECLL);
        }
        __break(0xC471u);
        JUMPOUT(0x19838DAD0);
      }
      switch(*((_DWORD *)this + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 5u:
        case 6u:
        case 0xCu:
        case 0xDu:
        case 0x17u:
        case 0x18u:
          goto LABEL_27;
        case 3u:
          goto LABEL_131;
        case 7u:
          v22 = *a3;
          if (BYTE2(v42) - 3 <= 1)
            goto LABEL_28;
          JSC::DFG::ClobberSet::add(v22, 16388, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::ClobberSet::add(*a3, 16389, v717, v718, v719, v720, v721, v722);
          JSC::DFG::ClobberSet::add(*a3, 16400, v723, v724, v725, v726, v727, v728);
          v735 = *v8;
          v736 = 16400;
          goto LABEL_475;
        case 8u:
          v22 = *a3;
          if (BYTE2(v42) - 3 <= 1)
            goto LABEL_28;
          JSC::DFG::ClobberSet::add(v22, 16388, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::ClobberSet::add(*a3, 16389, v749, v750, v751, v752, v753, v754);
          JSC::DFG::ClobberSet::add(*a3, 16401, v755, v756, v757, v758, v759, v760);
          v735 = *v8;
          v736 = 16401;
          goto LABEL_475;
        case 9u:
          v22 = *a3;
          if (BYTE2(v42) - 3 <= 1)
            goto LABEL_28;
          JSC::DFG::ClobberSet::add(v22, 16388, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::ClobberSet::add(*a3, 16389, v773, v774, v775, v776, v777, v778);
          JSC::DFG::ClobberSet::add(*a3, 16402, v779, v780, v781, v782, v783, v784);
          v735 = *v8;
          v736 = 16402;
          goto LABEL_475;
        case 0xAu:
          v22 = *a3;
          if (BYTE2(v42) - 3 <= 1)
            goto LABEL_28;
          JSC::DFG::ClobberSet::add(v22, 16388, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::ClobberSet::add(*a3, 16389, v761, v762, v763, v764, v765, v766);
          JSC::DFG::ClobberSet::add(*a3, 16403, v767, v768, v769, v770, v771, v772);
          v735 = *v8;
          v736 = 16403;
LABEL_475:
          JSC::DFG::ClobberSet::add(v735, v736, v729, v730, v731, v732, v733, v734);
          if (*((_WORD *)this + 9) == 146)
            v785 = *((_DWORD *)this + 20);
          else
            v785 = *((_DWORD *)this + 18);
          if ((v785 & 0xFE0000) == 0)
            return;
          v23 = *v8;
          break;
        case 0xBu:
          v22 = *a3;
          if ((v42 & 0xFE0000) != 0)
            goto LABEL_28;
          JSC::DFG::ClobberSet::add(v22, 16388, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::ClobberSet::add(*a3, 16389, v737, v738, v739, v740, v741, v742);
          JSC::DFG::ClobberSet::add(*a3, 16403, v743, v744, v745, v746, v747, v748);
          v23 = *v8;
          goto LABEL_483;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          v32 = *a3;
          if ((v42 & 0x40000000) == 0)
            goto LABEL_404;
          JSC::DFG::ClobberSet::add(v32, 16406, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::ClobberSet::add(*a3, 16423, v44, v45, v46, v47, v48, v49);
          JSC::DFG::ClobberSet::add(*v8, 16406, v50, v51, v52, v53, v54, v55);
          goto LABEL_269;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 1254, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
          __break(0xC471u);
          JUMPOUT(0x19838D548);
        default:
          __break(0xC471u);
          JUMPOUT(0x19838D688);
      }
LABEL_479:
      v24 = 16388;
      goto LABEL_30;
    case 0x6D:
      JSC::DFG::ClobberSet::add(*a3, 16385, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*v8, 16388, v276, v277, v278, v279, v280, v281);
      JSC::DFG::ClobberSet::add(*v8, 16389, v282, v283, v284, v285, v286, v287);
      JSC::DFG::ClobberSet::add(*v8, 16390, v288, v289, v290, v291, v292, v293);
      JSC::DFG::ClobberSet::add(*v8, 16391, v294, v295, v296, v297, v298, v299);
      JSC::DFG::ClobberSet::add(*v8, 16392, v300, v301, v302, v303, v304, v305);
      JSC::DFG::ClobberSet::add(*v8, 16393, v306, v307, v308, v309, v310, v311);
      JSC::DFG::ClobberSet::add(*v8, 16394, v312, v313, v314, v315, v316, v317);
      JSC::DFG::ClobberSet::add(*v8, 16395, v318, v319, v320, v321, v322, v323);
      JSC::DFG::ClobberSet::add(*v8, 16396, v324, v325, v326, v327, v328, v329);
      JSC::DFG::ClobberSet::add(*v8, 16397, v330, v331, v332, v333, v334, v335);
      JSC::DFG::ClobberSet::add(*v8, 16399, v336, v337, v338, v339, v340, v341);
      JSC::DFG::ClobberSet::add(*v8, 16400, v342, v343, v344, v345, v346, v347);
      JSC::DFG::ClobberSet::add(*v8, 16401, v348, v349, v350, v351, v352, v353);
      JSC::DFG::ClobberSet::add(*v8, 16402, v354, v355, v356, v357, v358, v359);
      JSC::DFG::ClobberSet::add(*v8, 16403, v360, v361, v362, v363, v364, v365);
      JSC::DFG::ClobberSet::add(*v8, 16404, v366, v367, v368, v369, v370, v371);
      JSC::DFG::ClobberSet::add(*v8, 16405, v372, v373, v374, v375, v376, v377);
      JSC::DFG::ClobberSet::add(*v8, 16406, v378, v379, v380, v381, v382, v383);
      JSC::DFG::ClobberSet::add(*v8, 16407, v384, v385, v386, v387, v388, v389);
      JSC::DFG::ClobberSet::add(*v8, 16408, v390, v391, v392, v393, v394, v395);
      JSC::DFG::ClobberSet::add(*v8, 16409, v396, v397, v398, v399, v400, v401);
      JSC::DFG::ClobberSet::add(*v8, 16410, v402, v403, v404, v405, v406, v407);
      JSC::DFG::ClobberSet::add(*v8, 16411, v408, v409, v410, v411, v412, v413);
      JSC::DFG::ClobberSet::add(*v8, 16412, v414, v415, v416, v417, v418, v419);
      JSC::DFG::ClobberSet::add(*v8, 16413, v420, v421, v422, v423, v424, v425);
      JSC::DFG::ClobberSet::add(*v8, 16414, v426, v427, v428, v429, v430, v431);
      JSC::DFG::ClobberSet::add(*v8, 16415, v432, v433, v434, v435, v436, v437);
      JSC::DFG::ClobberSet::add(*v8, 16416, v438, v439, v440, v441, v442, v443);
      JSC::DFG::ClobberSet::add(*v8, 16417, v444, v445, v446, v447, v448, v449);
      JSC::DFG::ClobberSet::add(*v8, 16418, v450, v451, v452, v453, v454, v455);
      JSC::DFG::ClobberSet::add(*v8, 16419, v456, v457, v458, v459, v460, v461);
      JSC::DFG::ClobberSet::add(*v8, 16420, v462, v463, v464, v465, v466, v467);
      JSC::DFG::ClobberSet::add(*v8, 16421, v468, v469, v470, v471, v472, v473);
      JSC::DFG::ClobberSet::add(*v8, 16422, v474, v475, v476, v477, v478, v479);
      v126 = *v8;
      v127 = 16423;
      goto LABEL_130;
    case 0x84:
    case 0x85:
    case 0x126:
      goto LABEL_91;
    case 0x87:
      JSC::DFG::ClobberSet::add(*a3, 16396, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*v8, 16394, v624, v625, v626, v627, v628, v629);
      JSC::DFG::ClobberSet::add(*v8, 16395, v630, v631, v632, v633, v634, v635);
      JSC::DFG::ClobberSet::add(*v8, 16393, v636, v637, v638, v639, v640, v641);
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 8) + 16) & 0x3E000) == 0x4000)
        goto LABEL_378;
      return;
    case 0x88:
    case 0x89:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x109:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x116:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x144:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x16B:
      goto LABEL_107;
    case 0x8A:
      v23 = *a3;
      goto LABEL_192;
    case 0x8B:
      v511 = *v8;
      v512 = 16396;
      goto LABEL_392;
    case 0x8C:
    case 0x8D:
      v72 = *a3;
      v73 = 16393;
      goto LABEL_90;
    case 0x90:
    case 0x93:
    case 0x12B:
    case 0x12C:
    case 0x135:
    case 0x136:
      goto LABEL_262;
    case 0x91:
    case 0x92:
      JSC::DFG::ClobberSet::add(*a3, 16394, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*a3, 16393, v74, v75, v76, v77, v78, v79);
      JSC::DFG::ClobberSet::add(*a3, 16396, v80, v81, v82, v83, v84, v85);
      JSC::DFG::ClobberSet::add(*v8, 16394, v86, v87, v88, v89, v90, v91);
      JSC::DFG::ClobberSet::add(*v8, 16393, v92, v93, v94, v95, v96, v97);
      JSC::DFG::ClobberSet::add(*v8, 16396, v98, v99, v100, v101, v102, v103);
      v23 = *v8;
      v24 = 16422;
      goto LABEL_30;
    case 0x96:
      v23 = *a3;
      v24 = 16390;
      goto LABEL_30;
    case 0x97:
      v23 = *a3;
      v24 = 16391;
      goto LABEL_30;
    case 0x98:
    case 0x99:
      v117 = *(unsigned int *)(*((_QWORD *)this + 9) + 4);
      goto LABEL_208;
    case 0x9A:
      JSC::DFG::ClobberSet::add(*a3, 16394, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*a3, 16396, v240, v241, v242, v243, v244, v245);
      v117 = **((unsigned int **)this + 9);
LABEL_208:
      v118 = 15;
      goto LABEL_372;
    case 0x9B:
      v238 = *(unsigned int *)(*((_QWORD *)this + 9) + 4);
      v239 = 15;
      goto LABEL_362;
    case 0x9C:
      JSC::DFG::ClobberSet::add(*a3, 16394, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*a3, 16396, v567, v568, v569, v570, v571, v572);
      JSC::DFG::ClobberSet::add(*v8, ((unint64_t)**((unsigned int **)this + 9) << 15) | 0xF, v573, v574, v575, v576, v577, v578);
      v585 = *((_QWORD *)this + 9);
      v586 = *(unsigned int *)(v585 + 20);
      v587 = (v586 << 6) - 64;
      while (v587 != -64)
      {
        v588 = *(_DWORD *)(*(_QWORD *)(v585 + 8) + v587) - 2;
        v587 -= 64;
        if (v588 <= 3)
        {
          JSC::DFG::ClobberSet::add(*v8, 16394, v579, v580, v581, v582, v583, v584);
          v585 = *((_QWORD *)this + 9);
          v586 = *(unsigned int *)(v585 + 20);
          break;
        }
      }
      v589 = (v586 << 6) - 64;
      while (v586)
      {
        if (--v586 >= (unint64_t)*(unsigned int *)(v585 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x19838DFF8);
        }
        v590 = v589 - 64;
        v591 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v585 + 8) + v589));
        v589 = v590;
        if (v591)
        {
          v23 = *v8;
LABEL_192:
          v24 = 16396;
          goto LABEL_30;
        }
      }
      return;
    case 0x9D:
      JSC::DFG::ClobberSet::add(*a3, 16394, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*a3, 16396, v487, v488, v489, v490, v491, v492);
      JSC::DFG::ClobberSet::add(*v8, ((unint64_t)**((unsigned int **)this + 9) << 15) | 0xF, v493, v494, v495, v496, v497, v498);
      v499 = *((_QWORD *)this + 9);
      v500 = *(unsigned int *)(v499 + 20);
      v501 = 40 * v500 - 40;
      while (v500)
      {
        if (--v500 >= (unint64_t)*(unsigned int *)(v499 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x19838DF88);
        }
        v502 = v501 - 40;
        v503 = JSC::DeleteByVariant::writesStructures((JSC::DeleteByVariant *)(*(_QWORD *)(v499 + 8) + v501));
        v501 = v502;
        if (v503)
        {
          JSC::DFG::ClobberSet::add(*v8, 16394, v504, v505, v506, v507, v508, v509);
LABEL_378:
          v23 = *v8;
LABEL_379:
          v24 = 16399;
          goto LABEL_30;
        }
      }
      return;
    case 0x9E:
      v518 = *((_DWORD *)this + 18);
      switch((char)v518)
      {
        case 3:
          goto LABEL_131;
        case 5:
          return;
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
          v23 = *a3;
          goto LABEL_479;
        case 12:
        case 13:
          goto LABEL_262;
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
          goto LABEL_268;
        default:
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 1592, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x19838DED8);
      }
    case 0x9F:
      if (*((_DWORD *)this + 18) - 14 >= 0xC)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 1604, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
        __break(0xC471u);
        JUMPOUT(0x19838DF30);
      }
      if ((*((_DWORD *)this + 18) & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 1605, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x19838C574);
      }
      return;
    case 0xA0:
      v518 = *((_DWORD *)this + 18);
      if (v518 - 14 >= 0xC)
      {
        if (v518 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 1612, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x19838DFD8);
        }
        goto LABEL_131;
      }
LABEL_268:
      JSC::DFG::ClobberSet::add(*a3, 16423, (uint64_t)a3, a4, a5, a6, a7, a8);
      if ((v518 & 0x40000000) == 0)
        return;
      goto LABEL_269;
    case 0xA1:
      if ((*((_DWORD *)this + 18) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x19838DB50);
      }
      v23 = *a3;
      v24 = 16389;
      goto LABEL_30;
    case 0xA2:
      v486 = *((unsigned __int8 *)this + 72);
      if ((v486 - 14) < 0xC)
        goto LABEL_238;
      if (v486 != 3)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 1437, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
        __break(0xC471u);
        JUMPOUT(0x19838DF80);
      }
      goto LABEL_131;
    case 0xA3:
      v196 = *((unsigned __int8 *)this + 72);
      if ((v196 - 14) < 0xC)
      {
LABEL_238:
        JSC::DFG::ClobberSet::add(*a3, 16423, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*((_WORD *)this + 9) == 146)
        {
          if ((*((_DWORD *)this + 20) & 0x40000000) == 0)
            return;
        }
        else if ((*((_DWORD *)this + 18) & 0x40000000) == 0)
        {
          return;
        }
LABEL_269:
        v23 = *v8;
LABEL_270:
        v24 = 16423;
      }
      else
      {
        if (v196 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 1455, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x19838C3F0);
        }
LABEL_131:
        v23 = *v8;
        v24 = 16424;
      }
      goto LABEL_30;
    case 0xAA:
    case 0x129:
      v23 = *a3;
      v24 = 16385;
      goto LABEL_30;
    case 0xAB:
      v117 = *((unsigned int *)this + 18);
      v118 = 21;
      goto LABEL_372;
    case 0xAC:
      v238 = *((unsigned int *)this + 18);
      v239 = 21;
      goto LABEL_362;
    case 0xAD:
    case 0xAE:
      v117 = *((_QWORD *)this + 9);
      v118 = 36;
      goto LABEL_372;
    case 0xAF:
      v238 = *((_QWORD *)this + 9);
      v239 = 36;
      goto LABEL_362;
    case 0xB2:
      v126 = *v8;
      v127 = 16422;
      goto LABEL_130;
    case 0xB3:
      v23 = *a3;
      goto LABEL_315;
    case 0xB4:
      goto LABEL_88;
    case 0xB5:
      goto LABEL_112;
    case 0xBE:
    case 0x123:
      v23 = *a3;
      v24 = 16395;
      goto LABEL_30;
    case 0xC1:
      v150 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if (v150 > 0x31 || ((1 << v150) & 0x2000000200002) == 0)
        goto LABEL_27;
      v151 = *((_QWORD *)this + 4);
      if ((v151 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
LABEL_385:
      v33 = v151 & 0xFC000000000000;
      v34 = 0x4000000000000;
      goto LABEL_386;
    case 0xC2:
      v22 = *a3;
      if (((*((_QWORD *)this + 3) >> 50) & 0x3F) - 12 > 2)
        goto LABEL_28;
      JSC::DFG::ClobberSet::add(v22, 16394, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*a3, 16396, v190, v191, v192, v193, v194, v195);
      v23 = *a3;
      goto LABEL_379;
    case 0xC4:
      v510 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if (!(_DWORD)v510)
        goto LABEL_27;
      if ((_DWORD)v510 != 11)
      {
        __break(0xC471u);
        JUMPOUT(0x19838DB70);
      }
      JSC::DFG::ClobberSet::add(*a3, 16407, (uint64_t)a3, a4, a5, a6, a7, a8);
      v511 = *v8;
      v512 = 16407;
LABEL_392:
      JSC::DFG::ClobberSet::add(v511, v512, (uint64_t)a3, a4, a5, a6, a7, a8);
      v23 = *v8;
      goto LABEL_393;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      v28 = v21 - 202;
      if (v28 >= 0xAu || ((0x3EFu >> v28) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19838DAB0);
      }
      v29 = dword_1991556C8[(__int16)v28];
      v30 = (_DWORD *)((char *)this + 24);
      if ((*((_BYTE *)this + 56) & 0x10) != 0)
      {
        v676 = v29 + *v30;
        if (*(_DWORD *)(a1 + 164) <= v676)
        {
          __break(0xC471u);
          JUMPOUT(0x19838E008);
        }
        v31 = (_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v676);
      }
      else
      {
        v31 = &v30[2 * v29];
      }
      v22 = *a3;
      if ((*v31 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_28;
      JSC::DFG::ClobberSet::add(v22, 16406, (uint64_t)a3, a4, a5, a6, a7, a8);
      v32 = *a3;
      goto LABEL_404;
    case 0xCE:
      v643 = (uint64_t *)((char *)this + 24);
      if ((*((_BYTE *)this + 56) & 0x10) != 0)
      {
        v814 = *v643;
        if (*(_DWORD *)(a1 + 164) <= v814)
        {
          __break(0xC471u);
          JUMPOUT(0x19838E048);
        }
        v643 = (uint64_t *)(*(_QWORD *)(a1 + 152) + 8 * v814);
      }
      v151 = *v643;
      goto LABEL_385;
    case 0xD6:
      JSC::DFG::ClobberSet::add(*a3, 16423, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*a3, 16393, v202, v203, v204, v205, v206, v207);
      JSC::DFG::ClobberSet::add(*a3, 16394, v208, v209, v210, v211, v212, v213);
      JSC::DFG::ClobberSet::add(*a3, 16396, v214, v215, v216, v217, v218, v219);
      JSC::DFG::ClobberSet::add(*a3, 16388, v220, v221, v222, v223, v224, v225);
      JSC::DFG::ClobberSet::add(*a3, 16401, v226, v227, v228, v229, v230, v231);
      JSC::DFG::ClobberSet::add(*a3, 16400, v232, v233, v234, v235, v236, v237);
      v22 = *a3;
      v39 = 16402;
      goto LABEL_106;
    case 0xD7:
      JSC::DFG::ClobberSet::add(*a3, 16423, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*a3, 16393, v645, v646, v647, v648, v649, v650);
      JSC::DFG::ClobberSet::add(*a3, 16394, v651, v652, v653, v654, v655, v656);
      JSC::DFG::ClobberSet::add(*a3, 16396, v657, v658, v659, v660, v661, v662);
      JSC::DFG::ClobberSet::add(*a3, 16388, v663, v664, v665, v666, v667, v668);
      if (*((_WORD *)this + 9) == 146)
        v669 = *((_DWORD *)this + 20);
      else
        v669 = *((_DWORD *)this + 18);
      switch(v669)
      {
        case 7u:
          v23 = *a3;
          v24 = 16400;
          break;
        case 9u:
          v23 = *a3;
          v24 = 16402;
          break;
        case 8u:
          v23 = *a3;
          v24 = 16401;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x19838DB90);
      }
      goto LABEL_30;
    case 0xDA:
    case 0xDE:
      JSC::DFG::ClobberSet::add(*a3, 16408, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_112:
      v23 = *v8;
      v24 = 16408;
      goto LABEL_30;
    case 0xDD:
      goto LABEL_87;
    case 0xDF:
    case 0xE0:
      if ((*((_QWORD *)this + 3) & 0xFC000000000000) != 0x54000000000000
        || (*((_QWORD *)this + 4) & 0xFC000000000000) != 0x40000000000000
        || (*((_QWORD *)this + 5) & 0xFC000000000000) != 0x54000000000000)
      {
        goto LABEL_27;
      }
LABEL_87:
      JSC::DFG::ClobberSet::add(*a3, 16408, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*a3, 16398, v60, v61, v62, v63, v64, v65);
      JSC::DFG::ClobberSet::add(*v8, 16408, v66, v67, v68, v69, v70, v71);
LABEL_88:
      v23 = *v8;
LABEL_315:
      v24 = 16398;
      goto LABEL_30;
    case 0xE1:
      v201 = *((_QWORD *)this + 5);
      goto LABEL_204;
    case 0xE6:
      v147 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((v147 - 1) < 2)
        return;
      if ((_DWORD)v147)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 467, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19838C1A0);
      }
      goto LABEL_27;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v36 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v36 == 21)
      {
        if ((*((_QWORD *)this + 4) & 0xFC000000000000) != 0x54000000000000)
          return;
        goto LABEL_107;
      }
      if ((_DWORD)v36)
        return;
LABEL_43:
      v35 = *((_BYTE *)this + 38);
LABEL_68:
      if ((v35 & 0xFC) != 0)
        return;
      goto LABEL_27;
    case 0x106:
      JSC::DFG::ClobberSet::add(*a3, 16407, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*v8, 16407, v542, v543, v544, v545, v546, v547);
      v554 = *((_QWORD *)this + 4);
      v555 = v554;
      if ((v554 & 0x80000000) != 0)
      {
        JSC::DFG::Graph::freeze(a1, COERCE__INT64((double)v554) + 0x2000000000000, v548, v549, v550, v551, v552, v553);
      }
      else
      {
        JSC::DFG::Graph::freeze(a1, v554 | 0xFFFE000000000000, v548, v549, v550, v551, v552, v553);
        if (!(_DWORD)v554)
          return;
      }
      v562 = *((unsigned __int16 *)this + 9);
      switch(v562)
      {
        case 267:
          goto LABEL_512;
        case 264:
          v563 = *((_DWORD *)this + 19);
          break;
        case 352:
LABEL_512:
          v563 = *((_DWORD *)this + 21);
          break;
        default:
          v563 = *((_DWORD *)this + 18);
          goto LABEL_330;
      }
      LOBYTE(v563) = v563 & 0xF;
LABEL_330:
      if (v563 <= 0x19u && ((1 << v563) & 0x2A003F0) != 0)
      {
        v564 = *(unsigned int *)(a1 + 428);
        if (v554 >= v564)
        {
          if ((_DWORD)v564)
          {
            v694 = *(unsigned int **)(a1 + 416);
            v695 = 4 * v564;
            do
            {
              v696 = *v694;
              if (v696 < v554)
              {
                if (*(_DWORD *)(a1 + 164) <= (v696 + *((_DWORD *)this + 6)))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19838DE90);
                }
                if ((v696 & 0x80000000) != 0)
                  v697 = COERCE__INT64((double)v696) + 0x2000000000000;
                else
                  v697 = v696 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze(a1, v697, v556, v557, v558, v559, v560, v561);
              }
              ++v694;
              v695 -= 4;
            }
            while (v695);
          }
        }
        else
        {
          v565 = 0;
          do
          {
            if (*(_DWORD *)(a1 + 164) <= (v565 + *((_DWORD *)this + 6)))
            {
              __break(0xC471u);
              JUMPOUT(0x19838DE70);
            }
            if ((v565 & 0x80000000) != 0)
              v566 = COERCE__INT64((double)v565) + 0x2000000000000;
            else
              v566 = v565 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze(a1, v566, v556, v557, v558, v559, v560, v561);
            ++v565;
          }
          while (v555 != v565);
        }
      }
      return;
    case 0x107:
      JSC::DFG::ClobberSet::add(*a3, 16407, (uint64_t)a3, a4, a5, a6, a7, a8);
      v533 = *((unsigned int *)this + 8);
      if (!*((_DWORD *)this + 8))
        goto LABEL_110;
      v534 = *((_QWORD *)this + 3);
      v535 = *(_DWORD *)(a1 + 164);
      v536 = v535 >= v534;
      LODWORD(v537) = v535 - v534;
      if (v536)
        v537 = v537;
      else
        v537 = 0;
      while (1)
      {
        if (!v537)
        {
          __break(0xC471u);
          JUMPOUT(0x19838DE68);
        }
        if (*(_WORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v534) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 350)
          break;
        LODWORD(v534) = v534 + 1;
        --v537;
        if (!--v533)
          goto LABEL_110;
      }
LABEL_408:
      v22 = *a3;
      v115 = 16386;
      goto LABEL_109;
    case 0x10A:
      JSC::DFG::ClobberSet::add(*a3, 16407, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*v8, 16407, v246, v247, v248, v249, v250, v251);
      v258 = *((unsigned int *)this + 20);
      if ((v258 & 0x80000000) != 0)
        v259 = COERCE__INT64((double)v258) + 0x2000000000000;
      else
        v259 = v258 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze(a1, v259, v252, v253, v254, v255, v256, v257);
      return;
    case 0x10B:
      JSC::DFG::ClobberSet::add(*a3, 16407, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*v8, 16407, v155, v156, v157, v158, v159, v160);
      v167 = (uint64_t *)*((_QWORD *)this + 9);
      v168 = *v167;
      v169 = *(unsigned int *)(*v167 + 8);
      if ((v169 & 0x80000000) != 0)
        v170 = COERCE__INT64((double)v169) + 0x2000000000000;
      else
        v170 = v169 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze(a1, v170, v161, v162, v163, v164, v165, v166);
      v177 = *((unsigned __int16 *)this + 9);
      switch(v177)
      {
        case 267:
          goto LABEL_510;
        case 264:
          v178 = *((_DWORD *)this + 19);
          break;
        case 352:
LABEL_510:
          v178 = *((_DWORD *)this + 21);
          break;
        default:
          v178 = *((_DWORD *)this + 18);
          goto LABEL_174;
      }
      LOBYTE(v178) = v178 & 0xF;
LABEL_174:
      if (v178 > 0x19u || ((1 << v178) & 0x2A003F0) == 0)
        return;
      v179 = *(unsigned int *)(a1 + 428);
      if (v179 > v169)
      {
        if ((_DWORD)v169)
        {
          v180 = 0;
          v181 = v168 + 16;
          do
          {
            if ((v180 & 0x80000000) != 0)
              v182 = COERCE__INT64((double)v180) + 0x2000000000000;
            else
              v182 = v180 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze(a1, v182, v171, v172, v173, v174, v175, v176);
            if ((*(_BYTE *)(v168 + 4) & 0xE) == 6)
              v189 = *(_QWORD *)(v181 + 8 * v180) + 0x2000000000000;
            else
              v189 = *(_QWORD *)(v181 + 8 * v180);
            JSC::DFG::Graph::freeze(a1, v189, v183, v184, v185, v186, v187, v188);
            ++v180;
          }
          while (v169 != v180);
        }
        return;
      }
      v867 = 0uLL;
      if (!(_DWORD)v179)
        return;
      v677 = 0;
      v678 = 0;
      v679 = *(unsigned int **)(a1 + 416);
      v680 = 4 * v179;
      do
      {
        v681 = *v679;
        LODWORD(v866) = v681;
        if (v681 < v169)
        {
          if (v678 == DWORD2(v867))
          {
            v682 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v867, v678 + 1, (unint64_t)&v866);
            v677 = v867;
            *(_DWORD *)(v867 + 4 * HIDWORD(v867)) = *v682;
          }
          else
          {
            *(_DWORD *)(v677 + 4 * v678) = v681;
          }
          v678 = ++HIDWORD(v867);
        }
        ++v679;
        v680 -= 4;
      }
      while (v680);
      if (v678)
      {
        v683 = v168 + 16;
        v684 = 4 * v678;
        do
        {
          v685 = *(unsigned int *)v677;
          if ((v685 & 0x80000000) != 0)
            v686 = COERCE__INT64((double)v685) + 0x2000000000000;
          else
            v686 = v685 | 0xFFFE000000000000;
          JSC::DFG::Graph::freeze(a1, v686, v171, v172, v173, v174, v175, v176);
          if ((*(_BYTE *)(v168 + 4) & 0xE) == 6)
            v693 = *(_QWORD *)(v683 + 8 * v685) + 0x2000000000000;
          else
            v693 = *(_QWORD *)(v683 + 8 * v685);
          JSC::DFG::Graph::freeze(a1, v693, v687, v688, v689, v690, v691, v692);
          v677 += 4;
          v684 -= 4;
        }
        while (v684);
        v677 = v867;
      }
      if (!v677)
        return;
      *(_QWORD *)&v867 = 0;
      DWORD2(v867) = 0;
      v715 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v715)
      {
        pas_try_deallocate_slow_no_cache(v677, (uint64_t)&bmalloc_heap_config, 1);
        return;
      }
      if (!(v677 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v677 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v677)) & 1) != 0)
      {
        goto LABEL_462;
      }
      if (v677 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v677 >> 24)
      {
        v172 = 0;
      }
      else
      {
        v172 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v677 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v677) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v172 == 1)
        {
LABEL_462:
          v716 = *(unsigned int *)(v715 + 8000);
          if (v716 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v715, v677, (os_unfair_lock_s *)5, v172, v173, v174, v175, v176);
          }
          else
          {
            *(_QWORD *)(v715 + 8 * v716) = v677 | 0x5000000000000;
            *(_DWORD *)(v715 + 8000) = v716 + 1;
          }
          return;
        }
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v715, v677, 1, v172, v173, v174, v175, v176);
      return;
    case 0x10D:
      v197 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if (!(_DWORD)v197)
        goto LABEL_27;
      if ((_DWORD)v197 != 52 && (_DWORD)v197 != 1)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 1738, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19838C454);
      }
      goto LABEL_107;
    case 0x10F:
      v644 = *((_QWORD *)this + 3);
      v22 = *a3;
      if ((v644 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v644 & 0xFC000000000000) == 0x54000000000000)
        goto LABEL_108;
      goto LABEL_28;
    case 0x114:
      v139 = *(_QWORD *)this;
      if ((*(_QWORD *)this & 1) == 0)
      {
        v140 = *(_QWORD *)(a1 + 32);
        goto LABEL_144;
      }
      v815 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
      if ((v139 & 2) != 0
        || ((v816 = *(_DWORD *)((v139 & 0xFFFFFFFF8) + 8), v816 != 0x3FFFFFFF) ? (v817 = v816 == -1) : (v817 = 1), v817))
      {
        v818 = 2;
        goto LABEL_548;
      }
      if (!(v816 >> 28))
      {
        v818 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
        v815 = 0;
        goto LABEL_548;
      }
      v839 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v839)
        goto LABEL_652;
      v840 = (_BYTE *)(v839 + 8304);
      *(_BYTE *)(v839 + 8304) = 1;
      v841 = *(unsigned int *)(v839 + 8320);
      if ((_DWORD)v841)
      {
        *(_DWORD *)(v839 + 8320) = v841 - *(_DWORD *)(v839 + 8324);
        casual = *(_QWORD *)(v839 + 8312) - v841;
      }
      else
      {
        v847 = *(_QWORD *)(v839 + 8344);
        v848 = *(_QWORD *)(v839 + 8328);
        if (!v847)
        {
          if (*(_BYTE *)(v839 + 8309) == 6)
          {
            v853 = *(_DWORD *)(v839 + 8340);
            v854 = *(unsigned int *)(v839 + 8336);
            if (v854 < v853)
            {
              *(_QWORD *)&v840[8 * v854 + 56] = 0;
              v855 = (unint64_t *)(v839 + 8 * v854 + 8368);
              v856 = v853 - 1 - v854;
              while (v856)
              {
                v848 += 1024;
                v858 = *v855++;
                v857 = v858;
                LODWORD(v854) = v854 + 1;
                --v856;
                if (v858)
                {
                  v847 = __rbit64(v857);
                  *(_DWORD *)(v839 + 8336) = v854;
                  *(_QWORD *)(v839 + 8328) = v848;
                  goto LABEL_598;
                }
              }
              *(_DWORD *)(v839 + 8336) = v853;
            }
          }
          *v840 = 0;
LABEL_652:
          casual = bmalloc_allocate_casual(16, 1);
LABEL_600:
          *(_QWORD *)casual = v815;
          *(_DWORD *)(casual + 8) = v816;
          v818 = 1;
          v815 = casual;
LABEL_548:
          v825 = v815 | v818;
          v140 = *(_QWORD *)(a1 + 32);
          v865 = v825;
          if ((v825 & 1) == 0)
          {
            v139 = v825;
LABEL_144:
            v141 = v139 & 0xFFFFFFFF8;
            v142 = 1;
            v143 = 1;
            v144 = v139 & 0xFFFFFFFF8;
            if ((v139 & 0xFFFFFFFF8) == 0)
              goto LABEL_146;
            goto LABEL_145;
          }
          v826 = *(_QWORD *)(v825 & 0xFFFFFFFF8);
          if ((v825 & 2) != 0
            || ((v827 = *(_DWORD *)((v825 & 0xFFFFFFFF8) + 8), v827 != 0x3FFFFFFF) ? (v828 = v827 == -1) : (v828 = 1),
                v828))
          {
            v829 = 2;
            goto LABEL_558;
          }
          if (!(v827 >> 28))
          {
            v829 = *(_QWORD *)(v825 & 0xFFFFFFFF8);
            v826 = 0;
            goto LABEL_558;
          }
          v843 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
          if (v843)
          {
            v844 = (_BYTE *)(v843 + 8304);
            *(_BYTE *)(v843 + 8304) = 1;
            v845 = *(unsigned int *)(v843 + 8320);
            if ((_DWORD)v845)
            {
              *(_DWORD *)(v843 + 8320) = v845 - *(_DWORD *)(v843 + 8324);
              v846 = *(_QWORD *)(v843 + 8312) - v845;
LABEL_603:
              *v844 = 0;
LABEL_604:
              *(_QWORD *)v846 = v826;
              *(_DWORD *)(v846 + 8) = v827;
              v829 = 1;
              v826 = v846;
LABEL_558:
              v830 = v826 | v829;
              v141 = v830 & 0xFFFFFFFF8;
              if ((v830 & 1) != 0)
              {
                v142 = 0;
                v143 = 0;
                v144 = *(_QWORD *)v141;
              }
              else
              {
                v143 = 0;
                v142 = 1;
                v144 = v141;
              }
              v139 = v865;
              if (v144)
LABEL_145:
                v140 = *(_QWORD *)(v144 + 8);
LABEL_146:
              v145 = *(_QWORD *)(v140 + 8);
              if ((v142 & 1) != 0 || !v141)
              {
LABEL_147:
                if ((v143 & 1) != 0 || (v821 = v139 & 0xFFFFFFFF8, (v139 & 0xFFFFFFFF8) == 0))
                {
LABEL_148:
                  v146 = JSC::DFG::Graph::isWatchingGlobalObjectWatchpoint<JSC::WatchpointSet>(a1, v145, *(_QWORD *)(v145 + 2048), 5, a5, a6, a7, a8);
                  v22 = *a3;
                  if ((v146 & 1) != 0)
                  {
LABEL_105:
                    v39 = 16386;
LABEL_106:
                    JSC::DFG::ClobberSet::add(v22, v39, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_107:
                    v22 = *a3;
LABEL_108:
                    v115 = 16407;
LABEL_109:
                    JSC::DFG::ClobberSet::add(v22, v115, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_110:
                    v23 = *v8;
                    v24 = 16407;
                    goto LABEL_30;
                  }
LABEL_28:
                  JSC::DFG::ClobberSet::add(v22, 16385, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_29:
                  v23 = *v8;
                  v24 = 16387;
LABEL_30:
                  JSC::DFG::ClobberSet::add(v23, v24, (uint64_t)a3, a4, a5, a6, a7, a8);
                  return;
                }
                v822 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                if (!v822)
                {
                  pas_try_deallocate_slow_no_cache(v139 & 0xFFFFFFFF8, (uint64_t)&bmalloc_heap_config, 1);
                  goto LABEL_148;
                }
                v823 = v821 >> 24;
                if (((*(unsigned int *)((char *)&bmalloc_megapage_table + (((v139 & 0xFFFFFFFF8uLL) >> 27) & 0x1FC)) >> ((v139 & 0xFFFFFFF8) >> 24)) & 1) != 0)
                {
LABEL_536:
                  v824 = *(unsigned int *)(v822 + 8000);
                  if (v824 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v822, v821, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                  }
                  else
                  {
                    *(_QWORD *)(v822 + 8 * v824) = v821 | 0x5000000000000;
                    *(_DWORD *)(v822 + 8000) = v824 + 1;
                  }
                  goto LABEL_148;
                }
                if (v823 < *off_1ECF425F8 || off_1ECF425F8[1] <= v823)
                {
                  a4 = 0;
                }
                else
                {
                  a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + (((((v139 & 0xFFFFFFFF8uLL) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2
                                          * ((((v139 & 0xFFFFFFF8) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)a4 == 1)
                    goto LABEL_536;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v822, v821, 1, a4, a5, a6, a7, a8);
                goto LABEL_148;
              }
              v819 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
              if (!v819)
              {
                pas_try_deallocate_slow_no_cache(v141, (uint64_t)&bmalloc_heap_config, 1);
                goto LABEL_147;
              }
              if (!(v141 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v141 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v141)) & 1) != 0)
              {
LABEL_531:
                v820 = *(unsigned int *)(v819 + 8000);
                if (v820 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v819, v141, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v819 + 8 * v820) = v141 | 0x5000000000000;
                  *(_DWORD *)(v819 + 8000) = v820 + 1;
                }
                goto LABEL_147;
              }
              if (v141 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v141 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v141 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v141) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_531;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v819, v141, 1, a4, a5, a6, a7, a8);
              goto LABEL_147;
            }
            v850 = *(_QWORD *)(v843 + 8344);
            v851 = *(_QWORD *)(v843 + 8328);
            if (v850)
            {
LABEL_602:
              v852 = __clz(v850);
              *(_QWORD *)(v843 + 8344) = v850 & ~(0x8000000000000000 >> v852);
              v846 = v851 + 16 * v852;
              goto LABEL_603;
            }
            if (*(_BYTE *)(v843 + 8309) == 6)
            {
              v859 = *(_DWORD *)(v843 + 8340);
              v860 = *(unsigned int *)(v843 + 8336);
              if (v860 < v859)
              {
                *(_QWORD *)&v844[8 * v860 + 56] = 0;
                v861 = (unint64_t *)(v843 + 8 * v860 + 8368);
                v862 = v859 - 1 - v860;
                while (v862)
                {
                  v851 += 1024;
                  v864 = *v861++;
                  v863 = v864;
                  LODWORD(v860) = v860 + 1;
                  --v862;
                  if (v864)
                  {
                    v850 = __rbit64(v863);
                    *(_DWORD *)(v843 + 8336) = v860;
                    *(_QWORD *)(v843 + 8328) = v851;
                    goto LABEL_602;
                  }
                }
                *(_DWORD *)(v843 + 8336) = v859;
              }
            }
            *v844 = 0;
          }
          v846 = bmalloc_allocate_casual(16, 1);
          goto LABEL_604;
        }
LABEL_598:
        v849 = __clz(v847);
        *(_QWORD *)(v839 + 8344) = v847 & ~(0x8000000000000000 >> v849);
        casual = v848 + 16 * v849;
      }
      *v840 = 0;
      goto LABEL_600;
    case 0x115:
      v260 = *(unsigned __int16 *)((*((_QWORD *)this + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v260 == 349)
        goto LABEL_408;
      if (v260 != 352)
        goto LABEL_27;
LABEL_262:
      v23 = *a3;
      goto LABEL_270;
    case 0x13E:
    case 0x145:
      v59 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if (v59 > 0x34)
        goto LABEL_82;
      if (((1 << v59) & 0x12026000400002) != 0)
        return;
      if (((1 << v59) & 0x101) != 0)
        goto LABEL_27;
      if (v59 != 24)
      {
LABEL_82:
        __break(0xC471u);
        JUMPOUT(0x19838BCBCLL);
      }
      goto LABEL_131;
    case 0x13F:
      v201 = *((_QWORD *)this + 3);
LABEL_204:
      v33 = v201 & 0xFC000000000000;
      v34 = 0x54000000000000;
LABEL_386:
      if (v33 == v34)
        return;
      goto LABEL_27;
    case 0x146:
      v519 = (*((_QWORD *)this + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v519 == 28)
        return;
      if ((_DWORD)v519)
      {
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 831, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19838CA94);
      }
      goto LABEL_27;
    case 0x157:
      v117 = *((unsigned int *)this + 18);
      v118 = 33;
      goto LABEL_372;
    case 0x158:
      v238 = *((unsigned int *)this + 18);
      v239 = 33;
      goto LABEL_362;
    case 0x159:
      v37 = *(_QWORD *)(**((_QWORD **)this + 9) + 40);
      if ((v37 & 1) == 0)
        goto LABEL_308;
      goto LABEL_52;
    case 0x15A:
      v22 = *a3;
      v115 = 16385;
      goto LABEL_109;
    case 0x15B:
    case 0x161:
    case 0x162:
      goto LABEL_104;
    case 0x15C:
    case 0x163:
      if ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) == 4)
        goto LABEL_107;
LABEL_104:
      v22 = *a3;
      goto LABEL_105;
    case 0x164:
      v117 = *((unsigned int *)this + 18);
      v118 = 20;
LABEL_372:
      v24 = v118 | (v117 << 15);
      goto LABEL_373;
    case 0x165:
      v238 = *((unsigned int *)this + 18);
      v239 = 20;
LABEL_362:
      v24 = v239 | (v238 << 15);
      goto LABEL_363;
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
      v37 = *(_QWORD *)(**((_QWORD **)this + 9) + 112);
      if ((v37 & 1) != 0)
LABEL_52:
        v38 = (v37 >> 1) & 3;
      else
LABEL_308:
        v38 = *(unsigned __int8 *)(v37 + 4);
      if (v38 == 2)
        goto LABEL_107;
      v22 = *v8;
      v39 = 16422;
      goto LABEL_106;
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x176:
    case 0x177:
    case 0x19E:
      goto LABEL_129;
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17D:
      JSC::DFG::ClobberSet::add(*a3, 16418, (uint64_t)a3, a4, a5, a6, a7, a8);
      v23 = *v8;
      v24 = 16418;
      goto LABEL_30;
    case 0x17E:
      v513 = *a3;
      v514 = 16392;
      goto LABEL_258;
    case 0x17F:
      v513 = *a3;
      v514 = 16387;
LABEL_258:
      JSC::DFG::ClobberSet::add(v513, v514, (uint64_t)a3, a4, a5, a6, a7, a8);
      v23 = *v8;
      v24 = 16392;
      goto LABEL_30;
    case 0x180:
    case 0x182:
      if ((_DWORD)v21 != 386 || (v116 = *((unsigned __int8 *)this + 80), v116 == 1))
      {
        JSC::DFG::ClobberSet::add(*a3, 16396, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*((_WORD *)this + 9) == 146)
          v128 = *((_DWORD *)this + 20);
        else
          v128 = *((_DWORD *)this + 18);
        v129 = v128 - 3;
        v130 = BYTE2(v128);
        switch(v129)
        {
          case 0:
            goto LABEL_131;
          case 4:
            if (v130 > 1)
              goto LABEL_27;
            JSC::DFG::ClobberSet::add(*a3, 16388, (uint64_t)a3, a4, a5, a6, a7, a8);
            JSC::DFG::ClobberSet::add(*a3, 16400, v131, v132, v133, v134, v135, v136);
            v137 = *((_DWORD *)this + 6);
            v138 = *(_DWORD *)(a1 + 164);
            if (v138 <= v137)
            {
              __break(0xC471u);
              JUMPOUT(0x19838E028);
            }
            if (v138 <= v137 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19838C0E0);
            }
            return;
          case 5:
            if (v130 > 1)
              goto LABEL_27;
            JSC::DFG::ClobberSet::add(*a3, 16388, (uint64_t)a3, a4, a5, a6, a7, a8);
            JSC::DFG::ClobberSet::add(*a3, 16401, v698, v699, v700, v701, v702, v703);
            v704 = *((_DWORD *)this + 6);
            v705 = *(_DWORD *)(a1 + 164);
            if (v705 <= v704)
            {
              __break(0xC471u);
              JUMPOUT(0x19838E030);
            }
            if (v705 <= v704 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19838D3A8);
            }
            return;
          case 6:
            if (v130 > 1)
              goto LABEL_27;
            JSC::DFG::ClobberSet::add(*a3, 16388, (uint64_t)a3, a4, a5, a6, a7, a8);
            JSC::DFG::ClobberSet::add(*a3, 16402, v706, v707, v708, v709, v710, v711);
            v712 = *((_DWORD *)this + 6);
            v713 = *(_DWORD *)(a1 + 164);
            if (v713 <= v712)
            {
              __break(0xC471u);
              JUMPOUT(0x19838E038);
            }
            if (v713 <= v712 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19838D3ECLL);
            }
            return;
          case 7:
            if (v130 > 1)
              goto LABEL_27;
            v22 = *a3;
LABEL_482:
            JSC::DFG::ClobberSet::add(v22, 16389, (uint64_t)a3, a4, a5, a6, a7, a8);
            v23 = *a3;
LABEL_483:
            v24 = 16403;
            goto LABEL_30;
          default:
            goto LABEL_27;
        }
      }
      if (v116 != 2)
        goto LABEL_27;
      if (*(_DWORD *)(a1 + 164) <= *((_QWORD *)this + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x19838E020);
      }
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * *((_QWORD *)this + 3)) & 0xFC000000000000) != 0x20000000000000)
        goto LABEL_27;
      JSC::DFG::ClobberSet::add(*a3, 16396, (uint64_t)a3, a4, a5, a6, a7, a8);
      v72 = *a3;
      v73 = 16399;
LABEL_90:
      JSC::DFG::ClobberSet::add(v72, v73, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_91:
      v23 = *a3;
LABEL_393:
      v24 = 16394;
      goto LABEL_30;
    case 0x18A:
    case 0x18F:
      v56 = (*((_QWORD *)this + 3) & 0xFC000000000000) == 0x78000000000000;
      goto LABEL_73;
    case 0x18B:
      v23 = *a3;
      goto LABEL_395;
    case 0x18C:
      v152 = (*((_QWORD *)this + 3) & 0xFC000000000000) == 0x80000000000000;
      v153 = 16413;
      goto LABEL_164;
    case 0x18D:
    case 0x18E:
      v56 = (*((_QWORD *)this + 3) & 0xFC000000000000) == 0x80000000000000;
      v58 = 16413;
      goto LABEL_74;
    case 0x190:
      v152 = *((_DWORD *)this + 18) == 0;
      v153 = 16411;
LABEL_164:
      if (v152)
        v154 = v153;
      else
        v154 = v153 + 1;
      JSC::DFG::ClobberSet::add(*a3, v154, (uint64_t)a3, a4, a5, a6, a7, a8);
      v23 = *v8;
      v24 = v154;
      goto LABEL_30;
    case 0x191:
    case 0x192:
    case 0x193:
      v56 = *((_DWORD *)this + 18) == 0;
LABEL_73:
      v58 = 16411;
      goto LABEL_74;
    case 0x194:
      v23 = *v8;
      v24 = 16412;
      goto LABEL_30;
    case 0x195:
      v148 = *((_DWORD *)this + 6);
      v149 = *(_DWORD *)(a1 + 164);
      if (v149 <= v148)
      {
        __break(0xC471u);
        JUMPOUT(0x19838DEE0);
      }
      if (v149 <= v148 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19838DEE8);
      }
      v23 = *v8;
LABEL_395:
      v24 = 16411;
      goto LABEL_30;
    case 0x196:
      if ((*((_QWORD *)this + 3) & 0xFC000000000000) == 0x78000000000000)
        v24 = 16411;
      else
        v24 = 16412;
      goto LABEL_363;
    case 0x197:
      v56 = (*((_QWORD *)this + 3) & 0xFC000000000000) == 0x88000000000000;
      v58 = 16415;
LABEL_74:
      if (v56)
        v24 = v58;
      else
        v24 = v58 + 1;
LABEL_373:
      v23 = *a3;
      goto LABEL_30;
    case 0x198:
      if ((*((_QWORD *)this + 4) & 0xFC000000000000) != 0x2C000000000000)
      {
        JSC::DFG::ClobberSet::add(*a3, 16385, (uint64_t)a3, a4, a5, a6, a7, a8);
        JSC::DFG::ClobberSet::add(*v8, 16424, v618, v619, v620, v621, v622, v623);
      }
      v23 = *v8;
      v24 = 16416;
      goto LABEL_30;
    case 0x199:
      v520 = *((_DWORD *)this + 6);
      v521 = *(_DWORD *)(a1 + 164);
      if (v521 <= v520)
      {
        __break(0xC471u);
        JUMPOUT(0x19838DFE0);
      }
      if (v521 <= v520 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19838DFE8);
      }
      if (v521 <= v520 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19838DFF0);
      }
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * (v520 + 1)) & 0xFC000000000000) != 0x2C000000000000)
      {
        JSC::DFG::ClobberSet::add(*a3, 16385, (uint64_t)a3, a4, a5, a6, a7, a8);
        JSC::DFG::ClobberSet::add(*v8, 16424, v522, v523, v524, v525, v526, v527);
      }
      v23 = *v8;
      v24 = 16415;
      goto LABEL_30;
    case 0x1A0:
      v198 = *(_QWORD *)(*((_QWORD *)this + 9) + 16);
      if (!v198)
        goto LABEL_27;
      v199 = *(unsigned int *)(v198 + 20);
      v200 = *(unsigned int *)(v198 + 24);
LABEL_283:
      if ((unsigned __int16)v199 != WORD1(v199))
      {
        v529 = WORD1(v199) == 0xFFFF && (unsigned __int16)v199 == 0;
        v530 = (v199 << 15) | 0x25;
        if (v529)
          v531 = 16385;
        else
          v531 = v530;
        JSC::DFG::ClobberSet::add(*a3, v531, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      if ((unsigned __int16)v200 == WORD1(v200))
        return;
      if ((_WORD)v200)
        v532 = 0;
      else
        v532 = WORD1(v200) == 0xFFFF;
      if (v532)
        goto LABEL_29;
      v24 = (v200 << 15) | 0x25;
LABEL_363:
      v23 = *v8;
      goto LABEL_30;
    case 0x1A1:
      v528 = *((_QWORD *)this + 9);
      v199 = *(unsigned int *)(v528 + 44);
      v200 = *(unsigned int *)(v528 + 48);
      goto LABEL_283;
    case 0x1AB:
    case 0x1AC:
      JSC::DFG::ClobberSet::add(*a3, 16423, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*a3, 16406, v119, v120, v121, v122, v123, v124);
      if ((*((_BYTE *)this + 74) & 1) != 0)
        goto LABEL_403;
      v125 = *((_DWORD *)this + 14) & 7;
      if (v125 >= 2 && v125 - 3 >= 3)
      {
        if (v125 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x19838BFB8);
        }
        __break(0xC471u);
        JUMPOUT(0x19838DB10);
      }
      return;
    case 0x1AD:
      JSC::DFG::ClobberSet::add(*a3, 16423, (uint64_t)a3, a4, a5, a6, a7, a8);
      JSC::DFG::ClobberSet::add(*a3, 16406, v670, v671, v672, v673, v674, v675);
      if ((*((_BYTE *)this + 74) & 1) != 0)
      {
LABEL_403:
        v32 = *v8;
LABEL_404:
        JSC::DFG::ClobberSet::add(v32, 16423, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      v23 = *v8;
      v24 = 16406;
      goto LABEL_30;
    case 0x1AE:
    case 0x1AF:
      v23 = *a3;
      goto LABEL_226;
    case 0x1B0:
      v23 = *v8;
LABEL_226:
      v24 = 16410;
      goto LABEL_30;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x19838DB30);
    default:
      v867 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v21];
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v867, &v866);
      if (v866)
        v831 = (const char *)(v866 + 16);
      else
        v831 = 0;
      JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1, this, "./dfg/DFGClobberize.h", 2279, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v831);
      WTF::CString::~CString((WTF::CString *)&v866, v832, v833, v834, v835, v836, v837, v838);
      __break(0xC471u);
      JUMPOUT(0x19838DC60);
  }
}

void JSC::DFG::clobberize<JSC::DFG::ClobberSetOverlaps,JSC::DFG::NoOpClobberize,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::ClobberSetOverlaps,JSC::DFG::NoOpClobberize,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ClobberSetOverlaps const&,JSC::DFG::NoOpClobberize const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, _QWORD ***a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  char v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  JSC::DFG::Node *v34;
  uint64_t v35;
  _QWORD **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 v40;
  uint64_t v41;
  _DWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t *v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  char isWatchingHavingABadTimeWatchpoint;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  BOOL v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int *v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int *v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  WTF *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int v240;
  char v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  uint64_t v247;
  int v248;
  int v249;
  int v250;
  int v251;
  uint64_t v252;
  char v253;
  _BYTE v254[56];
  char v255;
  char v256;
  _BYTE v257[56];
  char v258;
  _BYTE v259[56];
  char v260;
  _BYTE v261[56];
  char v262;
  _BYTE v263[56];
  char v264;
  _BYTE v265[56];
  char v266;
  char v267;
  char v268;
  char v269;
  _BYTE v270[56];
  char v271;
  char v272;
  char v273;
  char v274;
  char v275;
  _BYTE v276[56];
  char v277;
  _BYTE v278[56];
  WTF *v279[2];
  uint64_t v280;
  uint64_t v281;
  char v282;
  char v283;
  char v284;
  char v285;
  char v286;
  char v287;
  char v288;
  char v289;
  char v290;
  char v291;
  char v292;
  char v293;
  char v294;
  char v295;
  char v296;
  char v297;
  char v298;
  char v299;
  char v300;
  char v301;
  char v302;
  char v303;
  char v304;
  char v305;
  char v306;
  char v307;
  char v308;
  char v309;
  _BYTE v310[56];
  uint64_t v311;
  _BYTE v312[56];
  char v313;
  _BYTE v314[56];
  uint64_t v315;
  _BYTE v316[56];
  uint64_t v317;
  _BYTE v318[56];
  char v319;
  _BYTE v320[56];
  uint64_t v321;
  _BYTE v322[56];
  char v323;
  _BYTE v324[56];
  char v325;
  _BYTE v326[56];
  char v327;
  _BYTE v328[56];
  char v329;
  _BYTE v330[56];
  char v331;
  _BYTE v332[56];
  char v333;
  char v334;
  char v335;
  char v336;
  char v337;
  char v338;
  char v339;
  char v340;
  char v341;
  char v342;
  char v343;
  char v344;
  char v345;
  char v346;
  _BYTE v347[56];
  char v348;
  _BYTE v349[56];
  char v350;
  _BYTE v351[56];

  v11 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v11 = *(_QWORD *)v11;
  while (v11)
  {
    v15 = *(_QWORD *)(v11 + 24);
    if ((*(_BYTE *)(v11 + 32) & 1) != 0)
    {
      v24 = (HIDWORD(v15) & 0xFFFFF | ((int)(v15 >> 28) >> 24 << 20)) + 3;
      *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, ((v24 & 0xFFFFFFFEFFFFFFFFLL | (((v24 >> 31) & 1) << 32)) << 15) | 2);
      v15 = *(_QWORD *)(v11 + 24);
    }
    if ((v15 >> 60) - 3 <= 2)
    {
      v29 = (HIDWORD(v15) & 0xFFFFF | ((int)(v15 >> 28) >> 24 << 20)) + 4;
      *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, ((v29 & 0xFFFFFFFEFFFFFFFFLL | (((v29 >> 31) & 1) << 32)) << 15) | 2);
    }
    v16 = *(_QWORD *)(v11 + 16);
    v11 = v16 & 0xFFFFFFFF8;
    if ((v16 & 1) != 0)
      v11 = *(_QWORD *)v11;
  }
  if (*((_BYTE *)this + 960))
  {
    v74 = *(unsigned int *)(*((_QWORD *)this + 4) + 48);
    *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, ((v74 & 0xFFFFFFFEFFFFFFFFLL | (((v74 >> 31) & 1) << 32)) << 15) | 2);
  }
  if (*((int *)this + 238) > 0 || !JSC::DFG::Node::hasArrayMode(a2))
  {
LABEL_7:
    v12 = *((unsigned __int16 *)a2 + 9);
    switch(*((_WORD *)a2 + 9))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 0xC:
      case 0xE:
      case 0x12:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x43:
      case 0x45:
      case 0x47:
      case 0x48:
      case 0x4A:
      case 0x5B:
      case 0x86:
      case 0x94:
      case 0x95:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA9:
      case 0xB2:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC0:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE5:
      case 0xEB:
      case 0xEC:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0x101:
      case 0x102:
      case 0x117:
      case 0x118:
      case 0x127:
      case 0x128:
      case 0x12A:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x148:
      case 0x149:
      case 0x14B:
      case 0x14C:
      case 0x153:
      case 0x154:
      case 0x16C:
      case 0x16D:
      case 0x16E:
      case 0x16F:
      case 0x170:
      case 0x175:
      case 0x17B:
      case 0x17C:
      case 0x183:
      case 0x188:
      case 0x189:
      case 0x196:
      case 0x19A:
      case 0x19C:
      case 0x19D:
      case 0x19F:
      case 0x1A2:
      case 0x1A3:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1A9:
      case 0x1AA:
      case 0x1B0:
        return;
      case 6:
        v13 = *a3;
        v63 = 16423;
        goto LABEL_137;
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0x2B:
      case 0x2D:
      case 0x2F:
      case 0x32:
      case 0x34:
      case 0x54:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5E:
      case 0x5F:
      case 0x62:
      case 0x63:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x8E:
      case 0x8F:
      case 0xA7:
      case 0xA8:
      case 0xAA:
      case 0xB0:
      case 0xB1:
      case 0xC3:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xD4:
      case 0xD5:
      case 0xD8:
      case 0xD9:
      case 0xDB:
      case 0xDC:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x108:
      case 0x124:
      case 0x125:
      case 0x129:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x140:
      case 0x141:
      case 0x147:
      case 0x14A:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x155:
      case 0x156:
      case 0x15A:
      case 0x171:
      case 0x172:
      case 0x173:
      case 0x174:
      case 0x176:
      case 0x177:
      case 0x181:
      case 0x184:
      case 0x185:
      case 0x186:
      case 0x187:
      case 0x19B:
      case 0x19E:
        goto LABEL_77;
      case 0xB:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 98306);
        v17 = &v338;
        goto LABEL_52;
      case 0xD:
        v59 = *((_QWORD *)a2 + 9);
        if (v59)
        {
          v214 = (HIDWORD(*(_QWORD *)(v59 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v59 + 24) >> 28) >> 24 << 20)) + 4;
          v60 = ((unint64_t)v214 << 15) | ((unint64_t)(v214 >> 31) << 47) | 2;
        }
        else
        {
          v60 = 131074;
        }
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, v60);
        v17 = &v337;
        goto LABEL_52;
      case 0xF:
        v140 = (_QWORD *)*((_QWORD *)a2 + 9);
        v141 = v140;
        do
        {
          v142 = v141;
          v141 = (_QWORD *)*v141;
        }
        while (v141);
        if (v142 != v140)
          *v140 = v142;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, (v142[3] << 15) | 2);
        v143 = (_QWORD *)*((_QWORD *)a2 + 9);
        v144 = v143;
        do
        {
          v145 = v144;
          v144 = (_QWORD *)*v144;
        }
        while (v144);
        if (v145 != v143)
          *v143 = v145;
        v17 = &v336;
        goto LABEL_52;
      case 0x10:
        v148 = (_QWORD *)*((_QWORD *)a2 + 9);
        v149 = v148;
        do
        {
          v150 = v149;
          v149 = (_QWORD *)*v149;
        }
        while (v149);
        if (v150 != v148)
        {
          *v148 = v150;
          v148 = (_QWORD *)*((_QWORD *)a2 + 9);
        }
        v151 = v148;
        do
        {
          v152 = v151;
          v151 = (_QWORD *)*v151;
        }
        while (v151);
        if (v152 != v148)
          *v148 = v152;
        v34 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v335;
        goto LABEL_53;
      case 0x11:
        v34 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v333;
        goto LABEL_53;
      case 0x13:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, (**((_QWORD **)a2 + 9) << 15) | 2);
        v17 = &v334;
        goto LABEL_52;
      case 0x1C:
        v153 = (_QWORD *)*((_QWORD *)a2 + 9);
        v154 = v153;
        do
        {
          v155 = v154;
          v154 = (_QWORD *)*v154;
        }
        while (v154);
        if (v155 != v153)
          *v153 = v155;
        v18 = v155[3];
        v19 = 2;
        goto LABEL_22;
      case 0x21:
        v18 = *((unsigned int *)a2 + 18);
        v19 = 35;
        goto LABEL_22;
      case 0x28:
        v17 = &v345;
        goto LABEL_52;
      case 0x29:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26 >= 3)
          goto LABEL_77;
        return;
      case 0x2A:
      case 0x142:
      case 0x143:
        v26 = *((_BYTE *)a2 + 30);
        goto LABEL_34;
      case 0x2C:
      case 0x2E:
      case 0x30:
      case 0x31:
      case 0x33:
      case 0x35:
        if ((*((_BYTE *)a2 + 30) & 0xFC) != 0)
          goto LABEL_33;
        goto LABEL_77;
      case 0x3F:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 >= 2)
          goto LABEL_77;
        return;
      case 0x40:
      case 0x42:
      case 0x44:
        v35 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v35 == 1 || (_DWORD)v35 == 49 || (_DWORD)v35 == 52)
          return;
        if ((_DWORD)v35)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19838EDC8);
        }
        goto LABEL_77;
      case 0x41:
        v45 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v45 != 49 && (_DWORD)v45 != 1 && (_DWORD)v45 != 52)
          goto LABEL_77;
        return;
      case 0x46:
        v147 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v147 != 1 && (_DWORD)v147 != 49)
          goto LABEL_77;
        return;
      case 0x49:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x131:
        v38 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
        v39 = 0xC4000000000000;
        goto LABEL_76;
      case 0x4B:
        v13 = *a3;
        v14 = 16409;
        goto LABEL_9;
      case 0x52:
      case 0x53:
        v61 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (v61 > 0x34)
          goto LABEL_124;
        if (((1 << v61) & 0x1200001C000002) != 0)
          return;
        if (v61)
        {
LABEL_124:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19838F28CLL);
        }
        goto LABEL_77;
      case 0x5C:
      case 0x5D:
        v20 = *((_DWORD *)a2 + 18);
        if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
        {
          switch(*((_DWORD *)a2 + 14) & 7)
          {
            case 3:
              v21 = 13;
              break;
            case 4:
              v21 = 17;
              break;
            case 5:
              v21 = 19;
              break;
            case 7:
              __break(0xC471u);
              JUMPOUT(0x198391058);
            default:
              __break(0xC471u);
              JUMPOUT(0x198391088);
          }
        }
        else
        {
          v21 = 21;
        }
        if (*((_DWORD *)a2 + 18) - 14 < 9)
        {
          *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16406);
          *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
          if ((v20 & 0x40000000) == 0)
          {
            v22 = *((_DWORD *)a2 + 6);
            v23 = *((_DWORD *)this + 41);
            if (v23 <= v22)
            {
              __break(0xC471u);
              JUMPOUT(0x19839117CLL);
            }
            if (v23 <= v22 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19838EB30);
            }
          }
          return;
        }
        v30 = BYTE2(v20);
        switch(*((_DWORD *)a2 + 18))
        {
          case 0u:
          case 1u:
          case 2u:
          case 4u:
          case 0x17u:
          case 0x18u:
            goto LABEL_77;
          case 3u:
          case 6u:
            return;
          case 5u:
            if (v30 - 3 <= 1)
              goto LABEL_77;
            return;
          case 7u:
            if (v30 > 3 || v30 == 2)
              goto LABEL_77;
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16388);
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16400);
            if (v30 == 3)
              v46 = 18;
            else
              v46 = v21;
            v47 = *((_QWORD *)a2 + 3);
            v48 = *((_DWORD *)this + 41);
            if (v48 <= v47)
            {
              __break(0xC471u);
              JUMPOUT(0x198391214);
            }
            if (v48 <= (int)v47 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19839121CLL);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v328, v46, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v17 = &v327;
            break;
          case 8u:
            if (v30 > 3 || v30 == 2)
              goto LABEL_77;
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16388);
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16401);
            if ((*((_DWORD *)a2 + 14) & 7) == 3)
            {
              if (v30)
              {
                if (v30 == 3)
                  v66 = 15;
                else
                  v66 = 13;
              }
              else
              {
                v66 = 14;
              }
            }
            else
            {
              v66 = 16;
            }
            v67 = *((_QWORD *)a2 + 3);
            v68 = *((_DWORD *)this + 41);
            if (v68 <= v67)
            {
              __break(0xC471u);
              JUMPOUT(0x19839122CLL);
            }
            if (v68 <= (int)v67 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198391234);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v326, v66, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v17 = &v325;
            break;
          case 9u:
            if (v30 > 3 || v30 == 2)
              goto LABEL_77;
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16388);
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16402);
            if (v30 == 3)
              v31 = 20;
            else
              v31 = v21;
            v32 = *((_QWORD *)a2 + 3);
            v33 = *((_DWORD *)this + 41);
            if (v33 <= v32)
            {
              __break(0xC471u);
              JUMPOUT(0x1983911DCLL);
            }
            if (v33 <= (int)v32 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1983911E4);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v324, v31, 16402, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v17 = &v323;
            break;
          case 0xAu:
          case 0xBu:
            v13 = *a3;
            if (v30 <= 1)
              goto LABEL_159;
            goto LABEL_78;
          case 0xCu:
            v13 = *a3;
            if (v30 > 1)
              goto LABEL_78;
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(v13, 16404);
            v212 = *((_QWORD *)a2 + 3);
            v213 = *((_DWORD *)this + 41);
            if (v213 <= v212)
            {
              __break(0xC471u);
              JUMPOUT(0x1983913A8);
            }
            if (v213 <= (int)v212 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1983913B0);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v332, v21, 16404, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v17 = &v331;
            break;
          case 0xDu:
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16405);
            v210 = *((_QWORD *)a2 + 3);
            v211 = *((_DWORD *)this + 41);
            if (v211 <= v210)
            {
              __break(0xC471u);
              JUMPOUT(0x198391390);
            }
            if (v211 <= (int)v210 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198391398);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v330, v21, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v17 = &v329;
            goto LABEL_52;
          case 0x19u:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
            __break(0xC471u);
            JUMPOUT(0x1983908A0);
          default:
            __break(0xC471u);
            JUMPOUT(0x1983908D0);
        }
        goto LABEL_52;
      case 0x60:
      case 0x61:
      case 0x64:
      case 0x113:
      case 0x166:
        goto LABEL_396;
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
        v49 = *((_QWORD *)a2 + 3);
        v50 = *((_DWORD *)this + 41);
        if (v50 <= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1983911FCLL);
        }
        if (v50 <= (int)v49 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198391204);
        }
        if (v50 <= (int)v49 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x19839120CLL);
        }
        v51 = *((_QWORD *)this + 19);
        v52 = *(_QWORD *)(v51 + 8 * *((_QWORD *)a2 + 3));
        v53 = *(_QWORD *)(v51 + 8 * (v49 + 1));
        v54 = *(_QWORD *)(v51 + 8 * (v49 + 2));
        v55 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
        v56 = v52 & 0xFF00FFFFFFFFFFFFLL;
        v57 = v53 & 0xFF00FFFFFFFFFFFFLL;
        switch((int)v52)
        {
          case 0:
          case 1:
          case 2:
          case 4:
          case 5:
          case 6:
          case 12:
          case 13:
          case 23:
          case 24:
            goto LABEL_77;
          case 3:
            return;
          case 7:
            if (*((_WORD *)a2 + 9) == 146)
              v242 = *((_DWORD *)a2 + 20);
            else
              v242 = *((_DWORD *)a2 + 18);
            v13 = *a3;
            if (BYTE2(v242) - 3 <= 1)
              goto LABEL_78;
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(v13, 16388);
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16389);
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16400);
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v322, v55, 16400, v56, v57, 0);
            JSC::DFG::LazyNode::LazyNode(&v321, (JSC::DFG::Node *)(v54 & 0xFF00FFFFFFFFFFFFLL));
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v320, 18, 16400, v56, v57, 0);
            v17 = &v319;
            goto LABEL_502;
          case 8:
            if (*((_WORD *)a2 + 9) == 146)
              v244 = *((_DWORD *)a2 + 20);
            else
              v244 = *((_DWORD *)a2 + 18);
            v13 = *a3;
            if (BYTE2(v244) - 3 <= 1)
              goto LABEL_78;
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(v13, 16388);
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16389);
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16401);
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v318, 13, 16401, v56, v57, 0);
            JSC::DFG::LazyNode::LazyNode(&v317, (JSC::DFG::Node *)(v54 & 0xFF00FFFFFFFFFFFFLL));
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v316, 14, 16401, v56, v57, 0);
            JSC::DFG::LazyNode::LazyNode(&v315, (JSC::DFG::Node *)(v54 & 0xFF00FFFFFFFFFFFFLL));
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v314, 15, 16401, v56, v57, 0);
            v17 = &v313;
            goto LABEL_502;
          case 9:
            if (*((_WORD *)a2 + 9) == 146)
              v246 = *((_DWORD *)a2 + 20);
            else
              v246 = *((_DWORD *)a2 + 18);
            v13 = *a3;
            if (BYTE2(v246) - 3 <= 1)
              goto LABEL_78;
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(v13, 16388);
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16389);
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16402);
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v312, v55, 16402, v56, v57, 0);
            JSC::DFG::LazyNode::LazyNode(&v311, (JSC::DFG::Node *)(v54 & 0xFF00FFFFFFFFFFFFLL));
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v310, 20, 16402, v56, v57, 0);
            v17 = &v309;
LABEL_502:
            v34 = (JSC::DFG::Node *)(v54 & 0xFF00FFFFFFFFFFFFLL);
            goto LABEL_53;
          case 10:
            if (*((_WORD *)a2 + 9) == 146)
              v245 = *((_DWORD *)a2 + 20);
            else
              v245 = *((_DWORD *)a2 + 18);
            v13 = *a3;
            if (BYTE2(v245) - 3 > 1)
              goto LABEL_496;
            goto LABEL_78;
          case 11:
            if (*((_WORD *)a2 + 9) == 146)
              v243 = *((_DWORD *)a2 + 20);
            else
              v243 = *((_DWORD *)a2 + 18);
            v13 = *a3;
            if ((v243 & 0xFE0000) != 0)
              goto LABEL_78;
LABEL_496:
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(v13, 16388);
            break;
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
            if (*((_WORD *)a2 + 9) == 146)
              v58 = *((_DWORD *)a2 + 20);
            else
              v58 = *((_DWORD *)a2 + 18);
            v13 = *a3;
            if ((v58 & 0x40000000) != 0)
              goto LABEL_84;
            goto LABEL_86;
          case 25:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
            __break(0xC471u);
            JUMPOUT(0x198390D64);
          default:
            __break(0xC471u);
            JUMPOUT(0x198390F98);
        }
LABEL_497:
        v13 = *a3;
LABEL_159:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(v13, 16389);
        v13 = *a3;
        v14 = 16403;
        goto LABEL_9;
      case 0x84:
      case 0x85:
      case 0x126:
        goto LABEL_71;
      case 0x87:
      case 0x8A:
        goto LABEL_8;
      case 0x88:
      case 0x89:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x109:
      case 0x10C:
      case 0x10E:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x116:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x122:
      case 0x144:
      case 0x159:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x167:
      case 0x168:
      case 0x169:
      case 0x16A:
      case 0x16B:
        goto LABEL_138;
      case 0x8B:
        v34 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v306;
        goto LABEL_53;
      case 0x8C:
      case 0x8D:
        v36 = *a3;
        v37 = 16393;
        goto LABEL_70;
      case 0x90:
      case 0x93:
        goto LABEL_85;
      case 0x91:
      case 0x92:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16394);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16393);
LABEL_8:
        v13 = *a3;
        v14 = 16396;
        goto LABEL_9;
      case 0x96:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16390);
        v17 = &v340;
        goto LABEL_52;
      case 0x97:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16391);
        v17 = &v339;
        goto LABEL_52;
      case 0x98:
      case 0x99:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, ((unint64_t)*(unsigned int *)(*((_QWORD *)a2 + 9) + 4) << 15) | 0xF);
        if (*((int *)this + 238) > 1)
          return;
        v17 = &v301;
        goto LABEL_52;
      case 0x9A:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16394);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16396);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, ((unint64_t)**((unsigned int **)a2 + 9) << 15) | 0xF);
        if (*((int *)this + 238) < 2)
          v17 = &v299;
        else
          v17 = &v300;
        goto LABEL_52;
      case 0x9B:
        v34 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL);
        if (*((int *)this + 238) < 2)
          v17 = &v295;
        else
          v17 = &v296;
        goto LABEL_53;
      case 0x9C:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16394);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16396);
        JSC::DFG::MultiPutByOffsetData::reallocatesStorage(*((_QWORD *)a2 + 9));
        v34 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        if (*((int *)this + 238) < 2)
          v17 = &v297;
        else
          v17 = &v298;
        goto LABEL_53;
      case 0x9D:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16394);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16396);
        JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9));
        return;
      case 0x9E:
        v25 = *((_DWORD *)a2 + 18);
        if (v25 - 6 < 6)
        {
          v13 = *a3;
          v14 = 16388;
          goto LABEL_9;
        }
        if (*((_DWORD *)a2 + 18) <= 0x18u)
        {
          if (v25 == 5)
            return;
          if (v25 - 12 < 2)
          {
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
            v17 = &v294;
            goto LABEL_52;
          }
          if (v25 == 3)
            return;
        }
        else if (v25 == 25)
        {
LABEL_65:
          *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
          if ((v25 & 0x40000000) != 0)
            return;
          v17 = &v293;
          goto LABEL_52;
        }
        v209 = JSC::DFG::toTypedArrayType(v25);
        if (v209 == 12 || !v209)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x198390790);
        }
        goto LABEL_65;
      case 0x9F:
        v27 = *((_DWORD *)a2 + 18);
        if (v27 != 25)
        {
          v248 = JSC::DFG::toTypedArrayType(v27);
          if (v248 == 12 || !v248)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
            __break(0xC471u);
            JUMPOUT(0x1983911D4);
          }
        }
        if ((v27 & 0x40000000) != 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
          __break(0xC471u);
          JUMPOUT(0x19838EC00);
        }
        return;
      case 0xA0:
        v186 = *((_DWORD *)a2 + 18);
        if (v186 == 25)
          goto LABEL_358;
        v251 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v251 == 12 || !v251)
        {
          if (v186 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x198391378);
          }
          return;
        }
        if (v186 == 3)
          return;
LABEL_358:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
        if ((v186 & 0x40000000) != 0)
          return;
        v17 = &v292;
        goto LABEL_52;
      case 0xA1:
        if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
        {
          __break(0xC471u);
          JUMPOUT(0x198391154);
        }
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16389);
        v17 = &v291;
        goto LABEL_52;
      case 0xA2:
        v136 = *((unsigned __int8 *)a2 + 72);
        if (v136 == 25)
          goto LABEL_250;
        v249 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
        if (v249 != 12 && v249)
        {
          if (v136 != 3)
          {
LABEL_250:
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
            if (*((_WORD *)a2 + 9) == 146)
              v137 = *((_DWORD *)a2 + 20);
            else
              v137 = *((_DWORD *)a2 + 18);
            if ((v137 & 0x40000000) == 0)
            {
              v17 = &v304;
              goto LABEL_52;
            }
          }
        }
        else if (v136 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x198391298);
        }
        return;
      case 0xA3:
        v166 = *((unsigned __int8 *)a2 + 72);
        if (v166 == 25)
          goto LABEL_311;
        v250 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
        if (v250 != 12 && v250)
        {
          if (v166 != 3)
          {
LABEL_311:
            *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
            if (*((_WORD *)a2 + 9) == 146)
              v167 = *((_DWORD *)a2 + 20);
            else
              v167 = *((_DWORD *)a2 + 18);
            if ((v167 & 0x40000000) == 0)
            {
              v17 = &v303;
              goto LABEL_52;
            }
          }
        }
        else if (v166 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x1983912FCLL);
        }
        return;
      case 0xAB:
        v18 = *((unsigned int *)a2 + 18);
        v19 = 21;
        goto LABEL_22;
      case 0xAC:
        v34 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v290;
        goto LABEL_53;
      case 0xAD:
      case 0xAE:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, (*((_QWORD *)a2 + 9) << 15) | 0x24);
        v17 = &v283;
        goto LABEL_52;
      case 0xAF:
        v34 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v282;
        goto LABEL_53;
      case 0xB3:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16398);
        v17 = &v287;
        goto LABEL_52;
      case 0xB4:
        v34 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v286;
        goto LABEL_53;
      case 0xBE:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16395);
        v17 = &v308;
        goto LABEL_52;
      case 0xC1:
        v199 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (v199 > 0x31 || ((1 << v199) & 0x2000000200002) == 0)
          goto LABEL_77;
        v139 = *((_QWORD *)a2 + 4);
        if ((v139 & 0xFF00FFFFFFFFFFFFLL) == 0)
          return;
LABEL_257:
        v38 = v139 & 0xFC000000000000;
        v39 = 0x4000000000000;
        goto LABEL_76;
      case 0xC2:
        v13 = *a3;
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 > 2)
          goto LABEL_78;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(v13, 16394);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16396);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16399);
        v17 = &v302;
        goto LABEL_52;
      case 0xC4:
        v135 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (!(_DWORD)v135)
          goto LABEL_77;
        if ((_DWORD)v135 != 11)
        {
          __break(0xC471u);
          JUMPOUT(0x19838FBF0);
        }
        goto LABEL_138;
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
        v40 = v12 - 202;
        if (v40 >= 0xAu || ((0x3EFu >> v40) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198391134);
        }
        v41 = dword_1991556C8[(__int16)v40];
        v42 = (_DWORD *)((char *)a2 + 24);
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
        {
          v215 = v41 + *v42;
          if (*((_DWORD *)this + 41) <= v215)
          {
            __break(0xC471u);
            JUMPOUT(0x1983913A0);
          }
          v43 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v215);
        }
        else
        {
          v43 = &v42[2 * v41];
        }
        v13 = *a3;
        if ((*v43 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_78;
LABEL_84:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(v13, 16406);
        goto LABEL_85;
      case 0xCE:
        v138 = (uint64_t *)((char *)a2 + 24);
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
        {
          v247 = *v138;
          if (*((_DWORD *)this + 41) <= v247)
          {
            __break(0xC471u);
            JUMPOUT(0x198391414);
          }
          v138 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v247);
        }
        v139 = *v138;
        goto LABEL_257;
      case 0xD6:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16393);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16394);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16396);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16388);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16401);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16400);
        v13 = *a3;
        v63 = 16402;
        goto LABEL_137;
      case 0xD7:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16393);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16394);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16396);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16388);
        if (*((_WORD *)a2 + 9) == 146)
          v187 = *((_DWORD *)a2 + 20);
        else
          v187 = *((_DWORD *)a2 + 18);
        switch(v187)
        {
          case 7u:
            v13 = *a3;
            v14 = 16400;
            break;
          case 9u:
            v13 = *a3;
            v14 = 16402;
            break;
          case 8u:
            v13 = *a3;
            v14 = 16401;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198391174);
        }
        goto LABEL_9;
      case 0xDA:
      case 0xDE:
        v13 = *a3;
        v14 = 16408;
        goto LABEL_9;
      case 0xDD:
        goto LABEL_132;
      case 0xDF:
      case 0xE0:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000
          || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x40000000000000
          || (*((_QWORD *)a2 + 5) & 0xFC000000000000) != 0x54000000000000)
        {
          goto LABEL_77;
        }
LABEL_132:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16408);
        v13 = *a3;
        v14 = 16398;
        goto LABEL_9;
      case 0xE1:
        v82 = *((_QWORD *)a2 + 5);
        goto LABEL_324;
      case 0xE6:
        v146 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((v146 - 1) < 2)
          return;
        if ((_DWORD)v146)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19838FD44);
        }
        goto LABEL_77;
      case 0xE7:
      case 0xE8:
      case 0xE9:
      case 0xEA:
      case 0xED:
        v28 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v28 == 21)
        {
          if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x54000000000000)
            return;
LABEL_138:
          v13 = *a3;
LABEL_139:
          v14 = 16407;
          goto LABEL_9;
        }
        if ((_DWORD)v28)
          return;
LABEL_33:
        v26 = *((_BYTE *)a2 + 38);
LABEL_34:
        if ((v26 & 0xFC) != 0)
          return;
        goto LABEL_77;
      case 0x106:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16407);
        v120 = *((_QWORD *)a2 + 4);
        v121 = v120;
        if ((v120 & 0x80000000) != 0)
        {
          JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v120) + 0x2000000000000, v114, v115, v116, v117, v118, v119);
        }
        else
        {
          JSC::DFG::Graph::freeze((uint64_t)this, v120 | 0xFFFE000000000000, v114, v115, v116, v117, v118, v119);
          if (!(_DWORD)v120)
            return;
        }
        v128 = *((unsigned __int16 *)a2 + 9);
        switch(v128)
        {
          case 267:
            goto LABEL_510;
          case 264:
            v129 = *((_DWORD *)a2 + 19);
            break;
          case 352:
LABEL_510:
            v129 = *((_DWORD *)a2 + 21);
            break;
          default:
            v129 = *((_DWORD *)a2 + 18);
            goto LABEL_233;
        }
        LOBYTE(v129) = v129 & 0xF;
LABEL_233:
        if (v129 <= 0x19u && ((1 << v129) & 0x2A003F0) != 0)
        {
          v130 = *((unsigned int *)this + 107);
          if (v120 >= v130)
          {
            if ((_DWORD)v130)
            {
              v219 = (unsigned int *)*((_QWORD *)this + 52);
              v220 = 4 * v130;
              do
              {
                v221 = *v219;
                if (v221 < v120)
                {
                  v222 = v221 + *((_DWORD *)a2 + 6);
                  if (*((_DWORD *)this + 41) <= v222)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198391224);
                  }
                  v223 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v222);
                  if ((int)v221 < 0)
                    v224 = COERCE__INT64((double)v221) + 0x2000000000000;
                  else
                    v224 = v221 | 0xFFFE000000000000;
                  JSC::DFG::Graph::freeze((uint64_t)this, v224, v122, v123, v124, v125, v126, v127);
                  JSC::DFG::LazyNode::LazyNode(&v280, (JSC::DFG::Node *)(v223 & 0xFF00FFFFFFFFFFFFLL));
                }
                ++v219;
                v220 -= 4;
              }
              while (v220);
            }
          }
          else
          {
            v131 = 0;
            do
            {
              v132 = v131 + *((_QWORD *)a2 + 3);
              if (*((_DWORD *)this + 41) <= v132)
              {
                __break(0xC471u);
                JUMPOUT(0x1983911F4);
              }
              v133 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v132);
              if ((int)v131 < 0)
                v134 = COERCE__INT64((double)v131) + 0x2000000000000;
              else
                v134 = v131 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v134, v122, v123, v124, v125, v126, v127);
              JSC::DFG::LazyNode::LazyNode(&v281, (JSC::DFG::Node *)(v133 & 0xFF00FFFFFFFFFFFFLL));
              ++v131;
            }
            while (v121 != v131);
          }
        }
        return;
      case 0x107:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16407);
        v194 = *((unsigned int *)a2 + 8);
        if (!*((_DWORD *)a2 + 8))
          return;
        v195 = *((_QWORD *)a2 + 3);
        v196 = *((_DWORD *)this + 41);
        v197 = v196 >= v195;
        LODWORD(v198) = v196 - v195;
        if (v197)
          v198 = v198;
        else
          v198 = 0;
        while (1)
        {
          if (!v198)
          {
            __break(0xC471u);
            JUMPOUT(0x1983911ECLL);
          }
          if (*(_WORD *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v195) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 350)
            break;
          LODWORD(v195) = v195 + 1;
          --v198;
          if (!--v194)
            return;
        }
LABEL_396:
        v13 = *a3;
        v14 = 16386;
        goto LABEL_9;
      case 0x10A:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16407);
        v164 = *((unsigned int *)a2 + 20);
        if ((v164 & 0x80000000) != 0)
          v165 = COERCE__INT64((double)v164) + 0x2000000000000;
        else
          v165 = v164 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v165, v158, v159, v160, v161, v162, v163);
        return;
      case 0x10B:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16407);
        v89 = (uint64_t *)*((_QWORD *)a2 + 9);
        v90 = *v89;
        v91 = *(unsigned int *)(*v89 + 8);
        if ((v91 & 0x80000000) != 0)
          v92 = COERCE__INT64((double)v91) + 0x2000000000000;
        else
          v92 = v91 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v92, v83, v84, v85, v86, v87, v88);
        v100 = *((unsigned __int16 *)a2 + 9);
        switch(v100)
        {
          case 267:
            goto LABEL_508;
          case 264:
            v101 = *((_DWORD *)a2 + 19);
            break;
          case 352:
LABEL_508:
            v101 = *((_DWORD *)a2 + 21);
            break;
          default:
            v101 = *((_DWORD *)a2 + 18);
            goto LABEL_211;
        }
        LOBYTE(v101) = v101 & 0xF;
LABEL_211:
        if (v101 <= 0x19u && ((1 << v101) & 0x2A003F0) != 0)
        {
          v102 = *((unsigned int *)this + 107);
          if (v102 <= v91)
          {
            v279[1] = 0;
            v279[0] = 0;
            if ((_DWORD)v102)
            {
              v216 = (unsigned int *)*((_QWORD *)this + 52);
              v217 = 4 * v102;
              do
              {
                v218 = *v216;
                LODWORD(v252) = v218;
                if (v218 < v91)
                {
                  if (HIDWORD(v279[1]) == LODWORD(v279[1]))
                  {
                    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v279, (unint64_t)&v252);
                  }
                  else
                  {
                    *((_DWORD *)v279[0] + HIDWORD(v279[1])) = v218;
                    ++HIDWORD(v279[1]);
                  }
                }
                ++v216;
                v217 -= 4;
              }
              while (v217);
              v225 = v279[0];
              if (HIDWORD(v279[1]))
              {
                v226 = v90 + 16;
                v227 = 4 * HIDWORD(v279[1]);
                do
                {
                  v228 = *(unsigned int *)v225;
                  if ((v228 & 0x80000000) != 0)
                    v229 = COERCE__INT64((double)v228) + 0x2000000000000;
                  else
                    v229 = v228 | 0xFFFE000000000000;
                  JSC::DFG::Graph::freeze((uint64_t)this, v229, v94, v95, v96, v97, v98, v99);
                  if ((*(_BYTE *)(v90 + 4) & 0xE) == 6)
                    v236 = *(_QWORD *)(v226 + 8 * v228) + 0x2000000000000;
                  else
                    v236 = *(_QWORD *)(v226 + 8 * v228);
                  JSC::DFG::Graph::freeze((uint64_t)this, v236, v230, v231, v232, v233, v234, v235);
                  v225 = (WTF *)((char *)v225 + 4);
                  v227 -= 4;
                }
                while (v227);
                v225 = v279[0];
              }
              if (v225)
              {
                v279[0] = 0;
                LODWORD(v279[1]) = 0;
                WTF::fastFree((unint64_t)v225, v93, v94, v95, v96, v97, v98, v99);
              }
            }
          }
          else if ((_DWORD)v91)
          {
            v103 = 0;
            v104 = v90 + 16;
            do
            {
              if ((v103 & 0x80000000) != 0)
                v105 = COERCE__INT64((double)v103) + 0x2000000000000;
              else
                v105 = v103 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v105, v94, v95, v96, v97, v98, v99);
              if ((*(_BYTE *)(v90 + 4) & 0xE) == 6)
                v112 = *(_QWORD *)(v104 + 8 * v103) + 0x2000000000000;
              else
                v112 = *(_QWORD *)(v104 + 8 * v103);
              JSC::DFG::Graph::freeze((uint64_t)this, v112, v106, v107, v108, v109, v110, v111);
              ++v103;
            }
            while (v91 != v103);
          }
        }
        return;
      case 0x10D:
        v192 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (!(_DWORD)v192)
          goto LABEL_77;
        if ((_DWORD)v192 != 52 && (_DWORD)v192 != 1)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198390518);
        }
        goto LABEL_138;
      case 0x10F:
        v156 = *((_QWORD *)a2 + 3);
        v13 = *a3;
        if ((v156 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v156 & 0xFC000000000000) == 0x54000000000000)
          goto LABEL_139;
        goto LABEL_78;
      case 0x114:
        isWatchingHavingABadTimeWatchpoint = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v13 = *a3;
        if ((isWatchingHavingABadTimeWatchpoint & 1) != 0)
          goto LABEL_136;
        goto LABEL_78;
      case 0x115:
        v113 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v113 == 349)
          goto LABEL_396;
        if (v113 != 352)
          goto LABEL_77;
LABEL_85:
        v13 = *a3;
LABEL_86:
        v14 = 16423;
        goto LABEL_9;
      case 0x123:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16395);
        v17 = &v307;
        goto LABEL_52;
      case 0x12B:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
        v17 = &v344;
        goto LABEL_52;
      case 0x12C:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
        v17 = &v343;
        goto LABEL_52;
      case 0x135:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
        v17 = &v342;
        goto LABEL_52;
      case 0x136:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
        v17 = &v341;
        goto LABEL_52;
      case 0x13E:
      case 0x145:
        v62 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (v62 > 0x34)
          goto LABEL_128;
        if (((1 << v62) & 0x12026001400002) != 0)
          return;
        if (((1 << v62) & 0x101) == 0)
        {
LABEL_128:
          __break(0xC471u);
          JUMPOUT(0x19838F2F0);
        }
        goto LABEL_77;
      case 0x13F:
        v82 = *((_QWORD *)a2 + 3);
LABEL_324:
        v38 = v82 & 0xFC000000000000;
        v39 = 0x54000000000000;
LABEL_76:
        if (v38 != v39)
          goto LABEL_77;
        return;
      case 0x146:
        v190 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v190 == 28)
          return;
        if ((_DWORD)v190)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198390450);
        }
        goto LABEL_77;
      case 0x157:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, ((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x21);
        v17 = &v289;
        goto LABEL_52;
      case 0x158:
        v34 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v288;
        goto LABEL_53;
      case 0x15B:
      case 0x161:
      case 0x162:
        goto LABEL_135;
      case 0x15C:
      case 0x163:
        if ((*(_DWORD *)(*((_QWORD *)this + 3) + 16) & 0xFFFFFFFE) != 4)
        {
LABEL_135:
          v13 = *a3;
LABEL_136:
          v63 = 16386;
LABEL_137:
          *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(v13, v63);
        }
        goto LABEL_138;
      case 0x164:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, ((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x14);
        v17 = &v285;
        goto LABEL_52;
      case 0x165:
        v34 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v284;
        goto LABEL_53;
      case 0x178:
      case 0x179:
      case 0x17A:
      case 0x17D:
        v13 = *a3;
        v14 = 16418;
        goto LABEL_9;
      case 0x17E:
        v13 = *a3;
        v14 = 16392;
        goto LABEL_9;
      case 0x17F:
        v13 = *a3;
        v14 = 16387;
        goto LABEL_9;
      case 0x180:
      case 0x182:
        if ((_DWORD)v12 != 386 || (v65 = *((unsigned __int8 *)a2 + 80), v65 == 1))
        {
          *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16396);
          v69 = *((unsigned __int16 *)a2 + 9);
          if (v69 == 146)
            v70 = *((_DWORD *)a2 + 20);
          else
            v70 = *((_DWORD *)a2 + 18);
          if (v69 == 386)
            v71 = 11;
          else
            v71 = 12;
          switch((char)v70)
          {
            case 3:
              return;
            case 7:
              if (BYTE2(v70) > 1u)
                goto LABEL_77;
              *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16388);
              *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16400);
              v72 = *((_QWORD *)a2 + 3);
              v73 = *((_DWORD *)this + 41);
              if (v73 <= v72)
              {
                __break(0xC471u);
                JUMPOUT(0x1983913E4);
              }
              if (v73 <= (int)v72 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1983913ECLL);
              }
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)v351, v71, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
              v17 = &v350;
              goto LABEL_52;
            case 8:
              if (BYTE2(v70) > 1u)
                goto LABEL_77;
              *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16388);
              *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16401);
              v237 = *((_QWORD *)a2 + 3);
              v238 = *((_DWORD *)this + 41);
              if (v238 <= v237)
              {
                __break(0xC471u);
                JUMPOUT(0x1983913F4);
              }
              if (v238 <= (int)v237 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1983913FCLL);
              }
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)v349, v71, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
              v17 = &v348;
              goto LABEL_52;
            case 9:
              if (BYTE2(v70) > 1u)
                goto LABEL_77;
              *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16388);
              *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16402);
              v239 = *((_QWORD *)a2 + 3);
              v240 = *((_DWORD *)this + 41);
              if (v240 <= v239)
              {
                __break(0xC471u);
                JUMPOUT(0x198391404);
              }
              if (v240 <= (int)v239 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19839140CLL);
              }
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)v347, v71, 16402, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
              v17 = &v346;
              goto LABEL_52;
            case 10:
              if (BYTE2(v70) <= 1u)
                goto LABEL_497;
              goto LABEL_77;
            default:
              goto LABEL_77;
          }
        }
        if (v65 != 2)
          goto LABEL_77;
        if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1983913B8);
        }
        if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000) != 0x20000000000000)
          goto LABEL_77;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16396);
        v36 = *a3;
        v37 = 16399;
LABEL_70:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(v36, v37);
LABEL_71:
        v13 = *a3;
        v14 = 16394;
        goto LABEL_9;
      case 0x18A:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
          v78 = 16411;
        else
          v78 = 16412;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, v78);
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v278, 52, v78, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
        v17 = &v277;
        goto LABEL_52;
      case 0x18B:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16411);
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v276, 54, 16411, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v17 = &v275;
        goto LABEL_52;
      case 0x18C:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
          v191 = 16413;
        else
          v191 = 16414;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, v191);
        v17 = &v274;
        goto LABEL_52;
      case 0x18D:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
          v44 = 16413;
        else
          v44 = 16414;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, v44);
        v17 = &v273;
        goto LABEL_52;
      case 0x18E:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
          v81 = 16413;
        else
          v81 = 16414;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, v81);
        v17 = &v272;
        goto LABEL_52;
      case 0x18F:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
          v80 = 16411;
        else
          v80 = 16412;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, v80);
        v17 = &v271;
        goto LABEL_52;
      case 0x190:
        if (*((_DWORD *)a2 + 18))
          v79 = 16412;
        else
          v79 = 16411;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, v79);
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v270, 48, v79, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v17 = &v269;
        goto LABEL_52;
      case 0x191:
        if (*((_DWORD *)a2 + 18))
          v77 = 16412;
        else
          v77 = 16411;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, v77);
        v17 = &v268;
        goto LABEL_52;
      case 0x192:
        if (*((_DWORD *)a2 + 18))
          v200 = 16412;
        else
          v200 = 16411;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, v200);
        v17 = &v267;
        goto LABEL_52;
      case 0x193:
        if (*((_DWORD *)a2 + 18))
          v193 = 16412;
        else
          v193 = 16411;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, v193);
        v17 = &v266;
        goto LABEL_52;
      case 0x194:
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v263, 53, 16412, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v17 = &v262;
        goto LABEL_52;
      case 0x195:
        v188 = *((_QWORD *)a2 + 3);
        v189 = *((_DWORD *)this + 41);
        if (v189 <= v188)
        {
          __break(0xC471u);
          JUMPOUT(0x198391380);
        }
        if (v189 <= (int)v188 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198391388);
        }
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v261, 53, 16411, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
        v17 = &v260;
        goto LABEL_52;
      case 0x197:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x88000000000000)
          v185 = 16415;
        else
          v185 = 16416;
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, v185);
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v265, 55, v185, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v17 = &v264;
        goto LABEL_52;
      case 0x198:
        v184 = *((_QWORD *)a2 + 4);
        if ((v184 & 0xFC000000000000) != 0x2C000000000000)
        {
          *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16385);
          v184 = *((_QWORD *)a2 + 4);
        }
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v259, 55, 16416, *((_QWORD *)a2 + 3), v184, 0);
        v34 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v258;
        goto LABEL_53;
      case 0x199:
        v177 = *((_QWORD *)a2 + 3);
        v178 = *((_DWORD *)this + 41);
        if (v178 <= v177)
        {
          __break(0xC471u);
          JUMPOUT(0x198391304);
        }
        v179 = (v177 + 1);
        if (v178 <= v179)
        {
          __break(0xC471u);
          JUMPOUT(0x19839130CLL);
        }
        v180 = (v177 + 2);
        if (v178 <= v180)
        {
          __break(0xC471u);
          JUMPOUT(0x198391314);
        }
        v181 = v177;
        v182 = *((_QWORD *)this + 19);
        v183 = *(_QWORD *)(v182 + 8 * v179);
        if ((v183 & 0xFC000000000000) != 0x2C000000000000)
        {
          *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16385);
          v183 = *(_QWORD *)(v182 + 8 * v179);
        }
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v257, 55, 16415, *(_QWORD *)(v182 + 8 * v181), v183, 0);
        v34 = (JSC::DFG::Node *)(*(_QWORD *)(v182 + 8 * v180) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v256;
        goto LABEL_53;
      case 0x1A0:
        v169 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
        if (!v169)
          goto LABEL_77;
        v170 = *(unsigned int *)(v169 + 20);
        v171 = (unsigned __int16)*(_DWORD *)(v169 + 20);
        v172 = *(_DWORD *)(v169 + 28);
        if (v171 != WORD1(v170))
        {
          v173 = WORD1(v170) == 0xFFFF && v171 == 0;
          v174 = (v170 << 15) | 0x25;
          if (v173)
            v175 = 16385;
          else
            v175 = v174;
          *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, v175);
        }
        if ((_WORD)v172)
        {
          if (v172 >= 0xFFFF0000 && (unsigned __int16)v172 == 0xFFFF)
            return;
        }
        else if (v172 > 0xFFFEFFFF)
        {
          return;
        }
        v17 = &v305;
LABEL_52:
        v34 = a2;
LABEL_53:
        JSC::DFG::LazyNode::LazyNode(v17, v34);
        return;
      case 0x1A1:
        v18 = *(unsigned int *)(*((_QWORD *)a2 + 9) + 44);
        if ((unsigned __int16)*(_DWORD *)(*((_QWORD *)a2 + 9) + 44) == WORD1(v18))
          return;
        if ((unsigned __int16)*(_DWORD *)(*((_QWORD *)a2 + 9) + 44))
          v168 = 0;
        else
          v168 = WORD1(v18) == 0xFFFF;
        if (v168)
          goto LABEL_77;
        v19 = 37;
LABEL_22:
        v14 = v19 | (v18 << 15);
        v13 = *a3;
        goto LABEL_9;
      case 0x1AB:
      case 0x1AC:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16406);
        if ((*((_BYTE *)a2 + 74) & 1) != 0)
          return;
        v64 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v254, v64, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
        v17 = &v253;
        goto LABEL_52;
      case 0x1AD:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16423);
        v13 = *a3;
        v14 = 16406;
        goto LABEL_9;
      case 0x1AE:
      case 0x1AF:
        *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(*a3, 16410);
        v17 = &v255;
        goto LABEL_52;
      case 0x1B1:
        __break(0xC471u);
        JUMPOUT(0x19838FDB4);
      default:
        *(_OWORD *)v279 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v12];
        WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)v279, &v252);
        if (v252)
          v201 = (const char *)(v252 + 16);
        else
          v201 = 0;
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v201);
        WTF::CString::~CString((WTF::CString *)&v252, v202, v203, v204, v205, v206, v207, v208);
        __break(0xC471u);
        JUMPOUT(0x198390724);
    }
  }
  v75 = *((unsigned __int16 *)a2 + 9);
  if (v75 > 0xC9)
  {
    if (v75 - 202 > 0x3E || ((1 << (v75 + 54)) & 0x400000000E002FEFLL) == 0)
    {
      v76 = v75 - 333;
      if (v76 > 0x3A || ((1 << v76) & 0x7A8000000000003) == 0)
      {
LABEL_479:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
        __break(0xC471u);
        JUMPOUT(0x198390C34);
      }
    }
    goto LABEL_77;
  }
  v241 = v75 - 101;
  if (v75 - 101 > 0x3E)
    goto LABEL_478;
  if (((1 << v241) & 0x7E0070000000000FLL) == 0)
  {
    if (((1 << v241) & 0x18000000000) == 0)
    {
LABEL_478:
      if (v75 - 92 >= 2)
        goto LABEL_479;
      goto LABEL_77;
    }
    goto LABEL_7;
  }
LABEL_77:
  v13 = *a3;
LABEL_78:
  v14 = 16385;
LABEL_9:
  *((_BYTE *)a3 + 8) |= JSC::DFG::ClobberSet::overlaps(v13, v14);
}

void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::CheckClobberize,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::CheckClobberize,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::CheckClobberize const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  char *v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  JSC::DFG::Node *v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 v55;
  uint64_t v56;
  BOOL v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int v116;
  const char *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  BOOL v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  BOOL v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int *v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  WTF *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  unsigned int v197;
  char v198;
  int v199;
  int v200;
  int v201;
  uint64_t v202;
  int v203;
  int v205;
  int v207;
  int v209;
  uint64_t v211;
  char v212;
  _BYTE v213[56];
  char v214;
  char v215;
  _BYTE v216[56];
  char v217;
  _BYTE v218[56];
  char v219;
  _BYTE v220[56];
  char v221;
  _BYTE v222[56];
  char v223;
  _BYTE v224[56];
  char v225;
  char v226;
  char v227;
  char v228;
  _BYTE v229[56];
  char v230;
  char v231;
  char v232;
  char v233;
  char v234;
  _BYTE v235[56];
  char v236;
  _BYTE v237[56];
  WTF *v238[2];
  uint64_t v239;
  uint64_t v240;
  char v241;
  char v242;
  char v243;
  char v244;
  char v245;
  char v246;
  char v247;
  char v248;
  char v249;
  char v250;
  char v251;
  char v252;
  char v253;
  char v254;
  char v255;
  char v256;
  char v257;
  char v258;
  char v259;
  char v260;
  char v261;
  char v262;
  char v263;
  char v264;
  char v265;
  char v266;
  char v267;
  _BYTE v268[56];
  uint64_t v269;
  _BYTE v270[56];
  char v271;
  _BYTE v272[56];
  uint64_t v273;
  _BYTE v274[56];
  uint64_t v275;
  _BYTE v276[56];
  char v277;
  _BYTE v278[56];
  uint64_t v279;
  _BYTE v280[56];
  char v281;
  _BYTE v282[56];
  char v283;
  _BYTE v284[56];
  char v285;
  _BYTE v286[56];
  char v287;
  _BYTE v288[56];
  char v289;
  _BYTE v290[56];
  char v291;
  char v292;
  char v293;
  char v294;
  char v295;
  char v296;
  char v297;
  char v298;
  char v299;
  char v300;
  char v301;
  char v302;
  _BYTE v303[56];
  char v304;
  _BYTE v305[56];
  char v306;
  _BYTE v307[56];

  if (*((int *)this + 238) <= 0 && JSC::DFG::Node::hasArrayMode(a2))
  {
    v94 = *((unsigned __int16 *)a2 + 9);
    if (v94 > 0xC9)
    {
      if (v94 - 202 > 0x3E || ((1 << (v94 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v96 = v94 - 333;
        if (v96 > 0x3A || ((1 << v96) & 0x7A8000000000003) == 0)
        {
LABEL_386:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x19839328CLL);
        }
      }
      goto LABEL_3;
    }
    v198 = v94 - 101;
    if (v94 - 101 > 0x3E)
      goto LABEL_385;
    if (((1 << v198) & 0x7E0070000000000FLL) != 0)
      goto LABEL_3;
    if (((1 << v198) & 0x18000000000) == 0)
    {
LABEL_385:
      if (v94 - 92 >= 2)
        goto LABEL_386;
      goto LABEL_3;
    }
  }
  v11 = *((unsigned __int16 *)a2 + 9);
  switch(*((_WORD *)a2 + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1E:
    case 0x20:
    case 0x21:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x5B:
    case 0x60:
    case 0x61:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x8A:
    case 0x8C:
    case 0x8D:
    case 0x90:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xB6:
    case 0xB7:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBF:
    case 0xC0:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xEB:
    case 0xEC:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x113:
    case 0x118:
    case 0x126:
    case 0x127:
    case 0x128:
    case 0x129:
    case 0x12A:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x166:
    case 0x17C:
    case 0x183:
    case 0x188:
    case 0x189:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19F:
      return;
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xC:
    case 0xE:
    case 0x11:
    case 0x12:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1F:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x4B:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5E:
    case 0x5F:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8E:
    case 0x8F:
    case 0x91:
    case 0x92:
    case 0xA7:
    case 0xA8:
    case 0xAC:
    case 0xB0:
    case 0xB1:
    case 0xB2:
    case 0xB5:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xC3:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD8:
    case 0xD9:
    case 0xDA:
    case 0xDB:
    case 0xDC:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x101:
    case 0x102:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x108:
    case 0x109:
    case 0x10C:
    case 0x10E:
    case 0x10F:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x116:
    case 0x117:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x144:
    case 0x147:
    case 0x14A:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x153:
    case 0x154:
    case 0x155:
    case 0x156:
    case 0x159:
    case 0x15A:
    case 0x15B:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x161:
    case 0x162:
    case 0x163:
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
    case 0x16B:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x175:
    case 0x176:
    case 0x177:
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17B:
    case 0x17D:
    case 0x17E:
    case 0x17F:
    case 0x181:
    case 0x184:
    case 0x185:
    case 0x186:
    case 0x187:
    case 0x196:
    case 0x19B:
    case 0x19E:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
    case 0x1AD:
    case 0x1B0:
      goto LABEL_3;
    case 0xB:
      v12 = &v295;
      goto LABEL_37;
    case 0xD:
      v12 = &v294;
      goto LABEL_37;
    case 0xF:
      v131 = (_QWORD *)*((_QWORD *)a2 + 9);
      v132 = v131;
      do
      {
        v133 = v132;
        v132 = (_QWORD *)*v132;
      }
      while (v132);
      if (v133 != v131)
      {
        *v131 = v133;
        v131 = (_QWORD *)*((_QWORD *)a2 + 9);
      }
      v134 = v131;
      do
      {
        v135 = v134;
        v134 = (_QWORD *)*v134;
      }
      while (v134);
      if (v135 != v131)
        *v131 = v135;
      v12 = &v293;
      goto LABEL_37;
    case 0x10:
      v125 = (_QWORD *)*((_QWORD *)a2 + 9);
      v126 = v125;
      do
      {
        v127 = v126;
        v126 = (_QWORD *)*v126;
      }
      while (v126);
      if (v127 != v125)
        *v125 = v127;
      *a4 = 1;
      v128 = (_QWORD *)*((_QWORD *)a2 + 9);
      v129 = v128;
      do
      {
        v130 = v129;
        v129 = (_QWORD *)*v129;
      }
      while (v129);
      if (v130 != v128)
        *v128 = v130;
      v25 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
      v12 = &v292;
      goto LABEL_38;
    case 0x13:
      v12 = &v291;
      goto LABEL_37;
    case 0x1C:
      v104 = (_QWORD *)*((_QWORD *)a2 + 9);
      v105 = v104;
      do
      {
        v106 = v105;
        v105 = (_QWORD *)*v105;
      }
      while (v105);
      if (v106 != v104)
        *v104 = v106;
      goto LABEL_3;
    case 0x29:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26 < 3)
        return;
      goto LABEL_3;
    case 0x2A:
    case 0x142:
    case 0x143:
      v19 = *((_BYTE *)a2 + 30);
      goto LABEL_20;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*((_BYTE *)a2 + 30) & 0xFC) != 0)
        goto LABEL_19;
      goto LABEL_3;
    case 0x3F:
      v101 = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1;
LABEL_180:
      if (v101 < 2)
        return;
      goto LABEL_3;
    case 0x40:
    case 0x42:
    case 0x44:
      v37 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v37 == 1 || (_DWORD)v37 == 49 || (_DWORD)v37 == 52)
        return;
      if ((_DWORD)v37)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198391FC8);
      }
      goto LABEL_3;
    case 0x41:
      v56 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v57 = (_DWORD)v56 == 49 || (_DWORD)v56 == 1;
      if (v57 || (_DWORD)v56 == 52)
        return;
      goto LABEL_3;
    case 0x46:
      v138 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v138 != 1 && (_DWORD)v138 != 49)
        goto LABEL_3;
      return;
    case 0x49:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x131:
      v53 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v54 = 0xC4000000000000;
      goto LABEL_80;
    case 0x52:
    case 0x53:
      v90 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v90 > 0x34)
        goto LABEL_146;
      if (((1 << v90) & 0x1200001C000002) != 0)
        return;
      if (v90)
      {
LABEL_146:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198392554);
      }
      goto LABEL_3;
    case 0x5C:
    case 0x5D:
      v13 = *((_DWORD *)a2 + 18);
      v14 = *((_DWORD *)a2 + 14) & 7;
      if (v14 >= 2)
      {
        switch(v14)
        {
          case 3u:
            v15 = 13;
            break;
          case 4u:
            v15 = 17;
            break;
          case 5u:
            v15 = 19;
            break;
          case 7u:
            __break(0xC471u);
            JUMPOUT(0x198393540);
          default:
            __break(0xC471u);
            JUMPOUT(0x198393570);
        }
      }
      else
      {
        v15 = 21;
      }
      if (*((_DWORD *)a2 + 18) - 14 < 9)
      {
        if ((v13 & 0x40000000) == 0)
        {
          v16 = *((_DWORD *)a2 + 6);
          v17 = *((_DWORD *)this + 41);
          if (v17 <= v16)
          {
            __break(0xC471u);
            JUMPOUT(0x1983935F0);
          }
          if (v17 <= v16 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198391CC0);
          }
          return;
        }
LABEL_3:
        *a4 = 1;
        return;
      }
      v22 = BYTE2(v13);
      switch(*((_DWORD *)a2 + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 0x17u:
        case 0x18u:
          goto LABEL_3;
        case 5u:
          if (v22 - 3 > 1)
            return;
          goto LABEL_3;
        case 6u:
          return;
        case 7u:
          if (v22 > 3 || v22 == 2)
            goto LABEL_3;
          if (v22 == 3)
            v15 = 18;
          v82 = *((_QWORD *)a2 + 3);
          v83 = *((_DWORD *)this + 41);
          if (v83 <= v82)
          {
            __break(0xC471u);
            JUMPOUT(0x198393688);
          }
          if (v83 <= (int)v82 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198393690);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v286, v15, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v12 = &v285;
          goto LABEL_37;
        case 8u:
          if (v22 >= 2)
          {
            if (v22 != 3)
              goto LABEL_3;
            if (v14 == 3)
              goto LABEL_150;
          }
          else if (v14 == 3)
          {
            if (!v22)
            {
              v91 = 14;
LABEL_153:
              v92 = *((_QWORD *)a2 + 3);
              v93 = *((_DWORD *)this + 41);
              if (v93 <= v92)
              {
                __break(0xC471u);
                JUMPOUT(0x1983936A0);
              }
              if (v93 <= (int)v92 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1983936A8);
              }
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)v284, v91, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
              v12 = &v283;
LABEL_37:
              v25 = a2;
LABEL_38:
              JSC::DFG::LazyNode::LazyNode(v12, v25);
              return;
            }
LABEL_150:
            if (v22 == 3)
              v91 = 15;
            else
              v91 = 13;
            goto LABEL_153;
          }
          v91 = 16;
          goto LABEL_153;
        case 9u:
          if (v22 > 3 || v22 == 2)
            goto LABEL_3;
          if (v22 == 3)
            v15 = 20;
          v23 = *((_QWORD *)a2 + 3);
          v24 = *((_DWORD *)this + 41);
          if (v24 <= v23)
          {
            __break(0xC471u);
            JUMPOUT(0x198393668);
          }
          if (v24 <= (int)v23 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198393670);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v282, v15, 16402, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v12 = &v281;
          goto LABEL_37;
        case 0xAu:
        case 0xBu:
          if (v22 < 2)
            return;
          goto LABEL_3;
        case 0xCu:
          if (v22 > 1)
            goto LABEL_3;
          v171 = *((_QWORD *)a2 + 3);
          v172 = *((_DWORD *)this + 41);
          if (v172 <= v171)
          {
            __break(0xC471u);
            JUMPOUT(0x198393814);
          }
          if (v172 <= (int)v171 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19839381CLL);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v290, v15, 16404, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v12 = &v289;
          goto LABEL_37;
        case 0xDu:
          v169 = *((_QWORD *)a2 + 3);
          v170 = *((_DWORD *)this + 41);
          if (v170 <= v169)
          {
            __break(0xC471u);
            JUMPOUT(0x198393804);
          }
          if (v170 <= (int)v169 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19839380CLL);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v288, v15, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v12 = &v287;
          goto LABEL_37;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x198392F8CLL);
        default:
          __break(0xC471u);
          JUMPOUT(0x198392FBCLL);
      }
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v26 = *((_QWORD *)a2 + 3);
      v27 = *((_DWORD *)this + 41);
      if (v27 <= v26)
      {
        __break(0xC471u);
        JUMPOUT(0x198393650);
      }
      if (v27 <= (int)v26 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198393658);
      }
      if (v27 <= (int)v26 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198393660);
      }
      v28 = *((_DWORD *)a2 + 18);
      v29 = *((_QWORD *)this + 19);
      v30 = *(_QWORD *)(v29 + 8 * *((_QWORD *)a2 + 3));
      v31 = *(_QWORD *)(v29 + 8 * (v26 + 1));
      v32 = *(_QWORD *)(v29 + 8 * (v26 + 2));
      v33 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
      v34 = v28;
      if (v28 - 14 < 9)
        goto LABEL_3;
      v35 = v30 & 0xFF00FFFFFFFFFFFFLL;
      v36 = v31 & 0xFF00FFFFFFFFFFFFLL;
      switch(v34)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 10:
        case 11:
        case 12:
        case 13:
        case 23:
        case 24:
          goto LABEL_3;
        case 7:
          if (*((_WORD *)a2 + 9) == 146)
            v199 = *((_DWORD *)a2 + 20);
          else
            v199 = *((_DWORD *)a2 + 18);
          *a4 = 1;
          if (BYTE2(v199) - 3 < 2)
            return;
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v280, v33, 16400, v35, v36, 0);
          JSC::DFG::LazyNode::LazyNode(&v279, (JSC::DFG::Node *)(v32 & 0xFF00FFFFFFFFFFFFLL));
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v278, 18, 16400, v35, v36, 0);
          v12 = &v277;
          break;
        case 8:
          if (*((_WORD *)a2 + 9) == 146)
            v200 = *((_DWORD *)a2 + 20);
          else
            v200 = *((_DWORD *)a2 + 18);
          *a4 = 1;
          if (BYTE2(v200) - 3 < 2)
            return;
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v276, 13, 16401, v35, v36, 0);
          JSC::DFG::LazyNode::LazyNode(&v275, (JSC::DFG::Node *)(v32 & 0xFF00FFFFFFFFFFFFLL));
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v274, 14, 16401, v35, v36, 0);
          JSC::DFG::LazyNode::LazyNode(&v273, (JSC::DFG::Node *)(v32 & 0xFF00FFFFFFFFFFFFLL));
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v272, 15, 16401, v35, v36, 0);
          v12 = &v271;
          break;
        case 9:
          if (*((_WORD *)a2 + 9) == 146)
            v201 = *((_DWORD *)a2 + 20);
          else
            v201 = *((_DWORD *)a2 + 18);
          *a4 = 1;
          if (BYTE2(v201) - 3 < 2)
            return;
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v270, v33, 16402, v35, v36, 0);
          JSC::DFG::LazyNode::LazyNode(&v269, (JSC::DFG::Node *)(v32 & 0xFF00FFFFFFFFFFFFLL));
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v268, 20, 16402, v35, v36, 0);
          v12 = &v267;
          break;
        case 25:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
          __break(0xC471u);
          JUMPOUT(0x198391EE0);
        default:
          __break(0xC471u);
          JUMPOUT(0x198393488);
      }
      v25 = (JSC::DFG::Node *)(v32 & 0xFF00FFFFFFFFFFFFLL);
      goto LABEL_38;
    case 0x8B:
      *a4 = 1;
      v25 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v12 = &v264;
      goto LABEL_38;
    case 0x96:
      v12 = &v297;
      goto LABEL_37;
    case 0x97:
      v12 = &v296;
      goto LABEL_37;
    case 0x98:
    case 0x99:
      if (*((int *)this + 238) > 1)
        return;
      v12 = &v259;
      goto LABEL_37;
    case 0x9A:
      if (*((int *)this + 238) < 2)
        v12 = &v257;
      else
        v12 = &v258;
      goto LABEL_37;
    case 0x9B:
      *a4 = 1;
      v25 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL);
      if (*((int *)this + 238) < 2)
        v12 = &v253;
      else
        v12 = &v254;
      goto LABEL_38;
    case 0x9C:
      *a4 = 1;
      v114 = *((_QWORD *)a2 + 9);
      v115 = ((unint64_t)*(unsigned int *)(v114 + 20) << 6) - 64;
      while (v115 != -64)
      {
        v116 = *(_DWORD *)(*(_QWORD *)(v114 + 8) + v115) - 2;
        v115 -= 64;
        if (v116 <= 3)
        {
          v114 = *((_QWORD *)a2 + 9);
          break;
        }
      }
      if (JSC::DFG::MultiPutByOffsetData::reallocatesStorage(v114))
        *a4 = 1;
      v25 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      if (*((int *)this + 238) < 2)
        v12 = &v255;
      else
        v12 = &v256;
      goto LABEL_38;
    case 0x9D:
      *a4 = 1;
      if (JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9)))
        *a4 = 1;
      return;
    case 0x9E:
      v18 = *((_DWORD *)a2 + 18);
      if (v18 - 5 < 7)
        return;
      if (v18 == 25)
        goto LABEL_16;
      if (v18 - 12 < 2)
      {
        v12 = &v252;
        goto LABEL_37;
      }
      if (v18 != 3)
      {
        v168 = JSC::DFG::toTypedArrayType(v18);
        if (v168 == 12 || !v168)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x198392EB4);
        }
LABEL_16:
        if ((v18 & 0x40000000) == 0)
        {
          v12 = &v251;
          goto LABEL_37;
        }
      }
      goto LABEL_3;
    case 0x9F:
      v21 = *((_DWORD *)a2 + 18);
      if (v21 != 25)
      {
        v203 = JSC::DFG::toTypedArrayType(v21);
        if (v203 == 12 || v203 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x198393648);
        }
      }
      if ((v21 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x198391D78);
      }
      return;
    case 0xA0:
      v107 = *((_DWORD *)a2 + 18);
      if (v107 == 25)
        goto LABEL_196;
      v209 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
      if (v209 == 12 || v209 == 0)
      {
        if (v107 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x1983937D4);
        }
        goto LABEL_3;
      }
      if (v107 == 3)
        goto LABEL_3;
LABEL_196:
      if ((v107 & 0x40000000) != 0)
        goto LABEL_3;
      v12 = &v250;
      goto LABEL_37;
    case 0xA1:
      if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x1983935E8);
      }
      v12 = &v249;
      goto LABEL_37;
    case 0xA2:
      v102 = *((_DWORD *)a2 + 18);
      v103 = v102;
      if (v102 == 25)
        goto LABEL_186;
      v207 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
      if (v207 == 12 || v207 == 0)
      {
        if (v103 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x198393770);
        }
      }
      else if (v103 != 3)
      {
        v102 = *((_WORD *)a2 + 9) == 146 ? *((_DWORD *)a2 + 20) : *((_DWORD *)a2 + 18);
LABEL_186:
        if ((v102 & 0x40000000) == 0)
        {
          v12 = &v262;
          goto LABEL_37;
        }
      }
      goto LABEL_3;
    case 0xA3:
      v99 = *((_DWORD *)a2 + 18);
      v100 = v99;
      if (v99 == 25)
        goto LABEL_177;
      v205 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
      if (v205 == 12 || v205 == 0)
      {
        if (v100 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x19839370CLL);
        }
      }
      else if (v100 != 3)
      {
        v99 = *((_WORD *)a2 + 9) == 146 ? *((_DWORD *)a2 + 20) : *((_DWORD *)a2 + 18);
LABEL_177:
        if ((v99 & 0x40000000) == 0)
        {
          v12 = &v261;
          goto LABEL_37;
        }
      }
      goto LABEL_3;
    case 0xAD:
    case 0xAE:
      v12 = &v242;
      goto LABEL_37;
    case 0xAF:
      *a4 = 1;
      v25 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v12 = &v241;
      goto LABEL_38;
    case 0xB3:
      v12 = &v246;
      goto LABEL_37;
    case 0xB4:
      *a4 = 1;
      v25 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v12 = &v245;
      goto LABEL_38;
    case 0xBE:
      v12 = &v266;
      goto LABEL_37;
    case 0xC1:
      v139 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v140 = v139 > 0x31;
      v141 = (1 << v139) & 0x2000000200002;
      v142 = v140 || v141 == 0;
      if (v142
        || (v143 = *((_QWORD *)a2 + 4), (v143 & 0xFF00FFFFFFFFFFFFLL) != 0)
        && (v143 & 0xFC000000000000) != 0x4000000000000)
      {
        *a4 = 1;
      }
      return;
    case 0xC2:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 > 2)
        goto LABEL_3;
      v12 = &v260;
      goto LABEL_37;
    case 0xC4:
      v136 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v136 && (_DWORD)v136 != 11)
      {
        __break(0xC471u);
        JUMPOUT(0x198392ACCLL);
      }
      goto LABEL_3;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      v55 = v11 - 202;
      if (v55 >= 0xAu || ((0x3EFu >> v55) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1983935C8);
      }
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0
        && *((_DWORD *)this + 41) <= (dword_1991556C8[(__int16)v55] + *((_DWORD *)a2 + 6)))
      {
        __break(0xC471u);
        JUMPOUT(0x198392194);
      }
      goto LABEL_3;
    case 0xCE:
      v113 = (uint64_t *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v202 = *v113;
        if (*((_DWORD *)this + 41) <= v202)
        {
          __break(0xC471u);
          JUMPOUT(0x1983938A0);
        }
        v113 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v202);
      }
      v53 = *v113 & 0xFC000000000000;
      v54 = 0x4000000000000;
      goto LABEL_80;
    case 0xD7:
      if (*((unsigned __int8 *)a2 + 72) - 7 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x19839287CLL);
      }
      return;
    case 0xE1:
      v109 = *((_QWORD *)a2 + 5);
      goto LABEL_293;
    case 0xE6:
      v108 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((v108 - 1) < 2)
        return;
      if ((_DWORD)v108)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1983927BCLL);
      }
      goto LABEL_3;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v20 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v20 == 21)
      {
        if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x54000000000000)
          return;
      }
      else
      {
        if ((_DWORD)v20)
          return;
LABEL_19:
        v19 = *((_BYTE *)a2 + 38);
LABEL_20:
        if ((v19 & 0xFC) != 0)
          return;
      }
      goto LABEL_3;
    case 0x106:
      *a4 = 1;
      v38 = *((_QWORD *)a2 + 4);
      v39 = v38;
      if ((v38 & 0x80000000) != 0)
      {
        JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v38) + 0x2000000000000, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      else
      {
        JSC::DFG::Graph::freeze((uint64_t)this, v38 | 0xFFFE000000000000, a3, (uint64_t)a4, a5, a6, a7, a8);
        if (!(_DWORD)v38)
          return;
      }
      v46 = *((unsigned __int16 *)a2 + 9);
      switch(v46)
      {
        case 267:
          goto LABEL_391;
        case 264:
          v47 = *((_DWORD *)a2 + 19);
          break;
        case 352:
LABEL_391:
          v47 = *((_DWORD *)a2 + 21);
          break;
        default:
          v47 = *((_DWORD *)a2 + 18);
          goto LABEL_65;
      }
      LOBYTE(v47) = v47 & 0xF;
LABEL_65:
      if (v47 <= 0x19u && ((1 << v47) & 0x2A003F0) != 0)
      {
        v48 = *((unsigned int *)this + 107);
        if (v38 >= v48)
        {
          if ((_DWORD)v48)
          {
            v176 = (unsigned int *)*((_QWORD *)this + 52);
            v177 = 4 * v48;
            do
            {
              v178 = *v176;
              if (v178 < v38)
              {
                v179 = v178 + *((_DWORD *)a2 + 6);
                if (*((_DWORD *)this + 41) <= v179)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198393680);
                }
                v180 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v179);
                if ((int)v178 < 0)
                  v181 = COERCE__INT64((double)v178) + 0x2000000000000;
                else
                  v181 = v178 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v181, v40, v41, v42, v43, v44, v45);
                JSC::DFG::LazyNode::LazyNode(&v239, (JSC::DFG::Node *)(v180 & 0xFF00FFFFFFFFFFFFLL));
              }
              ++v176;
              v177 -= 4;
            }
            while (v177);
          }
        }
        else
        {
          v49 = 0;
          do
          {
            v50 = v49 + *((_QWORD *)a2 + 3);
            if (*((_DWORD *)this + 41) <= v50)
            {
              __break(0xC471u);
              JUMPOUT(0x198393698);
            }
            v51 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v50);
            if ((int)v49 < 0)
              v52 = COERCE__INT64((double)v49) + 0x2000000000000;
            else
              v52 = v49 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v52, v40, v41, v42, v43, v44, v45);
            JSC::DFG::LazyNode::LazyNode(&v240, (JSC::DFG::Node *)(v51 & 0xFF00FFFFFFFFFFFFLL));
            ++v49;
          }
          while (v39 != v49);
        }
      }
      return;
    case 0x107:
      if (*((_DWORD *)a2 + 8))
      {
        v161 = *((_QWORD *)a2 + 3);
        v162 = *((_DWORD *)this + 41);
        v163 = v162 >= v161;
        LODWORD(v164) = v162 - v161;
        if (v163)
          v164 = v164;
        else
          v164 = 0;
        v165 = *((unsigned int *)a2 + 8) - 1;
        do
        {
          if (!v164)
          {
            __break(0xC471u);
            JUMPOUT(0x198393678);
          }
          v166 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v161++) & 0xFF00FFFFFFFFFFFFLL)
                                     + 0x12);
          v167 = v166 == 350 || v165-- == 0;
          --v164;
        }
        while (!v167);
      }
      goto LABEL_3;
    case 0x10A:
      *a4 = 1;
      v84 = *((unsigned int *)a2 + 20);
      if ((v84 & 0x80000000) != 0)
        v85 = COERCE__INT64((double)v84) + 0x2000000000000;
      else
        v85 = v84 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v85, a3, (uint64_t)a4, a5, a6, a7, a8);
      return;
    case 0x10B:
      *a4 = 1;
      v58 = (uint64_t *)*((_QWORD *)a2 + 9);
      v59 = *v58;
      v60 = *(unsigned int *)(*v58 + 8);
      if ((v60 & 0x80000000) != 0)
        v61 = COERCE__INT64((double)v60) + 0x2000000000000;
      else
        v61 = v60 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v61, a3, (uint64_t)a4, a5, a6, a7, a8);
      v69 = *((unsigned __int16 *)a2 + 9);
      switch(v69)
      {
        case 267:
          goto LABEL_372;
        case 264:
          v70 = *((_DWORD *)a2 + 19);
          break;
        case 352:
LABEL_372:
          v70 = *((_DWORD *)a2 + 21);
          break;
        default:
          v70 = *((_DWORD *)a2 + 18);
          goto LABEL_101;
      }
      LOBYTE(v70) = v70 & 0xF;
LABEL_101:
      if (v70 - 4 < 6 || v70 <= 0x19u && ((1 << v70) & 0x2A00000) != 0)
      {
        v71 = *((unsigned int *)this + 107);
        if (v71 <= v60)
        {
          v238[1] = 0;
          v238[0] = 0;
          if ((_DWORD)v71)
          {
            v173 = (unsigned int *)*((_QWORD *)this + 52);
            v174 = 4 * v71;
            do
            {
              v175 = *v173;
              LODWORD(v211) = v175;
              if (v175 < v60)
              {
                if (HIDWORD(v238[1]) == LODWORD(v238[1]))
                {
                  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v238, (unint64_t)&v211);
                }
                else
                {
                  *((_DWORD *)v238[0] + HIDWORD(v238[1])) = v175;
                  ++HIDWORD(v238[1]);
                }
              }
              ++v173;
              v174 -= 4;
            }
            while (v174);
            v182 = v238[0];
            if (HIDWORD(v238[1]))
            {
              v183 = v59 + 16;
              v184 = 4 * HIDWORD(v238[1]);
              do
              {
                v185 = *(unsigned int *)v182;
                if ((v185 & 0x80000000) != 0)
                  v186 = COERCE__INT64((double)v185) + 0x2000000000000;
                else
                  v186 = v185 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v186, v63, v64, v65, v66, v67, v68);
                if ((*(_BYTE *)(v59 + 4) & 0xE) == 6)
                  v193 = *(_QWORD *)(v183 + 8 * v185) + 0x2000000000000;
                else
                  v193 = *(_QWORD *)(v183 + 8 * v185);
                JSC::DFG::Graph::freeze((uint64_t)this, v193, v187, v188, v189, v190, v191, v192);
                v182 = (WTF *)((char *)v182 + 4);
                v184 -= 4;
              }
              while (v184);
              v182 = v238[0];
            }
            if (v182)
            {
              v238[0] = 0;
              LODWORD(v238[1]) = 0;
              WTF::fastFree((unint64_t)v182, v62, v63, v64, v65, v66, v67, v68);
            }
          }
        }
        else if ((_DWORD)v60)
        {
          v72 = 0;
          v73 = v59 + 16;
          do
          {
            if ((v72 & 0x80000000) != 0)
              v74 = COERCE__INT64((double)v72) + 0x2000000000000;
            else
              v74 = v72 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v74, v63, v64, v65, v66, v67, v68);
            if ((*(_BYTE *)(v59 + 4) & 0xE) == 6)
              v81 = *(_QWORD *)(v73 + 8 * v72) + 0x2000000000000;
            else
              v81 = *(_QWORD *)(v73 + 8 * v72);
            JSC::DFG::Graph::freeze((uint64_t)this, v81, v75, v76, v77, v78, v79, v80);
            ++v72;
          }
          while (v60 != v72);
        }
      }
      return;
    case 0x10D:
      v88 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v88 >= 2 && (_DWORD)v88 != 52)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1983924A0);
      }
      goto LABEL_3;
    case 0x114:
      JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 0x115:
      if (*(_WORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 352)
        goto LABEL_3;
      return;
    case 0x123:
      v12 = &v265;
      goto LABEL_37;
    case 0x12B:
      v12 = &v301;
      goto LABEL_37;
    case 0x12C:
      v12 = &v300;
      goto LABEL_37;
    case 0x135:
      v12 = &v299;
      goto LABEL_37;
    case 0x136:
      v12 = &v298;
      goto LABEL_37;
    case 0x13E:
    case 0x145:
      v87 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v87 > 0x34)
        goto LABEL_388;
      if (((1 << v87) & 0x12026000400002) != 0)
        return;
      if (((1 << v87) & 0x101) != 0)
      {
        *a4 = 1;
        return;
      }
      if (v87 != 24)
      {
LABEL_388:
        __break(0xC471u);
        JUMPOUT(0x1983932B4);
      }
      goto LABEL_3;
    case 0x13F:
      v109 = *((_QWORD *)a2 + 3);
LABEL_293:
      v53 = v109 & 0xFC000000000000;
      v54 = 0x54000000000000;
      goto LABEL_80;
    case 0x146:
      v137 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v137 == 28)
        return;
      if ((_DWORD)v137)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198392B44);
      }
      goto LABEL_3;
    case 0x157:
      v12 = &v248;
      goto LABEL_37;
    case 0x158:
      *a4 = 1;
      v25 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v12 = &v247;
      goto LABEL_38;
    case 0x164:
      v12 = &v244;
      goto LABEL_37;
    case 0x165:
      *a4 = 1;
      v25 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v12 = &v243;
      goto LABEL_38;
    case 0x180:
    case 0x182:
      if ((_DWORD)v11 != 386)
      {
        v110 = 12;
        goto LABEL_204;
      }
      v86 = *((unsigned __int8 *)a2 + 80);
      if (v86 == 1)
      {
        v110 = 11;
LABEL_204:
        v101 = BYTE2(*((_DWORD *)a2 + 18));
        switch(*((_DWORD *)a2 + 18))
        {
          case 7u:
            if (v101 > 1)
              goto LABEL_3;
            v111 = *((_QWORD *)a2 + 3);
            v112 = *((_DWORD *)this + 41);
            if (v112 <= v111)
            {
              __break(0xC471u);
              JUMPOUT(0x198393870);
            }
            if (v112 <= (int)v111 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198393878);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v307, v110, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v12 = &v306;
            break;
          case 8u:
            if (v101 > 1)
              goto LABEL_3;
            v194 = *((_QWORD *)a2 + 3);
            v195 = *((_DWORD *)this + 41);
            if (v195 <= v194)
            {
              __break(0xC471u);
              JUMPOUT(0x198393880);
            }
            if (v195 <= (int)v194 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198393888);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v305, v110, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v12 = &v304;
            break;
          case 9u:
            if (v101 > 1)
              goto LABEL_3;
            v196 = *((_QWORD *)a2 + 3);
            v197 = *((_DWORD *)this + 41);
            if (v197 <= v196)
            {
              __break(0xC471u);
              JUMPOUT(0x198393890);
            }
            if (v197 <= (int)v196 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198393898);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v303, v110, 16402, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v12 = &v302;
            break;
          case 0xAu:
            goto LABEL_180;
          default:
            goto LABEL_3;
        }
        goto LABEL_37;
      }
      if (v86 != 2)
        goto LABEL_3;
      if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x198393824);
      }
      v53 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000;
      v54 = 0x20000000000000;
LABEL_80:
      if (v53 != v54)
        goto LABEL_3;
      return;
    case 0x18A:
      v148 = *((_QWORD *)a2 + 3);
      if ((v148 & 0xFC000000000000) == 0x78000000000000)
        v149 = 16411;
      else
        v149 = 16412;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v237, 52, v149, v148, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
      v12 = &v236;
      goto LABEL_37;
    case 0x18B:
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v235, 54, 16411, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v12 = &v234;
      goto LABEL_37;
    case 0x18C:
      *a4 = 1;
      v12 = &v233;
      goto LABEL_37;
    case 0x18D:
      v12 = &v232;
      goto LABEL_37;
    case 0x18E:
      v12 = &v231;
      goto LABEL_37;
    case 0x18F:
      v12 = &v230;
      goto LABEL_37;
    case 0x190:
      v97 = *((_DWORD *)a2 + 18);
      *a4 = 1;
      if (v97)
        v98 = 16412;
      else
        v98 = 16411;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v229, 48, v98, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v12 = &v228;
      goto LABEL_37;
    case 0x191:
      v12 = &v227;
      goto LABEL_37;
    case 0x192:
      v12 = &v226;
      goto LABEL_37;
    case 0x193:
      v12 = &v225;
      goto LABEL_37;
    case 0x194:
      *a4 = 1;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v222, 53, 16412, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v12 = &v221;
      goto LABEL_37;
    case 0x195:
      v158 = *((_QWORD *)a2 + 3);
      v159 = *((_DWORD *)this + 41);
      if (v159 <= v158)
      {
        __break(0xC471u);
        JUMPOUT(0x1983937F4);
      }
      if (v159 <= (int)v158 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1983937FCLL);
      }
      v160 = *((_QWORD *)this + 19);
      *a4 = 1;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v220, 53, 16411, *(_QWORD *)(v160 + 8 * v158), *(_QWORD *)(v160 + 8 * (v158 + 1)), 0);
      v12 = &v219;
      goto LABEL_37;
    case 0x197:
      v156 = *((_QWORD *)a2 + 3);
      if ((v156 & 0xFC000000000000) == 0x88000000000000)
        v157 = 16415;
      else
        v157 = 16416;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v224, 55, v157, v156, *((_QWORD *)a2 + 4), 0);
      v12 = &v223;
      goto LABEL_37;
    case 0x198:
      v155 = *((_QWORD *)a2 + 4);
      *a4 = 1;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v218, 55, 16416, *((_QWORD *)a2 + 3), v155, 0);
      v25 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v12 = &v217;
      goto LABEL_38;
    case 0x199:
      v150 = *((_QWORD *)a2 + 3);
      v151 = *((_DWORD *)this + 41);
      if (v151 <= v150)
      {
        __break(0xC471u);
        JUMPOUT(0x1983937DCLL);
      }
      if (v151 <= (int)v150 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1983937E4);
      }
      v152 = v150 + 2;
      if (v151 <= (int)v150 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1983937ECLL);
      }
      v153 = *((_QWORD *)this + 19);
      v154 = *(_QWORD *)(v153 + 8 * (v150 + 1));
      *a4 = 1;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v216, 55, 16415, *(_QWORD *)(v153 + 8 * v150), v154, 0);
      v25 = (JSC::DFG::Node *)(*(_QWORD *)(v153 + 8 * v152) & 0xFF00FFFFFFFFFFFFLL);
      v12 = &v215;
      goto LABEL_38;
    case 0x1A0:
      v144 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
      if (!v144)
        goto LABEL_3;
      v146 = *(_DWORD *)(v144 + 24);
      v145 = *(_DWORD *)(v144 + 28);
      if ((unsigned __int16)v146 != HIWORD(v146))
        *a4 = 1;
      if ((_WORD)v145)
      {
        if (v145 >= 0xFFFF0000 && (unsigned __int16)v145 == 0xFFFF)
          return;
      }
      else if (v145 > 0xFFFEFFFF)
      {
        return;
      }
      v12 = &v263;
      goto LABEL_37;
    case 0x1A1:
      if ((unsigned __int16)*(_DWORD *)(*((_QWORD *)a2 + 9) + 48) == HIWORD(*(_DWORD *)(*((_QWORD *)a2 + 9) + 48)))
        return;
      goto LABEL_3;
    case 0x1AB:
    case 0x1AC:
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
        goto LABEL_3;
      v89 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v213, v89, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
      v12 = &v212;
      goto LABEL_37;
    case 0x1AE:
    case 0x1AF:
      v12 = &v214;
      goto LABEL_37;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x198392A1CLL);
    default:
      *(_OWORD *)v238 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v11];
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)v238, &v211);
      if (v211)
        v117 = (const char *)(v211 + 16);
      else
        v117 = 0;
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v117);
      WTF::CString::~CString((WTF::CString *)&v211, v118, v119, v120, v121, v122, v123, v124);
      __break(0xC471u);
      JUMPOUT(0x1983929ACLL);
  }
}

void JSC::DFG::clobberize<JSC::DFG::AbstractHeapOverlaps,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::AbstractHeapOverlaps,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  int v75;
  char *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  unsigned int v187;
  unsigned int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  unsigned int v211;
  unsigned int v212;
  uint64_t v213;
  char v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  __int16 v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  unsigned int v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  char v281;
  int v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  char v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  char v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  unsigned int v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  char v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  char v376;
  uint64_t v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  char v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  int v417;
  uint64_t v418;
  char v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  uint64_t v435;
  char v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  char v442;
  int v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  char v447;
  uint64_t v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  int v464;
  int v465;
  BOOL v466;
  uint64_t v467;
  unint64_t v468;
  BOOL v469;
  uint64_t v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  char v474;
  int v475;
  uint64_t v476;
  int v477;
  uint64_t v478;
  unsigned int *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unsigned int v483;
  unsigned int v484;
  uint64_t v485;
  char v486;
  int v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  uint64_t v494;
  char v495;
  uint64_t v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  uint64_t v502;
  char v503;
  uint64_t v504;
  int v505;
  uint64_t v506;
  uint64_t v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  int v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  uint64_t v531;
  uint64_t v532;
  int v533;
  uint64_t v534;
  unsigned int v535;
  unsigned int v536;
  uint64_t v537;
  int v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  uint64_t v545;
  uint64_t v546;
  int v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  uint64_t v552;
  char v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  uint64_t v566;
  int v567;
  uint64_t v568;
  uint64_t v569;
  int v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  int v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  uint64_t v583;
  char v584;
  uint64_t v585;
  int v586;
  uint64_t v587;
  uint64_t v588;
  char v589;
  int v590;
  uint64_t v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  int v602;
  uint64_t v603;
  uint64_t v604;
  int v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  int v609;
  uint64_t v610;
  int v611;
  uint64_t v612;
  int v613;
  uint64_t v614;
  char v615;
  uint64_t v616;
  int v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  uint64_t v621;
  uint64_t v622;
  int v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  uint64_t v627;
  uint64_t v628;
  int v629;
  uint64_t v630;
  char v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  uint64_t *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  void *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  int v646;
  int v647;
  uint64_t v648;
  unsigned int *v649;
  uint64_t v650;
  unsigned int v651;
  uint64_t v652;
  int v653;
  uint64_t v654;
  uint64_t v655;
  int v656;
  uint64_t v657;
  uint64_t v658;
  int v659;
  uint64_t v660;
  uint64_t v661;
  int v662;
  uint64_t v663;
  uint64_t v664;
  int v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  int v670;
  uint64_t v671;
  uint64_t v672;
  int v673;
  uint64_t v674;
  uint64_t v675;
  int v676;
  uint64_t v677;
  uint64_t v678;
  int v679;
  uint64_t v680;
  uint64_t v681;
  int v682;
  uint64_t v683;
  unsigned int v684;
  unsigned int v685;
  uint64_t v686;
  int v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  int v694;
  uint64_t v695;
  char v696;
  uint64_t v697;
  int v698;
  uint64_t v699;
  uint64_t v700;
  int v701;
  uint64_t v702;
  uint64_t v703;
  int v704;
  uint64_t v705;
  int v706;
  uint64_t v707;
  int v708;
  uint64_t v709;
  uint64_t v710;
  int v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  int v716;
  uint64_t v717;
  uint64_t v718;
  int v719;
  uint64_t v720;
  uint64_t v721;
  int v722;
  uint64_t v723;
  uint64_t v724;
  int v725;
  uint64_t v726;
  uint64_t v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  int v731;
  uint64_t v732;
  uint64_t v733;
  int v734;
  uint64_t v735;
  uint64_t v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  uint64_t v741;
  uint64_t v742;
  int v743;
  uint64_t v744;
  uint64_t v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  int v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  int v753;
  uint64_t v754;
  char v755;
  uint64_t v756;
  int v757;
  uint64_t v758;
  uint64_t v759;
  int v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  int v764;
  uint64_t v765;
  char v766;
  uint64_t v767;
  int v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  uint64_t v780;
  int v781;
  uint64_t v782;
  uint64_t v783;
  int v784;
  uint64_t v785;
  uint64_t v786;
  int v787;
  uint64_t v788;
  uint64_t v789;
  int v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  int v796;
  uint64_t v797;
  uint64_t v798;
  int v799;
  uint64_t v800;
  uint64_t v801;
  int v802;
  uint64_t v803;
  uint64_t v804;
  int v805;
  uint64_t v806;
  uint64_t v807;
  int v808;
  uint64_t v809;
  uint64_t v810;
  int v811;
  uint64_t v812;
  uint64_t v813;
  int v814;
  uint64_t v815;
  uint64_t v816;
  int v817;
  uint64_t v818;
  uint64_t v819;
  int v820;
  uint64_t v821;
  uint64_t v822;
  int v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  int v827;
  uint64_t v828;
  char v829;
  uint64_t v830;
  int v831;
  uint64_t v832;
  uint64_t v833;
  int v834;
  uint64_t v835;
  uint64_t v836;
  int v837;
  uint64_t v838;
  WTF *v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  unint64_t v850;
  uint64_t v851;
  int v852;
  uint64_t v853;
  uint64_t v854;
  int v855;
  uint64_t v856;
  uint64_t v857;
  int v858;
  uint64_t v859;
  uint64_t v860;
  int v861;
  uint64_t v862;
  uint64_t v863;
  int v864;
  uint64_t v865;
  uint64_t v866;
  int v867;
  uint64_t v868;
  uint64_t v869;
  int v870;
  uint64_t v871;
  uint64_t v872;
  int v873;
  uint64_t v874;
  int v875;
  uint64_t v876;
  unint64_t v877;
  uint64_t v878;
  int v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  int v883;
  uint64_t v884;
  uint64_t v885;
  int v886;
  uint64_t v887;
  uint64_t v888;
  int v889;
  uint64_t v890;
  uint64_t v891;
  int v892;
  uint64_t v893;
  uint64_t v894;
  int v895;
  uint64_t v896;
  uint64_t v897;
  int v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  int v902;
  uint64_t v903;
  char v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  unsigned int v908;
  uint64_t v909;
  int v910;
  uint64_t v911;
  char v912;
  uint64_t v913;
  int v914;
  uint64_t v915;
  uint64_t v916;
  int v917;
  uint64_t v918;
  uint64_t v919;
  int v920;
  uint64_t v921;
  uint64_t v922;
  int v923;
  uint64_t v924;
  int v925;
  uint64_t v926;
  int v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  int v931;
  uint64_t v932;
  uint64_t v933;
  int v934;
  uint64_t v935;
  uint64_t v936;
  int v937;
  uint64_t v938;
  uint64_t v939;
  int v940;
  uint64_t v941;
  uint64_t v942;
  int v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  _BOOL4 v947;
  uint64_t v948;
  int v949;
  uint64_t v950;
  char v951;
  uint64_t v952;
  int v953;
  uint64_t v954;
  uint64_t v955;
  int v956;
  uint64_t v957;
  uint64_t v958;
  int v959;
  uint64_t v960;
  uint64_t v961;
  int v962;
  uint64_t v963;
  uint64_t v964;
  int v965;
  uint64_t v966;
  uint64_t v967;
  int v968;
  uint64_t v969;
  uint64_t v970;
  int v971;
  uint64_t v972;
  uint64_t v973;
  int v974;
  uint64_t v975;
  uint64_t v976;
  int v977;
  uint64_t v978;
  uint64_t v979;
  char v980;
  int v981;
  uint64_t v982;
  int v983;
  uint64_t v984;
  uint64_t v985;
  int v986;
  uint64_t v987;
  uint64_t v988;
  int v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  int v993;
  uint64_t v994;
  uint64_t v995;
  int v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  int v1000;
  uint64_t v1001;
  uint64_t v1002;
  char v1003;
  int v1004;
  uint64_t v1005;
  int v1006;
  uint64_t v1007;
  uint64_t v1008;
  int v1009;
  uint64_t v1010;
  uint64_t v1011;
  int v1012;
  uint64_t v1013;
  uint64_t v1014;
  int v1015;
  uint64_t v1016;
  uint64_t v1017;
  int v1018;
  uint64_t v1019;
  uint64_t v1020;
  int v1021;
  uint64_t v1022;
  uint64_t v1023;
  int v1024;
  uint64_t v1025;
  char v1026;
  uint64_t v1027;
  int v1028;
  uint64_t v1029;
  uint64_t v1030;
  int v1031;
  uint64_t v1032;
  uint64_t v1033;
  int v1034;
  uint64_t v1035;
  uint64_t v1036;
  int v1037;
  uint64_t v1038;
  uint64_t v1039;
  int v1040;
  uint64_t v1041;
  uint64_t v1042;
  int v1043;
  uint64_t v1044;
  uint64_t v1045;
  int v1046;
  uint64_t v1047;
  uint64_t v1048;
  int v1049;
  uint64_t v1050;
  uint64_t v1051;
  int v1052;
  uint64_t v1053;
  uint64_t v1054;
  int v1055;
  uint64_t v1056;
  uint64_t v1057;
  int v1058;
  uint64_t v1059;
  uint64_t v1060;
  int v1061;
  uint64_t v1062;
  uint64_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  int v1067;
  uint64_t v1068;
  uint64_t v1069;
  int v1070;
  uint64_t v1071;
  uint64_t v1072;
  int v1073;
  uint64_t v1074;
  char v1075;
  _DWORD *v1076;
  int v1077;
  int v1078;
  unsigned int v1079;
  uint64_t v1080;
  int v1081;
  uint64_t v1082;
  uint64_t v1083;
  int v1084;
  uint64_t v1085;
  uint64_t v1086;
  int v1087;
  uint64_t v1088;
  uint64_t v1089;
  int v1090;
  uint64_t v1091;
  uint64_t v1092;
  int v1093;
  uint64_t v1094;
  uint64_t v1095;
  int v1096;
  uint64_t v1097;
  uint64_t v1098;
  int v1099;
  uint64_t v1100;
  uint64_t v1101;
  int v1102;
  uint64_t v1103;
  uint64_t v1104;
  int v1105;
  uint64_t v1106;
  unint64_t v1107;
  uint64_t v1108;
  int v1109;
  uint64_t v1110;
  uint64_t v1111;
  int v1112;
  uint64_t v1113;
  uint64_t v1114;
  int v1115;
  uint64_t v1116;
  uint64_t v1117;
  int v1118;
  uint64_t v1119;
  uint64_t v1120;
  int v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  unsigned int v1125;
  BOOL v1126;
  uint64_t v1127;
  uint64_t v1128;
  int v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  int v1133;
  uint64_t v1134;
  uint64_t v1135;
  int v1136;
  uint64_t v1137;
  uint64_t v1138;
  int v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  int v1143;
  uint64_t v1144;
  uint64_t v1145;
  int v1146;
  uint64_t v1147;
  uint64_t v1148;
  int v1149;
  uint64_t v1150;
  uint64_t v1151;
  int v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  int v1156;
  uint64_t v1157;
  uint64_t v1158;
  int v1159;
  uint64_t v1160;
  uint64_t v1161;
  int v1162;
  uint64_t v1163;
  uint64_t v1164;
  int v1165;
  uint64_t v1166;
  uint64_t v1167;
  int v1168;
  uint64_t v1169;
  uint64_t v1170;
  int v1171;
  uint64_t v1172;
  uint64_t v1173;
  int v1174;
  uint64_t v1175;
  uint64_t v1176;
  unsigned int v1177;
  uint64_t v1178;
  int v1179;
  uint64_t v1180;
  unsigned int v1181;
  uint64_t v1182;
  _DWORD *v1183;
  _QWORD *v1184;
  uint64_t v1185;
  uint64_t v1186;
  BOOL v1187;
  int v1188;
  BOOL v1189;
  int v1190;
  int v1191;
  int v1192;
  int v1193;
  int v1194;
  uint64_t v1195;
  unsigned int v1196;
  unint64_t v1197;
  unsigned int v1198;
  unsigned int v1199;
  uint64_t v1200;
  unsigned int v1201;
  uint64_t *v1202;
  unint64_t v1203;
  uint64_t v1204;
  unint64_t v1205;
  unint64_t v1206;
  unint64_t v1207;
  const char *v1208;
  void *v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  unint64_t v1216;
  unint64_t v1217;
  unint64_t v1218;
  unint64_t v1219;
  int v1220;
  int v1221;
  int v1222;
  int v1223;
  int v1224;
  int v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  _DWORD *v1236;
  int v1237;
  int v1238;
  unsigned int v1239;
  uint64_t v1240;
  unsigned int v1241;
  uint64_t v1242;
  unsigned int v1243;
  char v1244;
  uint64_t v1245;
  int v1246;
  int v1247;
  int v1248;
  int v1249;
  int v1250;
  uint64_t v1251;
  char v1252;
  _BYTE v1253[56];
  uint64_t v1254;
  _BYTE v1255[56];
  char v1256;
  _BYTE v1257[56];
  char v1258;
  char v1259;
  char v1260;
  char v1261;
  _BYTE v1262[56];
  char v1263;
  char v1264;
  char v1265;
  char v1266;
  WTF *v1267[2];
  uint64_t v1268;
  char v1269;
  uint64_t v1270;
  char v1271;
  char v1272;
  char v1273;
  char v1274;
  uint64_t v1275;
  uint64_t v1276;
  char v1277;
  char v1278;
  char v1279;
  char v1280;
  char v1281;
  char v1282;
  char v1283;
  char v1284;
  _BYTE v1285[56];
  char v1286;
  _BYTE v1287[56];
  uint64_t v1288;
  char v1289;
  char v1290;
  char v1291;
  char v1292;
  char v1293;
  char v1294;
  char v1295;
  _BYTE v1296[56];
  char v1297;
  _BYTE v1298[56];
  char v1299;
  _BYTE v1300[56];
  _QWORD v1301[3];

  v13 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v13 = *(_QWORD *)v13;
  while (v13)
  {
    v19 = *(_QWORD *)(v13 + 24);
    if ((*(_BYTE *)(v13 + 32) & 1) != 0 && !*(_BYTE *)(a3 + 8))
    {
      v59 = (HIDWORD(v19) & 0xFFFFF | ((int)(v19 >> 28) >> 24 << 20)) + 3;
      v23 = ((v59 & 0xFFFFFFFEFFFFFFFFLL | (((v59 >> 31) & 1) << 32)) << 15) | 2;
      if (*(_QWORD *)a3 == v23)
      {
LABEL_45:
        v24 = 1;
      }
      else
      {
        while (1)
        {
          v21 = v23 & 0x3FFF;
          if (v21 == 1)
            break;
          if (v21 == 2)
            v22 = 16385;
          else
            v22 = 16387;
          if ((v23 & 0x4000) != 0)
            v23 = v22;
          else
            v23 = v21 | 0x4000u;
          if (v21 == 40)
            v23 = 16385;
          if (v21 == 3)
            v23 = 16385;
          if (v23 == *(_QWORD *)a3)
            goto LABEL_45;
        }
        v24 = 0;
      }
      *(_BYTE *)(a3 + 8) = v24;
      v19 = *(_QWORD *)(v13 + 24);
    }
    if ((v19 >> 60) - 3 <= 2)
    {
      v123 = (HIDWORD(v19) & 0xFFFFF | ((int)(v19 >> 28) >> 24 << 20)) + 4;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, ((v123 & 0xFFFFFFFEFFFFFFFFLL | (((v123 >> 31) & 1) << 32)) << 15) | 2);
    }
    v20 = *(_QWORD *)(v13 + 16);
    v13 = v20 & 0xFFFFFFFF8;
    if ((v20 & 1) != 0)
      v13 = *(_QWORD *)v13;
  }
  if (*((_BYTE *)this + 960))
  {
    v1197 = *(unsigned int *)(*((_QWORD *)this + 4) + 48);
    JSC::DFG::AbstractHeapOverlaps::operator()(a3, ((v1197 & 0xFFFFFFFEFFFFFFFFLL | (((v1197 >> 31) & 1) << 32)) << 15) | 2);
  }
  v1301[0] = a6;
  v1301[1] = a3;
  v1301[2] = a4;
  if (*((int *)this + 238) <= 0 && JSC::DFG::Node::hasArrayMode(a2))
  {
    v1198 = *((unsigned __int16 *)a2 + 9);
    if (v1198 > 0xC9)
    {
      if (v1198 - 202 > 0x3E || ((1 << (v1198 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v1199 = v1198 - 333;
        if (v1199 > 0x3A || ((1 << v1199) & 0x7A8000000000003) == 0)
        {
LABEL_4659:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x19839C030);
        }
      }
LABEL_821:
      JSC::DFG::clobberize<JSC::DFG::AbstractHeapOverlaps,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::AbstractHeapOverlaps,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&,void JSC::DFG::clobberize<JSC::DFG::AbstractHeapOverlaps,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1} const&)::{lambda(void)#1}::operator()((uint64_t)v1301);
      return;
    }
    v1244 = v1198 - 101;
    if (v1198 - 101 > 0x3E)
      goto LABEL_4658;
    if (((1 << v1244) & 0x7E0070000000000FLL) != 0)
      goto LABEL_821;
    if (((1 << v1244) & 0x18000000000) == 0)
    {
LABEL_4658:
      if (v1198 - 92 >= 2)
        goto LABEL_4659;
      goto LABEL_821;
    }
  }
  v14 = *((unsigned __int16 *)a2 + 9);
  switch(*((_WORD *)a2 + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1E:
    case 0x20:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x5B:
    case 0x86:
    case 0x94:
    case 0x95:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xB6:
    case 0xB7:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBF:
    case 0xC0:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xEB:
    case 0xEC:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x118:
    case 0x127:
    case 0x128:
    case 0x12A:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x17C:
    case 0x183:
    case 0x188:
    case 0x189:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19F:
      return;
    case 6:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_1662;
      v415 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16423)
        goto LABEL_1527;
      v416 = *(_QWORD *)a3;
      while (1)
      {
        v417 = v416 & 0x3FFF;
        if (v417 == 1)
          break;
        if (v417 == 2)
          v418 = 16385;
        else
          v418 = 16387;
        if ((v416 & 0x4000) != 0)
          v416 = v418;
        else
          v416 = v417 | 0x4000u;
        if (v417 == 40)
          v416 = 16385;
        if (v417 == 3)
          v416 = 16385;
        if (v416 == 16423)
          goto LABEL_1527;
      }
      LOWORD(v429) = 16423;
      while (1)
      {
        v430 = v429 & 0x3FFF;
        if (v430 == 1)
          break;
        if (v430 == 2)
          v431 = 16385;
        else
          v431 = 16387;
        if (v430 == 40)
          v431 = 16385;
        if (v430 == 3)
          v429 = 16385;
        else
          v429 = v431;
        if (v429 == v415)
          goto LABEL_1527;
      }
      if (v415 == 16407)
      {
LABEL_1527:
        v419 = 1;
        goto LABEL_1661;
      }
      v437 = *(_QWORD *)a3;
      while (1)
      {
        v438 = v437 & 0x3FFF;
        if (v438 == 1)
          break;
        if (v438 == 2)
          v439 = 16385;
        else
          v439 = 16387;
        if ((v437 & 0x4000) != 0)
          v437 = v439;
        else
          v437 = v438 | 0x4000u;
        if (v438 == 40)
          v437 = 16385;
        if (v438 == 3)
          v437 = 16385;
        if (v437 == 16407)
          goto LABEL_1527;
      }
      LOWORD(v448) = 16407;
      while (1)
      {
        v449 = v448 & 0x3FFF;
        if (v449 == 1)
          break;
        if (v449 == 2)
          v450 = 16385;
        else
          v450 = 16387;
        if (v449 == 3)
          v448 = 16385;
        else
          v448 = v450;
        if (v448 == v415)
          goto LABEL_1527;
      }
      v419 = 0;
LABEL_1661:
      *(_BYTE *)(a3 + 8) = v419;
LABEL_1662:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_23;
      v454 = *(_QWORD *)a4;
      while (1)
      {
        v455 = v454 & 0x3FFF;
        if (v455 == 1)
          break;
        if (v455 == 2)
          v456 = 16385;
        else
          v456 = 16387;
        if ((v454 & 0x4000) != 0)
          v454 = v456;
        else
          v454 = v455 | 0x4000u;
        if (v455 == 40)
          v454 = 16385;
        if (v455 == 3)
          v454 = 16385;
        if (v454 == 16407)
          goto LABEL_23;
      }
      LOWORD(v457) = 16407;
      while (1)
      {
        v458 = v457 & 0x3FFF;
        if (v458 == 1)
          goto LABEL_4452;
        if (v458 == 2)
          v459 = 16385;
        else
          v459 = 16387;
        if (v458 == 3)
          v457 = 16385;
        else
          v457 = v459;
        if (v457 == *(_QWORD *)a4)
          goto LABEL_23;
      }
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x185:
    case 0x186:
    case 0x19B:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_352;
      v73 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16385)
        goto LABEL_227;
      v74 = 1;
      while (1)
      {
        v75 = v73 & 0x3FFF;
        if (v75 == 1)
          break;
        if (v75 == 3 || v75 == 40)
          goto LABEL_351;
        if ((v73 & 0x4000) != 0)
        {
          if (v75 == 2)
            goto LABEL_227;
          v73 = 16387;
        }
        else
        {
          v73 = v75 | 0x4000u;
        }
        if (v73 == 16385)
        {
LABEL_227:
          v74 = 1;
          goto LABEL_351;
        }
      }
      v74 = 0;
LABEL_351:
      *(_BYTE *)(a3 + 8) = v74;
LABEL_352:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_23;
      v107 = *(_QWORD *)a4;
      while (2)
      {
        v108 = v107 & 0x3FFF;
        if (v108 != 1)
        {
          if (v108 != 3)
          {
            v109 = 16385;
            if (v108 == 40)
              goto LABEL_361;
            if ((v107 & 0x4000) == 0)
            {
              v109 = v108 | 0x4000u;
LABEL_361:
              LOWORD(v107) = v109;
              if (v109 == 16387)
                goto LABEL_23;
              continue;
            }
            if (v108 != 2)
              goto LABEL_23;
          }
          v109 = 16385;
          goto LABEL_361;
        }
        break;
      }
      LOWORD(v110) = 16387;
      while (1)
      {
        v111 = v110 & 0x3FFF;
        if (v111 == 1)
          break;
        if (v111 == 2)
          v112 = 16385;
        else
          v112 = 16387;
        if (v111 == 3)
          v110 = 16385;
        else
          v110 = v112;
        if (v110 == *(_QWORD *)a4)
          goto LABEL_23;
      }
LABEL_4452:
      *(_BYTE *)(a4 + 8) = 0;
      return;
    case 0xB:
      if (*(_BYTE *)(a3 + 8))
        return;
      LOWORD(v244) = -32766;
      if (*(_QWORD *)a3 == 98306)
        goto LABEL_175;
      v245 = *(_QWORD *)a3;
      while (1)
      {
        v246 = v245 & 0x3FFF;
        if (v246 == 1)
          break;
        if (v246 == 2)
          v247 = 16385;
        else
          v247 = 16387;
        if ((v245 & 0x4000) != 0)
          LOWORD(v245) = v247;
        else
          LOWORD(v245) = v246 | 0x4000;
        if (v246 == 40)
          LOWORD(v245) = 16385;
        if (v246 == 3)
          LOWORD(v245) = 16385;
      }
      while (1)
      {
        v248 = v244 & 0x3FFF;
        if (v248 == 1)
          goto LABEL_3190;
        if (v248 == 2)
          v249 = 16385;
        else
          v249 = 16387;
        if ((v244 & 0x4000) != 0)
          v244 = v249;
        else
          v244 = v248 | 0x4000u;
        if (v248 == 40)
          v244 = 16385;
        if (v248 == 3)
          v244 = 16385;
        if (v244 == *(_QWORD *)a3)
          goto LABEL_175;
      }
    case 0xC:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x18002uLL);
      return;
    case 0xD:
      v792 = *((_QWORD *)a2 + 9);
      if (v792)
      {
        v1079 = (HIDWORD(*(_QWORD *)(v792 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v792 + 24) >> 28) >> 24 << 20)) + 4;
        v121 = ((unint64_t)v1079 << 15) | ((unint64_t)(v1079 >> 31) << 47) | 2;
      }
      else
      {
        v121 = 131074;
      }
      goto LABEL_402;
    case 0xE:
      v121 = 131074;
      goto LABEL_503;
    case 0xF:
      v51 = (_QWORD *)*((_QWORD *)a2 + 9);
      v52 = v51;
      do
      {
        v53 = v52;
        v52 = (_QWORD *)*v52;
      }
      while (v52);
      if (v53 != v51)
        *v51 = v53;
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_153;
      v54 = (v53[3] << 15) | 2;
      if (*(_QWORD *)a3 == v54)
        goto LABEL_150;
      do
      {
        v55 = v54 & 0x3FFF;
        if (v55 == 1)
        {
          v57 = 0;
          goto LABEL_152;
        }
        if (v55 == 2)
          v56 = 16385;
        else
          v56 = 16387;
        if ((v54 & 0x4000) != 0)
          v54 = v56;
        else
          v54 = v55 | 0x4000u;
        if (v55 == 40)
          v54 = 16385;
        if (v55 == 3)
          v54 = 16385;
      }
      while (v54 != *(_QWORD *)a3);
LABEL_150:
      v57 = 1;
LABEL_152:
      *(_BYTE *)(a3 + 8) = v57;
LABEL_153:
      v35 = (_QWORD *)*((_QWORD *)a2 + 9);
      v58 = v35;
      do
      {
        v37 = v58;
        v58 = (_QWORD *)*v58;
      }
      while (v58);
      goto LABEL_81;
    case 0x10:
      v28 = (_QWORD *)*((_QWORD *)a2 + 9);
      v29 = v28;
      do
      {
        v30 = v29;
        v29 = (_QWORD *)*v29;
      }
      while (v29);
      if (v30 != v28)
        *v28 = v30;
      if (*(_BYTE *)(a4 + 8))
        goto LABEL_79;
      v31 = (v30[3] << 15) | 2;
      if (*(_QWORD *)a4 == v31)
        goto LABEL_76;
      while (1)
      {
        v32 = v31 & 0x3FFF;
        if (v32 == 1)
          break;
        if (v32 == 2)
          v33 = 16385;
        else
          v33 = 16387;
        if ((v31 & 0x4000) != 0)
          v31 = v33;
        else
          v31 = v32 | 0x4000u;
        if (v32 == 40)
          v31 = 16385;
        if (v32 == 3)
          v31 = 16385;
        if (v31 == *(_QWORD *)a4)
        {
LABEL_76:
          v34 = 1;
          goto LABEL_78;
        }
      }
      v34 = 0;
LABEL_78:
      *(_BYTE *)(a4 + 8) = v34;
LABEL_79:
      v35 = (_QWORD *)*((_QWORD *)a2 + 9);
      v36 = v35;
      do
      {
        v37 = v36;
        v36 = (_QWORD *)*v36;
      }
      while (v36);
LABEL_81:
      if (v37 != v35)
        *v35 = v37;
      return;
    case 0x11:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, (**((_QWORD **)a2 + 9) << 15) | 2);
      JSC::DFG::LazyNode::LazyNode(&v1288, (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x12:
      v148 = *((_QWORD *)a2 + 9);
      v149 = 2;
      goto LABEL_502;
    case 0x13:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, (**((_QWORD **)a2 + 9) << 15) | 2);
      v76 = &v1289;
      goto LABEL_3858;
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1F:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0xB9:
    case 0x117:
    case 0x153:
    case 0x154:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x175:
    case 0x17B:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16424)
        goto LABEL_23;
      v15 = *(_QWORD *)a4;
      while (1)
      {
        v16 = v15 & 0x3FFF;
        if (v16 == 1)
          break;
        if (v16 == 2)
          v17 = 16385;
        else
          v17 = 16387;
        if ((v15 & 0x4000) != 0)
          v15 = v17;
        else
          v15 = v16 | 0x4000u;
        if (v16 == 40)
          v15 = 16385;
        if (v16 == 3)
          v15 = 16385;
        if (v15 == 16424)
          goto LABEL_23;
      }
      LOWORD(v25) = 16424;
      do
      {
        v26 = v25 & 0x3FFF;
        switch(v26)
        {
          case 1:
            goto LABEL_4452;
          case 2:
            v27 = 16385;
            break;
          case 40:
            v27 = 16385;
            break;
          default:
            v27 = 16387;
            break;
        }
        if (v26 == 3)
          v25 = 16385;
        else
          v25 = v27;
      }
      while (v25 != *(_QWORD *)a4);
      goto LABEL_23;
    case 0x1C:
      v38 = (_QWORD *)*((_QWORD *)a2 + 9);
      v39 = v38;
      do
      {
        v40 = v39;
        v39 = (_QWORD *)*v39;
      }
      while (v39);
      if (v40 != v38)
        *v38 = v40;
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_104;
      v41 = (v40[3] << 15) | 2;
      if (*(_QWORD *)a3 == v41)
        goto LABEL_101;
      while (1)
      {
        v42 = v41 & 0x3FFF;
        if (v42 == 1)
          break;
        if (v42 == 2)
          v43 = 16385;
        else
          v43 = 16387;
        if ((v41 & 0x4000) != 0)
          v41 = v43;
        else
          v41 = v42 | 0x4000u;
        if (v42 == 40)
          v41 = 16385;
        if (v42 == 3)
          v41 = 16385;
        if (v41 == *(_QWORD *)a3)
        {
LABEL_101:
          v44 = 1;
          goto LABEL_103;
        }
      }
      v44 = 0;
LABEL_103:
      *(_BYTE *)(a3 + 8) = v44;
LABEL_104:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 != 16424)
      {
        v45 = *(_QWORD *)a4;
        while (1)
        {
          v46 = v45 & 0x3FFF;
          if (v46 == 1)
            break;
          if (v46 == 2)
            v47 = 16385;
          else
            v47 = 16387;
          if ((v45 & 0x4000) != 0)
            v45 = v47;
          else
            v45 = v46 | 0x4000u;
          if (v46 == 40)
            v45 = 16385;
          if (v46 == 3)
            v45 = 16385;
          if (v45 == 16424)
            goto LABEL_23;
        }
        LOWORD(v48) = 16424;
        do
        {
          v49 = v48 & 0x3FFF;
          switch(v49)
          {
            case 1:
              goto LABEL_4452;
            case 2:
              v50 = 16385;
              break;
            case 40:
              v50 = 16385;
              break;
            default:
              v50 = 16387;
              break;
          }
          if (v49 == 3)
            v48 = 16385;
          else
            v48 = v50;
        }
        while (v48 != *(_QWORD *)a4);
      }
      goto LABEL_23;
    case 0x21:
      v119 = *((unsigned int *)a2 + 18);
      v120 = 35;
      goto LABEL_401;
    case 0x22:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4023uLL);
      return;
    case 0x28:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16424)
        goto LABEL_23;
      v67 = *(_QWORD *)a4;
      while (1)
      {
        v68 = v67 & 0x3FFF;
        if (v68 == 1)
          break;
        if (v68 == 2)
          v69 = 16385;
        else
          v69 = 16387;
        if ((v67 & 0x4000) != 0)
          v67 = v69;
        else
          v67 = v68 | 0x4000u;
        if (v68 == 40)
          v67 = 16385;
        if (v68 == 3)
          v67 = 16385;
        if (v67 == 16424)
          goto LABEL_23;
      }
      LOWORD(v70) = 16424;
      do
      {
        v71 = v70 & 0x3FFF;
        switch(v71)
        {
          case 1:
            goto LABEL_4452;
          case 2:
            v72 = 16385;
            break;
          case 40:
            v72 = 16385;
            break;
          default:
            v72 = 16387;
            break;
        }
        if (v71 == 3)
          v70 = 16385;
        else
          v70 = v72;
      }
      while (v70 != *(_QWORD *)a4);
      goto LABEL_23;
    case 0x29:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26 < 3)
        return;
      goto LABEL_821;
    case 0x2A:
    case 0x142:
    case 0x143:
      if ((*((_BYTE *)a2 + 30) & 0xFC) == 0)
        goto LABEL_821;
      return;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v440 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      switch((_DWORD)v440)
      {
        case 0x1A:
          v793 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v794 = 0x68000000000000;
          break;
        case 0x1C:
          v793 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v794 = 0x70000000000000;
          break;
        case 0x1B:
          v793 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v794 = 0x6C000000000000;
          break;
        default:
          goto LABEL_1611;
      }
      if (v793 == v794)
      {
LABEL_2916:
        JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4001uLL);
        goto LABEL_2917;
      }
LABEL_1611:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_1980;
      v441 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16385)
        goto LABEL_1622;
      v442 = 1;
      do
      {
        v443 = v441 & 0x3FFF;
        if (v443 == 1)
        {
          v442 = 0;
          goto LABEL_1979;
        }
        if (v443 == 3 || v443 == 40)
          goto LABEL_1979;
        if ((v441 & 0x4000) != 0)
        {
          if (v443 == 2)
            break;
          v441 = 16387;
        }
        else
        {
          v441 = v443 | 0x4000u;
        }
      }
      while (v441 != 16385);
LABEL_1622:
      v442 = 1;
LABEL_1979:
      *(_BYTE *)(a3 + 8) = v442;
LABEL_1980:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_23;
      v540 = *(_QWORD *)a4;
      while (1)
      {
        v541 = v540 & 0x3FFF;
        if (v541 == 1)
        {
          LOWORD(v543) = 16387;
          do
          {
            v544 = v543 & 0x3FFF;
            if (v544 == 1)
              goto LABEL_4452;
            if (v544 == 2)
              v545 = 16385;
            else
              v545 = 16387;
            if (v544 == 3)
              v543 = 16385;
            else
              v543 = v545;
          }
          while (v543 != *(_QWORD *)a4);
          goto LABEL_23;
        }
        if (v541 == 3)
          goto LABEL_1988;
        v542 = 16385;
        if (v541 != 40)
          break;
LABEL_1989:
        LOWORD(v540) = v542;
        if (v542 == 16387)
          goto LABEL_23;
      }
      if ((v540 & 0x4000) == 0)
      {
        v542 = v541 | 0x4000u;
        goto LABEL_1989;
      }
      if (v541 != 2)
        goto LABEL_23;
LABEL_1988:
      v542 = 16385;
      goto LABEL_1989;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*((_BYTE *)a2 + 30) & 0xFC) != 0 && (*((_BYTE *)a2 + 38) & 0xFC) != 0)
        return;
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_670;
      v142 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16385)
        goto LABEL_490;
      v143 = 1;
      do
      {
        v144 = v142 & 0x3FFF;
        if (v144 == 1)
        {
          v143 = 0;
          goto LABEL_669;
        }
        if (v144 == 3 || v144 == 40)
          goto LABEL_669;
        if ((v142 & 0x4000) != 0)
        {
          if (v144 == 2)
            break;
          v142 = 16387;
        }
        else
        {
          v142 = v144 | 0x4000u;
        }
      }
      while (v142 != 16385);
LABEL_490:
      v143 = 1;
LABEL_669:
      *(_BYTE *)(a3 + 8) = v143;
LABEL_670:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_23;
      v195 = *(_QWORD *)a4;
      while (1)
      {
        v196 = v195 & 0x3FFF;
        if (v196 == 1)
        {
          LOWORD(v198) = 16387;
          do
          {
            v199 = v198 & 0x3FFF;
            if (v199 == 1)
              goto LABEL_4452;
            if (v199 == 2)
              v200 = 16385;
            else
              v200 = 16387;
            if (v199 == 3)
              v198 = 16385;
            else
              v198 = v200;
          }
          while (v198 != *(_QWORD *)a4);
          goto LABEL_23;
        }
        if (v196 == 3)
          goto LABEL_678;
        v197 = 16385;
        if (v196 != 40)
          break;
LABEL_679:
        LOWORD(v195) = v197;
        if (v197 == 16387)
          goto LABEL_23;
      }
      if ((v195 & 0x4000) == 0)
      {
        v197 = v196 | 0x4000u;
        goto LABEL_679;
      }
      if (v196 != 2)
        goto LABEL_23;
LABEL_678:
      v197 = 16385;
      goto LABEL_679;
    case 0x3F:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 >= 2)
        goto LABEL_821;
      return;
    case 0x40:
    case 0x42:
    case 0x44:
      v131 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v131 == 49 || (_DWORD)v131 == 1 || (_DWORD)v131 == 52)
        return;
      if ((_DWORD)v131)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198394CB4);
      }
      goto LABEL_821;
    case 0x41:
      v713 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v713 == 49 || (_DWORD)v713 == 1 || (_DWORD)v713 == 52)
        return;
      goto LABEL_821;
    case 0x46:
      v881 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v881 != 49 && (_DWORD)v881 != 1)
        goto LABEL_821;
      return;
    case 0x49:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x131:
      v317 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v318 = 0xC4000000000000;
      goto LABEL_1120;
    case 0x4B:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4019uLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4019uLL);
      return;
    case 0x51:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0xC4000000000000)
        return;
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_2873;
      v485 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16385)
        goto LABEL_1772;
      v486 = 1;
      do
      {
        v487 = v485 & 0x3FFF;
        if (v487 == 1)
        {
          v486 = 0;
          goto LABEL_2872;
        }
        if (v487 == 3 || v487 == 40)
          goto LABEL_2872;
        if ((v485 & 0x4000) != 0)
        {
          if (v487 == 2)
            break;
          v485 = 16387;
        }
        else
        {
          v485 = v487 | 0x4000u;
        }
      }
      while (v485 != 16385);
LABEL_1772:
      v486 = 1;
LABEL_2872:
      *(_BYTE *)(a3 + 8) = v486;
LABEL_2873:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_23;
      v783 = *(_QWORD *)a4;
      while (1)
      {
        v784 = v783 & 0x3FFF;
        if (v784 == 1)
        {
          LOWORD(v786) = 16387;
          do
          {
            v787 = v786 & 0x3FFF;
            if (v787 == 1)
              goto LABEL_4452;
            if (v787 == 2)
              v788 = 16385;
            else
              v788 = 16387;
            if (v787 == 3)
              v786 = 16385;
            else
              v786 = v788;
          }
          while (v786 != *(_QWORD *)a4);
          goto LABEL_23;
        }
        if (v784 == 3)
          goto LABEL_2881;
        v785 = 16385;
        if (v784 != 40)
          break;
LABEL_2882:
        LOWORD(v783) = v785;
        if (v785 == 16387)
          goto LABEL_23;
      }
      if ((v783 & 0x4000) == 0)
      {
        v785 = v784 | 0x4000u;
        goto LABEL_2882;
      }
      if (v784 != 2)
        goto LABEL_23;
LABEL_2881:
      v785 = 16385;
      goto LABEL_2882;
    case 0x52:
    case 0x53:
      v1186 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v1186 > 0x34)
        goto LABEL_4470;
      if (!v1186)
        goto LABEL_821;
      if (((1 << v1186) & 0x1200001C000002) == 0)
      {
LABEL_4470:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19839B254);
      }
      return;
    case 0x5C:
    case 0x5D:
      v124 = *((_DWORD *)a2 + 18);
      if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
      {
        switch(*((_DWORD *)a2 + 14) & 7)
        {
          case 3:
            v125 = 13;
            break;
          case 4:
            v125 = 17;
            break;
          case 5:
            v125 = 19;
            break;
          case 7:
            __break(0xC471u);
            JUMPOUT(0x19839C098);
          default:
            __break(0xC471u);
            JUMPOUT(0x19839C0C8);
        }
      }
      else
      {
        v125 = 21;
      }
      switch(*((_DWORD *)a2 + 18))
      {
        case 0u:
        case 1u:
        case 2u:
          goto LABEL_821;
        case 3u:
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16424)
            goto LABEL_23;
          v554 = *(_QWORD *)a4;
          while (1)
          {
            v555 = v554 & 0x3FFF;
            if (v555 == 1)
              break;
            if (v555 == 2)
              v556 = 16385;
            else
              v556 = 16387;
            if ((v554 & 0x4000) != 0)
              v554 = v556;
            else
              v554 = v555 | 0x4000u;
            if (v555 == 40)
              v554 = 16385;
            if (v555 == 3)
              v554 = 16385;
            if (v554 == 16424)
              goto LABEL_23;
          }
          LOWORD(v572) = 16424;
          do
          {
            v573 = v572 & 0x3FFF;
            switch(v573)
            {
              case 1:
                goto LABEL_4452;
              case 2:
                v574 = 16385;
                break;
              case 40:
                v574 = 16385;
                break;
              default:
                v574 = 16387;
                break;
            }
            if (v573 == 3)
              v572 = 16385;
            else
              v572 = v574;
          }
          while (v572 != *(_QWORD *)a4);
          goto LABEL_23;
        case 4u:
        case 0x17u:
        case 0x18u:
          if (*(_BYTE *)(a3 + 8))
            goto LABEL_922;
          v213 = *(_QWORD *)a3;
          if (*(_QWORD *)a3 == 16385)
            goto LABEL_747;
          v214 = 1;
          do
          {
            v215 = v213 & 0x3FFF;
            if (v215 == 1)
            {
              v214 = 0;
              goto LABEL_921;
            }
            if (v215 == 3 || v215 == 40)
              goto LABEL_921;
            if ((v213 & 0x4000) != 0)
            {
              if (v215 == 2)
                break;
              v213 = 16387;
            }
            else
            {
              v213 = v215 | 0x4000u;
            }
          }
          while (v213 != 16385);
LABEL_747:
          v214 = 1;
LABEL_921:
          *(_BYTE *)(a3 + 8) = v214;
LABEL_922:
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16387)
            goto LABEL_23;
          v265 = *(_QWORD *)a4;
          break;
        case 5u:
          if (BYTE2(v124) - 3 <= 1)
            goto LABEL_821;
          return;
        case 6u:
          return;
        case 7u:
          if (BYTE2(v124) >= 2u && BYTE2(v124) != 3)
            goto LABEL_821;
          if (*(_BYTE *)(a3 + 8))
            goto LABEL_1756;
          v432 = *(_QWORD *)a3;
          if (*(_QWORD *)a3 == 16388)
            goto LABEL_1592;
          v433 = *(_QWORD *)a3;
          while (1)
          {
            v434 = v433 & 0x3FFF;
            if (v434 == 1)
              break;
            if (v434 == 2)
              v435 = 16385;
            else
              v435 = 16387;
            if ((v433 & 0x4000) != 0)
              v433 = v435;
            else
              v433 = v434 | 0x4000u;
            if (v434 == 40)
              v433 = 16385;
            if (v434 == 3)
              v433 = 16385;
            if (v433 == 16388)
              goto LABEL_1592;
          }
          LOWORD(v451) = 16388;
          while (1)
          {
            v452 = v451 & 0x3FFF;
            if (v452 == 1)
              break;
            if (v452 == 2)
              v453 = 16385;
            else
              v453 = 16387;
            if (v452 == 3)
              v451 = 16385;
            else
              v451 = v453;
            if (v451 == v432)
              goto LABEL_1592;
          }
          if (v432 == 16400)
          {
LABEL_1592:
            v436 = 1;
          }
          else
          {
            v470 = *(_QWORD *)a3;
            while (1)
            {
              v471 = v470 & 0x3FFF;
              if (v471 == 1)
                break;
              if (v471 == 2)
                v472 = 16385;
              else
                v472 = 16387;
              if ((v470 & 0x4000) != 0)
                v470 = v472;
              else
                v470 = v471 | 0x4000u;
              if (v471 == 40)
                v470 = 16385;
              if (v471 == 3)
                v470 = 16385;
              if (v470 == 16400)
                goto LABEL_1592;
            }
            LOWORD(v476) = 16400;
            while (1)
            {
              v477 = v476 & 0x3FFF;
              if (v477 == 1)
                break;
              if (v477 == 2)
                v478 = 16385;
              else
                v478 = 16387;
              if (v477 == 3)
                v476 = 16385;
              else
                v476 = v478;
              if (v476 == v432)
                goto LABEL_1592;
            }
            v436 = 0;
          }
          *(_BYTE *)(a3 + 8) = v436;
LABEL_1756:
          v483 = *((_DWORD *)a2 + 6);
          v484 = *((_DWORD *)this + 41);
          if (v484 <= v483)
          {
            __break(0xC471u);
            JUMPOUT(0x19839C1D0);
          }
          if (v484 <= v483 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198396DA8);
          }
          return;
        case 8u:
          if (BYTE2(v124) >= 2u && BYTE2(v124) != 3)
            goto LABEL_821;
          if (*(_BYTE *)(a3 + 8))
            goto LABEL_637;
          v156 = *(_QWORD *)a3;
          if (*(_QWORD *)a3 == 16388)
            goto LABEL_548;
          v157 = *(_QWORD *)a3;
          while (1)
          {
            v158 = v157 & 0x3FFF;
            if (v158 == 1)
              break;
            if (v158 == 2)
              v159 = 16385;
            else
              v159 = 16387;
            if ((v157 & 0x4000) != 0)
              v157 = v159;
            else
              v157 = v158 | 0x4000u;
            if (v158 == 40)
              v157 = 16385;
            if (v158 == 3)
              v157 = 16385;
            if (v157 == 16388)
              goto LABEL_548;
          }
          LOWORD(v169) = 16388;
          while (1)
          {
            v170 = v169 & 0x3FFF;
            if (v170 == 1)
              break;
            if (v170 == 2)
              v171 = 16385;
            else
              v171 = 16387;
            if (v170 == 3)
              v169 = 16385;
            else
              v169 = v171;
            if (v169 == v156)
              goto LABEL_548;
          }
          if (v156 == 16401)
          {
LABEL_548:
            v160 = 1;
          }
          else
          {
            v172 = *(_QWORD *)a3;
            while (1)
            {
              v173 = v172 & 0x3FFF;
              if (v173 == 1)
                break;
              if (v173 == 2)
                v174 = 16385;
              else
                v174 = 16387;
              if ((v172 & 0x4000) != 0)
                v172 = v174;
              else
                v172 = v173 | 0x4000u;
              if (v173 == 40)
                v172 = 16385;
              if (v173 == 3)
                v172 = 16385;
              if (v172 == 16401)
                goto LABEL_548;
            }
            LOWORD(v181) = 16401;
            while (1)
            {
              v182 = v181 & 0x3FFF;
              if (v182 == 1)
                break;
              if (v182 == 2)
                v183 = 16385;
              else
                v183 = 16387;
              if (v182 == 3)
                v181 = 16385;
              else
                v181 = v183;
              if (v181 == v156)
                goto LABEL_548;
            }
            v160 = 0;
          }
          *(_BYTE *)(a3 + 8) = v160;
LABEL_637:
          v187 = *((_DWORD *)a2 + 6);
          v188 = *((_DWORD *)this + 41);
          if (v188 <= v187)
          {
            __break(0xC471u);
            JUMPOUT(0x19839C170);
          }
          if (v188 <= v187 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198395210);
          }
          return;
        case 9u:
          if (BYTE2(v124) > 3u || BYTE2(v124) == 2)
            goto LABEL_821;
          if (*(_BYTE *)(a3 + 8))
            goto LABEL_733;
          v126 = *(_QWORD *)a3;
          if (*(_QWORD *)a3 == 16388)
            goto LABEL_425;
          v127 = *(_QWORD *)a3;
          while (1)
          {
            v128 = v127 & 0x3FFF;
            if (v128 == 1)
              break;
            if (v128 == 2)
              v129 = 16385;
            else
              v129 = 16387;
            if ((v127 & 0x4000) != 0)
              v127 = v129;
            else
              v127 = v128 | 0x4000u;
            if (v128 == 40)
              v127 = 16385;
            if (v128 == 3)
              v127 = 16385;
            if (v127 == 16388)
              goto LABEL_425;
          }
          LOWORD(v201) = 16388;
          while (1)
          {
            v202 = v201 & 0x3FFF;
            if (v202 == 1)
              break;
            if (v202 == 2)
              v203 = 16385;
            else
              v203 = 16387;
            if (v202 == 3)
              v201 = 16385;
            else
              v201 = v203;
            if (v201 == v126)
              goto LABEL_425;
          }
          if (v126 == 16402)
          {
LABEL_425:
            v130 = 1;
          }
          else
          {
            v204 = *(_QWORD *)a3;
            while (1)
            {
              v205 = v204 & 0x3FFF;
              if (v205 == 1)
                break;
              if (v205 == 2)
                v206 = 16385;
              else
                v206 = 16387;
              if ((v204 & 0x4000) != 0)
                v204 = v206;
              else
                v204 = v205 | 0x4000u;
              if (v205 == 40)
                v204 = 16385;
              if (v205 == 3)
                v204 = 16385;
              if (v204 == 16402)
                goto LABEL_425;
            }
            LOWORD(v208) = 16402;
            while (1)
            {
              v209 = v208 & 0x3FFF;
              if (v209 == 1)
                break;
              if (v209 == 2)
                v210 = 16385;
              else
                v210 = 16387;
              if (v209 == 3)
                v208 = 16385;
              else
                v208 = v210;
              if (v208 == v126)
                goto LABEL_425;
            }
            v130 = 0;
          }
          *(_BYTE *)(a3 + 8) = v130;
LABEL_733:
          v211 = *((_DWORD *)a2 + 6);
          v212 = *((_DWORD *)this + 41);
          if (v212 <= v211)
          {
            __break(0xC471u);
            JUMPOUT(0x19839C198);
          }
          if (v212 <= v211 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198395464);
          }
          return;
        case 0xAu:
        case 0xBu:
          if (BYTE2(v124) <= 1u)
            goto LABEL_4497;
          goto LABEL_821;
        case 0xCu:
          if (BYTE2(v124) > 1u)
            goto LABEL_821;
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4014uLL);
          v1176 = *((_QWORD *)a2 + 3);
          v1177 = *((_DWORD *)this + 41);
          if (v1177 <= v1176)
          {
            __break(0xC471u);
            JUMPOUT(0x19839C210);
          }
          if (v1177 <= (int)v1176 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19839C218);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1287, v125, 16404, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v76 = &v1286;
          goto LABEL_3858;
        case 0xDu:
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4015uLL);
          v1200 = *((_QWORD *)a2 + 3);
          v1201 = *((_DWORD *)this + 41);
          if (v1201 <= v1200)
          {
            __break(0xC471u);
            JUMPOUT(0x19839C27CLL);
          }
          if (v1201 <= (int)v1200 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19839C284);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1285, v125, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v76 = &v1284;
          goto LABEL_3858;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          if (*(_BYTE *)(a3 + 8))
            goto LABEL_1124;
          v271 = *(_QWORD *)a3;
          if (*(_QWORD *)a3 == 16406)
            goto LABEL_959;
          v272 = *(_QWORD *)a3;
          while (1)
          {
            v273 = v272 & 0x3FFF;
            if (v273 == 1)
              break;
            if (v273 == 2)
              v274 = 16385;
            else
              v274 = 16387;
            if ((v272 & 0x4000) != 0)
              v272 = v274;
            else
              v272 = v273 | 0x4000u;
            if (v273 == 40)
              v272 = 16385;
            if (v273 == 3)
              v272 = 16385;
            if (v272 == 16406)
              goto LABEL_959;
          }
          LOWORD(v286) = 16406;
          while (1)
          {
            v287 = v286 & 0x3FFF;
            if (v287 == 1)
              break;
            if (v287 == 2)
              v288 = 16385;
            else
              v288 = 16387;
            if (v287 == 3)
              v286 = 16385;
            else
              v286 = v288;
            if (v286 == v271)
              goto LABEL_959;
          }
          if (v271 == 16423)
          {
LABEL_959:
            v275 = 1;
          }
          else
          {
            v292 = *(_QWORD *)a3;
            while (1)
            {
              v293 = v292 & 0x3FFF;
              if (v293 == 1)
                break;
              if (v293 == 2)
                v294 = 16385;
              else
                v294 = 16387;
              if ((v292 & 0x4000) != 0)
                v292 = v294;
              else
                v292 = v293 | 0x4000u;
              if (v293 == 40)
                v292 = 16385;
              if (v293 == 3)
                v292 = 16385;
              if (v292 == 16423)
                goto LABEL_959;
            }
            LOWORD(v314) = 16423;
            while (1)
            {
              v315 = v314 & 0x3FFF;
              if (v315 == 1)
                break;
              if (v315 == 2)
                v316 = 16385;
              else
                v316 = 16387;
              if (v315 == 40)
                v316 = 16385;
              if (v315 == 3)
                v314 = 16385;
              else
                v314 = v316;
              if (v314 == v271)
                goto LABEL_959;
            }
            v275 = 0;
          }
          *(_BYTE *)(a3 + 8) = v275;
LABEL_1124:
          if ((v124 & 0x40000000) != 0)
          {
LABEL_4577:
            v1185 = a4;
LABEL_4462:
            JSC::DFG::AbstractHeapOverlaps::operator()(v1185, 0x4027uLL);
LABEL_4463:
            JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4016uLL);
          }
          else
          {
            v319 = *((_DWORD *)a2 + 6);
            v320 = *((_DWORD *)this + 41);
            if (v320 <= v319)
            {
              __break(0xC471u);
              JUMPOUT(0x19839C1A0);
            }
            if (v320 <= v319 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198395E6CLL);
            }
          }
          return;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x19839B74CLL);
        default:
          __break(0xC471u);
          JUMPOUT(0x19839B76CLL);
      }
      while (1)
      {
        v266 = v265 & 0x3FFF;
        if (v266 == 1)
        {
          LOWORD(v268) = 16387;
          do
          {
            v269 = v268 & 0x3FFF;
            if (v269 == 1)
              goto LABEL_4452;
            if (v269 == 2)
              v270 = 16385;
            else
              v270 = 16387;
            if (v269 == 3)
              v268 = 16385;
            else
              v268 = v270;
          }
          while (v268 != *(_QWORD *)a4);
          goto LABEL_23;
        }
        if (v266 == 3)
          goto LABEL_930;
        v267 = 16385;
        if (v266 != 40)
          break;
LABEL_931:
        LOWORD(v265) = v267;
        if (v267 == 16387)
          goto LABEL_23;
      }
      if ((v265 & 0x4000) == 0)
      {
        v267 = v266 | 0x4000u;
        goto LABEL_931;
      }
      if (v266 != 2)
        goto LABEL_23;
LABEL_930:
      v267 = 16385;
      goto LABEL_931;
    case 0x60:
    case 0x61:
    case 0x113:
    case 0x166:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4002uLL);
      return;
    case 0x62:
    case 0xC3:
    case 0xD9:
    case 0xDB:
    case 0xDC:
    case 0x108:
    case 0x14A:
    case 0x187:
      goto LABEL_821;
    case 0x63:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_4000;
      v1002 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16385)
        goto LABEL_3727;
      v1003 = 1;
      do
      {
        v1004 = v1002 & 0x3FFF;
        if (v1004 == 1)
        {
          v1003 = 0;
          goto LABEL_3999;
        }
        if (v1004 == 3 || v1004 == 40)
          goto LABEL_3999;
        if ((v1002 & 0x4000) != 0)
        {
          if (v1004 == 2)
            break;
          v1002 = 16387;
        }
        else
        {
          v1002 = v1004 | 0x4000u;
        }
      }
      while (v1002 != 16385);
LABEL_3727:
      v1003 = 1;
LABEL_3999:
      *(_BYTE *)(a3 + 8) = v1003;
LABEL_4000:
      if (*(_BYTE *)(a4 + 8))
        goto LABEL_4024;
      if (*(_QWORD *)a4 == 16387)
      {
LABEL_4021:
        v1075 = 1;
        goto LABEL_4023;
      }
      v1069 = *(_QWORD *)a4;
      while (1)
      {
        v1070 = v1069 & 0x3FFF;
        if (v1070 == 1)
        {
          LOWORD(v1072) = 16387;
          while (1)
          {
            v1073 = v1072 & 0x3FFF;
            if (v1073 == 1)
              break;
            if (v1073 == 2)
              v1074 = 16385;
            else
              v1074 = 16387;
            if (v1073 == 3)
              v1072 = 16385;
            else
              v1072 = v1074;
            if (v1072 == *(_QWORD *)a4)
              goto LABEL_4021;
          }
          v1075 = 0;
LABEL_4023:
          *(_BYTE *)(a4 + 8) = v1075;
LABEL_4024:
          v1076 = (_DWORD *)*((_QWORD *)a2 + 9);
          JSC::DFG::AbstractHeapOverlaps::operator()(a4, ((v1076[1] | ((((unint64_t)v1076[1] >> 31) & 1) << 32)) << 15) | 2);
          v1077 = v1076[6];
          if (v1077)
          {
            v1078 = v1077 - 1;
            do
            {
              JSC::DFG::AbstractHeapOverlaps::operator()(a4, (((v1078 + *v1076) | ((((unint64_t)(v1078 + *v1076) >> 31) & 1) << 32)) << 15) | 2);
              --v1078;
            }
            while (v1078 != -1);
          }
          return;
        }
        if (v1070 == 3)
          goto LABEL_4008;
        v1071 = 16385;
        if (v1070 != 40)
          break;
LABEL_4009:
        LOWORD(v1069) = v1071;
        if (v1071 == 16387)
          goto LABEL_4021;
      }
      if ((v1069 & 0x4000) == 0)
      {
        v1071 = v1070 | 0x4000u;
        goto LABEL_4009;
      }
      if (v1070 != 2)
        goto LABEL_4021;
LABEL_4008:
      v1071 = 16385;
      goto LABEL_4009;
    case 0x64:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4002uLL);
      v1236 = (_DWORD *)*((_QWORD *)a2 + 9);
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, ((v1236[1] | ((((unint64_t)v1236[1] >> 31) & 1) << 32)) << 15) | 2);
      v1237 = v1236[6];
      if (v1237)
      {
        v1238 = v1237 - 1;
        do
        {
          JSC::DFG::AbstractHeapOverlaps::operator()(a4, (((v1238 + *v1236) | ((((unint64_t)(v1238 + *v1236) >> 31) & 1) << 32)) << 15) | 2);
          --v1238;
        }
        while (v1238 != -1);
      }
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v161 = *((_DWORD *)a2 + 6);
      v162 = *((_DWORD *)this + 41);
      if (v162 <= v161)
      {
        __break(0xC471u);
        JUMPOUT(0x19839C178);
      }
      if (v162 <= v161 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19839C180);
      }
      if (v162 <= v161 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19839C188);
      }
      v163 = *((_DWORD *)a2 + 18);
      v164 = *((_DWORD *)a2 + 14) & 7;
      if (v164 >= 2 && v164 - 3 >= 3)
      {
        if (v164 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x198396C7CLL);
        }
        __break(0xC471u);
        JUMPOUT(0x19839C0F8);
      }
      switch(*((_DWORD *)a2 + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 5u:
        case 6u:
        case 0xCu:
        case 0xDu:
        case 0x17u:
        case 0x18u:
          goto LABEL_821;
        case 3u:
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16424)
            goto LABEL_23;
          v958 = *(_QWORD *)a4;
          while (1)
          {
            v959 = v958 & 0x3FFF;
            if (v959 == 1)
              break;
            if (v959 == 2)
              v960 = 16385;
            else
              v960 = 16387;
            if ((v958 & 0x4000) != 0)
              v958 = v960;
            else
              v958 = v959 | 0x4000u;
            if (v959 == 40)
              v958 = 16385;
            if (v959 == 3)
              v958 = 16385;
            if (v958 == 16424)
              goto LABEL_23;
          }
          LOWORD(v973) = 16424;
          while (1)
          {
            v974 = v973 & 0x3FFF;
            switch(v974)
            {
              case 1:
                goto LABEL_3738;
              case 2:
                v975 = 16385;
                break;
              case 40:
                v975 = 16385;
                break;
              default:
                v975 = 16387;
                break;
            }
            if (v974 == 3)
              v973 = 16385;
            else
              v973 = v975;
            if (v973 == *(_QWORD *)a4)
              goto LABEL_23;
          }
        case 7u:
          if (BYTE2(v163) - 3 <= 1)
            goto LABEL_821;
          if (*(_BYTE *)(a3 + 8))
            goto LABEL_3362;
          v762 = *(_QWORD *)a3;
          if (*(_QWORD *)a3 == 16388)
            goto LABEL_2837;
          v763 = *(_QWORD *)a3;
          while (1)
          {
            v764 = v763 & 0x3FFF;
            if (v764 == 1)
              break;
            if (v764 == 2)
              v765 = 16385;
            else
              v765 = 16387;
            if ((v763 & 0x4000) != 0)
              v763 = v765;
            else
              v763 = v764 | 0x4000u;
            if (v764 == 40)
              v763 = 16385;
            if (v764 == 3)
              v763 = 16385;
            if (v763 == 16388)
              goto LABEL_2837;
          }
          LOWORD(v822) = 16388;
          while (1)
          {
            v823 = v822 & 0x3FFF;
            if (v823 == 1)
              break;
            if (v823 == 2)
              v824 = 16385;
            else
              v824 = 16387;
            if (v823 == 3)
              v822 = 16385;
            else
              v822 = v824;
            if (v822 == v762)
              goto LABEL_2837;
          }
          if (v762 == 16389)
            goto LABEL_2837;
          v833 = *(_QWORD *)a3;
          while (1)
          {
            v834 = v833 & 0x3FFF;
            if (v834 == 1)
              break;
            if (v834 == 2)
              v835 = 16385;
            else
              v835 = 16387;
            if ((v833 & 0x4000) != 0)
              v833 = v835;
            else
              v833 = v834 | 0x4000u;
            if (v834 == 40)
              v833 = 16385;
            if (v834 == 3)
              v833 = 16385;
            if (v833 == 16389)
              goto LABEL_2837;
          }
          LOWORD(v863) = 16389;
          while (1)
          {
            v864 = v863 & 0x3FFF;
            if (v864 == 1)
              break;
            if (v864 == 2)
              v865 = 16385;
            else
              v865 = 16387;
            if (v864 == 3)
              v863 = 16385;
            else
              v863 = v865;
            if (v863 == v762)
              goto LABEL_2837;
          }
          if (v762 == 16400)
          {
LABEL_2837:
            v766 = 1;
          }
          else
          {
            v878 = *(_QWORD *)a3;
            while (1)
            {
              v879 = v878 & 0x3FFF;
              if (v879 == 1)
                break;
              if (v879 == 2)
                v880 = 16385;
              else
                v880 = 16387;
              if ((v878 & 0x4000) != 0)
                v878 = v880;
              else
                v878 = v879 | 0x4000u;
              if (v879 == 40)
                v878 = 16385;
              if (v879 == 3)
                v878 = 16385;
              if (v878 == 16400)
                goto LABEL_2837;
            }
            LOWORD(v891) = 16400;
            while (1)
            {
              v892 = v891 & 0x3FFF;
              if (v892 == 1)
                break;
              if (v892 == 2)
                v893 = 16385;
              else
                v893 = 16387;
              if (v892 == 3)
                v891 = 16385;
              else
                v891 = v893;
              if (v891 == v762)
                goto LABEL_2837;
            }
            v766 = 0;
          }
          *(_BYTE *)(a3 + 8) = v766;
LABEL_3362:
          if (*(_BYTE *)(a4 + 8))
            goto LABEL_3390;
          if (*(_QWORD *)a4 == 16400)
            goto LABEL_2161;
          v919 = *(_QWORD *)a4;
          while (1)
          {
            v920 = v919 & 0x3FFF;
            if (v920 == 1)
              break;
            if (v920 == 2)
              v921 = 16385;
            else
              v921 = 16387;
            if ((v919 & 0x4000) != 0)
              v919 = v921;
            else
              v919 = v920 | 0x4000u;
            if (v920 == 40)
              v919 = 16385;
            if (v920 == 3)
              v919 = 16385;
            if (v919 == 16400)
              goto LABEL_2161;
          }
          LOWORD(v922) = 16400;
          while (1)
          {
            v923 = v922 & 0x3FFF;
            if (v923 == 1)
              goto LABEL_3388;
            if (v923 == 2)
              v924 = 16385;
            else
              v924 = 16387;
            if (v923 == 3)
              v922 = 16385;
            else
              v922 = v924;
            if (v922 == *(_QWORD *)a4)
              goto LABEL_2161;
          }
        case 8u:
          if (BYTE2(v163) - 3 <= 1)
            goto LABEL_821;
          if (*(_BYTE *)(a3 + 8))
            goto LABEL_2146;
          v499 = *(_QWORD *)a3;
          if (*(_QWORD *)a3 == 16388)
            goto LABEL_1832;
          v500 = *(_QWORD *)a3;
          while (1)
          {
            v501 = v500 & 0x3FFF;
            if (v501 == 1)
              break;
            if (v501 == 2)
              v502 = 16385;
            else
              v502 = 16387;
            if ((v500 & 0x4000) != 0)
              v500 = v502;
            else
              v500 = v501 | 0x4000u;
            if (v501 == 40)
              v500 = 16385;
            if (v501 == 3)
              v500 = 16385;
            if (v500 == 16388)
              goto LABEL_1832;
          }
          LOWORD(v510) = 16388;
          while (1)
          {
            v511 = v510 & 0x3FFF;
            if (v511 == 1)
              break;
            if (v511 == 2)
              v512 = 16385;
            else
              v512 = 16387;
            if (v511 == 3)
              v510 = 16385;
            else
              v510 = v512;
            if (v510 == v499)
              goto LABEL_1832;
          }
          if (v499 == 16389)
            goto LABEL_1832;
          v529 = *(_QWORD *)a3;
          while (1)
          {
            v530 = v529 & 0x3FFF;
            if (v530 == 1)
              break;
            if (v530 == 2)
              v531 = 16385;
            else
              v531 = 16387;
            if ((v529 & 0x4000) != 0)
              v529 = v531;
            else
              v529 = v530 | 0x4000u;
            if (v530 == 40)
              v529 = 16385;
            if (v530 == 3)
              v529 = 16385;
            if (v529 == 16389)
              goto LABEL_1832;
          }
          LOWORD(v546) = 16389;
          while (1)
          {
            v547 = v546 & 0x3FFF;
            if (v547 == 1)
              break;
            if (v547 == 2)
              v548 = 16385;
            else
              v548 = 16387;
            if (v547 == 3)
              v546 = 16385;
            else
              v546 = v548;
            if (v546 == v499)
              goto LABEL_1832;
          }
          if (v499 == 16401)
          {
LABEL_1832:
            v503 = 1;
          }
          else
          {
            v563 = *(_QWORD *)a3;
            while (1)
            {
              v564 = v563 & 0x3FFF;
              if (v564 == 1)
                break;
              if (v564 == 2)
                v565 = 16385;
              else
                v565 = 16387;
              if ((v563 & 0x4000) != 0)
                v563 = v565;
              else
                v563 = v564 | 0x4000u;
              if (v564 == 40)
                v563 = 16385;
              if (v564 == 3)
                v563 = 16385;
              if (v563 == 16401)
                goto LABEL_1832;
            }
            LOWORD(v575) = 16401;
            while (1)
            {
              v576 = v575 & 0x3FFF;
              if (v576 == 1)
                break;
              if (v576 == 2)
                v577 = 16385;
              else
                v577 = 16387;
              if (v576 == 3)
                v575 = 16385;
              else
                v575 = v577;
              if (v575 == v499)
                goto LABEL_1832;
            }
            v503 = 0;
          }
          *(_BYTE *)(a3 + 8) = v503;
LABEL_2146:
          if (*(_BYTE *)(a4 + 8))
            goto LABEL_3390;
          if (*(_QWORD *)a4 == 16401)
            goto LABEL_2161;
          v581 = *(_QWORD *)a4;
          while (1)
          {
            v582 = v581 & 0x3FFF;
            if (v582 == 1)
              break;
            if (v582 == 2)
              v583 = 16385;
            else
              v583 = 16387;
            if ((v581 & 0x4000) != 0)
              v581 = v583;
            else
              v581 = v582 | 0x4000u;
            if (v582 == 40)
              v581 = 16385;
            if (v582 == 3)
              v581 = 16385;
            if (v581 == 16401)
              goto LABEL_2161;
          }
          LOWORD(v585) = 16401;
          while (1)
          {
            v586 = v585 & 0x3FFF;
            if (v586 == 1)
              goto LABEL_3388;
            if (v586 == 2)
              v587 = 16385;
            else
              v587 = 16387;
            if (v586 == 3)
              v585 = 16385;
            else
              v585 = v587;
            if (v585 == *(_QWORD *)a4)
              goto LABEL_2161;
          }
        case 9u:
          if (BYTE2(v163) - 3 <= 1)
            goto LABEL_821;
          if (*(_BYTE *)(a3 + 8))
            goto LABEL_2478;
          v354 = *(_QWORD *)a3;
          if (*(_QWORD *)a3 == 16388)
            goto LABEL_1279;
          v355 = *(_QWORD *)a3;
          while (1)
          {
            v356 = v355 & 0x3FFF;
            if (v356 == 1)
              break;
            if (v356 == 2)
              v357 = 16385;
            else
              v357 = 16387;
            if ((v355 & 0x4000) != 0)
              v355 = v357;
            else
              v355 = v356 | 0x4000u;
            if (v356 == 40)
              v355 = 16385;
            if (v356 == 3)
              v355 = 16385;
            if (v355 == 16388)
              goto LABEL_1279;
          }
          LOWORD(v622) = 16388;
          while (1)
          {
            v623 = v622 & 0x3FFF;
            if (v623 == 1)
              break;
            if (v623 == 2)
              v624 = 16385;
            else
              v624 = 16387;
            if (v623 == 3)
              v622 = 16385;
            else
              v622 = v624;
            if (v622 == v354)
              goto LABEL_1279;
          }
          if (v354 == 16389)
            goto LABEL_1279;
          v652 = *(_QWORD *)a3;
          while (1)
          {
            v653 = v652 & 0x3FFF;
            if (v653 == 1)
              break;
            if (v653 == 2)
              v654 = 16385;
            else
              v654 = 16387;
            if ((v652 & 0x4000) != 0)
              v652 = v654;
            else
              v652 = v653 | 0x4000u;
            if (v653 == 40)
              v652 = 16385;
            if (v653 == 3)
              v652 = 16385;
            if (v652 == 16389)
              goto LABEL_1279;
          }
          LOWORD(v658) = 16389;
          while (1)
          {
            v659 = v658 & 0x3FFF;
            if (v659 == 1)
              break;
            if (v659 == 2)
              v660 = 16385;
            else
              v660 = 16387;
            if (v659 == 3)
              v658 = 16385;
            else
              v658 = v660;
            if (v658 == v354)
              goto LABEL_1279;
          }
          if (v354 == 16402)
          {
LABEL_1279:
            v358 = 1;
          }
          else
          {
            v664 = *(_QWORD *)a3;
            while (1)
            {
              v665 = v664 & 0x3FFF;
              if (v665 == 1)
                break;
              if (v665 == 2)
                v666 = 16385;
              else
                v666 = 16387;
              if ((v664 & 0x4000) != 0)
                v664 = v666;
              else
                v664 = v665 | 0x4000u;
              if (v665 == 40)
                v664 = 16385;
              if (v665 == 3)
                v664 = 16385;
              if (v664 == 16402)
                goto LABEL_1279;
            }
            LOWORD(v672) = 16402;
            while (1)
            {
              v673 = v672 & 0x3FFF;
              if (v673 == 1)
                break;
              if (v673 == 2)
                v674 = 16385;
              else
                v674 = 16387;
              if (v673 == 3)
                v672 = 16385;
              else
                v672 = v674;
              if (v672 == v354)
                goto LABEL_1279;
            }
            v358 = 0;
          }
          *(_BYTE *)(a3 + 8) = v358;
LABEL_2478:
          if (!*(_BYTE *)(a4 + 8))
          {
            if (*(_QWORD *)a4 == 16402)
            {
LABEL_2161:
              v584 = 1;
            }
            else
            {
              v678 = *(_QWORD *)a4;
              while (1)
              {
                v679 = v678 & 0x3FFF;
                if (v679 == 1)
                  break;
                if (v679 == 2)
                  v680 = 16385;
                else
                  v680 = 16387;
                if ((v678 & 0x4000) != 0)
                  v678 = v680;
                else
                  v678 = v679 | 0x4000u;
                if (v679 == 40)
                  v678 = 16385;
                if (v679 == 3)
                  v678 = 16385;
                if (v678 == 16402)
                  goto LABEL_2161;
              }
              LOWORD(v681) = 16402;
              while (1)
              {
                v682 = v681 & 0x3FFF;
                if (v682 == 1)
                  break;
                if (v682 == 2)
                  v683 = 16385;
                else
                  v683 = 16387;
                if (v682 == 3)
                  v681 = 16385;
                else
                  v681 = v683;
                if (v681 == *(_QWORD *)a4)
                  goto LABEL_2161;
              }
LABEL_3388:
              v584 = 0;
            }
            *(_BYTE *)(a4 + 8) = v584;
          }
LABEL_3390:
          if ((_DWORD)v14 == 146)
LABEL_3947:
            v925 = *((_DWORD *)a2 + 20);
          else
LABEL_3391:
            v925 = *((_DWORD *)a2 + 18);
          if ((v925 & 0xFE0000) != 0)
            JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4004uLL);
          return;
        case 0xAu:
          if (BYTE2(v163) - 3 <= 1)
            goto LABEL_821;
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4004uLL);
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4005uLL);
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4013uLL);
          JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4013uLL);
          if (*((_WORD *)a2 + 9) == 146)
            goto LABEL_3947;
          goto LABEL_3391;
        case 0xBu:
          if ((v163 & 0xFE0000) != 0)
            goto LABEL_821;
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4004uLL);
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4005uLL);
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4013uLL);
          v122 = a4;
          goto LABEL_4498;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          if ((v163 & 0x40000000) != 0)
          {
            JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4016uLL);
            JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4027uLL);
            JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4016uLL);
            goto LABEL_4490;
          }
          if (*(_BYTE *)(a3 + 8))
            goto LABEL_864;
          if (*(_QWORD *)a3 == 16423)
            goto LABEL_570;
          v165 = *(_QWORD *)a3;
          break;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
          __break(0xC471u);
          JUMPOUT(0x19839B508);
        default:
          __break(0xC471u);
          JUMPOUT(0x19839BE74);
      }
      while (1)
      {
        v166 = v165 & 0x3FFF;
        if (v166 == 1)
          break;
        if (v166 == 2)
          v167 = 16385;
        else
          v167 = 16387;
        if ((v165 & 0x4000) != 0)
          v165 = v167;
        else
          v165 = v166 | 0x4000u;
        if (v166 == 40)
          v165 = 16385;
        if (v166 == 3)
          v165 = 16385;
        if (v165 == 16423)
        {
LABEL_570:
          v168 = 1;
          goto LABEL_863;
        }
      }
      LOWORD(v250) = 16423;
      while (1)
      {
        v251 = v250 & 0x3FFF;
        if (v251 == 1)
          break;
        if (v251 == 2)
          v252 = 16385;
        else
          v252 = 16387;
        if (v251 == 40)
          v252 = 16385;
        if (v251 == 3)
          v250 = 16385;
        else
          v250 = v252;
        if (v250 == *(_QWORD *)a3)
          goto LABEL_570;
      }
      v168 = 0;
LABEL_863:
      *(_BYTE *)(a3 + 8) = v168;
LABEL_864:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 != 16406)
      {
        v253 = *(_QWORD *)a4;
        while (1)
        {
          v254 = v253 & 0x3FFF;
          if (v254 == 1)
            break;
          if (v254 == 2)
            v255 = 16385;
          else
            v255 = 16387;
          if ((v253 & 0x4000) != 0)
            v253 = v255;
          else
            v253 = v254 | 0x4000u;
          if (v254 == 40)
            v253 = 16385;
          if (v254 == 3)
            v253 = 16385;
          if (v253 == 16406)
            goto LABEL_23;
        }
        LOWORD(v256) = 16406;
        do
        {
          v257 = v256 & 0x3FFF;
          if (v257 == 1)
            goto LABEL_3738;
          if (v257 == 2)
            v258 = 16385;
          else
            v258 = 16387;
          if (v257 == 3)
            v256 = 16385;
          else
            v256 = v258;
        }
        while (v256 != *(_QWORD *)a4);
      }
      goto LABEL_23;
    case 0x6D:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_2625;
      v588 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16385)
        goto LABEL_2183;
      v589 = 1;
      while (1)
      {
        v590 = v588 & 0x3FFF;
        if (v590 == 1)
          break;
        if (v590 == 3 || v590 == 40)
          goto LABEL_2624;
        if ((v588 & 0x4000) != 0)
        {
          if (v590 == 2)
            goto LABEL_2183;
          v588 = 16387;
        }
        else
        {
          v588 = v590 | 0x4000u;
        }
        if (v588 == 16385)
        {
LABEL_2183:
          v589 = 1;
          goto LABEL_2624;
        }
      }
      v589 = 0;
LABEL_2624:
      *(_BYTE *)(a3 + 8) = v589;
LABEL_2625:
      if (*(_BYTE *)(a4 + 8))
        return;
      v714 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 != 16388)
      {
        v715 = *(_QWORD *)a4;
        while (1)
        {
          v716 = v715 & 0x3FFF;
          if (v716 == 1)
            break;
          if (v716 == 2)
            v717 = 16385;
          else
            v717 = 16387;
          if ((v715 & 0x4000) != 0)
            v715 = v717;
          else
            v715 = v716 | 0x4000u;
          if (v716 == 40)
            v715 = 16385;
          if (v716 == 3)
            v715 = 16385;
          if (v715 == 16388)
            goto LABEL_23;
        }
        LOWORD(v718) = 16388;
        while (1)
        {
          v719 = v718 & 0x3FFF;
          if (v719 == 1)
            break;
          if (v719 == 2)
            v720 = 16385;
          else
            v720 = 16387;
          if (v719 == 3)
            v718 = 16385;
          else
            v718 = v720;
          if (v718 == v714)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (v714 == 16389)
          goto LABEL_23;
        LOWORD(v721) = v714;
        while (1)
        {
          v722 = v721 & 0x3FFF;
          if (v722 == 1)
            break;
          if (v722 == 2)
            v723 = 16385;
          else
            v723 = 16387;
          if ((v721 & 0x4000) != 0)
            v721 = v723;
          else
            v721 = v722 | 0x4000u;
          if (v722 == 40)
            v721 = 16385;
          if (v722 == 3)
            v721 = 16385;
          if (v721 == 16389)
            goto LABEL_23;
        }
        LOWORD(v724) = 16389;
        while (1)
        {
          v725 = v724 & 0x3FFF;
          if (v725 == 1)
            break;
          if (v725 == 2)
            v726 = 16385;
          else
            v726 = 16387;
          if (v725 == 3)
            v724 = 16385;
          else
            v724 = v726;
          if (v724 == v714)
            goto LABEL_23;
        }
        if (v714 == 16390)
          goto LABEL_23;
        LOWORD(v727) = v714;
        while (1)
        {
          v728 = v727 & 0x3FFF;
          if (v728 == 1)
            break;
          if (v728 == 2)
            v729 = 16385;
          else
            v729 = 16387;
          if ((v727 & 0x4000) != 0)
            v727 = v729;
          else
            v727 = v728 | 0x4000u;
          if (v728 == 40)
            v727 = 16385;
          if (v728 == 3)
            v727 = 16385;
          if (v727 == 16390)
            goto LABEL_23;
        }
        LOWORD(v730) = 16390;
        while (1)
        {
          v731 = v730 & 0x3FFF;
          if (v731 == 1)
            break;
          if (v731 == 2)
            v732 = 16385;
          else
            v732 = 16387;
          if (v731 == 3)
            v730 = 16385;
          else
            v730 = v732;
          if (v730 == v714)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16391)
          goto LABEL_23;
        v733 = *(_QWORD *)a4;
        while (1)
        {
          v734 = v733 & 0x3FFF;
          if (v734 == 1)
            break;
          if (v734 == 2)
            v735 = 16385;
          else
            v735 = 16387;
          if ((v733 & 0x4000) != 0)
            v733 = v735;
          else
            v733 = v734 | 0x4000u;
          if (v734 == 40)
            v733 = 16385;
          if (v734 == 3)
            v733 = 16385;
          if (v733 == 16391)
            goto LABEL_23;
        }
        LOWORD(v736) = 16391;
        while (1)
        {
          v737 = v736 & 0x3FFF;
          if (v737 == 1)
            break;
          if (v737 == 2)
            v738 = 16385;
          else
            v738 = 16387;
          if (v737 == 3)
            v736 = 16385;
          else
            v736 = v738;
          if (v736 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16392)
          goto LABEL_23;
        v739 = *(_QWORD *)a4;
        while (1)
        {
          v740 = v739 & 0x3FFF;
          if (v740 == 1)
            break;
          if (v740 == 2)
            v741 = 16385;
          else
            v741 = 16387;
          if ((v739 & 0x4000) != 0)
            v739 = v741;
          else
            v739 = v740 | 0x4000u;
          if (v740 == 40)
            v739 = 16385;
          if (v740 == 3)
            v739 = 16385;
          if (v739 == 16392)
            goto LABEL_23;
        }
        LOWORD(v742) = 16392;
        while (1)
        {
          v743 = v742 & 0x3FFF;
          if (v743 == 1)
            break;
          if (v743 == 2)
            v744 = 16385;
          else
            v744 = 16387;
          if (v743 == 3)
            v742 = 16385;
          else
            v742 = v744;
          if (v742 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16393)
          goto LABEL_23;
        v745 = *(_QWORD *)a4;
        while (1)
        {
          v746 = v745 & 0x3FFF;
          if (v746 == 1)
            break;
          if (v746 == 2)
            v747 = 16385;
          else
            v747 = 16387;
          if ((v745 & 0x4000) != 0)
            v745 = v747;
          else
            v745 = v746 | 0x4000u;
          if (v746 == 40)
            v745 = 16385;
          if (v746 == 3)
            v745 = 16385;
          if (v745 == 16393)
            goto LABEL_23;
        }
        LOWORD(v748) = 16393;
        while (1)
        {
          v749 = v748 & 0x3FFF;
          if (v749 == 1)
            break;
          if (v749 == 2)
            v750 = 16385;
          else
            v750 = 16387;
          if (v749 == 3)
            v748 = 16385;
          else
            v748 = v750;
          if (v748 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16394)
          goto LABEL_23;
        v756 = *(_QWORD *)a4;
        while (1)
        {
          v757 = v756 & 0x3FFF;
          if (v757 == 1)
            break;
          if (v757 == 2)
            v758 = 16385;
          else
            v758 = 16387;
          if ((v756 & 0x4000) != 0)
            v756 = v758;
          else
            v756 = v757 | 0x4000u;
          if (v757 == 40)
            v756 = 16385;
          if (v757 == 3)
            v756 = 16385;
          if (v756 == 16394)
            goto LABEL_23;
        }
        LOWORD(v759) = 16394;
        while (1)
        {
          v760 = v759 & 0x3FFF;
          if (v760 == 1)
            break;
          if (v760 == 2)
            v761 = 16385;
          else
            v761 = 16387;
          if (v760 == 3)
            v759 = 16385;
          else
            v759 = v761;
          if (v759 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16395)
          goto LABEL_23;
        v780 = *(_QWORD *)a4;
        while (1)
        {
          v781 = v780 & 0x3FFF;
          if (v781 == 1)
            break;
          if (v781 == 2)
            v782 = 16385;
          else
            v782 = 16387;
          if ((v780 & 0x4000) != 0)
            v780 = v782;
          else
            v780 = v781 | 0x4000u;
          if (v781 == 40)
            v780 = 16385;
          if (v781 == 3)
            v780 = 16385;
          if (v780 == 16395)
            goto LABEL_23;
        }
        LOWORD(v798) = 16395;
        while (1)
        {
          v799 = v798 & 0x3FFF;
          if (v799 == 1)
            break;
          if (v799 == 2)
            v800 = 16385;
          else
            v800 = 16387;
          if (v799 == 3)
            v798 = 16385;
          else
            v798 = v800;
          if (v798 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16396)
          goto LABEL_23;
        v804 = *(_QWORD *)a4;
        while (1)
        {
          v805 = v804 & 0x3FFF;
          if (v805 == 1)
            break;
          if (v805 == 2)
            v806 = 16385;
          else
            v806 = 16387;
          if ((v804 & 0x4000) != 0)
            v804 = v806;
          else
            v804 = v805 | 0x4000u;
          if (v805 == 40)
            v804 = 16385;
          if (v805 == 3)
            v804 = 16385;
          if (v804 == 16396)
            goto LABEL_23;
        }
        LOWORD(v816) = 16396;
        while (1)
        {
          v817 = v816 & 0x3FFF;
          if (v817 == 1)
            break;
          if (v817 == 2)
            v818 = 16385;
          else
            v818 = 16387;
          if (v817 == 3)
            v816 = 16385;
          else
            v816 = v818;
          if (v816 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16397)
          goto LABEL_23;
        v819 = *(_QWORD *)a4;
        while (1)
        {
          v820 = v819 & 0x3FFF;
          if (v820 == 1)
            break;
          if (v820 == 2)
            v821 = 16385;
          else
            v821 = 16387;
          if ((v819 & 0x4000) != 0)
            v819 = v821;
          else
            v819 = v820 | 0x4000u;
          if (v820 == 40)
            v819 = 16385;
          if (v820 == 3)
            v819 = 16385;
          if (v819 == 16397)
            goto LABEL_23;
        }
        LOWORD(v830) = 16397;
        while (1)
        {
          v831 = v830 & 0x3FFF;
          if (v831 == 1)
            break;
          if (v831 == 2)
            v832 = 16385;
          else
            v832 = 16387;
          if (v831 == 3)
            v830 = 16385;
          else
            v830 = v832;
          if (v830 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16399)
          goto LABEL_23;
        v851 = *(_QWORD *)a4;
        while (1)
        {
          v852 = v851 & 0x3FFF;
          if (v852 == 1)
            break;
          if (v852 == 2)
            v853 = 16385;
          else
            v853 = 16387;
          if ((v851 & 0x4000) != 0)
            v851 = v853;
          else
            v851 = v852 | 0x4000u;
          if (v852 == 40)
            v851 = 16385;
          if (v852 == 3)
            v851 = 16385;
          if (v851 == 16399)
            goto LABEL_23;
        }
        LOWORD(v866) = 16399;
        while (1)
        {
          v867 = v866 & 0x3FFF;
          if (v867 == 1)
            break;
          if (v867 == 2)
            v868 = 16385;
          else
            v868 = 16387;
          if (v867 == 3)
            v866 = 16385;
          else
            v866 = v868;
          if (v866 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16400)
          goto LABEL_23;
        v882 = *(_QWORD *)a4;
        while (1)
        {
          v883 = v882 & 0x3FFF;
          if (v883 == 1)
            break;
          if (v883 == 2)
            v884 = 16385;
          else
            v884 = 16387;
          if ((v882 & 0x4000) != 0)
            v882 = v884;
          else
            v882 = v883 | 0x4000u;
          if (v883 == 40)
            v882 = 16385;
          if (v883 == 3)
            v882 = 16385;
          if (v882 == 16400)
            goto LABEL_23;
        }
        LOWORD(v897) = 16400;
        while (1)
        {
          v898 = v897 & 0x3FFF;
          if (v898 == 1)
            break;
          if (v898 == 2)
            v899 = 16385;
          else
            v899 = 16387;
          if (v898 == 3)
            v897 = 16385;
          else
            v897 = v899;
          if (v897 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16401)
          goto LABEL_23;
        v939 = *(_QWORD *)a4;
        while (1)
        {
          v940 = v939 & 0x3FFF;
          if (v940 == 1)
            break;
          if (v940 == 2)
            v941 = 16385;
          else
            v941 = 16387;
          if ((v939 & 0x4000) != 0)
            v939 = v941;
          else
            v939 = v940 | 0x4000u;
          if (v940 == 40)
            v939 = 16385;
          if (v940 == 3)
            v939 = 16385;
          if (v939 == 16401)
            goto LABEL_23;
        }
        LOWORD(v955) = 16401;
        while (1)
        {
          v956 = v955 & 0x3FFF;
          if (v956 == 1)
            break;
          if (v956 == 2)
            v957 = 16385;
          else
            v957 = 16387;
          if (v956 == 3)
            v955 = 16385;
          else
            v955 = v957;
          if (v955 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16402)
          goto LABEL_23;
        v967 = *(_QWORD *)a4;
        while (1)
        {
          v968 = v967 & 0x3FFF;
          if (v968 == 1)
            break;
          if (v968 == 2)
            v969 = 16385;
          else
            v969 = 16387;
          if ((v967 & 0x4000) != 0)
            v967 = v969;
          else
            v967 = v968 | 0x4000u;
          if (v968 == 40)
            v967 = 16385;
          if (v968 == 3)
            v967 = 16385;
          if (v967 == 16402)
            goto LABEL_23;
        }
        LOWORD(v982) = 16402;
        while (1)
        {
          v983 = v982 & 0x3FFF;
          if (v983 == 1)
            break;
          if (v983 == 2)
            v984 = 16385;
          else
            v984 = 16387;
          if (v983 == 3)
            v982 = 16385;
          else
            v982 = v984;
          if (v982 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16403)
          goto LABEL_23;
        v985 = *(_QWORD *)a4;
        while (1)
        {
          v986 = v985 & 0x3FFF;
          if (v986 == 1)
            break;
          if (v986 == 2)
            v987 = 16385;
          else
            v987 = 16387;
          if ((v985 & 0x4000) != 0)
            v985 = v987;
          else
            v985 = v986 | 0x4000u;
          if (v986 == 40)
            v985 = 16385;
          if (v986 == 3)
            v985 = 16385;
          if (v985 == 16403)
            goto LABEL_23;
        }
        LOWORD(v995) = 16403;
        while (1)
        {
          v996 = v995 & 0x3FFF;
          if (v996 == 1)
            break;
          if (v996 == 2)
            v997 = 16385;
          else
            v997 = 16387;
          if (v996 == 3)
            v995 = 16385;
          else
            v995 = v997;
          if (v995 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16404)
          goto LABEL_23;
        v999 = *(_QWORD *)a4;
        while (1)
        {
          v1000 = v999 & 0x3FFF;
          if (v1000 == 1)
            break;
          if (v1000 == 2)
            v1001 = 16385;
          else
            v1001 = 16387;
          if ((v999 & 0x4000) != 0)
            v999 = v1001;
          else
            v999 = v1000 | 0x4000u;
          if (v1000 == 40)
            v999 = 16385;
          if (v1000 == 3)
            v999 = 16385;
          if (v999 == 16404)
            goto LABEL_23;
        }
        LOWORD(v1011) = 16404;
        while (1)
        {
          v1012 = v1011 & 0x3FFF;
          if (v1012 == 1)
            break;
          if (v1012 == 2)
            v1013 = 16385;
          else
            v1013 = 16387;
          if (v1012 == 3)
            v1011 = 16385;
          else
            v1011 = v1013;
          if (v1011 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16405)
          goto LABEL_23;
        v1017 = *(_QWORD *)a4;
        while (1)
        {
          v1018 = v1017 & 0x3FFF;
          if (v1018 == 1)
            break;
          if (v1018 == 2)
            v1019 = 16385;
          else
            v1019 = 16387;
          if ((v1017 & 0x4000) != 0)
            v1017 = v1019;
          else
            v1017 = v1018 | 0x4000u;
          if (v1018 == 40)
            v1017 = 16385;
          if (v1018 == 3)
            v1017 = 16385;
          if (v1017 == 16405)
            goto LABEL_23;
        }
        LOWORD(v1027) = 16405;
        while (1)
        {
          v1028 = v1027 & 0x3FFF;
          if (v1028 == 1)
            break;
          if (v1028 == 2)
            v1029 = 16385;
          else
            v1029 = 16387;
          if (v1028 == 3)
            v1027 = 16385;
          else
            v1027 = v1029;
          if (v1027 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16406)
          goto LABEL_23;
        v1030 = *(_QWORD *)a4;
        while (1)
        {
          v1031 = v1030 & 0x3FFF;
          if (v1031 == 1)
            break;
          if (v1031 == 2)
            v1032 = 16385;
          else
            v1032 = 16387;
          if ((v1030 & 0x4000) != 0)
            v1030 = v1032;
          else
            v1030 = v1031 | 0x4000u;
          if (v1031 == 40)
            v1030 = 16385;
          if (v1031 == 3)
            v1030 = 16385;
          if (v1030 == 16406)
            goto LABEL_23;
        }
        LOWORD(v1036) = 16406;
        while (1)
        {
          v1037 = v1036 & 0x3FFF;
          if (v1037 == 1)
            break;
          if (v1037 == 2)
            v1038 = 16385;
          else
            v1038 = 16387;
          if (v1037 == 3)
            v1036 = 16385;
          else
            v1036 = v1038;
          if (v1036 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16407)
          goto LABEL_23;
        v1039 = *(_QWORD *)a4;
        while (1)
        {
          v1040 = v1039 & 0x3FFF;
          if (v1040 == 1)
            break;
          if (v1040 == 2)
            v1041 = 16385;
          else
            v1041 = 16387;
          if ((v1039 & 0x4000) != 0)
            v1039 = v1041;
          else
            v1039 = v1040 | 0x4000u;
          if (v1040 == 40)
            v1039 = 16385;
          if (v1040 == 3)
            v1039 = 16385;
          if (v1039 == 16407)
            goto LABEL_23;
        }
        LOWORD(v1042) = 16407;
        while (1)
        {
          v1043 = v1042 & 0x3FFF;
          if (v1043 == 1)
            break;
          if (v1043 == 2)
            v1044 = 16385;
          else
            v1044 = 16387;
          if (v1043 == 3)
            v1042 = 16385;
          else
            v1042 = v1044;
          if (v1042 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16408)
          goto LABEL_23;
        v1045 = *(_QWORD *)a4;
        while (1)
        {
          v1046 = v1045 & 0x3FFF;
          if (v1046 == 1)
            break;
          if (v1046 == 2)
            v1047 = 16385;
          else
            v1047 = 16387;
          if ((v1045 & 0x4000) != 0)
            v1045 = v1047;
          else
            v1045 = v1046 | 0x4000u;
          if (v1046 == 40)
            v1045 = 16385;
          if (v1046 == 3)
            v1045 = 16385;
          if (v1045 == 16408)
            goto LABEL_23;
        }
        LOWORD(v1054) = 16408;
        while (1)
        {
          v1055 = v1054 & 0x3FFF;
          if (v1055 == 1)
            break;
          if (v1055 == 2)
            v1056 = 16385;
          else
            v1056 = 16387;
          if (v1055 == 3)
            v1054 = 16385;
          else
            v1054 = v1056;
          if (v1054 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16409)
          goto LABEL_23;
        v1057 = *(_QWORD *)a4;
        while (1)
        {
          v1058 = v1057 & 0x3FFF;
          if (v1058 == 1)
            break;
          if (v1058 == 2)
            v1059 = 16385;
          else
            v1059 = 16387;
          if ((v1057 & 0x4000) != 0)
            v1057 = v1059;
          else
            v1057 = v1058 | 0x4000u;
          if (v1058 == 40)
            v1057 = 16385;
          if (v1058 == 3)
            v1057 = 16385;
          if (v1057 == 16409)
            goto LABEL_23;
        }
        LOWORD(v1060) = 16409;
        while (1)
        {
          v1061 = v1060 & 0x3FFF;
          if (v1061 == 1)
            break;
          if (v1061 == 2)
            v1062 = 16385;
          else
            v1062 = 16387;
          if (v1061 == 3)
            v1060 = 16385;
          else
            v1060 = v1062;
          if (v1060 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16410)
          goto LABEL_23;
        v1066 = *(_QWORD *)a4;
        while (1)
        {
          v1067 = v1066 & 0x3FFF;
          if (v1067 == 1)
            break;
          if (v1067 == 2)
            v1068 = 16385;
          else
            v1068 = 16387;
          if ((v1066 & 0x4000) != 0)
            v1066 = v1068;
          else
            v1066 = v1067 | 0x4000u;
          if (v1067 == 40)
            v1066 = 16385;
          if (v1067 == 3)
            v1066 = 16385;
          if (v1066 == 16410)
            goto LABEL_23;
        }
        LOWORD(v1080) = 16410;
        while (1)
        {
          v1081 = v1080 & 0x3FFF;
          if (v1081 == 1)
            break;
          if (v1081 == 2)
            v1082 = 16385;
          else
            v1082 = 16387;
          if (v1081 == 3)
            v1080 = 16385;
          else
            v1080 = v1082;
          if (v1080 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16411)
          goto LABEL_23;
        v1083 = *(_QWORD *)a4;
        while (1)
        {
          v1084 = v1083 & 0x3FFF;
          if (v1084 == 1)
            break;
          if (v1084 == 2)
            v1085 = 16385;
          else
            v1085 = 16387;
          if ((v1083 & 0x4000) != 0)
            v1083 = v1085;
          else
            v1083 = v1084 | 0x4000u;
          if (v1084 == 40)
            v1083 = 16385;
          if (v1084 == 3)
            v1083 = 16385;
          if (v1083 == 16411)
            goto LABEL_23;
        }
        LOWORD(v1086) = 16411;
        while (1)
        {
          v1087 = v1086 & 0x3FFF;
          if (v1087 == 1)
            break;
          if (v1087 == 2)
            v1088 = 16385;
          else
            v1088 = 16387;
          if (v1087 == 3)
            v1086 = 16385;
          else
            v1086 = v1088;
          if (v1086 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16412)
          goto LABEL_23;
        v1089 = *(_QWORD *)a4;
        while (1)
        {
          v1090 = v1089 & 0x3FFF;
          if (v1090 == 1)
            break;
          if (v1090 == 2)
            v1091 = 16385;
          else
            v1091 = 16387;
          if ((v1089 & 0x4000) != 0)
            v1089 = v1091;
          else
            v1089 = v1090 | 0x4000u;
          if (v1090 == 40)
            v1089 = 16385;
          if (v1090 == 3)
            v1089 = 16385;
          if (v1089 == 16412)
            goto LABEL_23;
        }
        LOWORD(v1092) = 16412;
        while (1)
        {
          v1093 = v1092 & 0x3FFF;
          if (v1093 == 1)
            break;
          if (v1093 == 2)
            v1094 = 16385;
          else
            v1094 = 16387;
          if (v1093 == 3)
            v1092 = 16385;
          else
            v1092 = v1094;
          if (v1092 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16413)
          goto LABEL_23;
        v1098 = *(_QWORD *)a4;
        while (1)
        {
          v1099 = v1098 & 0x3FFF;
          if (v1099 == 1)
            break;
          if (v1099 == 2)
            v1100 = 16385;
          else
            v1100 = 16387;
          if ((v1098 & 0x4000) != 0)
            v1098 = v1100;
          else
            v1098 = v1099 | 0x4000u;
          if (v1099 == 40)
            v1098 = 16385;
          if (v1099 == 3)
            v1098 = 16385;
          if (v1098 == 16413)
            goto LABEL_23;
        }
        LOWORD(v1101) = 16413;
        while (1)
        {
          v1102 = v1101 & 0x3FFF;
          if (v1102 == 1)
            break;
          if (v1102 == 2)
            v1103 = 16385;
          else
            v1103 = 16387;
          if (v1102 == 3)
            v1101 = 16385;
          else
            v1101 = v1103;
          if (v1101 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16414)
          goto LABEL_23;
        v1104 = *(_QWORD *)a4;
        while (1)
        {
          v1105 = v1104 & 0x3FFF;
          if (v1105 == 1)
            break;
          if (v1105 == 2)
            v1106 = 16385;
          else
            v1106 = 16387;
          if ((v1104 & 0x4000) != 0)
            v1104 = v1106;
          else
            v1104 = v1105 | 0x4000u;
          if (v1105 == 40)
            v1104 = 16385;
          if (v1105 == 3)
            v1104 = 16385;
          if (v1104 == 16414)
            goto LABEL_23;
        }
        LOWORD(v1108) = 16414;
        while (1)
        {
          v1109 = v1108 & 0x3FFF;
          if (v1109 == 1)
            break;
          if (v1109 == 2)
            v1110 = 16385;
          else
            v1110 = 16387;
          if (v1109 == 3)
            v1108 = 16385;
          else
            v1108 = v1110;
          if (v1108 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16415)
          goto LABEL_23;
        v1111 = *(_QWORD *)a4;
        while (1)
        {
          v1112 = v1111 & 0x3FFF;
          if (v1112 == 1)
            break;
          if (v1112 == 2)
            v1113 = 16385;
          else
            v1113 = 16387;
          if ((v1111 & 0x4000) != 0)
            v1111 = v1113;
          else
            v1111 = v1112 | 0x4000u;
          if (v1112 == 40)
            v1111 = 16385;
          if (v1112 == 3)
            v1111 = 16385;
          if (v1111 == 16415)
            goto LABEL_23;
        }
        LOWORD(v1114) = 16415;
        while (1)
        {
          v1115 = v1114 & 0x3FFF;
          if (v1115 == 1)
            break;
          if (v1115 == 2)
            v1116 = 16385;
          else
            v1116 = 16387;
          if (v1115 == 3)
            v1114 = 16385;
          else
            v1114 = v1116;
          if (v1114 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16416)
          goto LABEL_23;
        v1117 = *(_QWORD *)a4;
        while (1)
        {
          v1118 = v1117 & 0x3FFF;
          if (v1118 == 1)
            break;
          if (v1118 == 2)
            v1119 = 16385;
          else
            v1119 = 16387;
          if ((v1117 & 0x4000) != 0)
            v1117 = v1119;
          else
            v1117 = v1118 | 0x4000u;
          if (v1118 == 40)
            v1117 = 16385;
          if (v1118 == 3)
            v1117 = 16385;
          if (v1117 == 16416)
            goto LABEL_23;
        }
        LOWORD(v1120) = 16416;
        while (1)
        {
          v1121 = v1120 & 0x3FFF;
          if (v1121 == 1)
            break;
          if (v1121 == 2)
            v1122 = 16385;
          else
            v1122 = 16387;
          if (v1121 == 40)
            v1122 = 16385;
          if (v1121 == 3)
            v1120 = 16385;
          else
            v1120 = v1122;
          if (v1120 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16417)
          goto LABEL_23;
        v1128 = *(_QWORD *)a4;
        while (1)
        {
          v1129 = v1128 & 0x3FFF;
          if (v1129 == 1)
            break;
          if (v1129 == 2)
            v1130 = 16385;
          else
            v1130 = 16387;
          if ((v1128 & 0x4000) != 0)
            v1128 = v1130;
          else
            v1128 = v1129 | 0x4000u;
          if (v1129 == 40)
            v1128 = 16385;
          if (v1129 == 3)
            v1128 = 16385;
          if (v1128 == 16417)
            goto LABEL_23;
        }
        LOWORD(v1132) = 16417;
        while (1)
        {
          v1133 = v1132 & 0x3FFF;
          if (v1133 == 1)
            break;
          if (v1133 == 2)
            v1134 = 16385;
          else
            v1134 = 16387;
          if (v1133 == 40)
            v1134 = 16385;
          if (v1133 == 3)
            v1132 = 16385;
          else
            v1132 = v1134;
          if (v1132 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16418)
          goto LABEL_23;
        v1135 = *(_QWORD *)a4;
        while (1)
        {
          v1136 = v1135 & 0x3FFF;
          if (v1136 == 1)
            break;
          if (v1136 == 2)
            v1137 = 16385;
          else
            v1137 = 16387;
          if ((v1135 & 0x4000) != 0)
            v1135 = v1137;
          else
            v1135 = v1136 | 0x4000u;
          if (v1136 == 40)
            v1135 = 16385;
          if (v1136 == 3)
            v1135 = 16385;
          if (v1135 == 16418)
            goto LABEL_23;
        }
        LOWORD(v1138) = 16418;
        while (1)
        {
          v1139 = v1138 & 0x3FFF;
          if (v1139 == 1)
            break;
          if (v1139 == 2)
            v1140 = 16385;
          else
            v1140 = 16387;
          if (v1139 == 40)
            v1140 = 16385;
          if (v1139 == 3)
            v1138 = 16385;
          else
            v1138 = v1140;
          if (v1138 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16419)
          goto LABEL_23;
        v1142 = *(_QWORD *)a4;
        while (1)
        {
          v1143 = v1142 & 0x3FFF;
          if (v1143 == 1)
            break;
          if (v1143 == 2)
            v1144 = 16385;
          else
            v1144 = 16387;
          if ((v1142 & 0x4000) != 0)
            v1142 = v1144;
          else
            v1142 = v1143 | 0x4000u;
          if (v1143 == 40)
            v1142 = 16385;
          if (v1143 == 3)
            v1142 = 16385;
          if (v1142 == 16419)
            goto LABEL_23;
        }
        LOWORD(v1145) = 16419;
        while (1)
        {
          v1146 = v1145 & 0x3FFF;
          if (v1146 == 1)
            break;
          if (v1146 == 2)
            v1147 = 16385;
          else
            v1147 = 16387;
          if (v1146 == 40)
            v1147 = 16385;
          if (v1146 == 3)
            v1145 = 16385;
          else
            v1145 = v1147;
          if (v1145 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16420)
          goto LABEL_23;
        v1148 = *(_QWORD *)a4;
        while (1)
        {
          v1149 = v1148 & 0x3FFF;
          if (v1149 == 1)
            break;
          if (v1149 == 2)
            v1150 = 16385;
          else
            v1150 = 16387;
          if ((v1148 & 0x4000) != 0)
            v1148 = v1150;
          else
            v1148 = v1149 | 0x4000u;
          if (v1149 == 40)
            v1148 = 16385;
          if (v1149 == 3)
            v1148 = 16385;
          if (v1148 == 16420)
            goto LABEL_23;
        }
        LOWORD(v1151) = 16420;
        while (1)
        {
          v1152 = v1151 & 0x3FFF;
          if (v1152 == 1)
            break;
          if (v1152 == 2)
            v1153 = 16385;
          else
            v1153 = 16387;
          if (v1152 == 40)
            v1153 = 16385;
          if (v1152 == 3)
            v1151 = 16385;
          else
            v1151 = v1153;
          if (v1151 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        v1154 = *(_QWORD *)a4;
        if (*(_QWORD *)a4 == 16421)
          goto LABEL_23;
        if ((*(_QWORD *)a4 & 0x3FFFLL) == 0x25)
        {
          *(_BYTE *)(a4 + 8) = (*(_QWORD *)a4 & 0x4000) == 0;
          if ((v1154 & 0x4000) == 0)
            return;
        }
        else
        {
          v1155 = *(_QWORD *)a4;
          while (1)
          {
            v1156 = v1155 & 0x3FFF;
            if (v1156 == 1)
              break;
            if (v1156 == 2)
              v1157 = 16385;
            else
              v1157 = 16387;
            if ((v1155 & 0x4000) != 0)
              v1155 = v1157;
            else
              v1155 = v1156 | 0x4000u;
            if (v1156 == 40)
              v1155 = 16385;
            if (v1156 == 3)
              v1155 = 16385;
            if (v1155 == 16421)
              goto LABEL_23;
          }
          LOWORD(v1158) = 16421;
          while (1)
          {
            v1159 = v1158 & 0x3FFF;
            if (v1159 == 1)
              break;
            if (v1159 == 2)
              v1160 = 16385;
            else
              v1160 = 16387;
            if (v1159 == 40)
              v1160 = 16385;
            if (v1159 == 3)
              v1158 = 16385;
            else
              v1158 = v1160;
            if (v1158 == v1154)
              goto LABEL_23;
          }
          *(_BYTE *)(a4 + 8) = 0;
        }
        if (*(_QWORD *)a4 == 16422)
          goto LABEL_23;
        v1161 = *(_QWORD *)a4;
        while (1)
        {
          v1162 = v1161 & 0x3FFF;
          if (v1162 == 1)
            break;
          if (v1162 == 2)
            v1163 = 16385;
          else
            v1163 = 16387;
          if ((v1161 & 0x4000) != 0)
            v1161 = v1163;
          else
            v1161 = v1162 | 0x4000u;
          if (v1162 == 40)
            v1161 = 16385;
          if (v1162 == 3)
            v1161 = 16385;
          if (v1161 == 16422)
            goto LABEL_23;
        }
        LOWORD(v1164) = 16422;
        while (1)
        {
          v1165 = v1164 & 0x3FFF;
          if (v1165 == 1)
            break;
          if (v1165 == 2)
            v1166 = 16385;
          else
            v1166 = 16387;
          if (v1165 == 40)
            v1166 = 16385;
          if (v1165 == 3)
            v1164 = 16385;
          else
            v1164 = v1166;
          if (v1164 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (*(_QWORD *)a4 == 16423)
          goto LABEL_23;
        v1167 = *(_QWORD *)a4;
        while (1)
        {
          v1168 = v1167 & 0x3FFF;
          if (v1168 == 1)
            break;
          if (v1168 == 2)
            v1169 = 16385;
          else
            v1169 = 16387;
          if ((v1167 & 0x4000) != 0)
            v1167 = v1169;
          else
            v1167 = v1168 | 0x4000u;
          if (v1168 == 40)
            v1167 = 16385;
          if (v1168 == 3)
            v1167 = 16385;
          if (v1167 == 16423)
            goto LABEL_23;
        }
        LOWORD(v1170) = 16423;
        while (1)
        {
          v1171 = v1170 & 0x3FFF;
          if (v1171 == 1)
            break;
          if (v1171 == 2)
            v1172 = 16385;
          else
            v1172 = 16387;
          if (v1171 == 40)
            v1172 = 16385;
          if (v1171 == 3)
            v1170 = 16385;
          else
            v1170 = v1172;
          if (v1170 == *(_QWORD *)a4)
            goto LABEL_23;
        }
        if (*(_QWORD *)a4 == 16424)
          goto LABEL_23;
        v1173 = *(_QWORD *)a4;
        while (1)
        {
          v1174 = v1173 & 0x3FFF;
          if (v1174 == 1)
            break;
          if (v1174 == 2)
            v1175 = 16385;
          else
            v1175 = 16387;
          if ((v1173 & 0x4000) != 0)
            v1173 = v1175;
          else
            v1173 = v1174 | 0x4000u;
          if (v1174 == 40)
            v1173 = 16385;
          if (v1174 == 3)
            v1173 = 16385;
          if (v1173 == 16424)
            goto LABEL_23;
        }
        LOWORD(v1178) = 16424;
        do
        {
          v1179 = v1178 & 0x3FFF;
          switch(v1179)
          {
            case 1:
              goto LABEL_4452;
            case 2:
              v1180 = 16385;
              break;
            case 40:
              v1180 = 16385;
              break;
            default:
              v1180 = 16387;
              break;
          }
          if (v1179 == 3)
            v1178 = 16385;
          else
            v1178 = v1180;
        }
        while (v1178 != *(_QWORD *)a4);
      }
      goto LABEL_23;
    case 0x84:
    case 0x85:
      if (*(_BYTE *)(a3 + 8))
        return;
      if (*(_QWORD *)a3 == 16394)
        goto LABEL_175;
      v60 = *(_QWORD *)a3;
      while (1)
      {
        v61 = v60 & 0x3FFF;
        if (v61 == 1)
          break;
        if (v61 == 2)
          v62 = 16385;
        else
          v62 = 16387;
        if ((v60 & 0x4000) != 0)
          v60 = v62;
        else
          v60 = v61 | 0x4000u;
        if (v61 == 40)
          v60 = 16385;
        if (v61 == 3)
          v60 = 16385;
        if (v60 == 16394)
          goto LABEL_175;
      }
      LOWORD(v64) = 16394;
      while (1)
      {
        v65 = v64 & 0x3FFF;
        if (v65 == 1)
          goto LABEL_3190;
        if (v65 == 2)
          v66 = 16385;
        else
          v66 = 16387;
        if (v65 == 3)
          v64 = 16385;
        else
          v64 = v66;
        if (v64 == *(_QWORD *)a3)
          goto LABEL_175;
      }
    case 0x87:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_258;
      if (*(_QWORD *)a3 == 16396)
        goto LABEL_245;
      v77 = *(_QWORD *)a3;
      while (1)
      {
        v78 = v77 & 0x3FFF;
        if (v78 == 1)
          break;
        if (v78 == 2)
          v79 = 16385;
        else
          v79 = 16387;
        if ((v77 & 0x4000) != 0)
          v77 = v79;
        else
          v77 = v78 | 0x4000u;
        if (v78 == 40)
          v77 = 16385;
        if (v78 == 3)
          v77 = 16385;
        if (v77 == 16396)
        {
LABEL_245:
          v80 = 1;
          goto LABEL_257;
        }
      }
      LOWORD(v81) = 16396;
      while (1)
      {
        v82 = v81 & 0x3FFF;
        if (v82 == 1)
          break;
        if (v82 == 2)
          v83 = 16385;
        else
          v83 = 16387;
        if (v82 == 3)
          v81 = 16385;
        else
          v81 = v83;
        if (v81 == *(_QWORD *)a3)
          goto LABEL_245;
      }
      v80 = 0;
LABEL_257:
      *(_BYTE *)(a3 + 8) = v80;
LABEL_258:
      if (!*(_BYTE *)(a4 + 8))
      {
        v84 = *(_QWORD *)a4;
        if (*(_QWORD *)a4 == 16394)
          goto LABEL_273;
        v85 = *(_QWORD *)a4;
        while (1)
        {
          v86 = v85 & 0x3FFF;
          if (v86 == 1)
            break;
          if (v86 == 2)
            v87 = 16385;
          else
            v87 = 16387;
          if ((v85 & 0x4000) != 0)
            v85 = v87;
          else
            v85 = v86 | 0x4000u;
          if (v86 == 40)
            v85 = 16385;
          if (v86 == 3)
            v85 = 16385;
          if (v85 == 16394)
            goto LABEL_273;
        }
        LOWORD(v89) = 16394;
        while (1)
        {
          v90 = v89 & 0x3FFF;
          if (v90 == 1)
            break;
          if (v90 == 2)
            v91 = 16385;
          else
            v91 = 16387;
          if (v90 == 3)
            v89 = 16385;
          else
            v89 = v91;
          if (v89 == v84)
            goto LABEL_273;
        }
        *(_BYTE *)(a4 + 8) = 0;
        if (v84 == 16395)
          goto LABEL_273;
        LOWORD(v92) = v84;
        while (1)
        {
          v93 = v92 & 0x3FFF;
          if (v93 == 1)
            break;
          if (v93 == 2)
            v94 = 16385;
          else
            v94 = 16387;
          if ((v92 & 0x4000) != 0)
            v92 = v94;
          else
            v92 = v93 | 0x4000u;
          if (v93 == 40)
            v92 = 16385;
          if (v93 == 3)
            v92 = 16385;
          if (v92 == 16395)
            goto LABEL_273;
        }
        LOWORD(v95) = 16395;
        while (1)
        {
          v96 = v95 & 0x3FFF;
          if (v96 == 1)
            break;
          if (v96 == 2)
            v97 = 16385;
          else
            v97 = 16387;
          if (v96 == 3)
            v95 = 16385;
          else
            v95 = v97;
          if (v95 == v84)
            goto LABEL_273;
        }
        if (v84 == 16393)
        {
LABEL_273:
          v88 = 1;
        }
        else
        {
          LOWORD(v98) = v84;
          while (1)
          {
            v99 = v98 & 0x3FFF;
            if (v99 == 1)
              break;
            if (v99 == 2)
              v100 = 16385;
            else
              v100 = 16387;
            if ((v98 & 0x4000) != 0)
              v98 = v100;
            else
              v98 = v99 | 0x4000u;
            if (v99 == 40)
              v98 = 16385;
            if (v99 == 3)
              v98 = 16385;
            if (v98 == 16393)
              goto LABEL_273;
          }
          LOWORD(v101) = 16393;
          while (1)
          {
            v102 = v101 & 0x3FFF;
            if (v102 == 1)
              break;
            if (v102 == 2)
              v103 = 16385;
            else
              v103 = 16387;
            if (v102 == 3)
              v101 = 16385;
            else
              v101 = v103;
            if (v101 == v84)
              goto LABEL_273;
          }
          v88 = 0;
        }
        *(_BYTE *)(a4 + 8) = v88;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 8) + 16) & 0x3E000) == 0x4000)
LABEL_337:
        JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x400FuLL);
      return;
    case 0x88:
    case 0x89:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_1176;
      if (*(_QWORD *)a3 == 16407)
        goto LABEL_1074;
      v301 = *(_QWORD *)a3;
      while (1)
      {
        v302 = v301 & 0x3FFF;
        if (v302 == 1)
          break;
        if (v302 == 2)
          v303 = 16385;
        else
          v303 = 16387;
        if ((v301 & 0x4000) != 0)
          v301 = v303;
        else
          v301 = v302 | 0x4000u;
        if (v302 == 40)
          v301 = 16385;
        if (v302 == 3)
          v301 = 16385;
        if (v301 == 16407)
        {
LABEL_1074:
          v304 = 1;
          goto LABEL_1175;
        }
      }
      LOWORD(v321) = 16407;
      while (1)
      {
        v322 = v321 & 0x3FFF;
        if (v322 == 1)
          break;
        if (v322 == 2)
          v323 = 16385;
        else
          v323 = 16387;
        if (v322 == 3)
          v321 = 16385;
        else
          v321 = v323;
        if (v321 == *(_QWORD *)a3)
          goto LABEL_1074;
      }
      v304 = 0;
LABEL_1175:
      *(_BYTE *)(a3 + 8) = v304;
LABEL_1176:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_23;
      v333 = *(_QWORD *)a4;
      while (1)
      {
        v334 = v333 & 0x3FFF;
        if (v334 == 1)
          break;
        if (v334 == 2)
          v335 = 16385;
        else
          v335 = 16387;
        if ((v333 & 0x4000) != 0)
          v333 = v335;
        else
          v333 = v334 | 0x4000u;
        if (v334 == 40)
          v333 = 16385;
        if (v334 == 3)
          v333 = 16385;
        if (v333 == 16407)
          goto LABEL_23;
      }
      LOWORD(v336) = 16407;
      while (1)
      {
        v337 = v336 & 0x3FFF;
        if (v337 == 1)
          goto LABEL_3738;
        if (v337 == 2)
          v338 = 16385;
        else
          v338 = 16387;
        if (v337 == 3)
          v336 = 16385;
        else
          v336 = v338;
        if (v336 == *(_QWORD *)a4)
          goto LABEL_23;
      }
    case 0x8A:
      if (*(_BYTE *)(a3 + 8))
        return;
      if (*(_QWORD *)a3 == 16396)
        goto LABEL_175;
      v113 = *(_QWORD *)a3;
      while (1)
      {
        v114 = v113 & 0x3FFF;
        if (v114 == 1)
          break;
        if (v114 == 2)
          v115 = 16385;
        else
          v115 = 16387;
        if ((v113 & 0x4000) != 0)
          v113 = v115;
        else
          v113 = v114 | 0x4000u;
        if (v114 == 40)
          v113 = 16385;
        if (v114 == 3)
          v113 = 16385;
        if (v113 == 16396)
          goto LABEL_175;
      }
      LOWORD(v116) = 16396;
      while (1)
      {
        v117 = v116 & 0x3FFF;
        if (v117 == 1)
          goto LABEL_3190;
        if (v117 == 2)
          v118 = 16385;
        else
          v118 = 16387;
        if (v117 == 3)
          v116 = 16385;
        else
          v116 = v118;
        if (v116 == *(_QWORD *)a3)
          goto LABEL_175;
      }
    case 0x8B:
      if (*(_BYTE *)(a4 + 8))
        return;
      v305 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16396)
        goto LABEL_23;
      v306 = *(_QWORD *)a4;
      while (1)
      {
        v307 = v306 & 0x3FFF;
        if (v307 == 1)
          break;
        if (v307 == 2)
          v308 = 16385;
        else
          v308 = 16387;
        if ((v306 & 0x4000) != 0)
          v306 = v308;
        else
          v306 = v307 | 0x4000u;
        if (v307 == 40)
          v306 = 16385;
        if (v307 == 3)
          v306 = 16385;
        if (v306 == 16396)
          goto LABEL_23;
      }
      LOWORD(v324) = 16396;
      while (1)
      {
        v325 = v324 & 0x3FFF;
        if (v325 == 1)
          break;
        if (v325 == 2)
          v326 = 16385;
        else
          v326 = 16387;
        if (v325 == 3)
          v324 = 16385;
        else
          v324 = v326;
        if (v324 == v305)
          goto LABEL_23;
      }
      if (v305 == 16394)
        goto LABEL_23;
      v339 = *(_QWORD *)a4;
      while (1)
      {
        v340 = v339 & 0x3FFF;
        if (v340 == 1)
          break;
        if (v340 == 2)
          v341 = 16385;
        else
          v341 = 16387;
        if ((v339 & 0x4000) != 0)
          v339 = v341;
        else
          v339 = v340 | 0x4000u;
        if (v340 == 40)
          v339 = 16385;
        if (v340 == 3)
          v339 = 16385;
        if (v339 == 16394)
          goto LABEL_23;
      }
      LOWORD(v348) = 16394;
      while (1)
      {
        v349 = v348 & 0x3FFF;
        if (v349 == 1)
          goto LABEL_3738;
        if (v349 == 2)
          v350 = 16385;
        else
          v350 = 16387;
        if (v349 == 3)
          v348 = 16385;
        else
          v348 = v350;
        if (v348 == v305)
          goto LABEL_23;
      }
    case 0x8C:
    case 0x8D:
      if (*(_BYTE *)(a3 + 8))
        return;
      v368 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16393)
        goto LABEL_175;
      v369 = *(_QWORD *)a3;
      while (1)
      {
        v370 = v369 & 0x3FFF;
        if (v370 == 1)
          break;
        if (v370 == 2)
          v371 = 16385;
        else
          v371 = 16387;
        if ((v369 & 0x4000) != 0)
          v369 = v371;
        else
          v369 = v370 | 0x4000u;
        if (v370 == 40)
          v369 = 16385;
        if (v370 == 3)
          v369 = 16385;
        if (v369 == 16393)
          goto LABEL_175;
      }
      LOWORD(v383) = 16393;
      while (1)
      {
        v384 = v383 & 0x3FFF;
        if (v384 == 1)
          break;
        if (v384 == 2)
          v385 = 16385;
        else
          v385 = 16387;
        if (v384 == 3)
          v383 = 16385;
        else
          v383 = v385;
        if (v383 == v368)
          goto LABEL_175;
      }
      if (v368 == 16394)
        goto LABEL_175;
      v412 = *(_QWORD *)a3;
      while (1)
      {
        v413 = v412 & 0x3FFF;
        if (v413 == 1)
          break;
        if (v413 == 2)
          v414 = 16385;
        else
          v414 = 16387;
        if ((v412 & 0x4000) != 0)
          v412 = v414;
        else
          v412 = v413 | 0x4000u;
        if (v413 == 40)
          v412 = 16385;
        if (v413 == 3)
          v412 = 16385;
        if (v412 == 16394)
          goto LABEL_175;
      }
      LOWORD(v423) = 16394;
      while (1)
      {
        v424 = v423 & 0x3FFF;
        if (v424 == 1)
          goto LABEL_3190;
        if (v424 == 2)
          v425 = 16385;
        else
          v425 = 16387;
        if (v424 == 3)
          v423 = 16385;
        else
          v423 = v425;
        if (v423 == v368)
          goto LABEL_175;
      }
    case 0x90:
      goto LABEL_4515;
    case 0x91:
    case 0x92:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_1390;
      v309 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16394)
        goto LABEL_1106;
      v310 = *(_QWORD *)a3;
      while (1)
      {
        v311 = v310 & 0x3FFF;
        if (v311 == 1)
          break;
        if (v311 == 2)
          v312 = 16385;
        else
          v312 = 16387;
        if ((v310 & 0x4000) != 0)
          v310 = v312;
        else
          v310 = v311 | 0x4000u;
        if (v311 == 40)
          v310 = 16385;
        if (v311 == 3)
          v310 = 16385;
        if (v310 == 16394)
          goto LABEL_1106;
      }
      LOWORD(v327) = 16394;
      while (1)
      {
        v328 = v327 & 0x3FFF;
        if (v328 == 1)
          break;
        if (v328 == 2)
          v329 = 16385;
        else
          v329 = 16387;
        if (v328 == 3)
          v327 = 16385;
        else
          v327 = v329;
        if (v327 == v309)
          goto LABEL_1106;
      }
      if (v309 == 16393)
        goto LABEL_1106;
      v342 = *(_QWORD *)a3;
      while (1)
      {
        v343 = v342 & 0x3FFF;
        if (v343 == 1)
          break;
        if (v343 == 2)
          v344 = 16385;
        else
          v344 = 16387;
        if ((v342 & 0x4000) != 0)
          v342 = v344;
        else
          v342 = v343 | 0x4000u;
        if (v343 == 40)
          v342 = 16385;
        if (v343 == 3)
          v342 = 16385;
        if (v342 == 16393)
          goto LABEL_1106;
      }
      LOWORD(v351) = 16393;
      while (1)
      {
        v352 = v351 & 0x3FFF;
        if (v352 == 1)
          break;
        if (v352 == 2)
          v353 = 16385;
        else
          v353 = 16387;
        if (v352 == 3)
          v351 = 16385;
        else
          v351 = v353;
        if (v351 == v309)
          goto LABEL_1106;
      }
      if (v309 == 16396)
      {
LABEL_1106:
        v313 = 1;
      }
      else
      {
        v365 = *(_QWORD *)a3;
        while (1)
        {
          v366 = v365 & 0x3FFF;
          if (v366 == 1)
            break;
          if (v366 == 2)
            v367 = 16385;
          else
            v367 = 16387;
          if ((v365 & 0x4000) != 0)
            v365 = v367;
          else
            v365 = v366 | 0x4000u;
          if (v366 == 40)
            v365 = 16385;
          if (v366 == 3)
            v365 = 16385;
          if (v365 == 16396)
            goto LABEL_1106;
        }
        LOWORD(v380) = 16396;
        while (1)
        {
          v381 = v380 & 0x3FFF;
          if (v381 == 1)
            break;
          if (v381 == 2)
            v382 = 16385;
          else
            v382 = 16387;
          if (v381 == 3)
            v380 = 16385;
          else
            v380 = v382;
          if (v380 == v309)
            goto LABEL_1106;
        }
        v313 = 0;
      }
      *(_BYTE *)(a3 + 8) = v313;
LABEL_1390:
      if (*(_BYTE *)(a4 + 8))
        return;
      v386 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16394)
        goto LABEL_23;
      v387 = *(_QWORD *)a4;
      while (1)
      {
        v388 = v387 & 0x3FFF;
        if (v388 == 1)
          break;
        if (v388 == 2)
          v389 = 16385;
        else
          v389 = 16387;
        if ((v387 & 0x4000) != 0)
          v387 = v389;
        else
          v387 = v388 | 0x4000u;
        if (v388 == 40)
          v387 = 16385;
        if (v388 == 3)
          v387 = 16385;
        if (v387 == 16394)
          goto LABEL_23;
      }
      LOWORD(v390) = 16394;
      while (1)
      {
        v391 = v390 & 0x3FFF;
        if (v391 == 1)
          break;
        if (v391 == 2)
          v392 = 16385;
        else
          v392 = 16387;
        if (v391 == 3)
          v390 = 16385;
        else
          v390 = v392;
        if (v390 == v386)
          goto LABEL_23;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (v386 == 16393)
        goto LABEL_23;
      LOWORD(v393) = v386;
      while (1)
      {
        v394 = v393 & 0x3FFF;
        if (v394 == 1)
          break;
        if (v394 == 2)
          v395 = 16385;
        else
          v395 = 16387;
        if ((v393 & 0x4000) != 0)
          v393 = v395;
        else
          v393 = v394 | 0x4000u;
        if (v394 == 40)
          v393 = 16385;
        if (v394 == 3)
          v393 = 16385;
        if (v393 == 16393)
          goto LABEL_23;
      }
      LOWORD(v396) = 16393;
      while (1)
      {
        v397 = v396 & 0x3FFF;
        if (v397 == 1)
          break;
        if (v397 == 2)
          v398 = 16385;
        else
          v398 = 16387;
        if (v397 == 3)
          v396 = 16385;
        else
          v396 = v398;
        if (v396 == v386)
          goto LABEL_23;
      }
      if (v386 == 16396)
        goto LABEL_23;
      LOWORD(v399) = v386;
      while (1)
      {
        v400 = v399 & 0x3FFF;
        if (v400 == 1)
          break;
        if (v400 == 2)
          v401 = 16385;
        else
          v401 = 16387;
        if ((v399 & 0x4000) != 0)
          v399 = v401;
        else
          v399 = v400 | 0x4000u;
        if (v400 == 40)
          v399 = 16385;
        if (v400 == 3)
          v399 = 16385;
        if (v399 == 16396)
          goto LABEL_23;
      }
      LOWORD(v402) = 16396;
      while (1)
      {
        v403 = v402 & 0x3FFF;
        if (v403 == 1)
          break;
        if (v403 == 2)
          v404 = 16385;
        else
          v404 = 16387;
        if (v403 == 3)
          v402 = 16385;
        else
          v402 = v404;
        if (v402 == v386)
          goto LABEL_23;
      }
      if (*(_QWORD *)a4 == 16422)
        goto LABEL_23;
      v405 = *(_QWORD *)a4;
      while (1)
      {
        v406 = v405 & 0x3FFF;
        if (v406 == 1)
          break;
        if (v406 == 2)
          v407 = 16385;
        else
          v407 = 16387;
        if ((v405 & 0x4000) != 0)
          v405 = v407;
        else
          v405 = v406 | 0x4000u;
        if (v406 == 40)
          v405 = 16385;
        if (v406 == 3)
          v405 = 16385;
        if (v405 == 16422)
          goto LABEL_23;
      }
      LOWORD(v420) = 16422;
      while (1)
      {
        v421 = v420 & 0x3FFF;
        switch(v421)
        {
          case 1:
            goto LABEL_3738;
          case 2:
            v422 = 16385;
            break;
          case 40:
            v422 = 16385;
            break;
          default:
            v422 = 16387;
            break;
        }
        if (v421 == 3)
          v420 = 16385;
        else
          v420 = v422;
        if (v420 == *(_QWORD *)a4)
          goto LABEL_23;
      }
    case 0x93:
      if (*(_BYTE *)(a3 + 8))
        return;
      if (*(_QWORD *)a3 == 16423)
        goto LABEL_175;
      v259 = *(_QWORD *)a3;
      while (1)
      {
        v260 = v259 & 0x3FFF;
        if (v260 == 1)
          break;
        if (v260 == 2)
          v261 = 16385;
        else
          v261 = 16387;
        if ((v259 & 0x4000) != 0)
          v259 = v261;
        else
          v259 = v260 | 0x4000u;
        if (v260 == 40)
          v259 = 16385;
        if (v260 == 3)
          v259 = 16385;
        if (v259 == 16423)
          goto LABEL_175;
      }
      LOWORD(v262) = 16423;
      while (1)
      {
        v263 = v262 & 0x3FFF;
        switch(v263)
        {
          case 1:
            goto LABEL_3190;
          case 2:
            v264 = 16385;
            break;
          case 40:
            v264 = 16385;
            break;
          default:
            v264 = 16387;
            break;
        }
        if (v263 == 3)
          v262 = 16385;
        else
          v262 = v264;
        if (v262 == *(_QWORD *)a3)
          goto LABEL_175;
      }
    case 0x96:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4006uLL);
      v76 = &v1291;
      goto LABEL_3858;
    case 0x97:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4007uLL);
      v76 = &v1290;
      goto LABEL_3858;
    case 0x98:
    case 0x99:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, ((unint64_t)*(unsigned int *)(*((_QWORD *)a2 + 9) + 4) << 15) | 0xF);
      if (*((int *)this + 238) < 2)
        return;
      v76 = &v1278;
      goto LABEL_3858;
    case 0x9A:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_3636;
      v900 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16394)
        goto LABEL_3310;
      v901 = *(_QWORD *)a3;
      while (1)
      {
        v902 = v901 & 0x3FFF;
        if (v902 == 1)
          break;
        if (v902 == 2)
          v903 = 16385;
        else
          v903 = 16387;
        if ((v901 & 0x4000) != 0)
          v901 = v903;
        else
          v901 = v902 | 0x4000u;
        if (v902 == 40)
          v901 = 16385;
        if (v902 == 3)
          v901 = 16385;
        if (v901 == 16394)
          goto LABEL_3310;
      }
      LOWORD(v942) = 16394;
      while (1)
      {
        v943 = v942 & 0x3FFF;
        if (v943 == 1)
          break;
        if (v943 == 2)
          v944 = 16385;
        else
          v944 = 16387;
        if (v943 == 3)
          v942 = 16385;
        else
          v942 = v944;
        if (v942 == v900)
          goto LABEL_3310;
      }
      if (v900 == 16396)
      {
LABEL_3310:
        v904 = 1;
      }
      else
      {
        v961 = *(_QWORD *)a3;
        while (1)
        {
          v962 = v961 & 0x3FFF;
          if (v962 == 1)
            break;
          if (v962 == 2)
            v963 = 16385;
          else
            v963 = 16387;
          if ((v961 & 0x4000) != 0)
            v961 = v963;
          else
            v961 = v962 | 0x4000u;
          if (v962 == 40)
            v961 = 16385;
          if (v962 == 3)
            v961 = 16385;
          if (v961 == 16396)
            goto LABEL_3310;
        }
        LOWORD(v970) = 16396;
        while (1)
        {
          v971 = v970 & 0x3FFF;
          if (v971 == 1)
            break;
          if (v971 == 2)
            v972 = 16385;
          else
            v972 = 16387;
          if (v971 == 3)
            v970 = 16385;
          else
            v970 = v972;
          if (v970 == v900)
            goto LABEL_3310;
        }
        v904 = 0;
      }
      *(_BYTE *)(a3 + 8) = v904;
LABEL_3636:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, ((unint64_t)**((unsigned int **)a2 + 9) << 15) | 0xF);
      if (*((int *)this + 238) < 2)
        return;
      v76 = &v1277;
      goto LABEL_3858;
    case 0x9B:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, ((unint64_t)*(unsigned int *)(*((_QWORD *)a2 + 9) + 4) << 15) | 0xF);
      if (*((int *)this + 238) >= 2)
        JSC::DFG::LazyNode::LazyNode(&v1275, (JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x9C:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_3313;
      v825 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16394)
        goto LABEL_3059;
      v826 = *(_QWORD *)a3;
      while (1)
      {
        v827 = v826 & 0x3FFF;
        if (v827 == 1)
          break;
        if (v827 == 2)
          v828 = 16385;
        else
          v828 = 16387;
        if ((v826 & 0x4000) != 0)
          v826 = v828;
        else
          v826 = v827 | 0x4000u;
        if (v827 == 40)
          v826 = 16385;
        if (v827 == 3)
          v826 = 16385;
        if (v826 == 16394)
          goto LABEL_3059;
      }
      LOWORD(v854) = 16394;
      while (1)
      {
        v855 = v854 & 0x3FFF;
        if (v855 == 1)
          break;
        if (v855 == 2)
          v856 = 16385;
        else
          v856 = 16387;
        if (v855 == 3)
          v854 = 16385;
        else
          v854 = v856;
        if (v854 == v825)
          goto LABEL_3059;
      }
      if (v825 == 16396)
      {
LABEL_3059:
        v829 = 1;
      }
      else
      {
        v872 = *(_QWORD *)a3;
        while (1)
        {
          v873 = v872 & 0x3FFF;
          if (v873 == 1)
            break;
          if (v873 == 2)
            v874 = 16385;
          else
            v874 = 16387;
          if ((v872 & 0x4000) != 0)
            v872 = v874;
          else
            v872 = v873 | 0x4000u;
          if (v873 == 40)
            v872 = 16385;
          if (v873 == 3)
            v872 = 16385;
          if (v872 == 16396)
            goto LABEL_3059;
        }
        LOWORD(v885) = 16396;
        while (1)
        {
          v886 = v885 & 0x3FFF;
          if (v886 == 1)
            break;
          if (v886 == 2)
            v887 = 16385;
          else
            v887 = 16387;
          if (v886 == 3)
            v885 = 16385;
          else
            v885 = v887;
          if (v885 == v825)
            goto LABEL_3059;
        }
        v829 = 0;
      }
      *(_BYTE *)(a3 + 8) = v829;
LABEL_3313:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, ((unint64_t)**((unsigned int **)a2 + 9) << 15) | 0xF);
      v905 = *((_QWORD *)a2 + 9);
      v906 = *(unsigned int *)(v905 + 20);
      v907 = (v906 << 6) - 64;
      do
      {
        if (v907 == -64)
          goto LABEL_3474;
        v908 = *(_DWORD *)(*(_QWORD *)(v905 + 8) + v907) - 2;
        v907 -= 64;
      }
      while (v908 > 3);
      if (!*(_BYTE *)(a4 + 8))
      {
        if (*(_QWORD *)a4 == 16394)
        {
LABEL_3331:
          v912 = 1;
        }
        else
        {
          v909 = *(_QWORD *)a4;
          while (1)
          {
            v910 = v909 & 0x3FFF;
            if (v910 == 1)
              break;
            if (v910 == 2)
              v911 = 16385;
            else
              v911 = 16387;
            if ((v909 & 0x4000) != 0)
              v909 = v911;
            else
              v909 = v910 | 0x4000u;
            if (v910 == 40)
              v909 = 16385;
            if (v910 == 3)
              v909 = 16385;
            if (v909 == 16394)
              goto LABEL_3331;
          }
          LOWORD(v926) = 16394;
          while (1)
          {
            v927 = v926 & 0x3FFF;
            if (v927 == 1)
              break;
            if (v927 == 2)
              v928 = 16385;
            else
              v928 = 16387;
            if (v927 == 3)
              v926 = 16385;
            else
              v926 = v928;
            if (v926 == *(_QWORD *)a4)
              goto LABEL_3331;
          }
          v912 = 0;
        }
        *(_BYTE *)(a4 + 8) = v912;
        v905 = *((_QWORD *)a2 + 9);
        v906 = *(unsigned int *)(v905 + 20);
      }
LABEL_3474:
      v945 = (v906 << 6) - 64;
      do
      {
        if (!v906)
          goto LABEL_4118;
        if (--v906 >= (unint64_t)*(unsigned int *)(v905 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x19839C200);
        }
        v946 = v945 - 64;
        v947 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v905 + 8) + v945));
        v945 = v946;
      }
      while (!v947);
      if (!*(_BYTE *)(a4 + 8))
      {
        if (*(_QWORD *)a4 == 16396)
        {
LABEL_3493:
          v951 = 1;
        }
        else
        {
          v948 = *(_QWORD *)a4;
          while (1)
          {
            v949 = v948 & 0x3FFF;
            if (v949 == 1)
              break;
            if (v949 == 2)
              v950 = 16385;
            else
              v950 = 16387;
            if ((v948 & 0x4000) != 0)
              v948 = v950;
            else
              v948 = v949 | 0x4000u;
            if (v949 == 40)
              v948 = 16385;
            if (v949 == 3)
              v948 = 16385;
            if (v948 == 16396)
              goto LABEL_3493;
          }
          LOWORD(v1095) = 16396;
          while (1)
          {
            v1096 = v1095 & 0x3FFF;
            if (v1096 == 1)
              break;
            if (v1096 == 2)
              v1097 = 16385;
            else
              v1097 = 16387;
            if (v1096 == 3)
              v1095 = 16385;
            else
              v1095 = v1097;
            if (v1095 == *(_QWORD *)a4)
              goto LABEL_3493;
          }
          v951 = 0;
        }
        *(_BYTE *)(a4 + 8) = v951;
      }
LABEL_4118:
      if (*((int *)this + 238) >= 2)
        JSC::DFG::LazyNode::LazyNode(&v1276, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x9D:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400AuLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400CuLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, ((unint64_t)**((unsigned int **)a2 + 9) << 15) | 0xF);
      if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9)))
        return;
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x400AuLL);
      goto LABEL_337;
    case 0x9E:
      v282 = *((_DWORD *)a2 + 18);
      if (v282 - 6 < 6)
      {
        if (*(_BYTE *)(a3 + 8))
          return;
        if (*(_QWORD *)a3 != 16388)
        {
          v283 = *(_QWORD *)a3;
          while (1)
          {
            v284 = v283 & 0x3FFF;
            if (v284 == 1)
              break;
            if (v284 == 2)
              v285 = 16385;
            else
              v285 = 16387;
            if ((v283 & 0x4000) != 0)
              v283 = v285;
            else
              v283 = v284 | 0x4000u;
            if (v284 == 40)
              v283 = 16385;
            if (v284 == 3)
              v283 = 16385;
            if (v283 == 16388)
              goto LABEL_175;
          }
          LOWORD(v362) = 16388;
          do
          {
            v363 = v362 & 0x3FFF;
            if (v363 == 1)
              goto LABEL_3190;
            if (v363 == 2)
              v364 = 16385;
            else
              v364 = 16387;
            if (v363 == 3)
              v362 = 16385;
            else
              v362 = v364;
          }
          while (v362 != *(_QWORD *)a3);
        }
LABEL_175:
        v63 = 1;
LABEL_3191:
        *(_BYTE *)(a3 + 8) = v63;
        return;
      }
      if (*((_DWORD *)a2 + 18) > 0xBu)
      {
        if (v282 == 25)
        {
LABEL_4465:
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4027uLL);
          if ((v282 & 0x40000000) != 0)
            goto LABEL_4490;
          v76 = &v1273;
          goto LABEL_3858;
        }
        if (v282 - 12 < 2)
        {
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4027uLL);
          v76 = &v1274;
          goto LABEL_3858;
        }
      }
      else
      {
        if (v282 == 5)
          return;
        if (v282 == 3)
          goto LABEL_2917;
      }
      v1246 = JSC::DFG::toTypedArrayType(v282);
      if (v1246 == 12 || !v1246)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
        __break(0xC471u);
        JUMPOUT(0x19839C274);
      }
      goto LABEL_4465;
    case 0x9F:
      v1220 = *((_DWORD *)a2 + 18);
      if (v1220 != 25)
      {
        v1247 = JSC::DFG::toTypedArrayType(v1220);
        if (v1247 == 12 || !v1247)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x19839C2DCLL);
        }
      }
      if ((v1220 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x19839BB44);
      }
      return;
    case 0xA0:
      v1221 = *((_DWORD *)a2 + 18);
      if (v1221 == 25)
        goto LABEL_4602;
      v1248 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
      if (v1248 == 12 || !v1248)
      {
        if (v1221 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x19839C340);
        }
        goto LABEL_2917;
      }
      if (v1221 == 3)
        goto LABEL_2917;
LABEL_4602:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4027uLL);
      if ((v1221 & 0x40000000) != 0)
        goto LABEL_4490;
      v76 = &v1272;
      goto LABEL_3858;
    case 0xA1:
      if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x19839C1C8);
      }
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4005uLL);
      v76 = &v1271;
      goto LABEL_3858;
    case 0xA2:
      v1222 = *((unsigned __int8 *)a2 + 72);
      if (v1222 == 25)
        goto LABEL_4608;
      v1249 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
      if (v1249 == 12 || !v1249)
      {
        if (v1222 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x19839C3A4);
        }
        goto LABEL_2917;
      }
      if (v1222 == 3)
        goto LABEL_2917;
LABEL_4608:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4027uLL);
      if (*((_WORD *)a2 + 9) == 146)
        v1223 = *((_DWORD *)a2 + 20);
      else
        v1223 = *((_DWORD *)a2 + 18);
      if ((v1223 & 0x40000000) == 0)
      {
        v76 = &v1281;
        goto LABEL_3858;
      }
      goto LABEL_4490;
    case 0xA3:
      v1224 = *((unsigned __int8 *)a2 + 72);
      if (v1224 == 25)
        goto LABEL_4614;
      v1250 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
      if (v1250 != 12 && v1250)
      {
        if (v1224 != 3)
        {
LABEL_4614:
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4027uLL);
          if (*((_WORD *)a2 + 9) == 146)
            v1225 = *((_DWORD *)a2 + 20);
          else
            v1225 = *((_DWORD *)a2 + 18);
          if ((v1225 & 0x40000000) != 0)
          {
LABEL_4490:
            v122 = a4;
LABEL_4491:
            v121 = 16423;
LABEL_403:
            JSC::DFG::AbstractHeapOverlaps::operator()(v122, v121);
            return;
          }
          v76 = &v1280;
LABEL_3858:
          JSC::DFG::LazyNode::LazyNode(v76, a2);
          return;
        }
      }
      else if (v1224 != 3)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
        __break(0xC471u);
        JUMPOUT(0x19839C408);
      }
LABEL_2917:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4028uLL);
      return;
    case 0xAA:
    case 0x129:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4001uLL);
      return;
    case 0xAB:
      v119 = *((unsigned int *)a2 + 18);
      v120 = 21;
      goto LABEL_401;
    case 0xAC:
      v148 = *((unsigned int *)a2 + 18);
      v149 = 21;
      goto LABEL_502;
    case 0xAD:
    case 0xAE:
      v119 = *((_QWORD *)a2 + 9);
      v120 = 36;
      goto LABEL_401;
    case 0xAF:
      v148 = *((_QWORD *)a2 + 9);
      v149 = 36;
      goto LABEL_502;
    case 0xB2:
      if (*(_BYTE *)(a4 + 8))
        return;
      v991 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16422)
        goto LABEL_23;
      v992 = *(_QWORD *)a4;
      while (1)
      {
        v993 = v992 & 0x3FFF;
        if (v993 == 1)
          break;
        if (v993 == 2)
          v994 = 16385;
        else
          v994 = 16387;
        if ((v992 & 0x4000) != 0)
          v992 = v994;
        else
          v992 = v993 | 0x4000u;
        if (v993 == 40)
          v992 = 16385;
        if (v993 == 3)
          v992 = 16385;
        if (v992 == 16422)
          goto LABEL_23;
      }
      LOWORD(v1008) = 16422;
      while (1)
      {
        v1009 = v1008 & 0x3FFF;
        if (v1009 == 1)
          break;
        if (v1009 == 2)
          v1010 = 16385;
        else
          v1010 = 16387;
        if (v1009 == 40)
          v1010 = 16385;
        if (v1009 == 3)
          v1008 = 16385;
        else
          v1008 = v1010;
        if (v1008 == v991)
          goto LABEL_23;
      }
      if (v991 == 16424)
        goto LABEL_23;
      v1014 = *(_QWORD *)a4;
      while (1)
      {
        v1015 = v1014 & 0x3FFF;
        if (v1015 == 1)
          break;
        if (v1015 == 2)
          v1016 = 16385;
        else
          v1016 = 16387;
        if ((v1014 & 0x4000) != 0)
          v1014 = v1016;
        else
          v1014 = v1015 | 0x4000u;
        if (v1015 == 40)
          v1014 = 16385;
        if (v1015 == 3)
          v1014 = 16385;
        if (v1014 == 16424)
          goto LABEL_23;
      }
      LOWORD(v1020) = 16424;
      do
      {
        v1021 = v1020 & 0x3FFF;
        switch(v1021)
        {
          case 1:
            goto LABEL_4452;
          case 2:
            v1022 = 16385;
            break;
          case 40:
            v1022 = 16385;
            break;
          default:
            v1022 = 16387;
            break;
        }
        if (v1021 == 3)
          v1020 = 16385;
        else
          v1020 = v1022;
      }
      while (v1020 != v991);
      goto LABEL_23;
    case 0xB3:
      if (*(_BYTE *)(a3 + 8))
        return;
      if (*(_QWORD *)a3 == 16398)
        goto LABEL_175;
      v330 = *(_QWORD *)a3;
      while (1)
      {
        v331 = v330 & 0x3FFF;
        if (v331 == 1)
          break;
        if (v331 == 2)
          v332 = 16385;
        else
          v332 = 16387;
        if ((v330 & 0x4000) != 0)
          v330 = v332;
        else
          v330 = v331 | 0x4000u;
        if (v331 == 40)
          v330 = 16385;
        if (v331 == 3)
          v330 = 16385;
        if (v330 == 16398)
          goto LABEL_175;
      }
      LOWORD(v345) = 16398;
      while (1)
      {
        v346 = v345 & 0x3FFF;
        if (v346 == 1)
          goto LABEL_3190;
        if (v346 == 2)
          v347 = 16385;
        else
          v347 = 16387;
        if (v346 == 3)
          v345 = 16385;
        else
          v345 = v347;
        if (v345 == *(_QWORD *)a3)
          goto LABEL_175;
      }
    case 0xB4:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x400EuLL);
      JSC::DFG::LazyNode::LazyNode(&v1270, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0xB5:
      goto LABEL_4511;
    case 0xB8:
    case 0xBA:
    case 0x101:
    case 0x102:
      goto LABEL_2917;
    case 0xBE:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400BuLL);
      v76 = &v1283;
      goto LABEL_3858;
    case 0xC1:
      v667 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v667 != 21 && (_DWORD)v667 != 49 && (_DWORD)v667 != 1)
        goto LABEL_821;
      v668 = *((_QWORD *)a2 + 4);
      if ((v668 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
LABEL_2439:
      v317 = v668 & 0xFC000000000000;
      v318 = 0x4000000000000;
LABEL_1120:
      if (v317 != v318)
        goto LABEL_821;
      return;
    case 0xC2:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 > 2)
        goto LABEL_821;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400AuLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400CuLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400FuLL);
      v76 = &v1279;
      goto LABEL_3858;
    case 0xC4:
      v692 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (!(_DWORD)v692)
        goto LABEL_821;
      if ((_DWORD)v692 != 11)
      {
        __break(0xC471u);
        JUMPOUT(0x19839BE20);
      }
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_3406;
      if (*(_QWORD *)a3 == 16407)
        goto LABEL_2554;
      v693 = *(_QWORD *)a3;
      while (1)
      {
        v694 = v693 & 0x3FFF;
        if (v694 == 1)
          break;
        if (v694 == 2)
          v695 = 16385;
        else
          v695 = 16387;
        if ((v693 & 0x4000) != 0)
          v693 = v695;
        else
          v693 = v694 | 0x4000u;
        if (v694 == 40)
          v693 = 16385;
        if (v694 == 3)
          v693 = 16385;
        if (v693 == 16407)
        {
LABEL_2554:
          v696 = 1;
          goto LABEL_3405;
        }
      }
      LOWORD(v894) = 16407;
      while (1)
      {
        v895 = v894 & 0x3FFF;
        if (v895 == 1)
          break;
        if (v895 == 2)
          v896 = 16385;
        else
          v896 = 16387;
        if (v895 == 3)
          v894 = 16385;
        else
          v894 = v896;
        if (v894 == *(_QWORD *)a3)
          goto LABEL_2554;
      }
      v696 = 0;
LABEL_3405:
      *(_BYTE *)(a3 + 8) = v696;
LABEL_3406:
      if (*(_BYTE *)(a4 + 8))
        return;
      v929 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_23;
      v930 = *(_QWORD *)a4;
      while (1)
      {
        v931 = v930 & 0x3FFF;
        if (v931 == 1)
          break;
        if (v931 == 2)
          v932 = 16385;
        else
          v932 = 16387;
        if ((v930 & 0x4000) != 0)
          v930 = v932;
        else
          v930 = v931 | 0x4000u;
        if (v931 == 40)
          v930 = 16385;
        if (v931 == 3)
          v930 = 16385;
        if (v930 == 16407)
          goto LABEL_23;
      }
      LOWORD(v933) = 16407;
      while (1)
      {
        v934 = v933 & 0x3FFF;
        if (v934 == 1)
          break;
        if (v934 == 2)
          v935 = 16385;
        else
          v935 = 16387;
        if (v934 == 3)
          v933 = 16385;
        else
          v933 = v935;
        if (v933 == v929)
          goto LABEL_23;
      }
      if (v929 == 16394)
        goto LABEL_23;
      v936 = *(_QWORD *)a4;
      while (1)
      {
        v937 = v936 & 0x3FFF;
        if (v937 == 1)
          break;
        if (v937 == 2)
          v938 = 16385;
        else
          v938 = 16387;
        if ((v936 & 0x4000) != 0)
          v936 = v938;
        else
          v936 = v937 | 0x4000u;
        if (v937 == 40)
          v936 = 16385;
        if (v937 == 3)
          v936 = 16385;
        if (v936 == 16394)
          goto LABEL_23;
      }
      LOWORD(v952) = 16394;
      while (1)
      {
        v953 = v952 & 0x3FFF;
        if (v953 == 1)
          goto LABEL_3738;
        if (v953 == 2)
          v954 = 16385;
        else
          v954 = 16387;
        if (v953 == 3)
          v952 = 16385;
        else
          v952 = v954;
        if (v952 == v929)
          goto LABEL_23;
      }
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      v1181 = v14 - 202;
      if (v1181 >= 0xA || ((0x3EFu >> v1181) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19839C168);
      }
      v1182 = dword_1991556C8[(__int16)v1181];
      v1183 = (_DWORD *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v1239 = v1182 + *v1183;
        if (*((_DWORD *)this + 41) <= v1239)
        {
          __break(0xC471u);
          JUMPOUT(0x19839C410);
        }
        v1184 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v1239);
      }
      else
      {
        v1184 = &v1183[2 * v1182];
      }
      if ((*v1184 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_821;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4016uLL);
      v1185 = a3;
      goto LABEL_4462;
    case 0xCE:
      v1202 = (uint64_t *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v1245 = *v1202;
        if (*((_DWORD *)this + 41) <= v1245)
        {
          __break(0xC471u);
          JUMPOUT(0x19839C474);
        }
        v1202 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v1245);
      }
      v668 = *v1202;
      goto LABEL_2439;
    case 0xD6:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4027uLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4009uLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400AuLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400CuLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4004uLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4011uLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4010uLL);
      v1063 = a3;
      v1064 = 16402;
      goto LABEL_3976;
    case 0xD7:
      if (!*(_BYTE *)(a3 + 8))
      {
        v607 = *(_QWORD *)a3;
        if (*(_QWORD *)a3 == 16423)
          goto LABEL_2262;
        v608 = *(_QWORD *)a3;
        while (1)
        {
          v609 = v608 & 0x3FFF;
          if (v609 == 1)
            break;
          if (v609 == 2)
            v610 = 16385;
          else
            v610 = 16387;
          if ((v608 & 0x4000) != 0)
            v608 = v610;
          else
            v608 = v609 | 0x4000u;
          if (v609 == 40)
            v608 = 16385;
          if (v609 == 3)
            v608 = 16385;
          if (v608 == 16423)
            goto LABEL_2262;
        }
        LOWORD(v616) = 16423;
        while (1)
        {
          v617 = v616 & 0x3FFF;
          if (v617 == 1)
            break;
          if (v617 == 2)
            v618 = 16385;
          else
            v618 = 16387;
          if (v617 == 40)
            v618 = 16385;
          if (v617 == 3)
            v616 = 16385;
          else
            v616 = v618;
          if (v616 == v607)
            goto LABEL_2262;
        }
        *(_BYTE *)(a3 + 8) = 0;
        if (v607 == 16393)
          goto LABEL_2262;
        LOWORD(v625) = v607;
        while (1)
        {
          v626 = v625 & 0x3FFF;
          if (v626 == 1)
            break;
          if (v626 == 2)
            v627 = 16385;
          else
            v627 = 16387;
          if ((v625 & 0x4000) != 0)
            v625 = v627;
          else
            v625 = v626 | 0x4000u;
          if (v626 == 40)
            v625 = 16385;
          if (v626 == 3)
            v625 = 16385;
          if (v625 == 16393)
            goto LABEL_2262;
        }
        LOWORD(v655) = 16393;
        while (1)
        {
          v656 = v655 & 0x3FFF;
          if (v656 == 1)
            break;
          if (v656 == 2)
            v657 = 16385;
          else
            v657 = 16387;
          if (v656 == 3)
            v655 = 16385;
          else
            v655 = v657;
          if (v655 == v607)
            goto LABEL_2262;
        }
        if (v607 == 16394)
          goto LABEL_2262;
        LOWORD(v661) = v607;
        while (1)
        {
          v662 = v661 & 0x3FFF;
          if (v662 == 1)
            break;
          if (v662 == 2)
            v663 = 16385;
          else
            v663 = 16387;
          if ((v661 & 0x4000) != 0)
            v661 = v663;
          else
            v661 = v662 | 0x4000u;
          if (v662 == 40)
            v661 = 16385;
          if (v662 == 3)
            v661 = 16385;
          if (v661 == 16394)
            goto LABEL_2262;
        }
        LOWORD(v669) = 16394;
        while (1)
        {
          v670 = v669 & 0x3FFF;
          if (v670 == 1)
            break;
          if (v670 == 2)
            v671 = 16385;
          else
            v671 = 16387;
          if (v670 == 3)
            v669 = 16385;
          else
            v669 = v671;
          if (v669 == v607)
            goto LABEL_2262;
        }
        *(_BYTE *)(a3 + 8) = 0;
        if (*(_QWORD *)a3 == 16396)
          goto LABEL_2262;
        v675 = *(_QWORD *)a3;
        while (1)
        {
          v676 = v675 & 0x3FFF;
          if (v676 == 1)
            break;
          if (v676 == 2)
            v677 = 16385;
          else
            v677 = 16387;
          if ((v675 & 0x4000) != 0)
            v675 = v677;
          else
            v675 = v676 | 0x4000u;
          if (v676 == 40)
            v675 = 16385;
          if (v676 == 3)
            v675 = 16385;
          if (v675 == 16396)
            goto LABEL_2262;
        }
        LOWORD(v689) = 16396;
        while (1)
        {
          v690 = v689 & 0x3FFF;
          if (v690 == 1)
            break;
          if (v690 == 2)
            v691 = 16385;
          else
            v691 = 16387;
          if (v690 == 3)
            v689 = 16385;
          else
            v689 = v691;
          if (v689 == *(_QWORD *)a3)
            goto LABEL_2262;
        }
        if (*(_QWORD *)a3 == 16388)
        {
LABEL_2262:
          v611 = 1;
        }
        else
        {
          v697 = *(_QWORD *)a3;
          while (1)
          {
            v698 = v697 & 0x3FFF;
            if (v698 == 1)
              break;
            if (v698 == 2)
              v699 = 16385;
            else
              v699 = 16387;
            if ((v697 & 0x4000) != 0)
              v697 = v699;
            else
              v697 = v698 | 0x4000u;
            if (v698 == 40)
              v697 = 16385;
            if (v698 == 3)
              v697 = 16385;
            if (v697 == 16388)
              goto LABEL_2262;
          }
          LOWORD(v703) = 16388;
          while (1)
          {
            v704 = v703 & 0x3FFF;
            if (v704 == 1)
              break;
            if (v704 == 2)
              v705 = 16385;
            else
              v705 = 16387;
            if (v704 == 3)
              v703 = 16385;
            else
              v703 = v705;
            if (v703 == *(_QWORD *)a3)
              goto LABEL_2262;
          }
          v611 = 0;
        }
        *(_BYTE *)(a3 + 8) = v611;
        goto LABEL_2592;
      }
      v611 = 1;
LABEL_2592:
      v706 = *((unsigned __int8 *)a2 + 72);
      if (v706 != 9)
      {
        if (v706 == 7)
        {
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4010uLL);
        }
        else
        {
          if (v706 != 8)
          {
            __break(0xC471u);
            JUMPOUT(0x19839BE00);
          }
          JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4011uLL);
        }
        return;
      }
      if (v611)
        return;
      if (*(_QWORD *)a3 == 16402)
        goto LABEL_175;
      v707 = *(_QWORD *)a3;
      while (1)
      {
        v708 = v707 & 0x3FFF;
        if (v708 == 1)
          break;
        if (v708 == 2)
          v709 = 16385;
        else
          v709 = 16387;
        if ((v707 & 0x4000) != 0)
          v707 = v709;
        else
          v707 = v708 | 0x4000u;
        if (v708 == 40)
          v707 = 16385;
        if (v708 == 3)
          v707 = 16385;
        if (v707 == 16402)
          goto LABEL_175;
      }
      LOWORD(v710) = 16402;
      while (1)
      {
        v711 = v710 & 0x3FFF;
        if (v711 == 1)
          goto LABEL_3190;
        if (v711 == 2)
          v712 = 16385;
        else
          v712 = 16387;
        if (v711 == 3)
          v710 = 16385;
        else
          v710 = v712;
        if (v710 == *(_QWORD *)a3)
          goto LABEL_175;
      }
    case 0xDA:
    case 0xDE:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4018uLL);
LABEL_4511:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4018uLL);
      return;
    case 0xDD:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_2196;
      v549 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16408)
        goto LABEL_2027;
      v550 = *(_QWORD *)a3;
      while (1)
      {
        v551 = v550 & 0x3FFF;
        if (v551 == 1)
          break;
        if (v551 == 2)
          v552 = 16385;
        else
          v552 = 16387;
        if ((v550 & 0x4000) != 0)
          v550 = v552;
        else
          v550 = v551 | 0x4000u;
        if (v551 == 40)
          v550 = 16385;
        if (v551 == 3)
          v550 = 16385;
        if (v550 == 16408)
          goto LABEL_2027;
      }
      LOWORD(v569) = 16408;
      while (1)
      {
        v570 = v569 & 0x3FFF;
        if (v570 == 1)
          break;
        if (v570 == 2)
          v571 = 16385;
        else
          v571 = 16387;
        if (v570 == 3)
          v569 = 16385;
        else
          v569 = v571;
        if (v569 == v549)
          goto LABEL_2027;
      }
      if (v549 == 16398)
      {
LABEL_2027:
        v553 = 1;
      }
      else
      {
        v578 = *(_QWORD *)a3;
        while (1)
        {
          v579 = v578 & 0x3FFF;
          if (v579 == 1)
            break;
          if (v579 == 2)
            v580 = 16385;
          else
            v580 = 16387;
          if ((v578 & 0x4000) != 0)
            v578 = v580;
          else
            v578 = v579 | 0x4000u;
          if (v579 == 40)
            v578 = 16385;
          if (v579 == 3)
            v578 = 16385;
          if (v578 == 16398)
            goto LABEL_2027;
        }
        LOWORD(v591) = 16398;
        while (1)
        {
          v592 = v591 & 0x3FFF;
          if (v592 == 1)
            break;
          if (v592 == 2)
            v593 = 16385;
          else
            v593 = 16387;
          if (v592 == 3)
            v591 = 16385;
          else
            v591 = v593;
          if (v591 == v549)
            goto LABEL_2027;
        }
        v553 = 0;
      }
      *(_BYTE *)(a3 + 8) = v553;
LABEL_2196:
      if (*(_BYTE *)(a4 + 8))
        return;
      v594 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16408)
        goto LABEL_23;
      v595 = *(_QWORD *)a4;
      while (1)
      {
        v596 = v595 & 0x3FFF;
        if (v596 == 1)
          break;
        if (v596 == 2)
          v597 = 16385;
        else
          v597 = 16387;
        if ((v595 & 0x4000) != 0)
          v595 = v597;
        else
          v595 = v596 | 0x4000u;
        if (v596 == 40)
          v595 = 16385;
        if (v596 == 3)
          v595 = 16385;
        if (v595 == 16408)
          goto LABEL_23;
      }
      LOWORD(v598) = 16408;
      while (1)
      {
        v599 = v598 & 0x3FFF;
        if (v599 == 1)
          break;
        if (v599 == 2)
          v600 = 16385;
        else
          v600 = 16387;
        if (v599 == 3)
          v598 = 16385;
        else
          v598 = v600;
        if (v598 == v594)
          goto LABEL_23;
      }
      if (v594 == 16398)
        goto LABEL_23;
      v601 = *(_QWORD *)a4;
      while (1)
      {
        v602 = v601 & 0x3FFF;
        if (v602 == 1)
          break;
        if (v602 == 2)
          v603 = 16385;
        else
          v603 = 16387;
        if ((v601 & 0x4000) != 0)
          v601 = v603;
        else
          v601 = v602 | 0x4000u;
        if (v602 == 40)
          v601 = 16385;
        if (v602 == 3)
          v601 = 16385;
        if (v601 == 16398)
          goto LABEL_23;
      }
      LOWORD(v604) = 16398;
      while (1)
      {
        v605 = v604 & 0x3FFF;
        if (v605 == 1)
          goto LABEL_3738;
        if (v605 == 2)
          v606 = 16385;
        else
          v606 = 16387;
        if (v605 == 3)
          v604 = 16385;
        else
          v604 = v606;
        if (v604 == v594)
          goto LABEL_23;
      }
    case 0xDF:
    case 0xE0:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000
        || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x40000000000000
        || (*((_QWORD *)a2 + 5) & 0xFC000000000000) != 0x54000000000000)
      {
        goto LABEL_821;
      }
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_1869;
      v372 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16408)
        goto LABEL_1355;
      v373 = *(_QWORD *)a3;
      while (1)
      {
        v374 = v373 & 0x3FFF;
        if (v374 == 1)
          break;
        if (v374 == 2)
          v375 = 16385;
        else
          v375 = 16387;
        if ((v373 & 0x4000) != 0)
          v373 = v375;
        else
          v373 = v374 | 0x4000u;
        if (v374 == 40)
          v373 = 16385;
        if (v374 == 3)
          v373 = 16385;
        if (v373 == 16408)
          goto LABEL_1355;
      }
      LOWORD(v488) = 16408;
      while (1)
      {
        v489 = v488 & 0x3FFF;
        if (v489 == 1)
          break;
        if (v489 == 2)
          v490 = 16385;
        else
          v490 = 16387;
        if (v489 == 3)
          v488 = 16385;
        else
          v488 = v490;
        if (v488 == v372)
          goto LABEL_1355;
      }
      if (v372 == 16398)
      {
LABEL_1355:
        v376 = 1;
      }
      else
      {
        v496 = *(_QWORD *)a3;
        while (1)
        {
          v497 = v496 & 0x3FFF;
          if (v497 == 1)
            break;
          if (v497 == 2)
            v498 = 16385;
          else
            v498 = 16387;
          if ((v496 & 0x4000) != 0)
            v496 = v498;
          else
            v496 = v497 | 0x4000u;
          if (v497 == 40)
            v496 = 16385;
          if (v497 == 3)
            v496 = 16385;
          if (v496 == 16398)
            goto LABEL_1355;
        }
        LOWORD(v504) = 16398;
        while (1)
        {
          v505 = v504 & 0x3FFF;
          if (v505 == 1)
            break;
          if (v505 == 2)
            v506 = 16385;
          else
            v506 = 16387;
          if (v505 == 3)
            v504 = 16385;
          else
            v504 = v506;
          if (v504 == v372)
            goto LABEL_1355;
        }
        v376 = 0;
      }
      *(_BYTE *)(a3 + 8) = v376;
LABEL_1869:
      if (*(_BYTE *)(a4 + 8))
        return;
      v513 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16408)
        goto LABEL_23;
      v514 = *(_QWORD *)a4;
      while (1)
      {
        v515 = v514 & 0x3FFF;
        if (v515 == 1)
          break;
        if (v515 == 2)
          v516 = 16385;
        else
          v516 = 16387;
        if ((v514 & 0x4000) != 0)
          v514 = v516;
        else
          v514 = v515 | 0x4000u;
        if (v515 == 40)
          v514 = 16385;
        if (v515 == 3)
          v514 = 16385;
        if (v514 == 16408)
          goto LABEL_23;
      }
      LOWORD(v517) = 16408;
      while (1)
      {
        v518 = v517 & 0x3FFF;
        if (v518 == 1)
          break;
        if (v518 == 2)
          v519 = 16385;
        else
          v519 = 16387;
        if (v518 == 3)
          v517 = 16385;
        else
          v517 = v519;
        if (v517 == v513)
          goto LABEL_23;
      }
      if (v513 == 16398)
        goto LABEL_23;
      v520 = *(_QWORD *)a4;
      while (1)
      {
        v521 = v520 & 0x3FFF;
        if (v521 == 1)
          break;
        if (v521 == 2)
          v522 = 16385;
        else
          v522 = 16387;
        if ((v520 & 0x4000) != 0)
          v520 = v522;
        else
          v520 = v521 | 0x4000u;
        if (v521 == 40)
          v520 = 16385;
        if (v521 == 3)
          v520 = 16385;
        if (v520 == 16398)
          goto LABEL_23;
      }
      LOWORD(v523) = 16398;
      while (1)
      {
        v524 = v523 & 0x3FFF;
        if (v524 == 1)
          goto LABEL_3738;
        if (v524 == 2)
          v525 = 16385;
        else
          v525 = 16387;
        if (v524 == 3)
          v523 = 16385;
        else
          v523 = v525;
        if (v523 == v513)
          goto LABEL_23;
      }
    case 0xE1:
      v317 = *((_QWORD *)a2 + 5) & 0xFC000000000000;
      v318 = 0x54000000000000;
      goto LABEL_1120;
    case 0xE6:
      v998 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((v998 - 1) < 2)
        return;
      if ((_DWORD)v998)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198399CFCLL);
      }
      goto LABEL_821;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v207 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v207 != 21)
      {
        if ((_DWORD)v207 || (*((_BYTE *)a2 + 38) & 0xFC) != 0)
          return;
        goto LABEL_821;
      }
      if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x54000000000000)
        return;
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_3334;
      if (*(_QWORD *)a3 == 16407)
        goto LABEL_1639;
      v444 = *(_QWORD *)a3;
      while (1)
      {
        v445 = v444 & 0x3FFF;
        if (v445 == 1)
          break;
        if (v445 == 2)
          v446 = 16385;
        else
          v446 = 16387;
        if ((v444 & 0x4000) != 0)
          v444 = v446;
        else
          v444 = v445 | 0x4000u;
        if (v445 == 40)
          v444 = 16385;
        if (v445 == 3)
          v444 = 16385;
        if (v444 == 16407)
        {
LABEL_1639:
          v447 = 1;
          goto LABEL_3333;
        }
      }
      LOWORD(v888) = 16407;
      while (1)
      {
        v889 = v888 & 0x3FFF;
        if (v889 == 1)
          break;
        if (v889 == 2)
          v890 = 16385;
        else
          v890 = 16387;
        if (v889 == 3)
          v888 = 16385;
        else
          v888 = v890;
        if (v888 == *(_QWORD *)a3)
          goto LABEL_1639;
      }
      v447 = 0;
LABEL_3333:
      *(_BYTE *)(a3 + 8) = v447;
LABEL_3334:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 != 16407)
      {
        v913 = *(_QWORD *)a4;
        while (1)
        {
          v914 = v913 & 0x3FFF;
          if (v914 == 1)
            break;
          if (v914 == 2)
            v915 = 16385;
          else
            v915 = 16387;
          if ((v913 & 0x4000) != 0)
            v913 = v915;
          else
            v913 = v914 | 0x4000u;
          if (v914 == 40)
            v913 = 16385;
          if (v914 == 3)
            v913 = 16385;
          if (v913 == 16407)
            goto LABEL_23;
        }
        LOWORD(v916) = 16407;
        do
        {
          v917 = v916 & 0x3FFF;
          if (v917 == 1)
            goto LABEL_3738;
          if (v917 == 2)
            v918 = 16385;
          else
            v918 = 16387;
          if (v917 == 3)
            v916 = 16385;
          else
            v916 = v918;
        }
        while (v916 != *(_QWORD *)a4);
      }
      goto LABEL_23;
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x116:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_506;
      if (*(_QWORD *)a3 == 16407)
        goto LABEL_476;
      v138 = *(_QWORD *)a3;
      while (1)
      {
        v139 = v138 & 0x3FFF;
        if (v139 == 1)
          break;
        if (v139 == 2)
          v140 = 16385;
        else
          v140 = 16387;
        if ((v138 & 0x4000) != 0)
          v138 = v140;
        else
          v138 = v139 | 0x4000u;
        if (v139 == 40)
          v138 = 16385;
        if (v139 == 3)
          v138 = 16385;
        if (v138 == 16407)
        {
LABEL_476:
          v141 = 1;
          goto LABEL_505;
        }
      }
      LOWORD(v145) = 16407;
      while (1)
      {
        v146 = v145 & 0x3FFF;
        if (v146 == 1)
          break;
        if (v146 == 2)
          v147 = 16385;
        else
          v147 = 16387;
        if (v146 == 3)
          v145 = 16385;
        else
          v145 = v147;
        if (v145 == *(_QWORD *)a3)
          goto LABEL_476;
      }
      v141 = 0;
LABEL_505:
      *(_BYTE *)(a3 + 8) = v141;
LABEL_506:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_23;
      v150 = *(_QWORD *)a4;
      while (1)
      {
        v151 = v150 & 0x3FFF;
        if (v151 == 1)
          break;
        if (v151 == 2)
          v152 = 16385;
        else
          v152 = 16387;
        if ((v150 & 0x4000) != 0)
          v150 = v152;
        else
          v150 = v151 | 0x4000u;
        if (v151 == 40)
          v150 = 16385;
        if (v151 == 3)
          v150 = 16385;
        if (v150 == 16407)
          goto LABEL_23;
      }
      LOWORD(v153) = 16407;
      while (1)
      {
        v154 = v153 & 0x3FFF;
        if (v154 == 1)
          goto LABEL_3738;
        if (v154 == 2)
          v155 = 16385;
        else
          v155 = 16387;
        if (v154 == 3)
          v153 = 16385;
        else
          v153 = v155;
        if (v153 == *(_QWORD *)a4)
          goto LABEL_23;
      }
    case 0x106:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_776;
      if (*(_QWORD *)a3 == 16407)
        goto LABEL_763;
      v216 = *(_QWORD *)a3;
      while (1)
      {
        v217 = v216 & 0x3FFF;
        if (v217 == 1)
          break;
        if (v217 == 2)
          v218 = 16385;
        else
          v218 = 16387;
        if ((v216 & 0x4000) != 0)
          v216 = v218;
        else
          v216 = v217 | 0x4000u;
        if (v217 == 40)
          v216 = 16385;
        if (v217 == 3)
          v216 = 16385;
        if (v216 == 16407)
        {
LABEL_763:
          v219 = 1;
          goto LABEL_775;
        }
      }
      LOWORD(v220) = 16407;
      while (1)
      {
        v221 = v220 & 0x3FFF;
        if (v221 == 1)
          break;
        if (v221 == 2)
          v222 = 16385;
        else
          v222 = 16387;
        if (v221 == 3)
          v220 = 16385;
        else
          v220 = v222;
        if (v220 == *(_QWORD *)a3)
          goto LABEL_763;
      }
      v219 = 0;
LABEL_775:
      *(_BYTE *)(a3 + 8) = v219;
LABEL_776:
      if (!*(_BYTE *)(a4 + 8))
      {
        if (*(_QWORD *)a4 == 16407)
        {
LABEL_791:
          v226 = 1;
        }
        else
        {
          v223 = *(_QWORD *)a4;
          while (1)
          {
            v224 = v223 & 0x3FFF;
            if (v224 == 1)
              break;
            if (v224 == 2)
              v225 = 16385;
            else
              v225 = 16387;
            if ((v223 & 0x4000) != 0)
              v223 = v225;
            else
              v223 = v224 | 0x4000u;
            if (v224 == 40)
              v223 = 16385;
            if (v224 == 3)
              v223 = 16385;
            if (v223 == 16407)
              goto LABEL_791;
          }
          LOWORD(v227) = 16407;
          while (1)
          {
            v228 = v227 & 0x3FFF;
            if (v228 == 1)
              break;
            if (v228 == 2)
              v229 = 16385;
            else
              v229 = 16387;
            if (v228 == 3)
              v227 = 16385;
            else
              v227 = v229;
            if (v227 == *(_QWORD *)a4)
              goto LABEL_791;
          }
          v226 = 0;
        }
        *(_BYTE *)(a4 + 8) = v226;
      }
      v230 = *((_QWORD *)a2 + 4);
      v231 = v230;
      if ((v230 & 0x80000000) != 0)
      {
        JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v230) + 0x2000000000000, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        JSC::DFG::Graph::freeze((uint64_t)this, v230 | 0xFFFE000000000000, a3, a4, a5, a6, a7, a8);
        if (!(_DWORD)v230)
          return;
      }
      v238 = *((unsigned __int16 *)a2 + 9);
      switch(v238)
      {
        case 267:
          goto LABEL_2807;
        case 264:
          LOBYTE(v239) = *((_DWORD *)a2 + 19) & 0xF;
          break;
        case 352:
LABEL_2807:
          LOBYTE(v239) = *((_DWORD *)a2 + 21) & 0xF;
          break;
        default:
          v239 = *((_DWORD *)a2 + 18);
          break;
      }
      if (v239 - 4 < 6
        || v239 <= 0x19u && ((1 << v239) & 0x2A00000) != 0)
      {
        v240 = *((unsigned int *)this + 107);
        if (v230 >= v240)
        {
          if ((_DWORD)v240)
          {
            v479 = (unsigned int *)*((_QWORD *)this + 52);
            v480 = 4 * v240;
            do
            {
              v481 = *v479;
              if (v481 < v230)
              {
                if (*((_DWORD *)this + 41) <= (v481 + *((_DWORD *)a2 + 6)))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19839C1A8);
                }
                if ((v481 & 0x80000000) != 0)
                  v482 = COERCE__INT64((double)v481) + 0x2000000000000;
                else
                  v482 = v481 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v482, v232, v233, v234, v235, v236, v237);
              }
              ++v479;
              v480 -= 4;
            }
            while (v480);
          }
        }
        else
        {
          v241 = 0;
          do
          {
            if (*((_DWORD *)this + 41) <= (v241 + *((_DWORD *)a2 + 6)))
            {
              __break(0xC471u);
              JUMPOUT(0x19839C190);
            }
            if ((v241 & 0x80000000) != 0)
              v242 = COERCE__INT64((double)v241) + 0x2000000000000;
            else
              v242 = v241 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v242, v232, v233, v234, v235, v236, v237);
            ++v241;
          }
          while (v231 != v241);
        }
      }
      return;
    case 0x107:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4017uLL);
      v1123 = *((unsigned int *)a2 + 8);
      if (!*((_DWORD *)a2 + 8))
        goto LABEL_3979;
      v1124 = *((_QWORD *)a2 + 3);
      v1125 = *((_DWORD *)this + 41);
      v1126 = v1125 >= v1124;
      LODWORD(v1127) = v1125 - v1124;
      if (v1126)
        v1127 = v1127;
      else
        v1127 = 0;
      while (1)
      {
        if (!v1127)
        {
          __break(0xC471u);
          JUMPOUT(0x19839C208);
        }
        if (*(_WORD *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v1124) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 350)
          break;
        LODWORD(v1124) = v1124 + 1;
        --v1127;
        if (!--v1123)
          goto LABEL_3979;
      }
LABEL_3209:
      v876 = a3;
      v877 = 16386;
LABEL_3978:
      JSC::DFG::AbstractHeapOverlaps::operator()(v876, v877);
LABEL_3979:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4017uLL);
      return;
    case 0x109:
    case 0x144:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x16B:
      goto LABEL_3977;
    case 0x10A:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4017uLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4017uLL);
      v1232 = *((unsigned int *)a2 + 20);
      if ((v1232 & 0x80000000) != 0)
        v1233 = COERCE__INT64((double)v1232) + 0x2000000000000;
      else
        v1233 = v1232 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v1233, v1226, v1227, v1228, v1229, v1230, v1231);
      return;
    case 0x10B:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_2328;
      if (*(_QWORD *)a3 == 16407)
        goto LABEL_2278;
      v612 = *(_QWORD *)a3;
      while (1)
      {
        v613 = v612 & 0x3FFF;
        if (v613 == 1)
          break;
        if (v613 == 2)
          v614 = 16385;
        else
          v614 = 16387;
        if ((v612 & 0x4000) != 0)
          v612 = v614;
        else
          v612 = v613 | 0x4000u;
        if (v613 == 40)
          v612 = 16385;
        if (v613 == 3)
          v612 = 16385;
        if (v612 == 16407)
        {
LABEL_2278:
          v615 = 1;
          goto LABEL_2327;
        }
      }
      LOWORD(v619) = 16407;
      while (1)
      {
        v620 = v619 & 0x3FFF;
        if (v620 == 1)
          break;
        if (v620 == 2)
          v621 = 16385;
        else
          v621 = 16387;
        if (v620 == 3)
          v619 = 16385;
        else
          v619 = v621;
        if (v619 == *(_QWORD *)a3)
          goto LABEL_2278;
      }
      v615 = 0;
LABEL_2327:
      *(_BYTE *)(a3 + 8) = v615;
LABEL_2328:
      if (!*(_BYTE *)(a4 + 8))
      {
        if (*(_QWORD *)a4 == 16407)
        {
LABEL_2343:
          v631 = 1;
        }
        else
        {
          v628 = *(_QWORD *)a4;
          while (1)
          {
            v629 = v628 & 0x3FFF;
            if (v629 == 1)
              break;
            if (v629 == 2)
              v630 = 16385;
            else
              v630 = 16387;
            if ((v628 & 0x4000) != 0)
              v628 = v630;
            else
              v628 = v629 | 0x4000u;
            if (v629 == 40)
              v628 = 16385;
            if (v629 == 3)
              v628 = 16385;
            if (v628 == 16407)
              goto LABEL_2343;
          }
          LOWORD(v632) = 16407;
          while (1)
          {
            v633 = v632 & 0x3FFF;
            if (v633 == 1)
              break;
            if (v633 == 2)
              v634 = 16385;
            else
              v634 = 16387;
            if (v633 == 3)
              v632 = 16385;
            else
              v632 = v634;
            if (v632 == *(_QWORD *)a4)
              goto LABEL_2343;
          }
          v631 = 0;
        }
        *(_BYTE *)(a4 + 8) = v631;
      }
      v635 = (uint64_t *)*((_QWORD *)a2 + 9);
      v636 = *v635;
      v637 = *(unsigned int *)(*v635 + 8);
      if ((v637 & 0x80000000) != 0)
        v638 = COERCE__INT64((double)v637) + 0x2000000000000;
      else
        v638 = v637 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v638, a3, a4, a5, a6, a7, a8);
      v646 = *((unsigned __int16 *)a2 + 9);
      switch(v646)
      {
        case 267:
          goto LABEL_4159;
        case 264:
          LOBYTE(v647) = *((_DWORD *)a2 + 19) & 0xF;
          break;
        case 352:
LABEL_4159:
          LOBYTE(v647) = *((_DWORD *)a2 + 21) & 0xF;
          break;
        default:
          v647 = *((_DWORD *)a2 + 18);
          break;
      }
      if (v647 - 4 < 6
        || ((v1187 = v647 > 0x19u, v1188 = (1 << v647) & 0x2A00000, !v1187)
          ? (v1189 = v1188 == 0)
          : (v1189 = 1),
            !v1189))
      {
        v648 = *((unsigned int *)this + 107);
        if (v648 > v637)
        {
          if ((_DWORD)v637)
          {
            v770 = 0;
            v771 = v636 + 16;
            do
            {
              if ((v770 & 0x80000000) != 0)
                v772 = COERCE__INT64((double)v770) + 0x2000000000000;
              else
                v772 = v770 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v772, v640, v641, v642, v643, v644, v645);
              if ((*(_BYTE *)(v636 + 4) & 0xE) == 6)
                v779 = *(_QWORD *)(v771 + 8 * v770) + 0x2000000000000;
              else
                v779 = *(_QWORD *)(v771 + 8 * v770);
              JSC::DFG::Graph::freeze((uint64_t)this, v779, v773, v774, v775, v776, v777, v778);
              ++v770;
            }
            while (v637 != v770);
          }
        }
        else
        {
          v1267[0] = 0;
          v1267[1] = 0;
          if ((_DWORD)v648)
          {
            v649 = (unsigned int *)*((_QWORD *)this + 52);
            v650 = 4 * v648;
            do
            {
              v651 = *v649;
              LODWORD(v1251) = v651;
              if (v651 < v637)
              {
                if (HIDWORD(v1267[1]) == LODWORD(v1267[1]))
                {
                  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)v1267, (unint64_t)&v1251);
                }
                else
                {
                  *((_DWORD *)v1267[0] + HIDWORD(v1267[1])) = v651;
                  ++HIDWORD(v1267[1]);
                }
              }
              ++v649;
              v650 -= 4;
            }
            while (v650);
            v839 = v1267[0];
            if (HIDWORD(v1267[1]))
            {
              v840 = v636 + 16;
              v841 = 4 * HIDWORD(v1267[1]);
              do
              {
                v842 = *(unsigned int *)v839;
                if ((v842 & 0x80000000) != 0)
                  v843 = COERCE__INT64((double)v842) + 0x2000000000000;
                else
                  v843 = v842 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v843, v640, v641, v642, v643, v644, v645);
                if ((*(_BYTE *)(v636 + 4) & 0xE) == 6)
                  v850 = *(_QWORD *)(v840 + 8 * v842) + 0x2000000000000;
                else
                  v850 = *(_QWORD *)(v840 + 8 * v842);
                JSC::DFG::Graph::freeze((uint64_t)this, v850, v844, v845, v846, v847, v848, v849);
                v839 = (WTF *)((char *)v839 + 4);
                v841 -= 4;
              }
              while (v841);
              v839 = v1267[0];
            }
            if (v839)
            {
              v1267[0] = 0;
              LODWORD(v1267[1]) = 0;
              WTF::fastFree((unint64_t)v839, v639, v640, v641, v642, v643, v644, v645);
            }
          }
        }
      }
      return;
    case 0x10D:
      v1131 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (!(_DWORD)v1131)
        goto LABEL_821;
      if ((_DWORD)v1131 != 1 && (_DWORD)v1131 != 52)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19839ABF8);
      }
LABEL_3977:
      v876 = a3;
      v877 = 16407;
      goto LABEL_3978;
    case 0x10F:
      v1235 = *((_QWORD *)a2 + 3);
      if ((v1235 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v1235 & 0xFC000000000000) == 0x54000000000000)
        goto LABEL_3977;
      goto LABEL_821;
    case 0x114:
      if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, a3, a4, a5, a6, a7, a8) & 1) == 0)
        goto LABEL_821;
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_2046;
      v491 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16386)
        goto LABEL_1800;
      v492 = *(_QWORD *)a3;
      while (1)
      {
        v493 = v492 & 0x3FFF;
        if (v493 == 1)
          break;
        if (v493 == 2)
          v494 = 16385;
        else
          v494 = 16387;
        if ((v492 & 0x4000) != 0)
          v492 = v494;
        else
          v492 = v493 | 0x4000u;
        if (v493 == 40)
          v492 = 16385;
        if (v493 == 3)
          v492 = 16385;
        if (v492 == 16386)
          goto LABEL_1800;
      }
      LOWORD(v507) = 16386;
      while (1)
      {
        v508 = v507 & 0x3FFF;
        if (v508 == 1)
          break;
        if (v508 == 2)
          v509 = 16385;
        else
          v509 = 16387;
        if (v508 == 3)
          v507 = 16385;
        else
          v507 = v509;
        if (v507 == v491)
          goto LABEL_1800;
      }
      if (v491 == 16407)
      {
LABEL_1800:
        v495 = 1;
      }
      else
      {
        v526 = *(_QWORD *)a3;
        while (1)
        {
          v527 = v526 & 0x3FFF;
          if (v527 == 1)
            break;
          if (v527 == 2)
            v528 = 16385;
          else
            v528 = 16387;
          if ((v526 & 0x4000) != 0)
            v526 = v528;
          else
            v526 = v527 | 0x4000u;
          if (v527 == 40)
            v526 = 16385;
          if (v527 == 3)
            v526 = 16385;
          if (v526 == 16407)
            goto LABEL_1800;
        }
        LOWORD(v532) = 16407;
        while (1)
        {
          v533 = v532 & 0x3FFF;
          if (v533 == 1)
            break;
          if (v533 == 2)
            v534 = 16385;
          else
            v534 = 16387;
          if (v533 == 3)
            v532 = 16385;
          else
            v532 = v534;
          if (v532 == v491)
            goto LABEL_1800;
        }
        v495 = 0;
      }
      *(_BYTE *)(a3 + 8) = v495;
LABEL_2046:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_23;
      v557 = *(_QWORD *)a4;
      while (1)
      {
        v558 = v557 & 0x3FFF;
        if (v558 == 1)
          break;
        if (v558 == 2)
          v559 = 16385;
        else
          v559 = 16387;
        if ((v557 & 0x4000) != 0)
          v557 = v559;
        else
          v557 = v558 | 0x4000u;
        if (v558 == 40)
          v557 = 16385;
        if (v558 == 3)
          v557 = 16385;
        if (v557 == 16407)
          goto LABEL_23;
      }
      LOWORD(v560) = 16407;
      while (1)
      {
        v561 = v560 & 0x3FFF;
        if (v561 == 1)
          goto LABEL_3738;
        if (v561 == 2)
          v562 = 16385;
        else
          v562 = 16387;
        if (v561 == 3)
          v560 = 16385;
        else
          v560 = v562;
        if (v560 == *(_QWORD *)a4)
          goto LABEL_23;
      }
    case 0x115:
      v875 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v875 == 352)
      {
LABEL_4515:
        v122 = a3;
        goto LABEL_4491;
      }
      if (v875 != 349)
        goto LABEL_821;
      goto LABEL_3209;
    case 0x123:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400BuLL);
      v76 = &v1282;
      goto LABEL_3858;
    case 0x126:
      goto LABEL_4507;
    case 0x12B:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4027uLL);
      v76 = &v1294;
      goto LABEL_3858;
    case 0x12C:
      if (*(_BYTE *)(a3 + 8))
        return;
      if (*(_QWORD *)a3 == 16423)
        goto LABEL_175;
      v359 = *(_QWORD *)a3;
      while (1)
      {
        v360 = v359 & 0x3FFF;
        if (v360 == 1)
          break;
        if (v360 == 2)
          v361 = 16385;
        else
          v361 = 16387;
        if ((v359 & 0x4000) != 0)
          v359 = v361;
        else
          v359 = v360 | 0x4000u;
        if (v360 == 40)
          v359 = 16385;
        if (v360 == 3)
          v359 = 16385;
        if (v359 == 16423)
          goto LABEL_175;
      }
      LOWORD(v377) = 16423;
      while (1)
      {
        v378 = v377 & 0x3FFF;
        switch(v378)
        {
          case 1:
            goto LABEL_3190;
          case 2:
            v379 = 16385;
            break;
          case 40:
            v379 = 16385;
            break;
          default:
            v379 = 16387;
            break;
        }
        if (v378 == 3)
          v377 = 16385;
        else
          v377 = v379;
        if (v377 == *(_QWORD *)a3)
          goto LABEL_175;
      }
    case 0x135:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4027uLL);
      v76 = &v1293;
      goto LABEL_3858;
    case 0x136:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4027uLL);
      v76 = &v1292;
      goto LABEL_3858;
    case 0x13E:
    case 0x145:
      v243 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v243 > 0x34)
        goto LABEL_4546;
      if (((1 << v243) & 0x12026000400002) != 0)
        return;
      if (((1 << v243) & 0x101) != 0)
        goto LABEL_821;
      if (v243 != 24)
      {
LABEL_4546:
        __break(0xC471u);
        JUMPOUT(0x19839B7A4);
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16424)
        goto LABEL_23;
      v964 = *(_QWORD *)a4;
      while (1)
      {
        v965 = v964 & 0x3FFF;
        if (v965 == 1)
          break;
        if (v965 == 2)
          v966 = 16385;
        else
          v966 = 16387;
        if ((v964 & 0x4000) != 0)
          v964 = v966;
        else
          v964 = v965 | 0x4000u;
        if (v965 == 40)
          v964 = 16385;
        if (v965 == 3)
          v964 = 16385;
        if (v964 == 16424)
          goto LABEL_23;
      }
      LOWORD(v976) = 16424;
      while (1)
      {
        v977 = v976 & 0x3FFF;
        switch(v977)
        {
          case 1:
            goto LABEL_3738;
          case 2:
            v978 = 16385;
            break;
          case 40:
            v978 = 16385;
            break;
          default:
            v978 = 16387;
            break;
        }
        if (v977 == 3)
          v976 = 16385;
        else
          v976 = v978;
        if (v976 == *(_QWORD *)a4)
          goto LABEL_23;
      }
    case 0x13F:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x54000000000000)
        return;
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_3138;
      v473 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16385)
        goto LABEL_1733;
      v474 = 1;
      do
      {
        v475 = v473 & 0x3FFF;
        if (v475 == 1)
        {
          v474 = 0;
          goto LABEL_3137;
        }
        if (v475 == 3 || v475 == 40)
          goto LABEL_3137;
        if ((v473 & 0x4000) != 0)
        {
          if (v475 == 2)
            break;
          v473 = 16387;
        }
        else
        {
          v473 = v475 | 0x4000u;
        }
      }
      while (v473 != 16385);
LABEL_1733:
      v474 = 1;
LABEL_3137:
      *(_BYTE *)(a3 + 8) = v474;
LABEL_3138:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_23;
      v857 = *(_QWORD *)a4;
      while (1)
      {
        v858 = v857 & 0x3FFF;
        if (v858 == 1)
        {
          LOWORD(v860) = 16387;
          do
          {
            v861 = v860 & 0x3FFF;
            if (v861 == 1)
              goto LABEL_4452;
            if (v861 == 2)
              v862 = 16385;
            else
              v862 = 16387;
            if (v861 == 3)
              v860 = 16385;
            else
              v860 = v862;
          }
          while (v860 != *(_QWORD *)a4);
          goto LABEL_23;
        }
        if (v858 == 3)
          goto LABEL_3146;
        v859 = 16385;
        if (v858 != 40)
          break;
LABEL_3147:
        LOWORD(v857) = v859;
        if (v859 == 16387)
          goto LABEL_23;
      }
      if ((v857 & 0x4000) == 0)
      {
        v859 = v858 | 0x4000u;
        goto LABEL_3147;
      }
      if (v858 != 2)
        goto LABEL_23;
LABEL_3146:
      v859 = 16385;
      goto LABEL_3147;
    case 0x146:
      v1234 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v1234 == 28)
        return;
      if ((_DWORD)v1234)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x19839BD08);
      }
      goto LABEL_821;
    case 0x157:
      v119 = *((unsigned int *)a2 + 18);
      v120 = 33;
LABEL_401:
      v121 = v120 | (v119 << 15);
      goto LABEL_402;
    case 0x158:
      v148 = *((unsigned int *)a2 + 18);
      v149 = 33;
LABEL_502:
      v121 = v149 | (v148 << 15);
      goto LABEL_503;
    case 0x159:
      v276 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 40);
      if ((v276 & 1) != 0)
        v277 = (v276 >> 1) & 3;
      else
        v277 = *(unsigned __int8 *)(v276 + 4);
      if (v277 == 2 || *(_BYTE *)(a4 + 8))
        goto LABEL_963;
      if (*(_QWORD *)a4 == 16422)
        goto LABEL_3818;
      v1023 = *(_QWORD *)a4;
      while (1)
      {
        v1024 = v1023 & 0x3FFF;
        if (v1024 == 1)
          break;
        if (v1024 == 2)
          v1025 = 16385;
        else
          v1025 = 16387;
        if ((v1023 & 0x4000) != 0)
          v1023 = v1025;
        else
          v1023 = v1024 | 0x4000u;
        if (v1024 == 40)
          v1023 = 16385;
        if (v1024 == 3)
          v1023 = 16385;
        if (v1023 == 16422)
        {
LABEL_3818:
          v1026 = 1;
          goto LABEL_3870;
        }
      }
      LOWORD(v1033) = 16422;
      while (1)
      {
        v1034 = v1033 & 0x3FFF;
        if (v1034 == 1)
          break;
        if (v1034 == 2)
          v1035 = 16385;
        else
          v1035 = 16387;
        if (v1034 == 40)
          v1035 = 16385;
        if (v1034 == 3)
          v1033 = 16385;
        else
          v1033 = v1035;
        if (v1033 == *(_QWORD *)a4)
          goto LABEL_3818;
      }
      v1026 = 0;
LABEL_3870:
      *(_BYTE *)(a4 + 8) = v1026;
LABEL_963:
      if (!*(_BYTE *)(a3 + 8))
      {
        if (*(_QWORD *)a3 == 16407)
        {
LABEL_978:
          v281 = 1;
        }
        else
        {
          v278 = *(_QWORD *)a3;
          while (1)
          {
            v279 = v278 & 0x3FFF;
            if (v279 == 1)
              break;
            if (v279 == 2)
              v280 = 16385;
            else
              v280 = 16387;
            if ((v278 & 0x4000) != 0)
              v278 = v280;
            else
              v278 = v279 | 0x4000u;
            if (v279 == 40)
              v278 = 16385;
            if (v279 == 3)
              v278 = 16385;
            if (v278 == 16407)
              goto LABEL_978;
          }
          LOWORD(v289) = 16407;
          while (1)
          {
            v290 = v289 & 0x3FFF;
            if (v290 == 1)
              break;
            if (v290 == 2)
              v291 = 16385;
            else
              v291 = 16387;
            if (v290 == 3)
              v289 = 16385;
            else
              v289 = v291;
            if (v289 == *(_QWORD *)a3)
              goto LABEL_978;
          }
          v281 = 0;
        }
        *(_BYTE *)(a3 + 8) = v281;
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 != 16407)
      {
        v295 = *(_QWORD *)a4;
        while (1)
        {
          v296 = v295 & 0x3FFF;
          if (v296 == 1)
            break;
          if (v296 == 2)
            v297 = 16385;
          else
            v297 = 16387;
          if ((v295 & 0x4000) != 0)
            v295 = v297;
          else
            v295 = v296 | 0x4000u;
          if (v296 == 40)
            v295 = 16385;
          if (v296 == 3)
            v295 = 16385;
          if (v295 == 16407)
            goto LABEL_23;
        }
        LOWORD(v298) = 16407;
        do
        {
          v299 = v298 & 0x3FFF;
          if (v299 == 1)
            goto LABEL_4452;
          if (v299 == 2)
            v300 = 16385;
          else
            v300 = 16387;
          if (v299 == 3)
            v298 = 16385;
          else
            v298 = v300;
        }
        while (v298 != *(_QWORD *)a4);
      }
      goto LABEL_23;
    case 0x15A:
      v876 = a3;
      v877 = 16385;
      goto LABEL_3978;
    case 0x15B:
    case 0x161:
    case 0x162:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_2971;
      v751 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16386)
        goto LABEL_2791;
      v752 = *(_QWORD *)a3;
      while (1)
      {
        v753 = v752 & 0x3FFF;
        if (v753 == 1)
          break;
        if (v753 == 2)
          v754 = 16385;
        else
          v754 = 16387;
        if ((v752 & 0x4000) != 0)
          v752 = v754;
        else
          v752 = v753 | 0x4000u;
        if (v753 == 40)
          v752 = 16385;
        if (v753 == 3)
          v752 = 16385;
        if (v752 == 16386)
          goto LABEL_2791;
      }
      LOWORD(v767) = 16386;
      while (1)
      {
        v768 = v767 & 0x3FFF;
        if (v768 == 1)
          break;
        if (v768 == 2)
          v769 = 16385;
        else
          v769 = 16387;
        if (v768 == 3)
          v767 = 16385;
        else
          v767 = v769;
        if (v767 == v751)
          goto LABEL_2791;
      }
      if (v751 == 16407)
      {
LABEL_2791:
        v755 = 1;
      }
      else
      {
        v789 = *(_QWORD *)a3;
        while (1)
        {
          v790 = v789 & 0x3FFF;
          if (v790 == 1)
            break;
          if (v790 == 2)
            v791 = 16385;
          else
            v791 = 16387;
          if ((v789 & 0x4000) != 0)
            v789 = v791;
          else
            v789 = v790 | 0x4000u;
          if (v790 == 40)
            v789 = 16385;
          if (v790 == 3)
            v789 = 16385;
          if (v789 == 16407)
            goto LABEL_2791;
        }
        LOWORD(v801) = 16407;
        while (1)
        {
          v802 = v801 & 0x3FFF;
          if (v802 == 1)
            break;
          if (v802 == 2)
            v803 = 16385;
          else
            v803 = 16387;
          if (v802 == 3)
            v801 = 16385;
          else
            v801 = v803;
          if (v801 == v751)
            goto LABEL_2791;
        }
        v755 = 0;
      }
      *(_BYTE *)(a3 + 8) = v755;
LABEL_2971:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 != 16407)
      {
        v807 = *(_QWORD *)a4;
        while (1)
        {
          v808 = v807 & 0x3FFF;
          if (v808 == 1)
            break;
          if (v808 == 2)
            v809 = 16385;
          else
            v809 = 16387;
          if ((v807 & 0x4000) != 0)
            v807 = v809;
          else
            v807 = v808 | 0x4000u;
          if (v808 == 40)
            v807 = 16385;
          if (v808 == 3)
            v807 = 16385;
          if (v807 == 16407)
            goto LABEL_23;
        }
        LOWORD(v810) = 16407;
        do
        {
          v811 = v810 & 0x3FFF;
          if (v811 == 1)
            goto LABEL_4452;
          if (v811 == 2)
            v812 = 16385;
          else
            v812 = 16387;
          if (v811 == 3)
            v810 = 16385;
          else
            v810 = v812;
        }
        while (v810 != *(_QWORD *)a4);
      }
      goto LABEL_23;
    case 0x15C:
    case 0x163:
      if ((*(_DWORD *)(*((_QWORD *)this + 3) + 16) & 0xFFFFFFFE) != 4)
      {
        v1063 = a3;
        v1064 = 16386;
LABEL_3976:
        JSC::DFG::AbstractHeapOverlaps::operator()(v1063, v1064);
      }
      goto LABEL_3977;
    case 0x164:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, ((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x14);
      v76 = &v1269;
      goto LABEL_3858;
    case 0x165:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, ((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x14);
      JSC::DFG::LazyNode::LazyNode(&v1268, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
      v175 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 112);
      if ((v175 & 1) != 0)
        v176 = (v175 >> 1) & 3;
      else
        v176 = *(unsigned __int8 *)(v175 + 4);
      if (v176 == 2 || *(_BYTE *)(a4 + 8))
        goto LABEL_599;
      if (*(_QWORD *)a4 == 16422)
        goto LABEL_1496;
      v408 = *(_QWORD *)a4;
      while (1)
      {
        v409 = v408 & 0x3FFF;
        if (v409 == 1)
          break;
        if (v409 == 2)
          v410 = 16385;
        else
          v410 = 16387;
        if ((v408 & 0x4000) != 0)
          v408 = v410;
        else
          v408 = v409 | 0x4000u;
        if (v409 == 40)
          v408 = 16385;
        if (v409 == 3)
          v408 = 16385;
        if (v408 == 16422)
        {
LABEL_1496:
          v411 = 1;
          goto LABEL_1575;
        }
      }
      LOWORD(v426) = 16422;
      while (1)
      {
        v427 = v426 & 0x3FFF;
        if (v427 == 1)
          break;
        if (v427 == 2)
          v428 = 16385;
        else
          v428 = 16387;
        if (v427 == 40)
          v428 = 16385;
        if (v427 == 3)
          v426 = 16385;
        else
          v426 = v428;
        if (v426 == *(_QWORD *)a4)
          goto LABEL_1496;
      }
      v411 = 0;
LABEL_1575:
      *(_BYTE *)(a4 + 8) = v411;
LABEL_599:
      if (!*(_BYTE *)(a3 + 8))
      {
        if (*(_QWORD *)a3 == 16407)
        {
LABEL_614:
          v180 = 1;
        }
        else
        {
          v177 = *(_QWORD *)a3;
          while (1)
          {
            v178 = v177 & 0x3FFF;
            if (v178 == 1)
              break;
            if (v178 == 2)
              v179 = 16385;
            else
              v179 = 16387;
            if ((v177 & 0x4000) != 0)
              v177 = v179;
            else
              v177 = v178 | 0x4000u;
            if (v178 == 40)
              v177 = 16385;
            if (v178 == 3)
              v177 = 16385;
            if (v177 == 16407)
              goto LABEL_614;
          }
          LOWORD(v184) = 16407;
          while (1)
          {
            v185 = v184 & 0x3FFF;
            if (v185 == 1)
              break;
            if (v185 == 2)
              v186 = 16385;
            else
              v186 = 16387;
            if (v185 == 3)
              v184 = 16385;
            else
              v184 = v186;
            if (v184 == *(_QWORD *)a3)
              goto LABEL_614;
          }
          v180 = 0;
        }
        *(_BYTE *)(a3 + 8) = v180;
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_23;
      v189 = *(_QWORD *)a4;
      while (1)
      {
        v190 = v189 & 0x3FFF;
        if (v190 == 1)
          break;
        if (v190 == 2)
          v191 = 16385;
        else
          v191 = 16387;
        if ((v189 & 0x4000) != 0)
          v189 = v191;
        else
          v189 = v190 | 0x4000u;
        if (v190 == 40)
          v189 = 16385;
        if (v190 == 3)
          v189 = 16385;
        if (v189 == 16407)
          goto LABEL_23;
      }
      LOWORD(v192) = 16407;
      while (1)
      {
        v193 = v192 & 0x3FFF;
        if (v193 == 1)
          break;
        if (v193 == 2)
          v194 = 16385;
        else
          v194 = 16387;
        if (v193 == 3)
          v192 = 16385;
        else
          v192 = v194;
        if (v192 == *(_QWORD *)a4)
          goto LABEL_23;
      }
LABEL_3738:
      v18 = 0;
      goto LABEL_24;
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x176:
    case 0x177:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_433;
      v104 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16385)
        goto LABEL_349;
      v105 = 1;
      while (1)
      {
        v106 = v104 & 0x3FFF;
        if (v106 == 1)
          break;
        if (v106 == 3 || v106 == 40)
          goto LABEL_432;
        if ((v104 & 0x4000) != 0)
        {
          if (v106 == 2)
            goto LABEL_349;
          v104 = 16387;
        }
        else
        {
          v104 = v106 | 0x4000u;
        }
        if (v104 == 16385)
        {
LABEL_349:
          v105 = 1;
          goto LABEL_432;
        }
      }
      v105 = 0;
LABEL_432:
      *(_BYTE *)(a3 + 8) = v105;
LABEL_433:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 != 16424)
      {
        v132 = *(_QWORD *)a4;
        while (1)
        {
          v133 = v132 & 0x3FFF;
          if (v133 == 1)
            break;
          if (v133 == 2)
            v134 = 16385;
          else
            v134 = 16387;
          if ((v132 & 0x4000) != 0)
            v132 = v134;
          else
            v132 = v133 | 0x4000u;
          if (v133 == 40)
            v132 = 16385;
          if (v133 == 3)
            v132 = 16385;
          if (v132 == 16424)
            goto LABEL_23;
        }
        LOWORD(v135) = 16424;
        do
        {
          v136 = v135 & 0x3FFF;
          switch(v136)
          {
            case 1:
              goto LABEL_4452;
            case 2:
              v137 = 16385;
              break;
            case 40:
              v137 = 16385;
              break;
            default:
              v137 = 16387;
              break;
          }
          if (v136 == 3)
            v135 = 16385;
          else
            v135 = v137;
        }
        while (v135 != *(_QWORD *)a4);
      }
      goto LABEL_23;
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17D:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4022uLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4022uLL);
      return;
    case 0x17E:
      v1204 = a3;
      v1205 = 16392;
      goto LABEL_4595;
    case 0x17F:
      v1204 = a3;
      v1205 = 16387;
LABEL_4595:
      JSC::DFG::AbstractHeapOverlaps::operator()(v1204, v1205);
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4008uLL);
      return;
    case 0x180:
    case 0x182:
      if ((_DWORD)v14 != 386 || (v1190 = *((unsigned __int8 *)a2 + 80), v1190 == 1))
      {
        JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400CuLL);
        v1192 = *((unsigned __int16 *)a2 + 9);
        if (v1192 == 146)
          v1193 = *((_DWORD *)a2 + 20);
        else
          v1193 = *((_DWORD *)a2 + 18);
        if (v1192 == 386)
          v1194 = 11;
        else
          v1194 = 12;
        switch((char)v1193)
        {
          case 3:
            goto LABEL_2917;
          case 7:
            if (BYTE2(v1193) > 1u)
              goto LABEL_821;
            JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4004uLL);
            JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4010uLL);
            v1195 = *((_QWORD *)a2 + 3);
            v1196 = *((_DWORD *)this + 41);
            if (v1196 <= v1195)
            {
              __break(0xC471u);
              JUMPOUT(0x19839C444);
            }
            if (v1196 <= (int)v1195 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19839C44CLL);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1300, v1194, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v76 = &v1299;
            goto LABEL_3858;
          case 8:
            if (BYTE2(v1193) > 1u)
              goto LABEL_821;
            JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4004uLL);
            JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4011uLL);
            v1240 = *((_QWORD *)a2 + 3);
            v1241 = *((_DWORD *)this + 41);
            if (v1241 <= v1240)
            {
              __break(0xC471u);
              JUMPOUT(0x19839C454);
            }
            if (v1241 <= (int)v1240 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19839C45CLL);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1298, v1194, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v76 = &v1297;
            goto LABEL_3858;
          case 9:
            if (BYTE2(v1193) > 1u)
              goto LABEL_821;
            JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4004uLL);
            JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4012uLL);
            v1242 = *((_QWORD *)a2 + 3);
            v1243 = *((_DWORD *)this + 41);
            if (v1243 <= v1242)
            {
              __break(0xC471u);
              JUMPOUT(0x19839C464);
            }
            if (v1243 <= (int)v1242 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19839C46CLL);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1296, v1194, 16402, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v76 = &v1295;
            goto LABEL_3858;
          case 10:
            if (BYTE2(v1193) > 1u)
              goto LABEL_821;
LABEL_4497:
            JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4005uLL);
            v122 = a3;
LABEL_4498:
            v121 = 16403;
            goto LABEL_403;
          default:
            goto LABEL_821;
        }
      }
      if (v1190 != 2)
        goto LABEL_821;
      if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x19839C418);
      }
      if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000) != 0x20000000000000)
        goto LABEL_821;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400CuLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400FuLL);
LABEL_4507:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x400AuLL);
      return;
    case 0x184:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_3913;
      v979 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == 16385)
        goto LABEL_3622;
      v980 = 1;
      do
      {
        v981 = v979 & 0x3FFF;
        if (v981 == 1)
        {
          v980 = 0;
          goto LABEL_3912;
        }
        if (v981 == 3 || v981 == 40)
          goto LABEL_3912;
        if ((v979 & 0x4000) != 0)
        {
          if (v981 == 2)
            break;
          v979 = 16387;
        }
        else
        {
          v979 = v981 | 0x4000u;
        }
      }
      while (v979 != 16385);
LABEL_3622:
      v980 = 1;
LABEL_3912:
      *(_BYTE *)(a3 + 8) = v980;
LABEL_3913:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_23;
      v1048 = *(_QWORD *)a4;
      break;
    case 0x18A:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
        v121 = 16411;
      else
        v121 = 16412;
LABEL_402:
      v122 = a3;
      goto LABEL_403;
    case 0x18B:
      if (*(_BYTE *)(a3 + 8))
        return;
      if (*(_QWORD *)a3 == 16411)
        goto LABEL_175;
      v836 = *(_QWORD *)a3;
      while (1)
      {
        v837 = v836 & 0x3FFF;
        if (v837 == 1)
          break;
        if (v837 == 2)
          v838 = 16385;
        else
          v838 = 16387;
        if ((v836 & 0x4000) != 0)
          v836 = v838;
        else
          v836 = v837 | 0x4000u;
        if (v837 == 40)
          v836 = 16385;
        if (v837 == 3)
          v836 = 16385;
        if (v836 == 16411)
          goto LABEL_175;
      }
      LOWORD(v869) = 16411;
      while (1)
      {
        v870 = v869 & 0x3FFF;
        if (v870 == 1)
          goto LABEL_3190;
        if (v870 == 2)
          v871 = 16385;
        else
          v871 = 16387;
        if (v870 == 3)
          v869 = 16385;
        else
          v869 = v871;
        if (v869 == *(_QWORD *)a3)
          goto LABEL_175;
      }
    case 0x18C:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
        v1219 = 16413;
      else
        v1219 = 16414;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, v1219);
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, v1219);
      v76 = &v1266;
      goto LABEL_3858;
    case 0x18D:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
        v1207 = 16413;
      else
        v1207 = 16414;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, v1207);
      v76 = &v1265;
      goto LABEL_3858;
    case 0x18E:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
        v1218 = 16413;
      else
        v1218 = 16414;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, v1218);
      v76 = &v1264;
      goto LABEL_3858;
    case 0x18F:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
        v1141 = 16411;
      else
        v1141 = 16412;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, v1141);
      v76 = &v1263;
      goto LABEL_3858;
    case 0x190:
      if (*((_DWORD *)a2 + 18))
        v1206 = 16412;
      else
        v1206 = 16411;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, v1206);
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, v1206);
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1262, 48, v1206, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v76 = &v1261;
      goto LABEL_3858;
    case 0x191:
      if (*((_DWORD *)a2 + 18))
        v1217 = 16412;
      else
        v1217 = 16411;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, v1217);
      v76 = &v1260;
      goto LABEL_3858;
    case 0x192:
      if (*((_DWORD *)a2 + 18))
        v1203 = 16412;
      else
        v1203 = 16411;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, v1203);
      v76 = &v1259;
      goto LABEL_3858;
    case 0x193:
      if (*((_DWORD *)a2 + 18))
        v1216 = 16412;
      else
        v1216 = 16411;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, v1216);
      v76 = &v1258;
      goto LABEL_3858;
    case 0x194:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16412)
        goto LABEL_23;
      v988 = *(_QWORD *)a4;
      while (1)
      {
        v989 = v988 & 0x3FFF;
        if (v989 == 1)
          break;
        if (v989 == 2)
          v990 = 16385;
        else
          v990 = 16387;
        if ((v988 & 0x4000) != 0)
          v988 = v990;
        else
          v988 = v989 | 0x4000u;
        if (v989 == 40)
          v988 = 16385;
        if (v989 == 3)
          v988 = 16385;
        if (v988 == 16412)
          goto LABEL_23;
      }
      LOWORD(v1005) = 16412;
      while (1)
      {
        v1006 = v1005 & 0x3FFF;
        if (v1006 == 1)
          goto LABEL_3738;
        if (v1006 == 2)
          v1007 = 16385;
        else
          v1007 = 16387;
        if (v1006 == 3)
          v1005 = 16385;
        else
          v1005 = v1007;
        if (v1005 == *(_QWORD *)a4)
          goto LABEL_23;
      }
    case 0x195:
      v535 = *((_DWORD *)a2 + 6);
      v536 = *((_DWORD *)this + 41);
      if (v536 <= v535)
      {
        __break(0xC471u);
        JUMPOUT(0x19839C1D8);
      }
      if (v536 <= v535 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19839C1E0);
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16411)
        goto LABEL_23;
      v537 = *(_QWORD *)a4;
      while (1)
      {
        v538 = v537 & 0x3FFF;
        if (v538 == 1)
          break;
        if (v538 == 2)
          v539 = 16385;
        else
          v539 = 16387;
        if ((v537 & 0x4000) != 0)
          v537 = v539;
        else
          v537 = v538 | 0x4000u;
        if (v538 == 40)
          v537 = 16385;
        if (v538 == 3)
          v537 = 16385;
        if (v537 == 16411)
          goto LABEL_23;
      }
      LOWORD(v566) = 16411;
      while (1)
      {
        v567 = v566 & 0x3FFF;
        if (v567 == 1)
          goto LABEL_3738;
        if (v567 == 2)
          v568 = 16385;
        else
          v568 = 16387;
        if (v567 == 3)
          v566 = 16385;
        else
          v566 = v568;
        if (v566 == *(_QWORD *)a4)
          goto LABEL_23;
      }
    case 0x196:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
        v121 = 16411;
      else
        v121 = 16412;
      goto LABEL_503;
    case 0x197:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x88000000000000)
        v1107 = 16415;
      else
        v1107 = 16416;
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, v1107);
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1257, 55, v1107, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v76 = &v1256;
      goto LABEL_3858;
    case 0x198:
      if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x2C000000000000)
      {
        JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4001uLL);
        JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4028uLL);
      }
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4020uLL);
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1255, 55, 16416, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      JSC::DFG::LazyNode::LazyNode(&v1254, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x199:
      v684 = *((_DWORD *)a2 + 6);
      v685 = *((_DWORD *)this + 41);
      if (v685 <= v684)
      {
        __break(0xC471u);
        JUMPOUT(0x19839C1E8);
      }
      if (v685 <= v684 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19839C1F0);
      }
      if (v685 <= v684 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19839C1F8);
      }
      if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * (v684 + 1)) & 0xFC000000000000) != 0x2C000000000000)
      {
        JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4001uLL);
        JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4028uLL);
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16415)
        goto LABEL_23;
      v686 = *(_QWORD *)a4;
      while (1)
      {
        v687 = v686 & 0x3FFF;
        if (v687 == 1)
          break;
        if (v687 == 2)
          v688 = 16385;
        else
          v688 = 16387;
        if ((v686 & 0x4000) != 0)
          v686 = v688;
        else
          v686 = v687 | 0x4000u;
        if (v687 == 40)
          v686 = 16385;
        if (v687 == 3)
          v686 = 16385;
        if (v686 == 16415)
          goto LABEL_23;
      }
      LOWORD(v700) = 16415;
      while (1)
      {
        v701 = v700 & 0x3FFF;
        if (v701 == 1)
          goto LABEL_3738;
        if (v701 == 2)
          v702 = 16385;
        else
          v702 = 16387;
        if (v701 == 3)
          v700 = 16385;
        else
          v700 = v702;
        if (v700 == *(_QWORD *)a4)
          goto LABEL_23;
      }
    case 0x19E:
      goto LABEL_2916;
    case 0x1A0:
      v460 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
      if (!v460)
        goto LABEL_821;
      v461 = *(unsigned int *)(v460 + 20);
      v462 = *(unsigned int *)(v460 + 24);
      v463 = (unsigned __int16)*(_DWORD *)(v460 + 20);
      v464 = (unsigned __int16)v462;
      v465 = WORD1(v462);
      if (v463 != WORD1(v461))
      {
LABEL_1690:
        v466 = WORD1(v461) == 0xFFFF && v463 == 0;
        v467 = (v461 << 15) | 0x25;
        if (v466)
          v468 = 16385;
        else
          v468 = v467;
        JSC::DFG::AbstractHeapOverlaps::operator()(a3, v468);
      }
LABEL_1697:
      if (v464 == v465)
        return;
      if (v464)
        v469 = 0;
      else
        v469 = v465 == 0xFFFF;
      if (v469)
      {
        JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4003uLL);
        return;
      }
      v121 = (v462 << 15) | 0x25;
LABEL_503:
      v122 = a4;
      goto LABEL_403;
    case 0x1A1:
      v1065 = *((_QWORD *)a2 + 9);
      v461 = *(unsigned int *)(v1065 + 44);
      v462 = *(unsigned int *)(v1065 + 48);
      v463 = (unsigned __int16)*(_DWORD *)(v1065 + 44);
      v464 = (unsigned __int16)v462;
      v465 = WORD1(v462);
      if (v463 == WORD1(v461))
        goto LABEL_1697;
      goto LABEL_1690;
    case 0x1AB:
    case 0x1AC:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4027uLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4016uLL);
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
        goto LABEL_4577;
      v1191 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1253, v1191, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
      v76 = &v1252;
      goto LABEL_3858;
    case 0x1AD:
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4027uLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a3, 0x4016uLL);
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
        goto LABEL_4577;
      goto LABEL_4463;
    case 0x1AE:
    case 0x1AF:
      if (*(_BYTE *)(a3 + 8))
        return;
      if (*(_QWORD *)a3 == 16410)
        goto LABEL_175;
      v795 = *(_QWORD *)a3;
      while (1)
      {
        v796 = v795 & 0x3FFF;
        if (v796 == 1)
          break;
        if (v796 == 2)
          v797 = 16385;
        else
          v797 = 16387;
        if ((v795 & 0x4000) != 0)
          v795 = v797;
        else
          v795 = v796 | 0x4000u;
        if (v796 == 40)
          v795 = 16385;
        if (v796 == 3)
          v795 = 16385;
        if (v795 == 16410)
          goto LABEL_175;
      }
      LOWORD(v813) = 16410;
      while (1)
      {
        v814 = v813 & 0x3FFF;
        if (v814 == 1)
          break;
        if (v814 == 2)
          v815 = 16385;
        else
          v815 = 16387;
        if (v814 == 3)
          v813 = 16385;
        else
          v813 = v815;
        if (v813 == *(_QWORD *)a3)
          goto LABEL_175;
      }
LABEL_3190:
      v63 = 0;
      goto LABEL_3191;
    case 0x1B0:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x401AuLL);
      return;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x19839B9E0);
    default:
      *(_OWORD *)v1267 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v14];
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)v1267, &v1251);
      if (v1251)
        v1208 = (const char *)(v1251 + 16);
      else
        v1208 = 0;
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v1208);
      WTF::CString::~CString((WTF::CString *)&v1251, v1209, v1210, v1211, v1212, v1213, v1214, v1215);
      __break(0xC471u);
      JUMPOUT(0x19839B9B4);
  }
  while (1)
  {
    v1049 = v1048 & 0x3FFF;
    if (v1049 == 1)
    {
      LOWORD(v1051) = 16387;
      do
      {
        v1052 = v1051 & 0x3FFF;
        if (v1052 == 1)
          goto LABEL_4452;
        if (v1052 == 2)
          v1053 = 16385;
        else
          v1053 = 16387;
        if (v1052 == 3)
          v1051 = 16385;
        else
          v1051 = v1053;
      }
      while (v1051 != *(_QWORD *)a4);
LABEL_23:
      v18 = 1;
LABEL_24:
      *(_BYTE *)(a4 + 8) = v18;
      return;
    }
    if (v1049 == 3)
      goto LABEL_3921;
    v1050 = 16385;
    if (v1049 != 40)
      break;
LABEL_3922:
    LOWORD(v1048) = v1050;
    if (v1050 == 16387)
      goto LABEL_23;
  }
  if ((v1048 & 0x4000) == 0)
  {
    v1050 = v1049 | 0x4000u;
    goto LABEL_3922;
  }
  if (v1049 != 2)
    goto LABEL_23;
LABEL_3921:
  v1050 = 16385;
  goto LABEL_3922;
}

uint64_t JSC::DFG::AbstractHeapOverlaps::operator()(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  _BOOL4 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  BOOL v16;

  if (!*(_BYTE *)(result + 8))
  {
    v2 = *(_QWORD *)result;
    if (*(_QWORD *)result != a2)
    {
      v3 = *(_QWORD *)result;
      if ((*(_QWORD *)result & 0x3FFFLL) != 0x25 || (v3 = *(_QWORD *)result, (a2 & 0x3FFF) != 0x25))
      {
        while (1)
        {
          v4 = v3 & 0x3FFF;
          if (v4 == 1)
            break;
          v5 = 16387;
          if (v4 == 2)
            v5 = 16385;
          if ((v3 & 0x4000) != 0)
            v3 = v5;
          else
            v3 = v4 | 0x4000u;
          if (v4 == 40)
            v3 = 16385;
          if (v4 == 3)
            v3 = 16385;
          if (v3 == a2)
            goto LABEL_15;
        }
        v7 = (a2 & 0x3FFF) != 37;
        goto LABEL_17;
      }
      if ((v2 & 0x4000) != 0)
      {
        v7 = 0;
        goto LABEL_17;
      }
      if ((a2 & 0x4000) == 0)
      {
        v7 = 0;
        v11 = (unsigned __int16)(a2 >> 15);
        if (v11 != (unsigned __int16)(a2 >> 31))
        {
          v12 = (unsigned __int16)(v2 >> 15);
          v13 = (unsigned __int16)(v2 >> 31);
          if (v12 != v13)
          {
            v14 = (unsigned __int16)(a2 >> 31);
            v15 = v12 == v11;
            if (v13 != v14)
              v15 = 0;
            if (v13 > v14 || v11 > v12 || v15)
              goto LABEL_45;
            goto LABEL_15;
          }
        }
LABEL_17:
        if ((*(_QWORD *)result & 0x3FFFLL) == 0x25 && !v7)
        {
          if ((a2 & 0x4000) == 0)
          {
            if ((v2 & 0x4000) == 0)
            {
              v11 = (unsigned __int16)(a2 >> 15);
              v12 = (unsigned __int16)(v2 >> 15);
              v13 = (unsigned __int16)(v2 >> 31);
              v14 = (unsigned __int16)(a2 >> 31);
LABEL_45:
              v16 = v14 != v13;
              if (v11 != v12)
                v16 = 1;
              if (v12 > v11)
                v16 = 0;
              if (v14 > v13)
                v16 = 0;
              v6 = v11 != v14 && v16;
              if (v12 == v13)
                v6 = 0;
              goto LABEL_58;
            }
            goto LABEL_15;
          }
        }
        else
        {
          while (1)
          {
            v8 = a2 & 0x3FFF;
            if (v8 == 1)
              break;
            v9 = v8 | 0x4000u;
            v10 = 16387;
            if (v8 == 2)
              v10 = 16385;
            if ((a2 & 0x4000) != 0)
              v9 = v10;
            if (v8 == 40)
              v9 = 16385;
            if (v8 == 3)
              a2 = 16385;
            else
              a2 = v9;
            if (a2 == v2)
              goto LABEL_15;
          }
        }
        v6 = 0;
        goto LABEL_58;
      }
    }
LABEL_15:
    v6 = 1;
LABEL_58:
    *(_BYTE *)(result + 8) = v6;
  }
  return result;
}

uint64_t JSC::DFG::clobberize<JSC::DFG::AbstractHeapOverlaps,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::AbstractHeapOverlaps,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&,void JSC::DFG::clobberize<JSC::DFG::AbstractHeapOverlaps,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1} const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  JSC::DFG::AbstractHeapOverlaps::operator()(*(_QWORD *)(a1 + 8), 0x4001uLL);
  return JSC::DFG::AbstractHeapOverlaps::operator()(*(_QWORD *)(a1 + 16), 0x4003uLL);
}

void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  JSC::DFG::Node *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  unsigned int v294;
  unsigned int v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  uint64_t v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  unsigned int *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  BOOL v434;
  uint64_t v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  char v447;
  uint64_t v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  uint64_t v465;
  int v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  void *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  int v479;
  uint64_t v480;
  unsigned int *v481;
  unsigned int v482;
  unsigned int *v483;
  uint64_t v484;
  unsigned int v485;
  _DWORD *v486;
  uint64_t v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  int v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  int v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  int v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  uint64_t v510;
  int v511;
  uint64_t v512;
  int v513;
  uint64_t v514;
  int v515;
  uint64_t v517;
  int v518;
  uint64_t v519;
  uint64_t v520;
  BOOL v521;
  uint64_t v522;
  uint64_t v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  uint64_t v530;
  uint64_t v531;
  int v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  int v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  uint64_t v546;
  uint64_t v547;
  int v548;
  uint64_t v549;
  int v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  uint64_t v566;
  int v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v571;
  int v572;
  uint64_t v573;
  uint64_t v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  uint64_t v592;
  uint64_t v593;
  int v594;
  uint64_t v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  uint64_t v599;
  int v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  unint64_t v612;
  int v613;
  uint64_t v615;
  int v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  uint64_t v627;
  uint64_t v628;
  int v629;
  uint64_t v630;
  uint64_t v631;
  int v632;
  uint64_t v633;
  char v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t v647;
  uint64_t v648;
  int v649;
  uint64_t v650;
  _DWORD *v651;
  int v652;
  int v653;
  uint64_t v654;
  int v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  uint64_t v659;
  uint64_t v660;
  int v661;
  uint64_t v662;
  uint64_t v663;
  int v664;
  uint64_t v665;
  uint64_t v666;
  int v667;
  uint64_t v668;
  uint64_t v669;
  int v670;
  uint64_t v671;
  uint64_t v672;
  int v673;
  uint64_t v674;
  uint64_t v675;
  int v676;
  uint64_t v677;
  uint64_t v678;
  int v679;
  uint64_t v680;
  char v681;
  uint64_t v682;
  int v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  int v688;
  uint64_t v689;
  uint64_t v690;
  int v691;
  uint64_t v692;
  uint64_t v693;
  int v694;
  uint64_t v695;
  uint64_t v696;
  int v697;
  uint64_t v698;
  uint64_t v699;
  int v700;
  uint64_t v701;
  uint64_t v702;
  int v703;
  uint64_t v704;
  uint64_t v705;
  int v706;
  uint64_t v707;
  uint64_t v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  int v713;
  uint64_t v714;
  int v715;
  uint64_t v716;
  int v717;
  uint64_t v718;
  uint64_t v719;
  int v720;
  uint64_t v721;
  uint64_t v722;
  int v723;
  uint64_t v724;
  uint64_t v725;
  int v726;
  uint64_t v727;
  uint64_t v728;
  int v729;
  uint64_t v730;
  uint64_t v731;
  int v732;
  uint64_t v733;
  unsigned int v734;
  unsigned int v735;
  uint64_t v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  uint64_t v741;
  uint64_t v742;
  int v743;
  uint64_t v744;
  uint64_t v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  int v749;
  uint64_t v750;
  uint64_t v751;
  int v752;
  uint64_t v753;
  uint64_t v754;
  int v755;
  uint64_t v756;
  uint64_t v757;
  int v758;
  uint64_t v759;
  uint64_t v760;
  int v761;
  uint64_t v762;
  uint64_t v763;
  int v764;
  uint64_t v765;
  uint64_t v766;
  int v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  int v771;
  uint64_t v772;
  unsigned int v773;
  unsigned int v774;
  uint64_t v775;
  int v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  int v780;
  uint64_t v781;
  uint64_t v782;
  int v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  unsigned int v788;
  uint64_t v789;
  int v790;
  uint64_t v791;
  char v792;
  uint64_t v793;
  int v794;
  uint64_t v795;
  BOOL v796;
  uint64_t v797;
  uint64_t v798;
  int v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  int v803;
  uint64_t v804;
  uint64_t v805;
  int v806;
  uint64_t v807;
  uint64_t v808;
  int v809;
  uint64_t v810;
  BOOL v811;
  uint64_t v812;
  int v813;
  uint64_t v814;
  uint64_t v815;
  int v816;
  uint64_t v817;
  uint64_t v818;
  int v819;
  uint64_t v820;
  uint64_t v821;
  int v822;
  uint64_t v823;
  uint64_t v824;
  int v825;
  uint64_t v826;
  uint64_t v827;
  int v828;
  uint64_t v829;
  uint64_t v830;
  int v831;
  uint64_t v832;
  uint64_t v833;
  int v834;
  uint64_t v835;
  uint64_t v836;
  int v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  _BOOL4 v841;
  uint64_t v842;
  int v843;
  uint64_t v844;
  uint64_t v845;
  int v846;
  uint64_t v847;
  uint64_t v848;
  int v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  uint64_t v853;
  uint64_t v854;
  unsigned int v855;
  BOOL v856;
  uint64_t v857;
  uint64_t v858;
  int v859;
  BOOL v860;
  uint64_t v861;
  int v862;
  uint64_t v863;
  uint64_t v864;
  int v865;
  uint64_t v866;
  uint64_t v867;
  int v868;
  uint64_t v869;
  _DWORD *v870;
  int v871;
  int v872;
  uint64_t v873;
  int v874;
  uint64_t v875;
  uint64_t v876;
  int v877;
  uint64_t v878;
  uint64_t v879;
  int v880;
  uint64_t v881;
  uint64_t v882;
  int v883;
  uint64_t v884;
  uint64_t v885;
  int v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  int v890;
  uint64_t v891;
  uint64_t v892;
  int v893;
  uint64_t v894;
  unsigned int v895;
  unsigned int v896;
  uint64_t v897;
  int v898;
  uint64_t v899;
  uint64_t v900;
  int v901;
  uint64_t v902;
  uint64_t v903;
  int v904;
  uint64_t v905;
  uint64_t v906;
  int v907;
  uint64_t v908;
  uint64_t v909;
  int v910;
  uint64_t v911;
  uint64_t v912;
  int v913;
  uint64_t v914;
  uint64_t v915;
  int v916;
  uint64_t v917;
  uint64_t v918;
  int v919;
  uint64_t v920;
  uint64_t v921;
  int v922;
  uint64_t v923;
  uint64_t v924;
  int v925;
  uint64_t v926;
  unint64_t v927;
  uint64_t v928;
  int v929;
  uint64_t v930;
  unsigned int v932;
  uint64_t v933;
  int v934;
  uint64_t v935;
  uint64_t v936;
  int v937;
  uint64_t v938;
  unsigned int v939;
  uint64_t v940;
  _DWORD *v941;
  _QWORD *v942;
  uint64_t v943;
  int v945;
  int v946;
  BOOL v947;
  uint64_t v948;
  unint64_t v949;
  uint64_t v950;
  BOOL v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  unsigned int v961;
  uint64_t *v962;
  int v963;
  uint64_t v964;
  unsigned int v965;
  int v966;
  int v967;
  int v968;
  int v969;
  int v970;
  int v971;
  uint64_t v972;
  const char *v973;
  void *v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  unsigned int v981;
  uint64_t v982;
  int v983;
  int v985;
  int v987;
  int v989;
  uint64_t v991;
  char v992;
  _BYTE v993[56];
  char v994;
  _BYTE v995[56];
  char v996;
  char v997;
  char v998;
  char v999;
  _BYTE v1000[56];
  __int128 v1001;
  char v1002;
  char v1003;
  char v1004;
  char v1005;
  char v1006;
  char v1007;
  char v1008;
  char v1009;
  char v1010;
  char v1011;
  char v1012;
  char v1013;
  _BYTE v1014[56];
  char v1015;
  char v1016;
  char v1017;
  char v1018;
  _BYTE v1019[56];

  if (*((int *)this + 238) <= 0 && JSC::DFG::Node::hasArrayMode(a2))
  {
    v63 = *((unsigned __int16 *)a2 + 9);
    if (v63 > 0xC9)
    {
      if (v63 - 202 <= 0x3E && ((1 << (v63 + 54)) & 0x400000000E002FEFLL) != 0)
        goto LABEL_1396;
      v932 = v63 - 333;
      if (v932 <= 0x3A && ((1 << v932) & 0x7A8000000000003) != 0)
        goto LABEL_1396;
    }
    else
    {
      if (v63 - 92 < 2)
        goto LABEL_1396;
      v64 = v63 - 101;
      if (v64 <= 0x3E)
      {
        if (((1 << v64) & 0x7E0070000000000FLL) != 0)
          goto LABEL_1396;
        if (((1 << v64) & 0x18000000000) == 0)
          goto LABEL_3413;
        goto LABEL_2;
      }
    }
LABEL_3413:
    JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
    __break(0xC471u);
    JUMPOUT(0x1983A2818);
  }
LABEL_2:
  v11 = *((unsigned __int16 *)a2 + 9);
  switch(*((_WORD *)a2 + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 0xB:
    case 0xD:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1E:
    case 0x20:
    case 0x21:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x5B:
    case 0x60:
    case 0x61:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x8A:
    case 0x8C:
    case 0x8D:
    case 0x90:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAD:
    case 0xAE:
    case 0xB3:
    case 0xB6:
    case 0xB7:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBF:
    case 0xC0:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xEB:
    case 0xEC:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x113:
    case 0x118:
    case 0x123:
    case 0x126:
    case 0x127:
    case 0x128:
    case 0x129:
    case 0x12A:
    case 0x12B:
    case 0x12C:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x135:
    case 0x136:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x157:
    case 0x164:
    case 0x166:
    case 0x17C:
    case 0x183:
    case 0x188:
    case 0x189:
    case 0x18A:
    case 0x18B:
    case 0x18D:
    case 0x18E:
    case 0x18F:
    case 0x197:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19F:
    case 0x1AE:
    case 0x1AF:
      return;
    case 6:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_18;
      v239 = *(_QWORD *)a4;
      while (1)
      {
        v240 = v239 & 0x3FFF;
        if (v240 == 1)
          break;
        if (v240 == 2)
          v241 = 16385;
        else
          v241 = 16387;
        if ((v239 & 0x4000) != 0)
          v239 = v241;
        else
          v239 = v240 | 0x4000u;
        if (v240 == 40)
          v239 = 16385;
        if (v240 == 3)
          v239 = 16385;
        if (v239 == 16407)
          goto LABEL_18;
      }
      LOWORD(v248) = 16407;
      while (1)
      {
        v249 = v248 & 0x3FFF;
        if (v249 == 1)
          goto LABEL_3438;
        if (v249 == 2)
          v250 = 16385;
        else
          v250 = 16387;
        if (v249 == 3)
          v248 = 16385;
        else
          v248 = v250;
        if (v248 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x185:
    case 0x186:
    case 0x19B:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v41 = *(_QWORD *)a4;
      while (2)
      {
        v42 = v41 & 0x3FFF;
        if (v42 != 1)
        {
          if (v42 != 3)
          {
            v43 = 16385;
            if (v42 == 40)
              goto LABEL_106;
            if ((v41 & 0x4000) == 0)
            {
              v43 = v42 | 0x4000u;
LABEL_106:
              LOWORD(v41) = v43;
              if (v43 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v42 != 2)
              goto LABEL_18;
          }
          v43 = 16385;
          goto LABEL_106;
        }
        break;
      }
      LOWORD(v51) = 16387;
      while (1)
      {
        v52 = v51 & 0x3FFF;
        if (v52 == 1)
          goto LABEL_3438;
        if (v52 == 2)
          v53 = 16385;
        else
          v53 = 16387;
        if (v52 == 3)
          v51 = 16385;
        else
          v51 = v53;
        if (v51 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0xC:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x18002uLL);
      return;
    case 0xE:
      v91 = 131074;
      goto LABEL_281;
    case 0xF:
      v26 = (_QWORD *)*((_QWORD *)a2 + 9);
      v29 = v26;
      do
      {
        v30 = v29;
        v29 = (_QWORD *)*v29;
      }
      while (v29);
      if (v30 != v26)
      {
        *v26 = v30;
        v26 = (_QWORD *)*((_QWORD *)a2 + 9);
      }
      v31 = v26;
      do
      {
        v28 = v31;
        v31 = (_QWORD *)*v31;
      }
      while (v31);
      goto LABEL_56;
    case 0x10:
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = v19;
      do
      {
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
      if (v21 != v19)
        *v19 = v21;
      if (*(_BYTE *)(a4 + 8))
        goto LABEL_54;
      v22 = (v21[3] << 15) | 2;
      if (*(_QWORD *)a4 == v22)
        goto LABEL_51;
      while (1)
      {
        v23 = v22 & 0x3FFF;
        if (v23 == 1)
          break;
        if (v23 == 2)
          v24 = 16385;
        else
          v24 = 16387;
        if ((v22 & 0x4000) != 0)
          v22 = v24;
        else
          v22 = v23 | 0x4000u;
        if (v23 == 40)
          v22 = 16385;
        if (v23 == 3)
          v22 = 16385;
        if (v22 == *(_QWORD *)a4)
        {
LABEL_51:
          v25 = 1;
          goto LABEL_53;
        }
      }
      v25 = 0;
LABEL_53:
      *(_BYTE *)(a4 + 8) = v25;
LABEL_54:
      v26 = (_QWORD *)*((_QWORD *)a2 + 9);
      v27 = v26;
      do
      {
        v28 = v27;
        v27 = (_QWORD *)*v27;
      }
      while (v27);
LABEL_56:
      if (v28 != v26)
        *v26 = v28;
      return;
    case 0x11:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, (**((_QWORD **)a2 + 9) << 15) | 2);
      v54 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
      v44 = &v1015;
      goto LABEL_3405;
    case 0x12:
      v89 = *((_QWORD *)a2 + 9);
      v90 = 2;
      goto LABEL_280;
    case 0x13:
      v44 = &v1016;
      goto LABEL_3404;
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1F:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0xB9:
    case 0x117:
    case 0x153:
    case 0x154:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x175:
    case 0x17B:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16424)
        goto LABEL_18;
      v12 = *(_QWORD *)a4;
      while (1)
      {
        v13 = v12 & 0x3FFF;
        if (v13 == 1)
          break;
        if (v13 == 2)
          v14 = 16385;
        else
          v14 = 16387;
        if ((v12 & 0x4000) != 0)
          v12 = v14;
        else
          v12 = v13 | 0x4000u;
        if (v13 == 40)
          v12 = 16385;
        if (v13 == 3)
          v12 = 16385;
        if (v12 == 16424)
          goto LABEL_18;
      }
      LOWORD(v16) = 16424;
      while (1)
      {
        v17 = v16 & 0x3FFF;
        if (v17 == 1)
          break;
        if (v17 == 2)
          v18 = 16385;
        else
          v18 = 16387;
        if (v17 == 40)
          v18 = 16385;
        if (v17 == 3)
          v16 = 16385;
        else
          v16 = v18;
        if (v16 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      return;
    case 0x1C:
      v32 = (_QWORD *)*((_QWORD *)a2 + 9);
      v33 = v32;
      do
      {
        v34 = v33;
        v33 = (_QWORD *)*v33;
      }
      while (v33);
      if (v34 != v32)
        *v32 = v34;
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16424)
        goto LABEL_18;
      v35 = *(_QWORD *)a4;
      while (1)
      {
        v36 = v35 & 0x3FFF;
        if (v36 == 1)
          break;
        if (v36 == 2)
          v37 = 16385;
        else
          v37 = 16387;
        if ((v35 & 0x4000) != 0)
          v35 = v37;
        else
          v35 = v36 | 0x4000u;
        if (v36 == 40)
          v35 = 16385;
        if (v36 == 3)
          v35 = 16385;
        if (v35 == 16424)
          goto LABEL_18;
      }
      LOWORD(v38) = 16424;
      while (1)
      {
        v39 = v38 & 0x3FFF;
        switch(v39)
        {
          case 1:
            goto LABEL_3438;
          case 2:
            v40 = 16385;
            break;
          case 40:
            v40 = 16385;
            break;
          default:
            v40 = 16387;
            break;
        }
        if (v39 == 3)
          v38 = 16385;
        else
          v38 = v40;
        if (v38 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x22:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4023uLL);
      return;
    case 0x28:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16424)
        goto LABEL_18;
      v45 = *(_QWORD *)a4;
      while (1)
      {
        v46 = v45 & 0x3FFF;
        if (v46 == 1)
          break;
        if (v46 == 2)
          v47 = 16385;
        else
          v47 = 16387;
        if ((v45 & 0x4000) != 0)
          v45 = v47;
        else
          v45 = v46 | 0x4000u;
        if (v46 == 40)
          v45 = 16385;
        if (v46 == 3)
          v45 = 16385;
        if (v45 == 16424)
          goto LABEL_18;
      }
      LOWORD(v48) = 16424;
      while (1)
      {
        v49 = v48 & 0x3FFF;
        switch(v49)
        {
          case 1:
            goto LABEL_3438;
          case 2:
            v50 = 16385;
            break;
          case 40:
            v50 = 16385;
            break;
          default:
            v50 = 16387;
            break;
        }
        if (v49 == 3)
          v48 = 16385;
        else
          v48 = v50;
        if (v48 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x29:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26 >= 3)
        break;
      return;
    case 0x2A:
      if ((*((_BYTE *)a2 + 30) & 0xFC) == 0)
        break;
      return;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v327 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      switch((_DWORD)v327)
      {
        case 0x1A:
          v685 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v686 = 0x68000000000000;
          break;
        case 0x1C:
          v685 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v686 = 0x70000000000000;
          break;
        case 0x1B:
          v685 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v686 = 0x6C000000000000;
          break;
        default:
          goto LABEL_1164;
      }
      if (v685 == v686)
        goto LABEL_2456;
LABEL_1164:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v328 = *(_QWORD *)a4;
      while (2)
      {
        v329 = v328 & 0x3FFF;
        if (v329 == 1)
        {
          LOWORD(v371) = 16387;
          do
          {
            v372 = v371 & 0x3FFF;
            if (v372 == 1)
              goto LABEL_3438;
            if (v372 == 2)
              v373 = 16385;
            else
              v373 = 16387;
            if (v372 == 3)
              v371 = 16385;
            else
              v371 = v373;
          }
          while (v371 != *(_QWORD *)a4);
          goto LABEL_18;
        }
        if (v329 == 3)
          goto LABEL_1172;
        v330 = 16385;
        if (v329 != 40)
        {
          if ((v328 & 0x4000) != 0)
          {
            if (v329 != 2)
              goto LABEL_18;
LABEL_1172:
            v330 = 16385;
          }
          else
          {
            v330 = v329 | 0x4000u;
          }
        }
        LOWORD(v328) = v330;
        if (v330 == 16387)
          goto LABEL_18;
        continue;
      }
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*((_BYTE *)a2 + 30) & 0xFC) != 0 && (*((_BYTE *)a2 + 38) & 0xFC) != 0 || *(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v85 = *(_QWORD *)a4;
      while (2)
      {
        v86 = v85 & 0x3FFF;
        if (v86 != 1)
        {
          if (v86 != 3)
          {
            v87 = 16385;
            if (v86 == 40)
              goto LABEL_268;
            if ((v85 & 0x4000) == 0)
            {
              v87 = v86 | 0x4000u;
LABEL_268:
              LOWORD(v85) = v87;
              if (v87 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v86 != 2)
              goto LABEL_18;
          }
          v87 = 16385;
          goto LABEL_268;
        }
        break;
      }
      LOWORD(v92) = 16387;
      while (1)
      {
        v93 = v92 & 0x3FFF;
        if (v93 == 1)
          goto LABEL_3438;
        if (v93 == 2)
          v94 = 16385;
        else
          v94 = 16387;
        if (v93 == 3)
          v92 = 16385;
        else
          v92 = v94;
        if (v92 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x3F:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 >= 2)
        break;
      return;
    case 0x40:
    case 0x42:
    case 0x44:
      v88 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) > 0x30)
      {
        if ((_DWORD)v88 != 49 && (_DWORD)v88 != 52)
        {
LABEL_403:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19839D9C0);
        }
        return;
      }
      if ((_DWORD)v88 == 1)
        return;
      if ((_DWORD)v88)
        goto LABEL_403;
      break;
    case 0x41:
      v433 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v434 = (_DWORD)v433 == 49 || (_DWORD)v433 == 1;
      if (!v434 && (_DWORD)v433 != 52)
        break;
      return;
    case 0x46:
      v569 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v569 != 49 && (_DWORD)v569 != 1)
        break;
      return;
    case 0x49:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x131:
      v363 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v364 = 0xC4000000000000;
      goto LABEL_1308;
    case 0x4B:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16409)
        goto LABEL_18;
      v728 = *(_QWORD *)a4;
      while (1)
      {
        v729 = v728 & 0x3FFF;
        if (v729 == 1)
          break;
        if (v729 == 2)
          v730 = 16385;
        else
          v730 = 16387;
        if ((v728 & 0x4000) != 0)
          v728 = v730;
        else
          v728 = v729 | 0x4000u;
        if (v729 == 40)
          v728 = 16385;
        if (v729 == 3)
          v728 = 16385;
        if (v728 == 16409)
          goto LABEL_18;
      }
      LOWORD(v754) = 16409;
      while (1)
      {
        v755 = v754 & 0x3FFF;
        if (v755 == 1)
          goto LABEL_3438;
        if (v755 == 2)
          v756 = 16385;
        else
          v756 = 16387;
        if (v755 == 3)
          v754 = 16385;
        else
          v754 = v756;
        if (v754 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x51:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0xC4000000000000 || *(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v537 = *(_QWORD *)a4;
      while (2)
      {
        v538 = v537 & 0x3FFF;
        if (v538 != 1)
        {
          if (v538 != 3)
          {
            v539 = 16385;
            if (v538 == 40)
              goto LABEL_1942;
            if ((v537 & 0x4000) == 0)
            {
              v539 = v538 | 0x4000u;
LABEL_1942:
              LOWORD(v537) = v539;
              if (v539 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v538 != 2)
              goto LABEL_18;
          }
          v539 = 16385;
          goto LABEL_1942;
        }
        break;
      }
      LOWORD(v876) = 16387;
      while (1)
      {
        v877 = v876 & 0x3FFF;
        if (v877 == 1)
          goto LABEL_3438;
        if (v877 == 2)
          v878 = 16385;
        else
          v878 = 16387;
        if (v877 == 3)
          v876 = 16385;
        else
          v876 = v878;
        if (v876 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x52:
    case 0x53:
      v778 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v778)
      {
        v521 = v778 > 0x34;
        v943 = (1 << v778) & 0x1200001C000002;
        if (v521 || v943 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x1983A2A24);
        }
        return;
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v779 = *(_QWORD *)a4;
      while (2)
      {
        v780 = v779 & 0x3FFF;
        if (v780 == 1)
        {
          LOWORD(v818) = 16387;
          do
          {
            v819 = v818 & 0x3FFF;
            if (v819 == 1)
              goto LABEL_3438;
            if (v819 == 2)
              v820 = 16385;
            else
              v820 = 16387;
            if (v819 == 3)
              v818 = 16385;
            else
              v818 = v820;
          }
          while (v818 != *(_QWORD *)a4);
          goto LABEL_18;
        }
        if (v780 == 3)
          goto LABEL_2843;
        v781 = 16385;
        if (v780 != 40)
        {
          if ((v779 & 0x4000) != 0)
          {
            if (v780 != 2)
              goto LABEL_18;
LABEL_2843:
            v781 = 16385;
          }
          else
          {
            v781 = v780 | 0x4000u;
          }
        }
        LOWORD(v779) = v781;
        if (v781 == 16387)
          goto LABEL_18;
        continue;
      }
    case 0x5C:
    case 0x5D:
      v59 = *((_DWORD *)a2 + 18);
      if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
      {
        switch(*((_DWORD *)a2 + 14) & 7)
        {
          case 3:
            v60 = 13;
            break;
          case 4:
            v60 = 17;
            break;
          case 5:
            v60 = 19;
            break;
          case 7:
            __break(0xC471u);
            JUMPOUT(0x1983A3120);
          default:
            __break(0xC471u);
            JUMPOUT(0x1983A3150);
        }
      }
      else
      {
        v60 = 21;
      }
      switch(*((_DWORD *)a2 + 18))
      {
        case 0u:
        case 1u:
        case 2u:
          goto LABEL_1396;
        case 3u:
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16424)
            goto LABEL_18;
          v399 = *(_QWORD *)a4;
          while (1)
          {
            v400 = v399 & 0x3FFF;
            if (v400 == 1)
              break;
            if (v400 == 2)
              v401 = 16385;
            else
              v401 = 16387;
            if ((v399 & 0x4000) != 0)
              v399 = v401;
            else
              v399 = v400 | 0x4000u;
            if (v400 == 40)
              v399 = 16385;
            if (v400 == 3)
              v399 = 16385;
            if (v399 == 16424)
              goto LABEL_18;
          }
          LOWORD(v405) = 16424;
          while (1)
          {
            v406 = v405 & 0x3FFF;
            switch(v406)
            {
              case 1:
                goto LABEL_3438;
              case 2:
                v407 = 16385;
                break;
              case 40:
                v407 = 16385;
                break;
              default:
                v407 = 16387;
                break;
            }
            if (v406 == 3)
              v405 = 16385;
            else
              v405 = v407;
            if (v405 == *(_QWORD *)a4)
              goto LABEL_18;
          }
        case 4u:
        case 0x17u:
        case 0x18u:
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16387)
            goto LABEL_18;
          v139 = *(_QWORD *)a4;
          while (2)
          {
            v140 = v139 & 0x3FFF;
            if (v140 != 1)
            {
              if (v140 != 3)
              {
                v141 = 16385;
                if (v140 == 40)
                  goto LABEL_476;
                if ((v139 & 0x4000) == 0)
                {
                  v141 = v140 | 0x4000u;
LABEL_476:
                  LOWORD(v139) = v141;
                  if (v141 == 16387)
                    goto LABEL_18;
                  continue;
                }
                if (v140 != 2)
                  goto LABEL_18;
              }
              v141 = 16385;
              goto LABEL_476;
            }
            break;
          }
          LOWORD(v173) = 16387;
          while (1)
          {
            v174 = v173 & 0x3FFF;
            if (v174 == 1)
              goto LABEL_3438;
            if (v174 == 2)
              v175 = 16385;
            else
              v175 = 16387;
            if (v174 == 3)
              v173 = 16385;
            else
              v173 = v175;
            if (v173 == *(_QWORD *)a4)
              goto LABEL_18;
          }
        case 5u:
          if (BYTE2(v59) - 3 <= 1)
            goto LABEL_1396;
          return;
        case 6u:
          return;
        case 7u:
          if (BYTE2(v59) <= 3u && BYTE2(v59) != 2)
          {
            v222 = *((_DWORD *)a2 + 6);
            v223 = *((_DWORD *)this + 41);
            if (v223 <= v222)
            {
              __break(0xC471u);
              JUMPOUT(0x1983A3238);
            }
            if (v223 <= v222 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19839E34CLL);
            }
            return;
          }
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16387)
            goto LABEL_18;
          v417 = *(_QWORD *)a4;
          while (2)
          {
            v418 = v417 & 0x3FFF;
            if (v418 == 1)
            {
              LOWORD(v438) = 16387;
              do
              {
                v439 = v438 & 0x3FFF;
                if (v439 == 1)
                  goto LABEL_3438;
                if (v439 == 2)
                  v440 = 16385;
                else
                  v440 = 16387;
                if (v439 == 3)
                  v438 = 16385;
                else
                  v438 = v440;
              }
              while (v438 != *(_QWORD *)a4);
              goto LABEL_18;
            }
            if (v418 == 3)
              goto LABEL_1543;
            v419 = 16385;
            if (v418 != 40)
            {
              if ((v417 & 0x4000) != 0)
              {
                if (v418 != 2)
                  goto LABEL_18;
LABEL_1543:
                v419 = 16385;
              }
              else
              {
                v419 = v418 | 0x4000u;
              }
            }
            LOWORD(v417) = v419;
            if (v419 == 16387)
              goto LABEL_18;
            continue;
          }
        case 8u:
          if (BYTE2(v59) >= 2u && BYTE2(v59) != 3)
            goto LABEL_1396;
          v185 = *((_DWORD *)a2 + 6);
          v186 = *((_DWORD *)this + 41);
          if (v186 <= v185)
          {
            __break(0xC471u);
            JUMPOUT(0x1983A3228);
          }
          if (v186 <= v185 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19839DF04);
          }
          return;
        case 9u:
          if (BYTE2(v59) <= 3u && BYTE2(v59) != 2)
          {
            v61 = *((_DWORD *)a2 + 6);
            v62 = *((_DWORD *)this + 41);
            if (v62 <= v61)
            {
              __break(0xC471u);
              JUMPOUT(0x1983A31E0);
            }
            if (v62 <= v61 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19839D364);
            }
            return;
          }
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16387)
            goto LABEL_18;
          v145 = *(_QWORD *)a4;
          while (2)
          {
            v146 = v145 & 0x3FFF;
            if (v146 == 1)
            {
              LOWORD(v179) = 16387;
              do
              {
                v180 = v179 & 0x3FFF;
                if (v180 == 1)
                  goto LABEL_3438;
                if (v180 == 2)
                  v181 = 16385;
                else
                  v181 = 16387;
                if (v180 == 3)
                  v179 = 16385;
                else
                  v179 = v181;
              }
              while (v179 != *(_QWORD *)a4);
              goto LABEL_18;
            }
            if (v146 == 3)
              goto LABEL_497;
            v147 = 16385;
            if (v146 != 40)
            {
              if ((v145 & 0x4000) != 0)
              {
                if (v146 != 2)
                  goto LABEL_18;
LABEL_497:
                v147 = 16385;
              }
              else
              {
                v147 = v146 | 0x4000u;
              }
            }
            LOWORD(v145) = v147;
            if (v147 == 16387)
              goto LABEL_18;
            continue;
          }
        case 0xAu:
        case 0xBu:
          if (BYTE2(v59) < 2u || *(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16387)
            goto LABEL_18;
          v882 = *(_QWORD *)a4;
          while (2)
          {
            v883 = v882 & 0x3FFF;
            if (v883 != 1)
            {
              if (v883 != 3)
              {
                v884 = 16385;
                if (v883 == 40)
                  goto LABEL_3222;
                if ((v882 & 0x4000) == 0)
                {
                  v884 = v883 | 0x4000u;
LABEL_3222:
                  LOWORD(v882) = v884;
                  if (v884 == 16387)
                    goto LABEL_18;
                  continue;
                }
                if (v883 != 2)
                  goto LABEL_18;
              }
              v884 = 16385;
              goto LABEL_3222;
            }
            break;
          }
          LOWORD(v885) = 16387;
          while (1)
          {
            v886 = v885 & 0x3FFF;
            if (v886 == 1)
              break;
            if (v886 == 2)
              v887 = 16385;
            else
              v887 = 16387;
            if (v886 == 3)
              v885 = 16385;
            else
              v885 = v887;
            if (v885 == *(_QWORD *)a4)
              goto LABEL_18;
          }
          break;
        case 0xCu:
          if (BYTE2(v59) > 1u)
            goto LABEL_1396;
          v773 = *((_DWORD *)a2 + 6);
          v774 = *((_DWORD *)this + 41);
          if (v774 <= v773)
          {
            __break(0xC471u);
            JUMPOUT(0x1983A32A8);
          }
          if (v774 <= v773 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1983A1844);
          }
          return;
        case 0xDu:
          v964 = *((_QWORD *)a2 + 3);
          v965 = *((_DWORD *)this + 41);
          if (v965 <= v964)
          {
            __break(0xC471u);
            JUMPOUT(0x1983A32C0);
          }
          if (v965 <= (int)v964 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1983A32C8);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1014, v60, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v44 = &v1013;
          goto LABEL_3404;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          if ((v59 & 0x40000000) != 0)
            goto LABEL_3477;
          v199 = *((_DWORD *)a2 + 6);
          v200 = *((_DWORD *)this + 41);
          if (v200 <= v199)
          {
            __break(0xC471u);
            JUMPOUT(0x1983A3230);
          }
          if (v200 <= v199 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19839E0CCLL);
          }
          return;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x1983A2E08);
        default:
          __break(0xC471u);
          JUMPOUT(0x1983A2D5CLL);
      }
      goto LABEL_3438;
    case 0x62:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v584 = *(_QWORD *)a4;
      while (2)
      {
        v585 = v584 & 0x3FFF;
        if (v585 != 1)
        {
          if (v585 != 3)
          {
            v586 = 16385;
            if (v585 == 40)
              goto LABEL_2129;
            if ((v584 & 0x4000) == 0)
            {
              v586 = v585 | 0x4000u;
LABEL_2129:
              LOWORD(v584) = v586;
              if (v586 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v585 != 2)
              goto LABEL_18;
          }
          v586 = 16385;
          goto LABEL_2129;
        }
        break;
      }
      LOWORD(v628) = 16387;
      while (1)
      {
        v629 = v628 & 0x3FFF;
        if (v629 == 1)
          goto LABEL_3438;
        if (v629 == 2)
          v630 = 16385;
        else
          v630 = 16387;
        if (v629 == 3)
          v628 = 16385;
        else
          v628 = v630;
        if (v628 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x63:
      if (*(_BYTE *)(a4 + 8))
        goto LABEL_2317;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_2284;
      v587 = *(_QWORD *)a4;
      while (2)
      {
        v588 = v587 & 0x3FFF;
        if (v588 != 1)
        {
          if (v588 != 3)
          {
            v589 = 16385;
            if (v588 == 40)
              goto LABEL_2141;
            if ((v587 & 0x4000) == 0)
            {
              v589 = v588 | 0x4000u;
LABEL_2141:
              LOWORD(v587) = v589;
              if (v589 == 16387)
              {
LABEL_2284:
                v634 = 1;
                goto LABEL_2316;
              }
              continue;
            }
            if (v588 != 2)
              goto LABEL_2284;
          }
          v589 = 16385;
          goto LABEL_2141;
        }
        break;
      }
      LOWORD(v631) = 16387;
      while (1)
      {
        v632 = v631 & 0x3FFF;
        if (v632 == 1)
          break;
        if (v632 == 2)
          v633 = 16385;
        else
          v633 = 16387;
        if (v632 == 3)
          v631 = 16385;
        else
          v631 = v633;
        if (v631 == *(_QWORD *)a4)
          goto LABEL_2284;
      }
      v634 = 0;
LABEL_2316:
      *(_BYTE *)(a4 + 8) = v634;
LABEL_2317:
      v651 = (_DWORD *)*((_QWORD *)a2 + 9);
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, ((v651[1] | ((((unint64_t)v651[1] >> 31) & 1) << 32)) << 15) | 2);
      v652 = v651[6];
      if (v652)
      {
        v653 = v652 - 1;
        do
        {
          JSC::DFG::AbstractHeapOverlaps::operator()(a4, (((v653 + *v651) | ((((unint64_t)(v653 + *v651) >> 31) & 1) << 32)) << 15) | 2);
          --v653;
        }
        while (v653 != -1);
      }
      return;
    case 0x64:
      v870 = (_DWORD *)*((_QWORD *)a2 + 9);
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, ((v870[1] | ((((unint64_t)v870[1] >> 31) & 1) << 32)) << 15) | 2);
      v871 = v870[6];
      if (v871)
      {
        v872 = v871 - 1;
        do
        {
          JSC::DFG::AbstractHeapOverlaps::operator()(a4, (((v872 + *v870) | ((((unint64_t)(v872 + *v870) >> 31) & 1) << 32)) << 15) | 2);
          --v872;
        }
        while (v872 != -1);
      }
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v108 = *((_DWORD *)a2 + 6);
      v109 = *((_DWORD *)this + 41);
      if (v109 <= v108)
      {
        __break(0xC471u);
        JUMPOUT(0x1983A3208);
      }
      if (v109 <= v108 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1983A3210);
      }
      if (v109 <= v108 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1983A3218);
      }
      v110 = *((_DWORD *)a2 + 18);
      v111 = *((_DWORD *)a2 + 14) & 7;
      if (v111 >= 2 && v111 - 3 >= 3)
      {
        if (v111 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x19839F0D8);
        }
        __break(0xC471u);
        JUMPOUT(0x1983A31C4);
      }
      if (*((_DWORD *)a2 + 18) - 14 < 9)
      {
        if (!*(_BYTE *)(a4 + 8))
        {
          if (*(_QWORD *)a4 == 16406)
          {
LABEL_371:
            v115 = 1;
          }
          else
          {
            v112 = *(_QWORD *)a4;
            while (1)
            {
              v113 = v112 & 0x3FFF;
              if (v113 == 1)
                break;
              if (v113 == 2)
                v114 = 16385;
              else
                v114 = 16387;
              if ((v112 & 0x4000) != 0)
                v112 = v114;
              else
                v112 = v113 | 0x4000u;
              if (v113 == 40)
                v112 = 16385;
              if (v113 == 3)
                v112 = 16385;
              if (v112 == 16406)
                goto LABEL_371;
            }
            LOWORD(v128) = 16406;
            while (1)
            {
              v129 = v128 & 0x3FFF;
              if (v129 == 1)
                break;
              if (v129 == 2)
                v130 = 16385;
              else
                v130 = 16387;
              if (v129 == 3)
                v128 = 16385;
              else
                v128 = v130;
              if (v128 == *(_QWORD *)a4)
                goto LABEL_371;
            }
            v115 = 0;
          }
          *(_BYTE *)(a4 + 8) = v115;
        }
        if ((v110 & 0x40000000) != 0)
          goto LABEL_434;
        return;
      }
      switch(*((_DWORD *)a2 + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 6u:
          goto LABEL_1396;
        case 3u:
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16424)
            goto LABEL_18;
          v782 = *(_QWORD *)a4;
          while (1)
          {
            v783 = v782 & 0x3FFF;
            if (v783 == 1)
              break;
            if (v783 == 2)
              v784 = 16385;
            else
              v784 = 16387;
            if ((v782 & 0x4000) != 0)
              v782 = v784;
            else
              v782 = v783 | 0x4000u;
            if (v783 == 40)
              v782 = 16385;
            if (v783 == 3)
              v782 = 16385;
            if (v782 == 16424)
              goto LABEL_18;
          }
          LOWORD(v805) = 16424;
          while (1)
          {
            v806 = v805 & 0x3FFF;
            switch(v806)
            {
              case 1:
                goto LABEL_3438;
              case 2:
                v807 = 16385;
                break;
              case 40:
                v807 = 16385;
                break;
              default:
                v807 = 16387;
                break;
            }
            if (v806 == 3)
              v805 = 16385;
            else
              v805 = v807;
            if (v805 == *(_QWORD *)a4)
              goto LABEL_18;
          }
        case 4u:
        case 5u:
        case 0xCu:
        case 0xDu:
        case 0x17u:
        case 0x18u:
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16387)
            goto LABEL_18;
          v193 = *(_QWORD *)a4;
          while (2)
          {
            v194 = v193 & 0x3FFF;
            if (v194 != 1)
            {
              if (v194 != 3)
              {
                v195 = 16385;
                if (v194 == 40)
                  goto LABEL_643;
                if ((v193 & 0x4000) == 0)
                {
                  v195 = v194 | 0x4000u;
LABEL_643:
                  LOWORD(v193) = v195;
                  if (v195 == 16387)
                    goto LABEL_18;
                  continue;
                }
                if (v194 != 2)
                  goto LABEL_18;
              }
              v195 = 16385;
              goto LABEL_643;
            }
            break;
          }
          LOWORD(v302) = 16387;
          while (1)
          {
            v303 = v302 & 0x3FFF;
            if (v303 == 1)
              goto LABEL_3438;
            if (v303 == 2)
              v304 = 16385;
            else
              v304 = 16387;
            if (v303 == 3)
              v302 = 16385;
            else
              v302 = v304;
            if (v302 == *(_QWORD *)a4)
              goto LABEL_18;
          }
        case 7u:
          if (BYTE2(v110) - 3 > 1)
          {
            if (*(_BYTE *)(a4 + 8))
            {
              v550 = 1;
            }
            else
            {
              if (*(_QWORD *)a4 == 16400)
              {
LABEL_1987:
                v550 = 1;
              }
              else
              {
                v547 = *(_QWORD *)a4;
                while (1)
                {
                  v548 = v547 & 0x3FFF;
                  if (v548 == 1)
                    break;
                  if (v548 == 2)
                    v549 = 16385;
                  else
                    v549 = 16387;
                  if ((v547 & 0x4000) != 0)
                    v547 = v549;
                  else
                    v547 = v548 | 0x4000u;
                  if (v548 == 40)
                    v547 = 16385;
                  if (v548 == 3)
                    v547 = 16385;
                  if (v547 == 16400)
                    goto LABEL_1987;
                }
                LOWORD(v593) = 16400;
                while (1)
                {
                  v594 = v593 & 0x3FFF;
                  if (v594 == 1)
                    break;
                  if (v594 == 2)
                    v595 = 16385;
                  else
                    v595 = 16387;
                  if (v594 == 3)
                    v593 = 16385;
                  else
                    v593 = v595;
                  if (v593 == *(_QWORD *)a4)
                    goto LABEL_1987;
                }
                v550 = 0;
              }
              *(_BYTE *)(a4 + 8) = v550;
            }
            if ((_DWORD)v11 == 146)
              v613 = *((_DWORD *)a2 + 20);
            else
              v613 = *((_DWORD *)a2 + 18);
            if ((v613 & 0xFE0000) == 0 || v550 != 0)
              return;
            if (*(_QWORD *)a4 == 16388)
              goto LABEL_18;
            v615 = *(_QWORD *)a4;
            while (1)
            {
              v616 = v615 & 0x3FFF;
              if (v616 == 1)
                break;
              if (v616 == 2)
                v617 = 16385;
              else
                v617 = 16387;
              if ((v615 & 0x4000) != 0)
                v615 = v617;
              else
                v615 = v616 | 0x4000u;
              if (v616 == 40)
                v615 = 16385;
              if (v616 == 3)
                v615 = 16385;
              if (v615 == 16388)
                goto LABEL_18;
            }
            LOWORD(v912) = 16388;
            do
            {
              v913 = v912 & 0x3FFF;
              if (v913 == 1)
                goto LABEL_3438;
              if (v913 == 2)
                v914 = 16385;
              else
                v914 = 16387;
              if (v913 == 3)
                v912 = 16385;
              else
                v912 = v914;
            }
            while (v912 != *(_QWORD *)a4);
            goto LABEL_18;
          }
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16387)
            goto LABEL_18;
          v836 = *(_QWORD *)a4;
          while (1)
          {
            v837 = v836 & 0x3FFF;
            if (v837 == 1)
            {
              LOWORD(v864) = 16387;
              do
              {
                v865 = v864 & 0x3FFF;
                if (v865 == 1)
                  goto LABEL_3438;
                if (v865 == 2)
                  v866 = 16385;
                else
                  v866 = 16387;
                if (v865 == 3)
                  v864 = 16385;
                else
                  v864 = v866;
              }
              while (v864 != *(_QWORD *)a4);
              goto LABEL_18;
            }
            if (v837 == 3)
              goto LABEL_3064;
            v838 = 16385;
            if (v837 != 40)
              break;
LABEL_3065:
            LOWORD(v836) = v838;
            if (v838 == 16387)
              goto LABEL_18;
          }
          if ((v836 & 0x4000) == 0)
          {
            v838 = v837 | 0x4000u;
            goto LABEL_3065;
          }
          if (v837 != 2)
            goto LABEL_18;
LABEL_3064:
          v838 = 16385;
          goto LABEL_3065;
        case 8u:
          if (BYTE2(v110) - 3 <= 1)
            goto LABEL_1396;
          if (*(_BYTE *)(a4 + 8))
            goto LABEL_2574;
          if (*(_QWORD *)a4 == 16401)
            goto LABEL_2439;
          v678 = *(_QWORD *)a4;
          while (1)
          {
            v679 = v678 & 0x3FFF;
            if (v679 == 1)
              break;
            if (v679 == 2)
              v680 = 16385;
            else
              v680 = 16387;
            if ((v678 & 0x4000) != 0)
              v678 = v680;
            else
              v678 = v679 | 0x4000u;
            if (v679 == 40)
              v678 = 16385;
            if (v679 == 3)
              v678 = 16385;
            if (v678 == 16401)
            {
LABEL_2439:
              v681 = 1;
              goto LABEL_2573;
            }
          }
          LOWORD(v708) = 16401;
          while (1)
          {
            v709 = v708 & 0x3FFF;
            if (v709 == 1)
              break;
            if (v709 == 2)
              v710 = 16385;
            else
              v710 = 16387;
            if (v709 == 3)
              v708 = 16385;
            else
              v708 = v710;
            if (v708 == *(_QWORD *)a4)
              goto LABEL_2439;
          }
          v681 = 0;
LABEL_2573:
          *(_BYTE *)(a4 + 8) = v681;
LABEL_2574:
          if ((_DWORD)v11 == 146)
            goto LABEL_3551;
LABEL_2575:
          v715 = *((_DWORD *)a2 + 18);
          goto LABEL_2576;
        case 9u:
          if (BYTE2(v110) - 3 > 1)
          {
            if (*(_BYTE *)(a4 + 8))
            {
              v466 = 1;
            }
            else
            {
              if (*(_QWORD *)a4 == 16402)
              {
LABEL_1726:
                v466 = 1;
              }
              else
              {
                v463 = *(_QWORD *)a4;
                while (1)
                {
                  v464 = v463 & 0x3FFF;
                  if (v464 == 1)
                    break;
                  if (v464 == 2)
                    v465 = 16385;
                  else
                    v465 = 16387;
                  if ((v463 & 0x4000) != 0)
                    v463 = v465;
                  else
                    v463 = v464 | 0x4000u;
                  if (v464 == 40)
                    v463 = 16385;
                  if (v464 == 3)
                    v463 = 16385;
                  if (v463 == 16402)
                    goto LABEL_1726;
                }
                LOWORD(v502) = 16402;
                while (1)
                {
                  v503 = v502 & 0x3FFF;
                  if (v503 == 1)
                    break;
                  if (v503 == 2)
                    v504 = 16385;
                  else
                    v504 = 16387;
                  if (v503 == 3)
                    v502 = 16385;
                  else
                    v502 = v504;
                  if (v502 == *(_QWORD *)a4)
                    goto LABEL_1726;
                }
                v466 = 0;
              }
              *(_BYTE *)(a4 + 8) = v466;
            }
            if ((_DWORD)v11 == 146)
              v515 = *((_DWORD *)a2 + 20);
            else
              v515 = *((_DWORD *)a2 + 18);
            if ((v515 & 0xFE0000) == 0 || v466 != 0)
              return;
            if (*(_QWORD *)a4 == 16388)
              goto LABEL_18;
            v517 = *(_QWORD *)a4;
            while (1)
            {
              v518 = v517 & 0x3FFF;
              if (v518 == 1)
                break;
              if (v518 == 2)
                v519 = 16385;
              else
                v519 = 16387;
              if ((v517 & 0x4000) != 0)
                v517 = v519;
              else
                v517 = v518 | 0x4000u;
              if (v518 == 40)
                v517 = 16385;
              if (v518 == 3)
                v517 = 16385;
              if (v517 == 16388)
                goto LABEL_18;
            }
            LOWORD(v879) = 16388;
            do
            {
              v880 = v879 & 0x3FFF;
              if (v880 == 1)
                goto LABEL_3438;
              if (v880 == 2)
                v881 = 16385;
              else
                v881 = 16387;
              if (v880 == 3)
                v879 = 16385;
              else
                v879 = v881;
            }
            while (v879 != *(_QWORD *)a4);
            goto LABEL_18;
          }
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16387)
            goto LABEL_18;
          v344 = *(_QWORD *)a4;
          while (1)
          {
            v345 = v344 & 0x3FFF;
            if (v345 == 1)
            {
              LOWORD(v490) = 16387;
              do
              {
                v491 = v490 & 0x3FFF;
                if (v491 == 1)
                  goto LABEL_3438;
                if (v491 == 2)
                  v492 = 16385;
                else
                  v492 = 16387;
                if (v491 == 3)
                  v490 = 16385;
                else
                  v490 = v492;
              }
              while (v490 != *(_QWORD *)a4);
              goto LABEL_18;
            }
            if (v345 == 3)
              goto LABEL_1239;
            v346 = 16385;
            if (v345 != 40)
              break;
LABEL_1240:
            LOWORD(v344) = v346;
            if (v346 == 16387)
              goto LABEL_18;
          }
          if ((v344 & 0x4000) == 0)
          {
            v346 = v345 | 0x4000u;
            goto LABEL_1240;
          }
          if (v345 != 2)
            goto LABEL_18;
LABEL_1239:
          v346 = 16385;
          goto LABEL_1240;
        case 0xAu:
          if (BYTE2(v110) - 3 > 1)
          {
            JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4013uLL);
            if (*((_WORD *)a2 + 9) != 146)
              goto LABEL_2575;
LABEL_3551:
            v715 = *((_DWORD *)a2 + 20);
LABEL_2576:
            if ((v715 & 0xFE0000) != 0)
              JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4004uLL);
            return;
          }
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 == 16387)
            goto LABEL_18;
          v924 = *(_QWORD *)a4;
          break;
        case 0xBu:
          if ((v110 & 0xFE0000) != 0)
            goto LABEL_1396;
          JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4013uLL);
          return;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
          __break(0xC471u);
          JUMPOUT(0x1983A2BF0);
        default:
          __break(0xC471u);
          JUMPOUT(0x1983A30D8);
      }
      while (1)
      {
        v925 = v924 & 0x3FFF;
        if (v925 == 1)
        {
          LOWORD(v928) = 16387;
          do
          {
            v929 = v928 & 0x3FFF;
            if (v929 == 1)
              goto LABEL_3438;
            if (v929 == 2)
              v930 = 16385;
            else
              v930 = 16387;
            if (v929 == 3)
              v928 = 16385;
            else
              v928 = v930;
          }
          while (v928 != *(_QWORD *)a4);
          goto LABEL_18;
        }
        if (v925 == 3)
          goto LABEL_3381;
        v926 = 16385;
        if (v925 != 40)
          break;
LABEL_3382:
        LOWORD(v924) = v926;
        if (v926 == 16387)
          goto LABEL_18;
      }
      if ((v924 & 0x4000) == 0)
      {
        v926 = v925 | 0x4000u;
        goto LABEL_3382;
      }
      if (v925 != 2)
        goto LABEL_18;
LABEL_3381:
      v926 = 16385;
      goto LABEL_3382;
    case 0x6D:
      if (*(_BYTE *)(a4 + 8))
        return;
      v135 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16388)
        goto LABEL_18;
      v136 = *(_QWORD *)a4;
      while (1)
      {
        v137 = v136 & 0x3FFF;
        if (v137 == 1)
          break;
        if (v137 == 2)
          v138 = 16385;
        else
          v138 = 16387;
        if ((v136 & 0x4000) != 0)
          v136 = v138;
        else
          v136 = v137 | 0x4000u;
        if (v137 == 40)
          v136 = 16385;
        if (v137 == 3)
          v136 = 16385;
        if (v136 == 16388)
          goto LABEL_18;
      }
      LOWORD(v161) = 16388;
      while (1)
      {
        v162 = v161 & 0x3FFF;
        if (v162 == 1)
          break;
        if (v162 == 2)
          v163 = 16385;
        else
          v163 = 16387;
        if (v162 == 3)
          v161 = 16385;
        else
          v161 = v163;
        if (v161 == v135)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (v135 == 16389)
        goto LABEL_18;
      LOWORD(v164) = v135;
      while (1)
      {
        v165 = v164 & 0x3FFF;
        if (v165 == 1)
          break;
        if (v165 == 2)
          v166 = 16385;
        else
          v166 = 16387;
        if ((v164 & 0x4000) != 0)
          v164 = v166;
        else
          v164 = v165 | 0x4000u;
        if (v165 == 40)
          v164 = 16385;
        if (v165 == 3)
          v164 = 16385;
        if (v164 == 16389)
          goto LABEL_18;
      }
      LOWORD(v176) = 16389;
      while (1)
      {
        v177 = v176 & 0x3FFF;
        if (v177 == 1)
          break;
        if (v177 == 2)
          v178 = 16385;
        else
          v178 = 16387;
        if (v177 == 3)
          v176 = 16385;
        else
          v176 = v178;
        if (v176 == v135)
          goto LABEL_18;
      }
      if (v135 == 16390)
        goto LABEL_18;
      LOWORD(v187) = v135;
      while (1)
      {
        v188 = v187 & 0x3FFF;
        if (v188 == 1)
          break;
        if (v188 == 2)
          v189 = 16385;
        else
          v189 = 16387;
        if ((v187 & 0x4000) != 0)
          v187 = v189;
        else
          v187 = v188 | 0x4000u;
        if (v188 == 40)
          v187 = 16385;
        if (v188 == 3)
          v187 = 16385;
        if (v187 == 16390)
          goto LABEL_18;
      }
      LOWORD(v190) = 16390;
      while (1)
      {
        v191 = v190 & 0x3FFF;
        if (v191 == 1)
          break;
        if (v191 == 2)
          v192 = 16385;
        else
          v192 = 16387;
        if (v191 == 3)
          v190 = 16385;
        else
          v190 = v192;
        if (v190 == v135)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16391)
        goto LABEL_18;
      v196 = *(_QWORD *)a4;
      while (1)
      {
        v197 = v196 & 0x3FFF;
        if (v197 == 1)
          break;
        if (v197 == 2)
          v198 = 16385;
        else
          v198 = 16387;
        if ((v196 & 0x4000) != 0)
          v196 = v198;
        else
          v196 = v197 | 0x4000u;
        if (v197 == 40)
          v196 = 16385;
        if (v197 == 3)
          v196 = 16385;
        if (v196 == 16391)
          goto LABEL_18;
      }
      LOWORD(v201) = 16391;
      while (1)
      {
        v202 = v201 & 0x3FFF;
        if (v202 == 1)
          break;
        if (v202 == 2)
          v203 = 16385;
        else
          v203 = 16387;
        if (v202 == 3)
          v201 = 16385;
        else
          v201 = v203;
        if (v201 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16392)
        goto LABEL_18;
      v212 = *(_QWORD *)a4;
      while (1)
      {
        v213 = v212 & 0x3FFF;
        if (v213 == 1)
          break;
        if (v213 == 2)
          v214 = 16385;
        else
          v214 = 16387;
        if ((v212 & 0x4000) != 0)
          v212 = v214;
        else
          v212 = v213 | 0x4000u;
        if (v213 == 40)
          v212 = 16385;
        if (v213 == 3)
          v212 = 16385;
        if (v212 == 16392)
          goto LABEL_18;
      }
      LOWORD(v219) = 16392;
      while (1)
      {
        v220 = v219 & 0x3FFF;
        if (v220 == 1)
          break;
        if (v220 == 2)
          v221 = 16385;
        else
          v221 = 16387;
        if (v220 == 3)
          v219 = 16385;
        else
          v219 = v221;
        if (v219 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16393)
        goto LABEL_18;
      v227 = *(_QWORD *)a4;
      while (1)
      {
        v228 = v227 & 0x3FFF;
        if (v228 == 1)
          break;
        if (v228 == 2)
          v229 = 16385;
        else
          v229 = 16387;
        if ((v227 & 0x4000) != 0)
          v227 = v229;
        else
          v227 = v228 | 0x4000u;
        if (v228 == 40)
          v227 = 16385;
        if (v228 == 3)
          v227 = 16385;
        if (v227 == 16393)
          goto LABEL_18;
      }
      LOWORD(v233) = 16393;
      while (1)
      {
        v234 = v233 & 0x3FFF;
        if (v234 == 1)
          break;
        if (v234 == 2)
          v235 = 16385;
        else
          v235 = 16387;
        if (v234 == 3)
          v233 = 16385;
        else
          v233 = v235;
        if (v233 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16394)
        goto LABEL_18;
      v242 = *(_QWORD *)a4;
      while (1)
      {
        v243 = v242 & 0x3FFF;
        if (v243 == 1)
          break;
        if (v243 == 2)
          v244 = 16385;
        else
          v244 = 16387;
        if ((v242 & 0x4000) != 0)
          v242 = v244;
        else
          v242 = v243 | 0x4000u;
        if (v243 == 40)
          v242 = 16385;
        if (v243 == 3)
          v242 = 16385;
        if (v242 == 16394)
          goto LABEL_18;
      }
      LOWORD(v251) = 16394;
      while (1)
      {
        v252 = v251 & 0x3FFF;
        if (v252 == 1)
          break;
        if (v252 == 2)
          v253 = 16385;
        else
          v253 = 16387;
        if (v252 == 3)
          v251 = 16385;
        else
          v251 = v253;
        if (v251 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16395)
        goto LABEL_18;
      v261 = *(_QWORD *)a4;
      while (1)
      {
        v262 = v261 & 0x3FFF;
        if (v262 == 1)
          break;
        if (v262 == 2)
          v263 = 16385;
        else
          v263 = 16387;
        if ((v261 & 0x4000) != 0)
          v261 = v263;
        else
          v261 = v262 | 0x4000u;
        if (v262 == 40)
          v261 = 16385;
        if (v262 == 3)
          v261 = 16385;
        if (v261 == 16395)
          goto LABEL_18;
      }
      LOWORD(v267) = 16395;
      while (1)
      {
        v268 = v267 & 0x3FFF;
        if (v268 == 1)
          break;
        if (v268 == 2)
          v269 = 16385;
        else
          v269 = 16387;
        if (v268 == 3)
          v267 = 16385;
        else
          v267 = v269;
        if (v267 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16396)
        goto LABEL_18;
      v273 = *(_QWORD *)a4;
      while (1)
      {
        v274 = v273 & 0x3FFF;
        if (v274 == 1)
          break;
        if (v274 == 2)
          v275 = 16385;
        else
          v275 = 16387;
        if ((v273 & 0x4000) != 0)
          v273 = v275;
        else
          v273 = v274 | 0x4000u;
        if (v274 == 40)
          v273 = 16385;
        if (v274 == 3)
          v273 = 16385;
        if (v273 == 16396)
          goto LABEL_18;
      }
      LOWORD(v276) = 16396;
      while (1)
      {
        v277 = v276 & 0x3FFF;
        if (v277 == 1)
          break;
        if (v277 == 2)
          v278 = 16385;
        else
          v278 = 16387;
        if (v277 == 3)
          v276 = 16385;
        else
          v276 = v278;
        if (v276 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16397)
        goto LABEL_18;
      v279 = *(_QWORD *)a4;
      while (1)
      {
        v280 = v279 & 0x3FFF;
        if (v280 == 1)
          break;
        if (v280 == 2)
          v281 = 16385;
        else
          v281 = 16387;
        if ((v279 & 0x4000) != 0)
          v279 = v281;
        else
          v279 = v280 | 0x4000u;
        if (v280 == 40)
          v279 = 16385;
        if (v280 == 3)
          v279 = 16385;
        if (v279 == 16397)
          goto LABEL_18;
      }
      LOWORD(v285) = 16397;
      while (1)
      {
        v286 = v285 & 0x3FFF;
        if (v286 == 1)
          break;
        if (v286 == 2)
          v287 = 16385;
        else
          v287 = 16387;
        if (v286 == 3)
          v285 = 16385;
        else
          v285 = v287;
        if (v285 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16399)
        goto LABEL_18;
      v288 = *(_QWORD *)a4;
      while (1)
      {
        v289 = v288 & 0x3FFF;
        if (v289 == 1)
          break;
        if (v289 == 2)
          v290 = 16385;
        else
          v290 = 16387;
        if ((v288 & 0x4000) != 0)
          v288 = v290;
        else
          v288 = v289 | 0x4000u;
        if (v289 == 40)
          v288 = 16385;
        if (v289 == 3)
          v288 = 16385;
        if (v288 == 16399)
          goto LABEL_18;
      }
      LOWORD(v306) = 16399;
      while (1)
      {
        v307 = v306 & 0x3FFF;
        if (v307 == 1)
          break;
        if (v307 == 2)
          v308 = 16385;
        else
          v308 = 16387;
        if (v307 == 3)
          v306 = 16385;
        else
          v306 = v308;
        if (v306 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16400)
        goto LABEL_18;
      v312 = *(_QWORD *)a4;
      while (1)
      {
        v313 = v312 & 0x3FFF;
        if (v313 == 1)
          break;
        if (v313 == 2)
          v314 = 16385;
        else
          v314 = 16387;
        if ((v312 & 0x4000) != 0)
          v312 = v314;
        else
          v312 = v313 | 0x4000u;
        if (v313 == 40)
          v312 = 16385;
        if (v313 == 3)
          v312 = 16385;
        if (v312 == 16400)
          goto LABEL_18;
      }
      LOWORD(v318) = 16400;
      while (1)
      {
        v319 = v318 & 0x3FFF;
        if (v319 == 1)
          break;
        if (v319 == 2)
          v320 = 16385;
        else
          v320 = 16387;
        if (v319 == 3)
          v318 = 16385;
        else
          v318 = v320;
        if (v318 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16401)
        goto LABEL_18;
      v321 = *(_QWORD *)a4;
      while (1)
      {
        v322 = v321 & 0x3FFF;
        if (v322 == 1)
          break;
        if (v322 == 2)
          v323 = 16385;
        else
          v323 = 16387;
        if ((v321 & 0x4000) != 0)
          v321 = v323;
        else
          v321 = v322 | 0x4000u;
        if (v322 == 40)
          v321 = 16385;
        if (v322 == 3)
          v321 = 16385;
        if (v321 == 16401)
          goto LABEL_18;
      }
      LOWORD(v334) = 16401;
      while (1)
      {
        v335 = v334 & 0x3FFF;
        if (v335 == 1)
          break;
        if (v335 == 2)
          v336 = 16385;
        else
          v336 = 16387;
        if (v335 == 3)
          v334 = 16385;
        else
          v334 = v336;
        if (v334 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16402)
        goto LABEL_18;
      v347 = *(_QWORD *)a4;
      while (1)
      {
        v348 = v347 & 0x3FFF;
        if (v348 == 1)
          break;
        if (v348 == 2)
          v349 = 16385;
        else
          v349 = 16387;
        if ((v347 & 0x4000) != 0)
          v347 = v349;
        else
          v347 = v348 | 0x4000u;
        if (v348 == 40)
          v347 = 16385;
        if (v348 == 3)
          v347 = 16385;
        if (v347 == 16402)
          goto LABEL_18;
      }
      LOWORD(v360) = 16402;
      while (1)
      {
        v361 = v360 & 0x3FFF;
        if (v361 == 1)
          break;
        if (v361 == 2)
          v362 = 16385;
        else
          v362 = 16387;
        if (v361 == 3)
          v360 = 16385;
        else
          v360 = v362;
        if (v360 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16403)
        goto LABEL_18;
      v377 = *(_QWORD *)a4;
      while (1)
      {
        v378 = v377 & 0x3FFF;
        if (v378 == 1)
          break;
        if (v378 == 2)
          v379 = 16385;
        else
          v379 = 16387;
        if ((v377 & 0x4000) != 0)
          v377 = v379;
        else
          v377 = v378 | 0x4000u;
        if (v378 == 40)
          v377 = 16385;
        if (v378 == 3)
          v377 = 16385;
        if (v377 == 16403)
          goto LABEL_18;
      }
      LOWORD(v390) = 16403;
      while (1)
      {
        v391 = v390 & 0x3FFF;
        if (v391 == 1)
          break;
        if (v391 == 2)
          v392 = 16385;
        else
          v392 = 16387;
        if (v391 == 3)
          v390 = 16385;
        else
          v390 = v392;
        if (v390 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16404)
        goto LABEL_18;
      v396 = *(_QWORD *)a4;
      while (1)
      {
        v397 = v396 & 0x3FFF;
        if (v397 == 1)
          break;
        if (v397 == 2)
          v398 = 16385;
        else
          v398 = 16387;
        if ((v396 & 0x4000) != 0)
          v396 = v398;
        else
          v396 = v397 | 0x4000u;
        if (v397 == 40)
          v396 = 16385;
        if (v397 == 3)
          v396 = 16385;
        if (v396 == 16404)
          goto LABEL_18;
      }
      LOWORD(v402) = 16404;
      while (1)
      {
        v403 = v402 & 0x3FFF;
        if (v403 == 1)
          break;
        if (v403 == 2)
          v404 = 16385;
        else
          v404 = 16387;
        if (v403 == 3)
          v402 = 16385;
        else
          v402 = v404;
        if (v402 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16405)
        goto LABEL_18;
      v411 = *(_QWORD *)a4;
      while (1)
      {
        v412 = v411 & 0x3FFF;
        if (v412 == 1)
          break;
        if (v412 == 2)
          v413 = 16385;
        else
          v413 = 16387;
        if ((v411 & 0x4000) != 0)
          v411 = v413;
        else
          v411 = v412 | 0x4000u;
        if (v412 == 40)
          v411 = 16385;
        if (v412 == 3)
          v411 = 16385;
        if (v411 == 16405)
          goto LABEL_18;
      }
      LOWORD(v423) = 16405;
      while (1)
      {
        v424 = v423 & 0x3FFF;
        if (v424 == 1)
          break;
        if (v424 == 2)
          v425 = 16385;
        else
          v425 = 16387;
        if (v424 == 3)
          v423 = 16385;
        else
          v423 = v425;
        if (v423 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16406)
        goto LABEL_18;
      v430 = *(_QWORD *)a4;
      while (1)
      {
        v431 = v430 & 0x3FFF;
        if (v431 == 1)
          break;
        if (v431 == 2)
          v432 = 16385;
        else
          v432 = 16387;
        if ((v430 & 0x4000) != 0)
          v430 = v432;
        else
          v430 = v431 | 0x4000u;
        if (v431 == 40)
          v430 = 16385;
        if (v431 == 3)
          v430 = 16385;
        if (v430 == 16406)
          goto LABEL_18;
      }
      LOWORD(v435) = 16406;
      while (1)
      {
        v436 = v435 & 0x3FFF;
        if (v436 == 1)
          break;
        if (v436 == 2)
          v437 = 16385;
        else
          v437 = 16387;
        if (v436 == 3)
          v435 = 16385;
        else
          v435 = v437;
        if (v435 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_18;
      v441 = *(_QWORD *)a4;
      while (1)
      {
        v442 = v441 & 0x3FFF;
        if (v442 == 1)
          break;
        if (v442 == 2)
          v443 = 16385;
        else
          v443 = 16387;
        if ((v441 & 0x4000) != 0)
          v441 = v443;
        else
          v441 = v442 | 0x4000u;
        if (v442 == 40)
          v441 = 16385;
        if (v442 == 3)
          v441 = 16385;
        if (v441 == 16407)
          goto LABEL_18;
      }
      LOWORD(v448) = 16407;
      while (1)
      {
        v449 = v448 & 0x3FFF;
        if (v449 == 1)
          break;
        if (v449 == 2)
          v450 = 16385;
        else
          v450 = 16387;
        if (v449 == 3)
          v448 = 16385;
        else
          v448 = v450;
        if (v448 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16408)
        goto LABEL_18;
      v457 = *(_QWORD *)a4;
      while (1)
      {
        v458 = v457 & 0x3FFF;
        if (v458 == 1)
          break;
        if (v458 == 2)
          v459 = 16385;
        else
          v459 = 16387;
        if ((v457 & 0x4000) != 0)
          v457 = v459;
        else
          v457 = v458 | 0x4000u;
        if (v458 == 40)
          v457 = 16385;
        if (v458 == 3)
          v457 = 16385;
        if (v457 == 16408)
          goto LABEL_18;
      }
      LOWORD(v493) = 16408;
      while (1)
      {
        v494 = v493 & 0x3FFF;
        if (v494 == 1)
          break;
        if (v494 == 2)
          v495 = 16385;
        else
          v495 = 16387;
        if (v494 == 3)
          v493 = 16385;
        else
          v493 = v495;
        if (v493 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16409)
        goto LABEL_18;
      v505 = *(_QWORD *)a4;
      while (1)
      {
        v506 = v505 & 0x3FFF;
        if (v506 == 1)
          break;
        if (v506 == 2)
          v507 = 16385;
        else
          v507 = 16387;
        if ((v505 & 0x4000) != 0)
          v505 = v507;
        else
          v505 = v506 | 0x4000u;
        if (v506 == 40)
          v505 = 16385;
        if (v506 == 3)
          v505 = 16385;
        if (v505 == 16409)
          goto LABEL_18;
      }
      LOWORD(v528) = 16409;
      while (1)
      {
        v529 = v528 & 0x3FFF;
        if (v529 == 1)
          break;
        if (v529 == 2)
          v530 = 16385;
        else
          v530 = 16387;
        if (v529 == 3)
          v528 = 16385;
        else
          v528 = v530;
        if (v528 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16410)
        goto LABEL_18;
      v534 = *(_QWORD *)a4;
      while (1)
      {
        v535 = v534 & 0x3FFF;
        if (v535 == 1)
          break;
        if (v535 == 2)
          v536 = 16385;
        else
          v536 = 16387;
        if ((v534 & 0x4000) != 0)
          v534 = v536;
        else
          v534 = v535 | 0x4000u;
        if (v535 == 40)
          v534 = 16385;
        if (v535 == 3)
          v534 = 16385;
        if (v534 == 16410)
          goto LABEL_18;
      }
      LOWORD(v544) = 16410;
      while (1)
      {
        v545 = v544 & 0x3FFF;
        if (v545 == 1)
          break;
        if (v545 == 2)
          v546 = 16385;
        else
          v546 = 16387;
        if (v545 == 3)
          v544 = 16385;
        else
          v544 = v546;
        if (v544 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16411)
        goto LABEL_18;
      v557 = *(_QWORD *)a4;
      while (1)
      {
        v558 = v557 & 0x3FFF;
        if (v558 == 1)
          break;
        if (v558 == 2)
          v559 = 16385;
        else
          v559 = 16387;
        if ((v557 & 0x4000) != 0)
          v557 = v559;
        else
          v557 = v558 | 0x4000u;
        if (v558 == 40)
          v557 = 16385;
        if (v558 == 3)
          v557 = 16385;
        if (v557 == 16411)
          goto LABEL_18;
      }
      LOWORD(v566) = 16411;
      while (1)
      {
        v567 = v566 & 0x3FFF;
        if (v567 == 1)
          break;
        if (v567 == 2)
          v568 = 16385;
        else
          v568 = 16387;
        if (v567 == 3)
          v566 = 16385;
        else
          v566 = v568;
        if (v566 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16412)
        goto LABEL_18;
      v577 = *(_QWORD *)a4;
      while (1)
      {
        v578 = v577 & 0x3FFF;
        if (v578 == 1)
          break;
        if (v578 == 2)
          v579 = 16385;
        else
          v579 = 16387;
        if ((v577 & 0x4000) != 0)
          v577 = v579;
        else
          v577 = v578 | 0x4000u;
        if (v578 == 40)
          v577 = 16385;
        if (v578 == 3)
          v577 = 16385;
        if (v577 == 16412)
          goto LABEL_18;
      }
      LOWORD(v581) = 16412;
      while (1)
      {
        v582 = v581 & 0x3FFF;
        if (v582 == 1)
          break;
        if (v582 == 2)
          v583 = 16385;
        else
          v583 = 16387;
        if (v582 == 3)
          v581 = 16385;
        else
          v581 = v583;
        if (v581 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16413)
        goto LABEL_18;
      v590 = *(_QWORD *)a4;
      while (1)
      {
        v591 = v590 & 0x3FFF;
        if (v591 == 1)
          break;
        if (v591 == 2)
          v592 = 16385;
        else
          v592 = 16387;
        if ((v590 & 0x4000) != 0)
          v590 = v592;
        else
          v590 = v591 | 0x4000u;
        if (v591 == 40)
          v590 = 16385;
        if (v591 == 3)
          v590 = 16385;
        if (v590 == 16413)
          goto LABEL_18;
      }
      LOWORD(v599) = 16413;
      while (1)
      {
        v600 = v599 & 0x3FFF;
        if (v600 == 1)
          break;
        if (v600 == 2)
          v601 = 16385;
        else
          v601 = 16387;
        if (v600 == 3)
          v599 = 16385;
        else
          v599 = v601;
        if (v599 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16414)
        goto LABEL_18;
      v618 = *(_QWORD *)a4;
      while (1)
      {
        v619 = v618 & 0x3FFF;
        if (v619 == 1)
          break;
        if (v619 == 2)
          v620 = 16385;
        else
          v620 = 16387;
        if ((v618 & 0x4000) != 0)
          v618 = v620;
        else
          v618 = v619 | 0x4000u;
        if (v619 == 40)
          v618 = 16385;
        if (v619 == 3)
          v618 = 16385;
        if (v618 == 16414)
          goto LABEL_18;
      }
      LOWORD(v648) = 16414;
      while (1)
      {
        v649 = v648 & 0x3FFF;
        if (v649 == 1)
          break;
        if (v649 == 2)
          v650 = 16385;
        else
          v650 = 16387;
        if (v649 == 3)
          v648 = 16385;
        else
          v648 = v650;
        if (v648 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16415)
        goto LABEL_18;
      v654 = *(_QWORD *)a4;
      while (1)
      {
        v655 = v654 & 0x3FFF;
        if (v655 == 1)
          break;
        if (v655 == 2)
          v656 = 16385;
        else
          v656 = 16387;
        if ((v654 & 0x4000) != 0)
          v654 = v656;
        else
          v654 = v655 | 0x4000u;
        if (v655 == 40)
          v654 = 16385;
        if (v655 == 3)
          v654 = 16385;
        if (v654 == 16415)
          goto LABEL_18;
      }
      LOWORD(v663) = 16415;
      while (1)
      {
        v664 = v663 & 0x3FFF;
        if (v664 == 1)
          break;
        if (v664 == 2)
          v665 = 16385;
        else
          v665 = 16387;
        if (v664 == 3)
          v663 = 16385;
        else
          v663 = v665;
        if (v663 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16416)
        goto LABEL_18;
      v672 = *(_QWORD *)a4;
      while (1)
      {
        v673 = v672 & 0x3FFF;
        if (v673 == 1)
          break;
        if (v673 == 2)
          v674 = 16385;
        else
          v674 = 16387;
        if ((v672 & 0x4000) != 0)
          v672 = v674;
        else
          v672 = v673 | 0x4000u;
        if (v673 == 40)
          v672 = 16385;
        if (v673 == 3)
          v672 = 16385;
        if (v672 == 16416)
          goto LABEL_18;
      }
      LOWORD(v682) = 16416;
      while (1)
      {
        v683 = v682 & 0x3FFF;
        if (v683 == 1)
          break;
        if (v683 == 2)
          v684 = 16385;
        else
          v684 = 16387;
        if (v683 == 40)
          v684 = 16385;
        if (v683 == 3)
          v682 = 16385;
        else
          v682 = v684;
        if (v682 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16417)
        goto LABEL_18;
      v690 = *(_QWORD *)a4;
      while (1)
      {
        v691 = v690 & 0x3FFF;
        if (v691 == 1)
          break;
        if (v691 == 2)
          v692 = 16385;
        else
          v692 = 16387;
        if ((v690 & 0x4000) != 0)
          v690 = v692;
        else
          v690 = v691 | 0x4000u;
        if (v691 == 40)
          v690 = 16385;
        if (v691 == 3)
          v690 = 16385;
        if (v690 == 16417)
          goto LABEL_18;
      }
      LOWORD(v705) = 16417;
      while (1)
      {
        v706 = v705 & 0x3FFF;
        if (v706 == 1)
          break;
        if (v706 == 2)
          v707 = 16385;
        else
          v707 = 16387;
        if (v706 == 40)
          v707 = 16385;
        if (v706 == 3)
          v705 = 16385;
        else
          v705 = v707;
        if (v705 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16418)
        goto LABEL_18;
      v716 = *(_QWORD *)a4;
      while (1)
      {
        v717 = v716 & 0x3FFF;
        if (v717 == 1)
          break;
        if (v717 == 2)
          v718 = 16385;
        else
          v718 = 16387;
        if ((v716 & 0x4000) != 0)
          v716 = v718;
        else
          v716 = v717 | 0x4000u;
        if (v717 == 40)
          v716 = 16385;
        if (v717 == 3)
          v716 = 16385;
        if (v716 == 16418)
          goto LABEL_18;
      }
      LOWORD(v731) = 16418;
      while (1)
      {
        v732 = v731 & 0x3FFF;
        if (v732 == 1)
          break;
        if (v732 == 2)
          v733 = 16385;
        else
          v733 = 16387;
        if (v732 == 40)
          v733 = 16385;
        if (v732 == 3)
          v731 = 16385;
        else
          v731 = v733;
        if (v731 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16419)
        goto LABEL_18;
      v748 = *(_QWORD *)a4;
      while (1)
      {
        v749 = v748 & 0x3FFF;
        if (v749 == 1)
          break;
        if (v749 == 2)
          v750 = 16385;
        else
          v750 = 16387;
        if ((v748 & 0x4000) != 0)
          v748 = v750;
        else
          v748 = v749 | 0x4000u;
        if (v749 == 40)
          v748 = 16385;
        if (v749 == 3)
          v748 = 16385;
        if (v748 == 16419)
          goto LABEL_18;
      }
      LOWORD(v766) = 16419;
      while (1)
      {
        v767 = v766 & 0x3FFF;
        if (v767 == 1)
          break;
        if (v767 == 2)
          v768 = 16385;
        else
          v768 = 16387;
        if (v767 == 40)
          v768 = 16385;
        if (v767 == 3)
          v766 = 16385;
        else
          v766 = v768;
        if (v766 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16420)
        goto LABEL_18;
      v775 = *(_QWORD *)a4;
      while (1)
      {
        v776 = v775 & 0x3FFF;
        if (v776 == 1)
          break;
        if (v776 == 2)
          v777 = 16385;
        else
          v777 = 16387;
        if ((v775 & 0x4000) != 0)
          v775 = v777;
        else
          v775 = v776 | 0x4000u;
        if (v776 == 40)
          v775 = 16385;
        if (v776 == 3)
          v775 = 16385;
        if (v775 == 16420)
          goto LABEL_18;
      }
      LOWORD(v793) = 16420;
      while (1)
      {
        v794 = v793 & 0x3FFF;
        if (v794 == 1)
          break;
        if (v794 == 2)
          v795 = 16385;
        else
          v795 = 16387;
        if (v794 == 40)
          v795 = 16385;
        if (v794 == 3)
          v793 = 16385;
        else
          v793 = v795;
        if (v793 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      v801 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16421)
        goto LABEL_18;
      if ((*(_QWORD *)a4 & 0x3FFFLL) == 0x25)
      {
        *(_BYTE *)(a4 + 8) = (*(_QWORD *)a4 & 0x4000) == 0;
        if ((v801 & 0x4000) == 0)
          return;
      }
      else
      {
        v802 = *(_QWORD *)a4;
        while (1)
        {
          v803 = v802 & 0x3FFF;
          if (v803 == 1)
            break;
          if (v803 == 2)
            v804 = 16385;
          else
            v804 = 16387;
          if ((v802 & 0x4000) != 0)
            v802 = v804;
          else
            v802 = v803 | 0x4000u;
          if (v803 == 40)
            v802 = 16385;
          if (v803 == 3)
            v802 = 16385;
          if (v802 == 16421)
            goto LABEL_18;
        }
        LOWORD(v812) = 16421;
        while (1)
        {
          v813 = v812 & 0x3FFF;
          if (v813 == 1)
            break;
          if (v813 == 2)
            v814 = 16385;
          else
            v814 = 16387;
          if (v813 == 40)
            v814 = 16385;
          if (v813 == 3)
            v812 = 16385;
          else
            v812 = v814;
          if (v812 == v801)
            goto LABEL_18;
        }
        *(_BYTE *)(a4 + 8) = 0;
      }
      if (*(_QWORD *)a4 == 16422)
        goto LABEL_18;
      v824 = *(_QWORD *)a4;
      while (1)
      {
        v825 = v824 & 0x3FFF;
        if (v825 == 1)
          break;
        if (v825 == 2)
          v826 = 16385;
        else
          v826 = 16387;
        if ((v824 & 0x4000) != 0)
          v824 = v826;
        else
          v824 = v825 | 0x4000u;
        if (v825 == 40)
          v824 = 16385;
        if (v825 == 3)
          v824 = 16385;
        if (v824 == 16422)
          goto LABEL_18;
      }
      LOWORD(v830) = 16422;
      while (1)
      {
        v831 = v830 & 0x3FFF;
        if (v831 == 1)
          break;
        if (v831 == 2)
          v832 = 16385;
        else
          v832 = 16387;
        if (v831 == 40)
          v832 = 16385;
        if (v831 == 3)
          v830 = 16385;
        else
          v830 = v832;
        if (v830 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (*(_QWORD *)a4 == 16423)
        goto LABEL_18;
      v842 = *(_QWORD *)a4;
      while (1)
      {
        v843 = v842 & 0x3FFF;
        if (v843 == 1)
          break;
        if (v843 == 2)
          v844 = 16385;
        else
          v844 = 16387;
        if ((v842 & 0x4000) != 0)
          v842 = v844;
        else
          v842 = v843 | 0x4000u;
        if (v843 == 40)
          v842 = 16385;
        if (v843 == 3)
          v842 = 16385;
        if (v842 == 16423)
          goto LABEL_18;
      }
      LOWORD(v845) = 16423;
      while (1)
      {
        v846 = v845 & 0x3FFF;
        if (v846 == 1)
          break;
        if (v846 == 2)
          v847 = 16385;
        else
          v847 = 16387;
        if (v846 == 40)
          v847 = 16385;
        if (v846 == 3)
          v845 = 16385;
        else
          v845 = v847;
        if (v845 == *(_QWORD *)a4)
          goto LABEL_18;
      }
      if (*(_QWORD *)a4 == 16424)
        goto LABEL_18;
      v851 = *(_QWORD *)a4;
      while (1)
      {
        v852 = v851 & 0x3FFF;
        if (v852 == 1)
          break;
        if (v852 == 2)
          v853 = 16385;
        else
          v853 = 16387;
        if ((v851 & 0x4000) != 0)
          v851 = v853;
        else
          v851 = v852 | 0x4000u;
        if (v852 == 40)
          v851 = 16385;
        if (v852 == 3)
          v851 = 16385;
        if (v851 == 16424)
          goto LABEL_18;
      }
      LOWORD(v867) = 16424;
      while (1)
      {
        v868 = v867 & 0x3FFF;
        switch(v868)
        {
          case 1:
            goto LABEL_3438;
          case 2:
            v869 = 16385;
            break;
          case 40:
            v869 = 16385;
            break;
          default:
            v869 = 16387;
            break;
        }
        if (v868 == 3)
          v867 = 16385;
        else
          v867 = v869;
        if (v867 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x87:
      if (*(_BYTE *)(a4 + 8))
        goto LABEL_273;
      v65 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16394)
        goto LABEL_196;
      v66 = *(_QWORD *)a4;
      while (1)
      {
        v67 = v66 & 0x3FFF;
        if (v67 == 1)
          break;
        if (v67 == 2)
          v68 = 16385;
        else
          v68 = 16387;
        if ((v66 & 0x4000) != 0)
          v66 = v68;
        else
          v66 = v67 | 0x4000u;
        if (v67 == 40)
          v66 = 16385;
        if (v67 == 3)
          v66 = 16385;
        if (v66 == 16394)
          goto LABEL_196;
      }
      LOWORD(v70) = 16394;
      while (1)
      {
        v71 = v70 & 0x3FFF;
        if (v71 == 1)
          break;
        if (v71 == 2)
          v72 = 16385;
        else
          v72 = 16387;
        if (v71 == 3)
          v70 = 16385;
        else
          v70 = v72;
        if (v70 == v65)
          goto LABEL_196;
      }
      if (v65 == 16395)
        goto LABEL_196;
      v73 = *(_QWORD *)a4;
      while (1)
      {
        v74 = v73 & 0x3FFF;
        if (v74 == 1)
          break;
        if (v74 == 2)
          v75 = 16385;
        else
          v75 = 16387;
        if ((v73 & 0x4000) != 0)
          v73 = v75;
        else
          v73 = v74 | 0x4000u;
        if (v74 == 40)
          v73 = 16385;
        if (v74 == 3)
          v73 = 16385;
        if (v73 == 16395)
          goto LABEL_196;
      }
      LOWORD(v76) = 16395;
      while (1)
      {
        v77 = v76 & 0x3FFF;
        if (v77 == 1)
          break;
        if (v77 == 2)
          v78 = 16385;
        else
          v78 = 16387;
        if (v77 == 3)
          v76 = 16385;
        else
          v76 = v78;
        if (v76 == v65)
          goto LABEL_196;
      }
      if (v65 == 16393)
      {
LABEL_196:
        v69 = 1;
        goto LABEL_272;
      }
      v79 = *(_QWORD *)a4;
      while (1)
      {
        v80 = v79 & 0x3FFF;
        if (v80 == 1)
          break;
        if (v80 == 2)
          v81 = 16385;
        else
          v81 = 16387;
        if ((v79 & 0x4000) != 0)
          v79 = v81;
        else
          v79 = v80 | 0x4000u;
        if (v80 == 40)
          v79 = 16385;
        if (v80 == 3)
          v79 = 16385;
        if (v79 == 16393)
          goto LABEL_196;
      }
      LOWORD(v82) = 16393;
      while (1)
      {
        v83 = v82 & 0x3FFF;
        if (v83 == 1)
          break;
        if (v83 == 2)
          v84 = 16385;
        else
          v84 = 16387;
        if (v83 == 3)
          v82 = 16385;
        else
          v82 = v84;
        if (v82 == v65)
          goto LABEL_196;
      }
      v69 = 0;
LABEL_272:
      *(_BYTE *)(a4 + 8) = v69;
LABEL_273:
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 8) + 16) & 0x3E000) == 0x4000)
LABEL_274:
        JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x400FuLL);
      return;
    case 0x88:
    case 0x89:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_18;
      v337 = *(_QWORD *)a4;
      while (1)
      {
        v338 = v337 & 0x3FFF;
        if (v338 == 1)
          break;
        if (v338 == 2)
          v339 = 16385;
        else
          v339 = 16387;
        if ((v337 & 0x4000) != 0)
          v337 = v339;
        else
          v337 = v338 | 0x4000u;
        if (v338 == 40)
          v337 = 16385;
        if (v338 == 3)
          v337 = 16385;
        if (v337 == 16407)
          goto LABEL_18;
      }
      LOWORD(v354) = 16407;
      while (1)
      {
        v355 = v354 & 0x3FFF;
        if (v355 == 1)
          goto LABEL_3438;
        if (v355 == 2)
          v356 = 16385;
        else
          v356 = 16387;
        if (v355 == 3)
          v354 = 16385;
        else
          v354 = v356;
        if (v354 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x8B:
      if (*(_BYTE *)(a4 + 8))
        return;
      v340 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16396)
        goto LABEL_18;
      v341 = *(_QWORD *)a4;
      while (1)
      {
        v342 = v341 & 0x3FFF;
        if (v342 == 1)
          break;
        if (v342 == 2)
          v343 = 16385;
        else
          v343 = 16387;
        if ((v341 & 0x4000) != 0)
          v341 = v343;
        else
          v341 = v342 | 0x4000u;
        if (v342 == 40)
          v341 = 16385;
        if (v342 == 3)
          v341 = 16385;
        if (v341 == 16396)
          goto LABEL_18;
      }
      LOWORD(v357) = 16396;
      while (1)
      {
        v358 = v357 & 0x3FFF;
        if (v358 == 1)
          break;
        if (v358 == 2)
          v359 = 16385;
        else
          v359 = 16387;
        if (v358 == 3)
          v357 = 16385;
        else
          v357 = v359;
        if (v357 == v340)
          goto LABEL_18;
      }
      if (v340 == 16394)
        goto LABEL_18;
      v365 = *(_QWORD *)a4;
      while (1)
      {
        v366 = v365 & 0x3FFF;
        if (v366 == 1)
          break;
        if (v366 == 2)
          v367 = 16385;
        else
          v367 = 16387;
        if ((v365 & 0x4000) != 0)
          v365 = v367;
        else
          v365 = v366 | 0x4000u;
        if (v366 == 40)
          v365 = 16385;
        if (v366 == 3)
          v365 = 16385;
        if (v365 == 16394)
          goto LABEL_18;
      }
      LOWORD(v384) = 16394;
      while (1)
      {
        v385 = v384 & 0x3FFF;
        if (v385 == 1)
          goto LABEL_3438;
        if (v385 == 2)
          v386 = 16385;
        else
          v386 = 16387;
        if (v385 == 3)
          v384 = 16385;
        else
          v384 = v386;
        if (v384 == v340)
          goto LABEL_18;
      }
    case 0x91:
    case 0x92:
      if (*(_BYTE *)(a4 + 8))
        return;
      v215 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16394)
        goto LABEL_18;
      v216 = *(_QWORD *)a4;
      while (1)
      {
        v217 = v216 & 0x3FFF;
        if (v217 == 1)
          break;
        if (v217 == 2)
          v218 = 16385;
        else
          v218 = 16387;
        if ((v216 & 0x4000) != 0)
          v216 = v218;
        else
          v216 = v217 | 0x4000u;
        if (v217 == 40)
          v216 = 16385;
        if (v217 == 3)
          v216 = 16385;
        if (v216 == 16394)
          goto LABEL_18;
      }
      LOWORD(v224) = 16394;
      while (1)
      {
        v225 = v224 & 0x3FFF;
        if (v225 == 1)
          break;
        if (v225 == 2)
          v226 = 16385;
        else
          v226 = 16387;
        if (v225 == 3)
          v224 = 16385;
        else
          v224 = v226;
        if (v224 == v215)
          goto LABEL_18;
      }
      *(_BYTE *)(a4 + 8) = 0;
      if (v215 == 16393)
        goto LABEL_18;
      LOWORD(v230) = v215;
      while (1)
      {
        v231 = v230 & 0x3FFF;
        if (v231 == 1)
          break;
        if (v231 == 2)
          v232 = 16385;
        else
          v232 = 16387;
        if ((v230 & 0x4000) != 0)
          v230 = v232;
        else
          v230 = v231 | 0x4000u;
        if (v231 == 40)
          v230 = 16385;
        if (v231 == 3)
          v230 = 16385;
        if (v230 == 16393)
          goto LABEL_18;
      }
      LOWORD(v236) = 16393;
      while (1)
      {
        v237 = v236 & 0x3FFF;
        if (v237 == 1)
          break;
        if (v237 == 2)
          v238 = 16385;
        else
          v238 = 16387;
        if (v237 == 3)
          v236 = 16385;
        else
          v236 = v238;
        if (v236 == v215)
          goto LABEL_18;
      }
      if (v215 == 16396)
        goto LABEL_18;
      LOWORD(v245) = v215;
      while (1)
      {
        v246 = v245 & 0x3FFF;
        if (v246 == 1)
          break;
        if (v246 == 2)
          v247 = 16385;
        else
          v247 = 16387;
        if ((v245 & 0x4000) != 0)
          v245 = v247;
        else
          v245 = v246 | 0x4000u;
        if (v246 == 40)
          v245 = 16385;
        if (v246 == 3)
          v245 = 16385;
        if (v245 == 16396)
          goto LABEL_18;
      }
      LOWORD(v258) = 16396;
      while (1)
      {
        v259 = v258 & 0x3FFF;
        if (v259 == 1)
          break;
        if (v259 == 2)
          v260 = 16385;
        else
          v260 = 16387;
        if (v259 == 3)
          v258 = 16385;
        else
          v258 = v260;
        if (v258 == v215)
          goto LABEL_18;
      }
      if (*(_QWORD *)a4 == 16422)
        goto LABEL_18;
      v264 = *(_QWORD *)a4;
      while (1)
      {
        v265 = v264 & 0x3FFF;
        if (v265 == 1)
          break;
        if (v265 == 2)
          v266 = 16385;
        else
          v266 = 16387;
        if ((v264 & 0x4000) != 0)
          v264 = v266;
        else
          v264 = v265 | 0x4000u;
        if (v265 == 40)
          v264 = 16385;
        if (v265 == 3)
          v264 = 16385;
        if (v264 == 16422)
          goto LABEL_18;
      }
      LOWORD(v270) = 16422;
      while (1)
      {
        v271 = v270 & 0x3FFF;
        switch(v271)
        {
          case 1:
            goto LABEL_3438;
          case 2:
            v272 = 16385;
            break;
          case 40:
            v272 = 16385;
            break;
          default:
            v272 = 16387;
            break;
        }
        if (v271 == 3)
          v270 = 16385;
        else
          v270 = v272;
        if (v270 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x97:
      v44 = &v1017;
      goto LABEL_3404;
    case 0x98:
    case 0x99:
      if (*((int *)this + 238) < 2)
        return;
      v44 = &v1009;
      goto LABEL_3404;
    case 0x9A:
      if (*((int *)this + 238) < 2)
        return;
      v44 = &v1008;
      goto LABEL_3404;
    case 0x9B:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, ((unint64_t)*(unsigned int *)(*((_QWORD *)a2 + 9) + 4) << 15) | 0xF);
      if (*((int *)this + 238) < 2)
        return;
      v54 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL);
      v44 = &v1006;
      goto LABEL_3405;
    case 0x9C:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, ((unint64_t)**((unsigned int **)a2 + 9) << 15) | 0xF);
      v785 = *((_QWORD *)a2 + 9);
      v786 = *(unsigned int *)(v785 + 20);
      v787 = (v786 << 6) - 64;
      while (v787 != -64)
      {
        v788 = *(_DWORD *)(*(_QWORD *)(v785 + 8) + v787) - 2;
        v787 -= 64;
        if (v788 <= 3)
        {
          if (!*(_BYTE *)(a4 + 8))
          {
            if (*(_QWORD *)a4 == 16394)
            {
LABEL_2881:
              v792 = 1;
            }
            else
            {
              v789 = *(_QWORD *)a4;
              while (1)
              {
                v790 = v789 & 0x3FFF;
                if (v790 == 1)
                  break;
                if (v790 == 2)
                  v791 = 16385;
                else
                  v791 = 16387;
                if ((v789 & 0x4000) != 0)
                  v789 = v791;
                else
                  v789 = v790 | 0x4000u;
                if (v790 == 40)
                  v789 = 16385;
                if (v790 == 3)
                  v789 = 16385;
                if (v789 == 16394)
                  goto LABEL_2881;
              }
              LOWORD(v833) = 16394;
              while (1)
              {
                v834 = v833 & 0x3FFF;
                if (v834 == 1)
                  break;
                if (v834 == 2)
                  v835 = 16385;
                else
                  v835 = 16387;
                if (v834 == 3)
                  v833 = 16385;
                else
                  v833 = v835;
                if (v833 == *(_QWORD *)a4)
                  goto LABEL_2881;
              }
              v792 = 0;
            }
            *(_BYTE *)(a4 + 8) = v792;
            v785 = *((_QWORD *)a2 + 9);
            v786 = *(unsigned int *)(v785 + 20);
          }
          break;
        }
      }
      v839 = (v786 << 6) - 64;
      while (v786)
      {
        if (--v786 >= (unint64_t)*(unsigned int *)(v785 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x1983A32B0);
        }
        v840 = v839 - 64;
        v841 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v785 + 8) + v839));
        v839 = v840;
        if (v841)
        {
          JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x400CuLL);
          break;
        }
      }
      if (*((int *)this + 238) < 2)
        return;
      v54 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v44 = &v1007;
      goto LABEL_3405;
    case 0x9D:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, ((unint64_t)**((unsigned int **)a2 + 9) << 15) | 0xF);
      if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9)))
        return;
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x400AuLL);
      goto LABEL_274;
    case 0x9E:
      v101 = *((_DWORD *)a2 + 18);
      if (v101 - 5 < 9)
        return;
      if (v101 == 25)
        goto LABEL_323;
      if (v101 == 3)
        goto LABEL_2456;
      v963 = JSC::DFG::toTypedArrayType(v101);
      if (v963 == 12 || !v963)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
        __break(0xC471u);
        JUMPOUT(0x1983A2DC0);
      }
LABEL_323:
      if ((v101 & 0x40000000) != 0)
        goto LABEL_434;
      return;
    case 0x9F:
      v971 = *((_DWORD *)a2 + 18);
      if (v971 != 25)
      {
        v989 = JSC::DFG::toTypedArrayType(v971);
        if (v989 == 12 || v989 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x1983A344CLL);
        }
      }
      if ((v971 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x1983A2F14);
      }
      return;
    case 0xA0:
      v970 = *((_DWORD *)a2 + 18);
      if (v970 == 25)
        goto LABEL_3526;
      v987 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
      if (v987 == 12 || v987 == 0)
      {
        if (v970 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x1983A33F4);
        }
        goto LABEL_2456;
      }
      if (v970 == 3)
        goto LABEL_2456;
LABEL_3526:
      if ((v970 & 0x40000000) != 0)
        goto LABEL_434;
      v44 = &v1005;
      goto LABEL_3404;
    case 0xA1:
      if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x1983A3280);
      }
      v44 = &v1004;
      goto LABEL_3404;
    case 0xA2:
      v968 = *((_DWORD *)a2 + 18);
      v969 = v968;
      if (v968 == 25)
        goto LABEL_3521;
      v985 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
      if (v985 == 12 || v985 == 0)
      {
        if (v969 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x1983A3390);
        }
        goto LABEL_2456;
      }
      if (v969 == 3)
        goto LABEL_2456;
      if (*((_WORD *)a2 + 9) == 146)
        v968 = *((_DWORD *)a2 + 20);
      else
        v968 = *((_DWORD *)a2 + 18);
LABEL_3521:
      if ((v968 & 0x40000000) == 0)
      {
        v44 = &v1011;
        goto LABEL_3404;
      }
      goto LABEL_434;
    case 0xA3:
      v966 = *((_DWORD *)a2 + 18);
      v967 = v966;
      if (v966 == 25)
        goto LABEL_3518;
      v983 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
      if (v983 == 12 || v983 == 0)
      {
        if (v967 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x1983A332CLL);
        }
        goto LABEL_2456;
      }
      if (v967 == 3)
      {
LABEL_2456:
        JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4028uLL);
        return;
      }
      if (*((_WORD *)a2 + 9) == 146)
        v966 = *((_DWORD *)a2 + 20);
      else
        v966 = *((_DWORD *)a2 + 18);
LABEL_3518:
      if ((v966 & 0x40000000) != 0)
      {
LABEL_434:
        JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4027uLL);
        return;
      }
      v44 = &v1010;
LABEL_3404:
      v54 = a2;
LABEL_3405:
      JSC::DFG::LazyNode::LazyNode(v44, v54);
      return;
    case 0xAC:
      v89 = *((unsigned int *)a2 + 18);
      v90 = 21;
      goto LABEL_280;
    case 0xAF:
      v89 = *((_QWORD *)a2 + 9);
      v90 = 36;
      goto LABEL_280;
    case 0xB2:
      if (*(_BYTE *)(a4 + 8))
        return;
      v540 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16422)
        goto LABEL_18;
      v541 = *(_QWORD *)a4;
      while (1)
      {
        v542 = v541 & 0x3FFF;
        if (v542 == 1)
          break;
        if (v542 == 2)
          v543 = 16385;
        else
          v543 = 16387;
        if ((v541 & 0x4000) != 0)
          v541 = v543;
        else
          v541 = v542 | 0x4000u;
        if (v542 == 40)
          v541 = 16385;
        if (v542 == 3)
          v541 = 16385;
        if (v541 == 16422)
          goto LABEL_18;
      }
      LOWORD(v554) = 16422;
      while (1)
      {
        v555 = v554 & 0x3FFF;
        if (v555 == 1)
          break;
        if (v555 == 2)
          v556 = 16385;
        else
          v556 = 16387;
        if (v555 == 40)
          v556 = 16385;
        if (v555 == 3)
          v554 = 16385;
        else
          v554 = v556;
        if (v554 == v540)
          goto LABEL_18;
      }
      if (v540 == 16424)
        goto LABEL_18;
      v560 = *(_QWORD *)a4;
      while (1)
      {
        v561 = v560 & 0x3FFF;
        if (v561 == 1)
          break;
        if (v561 == 2)
          v562 = 16385;
        else
          v562 = 16387;
        if ((v560 & 0x4000) != 0)
          v560 = v562;
        else
          v560 = v561 | 0x4000u;
        if (v561 == 40)
          v560 = 16385;
        if (v561 == 3)
          v560 = 16385;
        if (v560 == 16424)
          goto LABEL_18;
      }
      LOWORD(v571) = 16424;
      while (1)
      {
        v572 = v571 & 0x3FFF;
        switch(v572)
        {
          case 1:
            goto LABEL_3438;
          case 2:
            v573 = 16385;
            break;
          case 40:
            v573 = 16385;
            break;
          default:
            v573 = 16387;
            break;
        }
        if (v572 == 3)
          v571 = 16385;
        else
          v571 = v573;
        if (v571 == v540)
          goto LABEL_18;
      }
    case 0xB4:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x400EuLL);
      v54 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v44 = &v1003;
      goto LABEL_3405;
    case 0xB5:
    case 0xDA:
    case 0xDE:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4018uLL);
      return;
    case 0xB8:
    case 0xBA:
    case 0x101:
    case 0x102:
    case 0x19E:
      goto LABEL_2456;
    case 0xBE:
      v44 = &v1012;
      goto LABEL_3404;
    case 0xC1:
      v520 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v521 = v520 > 0x31;
      v522 = (1 << v520) & 0x2000000200002;
      if (!v521 && v522 != 0)
      {
        v524 = *((_QWORD *)a2 + 4);
        if ((v524 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v524 & 0xFC000000000000) == 0x4000000000000)
          return;
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v525 = *(_QWORD *)a4;
      while (2)
      {
        v526 = v525 & 0x3FFF;
        if (v526 != 1)
        {
          if (v526 != 3)
          {
            v527 = 16385;
            if (v526 == 40)
              goto LABEL_1894;
            if ((v525 & 0x4000) == 0)
            {
              v527 = v526 | 0x4000u;
LABEL_1894:
              LOWORD(v525) = v527;
              if (v527 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v526 != 2)
              goto LABEL_18;
          }
          v527 = 16385;
          goto LABEL_1894;
        }
        break;
      }
      LOWORD(v915) = 16387;
      while (1)
      {
        v916 = v915 & 0x3FFF;
        if (v916 == 1)
          goto LABEL_3438;
        if (v916 == 2)
          v917 = 16385;
        else
          v917 = 16387;
        if (v916 == 3)
          v915 = 16385;
        else
          v915 = v917;
        if (v915 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0xC2:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 < 3 || *(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v282 = *(_QWORD *)a4;
      while (2)
      {
        v283 = v282 & 0x3FFF;
        if (v283 != 1)
        {
          if (v283 != 3)
          {
            v284 = 16385;
            if (v283 == 40)
              goto LABEL_994;
            if ((v282 & 0x4000) == 0)
            {
              v284 = v283 | 0x4000u;
LABEL_994:
              LOWORD(v282) = v284;
              if (v284 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v283 != 2)
              goto LABEL_18;
          }
          v284 = 16385;
          goto LABEL_994;
        }
        break;
      }
      LOWORD(v918) = 16387;
      while (1)
      {
        v919 = v918 & 0x3FFF;
        if (v919 == 1)
          goto LABEL_3438;
        if (v919 == 2)
          v920 = 16385;
        else
          v920 = 16387;
        if (v919 == 3)
          v918 = 16385;
        else
          v918 = v920;
        if (v918 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0xC3:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v635 = *(_QWORD *)a4;
      while (2)
      {
        v636 = v635 & 0x3FFF;
        if (v636 != 1)
        {
          if (v636 != 3)
          {
            v637 = 16385;
            if (v636 == 40)
              goto LABEL_2294;
            if ((v635 & 0x4000) == 0)
            {
              v637 = v636 | 0x4000u;
LABEL_2294:
              LOWORD(v635) = v637;
              if (v637 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v636 != 2)
              goto LABEL_18;
          }
          v637 = 16385;
          goto LABEL_2294;
        }
        break;
      }
      LOWORD(v669) = 16387;
      while (1)
      {
        v670 = v669 & 0x3FFF;
        if (v670 == 1)
          goto LABEL_3438;
        if (v670 == 2)
          v671 = 16385;
        else
          v671 = 16387;
        if (v670 == 3)
          v669 = 16385;
        else
          v669 = v671;
        if (v669 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0xC4:
      v624 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v624)
      {
        if ((_DWORD)v624 != 11)
        {
          __break(0xC471u);
          JUMPOUT(0x1983A2FB0);
        }
        if (*(_BYTE *)(a4 + 8))
          return;
        v888 = *(_QWORD *)a4;
        if (*(_QWORD *)a4 == 16407)
          goto LABEL_18;
        v889 = *(_QWORD *)a4;
        while (1)
        {
          v890 = v889 & 0x3FFF;
          if (v890 == 1)
            break;
          if (v890 == 2)
            v891 = 16385;
          else
            v891 = 16387;
          if ((v889 & 0x4000) != 0)
            v889 = v891;
          else
            v889 = v890 | 0x4000u;
          if (v890 == 40)
            v889 = 16385;
          if (v890 == 3)
            v889 = 16385;
          if (v889 == 16407)
            goto LABEL_18;
        }
        LOWORD(v897) = 16407;
        while (1)
        {
          v898 = v897 & 0x3FFF;
          if (v898 == 1)
            break;
          if (v898 == 2)
            v899 = 16385;
          else
            v899 = 16387;
          if (v898 == 3)
            v897 = 16385;
          else
            v897 = v899;
          if (v897 == v888)
            goto LABEL_18;
        }
        if (v888 == 16394)
          goto LABEL_18;
        v900 = *(_QWORD *)a4;
        while (1)
        {
          v901 = v900 & 0x3FFF;
          if (v901 == 1)
            break;
          if (v901 == 2)
            v902 = 16385;
          else
            v902 = 16387;
          if ((v900 & 0x4000) != 0)
            v900 = v902;
          else
            v900 = v901 | 0x4000u;
          if (v901 == 40)
            v900 = 16385;
          if (v901 == 3)
            v900 = 16385;
          if (v900 == 16394)
            goto LABEL_18;
        }
        LOWORD(v906) = 16394;
        do
        {
          v907 = v906 & 0x3FFF;
          if (v907 == 1)
            goto LABEL_3438;
          if (v907 == 2)
            v908 = 16385;
          else
            v908 = 16387;
          if (v907 == 3)
            v906 = 16385;
          else
            v906 = v908;
        }
        while (v906 != v888);
        goto LABEL_18;
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v625 = *(_QWORD *)a4;
      while (1)
      {
        v626 = v625 & 0x3FFF;
        if (v626 == 1)
        {
          LOWORD(v702) = 16387;
          do
          {
            v703 = v702 & 0x3FFF;
            if (v703 == 1)
              goto LABEL_3438;
            if (v703 == 2)
              v704 = 16385;
            else
              v704 = 16387;
            if (v703 == 3)
              v702 = 16385;
            else
              v702 = v704;
          }
          while (v702 != *(_QWORD *)a4);
          goto LABEL_18;
        }
        if (v626 == 3)
          goto LABEL_2261;
        v627 = 16385;
        if (v626 != 40)
          break;
LABEL_2262:
        LOWORD(v625) = v627;
        if (v627 == 16387)
          goto LABEL_18;
      }
      if ((v625 & 0x4000) == 0)
      {
        v627 = v626 | 0x4000u;
        goto LABEL_2262;
      }
      if (v626 != 2)
        goto LABEL_18;
LABEL_2261:
      v627 = 16385;
      goto LABEL_2262;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      v939 = v11 - 202;
      if (v939 >= 0xA || ((0x3EFu >> v939) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1983A3200);
      }
      v940 = dword_1991556C8[(__int16)v939];
      v941 = (_DWORD *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v981 = v940 + *v941;
        if (*((_DWORD *)this + 41) <= v981)
        {
          __break(0xC471u);
          JUMPOUT(0x1983A3454);
        }
        v942 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v981);
      }
      else
      {
        v942 = &v941[2 * v940];
      }
      if ((*v942 & 0xFF00FFFFFFFFFFFFLL) != 0)
        goto LABEL_3455;
      break;
    case 0xCE:
      v962 = (uint64_t *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v982 = *v962;
        if (*((_DWORD *)this + 41) <= v982)
        {
          __break(0xC471u);
          JUMPOUT(0x1983A34B0);
        }
        v962 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v982);
      }
      v363 = *v962 & 0xFC000000000000;
      v364 = 0x4000000000000;
LABEL_1308:
      if (v363 != v364)
        break;
      return;
    case 0xD6:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_18;
      v657 = *(_QWORD *)a4;
      while (1)
      {
        v658 = v657 & 0x3FFF;
        if (v658 == 1)
          break;
        if (v658 == 2)
          v659 = 16385;
        else
          v659 = 16387;
        if ((v657 & 0x4000) != 0)
          v657 = v659;
        else
          v657 = v658 | 0x4000u;
        if (v658 == 40)
          v657 = 16385;
        if (v658 == 3)
          v657 = 16385;
        if (v657 == 16407)
          goto LABEL_18;
      }
      LOWORD(v666) = 16407;
      while (1)
      {
        v667 = v666 & 0x3FFF;
        if (v667 == 1)
          goto LABEL_3438;
        if (v667 == 2)
          v668 = 16385;
        else
          v668 = 16387;
        if (v667 == 3)
          v666 = 16385;
        else
          v666 = v668;
        if (v666 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0xD7:
      if (*((unsigned __int8 *)a2 + 72) - 7 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1983A0604);
      }
      return;
    case 0xD9:
    case 0xDB:
    case 0xDC:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v351 = *(_QWORD *)a4;
      while (2)
      {
        v352 = v351 & 0x3FFF;
        if (v352 != 1)
        {
          if (v352 != 3)
          {
            v353 = 16385;
            if (v352 == 40)
              goto LABEL_1271;
            if ((v351 & 0x4000) == 0)
            {
              v353 = v352 | 0x4000u;
LABEL_1271:
              LOWORD(v351) = v353;
              if (v353 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v352 != 2)
              goto LABEL_18;
          }
          v353 = 16385;
          goto LABEL_1271;
        }
        break;
      }
      LOWORD(v393) = 16387;
      while (1)
      {
        v394 = v393 & 0x3FFF;
        if (v394 == 1)
          goto LABEL_3438;
        if (v394 == 2)
          v395 = 16385;
        else
          v395 = 16387;
        if (v394 == 3)
          v393 = 16385;
        else
          v393 = v395;
        if (v393 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0xDD:
      if (*(_BYTE *)(a4 + 8))
        return;
      v711 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 16408)
        goto LABEL_18;
      v712 = *(_QWORD *)a4;
      while (1)
      {
        v713 = v712 & 0x3FFF;
        if (v713 == 1)
          break;
        if (v713 == 2)
          v714 = 16385;
        else
          v714 = 16387;
        if ((v712 & 0x4000) != 0)
          v712 = v714;
        else
          v712 = v713 | 0x4000u;
        if (v713 == 40)
          v712 = 16385;
        if (v713 == 3)
          v712 = 16385;
        if (v712 == 16408)
          goto LABEL_18;
      }
      LOWORD(v725) = 16408;
      while (1)
      {
        v726 = v725 & 0x3FFF;
        if (v726 == 1)
          break;
        if (v726 == 2)
          v727 = 16385;
        else
          v727 = 16387;
        if (v726 == 3)
          v725 = 16385;
        else
          v725 = v727;
        if (v725 == v711)
          goto LABEL_18;
      }
      if (v711 == 16398)
        goto LABEL_18;
      v745 = *(_QWORD *)a4;
      while (1)
      {
        v746 = v745 & 0x3FFF;
        if (v746 == 1)
          break;
        if (v746 == 2)
          v747 = 16385;
        else
          v747 = 16387;
        if ((v745 & 0x4000) != 0)
          v745 = v747;
        else
          v745 = v746 | 0x4000u;
        if (v746 == 40)
          v745 = 16385;
        if (v746 == 3)
          v745 = 16385;
        if (v745 == 16398)
          goto LABEL_18;
      }
      LOWORD(v763) = 16398;
      while (1)
      {
        v764 = v763 & 0x3FFF;
        if (v764 == 1)
          goto LABEL_3438;
        if (v764 == 2)
          v765 = 16385;
        else
          v765 = 16387;
        if (v764 == 3)
          v763 = 16385;
        else
          v763 = v765;
        if (v763 == v711)
          goto LABEL_18;
      }
    case 0xDF:
    case 0xE0:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x54000000000000
        && (*((_QWORD *)a2 + 4) & 0xFC000000000000) == 0x40000000000000
        && (*((_QWORD *)a2 + 5) & 0xFC000000000000) == 0x54000000000000)
      {
        if (*(_BYTE *)(a4 + 8))
          return;
        v380 = *(_QWORD *)a4;
        if (*(_QWORD *)a4 != 16408)
        {
          v381 = *(_QWORD *)a4;
          while (1)
          {
            v382 = v381 & 0x3FFF;
            if (v382 == 1)
              break;
            if (v382 == 2)
              v383 = 16385;
            else
              v383 = 16387;
            if ((v381 & 0x4000) != 0)
              v381 = v383;
            else
              v381 = v382 | 0x4000u;
            if (v382 == 40)
              v381 = 16385;
            if (v382 == 3)
              v381 = 16385;
            if (v381 == 16408)
              goto LABEL_18;
          }
          LOWORD(v451) = 16408;
          while (1)
          {
            v452 = v451 & 0x3FFF;
            if (v452 == 1)
              break;
            if (v452 == 2)
              v453 = 16385;
            else
              v453 = 16387;
            if (v452 == 3)
              v451 = 16385;
            else
              v451 = v453;
            if (v451 == v380)
              goto LABEL_18;
          }
          if (v380 == 16398)
            goto LABEL_18;
          v460 = *(_QWORD *)a4;
          while (1)
          {
            v461 = v460 & 0x3FFF;
            if (v461 == 1)
              break;
            if (v461 == 2)
              v462 = 16385;
            else
              v462 = 16387;
            if ((v460 & 0x4000) != 0)
              v460 = v462;
            else
              v460 = v461 | 0x4000u;
            if (v461 == 40)
              v460 = 16385;
            if (v461 == 3)
              v460 = 16385;
            if (v460 == 16398)
              goto LABEL_18;
          }
          LOWORD(v496) = 16398;
          do
          {
            v497 = v496 & 0x3FFF;
            if (v497 == 1)
              goto LABEL_3438;
            if (v497 == 2)
              v498 = 16385;
            else
              v498 = 16387;
            if (v497 == 3)
              v496 = 16385;
            else
              v496 = v498;
          }
          while (v496 != v380);
        }
        goto LABEL_18;
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v574 = *(_QWORD *)a4;
      while (1)
      {
        v575 = v574 & 0x3FFF;
        if (v575 == 1)
        {
          LOWORD(v596) = 16387;
          do
          {
            v597 = v596 & 0x3FFF;
            if (v597 == 1)
              goto LABEL_3438;
            if (v597 == 2)
              v598 = 16385;
            else
              v598 = 16387;
            if (v597 == 3)
              v596 = 16385;
            else
              v596 = v598;
          }
          while (v596 != *(_QWORD *)a4);
          goto LABEL_18;
        }
        if (v575 == 3)
          goto LABEL_2086;
        v576 = 16385;
        if (v575 != 40)
          break;
LABEL_2087:
        LOWORD(v574) = v576;
        if (v576 == 16387)
          goto LABEL_18;
      }
      if ((v574 & 0x4000) == 0)
      {
        v576 = v575 | 0x4000u;
        goto LABEL_2087;
      }
      if (v575 != 2)
        goto LABEL_18;
LABEL_2086:
      v576 = 16385;
      goto LABEL_2087;
    case 0xE1:
      if ((*((_QWORD *)a2 + 5) & 0xFC000000000000) == 0x54000000000000 || *(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v722 = *(_QWORD *)a4;
      while (2)
      {
        v723 = v722 & 0x3FFF;
        if (v723 != 1)
        {
          if (v723 != 3)
          {
            v724 = 16385;
            if (v723 == 40)
              goto LABEL_2613;
            if ((v722 & 0x4000) == 0)
            {
              v724 = v723 | 0x4000u;
LABEL_2613:
              LOWORD(v722) = v724;
              if (v724 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v723 != 2)
              goto LABEL_18;
          }
          v724 = 16385;
          goto LABEL_2613;
        }
        break;
      }
      LOWORD(v921) = 16387;
      while (1)
      {
        v922 = v921 & 0x3FFF;
        if (v922 == 1)
          goto LABEL_3438;
        if (v922 == 2)
          v923 = 16385;
        else
          v923 = 16387;
        if (v922 == 3)
          v921 = 16385;
        else
          v921 = v923;
        if (v921 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0xE6:
      v580 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((v580 - 1) < 2)
        return;
      if ((_DWORD)v580)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1983A05D4);
      }
      break;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v55 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v55 == 21)
      {
        if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x54000000000000 || *(_BYTE *)(a4 + 8))
          return;
        if (*(_QWORD *)a4 == 16407)
          goto LABEL_18;
        v125 = *(_QWORD *)a4;
        while (1)
        {
          v126 = v125 & 0x3FFF;
          if (v126 == 1)
            break;
          if (v126 == 2)
            v127 = 16385;
          else
            v127 = 16387;
          if ((v125 & 0x4000) != 0)
            v125 = v127;
          else
            v125 = v126 | 0x4000u;
          if (v126 == 40)
            v125 = 16385;
          if (v126 == 3)
            v125 = 16385;
          if (v125 == 16407)
            goto LABEL_18;
        }
        LOWORD(v563) = 16407;
        do
        {
          v564 = v563 & 0x3FFF;
          if (v564 == 1)
            goto LABEL_3438;
          if (v564 == 2)
            v565 = 16385;
          else
            v565 = 16387;
          if (v564 == 3)
            v563 = 16385;
          else
            v563 = v565;
        }
        while (v563 != *(_QWORD *)a4);
        goto LABEL_18;
      }
      if ((_DWORD)v55 || (*((_BYTE *)a2 + 38) & 0xFC) != 0 || *(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v56 = *(_QWORD *)a4;
      while (1)
      {
        v57 = v56 & 0x3FFF;
        if (v57 == 1)
        {
          LOWORD(v487) = 16387;
          do
          {
            v488 = v487 & 0x3FFF;
            if (v488 == 1)
              goto LABEL_3438;
            if (v488 == 2)
              v489 = 16385;
            else
              v489 = 16387;
            if (v488 == 3)
              v487 = 16385;
            else
              v487 = v489;
          }
          while (v487 != *(_QWORD *)a4);
          goto LABEL_18;
        }
        if (v57 == 3)
          goto LABEL_162;
        v58 = 16385;
        if (v57 != 40)
          break;
LABEL_163:
        LOWORD(v56) = v58;
        if (v58 == 16387)
          goto LABEL_18;
      }
      if ((v56 & 0x4000) == 0)
      {
        v58 = v57 | 0x4000u;
        goto LABEL_163;
      }
      if (v57 != 2)
        goto LABEL_18;
LABEL_162:
      v58 = 16385;
      goto LABEL_163;
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x116:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_18;
      v102 = *(_QWORD *)a4;
      while (1)
      {
        v103 = v102 & 0x3FFF;
        if (v103 == 1)
          break;
        if (v103 == 2)
          v104 = 16385;
        else
          v104 = 16387;
        if ((v102 & 0x4000) != 0)
          v102 = v104;
        else
          v102 = v103 | 0x4000u;
        if (v103 == 40)
          v102 = 16385;
        if (v103 == 3)
          v102 = 16385;
        if (v102 == 16407)
          goto LABEL_18;
      }
      LOWORD(v105) = 16407;
      while (1)
      {
        v106 = v105 & 0x3FFF;
        if (v106 == 1)
          goto LABEL_3438;
        if (v106 == 2)
          v107 = 16385;
        else
          v107 = 16387;
        if (v106 == 3)
          v105 = 16385;
        else
          v105 = v107;
        if (v105 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x106:
      if (*(_BYTE *)(a4 + 8))
        goto LABEL_503;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_450;
      v131 = *(_QWORD *)a4;
      while (1)
      {
        v132 = v131 & 0x3FFF;
        if (v132 == 1)
          break;
        if (v132 == 2)
          v133 = 16385;
        else
          v133 = 16387;
        if ((v131 & 0x4000) != 0)
          v131 = v133;
        else
          v131 = v132 | 0x4000u;
        if (v132 == 40)
          v131 = 16385;
        if (v132 == 3)
          v131 = 16385;
        if (v131 == 16407)
        {
LABEL_450:
          v134 = 1;
          goto LABEL_502;
        }
      }
      LOWORD(v142) = 16407;
      while (1)
      {
        v143 = v142 & 0x3FFF;
        if (v143 == 1)
          break;
        if (v143 == 2)
          v144 = 16385;
        else
          v144 = 16387;
        if (v143 == 3)
          v142 = 16385;
        else
          v142 = v144;
        if (v142 == *(_QWORD *)a4)
          goto LABEL_450;
      }
      v134 = 0;
LABEL_502:
      *(_BYTE *)(a4 + 8) = v134;
LABEL_503:
      v148 = *((_QWORD *)a2 + 4);
      v149 = v148;
      if ((v148 & 0x80000000) != 0)
      {
        JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v148) + 0x2000000000000, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        JSC::DFG::Graph::freeze((uint64_t)this, v148 | 0xFFFE000000000000, a3, a4, a5, a6, a7, a8);
        if (!(_DWORD)v148)
          return;
      }
      v156 = *((unsigned __int16 *)a2 + 9);
      switch(v156)
      {
        case 267:
          goto LABEL_2751;
        case 264:
          LOBYTE(v157) = *((_DWORD *)a2 + 19) & 0xF;
          break;
        case 352:
LABEL_2751:
          LOBYTE(v157) = *((_DWORD *)a2 + 21) & 0xF;
          break;
        default:
          v157 = *((_DWORD *)a2 + 18);
          break;
      }
      if (v157 - 4 < 6
        || v157 <= 0x19u && ((1 << v157) & 0x2A00000) != 0)
      {
        v158 = *((unsigned int *)this + 107);
        if (v148 >= v158)
        {
          if ((_DWORD)v158)
          {
            v426 = (unsigned int *)*((_QWORD *)this + 52);
            v427 = 4 * v158;
            do
            {
              v428 = *v426;
              if (v428 < v148)
              {
                if (*((_DWORD *)this + 41) <= (v428 + *((_DWORD *)a2 + 6)))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983A3258);
                }
                if ((v428 & 0x80000000) != 0)
                  v429 = COERCE__INT64((double)v428) + 0x2000000000000;
                else
                  v429 = v428 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v429, v150, v151, v152, v153, v154, v155);
              }
              ++v426;
              v427 -= 4;
            }
            while (v427);
          }
        }
        else
        {
          v159 = 0;
          do
          {
            if (*((_DWORD *)this + 41) <= (v159 + *((_DWORD *)a2 + 6)))
            {
              __break(0xC471u);
              JUMPOUT(0x1983A3220);
            }
            if ((v159 & 0x80000000) != 0)
              v160 = COERCE__INT64((double)v159) + 0x2000000000000;
            else
              v160 = v159 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v160, v150, v151, v152, v153, v154, v155);
            ++v159;
          }
          while (v149 != v159);
        }
      }
      return;
    case 0x107:
      if (*((_DWORD *)a2 + 8))
      {
        v854 = *((_QWORD *)a2 + 3);
        v855 = *((_DWORD *)this + 41);
        v856 = v855 >= v854;
        LODWORD(v857) = v855 - v854;
        if (v856)
          v857 = v857;
        else
          v857 = 0;
        v858 = *((unsigned int *)a2 + 8) - 1;
        do
        {
          if (!v857)
          {
            __break(0xC471u);
            JUMPOUT(0x1983A32A0);
          }
          v859 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v854++) & 0xFF00FFFFFFFFFFFFLL)
                                     + 0x12);
          v860 = v859 == 350 || v858-- == 0;
          --v857;
        }
        while (!v860);
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_18;
      v861 = *(_QWORD *)a4;
      while (1)
      {
        v862 = v861 & 0x3FFF;
        if (v862 == 1)
          break;
        if (v862 == 2)
          v863 = 16385;
        else
          v863 = 16387;
        if ((v861 & 0x4000) != 0)
          v861 = v863;
        else
          v861 = v862 | 0x4000u;
        if (v862 == 40)
          v861 = 16385;
        if (v862 == 3)
          v861 = 16385;
        if (v861 == 16407)
          goto LABEL_18;
      }
      LOWORD(v873) = 16407;
      while (1)
      {
        v874 = v873 & 0x3FFF;
        if (v874 == 1)
          goto LABEL_3438;
        if (v874 == 2)
          v875 = 16385;
        else
          v875 = 16387;
        if (v874 == 3)
          v873 = 16385;
        else
          v873 = v875;
        if (v873 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x108:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v798 = *(_QWORD *)a4;
      while (2)
      {
        v799 = v798 & 0x3FFF;
        if (v799 != 1)
        {
          if (v799 != 3)
          {
            v800 = 16385;
            if (v799 == 40)
              goto LABEL_2907;
            if ((v798 & 0x4000) == 0)
            {
              v800 = v799 | 0x4000u;
LABEL_2907:
              LOWORD(v798) = v800;
              if (v800 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v799 != 2)
              goto LABEL_18;
          }
          v800 = 16385;
          goto LABEL_2907;
        }
        break;
      }
      LOWORD(v827) = 16387;
      while (1)
      {
        v828 = v827 & 0x3FFF;
        if (v828 == 1)
          goto LABEL_3438;
        if (v828 == 2)
          v829 = 16385;
        else
          v829 = 16387;
        if (v828 == 3)
          v827 = 16385;
        else
          v827 = v829;
        if (v827 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x109:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_18;
      v315 = *(_QWORD *)a4;
      while (1)
      {
        v316 = v315 & 0x3FFF;
        if (v316 == 1)
          break;
        if (v316 == 2)
          v317 = 16385;
        else
          v317 = 16387;
        if ((v315 & 0x4000) != 0)
          v315 = v317;
        else
          v315 = v316 | 0x4000u;
        if (v316 == 40)
          v315 = 16385;
        if (v316 == 3)
          v315 = 16385;
        if (v315 == 16407)
          goto LABEL_18;
      }
      LOWORD(v324) = 16407;
      while (1)
      {
        v325 = v324 & 0x3FFF;
        if (v325 == 1)
          goto LABEL_3438;
        if (v325 == 2)
          v326 = 16385;
        else
          v326 = 16387;
        if (v325 == 3)
          v324 = 16385;
        else
          v324 = v326;
        if (v324 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x10A:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4017uLL);
      v958 = *((unsigned int *)a2 + 20);
      if ((v958 & 0x80000000) != 0)
        v959 = COERCE__INT64((double)v958) + 0x2000000000000;
      else
        v959 = v958 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v959, v952, v953, v954, v955, v956, v957);
      return;
    case 0x10B:
      if (*(_BYTE *)(a4 + 8))
        goto LABEL_1729;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_1648;
      v444 = *(_QWORD *)a4;
      while (1)
      {
        v445 = v444 & 0x3FFF;
        if (v445 == 1)
          break;
        if (v445 == 2)
          v446 = 16385;
        else
          v446 = 16387;
        if ((v444 & 0x4000) != 0)
          v444 = v446;
        else
          v444 = v445 | 0x4000u;
        if (v445 == 40)
          v444 = 16385;
        if (v445 == 3)
          v444 = 16385;
        if (v444 == 16407)
        {
LABEL_1648:
          v447 = 1;
          goto LABEL_1728;
        }
      }
      LOWORD(v454) = 16407;
      while (1)
      {
        v455 = v454 & 0x3FFF;
        if (v455 == 1)
          break;
        if (v455 == 2)
          v456 = 16385;
        else
          v456 = 16387;
        if (v455 == 3)
          v454 = 16385;
        else
          v454 = v456;
        if (v454 == *(_QWORD *)a4)
          goto LABEL_1648;
      }
      v447 = 0;
LABEL_1728:
      *(_BYTE *)(a4 + 8) = v447;
LABEL_1729:
      v467 = (uint64_t *)*((_QWORD *)a2 + 9);
      v468 = *v467;
      v469 = *(unsigned int *)(*v467 + 8);
      if ((v469 & 0x80000000) != 0)
        v470 = COERCE__INT64((double)v469) + 0x2000000000000;
      else
        v470 = v469 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v470, a3, a4, a5, a6, a7, a8);
      v478 = *((unsigned __int16 *)a2 + 9);
      switch(v478)
      {
        case 267:
          goto LABEL_3348;
        case 264:
          LOBYTE(v479) = *((_DWORD *)a2 + 19) & 0xF;
          break;
        case 352:
LABEL_3348:
          LOBYTE(v479) = *((_DWORD *)a2 + 21) & 0xF;
          break;
        default:
          v479 = *((_DWORD *)a2 + 18);
          break;
      }
      if (v479 - 4 < 6
        || ((v521 = v479 > 0x19u, v946 = (1 << v479) & 0x2A00000, !v521)
          ? (v947 = v946 == 0)
          : (v947 = 1),
            !v947))
      {
        v480 = *((unsigned int *)this + 107);
        if (v480 > v469)
        {
          if ((_DWORD)v469)
          {
            v638 = 0;
            v639 = v468 + 16;
            do
            {
              if ((v638 & 0x80000000) != 0)
                v640 = COERCE__INT64((double)v638) + 0x2000000000000;
              else
                v640 = v638 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v640, v472, v473, v474, v475, v476, v477);
              if ((*(_BYTE *)(v468 + 4) & 0xE) == 6)
                v647 = *(_QWORD *)(v639 + 8 * v638) + 0x2000000000000;
              else
                v647 = *(_QWORD *)(v639 + 8 * v638);
              JSC::DFG::Graph::freeze((uint64_t)this, v647, v641, v642, v643, v644, v645, v646);
              ++v638;
            }
            while (v469 != v638);
          }
        }
        else
        {
          v1001 = 0uLL;
          if ((_DWORD)v480)
          {
            v481 = 0;
            v482 = 0;
            v483 = (unsigned int *)*((_QWORD *)this + 52);
            v484 = 4 * v480;
            do
            {
              v485 = *v483;
              LODWORD(v991) = v485;
              if (v485 < v469)
              {
                if (v482 == DWORD2(v1001))
                {
                  v486 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1001, v482 + 1, (unint64_t)&v991);
                  v481 = (unsigned int *)v1001;
                  *(_DWORD *)(v1001 + 4 * HIDWORD(v1001)) = *v486;
                }
                else
                {
                  v481[v482] = v485;
                }
                v482 = ++HIDWORD(v1001);
              }
              ++v483;
              v484 -= 4;
            }
            while (v484);
            if (v482)
            {
              v602 = v468 + 16;
              v603 = 4 * v482;
              do
              {
                v604 = *v481;
                if ((v604 & 0x80000000) != 0)
                  v605 = COERCE__INT64((double)v604) + 0x2000000000000;
                else
                  v605 = v604 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v605, v472, v473, v474, v475, v476, v477);
                if ((*(_BYTE *)(v468 + 4) & 0xE) == 6)
                  v612 = *(_QWORD *)(v602 + 8 * v604) + 0x2000000000000;
                else
                  v612 = *(_QWORD *)(v602 + 8 * v604);
                JSC::DFG::Graph::freeze((uint64_t)this, v612, v606, v607, v608, v609, v610, v611);
                ++v481;
                v603 -= 4;
              }
              while (v603);
              v481 = (unsigned int *)v1001;
            }
            if (v481)
            {
              *(_QWORD *)&v1001 = 0;
              DWORD2(v1001) = 0;
              WTF::fastFree((unint64_t)v481, v471, v472, v473, v474, v475, v476, v477);
            }
          }
        }
      }
      return;
    case 0x10D:
      v769 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v769 == 1)
        goto LABEL_2797;
      if ((_DWORD)v769)
      {
        if ((_DWORD)v769 != 52)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x1983A2BA8);
        }
LABEL_2797:
        if (*(_BYTE *)(a4 + 8))
          return;
        if (*(_QWORD *)a4 == 16407)
          goto LABEL_18;
        v770 = *(_QWORD *)a4;
        while (1)
        {
          v771 = v770 & 0x3FFF;
          if (v771 == 1)
            break;
          if (v771 == 2)
            v772 = 16385;
          else
            v772 = 16387;
          if ((v770 & 0x4000) != 0)
            v770 = v772;
          else
            v770 = v771 | 0x4000u;
          if (v771 == 40)
            v770 = 16385;
          if (v771 == 3)
            v770 = 16385;
          if (v770 == 16407)
            goto LABEL_18;
        }
        LOWORD(v848) = 16407;
        do
        {
          v849 = v848 & 0x3FFF;
          if (v849 == 1)
            goto LABEL_3438;
          if (v849 == 2)
            v850 = 16385;
          else
            v850 = 16387;
          if (v849 == 3)
            v848 = 16385;
          else
            v848 = v850;
        }
        while (v848 != *(_QWORD *)a4);
        goto LABEL_18;
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v892 = *(_QWORD *)a4;
      while (1)
      {
        v893 = v892 & 0x3FFF;
        if (v893 == 1)
        {
          LOWORD(v903) = 16387;
          do
          {
            v904 = v903 & 0x3FFF;
            if (v904 == 1)
              goto LABEL_3438;
            if (v904 == 2)
              v905 = 16385;
            else
              v905 = 16387;
            if (v904 == 3)
              v903 = 16385;
            else
              v903 = v905;
          }
          while (v903 != *(_QWORD *)a4);
          goto LABEL_18;
        }
        if (v893 == 3)
          goto LABEL_3264;
        v894 = 16385;
        if (v893 != 40)
          break;
LABEL_3265:
        LOWORD(v892) = v894;
        if (v894 == 16387)
          goto LABEL_18;
      }
      if ((v892 & 0x4000) == 0)
      {
        v894 = v893 | 0x4000u;
        goto LABEL_3265;
      }
      if (v893 != 2)
        goto LABEL_18;
LABEL_3264:
      v894 = 16385;
      goto LABEL_3265;
    case 0x10F:
      v948 = *((_QWORD *)a2 + 3);
      v949 = v948 & 0xFF00FFFFFFFFFFFFLL;
      v950 = v948 & 0xFC000000000000;
      if (v949)
        v951 = v950 == 0x54000000000000;
      else
        v951 = 1;
      if (!v951)
        break;
      goto LABEL_3493;
    case 0x114:
      if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, a3, a4, a5, a6, a7, a8) & 1) == 0)
        break;
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_18;
      v508 = *(_QWORD *)a4;
      while (1)
      {
        v509 = v508 & 0x3FFF;
        if (v509 == 1)
          break;
        if (v509 == 2)
          v510 = 16385;
        else
          v510 = 16387;
        if ((v508 & 0x4000) != 0)
          v508 = v510;
        else
          v508 = v509 | 0x4000u;
        if (v509 == 40)
          v508 = 16385;
        if (v509 == 3)
          v508 = 16385;
        if (v508 == 16407)
          goto LABEL_18;
      }
      LOWORD(v531) = 16407;
      while (1)
      {
        v532 = v531 & 0x3FFF;
        if (v532 == 1)
          goto LABEL_3438;
        if (v532 == 2)
          v533 = 16385;
        else
          v533 = 16387;
        if (v532 == 3)
          v531 = 16385;
        else
          v531 = v533;
        if (v531 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x115:
      v511 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v511 == 352)
        return;
      if (v511 == 349)
      {
LABEL_3493:
        JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4017uLL);
        return;
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v512 = *(_QWORD *)a4;
      while (2)
      {
        v513 = v512 & 0x3FFF;
        if (v513 == 1)
        {
          LOWORD(v551) = 16387;
          do
          {
            v552 = v551 & 0x3FFF;
            if (v552 == 1)
              goto LABEL_3438;
            if (v552 == 2)
              v553 = 16385;
            else
              v553 = 16387;
            if (v552 == 3)
              v551 = 16385;
            else
              v551 = v553;
          }
          while (v551 != *(_QWORD *)a4);
          goto LABEL_18;
        }
        if (v513 == 3)
          goto LABEL_1851;
        v514 = 16385;
        if (v513 != 40)
        {
          if ((v512 & 0x4000) != 0)
          {
            if (v513 != 2)
              goto LABEL_18;
LABEL_1851:
            v514 = 16385;
          }
          else
          {
            v514 = v513 | 0x4000u;
          }
        }
        LOWORD(v512) = v514;
        if (v514 == 16387)
          goto LABEL_18;
        continue;
      }
    case 0x13E:
    case 0x145:
      v208 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v208 > 0x34)
        goto LABEL_3531;
      if (((1 << v208) & 0x12026000400002) != 0)
        return;
      if (((1 << v208) & 0x101) == 0)
      {
        if (v208 != 24)
        {
LABEL_3531:
          __break(0xC471u);
          JUMPOUT(0x1983A2F34);
        }
        if (*(_BYTE *)(a4 + 8))
          return;
        if (*(_QWORD *)a4 == 16424)
          goto LABEL_18;
        v808 = *(_QWORD *)a4;
        while (1)
        {
          v809 = v808 & 0x3FFF;
          if (v809 == 1)
            break;
          if (v809 == 2)
            v810 = 16385;
          else
            v810 = 16387;
          if ((v808 & 0x4000) != 0)
            v808 = v810;
          else
            v808 = v809 | 0x4000u;
          if (v809 == 40)
            v808 = 16385;
          if (v809 == 3)
            v808 = 16385;
          if (v808 == 16424)
            goto LABEL_18;
        }
        LOWORD(v815) = 16424;
        do
        {
          v816 = v815 & 0x3FFF;
          switch(v816)
          {
            case 1:
              goto LABEL_3438;
            case 2:
              v817 = 16385;
              break;
            case 40:
              v817 = 16385;
              break;
            default:
              v817 = 16387;
              break;
          }
          if (v816 == 3)
            v815 = 16385;
          else
            v815 = v817;
        }
        while (v815 != *(_QWORD *)a4);
        goto LABEL_18;
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v209 = *(_QWORD *)a4;
      while (1)
      {
        v210 = v209 & 0x3FFF;
        if (v210 == 1)
        {
          LOWORD(v414) = 16387;
          do
          {
            v415 = v414 & 0x3FFF;
            if (v415 == 1)
              goto LABEL_3438;
            if (v415 == 2)
              v416 = 16385;
            else
              v416 = 16387;
            if (v415 == 3)
              v414 = 16385;
            else
              v414 = v416;
          }
          while (v414 != *(_QWORD *)a4);
          goto LABEL_18;
        }
        if (v210 == 3)
          goto LABEL_699;
        v211 = 16385;
        if (v210 != 40)
          break;
LABEL_700:
        LOWORD(v209) = v211;
        if (v211 == 16387)
          goto LABEL_18;
      }
      if ((v209 & 0x4000) == 0)
      {
        v211 = v210 | 0x4000u;
        goto LABEL_700;
      }
      if (v210 != 2)
        goto LABEL_18;
LABEL_699:
      v211 = 16385;
      goto LABEL_700;
    case 0x13F:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x54000000000000 || *(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v499 = *(_QWORD *)a4;
      while (2)
      {
        v500 = v499 & 0x3FFF;
        if (v500 != 1)
        {
          if (v500 != 3)
          {
            v501 = 16385;
            if (v500 == 40)
              goto LABEL_1796;
            if ((v499 & 0x4000) == 0)
            {
              v501 = v500 | 0x4000u;
LABEL_1796:
              LOWORD(v499) = v501;
              if (v501 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v500 != 2)
              goto LABEL_18;
          }
          v501 = 16385;
          goto LABEL_1796;
        }
        break;
      }
      LOWORD(v719) = 16387;
      while (1)
      {
        v720 = v719 & 0x3FFF;
        if (v720 == 1)
          goto LABEL_3438;
        if (v720 == 2)
          v721 = 16385;
        else
          v721 = 16387;
        if (v720 == 3)
          v719 = 16385;
        else
          v719 = v721;
        if (v719 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x142:
    case 0x143:
      if ((*((_BYTE *)a2 + 30) & 0xFC) != 0 || *(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v299 = *(_QWORD *)a4;
      while (2)
      {
        v300 = v299 & 0x3FFF;
        if (v300 != 1)
        {
          if (v300 != 3)
          {
            v301 = 16385;
            if (v300 == 40)
              goto LABEL_1060;
            if ((v299 & 0x4000) == 0)
            {
              v301 = v300 | 0x4000u;
LABEL_1060:
              LOWORD(v299) = v301;
              if (v301 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v300 != 2)
              goto LABEL_18;
          }
          v301 = 16385;
          goto LABEL_1060;
        }
        break;
      }
      LOWORD(v909) = 16387;
      while (1)
      {
        v910 = v909 & 0x3FFF;
        if (v910 == 1)
          goto LABEL_3438;
        if (v910 == 2)
          v911 = 16385;
        else
          v911 = 16387;
        if (v910 == 3)
          v909 = 16385;
        else
          v909 = v911;
        if (v909 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x144:
    case 0x15A:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x163:
    case 0x16B:
      goto LABEL_3493;
    case 0x146:
      v972 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v972 == 28)
        return;
      if ((_DWORD)v972)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1983A2F90);
      }
      break;
    case 0x14A:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v696 = *(_QWORD *)a4;
      while (2)
      {
        v697 = v696 & 0x3FFF;
        if (v697 != 1)
        {
          if (v697 != 3)
          {
            v698 = 16385;
            if (v697 == 40)
              goto LABEL_2508;
            if ((v696 & 0x4000) == 0)
            {
              v698 = v697 | 0x4000u;
LABEL_2508:
              LOWORD(v696) = v698;
              if (v698 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v697 != 2)
              goto LABEL_18;
          }
          v698 = 16385;
          goto LABEL_2508;
        }
        break;
      }
      LOWORD(v742) = 16387;
      while (1)
      {
        v743 = v742 & 0x3FFF;
        if (v743 == 1)
          goto LABEL_3438;
        if (v743 == 2)
          v744 = 16385;
        else
          v744 = 16387;
        if (v743 == 3)
          v742 = 16385;
        else
          v742 = v744;
        if (v742 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x158:
      v89 = *((unsigned int *)a2 + 18);
      v90 = 33;
      goto LABEL_280;
    case 0x159:
      v167 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 40);
      if ((v167 & 1) != 0)
        v168 = (v167 >> 1) & 3;
      else
        v168 = *(unsigned __int8 *)(v167 + 4);
      v169 = *(unsigned __int8 *)(a4 + 8);
      if (v168 == 2)
        goto LABEL_545;
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16422)
        goto LABEL_2690;
      v739 = *(_QWORD *)a4;
      while (1)
      {
        v740 = v739 & 0x3FFF;
        if (v740 == 1)
          break;
        if (v740 == 2)
          v741 = 16385;
        else
          v741 = 16387;
        if ((v739 & 0x4000) != 0)
          v739 = v741;
        else
          v739 = v740 | 0x4000u;
        if (v740 == 40)
          v739 = 16385;
        if (v740 == 3)
          v739 = 16385;
        if (v739 == 16422)
        {
LABEL_2690:
          v169 = 1;
          goto LABEL_2814;
        }
      }
      LOWORD(v760) = 16422;
      while (1)
      {
        v761 = v760 & 0x3FFF;
        if (v761 == 1)
          break;
        if (v761 == 2)
          v762 = 16385;
        else
          v762 = 16387;
        if (v761 == 40)
          v762 = 16385;
        if (v761 == 3)
          v760 = 16385;
        else
          v760 = v762;
        if (v760 == *(_QWORD *)a4)
          goto LABEL_2690;
      }
      v169 = 0;
LABEL_2814:
      *(_BYTE *)(a4 + 8) = v169;
LABEL_545:
      if (v169)
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_18;
      v170 = *(_QWORD *)a4;
      while (1)
      {
        v171 = v170 & 0x3FFF;
        if (v171 == 1)
          break;
        if (v171 == 2)
          v172 = 16385;
        else
          v172 = 16387;
        if ((v170 & 0x4000) != 0)
          v170 = v172;
        else
          v170 = v171 | 0x4000u;
        if (v171 == 40)
          v170 = 16385;
        if (v171 == 3)
          v170 = 16385;
        if (v170 == 16407)
          goto LABEL_18;
      }
      LOWORD(v182) = 16407;
      while (1)
      {
        v183 = v182 & 0x3FFF;
        if (v183 == 1)
          goto LABEL_3438;
        if (v183 == 2)
          v184 = 16385;
        else
          v184 = 16387;
        if (v183 == 3)
          v182 = 16385;
        else
          v182 = v184;
        if (v182 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x15B:
    case 0x161:
    case 0x162:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_18;
      v408 = *(_QWORD *)a4;
      while (1)
      {
        v409 = v408 & 0x3FFF;
        if (v409 == 1)
          break;
        if (v409 == 2)
          v410 = 16385;
        else
          v410 = 16387;
        if ((v408 & 0x4000) != 0)
          v408 = v410;
        else
          v408 = v409 | 0x4000u;
        if (v409 == 40)
          v408 = 16385;
        if (v409 == 3)
          v408 = 16385;
        if (v408 == 16407)
          goto LABEL_18;
      }
      LOWORD(v420) = 16407;
      while (1)
      {
        v421 = v420 & 0x3FFF;
        if (v421 == 1)
          goto LABEL_3438;
        if (v421 == 2)
          v422 = 16385;
        else
          v422 = 16387;
        if (v421 == 3)
          v420 = 16385;
        else
          v420 = v422;
        if (v420 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x165:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, ((unint64_t)*((unsigned int *)a2 + 18) << 15) | 0x14);
      v54 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v44 = &v1002;
      goto LABEL_3405;
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
      v116 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 112);
      if ((v116 & 1) != 0)
        v117 = (v116 >> 1) & 3;
      else
        v117 = *(unsigned __int8 *)(v116 + 4);
      v118 = *(unsigned __int8 *)(a4 + 8);
      if (v117 == 2)
        goto LABEL_375;
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16422)
        goto LABEL_1340;
      v368 = *(_QWORD *)a4;
      while (1)
      {
        v369 = v368 & 0x3FFF;
        if (v369 == 1)
          break;
        if (v369 == 2)
          v370 = 16385;
        else
          v370 = 16387;
        if ((v368 & 0x4000) != 0)
          v368 = v370;
        else
          v368 = v369 | 0x4000u;
        if (v369 == 40)
          v368 = 16385;
        if (v369 == 3)
          v368 = 16385;
        if (v368 == 16422)
        {
LABEL_1340:
          v118 = 1;
          goto LABEL_1455;
        }
      }
      LOWORD(v387) = 16422;
      while (1)
      {
        v388 = v387 & 0x3FFF;
        if (v388 == 1)
          break;
        if (v388 == 2)
          v389 = 16385;
        else
          v389 = 16387;
        if (v388 == 40)
          v389 = 16385;
        if (v388 == 3)
          v387 = 16385;
        else
          v387 = v389;
        if (v387 == *(_QWORD *)a4)
          goto LABEL_1340;
      }
      v118 = 0;
LABEL_1455:
      *(_BYTE *)(a4 + 8) = v118;
LABEL_375:
      if (v118)
        return;
      if (*(_QWORD *)a4 == 16407)
        goto LABEL_18;
      v119 = *(_QWORD *)a4;
      while (1)
      {
        v120 = v119 & 0x3FFF;
        if (v120 == 1)
          break;
        if (v120 == 2)
          v121 = 16385;
        else
          v121 = 16387;
        if ((v119 & 0x4000) != 0)
          v119 = v121;
        else
          v119 = v120 | 0x4000u;
        if (v120 == 40)
          v119 = 16385;
        if (v120 == 3)
          v119 = 16385;
        if (v119 == 16407)
          goto LABEL_18;
      }
      LOWORD(v122) = 16407;
      while (1)
      {
        v123 = v122 & 0x3FFF;
        if (v123 == 1)
          goto LABEL_3438;
        if (v123 == 2)
          v124 = 16385;
        else
          v124 = 16387;
        if (v123 == 3)
          v122 = 16385;
        else
          v122 = v124;
        if (v122 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x176:
    case 0x177:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16424)
        goto LABEL_18;
      v95 = *(_QWORD *)a4;
      while (1)
      {
        v96 = v95 & 0x3FFF;
        if (v96 == 1)
          break;
        if (v96 == 2)
          v97 = 16385;
        else
          v97 = 16387;
        if ((v95 & 0x4000) != 0)
          v95 = v97;
        else
          v95 = v96 | 0x4000u;
        if (v96 == 40)
          v95 = 16385;
        if (v96 == 3)
          v95 = 16385;
        if (v95 == 16424)
          goto LABEL_18;
      }
      LOWORD(v98) = 16424;
      while (1)
      {
        v99 = v98 & 0x3FFF;
        switch(v99)
        {
          case 1:
            goto LABEL_3438;
          case 2:
            v100 = 16385;
            break;
          case 40:
            v100 = 16385;
            break;
          default:
            v100 = 16387;
            break;
        }
        if (v99 == 3)
          v98 = 16385;
        else
          v98 = v100;
        if (v98 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17D:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4022uLL);
      return;
    case 0x17E:
    case 0x17F:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4008uLL);
      return;
    case 0x180:
    case 0x182:
      if ((_DWORD)v11 != 386)
      {
        v254 = 12;
        goto LABEL_877;
      }
      v350 = *((unsigned __int8 *)a2 + 80);
      if (v350 == 2)
      {
        if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1983A3260);
        }
        if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000) == 0x20000000000000)
          return;
      }
      else if (v350 == 1)
      {
        v254 = 11;
LABEL_877:
        v255 = BYTE2(*((_DWORD *)a2 + 18));
        if (*((_DWORD *)a2 + 18) == 9)
        {
          if (v255 <= 1)
          {
            v256 = *((_DWORD *)a2 + 6);
            v257 = *((_DWORD *)this + 41);
            if (v257 <= v256)
            {
              __break(0xC471u);
              JUMPOUT(0x1983A3250);
            }
            if (v257 <= v256 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19839E674);
            }
            return;
          }
LABEL_3416:
          if (*(_BYTE *)(a4 + 8))
            return;
          if (*(_QWORD *)a4 != 16387)
          {
            v933 = *(_QWORD *)a4;
            while (1)
            {
              v934 = v933 & 0x3FFF;
              if (v934 == 1)
              {
                LOWORD(v936) = 16387;
                do
                {
                  v937 = v936 & 0x3FFF;
                  if (v937 == 1)
                    goto LABEL_3438;
                  if (v937 == 2)
                    v938 = 16385;
                  else
                    v938 = 16387;
                  if (v937 == 3)
                    v936 = 16385;
                  else
                    v936 = v938;
                }
                while (v936 != *(_QWORD *)a4);
                goto LABEL_18;
              }
              if (v934 == 3)
                goto LABEL_3424;
              v935 = 16385;
              if (v934 != 40)
                break;
LABEL_3425:
              LOWORD(v933) = v935;
              if (v935 == 16387)
                goto LABEL_18;
            }
            if ((v933 & 0x4000) == 0)
            {
              v935 = v934 | 0x4000u;
              goto LABEL_3425;
            }
            if (v934 != 2)
              goto LABEL_18;
LABEL_3424:
            v935 = 16385;
            goto LABEL_3425;
          }
        }
        else
        {
          switch(*((_DWORD *)a2 + 18))
          {
            case 3u:
              if (*(_BYTE *)(a4 + 8))
                return;
              if (*(_QWORD *)a4 == 16424)
                goto LABEL_18;
              v693 = *(_QWORD *)a4;
              break;
            case 7u:
              if (v255 > 1)
                goto LABEL_3416;
              v960 = *((_QWORD *)a2 + 3);
              v961 = *((_DWORD *)this + 41);
              if (v961 <= v960)
              {
                __break(0xC471u);
                JUMPOUT(0x1983A345CLL);
              }
              if (v961 <= (int)v960 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1983A3464);
              }
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1019, v254, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
              v44 = &v1018;
              goto LABEL_3404;
            case 8u:
              if (v255 > 1)
                goto LABEL_3416;
              v895 = *((_DWORD *)a2 + 6);
              v896 = *((_DWORD *)this + 41);
              if (v896 <= v895)
              {
                __break(0xC471u);
                JUMPOUT(0x1983A32B8);
              }
              if (v896 <= v895 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1983A2410);
              }
              return;
            case 0xAu:
              if (v255 >= 2)
                goto LABEL_3416;
              return;
            default:
              goto LABEL_3416;
          }
          while (1)
          {
            v694 = v693 & 0x3FFF;
            if (v694 == 1)
              break;
            if (v694 == 2)
              v695 = 16385;
            else
              v695 = 16387;
            if ((v693 & 0x4000) != 0)
              v693 = v695;
            else
              v693 = v694 | 0x4000u;
            if (v694 == 40)
              v693 = 16385;
            if (v694 == 3)
              v693 = 16385;
            if (v693 == 16424)
              goto LABEL_18;
          }
          LOWORD(v821) = 16424;
          do
          {
            v822 = v821 & 0x3FFF;
            switch(v822)
            {
              case 1:
                goto LABEL_3438;
              case 2:
                v823 = 16385;
                break;
              case 40:
                v823 = 16385;
                break;
              default:
                v823 = 16387;
                break;
            }
            if (v822 == 3)
              v821 = 16385;
            else
              v821 = v823;
          }
          while (v821 != *(_QWORD *)a4);
        }
LABEL_18:
        v15 = 1;
LABEL_3439:
        *(_BYTE *)(a4 + 8) = v15;
        return;
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v699 = *(_QWORD *)a4;
      while (1)
      {
        v700 = v699 & 0x3FFF;
        if (v700 == 1)
        {
          LOWORD(v751) = 16387;
          do
          {
            v752 = v751 & 0x3FFF;
            if (v752 == 1)
              goto LABEL_3438;
            if (v752 == 2)
              v753 = 16385;
            else
              v753 = 16387;
            if (v752 == 3)
              v751 = 16385;
            else
              v751 = v753;
          }
          while (v751 != *(_QWORD *)a4);
          goto LABEL_18;
        }
        if (v700 == 3)
          goto LABEL_2520;
        v701 = 16385;
        if (v700 != 40)
          break;
LABEL_2521:
        LOWORD(v699) = v701;
        if (v701 == 16387)
          goto LABEL_18;
      }
      if ((v699 & 0x4000) == 0)
      {
        v701 = v700 | 0x4000u;
        goto LABEL_2521;
      }
      if (v700 != 2)
        goto LABEL_18;
LABEL_2520:
      v701 = 16385;
      goto LABEL_2521;
    case 0x184:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v331 = *(_QWORD *)a4;
      while (2)
      {
        v332 = v331 & 0x3FFF;
        if (v332 != 1)
        {
          if (v332 != 3)
          {
            v333 = 16385;
            if (v332 == 40)
              goto LABEL_1185;
            if ((v331 & 0x4000) == 0)
            {
              v333 = v332 | 0x4000u;
LABEL_1185:
              LOWORD(v331) = v333;
              if (v333 == 16387)
                goto LABEL_18;
              continue;
            }
            if (v332 != 2)
              goto LABEL_18;
          }
          v333 = 16385;
          goto LABEL_1185;
        }
        break;
      }
      LOWORD(v374) = 16387;
      while (1)
      {
        v375 = v374 & 0x3FFF;
        if (v375 == 1)
          goto LABEL_3438;
        if (v375 == 2)
          v376 = 16385;
        else
          v376 = 16387;
        if (v375 == 3)
          v374 = 16385;
        else
          v374 = v376;
        if (v374 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x187:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16387)
        goto LABEL_18;
      v621 = *(_QWORD *)a4;
      while (2)
      {
        v622 = v621 & 0x3FFF;
        if (v622 == 1)
        {
          LOWORD(v660) = 16387;
          while (1)
          {
            v661 = v660 & 0x3FFF;
            if (v661 == 1)
              break;
            if (v661 == 2)
              v662 = 16385;
            else
              v662 = 16387;
            if (v661 == 3)
              v660 = 16385;
            else
              v660 = v662;
            if (v660 == *(_QWORD *)a4)
              goto LABEL_18;
          }
LABEL_3438:
          v15 = 0;
          goto LABEL_3439;
        }
        if (v622 == 3)
          goto LABEL_2248;
        v623 = 16385;
        if (v622 != 40)
        {
          if ((v621 & 0x4000) != 0)
          {
            if (v622 != 2)
              goto LABEL_18;
LABEL_2248:
            v623 = 16385;
          }
          else
          {
            v623 = v622 | 0x4000u;
          }
        }
        LOWORD(v621) = v623;
        if (v623 == 16387)
          goto LABEL_18;
        continue;
      }
    case 0x18C:
      v796 = (*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000;
      v797 = 16413;
      goto LABEL_2895;
    case 0x190:
      if (*((_DWORD *)a2 + 18))
        v927 = 16412;
      else
        v927 = 16411;
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, v927);
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v1000, 48, v927, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v44 = &v999;
      goto LABEL_3404;
    case 0x191:
      v44 = &v998;
      goto LABEL_3404;
    case 0x192:
      v44 = &v997;
      goto LABEL_3404;
    case 0x193:
      v44 = &v996;
      goto LABEL_3404;
    case 0x194:
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16412)
        goto LABEL_18;
      v675 = *(_QWORD *)a4;
      while (1)
      {
        v676 = v675 & 0x3FFF;
        if (v676 == 1)
          break;
        if (v676 == 2)
          v677 = 16385;
        else
          v677 = 16387;
        if ((v675 & 0x4000) != 0)
          v675 = v677;
        else
          v675 = v676 | 0x4000u;
        if (v676 == 40)
          v675 = 16385;
        if (v676 == 3)
          v675 = 16385;
        if (v675 == 16412)
          goto LABEL_18;
      }
      LOWORD(v687) = 16412;
      while (1)
      {
        v688 = v687 & 0x3FFF;
        if (v688 == 1)
          goto LABEL_3438;
        if (v688 == 2)
          v689 = 16385;
        else
          v689 = 16387;
        if (v688 == 3)
          v687 = 16385;
        else
          v687 = v689;
        if (v687 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x195:
      v294 = *((_DWORD *)a2 + 6);
      v295 = *((_DWORD *)this + 41);
      if (v295 <= v294)
      {
        __break(0xC471u);
        JUMPOUT(0x1983A3240);
      }
      if (v295 <= v294 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1983A3248);
      }
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16411)
        goto LABEL_18;
      v296 = *(_QWORD *)a4;
      while (1)
      {
        v297 = v296 & 0x3FFF;
        if (v297 == 1)
          break;
        if (v297 == 2)
          v298 = 16385;
        else
          v298 = 16387;
        if ((v296 & 0x4000) != 0)
          v296 = v298;
        else
          v296 = v297 | 0x4000u;
        if (v297 == 40)
          v296 = 16385;
        if (v297 == 3)
          v296 = 16385;
        if (v296 == 16411)
          goto LABEL_18;
      }
      LOWORD(v309) = 16411;
      while (1)
      {
        v310 = v309 & 0x3FFF;
        if (v310 == 1)
          goto LABEL_3438;
        if (v310 == 2)
          v311 = 16385;
        else
          v311 = 16387;
        if (v310 == 3)
          v309 = 16385;
        else
          v309 = v311;
        if (v309 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x196:
      v796 = (*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000;
      v797 = 16411;
LABEL_2895:
      if (v796)
        v91 = v797;
      else
        v91 = v797 + 1;
      goto LABEL_281;
    case 0x198:
      if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x2C000000000000)
        JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4028uLL);
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4020uLL);
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v995, 55, 16416, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v54 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v44 = &v994;
      goto LABEL_3405;
    case 0x199:
      v734 = *((_DWORD *)a2 + 6);
      v735 = *((_DWORD *)this + 41);
      if (v735 <= v734)
      {
        __break(0xC471u);
        JUMPOUT(0x1983A3288);
      }
      if (v735 <= v734 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1983A3290);
      }
      if (v735 <= v734 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1983A3298);
      }
      if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * (v734 + 1)) & 0xFC000000000000) != 0x2C000000000000)
        JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4028uLL);
      if (*(_BYTE *)(a4 + 8))
        return;
      if (*(_QWORD *)a4 == 16415)
        goto LABEL_18;
      v736 = *(_QWORD *)a4;
      while (1)
      {
        v737 = v736 & 0x3FFF;
        if (v737 == 1)
          break;
        if (v737 == 2)
          v738 = 16385;
        else
          v738 = 16387;
        if ((v736 & 0x4000) != 0)
          v736 = v738;
        else
          v736 = v737 | 0x4000u;
        if (v737 == 40)
          v736 = 16385;
        if (v737 == 3)
          v736 = 16385;
        if (v736 == 16415)
          goto LABEL_18;
      }
      LOWORD(v757) = 16415;
      while (1)
      {
        v758 = v757 & 0x3FFF;
        if (v758 == 1)
          goto LABEL_3438;
        if (v758 == 2)
          v759 = 16385;
        else
          v759 = 16387;
        if (v758 == 3)
          v757 = 16385;
        else
          v757 = v759;
        if (v757 == *(_QWORD *)a4)
          goto LABEL_18;
      }
    case 0x1A0:
      v204 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
      if (!v204)
      {
        if (*(_BYTE *)(a4 + 8))
          return;
        if (*(_QWORD *)a4 == 16387)
          goto LABEL_18;
        v205 = *(_QWORD *)a4;
        while (1)
        {
          v206 = v205 & 0x3FFF;
          if (v206 == 1)
          {
            LOWORD(v291) = 16387;
            do
            {
              v292 = v291 & 0x3FFF;
              if (v292 == 1)
                goto LABEL_3438;
              if (v292 == 2)
                v293 = 16385;
              else
                v293 = 16387;
              if (v292 == 3)
                v291 = 16385;
              else
                v291 = v293;
            }
            while (v291 != *(_QWORD *)a4);
            goto LABEL_18;
          }
          if (v206 == 3)
            goto LABEL_684;
          v207 = 16385;
          if (v206 != 40)
            break;
LABEL_685:
          LOWORD(v205) = v207;
          if (v207 == 16387)
            goto LABEL_18;
        }
        if ((v205 & 0x4000) == 0)
        {
          v207 = v206 | 0x4000u;
          goto LABEL_685;
        }
        if (v206 != 2)
          goto LABEL_18;
LABEL_684:
        v207 = 16385;
        goto LABEL_685;
      }
      v89 = *(unsigned int *)(v204 + 24);
      v305 = (unsigned __int16)v89;
      if ((unsigned __int16)v89 == WORD1(v89))
        return;
LABEL_2956:
      if (v305)
        v811 = 0;
      else
        v811 = WORD1(v89) == 0xFFFF;
      if (!v811)
      {
        v90 = 37;
LABEL_280:
        v91 = v90 | (v89 << 15);
LABEL_281:
        JSC::DFG::AbstractHeapOverlaps::operator()(a4, v91);
        return;
      }
      break;
    case 0x1A1:
      v89 = *(unsigned int *)(*((_QWORD *)a2 + 9) + 48);
      v305 = (unsigned __int16)*(_DWORD *)(*((_QWORD *)a2 + 9) + 48);
      if (v305 != WORD1(v89))
        goto LABEL_2956;
      return;
    case 0x1AB:
    case 0x1AC:
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
        goto LABEL_3477;
      v945 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v993, v945, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
      v44 = &v992;
      goto LABEL_3404;
    case 0x1AD:
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
LABEL_3477:
        JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4027uLL);
LABEL_3455:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4016uLL);
      return;
    case 0x1B0:
      JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x401AuLL);
      return;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x1983A2CC4);
    default:
      v1001 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v11];
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v1001, &v991);
      if (v991)
        v973 = (const char *)(v991 + 16);
      else
        v973 = 0;
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v973);
      WTF::CString::~CString((WTF::CString *)&v991, v974, v975, v976, v977, v978, v979, v980);
      __break(0xC471u);
      JUMPOUT(0x1983A305CLL);
  }
LABEL_1396:
  JSC::DFG::AbstractHeapOverlaps::operator()(a4, 0x4003uLL);
  return;
}

unint64_t WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::CodeOrigin&>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  result = WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 1) != 0)
  {
    result = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v8 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v8 != 0x3FFFFFFF)
        ? (v9 = (_DWORD)v8 == -1)
        : (v9 = 1),
          v9))
    {
      v10 = 2;
    }
    else if (v8 >> 28)
    {
      v11 = result;
      v13 = *(_QWORD *)a1;
      v14 = *(unsigned int *)(a1 + 12);
      v12 = v8;
      result = WTF::fastMalloc((WTF *)0x10);
      v6 = v13;
      v4 = v14;
      *(_QWORD *)result = v11;
      *(_DWORD *)(result + 8) = v12;
      v5 = *(_DWORD *)(a1 + 12);
      v10 = 1;
    }
    else
    {
      v10 = result;
      result = v8 << 36;
    }
    v7 = result | v10;
  }
  *(_QWORD *)(v6 + 8 * v4) = v7;
  *(_DWORD *)(a1 + 12) = v5 + 1;
  return result;
}

unint64_t WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v6 = a3 - v4;
    WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  else
  {
    WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = (_QWORD *)v9;
        v18 = 8 * v8;
        v19 = (uint64_t *)v7;
        do
        {
          v20 = *v19;
          *v19 = 0;
          *v17 = v20;
          v21 = *v19;
          if ((*v19 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v21 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
          ++v17;
          ++v19;
          v18 -= 8;
        }
        while (v18);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    if (*(unsigned int *)(a1 + 12) > a2)
      WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::shrink(a1, (void *)a2, a3, a4, a5, a6, a7, a8);
    v10 = *(_QWORD *)a1;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v11 = *(unsigned int *)(a1 + 12);
      v12 = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = v12;
      if (v12 != v10 && (_DWORD)v11)
      {
        v13 = (_QWORD *)v12;
        v14 = 8 * v11;
        v15 = (uint64_t *)v10;
        do
        {
          v16 = *v15;
          *v15 = 0;
          *v13 = v16;
          v17 = *v15;
          if ((*v15 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v17 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
          ++v13;
          ++v15;
          v14 -= 8;
        }
        while (v14);
      }
    }
    if (v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::Vector<JSC::CodeOrigin,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (int)a2;
  v10 = *(unsigned int *)(a1 + 12);
  if ((void *)v10 != a2)
  {
    v11 = (uint64_t *)(*(_QWORD *)a1 + 8 * (_QWORD)a2);
    v12 = 8 * v10 - 8 * (_QWORD)a2;
    do
    {
      v13 = *v11;
      if ((*v11 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

uint64_t WTF::Vector<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(_QWORD *)result;
  if (v4 < a2)
  {
    v6 = v4 + (v4 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= a2)
      v8 = a2;
    else
      v8 = v7;
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *(unsigned int *)(result + 12);
    v10 = WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    if ((_DWORD)v9)
    {
      v22 = (_QWORD *)v10;
      v19 = 8 * v9;
      v20 = (uint64_t *)v5;
      do
      {
        *v22 = 0;
        v21 = *v20;
        *v20 = 0;
        *v22 = v21;
        if (*v20)
          WTF::fastFree(*v20 - 16, v11, v12, v13, v14, v15, v16, v17);
        ++v22;
        ++v20;
        v19 -= 8;
      }
      while (v19);
      v10 = *(_QWORD *)v3;
    }
    if (v5)
    {
      if (v10 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v5, v11, v12, v13, v14, v15, v16, v17);
      v5 = *(_QWORD *)v3;
    }
    else
    {
      v5 = v10;
    }
  }
  if (v5)
  {
    v18 = *(unsigned int *)(v3 + 12);
    if (v18 != a2)
      bzero((void *)(v5 + 8 * v18), ((8 * a2 - 8 * v18 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  *(_DWORD *)(v3 + 12) = a2;
  return 1;
}

_OWORD *WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (_QWORD *)(v11 + 16 * v22);
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(_DWORD *)(v25 - 8);
        else
          v26 = 0;
        v27 = (~(*v24 << 32) + *v24) ^ ((~(*v24 << 32) + *v24) >> 22);
        v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((unint64_t)(v27 + ~(v27 << 13)) >> 8));
        v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
        v30 = v26 & ((v29 >> 31) ^ v29);
        v31 = 1;
        do
        {
          v32 = v30;
          v33 = *(_QWORD *)(v25 + 16 * v30);
          v30 = (v30 + v31++) & v26;
        }
        while (v33);
        v34 = (_OWORD *)(v25 + 16 * v32);
        *v34 = *(_OWORD *)v24;
        if (v24 == (_QWORD *)a3)
          v23 = v34;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

unsigned int *WTF::EmbeddedFixedVector<JSC::DFG::CatchEntrypointData>::createFromVector<0ul,WTF::CrashOnOverflow>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  int v20;

  v3 = *a1;
  v18 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  v5 = *((unsigned int *)a1 + 3);
  *a1 = 0;
  a1[1] = 0;
  v19 = v4;
  v20 = v5;
  v6 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v5 + 8));
  *v6 = v5;
  if ((_DWORD)v5)
  {
    v14 = v3 + 24 * v5;
    v15 = v6 + 2;
    do
    {
      *(_QWORD *)v15 = *(_QWORD *)v3;
      v16 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      *((_QWORD *)v15 + 1) = v16;
      v15[4] = *(_DWORD *)(v3 + 16);
      v3 += 24;
      v15 += 6;
    }
    while (v3 != v14);
  }
  *a2 = v6;
  return WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v18, v7, v8, v9, v10, v11, v12, v13);
}

unsigned int *WTF::Vector<JSC::DFG::CatchEntrypointData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v9 = a1[3];
  if ((_DWORD)v9)
  {
    v12 = 24 * v9;
    v13 = (unint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      v13 += 3;
      v12 -= 24;
    }
    while (v12);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::ConstantFoldingPhase *this, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *casual;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  JSC::DFG::AbstractValue *v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v134;
  unsigned int *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  void *v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  void *v157;
  BOOL v158;
  BOOL v159;
  uint64_t v160;
  __int128 *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  int v181;
  unsigned int *v182;
  uint64_t v183;
  __int128 *v184;
  JSC::DFG::Graph *v185;
  JSC::DFG::Node *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  int v197;
  uint64_t v198;
  int v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  int v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;
  int v217;
  unint64_t v218;
  _BYTE *v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t *v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  int v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  __int128 v269;
  unint64_t v270;
  BOOL v271;
  BOOL v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t *v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  int v282;
  uint64_t v283;
  unint64_t v285;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t v301;
  JSC::DFG::AbstractValue *v302;
  uint64_t v303;
  unsigned int *v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t *v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  int v316;
  unsigned int *v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  BOOL v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  char v326;
  char v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int *v331;
  int v332;
  int v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t *v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  int v354;
  unsigned int *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t *v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int v365;
  int v366;
  uint64_t v367;
  int v369;
  unint64_t v370;
  unsigned int *v371;
  unint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  _QWORD *v387;
  unsigned int v388;
  BOOL v389;
  uint64_t *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t *v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  unsigned int v400;
  int v401;
  uint64_t v402;
  BOOL v403;
  uint64_t v404;
  int v406;
  unint64_t v407;
  _BYTE *v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t *v425;
  void *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t *v437;
  void *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  const void *v453;
  void *v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unsigned int *v462;
  _DWORD *v463;
  uint64_t v464;
  unsigned int v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  unsigned int *v476;
  uint64_t v477;
  WTF *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unsigned int *v484;
  unsigned int v485;
  unsigned int v486;
  WTF *v487;
  unint64_t v489;
  BOOL v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t *v498;
  uint64_t *v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t v502;
  unsigned int v503;
  int v504;
  unsigned int *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t FoldableView;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  unsigned int *v516;
  uint64_t v517;
  unsigned int v518;
  unsigned int *v519;
  uint64_t v520;
  unsigned int v521;
  unsigned int *v522;
  uint64_t v523;
  unsigned int v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t *v528;
  uint64_t v529;
  uint64_t v530;
  unsigned int v531;
  int v532;
  unsigned int *v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t *v537;
  uint64_t *v538;
  uint64_t v539;
  uint64_t v540;
  unsigned int v541;
  int v542;
  unint64_t v543;
  BOOL v544;
  BOOL v545;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unint64_t v551;
  void *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t *v567;
  uint64_t *v568;
  uint64_t *v569;
  uint64_t v570;
  uint64_t v571;
  unsigned int v572;
  int v573;
  unsigned __int8 v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t *v578;
  uint64_t *v579;
  uint64_t *v580;
  uint64_t v581;
  uint64_t v582;
  unsigned int v583;
  int v584;
  int v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t *v590;
  uint64_t *v591;
  uint64_t *v592;
  uint64_t v593;
  uint64_t v594;
  unsigned int v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  unint64_t *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t *v606;
  unsigned int v607;
  WTF *v608;
  uint64_t *v609;
  uint64_t v610;
  uint64_t *v611;
  unint64_t *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  JSC::DFG::Graph *v618;
  uint64_t v619;
  uint64_t *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  unint64_t ConstantProperty;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t *v640;
  uint64_t *v641;
  uint64_t *v642;
  uint64_t v643;
  uint64_t v644;
  unsigned int v645;
  int v646;
  unsigned int *v647;
  unint64_t v648;
  BOOL v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t *v653;
  uint64_t *v654;
  uint64_t *v655;
  uint64_t v656;
  uint64_t v657;
  unsigned int v658;
  int v659;
  unsigned int *v660;
  uint64_t v661;
  WTF *v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t *v667;
  uint64_t v668;
  int v669;
  unint64_t v670;
  unint64_t v671;
  unint64_t v672;
  unsigned int v673;
  _QWORD *v674;
  uint64_t v675;
  _QWORD *v676;
  int v677;
  uint64_t v678;
  int v679;
  uint64_t v680;
  int v681;
  uint64_t v682;
  unint64_t v683;
  uint64_t v684;
  JSC::Structure *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  unint64_t v693;
  unint64_t v694;
  uint64_t v695;
  unint64_t v696;
  JSC::DFG::FrozenValue *v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t *v702;
  uint64_t *v703;
  uint64_t *v704;
  uint64_t v705;
  uint64_t v706;
  unsigned int v707;
  int v708;
  uint64_t v709;
  BOOL v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  unint64_t v715;
  int v717;
  int v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t *v723;
  uint64_t *v724;
  uint64_t *v725;
  uint64_t v726;
  uint64_t v727;
  unsigned int v728;
  int v729;
  uint64_t v730;
  unint64_t v731;
  unint64_t v732;
  WTF *v733;
  uint64_t v734;
  __int128 v735;
  uint64_t v736;
  unsigned int v737;
  JSC::DFG::RegisteredStructureSet *v738;
  unsigned int v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t *v743;
  uint64_t *v744;
  uint64_t *v745;
  uint64_t v746;
  uint64_t v747;
  unsigned int v748;
  int v749;
  uint64_t v750;
  int v751;
  unsigned int *v752;
  uint64_t v753;
  unsigned int v754;
  unsigned int *v755;
  uint64_t v756;
  unsigned int v757;
  unsigned int v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t *v763;
  uint64_t *v764;
  uint64_t *v765;
  uint64_t v766;
  uint64_t v767;
  unsigned int v768;
  int v769;
  unsigned int *v770;
  int v771;
  uint64_t v772;
  BOOL v773;
  uint64_t v774;
  unsigned int *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unsigned int v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t *v783;
  uint64_t *v784;
  uint64_t *v785;
  uint64_t v786;
  uint64_t v787;
  unsigned int v788;
  int v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t *v793;
  uint64_t *v794;
  uint64_t *v795;
  uint64_t v796;
  uint64_t v797;
  unsigned int v798;
  int v799;
  uint64_t v800;
  BOOL v801;
  uint64_t v802;
  _QWORD *v803;
  uint64_t v804;
  unsigned int v805;
  unint64_t v806;
  unint64_t v807;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  unint64_t v821;
  unsigned int v822;
  unsigned int v823;
  unint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t *v829;
  uint64_t *v830;
  uint64_t *v831;
  uint64_t v832;
  uint64_t v833;
  unsigned int v834;
  int v835;
  uint64_t v836;
  unint64_t v837;
  unint64_t v838;
  WTF *v839;
  uint64_t v840;
  __int128 v841;
  uint64_t v842;
  uint64_t v843;
  int v844;
  unsigned int v845;
  JSC::DFG::BasicBlock *v846;
  JSC::DFG::BasicBlock *v847;
  uint64_t *v848;
  _BYTE *v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  JSC::DFG::BasicBlock *v853;
  int v854;
  unint64_t v855;
  unint64_t v856;
  unint64_t *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t *v861;
  uint64_t *v862;
  uint64_t *v863;
  uint64_t v864;
  uint64_t v865;
  unsigned int v866;
  int v867;
  uint64_t v868;
  BOOL v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  _QWORD *v873;
  _QWORD *v874;
  _QWORD *v875;
  uint64_t v876;
  unint64_t v877;
  uint64_t *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  unsigned int v883;
  unsigned int *v884;
  uint64_t v885;
  unsigned int v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  _QWORD *v890;
  _QWORD *v891;
  _QWORD *v892;
  uint64_t v893;
  unsigned int *v894;
  uint64_t v895;
  unsigned int v896;
  int v897;
  uint64_t v898;
  unint64_t *v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  int v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  _QWORD *v911;
  _QWORD *v912;
  _QWORD *v913;
  uint64_t v914;
  uint64_t *v915;
  uint64_t v916;
  uint64_t v917;
  JSC::DFG::ConstantFoldingPhase *v918;
  uint64_t v919;
  char v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  _QWORD *v924;
  _QWORD *v925;
  _QWORD *v926;
  uint64_t v927;
  unint64_t v928;
  unint64_t v930;
  uint64_t v931;
  unint64_t v932;
  uint64_t v933;
  __int128 *v934;
  uint64_t v935;
  _QWORD *v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  _QWORD *v940;
  _QWORD *v941;
  _QWORD *v942;
  uint64_t v943;
  unint64_t v944;
  BOOL v945;
  uint64_t v946;
  BOOL v947;
  uint64_t v948;
  unint64_t v949;
  int v950;
  _BYTE *v951;
  uint64_t v952;
  unsigned int v953;
  uint64_t v954;
  BOOL v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  unint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  unint64_t *v967;
  void *v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t *v975;
  uint64_t v976;
  JSCell *v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  unint64_t v987;
  __int128 *v988;
  int v989;
  __int16 v990;
  unint64_t v991;
  int v992;
  BOOL v993;
  unsigned int v994;
  uint64_t v995;
  unsigned int *v996;
  uint64_t v997;
  unsigned int v998;
  unsigned int *v999;
  uint64_t v1000;
  unsigned int v1001;
  uint64_t v1002;
  unsigned int *v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t *v1006;
  uint64_t *v1007;
  uint64_t *v1008;
  uint64_t v1009;
  uint64_t v1010;
  void *v1011;
  uint64_t v1012;
  unint64_t v1013;
  unint64_t v1014;
  JSC::DFG::ConstantFoldingPhase *v1015;
  uint64_t v1016;
  __int128 v1017;
  uint64_t v1018;
  unsigned int v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t *v1023;
  uint64_t v1024;
  unint64_t v1025;
  uint64_t v1026;
  int v1027;
  unsigned int *v1028;
  uint64_t v1029;
  unint64_t v1030;
  uint64_t v1031;
  unsigned int v1032;
  unint64_t v1033;
  uint64_t v1034;
  int v1035;
  unsigned int *v1036;
  unsigned int v1037;
  unsigned int v1038;
  uint64_t v1039;
  unint64_t v1040;
  unint64_t v1041;
  uint64_t v1042;
  unint64_t v1043;
  unint64_t v1044;
  unsigned int *v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  _QWORD *v1049;
  _QWORD *v1050;
  _QWORD *v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  _QWORD *v1057;
  char v1058;
  char v1059;
  _QWORD *v1060;
  uint64_t v1061;
  int v1062;
  uint64_t v1063;
  unint64_t v1064;
  __int16 v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  _QWORD *v1069;
  _QWORD *v1070;
  _QWORD *v1071;
  uint64_t v1072;
  unint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t *v1079;
  uint64_t *v1080;
  uint64_t *v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1086;
  uint64_t v1088;
  uint64_t v1089;
  __int128 *v1090;
  int v1091;
  __int16 v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  _QWORD *v1096;
  char v1097;
  char v1098;
  _QWORD *v1099;
  JSC::JSBoundFunction *v1100;
  uint64_t *v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  _QWORD *v1105;
  _QWORD *v1106;
  _QWORD *v1107;
  uint64_t v1108;
  unint64_t v1109;
  JSC::JSGlobalObject *v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t *v1114;
  unint64_t *v1115;
  unint64_t HostFunction;
  __int128 *v1117;
  uint64_t v1118;
  uint64_t v1119;
  unsigned int v1120;
  unint64_t v1121;
  uint64_t v1122;
  int v1123;
  int v1124;
  int v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  unsigned int v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  unsigned int v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  unsigned int v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t *v1141;
  _QWORD *v1142;
  uint64_t *v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  unint64_t v1147;
  _QWORD *v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  _QWORD *v1153;
  _QWORD *v1154;
  _QWORD *v1155;
  uint64_t v1156;
  void *v1157;
  WTF *v1158;
  BOOL v1159;
  unint64_t v1160;
  unsigned int *v1161;
  unint64_t *v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  unsigned int *v1168;
  uint64_t v1169;
  unsigned int v1170;
  int v1171;
  JSC::DFG::Graph *v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t *v1176;
  uint64_t *v1177;
  uint64_t *v1178;
  uint64_t v1179;
  uint64_t v1180;
  unsigned int v1181;
  int v1182;
  uint64_t v1183;
  unsigned int *v1184;
  uint64_t v1185;
  unsigned int v1186;
  unsigned int *v1187;
  uint64_t v1188;
  unsigned int v1189;
  BOOL v1190;
  unsigned __int16 *v1191;
  uint64_t v1192;
  unsigned int v1193;
  unint64_t v1194;
  unsigned int *v1195;
  uint64_t v1196;
  unsigned int v1197;
  unsigned int *v1198;
  uint64_t v1199;
  unsigned int v1200;
  uint64_t v1201;
  WTF *v1202;
  uint64_t v1203;
  _QWORD *v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  _QWORD *v1208;
  _QWORD *v1209;
  _QWORD *v1210;
  uint64_t v1211;
  unint64_t v1212;
  BOOL v1213;
  BOOL v1214;
  int v1215;
  unsigned int v1216;
  _QWORD *v1217;
  _QWORD *v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t ArgumentsArrayLength;
  void *v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  unint64_t v1233;
  uint64_t v1234;
  void *v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  unint64_t v1243;
  uint64_t v1244;
  unsigned int v1245;
  uint64_t v1246;
  unsigned int v1247;
  int v1248;
  uint64_t v1249;
  uint64_t v1250;
  unint64_t v1251;
  uint64_t v1252;
  WTF::AtomStringImpl *v1253;
  WTF *v1254;
  unsigned int *v1255;
  uint64_t v1256;
  unsigned int v1257;
  unsigned int *v1258;
  uint64_t v1259;
  unsigned int v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  _BOOL4 v1264;
  uint64_t v1265;
  BOOL v1266;
  unsigned int *v1268;
  uint64_t v1269;
  unsigned int v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  _QWORD *v1274;
  _QWORD *v1275;
  _QWORD *v1276;
  uint64_t v1277;
  unsigned int *v1278;
  uint64_t v1279;
  unsigned int v1280;
  unsigned int *v1281;
  uint64_t v1282;
  unsigned int v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  _QWORD *v1287;
  _QWORD *v1288;
  _QWORD *v1289;
  uint64_t v1290;
  uint64_t v1291;
  unsigned int *v1292;
  char *v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  unsigned int v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  unsigned int v1306;
  unsigned __int16 *v1308;
  uint64_t v1309;
  unsigned int v1310;
  unsigned int *v1311;
  uint64_t v1312;
  unsigned int v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  unsigned int *v1322;
  uint64_t v1323;
  unsigned int v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  unsigned int v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  unsigned int v1332;
  unsigned int *v1333;
  uint64_t v1334;
  unsigned int v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  void *v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  _QWORD *v1348;
  _QWORD *v1349;
  _QWORD *v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  int *v1354;
  int v1355;
  unint64_t v1356;
  unint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  BOOL v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  BOOL v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  _QWORD *v1369;
  _QWORD *v1370;
  _QWORD *v1371;
  uint64_t v1372;
  void *v1373;
  unint64_t v1374;
  BOOL v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  BOOL v1379;
  uint64_t v1380;
  BOOL v1381;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  _QWORD *v1386;
  _QWORD *v1387;
  _QWORD *v1388;
  uint64_t v1389;
  void *v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  _QWORD *v1395;
  _QWORD *v1396;
  _QWORD *v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  _QWORD *v1402;
  _QWORD *v1403;
  _QWORD *v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  _QWORD *v1409;
  _QWORD *v1410;
  _QWORD *v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  unsigned int v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t *v1421;
  uint64_t *v1422;
  uint64_t v1423;
  uint64_t v1424;
  unsigned int v1425;
  int v1426;
  uint64_t v1427;
  BOOL v1428;
  uint64_t v1429;
  _DWORD *v1430;
  uint64_t v1431;
  unsigned int *v1432;
  uint64_t v1433;
  unsigned int v1434;
  uint64_t v1435;
  uint64_t *v1436;
  uint64_t v1437;
  int v1438;
  unsigned int *v1439;
  uint64_t v1440;
  unsigned int v1441;
  uint64_t v1442;
  uint64_t v1443;
  unsigned int *v1444;
  uint64_t v1445;
  unsigned int v1446;
  uint64_t *v1447;
  uint64_t v1448;
  int v1449;
  unsigned int *v1450;
  uint64_t v1451;
  unsigned int v1452;
  uint64_t v1453;
  unint64_t v1454;
  unsigned int *v1455;
  uint64_t v1456;
  unsigned int v1457;
  unsigned int *v1458;
  uint64_t v1459;
  unsigned int v1460;
  unsigned int *v1461;
  uint64_t v1462;
  unsigned int v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  unsigned int v1467;
  uint64_t v1468;
  uint64_t *v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  unsigned int v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  unsigned int v1478;
  unint64_t v1479;
  void *v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  unint64_t v1487;
  unint64_t v1488;
  unsigned int *v1489;
  uint64_t v1490;
  uint64_t *v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  unint64_t v1500;
  unsigned __int16 *v1502;
  uint64_t v1503;
  unsigned int v1504;
  uint64_t v1505;
  unsigned int v1506;
  uint64_t v1507;
  uint64_t v1508;
  unsigned int v1509;
  BOOL v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  unint64_t v1514;
  uint64_t v1515;
  unsigned int v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  unsigned int v1520;
  WTF *v1521;
  WTF *v1522;
  uint64_t *v1523;
  int v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  void *v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  unsigned int v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  unsigned int v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  unint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  unsigned int v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  unsigned int v1553;
  uint64_t v1554;
  uint64_t v1555;
  BOOL v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  BOOL v1560;
  uint64_t v1561;
  uint64_t v1562;
  unsigned int *v1563;
  uint64_t v1564;
  uint64_t v1565;
  _QWORD *v1566;
  _QWORD *v1567;
  _QWORD *v1568;
  uint64_t v1569;
  void *v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  unsigned int v1578;
  unint64_t v1579;
  char v1580;
  unsigned int v1581;
  unsigned int v1582;
  JSC::JSObject *Object;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  unsigned int v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  unsigned int v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  unsigned int v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  unsigned int v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  unsigned int v1604;
  uint64_t v1605;
  unint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  unsigned int v1610;
  char **v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  unint64_t v1615;
  BOOL v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  unsigned int v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  unsigned int v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  unsigned int v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  unsigned int v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  unsigned int v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  unsigned int v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  unsigned int v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  void *v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  _QWORD *v1662;
  _QWORD *v1663;
  _QWORD *v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  BOOL v1668;
  unsigned int v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  unsigned int v1674;
  uint64_t v1675;
  unint64_t v1676;
  uint64_t v1677;
  unint64_t v1678;
  uint64_t v1679;
  unsigned int v1680;
  uint64_t v1681;
  unint64_t v1682;
  uint64_t v1683;
  char **v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  unint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  __int128 *v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t inserted;
  void *v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  unint64_t v1723;
  uint64_t v1724;
  void *v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  void *v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  __int128 *v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  unsigned int v1744;
  BOOL v1745;
  uint64_t v1746;
  uint64_t v1747;
  unsigned int v1748;
  BOOL v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  BOOL v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  BOOL v1758;
  uint64_t v1759;
  uint64_t v1760;
  unsigned int v1761;
  BOOL v1762;
  uint64_t v1763;
  uint64_t v1764;
  unsigned int v1765;
  BOOL v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  BOOL v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  BOOL v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  BOOL v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  BOOL v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  unsigned int v1802;
  unsigned __int8 *v1804;
  uint64_t v1805;
  unsigned int v1806;
  unsigned __int8 *v1808;
  uint64_t v1809;
  unsigned int v1810;
  unint64_t v1811;
  unsigned __int8 *v1813;
  uint64_t v1814;
  unsigned int v1815;
  unint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t *v1819;
  uint64_t *v1820;
  uint64_t v1821;
  void *v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  _QWORD *v1829;
  unint64_t v1830;
  unsigned int v1831;
  unint64_t v1832;
  uint64_t v1833;
  char *v1834;
  _BYTE v1835[24];
  uint64_t v1836;
  _BYTE v1837[24];
  _BYTE v1838[24];
  uint64_t v1839;
  uint64_t v1840;
  __int16 v1841;
  uint64_t v1842;
  uint64_t v1843;
  __int16 v1844;
  uint64_t v1845;
  uint64_t v1846;
  __int16 v1847;
  _BYTE v1848[24];
  __int128 v1849;
  int v1850;
  uint64_t v1851[4];
  unint64_t v1852;
  __int128 v1853;
  WTF **v1854;
  unint64_t *v1855;
  WTF *v1856;
  __int128 v1857;
  uint64_t v1858;
  WTF *v1859;
  char v1860;
  unint64_t v1861;
  __int128 v1862;
  uint64_t v1863;
  unint64_t v1864;
  _BYTE v1865[24];
  _BYTE v1866[24];
  _BYTE v1867[24];
  __int128 v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  __int16 v1872;
  uint64_t v1873;
  uint64_t v1874;
  __int16 v1875;
  char v1876;
  uint64_t v1877;
  unsigned int v1878;
  _BYTE v1879[9];

  v8 = a2;
  v1879[0] = 0;
  v10 = (_DWORD *)*((_QWORD *)this + 10);
  v11 = v10 + 2;
  v12 = *(unsigned int *)(*(_QWORD *)v10 + 1044);
  v13 = v10[5];
  if (v13 < v12)
  {
    if (v10[4] < v12)
      WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v10 + 2), (void *)*(unsigned int *)(*(_QWORD *)v10 + 1044), (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*v11)
      bzero((void *)(*v11 + 32 * v10[5]), 32 * v12 - 32 * v10[5]);
  }
  else if ((_DWORD)v13 != (_DWORD)v12)
  {
    v14 = (_QWORD *)(*v11 + 32 * v12);
    v15 = 32 * v13 - 32 * v12;
    do
    {
      if ((*v14 & 1) != 0)
        WTF::fastFree(*v14 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v14 += 4;
      v15 -= 32;
    }
    while (v15);
  }
  v10[5] = v12;
  if (*(_DWORD *)(*(_QWORD *)v10 + 944) == 2)
  {
    v39 = v10 + 6;
    v40 = *(unsigned int *)(*(_QWORD *)v10 + 1044);
    v41 = v10[9];
    if (v41 < v40)
    {
      if (v10[8] < v40)
        WTF::Vector<JSC::DFG::AbstractValue,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v10 + 6), (void *)*(unsigned int *)(*(_QWORD *)v10 + 1044), (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*v39)
        bzero((void *)(*v39 + 32 * v10[9]), 32 * v40 - 32 * v10[9]);
    }
    else if ((_DWORD)v41 != (_DWORD)v40)
    {
      v42 = (_QWORD *)(*v39 + 32 * v40);
      v43 = 32 * v41 - 32 * v40;
      do
      {
        if ((*v42 & 1) != 0)
          WTF::fastFree(*v42 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v42 += 4;
        v43 -= 32;
      }
      while (v43);
    }
    v10[9] = v40;
  }
  if (*(_BYTE *)(v8 + 12))
    v16 = 2;
  else
    v16 = 3;
  *((_DWORD *)this + 39) = v16;
  *((_DWORD *)this + 40) = v16;
  *((_QWORD *)this + 18) = v8;
  v17 = *((unsigned int *)this + 25);
  v18 = *((_QWORD *)this + 17);
  if (v18 < v17)
    v17 = *((_QWORD *)this + 17);
  if (v17 > 0x1F)
  {
    v21 = v17 & 0xFFFFFFE0;
    v22 = (char *)*((_QWORD *)this + 16);
    if (v21 < v17)
    {
      do
      {
        *(_DWORD *)&v22[(v21 >> 3) & 0x1FFFFFFFFFFFFFFCLL] &= ~(1 << v21);
        ++v21;
      }
      while (v17 != v21);
    }
    bzero(v22, (v17 >> 3) & 0x1FFFFFFC);
  }
  else if (v17)
  {
    v19 = 0;
    v20 = *((_QWORD *)this + 16);
    do
    {
      *(_DWORD *)(v20 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << v19);
      ++v19;
    }
    while (v17 != v19);
  }
  v23 = *((unsigned int *)this + 25);
  v1833 = v8;
  if (v18 < v23)
  {
    v44 = v18 + 31;
    v45 = v23 + 31;
    if (((v23 + 31) ^ (v18 + 31)) < 0x20)
    {
LABEL_69:
      *((_QWORD *)this + 17) = v23;
      goto LABEL_22;
    }
    v46 = v45 >> 5;
    if (v45 >> 5 < v44 >> 5)
    {
      __break(0xC471u);
      JUMPOUT(0x1983A4848);
    }
    v47 = v44 >> 5;
    v48 = 4 * v46;
    v49 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v49)
      goto LABEL_57;
    v50 = (unint64_t)(v48 + 15) >> 4;
    if (v23 <= 0xD00)
    {
      v51 = 23 * v50 + 7;
    }
    else if (v23 > 0x13880
           || (v51 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v50 + 626),
               *(_DWORD *)(v49 + 8052) <= v51))
    {
LABEL_57:
      casual = (char *)bmalloc_allocate_casual(v48, 1);
LABEL_66:
      memcpy(casual, *((const void **)this + 16), 4 * v47);
      bzero(&casual[4 * v47], 4 * (v46 - v47));
      v56 = *((_QWORD *)this + 16);
      if (v56)
        WTF::fastFree(v56, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      *((_QWORD *)this + 16) = casual;
      goto LABEL_69;
    }
    v53 = v49 + 8 * v51;
    v54 = v53 + 8064;
    *(_BYTE *)(v53 + 8064) = 1;
    v55 = *(unsigned int *)(v53 + 8080);
    if ((_DWORD)v55)
    {
      *(_DWORD *)(v54 + 16) = v55 - *(_DWORD *)(v54 + 20);
      casual = (char *)(*(_QWORD *)(v54 + 8) - v55);
    }
    else
    {
      v57 = *(_QWORD *)(v54 + 40);
      v58 = *(_QWORD *)(v54 + 24);
      if (!v57)
      {
        if (*(_BYTE *)(v54 + 5) == 6)
        {
          v60 = *(unsigned int *)(v54 + 32);
          v61 = *(_DWORD *)(v54 + 36);
          if (v60 < v61)
          {
            *(_QWORD *)(v54 + 8 * v60 + 56) = 0;
            v62 = (unint64_t *)(8 * v51 + 8 * v60 + v49 + 8128);
            v63 = v61 - 1 - v60;
            while (v63)
            {
              v58 += 1024;
              v65 = *v62++;
              v64 = v65;
              LODWORD(v60) = v60 + 1;
              --v63;
              if (v65)
              {
                v57 = __rbit64(v64);
                *(_DWORD *)(v54 + 32) = v60;
                *(_QWORD *)(v54 + 24) = v58;
                goto LABEL_71;
              }
            }
            *(_DWORD *)(v54 + 32) = v61;
          }
        }
        *(_BYTE *)v54 = 0;
        goto LABEL_57;
      }
LABEL_71:
      v59 = __clz(v57);
      *(_QWORD *)(v54 + 40) = v57 & ~(0x8000000000000000 >> v59);
      casual = (char *)(v58 + 16 * v59);
    }
    *(_BYTE *)v54 = 0;
    goto LABEL_66;
  }
LABEL_22:
  if (*(_DWORD *)(*((_QWORD *)this + 9) + 944) == 2)
  {
    v26 = *(_QWORD *)(v8 + 200);
    v27 = *(unsigned int *)(v26 + 108);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(v26 + 96) + 8;
      for (i = 40 * v27; i; i -= 40)
      {
        v30 = *(_QWORD *)(v28 - 8);
        if (v30)
        {
          v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
          if ((v30 & 1) == 0)
          {
            v32 = (_QWORD *)(*((_QWORD *)this + 10) + 8);
LABEL_30:
            v33 = *v32 + 32 * *(unsigned int *)(v31 + 20);
            v34 = *(_QWORD *)v33;
            if (v28 != v33)
            {
              if ((v34 & 1) != 0)
                WTF::fastFree(v34 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              v35 = *(_QWORD *)v28;
              if ((*(_QWORD *)v28 & 1) == 0 || v35 == 4)
              {
                if ((*(_BYTE *)v33 & 2) != 0)
                  v34 = v35 | 2;
                else
                  v34 = v35 & 0xFFFFFFFFFFFFFFFDLL;
                *(_QWORD *)v33 = v34;
              }
              else
              {
                WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v33, (_QWORD *)v28);
                v34 = *(_QWORD *)v33;
              }
            }
            v36 = v34 & 0xFFFFFFFFFFFFFFFDLL;
            v37 = v34 | 2;
            if ((*(_BYTE *)v28 & 2) == 0)
              v37 = v36;
            *(_QWORD *)v33 = v37;
            v38 = *(_QWORD *)(v28 + 24);
            *(_OWORD *)(v33 + 8) = *(_OWORD *)(v28 + 8);
            *(_QWORD *)(v33 + 24) = v38;
            *(_DWORD *)(v33 + 20) = v16;
            goto LABEL_40;
          }
          if (*(_WORD *)(v31 + 18) == 27)
          {
            v32 = (_QWORD *)(*((_QWORD *)this + 10) + 24);
            goto LABEL_30;
          }
        }
LABEL_40:
        v28 += 40;
      }
    }
  }
  *(_WORD *)(v8 + 15) = 1;
  *((_BYTE *)this + 152) = 1;
  *((_BYTE *)this + 164) = 0;
  *((_BYTE *)this + 154) = *(_BYTE *)(v8 + 12);
  v1878 = 0;
  if (*(_DWORD *)(v8 + 220))
  {
    v24 = 0;
    v25 = 0;
    v1834 = (char *)this + 168;
    while (2)
    {
      if (!*((_BYTE *)this + 152))
        goto LABEL_154;
      v1877 = 0;
      v66 = *(_QWORD *)(*(_QWORD *)(v8 + 208) + 8 * v24);
      v1877 = v66;
      v1876 = 0;
      v67 = *(unsigned __int16 *)(v66 + 18);
      switch(*(_WORD *)(v66 + 18))
      {
        case 6:
          v574 = *(_BYTE *)(v66 + 72);
          v575 = *(_QWORD *)(v66 + 24);
          v576 = *((_QWORD *)this + 10);
          v577 = *(unsigned int *)((v575 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v578 = (uint64_t *)(v576 + 24);
          v579 = (uint64_t *)(v576 + 8);
          if ((v575 & 1) != 0)
            v580 = v578;
          else
            v580 = v579;
          v581 = *v580;
          v582 = *v580 + 32 * v577;
          v583 = *((_DWORD *)this + 40);
          v584 = *(_DWORD *)(v582 + 20);
          if (v583 == v584)
            goto LABEL_668;
          if ((*(_QWORD *)(v582 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_1136;
          if ((v584 ^ v583) < 2)
            goto LABEL_1411;
          v1138 = *(_QWORD *)v582;
          if (*(_QWORD *)v582 == 4)
            goto LABEL_1410;
          *(_QWORD *)v582 = v1138 | 2;
          v1255 = (unsigned int *)(v1138 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1138 & 1) != 0)
          {
            v1585 = 2 * *v1255;
            do
            {
              if (!(v1585 * 4))
                goto LABEL_1410;
              v1586 = *(_QWORD *)&v1255[v1585];
              if ((*(_BYTE *)(v1586 + 19) & 0xC) != 0)
                break;
              v1587 = *(_QWORD *)(v1586 + 96);
              v1588 = (v1587 & 1) != 0 ? (v1587 >> 1) & 3 : *(unsigned __int8 *)(v1587 + 4);
              v1585 -= 2;
            }
            while (v1588 != 2);
            WTF::fastFree((unint64_t)v1255, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_1637:
            *(_QWORD *)v582 = 4;
            goto LABEL_1410;
          }
          if (v1255)
          {
            if ((*((_BYTE *)v1255 + 19) & 0xC) != 0)
              goto LABEL_1637;
            v1256 = *((_QWORD *)v1255 + 12);
            v1257 = (v1256 & 1) != 0 ? (v1256 >> 1) & 3 : *(unsigned __int8 *)(v1256 + 4);
            if (v1257 == 2)
              goto LABEL_1637;
          }
LABEL_1410:
          *(_DWORD *)(v581 + 32 * v577 + 16) = -21020677;
LABEL_1411:
          v8 = v1833;
          if ((v583 & 1) != 0)
            *(_QWORD *)v582 &= ~2uLL;
LABEL_1136:
          *(_DWORD *)(v582 + 20) = v583;
LABEL_668:
          v585 = JSC::DFG::isToThisAnIdentity(v574, (uint64_t *)v582);
          if (v585)
          {
            if (v585 == 2)
            {
              v586 = v1877;
              *(_WORD *)(v1877 + 18) = 170;
              *(_DWORD *)(v586 + 56) = 1;
              *(_QWORD *)(v586 + 24) = 0;
              v1879[0] = 1;
            }
            goto LABEL_119;
          }
          v597 = v1877;
          if ((*(_QWORD *)(v1877 + 24) & 0xFF00FFFFFFFFFFFFLL) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1983AB884);
          }
          if ((*(_QWORD *)(v1877 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1983AB864);
          }
          goto LABEL_1036;
        case 7:
          v790 = *(_QWORD *)(v66 + 24);
          v791 = *((_QWORD *)this + 10);
          v792 = *(unsigned int *)((v790 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v793 = (uint64_t *)(v791 + 24);
          v794 = (uint64_t *)(v791 + 8);
          if ((v790 & 1) != 0)
            v795 = v793;
          else
            v795 = v794;
          v796 = *v795;
          v797 = *v795 + 32 * v792;
          v798 = *((_DWORD *)this + 40);
          v799 = *(_DWORD *)(v797 + 20);
          if (v798 == v799)
            goto LABEL_913;
          if ((*(_QWORD *)(v797 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_1480;
          if ((v799 ^ v798) < 2)
            goto LABEL_1735;
          v1296 = *(_QWORD *)v797;
          if (*(_QWORD *)v797 == 4)
            goto LABEL_1734;
          *(_QWORD *)v797 = v1296 | 2;
          v1455 = (unsigned int *)(v1296 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1296 & 1) != 0)
          {
            v1638 = 2 * *v1455;
            do
            {
              if (!(v1638 * 4))
                goto LABEL_1734;
              v1639 = *(_QWORD *)&v1455[v1638];
              if ((*(_BYTE *)(v1639 + 19) & 0xC) != 0)
                break;
              v1640 = *(_QWORD *)(v1639 + 96);
              v1641 = (v1640 & 1) != 0 ? (v1640 >> 1) & 3 : *(unsigned __int8 *)(v1640 + 4);
              v1638 -= 2;
            }
            while (v1641 != 2);
            WTF::fastFree((unint64_t)v1455, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_2036:
            *(_QWORD *)v797 = 4;
            goto LABEL_1734;
          }
          if (v1455)
          {
            if ((*((_BYTE *)v1455 + 19) & 0xC) != 0)
              goto LABEL_2036;
            v1456 = *((_QWORD *)v1455 + 12);
            v1457 = (v1456 & 1) != 0 ? (v1456 >> 1) & 3 : *(unsigned __int8 *)(v1456 + 4);
            if (v1457 == 2)
              goto LABEL_2036;
          }
LABEL_1734:
          *(_DWORD *)(v796 + 32 * v792 + 16) = -21020677;
LABEL_1735:
          if ((v798 & 1) != 0)
            *(_QWORD *)v797 &= ~2uLL;
LABEL_1480:
          *(_DWORD *)(v797 + 20) = v798;
          v8 = v1833;
LABEL_913:
          v800 = *(_QWORD *)(v797 + 24);
          if (v800)
            v801 = (v800 & 0xFFFE000000000002) == 0;
          else
            v801 = 0;
          if (!v801)
            goto LABEL_119;
          if (*(_BYTE *)(v800 + 5) != 26)
            goto LABEL_119;
          v802 = *(_QWORD *)(v800 + 24);
          if ((v802 & 1) == 0)
            goto LABEL_119;
          v803 = (_QWORD *)(v802 & 0xFFFFFFFFFFFFFFFELL);
          if ((v802 & 0xFFFFFFFFFFFFFFFELL) == 0)
            goto LABEL_119;
          v804 = v803[4];
          v805 = (v804 & 1) != 0 ? (v804 >> 1) & 3 : *(unsigned __int8 *)(v804 + 4);
          v8 = v1833;
          if (v805 == 2)
            goto LABEL_119;
          if (!JSC::DFG::Graph::isWatchingStructureCacheClearedWatchpoint(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v1877, (uint64_t)a3, a4, a5, a6, a7, a8))goto LABEL_119;
          v806 = v803[2];
          v807 = v803[3];
          if (!v806)
            goto LABEL_119;
          if (!*(_QWORD *)(v806 + 48) && v807 == 0)
            goto LABEL_119;
          JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), (unint64_t)v803, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 136), (JSC::InlineWatchpointSet *)(v803 + 4), v809, v810, v811, v812, v813, v814);
          v815 = v1877;
          v821 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 4), v806, (int *)&v1856, v816, v817, v818, v819, v820);
          *(_WORD *)(v815 + 18) = 259;
          *(_DWORD *)(v815 + 56) = 1;
          *(_QWORD *)(v815 + 32) = 0;
          *(_QWORD *)(v815 + 40) = 0;
          *(_QWORD *)(v815 + 24) = 0;
          *(_QWORD *)(v815 + 72) = v821;
          *(_QWORD *)(v815 + 80) = 0;
          if (!*(_QWORD *)(v806 + 48))
          {
            v1696 = *((_QWORD *)this + 4);
            v1697 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v1697 = 0;
            *(_QWORD *)(v1697 + 8) = 0;
            *(_QWORD *)(v1697 + 8) = *(_QWORD *)(v1696 + 432);
            *(_QWORD *)(v1696 + 432) = v1697;
            *(_DWORD *)(v1697 + 4) = JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 240), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 16)+ 41952)+ 48)+ 4336), v1698, v1699, v1700, v1701, v1702, v1703);
            JSC::DFG::NodeOrigin::withExitOK(v1877, 0, (uint64_t)&v1856);
            v1704 = v1878 + 1;
            JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1838, (const JSC::DFG::NodeOrigin *)&v1856);
            v1711 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v807, v1705, v1706, v1707, v1708, v1709, v1710);
            inserted = JSC::DFG::InsertionSet::insertConstant((uint64_t)this + 208, v1704, (uint64_t)v1838, (unint64_t *)v1711, 0, v1712, v1713, v1714);
            JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1838, v1716, v1717, v1718, v1719, v1720, v1721, v1722);
            v1723 = v1878 + 1;
            JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1837, (const JSC::DFG::NodeOrigin *)&v1856);
            JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)this + 208, v1723, (uint64_t)v1837, v1697, v1877 & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000, v1877 & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000, inserted & 0xFF00FFFFFFFFFFFFLL, v1724);
            JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1837, v1725, v1726, v1727, v1728, v1729, v1730, v1731);
            JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v1856, v1732, v1733, v1734, v1735, v1736, v1737, v1738);
          }
LABEL_932:
          v1879[0] = 1;
          goto LABEL_1274;
        case 8:
          v1336 = *((_QWORD *)this + 4);
          JSC::CodeOrigin::CodeOrigin(&v1836, (const JSC::CodeOrigin *)v66);
          v1344 = JSC::DFG::Graph::globalObjectFor(v1336, &v1836, v1337, v1338, v1339, v1340, v1341, v1342);
          if ((v1836 & 1) != 0 && (v1836 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1836 & 0xFFFFFFFF8, v1343, (uint64_t)a3, a4, a5, a6, a7, a8);
          v1345 = *(_QWORD *)(v1877 + 24);
          v1346 = *((_QWORD *)this + 10);
          v1347 = *(unsigned int *)((v1345 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1348 = (_QWORD *)(v1346 + 24);
          v1349 = (_QWORD *)(v1346 + 8);
          if ((v1345 & 1) != 0)
            v1350 = v1348;
          else
            v1350 = v1349;
          v1351 = *v1350 + 32 * v1347;
          a2 = *((unsigned int *)this + 40);
          if ((_DWORD)a2 != *(_DWORD *)(v1351 + 20))
          {
            if ((*(_QWORD *)(v1351 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1351, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v1351 + 20) = a2;
          }
          v1352 = *(_QWORD *)(v1351 + 24);
          v8 = v1833;
          if (!v1352)
            goto LABEL_119;
          v1353 = v1877;
          if (*(_DWORD *)(v1877 + 80))
          {
            if (v1352 == *(_QWORD *)(v1344 + 272))
            {
              v1354 = (int *)(v1344 + 1184);
              goto LABEL_1855;
            }
          }
          else if (v1352 == *(_QWORD *)(v1344 + 264))
          {
            v1354 = (int *)(v1344 + 1164);
LABEL_1855:
            v1355 = *v1354;
            if (v1355)
              v1356 = 16 * (v1355 & 0xFFFFFFFE);
            else
              v1356 = 0;
            v1357 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 4), v1356, (int *)&v1856, a4, a5, a6, a7, a8);
            *(_WORD *)(v1353 + 18) = 268;
            *(_DWORD *)(v1353 + 56) = 1;
            *(_QWORD *)(v1353 + 32) = 0;
            *(_QWORD *)(v1353 + 40) = 0;
            *(_QWORD *)(v1353 + 24) = 0;
            *(_QWORD *)(v1353 + 72) = v1357;
            *(_QWORD *)(v1353 + 80) = 0;
            goto LABEL_1273;
          }
          v8 = v1833;
          if ((v1352 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1352 + 5) == 26)
          {
            v1677 = *(_QWORD *)(v1352 + 24);
            if ((v1677 & 1) != 0)
            {
              v1678 = v1677 & 0xFFFFFFFFFFFFFFFELL;
              if ((v1677 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v1679 = *(_QWORD *)(v1678 + 32);
                v1680 = (v1679 & 1) != 0 ? (v1679 >> 1) & 3 : *(unsigned __int8 *)(v1679 + 4);
                v8 = v1833;
                if (v1680 != 2)
                {
                  if (JSC::DFG::Graph::isWatchingStructureCacheClearedWatchpoint(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v1877, (uint64_t)a3, a4, a5, a6, a7, a8))
                  {
                    v1681 = *(_DWORD *)(v1678 + 40) & 0xFFFFFFFE;
                    if ((_DWORD)v1681)
                    {
                      v1682 = 16 * v1681;
                      v1683 = *(unsigned int *)(16 * v1681 + 0x4C);
                      v1684 = *(_DWORD *)(v1877 + 80) ? &JSC::JSInternalPromise::s_info : &JSC::JSPromise::s_info;
                      if (v1684 == (char **)(16 * v1683) && *(_QWORD *)(v1682 + 40) == v1344)
                      {
                        JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v1678, (uint64_t)a3, a4, a5, a6, a7, a8);
                        JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 136), (JSC::InlineWatchpointSet *)(v1678 + 32), v1685, v1686, v1687, v1688, v1689, v1690);
                        v1063 = v1877;
                        v1064 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 4), v1682, (int *)&v1856, v1691, v1692, v1693, v1694, v1695);
                        v1065 = 268;
                        goto LABEL_1264;
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_119;
        case 9:
        case 0xA:
          v1856 = this;
          *(_QWORD *)&v1857 = &v1877;
          *((_QWORD *)&v1857 + 1) = v1879;
          if (v67 == 10)
          {
            v1611 = &JSC::JSAsyncGenerator::s_info;
            v1612 = 261;
          }
          else
          {
            if (v67 != 9)
            {
              __break(0xC471u);
              JUMPOUT(0x1983AC58CLL);
            }
            v1611 = &JSC::JSGenerator::s_info;
            v1612 = 260;
          }
          JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::NodeType,JSC::ClassInfo const*)#1}::operator()((uint64_t *)&v1856, (void *)v1612, (uint64_t)v1611, a4, a5, a6, a7, a8);
          goto LABEL_1274;
        case 0x18:
          v1876 = 1;
          v85 = *((_QWORD *)this + 24);
          v86 = *(_QWORD *)(v85 + 72);
          if (*(_DWORD *)(v86 + 220) <= v25)
          {
            __break(0xC471u);
            JUMPOUT(0x1983AC544);
          }
          v87 = *(_QWORD *)(*(_QWORD *)(v86 + 208) + 8 * v24);
          *(_BYTE *)(v85 + 81) = 0;
          if ((*(_BYTE *)(v87 + 56) & 0x10) != 0)
          {
            if (*(_DWORD *)(v87 + 32) + *(_QWORD *)(v87 + 24) > *(_QWORD *)(v87 + 24))
            {
              v289 = *((_QWORD *)this + 22);
              v290 = *(_QWORD *)(v87 + 24);
              do
              {
                if (v290 >= *(unsigned int *)(v289 + 164))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983AC54CLL);
                }
                v291 = *(_QWORD *)(v289 + 152);
                v292 = *(_QWORD *)(v291 + 8 * v290);
                v293 = (v292 >> 50) & 0x3F;
                if ((v292 & 0xFF00FFFFFFFFFFFFLL) != 0 && (_DWORD)v293 != 0)
                {
                  v295 = 0x300000000;
                  switch((int)v293)
                  {
                    case 1:
                    case 2:
                      break;
                    case 3:
                      v295 = 0x1300000000;
                      break;
                    case 4:
                      v295 = 0x7300000000;
                      break;
                    case 5:
                      v295 = 0x3300000000;
                      break;
                    case 6:
                    case 7:
                      v295 = 0x10000000000;
                      break;
                    case 8:
                    case 9:
                      v295 = 0x2C00FFFFFFF7;
                      break;
                    case 10:
                      v295 = 0x2E00FFFFFFF7;
                      break;
                    case 11:
                      v295 = 0x20000FFFFFF7;
                      break;
                    case 12:
                      v295 = 2;
                      break;
                    case 13:
                      v295 = 4;
                      break;
                    case 14:
                      v295 = 1;
                      break;
                    case 15:
                      v295 = 0x100000;
                      break;
                    case 16:
                      v295 = 0x40000;
                      break;
                    case 17:
                      v295 = 0x2000000;
                      break;
                    case 18:
                      v295 = 0x4000000;
                      break;
                    case 19:
                      v295 = 0x22000FFFFFF7;
                      break;
                    case 20:
                      v295 = 0x10000000;
                      break;
                    case 21:
                    case 23:
                      v295 = 805306368;
                      break;
                    case 22:
                      v295 = 0x20030000000;
                      break;
                    case 24:
                      v295 = 0x1B73F0000000;
                      break;
                    case 25:
                      v295 = 0x40000000;
                      break;
                    case 26:
                    case 27:
                      v295 = 0x80000000000;
                      break;
                    case 28:
                      v295 = 0x100000000000;
                      break;
                    case 29:
                      v295 = 0x80000;
                      break;
                    case 30:
                      v295 = 0x200000;
                      break;
                    case 31:
                      v295 = 0x400000;
                      break;
                    case 32:
                    case 33:
                      v295 = 0x8000000;
                      break;
                    case 34:
                      v295 = 0x800000;
                      break;
                    case 35:
                      v295 = 0x1000000;
                      break;
                    case 36:
                      v295 = 0x200000000000;
                      break;
                    case 37:
                      v295 = 0x20000;
                      break;
                    case 38:
                      v295 = 805437440;
                      break;
                    case 39:
                      v295 = -536870913;
                      break;
                    case 40:
                      v295 = -1073741825;
                      break;
                    case 41:
                    case 42:
                      v295 = 0xFFFFD3FF00000008;
                      break;
                    case 43:
                      v295 = 0xFFFFFF0FFFFFFFFFLL;
                      break;
                    case 44:
                      v295 = 0xFFFFF70FFFFFFFFFLL;
                      break;
                    case 45:
                      v295 = 0xFFFFF70FCFFFFFFFLL;
                      break;
                    case 46:
                    case 47:
                      v295 = 0x20000000000;
                      break;
                    case 48:
                      v295 = 0x30000000000;
                      break;
                    case 49:
                      v295 = 0xF000000000;
                      break;
                    case 50:
                      v295 = 0x3000000000;
                      break;
                    case 51:
                      v295 = 0x1000000000;
                      break;
                    case 52:
                      v295 = 0xC00000000;
                      break;
                    default:
                      __break(0xC471u);
                      JUMPOUT(0x1983AC56CLL);
                  }
                  v296 = *((_QWORD *)this + 24);
                  v297 = *(_QWORD *)(v296 + 8);
                  v298 = *(unsigned int *)((v292 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                  v299 = (uint64_t *)(v297 + 24);
                  v300 = (uint64_t *)(v297 + 8);
                  if ((v292 & 1) != 0)
                    v300 = v299;
                  v301 = *v300;
                  v302 = (JSC::DFG::AbstractValue *)(*v300 + 32 * v298);
                  v303 = *((_QWORD *)v302 + 1);
                  if ((v303 & ~v295) != 0)
                  {
                    *(_QWORD *)(v291 + 8 * v290) = v292 & 0xFFFEFFFFFFFFFFFFLL;
                    v634 = *(unsigned int *)(v296 + 88);
                    if ((v303 & 0x2800FFFFFFF7) != 0)
                    {
                      JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v302, (void *)v634, v295, a4, a5, a6, a7, a8);
                    }
                    else
                    {
                      *(_DWORD *)(v301 + 32 * v298 + 20) = v634;
                      *((_QWORD *)v302 + 1) = v303 & v295;
                      if ((v303 & v295) == 0)
                        JSC::DFG::AbstractValue::clear(v302, v634, v295, a4, a5, a6, a7, a8);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v291 + 8 * v290) = v292 | 0x1000000000000;
                  }
                }
                ++v290;
              }
              while (v290 < (*(_DWORD *)(v87 + 32) + *(_DWORD *)(v87 + 24)));
            }
          }
          else
          {
            v88 = 0;
            v89 = v87 + 24;
            do
            {
              v90 = *(_QWORD *)(v89 + v88);
              if ((v90 & 0xFF00FFFFFFFFFFFFLL) == 0)
                break;
              v91 = (v90 >> 50) & 0x3F;
              if ((_DWORD)v91)
              {
                v92 = 0x300000000;
                switch((int)v91)
                {
                  case 1:
                  case 2:
                    break;
                  case 3:
                    v92 = 0x1300000000;
                    break;
                  case 4:
                    v92 = 0x7300000000;
                    break;
                  case 5:
                    v92 = 0x3300000000;
                    break;
                  case 6:
                  case 7:
                    v92 = 0x10000000000;
                    break;
                  case 8:
                  case 9:
                    v92 = 0x2C00FFFFFFF7;
                    break;
                  case 10:
                    v92 = 0x2E00FFFFFFF7;
                    break;
                  case 11:
                    v92 = 0x20000FFFFFF7;
                    break;
                  case 12:
                    v92 = 2;
                    break;
                  case 13:
                    v92 = 4;
                    break;
                  case 14:
                    v92 = 1;
                    break;
                  case 15:
                    v92 = 0x100000;
                    break;
                  case 16:
                    v92 = 0x40000;
                    break;
                  case 17:
                    v92 = 0x2000000;
                    break;
                  case 18:
                    v92 = 0x4000000;
                    break;
                  case 19:
                    v92 = 0x22000FFFFFF7;
                    break;
                  case 20:
                    v92 = 0x10000000;
                    break;
                  case 21:
                  case 23:
                    v92 = 805306368;
                    break;
                  case 22:
                    v92 = 0x20030000000;
                    break;
                  case 24:
                    v92 = 0x1B73F0000000;
                    break;
                  case 25:
                    v92 = 0x40000000;
                    break;
                  case 26:
                  case 27:
                    v92 = 0x80000000000;
                    break;
                  case 28:
                    v92 = 0x100000000000;
                    break;
                  case 29:
                    v92 = 0x80000;
                    break;
                  case 30:
                    v92 = 0x200000;
                    break;
                  case 31:
                    v92 = 0x400000;
                    break;
                  case 32:
                  case 33:
                    v92 = 0x8000000;
                    break;
                  case 34:
                    v92 = 0x800000;
                    break;
                  case 35:
                    v92 = 0x1000000;
                    break;
                  case 36:
                    v92 = 0x200000000000;
                    break;
                  case 37:
                    v92 = 0x20000;
                    break;
                  case 38:
                    v92 = 805437440;
                    break;
                  case 39:
                    v92 = -536870913;
                    break;
                  case 40:
                    v92 = -1073741825;
                    break;
                  case 41:
                  case 42:
                    v92 = 0xFFFFD3FF00000008;
                    break;
                  case 43:
                    v92 = 0xFFFFFF0FFFFFFFFFLL;
                    break;
                  case 44:
                    v92 = 0xFFFFF70FFFFFFFFFLL;
                    break;
                  case 45:
                    v92 = 0xFFFFF70FCFFFFFFFLL;
                    break;
                  case 46:
                  case 47:
                    v92 = 0x20000000000;
                    break;
                  case 48:
                    v92 = 0x30000000000;
                    break;
                  case 49:
                    v92 = 0xF000000000;
                    break;
                  case 50:
                    v92 = 0x3000000000;
                    break;
                  case 51:
                    v92 = 0x1000000000;
                    break;
                  case 52:
                    v92 = 0xC00000000;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x1983AC3ECLL);
                }
                v93 = *((_QWORD *)this + 24);
                v94 = *(_QWORD *)(v93 + 8);
                v95 = *(unsigned int *)((v90 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                v96 = (uint64_t *)(v94 + 24);
                v97 = (uint64_t *)(v94 + 8);
                if ((v90 & 1) != 0)
                  v97 = v96;
                v98 = *v97;
                v99 = (_QWORD *)(*v97 + 32 * v95);
                v100 = v99 + 1;
                v101 = v99[1];
                if ((v101 & ~v92) != 0)
                {
                  *(_QWORD *)(v89 + v88) = v90 & 0xFFFEFFFFFFFFFFFFLL;
                  v288 = (void *)*(unsigned int *)(v93 + 88);
                  if ((v101 & 0x2800FFFFFFF7) != 0)
                  {
                    JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v99, v288, v92, a4, a5, a6, a7, a8);
                  }
                  else
                  {
                    v907 = v98 + 32 * v95;
                    *(_DWORD *)(v907 + 20) = (_DWORD)v288;
                    *v100 = v101 & v92;
                    if ((v101 & v92) == 0)
                    {
                      *v100 = 0;
                      *(_DWORD *)(v907 + 16) = 0;
                      if ((*v99 & 1) != 0)
                        WTF::fastFree(*v99 & 0xFFFFFFFFFFFFFFFCLL, v288, v92, a4, a5, a6, a7, a8);
                      *v99 = 0;
                      *(_QWORD *)(v98 + 32 * v95 + 24) = 0;
                    }
                  }
                }
                else
                {
                  *(_QWORD *)(v89 + v88) = v90 | 0x1000000000000;
                }
              }
              v88 += 8;
              v8 = v1833;
            }
            while (v88 != 24);
          }
          JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(v1834, v25, v87);
          v102 = 0;
          v103 = v1877;
          v104 = (uint64_t *)(v1877 + 24);
          do
          {
            v105 = v104[v102];
            if ((v105 & 0xFF00FFFFFFFFFFFFLL) == 0)
              break;
            if ((v105 & 0x1000000000000) == 0)
            {
              v143 = (v105 >> 50) & 0x3F;
              if ((_DWORD)v143)
              {
                v1190 = v143 > 0x34;
                v632 = (1 << v143) & 0x12400001800284;
                if (v1190 || v632 == 0)
                  continue;
              }
            }
            if (v102 > 1)
            {
              *(_QWORD *)(v103 + 40) = 0;
              v102 = 1;
              v1879[0] = 1;
            }
            else
            {
              v104[v102] = v104[v102 + 1];
              if (!v102)
                *(_QWORD *)(v103 + 32) = *(_QWORD *)(v103 + 40);
              *(_QWORD *)(v103 + 40) = 0;
              v1879[0] = 1;
              --v102;
            }
            ++v102;
          }
          while (v102 < 3);
          goto LABEL_119;
        case 0x19:
          v1876 = 1;
          JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute((uint64_t)v1834, v25, (uint64_t)a3, a4, a5, a6, a7, a8);
          v778 = v1877;
          v779 = *(_DWORD *)(v1877 + 32);
          if (v779)
          {
            v1245 = 0;
            v779 = 0;
            v1246 = *((_QWORD *)this + 4);
            v1247 = *(_DWORD *)(v1246 + 164);
            do
            {
              v1248 = *(_DWORD *)(v778 + 24);
              v1249 = v1245 + v1248;
              if (v1247 <= v1249)
              {
                __break(0xC471u);
                JUMPOUT(0x1983AC534);
              }
              v1250 = *(_QWORD *)(v1246 + 152);
              v1251 = *(_QWORD *)(v1250 + 8 * v1249);
              if ((v1251 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                if ((v1251 & 0x1000000000000) == 0
                  && (v1666 = (v1251 >> 50) & 0x3F, (_DWORD)v1666)
                  && ((v1190 = v1666 > 0x34, v1667 = (1 << v1666) & 0x12400001800284, !v1190)
                    ? (v1668 = v1667 == 0)
                    : (v1668 = 1),
                      v1668))
                {
                  v1669 = v779 + v1248;
                  if (v1247 <= v1669)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983AC53CLL);
                  }
                  v1670 = *(_QWORD *)(v1250 + 8 * v1669);
                  ++v779;
                  *(_QWORD *)(v1250 + 8 * v1669) = v1251;
                  *(_QWORD *)(v1250 + 8 * v1249) = v1670;
                }
                else
                {
                  *(_QWORD *)(v1250 + 8 * v1249) = 0;
                  v1879[0] = 1;
                }
              }
              ++v1245;
              v8 = v1833;
            }
            while (v1245 < *(_DWORD *)(v778 + 32));
          }
          *(_QWORD *)(v778 + 32) = v779;
          goto LABEL_119;
        case 0x38:
          v563 = *(_QWORD *)(v66 + 24);
          if ((v563 & 0xFC000000000000) != 0)
            goto LABEL_119;
          v564 = *((_QWORD *)this + 24);
          v565 = *(_QWORD *)(v564 + 8);
          v566 = *(unsigned int *)((v563 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v567 = (uint64_t *)(v565 + 24);
          v568 = (uint64_t *)(v565 + 8);
          if ((v563 & 1) != 0)
            v569 = v567;
          else
            v569 = v568;
          v570 = *v569;
          v571 = *v569 + 32 * v566;
          v572 = *(_DWORD *)(v564 + 88);
          v573 = *(_DWORD *)(v571 + 20);
          if (v572 == v573)
            goto LABEL_662;
          if ((*(_QWORD *)(v571 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_1458;
          if ((v573 ^ v572) < 2)
            goto LABEL_1720;
          v1294 = *(_QWORD *)v571;
          if (*(_QWORD *)v571 == 4)
            goto LABEL_1719;
          *(_QWORD *)v571 = v1294 | 2;
          v1444 = (unsigned int *)(v1294 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1294 & 1) != 0)
          {
            v1629 = 2 * *v1444;
            do
            {
              if (!(v1629 * 4))
                goto LABEL_1719;
              v1630 = *(_QWORD *)&v1444[v1629];
              if ((*(_BYTE *)(v1630 + 19) & 0xC) != 0)
                break;
              v1631 = *(_QWORD *)(v1630 + 96);
              v1632 = (v1631 & 1) != 0 ? (v1631 >> 1) & 3 : *(unsigned __int8 *)(v1631 + 4);
              v1629 -= 2;
            }
            while (v1632 != 2);
            WTF::fastFree((unint64_t)v1444, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_2007:
            *(_QWORD *)v571 = 4;
            goto LABEL_1719;
          }
          if (v1444)
          {
            if ((*((_BYTE *)v1444 + 19) & 0xC) != 0)
              goto LABEL_2007;
            v1445 = *((_QWORD *)v1444 + 12);
            v1446 = (v1445 & 1) != 0 ? (v1445 >> 1) & 3 : *(unsigned __int8 *)(v1445 + 4);
            if (v1446 == 2)
              goto LABEL_2007;
          }
LABEL_1719:
          *(_DWORD *)(v570 + 32 * v566 + 16) = -21020677;
LABEL_1720:
          if ((v572 & 1) != 0)
            *(_QWORD *)v571 &= ~2uLL;
LABEL_1458:
          *(_DWORD *)(v571 + 20) = v572;
          v8 = v1833;
LABEL_662:
          if ((*(_QWORD *)(v571 + 8) & 0xFFFFFEFFFFFFFFFFLL) == 0)
            *(_QWORD *)(v1877 + 24) = *(_QWORD *)(v1877 + 24) & 0xFF03FFFFFFFFFFFFLL | 0x18000000000000;
          goto LABEL_119;
        case 0x5B:
          LOBYTE(v1852) = 1;
          v1391 = *((_QWORD *)this + 4);
          v1856 = this;
          *(_QWORD *)&v1857 = &v1852;
          v1392 = *(_QWORD *)(v66 + 24);
          if ((*(_BYTE *)(v66 + 56) & 0x10) != 0)
          {
            v1675 = *(_QWORD *)(v66 + 32);
            if ((int)v1675 + (int)v1392 > v1392)
            {
              v1676 = *(_QWORD *)(v66 + 24);
              do
              {
                if (v1676 >= *(unsigned int *)(v1391 + 164))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983AC52CLL);
                }
                a2 = *(_QWORD *)(*(_QWORD *)(v1391 + 152) + 8 * v1676);
                if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::Edge &)#1}::operator()((_BYTE **)&v1856, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v1392 = *(_QWORD *)(v66 + 24);
                  v1675 = *(_QWORD *)(v66 + 32);
                }
                ++v1676;
              }
              while (v1676 < (v1392 + v1675));
            }
          }
          else if ((v1392 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v1393 = *((_QWORD *)this + 10);
            v1394 = *(unsigned int *)((v1392 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v1395 = (_QWORD *)(v1393 + 24);
            v1396 = (_QWORD *)(v1393 + 8);
            if ((v1392 & 1) != 0)
              v1397 = v1395;
            else
              v1397 = v1396;
            v1398 = *v1397 + 32 * v1394;
            a2 = *((unsigned int *)this + 40);
            if ((_DWORD)a2 != *(_DWORD *)(v1398 + 20))
            {
              if ((*(_QWORD *)(v1398 + 8) & 0x2800FFFFFFF7) != 0)
                JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1398, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              else
                *(_DWORD *)(v1398 + 20) = a2;
            }
            if ((*(_QWORD *)(v1398 + 8) & 0xFFFFFFFFCFFFFFFFLL) != 0)
              LOBYTE(v1852) = 0;
            v1399 = *(_QWORD *)(v66 + 32);
            if ((v1399 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v1400 = *((_QWORD *)this + 10);
              v1401 = *(unsigned int *)((v1399 & 0xFF00FFFFFFFFFFFELL) + 0x14);
              v1402 = (_QWORD *)(v1400 + 8);
              v1403 = (_QWORD *)(v1400 + 24);
              if ((v1399 & 1) != 0)
                v1404 = v1403;
              else
                v1404 = v1402;
              v1405 = *v1404 + 32 * v1401;
              a2 = *((unsigned int *)this + 40);
              if ((_DWORD)a2 != *(_DWORD *)(v1405 + 20))
              {
                if ((*(_QWORD *)(v1405 + 8) & 0x2800FFFFFFF7) != 0)
                  JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1405, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                else
                  *(_DWORD *)(v1405 + 20) = a2;
              }
              if ((*(_QWORD *)(v1405 + 8) & 0xFFFFFFFFCFFFFFFFLL) != 0)
                LOBYTE(v1852) = 0;
              v1406 = *(_QWORD *)(v66 + 40);
              if ((v1406 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v1407 = *((_QWORD *)this + 10);
                v1408 = *(unsigned int *)((v1406 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                v1409 = (_QWORD *)(v1407 + 8);
                v1410 = (_QWORD *)(v1407 + 24);
                if ((v1406 & 1) != 0)
                  v1411 = v1410;
                else
                  v1411 = v1409;
                v1412 = *v1411 + 32 * v1408;
                a2 = *((unsigned int *)this + 40);
                if ((_DWORD)a2 != *(_DWORD *)(v1412 + 20))
                {
                  if ((*(_QWORD *)(v1412 + 8) & 0x2800FFFFFFF7) != 0)
                    JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1412, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  else
                    *(_DWORD *)(v1412 + 20) = a2;
                }
                if ((*(_QWORD *)(v1412 + 8) & 0xFFFFFFFFCFFFFFFFLL) != 0)
                  goto LABEL_1274;
              }
            }
          }
          if (!(_BYTE)v1852)
            goto LABEL_1274;
          v1413 = v1877;
          *(_WORD *)(v1877 + 18) = 331;
          *(_DWORD *)(v1413 + 56) = 1;
          v1414 = *(_QWORD *)(v1413 + 24);
          if ((v1414 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            *(_QWORD *)(v1413 + 24) = v1414 & 0xFF03FFFFFFFFFFFFLL | 0x5C000000000000;
            v1415 = *(_QWORD *)(v1413 + 32);
            if ((v1415 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              *(_QWORD *)(v1413 + 32) = v1415 & 0xFF03FFFFFFFFFFFFLL | 0x5C000000000000;
              v1416 = *(_QWORD *)(v1413 + 40);
              if ((v1416 & 0xFF00FFFFFFFFFFFFLL) != 0)
                *(_QWORD *)(v1413 + 40) = v1416 & 0xFF03FFFFFFFFFFFFLL | 0x5C000000000000;
            }
          }
          v1879[0] = 1;
          v8 = v1833;
LABEL_1942:
          v1417 = 0;
          while (2)
          {
            v750 = v1877;
            v1418 = *(_QWORD *)(v1877 + 8 * v1417 + 24);
            if ((v1418 & 0xFF00FFFFFFFFFFFFLL) == 0)
              goto LABEL_1961;
            v1419 = *((_QWORD *)this + 10);
            v1420 = *(unsigned int *)((v1418 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v1421 = (uint64_t *)(v1419 + 24);
            v1422 = (uint64_t *)(v1419 + 8);
            if ((v1418 & 1) != 0)
              v1422 = v1421;
            v1423 = *v1422;
            v1424 = *v1422 + 32 * v1420;
            v1425 = *((_DWORD *)this + 40);
            v1426 = *(_DWORD *)(v1424 + 20);
            if (v1425 != v1426)
            {
              if ((*(_QWORD *)(v1424 + 8) & 0x2800FFFFFFF7) != 0)
              {
                if ((v1426 ^ v1425) >= 2)
                {
                  v1431 = *(_QWORD *)v1424;
                  if (*(_QWORD *)v1424 != 4)
                  {
                    *(_QWORD *)v1424 = v1431 | 2;
                    v1432 = (unsigned int *)(v1431 & 0xFFFFFFFFFFFFFFFCLL);
                    if ((v1431 & 1) != 0)
                    {
                      v1464 = 2 * *v1432;
                      while (v1464 * 4)
                      {
                        v1465 = *(_QWORD *)&v1432[v1464];
                        if ((*(_BYTE *)(v1465 + 19) & 0xC) == 0)
                        {
                          v1466 = *(_QWORD *)(v1465 + 96);
                          v1467 = (v1466 & 1) != 0 ? (v1466 >> 1) & 3 : *(unsigned __int8 *)(v1466 + 4);
                          v1464 -= 2;
                          if (v1467 != 2)
                            continue;
                        }
                        WTF::fastFree((unint64_t)v1432, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        goto LABEL_1976;
                      }
                    }
                    else if (v1432)
                    {
                      if ((*((_BYTE *)v1432 + 19) & 0xC) != 0
                        || ((v1433 = *((_QWORD *)v1432 + 12), (v1433 & 1) != 0)
                          ? (v1434 = (v1433 >> 1) & 3)
                          : (v1434 = *(unsigned __int8 *)(v1433 + 4)),
                            v1434 == 2))
                      {
LABEL_1976:
                        *(_QWORD *)v1424 = 4;
                      }
                    }
                  }
                  *(_DWORD *)(v1423 + 32 * v1420 + 16) = -21020677;
                }
                if ((v1425 & 1) != 0)
                  *(_QWORD *)v1424 &= ~2uLL;
              }
              *(_DWORD *)(v1424 + 20) = v1425;
            }
            v1427 = *(_QWORD *)(v1424 + 24);
            if (v1427)
              v1428 = (v1427 & 0xFFFE000000000002) == 0;
            else
              v1428 = 0;
            if (!v1428 || *(_BYTE *)(v1427 + 5) != 2)
              goto LABEL_1951;
            v1429 = *(_QWORD *)(v1427 + 8);
            v1430 = (_DWORD *)(v1427 + 16);
            if ((v1429 & 1) == 0)
              v1430 = (_DWORD *)(v1429 + 4);
            v8 = v1833;
            if (*v1430)
              goto LABEL_1952;
            v750 = v1877;
            if (v1417)
            {
              v1438 = v1417 - 1;
              if (v1417 == 1)
                *(_QWORD *)(v1877 + 32) = *(_QWORD *)(v1877 + 40);
              v1436 = (uint64_t *)(v750 + 40);
LABEL_1980:
              *v1436 = 0;
              v1879[0] = 1;
              v1417 = v1438;
LABEL_1951:
              v8 = v1833;
LABEL_1952:
              if (++v1417 >= 3)
              {
                v750 = v1877;
                goto LABEL_1961;
              }
              continue;
            }
            break;
          }
          v1435 = *(_QWORD *)(v1877 + 32);
          if ((v1435 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v1436 = (uint64_t *)(v1877 + 40);
            v1437 = *(_QWORD *)(v1877 + 40);
            *(_QWORD *)(v1877 + 24) = v1435;
            *(v1436 - 1) = v1437;
            v1438 = -1;
            goto LABEL_1980;
          }
          v8 = v1833;
LABEL_1961:
          if ((*(_QWORD *)(v750 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0 || *(_WORD *)(v750 + 18) == 332)
            goto LABEL_119;
          if ((*(_QWORD *)(v750 + 24) & 0xFF00FFFFFFFFFFFFLL) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1983AA3A0);
          }
LABEL_828:
          v751 = 1;
          if ((*(_DWORD *)(v750 + 56) & 7u) - 3 <= 4)
            v751 = dword_1991556F0[(*(_DWORD *)(v750 + 56) & 7) - 3];
          *(_WORD *)(v750 + 18) = 4;
          *(_DWORD *)(v750 + 56) = v751;
          v1879[0] = 1;
          goto LABEL_1274;
        case 0x5C:
        case 0x5D:
          v198 = *((_QWORD *)this + 4);
          v199 = *(_DWORD *)(v66 + 56);
          v200 = (_QWORD *)(v66 + 24);
          v201 = (_QWORD *)(v66 + 24);
          if ((v199 & 0x10) != 0)
          {
            if (*(_DWORD *)(v198 + 164) <= *v200)
            {
              __break(0xC471u);
              JUMPOUT(0x1983AC514);
            }
            v201 = (_QWORD *)(*(_QWORD *)(v198 + 152) + 8 * *v200);
          }
          if ((*v201 & 0xFC000000000000) != 0x2C000000000000 || *(_BYTE *)(v66 + 72) != 4)
            goto LABEL_119;
          if ((v199 & 0x10) != 0)
          {
            v994 = *(_DWORD *)v200 + 1;
            if (*(_DWORD *)(v198 + 164) <= v994)
            {
              __break(0xC471u);
              JUMPOUT(0x1983AC51CLL);
            }
            v202 = (uint64_t *)(*(_QWORD *)(v198 + 152) + 8 * v994);
          }
          else
          {
            v202 = (uint64_t *)(v66 + 32);
          }
          v203 = *v202;
          v204 = *((_QWORD *)this + 10);
          v205 = *(unsigned int *)((v203 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v206 = (uint64_t *)(v204 + 24);
          v207 = (uint64_t *)(v204 + 8);
          if ((v203 & 1) != 0)
            v208 = v206;
          else
            v208 = v207;
          v209 = *v208;
          v210 = *v208 + 32 * v205;
          v211 = *((_DWORD *)this + 40);
          v212 = *(_DWORD *)(v210 + 20);
          if (v211 == v212)
            goto LABEL_251;
          if ((*(_QWORD *)(v210 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_1030;
          if ((v212 ^ v211) < 2)
            goto LABEL_1308;
          v1088 = *(_QWORD *)v210;
          if (*(_QWORD *)v210 == 4)
            goto LABEL_1307;
          *(_QWORD *)v210 = v1088 | 2;
          v1187 = (unsigned int *)(v1088 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1088 & 1) != 0)
          {
            v1537 = 2 * *v1187;
            do
            {
              v8 = v1833;
              if (!(v1537 * 4))
                goto LABEL_1307;
              v1538 = *(_QWORD *)&v1187[v1537];
              if ((*(_BYTE *)(v1538 + 19) & 0xC) != 0)
                break;
              v1539 = *(_QWORD *)(v1538 + 96);
              v1540 = (v1539 & 1) != 0 ? (v1539 >> 1) & 3 : *(unsigned __int8 *)(v1539 + 4);
              v1537 -= 2;
            }
            while (v1540 != 2);
            WTF::fastFree((unint64_t)v1187, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v8 = v1833;
LABEL_1524:
            *(_QWORD *)v210 = 4;
            goto LABEL_1307;
          }
          v8 = v1833;
          if (v1187)
          {
            if ((*((_BYTE *)v1187 + 19) & 0xC) != 0)
              goto LABEL_1524;
            v1188 = *((_QWORD *)v1187 + 12);
            v1189 = (v1188 & 1) != 0 ? (v1188 >> 1) & 3 : *(unsigned __int8 *)(v1188 + 4);
            v8 = v1833;
            if (v1189 == 2)
              goto LABEL_1524;
          }
LABEL_1307:
          *(_DWORD *)(v209 + 32 * v205 + 16) = -21020677;
LABEL_1308:
          if ((v211 & 1) != 0)
            *(_QWORD *)v210 &= ~2uLL;
LABEL_1030:
          *(_DWORD *)(v210 + 20) = v211;
LABEL_251:
          v213 = *(_QWORD *)(v210 + 24);
          if (v213)
            v214 = (v213 & 0xFFFE000000000002) == 0;
          else
            v214 = 0;
          if (!v214 || *(_BYTE *)(v213 + 5) != 2)
            goto LABEL_119;
          v215 = *(_QWORD *)(v213 + 8);
          if (!v215 || (*(_QWORD *)(v213 + 8) & 1) != 0)
            goto LABEL_119;
          v217 = *(_DWORD *)(v215 + 16);
          if ((v217 & 0x10) == 0)
            goto LABEL_119;
          if ((v213 & 1) != 0)
          {
            v218 = v213 & 0xFFFFFFFFFFFFFFFELL;
            if ((v213 & 0xFFFFFFFFFFFFFFFELL) == 0)
              goto LABEL_270;
            v217 = *(_DWORD *)(v218 + 16);
          }
          else
          {
            v218 = *(_QWORD *)(v213 + 8);
          }
          if ((v217 & 0x20) == 0)
          {
            v219 = *(_BYTE **)(v218 + 8);
            v220 = *(unsigned int *)(v218 + 4);
            if ((v217 & 4) != 0)
            {
              if ((_DWORD)v220)
              {
                v1802 = *v219 - 48;
                if (v1802 <= 9 && (v220 < 2 || *v219 != 48))
                {
                  v1804 = v219 + 1;
                  v1805 = v220 - 1;
                  while (v1805)
                  {
                    if (v1802 <= 0x19999999)
                    {
                      v1806 = *v1804 - 48;
                      if (v1806 <= 9)
                      {
                        v544 = __CFADD__(v1806, 10 * v1802);
                        v1802 = v1806 + 10 * v1802;
                        ++v1804;
                        --v1805;
                        if (!v544)
                          continue;
                      }
                    }
                    goto LABEL_270;
                  }
                  v8 = v1833;
                  if (v1802 != -1)
                    goto LABEL_119;
                }
              }
            }
            else if ((_DWORD)v220)
            {
              v221 = *(unsigned __int16 *)v219 - 48;
              if (v221 <= 9)
              {
                v1190 = *(_WORD *)v219 == 48 && v220 > 1;
                if (!v1190)
                {
                  v1191 = (unsigned __int16 *)(v219 + 2);
                  v1192 = v220 - 1;
                  while (v1192)
                  {
                    if (v221 <= 0x19999999)
                    {
                      v1193 = *v1191 - 48;
                      if (v1193 <= 9)
                      {
                        v544 = __CFADD__(v1193, 10 * v221);
                        v221 = v1193 + 10 * v221;
                        ++v1191;
                        --v1192;
                        if (!v544)
                          continue;
                      }
                    }
                    goto LABEL_270;
                  }
                  if (v221 != -1)
                    goto LABEL_119;
                }
              }
            }
          }
LABEL_270:
          JSC::DFG::Graph::freezeStrong(*((_QWORD *)this + 4), *(_QWORD *)(v210 + 24), (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 240), v215, v222, v223, v224, v225, v226, v227);
          v232 = v1878;
          v233 = v1877;
          v234 = *(_QWORD *)v1877;
          if ((*(_QWORD *)v1877 & 1) != 0)
          {
            v1752 = *(_QWORD *)(v234 & 0xFFFFFFFF8);
            if ((v234 & 2) != 0
              || ((v1753 = *(unsigned int *)((v234 & 0xFFFFFFFF8) + 8), (_DWORD)v1753 != 0x3FFFFFFF)
                ? (v1754 = (_DWORD)v1753 == -1)
                : (v1754 = 1),
                  v1754))
            {
              v1755 = 2;
            }
            else if (v1753 >> 28)
            {
              v1793 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v1793 = v1752;
              *(_DWORD *)(v1793 + 8) = v1753;
              v1755 = 1;
              v1752 = v1793;
            }
            else
            {
              v1755 = *(_QWORD *)(v234 & 0xFFFFFFFF8);
              v1752 = v1753 << 36;
            }
            v234 = v1752 | v1755;
          }
          v1845 = v234;
          v235 = *(_QWORD *)(v233 + 8);
          if ((v235 & 1) != 0)
          {
            v1756 = *(_QWORD *)(v235 & 0xFFFFFFFF8);
            if ((v235 & 2) != 0
              || ((v1757 = *(unsigned int *)((v235 & 0xFFFFFFFF8) + 8), (_DWORD)v1757 != 0x3FFFFFFF)
                ? (v1758 = (_DWORD)v1757 == -1)
                : (v1758 = 1),
                  v1758))
            {
              v1759 = 2;
            }
            else if (v1757 >> 28)
            {
              v1794 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v1794 = v1756;
              *(_DWORD *)(v1794 + 8) = v1757;
              v1759 = 1;
              v1756 = v1794;
            }
            else
            {
              v1759 = *(_QWORD *)(v235 & 0xFFFFFFFF8);
              v1756 = v1757 << 36;
            }
            v235 = v1756 | v1759;
          }
          v1846 = v235;
          v1847 = *(_WORD *)(v233 + 16);
          v236 = (unint64_t *)(v1877 + 24);
          if ((*(_BYTE *)(v1877 + 56) & 0x10) != 0)
          {
            v1453 = *((_QWORD *)this + 4);
            v1454 = *v236;
            if (*(_DWORD *)(v1453 + 164) <= v1454)
            {
              __break(0xC471u);
              JUMPOUT(0x1983AC524);
            }
            v236 = (unint64_t *)(*(_QWORD *)(v1453 + 152) + 8 * v1454);
          }
          JSC::DFG::InsertionSet::insertCheck((uint64_t)this + 208, v232, (uint64_t)&v1845, *v236, v228, v229, v230, v231);
          if ((v1846 & 1) != 0 && (v1846 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1846 & 0xFFFFFFFF8, v237, v238, v239, v240, v241, v242, v243);
          if ((v1845 & 1) != 0 && (v1845 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1845 & 0xFFFFFFFF8, v237, v238, v239, v240, v241, v242, v243);
          v244 = *(unsigned __int8 *)(v213 + 5);
          if (v244 == 2)
          {
            v245 = *(_QWORD *)(v213 + 8);
            if (!v245 || (v245 & 1) != 0 || (*(_BYTE *)(v245 + 16) & 0x10) == 0)
            {
LABEL_1860:
              __break(0xC471u);
              JUMPOUT(0x1983A9EFCLL);
            }
          }
          else if (v244 != 4)
          {
            goto LABEL_1860;
          }
          JSC::DFG::Node::convertToGetByIdMaybeMegamorphic(v1877, *((_QWORD *)this + 4), v213);
          goto LABEL_1273;
        case 0x60:
        case 0x61:
          v1205 = *(_QWORD *)(v66 + 32);
          v1206 = *((_QWORD *)this + 10);
          v1207 = *(unsigned int *)((v1205 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1208 = (_QWORD *)(v1206 + 24);
          v1209 = (_QWORD *)(v1206 + 8);
          if ((v1205 & 1) != 0)
            v1210 = v1208;
          else
            v1210 = v1209;
          v1211 = *v1210 + 32 * v1207;
          a2 = *((unsigned int *)this + 40);
          if ((_DWORD)a2 != *(_DWORD *)(v1211 + 20))
          {
            if ((*(_QWORD *)(v1211 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1211, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v1211 + 20) = a2;
          }
          v1212 = *(_QWORD *)(v1211 + 24);
          if (v1212)
            v1213 = v1212 >= 0xFFFE000000000000;
          else
            v1213 = 0;
          v1214 = v1213 && (v1212 & 0x80000000) == 0;
          v8 = v1833;
          if (!v1214)
            goto LABEL_119;
          v1215 = *(_DWORD *)(v1877 + 72);
          v1216 = v1212 + v1215;
          if (__CFADD__((_DWORD)v1212, v1215))
            goto LABEL_119;
          v1217 = (_QWORD *)(*(_QWORD *)(v1877 + 24) & 0xFF00FFFFFFFFFFFFLL);
          v1218 = (_QWORD *)(*v1217 & 0xFFFFFFFF8);
          if ((*v1217 & 1) != 0)
            v1218 = (_QWORD *)*v1218;
          if (v1218)
          {
            v8 = v1833;
            if (v1216 < ((_DWORD)v1218[3] & 0x3FFFFFu) - 1)
            {
              JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute((uint64_t)v1834, (void *)v1878, (uint64_t)a3, a4, a5, a6, a7, a8);
              v1541 = *((_QWORD *)this + 4);
              v1542 = v1216 + (HIDWORD(v1218[3]) & 0xFFFFF | ((int)(v1218[3] >> 28) >> 24 << 20)) + 6;
              v1543 = WTF::fastMalloc((WTF *)0x18);
              v1220 = v1543;
              *(_QWORD *)v1543 = v1542 | ((unint64_t)(v1542 >> 31) << 32);
              *(_DWORD *)(v1543 + 8) = 0x3FFFFFFF;
              *(_BYTE *)(v1543 + 12) = 6;
              *(_QWORD *)(v1543 + 16) = 0;
              *(_QWORD *)(v1543 + 16) = *(_QWORD *)(v1541 + 592);
              *(_QWORD *)(v1541 + 592) = v1543;
              v1544 = v1218[3];
              if ((v1544 >> 60) - 3 >= 3 && v1216 < (v1544 & 0x3FFFFF) - 1)
              {
                v1545 = v1877;
                *(_WORD *)(v1877 + 18) = 19;
                *(_DWORD *)(v1545 + 56) &= ~8u;
                *(_QWORD *)(v1545 + 72) = v1543;
                *(_QWORD *)(v1545 + 80) = 0;
                *(_QWORD *)(v1545 + 32) = 0;
                *(_QWORD *)(v1545 + 40) = 0;
                *(_QWORD *)(v1545 + 24) = 0;
LABEL_1472:
                v8 = v1833;
LABEL_229:
                v1879[0] = 1;
                goto LABEL_90;
              }
              goto LABEL_1588;
            }
          }
          else
          {
            v8 = v1833;
            if (v1216 < *((_DWORD *)this + 26) - 1)
            {
              JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute((uint64_t)v1834, (void *)v1878, (uint64_t)a3, a4, a5, a6, a7, a8);
              v1219 = *((_QWORD *)this + 4);
              v1220 = WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v1220 = (v1216 + 6) | ((unint64_t)((v1216 + 6) >> 31) << 32);
              *(_DWORD *)(v1220 + 8) = 0x3FFFFFFF;
              *(_BYTE *)(v1220 + 12) = 6;
              *(_QWORD *)(v1220 + 16) = 0;
              *(_QWORD *)(v1220 + 16) = *(_QWORD *)(v1219 + 592);
              *(_QWORD *)(v1219 + 592) = v1220;
LABEL_1588:
              a2 = v1877;
              v8 = v1833;
              if (*(_WORD *)(v1877 + 18) != 97)
              {
                v1221 = v1878;
                JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1866, (const JSC::DFG::NodeOrigin *)v1877);
                ArgumentsArrayLength = JSC::DFG::emitCodeToGetArgumentsArrayLength((uint64_t *)this + 26, (uint64_t)v1217, v1221, (uint64_t)v1866, 0, v1222, v1223, v1224);
                JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1866, v1226, v1227, v1228, v1229, v1230, v1231, v1232);
                v1233 = v1878;
                JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1865, (const JSC::DFG::NodeOrigin *)v1877);
                v1234 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)this + 208, v1233, 0, 0xBBu, (uint64_t)v1865, *(_QWORD *)(v1877 + 32), ArgumentsArrayLength & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000);
                JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1865, v1235, v1236, v1237, v1238, v1239, v1240, v1241);
                v1242 = v1877;
                *(_WORD *)(v1877 + 18) = 19;
                *(_DWORD *)(v1242 + 56) &= ~8u;
                *(_QWORD *)(v1242 + 72) = v1220;
                *(_QWORD *)(v1242 + 80) = 0;
                *(_QWORD *)(v1242 + 32) = 0;
                *(_QWORD *)(v1242 + 40) = 0;
                *(_QWORD *)(v1242 + 24) = v1234 & 0xFF00FFFFFFFFFFFFLL;
                goto LABEL_229;
              }
              goto LABEL_119;
            }
          }
          goto LABEL_119;
        case 0x66:
        case 0x68:
          v384 = *((_QWORD *)this + 4);
          v385 = *(_DWORD *)(v66 + 56);
          v386 = *(_QWORD *)(v66 + 24);
          if ((v385 & 0x10) != 0)
          {
            v758 = *(_DWORD *)(v384 + 164);
            if (v758 <= v386)
            {
              __break(0xC471u);
              JUMPOUT(0x1983AC4ECLL);
            }
            v759 = *(_QWORD *)(v384 + 152);
            if ((*(_QWORD *)(v759 + 8 * v386) & 0xFC000000000000) != 0x20000000000000)
              goto LABEL_119;
            if (v758 <= (int)v386 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1983AC4F4);
            }
            v387 = (_QWORD *)(v759 + 8 * (v386 + 1));
          }
          else
          {
            if ((v386 & 0xFC000000000000) != 0x20000000000000)
              goto LABEL_119;
            v387 = (_QWORD *)(v66 + 32);
          }
          if ((*v387 & 0xFC000000000000) != 0x54000000000000)
            goto LABEL_119;
          v388 = *(unsigned __int8 *)(v66 + 72);
          v389 = v388 > 0xD || ((1 << v388) & 0x3020) == 0;
          if (v389 && v388 != 4)
            goto LABEL_119;
          if ((v385 & 0x10) != 0)
          {
            v1120 = v386 + 1;
            if (*(_DWORD *)(v384 + 164) <= v1120)
            {
              __break(0xC471u);
              JUMPOUT(0x1983AC4FCLL);
            }
            v391 = (uint64_t *)(*(_QWORD *)(v384 + 152) + 8 * v1120);
          }
          else
          {
            v391 = (uint64_t *)(v66 + 32);
          }
          v392 = *v391;
          v393 = *((_QWORD *)this + 10);
          v394 = *(unsigned int *)((v392 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v395 = (uint64_t *)(v393 + 24);
          v396 = (uint64_t *)(v393 + 8);
          if ((v392 & 1) != 0)
            v397 = v395;
          else
            v397 = v396;
          v398 = *v397;
          v399 = *v397 + 32 * v394;
          v400 = *((_DWORD *)this + 40);
          v401 = *(_DWORD *)(v399 + 20);
          if (v400 != v401)
          {
            if ((*(_QWORD *)(v399 + 8) & 0x2800FFFFFFF7) != 0)
            {
              if ((v401 ^ v400) >= 2)
              {
                v1146 = *(_QWORD *)v399;
                if (*(_QWORD *)v399 != 4)
                {
                  *(_QWORD *)v399 = v1146 | 2;
                  v1278 = (unsigned int *)(v1146 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v1146 & 1) != 0)
                  {
                    v1597 = 2 * *v1278;
                    while (v1597 * 4)
                    {
                      v1598 = *(_QWORD *)&v1278[v1597];
                      if ((*(_BYTE *)(v1598 + 19) & 0xC) == 0)
                      {
                        v1599 = *(_QWORD *)(v1598 + 96);
                        v1600 = (v1599 & 1) != 0 ? (v1599 >> 1) & 3 : *(unsigned __int8 *)(v1599 + 4);
                        v1597 -= 2;
                        if (v1600 != 2)
                          continue;
                      }
                      WTF::fastFree((unint64_t)v1278, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      goto LABEL_1687;
                    }
                  }
                  else if (v1278)
                  {
                    if ((*((_BYTE *)v1278 + 19) & 0xC) != 0
                      || ((v1279 = *((_QWORD *)v1278 + 12), (v1279 & 1) != 0)
                        ? (v1280 = (v1279 >> 1) & 3)
                        : (v1280 = *(unsigned __int8 *)(v1279 + 4)),
                          v1280 == 2))
                    {
LABEL_1687:
                      *(_QWORD *)v399 = 4;
                    }
                  }
                }
                *(_DWORD *)(v398 + 32 * v394 + 16) = -21020677;
              }
              v8 = v1833;
              if ((v400 & 1) != 0)
                *(_QWORD *)v399 &= ~2uLL;
            }
            *(_DWORD *)(v399 + 20) = v400;
          }
          v402 = *(_QWORD *)(v399 + 24);
          v403 = v402 && (v402 & 0xFFFE000000000002) == 0;
          if (!v403 || *(_BYTE *)(v402 + 5) != 2)
            goto LABEL_119;
          v404 = *(_QWORD *)(v402 + 8);
          if (!v404 || (*(_QWORD *)(v402 + 8) & 1) != 0)
            goto LABEL_119;
          v406 = *(_DWORD *)(v404 + 16);
          if ((v406 & 0x10) == 0)
            goto LABEL_119;
          if ((v402 & 1) != 0)
          {
            v407 = v402 & 0xFFFFFFFFFFFFFFFELL;
            if ((v402 & 0xFFFFFFFFFFFFFFFELL) == 0)
              goto LABEL_468;
            v406 = *(_DWORD *)(v407 + 16);
          }
          else
          {
            v407 = *(_QWORD *)(v402 + 8);
          }
          if ((v406 & 0x20) != 0)
            goto LABEL_468;
          v408 = *(_BYTE **)(v407 + 8);
          v409 = *(unsigned int *)(v407 + 4);
          if ((v406 & 4) != 0)
          {
            if (!(_DWORD)v409)
              goto LABEL_468;
            v410 = *v408 - 48;
            if (v410 > 9)
              goto LABEL_468;
            if (v409 >= 2 && *v408 == 48)
              goto LABEL_468;
            v1808 = v408 + 1;
            v1809 = v409 - 1;
            while (v1809)
            {
              if (v410 <= 0x19999999)
              {
                v1810 = *v1808 - 48;
                if (v1810 <= 9)
                {
                  v544 = __CFADD__(v1810, 10 * v410);
                  v410 = v1810 + 10 * v410;
                  ++v1808;
                  --v1809;
                  if (!v544)
                    continue;
                }
              }
              goto LABEL_468;
            }
          }
          else
          {
            if (!(_DWORD)v409)
              goto LABEL_468;
            v410 = *(unsigned __int16 *)v408 - 48;
            if (v410 > 9)
              goto LABEL_468;
            if (*(_WORD *)v408 == 48 && v409 > 1)
              goto LABEL_468;
            v1308 = (unsigned __int16 *)(v408 + 2);
            v1309 = v409 - 1;
            while (v1309)
            {
              if (v410 <= 0x19999999)
              {
                v1310 = *v1308 - 48;
                if (v1310 <= 9)
                {
                  v544 = __CFADD__(v1310, 10 * v410);
                  v410 = v1310 + 10 * v410;
                  ++v1308;
                  --v1309;
                  if (!v544)
                    continue;
                }
              }
              goto LABEL_468;
            }
          }
          v8 = v1833;
          if (v410 != -1)
            goto LABEL_119;
LABEL_468:
          JSC::DFG::Graph::freezeStrong(*((_QWORD *)this + 4), *(_QWORD *)(v399 + 24), (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 240), v404, v411, v412, v413, v414, v415, v416);
          v421 = v1878;
          v422 = v1877;
          v423 = *(_QWORD *)v1877;
          if ((*(_QWORD *)v1877 & 1) != 0)
          {
            v1769 = *(_QWORD *)(v423 & 0xFFFFFFFF8);
            if ((v423 & 2) != 0
              || ((v1770 = *(unsigned int *)((v423 & 0xFFFFFFFF8) + 8), (_DWORD)v1770 != 0x3FFFFFFF)
                ? (v1771 = (_DWORD)v1770 == -1)
                : (v1771 = 1),
                  v1771))
            {
              v1772 = 2;
            }
            else if (v1770 >> 28)
            {
              v1797 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v1797 = v1769;
              *(_DWORD *)(v1797 + 8) = v1770;
              v1772 = 1;
              v1769 = v1797;
            }
            else
            {
              v1772 = *(_QWORD *)(v423 & 0xFFFFFFFF8);
              v1769 = v1770 << 36;
            }
            v423 = v1769 | v1772;
          }
          v1842 = v423;
          v424 = *(_QWORD *)(v422 + 8);
          if ((v424 & 1) != 0)
          {
            v1773 = *(_QWORD *)(v424 & 0xFFFFFFFF8);
            if ((v424 & 2) != 0
              || ((v1774 = *(unsigned int *)((v424 & 0xFFFFFFFF8) + 8), (_DWORD)v1774 != 0x3FFFFFFF)
                ? (v1775 = (_DWORD)v1774 == -1)
                : (v1775 = 1),
                  v1775))
            {
              v1776 = 2;
            }
            else if (v1774 >> 28)
            {
              v1798 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v1798 = v1773;
              *(_DWORD *)(v1798 + 8) = v1774;
              v1776 = 1;
              v1773 = v1798;
            }
            else
            {
              v1776 = *(_QWORD *)(v424 & 0xFFFFFFFF8);
              v1773 = v1774 << 36;
            }
            v424 = v1773 | v1776;
          }
          v1843 = v424;
          v1844 = *(_WORD *)(v422 + 16);
          v425 = (unint64_t *)(v1877 + 24);
          if ((*(_BYTE *)(v1877 + 56) & 0x10) != 0)
          {
            v1513 = *((_QWORD *)this + 4);
            v1514 = *v425;
            if (*(_DWORD *)(v1513 + 164) <= v1514)
            {
              __break(0xC471u);
              JUMPOUT(0x1983AC504);
            }
            v425 = (unint64_t *)(*(_QWORD *)(v1513 + 152) + 8 * v1514);
          }
          JSC::DFG::InsertionSet::insertCheck((uint64_t)this + 208, v421, (uint64_t)&v1842, *v425, v417, v418, v419, v420);
          if ((v1843 & 1) != 0 && (v1843 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1843 & 0xFFFFFFFF8, v426, v427, v428, v429, v430, v431, v432);
          if ((v1842 & 1) != 0 && (v1842 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1842 & 0xFFFFFFFF8, v426, v427, v428, v429, v430, v431, v432);
          v433 = v1878;
          v434 = v1877;
          v435 = *(_QWORD *)v1877;
          if ((*(_QWORD *)v1877 & 1) != 0)
          {
            v1777 = *(_QWORD *)(v435 & 0xFFFFFFFF8);
            if ((v435 & 2) != 0
              || ((v1778 = *(unsigned int *)((v435 & 0xFFFFFFFF8) + 8), (_DWORD)v1778 != 0x3FFFFFFF)
                ? (v1779 = (_DWORD)v1778 == -1)
                : (v1779 = 1),
                  v1779))
            {
              v1780 = 2;
            }
            else if (v1778 >> 28)
            {
              v1799 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v1799 = v1777;
              *(_DWORD *)(v1799 + 8) = v1778;
              v1780 = 1;
              v1777 = v1799;
            }
            else
            {
              v1780 = *(_QWORD *)(v435 & 0xFFFFFFFF8);
              v1777 = v1778 << 36;
            }
            v435 = v1777 | v1780;
          }
          v1839 = v435;
          v436 = *(_QWORD *)(v434 + 8);
          if ((v436 & 1) != 0)
          {
            v1781 = *(_QWORD *)(v436 & 0xFFFFFFFF8);
            if ((v436 & 2) != 0
              || ((v1782 = *(unsigned int *)((v436 & 0xFFFFFFFF8) + 8), (_DWORD)v1782 != 0x3FFFFFFF)
                ? (v1783 = (_DWORD)v1782 == -1)
                : (v1783 = 1),
                  v1783))
            {
              v1784 = 2;
            }
            else if (v1782 >> 28)
            {
              v1800 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v1800 = v1781;
              *(_DWORD *)(v1800 + 8) = v1782;
              v1784 = 1;
              v1781 = v1800;
            }
            else
            {
              v1784 = *(_QWORD *)(v436 & 0xFFFFFFFF8);
              v1781 = v1782 << 36;
            }
            v436 = v1781 | v1784;
          }
          v1840 = v436;
          v1841 = *(_WORD *)(v434 + 16);
          if ((*(_BYTE *)(v1877 + 56) & 0x10) != 0)
          {
            v1515 = *((_QWORD *)this + 4);
            v1516 = *(_DWORD *)(v1877 + 24) + 1;
            if (*(_DWORD *)(v1515 + 164) <= v1516)
            {
              __break(0xC471u);
              JUMPOUT(0x1983AC50CLL);
            }
            v437 = (unint64_t *)(*(_QWORD *)(v1515 + 152) + 8 * v1516);
          }
          else
          {
            v437 = (unint64_t *)(v1877 + 32);
          }
          JSC::DFG::InsertionSet::insertCheck((uint64_t)this + 208, v433, (uint64_t)&v1839, *v437, v429, v430, v431, v432);
          if ((v1840 & 1) != 0 && (v1840 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1840 & 0xFFFFFFFF8, v438, v439, v440, v441, v442, v443, v444);
          if ((v1839 & 1) != 0 && (v1839 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1839 & 0xFFFFFFFF8, v438, v439, v440, v441, v442, v443, v444);
          v445 = *(unsigned __int8 *)(v402 + 5);
          if (v445 == 2)
          {
            v446 = *(_QWORD *)(v402 + 8);
            if (!v446 || (v446 & 1) != 0 || (*(_BYTE *)(v446 + 16) & 0x10) == 0)
            {
LABEL_2133:
              __break(0xC471u);
              JUMPOUT(0x1983AAAE4);
            }
          }
          else if (v445 != 4)
          {
            goto LABEL_2133;
          }
          JSC::DFG::Node::convertToPutByIdMaybeMegamorphic(v1877, *((_QWORD *)this + 4), v402);
          goto LABEL_1273;
        case 0x6A:
          JSC::DFG::ConstantFoldingPhase::tryFoldAsPutByOffset((uint64_t)this, (JSC::DFG::Node *)v66, v25, *(_QWORD *)(v66 + 24), *(_QWORD *)(v66 + 32), 1u, *(_BYTE *)(v66 + 80), v1879, &v1876);
          goto LABEL_119;
        case 0x6E:
        case 0x6F:
        case 0x72:
        case 0x73:
        case 0x74:
        case 0x8F:
          v1864 = *(_QWORD *)(v66 + 24) & 0xFF00FFFFFFFFFFFFLL;
          v246 = JSC::DFG::Node::cacheableIdentifier((JSC::DFG::Node *)v66);
          if (v246)
          {
            if ((v246 & 1) != 0)
              v254 = v246 & 0xFFFFFFFFFFFFFFFELL;
            else
              v254 = *(_QWORD *)(v246 + 8);
          }
          else
          {
            v254 = 0;
          }
          v255 = *((_QWORD *)this + 10);
          v256 = *(unsigned int *)((v1864 & 0xFFFFFFFFFFFFFFFELL) + 20);
          v257 = (uint64_t *)(v255 + 24);
          v258 = (uint64_t *)(v255 + 8);
          if ((v1864 & 1) != 0)
            v259 = v257;
          else
            v259 = v258;
          v260 = *v259;
          v261 = *v259 + 32 * v256;
          v262 = *((_DWORD *)this + 40);
          v263 = *(_DWORD *)(v261 + 20);
          if (v262 == v263)
            goto LABEL_288;
          if ((*(_QWORD *)(v261 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_592;
          if ((v263 ^ v262) < 2)
            goto LABEL_741;
          v665 = *(_QWORD *)v261;
          if (*(_QWORD *)v261 == 4)
            goto LABEL_740;
          *(_QWORD *)v261 = v665 | 2;
          v884 = (unsigned int *)(v665 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v665 & 1) != 0)
          {
            v1325 = 2 * *v884;
            do
            {
              v8 = v1833;
              if (!(v1325 * 4))
                goto LABEL_740;
              v1326 = *(_QWORD *)&v884[v1325];
              if ((*(_BYTE *)(v1326 + 19) & 0xC) != 0)
                break;
              v1327 = *(_QWORD *)(v1326 + 96);
              v1328 = (v1327 & 1) != 0 ? (v1327 >> 1) & 3 : *(unsigned __int8 *)(v1327 + 4);
              v1325 -= 2;
            }
            while (v1328 != 2);
            WTF::fastFree((unint64_t)v884, v247, v248, v249, v250, v251, v252, v253);
            v8 = v1833;
LABEL_1008:
            *(_QWORD *)v261 = 4;
            goto LABEL_740;
          }
          if (v884)
          {
            if ((*((_BYTE *)v884 + 19) & 0xC) != 0)
              goto LABEL_1008;
            v885 = *((_QWORD *)v884 + 12);
            v886 = (v885 & 1) != 0 ? (v885 >> 1) & 3 : *(unsigned __int8 *)(v885 + 4);
            if (v886 == 2)
              goto LABEL_1008;
          }
LABEL_740:
          *(_DWORD *)(v260 + 32 * v256 + 16) = -21020677;
LABEL_741:
          if ((v262 & 1) != 0)
            *(_QWORD *)v261 &= ~2uLL;
LABEL_592:
          *(_DWORD *)(v261 + 20) = v262;
LABEL_288:
          v1861 = 0;
          v264 = *(_QWORD *)v261;
          if ((*(_QWORD *)v261 & 1) == 0 || v264 == 4)
          {
            v265 = v264 & 0xFFFFFFFFFFFFFFFDLL;
            v1861 = v265;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v1861, (_QWORD *)v261);
            v265 = v1861;
          }
          v266 = v265 & 0xFFFFFFFFFFFFFFFDLL;
          v267 = v265 | 2;
          if ((*(_BYTE *)v261 & 2) == 0)
            v267 = v266;
          v1861 = v267;
          v268 = v260 + 32 * v256;
          v269 = *(_OWORD *)(v268 + 8);
          v1863 = *(_QWORD *)(v268 + 24);
          v1862 = v269;
          JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute((uint64_t)v1834, (void *)v1878, v248, v249, v250, v251, v252, v253);
          v1876 = 1;
          v270 = v1861;
          if (byte_1ECF4C42A)
            v271 = v1861 == 4;
          else
            v271 = 1;
          v272 = !v271 && (v1861 & 2) == 0;
          if (v272 && (*(_BYTE *)(v1877 + 30) & 0xFC) != 0 && (v1862 & 0xFFFFD7FF00000008) == 0)
          {
            JSC::DFG::StructureAbstractValue::toStructureSet((uint64_t)&v1861, (uint64_t *)&v1852);
            JSC::GetByStatus::computeFor(&v1852, v254, v478, v479, v480, v481, v482, v483, (uint64_t)&v1856);
            if ((v1852 & 1) != 0)
              WTF::fastFree(v1852 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (v1860 == 1)
            {
              v1852 = (unint64_t)this;
              *(_QWORD *)&v1853 = &v1878;
              *((_QWORD *)&v1853 + 1) = &v1877;
              v1854 = &v1856;
              v1855 = &v1864;
              v598 = *(_QWORD *)(*((_QWORD *)this + 4) + 24);
              if (DWORD1(v1857) == 1)
              {
                v599 = JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(v598 + 240), v254, (uint64_t)a3, a4, a5, a6, a7, a8);
                JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)::{lambda(void)#1}::operator()((uint64_t *)&v1852);
                if (!DWORD1(v1857))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983AC4E4);
                }
                v606 = (uint64_t *)v1877;
                v607 = v1878;
                v608 = v1856;
                v609 = (uint64_t *)(v1877 + 24);
                v610 = *(_QWORD *)(v1877 + 24);
                v611 = JSC::DFG::Graph::addStructureSet(*((_QWORD *)this + 4), (unint64_t *)v1856, v600, v601, v602, v603, v604, v605);
                JSC::DFG::ConstantFoldingPhase::addBaseCheck((uint64_t)this, v607, (uint64_t)v606, (uint64_t *)&v1861, v611);
                v618 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
                if (*((_QWORD *)v608 + 1))
                {
                  JSC::DFG::Graph::logAssertionFailure(v618, (JSC::DFG::Node *)v606, (const WTF::CString *)"./dfg/DFGConstantFoldingPhase.cpp", (const char *)0x55E, "void JSC::DFG::ConstantFoldingPhase::emitGetByOffset(unsigned int, Node *, const AbstractValue &, const GetByVariant &, unsigned int)", "variant.conditionSet().isEmpty()");
                  __break(0xC471u);
                  JUMPOUT(0x1983AB9F0);
                }
                v619 = v1863;
                v620 = JSC::DFG::Graph::addStructureSet(*((_QWORD *)this + 4), (unint64_t *)v608, v612, v613, v614, v615, v616, v617);
                ConstantProperty = JSC::DFG::Graph::tryGetConstantProperty((uint64_t)v618, v619, (unint64_t *)v620, *((unsigned int *)v608 + 4), v621, v622, v623, v624);
                if (ConstantProperty)
                {
                  v1089 = *((_QWORD *)this + 4);
                  v1090 = JSC::DFG::Graph::freeze(v1089, ConstantProperty, v626, v627, v628, v629, v630, v631);
                  a2 = *((_QWORD *)v1090 + 1);
                  if (a2)
                    JSC::DFG::Graph::assertIsRegistered(v1089, a2);
                  v1091 = *((_DWORD *)v606 + 14);
                  if ((v1091 & 7) == 3)
                    v1092 = 1;
                  else
                    v1092 = 2 * ((v1091 & 7) == 5);
                  *((_WORD *)v606 + 9) = v1092;
                  *((_DWORD *)v606 + 14) = v1091 & 0xFFFFFFE7;
                  v606[9] = (uint64_t)v1090;
                  v609[1] = 0;
                  v609[2] = 0;
                  *v609 = 0;
                }
                else
                {
                  JSC::DFG::ConstantFoldingPhase::emitGetByOffset((uint64_t)this, v607, (uint64_t)v606, v610, v599, *((_DWORD *)v608 + 4), v630, v631);
                }
                v1879[0] = 1;
              }
              else if ((*(_DWORD *)(v598 + 16) & 0xFFFFFFFE) == 4)
              {
                v897 = JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(v598 + 240), v254, (uint64_t)a3, a4, a5, a6, a7, a8);
                JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)::{lambda(void)#1}::operator()((uint64_t *)&v1852);
                v898 = *((_QWORD *)this + 4);
                v905 = WTF::fastMalloc((WTF *)0x60);
                *(_OWORD *)v905 = 0u;
                *(_OWORD *)(v905 + 16) = 0u;
                *(_QWORD *)(v905 + 80) = 0;
                *(_QWORD *)(v905 + 88) = 0;
                *(_OWORD *)(v905 + 48) = 0u;
                *(_OWORD *)(v905 + 64) = 0u;
                *(_OWORD *)(v905 + 32) = 0u;
                *(_QWORD *)(v905 + 8) = v905 + 24;
                *(_DWORD *)(v905 + 16) = 2;
                *(_QWORD *)(v905 + 88) = *(_QWORD *)(v898 + 536);
                *(_QWORD *)(v898 + 536) = v905;
                if (DWORD1(v1857))
                {
                  v1521 = v1856;
                  v1522 = (WTF *)((char *)v1856 + 64 * (unint64_t)DWORD1(v1857));
                  do
                  {
                    v1523 = JSC::DFG::Graph::addStructureSet(*((_QWORD *)this + 4), (unint64_t *)v1521, v899, v900, v901, v902, v903, v904);
                    v1524 = *((_DWORD *)v1521 + 4);
                    v1850 = 2;
                    DWORD2(v1849) = v1524;
                    JSC::DFG::MultiGetByOffsetCase::MultiGetByOffsetCase((uint64_t)v1851, v1523, &v1849);
                    v1531 = *(unsigned int *)(v905 + 20);
                    if ((_DWORD)v1531 == *(_DWORD *)(v905 + 16))
                    {
                      WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::MultiGetByOffsetCase>(v905 + 8, (unint64_t)v1851, v1525, v1526, v1527, v1528, v1529, v1530);
                    }
                    else
                    {
                      JSC::DFG::MultiGetByOffsetCase::MultiGetByOffsetCase(*(_QWORD *)(v905 + 8) + 32 * v1531, v1851);
                      ++*(_DWORD *)(v905 + 20);
                    }
                    if ((v1851[0] & 1) != 0)
                      WTF::fastFree(v1851[0] & 0xFFFFFFFFFFFFFFFCLL, v1532, (uint64_t)v899, v900, v901, v902, v903, v904);
                    v1521 = (WTF *)((char *)v1521 + 64);
                  }
                  while (v1521 != v1522);
                }
                *(_DWORD *)v905 = v897;
                JSC::DFG::Node::convertToMultiGetByOffset(v1877, v905);
                v1879[0] = 1;
                v8 = v1833;
              }
            }
            v484 = (unsigned int *)v1859;
            v1859 = 0;
            if (v484)
            {
              do
              {
                v485 = __ldaxr(v484);
                v486 = v485 - 1;
              }
              while (__stlxr(v486, v484));
              if (!v486)
              {
                atomic_store(1u, v484);
                WTF::fastFree((unint64_t)v484, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
            }
            if (DWORD1(v1857))
            {
              v662 = v1856;
              v663 = (unint64_t)DWORD1(v1857) << 6;
              do
              {
                JSC::GetByVariant::~GetByVariant(v662, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                v662 = (WTF *)(v664 + 64);
                v663 -= 64;
              }
              while (v663);
            }
            v487 = v1856;
            if ((WTF *)((char *)&v1857 + 8) != v1856 && v1856 != 0)
            {
              v1856 = 0;
              LODWORD(v1857) = 0;
              WTF::fastFree((unint64_t)v487, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            v270 = v1861;
          }
LABEL_299:
          if ((v270 & 1) != 0)
            WTF::fastFree(v270 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_119;
        case 0x75:
        case 0x76:
        case 0x77:
        case 0x79:
          JSC::DFG::ConstantFoldingPhase::tryFoldAsPutByOffset((uint64_t)this, (JSC::DFG::Node *)v66, v25, *(_QWORD *)(v66 + 24), *(_QWORD *)(v66 + 32), v67 == 119, 0, v1879, &v1876);
          goto LABEL_119;
        case 0x84:
        case 0x92:
          goto LABEL_386;
        case 0x85:
          v335 = *(_QWORD *)(v66 + 24);
          v336 = *((_QWORD *)this + 10);
          v337 = *(unsigned int *)((v335 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v338 = (uint64_t *)(v336 + 24);
          v339 = (uint64_t *)(v336 + 8);
          if ((v335 & 1) != 0)
            v340 = v338;
          else
            v340 = v339;
          v341 = *v340;
          v342 = *v340 + 32 * v337;
          v343 = *((_DWORD *)this + 40);
          v344 = *(_DWORD *)(v342 + 20);
          if (v343 == v344)
            goto LABEL_384;
          if ((*(_QWORD *)(v342 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_726;
          if ((v344 ^ v343) < 2)
            goto LABEL_891;
          v777 = *(_QWORD *)v342;
          if (*(_QWORD *)v342 == 4)
            goto LABEL_890;
          *(_QWORD *)v342 = v777 | 2;
          v999 = (unsigned int *)(v777 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v777 & 1) != 0)
          {
            v1475 = 2 * *v999;
            do
            {
              v8 = v1833;
              if (!(v1475 * 4))
                goto LABEL_890;
              v1476 = *(_QWORD *)&v999[v1475];
              if ((*(_BYTE *)(v1476 + 19) & 0xC) != 0)
                break;
              v1477 = *(_QWORD *)(v1476 + 96);
              v1478 = (v1477 & 1) != 0 ? (v1477 >> 1) & 3 : *(unsigned __int8 *)(v1477 + 4);
              v1475 -= 2;
            }
            while (v1478 != 2);
            WTF::fastFree((unint64_t)v999, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v8 = v1833;
LABEL_1180:
            *(_QWORD *)v342 = 4;
            goto LABEL_890;
          }
          if (v999)
          {
            if ((*((_BYTE *)v999 + 19) & 0xC) != 0)
              goto LABEL_1180;
            v1000 = *((_QWORD *)v999 + 12);
            v1001 = (v1000 & 1) != 0 ? (v1000 >> 1) & 3 : *(unsigned __int8 *)(v1000 + 4);
            if (v1001 == 2)
              goto LABEL_1180;
          }
LABEL_890:
          *(_DWORD *)(v341 + 32 * v337 + 16) = -21020677;
LABEL_891:
          if ((v343 & 1) != 0)
            *(_QWORD *)v342 &= ~2uLL;
LABEL_726:
          *(_DWORD *)(v342 + 20) = v343;
LABEL_384:
          if ((*(_BYTE *)(v342 + 13) & 4) != 0)
            goto LABEL_119;
          v66 = v1877;
          *(_WORD *)(v1877 + 18) = 132;
          *(_DWORD *)(v66 + 56) = 8;
          v1879[0] = 1;
LABEL_386:
          v345 = *(_QWORD *)(v66 + 24);
          v346 = *((_QWORD *)this + 10);
          v347 = *(unsigned int *)((v345 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v348 = (uint64_t *)(v346 + 24);
          v349 = (uint64_t *)(v346 + 8);
          if ((v345 & 1) != 0)
            v350 = v348;
          else
            v350 = v349;
          v351 = *v350;
          v352 = *v350 + 32 * v347;
          v353 = *((_DWORD *)this + 40);
          v355 = (unsigned int *)(v352 + 20);
          v354 = *(_DWORD *)(v352 + 20);
          if (v353 != v354)
          {
            if ((*(_QWORD *)(v352 + 8) & 0x2800FFFFFFF7) != 0)
            {
              if ((v354 ^ v353) >= 2)
              {
                v447 = *(_QWORD *)v352;
                if (*(_QWORD *)v352 != 4)
                {
                  *(_QWORD *)v352 = v447 | 2;
                  v516 = (unsigned int *)(v447 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v447 & 1) != 0)
                  {
                    v1126 = 2 * *v516;
                    while (v1126 * 4)
                    {
                      v1127 = *(_QWORD *)&v516[v1126];
                      if ((*(_BYTE *)(v1127 + 19) & 0xC) == 0)
                      {
                        v1128 = *(_QWORD *)(v1127 + 96);
                        v1129 = (v1128 & 1) != 0 ? (v1128 >> 1) & 3 : *(unsigned __int8 *)(v1128 + 4);
                        v1126 -= 2;
                        if (v1129 != 2)
                          continue;
                      }
                      WTF::fastFree((unint64_t)v516, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      goto LABEL_601;
                    }
                  }
                  else if (v516)
                  {
                    if ((*((_BYTE *)v516 + 19) & 0xC) != 0
                      || ((v517 = *((_QWORD *)v516 + 12), (v517 & 1) != 0)
                        ? (v518 = (v517 >> 1) & 3)
                        : (v518 = *(unsigned __int8 *)(v517 + 4)),
                          v518 == 2))
                    {
LABEL_601:
                      *(_QWORD *)v352 = 4;
                    }
                  }
                }
                *(_DWORD *)(v351 + 32 * v347 + 16) = -21020677;
              }
              if ((v353 & 1) != 0)
                *(_QWORD *)v352 &= ~2uLL;
              *v355 = v353;
              v66 = v1877;
            }
            else
            {
              *v355 = v353;
            }
          }
          v1856 = 0;
          if (*(_WORD *)(v66 + 18) == 146)
          {
            v560 = *(_QWORD *)(v66 + 72);
            v1852 = v560;
            if ((v560 & 1) == 0 || v560 == 4)
            {
              v561 = v560 & 1;
              v1856 = (WTF *)(v560 & 0xFFFFFFFFFFFFFFFDLL);
            }
            else
            {
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v1856, &v1852);
              v560 = v1852;
              v561 = v1852 & 1;
            }
            if (v561)
            {
              v382 = v560 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_648:
              WTF::fastFree(v382, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
          }
          else
          {
            a2 = *(_QWORD *)(v66 + 72);
            if (&v1856 != (WTF **)a2)
            {
              v356 = *(_QWORD *)a2;
              if ((*(_QWORD *)a2 & 1) == 0 || v356 == 4)
              {
                v1856 = (WTF *)(v356 & 0xFFFFFFFFFFFFFFFDLL);
              }
              else
              {
                WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v1856, (_QWORD *)a2);
                v66 = v1877;
              }
            }
            v357 = *(_QWORD *)(v66 + 24);
            if ((v357 & 0xFC000000000000) == 0x20000000000000)
            {
              v358 = *((_QWORD *)this + 10);
              v359 = *(unsigned int *)((v357 & 0xFF00FFFFFFFFFFFELL) + 0x14);
              v360 = (uint64_t *)(v358 + 24);
              v361 = (uint64_t *)(v358 + 8);
              if ((v357 & 1) != 0)
                v362 = v360;
              else
                v362 = v361;
              v363 = *v362;
              v364 = *v362 + 32 * v359;
              v365 = *((_DWORD *)this + 40);
              v366 = *(_DWORD *)(v364 + 20);
              if (v365 != v366)
              {
                if ((*(_QWORD *)(v364 + 8) & 0x2800FFFFFFF7) != 0)
                {
                  if ((v366 ^ v365) >= 2)
                  {
                    v448 = *(_QWORD *)v364;
                    if (*(_QWORD *)v364 != 4)
                    {
                      *(_QWORD *)v364 = v448 | 2;
                      v519 = (unsigned int *)(v448 & 0xFFFFFFFFFFFFFFFCLL);
                      if ((v448 & 1) != 0)
                      {
                        v1130 = 2 * *v519;
                        while (v1130 * 4)
                        {
                          v1131 = *(_QWORD *)&v519[v1130];
                          if ((*(_BYTE *)(v1131 + 19) & 0xC) == 0)
                          {
                            v1132 = *(_QWORD *)(v1131 + 96);
                            v1133 = (v1132 & 1) != 0 ? (v1132 >> 1) & 3 : *(unsigned __int8 *)(v1132 + 4);
                            v1130 -= 2;
                            v8 = v1833;
                            if (v1133 != 2)
                              continue;
                          }
                          WTF::fastFree((unint64_t)v519, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          goto LABEL_608;
                        }
                      }
                      else if (v519)
                      {
                        if ((*((_BYTE *)v519 + 19) & 0xC) != 0
                          || ((v520 = *((_QWORD *)v519 + 12), (v520 & 1) != 0)
                            ? (v521 = (v520 >> 1) & 3)
                            : (v521 = *(unsigned __int8 *)(v520 + 4)),
                              v521 == 2))
                        {
LABEL_608:
                          *(_QWORD *)v364 = 4;
                        }
                      }
                    }
                    *(_DWORD *)(v363 + 32 * v359 + 16) = -21020677;
                  }
                  if ((v365 & 1) != 0)
                    *(_QWORD *)v364 &= ~2uLL;
                }
                *(_DWORD *)(v364 + 20) = v365;
              }
              if ((*(_BYTE *)(v364 + 13) & 4) != 0)
              {
                v378 = v1878;
                v379 = v1877;
                v380 = *(_QWORD *)v1877;
                if ((*(_QWORD *)v1877 & 1) != 0)
                {
                  v1358 = *(_QWORD *)(v380 & 0xFFFFFFFF8);
                  if ((v380 & 2) != 0
                    || ((v1359 = *(unsigned int *)((v380 & 0xFFFFFFFF8) + 8), (_DWORD)v1359 != 0x3FFFFFFF)
                      ? (v1360 = (_DWORD)v1359 == -1)
                      : (v1360 = 1),
                        v1360))
                  {
                    v1361 = 2;
                  }
                  else if (v1359 >> 28)
                  {
                    v1785 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1785 = v1358;
                    *(_DWORD *)(v1785 + 8) = v1359;
                    v1361 = 1;
                    v1358 = v1785;
                  }
                  else
                  {
                    v1361 = *(_QWORD *)(v380 & 0xFFFFFFFF8);
                    v1358 = v1359 << 36;
                  }
                  v380 = v1358 | v1361;
                  v8 = v1833;
                }
                v1873 = v380;
                v381 = *(_QWORD *)(v379 + 8);
                if ((v381 & 1) != 0)
                {
                  v1362 = *(_QWORD *)(v381 & 0xFFFFFFFF8);
                  if ((v381 & 2) != 0
                    || ((v1363 = *(unsigned int *)((v381 & 0xFFFFFFFF8) + 8), (_DWORD)v1363 != 0x3FFFFFFF)
                      ? (v1364 = (_DWORD)v1363 == -1)
                      : (v1364 = 1),
                        v1364))
                  {
                    v1365 = 2;
                  }
                  else if (v1363 >> 28)
                  {
                    v1786 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1786 = v1362;
                    *(_DWORD *)(v1786 + 8) = v1363;
                    v1365 = 1;
                    v1362 = v1786;
                  }
                  else
                  {
                    v1365 = *(_QWORD *)(v381 & 0xFFFFFFFF8);
                    v1362 = v1363 << 36;
                  }
                  v381 = v1362 | v1365;
                  v8 = v1833;
                }
                v1874 = v381;
                v1875 = *(_WORD *)(v379 + 16);
                JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>((uint64_t)this + 208, v378, 0, 184, (uint64_t)&v1873, *(_QWORD *)(v1877 + 24) & 0xFF00FFFFFFFFFFFFLL, a7, a8);
                if ((v1874 & 1) != 0 && (v1874 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v1874 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                if ((v1873 & 1) != 0)
                {
                  v382 = v1873 & 0xFFFFFFFF8;
                  if ((v1873 & 0xFFFFFFFF8) != 0)
                    goto LABEL_648;
                }
              }
            }
          }
          v367 = *(_QWORD *)v352;
          if (*(_QWORD *)v352 == 4 || (*(_QWORD *)v352 & 2) != 0)
            goto LABEL_404;
          if ((v367 & 1) != 0)
          {
            if ((v1856 & 1) != 0)
            {
              v462 = (unsigned int *)(v367 & 0xFFFFFFFFFFFFFFFCLL);
              v465 = *v462;
              v463 = v462 + 2;
              v464 = v465;
              if (v465)
              {
                v466 = (unint64_t)v1856 & 0xFFFFFFFFFFFFFFFCLL;
                v467 = *(unsigned int *)((unint64_t)v1856 & 0xFFFFFFFFFFFFFFFCLL);
                if ((_DWORD)v467)
                {
                  v468 = 0;
                  v469 = *(_QWORD *)(v466 + 8);
                  v470 = v466 + 16;
                  while (1)
                  {
                    v471 = *(_QWORD *)&v463[2 * v468];
                    if (v469 != v471)
                      break;
LABEL_525:
                    if (++v468 == v464)
                      goto LABEL_413;
                  }
                  v472 = 0;
                  while (v467 - 1 != v472)
                  {
                    v473 = *(_QWORD *)(v470 + 8 * v472++);
                    if (v473 == v471)
                    {
                      if (v472 >= v467)
                        goto LABEL_404;
                      goto LABEL_525;
                    }
                  }
                }
                goto LABEL_404;
              }
            }
            else
            {
              if (((unint64_t)v1856 & 0xFFFFFFFFFFFFFFFCLL) == 0)
                goto LABEL_404;
              v559 = v367 & 0xFFFFFFFFFFFFFFFCLL;
              if (*(_DWORD *)v559 > 1u || *(_QWORD *)(v559 + 8) != ((unint64_t)v1856 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_404;
            }
          }
          else
          {
            v370 = v367 & 0xFFFFFFFFFFFFFFFCLL;
            if (v370)
            {
              v371 = (unsigned int *)((unint64_t)v1856 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v1856 & 1) != 0)
              {
                v474 = *v371;
                if (!(_DWORD)v474)
                  goto LABEL_404;
                if (*((_QWORD *)v371 + 1) != v370)
                {
                  v475 = 0;
                  v476 = v371 + 4;
                  while (v474 - 1 != v475)
                  {
                    v477 = *(_QWORD *)&v476[2 * v475++];
                    if (v477 == v370)
                    {
                      if (v475 < v474)
                        goto LABEL_413;
                      break;
                    }
                  }
LABEL_404:
                  v369 = 0;
                  goto LABEL_405;
                }
              }
              else if (v371 != (unsigned int *)v370)
              {
                goto LABEL_404;
              }
            }
          }
LABEL_413:
          JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute((uint64_t)v1834, (void *)v1878, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::Node::remove((JSC::DFG::Node *)v1877, *((JSC::DFG::Graph **)this + 4), v372, v373, v374, v375, v376, v377);
          v369 = 1;
LABEL_405:
          if ((v1856 & 1) != 0)
            WTF::fastFree((unint64_t)v1856 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (v369)
            goto LABEL_229;
          goto LABEL_119;
        case 0x87:
          v273 = *(_QWORD *)(v66 + 24);
          v274 = *((_QWORD *)this + 10);
          v275 = *(unsigned int *)((v273 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v276 = (uint64_t *)(v274 + 24);
          v277 = (uint64_t *)(v274 + 8);
          if ((v273 & 1) != 0)
            v278 = v276;
          else
            v278 = v277;
          v279 = *v278;
          v280 = *v278 + 32 * v275;
          v281 = *((_DWORD *)this + 40);
          v282 = *(_DWORD *)(v280 + 20);
          if (v281 == v282)
            goto LABEL_305;
          if ((*(_QWORD *)(v280 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_594;
          if ((v282 ^ v281) < 2)
            goto LABEL_746;
          v666 = *(_QWORD *)v280;
          if (*(_QWORD *)v280 == 4)
            goto LABEL_745;
          *(_QWORD *)v280 = v666 | 2;
          v894 = (unsigned int *)(v666 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v666 & 1) != 0)
          {
            v1329 = 2 * *v894;
            do
            {
              v8 = v1833;
              if (!(v1329 * 4))
                goto LABEL_745;
              v1330 = *(_QWORD *)&v894[v1329];
              if ((*(_BYTE *)(v1330 + 19) & 0xC) != 0)
                break;
              v1331 = *(_QWORD *)(v1330 + 96);
              v1332 = (v1331 & 1) != 0 ? (v1331 >> 1) & 3 : *(unsigned __int8 *)(v1331 + 4);
              v1329 -= 2;
            }
            while (v1332 != 2);
            WTF::fastFree((unint64_t)v894, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v8 = v1833;
LABEL_1025:
            *(_QWORD *)v280 = 4;
            goto LABEL_745;
          }
          if (v894)
          {
            if ((*((_BYTE *)v894 + 19) & 0xC) != 0)
              goto LABEL_1025;
            v895 = *((_QWORD *)v894 + 12);
            v896 = (v895 & 1) != 0 ? (v895 >> 1) & 3 : *(unsigned __int8 *)(v895 + 4);
            if (v896 == 2)
              goto LABEL_1025;
          }
LABEL_745:
          *(_DWORD *)(v279 + 32 * v275 + 16) = -21020677;
LABEL_746:
          if ((v281 & 1) != 0)
            *(_QWORD *)v280 &= ~2uLL;
LABEL_594:
          *(_DWORD *)(v280 + 20) = v281;
LABEL_305:
          v283 = *(_QWORD *)v280;
          if (*(_QWORD *)v280 == 4 || (*(_QWORD *)v280 & 2) != 0)
            goto LABEL_848;
          v285 = v283 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v283 & 1) != 0)
          {
            if (*(_DWORD *)v285 == 1)
              v285 = *(_QWORD *)(v285 + 8);
            else
LABEL_848:
              v285 = 0;
          }
          v186 = (JSC::DFG::Node *)v1877;
          if (*(_QWORD *)(*(_QWORD *)(v1877 + 72) + 8) == v285)
            goto LABEL_241;
          goto LABEL_119;
        case 0x8C:
        case 0x91:
          goto LABEL_1494;
        case 0x8D:
          v908 = *(_QWORD *)(v66 + 24);
          v909 = *((_QWORD *)this + 10);
          v910 = *(unsigned int *)((v908 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v911 = (_QWORD *)(v909 + 24);
          v912 = (_QWORD *)(v909 + 8);
          if ((v908 & 1) != 0)
            v913 = v911;
          else
            v913 = v912;
          v914 = *v913 + 32 * v910;
          a2 = *((unsigned int *)this + 40);
          if ((_DWORD)a2 != *(_DWORD *)(v914 + 20))
          {
            if ((*(_QWORD *)(v914 + 8) & 0x2800FFFFFFF7) != 0)
            {
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v914, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              v66 = v1877;
            }
            else
            {
              *(_DWORD *)(v914 + 20) = a2;
            }
          }
          if ((*(_BYTE *)(v914 + 13) & 4) == 0)
          {
            *(_WORD *)(v66 + 18) = 140;
            *(_DWORD *)(v66 + 56) = 8;
            v1879[0] = 1;
LABEL_1495:
            v1171 = *(_DWORD *)(v66 + 72);
            goto LABEL_1496;
          }
          v67 = *(unsigned __int16 *)(v66 + 18);
LABEL_1494:
          if (v67 != 146)
            goto LABEL_1495;
          v1171 = *(_DWORD *)(v66 + 80);
LABEL_1496:
          LODWORD(v1856) = v1171;
          v1172 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
          v1173 = *(_QWORD *)(v66 + 24);
          v1174 = *((_QWORD *)this + 10);
          v1175 = *(unsigned int *)((v1173 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1176 = (uint64_t *)(v1174 + 24);
          v1177 = (uint64_t *)(v1174 + 8);
          if ((v1173 & 1) != 0)
            v1178 = v1176;
          else
            v1178 = v1177;
          v1179 = *v1178;
          v1180 = *v1178 + 32 * v1175;
          v1181 = *((_DWORD *)this + 40);
          v1182 = *(_DWORD *)(v1180 + 20);
          if (v1181 != v1182)
          {
            if ((*(_QWORD *)(v1180 + 8) & 0x2800FFFFFFF7) != 0)
            {
              if ((v1182 ^ v1181) >= 2)
              {
                v1183 = *(_QWORD *)v1180;
                if (*(_QWORD *)v1180 != 4)
                {
                  *(_QWORD *)v1180 = v1183 | 2;
                  v1184 = (unsigned int *)(v1183 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v1183 & 1) != 0)
                  {
                    v1517 = 2 * *v1184;
                    while (v1517 * 4)
                    {
                      v1518 = *(_QWORD *)&v1184[v1517];
                      if ((*(_BYTE *)(v1518 + 19) & 0xC) == 0)
                      {
                        v1519 = *(_QWORD *)(v1518 + 96);
                        v1520 = (v1519 & 1) != 0 ? (v1519 >> 1) & 3 : *(unsigned __int8 *)(v1519 + 4);
                        v1517 -= 2;
                        if (v1520 != 2)
                          continue;
                      }
                      WTF::fastFree((unint64_t)v1184, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      goto LABEL_1515;
                    }
                  }
                  else if (v1184)
                  {
                    if ((*((_BYTE *)v1184 + 19) & 0xC) != 0
                      || ((v1185 = *((_QWORD *)v1184 + 12), (v1185 & 1) != 0)
                        ? (v1186 = (v1185 >> 1) & 3)
                        : (v1186 = *(unsigned __int8 *)(v1185 + 4)),
                          v1186 == 2))
                    {
LABEL_1515:
                      *(_QWORD *)v1180 = 4;
                    }
                  }
                }
                *(_DWORD *)(v1179 + 32 * v1175 + 16) = -21020677;
              }
              if ((v1181 & 1) != 0)
                *(_QWORD *)v1180 &= ~2uLL;
            }
            *(_DWORD *)(v1180 + 20) = v1181;
          }
          v8 = v1833;
          if (!JSC::DFG::ArrayMode::alreadyChecked((JSC::DFG::ArrayMode *)&v1856, v1172, (JSC::DFG::Node *)v66, (const JSC::DFG::AbstractValue *)v1180, a5, a6, a7, a8))goto LABEL_119;
LABEL_240:
          v186 = (JSC::DFG::Node *)v1877;
LABEL_241:
          v185 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
          goto LABEL_228;
        case 0x93:
          v494 = *((_QWORD *)this + 4);
          v495 = *(_QWORD *)(v66 + 24);
          v496 = *((_QWORD *)this + 10);
          v497 = *(unsigned int *)((v495 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v498 = (uint64_t *)(v496 + 24);
          v499 = (uint64_t *)(v496 + 8);
          if ((v495 & 1) != 0)
            v500 = v498;
          else
            v500 = v499;
          v501 = *v500;
          v502 = *v500 + 32 * v497;
          v503 = *((_DWORD *)this + 40);
          v505 = (unsigned int *)(v502 + 20);
          v504 = *(_DWORD *)(v502 + 20);
          if (v503 == v504)
            goto LABEL_578;
          if ((*(_QWORD *)(v502 + 8) & 0x2800FFFFFFF7) == 0)
          {
            *v505 = v503;
LABEL_578:
            v506 = *(_QWORD *)(v502 + 24);
LABEL_579:
            v507 = *(unsigned int *)(v66 + 72);
            goto LABEL_580;
          }
          if ((v504 ^ v503) >= 2)
          {
            v1075 = *(_QWORD *)v502;
            if (*(_QWORD *)v502 != 4)
            {
              *(_QWORD *)v502 = v1075 | 2;
              v1168 = (unsigned int *)(v1075 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v1075 & 1) != 0)
              {
                v1533 = 2 * *v1168;
                while (v1533 * 4)
                {
                  v1534 = *(_QWORD *)&v1168[v1533];
                  if ((*(_BYTE *)(v1534 + 19) & 0xC) == 0)
                  {
                    v1535 = *(_QWORD *)(v1534 + 96);
                    v1536 = (v1535 & 1) != 0 ? (v1535 >> 1) & 3 : *(unsigned __int8 *)(v1535 + 4);
                    v1533 -= 2;
                    if (v1536 != 2)
                      continue;
                  }
                  WTF::fastFree((unint64_t)v1168, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  goto LABEL_1490;
                }
              }
              else if (v1168)
              {
                if ((*((_BYTE *)v1168 + 19) & 0xC) != 0
                  || ((v1169 = *((_QWORD *)v1168 + 12), (v1169 & 1) != 0)
                    ? (v1170 = (v1169 >> 1) & 3)
                    : (v1170 = *(unsigned __int8 *)(v1169 + 4)),
                      v1170 == 2))
                {
LABEL_1490:
                  *(_QWORD *)v502 = 4;
                }
              }
            }
            *(_DWORD *)(v501 + 32 * v497 + 16) = -21020677;
          }
          if ((v503 & 1) != 0)
            *(_QWORD *)v502 &= ~2uLL;
          *v505 = v503;
          v66 = v1877;
          v506 = *(_QWORD *)(v501 + 32 * v497 + 24);
          if (*(_WORD *)(v1877 + 18) != 146)
            goto LABEL_579;
          v507 = *(unsigned int *)(v1877 + 80);
LABEL_580:
          v8 = v1833;
          FoldableView = JSC::DFG::Graph::tryGetFoldableView(v494, v506, v507, a4, a5, a6, a7, a8);
          if (!FoldableView)
            goto LABEL_119;
          v509 = FoldableView;
          if (*(_BYTE *)(FoldableView + 40) == 16)
            goto LABEL_119;
          JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute((uint64_t)v1834, (void *)v1878, (uint64_t)a3, a4, a5, a6, a7, a8);
          v510 = v1878;
          v511 = v1877;
          v512 = *(_QWORD *)v1877;
          if ((*(_QWORD *)v1877 & 1) != 0)
          {
            v1554 = *(_QWORD *)(v512 & 0xFFFFFFFF8);
            if ((v512 & 2) != 0
              || ((v1555 = *(unsigned int *)((v512 & 0xFFFFFFFF8) + 8), (_DWORD)v1555 != 0x3FFFFFFF)
                ? (v1556 = (_DWORD)v1555 == -1)
                : (v1556 = 1),
                  v1556))
            {
              v1557 = 2;
            }
            else if (v1555 >> 28)
            {
              v1789 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v1789 = v1554;
              *(_DWORD *)(v1789 + 8) = v1555;
              v1557 = 1;
              v1554 = v1789;
            }
            else
            {
              v1557 = *(_QWORD *)(v512 & 0xFFFFFFFF8);
              v1554 = v1555 << 36;
            }
            v512 = v1554 | v1557;
            v8 = v1833;
          }
          v1870 = v512;
          v513 = *(_QWORD *)(v511 + 8);
          if ((v513 & 1) != 0)
          {
            v1558 = *(_QWORD *)(v513 & 0xFFFFFFFF8);
            if ((v513 & 2) != 0
              || ((v1559 = *(unsigned int *)((v513 & 0xFFFFFFFF8) + 8), (_DWORD)v1559 != 0x3FFFFFFF)
                ? (v1560 = (_DWORD)v1559 == -1)
                : (v1560 = 1),
                  v1560))
            {
              v1561 = 2;
            }
            else if (v1559 >> 28)
            {
              v1790 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v1790 = v1558;
              *(_DWORD *)(v1790 + 8) = v1559;
              v1561 = 1;
              v1558 = v1790;
            }
            else
            {
              v1561 = *(_QWORD *)(v513 & 0xFFFFFFFF8);
              v1558 = v1559 << 36;
            }
            v513 = v1558 | v1561;
            v8 = v1833;
          }
          v1871 = v513;
          v1872 = *(_WORD *)(v511 + 16);
          v1869 = *(_QWORD *)(v1877 + 40);
          v1868 = *(_OWORD *)(v1877 + 24);
          JSC::DFG::InsertionSet::insertCheck((uint64_t)this + 208, v510, (uint64_t)&v1870, (unint64_t *)&v1868);
          if ((v1871 & 1) != 0 && (v1871 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1871 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if ((v1870 & 1) != 0 && (v1870 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1870 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v514 = (_QWORD *)v1877;
          v515 = *(_QWORD *)(v509 + 16);
          if (v515 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v515 = (v515 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_WORD *)(v1877 + 18) = 149;
          v514[9] = v515;
          v514[4] = 0;
          v514[5] = 0;
          v514[3] = 0;
          goto LABEL_229;
        case 0x94:
          v587 = *(_QWORD *)(v66 + 24);
          v588 = *((_QWORD *)this + 10);
          v589 = *(unsigned int *)((v587 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v590 = (uint64_t *)(v588 + 24);
          v591 = (uint64_t *)(v588 + 8);
          if ((v587 & 1) != 0)
            v592 = v590;
          else
            v592 = v591;
          v593 = *v592;
          v594 = *v592 + 32 * v589;
          v595 = *((_DWORD *)this + 40);
          v596 = *(_DWORD *)(v594 + 20);
          if (v595 == v596)
            goto LABEL_675;
          if ((*(_QWORD *)(v594 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_1155;
          if ((v596 ^ v595) < 2)
            goto LABEL_1416;
          v1139 = *(_QWORD *)v594;
          if (*(_QWORD *)v594 == 4)
            goto LABEL_1415;
          *(_QWORD *)v594 = v1139 | 2;
          v1258 = (unsigned int *)(v1139 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1139 & 1) != 0)
          {
            v1589 = 2 * *v1258;
            do
            {
              if (!(v1589 * 4))
                goto LABEL_1415;
              v1590 = *(_QWORD *)&v1258[v1589];
              if ((*(_BYTE *)(v1590 + 19) & 0xC) != 0)
                break;
              v1591 = *(_QWORD *)(v1590 + 96);
              v1592 = (v1591 & 1) != 0 ? (v1591 >> 1) & 3 : *(unsigned __int8 *)(v1591 + 4);
              v1589 -= 2;
            }
            while (v1592 != 2);
            WTF::fastFree((unint64_t)v1258, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_1648:
            *(_QWORD *)v594 = 4;
            goto LABEL_1415;
          }
          if (v1258)
          {
            if ((*((_BYTE *)v1258 + 19) & 0xC) != 0)
              goto LABEL_1648;
            v1259 = *((_QWORD *)v1258 + 12);
            v1260 = (v1259 & 1) != 0 ? (v1259 >> 1) & 3 : *(unsigned __int8 *)(v1259 + 4);
            if (v1260 == 2)
              goto LABEL_1648;
          }
LABEL_1415:
          *(_DWORD *)(v593 + 32 * v589 + 16) = -21020677;
LABEL_1416:
          v8 = v1833;
          if ((v595 & 1) != 0)
            *(_QWORD *)v594 &= ~2uLL;
LABEL_1155:
          *(_DWORD *)(v594 + 20) = v595;
LABEL_675:
          if ((*(_QWORD *)(v594 + 8) & 0xFFFFFFFFEFFFFFFFLL) == 0)
          {
            v597 = v1877;
            if ((*(_QWORD *)(v1877 + 24) & 0xFF00FFFFFFFFFFFFLL) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1983ABDA8);
            }
            if ((*(_QWORD *)(v1877 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1983A6554);
            }
LABEL_1036:
            v906 = 1;
            if ((*(_DWORD *)(v597 + 56) & 7u) - 3 <= 4)
              v906 = dword_1991556F0[(*(_DWORD *)(v597 + 56) & 7) - 3];
            *(_WORD *)(v597 + 18) = 4;
            *(_DWORD *)(v597 + 56) = v906;
            v1879[0] = 1;
          }
          goto LABEL_119;
        case 0x9A:
          v719 = *(_QWORD *)(v66 + 24);
          v720 = *(_QWORD *)(v66 + 72);
          v721 = *((_QWORD *)this + 10);
          v722 = *(unsigned int *)((v719 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v723 = (uint64_t *)(v721 + 24);
          v724 = (uint64_t *)(v721 + 8);
          if ((v719 & 1) != 0)
            v725 = v723;
          else
            v725 = v724;
          v726 = *v725;
          v727 = *v725 + 32 * v722;
          v728 = *((_DWORD *)this + 40);
          v729 = *(_DWORD *)(v727 + 20);
          if (v728 == v729)
            goto LABEL_807;
          if ((*(_QWORD *)(v727 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_1365;
          if ((v729 ^ v728) < 2)
            goto LABEL_1601;
          v1244 = *(_QWORD *)v727;
          if (*(_QWORD *)v727 == 4)
            goto LABEL_1600;
          *(_QWORD *)v727 = v1244 | 2;
          v1322 = (unsigned int *)(v1244 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1244 & 1) != 0)
          {
            v1617 = 2 * *v1322;
            do
            {
              if (!(v1617 * 4))
                goto LABEL_1600;
              v1618 = *(_QWORD *)&v1322[v1617];
              if ((*(_BYTE *)(v1618 + 19) & 0xC) != 0)
                break;
              v1619 = *(_QWORD *)(v1618 + 96);
              v1620 = (v1619 & 1) != 0 ? (v1619 >> 1) & 3 : *(unsigned __int8 *)(v1619 + 4);
              v1617 -= 2;
            }
            while (v1620 != 2);
            WTF::fastFree((unint64_t)v1322, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          else if (!v1322
                 || (*((_BYTE *)v1322 + 19) & 0xC) == 0
                 && ((v1323 = *((_QWORD *)v1322 + 12), (v1323 & 1) != 0)
                   ? (v1324 = (v1323 >> 1) & 3)
                   : (v1324 = *(unsigned __int8 *)(v1323 + 4)),
                     v1324 != 2))
          {
LABEL_1600:
            *(_DWORD *)(v726 + 32 * v722 + 16) = -21020677;
LABEL_1601:
            v8 = v1833;
            if ((v728 & 1) != 0)
              *(_QWORD *)v727 &= ~2uLL;
LABEL_1365:
            *(_DWORD *)(v727 + 20) = v728;
LABEL_807:
            v1856 = 0;
            v730 = *(_QWORD *)v727;
            if ((*(_QWORD *)v727 & 1) == 0 || v730 == 4)
            {
              v731 = v730 & 0xFFFFFFFFFFFFFFFDLL;
              v1856 = (WTF *)v731;
            }
            else
            {
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v1856, (_QWORD *)v727);
              v731 = (unint64_t)v1856;
            }
            v732 = v731 & 0xFFFFFFFFFFFFFFFDLL;
            v733 = (WTF *)(v731 | 2);
            if ((*(_BYTE *)v727 & 2) == 0)
              v733 = (WTF *)v732;
            v1856 = v733;
            v734 = v726 + 32 * v722;
            v735 = *(_OWORD *)(v734 + 8);
            v1858 = *(_QWORD *)(v734 + 24);
            v1857 = v735;
            JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute((uint64_t)v1834, (void *)v1878, (uint64_t)a3, a4, a5, a6, a7, a8);
            v1876 = 1;
            if (*(_DWORD *)(v720 + 20))
            {
              v736 = 0;
              v737 = 0;
              do
              {
                v738 = (JSC::DFG::RegisteredStructureSet *)(*(_QWORD *)(v720 + 8) + 32 * v736);
                JSC::DFG::RegisteredStructureSet::filter(v738, (const JSC::DFG::AbstractValue *)&v1856, (uint64_t)a3, a4, a5, a6, a7, a8);
                if ((*(_QWORD *)v738 & 0xFFFFFFFFFFFFFFFDLL) == 0)
                {
                  v1314 = *(unsigned int *)(v720 + 20);
                  if (!(_DWORD)v1314)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983AC4DCLL);
                  }
                  if (v1314 <= v737)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983AC4CCLL);
                  }
                  JSC::DFG::MultiGetByOffsetCase::operator=(*(_QWORD *)(v720 + 8) + 32 * v736, (uint64_t *)(*(_QWORD *)(v720 + 8) + 32 * v1314 - 32), (uint64_t)a3, a4, a5, a6, a7, a8);
                  v1321 = *(unsigned int *)(v720 + 20);
                  if (!(_DWORD)v1321)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983AC4D4);
                  }
                  --v737;
                  WTF::Vector<JSC::DFG::MultiGetByOffsetCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(v720 + 8, (void *)(v1321 - 1), v1315, v1316, v1317, v1318, v1319, v1320);
                  v1879[0] = 1;
                  v8 = v1833;
                }
                v736 = v737 + 1;
                v739 = *(_DWORD *)(v720 + 20);
                v737 = v736;
              }
              while (v739 > v736);
              if (v739 == 1)
              {
                JSC::DFG::ConstantFoldingPhase::emitGetByOffset((uint64_t)this, v1878, (uint64_t *)v1877, (uint64_t *)&v1856, *(_QWORD *)(v720 + 8), *(_DWORD *)v720);
                v1879[0] = 1;
              }
            }
            goto LABEL_817;
          }
          *(_QWORD *)v727 = 4;
          goto LABEL_1600;
        case 0x9C:
          v1002 = *(_QWORD *)(v66 + 24);
          v1003 = *(unsigned int **)(v66 + 72);
          v1004 = *((_QWORD *)this + 10);
          v1005 = *(unsigned int *)((v1002 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1006 = (uint64_t *)(v1004 + 24);
          v1007 = (uint64_t *)(v1004 + 8);
          if ((v1002 & 1) != 0)
            v1008 = v1006;
          else
            v1008 = v1007;
          v1009 = *v1008;
          v1010 = *v1008 + 32 * v1005;
          v1011 = (void *)*((unsigned int *)this + 40);
          if ((_DWORD)v1011 != *(_DWORD *)(v1010 + 20))
          {
            if ((*(_QWORD *)(v1010 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1010, v1011, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v1010 + 20) = (_DWORD)v1011;
            v8 = v1833;
          }
          v1852 = 0;
          v1012 = *(_QWORD *)v1010;
          if ((*(_QWORD *)v1010 & 1) == 0 || v1012 == 4)
          {
            v1013 = v1012 & 0xFFFFFFFFFFFFFFFDLL;
            v1852 = v1013;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v1852, (_QWORD *)v1010);
            v1013 = v1852;
          }
          v1014 = v1013 & 0xFFFFFFFFFFFFFFFDLL;
          v1015 = (JSC::DFG::ConstantFoldingPhase *)(v1013 | 2);
          if ((*(_BYTE *)v1010 & 2) == 0)
            v1015 = (JSC::DFG::ConstantFoldingPhase *)v1014;
          v1852 = (unint64_t)v1015;
          v1016 = v1009 + 32 * v1005;
          v1017 = *(_OWORD *)(v1016 + 8);
          v1854 = *(WTF ***)(v1016 + 24);
          v1853 = v1017;
          JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute((uint64_t)v1834, (void *)v1878, (uint64_t)a3, a4, a5, a6, a7, a8);
          v1876 = 1;
          if (!v1003[5])
            goto LABEL_1304;
          v1018 = 0;
          v1019 = 0;
          while (1)
          {
            v1020 = *((_QWORD *)v1003 + 1);
            v1021 = v1020 + (v1018 << 6);
            v1024 = *(_QWORD *)(v1021 + 8);
            v1023 = (uint64_t *)(v1021 + 8);
            v1022 = v1024;
            a2 = v1024 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v1024 & 1) != 0)
              break;
            if (!a2)
              goto LABEL_1203;
            v1025 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 4), a2, (int *)&v1856, a4, a5, a6, a7, a8);
            v1026 = *(unsigned __int8 *)(v1025 + 9);
            if (((unint64_t)v1853 & JSC::speculatedTypeMapping[v1026]) == 0)
              goto LABEL_1780;
            v1027 = (v1026 - 39) <= 0xA
                  ? JSC::typedArrayModes[(v1026 - 39)]
                  : 1 << *(_BYTE *)(v1025 + 8);
            if ((v1027 & DWORD2(v1853)) == 0)
              goto LABEL_1780;
            if (v1852 == 4 || (v1852 & 2) != 0)
              goto LABEL_1203;
            v1028 = (unsigned int *)(v1852 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v1852 & 1) == 0)
            {
              if (v1028 != (unsigned int *)v1025)
                goto LABEL_1780;
              goto LABEL_1203;
            }
            v1044 = *v1028;
            if (!(_DWORD)v1044)
              goto LABEL_1780;
            if (*((_QWORD *)v1028 + 1) != v1025)
            {
              v1043 = 0;
              v1045 = v1028 + 4;
              while (v1044 - 1 != v1043)
              {
                v1042 = *(_QWORD *)&v1045[2 * v1043++];
                if (v1042 == v1025)
                {
                  v8 = v1833;
                  if (v1043 < v1044)
                    goto LABEL_1203;
                  break;
                }
              }
LABEL_1780:
              v1022 = *v1023;
              if ((*v1023 & 1) != 0)
              {
LABEL_1781:
                WTF::fastFree(v1022 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                v1022 = *v1023;
              }
              *v1023 = v1022 & 2;
              v8 = v1833;
            }
LABEL_1203:
            v1029 = *v1023;
            if ((*v1023 & 0xFFFFFFFFFFFFFFFDLL) != 0)
            {
              if (*(_DWORD *)(v1020 + (v1018 << 6)) == 2)
              {
                v1030 = v1029 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v1029 & 1) != 0)
                {
                  if (*(_DWORD *)v1030 == 1)
                    v1030 = *(_QWORD *)(v1030 + 8);
                  else
                    v1030 = 0;
                  v8 = v1833;
                }
                v1031 = v1020 + (v1018 << 6);
                if (v1030 == *(_QWORD *)(v1031 + 16))
                {
                  JSC::PutByVariant::replace(*(_QWORD *)(v1031 + 56), v1023, *(_DWORD *)(v1031 + 4), (uint64_t)&v1856);
                  JSC::PutByVariant::operator=(v1020 + (v1018 << 6), (unsigned int **)&v1856, v1646, v1647, v1648, v1649, v1650, v1651);
                  JSC::PutByVariant::~PutByVariant((JSC::PutByVariant *)&v1856, v1652, v1653, v1654, v1655, v1656, v1657, v1658);
                  v1879[0] = 1;
                }
              }
              v1032 = v1003[5];
            }
            else
            {
              v1492 = v1003[5];
              if (!(_DWORD)v1492)
              {
                __break(0xC471u);
                JUMPOUT(0x1983AC4C4);
              }
              if (v1492 <= v1019)
              {
                __break(0xC471u);
                JUMPOUT(0x1983AC4B4);
              }
              JSC::PutByVariant::operator=(*((_QWORD *)v1003 + 1) + (v1018 << 6), (unsigned int **)(*((_QWORD *)v1003 + 1) + (v1492 << 6) - 64), (uint64_t)a3, a4, a5, a6, a7, a8);
              v1499 = v1003[5];
              if (!(_DWORD)v1499)
              {
                __break(0xC471u);
                JUMPOUT(0x1983AC4BCLL);
              }
              --v1019;
              v1032 = v1499 - 1;
              WTF::VectorDestructor<true,JSC::PutByVariant>::destruct((_QWORD *)(*((_QWORD *)v1003 + 1) + ((v1499 - 1) << 6)), (_QWORD *)(*((_QWORD *)v1003 + 1) + (v1499 << 6)), v1493, v1494, v1495, v1496, v1497, v1498);
              v1003[5] = v1032;
              v1879[0] = 1;
              v8 = v1833;
            }
            v1018 = v1019 + 1;
            v1019 = v1018;
            if (v1032 <= v1018)
            {
              if (v1032 == 1)
              {
                JSC::DFG::ConstantFoldingPhase::emitPutByOffset(this, v1878, (JSC::DFG::Node *)v1877, (const JSC::DFG::AbstractValue *)&v1852, *((const JSC::PutByVariant **)v1003 + 1), *v1003, a7, a8);
                v1879[0] = 1;
              }
LABEL_1304:
              v270 = v1852;
              goto LABEL_299;
            }
          }
          if (!*(_DWORD *)a2)
            goto LABEL_1781;
          v1292 = (unsigned int *)a2;
          v1038 = 0;
          v1293 = (char *)(a2 + 8);
          while (1)
          {
            v1033 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 4), *(_QWORD *)&v1293[8 * v1038], (int *)&v1856, a4, a5, a6, a7, a8);
            v1034 = *(unsigned __int8 *)(v1033 + 9);
            if (((unint64_t)v1853 & JSC::speculatedTypeMapping[v1034]) == 0)
              goto LABEL_2310;
            v1035 = (v1034 - 39) <= 0xA
                  ? JSC::typedArrayModes[(v1034 - 39)]
                  : 1 << *(_BYTE *)(v1033 + 8);
            if ((v1035 & DWORD2(v1853)) == 0)
              goto LABEL_2310;
            if (v1852 == 4 || (v1852 & 2) != 0)
              goto LABEL_2131;
            v1036 = (unsigned int *)(v1852 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v1852 & 1) != 0)
              break;
            v1037 = *v1292;
            if (v1036 != (unsigned int *)v1033)
              goto LABEL_2311;
LABEL_1219:
            if (++v1038 >= v1037)
            {
              v8 = v1833;
              if (!v1037)
                goto LABEL_1780;
              goto LABEL_1203;
            }
          }
          v1041 = *v1036;
          if (!(_DWORD)v1041)
            goto LABEL_2310;
          if (*((_QWORD *)v1036 + 1) != v1033)
          {
            v1040 = 0;
            while (v1041 - 1 != v1040)
            {
              v1039 = *(_QWORD *)&v1036[2 * v1040++ + 4];
              if (v1039 == v1033)
              {
                v1037 = *v1292;
                if (v1040 < v1041)
                  goto LABEL_1219;
                goto LABEL_2311;
              }
            }
LABEL_2310:
            v1037 = *v1292;
LABEL_2311:
            v1584 = v1038;
            *v1292 = --v1037;
            --v1038;
            *(_QWORD *)&v1293[8 * v1584] = *(_QWORD *)&v1293[8 * v1037];
            goto LABEL_1219;
          }
LABEL_2131:
          v1037 = *v1292;
          goto LABEL_1219;
        case 0x9D:
          v1562 = *(_QWORD *)(v66 + 24);
          v1563 = *(unsigned int **)(v66 + 72);
          v1564 = *((_QWORD *)this + 10);
          v1565 = *(unsigned int *)((v1562 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1566 = (_QWORD *)(v1564 + 24);
          v1567 = (_QWORD *)(v1564 + 8);
          if ((v1562 & 1) != 0)
            v1568 = v1566;
          else
            v1568 = v1567;
          v1569 = *v1568 + 32 * v1565;
          v1570 = (void *)*((unsigned int *)this + 40);
          if ((_DWORD)v1570 != *(_DWORD *)(v1569 + 20))
          {
            if ((*(_QWORD *)(v1569 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1569, v1570, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v1569 + 20) = (_DWORD)v1570;
          }
          JSC::DFG::AbstractValue::AbstractValue((JSC::DFG::AbstractValue *)&v1856, (const JSC::DFG::AbstractValue *)v1569);
          JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute((uint64_t)v1834, (void *)v1878, v1571, v1572, v1573, v1574, v1575, v1576);
          v1876 = 1;
          if (v1563[5])
          {
            v1577 = 0;
            v1578 = 0;
            do
            {
              v1579 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 4), *(_QWORD *)(*((_QWORD *)v1563 + 1) + 40 * v1577 + 8), (int *)&v1852, a4, a5, a6, a7, a8);
              v1580 = JSC::DFG::AbstractValue::contains((uint64_t *)&v1856, v1579);
              v1581 = v1563[5];
              if ((v1580 & 1) == 0)
              {
                if (!v1581)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983AC4ACLL);
                }
                if (v1581 <= v1578)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983AC49CLL);
                }
                JSC::DeleteByVariant::operator=(*((_QWORD *)v1563 + 1) + 40 * v1577, *((_QWORD *)v1563 + 1) + 40 * v1581 - 40);
                v1582 = v1563[5];
                if (!v1582)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983AC4A4);
                }
                --v1578;
                v1581 = v1582 - 1;
                v1563[5] = v1581;
                v1879[0] = 1;
              }
              v1577 = v1578 + 1;
              v1578 = v1577;
            }
            while (v1581 > v1577);
            if (v1581 == 1)
            {
              JSC::DFG::ConstantFoldingPhase::emitDeleteByOffset((JSC::DFG::Graph **)this, v1878, (JSC::DFG::Node *)v1877, (const JSC::DFG::AbstractValue *)&v1856, *((const JSC::DeleteByVariant **)v1563 + 1), *v1563, a7, a8);
              v1879[0] = 1;
            }
          }
          if ((v1856 & 1) != 0)
            WTF::fastFree((unint64_t)v1856 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_1274;
        case 0x9E:
          LODWORD(v1856) = *(_DWORD *)(v66 + 72);
          v307 = *(_QWORD *)(v66 + 24);
          v308 = *((_QWORD *)this + 10);
          v309 = *(unsigned int *)((v307 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v310 = v1856;
          v311 = (uint64_t *)(v308 + 24);
          v312 = (uint64_t *)(v308 + 8);
          if ((v307 & 1) == 0)
            v311 = v312;
          v313 = *v311;
          v314 = *v311 + 32 * v309;
          v315 = *((_DWORD *)this + 40);
          v317 = (unsigned int *)(v314 + 20);
          v316 = *(_DWORD *)(v314 + 20);
          if (v315 == v316)
            goto LABEL_355;
          if ((*(_QWORD *)(v314 + 8) & 0x2800FFFFFFF7) == 0)
          {
            *v317 = v315;
            goto LABEL_355;
          }
          if ((v316 ^ v315) < 2)
            goto LABEL_883;
          v776 = *(_QWORD *)v314;
          if (*(_QWORD *)v314 == 4)
            goto LABEL_882;
          *(_QWORD *)v314 = v776 | 2;
          v996 = (unsigned int *)(v776 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v776 & 1) != 0)
          {
            v1471 = 2 * *v996;
            do
            {
              v8 = v1833;
              if (!(v1471 * 4))
                goto LABEL_882;
              v1472 = *(_QWORD *)&v996[v1471];
              if ((*(_BYTE *)(v1472 + 19) & 0xC) != 0)
                break;
              v1473 = *(_QWORD *)(v1472 + 96);
              v1474 = (v1473 & 1) != 0 ? (v1473 >> 1) & 3 : *(unsigned __int8 *)(v1473 + 4);
              v1471 -= 2;
            }
            while (v1474 != 2);
            WTF::fastFree((unint64_t)v996, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v8 = v1833;
LABEL_1173:
            *(_QWORD *)v314 = 4;
            goto LABEL_882;
          }
          if (v996)
          {
            if ((*((_BYTE *)v996 + 19) & 0xC) != 0)
              goto LABEL_1173;
            v997 = *((_QWORD *)v996 + 12);
            v998 = (v997 & 1) != 0 ? (v997 >> 1) & 3 : *(unsigned __int8 *)(v997 + 4);
            if (v998 == 2)
              goto LABEL_1173;
          }
LABEL_882:
          *(_DWORD *)(v313 + 32 * v309 + 16) = -21020677;
LABEL_883:
          if ((v315 & 1) != 0)
            *(_QWORD *)v314 &= ~2uLL;
          *v317 = v315;
          v310 = v1856;
LABEL_355:
          if (v310 == 25)
            goto LABEL_119;
          v318 = JSC::DFG::toTypedArrayType(v310);
          if (!v318)
            goto LABEL_119;
          if (v318 == 12)
            goto LABEL_119;
          if ((BYTE3(v1856) & 0x40) != 0)
            goto LABEL_119;
          v319 = *(_QWORD *)(v313 + 32 * v309 + 8);
          if (!v319)
            goto LABEL_119;
          if ((v319 & 0xFFFFDFFFF0000008) != 0)
            goto LABEL_119;
          v320 = *(_QWORD *)v314;
          if (*(_QWORD *)v314 == 4 || (v320 & 2) != 0)
            goto LABEL_119;
          v321 = (v320 & 0xFFFFFFFFFFFFFFFDLL) != 0;
          v322 = *((_QWORD *)this + 4);
          v323 = *(_QWORD *)v1877;
          if ((*(_QWORD *)v1877 & 1) == 0)
          {
            v324 = *(_QWORD *)(v322 + 32);
LABEL_365:
            v325 = (uint64_t *)(v323 & 0xFFFFFFFF8);
            v326 = 1;
            v327 = 1;
            v328 = v323 & 0xFFFFFFFF8;
            goto LABEL_366;
          }
          v1505 = *(_QWORD *)(v323 & 0xFFFFFFFF8);
          if ((v323 & 2) != 0 || (v1506 = *(_DWORD *)((v323 & 0xFFFFFFFF8) + 8), v1506 == 0x3FFFFFFF) || v1506 == -1)
          {
            v1507 = 2;
          }
          else if (v1506 >> 28)
          {
            v1787 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v1787 = v1505;
            *(_DWORD *)(v1787 + 8) = v1506;
            v1507 = 1;
            v1505 = v1787;
          }
          else
          {
            v1507 = v1505;
            v1505 = 0;
          }
          v323 = v1505 | v1507;
          v324 = *(_QWORD *)(v322 + 32);
          if (((v1505 | v1507) & 1) == 0)
          {
            v8 = v1833;
            goto LABEL_365;
          }
          v1508 = *(_QWORD *)(v323 & 0xFFFFFFFF8);
          if ((v323 & 2) != 0
            || ((v1509 = *(_DWORD *)((v323 & 0xFFFFFFFF8) + 8), v1509 != 0x3FFFFFFF)
              ? (v1510 = v1509 == -1)
              : (v1510 = 1),
                v1510))
          {
            v1511 = 2;
          }
          else if (v1509 >> 28)
          {
            v1788 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v1788 = v1508;
            *(_DWORD *)(v1788 + 8) = v1509;
            v1511 = 1;
            v1508 = v1788;
          }
          else
          {
            v1511 = *(_QWORD *)(v323 & 0xFFFFFFFF8);
            v1508 = 0;
          }
          v1512 = v1508 | v1511;
          v325 = (uint64_t *)(v1512 & 0xFFFFFFFF8);
          if ((v1512 & 1) != 0)
          {
            v326 = 0;
            v327 = 0;
            v328 = *v325;
          }
          else
          {
            v327 = 0;
            v326 = 1;
            v328 = (uint64_t)v325;
          }
          v8 = v1833;
LABEL_366:
          if (v328)
            v324 = *(_QWORD *)(v328 + 8);
          v329 = *(_QWORD *)(v324 + 8);
          if ((v326 & 1) == 0 && v325)
            WTF::fastFree((unint64_t)v325, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if ((v327 & 1) == 0 && (v323 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v323 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v330 = *(_QWORD *)v314;
          v331 = (unsigned int *)(*(_QWORD *)v314 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v330 & 1) != 0)
          {
            if (*v331)
            {
              v1121 = 0;
              do
              {
                v1122 = *(_QWORD *)&v331[2 * v1121 + 2];
                v1123 = *(unsigned __int8 *)(v1122 + 9);
                if ((v1123 - 39) <= 0xA)
                  v1124 = JSC::typedArrayModes[v1123 - 39];
                else
                  v1124 = 1 << *(_BYTE *)(v1122 + 8);
                v1125 = JSC::DFG::ArrayMode::arrayModesThatPassFiltering((JSC::DFG::ArrayMode *)&v1856);
                if ((v1125 | v1124) != v1125 || *(_QWORD *)(v1122 + 40) != v329)
                  v321 = 0;
                ++v1121;
              }
              while (v1121 < *v331);
            }
LABEL_376:
            if (v321
              && JSC::DFG::Graph::isWatchingArrayBufferDetachWatchpoint(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v1877, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              *(_WORD *)(v1877 + 18) = 159;
LABEL_379:
              v1879[0] = 1;
            }
            goto LABEL_119;
          }
          if (!v331)
            goto LABEL_376;
          v332 = *((unsigned __int8 *)v331 + 9);
          v333 = (v332 - 39) <= 0xA ? JSC::typedArrayModes[v332 - 39] : 1 << *((_BYTE *)v331 + 8);
          v334 = JSC::DFG::ArrayMode::arrayModesThatPassFiltering((JSC::DFG::ArrayMode *)&v1856);
          if ((v334 | v333) == v334 && *((_QWORD *)v331 + 5) == v329)
            goto LABEL_376;
          goto LABEL_119;
        case 0xB6:
          v172 = *(_QWORD *)(v66 + 24);
          v173 = *((_QWORD *)this + 10);
          v174 = *(unsigned int *)((v172 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v175 = (uint64_t *)(v173 + 24);
          v176 = (uint64_t *)(v173 + 8);
          if ((v172 & 1) != 0)
            v177 = v175;
          else
            v177 = v176;
          v178 = *v177;
          v179 = *v177 + 32 * v174;
          v180 = *((_DWORD *)this + 40);
          v182 = (unsigned int *)(v179 + 20);
          v181 = *(_DWORD *)(v179 + 20);
          if (v180 == v181)
            goto LABEL_224;
          if ((*(_QWORD *)(v179 + 8) & 0x2800FFFFFFF7) == 0)
          {
            *v182 = v180;
LABEL_224:
            v183 = *(_QWORD *)(v179 + 24);
LABEL_225:
            v184 = *(__int128 **)(v66 + 72);
            goto LABEL_226;
          }
          if ((v181 ^ v180) >= 2)
          {
            v635 = *(_QWORD *)v179;
            if (*(_QWORD *)v179 != 4)
            {
              *(_QWORD *)v179 = v635 | 2;
              v752 = (unsigned int *)(v635 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v635 & 1) != 0)
              {
                v1298 = 2 * *v752;
                while (1)
                {
                  v8 = v1833;
                  if (!(v1298 * 4))
                    break;
                  v1299 = *(_QWORD *)&v752[v1298];
                  if ((*(_BYTE *)(v1299 + 19) & 0xC) == 0)
                  {
                    v1300 = *(_QWORD *)(v1299 + 96);
                    v1301 = (v1300 & 1) != 0 ? (v1300 >> 1) & 3 : *(unsigned __int8 *)(v1300 + 4);
                    v1298 -= 2;
                    if (v1301 != 2)
                      continue;
                  }
                  WTF::fastFree((unint64_t)v752, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v8 = v1833;
                  goto LABEL_841;
                }
              }
              else if (v752)
              {
                if ((*((_BYTE *)v752 + 19) & 0xC) != 0
                  || ((v753 = *((_QWORD *)v752 + 12), (v753 & 1) != 0)
                    ? (v754 = (v753 >> 1) & 3)
                    : (v754 = *(unsigned __int8 *)(v753 + 4)),
                      v754 == 2))
                {
LABEL_841:
                  *(_QWORD *)v179 = 4;
                }
              }
            }
            *(_DWORD *)(v178 + 32 * v174 + 16) = -21020677;
          }
          if ((v180 & 1) != 0)
            *(_QWORD *)v179 &= ~2uLL;
          *v182 = v180;
          v66 = v1877;
          v636 = *(unsigned __int16 *)(v1877 + 18);
          v183 = *(_QWORD *)(v178 + 32 * v174 + 24);
          if (v636 != 355 && v636 != 348)
            goto LABEL_225;
          v184 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
          }
LABEL_226:
          if (v183 == *(_QWORD *)v184)
            goto LABEL_227;
          goto LABEL_119;
        case 0xB7:
        case 0xB8:
          v188 = *(_QWORD *)(v66 + 24);
          v189 = *((_QWORD *)this + 10);
          v190 = *(unsigned int *)((v188 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v191 = (uint64_t *)(v189 + 24);
          v192 = (uint64_t *)(v189 + 8);
          if ((v188 & 1) != 0)
            v193 = v191;
          else
            v193 = v192;
          v194 = *v193;
          v195 = *v193 + 32 * v190;
          v196 = *((_DWORD *)this + 40);
          v197 = *(_DWORD *)(v195 + 20);
          if (v196 == v197)
            goto LABEL_239;
          if ((*(_QWORD *)(v195 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_556;
          if ((v197 ^ v196) < 2)
            goto LABEL_723;
          v661 = *(_QWORD *)v195;
          if (*(_QWORD *)v195 == 4)
            goto LABEL_722;
          *(_QWORD *)v195 = v661 | 2;
          v755 = (unsigned int *)(v661 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v661 & 1) != 0)
          {
            v1303 = 2 * *v755;
            do
            {
              v8 = v1833;
              if (!(v1303 * 4))
                goto LABEL_722;
              v1304 = *(_QWORD *)&v755[v1303];
              if ((*(_BYTE *)(v1304 + 19) & 0xC) != 0)
                break;
              v1305 = *(_QWORD *)(v1304 + 96);
              v1306 = (v1305 & 1) != 0 ? (v1305 >> 1) & 3 : *(unsigned __int8 *)(v1305 + 4);
              v1303 -= 2;
            }
            while (v1306 != 2);
            WTF::fastFree((unint64_t)v755, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v8 = v1833;
LABEL_855:
            *(_QWORD *)v195 = 4;
            goto LABEL_722;
          }
          if (v755)
          {
            if ((*((_BYTE *)v755 + 19) & 0xC) != 0)
              goto LABEL_855;
            v756 = *((_QWORD *)v755 + 12);
            v757 = (v756 & 1) != 0 ? (v756 >> 1) & 3 : *(unsigned __int8 *)(v756 + 4);
            if (v757 == 2)
              goto LABEL_855;
          }
LABEL_722:
          *(_DWORD *)(v194 + 32 * v190 + 16) = -21020677;
LABEL_723:
          if ((v196 & 1) != 0)
            *(_QWORD *)v195 &= ~2uLL;
LABEL_556:
          *(_DWORD *)(v195 + 20) = v196;
LABEL_239:
          if ((*(_BYTE *)(v195 + 13) & 4) == 0)
            goto LABEL_240;
          goto LABEL_119;
        case 0xBB:
          v525 = *(_QWORD *)(v66 + 24);
          v526 = *((_QWORD *)this + 10);
          v527 = *(unsigned int *)((v525 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          if ((v525 & 1) != 0)
            v528 = (uint64_t *)(v526 + 24);
          else
            v528 = (uint64_t *)(v526 + 8);
          v529 = *v528;
          v530 = *v528 + 32 * v527;
          v531 = *((_DWORD *)this + 40);
          v533 = (unsigned int *)(v530 + 20);
          v532 = *(_DWORD *)(v530 + 20);
          if (v531 == v532)
            goto LABEL_624;
          if ((*(_QWORD *)(v530 + 8) & 0x2800FFFFFFF7) == 0)
          {
            *v533 = v531;
            goto LABEL_624;
          }
          if ((v532 ^ v531) < 2)
            goto LABEL_1351;
          v1118 = *(_QWORD *)v530;
          if (*(_QWORD *)v530 == 4)
            goto LABEL_1350;
          *(_QWORD *)v530 = v1118 | 2;
          v1195 = (unsigned int *)(v1118 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1118 & 1) != 0)
          {
            v1546 = 2 * *v1195;
            do
            {
              if (!(v1546 * 4))
                goto LABEL_1350;
              v1547 = *(_QWORD *)&v1195[v1546];
              if ((*(_BYTE *)(v1547 + 19) & 0xC) != 0)
                break;
              v1548 = *(_QWORD *)(v1547 + 96);
              v1549 = (v1548 & 1) != 0 ? (v1548 >> 1) & 3 : *(unsigned __int8 *)(v1548 + 4);
              v1546 -= 2;
            }
            while (v1549 != 2);
            WTF::fastFree((unint64_t)v1195, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_1553:
            *(_QWORD *)v530 = 4;
            goto LABEL_1350;
          }
          if (v1195)
          {
            if ((*((_BYTE *)v1195 + 19) & 0xC) != 0)
              goto LABEL_1553;
            v1196 = *((_QWORD *)v1195 + 12);
            v1197 = (v1196 & 1) != 0 ? (v1196 >> 1) & 3 : *(unsigned __int8 *)(v1196 + 4);
            if (v1197 == 2)
              goto LABEL_1553;
          }
LABEL_1350:
          *(_DWORD *)(v529 + 32 * v527 + 16) = -21020677;
LABEL_1351:
          if ((v531 & 1) != 0)
            *(_QWORD *)v530 &= ~2uLL;
          *v533 = v531;
          v66 = v1877;
          v526 = *((_QWORD *)this + 10);
          v8 = v1833;
LABEL_624:
          v534 = *(_QWORD *)(v530 + 24);
          v535 = *(_QWORD *)(v66 + 32);
          v536 = *(unsigned int *)((v535 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v537 = (uint64_t *)(v526 + 24);
          v538 = (uint64_t *)(v526 + 8);
          if ((v535 & 1) != 0)
            v538 = v537;
          v539 = *v538;
          v540 = *v538 + 32 * v536;
          v541 = *((_DWORD *)this + 40);
          v542 = *(_DWORD *)(v540 + 20);
          if (v541 != v542)
          {
            if ((*(_QWORD *)(v540 + 8) & 0x2800FFFFFFF7) != 0)
            {
              if ((v542 ^ v541) >= 2)
              {
                v1119 = *(_QWORD *)v540;
                if (*(_QWORD *)v540 != 4)
                {
                  *(_QWORD *)v540 = v1119 | 2;
                  v1198 = (unsigned int *)(v1119 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v1119 & 1) != 0)
                  {
                    v1550 = 2 * *v1198;
                    while (1)
                    {
                      v8 = v1833;
                      if (!(v1550 * 4))
                        break;
                      v1551 = *(_QWORD *)&v1198[v1550];
                      if ((*(_BYTE *)(v1551 + 19) & 0xC) == 0)
                      {
                        v1552 = *(_QWORD *)(v1551 + 96);
                        v1553 = (v1552 & 1) != 0 ? (v1552 >> 1) & 3 : *(unsigned __int8 *)(v1552 + 4);
                        v1550 -= 2;
                        if (v1553 != 2)
                          continue;
                      }
                      WTF::fastFree((unint64_t)v1198, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      v8 = v1833;
                      goto LABEL_1560;
                    }
                  }
                  else
                  {
                    v8 = v1833;
                    if (v1198)
                    {
                      if ((*((_BYTE *)v1198 + 19) & 0xC) != 0
                        || ((v1199 = *((_QWORD *)v1198 + 12), (v1199 & 1) != 0)
                          ? (v1200 = (v1199 >> 1) & 3)
                          : (v1200 = *(unsigned __int8 *)(v1199 + 4)),
                            v8 = v1833,
                            v1200 == 2))
                      {
LABEL_1560:
                        *(_QWORD *)v540 = 4;
                      }
                    }
                  }
                }
                *(_DWORD *)(v539 + 32 * v536 + 16) = -21020677;
              }
              if ((v541 & 1) != 0)
                *(_QWORD *)v540 &= ~2uLL;
            }
            *(_DWORD *)(v540 + 20) = v541;
          }
          if (!v534)
            goto LABEL_119;
          v543 = *(_QWORD *)(v540 + 24);
          v544 = v543 && v534 >= 0xFFFE000000000000;
          v545 = v544 && v543 >= 0xFFFE000000000000;
          if (!v545 || v534 >= v543)
            goto LABEL_119;
          v547 = v1878;
          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1867, (const JSC::DFG::NodeOrigin *)v1877);
          v551 = JSC::DFG::InsertionSet::insertConstant((uint64_t *)this + 26, v547, (uint64_t)v1867, 0xFFFE000000000000, 0, v548, v549, v550);
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1867, v552, v553, v554, v555, v556, v557, v558);
          JSC::DFG::Node::convertToIdentityOn(v1877, v551);
          goto LABEL_229;
        case 0xBD:
          v698 = *(_QWORD *)(v66 + 72);
          v699 = *(_QWORD *)(v66 + 24);
          v700 = *((_QWORD *)this + 10);
          v701 = *(unsigned int *)((v699 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v702 = (uint64_t *)(v700 + 24);
          v703 = (uint64_t *)(v700 + 8);
          if ((v699 & 1) != 0)
            v704 = v702;
          else
            v704 = v703;
          v705 = *v704;
          v706 = *v704 + 32 * v701;
          v707 = *((_DWORD *)this + 40);
          v708 = *(_DWORD *)(v706 + 20);
          if (v707 == v708)
            goto LABEL_778;
          if ((*(_QWORD *)(v706 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_1343;
          if ((v708 ^ v707) < 2)
            goto LABEL_1564;
          v1201 = *(_QWORD *)v706;
          if (*(_QWORD *)v706 == 4)
            goto LABEL_1563;
          *(_QWORD *)v706 = v1201 | 2;
          v1311 = (unsigned int *)(v1201 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1201 & 1) != 0)
          {
            v1607 = 2 * *v1311;
            do
            {
              if (!(v1607 * 4))
                goto LABEL_1563;
              v1608 = *(_QWORD *)&v1311[v1607];
              if ((*(_BYTE *)(v1608 + 19) & 0xC) != 0)
                break;
              v1609 = *(_QWORD *)(v1608 + 96);
              v1610 = (v1609 & 1) != 0 ? (v1609 >> 1) & 3 : *(unsigned __int8 *)(v1609 + 4);
              v1607 -= 2;
            }
            while (v1610 != 2);
            WTF::fastFree((unint64_t)v1311, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_1800:
            *(_QWORD *)v706 = 4;
            goto LABEL_1563;
          }
          if (v1311)
          {
            if ((*((_BYTE *)v1311 + 19) & 0xC) != 0)
              goto LABEL_1800;
            v1312 = *((_QWORD *)v1311 + 12);
            v1313 = (v1312 & 1) != 0 ? (v1312 >> 1) & 3 : *(unsigned __int8 *)(v1312 + 4);
            if (v1313 == 2)
              goto LABEL_1800;
          }
LABEL_1563:
          *(_DWORD *)(v705 + 32 * v701 + 16) = -21020677;
LABEL_1564:
          v8 = v1833;
          if ((v707 & 1) != 0)
            *(_QWORD *)v706 &= ~2uLL;
LABEL_1343:
          *(_DWORD *)(v706 + 20) = v707;
LABEL_778:
          v709 = *(_QWORD *)(v706 + 24);
          if (v709)
            v710 = (v709 & 0xFFFE000000000002) == 0;
          else
            v710 = 0;
          if (!v710)
            goto LABEL_782;
          v992 = *(unsigned __int8 *)(v709 + 5);
          if (v992 == 2)
          {
            v711 = *(_QWORD *)(v709 + 8);
            if (v711)
              v993 = (v711 & 1) == 0;
            else
              v993 = 0;
            if (v993)
            {
              if ((*(_BYTE *)(v711 + 16) & 0x10) == 0)
                v711 = 0;
            }
            else
            {
LABEL_782:
              v711 = 0;
            }
          }
          else
          {
            if (v992 == 4)
              v711 = *(_QWORD *)(v709 + 8);
            else
              v711 = 0;
            v8 = v1833;
          }
          if (v711 == v698)
            goto LABEL_240;
          goto LABEL_119;
        case 0xBE:
          v760 = *(_QWORD *)(v66 + 24);
          v761 = *((_QWORD *)this + 10);
          v762 = *(unsigned int *)((v760 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v763 = (uint64_t *)(v761 + 24);
          v764 = (uint64_t *)(v761 + 8);
          if ((v760 & 1) != 0)
            v765 = v763;
          else
            v765 = v764;
          v766 = *v765;
          v767 = *v765 + 32 * v762;
          v768 = *((_DWORD *)this + 40);
          v770 = (unsigned int *)(v767 + 20);
          v769 = *(_DWORD *)(v767 + 20);
          if (v768 == v769)
            goto LABEL_868;
          if ((*(_QWORD *)(v767 + 8) & 0x2800FFFFFFF7) == 0)
          {
            *v770 = v768;
            goto LABEL_1434;
          }
          if ((v769 ^ v768) < 2)
            goto LABEL_1709;
          v1291 = *(_QWORD *)v767;
          if (*(_QWORD *)v767 == 4)
            goto LABEL_1708;
          *(_QWORD *)v767 = v1291 | 2;
          v1439 = (unsigned int *)(v1291 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1291 & 1) != 0)
          {
            v1625 = 2 * *v1439;
            do
            {
              if (!(v1625 * 4))
                goto LABEL_1708;
              v1626 = *(_QWORD *)&v1439[v1625];
              if ((*(_BYTE *)(v1626 + 19) & 0xC) != 0)
                break;
              v1627 = *(_QWORD *)(v1626 + 96);
              v1628 = (v1627 & 1) != 0 ? (v1627 >> 1) & 3 : *(unsigned __int8 *)(v1627 + 4);
              v1625 -= 2;
            }
            while (v1628 != 2);
            WTF::fastFree((unint64_t)v1439, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_1992:
            *(_QWORD *)v767 = 4;
            goto LABEL_1708;
          }
          if (v1439)
          {
            if ((*((_BYTE *)v1439 + 19) & 0xC) != 0)
              goto LABEL_1992;
            v1440 = *((_QWORD *)v1439 + 12);
            v1441 = (v1440 & 1) != 0 ? (v1440 >> 1) & 3 : *(unsigned __int8 *)(v1440 + 4);
            if (v1441 == 2)
              goto LABEL_1992;
          }
LABEL_1708:
          *(_DWORD *)(v766 + 32 * v762 + 16) = -21020677;
LABEL_1709:
          if ((v768 & 1) != 0)
            *(_QWORD *)v767 &= ~2uLL;
          *v770 = v768;
          v66 = v1877;
LABEL_1434:
          v8 = v1833;
LABEL_868:
          v771 = *(_DWORD *)(v66 + 72);
          v772 = *(_QWORD *)(v767 + 24);
          if (v772)
            v773 = (v772 & 0xFFFE000000000002) == 0;
          else
            v773 = 0;
          if (v773 && (v771 & ~*(unsigned __int8 *)(v772 + 6)) == 0)
            goto LABEL_227;
          v774 = *(_QWORD *)v767;
          if (*(_QWORD *)v767 == 4 || (v774 & 2) != 0)
            goto LABEL_119;
          v775 = (unsigned int *)(v774 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v774 & 1) != 0)
          {
            v1468 = *v775;
            if (!(_DWORD)v1468)
              goto LABEL_227;
            v1469 = (uint64_t *)(v775 + 2);
            LOBYTE(v775) = 1;
            do
            {
              v1470 = *v1469++;
              LODWORD(v775) = v775 & ((v771 & ~*(unsigned __int8 *)(v1470 + 10)) == 0);
              --v1468;
            }
            while (v1468);
            v8 = v1833;
            if ((_DWORD)v775)
            {
LABEL_227:
              v185 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
              v186 = (JSC::DFG::Node *)v66;
LABEL_228:
              JSC::DFG::Node::remove(v186, v185, a3, a4, a5, a6, a7, a8);
              goto LABEL_229;
            }
          }
          else if (!v775 || (v771 & ~*((unsigned __int8 *)v775 + 10)) == 0)
          {
            goto LABEL_227;
          }
          goto LABEL_119;
        case 0xBF:
          v637 = *(_QWORD *)(v66 + 24);
          v638 = *((_QWORD *)this + 10);
          v639 = *(unsigned int *)((v637 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v640 = (uint64_t *)(v638 + 24);
          v641 = (uint64_t *)(v638 + 8);
          if ((v637 & 1) != 0)
            v642 = v640;
          else
            v642 = v641;
          v643 = *v642;
          v644 = *v642 + 32 * v639;
          v645 = *((_DWORD *)this + 40);
          v647 = (unsigned int *)(v644 + 20);
          v646 = *(_DWORD *)(v644 + 20);
          if (v645 == v646)
            goto LABEL_708;
          if ((*(_QWORD *)(v644 + 8) & 0x2800FFFFFFF7) == 0)
          {
            *v647 = v645;
            goto LABEL_708;
          }
          if ((v646 ^ v645) < 2)
            goto LABEL_1438;
          v1145 = *(_QWORD *)v644;
          if (*(_QWORD *)v644 == 4)
            goto LABEL_1437;
          *(_QWORD *)v644 = v1145 | 2;
          v1268 = (unsigned int *)(v1145 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1145 & 1) != 0)
          {
            v1593 = 2 * *v1268;
            do
            {
              if (!(v1593 * 4))
                goto LABEL_1437;
              v1594 = *(_QWORD *)&v1268[v1593];
              if ((*(_BYTE *)(v1594 + 19) & 0xC) != 0)
                break;
              v1595 = *(_QWORD *)(v1594 + 96);
              v1596 = (v1595 & 1) != 0 ? (v1595 >> 1) & 3 : *(unsigned __int8 *)(v1595 + 4);
              v1593 -= 2;
            }
            while (v1596 != 2);
            WTF::fastFree((unint64_t)v1268, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_1674:
            *(_QWORD *)v644 = 4;
            goto LABEL_1437;
          }
          if (v1268)
          {
            if ((*((_BYTE *)v1268 + 19) & 0xC) != 0)
              goto LABEL_1674;
            v1269 = *((_QWORD *)v1268 + 12);
            v1270 = (v1269 & 1) != 0 ? (v1269 >> 1) & 3 : *(unsigned __int8 *)(v1269 + 4);
            if (v1270 == 2)
              goto LABEL_1674;
          }
LABEL_1437:
          *(_DWORD *)(v643 + 32 * v639 + 16) = -21020677;
LABEL_1438:
          if ((v645 & 1) != 0)
            *(_QWORD *)v644 &= ~2uLL;
          *v647 = v645;
          v66 = v1877;
          v8 = v1833;
LABEL_708:
          v648 = *(_QWORD *)(v644 + 24);
          if (v648)
            v649 = (v648 & 0xFFFE000000000002) == 0;
          else
            v649 = 0;
          if (!v649)
            goto LABEL_716;
          v1261 = *(_QWORD *)(v66 + 72);
          v1262 = 16 * (*(_DWORD *)v648 & 0xFFFFFFFE);
          v1263 = *(unsigned int *)(v1262 + 76);
          v1264 = *(_DWORD *)(v1262 + 76) != 0;
          v1265 = 16 * v1263;
          if ((_DWORD)v1263)
            v1266 = v1261 == v1265;
          else
            v1266 = 1;
          if (!v1266)
          {
            do
            {
              v1265 = *(_QWORD *)(v1265 + 16);
              v1264 = v1265 != 0;
            }
            while (v1265 != v1261 && v1265 != 0);
          }
          v8 = v1833;
          if (!v1264)
          {
LABEL_716:
            v650 = *(_QWORD *)(v66 + 24);
            v651 = *((_QWORD *)this + 10);
            v652 = *(unsigned int *)((v650 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v653 = (uint64_t *)(v651 + 24);
            v654 = (uint64_t *)(v651 + 8);
            if ((v650 & 1) != 0)
              v655 = v653;
            else
              v655 = v654;
            v656 = *v655;
            v657 = *v655 + 32 * v652;
            v658 = *((_DWORD *)this + 40);
            v660 = (unsigned int *)(v657 + 20);
            v659 = *(_DWORD *)(v657 + 20);
            if (v658 != v659)
            {
              if ((*(_QWORD *)(v657 + 8) & 0x2800FFFFFFF7) != 0)
              {
                if ((v659 ^ v658) >= 2)
                {
                  v1147 = *(_QWORD *)v657;
                  if (*(_QWORD *)v657 != 4)
                  {
                    *(_QWORD *)v657 = v1147 | 2;
                    v1281 = (unsigned int *)(v1147 & 0xFFFFFFFFFFFFFFFCLL);
                    if ((v1147 & 1) != 0)
                    {
                      v1601 = 2 * *v1281;
                      while (v1601 * 4)
                      {
                        v1602 = *(_QWORD *)&v1281[v1601];
                        if ((*(_BYTE *)(v1602 + 19) & 0xC) == 0)
                        {
                          v1603 = *(_QWORD *)(v1602 + 96);
                          v1604 = (v1603 & 1) != 0 ? (v1603 >> 1) & 3 : *(unsigned __int8 *)(v1603 + 4);
                          v1601 -= 2;
                          if (v1604 != 2)
                            continue;
                        }
                        WTF::fastFree((unint64_t)v1281, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        goto LABEL_1694;
                      }
                    }
                    else if (v1281)
                    {
                      if ((*((_BYTE *)v1281 + 19) & 0xC) != 0
                        || ((v1282 = *((_QWORD *)v1281 + 12), (v1282 & 1) != 0)
                          ? (v1283 = (v1282 >> 1) & 3)
                          : (v1283 = *(unsigned __int8 *)(v1282 + 4)),
                            v1283 == 2))
                      {
LABEL_1694:
                        *(_QWORD *)v657 = 4;
                      }
                    }
                  }
                  *(_DWORD *)(v656 + 32 * v652 + 16) = -21020677;
                }
                if ((v658 & 1) != 0)
                  *(_QWORD *)v657 &= ~2uLL;
                *v660 = v658;
                v66 = v1877;
                v8 = v1833;
              }
              else
              {
                *v660 = v658;
              }
            }
            if (!JSC::DFG::StructureAbstractValue::isSubClassOf((unint64_t *)v657, *(_QWORD *)(v66 + 72)))
              goto LABEL_119;
          }
LABEL_717:
          JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute((uint64_t)v1834, (void *)v1878, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_240;
        case 0xC0:
          v1366 = *(_QWORD *)(v66 + 24);
          v1367 = *((_QWORD *)this + 10);
          v1368 = *(unsigned int *)((v1366 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1369 = (_QWORD *)(v1367 + 24);
          v1370 = (_QWORD *)(v1367 + 8);
          if ((v1366 & 1) != 0)
            v1371 = v1369;
          else
            v1371 = v1370;
          v1372 = *v1371 + 32 * v1368;
          v1373 = (void *)*((unsigned int *)this + 40);
          if ((_DWORD)v1373 != *(_DWORD *)(v1372 + 20))
          {
            if ((*(_QWORD *)(v1372 + 8) & 0x2800FFFFFFF7) != 0)
            {
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1372, v1373, (uint64_t)a3, a4, a5, a6, a7, a8);
              v66 = v1877;
            }
            else
            {
              *(_DWORD *)(v1372 + 20) = (_DWORD)v1373;
            }
          }
          v1374 = *(_QWORD *)(v1372 + 24);
          if (v1374)
            v1375 = (v1374 & 0xFFFE000000000002) == 0;
          else
            v1375 = 0;
          if (v1375)
          {
            v1376 = *(_QWORD *)(v66 + 72);
            v1377 = 16 * (*(_DWORD *)v1374 & 0xFFFFFFFE);
            v1378 = *(unsigned int *)(v1377 + 76);
            v1379 = *(_DWORD *)(v1377 + 76) != 0;
            v1380 = 16 * v1378;
            if ((_DWORD)v1378)
              v1381 = v1376 == v1380;
            else
              v1381 = 1;
            if (!v1381)
            {
              do
              {
                v1380 = *(_QWORD *)(v1380 + 16);
                v1379 = v1380 != 0;
              }
              while (v1380 != v1376 && v1380 != 0);
            }
            if (!v1379)
              goto LABEL_1471;
          }
          v1383 = *(_QWORD *)(v66 + 24);
          v1384 = *((_QWORD *)this + 10);
          v1385 = *(unsigned int *)((v1383 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1386 = (_QWORD *)(v1384 + 24);
          v1387 = (_QWORD *)(v1384 + 8);
          if ((v1383 & 1) != 0)
            v1388 = v1386;
          else
            v1388 = v1387;
          v1389 = *v1388 + 32 * v1385;
          v1390 = (void *)*((unsigned int *)this + 40);
          if ((_DWORD)v1390 != *(_DWORD *)(v1389 + 20))
          {
            if ((*(_QWORD *)(v1389 + 8) & 0x2800FFFFFFF7) != 0)
            {
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1389, v1390, (uint64_t)a3, a4, a5, a6, a7, a8);
              v66 = v1877;
            }
            else
            {
              *(_DWORD *)(v1389 + 20) = (_DWORD)v1390;
            }
          }
          v8 = v1833;
          if (JSC::DFG::StructureAbstractValue::isNotSubClassOf((unint64_t *)v1389, *(_QWORD *)(v66 + 72)))goto LABEL_717;
          goto LABEL_119;
        case 0xC1:
          v858 = *(_QWORD *)(v66 + 24);
          v859 = *((_QWORD *)this + 10);
          v860 = *(unsigned int *)((v858 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v861 = (uint64_t *)(v859 + 24);
          v862 = (uint64_t *)(v859 + 8);
          if ((v858 & 1) != 0)
            v863 = v861;
          else
            v863 = v862;
          v864 = *v863;
          v865 = *v863 + 32 * v860;
          v866 = *((_DWORD *)this + 40);
          v867 = *(_DWORD *)(v865 + 20);
          if (v866 == v867)
            goto LABEL_976;
          if ((*(_QWORD *)(v865 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_1492;
          if ((v867 ^ v866) < 2)
            goto LABEL_1757;
          v1302 = *(_QWORD *)v865;
          if (*(_QWORD *)v865 == 4)
            goto LABEL_1756;
          *(_QWORD *)v865 = v1302 | 2;
          v1461 = (unsigned int *)(v1302 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1302 & 1) != 0)
          {
            v1671 = 2 * *v1461;
            do
            {
              if (!(v1671 * 4))
                goto LABEL_1756;
              v1672 = *(_QWORD *)&v1461[v1671];
              if ((*(_BYTE *)(v1672 + 19) & 0xC) != 0)
                break;
              v1673 = *(_QWORD *)(v1672 + 96);
              v1674 = (v1673 & 1) != 0 ? (v1673 >> 1) & 3 : *(unsigned __int8 *)(v1673 + 4);
              v1671 -= 2;
            }
            while (v1674 != 2);
            WTF::fastFree((unint64_t)v1461, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_2050:
            *(_QWORD *)v865 = 4;
            goto LABEL_1756;
          }
          if (v1461)
          {
            if ((*((_BYTE *)v1461 + 19) & 0xC) != 0)
              goto LABEL_2050;
            v1462 = *((_QWORD *)v1461 + 12);
            v1463 = (v1462 & 1) != 0 ? (v1462 >> 1) & 3 : *(unsigned __int8 *)(v1462 + 4);
            if (v1463 == 2)
              goto LABEL_2050;
          }
LABEL_1756:
          *(_DWORD *)(v864 + 32 * v860 + 16) = -21020677;
LABEL_1757:
          if ((v866 & 1) != 0)
            *(_QWORD *)v865 &= ~2uLL;
LABEL_1492:
          *(_DWORD *)(v865 + 20) = v866;
          v8 = v1833;
LABEL_976:
          v868 = *(_QWORD *)(v865 + 8);
          if (v868)
            v869 = (v868 & 0xFFFFFFFCFFFFFFFFLL) == 0;
          else
            v869 = 0;
          if (!v869)
            goto LABEL_119;
          v870 = *(_QWORD *)(v1877 + 32);
          if ((v870 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v871 = *((_QWORD *)this + 10);
            v872 = *(unsigned int *)((v870 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v873 = (_QWORD *)(v871 + 24);
            v874 = (_QWORD *)(v871 + 8);
            if ((v870 & 1) != 0)
              v875 = v873;
            else
              v875 = v874;
            v876 = *v875 + 32 * v872;
            a2 = *((unsigned int *)this + 40);
            if ((_DWORD)a2 != *(_DWORD *)(v876 + 20))
            {
              if ((*(_QWORD *)(v876 + 8) & 0x2800FFFFFFF7) != 0)
                JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v876, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              else
                *(_DWORD *)(v876 + 20) = a2;
            }
            v877 = *(_QWORD *)(v876 + 24);
            v8 = v1833;
            if (v877 < 0xFFFE000000000000)
              goto LABEL_119;
            if ((_DWORD)v877 != 10 && (_DWORD)v877 != 0)
              goto LABEL_119;
          }
          v879 = (uint64_t *)v1877;
          *(_QWORD *)(v1877 + 32) = 0;
LABEL_1018:
          JSC::DFG::Node::convertToIdentity((uint64_t)v879);
          goto LABEL_379;
        case 0xC4:
          v1046 = *(_QWORD *)(v66 + 24);
          v1047 = *((_QWORD *)this + 10);
          v1048 = *(unsigned int *)((v1046 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1049 = (_QWORD *)(v1047 + 24);
          v1050 = (_QWORD *)(v1047 + 8);
          if ((v1046 & 1) != 0)
            v1051 = v1049;
          else
            v1051 = v1050;
          v1052 = *v1051 + 32 * v1048;
          a2 = *((unsigned int *)this + 40);
          if ((_DWORD)a2 != *(_DWORD *)(v1052 + 20))
          {
            if ((*(_QWORD *)(v1052 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1052, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v1052 + 20) = a2;
            v8 = v1833;
          }
          v1053 = *(_QWORD *)(v1052 + 24);
          if (!v1053)
            goto LABEL_119;
          v1054 = *((_QWORD *)this + 4);
          v1055 = *(_QWORD *)v1877;
          if ((*(_QWORD *)v1877 & 1) == 0)
          {
            v1056 = *(_QWORD *)(v1054 + 32);
LABEL_1253:
            v1057 = (_QWORD *)(v1055 & 0xFFFFFFFF8);
            v1058 = 1;
            v1059 = 1;
LABEL_1254:
            v1060 = v1057;
            goto LABEL_1255;
          }
          v1760 = *(_QWORD *)(v1055 & 0xFFFFFFFF8);
          if ((v1055 & 2) != 0
            || ((v1761 = *(_DWORD *)((v1055 & 0xFFFFFFFF8) + 8), v1761 != 0x3FFFFFFF)
              ? (v1762 = v1761 == -1)
              : (v1762 = 1),
                v1762))
          {
            v1763 = 2;
          }
          else if (v1761 >> 28)
          {
            v1795 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v1795 = v1760;
            *(_DWORD *)(v1795 + 8) = v1761;
            v1763 = 1;
            v1760 = v1795;
          }
          else
          {
            v1763 = v1760;
            v1760 = 0;
          }
          v1055 = v1760 | v1763;
          v1056 = *(_QWORD *)(v1054 + 32);
          if (((v1760 | v1763) & 1) == 0)
            goto LABEL_1253;
          v1764 = *(_QWORD *)(v1055 & 0xFFFFFFFF8);
          if ((v1055 & 2) != 0
            || ((v1765 = *(_DWORD *)((v1055 & 0xFFFFFFFF8) + 8), v1765 != 0x3FFFFFFF)
              ? (v1766 = v1765 == -1)
              : (v1766 = 1),
                v1766))
          {
            v1767 = 2;
          }
          else if (v1765 >> 28)
          {
            v1796 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v1796 = v1764;
            *(_DWORD *)(v1796 + 8) = v1765;
            v1767 = 1;
            v1764 = v1796;
          }
          else
          {
            v1767 = *(_QWORD *)(v1055 & 0xFFFFFFFF8);
            v1764 = 0;
          }
          v1768 = v1764 | v1767;
          v1057 = (_QWORD *)(v1768 & 0xFFFFFFFF8);
          if ((v1768 & 1) == 0)
          {
            v1059 = 0;
            v1058 = 1;
            goto LABEL_1254;
          }
          v1058 = 0;
          v1059 = 0;
          v1060 = (_QWORD *)*v1057;
LABEL_1255:
          if (v1060)
            v1056 = v1060[1];
          v1061 = *(_QWORD *)(v1056 + 8);
          if ((v1058 & 1) == 0 && v1057)
            WTF::fastFree((unint64_t)v1057, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if ((v1059 & 1) == 0 && (v1055 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1055 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (v1053 == 2)
          {
            v1062 = *(_DWORD *)(v1061 + 932);
            v8 = v1833;
            if (v1062)
            {
              a2 = 16 * (v1062 & 0xFFFFFFFE);
              goto LABEL_1262;
            }
          }
          else
          {
            v8 = v1833;
            if ((v1053 & 0xFFFE000000000002) == 0
              && *(unsigned __int8 *)(v1053 + 5) >= 0x17u
              && JSC::DFG::Graph::isWatchingStructureCacheClearedWatchpoint(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v1877, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              Object = (JSC::JSObject *)JSC::JSCell::getObject(v1053);
              a2 = JSC::StructureCache::emptyObjectStructureConcurrently((JSC::StructureCache *)(v1061 + 1968), Object, 6);
LABEL_1262:
              v8 = v1833;
              if (a2)
              {
                v1063 = v1877;
                v1064 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 4), a2, (int *)&v1856, a4, a5, a6, a7, a8);
                v1065 = 259;
LABEL_1264:
                *(_WORD *)(v1063 + 18) = v1065;
                *(_DWORD *)(v1063 + 56) = 1;
                *(_QWORD *)(v1063 + 32) = 0;
                *(_QWORD *)(v1063 + 40) = 0;
                *(_QWORD *)(v1063 + 24) = 0;
                *(_QWORD *)(v1063 + 72) = v1064;
                *(_QWORD *)(v1063 + 80) = 0;
                v1879[0] = 1;
              }
            }
          }
LABEL_119:
          if (!v1876)
          {
            v25 = (void *)v1878;
LABEL_93:
            v68 = *((_QWORD *)this + 24);
            v69 = *(_QWORD *)(v68 + 72);
            if (*(_DWORD *)(v69 + 220) <= v25)
            {
              __break(0xC471u);
              JUMPOUT(0x1983AC3F4);
            }
            v70 = *(_QWORD *)(*(_QWORD *)(v69 + 208) + 8 * v25);
            *(_BYTE *)(v68 + 81) = 0;
            if ((*(_BYTE *)(v70 + 56) & 0x10) == 0)
            {
              v71 = 0;
              v72 = v70 + 24;
              while (2)
              {
                v73 = *(_QWORD *)(v72 + 8 * v71);
                if ((v73 & 0xFF00FFFFFFFFFFFFLL) == 0)
                  goto LABEL_145;
                v74 = (v73 >> 50) & 0x3F;
                if (!(_DWORD)v74)
                  goto LABEL_98;
                v75 = 0x300000000;
                switch((int)v74)
                {
                  case 1:
                  case 2:
                    break;
                  case 3:
                    v75 = 0x1300000000;
                    break;
                  case 4:
                    v75 = 0x7300000000;
                    break;
                  case 5:
                    v75 = 0x3300000000;
                    break;
                  case 6:
                  case 7:
                    v75 = 0x10000000000;
                    break;
                  case 8:
                  case 9:
                    v75 = 0x2C00FFFFFFF7;
                    break;
                  case 10:
                    v75 = 0x2E00FFFFFFF7;
                    break;
                  case 11:
                    v75 = 0x20000FFFFFF7;
                    break;
                  case 12:
                    v75 = 2;
                    break;
                  case 13:
                    v75 = 4;
                    break;
                  case 14:
                    v75 = 1;
                    break;
                  case 15:
                    v75 = 0x100000;
                    break;
                  case 16:
                    v75 = 0x40000;
                    break;
                  case 17:
                    v75 = 0x2000000;
                    break;
                  case 18:
                    v75 = 0x4000000;
                    break;
                  case 19:
                    v75 = 0x22000FFFFFF7;
                    break;
                  case 20:
                    v75 = 0x10000000;
                    break;
                  case 21:
                  case 23:
                    v75 = 805306368;
                    break;
                  case 22:
                    v75 = 0x20030000000;
                    break;
                  case 24:
                    v75 = 0x1B73F0000000;
                    break;
                  case 25:
                    v75 = 0x40000000;
                    break;
                  case 26:
                  case 27:
                    v75 = 0x80000000000;
                    break;
                  case 28:
                    v75 = 0x100000000000;
                    break;
                  case 29:
                    v75 = 0x80000;
                    break;
                  case 30:
                    v75 = 0x200000;
                    break;
                  case 31:
                    v75 = 0x400000;
                    break;
                  case 32:
                  case 33:
                    v75 = 0x8000000;
                    break;
                  case 34:
                    v75 = 0x800000;
                    break;
                  case 35:
                    v75 = 0x1000000;
                    break;
                  case 36:
                    v75 = 0x200000000000;
                    break;
                  case 37:
                    v75 = 0x20000;
                    break;
                  case 38:
                    v75 = 805437440;
                    break;
                  case 39:
                    v75 = -536870913;
                    break;
                  case 40:
                    v75 = -1073741825;
                    break;
                  case 41:
                  case 42:
                    v75 = 0xFFFFD3FF00000008;
                    break;
                  case 43:
                    v75 = 0xFFFFFF0FFFFFFFFFLL;
                    break;
                  case 44:
                    v75 = 0xFFFFF70FFFFFFFFFLL;
                    break;
                  case 45:
                    v75 = 0xFFFFF70FCFFFFFFFLL;
                    break;
                  case 46:
                  case 47:
                    v75 = 0x20000000000;
                    break;
                  case 48:
                    v75 = 0x30000000000;
                    break;
                  case 49:
                    v75 = 0xF000000000;
                    break;
                  case 50:
                    v75 = 0x3000000000;
                    break;
                  case 51:
                    v75 = 0x1000000000;
                    break;
                  case 52:
                    v75 = 0xC00000000;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x1983AC160);
                }
                v76 = *((_QWORD *)this + 24);
                v77 = *(_QWORD *)(v76 + 8);
                v78 = *(unsigned int *)((v73 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                v79 = (uint64_t *)(v77 + 24);
                v80 = (uint64_t *)(v77 + 8);
                if ((v73 & 1) != 0)
                  v80 = v79;
                v81 = *v80;
                v82 = (unint64_t *)(*v80 + 32 * v78);
                v84 = v82 + 1;
                v83 = v82[1];
                if ((v83 & ~v75) == 0)
                {
                  *(_QWORD *)(v72 + 8 * v71) = v73 | 0x1000000000000;
                  goto LABEL_98;
                }
                *(_QWORD *)(v72 + 8 * v71) = v73 & 0xFFFEFFFFFFFFFFFFLL;
                v134 = *(_DWORD *)(v76 + 88);
                v135 = (unsigned int *)v82 + 5;
                if ((v83 & 0x2800FFFFFFF7) == 0)
                {
                  *v135 = v134;
                  *v84 = v83 & v75;
                  if ((v83 & v75) == 0)
                  {
                    *v84 = 0;
                    v562 = v81 + 32 * v78;
                    *(_DWORD *)(v562 + 16) = 0;
                    if ((*v82 & 1) != 0)
                      WTF::fastFree(*v82 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    *v82 = 0;
                    *(_QWORD *)(v562 + 24) = 0;
                  }
                  goto LABEL_98;
                }
                if (*v135 != v134)
                {
                  if ((*v135 ^ v134) >= 2)
                  {
                    v449 = *v82;
                    if (*v82 != 4)
                    {
                      *v82 = v449 | 2;
                      v522 = (unsigned int *)(v449 & 0xFFFFFFFFFFFFFFFCLL);
                      if ((v449 & 1) != 0)
                      {
                        v1134 = 2 * *v522;
                        v1831 = v134;
                        while (v1134 * 4)
                        {
                          v1135 = *(_QWORD *)&v522[v1134];
                          if ((*(_BYTE *)(v1135 + 19) & 0xC) == 0)
                          {
                            v1136 = *(_QWORD *)(v1135 + 96);
                            v1137 = (v1136 & 1) != 0 ? (v1136 >> 1) & 3 : *(unsigned __int8 *)(v1136 + 4);
                            v1134 -= 2;
                            v134 = v1831;
                            v135 = (unsigned int *)v82 + 5;
                            if (v1137 != 2)
                              continue;
                          }
                          WTF::fastFree((unint64_t)v522, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          v135 = (unsigned int *)v82 + 5;
                          v134 = v1831;
                          goto LABEL_616;
                        }
                      }
                      else if (v522)
                      {
                        if ((*((_BYTE *)v522 + 19) & 0xC) != 0
                          || ((v523 = *((_QWORD *)v522 + 12), (v523 & 1) != 0)
                            ? (v524 = (v523 >> 1) & 3)
                            : (v524 = *(unsigned __int8 *)(v523 + 4)),
                              v524 == 2))
                        {
LABEL_616:
                          *v82 = 4;
                        }
                      }
                    }
                    *(_DWORD *)(v81 + 32 * v78 + 16) = -21020677;
                  }
                  if ((v134 & 1) != 0)
                    *v82 &= ~2uLL;
                  *v135 = v134;
                  v83 = *v84;
                }
                v136 = v83 & v75;
                *v84 = v83 & v75;
                v137 = *v82;
                if ((v83 & v75 & 0x2800FFFFFFF7) != 0)
                {
                  if (v137 <= 4 && ((1 << v137) & 0x15) != 0)
                    goto LABEL_166;
                  v287 = v137 & 0xFFFFFFFFFFFFFFFCLL;
                  if ((v137 & 1) != 0)
                  {
                    v822 = *(_DWORD *)v287;
                    if (*(_DWORD *)v287)
                    {
                      v823 = 0;
                      v824 = v287 + 8;
                      do
                      {
                        if ((JSC::speculatedTypeMapping[*(unsigned __int8 *)(*(_QWORD *)(v824 + 8 * v823) + 9)] & v136) == 0)
                        {
                          v1633 = v823;
                          *(_DWORD *)v287 = --v822;
                          --v823;
                          *(_QWORD *)(v824 + 8 * v1633) = *(_QWORD *)(v824 + 8 * v822);
                        }
                        ++v823;
                      }
                      while (v823 < v822);
                      if (v822)
                        goto LABEL_166;
                    }
                    WTF::fastFree(v287, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    v137 = *v82;
                  }
                  else if (!v287 || (JSC::speculatedTypeMapping[*(unsigned __int8 *)(v287 + 9)] & v136) != 0)
                  {
                    goto LABEL_166;
                  }
                  v137 &= 2u;
                  goto LABEL_165;
                }
                if ((v137 & 1) != 0)
                  WTF::fastFree(v137 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                v137 = 0;
LABEL_165:
                *v82 = v137;
                v136 = *v84;
LABEL_166:
                if ((v136 & 0x2800FFFFFFF7) != 0)
                {
                  if ((v136 & 0xFFFFFFFFFFFFFFFDLL) == 0)
                    *(_DWORD *)(v81 + 32 * v78 + 16) &= 0x2A02AAAu;
                }
                else
                {
                  *(_DWORD *)(v81 + 32 * v78 + 16) = 0;
                }
                v138 = v81 + 32 * v78;
                v141 = *(_QWORD *)(v138 + 24);
                v139 = (_QWORD *)(v138 + 24);
                v140 = v141;
                if (!v141)
                {
LABEL_169:
                  if (!v136)
                    goto LABEL_170;
                  goto LABEL_2540;
                }
                if ((v136 & 0xC00000000) != 0)
                {
                  v1830 = v136;
                  v1832 = v137;
                  v1829 = v139;
                  v1742 = JSC::int52AwareSpeculationFromValue(v140);
                  v139 = v1829;
                  v136 = v1830;
                  v137 = v1832;
                  if ((v1742 | v1830) == v1830)
                  {
LABEL_2540:
                    if ((v136 & 0xFFFFD7FF00000008) == 0
                      && (!*(_DWORD *)(v81 + 32 * v78 + 16) || (v137 & 0xFFFFFFFFFFFFFFFDLL) == 0))
                    {
LABEL_170:
                      *v84 = 0;
                      *(_DWORD *)(v81 + 32 * v78 + 16) = 0;
                      if ((v137 & 1) != 0)
                      {
                        v936 = v139;
                        WTF::fastFree(v137 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        v139 = v936;
                      }
                      *v82 = 0;
                      *v139 = 0;
                    }
LABEL_98:
                    ++v71;
                    v8 = v1833;
                    if (v71 == 3)
                      goto LABEL_145;
                    continue;
                  }
                }
                break;
              }
              if (v140 >= 0xFFFE000000000000)
              {
                v493 = 0x200000000;
                if ((v140 & 0xFFFFFFFE) == 0)
                  v493 = 0x100000000;
                goto LABEL_572;
              }
              if (v140 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
              {
                if ((v140 & 0xFFFE000000000002) != 0)
                {
                  v493 = 0x20000000000;
                  if ((v140 & 0xFFFFFFFFFFFFFFFELL) == 6)
                    v493 = 0x10000000000;
                  goto LABEL_572;
                }
                v489 = v140 >> 36;
                v491 = (v140 & 0xFFFFFFFFFLL) != 0 && v489 == 0;
                if (qword_1ECF4C080 <= v140 && v491)
                {
                  v492 = *(unsigned __int8 *)(v140 + 5);
                  if (v492 == 2)
                  {
                    v991 = *(_QWORD *)(v140 + 8);
                    v493 = 805306368;
                    if (v991 && (v991 & 1) == 0)
                    {
                      if (v991 < qword_1ECF4C080)
                      {
                        v493 = 0;
                      }
                      else
                      {
                        v493 = 0;
                        if (!(v991 >> 36) && (v991 & 0xFFFFFFFFFLL) != 0)
                        {
                          if ((*(_BYTE *)(v991 + 16) & 0x10) != 0)
                            v493 = 0x10000000;
                          else
                            v493 = 805306368;
                        }
                      }
                    }
                  }
                  else
                  {
                    v493 = JSC::speculatedTypeMapping[v492];
                  }
                  goto LABEL_572;
                }
                if (qword_1ECF4C080 <= v140)
                {
                  v493 = 0;
                  if (v489 || (v140 & 0xFFFFFFFFFLL) == 0)
                    goto LABEL_572;
                  v1801 = *(unsigned __int8 *)(v140 + 5);
                  if (v1801 != 2)
                  {
                    v493 = JSC::speculatedTypeMapping[v1801];
                    goto LABEL_572;
                  }
                  v1811 = *(_QWORD *)(v140 + 8);
                  v493 = 805306368;
                  if (!v1811 || (v1811 & 1) != 0)
                  {
LABEL_572:
                    if ((v493 | v136) != v136)
                      *v139 = 0;
                    goto LABEL_169;
                  }
                  if (v1811 >= qword_1ECF4C080)
                  {
                    v493 = 0;
                    if (!(v1811 >> 36) && (v1811 & 0xFFFFFFFFFLL) != 0)
                    {
                      if ((*(_BYTE *)(v1811 + 16) & 0x10) != 0)
                        v493 = 0x10000000;
                      else
                        v493 = 805306368;
                    }
                    goto LABEL_572;
                  }
                }
                v493 = 0;
                goto LABEL_572;
              }
              v995 = (uint64_t)COERCE_DOUBLE(v140 - 0x2000000000000);
              if ((double)v995 != COERCE_DOUBLE(v140 - 0x2000000000000))
              {
LABEL_1165:
                v493 = 0x2000000000;
                goto LABEL_572;
              }
              if (v995)
              {
                if ((unint64_t)(v995 + 0x8000000000000) >> 52)
                  goto LABEL_1165;
              }
              else if ((uint64_t)v140 < 0x2000000000000)
              {
                goto LABEL_1165;
              }
              v493 = 0x1000000000;
              goto LABEL_572;
            }
            if (*(_DWORD *)(v70 + 32) + *(_QWORD *)(v70 + 24) > *(_QWORD *)(v70 + 24))
            {
              v142 = *((_QWORD *)this + 22);
              v121 = *(_QWORD *)(v70 + 24);
              do
              {
                if (v121 >= *(unsigned int *)(v142 + 164))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983AC594);
                }
                v117 = *(_QWORD *)(v142 + 152);
                v118 = *(_QWORD *)(v117 + 8 * v121);
                v119 = (v118 >> 50) & 0x3F;
                if ((v118 & 0xFF00FFFFFFFFFFFFLL) != 0 && (_DWORD)v119 != 0)
                {
                  v122 = 0x300000000;
                  switch((int)v119)
                  {
                    case 1:
                    case 2:
                      break;
                    case 3:
                      v122 = 0x1300000000;
                      break;
                    case 4:
                      v122 = 0x7300000000;
                      break;
                    case 5:
                      v122 = 0x3300000000;
                      break;
                    case 6:
                    case 7:
                      v122 = 0x10000000000;
                      break;
                    case 8:
                    case 9:
                      v122 = 0x2C00FFFFFFF7;
                      break;
                    case 10:
                      v122 = 0x2E00FFFFFFF7;
                      break;
                    case 11:
                      v122 = 0x20000FFFFFF7;
                      break;
                    case 12:
                      v122 = 2;
                      break;
                    case 13:
                      v122 = 4;
                      break;
                    case 14:
                      v122 = 1;
                      break;
                    case 15:
                      v122 = 0x100000;
                      break;
                    case 16:
                      v122 = 0x40000;
                      break;
                    case 17:
                      v122 = 0x2000000;
                      break;
                    case 18:
                      v122 = 0x4000000;
                      break;
                    case 19:
                      v122 = 0x22000FFFFFF7;
                      break;
                    case 20:
                      v122 = 0x10000000;
                      break;
                    case 21:
                    case 23:
                      v122 = 805306368;
                      break;
                    case 22:
                      v122 = 0x20030000000;
                      break;
                    case 24:
                      v122 = 0x1B73F0000000;
                      break;
                    case 25:
                      v122 = 0x40000000;
                      break;
                    case 26:
                    case 27:
                      v122 = 0x80000000000;
                      break;
                    case 28:
                      v122 = 0x100000000000;
                      break;
                    case 29:
                      v122 = 0x80000;
                      break;
                    case 30:
                      v122 = 0x200000;
                      break;
                    case 31:
                      v122 = 0x400000;
                      break;
                    case 32:
                    case 33:
                      v122 = 0x8000000;
                      break;
                    case 34:
                      v122 = 0x800000;
                      break;
                    case 35:
                      v122 = 0x1000000;
                      break;
                    case 36:
                      v122 = 0x200000000000;
                      break;
                    case 37:
                      v122 = 0x20000;
                      break;
                    case 38:
                      v122 = 805437440;
                      break;
                    case 39:
                      v122 = -536870913;
                      break;
                    case 40:
                      v122 = -1073741825;
                      break;
                    case 41:
                    case 42:
                      v122 = 0xFFFFD3FF00000008;
                      break;
                    case 43:
                      v122 = 0xFFFFFF0FFFFFFFFFLL;
                      break;
                    case 44:
                      v122 = 0xFFFFF70FFFFFFFFFLL;
                      break;
                    case 45:
                      v122 = 0xFFFFF70FCFFFFFFFLL;
                      break;
                    case 46:
                    case 47:
                      v122 = 0x20000000000;
                      break;
                    case 48:
                      v122 = 0x30000000000;
                      break;
                    case 49:
                      v122 = 0xF000000000;
                      break;
                    case 50:
                      v122 = 0x3000000000;
                      break;
                    case 51:
                      v122 = 0x1000000000;
                      break;
                    case 52:
                      v122 = 0xC00000000;
                      break;
                    default:
                      __break(0xC471u);
                      JUMPOUT(0x1983AC5B4);
                  }
                  v123 = *((_QWORD *)this + 24);
                  v124 = *(_QWORD *)(v123 + 8);
                  v125 = *(unsigned int *)((v118 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                  v126 = (uint64_t *)(v124 + 24);
                  v127 = (uint64_t *)(v124 + 8);
                  if ((v118 & 1) != 0)
                    v127 = v126;
                  v128 = *v127;
                  v129 = (JSC::DFG::AbstractValue *)(*v127 + 32 * v125);
                  v130 = *((_QWORD *)v129 + 1);
                  if ((v130 & ~v122) != 0)
                  {
                    *(_QWORD *)(v117 + 8 * v121) = v118 & 0xFFFEFFFFFFFFFFFFLL;
                    v383 = *(unsigned int *)(v123 + 88);
                    if ((v130 & 0x2800FFFFFFF7) != 0)
                    {
                      JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v129, (void *)v383, v122, a4, a5, a6, a7, a8);
                    }
                    else
                    {
                      *(_DWORD *)(v128 + 32 * v125 + 20) = v383;
                      *((_QWORD *)v129 + 1) = v130 & v122;
                      if ((v130 & v122) == 0)
                        JSC::DFG::AbstractValue::clear(v129, v383, v122, a4, a5, a6, a7, a8);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v117 + 8 * v121) = v118 | 0x1000000000000;
                  }
                }
                ++v121;
              }
              while (v121 < (*(_DWORD *)(v70 + 32) + *(_DWORD *)(v70 + 24)));
            }
LABEL_145:
            JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(v1834, v25, v70);
            if (!*((_BYTE *)this + 152))
              goto LABEL_154;
            if (*(_DWORD *)(v1877 + 52) && *((_BYTE *)this + 153) != 3)
            {
              v131 = *(unsigned __int16 *)(v1877 + 18);
              if (v131 <= 0xB5)
              {
                if (v131 < 3)
                  goto LABEL_90;
              }
              else if (v131 == 182 || v131 == 348 || v131 == 355)
              {
                goto LABEL_90;
              }
              if ((*(_BYTE *)(v1877 + 56) & 7) != 0)
              {
                v106 = *((_QWORD *)this + 4);
                v107 = *((_QWORD *)this + 10);
                v108 = *(unsigned int *)((v1877 & 0xFFFFFFFFFFFFFFFELL) + 20);
                v109 = (uint64_t *)(v107 + 24);
                v110 = (uint64_t *)(v107 + 8);
                if ((v1877 & 1) != 0)
                  v111 = v109;
                else
                  v111 = v110;
                v112 = *v111;
                v113 = *v111 + 32 * v108;
                v114 = *((_DWORD *)this + 40);
                v115 = *(_DWORD *)(v113 + 20);
                if (v114 != v115)
                {
                  if ((*(_QWORD *)(v113 + 8) & 0x2800FFFFFFF7) != 0)
                  {
                    if ((v115 ^ v114) >= 2)
                    {
                      v187 = *(_QWORD *)v113;
                      if (*(_QWORD *)v113 != 4)
                      {
                        *(_QWORD *)v113 = v187 | 2;
                        v304 = (unsigned int *)(v187 & 0xFFFFFFFFFFFFFFFCLL);
                        if ((v187 & 1) != 0)
                        {
                          v880 = 2 * *v304;
                          while (v880 * 4)
                          {
                            v881 = *(_QWORD *)&v304[v880];
                            if ((*(_BYTE *)(v881 + 19) & 0xC) == 0)
                            {
                              v882 = *(_QWORD *)(v881 + 96);
                              v883 = (v882 & 1) != 0 ? (v882 >> 1) & 3 : *(unsigned __int8 *)(v882 + 4);
                              v880 -= 2;
                              if (v883 != 2)
                                continue;
                            }
                            WTF::fastFree((unint64_t)v304, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                            goto LABEL_351;
                          }
                        }
                        else if (v304)
                        {
                          if ((*((_BYTE *)v304 + 19) & 0xC) != 0
                            || ((v305 = *((_QWORD *)v304 + 12), (v305 & 1) != 0)
                              ? (v306 = (v305 >> 1) & 3)
                              : (v306 = *(unsigned __int8 *)(v305 + 4)),
                                v306 == 2))
                          {
LABEL_351:
                            *(_QWORD *)v113 = 4;
                          }
                        }
                      }
                      *(_DWORD *)(v112 + 32 * v108 + 16) = -21020677;
                    }
                    if ((v114 & 1) != 0)
                      *(_QWORD *)v113 &= ~2uLL;
                  }
                  *(_DWORD *)(v113 + 20) = v114;
                }
                if (*(_BYTE *)(v106 + 964))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983A70DCLL);
                }
                v116 = *(_QWORD *)(v113 + 24);
                if (v116)
                {
                  if ((v116 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v116 + 5) == 18)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983A4CBCLL);
                  }
                  v667 = (uint64_t *)(v106 + 384);
                  v668 = *(_QWORD *)(v106 + 384);
                  if (v668
                    || (WTF::HashTable<long long,WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>>,WTF::IntHash<long long>,WTF::HashMap<long long,JSC::DFG::FrozenValue *,WTF::IntHash<long long>,JSC::EncodedJSValueHashTraits,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueHashTraits>::rehash((uint64_t *)(v106 + 384), 8uLL, 0, a4, a5, a6, a7, a8), (v668 = *v667) != 0))
                  {
                    v669 = *(_DWORD *)(v668 - 8);
                  }
                  else
                  {
                    v669 = 0;
                  }
                  v670 = (v116 + ~(v116 << 32)) ^ ((v116 + ~(v116 << 32)) >> 22);
                  v671 = 9 * ((v670 + ~(v670 << 13)) ^ ((v670 + ~(v670 << 13)) >> 8));
                  v672 = (v671 ^ (v671 >> 15)) + ~((v671 ^ (v671 >> 15)) << 27);
                  v673 = v669 & ((v672 >> 31) ^ v672);
                  v674 = (_QWORD *)(v668 + 16 * v673);
                  v675 = *v674;
                  if (*v674)
                  {
                    v676 = 0;
                    v677 = 1;
                    do
                    {
                      if (v675 == v116)
                      {
                        v697 = (JSC::DFG::FrozenValue *)v674[1];
                        goto LABEL_843;
                      }
                      if (v675 == 4)
                        v676 = v674;
                      v673 = (v673 + v677) & v669;
                      v674 = (_QWORD *)(v668 + 16 * v673);
                      v675 = *v674;
                      ++v677;
                    }
                    while (*v674);
                    if (v676)
                    {
                      *v676 = 0;
                      v676[1] = 0;
                      --*(_DWORD *)(*v667 - 16);
                      v674 = v676;
                    }
                  }
                  *v674 = v116;
                  v674[1] = 0;
                  v678 = *v667;
                  if (*v667)
                    v679 = *(_DWORD *)(v678 - 12) + 1;
                  else
                    v679 = 1;
                  *(_DWORD *)(v678 - 12) = v679;
                  v680 = *v667;
                  if (*v667)
                    v681 = *(_DWORD *)(v680 - 12);
                  else
                    v681 = 0;
                  v682 = (*(_DWORD *)(v680 - 16) + v681);
                  v683 = *(unsigned int *)(v680 - 4);
                  if (v683 > 0x400)
                  {
                    if (v683 <= 2 * v682)
                      goto LABEL_1667;
                  }
                  else
                  {
                    if (3 * v683 > 4 * v682)
                      goto LABEL_764;
                    if (!(_DWORD)v683)
                    {
                      v1194 = 8;
                      goto LABEL_1541;
                    }
LABEL_1667:
                    v1194 = ((_DWORD)v683 << (6 * *(_DWORD *)(v680 - 12) >= (2 * v683)));
LABEL_1541:
                    v674 = WTF::HashTable<long long,WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,JSC::DFG::FrozenValue *>>,WTF::IntHash<long long>,WTF::HashMap<long long,JSC::DFG::FrozenValue *,WTF::IntHash<long long>,JSC::EncodedJSValueHashTraits,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueHashTraits>::rehash((uint64_t *)(v106 + 384), v1194, (uint64_t)v674, a4, a5, a6, a7, a8);
                  }
                  v8 = v1833;
LABEL_764:
                  if (v116 >= 0xFFFE000000000000 && (v116 & 0x80000000) == 0)
                  {
                    v1148 = (_QWORD *)(v106 + 416);
                    LODWORD(v1856) = v116;
                    v1149 = *(unsigned int *)(v106 + 428);
                    if ((_DWORD)v1149 == *(_DWORD *)(v106 + 424))
                      *(_DWORD *)(*(_QWORD *)(v106 + 416) + 4 * *(unsigned int *)(v106 + 428)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1148, v1149 + 1, (unint64_t)&v1856);
                    else
                      *(_DWORD *)(*v1148 + 4 * v1149) = v116;
                    ++*(_DWORD *)(v106 + 428);
                    v8 = v1833;
                  }
                  if ((v116 & 0xFFFE000000000002) != 0 || (v684 = *(_DWORD *)v116 & 0xFFFFFFFE, !(_DWORD)v684))
                  {
                    v685 = 0;
                  }
                  else
                  {
                    v685 = (JSC::Structure *)(16 * v684);
                    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(v106 + 24) + 280), 16 * v684, (uint64_t)a3, a4, a5, a6, a7, a8);
                    JSC::DFG::DesiredWatchpoints::consider((JSC::DFG::DesiredWatchpoints *)(*(_QWORD *)(v106 + 24) + 136), v685, v686, v687, v688, v689, v690, v691);
                  }
                  v692 = *(_QWORD *)(v106 + 392);
                  *(_QWORD *)(v106 + 392) = v692 + 1;
                  v693 = v692 >> 4;
                  v694 = *(unsigned int *)(v106 + 412);
                  if (v692 >> 4 >= v694)
                  {
                    v1202 = (WTF *)WTF::fastMalloc((WTF *)0x180);
                    v1856 = v1202;
                    v1203 = *(unsigned int *)(v106 + 412);
                    if ((_DWORD)v1203 == *(_DWORD *)(v106 + 408))
                    {
                      v1204 = (_QWORD *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v106 + 400, v1203 + 1, (unint64_t)&v1856);
                      v1203 = *(unsigned int *)(v106 + 412);
                      *(_QWORD *)(*(_QWORD *)(v106 + 400) + 8 * v1203) = *v1204;
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)(v106 + 400) + 8 * v1203) = v1202;
                    }
                    v694 = (v1203 + 1);
                    *(_DWORD *)(v106 + 412) = v694;
                    v692 = *(_QWORD *)(v106 + 392) - 1;
                    v693 = v692 >> 4;
                    v8 = v1833;
                  }
                  if (v693 >= v694)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983AC5BCLL);
                  }
                  v695 = *(_QWORD *)(*(_QWORD *)(v106 + 400) + 8 * v693) + 24 * (v692 & 0xF);
                  *(_QWORD *)v695 = v116;
                  *(_QWORD *)(v695 + 8) = v685;
                  *(_DWORD *)(v695 + 16) = 0;
                  v696 = *(_QWORD *)(v106 + 392) - 1;
                  if (v696 >> 4 >= *(unsigned int *)(v106 + 412))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983AC5C4);
                  }
                  v697 = (JSC::DFG::FrozenValue *)(*(_QWORD *)(*(_QWORD *)(v106 + 400) + 8 * (v696 >> 4))
                                                 + 24 * (v696 & 0xF));
                  v674[1] = v697;
LABEL_843:
                  if (*(_QWORD *)v697)
                  {
                    if (*(_WORD *)(v1877 + 18) == 15)
                    {
                      v1816 = v1878;
                      JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1835, (const JSC::DFG::NodeOrigin *)v1877);
                      v1819 = *(uint64_t **)(v1877 + 72);
                      v1820 = v1819;
                      do
                      {
                        v1821 = (uint64_t)v1820;
                        v1820 = (uint64_t *)*v1820;
                      }
                      while (v1820);
                      if ((uint64_t *)v1821 != v1819)
                        *v1819 = v1821;
                      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)this + 208, v1816, 0, 29, (uint64_t)v1835, v1821, v1817, v1818);
                      JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1835, v1822, v1823, v1824, v1825, v1826, v1827, v1828);
                      JSC::DFG::Graph::dethread(*((_QWORD *)this + 4));
                    }
                    else
                    {
                      JSC::DFG::InsertionSet::insertCheck((JSC::DFG::ConstantFoldingPhase *)((char *)this + 208), *((JSC::DFG::Graph **)this + 4), v1878, (JSC::DFG::Node *)v1877, a5, a6, a7, a8);
                    }
                    JSC::DFG::Graph::convertToConstant(*((_QWORD *)this + 4), (JSC::DFG::Node *)v1877, v697);
                    v1879[0] = 1;
                    v8 = v1833;
                  }
                  goto LABEL_90;
                }
                v697 = (JSC::DFG::FrozenValue *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
                  goto LABEL_843;
                JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
                LODWORD(qword_1EE342DB8) = 0;
              }
            }
          }
LABEL_90:
          v24 = ++v1878;
          v25 = (void *)v1878;
          if (*(_DWORD *)(v8 + 220) <= v1878)
            goto LABEL_154;
          continue;
        case 0xC5:
        case 0xC6:
        case 0xC7:
        case 0xC9:
          v921 = *(_QWORD *)(v66 + 24);
          if ((v921 & 0xFC000000000000) != 0x2C000000000000)
            goto LABEL_119;
          v922 = *((_QWORD *)this + 10);
          v923 = *(unsigned int *)((v921 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v924 = (_QWORD *)(v922 + 24);
          v925 = (_QWORD *)(v922 + 8);
          if ((v921 & 1) != 0)
            v926 = v924;
          else
            v926 = v925;
          v927 = *v926 + 32 * v923;
          a2 = *((unsigned int *)this + 40);
          if ((_DWORD)a2 != *(_DWORD *)(v927 + 20))
          {
            if ((*(_QWORD *)(v927 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v927, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v927 + 20) = a2;
            v8 = v1833;
          }
          v928 = *(_QWORD *)v927;
          if (*(_QWORD *)v927 == 4 || (*(_QWORD *)v927 & 2) != 0)
            goto LABEL_119;
          if ((v928 & 1) != 0)
          {
            v1500 = v928 & 0xFFFFFFFFFFFFFFFCLL;
            v8 = v1833;
            if (*(_DWORD *)v1500 != 1)
              goto LABEL_119;
            v930 = *(_QWORD *)(v1500 + 8);
          }
          else
          {
            v8 = v1833;
            if (v928 <= 3)
              goto LABEL_119;
            v930 = v928 & 0xFFFFFFFFFFFFFFFCLL;
          }
          v931 = *(_QWORD *)(v930 + 64);
          v8 = v1833;
          if (!v931)
            goto LABEL_119;
          if (*(_BYTE *)(v931 + 5) == 1)
            goto LABEL_119;
          v932 = *(_QWORD *)(v931
                           + 8 * JSC::DFG::Node::cachedPropertyNamesKind((JSC::DFG::Node *)v1877)
                           + 24);
          if (v932 < 2
            || !JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v1877, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            goto LABEL_119;
          }
          v933 = v1877;
          v934 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v932, (uint64_t)a3, a4, a5, a6, a7, a8);
          v935 = v933;
LABEL_1087:
          JSC::DFG::Node::convertToNewArrayBuffer(v935, (JSC::DFG::FrozenValue *)v934);
          goto LABEL_379;
        case 0xEE:
        case 0xF0:
          v144 = *(_QWORD *)(v66 + 24);
          if ((v144 & 0xFC000000000000) != 0)
            goto LABEL_119;
          v145 = *(_QWORD *)(v66 + 32);
          if ((v145 & 0xFC000000000000) != 0)
            goto LABEL_119;
          v146 = *((_QWORD *)this + 10);
          v147 = *(unsigned int *)((v144 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          if ((v144 & 1) != 0)
            v148 = (_QWORD *)(v146 + 24);
          else
            v148 = (_QWORD *)(v146 + 8);
          v149 = *v148 + 32 * v147;
          v150 = (void *)*((unsigned int *)this + 40);
          if ((_DWORD)v150 != *(_DWORD *)(v149 + 20))
          {
            if ((*(_QWORD *)(v149 + 8) & 0x2800FFFFFFF7) != 0)
            {
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v149, v150, (uint64_t)a3, a4, a5, a6, a7, a8);
              v145 = *(_QWORD *)(v1877 + 32);
              v146 = *((_QWORD *)this + 10);
            }
            else
            {
              *(_DWORD *)(v149 + 20) = (_DWORD)v150;
            }
          }
          v151 = *(_QWORD *)(v149 + 24);
          v152 = *(unsigned int *)((v145 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v153 = (_QWORD *)(v146 + 24);
          v154 = (_QWORD *)(v146 + 8);
          if ((v145 & 1) != 0)
            v155 = v153;
          else
            v155 = v154;
          v156 = *v155 + 32 * v152;
          v157 = (void *)*((unsigned int *)this + 40);
          if ((_DWORD)v157 != *(_DWORD *)(v156 + 20))
          {
            if ((*(_QWORD *)(v156 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v156, v157, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v156 + 20) = (_DWORD)v157;
          }
          a2 = *(_QWORD *)(v156 + 24);
          if (v151)
            v158 = (v151 & 0xFFFE000000000002) == 0;
          else
            v158 = 0;
          if (v158 && *(unsigned __int8 *)(v151 + 5) - 4 <= 0xFFFFFFFD)
          {
            v1739 = v1877;
            v1740 = JSC::DFG::Graph::freezeStrong(*((_QWORD *)this + 4), v151, (uint64_t)a3, a4, a5, a6, a7, a8);
            v1741 = *(_QWORD *)(v1877 + 32);
            *(_WORD *)(v1739 + 18) = 239;
            *(_DWORD *)(v1739 + 56) = 6;
            *(_QWORD *)(v1739 + 24) = v1741;
            *(_QWORD *)(v1739 + 32) = 0;
            *(_QWORD *)(v1739 + 72) = v1740;
            goto LABEL_1273;
          }
          if (a2)
            v159 = (a2 & 0xFFFE000000000002) == 0;
          else
            v159 = 0;
          v8 = v1833;
          if (v159 && *(unsigned __int8 *)(a2 + 5) - 4 <= 0xFFFFFFFD)
          {
            v160 = v1877;
            v161 = JSC::DFG::Graph::freezeStrong(*((_QWORD *)this + 4), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v162 = *(_QWORD *)(v1877 + 24);
            *(_WORD *)(v160 + 18) = 239;
            *(_DWORD *)(v160 + 56) = 6;
            *(_QWORD *)(v160 + 24) = v162;
            *(_QWORD *)(v160 + 32) = 0;
            *(_QWORD *)(v160 + 72) = v161;
            goto LABEL_379;
          }
          goto LABEL_119;
        case 0x107:
          if (!JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v66, (uint64_t)a3, a4, a5, a6, a7, a8))goto LABEL_119;
          v1140 = v1877;
          if (*(_DWORD *)(v1877 + 32) != 1)
            goto LABEL_119;
          v1141 = *(uint64_t **)(v1877 + 72);
          v1142 = (_QWORD *)(2 * *v1141);
          if ((*v1141 & 0x8000000000000000) == 0 && !*v1142)
            goto LABEL_119;
          v1143 = v1142 + 1;
          if (*v1141 >= 0)
            v1141 = v1143;
          if ((*(_BYTE *)v1141 & 1) == 0)
            goto LABEL_119;
          v1144 = *((_QWORD *)this + 4);
          if (*(_DWORD *)(v1144 + 164) <= *(_QWORD *)(v1877 + 24))
          {
            __break(0xC471u);
            JUMPOUT(0x1983AC494);
          }
          v8 = v1833;
          if (*(_WORD *)((*(_QWORD *)(*(_QWORD *)(v1144 + 152) + 8 * *(_QWORD *)(v1877 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                        + 0x12) != 350)
            goto LABEL_119;
          if (*(_WORD *)((*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v1144 + 152)
                                                  + 8 * *(_QWORD *)(v1877 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                                     + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                        + 0x12) != 352)
            goto LABEL_119;
          a2 = **(_QWORD **)((*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v1144 + 152)
                                                     + 8 * *(_QWORD *)(v1877 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                                        + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                           + 0x48);
          if ((*(_BYTE *)(a2 + 4) & 0xE) != 8)
            goto LABEL_119;
          v934 = JSC::DFG::Graph::freeze(v1144, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v935 = v1140;
          goto LABEL_1087;
        case 0x109:
          if (!JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v66, (uint64_t)a3, a4, a5, a6, a7, a8))goto LABEL_119;
          v712 = v1877;
          v713 = *(_QWORD *)(v1877 + 24);
          if ((v713 & 0xFC000000000000) != 0x4000000000000)
            goto LABEL_119;
          v714 = v713 & 0xFF00FFFFFFFFFFFFLL;
          if (*(unsigned __int16 *)(v714 + 18) > 2u)
            goto LABEL_119;
          v715 = **(_QWORD **)(v714 + 72);
          if (v715 < 0xFFFE000000000000 || v715 >> 27 != 0)
            goto LABEL_119;
          v717 = *(unsigned __int16 *)(v1877 + 18);
          switch(v717)
          {
            case 267:
              goto LABEL_1776;
            case 264:
              LOBYTE(v718) = *(_DWORD *)(v1877 + 76) & 0xF;
              break;
            case 352:
LABEL_1776:
              LOBYTE(v718) = *(_DWORD *)(v1877 + 84) & 0xF;
              break;
            default:
              v718 = *(_DWORD *)(v1877 + 72);
              break;
          }
          if (v718 - 4 >= 6
            && (v718 > 0x19u || ((1 << v718) & 0x2A00000) == 0))
          {
            goto LABEL_119;
          }
          *(_WORD *)(v1877 + 18) = 266;
          *(_DWORD *)(v712 + 56) = 9;
          *(_QWORD *)(v712 + 80) = 0;
          *(_DWORD *)(v712 + 80) = v715;
          goto LABEL_379;
        case 0x116:
        case 0x11A:
        case 0x11B:
        case 0x11C:
        case 0x11D:
        case 0x11E:
        case 0x120:
        case 0x122:
        case 0x15C:
        case 0x15D:
        case 0x15E:
        case 0x15F:
        case 0x160:
        case 0x163:
        case 0x17C:
          goto LABEL_90;
        case 0x118:
          v1150 = *(_QWORD *)(v66 + 24);
          v1151 = *((_QWORD *)this + 10);
          v1152 = *(unsigned int *)((v1150 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1153 = (_QWORD *)(v1151 + 24);
          v1154 = (_QWORD *)(v1151 + 8);
          if ((v1150 & 1) != 0)
            v1155 = v1153;
          else
            v1155 = v1154;
          v1156 = *v1155 + 32 * v1152;
          v1157 = (void *)*((unsigned int *)this + 40);
          if ((_DWORD)v1157 != *(_DWORD *)(v1156 + 20))
          {
            if ((*(_QWORD *)(v1156 + 8) & 0x2800FFFFFFF7) != 0)
            {
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1156, v1157, (uint64_t)a3, a4, a5, a6, a7, a8);
              v66 = v1877;
            }
            else
            {
              *(_DWORD *)(v1156 + 20) = (_DWORD)v1157;
            }
          }
          v1158 = *(WTF **)(v66 + 72);
          a2 = *(_QWORD *)(v1156 + 24);
          if (a2)
            v1159 = (a2 & 0xFFFE000000000002) == 0;
          else
            v1159 = 0;
          if (!v1159 || *(_BYTE *)(a2 + 5) != 1)
            goto LABEL_2112;
          v1160 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 4), a2, (int *)&v1856, a4, a5, a6, a7, a8);
          v1161 = (unsigned int *)(*(_QWORD *)v1158 & 0xFFFFFFFFFFFFFFFCLL);
          if ((*(_QWORD *)v1158 & 1) != 0)
          {
            v1487 = *v1161;
            if ((_DWORD)v1487)
            {
              if (*((_QWORD *)v1161 + 1) == v1160)
                goto LABEL_1471;
              v1488 = 0;
              v1489 = v1161 + 4;
              do
              {
                if (v1487 - 1 == v1488)
                  goto LABEL_2112;
                v1490 = *(_QWORD *)&v1489[2 * v1488++];
              }
              while (v1490 != v1160);
              if (v1488 < v1487)
              {
LABEL_1471:
                JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute((uint64_t)v1834, (void *)v1878, (uint64_t)a3, a4, a5, a6, a7, a8);
                JSC::DFG::Node::remove((JSC::DFG::Node *)v1877, *((JSC::DFG::Graph **)this + 4), v1162, v1163, v1164, v1165, v1166, v1167);
                goto LABEL_1472;
              }
            }
          }
          else if (v1161 == (unsigned int *)v1160)
          {
            goto LABEL_1471;
          }
LABEL_2112:
          v1491 = (uint64_t *)*((_QWORD *)this + 25);
          v8 = v1833;
          if (!v1491)
            goto LABEL_119;
          LOBYTE(v1852) = 1;
          v1856 = v1158;
          *(_QWORD *)&v1857 = this;
          *((_QWORD *)&v1857 + 1) = &v1852;
          JSC::DFG::PhiChildren::forAllTransitiveIncomingValues<JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::Node *)#1}>(v1491, v1877, (uint64_t)&v1856, a4, a5, a6, a7, a8);
          if ((_BYTE)v1852)
            goto LABEL_1471;
          goto LABEL_1274;
        case 0x126:
          v825 = *(_QWORD *)(v66 + 24);
          v826 = *(_QWORD *)(v66 + 72);
          v827 = *((_QWORD *)this + 10);
          v828 = *(unsigned int *)((v825 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v829 = (uint64_t *)(v827 + 24);
          v830 = (uint64_t *)(v827 + 8);
          if ((v825 & 1) != 0)
            v831 = v829;
          else
            v831 = v830;
          v832 = *v831;
          v833 = *v831 + 32 * v828;
          v834 = *((_DWORD *)this + 40);
          v835 = *(_DWORD *)(v833 + 20);
          if (v834 == v835)
            goto LABEL_945;
          if ((*(_QWORD *)(v833 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_1482;
          if ((v835 ^ v834) < 2)
            goto LABEL_1741;
          v1297 = *(_QWORD *)v833;
          if (*(_QWORD *)v833 == 4)
            goto LABEL_1740;
          *(_QWORD *)v833 = v1297 | 2;
          v1458 = (unsigned int *)(v1297 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1297 & 1) != 0)
          {
            v1642 = 2 * *v1458;
            do
            {
              if (!(v1642 * 4))
                goto LABEL_1740;
              v1643 = *(_QWORD *)&v1458[v1642];
              if ((*(_BYTE *)(v1643 + 19) & 0xC) != 0)
                break;
              v1644 = *(_QWORD *)(v1643 + 96);
              v1645 = (v1644 & 1) != 0 ? (v1644 >> 1) & 3 : *(unsigned __int8 *)(v1644 + 4);
              v1642 -= 2;
            }
            while (v1645 != 2);
            WTF::fastFree((unint64_t)v1458, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_2043:
            *(_QWORD *)v833 = 4;
            goto LABEL_1740;
          }
          if (v1458)
          {
            if ((*((_BYTE *)v1458 + 19) & 0xC) != 0)
              goto LABEL_2043;
            v1459 = *((_QWORD *)v1458 + 12);
            v1460 = (v1459 & 1) != 0 ? (v1459 >> 1) & 3 : *(unsigned __int8 *)(v1459 + 4);
            if (v1460 == 2)
              goto LABEL_2043;
          }
LABEL_1740:
          *(_DWORD *)(v832 + 32 * v828 + 16) = -21020677;
LABEL_1741:
          if ((v834 & 1) != 0)
            *(_QWORD *)v833 &= ~2uLL;
LABEL_1482:
          *(_DWORD *)(v833 + 20) = v834;
          v8 = v1833;
LABEL_945:
          v1856 = 0;
          v836 = *(_QWORD *)v833;
          if ((*(_QWORD *)v833 & 1) == 0 || v836 == 4)
          {
            v837 = v836 & 0xFFFFFFFFFFFFFFFDLL;
            v1856 = (WTF *)v837;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v1856, (_QWORD *)v833);
            v837 = (unint64_t)v1856;
          }
          v838 = v837 & 0xFFFFFFFFFFFFFFFDLL;
          v839 = (WTF *)(v837 | 2);
          if ((*(_BYTE *)v833 & 2) == 0)
            v839 = (WTF *)v838;
          v1856 = v839;
          v840 = v832 + 32 * v828;
          v841 = *(_OWORD *)(v840 + 8);
          v1858 = *(_QWORD *)(v840 + 24);
          v1857 = v841;
          JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute((uint64_t)v1834, (void *)v1878, (uint64_t)a3, a4, a5, a6, a7, a8);
          v1876 = 1;
          v842 = *(unsigned int *)(v826 + 12);
          if (!(_DWORD)v842)
            goto LABEL_817;
          v843 = 0;
          v844 = 0;
          v845 = 0;
          v846 = (JSC::DFG::BasicBlock *)*(unsigned int *)(v826 + 12);
          v847 = v846;
          break;
        case 0x129:
          v1076 = *(_QWORD *)(v66 + 24);
          v1077 = *((_QWORD *)this + 10);
          v1078 = *(unsigned int *)((v1076 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1079 = (uint64_t *)(v1077 + 24);
          v1080 = (uint64_t *)(v1077 + 8);
          if ((v1076 & 1) != 0)
            v1081 = v1079;
          else
            v1081 = v1080;
          v1082 = *v1081;
          v1083 = *v1081 + 32 * v1078;
          a2 = *((unsigned int *)this + 40);
          if ((_DWORD)a2 != *(_DWORD *)(v1083 + 20))
          {
            if ((*(_QWORD *)(v1083 + 8) & 0x2800FFFFFFF7) != 0)
            {
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1083, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              v66 = v1877;
            }
            else
            {
              *(_DWORD *)(v1083 + 20) = a2;
            }
          }
          LODWORD(v1852) = *(_DWORD *)(v66 + 72);
          if ((v1852 & 0x1FEFFF87) != 0)
            goto LABEL_1274;
          v1084 = *(_QWORD *)(v1082 + 32 * v1078 + 8);
          if (!v1084 || (v1084 & 0xFFFFD7FF00000008) != 0)
            goto LABEL_1274;
          v1086 = *(_QWORD *)v1083;
          if (*(_QWORD *)v1083 == 4 || (*(_QWORD *)v1083 & 2) != 0)
            goto LABEL_1274;
          LOBYTE(v1861) = 1;
          LOBYTE(v1851[0]) = 1;
          v1856 = (WTF *)&v1852;
          *(_QWORD *)&v1857 = &v1861;
          *((_QWORD *)&v1857 + 1) = v1851;
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::forEach<JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::RegisteredStructure)#3}>(v1086, (int **)&v1856);
          if ((_BYTE)v1861)
          {
            JSC::DFG::Graph::convertToConstant(*((_QWORD *)this + 4), v1877, 7uLL, a4, a5, a6, a7, a8);
            goto LABEL_932;
          }
          if (!LOBYTE(v1851[0]))
            goto LABEL_1274;
          JSC::DFG::Graph::convertToConstant(*((_QWORD *)this + 4), v1877, 6uLL, a4, a5, a6, a7, a8);
          goto LABEL_1273;
        case 0x13B:
          v740 = *(_QWORD *)(v66 + 24);
          v741 = *((_QWORD *)this + 10);
          v742 = *(unsigned int *)((v740 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v743 = (uint64_t *)(v741 + 24);
          v744 = (uint64_t *)(v741 + 8);
          if ((v740 & 1) != 0)
            v745 = v743;
          else
            v745 = v744;
          v746 = *v745;
          v747 = *v745 + 32 * v742;
          v748 = *((_DWORD *)this + 40);
          v749 = *(_DWORD *)(v747 + 20);
          if (v748 == v749)
            goto LABEL_825;
          if ((*(_QWORD *)(v747 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_1375;
          if ((v749 ^ v748) < 2)
            goto LABEL_1624;
          v1252 = *(_QWORD *)v747;
          if (*(_QWORD *)v747 == 4)
            goto LABEL_1623;
          *(_QWORD *)v747 = v1252 | 2;
          v1333 = (unsigned int *)(v1252 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1252 & 1) != 0)
          {
            v1621 = 2 * *v1333;
            do
            {
              if (!(v1621 * 4))
                goto LABEL_1623;
              v1622 = *(_QWORD *)&v1333[v1621];
              if ((*(_BYTE *)(v1622 + 19) & 0xC) != 0)
                break;
              v1623 = *(_QWORD *)(v1622 + 96);
              v1624 = (v1623 & 1) != 0 ? (v1623 >> 1) & 3 : *(unsigned __int8 *)(v1623 + 4);
              v1621 -= 2;
            }
            while (v1624 != 2);
            WTF::fastFree((unint64_t)v1333, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_1845:
            *(_QWORD *)v747 = 4;
            goto LABEL_1623;
          }
          if (v1333)
          {
            if ((*((_BYTE *)v1333 + 19) & 0xC) != 0)
              goto LABEL_1845;
            v1334 = *((_QWORD *)v1333 + 12);
            v1335 = (v1334 & 1) != 0 ? (v1334 >> 1) & 3 : *(unsigned __int8 *)(v1334 + 4);
            if (v1335 == 2)
              goto LABEL_1845;
          }
LABEL_1623:
          *(_DWORD *)(v746 + 32 * v742 + 16) = -21020677;
LABEL_1624:
          v8 = v1833;
          if ((v748 & 1) != 0)
            *(_QWORD *)v747 &= ~2uLL;
LABEL_1375:
          *(_DWORD *)(v747 + 20) = v748;
LABEL_825:
          if ((*(_QWORD *)(v747 + 8) & 0xFFFFF6008FFFFFFFLL) != 0)
            goto LABEL_119;
          v750 = v1877;
          if ((*(_QWORD *)(v1877 + 24) & 0xFF00FFFFFFFFFFFFLL) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1983ABF9CLL);
          }
          if ((*(_QWORD *)(v1877 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1983ABF7CLL);
          }
          goto LABEL_828;
        case 0x13C:
          v1271 = *(_QWORD *)(v66 + 24);
          v1272 = *((_QWORD *)this + 10);
          v1273 = *(unsigned int *)((v1271 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1274 = (_QWORD *)(v1272 + 24);
          v1275 = (_QWORD *)(v1272 + 8);
          if ((v1271 & 1) != 0)
            v1276 = v1274;
          else
            v1276 = v1275;
          v1277 = *v1276 + 32 * v1273;
          a2 = *((unsigned int *)this + 40);
          if ((_DWORD)a2 != *(_DWORD *)(v1277 + 20))
          {
            if ((*(_QWORD *)(v1277 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1277, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v1277 + 20) = a2;
          }
          v8 = v1833;
          if ((*(_QWORD *)(v1277 + 8) & 0xFFFFFFFF8FFFFFFFLL) == 0)
            goto LABEL_1017;
          goto LABEL_119;
        case 0x13D:
          v1659 = *(_QWORD *)(v66 + 24);
          v1660 = *((_QWORD *)this + 10);
          v1661 = *(unsigned int *)((v1659 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1662 = (_QWORD *)(v1660 + 24);
          v1663 = (_QWORD *)(v1660 + 8);
          if ((v1659 & 1) != 0)
            v1664 = v1662;
          else
            v1664 = v1663;
          v1665 = *v1664 + 32 * v1661;
          a2 = *((unsigned int *)this + 40);
          if ((_DWORD)a2 != *(_DWORD *)(v1665 + 20))
          {
            if ((*(_QWORD *)(v1665 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1665, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v1665 + 20) = a2;
          }
          v8 = v1833;
          if ((*(_QWORD *)(v1665 + 8) & 0xFFFFFF008FFFFFFFLL) == 0)
            goto LABEL_1017;
          goto LABEL_119;
        case 0x13F:
        case 0x146:
          v887 = *(_QWORD *)(v66 + 24);
          if ((v887 & 0xFC000000000000) == 0)
          {
            v888 = *((_QWORD *)this + 10);
            v889 = *(unsigned int *)((v887 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v890 = (_QWORD *)(v888 + 24);
            v891 = (_QWORD *)(v888 + 8);
            if ((v887 & 1) != 0)
              v892 = v890;
            else
              v892 = v891;
            v893 = *v892 + 32 * v889;
            a2 = *((unsigned int *)this + 40);
            if ((_DWORD)a2 != *(_DWORD *)(v893 + 20))
            {
              if ((*(_QWORD *)(v893 + 8) & 0x2800FFFFFFF7) != 0)
                JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v893, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              else
                *(_DWORD *)(v893 + 20) = a2;
              v8 = v1833;
            }
            if ((*(_QWORD *)(v893 + 8) & 0xFFFFFF8CFFFFFFFFLL) == 0)
              goto LABEL_1017;
          }
          goto LABEL_119;
        case 0x140:
          v1284 = *(_QWORD *)(v66 + 24);
          v1285 = *((_QWORD *)this + 10);
          v1286 = *(unsigned int *)((v1284 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1287 = (_QWORD *)(v1285 + 24);
          v1288 = (_QWORD *)(v1285 + 8);
          if ((v1284 & 1) != 0)
            v1289 = v1287;
          else
            v1289 = v1288;
          v1290 = *v1289 + 32 * v1286;
          a2 = *((unsigned int *)this + 40);
          if ((_DWORD)a2 != *(_DWORD *)(v1290 + 20))
          {
            if ((*(_QWORD *)(v1290 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1290, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v1290 + 20) = a2;
          }
          v8 = v1833;
          if ((*(_QWORD *)(v1290 + 8) & 0xFFFFF78CFFFFFFFFLL) != 0)
            goto LABEL_119;
LABEL_1017:
          v879 = (uint64_t *)v1877;
          goto LABEL_1018;
        case 0x147:
          v1066 = *(_QWORD *)(v66 + 32);
          v1067 = *((_QWORD *)this + 10);
          v1068 = *(unsigned int *)((v1066 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1069 = (_QWORD *)(v1067 + 24);
          v1070 = (_QWORD *)(v1067 + 8);
          if ((v1066 & 1) != 0)
            v1071 = v1069;
          else
            v1071 = v1070;
          v1072 = *v1071 + 32 * v1068;
          a2 = *((unsigned int *)this + 40);
          if ((_DWORD)a2 != *(_DWORD *)(v1072 + 20))
          {
            if ((*(_QWORD *)(v1072 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1072, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v1072 + 20) = a2;
          }
          v1073 = *(_QWORD *)(v1072 + 24);
          if (v1073 < 0xFFFE000000000000 || (v1073 - 2) > 0x22)
          {
            v8 = v1833;
            if (v1073 < 0xFFFE000000000000 || (v1073 - 37) < 0xFFFFFFDD)
              goto LABEL_119;
          }
          v1074 = v1877;
          if ((_DWORD)v1073 == 10)
          {
            v1613 = *(_QWORD *)((*(_QWORD *)(v1877 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
            v1614 = v1613 & 0xFF00000000;
            v1615 = v1613 & 0xFFFFFF00FFFFFFFFLL;
            if (v1614)
              v1616 = v1615 == 0;
            else
              v1616 = 0;
            if (v1616)
            {
              *(_WORD *)(v1877 + 18) = 318;
              *(_DWORD *)(v1074 + 56) = 1;
              *(_QWORD *)(v1074 + 32) = 0;
            }
            else
            {
              *(_WORD *)(v1877 + 18) = 328;
              *(_DWORD *)(v1074 + 56) = 1;
              *(_QWORD *)(v1074 + 32) = 0;
              *(_QWORD *)(v1074 + 72) = 10;
            }
          }
          else
          {
            *(_WORD *)(v1877 + 18) = 328;
            *(_DWORD *)(v1074 + 56) = 1;
            *(_QWORD *)(v1074 + 32) = 0;
            *(_QWORD *)(v1074 + 72) = 0;
            *(_DWORD *)(v1074 + 72) = v1073;
          }
          goto LABEL_1273;
        case 0x14A:
          v1093 = *((_QWORD *)this + 4);
          if (((*(_DWORD *)(*(_QWORD *)(v1093 + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
            goto LABEL_119;
          v1094 = *(_QWORD *)v66;
          if ((*(_QWORD *)v66 & 1) == 0)
          {
            v1095 = *(_QWORD *)(v1093 + 32);
LABEL_1319:
            v1096 = (_QWORD *)(v1094 & 0xFFFFFFFF8);
            v1097 = 1;
            v1098 = 1;
LABEL_1320:
            v1099 = v1096;
            goto LABEL_1321;
          }
          v1743 = *(_QWORD *)(v1094 & 0xFFFFFFFF8);
          if ((v1094 & 2) != 0
            || ((v1744 = *(_DWORD *)((v1094 & 0xFFFFFFFF8) + 8), v1744 != 0x3FFFFFFF)
              ? (v1745 = v1744 == -1)
              : (v1745 = 1),
                v1745))
          {
            v1746 = 2;
          }
          else if (v1744 >> 28)
          {
            v1791 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v1791 = v1743;
            *(_DWORD *)(v1791 + 8) = v1744;
            v1746 = 1;
            v1743 = v1791;
          }
          else
          {
            v1746 = v1743;
            v1743 = 0;
          }
          v1094 = v1743 | v1746;
          v1095 = *(_QWORD *)(v1093 + 32);
          if (((v1743 | v1746) & 1) == 0)
            goto LABEL_1319;
          v1747 = *(_QWORD *)(v1094 & 0xFFFFFFFF8);
          if ((v1094 & 2) != 0
            || ((v1748 = *(_DWORD *)((v1094 & 0xFFFFFFFF8) + 8), v1748 != 0x3FFFFFFF)
              ? (v1749 = v1748 == -1)
              : (v1749 = 1),
                v1749))
          {
            v1750 = 2;
          }
          else if (v1748 >> 28)
          {
            v1792 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v1792 = v1747;
            *(_DWORD *)(v1792 + 8) = v1748;
            v1750 = 1;
            v1747 = v1792;
          }
          else
          {
            v1750 = *(_QWORD *)(v1094 & 0xFFFFFFFF8);
            v1747 = 0;
          }
          v1751 = v1747 | v1750;
          v1096 = (_QWORD *)(v1751 & 0xFFFFFFFF8);
          if ((v1751 & 1) == 0)
          {
            v1098 = 0;
            v1097 = 1;
            goto LABEL_1320;
          }
          v1097 = 0;
          v1098 = 0;
          v1099 = (_QWORD *)*v1096;
LABEL_1321:
          if (v1099)
            v1095 = v1099[1];
          v1100 = *(JSC::JSBoundFunction **)(v1095 + 8);
          if ((v1097 & 1) == 0 && v1096)
            WTF::fastFree((unint64_t)v1096, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if ((v1098 & 1) == 0 && (v1094 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1094 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v1101 = (uint64_t *)(v1877 + 24);
          if ((*(_BYTE *)(v1877 + 56) & 0x10) != 0)
          {
            v1442 = *((_QWORD *)this + 4);
            v1443 = *v1101;
            if (*(_DWORD *)(v1442 + 164) <= v1443)
            {
              __break(0xC471u);
              JUMPOUT(0x1983AC46CLL);
            }
            v1101 = (uint64_t *)(*(_QWORD *)(v1442 + 152) + 8 * v1443);
          }
          v1102 = *v1101;
          v1103 = *((_QWORD *)this + 10);
          v1104 = *(unsigned int *)((v1102 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v1105 = (_QWORD *)(v1103 + 24);
          v1106 = (_QWORD *)(v1103 + 8);
          if ((v1102 & 1) != 0)
            v1107 = v1105;
          else
            v1107 = v1106;
          v1108 = *v1107 + 32 * v1104;
          a2 = *((unsigned int *)this + 40);
          if ((_DWORD)a2 != *(_DWORD *)(v1108 + 20))
          {
            if ((*(_QWORD *)(v1108 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v1108, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v1108 + 20) = a2;
          }
          v8 = v1833;
          if ((*(_QWORD *)(v1108 + 8) & 0xFFFFFFFFFFFFFFFBLL) != 0)
            goto LABEL_119;
          v1109 = *(_QWORD *)v1108;
          if (*(_QWORD *)v1108 == 4 || (*(_QWORD *)v1108 & 2) != 0)
            goto LABEL_119;
          if ((v1109 & 1) != 0)
          {
            v1243 = v1109 & 0xFFFFFFFFFFFFFFFCLL;
            v8 = v1833;
            if (*(_DWORD *)v1243 == 1)
            {
              v1111 = *(JSC::JSGlobalObject **)(v1243 + 8);
LABEL_1339:
              v8 = v1833;
              if (JSC::JSBoundFunction::canSkipNameAndLengthMaterialization(v1100, v1111, (JSC::Structure *)a3))
              {
                v1112 = v1877;
                v1113 = *((_QWORD *)this + 4);
                v1114 = *(uint64_t **)(v1113 + 16);
                v1115 = (unint64_t *)(v1114 + 5232);
                HostFunction = v1114[5232];
                if (!HostFunction)
                {
                  v1856 = 0;
                  HostFunction = JSC::VM::getHostFunction(v1114, (uint64_t)JSC::boundThisNoArgsFunctionCall, 1, 101, (unint64_t)JSC::boundFunctionConstruct, 0, &v1856, a8);
                  v1254 = v1856;
                  v1856 = 0;
                  if (v1254)
                  {
                    if (*(_DWORD *)v1254 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v1254, v1253, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486);
                    }
                    else
                    {
                      *(_DWORD *)v1254 -= 2;
                    }
                  }
                  *v1115 = HostFunction;
                }
                v1117 = JSC::DFG::Graph::freeze(v1113, HostFunction, (uint64_t)a3, a4, a5, a6, a7, a8);
                *(_WORD *)(v1112 + 18) = 363;
                *(_QWORD *)(v1112 + 72) = v1117;
LABEL_1273:
                v1879[0] = 1;
LABEL_1274:
                v8 = v1833;
              }
              goto LABEL_119;
            }
          }
          else
          {
            v8 = v1833;
            if (v1109 > 3)
            {
              v1111 = (JSC::JSGlobalObject *)(v1109 & 0xFFFFFFFFFFFFFFFCLL);
              goto LABEL_1339;
            }
          }
          goto LABEL_119;
        case 0x14B:
        case 0x14C:
          goto LABEL_1942;
        case 0x14D:
        case 0x14E:
          v937 = *(_QWORD *)(v66 + 32);
          v938 = *((_QWORD *)this + 10);
          v939 = *(unsigned int *)((v937 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v940 = (_QWORD *)(v938 + 24);
          v941 = (_QWORD *)(v938 + 8);
          if ((v937 & 1) != 0)
            v942 = v940;
          else
            v942 = v941;
          v943 = *v942 + 32 * v939;
          a2 = *((unsigned int *)this + 40);
          if ((_DWORD)a2 != *(_DWORD *)(v943 + 20))
          {
            if ((*(_QWORD *)(v943 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v943, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              *(_DWORD *)(v943 + 20) = a2;
            v8 = v1833;
          }
          v944 = *(_QWORD *)(v943 + 24);
          if (v944)
            v945 = (v944 & 0xFFFE000000000002) == 0;
          else
            v945 = 0;
          if (!v945 || *(_BYTE *)(v944 + 5) != 2)
            goto LABEL_119;
          v946 = *(_QWORD *)(v944 + 8);
          v947 = v946 && (*(_QWORD *)(v944 + 8) & 1) == 0;
          if (!v947 || (*(_BYTE *)(v946 + 16) & 0x10) == 0)
            goto LABEL_119;
          v948 = JSC::CacheableIdentifier::createFromCell(v944, (JSCell *)a2);
          if (!v948)
            goto LABEL_1115;
          v949 = (v948 & 1) != 0 ? v948 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v948 + 8);
          if (!v949)
            goto LABEL_1115;
          v950 = *(_DWORD *)(v949 + 16);
          if ((v950 & 0x20) != 0)
            goto LABEL_1115;
          v951 = *(_BYTE **)(v949 + 8);
          v952 = *(unsigned int *)(v949 + 4);
          if ((v950 & 4) != 0)
          {
            if (!(_DWORD)v952)
              goto LABEL_1115;
            v953 = *v951 - 48;
            if (v953 > 9)
              goto LABEL_1115;
            if (v952 >= 2 && *v951 == 48)
              goto LABEL_1115;
            v1813 = v951 + 1;
            v1814 = v952 - 1;
            while (v1814)
            {
              if (v953 <= 0x19999999)
              {
                v1815 = *v1813 - 48;
                if (v1815 <= 9)
                {
                  v544 = __CFADD__(v1815, 10 * v953);
                  v953 = v1815 + 10 * v953;
                  ++v1813;
                  --v1814;
                  if (!v544)
                    continue;
                }
              }
              goto LABEL_1115;
            }
          }
          else
          {
            if (!(_DWORD)v952)
              goto LABEL_1115;
            v953 = *(unsigned __int16 *)v951 - 48;
            if (v953 > 9)
              goto LABEL_1115;
            if (*(_WORD *)v951 == 48 && v952 > 1)
              goto LABEL_1115;
            v1502 = (unsigned __int16 *)(v951 + 2);
            v1503 = v952 - 1;
            while (v1503)
            {
              if (v953 <= 0x19999999)
              {
                v1504 = *v1502 - 48;
                if (v1504 <= 9)
                {
                  v544 = __CFADD__(v1504, 10 * v953);
                  v953 = v1504 + 10 * v953;
                  ++v1502;
                  --v1503;
                  if (!v544)
                    continue;
                }
              }
              goto LABEL_1115;
            }
          }
          v8 = v1833;
          if (v953 != -1)
            goto LABEL_119;
LABEL_1115:
          v954 = *(_QWORD *)(v944 + 8);
          if (v954)
            v955 = (*(_QWORD *)(v944 + 8) & 1) == 0;
          else
            v955 = 0;
          if (!v955)
          {
            __break(0xC471u);
            JUMPOUT(0x1983AC3CCLL);
          }
          JSC::DFG::Graph::freezeStrong(*((_QWORD *)this + 4), v944, (uint64_t)a3, a4, a5, a6, a7, a8);
          JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 240), v954, v956, v957, v958, v959, v960, v961);
          v962 = v1878;
          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v1848, (const JSC::DFG::NodeOrigin *)v1877);
          v967 = (unint64_t *)(v1877 + 24);
          if ((*(_BYTE *)(v1877 + 56) & 0x10) != 0)
          {
            v1605 = *((_QWORD *)this + 4);
            v1606 = *v967;
            if (*(_DWORD *)(v1605 + 164) <= v1606)
            {
              __break(0xC471u);
              JUMPOUT(0x1983AC464);
            }
            v967 = (unint64_t *)(*(_QWORD *)(v1605 + 152) + 8 * v1606);
          }
          JSC::DFG::InsertionSet::insertCheck((uint64_t)this + 208, v962, (uint64_t)v1848, *v967, v963, v964, v965, v966);
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v1848, v968, v969, v970, v971, v972, v973, v974);
          v975 = (uint64_t *)v1877;
          v976 = *((_QWORD *)this + 4);
          v978 = JSC::CacheableIdentifier::createFromCell(v944, v977);
          JSC::DFG::Node::convertToInByIdMaybeMegamorphic((uint64_t)v975, v976, v978);
          goto LABEL_1273;
        case 0x189:
          v780 = *(_QWORD *)(v66 + 24);
          v781 = *((_QWORD *)this + 10);
          v782 = *(unsigned int *)((v780 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v783 = (uint64_t *)(v781 + 24);
          v784 = (uint64_t *)(v781 + 8);
          if ((v780 & 1) != 0)
            v785 = v783;
          else
            v785 = v784;
          v786 = *v785;
          v787 = *v785 + 32 * v782;
          v788 = *((_DWORD *)this + 40);
          v789 = *(_DWORD *)(v787 + 20);
          if (v788 == v789)
            goto LABEL_904;
          if ((*(_QWORD *)(v787 + 8) & 0x2800FFFFFFF7) == 0)
            goto LABEL_1478;
          if ((v789 ^ v788) < 2)
            goto LABEL_1729;
          v1295 = *(_QWORD *)v787;
          if (*(_QWORD *)v787 == 4)
            goto LABEL_1728;
          *(_QWORD *)v787 = v1295 | 2;
          v1450 = (unsigned int *)(v1295 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1295 & 1) != 0)
          {
            v1634 = 2 * *v1450;
            do
            {
              if (!(v1634 * 4))
                goto LABEL_1728;
              v1635 = *(_QWORD *)&v1450[v1634];
              if ((*(_BYTE *)(v1635 + 19) & 0xC) != 0)
                break;
              v1636 = *(_QWORD *)(v1635 + 96);
              v1637 = (v1636 & 1) != 0 ? (v1636 >> 1) & 3 : *(unsigned __int8 *)(v1636 + 4);
              v1634 -= 2;
            }
            while (v1637 != 2);
            WTF::fastFree((unint64_t)v1450, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_2027:
            *(_QWORD *)v787 = 4;
            goto LABEL_1728;
          }
          if (v1450)
          {
            if ((*((_BYTE *)v1450 + 19) & 0xC) != 0)
              goto LABEL_2027;
            v1451 = *((_QWORD *)v1450 + 12);
            v1452 = (v1451 & 1) != 0 ? (v1451 >> 1) & 3 : *(unsigned __int8 *)(v1451 + 4);
            if (v1452 == 2)
              goto LABEL_2027;
          }
LABEL_1728:
          *(_DWORD *)(v786 + 32 * v782 + 16) = -21020677;
LABEL_1729:
          if ((v788 & 1) != 0)
            *(_QWORD *)v787 &= ~2uLL;
LABEL_1478:
          *(_DWORD *)(v787 + 20) = v788;
          v8 = v1833;
LABEL_904:
          if ((*(_WORD *)(v787 + 12) & 0x8FC) != 0)
            goto LABEL_119;
          v750 = v1877;
          if ((*(_QWORD *)(v1877 + 24) & 0xFF00FFFFFFFFFFFFLL) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1983AC308);
          }
          if ((*(_QWORD *)(v1877 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1983A719CLL);
          }
          goto LABEL_828;
        default:
          goto LABEL_93;
      }
      break;
    }
    while (1)
    {
      v848 = *(uint64_t **)v826;
      v849 = (_BYTE *)(*(_QWORD *)v826 + 16 * v843);
      v850 = *(_QWORD *)v849;
      v851 = *(unsigned __int8 *)(*(_QWORD *)v849 + 9);
      if (((unint64_t)v1857 & JSC::speculatedTypeMapping[v851]) == 0)
        break;
      v852 = (v851 - 39) <= 0xA
           ? JSC::typedArrayModes[(v851 - 39)]
           : 1 << *(_BYTE *)(v850 + 8);
      if ((v852 & DWORD2(v1857)) == 0)
        break;
      a2 = v842;
      v853 = (JSC::DFG::BasicBlock *)v842;
      if (v1856 != (WTF *)4)
      {
        a2 = v842;
        v853 = (JSC::DFG::BasicBlock *)v842;
        if ((v1856 & 2) == 0)
        {
          a3 = (unint64_t *)((unint64_t)v1856 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v1856 & 1) != 0)
          {
            v856 = *(unsigned int *)a3;
            if (!(_DWORD)v856)
              break;
            a2 = v842;
            v853 = (JSC::DFG::BasicBlock *)v842;
            v8 = v1833;
            if (a3[1] != v850)
            {
              v855 = 0;
              v857 = a3 + 2;
              do
              {
                if (v856 - 1 == v855)
                  goto LABEL_2011;
                a3 = (unint64_t *)v857[v855++];
              }
              while (a3 != (unint64_t *)v850);
              a2 = (uint64_t)v846;
              v853 = v847;
              v8 = v1833;
              if (v855 >= v856)
                goto LABEL_2011;
            }
          }
          else
          {
            LODWORD(v847) = (_DWORD)v846;
            a2 = (uint64_t)v846;
            v853 = v846;
            if ((unint64_t *)v850 != a3)
              goto LABEL_2011;
          }
        }
      }
      if (v853 <= v845)
      {
        __break(0xC471u);
        JUMPOUT(0x1983AC474);
      }
      if (LOBYTE(v848[2 * v843 + 1]))
        v854 = 2;
      else
        v854 = 1;
      v844 |= v854;
      v847 = v853;
LABEL_964:
      v843 = v845 + 1;
      v846 = (JSC::DFG::BasicBlock *)a2;
      v845 = v843;
      if (v847 <= v843)
      {
        if ((v844 - 1) < 2)
        {
          v1852 = 0;
          if ((_DWORD)v847)
          {
            v915 = *(uint64_t **)v826;
            v916 = 16 * v847;
            do
            {
              v917 = *v915;
              if ((v1852 & 1) != 0)
              {
                WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)&v1852, *v915);
              }
              else if (v917 != (v1852 & 0xFFFFFFFFFFFFFFFCLL))
              {
                if ((v1852 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                {
                  v919 = WTF::fastMalloc((WTF *)0x28);
                  *(_QWORD *)v919 = 0x400000002;
                  v920 = v1852;
                  *(_QWORD *)(v919 + 8) = v1852 & 0xFFFFFFFFFFFFFFFCLL;
                  *(_QWORD *)(v919 + 16) = v917;
                  v918 = (JSC::DFG::ConstantFoldingPhase *)(v920 & 2 | (unint64_t)v919 | 1);
                }
                else
                {
                  v918 = (JSC::DFG::ConstantFoldingPhase *)(v1852 & 2 | v917);
                }
                v1852 = (unint64_t)v918;
                v8 = v1833;
              }
              v915 += 2;
              v916 -= 16;
            }
            while (v916);
          }
          JSC::DFG::ConstantFoldingPhase::addBaseCheck((uint64_t)this, v1878, v1877, (uint64_t *)&v1856, (uint64_t *)&v1852);
          v985 = *((_QWORD *)this + 4);
          v986 = v1877;
          if (v844 == 2)
            v987 = 7;
          else
            v987 = 6;
          v988 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), v987, v979, v980, v981, v982, v983, v984);
          a2 = *((_QWORD *)v988 + 1);
          if (a2)
            JSC::DFG::Graph::assertIsRegistered(v985, a2);
          v989 = *(_DWORD *)(v986 + 56);
          if ((v989 & 7) == 3)
            v990 = 1;
          else
            v990 = 2 * ((v989 & 7) == 5);
          *(_WORD *)(v986 + 18) = v990;
          *(_DWORD *)(v986 + 56) = v989 & 0xFFFFFFE7;
          *(_QWORD *)(v986 + 72) = v988;
          *(_QWORD *)(v986 + 32) = 0;
          *(_QWORD *)(v986 + 40) = 0;
          *(_QWORD *)(v986 + 24) = 0;
          v1879[0] = 1;
          if ((v1852 & 1) != 0)
            WTF::fastFree(v1852 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
LABEL_817:
        v270 = (unint64_t)v1856;
        goto LABEL_299;
      }
    }
    LODWORD(v847) = v842;
LABEL_2011:
    if (!(_DWORD)v847)
    {
      __break(0xC471u);
      JUMPOUT(0x1983AC48CLL);
    }
    if (v847 <= v845)
    {
      __break(0xC471u);
      JUMPOUT(0x1983AC47CLL);
    }
    v1447 = &v848[2 * v847];
    v1448 = *(v1447 - 2);
    v849[8] = *((_BYTE *)v1447 - 8);
    *(_QWORD *)v849 = v1448;
    v1449 = *(_DWORD *)(v826 + 12);
    if (!v1449)
    {
      __break(0xC471u);
      JUMPOUT(0x1983AC484);
    }
    --v845;
    v842 = (v1449 - 1);
    *(_DWORD *)(v826 + 12) = v842;
    v1879[0] = 1;
    a2 = v842;
    v847 = (JSC::DFG::BasicBlock *)v842;
    v8 = v1833;
    goto LABEL_964;
  }
LABEL_154:
  if ((*(_DWORD *)(*((_QWORD *)this + 4) + 944) - 1) <= 1)
    JSC::DFG::InPlaceAbstractState::endBasicBlock((JSC::DFG::ConstantFoldingPhase *)((char *)this + 72), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 18) = 0;
  *((_BYTE *)this + 152) = 0;
  *((_BYTE *)this + 164) = 0;
  *((_BYTE *)this + 154) = 0;
  v132 = *((unsigned int *)this + 57);
  if ((_DWORD)v132)
  {
    v163 = *(unsigned int *)(v8 + 216);
    v164 = *(unsigned int *)(v8 + 220);
    v165 = v164 + v132;
    if (v164 + v132 > v163)
    {
      v450 = v163 + (v163 >> 2);
      if (v450 >= 0x10)
        v451 = v450 + 1;
      else
        v451 = 16;
      if (v451 <= v165)
        v452 = v164 + v132;
      else
        v452 = v451;
      v453 = *(const void **)(v8 + 208);
      if (v452 < 9)
      {
        v454 = (void *)(v8 + 224);
        *(_QWORD *)(v8 + 208) = v8 + 224;
        *(_DWORD *)(v8 + 216) = 8;
      }
      else
      {
        if (v452 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1983AC75CLL);
        }
        v454 = (void *)WTF::fastMalloc((WTF *)(8 * v452));
        *(_DWORD *)(v8 + 216) = v452;
        *(_QWORD *)(v8 + 208) = v454;
      }
      memcpy(v454, v453, 8 * v164);
      if ((const void *)(v8 + 224) != v453 && v453)
      {
        if (*(const void **)(v8 + 208) == v453)
        {
          *(_QWORD *)(v8 + 208) = 0;
          *(_DWORD *)(v8 + 216) = 0;
        }
        WTF::fastFree((unint64_t)v453, v455, v456, v457, v458, v459, v460, v461);
      }
    }
    *(_DWORD *)(v8 + 220) = v165;
    if (v132 - 1 >= (unint64_t)*((unsigned int *)this + 57))
    {
      __break(0xC471u);
      JUMPOUT(0x1983AC6A4);
    }
    v166 = (v164 + v132);
    v167 = ~v132;
    v168 = v166;
    do
    {
      --v132;
      v169 = *(_QWORD *)(*((_QWORD *)this + 27) + 16 * v132) + v132;
      v170 = v168 - 1;
      if (v168 - 1 > v169)
      {
        v171 = v168 + v167;
        do
        {
          if (v166 <= v171)
          {
            __break(0xC471u);
            JUMPOUT(0x1983AC5CCLL);
          }
          if (v166 <= v170)
          {
            __break(0xC471u);
            JUMPOUT(0x1983AC5D4);
          }
          *(_QWORD *)(*(_QWORD *)(v8 + 208) + 8 * v170--) = *(_QWORD *)(*(_QWORD *)(v8 + 208) + 8 * v171--);
        }
        while (v170 > v169);
      }
      if (v166 <= v169)
      {
        __break(0xC471u);
        JUMPOUT(0x1983AC69CLL);
      }
      *(_QWORD *)(*(_QWORD *)(v8 + 208) + 8 * v169) = *(_QWORD *)(*((_QWORD *)this + 27) + 16 * v132 + 8);
      ++v167;
      v168 = v169;
    }
    while (v132);
    *((_DWORD *)this + 57) = 0;
  }
  return v1879[0];
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::execute(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _UNKNOWN *__ptr32 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unsigned int *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  JSC::DFG::AbstractValue *v49;
  uint64_t v50;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  _UNKNOWN *__ptr32 *v68;
  _UNKNOWN *__ptr32 *v69;
  _UNKNOWN *__ptr32 *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unint64_t v85;

  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(v9 + 72);
  if (*(_DWORD *)(v10 + 220) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1983ADDFCLL);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 208) + 8 * a2);
  *(_BYTE *)(v9 + 81) = 0;
  if ((*(_BYTE *)(v13 + 56) & 0x10) == 0)
  {
    v14 = 0;
    v15 = v13 + 24;
    while (1)
    {
      v16 = *(_QWORD *)(v15 + 8 * v14);
      if ((v16 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(a1, a2, v13);
      v17 = (v16 >> 50) & 0x3F;
      if (!(_DWORD)v17)
        goto LABEL_6;
      v18 = 0x300000000;
      switch((int)v17)
      {
        case 1:
        case 2:
          break;
        case 3:
          v18 = 0x1300000000;
          break;
        case 4:
          v18 = 0x7300000000;
          break;
        case 5:
          v18 = 0x3300000000;
          break;
        case 6:
        case 7:
          v18 = 0x10000000000;
          break;
        case 8:
        case 9:
          v18 = 0x2C00FFFFFFF7;
          break;
        case 10:
          v18 = 0x2E00FFFFFFF7;
          break;
        case 11:
          v18 = 0x20000FFFFFF7;
          break;
        case 12:
          v18 = 2;
          break;
        case 13:
          v18 = 4;
          break;
        case 14:
          v18 = 1;
          break;
        case 15:
          v18 = 0x100000;
          break;
        case 16:
          v18 = 0x40000;
          break;
        case 17:
          v18 = 0x2000000;
          break;
        case 18:
          v18 = 0x4000000;
          break;
        case 19:
          v18 = 0x22000FFFFFF7;
          break;
        case 20:
          v18 = 0x10000000;
          break;
        case 21:
        case 23:
          v18 = 805306368;
          break;
        case 22:
          v18 = 0x20030000000;
          break;
        case 24:
          v18 = 0x1B73F0000000;
          break;
        case 25:
          v18 = 0x40000000;
          break;
        case 26:
        case 27:
          v18 = 0x80000000000;
          break;
        case 28:
          v18 = 0x100000000000;
          break;
        case 29:
          v18 = 0x80000;
          break;
        case 30:
          v18 = 0x200000;
          break;
        case 31:
          v18 = 0x400000;
          break;
        case 32:
        case 33:
          v18 = 0x8000000;
          break;
        case 34:
          v18 = 0x800000;
          break;
        case 35:
          v18 = 0x1000000;
          break;
        case 36:
          v18 = 0x200000000000;
          break;
        case 37:
          v18 = 0x20000;
          break;
        case 38:
          v18 = 805437440;
          break;
        case 39:
          v18 = -536870913;
          break;
        case 40:
          v18 = -1073741825;
          break;
        case 41:
        case 42:
          v18 = 0xFFFFD3FF00000008;
          break;
        case 43:
          v18 = 0xFFFFFF0FFFFFFFFFLL;
          break;
        case 44:
          v18 = 0xFFFFF70FFFFFFFFFLL;
          break;
        case 45:
          v18 = 0xFFFFF70FCFFFFFFFLL;
          break;
        case 46:
        case 47:
          v18 = 0x20000000000;
          break;
        case 48:
          v18 = 0x30000000000;
          break;
        case 49:
          v18 = 0xF000000000;
          break;
        case 50:
          v18 = 0x3000000000;
          break;
        case 51:
          v18 = 0x1000000000;
          break;
        case 52:
          v18 = 0xC00000000;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1983ADDE4);
      }
      v19 = *(_QWORD *)(a1 + 24);
      v20 = *(_QWORD *)(v19 + 8);
      v21 = *(unsigned int *)((v16 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v22 = (uint64_t *)(v20 + 24);
      v23 = (uint64_t *)(v20 + 8);
      if ((v16 & 1) != 0)
        v23 = v22;
      v24 = *v23;
      v25 = (unint64_t *)(*v23 + 32 * v21);
      v27 = v25 + 1;
      v26 = v25[1];
      if ((v26 & ~v18) == 0)
      {
        *(_QWORD *)(v15 + 8 * v14) = v16 | 0x1000000000000;
        goto LABEL_6;
      }
      *(_QWORD *)(v15 + 8 * v14) = v16 & 0xFFFEFFFFFFFFFFFFLL;
      v28 = *(_DWORD *)(v19 + 88);
      v29 = (unsigned int *)v25 + 5;
      if ((v26 & 0x2800FFFFFFF7) == 0)
      {
        *v29 = v28;
        *v27 = v26 & v18;
        if ((v26 & v18) == 0)
        {
          *v27 = 0;
          v64 = v24 + 32 * v21;
          *(_DWORD *)(v64 + 16) = 0;
          if ((*v25 & 1) != 0)
            WTF::fastFree(*v25 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          *v25 = 0;
          *(_QWORD *)(v64 + 24) = 0;
          v8 = &jpt_1983AD474;
        }
        goto LABEL_6;
      }
      if (*v29 != v28)
      {
        if ((*v29 ^ v28) >= 2)
        {
          v55 = *v25;
          if (*v25 != 4)
          {
            *v25 = v55 | 2;
            v61 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v55 & 1) != 0)
            {
              v84 = v28;
              v73 = 2 * *v61;
              while (1)
              {
                v8 = &jpt_1983AD474;
                v28 = v84;
                v29 = (unsigned int *)v25 + 5;
                if (!(v73 * 4))
                  break;
                v74 = *(_QWORD *)&v61[v73];
                if ((*(_BYTE *)(v74 + 19) & 0xC) == 0)
                {
                  v75 = *(_QWORD *)(v74 + 96);
                  v76 = (v75 & 1) != 0 ? (v75 >> 1) & 3 : *(unsigned __int8 *)(v75 + 4);
                  v73 -= 2;
                  if (v76 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v61, a2, a3, a4, a5, a6, a7, a8);
                v8 = &jpt_1983AD474;
                v28 = v84;
                v29 = (unsigned int *)v25 + 5;
                goto LABEL_98;
              }
            }
            else if (v61)
            {
              if ((*((_BYTE *)v61 + 19) & 0xC) != 0
                || ((v62 = *((_QWORD *)v61 + 12), (v62 & 1) != 0)
                  ? (v63 = (v62 >> 1) & 3)
                  : (v63 = *(unsigned __int8 *)(v62 + 4)),
                    v63 == 2))
              {
LABEL_98:
                *v25 = 4;
              }
            }
          }
          *(_DWORD *)(v24 + 32 * v21 + 16) = -21020677;
        }
        if ((v28 & 1) != 0)
          *v25 &= ~2uLL;
        *v29 = v28;
        v26 = *v27;
      }
      v30 = v26 & v18;
      *v27 = v26 & v18;
      v31 = *v25;
      if ((v26 & v18 & 0x2800FFFFFFF7) == 0)
        break;
      if (v31 > 4 || ((1 << v31) & 0x15) == 0)
      {
        v53 = v31 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v31 & 1) != 0)
        {
          v65 = *(_DWORD *)v53;
          if (!*(_DWORD *)v53)
            goto LABEL_131;
          v66 = 0;
          v67 = v53 + 8;
          do
          {
            if ((JSC::speculatedTypeMapping[*(unsigned __int8 *)(*(_QWORD *)(v67 + 8 * v66) + 9)] & v30) == 0)
            {
              v77 = v66;
              *(_DWORD *)v53 = --v65;
              --v66;
              *(_QWORD *)(v67 + 8 * v77) = *(_QWORD *)(v67 + 8 * v65);
            }
            ++v66;
          }
          while (v66 < v65);
          if (!v65)
          {
LABEL_131:
            v68 = v8;
            WTF::fastFree(v53, a2, a3, a4, a5, a6, a7, a8);
            v8 = v68;
            v31 = *v25;
LABEL_132:
            v31 &= 2u;
LABEL_20:
            *v25 = v31;
            v30 = *v27;
          }
        }
        else if (v53 && (JSC::speculatedTypeMapping[*(unsigned __int8 *)(v53 + 9)] & v30) == 0)
        {
          goto LABEL_132;
        }
      }
      if ((v30 & 0x2800FFFFFFF7) != 0)
      {
        if ((v30 & 0xFFFFFFFFFFFFFFFDLL) == 0)
          *(_DWORD *)(v24 + 32 * v21 + 16) &= 0x2A02AAAu;
      }
      else
      {
        *(_DWORD *)(v24 + 32 * v21 + 16) = 0;
      }
      v32 = v24 + 32 * v21;
      v35 = *(_QWORD *)(v32 + 24);
      v34 = (_QWORD *)(v32 + 24);
      v33 = v35;
      if (v35)
      {
        if ((v30 & 0xC00000000) != 0)
        {
          v83 = v31;
          v85 = v33;
          v82 = v30;
          v78 = JSC::int52AwareSpeculationFromValue(v33);
          v30 = v82;
          v31 = v83;
          v8 = &jpt_1983AD474;
          v33 = v85;
          if ((v78 | v82) == v82)
            goto LABEL_208;
        }
        if (v33 >= 0xFFFE000000000000)
        {
          v41 = (v33 & 0xFFFFFFFE) == 0;
          v60 = 0x200000000;
          if (v41)
            v60 = 0x100000000;
          goto LABEL_89;
        }
        if (v33 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          if ((v33 & 0xFFFE000000000002) != 0)
          {
            v41 = (v33 & 0xFFFFFFFFFFFFFFFELL) == 6;
            v60 = 0x20000000000;
            if (v41)
              v60 = 0x10000000000;
            goto LABEL_89;
          }
          v56 = v33 >> 36;
          v58 = (v33 & 0xFFFFFFFFFLL) != 0 && v56 == 0;
          if (qword_1ECF4C080 <= v33 && v58)
          {
            v59 = *(unsigned __int8 *)(v33 + 5);
            if (v59 == 2)
            {
              v71 = *(_QWORD *)(v33 + 8);
              v60 = 805306368;
              if (v71 && (v71 & 1) == 0)
              {
                if (v71 < qword_1ECF4C080)
                {
                  v60 = 0;
                }
                else
                {
                  v60 = 0;
                  if (!(v71 >> 36) && (v71 & 0xFFFFFFFFFLL) != 0)
                  {
                    if ((*(_BYTE *)(v71 + 16) & 0x10) != 0)
                      v60 = 0x10000000;
                    else
                      v60 = 805306368;
                  }
                }
              }
            }
            else
            {
              v60 = JSC::speculatedTypeMapping[v59];
            }
            goto LABEL_89;
          }
          if (qword_1ECF4C080 <= v33)
          {
            v79 = v33;
            v60 = 0;
            if (v56 || (v79 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_89;
            v80 = *(unsigned __int8 *)(v79 + 5);
            if (v80 != 2)
            {
              v60 = JSC::speculatedTypeMapping[v80];
              goto LABEL_89;
            }
            v81 = *(_QWORD *)(v79 + 8);
            v60 = 805306368;
            if (!v81 || (v81 & 1) != 0)
            {
LABEL_89:
              if ((v60 | v30) != v30)
                *v34 = 0;
              goto LABEL_24;
            }
            if (v81 >= qword_1ECF4C080)
            {
              v60 = 0;
              if (!(v81 >> 36) && (v81 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v81 + 16) & 0x10) != 0)
                  v60 = 0x10000000;
                else
                  v60 = 805306368;
              }
              goto LABEL_89;
            }
          }
          v60 = 0;
          goto LABEL_89;
        }
        v72 = (uint64_t)COERCE_DOUBLE(v33 - 0x2000000000000);
        if ((double)v72 != COERCE_DOUBLE(v33 - 0x2000000000000))
        {
LABEL_152:
          v60 = 0x2000000000;
          goto LABEL_89;
        }
        if (v72)
        {
          if ((unint64_t)(v72 + 0x8000000000000) >> 52)
            goto LABEL_152;
        }
        else if ((uint64_t)v33 < 0x2000000000000)
        {
          goto LABEL_152;
        }
        v60 = 0x1000000000;
        goto LABEL_89;
      }
LABEL_24:
      if (!v30)
        goto LABEL_25;
LABEL_208:
      if ((v30 & 0xFFFFD7FF00000008) == 0 && (!*(_DWORD *)(v24 + 32 * v21 + 16) || (v31 & 0xFFFFFFFFFFFFFFFDLL) == 0))
      {
LABEL_25:
        *v27 = 0;
        *(_DWORD *)(v24 + 32 * v21 + 16) = 0;
        if ((v31 & 1) != 0)
        {
          v70 = v8;
          WTF::fastFree(v31 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v8 = v70;
        }
        *v25 = 0;
        *v34 = 0;
      }
LABEL_6:
      if (++v14 == 3)
        return JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(a1, a2, v13);
    }
    if ((v31 & 1) != 0)
    {
      v69 = v8;
      WTF::fastFree(v31 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v8 = v69;
    }
    v31 = 0;
    goto LABEL_20;
  }
  if (*(_DWORD *)(v13 + 32) + *(_QWORD *)(v13 + 24) > *(_QWORD *)(v13 + 24))
  {
    v36 = *(_QWORD *)(a1 + 8);
    v37 = *(_QWORD *)(v13 + 24);
    do
    {
      if (v37 >= *(unsigned int *)(v36 + 164))
      {
        __break(0xC471u);
        JUMPOUT(0x1983ADE44);
      }
      v38 = *(_QWORD *)(v36 + 152);
      v39 = *(_QWORD *)(v38 + 8 * v37);
      v40 = (v39 >> 50) & 0x3F;
      v41 = (v39 & 0xFF00FFFFFFFFFFFFLL) == 0 || (_DWORD)v40 == 0;
      if (!v41)
      {
        v42 = 0x300000000;
        switch((int)v40)
        {
          case 1:
          case 2:
            break;
          case 3:
            v42 = 0x1300000000;
            break;
          case 4:
            v42 = 0x7300000000;
            break;
          case 5:
            v42 = 0x3300000000;
            break;
          case 6:
          case 7:
            v42 = 0x10000000000;
            break;
          case 8:
          case 9:
            v42 = 0x2C00FFFFFFF7;
            break;
          case 10:
            v42 = 0x2E00FFFFFFF7;
            break;
          case 11:
            v42 = 0x20000FFFFFF7;
            break;
          case 12:
            v42 = 2;
            break;
          case 13:
            v42 = 4;
            break;
          case 14:
            v42 = 1;
            break;
          case 15:
            v42 = 0x100000;
            break;
          case 16:
            v42 = 0x40000;
            break;
          case 17:
            v42 = 0x2000000;
            break;
          case 18:
            v42 = 0x4000000;
            break;
          case 19:
            v42 = 0x22000FFFFFF7;
            break;
          case 20:
            v42 = 0x10000000;
            break;
          case 21:
          case 23:
            v42 = 805306368;
            break;
          case 22:
            v42 = 0x20030000000;
            break;
          case 24:
            v42 = 0x1B73F0000000;
            break;
          case 25:
            v42 = 0x40000000;
            break;
          case 26:
          case 27:
            v42 = 0x80000000000;
            break;
          case 28:
            v42 = 0x100000000000;
            break;
          case 29:
            v42 = 0x80000;
            break;
          case 30:
            v42 = 0x200000;
            break;
          case 31:
            v42 = 0x400000;
            break;
          case 32:
          case 33:
            v42 = 0x8000000;
            break;
          case 34:
            v42 = 0x800000;
            break;
          case 35:
            v42 = 0x1000000;
            break;
          case 36:
            v42 = 0x200000000000;
            break;
          case 37:
            v42 = 0x20000;
            break;
          case 38:
            v42 = 805437440;
            break;
          case 39:
            v42 = -536870913;
            break;
          case 40:
            v42 = -1073741825;
            break;
          case 41:
          case 42:
            v42 = 0xFFFFD3FF00000008;
            break;
          case 43:
            v42 = 0xFFFFFF0FFFFFFFFFLL;
            break;
          case 44:
            v42 = 0xFFFFF70FFFFFFFFFLL;
            break;
          case 45:
            v42 = 0xFFFFF70FCFFFFFFFLL;
            break;
          case 46:
          case 47:
            v42 = 0x20000000000;
            break;
          case 48:
            v42 = 0x30000000000;
            break;
          case 49:
            v42 = 0xF000000000;
            break;
          case 50:
            v42 = 0x3000000000;
            break;
          case 51:
            v42 = 0x1000000000;
            break;
          case 52:
            v42 = 0xC00000000;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1983ADE3CLL);
        }
        v43 = *(_QWORD *)(a1 + 24);
        v44 = *(_QWORD *)(v43 + 8);
        v45 = *(unsigned int *)((v39 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v46 = (uint64_t *)(v44 + 24);
        v47 = (uint64_t *)(v44 + 8);
        if ((v39 & 1) != 0)
          v47 = v46;
        v48 = *v47;
        v49 = (JSC::DFG::AbstractValue *)(*v47 + 32 * v45);
        v50 = *((_QWORD *)v49 + 1);
        if ((v50 & ~v42) != 0)
        {
          *(_QWORD *)(v38 + 8 * v37) = v39 & 0xFFFEFFFFFFFFFFFFLL;
          v54 = *(unsigned int *)(v43 + 88);
          if ((v50 & 0x2800FFFFFFF7) != 0)
          {
            JSC::DFG::AbstractValue::fastForwardToAndFilterSlow((uint64_t)v49, (void *)v54, v42, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_DWORD *)(v48 + 32 * v45 + 20) = v54;
            *((_QWORD *)v49 + 1) = v50 & v42;
            if ((v50 & v42) == 0)
              JSC::DFG::AbstractValue::clear(v49, v54, v42, a4, a5, a6, a7, a8);
          }
        }
        else
        {
          *(_QWORD *)(v38 + 8 * v37) = v39 | 0x1000000000000;
        }
      }
      ++v37;
    }
    while (v37 < (*(_DWORD *)(v13 + 32) + *(_DWORD *)(v13 + 24)));
  }
  return JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(a1, a2, v13);
}

uint64_t JSC::DFG::InsertionSet::insertCheck(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  __int128 v51;
  unint64_t v52;

  v51 = 0uLL;
  v52 = 0;
  v4 = *a4;
  if ((*a4 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v6 = 0;
    if ((v4 & 0x1000000000000) == 0)
    {
      v7 = (v4 >> 50) & 0x3F;
      if ((_DWORD)v7)
      {
        v22 = v7 > 0x34;
        v23 = (1 << v7) & 0x12400001800284;
        if (v22 || v23 == 0)
        {
          *(_QWORD *)&v51 = *a4;
          v6 = 1;
        }
      }
    }
    v8 = a4[1];
    if ((v8 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      if ((v8 & 0x1000000000000) == 0)
      {
        v9 = (v8 >> 50) & 0x3F;
        if ((_DWORD)v9)
        {
          v22 = v9 > 0x34;
          v25 = (1 << v9) & 0x12400001800284;
          if (v22 || v25 == 0)
            *((_QWORD *)&v51 + v6++) = v8;
        }
      }
      v10 = a4[2];
      if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v10 & 0x1000000000000) == 0)
      {
        v11 = (v10 >> 50) & 0x3F;
        if ((_DWORD)v11)
        {
          if (v11 > 0x34 || ((1 << v11) & 0x12400001800284) == 0)
            *((_QWORD *)&v51 + v6) = v10;
        }
      }
    }
  }
  *(_OWORD *)a4 = v51;
  a4[2] = v52;
  if ((*a4 & 0xFF00FFFFFFFFFFFFLL) == 0)
    return 0;
  v12 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v42 = a4;
    v44 = a3;
    v38 = a2;
    v40 = a1;
    v27 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v28 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v28 != 0x3FFFFFFF)
        ? (v29 = (_DWORD)v28 == -1)
        : (v29 = 1),
          v29))
    {
      v30 = 2;
    }
    else if (v28 >> 28)
    {
      v36 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v36 = v27;
      *(_DWORD *)(v36 + 8) = v28;
      v30 = 1;
      v27 = v36;
    }
    else
    {
      v30 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v27 = v28 << 36;
    }
    v12 = v27 | v30;
    a2 = v38;
    a1 = v40;
    a4 = v42;
    a3 = v44;
  }
  v48 = v12;
  v13 = *(_QWORD *)(a3 + 8);
  if ((v13 & 1) != 0)
  {
    v43 = a4;
    v45 = a3;
    v39 = a2;
    v41 = a1;
    v31 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v32 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v37 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v37 = v31;
      *(_DWORD *)(v37 + 8) = v32;
      v34 = 1;
      v31 = v37;
    }
    else
    {
      v34 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v31 = v32 << 36;
    }
    v13 = v31 | v34;
    a2 = v39;
    a1 = v41;
    a4 = v43;
    a3 = v45;
  }
  v49 = v13;
  v50 = *(_WORD *)(a3 + 16);
  v46 = *(_OWORD *)a4;
  v47 = a4[2];
  result = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>(a1, a2, 0, 0x18u, (uint64_t)&v48, &v46);
  if ((v49 & 1) != 0 && (v49 & 0xFFFFFFFF8) != 0)
  {
    v35 = result;
    WTF::fastFree(v49 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
    result = v35;
  }
  if ((v48 & 1) != 0)
  {
    v21 = result;
    if ((v48 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v48 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
    return v21;
  }
  return result;
}

void JSC::DFG::PhiChildren::forAllTransitiveIncomingValues<JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::Node *)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  WTF *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  WTF *v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v61;
  unint64_t v62;
  unsigned int *v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  int v74[6];
  WTF *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;

  v78 = a2;
  v9 = *(unsigned __int16 *)(a2 + 18);
  if (v9 != 27)
  {
    if (v9 <= 2)
    {
      v22 = **(_QWORD **)(a2 + 72);
      v23 = v22 && (v22 & 0xFFFE000000000002) == 0;
      if (v23 && *(_BYTE *)(v22 + 5) == 1)
      {
        v24 = *(_QWORD **)a3;
        v25 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32), v22, v74, a4, a5, a6, a7, a8);
        v26 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFFCLL);
        if ((*v24 & 1) != 0)
        {
          v70 = *v26;
          if ((_DWORD)v70)
          {
            if (*((_QWORD *)v26 + 1) == v25)
              return;
            v71 = 0;
            v72 = v26 + 4;
            do
            {
              if (v70 - 1 == v71)
                goto LABEL_19;
              v73 = *(_QWORD *)&v72[2 * v71++];
            }
            while (v73 != v25);
            if (v71 < v70)
              return;
          }
        }
        else if (v26 == (unsigned int *)v25)
        {
          return;
        }
      }
    }
LABEL_19:
    **(_BYTE **)(a3 + 16) = 0;
    return;
  }
  v76 = 0;
  v77 = 0;
  v75 = 0;
  WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add(&v77, &v78, a3, a4, a5, a6, a7, a8, (uint64_t)v74);
  v18 = HIDWORD(v76);
  if (HIDWORD(v76) == (_DWORD)v76)
  {
    v69 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, HIDWORD(v76) + 1, (unint64_t)&v78);
    v18 = HIDWORD(v76);
    *((_QWORD *)v75 + HIDWORD(v76)) = *v69;
  }
  else
  {
    *((_QWORD *)v75 + HIDWORD(v76)) = v78;
  }
  v19 = __CFADD__(v18, 1);
  v20 = v18 + 1;
  HIDWORD(v76) = v20;
  if (v19)
    goto LABEL_6;
  do
  {
    v27 = *((_QWORD *)v75 + --v20);
    HIDWORD(v76) = v20;
    v28 = *a1;
    v29 = *(_DWORD *)(*a1 - 8);
    v30 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
    v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
    v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
    v33 = v29 & ((v32 >> 31) ^ v32);
    v34 = *a1 + 48 * v33;
    v35 = *(_QWORD *)v34;
    if (*(_QWORD *)v34 != v27)
    {
      v36 = 1;
      while (v35)
      {
        v33 = (v33 + v36) & v29;
        v34 = v28 + 48 * v33;
        v35 = *(_QWORD *)v34;
        ++v36;
        if (*(_QWORD *)v34 == v27)
          goto LABEL_25;
      }
      v34 = v28 + 48 * *(unsigned int *)(v28 - 4);
    }
LABEL_25:
    v37 = *(unsigned int *)(v34 + 20);
    if (!(_DWORD)v37)
      continue;
    v38 = *(_QWORD *)(v34 + 8);
    v39 = v38 + 8 * v37;
    do
    {
      v40 = *(_QWORD *)(*(_QWORD *)v38 + 24) & 0xFF00FFFFFFFFFFFFLL;
      *(_QWORD *)v74 = v40;
      v41 = *(unsigned __int16 *)(v40 + 18);
      if (v41 == 27)
      {
        v42 = v77;
        if (v77
          || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(&v77, 0, v12, v13, v14, v15, v16, v17), (v42 = v77) != 0))
        {
          v43 = *(_DWORD *)(v42 - 8);
        }
        else
        {
          v43 = 0;
        }
        v44 = *(_QWORD *)v74;
        v45 = (~(*(_QWORD *)v74 << 32) + *(_QWORD *)v74) ^ ((~(*(_QWORD *)v74 << 32) + *(_QWORD *)v74) >> 22);
        v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((unint64_t)(v45 + ~(v45 << 13)) >> 8));
        v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
        v48 = v43 & ((v47 >> 31) ^ v47);
        v11 = v42 + 8 * v48;
        v49 = *(_QWORD *)v11;
        if (!*(_QWORD *)v11)
        {
LABEL_38:
          *(_QWORD *)v11 = v44;
          if (v77)
            v52 = *(_DWORD *)(v77 - 12) + 1;
          else
            v52 = 1;
          *(_DWORD *)(v77 - 12) = v52;
          if (v77)
            v53 = *(_DWORD *)(v77 - 12);
          else
            v53 = 0;
          v54 = (*(_DWORD *)(v77 - 16) + v53);
          v55 = *(unsigned int *)(v77 - 4);
          if (v55 > 0x400)
          {
            if (v55 > 2 * v54)
              goto LABEL_44;
          }
          else if (3 * v55 > 4 * v54)
          {
LABEL_44:
            v56 = HIDWORD(v76);
            if (HIDWORD(v76) == (_DWORD)v76)
            {
              v64 = (uint64_t *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, HIDWORD(v76) + 1, (unint64_t)v74);
              v56 = HIDWORD(v76);
              v57 = HIDWORD(v76) + 1;
              v58 = v75;
              v59 = *v64;
            }
            else
            {
              v57 = HIDWORD(v76) + 1;
              v58 = v75;
              v59 = *(_QWORD *)v74;
            }
            *((_QWORD *)v58 + v56) = v59;
            HIDWORD(v76) = v57;
            goto LABEL_57;
          }
          WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(&v77, (uint64_t *)v11, v12, v13, v14, v15, v16, v17);
          goto LABEL_44;
        }
        v50 = 0;
        v51 = 1;
        while (v49 != *(_QWORD *)v74)
        {
          if (v49 == -1)
            v50 = (_QWORD *)v11;
          v48 = (v48 + v51) & v43;
          v11 = v42 + 8 * v48;
          v49 = *(_QWORD *)v11;
          ++v51;
          if (!*(_QWORD *)v11)
          {
            if (v50)
            {
              *v50 = 0;
              --*(_DWORD *)(v77 - 16);
              v44 = *(_QWORD *)v74;
              v11 = (unint64_t)v50;
            }
            goto LABEL_38;
          }
        }
      }
      else
      {
        if (v41 > 2)
          goto LABEL_56;
        v11 = **(_QWORD **)(v40 + 72);
        v60 = v11 && (v11 & 0xFFFE000000000002) == 0;
        if (!v60 || *(_BYTE *)(v11 + 5) != 1)
          goto LABEL_56;
        v61 = *(_QWORD **)a3;
        v62 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32), v11, &v79, v13, v14, v15, v16, v17);
        v63 = (unsigned int *)(*v61 & 0xFFFFFFFFFFFFFFFCLL);
        if ((*v61 & 1) == 0)
        {
          if (v63 == (unsigned int *)v62)
            goto LABEL_57;
          goto LABEL_56;
        }
        v65 = *v63;
        if (!(_DWORD)v65)
          goto LABEL_56;
        if (*((_QWORD *)v63 + 1) != v62)
        {
          v66 = 0;
          v67 = v63 + 4;
          while (v65 - 1 != v66)
          {
            v68 = *(_QWORD *)&v67[2 * v66++];
            if (v68 == v62)
            {
              if (v66 >= v65)
                break;
              goto LABEL_57;
            }
          }
LABEL_56:
          **(_BYTE **)(a3 + 16) = 0;
        }
      }
LABEL_57:
      v38 += 8;
    }
    while (v38 != v39);
    v20 = HIDWORD(v76);
  }
  while (v20);
LABEL_6:
  v21 = v75;
  if (v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree((unint64_t)v21, (void *)v11, v12, v13, v14, v15, v16, v17);
  }
  if (v77)
    WTF::fastFree(v77 - 16, (void *)v11, v12, v13, v14, v15, v16, v17);
}

uint64_t JSC::DFG::MultiGetByOffsetCase::operator=(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;

  if ((uint64_t *)a1 != a2)
  {
    if ((*(_QWORD *)a1 & 1) != 0)
      WTF::fastFree(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v10 = *a2;
    if ((*a2 & 1) == 0 || v10 == 4)
    {
      v11 = v10 & 0xFFFFFFFFFFFFFFFDLL;
      v12 = v10 | 2;
      if ((*(_BYTE *)a1 & 2) == 0)
        v12 = v11;
      *(_QWORD *)a1 = v12;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)a1, a2);
    }
  }
  v13 = *(_OWORD *)(a2 + 1);
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(_OWORD *)(a1 + 8) = v13;
  return a1;
}

uint64_t JSC::DFG::ConstantFoldingPhase::emitGetByOffset(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  JSC::DFG::FrozenValue *v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inserted;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];

  JSC::DFG::ConstantFoldingPhase::addBaseCheck(a1, a2, (uint64_t)a3, a4, (uint64_t *)a5);
  v13 = *(_DWORD *)(a5 + 24);
  v14 = *(JSC::DFG::FrozenValue **)(a5 + 8);
  v15 = *(_DWORD *)(a5 + 16);
  switch(v13)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1983AE92CLL);
    case 1:
      result = JSC::DFG::Graph::convertToConstant(*(_QWORD *)(a1 + 32), (JSC::DFG::Node *)a3, v14);
      break;
    case 2:
      result = JSC::DFG::ConstantFoldingPhase::emitGetByOffset(a1, a2, (uint64_t)a3, a3[3], a6, v15, v11, v12);
      break;
    case 3:
      JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v30, (const JSC::DFG::NodeOrigin *)a3);
      inserted = JSC::DFG::InsertionSet::insertConstant(a1 + 208, a2, (uint64_t)v30, (unint64_t *)v14, 0, v17, v18, v19);
      JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v30, v21, v22, v23, v24, v25, v26, v27);
      result = JSC::DFG::ConstantFoldingPhase::emitGetByOffset(a1, a2, (uint64_t)a3, inserted & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000, a6, v15, v28, v29);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1983AE90CLL);
  }
  return result;
}

void JSC::DFG::ConstantFoldingPhase::emitPutByOffset(JSC::DFG::ConstantFoldingPhase *this, unsigned int a2, JSC::DFG::Node *a3, const JSC::DFG::AbstractValue *a4, const JSC::PutByVariant *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  int v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  JSC::Structure *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  JSC::DFG::NodeOrigin *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD v128[3];
  uint64_t v129;
  char v130;
  char v131;
  _BYTE v132[24];
  _BYTE v133[24];
  _BYTE v134[24];
  _BYTE v135[24];
  uint64_t v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  uint64_t v140;
  __int16 v141;
  int v142[3];

  v8 = a6;
  v14 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v98 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v99 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v99 != 0x3FFFFFFF)
        ? (v100 = (_DWORD)v99 == -1)
        : (v100 = 1),
          v100))
    {
      v101 = 2;
    }
    else if (v99 >> 28)
    {
      v122 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v122 = v98;
      *(_DWORD *)(v122 + 8) = v99;
      v101 = 1;
      v98 = v122;
    }
    else
    {
      v101 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v98 = v99 << 36;
    }
    v14 = v98 | v101;
  }
  v139 = v14;
  v15 = *((_QWORD *)a3 + 1);
  if ((v15 & 1) != 0)
  {
    v102 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v103 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v103 != 0x3FFFFFFF)
        ? (v104 = (_DWORD)v103 == -1)
        : (v104 = 1),
          v104))
    {
      v105 = 2;
    }
    else if (v103 >> 28)
    {
      v123 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = v102;
      *(_DWORD *)(v123 + 8) = v103;
      v105 = 1;
      v102 = v123;
    }
    else
    {
      v105 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v102 = v103 << 36;
    }
    v15 = v102 | v105;
  }
  v140 = v15;
  v16 = *((_WORD *)a3 + 8);
  v141 = v16;
  v17 = *((_QWORD *)a3 + 3);
  v18 = (unint64_t *)((char *)a5 + 8);
  v19 = JSC::DFG::Graph::addStructureSet(*((_QWORD *)this + 4), (unint64_t *)a5 + 1, (unint64_t *)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  v128[0] = a2;
  JSC::DFG::ConstantFoldingPhase::addBaseCheck((uint64_t)this, a2, (uint64_t)a3, (uint64_t *)a4, v19);
  *((_QWORD *)a3 + 3) = *((_QWORD *)a3 + 3) & 0xFF03FFFFFFFFFFFFLL | 0x24000000000000;
  if (*(_DWORD *)a5 == 2)
  {
    v25 = *((_QWORD *)this + 4);
    v26 = *v18;
    if ((*v18 & 1) != 0)
    {
      v68 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      v69 = *v68;
      if (v69 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1983AEE68);
      }
      v27 = v8;
      v70 = 2 * v69;
      while (v70 * 4)
      {
        v28 = *(_QWORD *)&v68[v70];
        v70 -= 2;
        if (v28 != *((_QWORD *)a5 + 2))
          goto LABEL_7;
      }
    }
    else if (v26 >= 4)
    {
      v27 = v8;
      v28 = v26 & 0xFFFFFFFFFFFFFFFCLL;
      if (*((_QWORD *)a5 + 2) != (v26 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_7:
        v29 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 4), v28, v142, v20, v21, v22, v23, v24);
        v35 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 4), *((_QWORD *)a5 + 2), v142, v30, v31, v32, v33, v34);
        v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v36 = v29;
        v36[1] = v35;
        v36[2] = 0;
        v36[2] = *(_QWORD *)(v25 + 512);
        *(_QWORD *)(v25 + 512) = v36;
        v37 = v141;
        v8 = v27;
        goto LABEL_8;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1983AF008);
  }
  v36 = 0;
  v37 = v16;
LABEL_8:
  if (!v37)
  {
    JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 4), a3, (const WTF::CString *)"./dfg/DFGConstantFoldingPhase.cpp", (const char *)0x595, "void JSC::DFG::ConstantFoldingPhase::emitPutByOffset(unsigned int, Node *, const AbstractValue &, const PutByVariant &, unsigned int)", "origin.exitOK");
    __break(0xC471u);
    JUMPOUT(0x1983AEE48);
  }
  v38 = v17 & 0xFF03FFFFFFFFFFFFLL | 0x24000000000000;
  if (*((int *)a5 + 1) >= 64)
  {
    if (JSC::PutByVariant::reallocatesStorage(a5))
    {
      v78 = (JSC::Structure *)JSC::PutByVariant::oldStructureForTransition(a5);
      if (JSC::Structure::outOfLineCapacity(v78))
      {
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v134, (const JSC::DFG::NodeOrigin *)&v139);
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v133, (const JSC::DFG::NodeOrigin *)&v139);
        v90 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>((uint64_t)this + 208, v128[0], 0, 138, (uint64_t)v133, v38, v88, v89);
        v86 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)this + 208, v128[0], 0, 0x89u, (uint64_t)v134, (uint64_t)v36, v38, v90 & 0xFF00FFFFFFFFFFFFLL);
        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v133, v91, v92, v93, v94, v95, v96, v97);
        v87 = (JSC::DFG::NodeOrigin *)v134;
      }
      else
      {
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v135, (const JSC::DFG::NodeOrigin *)&v139);
        v86 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)this + 208, v128[0], 0, 0x88u, (uint64_t)v135, (uint64_t)v36, v38);
        v87 = (JSC::DFG::NodeOrigin *)v135;
      }
      JSC::DFG::NodeOrigin::~NodeOrigin(v87, v79, v80, v81, v82, v83, v84, v85);
      v40 = v86 & 0xFF00FFFFFFFFFFFFLL;
      v39 = 1;
    }
    else
    {
      v57 = (char *)this + 208;
      v58 = v128[0];
      v59 = v139;
      if ((v139 & 1) != 0)
      {
        v112 = v8;
        v113 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
        if ((v139 & 2) != 0
          || (v114 = *(unsigned int *)((v139 & 0xFFFFFFFF8) + 8), (_DWORD)v114 == 0x3FFFFFFF)
          || (_DWORD)v114 == -1)
        {
          v115 = 2;
        }
        else if (v114 >> 28)
        {
          v126 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v126 = v113;
          *(_DWORD *)(v126 + 8) = v114;
          v115 = 1;
          v113 = v126;
        }
        else
        {
          v115 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
          v113 = v114 << 36;
        }
        v59 = v113 | v115;
        v57 = (char *)this + 208;
        v58 = v128[0];
        v8 = v112;
      }
      v136 = v59;
      v60 = v140;
      if ((v140 & 1) != 0)
      {
        v116 = v8;
        v117 = v58;
        v118 = v57;
        v119 = *(_QWORD *)(v140 & 0xFFFFFFFF8);
        if ((v140 & 2) != 0
          || (v120 = *(unsigned int *)((v140 & 0xFFFFFFFF8) + 8), (_DWORD)v120 == 0x3FFFFFFF)
          || (_DWORD)v120 == -1)
        {
          v121 = 2;
        }
        else if (v120 >> 28)
        {
          v127 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v127 = v119;
          *(_DWORD *)(v127 + 8) = v120;
          v121 = 1;
          v119 = v127;
        }
        else
        {
          v121 = *(_QWORD *)(v140 & 0xFFFFFFFF8);
          v119 = v120 << 36;
        }
        v60 = v119 | v121;
        v57 = v118;
        v58 = v117;
        v8 = v116;
      }
      v137 = v60;
      v138 = v141;
      v40 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>((uint64_t)v57, v58, 0, 138, (uint64_t)&v136, v38, v55, v56) & 0xFF00FFFFFFFFFFFFLL;
      if ((v137 & 1) != 0 && (v137 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v137 & 0xFFFFFFFF8, v61, v62, v63, v64, v65, v66, v67);
      if ((v136 & 1) != 0 && (v136 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v136 & 0xFFFFFFFF8, v61, v62, v63, v64, v65, v66, v67);
      v39 = 0;
    }
  }
  else
  {
    v39 = 0;
    v40 = v38;
  }
  v41 = *((_QWORD *)this + 4);
  v42 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v42 = 0;
  *(_QWORD *)(v42 + 8) = 0;
  *(_QWORD *)(v42 + 8) = *(_QWORD *)(v41 + 432);
  *(_QWORD *)(v41 + 432) = v42;
  *(_DWORD *)v42 = *((_DWORD *)a5 + 1);
  *(_DWORD *)(v42 + 4) = v8;
  *((_QWORD *)a3 + 9) = v42;
  v50 = *((_QWORD *)a3 + 4);
  *((_QWORD *)a3 + 4) = v38;
  *((_QWORD *)a3 + 5) = v50;
  *((_QWORD *)a3 + 3) = v40;
  *((_WORD *)a3 + 9) = 155;
  *((_BYTE *)a3 + 16) = 1;
  if (*(_DWORD *)a5 == 2)
  {
    v51 = (v128[0] + 1);
    if ((v39 & 1) != 0)
    {
      JSC::DFG::NodeOrigin::withExitOK((uint64_t)&v139, 0, (uint64_t)v132);
      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)this + 208, v51, 0, 0x8Bu, (uint64_t)v132, v38, v40);
      JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v132, v71, v72, v73, v74, v75, v76, v77);
    }
    v52 = (char *)this + 208;
    v53 = v139;
    if ((v139 & 1) != 0)
    {
      v106 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
      if ((v139 & 2) != 0
        || (v107 = *(unsigned int *)((v139 & 0xFFFFFFFF8) + 8), (_DWORD)v107 == 0x3FFFFFFF)
        || (_DWORD)v107 == -1)
      {
        v108 = 2;
      }
      else if (v107 >> 28)
      {
        v124 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v124 = v106;
        *(_DWORD *)(v124 + 8) = v107;
        v108 = 1;
        v106 = v124;
      }
      else
      {
        v108 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
        v106 = v107 << 36;
      }
      v53 = v106 | v108;
    }
    *(_QWORD *)&v128[1] = v53;
    v54 = v140;
    if ((v140 & 1) != 0)
    {
      v109 = *(_QWORD *)(v140 & 0xFFFFFFFF8);
      if ((v140 & 2) != 0
        || (v110 = *(unsigned int *)((v140 & 0xFFFFFFFF8) + 8), (_DWORD)v110 == 0x3FFFFFFF)
        || (_DWORD)v110 == -1)
      {
        v111 = 2;
      }
      else if (v110 >> 28)
      {
        v125 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v125 = v109;
        *(_DWORD *)(v125 + 8) = v110;
        v111 = 1;
        v109 = v125;
      }
      else
      {
        v111 = *(_QWORD *)(v140 & 0xFFFFFFFF8);
        v109 = v110 << 36;
      }
      v54 = v109 | v111;
    }
    v129 = v54;
    v131 = HIBYTE(v141);
    v130 = 0;
    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)v52, v51, 0, 0x87u, (uint64_t)&v128[1], (uint64_t)v36, v38);
    if ((v129 & 1) != 0 && (v129 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v129 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
    if ((v128[1] & 1) != 0 && (*(_QWORD *)&v128[1] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(*(_QWORD *)&v128[1] & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  }
  if ((v140 & 1) != 0 && (v140 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v140 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  if ((v139 & 1) != 0 && (v139 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v139 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
}

void JSC::DFG::ConstantFoldingPhase::emitDeleteByOffset(JSC::DFG::Graph **this, unsigned int a2, JSC::DFG::Node *a3, const JSC::DFG::AbstractValue *a4, const JSC::DeleteByVariant *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::DFG::Graph **v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  JSC::DFG::Graph **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  void *v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  JSC::DFG::Graph *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 *v117;
  unint64_t v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  int v181;
  JSC::DFG::Graph **v182;
  const JSC::DeleteByVariant *v183;
  unint64_t v184;
  __int16 v185;
  uint64_t v186;
  uint64_t v187;
  __int16 v188;
  _QWORD v189[2];
  __int16 v190;
  uint64_t v191;
  uint64_t v192;
  __int16 v193;
  uint64_t v194;
  uint64_t v195;
  __int16 v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int16 v200;

  v8 = a6;
  v14 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v121 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v122 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v122 != 0x3FFFFFFF)
        ? (v123 = (_DWORD)v122 == -1)
        : (v123 = 1),
          v123))
    {
      v124 = 2;
    }
    else if (v122 >> 28)
    {
      v165 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v165 = v121;
      *(_DWORD *)(v165 + 8) = v122;
      v124 = 1;
      v121 = v165;
    }
    else
    {
      v124 = v121;
      v121 = v122 << 36;
    }
    v14 = v121 | v124;
  }
  v198 = v14;
  v15 = *((_QWORD *)a3 + 1);
  if ((v15 & 1) != 0)
  {
    v125 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v126 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v126 != 0x3FFFFFFF)
        ? (v127 = (_DWORD)v126 == -1)
        : (v127 = 1),
          v127))
    {
      v128 = 2;
    }
    else if (v126 >> 28)
    {
      v166 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v166 = v125;
      *(_DWORD *)(v166 + 8) = v126;
      v128 = 1;
      v125 = v166;
    }
    else
    {
      v128 = v125;
      v125 = v126 << 36;
    }
    v15 = v125 | v128;
  }
  v199 = v15;
  v200 = *((_WORD *)a3 + 8);
  v185 = v200;
  if (!(_BYTE)v200)
  {
    JSC::DFG::Graph::logAssertionFailure(this[4], a3, (const WTF::CString *)"./dfg/DFGConstantFoldingPhase.cpp", (const char *)0x5CE, "void JSC::DFG::ConstantFoldingPhase::emitDeleteByOffset(unsigned int, Node *, const AbstractValue &, const DeleteByVariant &, unsigned int)", "origin.exitOK");
    __break(0xC471u);
    JUMPOUT(0x1983AF9ECLL);
  }
  v16 = JSC::DFG::Graph::registerStructure((uint64_t)this[4], *((_QWORD *)a5 + 1), (int *)&v197, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  v197 = v16;
  JSC::DFG::ConstantFoldingPhase::addBaseCheck((uint64_t)this, a2, (uint64_t)a3, (uint64_t *)a4, (uint64_t *)&v197);
  if ((v16 & 1) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFFFFFFFFFCLL, v17, v18, v19, v20, v21, v22, v23);
  v24 = (uint64_t *)((char *)a3 + 24);
  *((_QWORD *)a3 + 3) = *((_QWORD *)a3 + 3) & 0xFF03FFFFFFFFFFFFLL | 0x24000000000000;
  v25 = (uint64_t)this[4];
  if (*((_QWORD *)a5 + 2))
  {
    v181 = v8;
    v26 = JSC::DFG::Graph::registerStructure(v25, *((_QWORD *)a5 + 1), (int *)&v197, v19, v20, v21, v22, v23);
    v32 = this;
    v33 = JSC::DFG::Graph::registerStructure((uint64_t)this[4], *((_QWORD *)a5 + 2), (int *)&v197, v27, v28, v29, v30, v31);
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v34 = v26;
    v34[1] = v33;
    v34[2] = 0;
    v34[2] = *(_QWORD *)(v25 + 512);
    v180 = v34;
    *(_QWORD *)(v25 + 512) = v34;
    v37 = a2;
    v183 = a5;
    v184 = a2;
    if (*((int *)a5 + 6) > 63)
    {
      v56 = (uint64_t)(v32 + 26);
      v57 = v14;
      v38 = v32;
      if ((v14 & 1) != 0)
      {
        v159 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        if ((v14 & 2) != 0
          || (v160 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v160 == 0x3FFFFFFF)
          || (_DWORD)v160 == -1)
        {
          v161 = 2;
        }
        else
        {
          if (v160 >> 28)
          {
            v177 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v177 = v159;
            *(_DWORD *)(v177 + 8) = v160;
            v161 = 1;
            v159 = v177;
          }
          else
          {
            v161 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
            v159 = v160 << 36;
          }
          v37 = v184;
        }
        v57 = v159 | v161;
      }
      v194 = v57;
      v58 = v15;
      if ((v15 & 1) != 0)
      {
        v162 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
        if ((v15 & 2) != 0
          || (v163 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v163 == 0x3FFFFFFF)
          || (_DWORD)v163 == -1)
        {
          v164 = 2;
        }
        else
        {
          if (v163 >> 28)
          {
            v178 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v178 = v162;
            *(_DWORD *)(v178 + 8) = v163;
            v164 = 1;
            v162 = v178;
          }
          else
          {
            v164 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
            v162 = v163 << 36;
          }
          v37 = v184;
        }
        v58 = v162 | v164;
      }
      v195 = v58;
      v196 = v185;
      v66 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v56, v37, 0, 138, (uint64_t)&v194, *v24, v35, v36) & 0xFF00FFFFFFFFFFFFLL;
      if ((v195 & 1) != 0 && (v195 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v195 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
      v179 = v66;
      if ((v194 & 1) != 0 && (v194 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v194 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      v179 = *v24;
      v38 = v32;
    }
    v67 = v38[4];
    v74 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v74 = 0;
    *(_QWORD *)(v74 + 8) = 0;
    *(_QWORD *)(v74 + 8) = *((_QWORD *)v67 + 54);
    *((_QWORD *)v67 + 54) = v74;
    *(_DWORD *)v74 = *((_DWORD *)a5 + 6);
    *(_DWORD *)(v74 + 4) = v181;
    v75 = (uint64_t)(v38 + 26);
    v76 = v14;
    if ((v14 & 1) != 0)
    {
      v129 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      if ((v14 & 2) != 0
        || (v130 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v130 == 0x3FFFFFFF)
        || (_DWORD)v130 == -1)
      {
        v131 = 2;
      }
      else if (v130 >> 28)
      {
        v167 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v167 = v129;
        *(_DWORD *)(v167 + 8) = v130;
        v131 = 1;
        v129 = v167;
      }
      else
      {
        v131 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        v129 = v130 << 36;
      }
      v76 = v129 | v131;
      v37 = v184;
    }
    v191 = v76;
    v77 = v15;
    if ((v15 & 1) != 0)
    {
      v132 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      if ((v15 & 2) != 0
        || (v133 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v133 == 0x3FFFFFFF)
        || (_DWORD)v133 == -1)
      {
        v134 = 2;
      }
      else if (v133 >> 28)
      {
        v168 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v168 = v132;
        *(_DWORD *)(v168 + 8) = v133;
        v134 = 1;
        v132 = v168;
      }
      else
      {
        v134 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
        v132 = v133 << 36;
      }
      v77 = v132 | v134;
      v37 = v184;
    }
    v192 = v77;
    v193 = v185;
    v182 = v38;
    v78 = JSC::DFG::Graph::freezeStrong((uint64_t)v38[4], 0, v68, v69, v70, v71, v72, v73);
    v88 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)(v38 + 26), v37, 0, 0, (uint64_t)&v191, (uint64_t)v78, v79, v80);
    if ((v192 & 1) != 0 && (v192 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v192 & 0xFFFFFFFF8, v81, v82, v83, v84, v85, v86, v87);
    if ((v191 & 1) != 0 && (v191 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v191 & 0xFFFFFFFF8, v81, v82, v83, v84, v85, v86, v87);
    v89 = v14;
    if ((v14 & 1) != 0)
    {
      v135 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      if ((v14 & 2) != 0
        || (v136 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v136 == 0x3FFFFFFF)
        || (_DWORD)v136 == -1)
      {
        v137 = 2;
      }
      else if (v136 >> 28)
      {
        v169 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v169 = v135;
        *(_DWORD *)(v169 + 8) = v136;
        v137 = 1;
        v135 = v169;
      }
      else
      {
        v137 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        v135 = v136 << 36;
      }
      v89 = v135 | v137;
    }
    v189[0] = v89;
    if ((v15 & 1) != 0)
    {
      v138 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      if ((v15 & 2) != 0
        || (v139 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v139 == 0x3FFFFFFF)
        || (_DWORD)v139 == -1)
      {
        v140 = 2;
      }
      else if (v139 >> 28)
      {
        v170 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v170 = v138;
        *(_DWORD *)(v170 + 8) = v139;
        v140 = 1;
        v138 = v170;
      }
      else
      {
        v140 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
        v138 = v139 << 36;
      }
      v91 = v138 | v140;
      v90 = (v138 | v140) & 1;
    }
    else
    {
      v90 = 0;
      v91 = v15;
    }
    v189[1] = v91;
    v190 = v185;
    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge,JSC::DFG::Edge>(v75, v184, (uint64_t)v189, v74, v179, *v24, v88 & 0xFF00FFFFFFFFFFFFLL, v87);
    if (v90 && (v91 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v91 & 0xFFFFFFFF8, v92, v93, v94, v95, v96, v97, v98);
    if ((v89 & 1) != 0 && (v89 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v89 & 0xFFFFFFFF8, v92, v93, v94, v95, v96, v97, v98);
    v99 = v14;
    if ((v14 & 1) != 0)
    {
      v141 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      if ((v14 & 2) != 0
        || (v142 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v142 == 0x3FFFFFFF)
        || (_DWORD)v142 == -1)
      {
        v143 = 2;
      }
      else if (v142 >> 28)
      {
        v171 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v171 = v141;
        *(_DWORD *)(v171 + 8) = v142;
        v143 = 1;
        v141 = v171;
      }
      else
      {
        v143 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        v141 = v142 << 36;
      }
      v99 = v141 | v143;
    }
    v100 = v15;
    if ((v15 & 1) != 0)
    {
      v144 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      if ((v15 & 2) != 0
        || (v145 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v145 == 0x3FFFFFFF)
        || (_DWORD)v145 == -1)
      {
        v146 = 2;
      }
      else if (v145 >> 28)
      {
        v172 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v172 = v144;
        *(_DWORD *)(v172 + 8) = v145;
        v146 = 1;
        v144 = v172;
      }
      else
      {
        v146 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
        v144 = v145 << 36;
      }
      v100 = v144 | v146;
    }
    if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v14 & 0xFFFFFFFF8, v92, v93, v94, v95, v96, v97, v98);
    v198 = v99;
    if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v15 & 0xFFFFFFFF8, v92, v93, v94, v95, v96, v97, v98);
    v199 = v100;
    v200 = v185 & 0xFF00;
    if ((v99 & 1) != 0)
    {
      v147 = *(_QWORD *)(v99 & 0xFFFFFFFF8);
      v101 = (uint64_t)v180;
      if ((v99 & 2) != 0
        || (v148 = *(unsigned int *)((v99 & 0xFFFFFFFF8) + 8), (_DWORD)v148 == 0x3FFFFFFF)
        || (_DWORD)v148 == -1)
      {
        v149 = 2;
      }
      else if (v148 >> 28)
      {
        v173 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v173 = v147;
        *(_DWORD *)(v173 + 8) = v148;
        v149 = 1;
        v147 = v173;
      }
      else
      {
        v149 = v147;
        v147 = v148 << 36;
      }
      v99 = v147 | v149;
    }
    else
    {
      v101 = (uint64_t)v180;
    }
    v186 = v99;
    if ((v100 & 1) != 0)
    {
      v150 = *(_QWORD *)(v100 & 0xFFFFFFFF8);
      if ((v100 & 2) != 0
        || (v151 = *(unsigned int *)((v100 & 0xFFFFFFFF8) + 8), (_DWORD)v151 == 0x3FFFFFFF)
        || (_DWORD)v151 == -1)
      {
        v152 = 2;
      }
      else if (v151 >> 28)
      {
        v174 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v174 = v150;
        *(_DWORD *)(v174 + 8) = v151;
        v152 = 1;
        v150 = v174;
      }
      else
      {
        v152 = *(_QWORD *)(v100 & 0xFFFFFFFF8);
        v150 = v151 << 36;
      }
      v100 = v150 | v152;
    }
    v187 = v100;
    v188 = v185 & 0xFF00;
    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(v75, v184, 0, 0x87u, (uint64_t)&v186, v101, *v24);
    if ((v187 & 1) != 0 && (v187 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v187 & 0xFFFFFFFF8, v102, v103, v104, v105, v106, v107, v108);
    if ((v186 & 1) != 0 && (v186 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v186 & 0xFFFFFFFF8, v102, v103, v104, v105, v106, v107, v108);
    v109 = (uint64_t)v182[4];
    if (*(_BYTE *)v183)
      v110 = 7;
    else
      v110 = 6;
    v117 = JSC::DFG::Graph::freeze((uint64_t)v182[4], v110, v103, v104, v105, v106, v107, v108);
    v118 = *((_QWORD *)v117 + 1);
    if (v118)
      JSC::DFG::Graph::assertIsRegistered(v109, v118);
    v119 = *((_DWORD *)a3 + 14);
    if ((v119 & 7) == 3)
      v120 = 1;
    else
      v120 = 2 * ((v119 & 7) == 5);
    *((_WORD *)a3 + 9) = v120;
    *((_DWORD *)a3 + 14) = v119 & 0xFFFFFFE7;
    *((_QWORD *)a3 + 9) = v117;
    *((_QWORD *)a3 + 4) = 0;
    *((_QWORD *)a3 + 5) = 0;
    *v24 = 0;
    JSC::DFG::NodeOrigin::operator=((uint64_t *)a3, &v198, v111, v112, v113, v114, v115, v116);
    v15 = v199;
  }
  else
  {
    if (*(_BYTE *)a5)
      v39 = 7;
    else
      v39 = 6;
    v46 = JSC::DFG::Graph::freeze((uint64_t)this[4], v39, v18, v19, v20, v21, v22, v23);
    v47 = (void *)*((_QWORD *)v46 + 1);
    if (v47)
      JSC::DFG::Graph::assertIsRegistered(v25, (unint64_t)v47);
    v48 = *((_DWORD *)a3 + 14);
    if ((v48 & 7) == 3)
      v49 = 1;
    else
      v49 = 2 * ((v48 & 7) == 5);
    *((_WORD *)a3 + 9) = v49;
    *((_DWORD *)a3 + 14) = v48 & 0xFFFFFFE7;
    *((_QWORD *)a3 + 9) = v46;
    *((_QWORD *)a3 + 4) = 0;
    *((_QWORD *)a3 + 5) = 0;
    *v24 = 0;
    v50 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) != 0)
    {
      v153 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
      if ((v50 & 2) != 0
        || (v154 = *(unsigned int *)((v50 & 0xFFFFFFFF8) + 8), (_DWORD)v154 == 0x3FFFFFFF)
        || (_DWORD)v154 == -1)
      {
        v155 = 2;
      }
      else if (v154 >> 28)
      {
        v175 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v175 = v153;
        *(_DWORD *)(v175 + 8) = v154;
        v155 = 1;
        v153 = v175;
      }
      else
      {
        v155 = v153;
        v153 = v154 << 36;
      }
      v50 = v153 | v155;
    }
    v51 = *((_QWORD *)a3 + 1);
    if ((v51 & 1) != 0)
    {
      v156 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
      if ((v51 & 2) != 0
        || (v157 = *(unsigned int *)((v51 & 0xFFFFFFFF8) + 8), (_DWORD)v157 == 0x3FFFFFFF)
        || (_DWORD)v157 == -1)
      {
        v158 = 2;
      }
      else if (v157 >> 28)
      {
        v176 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v176 = v156;
        *(_DWORD *)(v176 + 8) = v157;
        v158 = 1;
        v156 = v176;
      }
      else
      {
        v158 = v156;
        v156 = v157 << 36;
      }
      v51 = v156 | v158;
    }
    v52 = *((unsigned __int8 *)a3 + 17);
    v53 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) != 0 && (v53 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v53 & 0xFFFFFFFF8, v47, v40, v41, v42, v43, v44, v45);
    v54 = v52 << 8;
    *(_QWORD *)a3 = v50;
    v55 = *((_QWORD *)a3 + 1);
    if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v55 & 0xFFFFFFFF8, v47, v40, v41, v42, v43, v44, v45);
    *((_QWORD *)a3 + 1) = v51;
    *((_WORD *)a3 + 8) = v54;
  }
  if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, v47, v40, v41, v42, v43, v44, v45);
  if ((v198 & 1) != 0 && (v198 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v198 & 0xFFFFFFFF8, v47, v40, v41, v42, v43, v44, v45);
}

void JSC::DFG::ConstantFoldingPhase::addBaseCheck(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[24];
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;

  if ((JSC::DFG::StructureAbstractValue::isSubsetOf(a4, a5) & 1) != 0)
  {
    if ((a4[1] & 0xFFFFD7FF00000008) != 0)
    {
      JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v56, (const JSC::DFG::NodeOrigin *)a3);
      JSC::DFG::InsertionSet::insertCheck(a1 + 208, a2, (uint64_t)v56, *(_QWORD *)(a3 + 24), v35, v36, v37, v38);
      JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v56, v39, v40, v41, v42, v43, v44, v45);
    }
  }
  else
  {
    v16 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) != 0)
    {
      v46 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      if ((v16 & 2) != 0
        || ((v47 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v47 != 0x3FFFFFFF)
          ? (v48 = (_DWORD)v47 == -1)
          : (v48 = 1),
            v48))
      {
        v49 = 2;
      }
      else if (v47 >> 28)
      {
        v54 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v54 = v46;
        *(_DWORD *)(v54 + 8) = v47;
        v49 = 1;
        v46 = v54;
      }
      else
      {
        v49 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        v46 = v47 << 36;
      }
      v16 = v46 | v49;
    }
    v17 = a1 + 208;
    v58 = v16;
    v18 = *(_QWORD *)(a3 + 8);
    if ((v18 & 1) != 0)
    {
      v50 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
      if ((v18 & 2) != 0
        || ((v51 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v51 != 0x3FFFFFFF)
          ? (v52 = (_DWORD)v51 == -1)
          : (v52 = 1),
            v52))
      {
        v53 = 2;
      }
      else if (v51 >> 28)
      {
        v55 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v55 = v50;
        *(_DWORD *)(v55 + 8) = v51;
        v53 = 1;
        v50 = v55;
      }
      else
      {
        v53 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
        v50 = v51 << 36;
      }
      v18 = v50 | v53;
    }
    v59 = v18;
    v60 = *(_WORD *)(a3 + 16);
    v19 = *(_QWORD *)(a1 + 32);
    v57 = 0;
    v20 = (_DWORD *)(*a5 & 0xFFFFFFFFFFFFFFFCLL);
    if ((*a5 & 1) != 0)
    {
      if (*v20)
      {
        v29 = 0;
        v30 = 0;
        do
        {
          v31 = &v20[2 * v30];
          v32 = *((_QWORD *)v31 + 1);
          if ((v29 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v57, *((_QWORD *)v31 + 1));
            v29 = v57;
          }
          else if (v32 != (v29 & 0xFFFFFFFFFFFFFFFCLL))
          {
            if ((v29 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              v33 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v33 = 0x400000002;
              v34 = v57;
              *(_QWORD *)(v33 + 8) = v57 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v33 + 16) = v32;
              v29 = v34 & 2 | (unint64_t)v33 | 1;
            }
            else
            {
              v29 = v29 & 2 | v32;
            }
            v57 = v29;
          }
          ++v30;
        }
        while (v30 < *v20);
      }
    }
    else if (v20)
    {
      v57 = *a5 & 0xFFFFFFFFFFFFFFFCLL;
    }
    v21 = JSC::DFG::Graph::addStructureSet(v19, &v57, v10, v11, v12, v13, v14, v15);
    JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(v17, a2, 0, 0x84u, (uint64_t)&v58, (uint64_t)v21, *(_QWORD *)(a3 + 24));
    if ((v57 & 1) != 0)
      WTF::fastFree(v57 & 0xFFFFFFFFFFFFFFFCLL, v22, v23, v24, v25, v26, v27, v28);
    if ((v59 & 1) != 0 && (v59 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v59 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
    if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v58 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
  }
}

void JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  JSC::GetByVariant *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;

  v2 = *a1;
  v3 = *a1 + 208;
  v4 = *(unsigned int *)a1[1];
  v5 = *(_QWORD *)a1[2];
  v6 = *(_QWORD *)v5;
  if ((*(_QWORD *)v5 & 1) != 0)
  {
    v16 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 2) != 0
      || ((v17 = *(unsigned int *)((v6 & 0xFFFFFFFF8) + 8), (_DWORD)v17 != 0x3FFFFFFF)
        ? (v18 = (_DWORD)v17 == -1)
        : (v18 = 1),
          v18))
    {
      v19 = 2;
    }
    else if (v17 >> 28)
    {
      v24 = v16;
      v28 = v5;
      v30 = v2;
      v25 = v17;
      v16 = WTF::fastMalloc((WTF *)0x10);
      v5 = v28;
      v2 = v30;
      *(_QWORD *)v16 = v24;
      *(_DWORD *)(v16 + 8) = v25;
      v19 = 1;
    }
    else
    {
      v19 = v16;
      v16 = v17 << 36;
    }
    v6 = v16 | v19;
  }
  v32 = v6;
  v7 = *(_QWORD *)(v5 + 8);
  if ((v7 & 1) != 0)
  {
    v20 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v21 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v21 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
    }
    else if (v21 >> 28)
    {
      v26 = v20;
      v29 = v5;
      v31 = v2;
      v27 = v21;
      v20 = WTF::fastMalloc((WTF *)0x10);
      v5 = v29;
      v2 = v31;
      *(_QWORD *)v20 = v26;
      *(_DWORD *)(v20 + 8) = v27;
      v23 = 1;
    }
    else
    {
      v23 = v20;
      v20 = v21 << 36;
    }
    v7 = v20 | v23;
  }
  v33 = v7;
  v34 = *(_WORD *)(v5 + 16);
  v8 = JSC::RecordedStatuses::addGetByStatus(*(JSC::RecordedStatuses **)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 24) + 344), *(const JSC::CodeOrigin **)a1[2], (const JSC::GetByStatus *)a1[3]);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(v3, v4, 0, 0x1A5u, (uint64_t)&v32, (uint64_t)v8, *(_QWORD *)a1[4] & 0xFF00FFFFFFFFFFFFLL);
  if ((v33 & 1) != 0 && (v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if ((v32 & 1) != 0 && (v32 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v32 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::DFG::Node::convertToMultiGetByOffset(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  BOOL v6;

  v2 = *(unsigned __int16 *)(result + 18);
  if ((v2 - 110) >= 2
    && ((v3 = v2 - 114, v4 = v3 > 0x1D, v5 = (1 << v3) & 0x20000007, !v4) ? (v6 = v5 == 0) : (v6 = 1), v6)
    || (*(_QWORD *)(result + 72) = a2,
        *(_QWORD *)(result + 24) = *(_QWORD *)(result + 24) & 0xFF03FFFFFFFFFFFFLL | 0x20000000000000,
        *(_WORD *)(result + 18) = 154,
        (*(_BYTE *)(result + 56) & 8) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x1983B0040);
  }
  return result;
}

void JSC::DFG::ConstantFoldingPhase::tryFoldAsPutByOffset(uint64_t a1, JSC::DFG::Node *this, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned __int8 a7, _BYTE *a8, _BYTE *a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  char v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  const JSC::ObjectPropertyCondition *v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  JSC::DFG::Graph *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  char v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  unint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  JSC::PutByVariant *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF *v124;
  WTF *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int *v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  uint64_t v142;
  unsigned int *v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  JSC::PutByVariant *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  unint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t inserted;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  BOOL v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  BOOL v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  _BYTE *v228;
  uint64_t v229;
  uint64_t *v230;
  unsigned int v231;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __int16 v238;
  __int128 v239;
  _BYTE v240[24];
  _BYTE v241[24];
  WTF *v242;
  uint64_t v243;
  _BYTE v244[48];
  uint64_t v245;
  int v246;
  WTF *v247;
  int v248;
  unsigned int v249;
  uint64_t v250;
  unint64_t v251;
  __int128 v252;
  uint64_t v253;
  unint64_t v254;
  __int128 v255;
  uint64_t v256;

  if (!byte_1ECF4C42A)
    return;
  v15 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
  {
    v146 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v147 = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8), v147 != 0x3FFFFFFF) ? (v148 = v147 == -1) : (v148 = 1), v148))
    {
      v149 = 2;
    }
    else if (v147 >> 28)
    {
      v218 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v218 = v146;
      *(_DWORD *)(v218 + 8) = v147;
      v149 = 1;
      v146 = v218;
    }
    else
    {
      v149 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v146 = 0;
    }
    v15 = v146 | v149;
  }
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) != 0)
  {
    v150 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v151 = *(_DWORD *)((v16 & 0xFFFFFFFF8) + 8), v151 != 0x3FFFFFFF) ? (v152 = v151 == -1) : (v152 = 1), v152))
    {
      v153 = 2;
    }
    else if (v151 >> 28)
    {
      v219 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v219 = v150;
      *(_DWORD *)(v219 + 8) = v151;
      v153 = 1;
      v150 = v219;
    }
    else
    {
      v153 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      v150 = 0;
    }
    v234 = v150 | v153;
  }
  else
  {
    v234 = *((_QWORD *)this + 1);
  }
  v17 = JSC::DFG::Node::cacheableIdentifier(this);
  v235 = v15;
  v231 = a3;
  v228 = a8;
  if (v17)
  {
    if ((v17 & 1) != 0)
      v25 = v17 & 0xFFFFFFFFFFFFFFFELL;
    else
      v25 = *(_QWORD *)(v17 + 8);
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)(a1 + 80);
  v27 = a4 & 0xFF00FFFFFFFFFFFELL;
  v28 = *(unsigned int *)((a4 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v29 = (uint64_t *)(v26 + 24);
  v30 = (uint64_t *)(v26 + 8);
  if ((a4 & 1) != 0)
    v30 = v29;
  v31 = *v30;
  v32 = *v30 + 32 * v28;
  v33 = *(_DWORD *)(a1 + 160);
  v34 = *(_DWORD *)(v32 + 20);
  if (v33 != v34)
  {
    if ((*(_QWORD *)(v32 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v34 ^ v33) >= 2)
      {
        v127 = *(_QWORD *)v32;
        if (*(_QWORD *)v32 != 4)
        {
          *(_QWORD *)v32 = v127 | 2;
          v129 = (unsigned int *)(v127 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v127 & 1) != 0)
          {
            v154 = 2 * *v129;
            while (v154 * 4)
            {
              v155 = *(_QWORD *)&v129[v154];
              if ((*(_BYTE *)(v155 + 19) & 0xC) == 0)
              {
                v156 = *(_QWORD *)(v155 + 96);
                v157 = (v156 & 1) != 0 ? (v156 >> 1) & 3 : *(unsigned __int8 *)(v156 + 4);
                v154 -= 2;
                if (v157 != 2)
                  continue;
              }
              v226 = (void *)v25;
              WTF::fastFree((unint64_t)v129, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
              v27 = a4 & 0xFF00FFFFFFFFFFFELL;
              v25 = (unint64_t)v226;
              goto LABEL_135;
            }
          }
          else if (v129)
          {
            if ((*((_BYTE *)v129 + 19) & 0xC) != 0
              || ((v130 = *((_QWORD *)v129 + 12), (v130 & 1) != 0)
                ? (v131 = (v130 >> 1) & 3)
                : (v131 = *(unsigned __int8 *)(v130 + 4)),
                  v131 == 2))
            {
LABEL_135:
              *(_QWORD *)v32 = 4;
            }
          }
        }
        *(_DWORD *)(v31 + 32 * v28 + 16) = -21020677;
      }
      if ((v33 & 1) != 0)
        *(_QWORD *)v32 &= ~2uLL;
    }
    *(_DWORD *)(v32 + 20) = v33;
  }
  v254 = 0;
  v35 = *(_QWORD *)v32;
  if ((*(_QWORD *)v32 & 1) == 0 || v35 == 4)
  {
    v36 = v35 & 0xFFFFFFFFFFFFFFFDLL;
    v254 = v36;
  }
  else
  {
    v225 = (void *)v25;
    v137 = v27;
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v254, (_QWORD *)v32);
    v27 = v137;
    v25 = (unint64_t)v225;
    v36 = v254;
  }
  v37 = v36 & 0xFFFFFFFFFFFFFFFDLL;
  v38 = v36 | 2;
  if ((*(_BYTE *)v32 & 2) == 0)
    v38 = v37;
  v254 = v38;
  v39 = v31 + 32 * v28;
  v40 = *(_OWORD *)(v39 + 8);
  v256 = *(_QWORD *)(v39 + 24);
  v255 = v40;
  v41 = *(_QWORD *)(a1 + 80);
  v42 = *(unsigned int *)((a5 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v43 = (uint64_t *)(v41 + 24);
  v44 = (uint64_t *)(v41 + 8);
  if ((a5 & 1) != 0)
    v44 = v43;
  v45 = *v44;
  v46 = *v44 + 32 * v42;
  v47 = *(_DWORD *)(a1 + 160);
  v48 = *(_DWORD *)(v46 + 20);
  if (v47 != v48)
  {
    if ((*(_QWORD *)(v46 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v48 ^ v47) >= 2)
      {
        v128 = *(_QWORD *)v46;
        if (*(_QWORD *)v46 != 4)
        {
          *(_QWORD *)v46 = v128 | 2;
          v132 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v128 & 1) != 0)
          {
            v158 = 2 * *v132;
            while (v158 * 4)
            {
              v159 = *(_QWORD *)&v132[v158];
              if ((*(_BYTE *)(v159 + 19) & 0xC) == 0)
              {
                v160 = *(_QWORD *)(v159 + 96);
                v161 = (v160 & 1) != 0 ? (v160 >> 1) & 3 : *(unsigned __int8 *)(v160 + 4);
                v158 -= 2;
                if (v161 != 2)
                  continue;
              }
              v227 = (void *)v25;
              v162 = v27;
              WTF::fastFree((unint64_t)v132, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
              v27 = v162;
              v25 = (unint64_t)v227;
              goto LABEL_142;
            }
          }
          else if (v132)
          {
            if ((*((_BYTE *)v132 + 19) & 0xC) != 0
              || ((v133 = *((_QWORD *)v132 + 12), (v133 & 1) != 0)
                ? (v134 = (v133 >> 1) & 3)
                : (v134 = *(unsigned __int8 *)(v133 + 4)),
                  v134 == 2))
            {
LABEL_142:
              *(_QWORD *)v46 = 4;
            }
          }
        }
        *(_DWORD *)(v45 + 32 * v42 + 16) = -21020677;
      }
      if ((v47 & 1) != 0)
        *(_QWORD *)v46 &= ~2uLL;
    }
    *(_DWORD *)(v46 + 20) = v47;
  }
  v251 = 0;
  v49 = *(_QWORD *)v46;
  if ((*(_QWORD *)v46 & 1) == 0 || v49 == 4)
  {
    v50 = v49 & 0xFFFFFFFFFFFFFFFDLL;
    v251 = v50;
  }
  else
  {
    v138 = v25;
    v139 = v27;
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v251, (_QWORD *)v46);
    v27 = v139;
    v25 = v138;
    v50 = v251;
  }
  v51 = v235;
  v52 = v50 & 0xFFFFFFFFFFFFFFFDLL;
  v53 = v50 | 2;
  if ((*(_BYTE *)v46 & 2) == 0)
    v53 = v52;
  v251 = v53;
  v54 = v45 + 32 * v42;
  v55 = *(_OWORD *)(v54 + 8);
  v253 = *(_QWORD *)(v54 + 24);
  v252 = v55;
  if (v254 == 4 || (v254 & 2) != 0)
    goto LABEL_24;
  v56 = *(_QWORD *)(a1 + 32);
  if ((v235 & 1) != 0)
  {
    v171 = v27;
    v172 = v25;
    v173 = *(_QWORD *)(v235 & 0xFFFFFFFF8);
    if ((v235 & 2) != 0 || (v174 = *(_DWORD *)((v235 & 0xFFFFFFFF8) + 8), v174 == 0x3FFFFFFF) || v174 == -1)
    {
      v175 = 2;
    }
    else if (v174 >> 28)
    {
      v220 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v220 = v173;
      *(_DWORD *)(v220 + 8) = v174;
      v175 = 1;
      v173 = v220;
    }
    else
    {
      v175 = *(_QWORD *)(v235 & 0xFFFFFFFF8);
      v173 = 0;
    }
    v58 = v173 | v175;
    v57 = *(_QWORD *)(v56 + 32);
    if ((v58 & 1) != 0)
    {
      v176 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      if ((v58 & 2) != 0 || (v177 = *(_DWORD *)((v58 & 0xFFFFFFFF8) + 8), v177 == 0x3FFFFFFF) || v177 == -1)
      {
        v178 = 2;
      }
      else if (v177 >> 28)
      {
        v221 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v221 = v176;
        *(_DWORD *)(v221 + 8) = v177;
        v178 = 1;
        v176 = v221;
      }
      else
      {
        v178 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
        v176 = 0;
      }
      v179 = v176 | v178;
      v59 = (uint64_t *)(v179 & 0xFFFFFFFF8);
      if ((v179 & 1) != 0)
      {
        v60 = 0;
        v61 = 0;
        v62 = *v59;
      }
      else
      {
        v61 = 0;
        v60 = 1;
        v62 = (uint64_t)v59;
      }
      v51 = v235;
      v25 = v172;
      v27 = v171;
      goto LABEL_34;
    }
    v51 = v235;
    v25 = v172;
    v27 = v171;
  }
  else
  {
    v57 = *(_QWORD *)(v56 + 32);
    v58 = v235;
  }
  v59 = (uint64_t *)(v58 & 0xFFFFFFFF8);
  v60 = 1;
  v61 = 1;
  v62 = v58 & 0xFFFFFFFF8;
LABEL_34:
  if (v62)
    v57 = *(_QWORD *)(v62 + 8);
  v63 = v27;
  v224 = (void *)v25;
  v64 = *(_QWORD **)(v57 + 8);
  if ((v60 & 1) == 0 && v59)
    WTF::fastFree((unint64_t)v59, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
  JSC::DFG::StructureAbstractValue::toStructureSet((uint64_t)&v254, (uint64_t *)&v242);
  v65 = JSC::DFG::Node::cacheableIdentifier(this);
  JSC::PutByStatus::computeFor(v64, (unint64_t *)&v242, v65, a6, a7, v66, v67, v68, (uint64_t)&v246);
  if ((v242 & 1) != 0)
    WTF::fastFree((unint64_t)v242 & 0xFFFFFFFFFFFFFFFCLL, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
  if ((v61 & 1) == 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
  if (v246 != 1)
    goto LABEL_110;
  v69 = v63;
  v70 = v249;
  if (v249 >= 2 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16) & 0xFFFFFFFE) != 4)
    goto LABEL_110;
  *v228 = 1;
  v245 = 0;
  v242 = (WTF *)v244;
  v243 = 3;
  if (!(_DWORD)v70)
  {
    v92 = *(_QWORD *)(a1 + 192);
    v93 = *(unsigned __int8 *)(v92 + 81);
    if (v93 <= 1)
      LOBYTE(v93) = 1;
    *(_BYTE *)(v92 + 81) = v93;
    goto LABEL_92;
  }
  v71 = v247;
  v72 = (WTF *)((char *)v247 + 64 * v70);
  do
  {
    v73 = *((_QWORD *)v71 + 3);
    if (*(_DWORD *)v71 != 2)
    {
      v88 = *(JSC::DFG::Graph **)(a1 + 32);
      if (v73)
      {
        JSC::DFG::Graph::logAssertionFailure(v88, this, (const WTF::CString *)"./dfg/DFGConstantFoldingPhase.cpp", (const char *)0x676, "void JSC::DFG::ConstantFoldingPhase::tryFoldAsPutByOffset(Node *, unsigned int, Edge, Edge, BOOL, PrivateFieldPutKind, BOOL &, BOOL &)", "variant.conditionSet().isEmpty()");
        __break(0xC471u);
        JUMPOUT(0x1983B0D98);
      }
      v89 = JSC::DFG::Graph::addStructureSet((uint64_t)v88, (unint64_t *)v71 + 1, v19, v20, v21, v22, v23, v24);
      v90 = *v89;
      if ((*v89 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine(&v245, v89);
      }
      else
      {
        v83 = v90 & 0xFFFFFFFFFFFFFFFCLL;
        v69 = v63;
        if ((v90 & 0xFFFFFFFFFFFFFFFCLL) == 0)
          goto LABEL_62;
        v86 = v245;
        if ((v245 & 1) == 0)
          goto LABEL_61;
LABEL_156:
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(&v245, v83);
      }
      v69 = v63;
      goto LABEL_62;
    }
    if (v73)
      v74 = (const JSC::ObjectPropertyCondition *)(v73 + 8);
    else
      v74 = 0;
    if (v73)
      v75 = v73 + 8 + 24 * *(unsigned int *)(v73 + 4);
    else
      v75 = 0;
    while (v74 != (const JSC::ObjectPropertyCondition *)v75)
    {
      JSC::DFG::Graph::watchCondition(*(JSC::DFG::Graph **)(a1 + 32), v74, (uint64_t)v19, v20, v21, v22, v23, v24);
      if ((v76 & 1) == 0)
      {
        v229 = 16 * (**(_DWORD **)v74 & 0xFFFFFFFE);
        JSC::ObjectPropertyCondition::structureEnsuresValidity((uint64_t)v74, (void *)1, v229, v20, v21, v22, v23, v24);
        if (!v180)
          goto LABEL_103;
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v241, this);
        v181 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v239 = v229;
        v230 = JSC::DFG::Graph::addStructureSet(v181, (unint64_t *)&v239, v182, v183, v184, v185, v186, v187);
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v240, this);
        inserted = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)(a1 + 208), v231, (uint64_t)v240, *(_QWORD *)v74, 9, v188, v189, v190);
        JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(a1 + 208, v231, 0, 0x84u, (uint64_t)v241, (uint64_t)v230, inserted);
        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v240, v192, v193, v194, v195, v196, v197, v198);
        if ((v239 & 1) != 0)
          WTF::fastFree(v239 & 0xFFFFFFFFFFFFFFFCLL, v199, v200, v201, v202, v203, v204, v205);
        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v241, v199, v200, v201, v202, v203, v204, v205);
      }
      v74 = (const JSC::ObjectPropertyCondition *)((char *)v74 + 24);
    }
    v77 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(a1 + 32), *((_QWORD *)v71 + 2), (int *)&v239, v20, v21, v22, v23, v24);
    if (*(_DWORD *)v71 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1983B0DE8);
    }
    v83 = v77;
    v84 = *((_QWORD *)v71 + 1);
    if ((v84 & 1) != 0)
    {
      v141 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFFCLL);
      v142 = *v141;
      if (v142 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1983B0E08);
      }
      v87 = 2 * v142;
      while (v87 * 4)
      {
        v85 = *(_QWORD *)&v141[v87];
        v87 -= 2;
        if (v85 != *((_QWORD *)v71 + 2))
          goto LABEL_57;
      }
LABEL_278:
      __break(0xC471u);
      JUMPOUT(0x1983B0E7CLL);
    }
    if (v84 < 4)
      goto LABEL_278;
    v85 = v84 & 0xFFFFFFFFFFFFFFFCLL;
    if (*((_QWORD *)v71 + 2) == (v84 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_278;
LABEL_57:
    *(_QWORD *)&v239 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(a1 + 32), v85, (int *)&v239, v78, v79, v80, v81, v82);
    *((_QWORD *)&v239 + 1) = v83;
    if (HIDWORD(v243) == (_DWORD)v243)
    {
      WTF::Vector<JSC::DFG::Transition,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Transition>((uint64_t)&v242, (unint64_t)&v239, (uint64_t)v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *((_OWORD *)v242 + HIDWORD(v243)) = v239;
      ++HIDWORD(v243);
    }
    v86 = v245;
    if ((v245 & 1) != 0)
      goto LABEL_156;
    v69 = v63;
LABEL_61:
    if ((v86 & 0xFFFFFFFFFFFFFFFCLL) != v83)
    {
      if ((v86 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        v135 = WTF::fastMalloc((WTF *)0x28);
        v69 = v63;
        *(_QWORD *)v135 = 0x400000002;
        v136 = v245;
        *(_QWORD *)(v135 + 8) = v245 & 0xFFFFFFFFFFFFFFFCLL;
        *(_QWORD *)(v135 + 16) = v83;
        v91 = v136 & 2 | (unint64_t)v135 | 1;
      }
      else
      {
        v91 = v86 & 2 | v83;
      }
      v245 = v91;
    }
LABEL_62:
    v71 = (WTF *)((char *)v71 + 64);
  }
  while (v71 != v72);
  v94 = HIDWORD(v243);
  v95 = *(_QWORD *)(a1 + 192);
  v96 = *(unsigned __int8 *)(v95 + 81);
  if (v96 <= 1)
    v97 = 1;
  else
    v97 = *(_BYTE *)(v95 + 81);
  *(_BYTE *)(v95 + 81) = v97;
  if (v94)
  {
    v18 = v231;
    if (*(_DWORD *)(*(_QWORD *)(v95 + 72) + 220) > dword_1ECF4C460)
    {
      *(_DWORD *)(v95 + 88) = (*(_DWORD *)(v95 + 88) & 0xFFFFFFFE) + 2;
      if (v96 <= 3)
        LOBYTE(v96) = 3;
      *(_BYTE *)(v95 + 81) = v96;
      *(_BYTE *)(v95 + 82) = 1;
    }
    else
    {
      *(_QWORD *)&v239 = &v242;
      JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::forAllValues<JSC::DFG::AbstractValue::TransitionsObserver>(a1 + 168, (void *)v231, (_DWORD **)&v239, v20, v21, v22, v23, v24);
      v98 = *(_QWORD *)(a1 + 192);
      v99 = *(unsigned __int8 *)(v98 + 81);
      if (v99 <= 2)
        LOBYTE(v99) = 2;
      *(_BYTE *)(v98 + 81) = v99;
    }
    v69 = v63;
  }
LABEL_92:
  v100 = *(_QWORD *)(a1 + 80);
  v101 = *(unsigned int *)(v69 + 20);
  v102 = (uint64_t *)(v100 + 24);
  v103 = (uint64_t *)(v100 + 8);
  if ((a4 & 1) != 0)
    v103 = v102;
  v104 = *v103;
  v105 = *v103 + 32 * v101;
  v106 = *(_DWORD *)(a1 + 160);
  v107 = *(_DWORD *)(v105 + 20);
  if (v106 != v107)
  {
    if ((*(_QWORD *)(v105 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v107 ^ v106) >= 2)
      {
        v140 = *(_QWORD *)v105;
        if (*(_QWORD *)v105 != 4)
        {
          *(_QWORD *)v105 = v140 | 2;
          v143 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v140 & 1) != 0)
          {
            v214 = 2 * *v143;
            while (v214 * 4)
            {
              v215 = *(_QWORD *)&v143[v214];
              if ((*(_BYTE *)(v215 + 19) & 0xC) == 0)
              {
                v216 = *(_QWORD *)(v215 + 96);
                v217 = (v216 & 1) != 0 ? (v216 >> 1) & 3 : *(unsigned __int8 *)(v216 + 4);
                v214 -= 2;
                if (v217 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v143, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
              goto LABEL_170;
            }
          }
          else if (v143)
          {
            if ((*((_BYTE *)v143 + 19) & 0xC) != 0
              || ((v144 = *((_QWORD *)v143 + 12), (v144 & 1) != 0)
                ? (v145 = (v144 >> 1) & 3)
                : (v145 = *(unsigned __int8 *)(v144 + 4)),
                  v145 == 2))
            {
LABEL_170:
              *(_QWORD *)v105 = 4;
            }
          }
        }
        *(_DWORD *)(v104 + 32 * v101 + 16) = -21020677;
      }
      if ((v106 & 1) != 0)
        *(_QWORD *)v105 &= ~2uLL;
    }
    *(_DWORD *)(v105 + 20) = v106;
  }
  if (JSC::DFG::AbstractValue::changeStructure(v105, *(_QWORD *)(a1 + 32), &v245, v20, v21, v22, v23, v24) == 1)*(_BYTE *)(a1 + 152) = 0;
  v108 = a4 & 0xFF00FFFFFFFFFFFFLL;
  *a9 = 1;
  v109 = v231;
  v110 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
  {
    v206 = *(_QWORD *)(v110 & 0xFFFFFFFF8);
    if ((v110 & 2) != 0
      || ((v207 = *(unsigned int *)((v110 & 0xFFFFFFFF8) + 8), (_DWORD)v207 != 0x3FFFFFFF)
        ? (v208 = (_DWORD)v207 == -1)
        : (v208 = 1),
          v208))
    {
      v209 = 2;
    }
    else if (v207 >> 28)
    {
      v222 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v222 = v206;
      *(_DWORD *)(v222 + 8) = v207;
      v209 = 1;
      v206 = v222;
    }
    else
    {
      v209 = *(_QWORD *)(v110 & 0xFFFFFFFF8);
      v206 = v207 << 36;
    }
    v110 = v206 | v209;
    v109 = v231;
  }
  v236 = v110;
  v111 = *((_QWORD *)this + 1);
  if ((v111 & 1) != 0)
  {
    v210 = *(_QWORD *)(v111 & 0xFFFFFFFF8);
    if ((v111 & 2) != 0
      || ((v211 = *(unsigned int *)((v111 & 0xFFFFFFFF8) + 8), (_DWORD)v211 != 0x3FFFFFFF)
        ? (v212 = (_DWORD)v211 == -1)
        : (v212 = 1),
          v212))
    {
      v213 = 2;
    }
    else if (v211 >> 28)
    {
      v223 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v223 = v210;
      *(_DWORD *)(v223 + 8) = v211;
      v213 = 1;
      v210 = v223;
    }
    else
    {
      v213 = *(_QWORD *)(v111 & 0xFFFFFFFF8);
      v210 = v211 << 36;
    }
    v111 = v210 | v213;
    v109 = v231;
  }
  v237 = v111;
  v238 = *((_WORD *)this + 8);
  v112 = JSC::RecordedStatuses::addPutByStatus(*(JSC::RecordedStatuses **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 344), this, (const JSC::PutByStatus *)&v246);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(a1 + 208, v231, 0, 0x1A7u, (uint64_t)&v236, (uint64_t)v112, v108);
  if ((v237 & 1) != 0 && (v237 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v237 & 0xFFFFFFFF8, v113, v114, v115, v116, v117, v118, v119);
  v120 = (uint64_t)v224;
  if ((v236 & 1) != 0 && (v236 & 0xFFFFFFFF8) != 0)
  {
    WTF::fastFree(v236 & 0xFFFFFFFF8, v224, v114, v115, v116, v117, v118, v119);
    v120 = (uint64_t)v224;
  }
  v123 = JSC::DFG::DesiredIdentifiers::ensure((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 240), v120, v114, v115, v116, v117, v118, v119);
  if (v249 == 1)
  {
    JSC::DFG::ConstantFoldingPhase::emitPutByOffset((JSC::DFG::ConstantFoldingPhase *)a1, v109, this, (const JSC::DFG::AbstractValue *)&v254, v247, v123, v121, v122);
  }
  else
  {
    v163 = *(_QWORD *)(a1 + 32);
    v164 = WTF::fastMalloc((WTF *)0xA0);
    *(_OWORD *)v164 = 0u;
    *(_OWORD *)(v164 + 16) = 0u;
    *(_OWORD *)(v164 + 32) = 0u;
    *(_OWORD *)(v164 + 48) = 0u;
    *(_OWORD *)(v164 + 64) = 0u;
    *(_OWORD *)(v164 + 80) = 0u;
    *(_OWORD *)(v164 + 96) = 0u;
    *(_OWORD *)(v164 + 112) = 0u;
    *(_OWORD *)(v164 + 128) = 0u;
    *(_QWORD *)(v164 + 144) = 0;
    *(_QWORD *)(v164 + 152) = 0;
    *(_QWORD *)(v164 + 8) = v164 + 24;
    *(_DWORD *)(v164 + 16) = 2;
    *(_QWORD *)(v164 + 152) = *(_QWORD *)(v163 + 544);
    *(_QWORD *)(v163 + 544) = v164;
    WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=<1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(v164 + 8, (uint64_t)&v247, v165, v166, v167, v168, v169, v170);
    *(_DWORD *)v164 = v123;
    *((_QWORD *)this + 9) = v164;
    *((_WORD *)this + 9) = 156;
  }
LABEL_103:
  v124 = v242;
  if (v244 != (_BYTE *)v242 && v242 != 0)
  {
    v242 = 0;
    LODWORD(v243) = 0;
    WTF::fastFree((unint64_t)v124, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
  }
  v51 = v235;
  if ((v245 & 1) != 0)
    WTF::fastFree(v245 & 0xFFFFFFFFFFFFFFFCLL, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
LABEL_110:
  if (v249)
    WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(v247, (_QWORD *)v247 + 8 * (unint64_t)v249, (uint64_t)v19, v20, v21, v22, v23, v24);
  v126 = v247;
  if (&v250 != (uint64_t *)v247 && v247)
  {
    v247 = 0;
    v248 = 0;
    WTF::fastFree((unint64_t)v126, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
  }
  v53 = v251;
LABEL_24:
  if ((v53 & 1) != 0)
    WTF::fastFree(v53 & 0xFFFFFFFFFFFFFFFCLL, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
  if ((v254 & 1) != 0)
    WTF::fastFree(v254 & 0xFFFFFFFFFFFFFFFCLL, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
  if ((v234 & 1) != 0 && (v234 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v234 & 0xFFFFFFFF8, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
  if ((v51 & 1) != 0 && (v51 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v51 & 0xFFFFFFFF8, (void *)v18, (uint64_t)v19, v20, v21, v22, v23, v24);
}

uint64_t JSC::DFG::InsertionSet::insertCheck(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  if ((a4 & 0x1000000000000) != 0)
    return 0;
  v10 = a4;
  v11 = 0;
  v12 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v12 && (v12 > 0x34 || ((1 << v12) & 0x12400001800284) == 0))
  {
    v45 = v8;
    v46 = v9;
    v14 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) != 0)
    {
      v38 = a1;
      v40 = a3;
      v34 = v10;
      v36 = a2;
      v22 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      if ((v14 & 2) != 0
        || ((v23 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
          ? (v24 = (_DWORD)v23 == -1)
          : (v24 = 1),
            v24))
      {
        v25 = 2;
      }
      else if (v23 >> 28)
      {
        v32 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v32 = v22;
        *(_DWORD *)(v32 + 8) = v23;
        v25 = 1;
        v22 = v32;
      }
      else
      {
        v25 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        v22 = v23 << 36;
      }
      v14 = v22 | v25;
      v10 = v34;
      a2 = v36;
      a1 = v38;
      a3 = v40;
    }
    v42 = v14;
    v15 = *(_QWORD *)(a3 + 8);
    if ((v15 & 1) != 0)
    {
      v39 = a1;
      v41 = a3;
      v35 = v10;
      v37 = a2;
      v26 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      if ((v15 & 2) != 0
        || ((v27 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
          ? (v28 = (_DWORD)v27 == -1)
          : (v28 = 1),
            v28))
      {
        v29 = 2;
      }
      else if (v27 >> 28)
      {
        v33 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v33 = v26;
        *(_DWORD *)(v33 + 8) = v27;
        v29 = 1;
        v26 = v33;
      }
      else
      {
        v29 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
        v26 = v27 << 36;
      }
      v15 = v26 | v29;
      v10 = v35;
      a2 = v37;
      a1 = v39;
      a3 = v41;
    }
    v43 = v15;
    v44 = *(_WORD *)(a3 + 16);
    v11 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(a1, a2, 0, 24, (uint64_t)&v42, v10, a7, a8);
    if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
    {
      v30 = v11;
      WTF::fastFree(v43 & 0xFFFFFFFF8, v16, v17, v11, v18, v19, v20, v21);
      v11 = v30;
    }
    if ((v42 & 1) != 0)
    {
      v31 = v11;
      if ((v42 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v42 & 0xFFFFFFFF8, v16, v17, v11, v18, v19, v20, v21);
      return v31;
    }
  }
  return v11;
}

void JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge,JSC::DFG::Edge>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int16 v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v29 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v30 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v63 = a5;
      v67 = a7;
      v55 = a4;
      v59 = a6;
      v51 = a3;
      v45 = WTF::fastMalloc((WTF *)0x10);
      a3 = v51;
      a4 = v55;
      a6 = v59;
      a5 = v63;
      a7 = v67;
      *(_QWORD *)v45 = v29;
      *(_DWORD *)(v45 + 8) = v30;
      v32 = 1;
      v29 = v45;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    v11 = v29 | v32;
  }
  v12 = *(_QWORD *)(a3 + 8);
  if ((v12 & 1) != 0)
  {
    v33 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v34 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
        ? (v35 = (_DWORD)v34 == -1)
        : (v35 = 1),
          v35))
    {
      v36 = 2;
    }
    else if (v34 >> 28)
    {
      v46 = v33;
      v64 = a5;
      v68 = a7;
      v56 = a4;
      v60 = a6;
      v52 = a3;
      v33 = WTF::fastMalloc((WTF *)0x10);
      a3 = v52;
      a4 = v56;
      a6 = v60;
      a5 = v64;
      a7 = v68;
      *(_QWORD *)v33 = v46;
      *(_DWORD *)(v33 + 8) = v34;
      v36 = 1;
    }
    else
    {
      v36 = v33;
      v33 = v34 << 36;
    }
    v12 = v33 | v36;
  }
  v13 = *(_WORD *)(a3 + 16);
  v14 = v11;
  if ((v11 & 1) != 0)
  {
    v37 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v38 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v38 != 0x3FFFFFFF)
        ? (v39 = (_DWORD)v38 == -1)
        : (v39 = 1),
          v39))
    {
      v40 = 2;
    }
    else if (v38 >> 28)
    {
      v47 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v65 = a5;
      v69 = a7;
      v57 = a4;
      v61 = a6;
      v53 = *(_WORD *)(a3 + 16);
      v48 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
      v37 = WTF::fastMalloc((WTF *)0x10);
      v13 = v53;
      a4 = v57;
      a6 = v61;
      a5 = v65;
      a7 = v69;
      *(_QWORD *)v37 = v47;
      *(_DWORD *)(v37 + 8) = v48;
      v40 = 1;
    }
    else
    {
      v40 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      v37 = v38 << 36;
    }
    v14 = v37 | v40;
  }
  *(_QWORD *)&v71 = v14;
  v15 = v12;
  if ((v12 & 1) != 0)
  {
    v41 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v42 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v42 != 0x3FFFFFFF)
        ? (v43 = (_DWORD)v42 == -1)
        : (v43 = 1),
          v43))
    {
      v44 = 2;
    }
    else if (v42 >> 28)
    {
      v49 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v66 = a5;
      v70 = a7;
      v58 = a4;
      v62 = a6;
      v54 = v13;
      v50 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
      v41 = WTF::fastMalloc((WTF *)0x10);
      v13 = v54;
      a4 = v58;
      a6 = v62;
      a5 = v66;
      a7 = v70;
      *(_QWORD *)v41 = v49;
      *(_DWORD *)(v41 + 8) = v50;
      v44 = 1;
    }
    else
    {
      v44 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v41 = v42 << 36;
    }
    v15 = v41 | v44;
  }
  *((_QWORD *)&v71 + 1) = v15;
  v72 = v13;
  v76 = a5;
  v77 = a4;
  v74 = a7;
  v75 = a6;
  v73 = 155;
  v23 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &,JSC::DFG::Edge &>(v10 + 1032, &v73, (uint64_t)&v71, (uint64_t)&v77, &v76, &v75, &v74, a8);
  if ((BYTE8(v71) & 1) != 0 && (*((_QWORD *)&v71 + 1) & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*((_QWORD *)&v71 + 1) & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
  if ((v71 & 1) != 0 && (v71 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v71 & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
  *(_QWORD *)&v71 = a2;
  *((_QWORD *)&v71 + 1) = v23;
  v24 = (_QWORD *)(a1 + 8);
  v25 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v25 && *(_QWORD *)(*v24 + 16 * v25 - 16) > a2)
  {
    JSC::DFG::InsertionSet::insertSlow(a1, (unint64_t *)&v71, v17, v18, v19, v20, v21, v22);
    if ((v12 & 1) == 0)
      goto LABEL_12;
  }
  else
  {
    if ((_DWORD)v25 == *(_DWORD *)(a1 + 16))
    {
      v28 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, (void *)(v25 + 1), (unint64_t)&v71, v18, v19, v20, v21, v22);
      v25 = *(unsigned int *)(a1 + 20);
      v26 = *(_QWORD *)(a1 + 8);
      v27 = *v28;
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 8);
      v27 = v71;
    }
    *(_OWORD *)(v26 + 16 * v25) = v27;
    ++*(_DWORD *)(a1 + 20);
    if ((v12 & 1) == 0)
      goto LABEL_12;
  }
  if ((v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
LABEL_12:
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
}

void JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::NodeType,JSC::ClassInfo const*)#1}::operator()(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;

  v9 = a2;
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 32);
  v13 = **(_QWORD **)a1[1];
  if ((v13 & 1) == 0)
  {
    v14 = *(_QWORD *)(v12 + 32);
LABEL_3:
    v15 = (_QWORD *)(v13 & 0xFFFFFFFF8);
    v16 = 1;
    v17 = 1;
    goto LABEL_4;
  }
  v61 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v62 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v62 != 0x3FFFFFFF) ? (v63 = v62 == -1) : (v63 = 1), v63))
  {
    v64 = 2;
  }
  else if (v62 >> 28)
  {
    v74 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v74 = v61;
    *(_DWORD *)(v74 + 8) = v62;
    v64 = 1;
    v61 = v74;
  }
  else
  {
    v64 = v61;
    v61 = 0;
  }
  v13 = v61 | v64;
  v14 = *(_QWORD *)(v12 + 32);
  if (((v61 | v64) & 1) == 0)
    goto LABEL_3;
  v69 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v70 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v70 != 0x3FFFFFFF) ? (v71 = v70 == -1) : (v71 = 1), v71))
  {
    v72 = 2;
  }
  else if (v70 >> 28)
  {
    v75 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v75 = v69;
    *(_DWORD *)(v75 + 8) = v70;
    v72 = 1;
    v69 = v75;
  }
  else
  {
    v72 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v69 = 0;
  }
  v73 = v69 | v72;
  v15 = (_QWORD *)(v73 & 0xFFFFFFFF8);
  if ((v73 & 1) != 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = (_QWORD *)*v15;
    if (!*v15)
      goto LABEL_6;
    goto LABEL_5;
  }
  v17 = 0;
  v16 = 1;
LABEL_4:
  v18 = v15;
  if (v15)
LABEL_5:
    v14 = v18[1];
LABEL_6:
  v19 = *(_QWORD *)(v14 + 8);
  if ((v16 & 1) == 0 && v15)
    WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
  if ((v17 & 1) == 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v20 = *(_QWORD *)(*(_QWORD *)a1[1] + 24);
  v21 = *(_QWORD *)(v11 + 80);
  v22 = *(unsigned int *)((v20 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v23 = (uint64_t *)(v21 + 24);
  v24 = (uint64_t *)(v21 + 8);
  if ((v20 & 1) != 0)
    v25 = v23;
  else
    v25 = v24;
  v26 = *v25;
  v27 = *v25 + 32 * v22;
  v28 = *(_DWORD *)(v11 + 160);
  v29 = *(_DWORD *)(v27 + 20);
  if (v28 != v29)
  {
    if ((*(_QWORD *)(v27 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v29 ^ v28) >= 2)
      {
        v57 = *(_QWORD *)v27;
        if (*(_QWORD *)v27 != 4)
        {
          *(_QWORD *)v27 = v57 | 2;
          v58 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v57 & 1) != 0)
          {
            v65 = 2 * *v58;
            while (v65 * 4)
            {
              v66 = *(_QWORD *)&v58[v65];
              if ((*(_BYTE *)(v66 + 19) & 0xC) == 0)
              {
                v67 = *(_QWORD *)(v66 + 96);
                v68 = (v67 & 1) != 0 ? (v67 >> 1) & 3 : *(unsigned __int8 *)(v67 + 4);
                v65 -= 2;
                if (v68 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v58, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_63;
            }
          }
          else if (v58)
          {
            if ((*((_BYTE *)v58 + 19) & 0xC) != 0
              || ((v59 = *((_QWORD *)v58 + 12), (v59 & 1) != 0)
                ? (v60 = (v59 >> 1) & 3)
                : (v60 = *(unsigned __int8 *)(v59 + 4)),
                  v60 == 2))
            {
LABEL_63:
              *(_QWORD *)v27 = 4;
            }
          }
        }
        *(_DWORD *)(v26 + 32 * v22 + 16) = -21020677;
      }
      if ((v28 & 1) != 0)
        *(_QWORD *)v27 &= ~2uLL;
    }
    *(_DWORD *)(v27 + 20) = v28;
  }
  v30 = *(_QWORD *)(v27 + 24);
  if (v30)
    v31 = (v30 & 0xFFFE000000000002) == 0;
  else
    v31 = 0;
  if (v31 && *(_BYTE *)(v30 + 5) == 26)
  {
    v32 = *(_QWORD *)(v30 + 24);
    if ((v32 & 1) != 0)
    {
      v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
      if ((v32 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        v34 = *(_QWORD *)(v33 + 32);
        if ((v34 & 1) != 0)
          v35 = (v34 >> 1) & 3;
        else
          v35 = *(unsigned __int8 *)(v34 + 4);
        if (v35 != 2)
        {
          if (JSC::DFG::Graph::isWatchingStructureCacheClearedWatchpoint(*(JSC::DFG::Graph **)(v11 + 32), *(JSC::DFG::Node **)a1[1], a3, a4, a5, a6, a7, a8))
          {
            v42 = *(_DWORD *)(v33 + 40) & 0xFFFFFFFE;
            if ((_DWORD)v42)
            {
              v43 = 16 * v42;
              if (a3 == 16 * *(unsigned int *)(16 * v42 + 0x4C) && *(_QWORD *)(16 * v42 + 0x28) == v19)
              {
                JSC::DFG::Graph::freeze(*(_QWORD *)(v11 + 32), v33, v36, v37, v38, v39, v40, v41);
                JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 24) + 136), (JSC::InlineWatchpointSet *)(v33 + 32), v44, v45, v46, v47, v48, v49);
                v50 = *(_QWORD **)a1[1];
                v56 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(v11 + 32), v43, &v76, v51, v52, v53, v54, v55);
                JSC::DFG::Node::setOpAndDefaultFlags((uint64_t)v50, v9);
                v50[3] = 0;
                v50[4] = 0;
                v50[5] = 0;
                v50[9] = v56;
                v50[10] = 0;
                *(_BYTE *)a1[2] = 1;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t JSC::DFG::InsertionSet::insertCheck(JSC::DFG::InsertionSet *this, JSC::DFG::Graph *a2, unint64_t a3, JSC::DFG::Node *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  _BYTE v43[24];
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;

  if ((*((_BYTE *)a4 + 56) & 0x10) != 0)
  {
    JSC::DFG::Graph::copyVarargChildren<JSC::DFG::InsertionSet::insertCheck(JSC::DFG::Graph&,unsigned long,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge)#1}>((uint64_t)a2, (uint64_t)a4, a3, (uint64_t)a4, a5, a6, a7, a8, &v44);
    if (DWORD2(v44))
    {
      JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v43, a4);
      v41 = v44;
      v42 = v45;
      v20 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>((uint64_t)this, a3, 0, 0x19u, (uint64_t)v43, &v41);
      JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v43, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v11 = *(_QWORD *)a4;
    if ((*(_QWORD *)a4 & 1) != 0)
    {
      v22 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      if ((v11 & 2) != 0
        || ((v23 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
          ? (v24 = (_DWORD)v23 == -1)
          : (v24 = 1),
            v24))
      {
        v25 = 2;
      }
      else if (v23 >> 28)
      {
        v37 = v22;
        v38 = v23;
        v22 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v22 = v37;
        *(_DWORD *)(v22 + 8) = v38;
        v25 = 1;
      }
      else
      {
        v25 = v22;
        v22 = v23 << 36;
      }
      v11 = v22 | v25;
    }
    v48 = v11;
    v12 = *((_QWORD *)a4 + 1);
    if ((v12 & 1) != 0)
    {
      v26 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      if ((v12 & 2) != 0
        || ((v27 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
          ? (v28 = (_DWORD)v27 == -1)
          : (v28 = 1),
            v28))
      {
        v29 = 2;
      }
      else if (v27 >> 28)
      {
        v39 = v26;
        v40 = v27;
        v26 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v26 = v39;
        *(_DWORD *)(v26 + 8) = v40;
        v29 = 1;
      }
      else
      {
        v29 = v26;
        v26 = v27 << 36;
      }
      v12 = v26 | v29;
    }
    v49 = v12;
    v50 = *((_WORD *)a4 + 8);
    v46 = *(_OWORD *)((char *)a4 + 24);
    v47 = *((_QWORD *)a4 + 5);
    v20 = JSC::DFG::InsertionSet::insertCheck((uint64_t)this, a3, (uint64_t)&v48, (unint64_t *)&v46);
    if ((v49 & 1) != 0 && (v49 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v49 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
    if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v48 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  }
  return v20;
}

uint64_t JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, __int128 *a6)
{
  unsigned __int16 v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  __int128 *v46;
  unsigned __int16 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  __int128 v56;

  v6 = a4;
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)a5;
  if ((*(_QWORD *)a5 & 1) != 0)
  {
    v27 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v28 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v28 != 0x3FFFFFFF)
        ? (v29 = (_DWORD)v28 == -1)
        : (v29 = 1),
          v29))
    {
      v30 = 2;
    }
    else if (v28 >> 28)
    {
      v49 = v9;
      v43 = a3;
      v45 = a6;
      v41 = a5;
      v35 = v27;
      v36 = v28;
      v37 = WTF::fastMalloc((WTF *)0x10);
      a5 = v41;
      a3 = v43;
      a6 = v45;
      v6 = a4;
      v27 = v37;
      v9 = v49;
      *(_QWORD *)v27 = v35;
      *(_DWORD *)(v27 + 8) = v36;
      v30 = 1;
    }
    else
    {
      v30 = v27;
      v27 = v28 << 36;
    }
    v10 = v27 | v30;
  }
  v53 = v10;
  v11 = *(_QWORD *)(a5 + 8);
  if ((v11 & 1) != 0)
  {
    v31 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v32 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v50 = v9;
      v48 = v6;
      v44 = a3;
      v46 = a6;
      v42 = a5;
      v38 = v31;
      v39 = v32;
      v40 = WTF::fastMalloc((WTF *)0x10);
      a5 = v42;
      a3 = v44;
      a6 = v46;
      v6 = v48;
      v31 = v40;
      v9 = v50;
      *(_QWORD *)v31 = v38;
      *(_DWORD *)(v31 + 8) = v39;
      v34 = 1;
    }
    else
    {
      v34 = v31;
      v31 = v32 << 36;
    }
    v11 = v31 | v34;
  }
  v54 = v11;
  v55 = *(_WORD *)(a5 + 16);
  v51 = *a6;
  v52 = *((_QWORD *)a6 + 2);
  v12 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>(v9, a3, v6, (uint64_t)&v53, (uint64_t)&v51);
  *(_QWORD *)&v56 = a2;
  *((_QWORD *)&v56 + 1) = v12;
  v20 = (_QWORD *)(a1 + 8);
  v21 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v21 && *(_QWORD *)(*v20 + 16 * v21 - 16) > a2)
  {
    JSC::DFG::InsertionSet::insertSlow(a1, (unint64_t *)&v56, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    if ((_DWORD)v21 == *(_DWORD *)(a1 + 16))
    {
      v26 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, (void *)(v21 + 1), (unint64_t)&v56, v15, v16, v17, v18, v19);
      v21 = *(unsigned int *)(a1 + 20);
      v22 = *(_QWORD *)(a1 + 8);
      v23 = *v26;
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 8);
      v23 = v56;
    }
    *(_OWORD *)(v22 + 16 * v21) = v23;
    ++*(_DWORD *)(a1 + 20);
  }
  v24 = *((_QWORD *)&v56 + 1);
  if ((v54 & 1) != 0 && (v54 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v54 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  if ((v53 & 1) != 0 && (v53 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v53 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  return v24;
}

uint64_t JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::AdjacencyList>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  unsigned __int16 v44;

  v6 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v17 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 2) != 0
      || ((v18 = *(unsigned int *)((v6 & 0xFFFFFFFF8) + 8), (_DWORD)v18 != 0x3FFFFFFF)
        ? (v19 = (_DWORD)v18 == -1)
        : (v19 = 1),
          v19))
    {
      v20 = 2;
    }
    else if (v18 >> 28)
    {
      v35 = a5;
      v37 = a1;
      v31 = a3;
      v33 = a4;
      v25 = v18;
      v26 = WTF::fastMalloc((WTF *)0x10);
      a4 = v33;
      a5 = v35;
      a3 = v31;
      v27 = v26;
      a1 = v37;
      *(_QWORD *)v27 = v17;
      *(_DWORD *)(v27 + 8) = v25;
      v20 = 1;
      v17 = v27;
    }
    else
    {
      v20 = v17;
      v17 = v18 << 36;
    }
    v6 = v17 | v20;
  }
  v41 = v6;
  v7 = *(_QWORD *)(a4 + 8);
  if ((v7 & 1) != 0)
  {
    v21 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v22 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v36 = a5;
      v38 = a1;
      v32 = a3;
      v34 = a4;
      v28 = v22;
      v29 = WTF::fastMalloc((WTF *)0x10);
      a4 = v34;
      a5 = v36;
      a3 = v32;
      v30 = v29;
      a1 = v38;
      *(_QWORD *)v30 = v21;
      *(_DWORD *)(v30 + 8) = v28;
      v24 = 1;
      v21 = v30;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v7 = v21 | v24;
  }
  v42 = v7;
  v43 = *(_WORD *)(a4 + 16);
  v39 = *(_OWORD *)a5;
  v40 = *(_QWORD *)(a5 + 16);
  v44 = a3;
  v15 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::AdjacencyList &>(a1 + 1032, &v44, (uint64_t)&v41, &v39);
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  *(_QWORD *)(v15 + 64) |= a2;
  return v15;
}

uint64_t JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::AdjacencyList &>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;

  v8 = WTF::fastMalloc((WTF *)0x68);
  v9 = *a2;
  v10 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v29 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v30 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v41 = v9;
      v37 = v30;
      v38 = WTF::fastMalloc((WTF *)0x10);
      v9 = v41;
      *(_QWORD *)v38 = v29;
      *(_DWORD *)(v38 + 8) = v37;
      v32 = 1;
      v29 = v38;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    v10 = v29 | v32;
  }
  v43 = v10;
  v11 = *(_QWORD *)(a3 + 8);
  if ((v11 & 1) != 0)
  {
    v33 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v34 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
        ? (v35 = (_DWORD)v34 == -1)
        : (v35 = 1),
          v35))
    {
      v36 = 2;
    }
    else if (v34 >> 28)
    {
      v42 = v9;
      v39 = v34;
      v40 = WTF::fastMalloc((WTF *)0x10);
      v9 = v42;
      *(_QWORD *)v40 = v33;
      *(_DWORD *)(v40 + 8) = v39;
      v36 = 1;
      v33 = v40;
    }
    else
    {
      v36 = v33;
      v33 = v34 << 36;
    }
    v11 = v33 | v36;
  }
  v44 = v11;
  v45 = *(_WORD *)(a3 + 16);
  result = JSC::DFG::Node::Node(v8, v9, (uint64_t)&v43, a4);
  v20 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v20 - 8);
    *(_DWORD *)(a1 + 28) = v20 - 1;
    v22 = *(_QWORD **)a1;
  }
  else
  {
    v21 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
    {
      v23 = v21 + (v21 >> 2);
      if (v23 >= 0x10)
        v24 = v23 + 1;
      else
        v24 = 16;
      if (v24 <= v21 + 1)
        v25 = v21 + 1;
      else
        v25 = v24;
      if (v25 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v26 = *(_QWORD **)a1;
      v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
      *(_DWORD *)(a1 + 8) = v25;
      *(_QWORD *)a1 = v27;
      memcpy(v27, v26, 8 * v21);
      if (v26)
      {
        if (*(_QWORD **)a1 == v26)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v26, v13, v14, v15, v16, v17, v18, v19);
      }
      v28 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = 0;
      *(_DWORD *)(a1 + 12) = v28 + 1;
    }
    else
    {
      v22 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = 0;
      *(_DWORD *)(a1 + 12) = v21 + 1;
    }
  }
  *(_DWORD *)(v8 + 20) = v21;
  v22[v21] = v8;
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v43 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  return v8;
}

uint64_t JSC::DFG::Node::Node(uint64_t a1, unsigned int a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v5 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v10 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v10 != 0x3FFFFFFF)
        ? (v11 = (_DWORD)v10 == -1)
        : (v11 = 1),
          v11))
    {
      v12 = 2;
    }
    else if (v10 >> 28)
    {
      v17 = v9;
      v25 = a2;
      v21 = a4;
      v23 = a3;
      v18 = v10;
      v9 = WTF::fastMalloc((WTF *)0x10);
      a4 = v21;
      a3 = v23;
      a2 = v25;
      *(_QWORD *)v9 = v17;
      *(_DWORD *)(v9 + 8) = v18;
      v12 = 1;
    }
    else
    {
      v12 = v9;
      v9 = v10 << 36;
    }
    v5 = v9 | v12;
  }
  *(_QWORD *)a1 = v5;
  v6 = *(_QWORD *)(a3 + 8);
  if ((v6 & 1) != 0)
  {
    v13 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 2) != 0
      || ((v14 = *(unsigned int *)((v6 & 0xFFFFFFFF8) + 8), (_DWORD)v14 != 0x3FFFFFFF)
        ? (v15 = (_DWORD)v14 == -1)
        : (v15 = 1),
          v15))
    {
      v16 = 2;
    }
    else if (v14 >> 28)
    {
      v19 = v13;
      v26 = a2;
      v22 = a4;
      v24 = a3;
      v20 = v14;
      v13 = WTF::fastMalloc((WTF *)0x10);
      a4 = v22;
      a3 = v24;
      a2 = v26;
      *(_QWORD *)v13 = v19;
      *(_DWORD *)(v13 + 8) = v20;
      v16 = 1;
    }
    else
    {
      v16 = v13;
      v13 = v14 << 36;
    }
    v6 = v13 | v16;
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a3 + 16);
  *(_DWORD *)(a1 + 20) = -1;
  v7 = *a4;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 48) = 0x13FFFFFFFLL;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  JSC::DFG::Node::setOpAndDefaultFlags(a1, a2);
  return a1;
}

uint64_t JSC::DFG::ConstantFoldingPhase::emitGetByOffset(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;

  v12 = a4 & 0xFF03FFFFFFFFFFFFLL | 0x24000000000000;
  v13 = v12;
  if (a6 >= 64)
  {
    v16 = a2;
    v17 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) != 0)
    {
      v26 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
      if ((v17 & 2) != 0
        || ((v27 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
          ? (v28 = (_DWORD)v27 == -1)
          : (v28 = 1),
            v28))
      {
        v29 = 2;
      }
      else if (v27 >> 28)
      {
        v34 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v34 = v26;
        *(_DWORD *)(v34 + 8) = v27;
        v29 = 1;
        v26 = v34;
      }
      else
      {
        v29 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
        v26 = v27 << 36;
      }
      v17 = v26 | v29;
    }
    v36 = v17;
    v18 = *(_QWORD *)(a3 + 8);
    if ((v18 & 1) != 0)
    {
      v30 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
      if ((v18 & 2) != 0
        || ((v31 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
          ? (v32 = (_DWORD)v31 == -1)
          : (v32 = 1),
            v32))
      {
        v33 = 2;
      }
      else if (v31 >> 28)
      {
        v35 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v35 = v30;
        *(_DWORD *)(v35 + 8) = v31;
        v33 = 1;
        v30 = v35;
      }
      else
      {
        v33 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
        v30 = v31 << 36;
      }
      v18 = v30 | v33;
    }
    v37 = v18;
    v38 = *(_WORD *)(a3 + 16);
    v13 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(a1 + 208, v16, 0, 138, (uint64_t)&v36, v12, a7, a8) & 0xFF00FFFFFFFFFFFFLL;
    if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v37 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
    if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v36 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  }
  v14 = *(_QWORD *)(a1 + 32);
  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(v14 + 432);
  *(_QWORD *)(v14 + 432) = result;
  *(_DWORD *)result = a6;
  *(_DWORD *)(result + 4) = a5;
  *(_QWORD *)(a3 + 72) = result;
  *(_QWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 32) = v12;
  *(_WORD *)(a3 + 18) = 152;
  *(_DWORD *)(a3 + 56) &= ~8u;
  return result;
}

void JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::Edge &)#1}::operator()(_BYTE **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;

  v9 = *((_QWORD *)*a1 + 10);
  v10 = (_QWORD *)(v9 + 24);
  v11 = (_QWORD *)(v9 + 8);
  if ((a2 & 1) != 0)
    v11 = v10;
  v12 = *v11 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (void *)*((unsigned int *)*a1 + 40);
  if ((_DWORD)v13 != *(_DWORD *)(v12 + 20))
  {
    if ((*(_QWORD *)(v12 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v12, v13, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v12 + 20) = (_DWORD)v13;
  }
  if ((*(_QWORD *)(v12 + 8) & 0xFFFFFFFFCFFFFFFFLL) != 0)
    *a1[1] = 0;
}

uint64_t WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::forEach<JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::RegisteredStructure)#3}>(uint64_t result, int **a2)
{
  unsigned int *v2;
  unsigned int v3;
  int v4;
  BOOL *v5;
  int v6;
  int v7;
  BOOL v8;
  char *v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  BOOL *v14;
  int v15;
  char *v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  BOOL v20;
  BOOL v21;
  char v22;

  v2 = (unsigned int *)(result & 0xFFFFFFFFFFFFFFFCLL);
  if ((result & 1) != 0)
  {
    v12 = *v2;
    if ((_DWORD)v12)
    {
      v13 = (uint64_t *)(v2 + 2);
      v14 = (BOOL *)a2[1];
      v15 = **a2;
      v16 = (char *)a2[2];
      do
      {
        v17 = *v13++;
        v18 = (*(_DWORD *)(v17 + 16) & 3) == 0;
        v19 = *(_DWORD *)(v17 + 16) & 3 | *(_DWORD *)(v17 + 16) & v15;
        v20 = (*(_DWORD *)(v17 + 16) & v15) != 0 && v18;
        if (!*v14)
          v20 = 0;
        *v14 = v20;
        if (*v16)
          v21 = v19 == 0;
        else
          v21 = 0;
        v22 = v21;
        *v16 = v22;
        --v12;
      }
      while (v12);
    }
  }
  else if (v2)
  {
    v3 = v2[4];
    v4 = v3 & 3;
    v5 = (BOOL *)a2[1];
    v6 = **a2 & v3;
    v10 = v6 == 0;
    v7 = v4 | v6;
    v8 = !v10 && v4 == 0;
    if (!*v5)
      v8 = 0;
    *v5 = v8;
    v9 = (char *)a2[2];
    if (*v9)
      v10 = v7 == 0;
    else
      v10 = 0;
    v11 = v10;
    *v9 = v11;
  }
  return result;
}

uint64_t JSC::DFG::Graph::copyVarargChildren<JSC::DFG::InsertionSet::insertCheck(JSC::DFG::Graph&,unsigned long,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge)#1}>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  unsigned int v40;
  char v41;
  uint64_t v42;

  v11 = *(unsigned int *)(result + 164);
  v40 = 0;
  v39[0] = &v41;
  v39[1] = &v40;
  v39[2] = result;
  v12 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(a2 + 56) & 0x10) == 0)
  {
    if ((v12 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      result = JSC::DFG::Graph::copyVarargChildren<JSC::DFG::InsertionSet::insertCheck(JSC::DFG::Graph&,unsigned long,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge)#1}>(JSC::DFG::Node *,JSC::DFG::InsertionSet::insertCheck(JSC::DFG::Graph&,unsigned long,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge)#1})::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t)v39, v12, a3, a4, a5, a6, a7, a8);
      v30 = *(_QWORD *)(a2 + 32);
      if ((v30 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        result = JSC::DFG::Graph::copyVarargChildren<JSC::DFG::InsertionSet::insertCheck(JSC::DFG::Graph&,unsigned long,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge)#1}>(JSC::DFG::Node *,JSC::DFG::InsertionSet::insertCheck(JSC::DFG::Graph&,unsigned long,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge)#1})::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t)v39, v30, v24, v25, v26, v27, v28, v29);
        v37 = *(_QWORD *)(a2 + 40);
        if ((v37 & 0xFF00FFFFFFFFFFFFLL) != 0)
          result = JSC::DFG::Graph::copyVarargChildren<JSC::DFG::InsertionSet::insertCheck(JSC::DFG::Graph&,unsigned long,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge)#1}>(JSC::DFG::Node *,JSC::DFG::InsertionSet::insertCheck(JSC::DFG::Graph&,unsigned long,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge)#1})::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t)v39, v37, v31, v32, v33, v34, v35, v36);
      }
    }
    goto LABEL_22;
  }
  v13 = *(_QWORD *)(a2 + 32);
  if ((int)v13 + (int)v12 <= v12)
  {
LABEL_22:
    v38 = v40;
    *a9 = v11;
    a9[1] = v38;
    a9[2] = 0;
    return result;
  }
  v14 = result;
  v15 = (uint64_t *)(result + 152);
  v16 = v12;
  while (1)
  {
    v17 = *(unsigned int *)(v14 + 164);
    if (v16 >= v17)
      break;
    v18 = *v15;
    v19 = *(_QWORD *)(*v15 + 8 * v16);
    if ((v19 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v42 = *(_QWORD *)(*v15 + 8 * v16);
      if ((v19 & 0x1000000000000) == 0)
      {
        v20 = (v19 >> 50) & 0x3F;
        if ((_DWORD)v20)
        {
          v21 = v20 > 0x34;
          v22 = (1 << v20) & 0x12400001800284;
          if (v21 || v22 == 0)
          {
            ++v40;
            if ((_DWORD)v17 == *(_DWORD *)(v14 + 160))
            {
              result = WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>((uint64_t)v15, (unint64_t)&v42, a3, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v18 + 8 * v17) = v19;
              *(_DWORD *)(v14 + 164) = v17 + 1;
            }
          }
        }
      }
      v12 = *(_QWORD *)(a2 + 24);
      v13 = *(_QWORD *)(a2 + 32);
    }
    if (++v16 >= (v12 + v13))
      goto LABEL_22;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::Graph::copyVarargChildren<JSC::DFG::InsertionSet::insertCheck(JSC::DFG::Graph&,unsigned long,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge)#1}>(JSC::DFG::Node *,JSC::DFG::InsertionSet::insertCheck(JSC::DFG::Graph&,unsigned long,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge)#1})::{lambda(JSC::DFG::Edge)#1}::operator()(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v11 = a2;
  if ((a2 & 0x1000000000000) == 0)
  {
    v8 = (a2 >> 50) & 0x3F;
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(result + 16);
      if (v8 > 0x34 || ((1 << v8) & 0x12400001800284) == 0)
      {
        ++**(_DWORD **)(result + 8);
        v10 = *(unsigned int *)(v9 + 164);
        if ((_DWORD)v10 == *(_DWORD *)(v9 + 160))
        {
          return WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v9 + 152, (unint64_t)&v11, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * v10) = a2;
          *(_DWORD *)(v9 + 164) = v10 + 1;
        }
      }
    }
  }
  return result;
}

uint64_t JSC::DFG::performConstantHoisting(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  JSC::DFG::Graph *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  WTF **v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::DFG::Graph *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  JSC::DFG::Node **v74;
  uint64_t v75;
  JSC::DFG::Node *v76;
  WTF *v77;
  unint64_t v79;
  BOOL v80;
  BOOL v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  const void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  __int16 v106;
  JSC::DFG::Graph *v107;
  __int128 v108;
  char v109;
  WTF *v110;
  _QWORD v111[2];
  __int128 v112;
  double v113;
  WTF *v114[2];
  uint64_t v115;
  _BYTE v116[128];
  uint64_t v117;
  uint64_t *v118;
  WTF **v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;

  v103 = -1;
  v104 = -1;
  v105 = 0;
  v106 = 256;
  v107 = this;
  *(_QWORD *)&v108 = "constant hoisting";
  *((_QWORD *)&v108 + 1) = 18;
  v109 = 0;
  v110 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v103);
  v111[0] = "DFG";
  v111[1] = 4;
  v112 = v108;
  v113 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v100 = mach_absolute_time();
    v102 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v102 != -1)
    {
      v114[0] = (WTF *)&v123;
      v119 = v114;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v101) = dword_1ECF4400C;
    v113 = (double)(v100 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v101 * 1000000000.0);
  }
  v8 = v107;
  if (*((_DWORD *)v107 + 236) != 2)
  {
    JSC::DFG::Graph::logAssertionFailure(v107, 0, (const WTF::CString *)"./dfg/DFGConstantHoistingPhase.cpp", (const char *)0x31, "BOOL JSC::DFG::(anonymous namespace)::ConstantHoistingPhase::run()", "m_graph.m_form == SSA");
    __break(0xC471u);
    goto LABEL_173;
  }
  v9 = *((_DWORD *)v107 + 15);
  if (v9)
  {
    do
    {
      if (*((_DWORD *)v8 + 15) <= --v9)
      {
        __break(0xC471u);
        JUMPOUT(0x1983B2F70);
      }
      v10 = *(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v9);
      if (v10)
      {
        v11 = *(_DWORD *)(v10 + 36);
        if (v11)
        {
          v12 = v11 - 1;
          v13 = 8 * v12;
          do
          {
            if (*(_DWORD *)(v10 + 36) <= v12)
            {
              __break(0xC471u);
              JUMPOUT(0x1983B2F68);
            }
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + v13) + 88) = 0;
            v13 -= 8;
            --v12;
          }
          while (v12 != -1);
        }
        v14 = *(_DWORD *)(v10 + 220);
        if (v14)
        {
          v15 = v14 - 1;
          v16 = 8 * v15;
          do
          {
            if (*(_DWORD *)(v10 + 220) <= v15)
            {
              __break(0xC471u);
              JUMPOUT(0x1983B2F34);
            }
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 208) + v16) + 88) = 0;
            v16 -= 8;
            --v15;
          }
          while (v15 != -1);
        }
      }
    }
    while (v9);
    v17 = *((unsigned int *)v8 + 15);
    v122 = 0;
    v123 = 0;
    v120 = 0;
    v121 = 0;
    v119 = 0;
    if (!(_DWORD)v17)
      goto LABEL_19;
    v18 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v18))
    {
      if (v17 == ++v18)
        goto LABEL_19;
    }
    if ((_DWORD)v17 == (_DWORD)v18)
    {
LABEL_19:
      v19 = 0;
    }
    else
    {
      LODWORD(v20) = v17;
      do
      {
        if (v20 <= v18)
        {
          __break(0xC471u);
          JUMPOUT(0x1983B2F78);
        }
        v21 = *(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v18);
        v22 = *(unsigned int *)(v21 + 220);
        if ((_DWORD)v22)
        {
          v23 = 0;
          v24 = 0;
          do
          {
            v118 = 0;
            v25 = *(_QWORD *)(v21 + 208);
            v26 = *(_QWORD *)(v25 + 8 * v23);
            v118 = (uint64_t *)v26;
            v27 = *(unsigned __int16 *)(v26 + 18);
            if (v27 <= 2)
            {
              if (*(_WORD *)(v26 + 18))
              {
                if (v27 == 1)
                  v28 = (uint64_t *)&v122;
                else
                  v28 = (uint64_t *)&v121;
              }
              else
              {
                v28 = (uint64_t *)&v123;
              }
              v117 = *(_QWORD *)(v26 + 72);
              WTF::HashMap<JSC::DFG::FrozenValue *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(v28, &v117, (uint64_t *)&v118, v3, v4, v5, v6, v7, (uint64_t)v114);
              if ((_BYTE)v115)
              {
                if (!*((_DWORD *)v107 + 15))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983B2F60);
                }
                v31 = **((_QWORD **)v107 + 6);
                if (!*(_DWORD *)(v31 + 220))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983B2F58);
                }
                JSC::DFG::NodeOrigin::operator=(v118, **(uint64_t ***)(v31 + 208), v2, v3, v4, v5, v6, v7);
              }
              else
              {
                v29 = v118;
                v118[11] = *((_QWORD *)v114[0] + 1);
                v30 = HIDWORD(v120);
                if (HIDWORD(v120) == (_DWORD)v120)
                {
                  v32 = (WTF **)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v119, HIDWORD(v120) + 1, (unint64_t)&v118);
                  v33 = HIDWORD(v120) + 1;
                  v119[HIDWORD(v120)] = *v32;
                  HIDWORD(v120) = v33;
                }
                else
                {
                  v119[HIDWORD(v120)] = (WTF *)v29;
                  HIDWORD(v120) = v30 + 1;
                }
              }
              v22 = *(unsigned int *)(v21 + 220);
            }
            else
            {
              if (v22 <= v24)
              {
                __break(0xC471u);
                JUMPOUT(0x1983B2F2CLL);
              }
              *(_QWORD *)(v25 + 8 * v24++) = v26;
            }
            ++v23;
          }
          while (v23 < v22);
          if (v22 < v24)
          {
            v34 = *(unsigned int *)(v21 + 216);
            if (v34 < v24)
            {
              v94 = v34 + (v34 >> 2);
              if (v94 >= 0x10)
                v95 = v94 + 1;
              else
                v95 = 16;
              if (v95 <= v24)
                v96 = v24;
              else
                v96 = v95;
              v97 = *(const void **)(v21 + 208);
              if (v96 < 9)
              {
                v98 = (void *)(v21 + 224);
                *(_QWORD *)(v21 + 208) = v21 + 224;
                *(_DWORD *)(v21 + 216) = 8;
              }
              else
              {
                if (v96 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983B2F88);
                }
                v98 = (void *)WTF::fastMalloc((WTF *)(8 * v96));
                *(_DWORD *)(v21 + 216) = v96;
                *(_QWORD *)(v21 + 208) = v98;
              }
              memcpy(v98, v97, 8 * v22);
              if ((const void *)(v21 + 224) != v97 && v97)
              {
                if (*(const void **)(v21 + 208) == v97)
                {
                  *(_QWORD *)(v21 + 208) = 0;
                  *(_DWORD *)(v21 + 216) = 0;
                }
                WTF::fastFree((unint64_t)v97, v99, v2, v3, v4, v5, v6, v7);
              }
            }
          }
        }
        else
        {
          LODWORD(v24) = 0;
        }
        *(_DWORD *)(v21 + 220) = v24;
        v18 = (v18 + 1);
        v20 = *((unsigned int *)v8 + 15);
        if (v20 > v18)
        {
          while (!*(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v18))
          {
            if (v20 == ++v18)
            {
              LODWORD(v18) = *((_DWORD *)v8 + 15);
              break;
            }
          }
        }
      }
      while ((_DWORD)v17 != (_DWORD)v18);
      v8 = v107;
      v19 = v123;
    }
  }
  else
  {
    v19 = 0;
    v122 = 0;
    v123 = 0;
    v120 = 0;
    v121 = 0;
    v119 = 0;
  }
  v114[0] = v8;
  v114[1] = (WTF *)v116;
  v115 = 8;
  v118 = (uint64_t *)v114;
  if (!*((_DWORD *)v107 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x1983B2F90);
  }
  JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)v114, **((JSC::DFG::BasicBlock ***)v107 + 6));
  v54 = v107;
  v55 = *((unsigned int *)v107 + 15);
  if ((_DWORD)v55)
  {
    v56 = 0;
    v57 = *((_QWORD *)v107 + 6);
    while (!*(_QWORD *)(v57 + 8 * v56))
    {
      if (v55 == ++v56)
        goto LABEL_91;
    }
    if ((_DWORD)v55 != (_DWORD)v56)
    {
      v56 = v56;
      do
      {
        if (v55 <= v56)
        {
          __break(0xC471u);
          JUMPOUT(0x1983B2F80);
        }
        v58 = *(_QWORD *)(v57 + 8 * v56);
        v59 = *(unsigned int *)(v58 + 220);
        if ((_DWORD)v59)
        {
          v60 = *(_QWORD *)(v58 + 208);
          v61 = v60 + 8 * v59;
          do
          {
            v62 = *(_QWORD **)v60;
            v63 = *(_QWORD *)(*(_QWORD *)v60 + 24);
            if ((*(_BYTE *)(*(_QWORD *)v60 + 56) & 0x10) != 0)
            {
              v69 = v62[4];
              if ((int)v69 + (int)v63 > v63)
              {
                LODWORD(v70) = *((_DWORD *)v54 + 41);
                v71 = *(_QWORD *)(*(_QWORD *)v60 + 24);
                if (v70 <= v63)
                  v70 = v63;
                else
                  v70 = v70;
                do
                {
                  if (v70 == v71)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983B2F50);
                  }
                  v72 = *((_QWORD *)v54 + 19);
                  v73 = *(_QWORD *)(v72 + 8 * v71);
                  v47 = v73 & 0xFF00FFFFFFFFFFFFLL;
                  if ((v73 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v47 = *(_QWORD *)((v73 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                    if (v47)
                    {
                      v47 = v47 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v73) << 48);
                      *(_QWORD *)(v72 + 8 * v71) = v47;
                      v63 = v62[3];
                      v69 = v62[4];
                    }
                  }
                  ++v71;
                }
                while (v71 < (v63 + v69));
              }
            }
            else
            {
              if ((v63 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v66 = *(_QWORD *)((v63 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                if (v66)
                  v62[3] = v66 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v63) << 48);
              }
              v64 = v62[4];
              if ((v64 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v67 = *(_QWORD *)((v64 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                if (v67)
                  v62[4] = v67 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v64) << 48);
              }
              v65 = v62[5];
              if ((v65 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v68 = *(_QWORD *)((v65 & 0xFF00FFFFFFFFFFFFLL) + 0x58);
                if (v68)
                  v62[5] = v68 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE6(v65) << 48);
              }
            }
            v60 += 8;
          }
          while (v60 != v61);
        }
        if (v55 > ++v56)
        {
          while (!*(_QWORD *)(v57 + 8 * v56))
          {
            if (v55 == ++v56)
              goto LABEL_91;
          }
          v56 = v56;
        }
      }
      while (v55 != v56);
    }
LABEL_91:
    if (*((_DWORD *)v54 + 236) == 2)
    {
      v91 = 0;
      while (!*(_QWORD *)(*((_QWORD *)v54 + 6) + 8 * v91))
      {
        if (v55 == ++v91)
          goto LABEL_92;
      }
      if ((_DWORD)v55 != (_DWORD)v91)
      {
        v92 = v91;
        v93 = v55;
        while (v93 > v92)
        {
          JSC::DFG::BasicBlock::SSAData::invalidate(*(JSC::DFG::BasicBlock::SSAData **)(*(_QWORD *)(*((_QWORD *)v54 + 6) + 8 * v92++) + 200), (void *)v47, v48, v49, v50, v51, v52, v53);
          v93 = *((unsigned int *)v54 + 15);
          if (v93 > v92)
          {
            while (!*(_QWORD *)(*((_QWORD *)v54 + 6) + 8 * v92))
            {
              if (v93 == ++v92)
              {
                v92 = *((unsigned int *)v54 + 15);
                goto LABEL_136;
              }
            }
            v92 = v92;
          }
LABEL_136:
          if (v55 == v92)
            goto LABEL_92;
        }
        __break(0xC471u);
LABEL_173:
        JUMPOUT(0x1983B2EC8);
      }
    }
  }
LABEL_92:
  if (HIDWORD(v120))
  {
    v74 = v119;
    v75 = 8 * HIDWORD(v120);
    do
    {
      v76 = *v74++;
      JSC::DFG::Graph::deleteNode(v107, v76, v48, v49, v50, v51, v52, v53);
      v75 -= 8;
    }
    while (v75);
  }
  v77 = v114[1];
  if (v116 != (_BYTE *)v114[1] && v114[1] != 0)
  {
    v114[1] = 0;
    LODWORD(v115) = 0;
    WTF::fastFree((unint64_t)v77, (void *)v47, v48, v49, v50, v51, v52, v53);
  }
  v79 = (unint64_t)v119;
  if (v119)
  {
    v119 = 0;
    LODWORD(v120) = 0;
    WTF::fastFree(v79, (void *)v47, v48, v49, v50, v51, v52, v53);
  }
  if (v121)
    WTF::fastFree((unint64_t)(v121 - 2), (void *)v47, v48, v49, v50, v51, v52, v53);
  if (v122)
    WTF::fastFree((unint64_t)(v122 - 2), (void *)v47, v48, v49, v50, v51, v52, v53);
  if (v123)
    WTF::fastFree((unint64_t)(v123 - 2), (void *)v47, v48, v49, v50, v51, v52, v53);
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v80 = (*(_DWORD *)(*((_QWORD *)v107 + 3) + 16) & 0xFFFFFFFE) == 4) : (v80 = 0),
        !v80 ? (v81 = BYTE2(qword_1ECF4C32A) == 0) : (v81 = 0),
        !v81))
  {
    *(_OWORD *)v114 = v108;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v107 + 1088, "Phase ", (uint64_t)v114, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v111);
  if (HIBYTE(qword_1ECF4C32A) && !v109)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v103, (uint64_t)v82, v83, v84, v85, v86, v87, v88);
  v89 = v110;
  v110 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 1)
      WTF::fastFree((unint64_t)v89, v82, v83, v84, v85, v86, v87, v88);
    else
      --*(_DWORD *)v89;
  }
  return 1;
}

BOOL JSC::DFG::performCriticalEdgeBreaking(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _BOOL8 v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  WTF *v77;
  BOOL v79;
  BOOL v80;
  unsigned int v81;
  _QWORD *v82;
  uint64_t *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  WTF **v97;
  WTF *v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  __int16 v109;
  unint64_t v110;
  __int128 v111;
  char v112;
  WTF *v113;
  unint64_t *v114;
  WTF *v115;
  uint64_t v116;
  _BYTE v117[128];
  _QWORD v118[2];
  __int128 v119;
  double v120;
  __int128 v121;
  __int16 v122;
  _OWORD *v123;
  _QWORD v124[2];

  v106 = -1;
  v107 = -1;
  v108 = 0;
  v109 = 256;
  v110 = (unint64_t)this;
  *(_QWORD *)&v111 = "critical edge breaking";
  *((_QWORD *)&v111 + 1) = 23;
  v112 = 0;
  v113 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v106);
  v114 = (unint64_t *)this;
  v115 = (WTF *)v117;
  v116 = 8;
  v118[0] = "DFG";
  v118[1] = 4;
  v119 = v111;
  v120 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v93 = mach_absolute_time();
    v95 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v95 != -1)
    {
      *(_QWORD *)&v121 = &v123;
      v124[0] = &v121;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v124, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v94) = dword_1ECF4400C;
    v120 = (double)(v93 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v94 * 1000000000.0);
  }
  v10 = v110;
  if (*(_DWORD *)(v110 + 60))
  {
    v11 = 0;
    while (1)
    {
      v124[0] = 0;
      v12 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v11);
      v124[0] = v12;
      if (!v12)
        goto LABEL_11;
      v13 = *(unsigned int *)(v12 + 220);
      v14 = v13 - 1;
      v15 = v13 - 1;
      do
      {
        if (v15 >= v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1983B381CLL);
        }
        v16 = *(_QWORD *)(v12 + 208);
        v17 = *(_QWORD *)(v16 + 8 * v15);
        v18 = *(unsigned __int16 *)(v17 + 18);
        --v15;
      }
      while ((v18 - 364) > 0xB);
      if (v18 == 365)
        break;
      if (v18 == 366)
      {
        v81 = *(_DWORD *)(*(_QWORD *)(v17 + 72) + 12) + 1;
      }
      else
      {
        if (v18 != 367)
          goto LABEL_11;
        v81 = *(_DWORD *)(*(_QWORD *)(v17 + 72) + 12);
      }
      if (v81 >= 2)
        break;
LABEL_11:
      if (++v11 >= (unint64_t)*(unsigned int *)(v10 + 60))
        goto LABEL_66;
    }
    v123 = 0;
    do
    {
      if (v14 >= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1983B3834);
      }
      v19 = *(_QWORD *)(v16 + 8 * v14--);
    }
    while (*(unsigned __int16 *)(v19 + 18) - 364 > 0xB);
    v20 = 1;
    switch(*(_WORD *)(v19 + 18))
    {
      case 0x16C:
        goto LABEL_18;
      case 0x16D:
        v20 = 2;
        goto LABEL_18;
      case 0x16E:
        v20 = *(_DWORD *)(*(_QWORD *)(v19 + 72) + 12) + 1;
        goto LABEL_97;
      case 0x16F:
        v20 = *(_DWORD *)(*(_QWORD *)(v19 + 72) + 12);
LABEL_97:
        if (!v20)
          goto LABEL_58;
LABEL_18:
        v21 = v20;
        break;
      default:
        goto LABEL_58;
    }
    while (1)
    {
      v22 = v21--;
      v23 = *(unsigned int *)(v124[0] + 220);
      v24 = v23 - 1;
      do
      {
        if (v24 >= v23)
        {
          __break(0xC471u);
          JUMPOUT(0x1983B3814);
        }
        v25 = *(_QWORD *)(*(_QWORD *)(v124[0] + 208) + 8 * v24);
        v26 = *(unsigned __int16 *)(v25 + 18);
        --v24;
      }
      while ((v26 - 364) > 0xB);
      if (v26 == 366)
        break;
      if (v26 == 367)
      {
        v99 = *(_QWORD *)(v25 + 72);
        if (*(_DWORD *)(v99 + 12) <= v21)
        {
          __break(0xC471u);
          JUMPOUT(0x1983B3824);
        }
        v27 = (uint64_t *)(*(_QWORD *)v99 + 8 * v21);
      }
      else
      {
        if (v22 != 1)
        {
          if (v22 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1983B37A8);
          }
          v28 = *(_QWORD *)(v25 + 72);
LABEL_29:
          v27 = (uint64_t *)(v28 + 16);
          goto LABEL_30;
        }
        v27 = (uint64_t *)(v25 + 72);
        if (v26 != 364)
          v27 = (uint64_t *)*v27;
      }
LABEL_30:
      v29 = *v27;
      if (*(_DWORD *)(*v27 + 52) >= 2u)
      {
        v30 = (uint64_t)v123;
        if (v123)
        {
          v60 = *((_DWORD *)v123 - 2);
          v61 = (~(v29 << 32) + v29) ^ ((unint64_t)(~(v29 << 32) + v29) >> 22);
          v62 = 9 * ((v61 + ~(v61 << 13)) ^ ((v61 + ~(v61 << 13)) >> 8));
          v63 = (v62 ^ (v62 >> 15)) + ~((v62 ^ (v62 >> 15)) << 27);
          v64 = v60 & ((v63 >> 31) ^ v63);
          v65 = *(_QWORD *)&v123[v64];
          if (v65 != v29)
          {
            v66 = 1;
            while (v65)
            {
              v64 = ((_DWORD)v64 + v66) & v60;
              v65 = *(_QWORD *)&v123[v64];
              ++v66;
              if (v65 == v29)
                goto LABEL_64;
            }
            v64 = *((unsigned int *)v123 - 1);
          }
LABEL_64:
          if (v64 != *((_DWORD *)v123 - 1))
          {
            v34 = *((_QWORD *)&v123[v64] + 1);
            goto LABEL_50;
          }
        }
        v31 = JSC::DFG::BlockInsertionSet::insert((JSC::DFG::BlockInsertionSet *)&v114, *(unsigned int *)(v29 + 8), *(float *)(v29 + 192));
        if (!*(_DWORD *)(*v27 + 220))
        {
          __break(0xC471u);
          JUMPOUT(0x1983B382CLL);
        }
        v34 = (uint64_t)v31;
        v35 = v110;
        v36 = **(_QWORD **)(*v27 + 208);
        v37 = *(_QWORD *)v36;
        if ((*(_QWORD *)v36 & 1) != 0)
        {
          v85 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
          if ((v37 & 2) != 0
            || ((v86 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v86 != 0x3FFFFFFF)
              ? (v87 = (_DWORD)v86 == -1)
              : (v87 = 1),
                v87))
          {
            v88 = 2;
          }
          else if (v86 >> 28)
          {
            v102 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
            v104 = v110;
            v100 = *(_DWORD *)((v37 & 0xFFFFFFFF8) + 8);
            v85 = WTF::fastMalloc((WTF *)0x10);
            v35 = v104;
            *(_QWORD *)v85 = v102;
            *(_DWORD *)(v85 + 8) = v100;
            v88 = 1;
          }
          else
          {
            v88 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
            v85 = v86 << 36;
          }
          v37 = v85 | v88;
        }
        *(_QWORD *)&v121 = v37;
        v38 = *(_QWORD *)(v36 + 8);
        if ((v38 & 1) != 0)
        {
          v89 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
          if ((v38 & 2) != 0
            || ((v90 = *(unsigned int *)((v38 & 0xFFFFFFFF8) + 8), (_DWORD)v90 != 0x3FFFFFFF)
              ? (v91 = (_DWORD)v90 == -1)
              : (v91 = 1),
                v91))
          {
            v92 = 2;
          }
          else if (v90 >> 28)
          {
            v103 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
            v105 = v35;
            v101 = *(_DWORD *)((v38 & 0xFFFFFFFF8) + 8);
            v89 = WTF::fastMalloc((WTF *)0x10);
            v35 = v105;
            *(_QWORD *)v89 = v103;
            *(_DWORD *)(v89 + 8) = v101;
            v92 = 1;
          }
          else
          {
            v92 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
            v89 = v90 << 36;
          }
          v38 = v89 | v92;
        }
        *((_QWORD *)&v121 + 1) = v38;
        v122 = *(_WORD *)(v36 + 16);
        JSC::DFG::BasicBlock::appendNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v34, v35, 0, 364, (uint64_t)&v121, *v27, v32, v33);
        if ((BYTE8(v121) & 1) != 0 && (*((_QWORD *)&v121 + 1) & 0xFFFFFFFF8) != 0)
          WTF::fastFree(*((_QWORD *)&v121 + 1) & 0xFFFFFFFF8, v39, v4, v5, v6, v7, v8, v9);
        if ((v121 & 1) != 0 && (v121 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v121 & 0xFFFFFFFF8, v39, v4, v5, v6, v7, v8, v9);
        v40 = (_QWORD *)(v34 + 40);
        v41 = *(unsigned int *)(v34 + 52);
        if ((_DWORD)v41 == *(_DWORD *)(v34 + 48))
        {
          v82 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)v124);
          v41 = *(unsigned int *)(v34 + 52);
          *(_QWORD *)(*(_QWORD *)(v34 + 40) + 8 * v41) = *v82;
        }
        else
        {
          *(_QWORD *)(*v40 + 8 * v41) = v124[0];
        }
        *(_DWORD *)(v34 + 52) = v41 + 1;
        v42 = *(unsigned int *)(*v27 + 52);
        if (!(_DWORD)v42)
        {
LABEL_136:
          __break(0xC471u);
          JUMPOUT(0x1983B3728);
        }
        v43 = v42 - 1;
        v44 = *(_QWORD *)(*v27 + 40);
        if (*(_QWORD *)(v44 + 8 * (v42 - 1)) != v124[0])
        {
          do
          {
            v58 = v42 - 1;
            if (v42 == 1)
              goto LABEL_136;
            v59 = *(_QWORD *)(v44 - 16 + 8 * v42--);
          }
          while (v59 != v124[0]);
          v43 = v58 - 1;
        }
        *(_QWORD *)(v44 + 8 * v43) = v34;
        if (!v30)
        {
          v45 = (_OWORD *)WTF::fastZeroedMalloc(0x90uLL, (unint64_t)v39, v4, v5, v6, v7, v8, v9);
          *v45 = xmmword_19914F680;
          v30 = (uint64_t)(v45 + 1);
          v123 = v45 + 1;
        }
        v46 = *(_DWORD *)(v30 - 8);
        v47 = *v27;
        v48 = ~(*v27 << 32) + *v27;
        v49 = (v48 ^ (v48 >> 22)) + ~((v48 ^ (v48 >> 22)) << 13);
        v50 = (9 * (v49 ^ (v49 >> 8))) ^ ((9 * (v49 ^ (v49 >> 8))) >> 15);
        v51 = v46 & (((v50 + ~(v50 << 27)) >> 31) ^ (v50 + ~((_DWORD)v50 << 27)));
        v3 = (uint64_t *)(v30 + 16 * v51);
        v52 = *v3;
        if (*v3)
        {
          v83 = 0;
          v84 = 1;
          do
          {
            if (v52 == v47)
            {
              v3[1] = v34;
              goto LABEL_50;
            }
            if (v52 == -1)
              v83 = v3;
            v51 = (v51 + v84) & v46;
            v3 = (uint64_t *)(v30 + 16 * v51);
            v52 = *v3;
            ++v84;
          }
          while (*v3);
          if (v83)
          {
            *v83 = 0;
            v83[1] = 0;
            --*(_DWORD *)(v30 - 16);
            v47 = *v27;
            v3 = v83;
          }
        }
        *v3 = v47;
        v3[1] = v34;
        v53 = (uint64_t)v123;
        if (v123)
          v54 = *((_DWORD *)v123 - 3) + 1;
        else
          v54 = 1;
        *((_DWORD *)v123 - 3) = v54;
        v55 = (*(_DWORD *)(v53 - 16) + v54);
        v56 = *(unsigned int *)(v53 - 4);
        if (v56 > 0x400)
        {
          if (v56 > 2 * v55)
            goto LABEL_50;
        }
        else if (3 * v56 > 4 * v55)
        {
LABEL_50:
          *v27 = v34;
          goto LABEL_31;
        }
        WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::DFG::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::DFG::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::DFG::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::expand((uint64_t *)&v123, (unint64_t)v3, v4, v5, v6, v7, v8, v9);
        goto LABEL_50;
      }
LABEL_31:
      if (!v21)
      {
        if (v123)
          WTF::fastFree((unint64_t)(v123 - 1), v3, v4, v5, v6, v7, v8, v9);
LABEL_58:
        v10 = v110;
        goto LABEL_11;
      }
    }
    v28 = *(_QWORD *)(v25 + 72);
    v57 = *(_DWORD *)(v28 + 12);
    if (v57 <= v21)
    {
      if (v57 != v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1983B3534);
      }
    }
    else
    {
      v28 = *(_QWORD *)v28 + 32 * v21;
    }
    goto LABEL_29;
  }
LABEL_66:
  v67 = JSC::DFG::BlockInsertionSet::execute(&v114, (uint64_t)v3, v4, v5, v6, v7, v8, v9);
  if (v67)
  {
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v79 = (*(_DWORD *)(*(_QWORD *)(v110 + 24) + 16) & 0xFFFFFFFE) == 4) : (v79 = 0),
          !v79 ? (v80 = BYTE2(qword_1ECF4C32A) == 0) : (v80 = 0),
          !v80))
    {
      v121 = v111;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>(v110 + 1088, "Phase ", (uint64_t)&v121, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v118);
  if (HIDWORD(v116))
  {
    v96 = 16 * HIDWORD(v116);
    v97 = (WTF **)((char *)v115 + 8);
    do
    {
      v98 = *v97;
      *v97 = 0;
      if (v98)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v98, v68, v69, v70, v71, v72, v73, v74);
      v97 += 2;
      v96 -= 16;
    }
    while (v96);
  }
  v75 = v115;
  if (v117 != (_BYTE *)v115 && v115 != 0)
  {
    v115 = 0;
    LODWORD(v116) = 0;
    WTF::fastFree((unint64_t)v75, v68, v69, v70, v71, v72, v73, v74);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v112)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v106, (uint64_t)v68, v69, v70, v71, v72, v73, v74);
  v77 = v113;
  v113 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 1)
      WTF::fastFree((unint64_t)v77, v68, v69, v70, v71, v72, v73, v74);
    else
      --*(_DWORD *)v77;
  }
  return v67;
}

uint64_t JSC::DFG::performDCE(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::DFG::Node *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::DFG **v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v57;
  JSC::DFG::Graph *v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v68;
  JSC::DFG::Graph *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unsigned __int8 *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  const void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  BOOL v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  WTF *v109;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  unsigned int v122;
  BOOL v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t *v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  char v139;
  uint64_t *v140;
  uint64_t v141;
  _QWORD *v142;
  unint64_t *v143;
  JSC::DFG **v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  JSC::DFG **v181;
  JSC::DFG **v182;
  uint64_t v183;
  unint64_t *v184;
  void *__src;
  unsigned int *__srca;
  void *__srcc;
  char *__srcb;
  uint64_t v189;
  int v190;
  uint64_t v191;
  __int16 v192;
  JSC::DFG::Graph *v193;
  __int128 v194;
  char v195;
  WTF *v196;
  JSC::DFG *v197;
  WTF *v198;
  uint64_t v199;
  _BYTE v200[128];
  _QWORD v201[2];
  __int128 v202;
  double v203;
  unint64_t *v204;
  int v205;
  int v206;
  _QWORD v207[3];
  __int128 v208;
  uint64_t v209;

  v189 = -1;
  v190 = -1;
  v191 = 0;
  v192 = 256;
  v193 = this;
  *(_QWORD *)&v194 = "dead code elimination";
  *((_QWORD *)&v194 + 1) = 22;
  v195 = 0;
  v196 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v189);
  v197 = this;
  v198 = (WTF *)v200;
  v199 = 8;
  v201[0] = "DFG";
  v201[1] = 4;
  v202 = v194;
  v203 = 0.0;
  v10 = (unsigned __int8 *)g_config;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v117 = mach_absolute_time();
    v119 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v119 != -1)
    {
      *(_QWORD *)&v208 = &v204;
      v207[0] = &v208;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v207, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v118) = dword_1ECF4400C;
    v203 = (double)(v117 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v118 * 1000000000.0);
  }
  JSC::DFG::Graph::computeRefCounts(v193, v3, v4, v5, v6, v7, v8, v9);
  JSC::DFG::Graph::blocksInPreOrder(v193, v11, v12, v13, v14, v15, v16, v17, (uint64_t)&v204);
  v25 = v204;
  if (v206)
  {
    v26 = &v197;
    v19 = &v204[v206];
    do
    {
      v27 = *v25;
      if (*v25)
      {
        if (*((_DWORD *)v193 + 236) == 1)
        {
          v28 = *(_DWORD *)(v27 + 36);
          if (v28)
          {
            v29 = 0;
            v30 = 0;
            do
            {
              v18 = *(JSC::DFG::Node **)(*(_QWORD *)(v27 + 24) + 8 * v29);
              if (!*((_DWORD *)v18 + 13))
              {
                v143 = v19;
                v144 = v26;
                JSC::DFG::Graph::deleteNode(v193, v18, (uint64_t)v19, v20, v21, v22, v23, v24);
                v145 = *(unsigned int *)(v27 + 36);
                if (!(_DWORD)v145)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983B4468);
                }
                if (v145 <= v30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983B4460);
                }
                --v30;
                *(_QWORD *)(*(_QWORD *)(v27 + 24) + 8 * v29) = *(_QWORD *)(*(_QWORD *)(v27 + 24) + 8 * v145 - 8);
                v28 = v145 - 1;
                *(_DWORD *)(v27 + 36) = v28;
                v26 = v144;
                v19 = v143;
              }
              v29 = v30 + 1;
              v30 = v29;
            }
            while (v28 > v29);
          }
          v31 = *(_DWORD *)(v27 + 84);
          if (v31)
          {
            v32 = v31 - 1;
            do
            {
              v33 = v32;
              v34 = *(_QWORD *)(v27 + 72);
              v35 = *(_QWORD *)(v34 + 8 * v32);
              if (v35 && (*(_WORD *)(v35 + 18) == 24 || !*(_DWORD *)(v35 + 52)))
                *(_QWORD *)(v34 + 8 * v32) = 0;
              --v32;
            }
            while (v33);
          }
          v36 = *(_DWORD *)(v27 + 108);
          if (v36)
          {
            v37 = v36 - 1;
            do
            {
              v38 = v37;
              v39 = *(_QWORD *)(v27 + 96);
              v40 = *(_QWORD *)(v39 + 8 * v37);
              if (v40 && (*(_WORD *)(v40 + 18) == 24 || !*(_DWORD *)(v40 + 52)))
                *(_QWORD *)(v39 + 8 * v37) = 0;
              --v37;
            }
            while (v38);
          }
        }
        v41 = *(unsigned int *)(v27 + 220);
        if ((_DWORD)v41)
        {
          v42 = 0;
          while (2)
          {
            v57 = *(_QWORD *)(*(_QWORD *)(v27 + 208) + 8 * v42);
            if (*(_DWORD *)(v57 + 52))
              goto LABEL_53;
            if ((*(_BYTE *)(v57 + 56) & 0x10) != 0)
            {
              v146 = (uint64_t)v26;
              v147 = *(_QWORD *)(v57 + 24);
              v184 = v19;
              v148 = *(_QWORD *)(v57 + 32);
              if ((int)v148 + (int)v147 > v147)
              {
                v149 = *(_QWORD *)(v57 + 24);
                do
                {
                  if (v149 >= *((unsigned int *)v193 + 41))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1983B4478);
                  }
                  v150 = *(_QWORD *)(*((_QWORD *)v193 + 19) + 8 * v149);
                  v151 = (v150 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v150 & 0x1000000000000) == 0;
                  v152 = (v150 >> 50) & 0x3F;
                  if (v151 && (_DWORD)v152 != 0)
                  {
                    v65 = v152 > 0x34;
                    v154 = (1 << v152) & 0x12400001800284;
                    if (v65 || v154 == 0)
                    {
                      JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v207, (const JSC::DFG::NodeOrigin *)v57);
                      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v146, v42, 0, 24, (uint64_t)v207, v150, v156, v157);
                      JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v207, v158, v159, v160, v161, v162, v163, v164);
                      v147 = *(_QWORD *)(v57 + 24);
                      v148 = *(_QWORD *)(v57 + 32);
                    }
                  }
                  ++v149;
                }
                while (v149 < (v147 + v148));
              }
              *(_WORD *)(v57 + 18) = 24;
              *(_DWORD *)(v57 + 56) = 8;
              *(_QWORD *)(v57 + 32) = 0;
              *(_QWORD *)(v57 + 40) = 0;
              *(_QWORD *)(v57 + 24) = 0;
              v10 = (unsigned __int8 *)g_config;
              v26 = (JSC::DFG **)v146;
            }
            else
            {
              v58 = v193;
              v59 = *(unsigned __int16 *)(v57 + 18);
              if (v59 == 154)
              {
                v182 = v26;
                v184 = v19;
                v129 = *(_QWORD *)(v57 + 72);
                *(_QWORD *)&v208 = 0;
                v130 = *(unsigned int *)(v129 + 20);
                if ((_DWORD)v130)
                {
                  v131 = *(_QWORD **)(v129 + 8);
                  v132 = &v131[4 * v130];
                  do
                  {
                    v133 = *v131 & 0xFFFFFFFFFFFFFFFCLL;
                    if ((*v131 & 1) != 0)
                    {
                      if (*(_DWORD *)v133)
                      {
                        v135 = 0;
                        v180 = v132;
                        __srca = (unsigned int *)(*v131 & 0xFFFFFFFFFFFFFFFCLL);
                        do
                        {
                          v136 = v131;
                          JSC::DFG::Node::remove(JSC::DFG::Graph &)::$_0::operator()((uint64_t)&v208, *(_QWORD *)(v133 + 8 * v135 + 8));
                          v133 = (unint64_t)__srca;
                          v131 = v136;
                          v132 = v180;
                          ++v135;
                        }
                        while (v135 < *__srca);
                      }
                    }
                    else if (v133)
                    {
                      if ((v208 & 1) != 0)
                      {
                        v142 = v131;
                        WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v208, v133);
                        v131 = v142;
                      }
                      else if ((v208 & 0xFFFFFFFFFFFFFFFCLL) != v133)
                      {
                        if ((v208 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                        {
                          v137 = v131;
                          __srcc = (void *)(*v131 & 0xFFFFFFFFFFFFFFFCLL);
                          v138 = WTF::fastMalloc((WTF *)0x28);
                          v131 = v137;
                          *(_QWORD *)v138 = 0x400000002;
                          v139 = v208;
                          *(_QWORD *)(v138 + 8) = v208 & 0xFFFFFFFFFFFFFFFCLL;
                          *(_QWORD *)(v138 + 16) = __srcc;
                          v134 = v139 & 2 | (unint64_t)v138 | 1;
                        }
                        else
                        {
                          v134 = v208 & 2 | v133;
                        }
                        *(_QWORD *)&v208 = v134;
                      }
                    }
                    v131 += 4;
                  }
                  while (v131 != v132);
                }
                v140 = JSC::DFG::Graph::addStructureSet((uint64_t)v58, (unint64_t *)&v208, v19, v20, v21, v22, v23, v24);
                *(_WORD *)(v57 + 18) = 132;
                *(_DWORD *)(v57 + 56) = 8;
                *(_QWORD *)(v57 + 72) = v140;
                v10 = (unsigned __int8 *)g_config;
                if ((v208 & 1) != 0)
                  WTF::fastFree(v208 & 0xFFFFFFFFFFFFFFFCLL, v18, v141, v20, v21, v22, v23, v24);
              }
              else
              {
                if (v59 != 294)
                {
                  v60 = *(_QWORD *)(v57 + 24);
                  v208 = 0uLL;
                  v209 = 0;
                  if ((v60 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v61 = 0;
                    if ((v60 & 0x1000000000000) == 0)
                    {
                      v62 = (v60 >> 50) & 0x3F;
                      if ((_DWORD)v62)
                      {
                        v65 = v62 > 0x34;
                        v68 = (1 << v62) & 0x12400001800284;
                        if (v65 || v68 == 0)
                        {
                          *(_QWORD *)&v208 = v60;
                          v61 = 1;
                        }
                      }
                    }
                    v63 = *(_QWORD *)(v57 + 32);
                    if ((v63 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      if ((v63 & 0x1000000000000) == 0)
                      {
                        v64 = (v63 >> 50) & 0x3F;
                        if ((_DWORD)v64)
                        {
                          v65 = v64 > 0x34;
                          v66 = (1 << v64) & 0x12400001800284;
                          if (v65 || v66 == 0)
                            *((_QWORD *)&v208 + v61++) = v63;
                        }
                      }
                      v53 = *(_QWORD *)(v57 + 40);
                      v54 = (v53 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v53 & 0x1000000000000) == 0;
                      v55 = (v53 >> 50) & 0x3F;
                      if (v54 && (_DWORD)v55 != 0)
                      {
                        v65 = v55 > 0x34;
                        v115 = (1 << v55) & 0x12400001800284;
                        if (v65 || v115 == 0)
                          *((_QWORD *)&v208 + v61) = v53;
                      }
                    }
                  }
                  *(_OWORD *)(v57 + 24) = v208;
                  *(_QWORD *)(v57 + 40) = v209;
                  *(_WORD *)(v57 + 18) = 24;
                  *(_DWORD *)(v57 + 56) = 8;
LABEL_52:
                  *(_DWORD *)(v57 + 52) = 1;
                  v41 = *(unsigned int *)(v27 + 220);
LABEL_53:
                  if (++v42 >= v41)
                    goto LABEL_29;
                  continue;
                }
                v182 = v26;
                v184 = v19;
                v165 = *(_QWORD *)(v57 + 72);
                *(_QWORD *)&v208 = 0;
                v166 = *(unsigned int *)(v165 + 12);
                if ((_DWORD)v166)
                {
                  v167 = *(uint64_t **)v165;
                  __srcb = (char *)(16 * v166);
                  do
                  {
                    v168 = *v167;
                    if ((v208 & 1) != 0)
                    {
                      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)&v208, v168);
                    }
                    else if (v168 != (v208 & 0xFFFFFFFFFFFFFFFCLL))
                    {
                      v169 = *v167;
                      if ((v208 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                      {
                        v170 = WTF::fastMalloc((WTF *)0x28);
                        *(_QWORD *)v170 = 0x400000002;
                        v171 = v208;
                        *(_QWORD *)(v170 + 8) = v208 & 0xFFFFFFFFFFFFFFFCLL;
                        *(_QWORD *)(v170 + 16) = v169;
                        *(_QWORD *)&v208 = v171 & 2 | (unint64_t)v170 | 1;
                      }
                      else
                      {
                        *(_QWORD *)&v208 = v208 & 2 | v168;
                      }
                    }
                    v167 += 2;
                    __srcb -= 16;
                  }
                  while (__srcb);
                }
                v172 = JSC::DFG::Graph::addStructureSet((uint64_t)v58, (unint64_t *)&v208);
                *(_WORD *)(v57 + 18) = 132;
                *(_DWORD *)(v57 + 56) = 8;
                *(_QWORD *)(v57 + 72) = v172;
                if ((v208 & 1) != 0)
                  WTF::fastFree(v208 & 0xFFFFFFFFFFFFFFFCLL, v18, v173, v20, v21, v22, v23, v24);
                v10 = (unsigned __int8 *)g_config;
              }
              v26 = v182;
            }
            break;
          }
          v19 = v184;
          goto LABEL_52;
        }
        v41 = 0;
LABEL_29:
        v43 = HIDWORD(v199);
        if (HIDWORD(v199))
        {
          v44 = v10;
          v45 = HIDWORD(v199) + v41;
          v46 = *(unsigned int *)(v27 + 216);
          if (v45 > v46)
          {
            v111 = v46 + (v46 >> 2);
            if (v111 >= 0x10)
              v112 = v111 + 1;
            else
              v112 = 16;
            if (v112 <= v45)
              v113 = HIDWORD(v199) + v41;
            else
              v113 = v112;
            v183 = (uint64_t)v19;
            __src = *(void **)(v27 + 208);
            v181 = v26;
            if (v113 < 9)
            {
              v114 = (void *)(v27 + 224);
              *(_QWORD *)(v27 + 208) = v27 + 224;
              *(_DWORD *)(v27 + 216) = 8;
            }
            else
            {
              if (v113 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1983B44A0);
              }
              v114 = (void *)WTF::fastMalloc((WTF *)(8 * v113));
              *(_DWORD *)(v27 + 216) = v113;
              *(_QWORD *)(v27 + 208) = v114;
            }
            memcpy(v114, __src, 8 * v41);
            v26 = v181;
            v19 = (unint64_t *)v183;
            if ((void *)(v27 + 224) != __src && __src)
            {
              if (*(void **)(v27 + 208) == __src)
              {
                *(_QWORD *)(v27 + 208) = 0;
                *(_DWORD *)(v27 + 216) = 0;
              }
              WTF::fastFree((unint64_t)__src, v18, v183, v20, v21, v22, v23, v24);
              v26 = v181;
              v19 = (unint64_t *)v183;
            }
          }
          *(_DWORD *)(v27 + 220) = v45;
          if (v43 - 1 >= (unint64_t)HIDWORD(v199))
          {
            __break(0xC471u);
            JUMPOUT(0x1983B4498);
          }
          v47 = v45;
          v48 = ~v43;
          v49 = v45;
          v10 = v44;
          do
          {
            --v43;
            v50 = *((_QWORD *)v198 + 2 * v43) + v43;
            v51 = v49 - 1;
            if (v49 - 1 > v50)
            {
              v52 = v49 + v48;
              do
              {
                if (v47 <= v52)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983B4450);
                }
                if (v47 <= v51)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1983B4458);
                }
                *(_QWORD *)(*(_QWORD *)(v27 + 208) + 8 * v51--) = *(_QWORD *)(*(_QWORD *)(v27 + 208) + 8 * v52--);
              }
              while (v51 > v50);
            }
            if (v47 <= v50)
            {
              __break(0xC471u);
              JUMPOUT(0x1983B4488);
            }
            *(_QWORD *)(*(_QWORD *)(v27 + 208) + 8 * v50) = *((_QWORD *)v198 + 2 * v43 + 1);
            ++v48;
            v49 = v50;
          }
          while (v43);
          HIDWORD(v199) = 0;
        }
      }
      ++v25;
    }
    while (v25 != v19);
    v25 = v204;
  }
  if (v25)
  {
    v204 = 0;
    v205 = 0;
    WTF::fastFree((unint64_t)v25, v18, (uint64_t)v19, v20, v21, v22, v23, v24);
  }
  v70 = v193;
  v71 = *((_QWORD *)v193 + 55);
  if (!v71)
  {
    v74 = 0;
    v72 = 0;
LABEL_139:
    v73 = v71 + 88 * v72;
    goto LABEL_85;
  }
  v72 = *(_DWORD *)(v71 - 4);
  v73 = v71 + 88 * v72;
  if (!*(_DWORD *)(v71 - 12))
  {
    v74 = v71 + 88 * v72;
    goto LABEL_139;
  }
  v74 = *((_QWORD *)v193 + 55);
  if (v72)
  {
    v75 = 88 * v72;
    v74 = *((_QWORD *)v193 + 55);
    while ((unint64_t)(*(_QWORD *)v74 + 1) <= 1)
    {
      v74 += 88;
      v75 -= 88;
      if (!v75)
      {
        v74 = v73;
        break;
      }
    }
  }
LABEL_85:
  if (v71)
    v71 += 88 * *(unsigned int *)(v71 - 4);
  if (v71 != v74)
  {
    do
    {
      v174 = *(unsigned int *)(v74 + 20);
      if ((_DWORD)v174)
      {
        v175 = v174 - 1;
        do
        {
          v176 = v175;
          v177 = *(_QWORD *)(v74 + 8);
          v178 = *(_QWORD *)(v177 + 8 * v175);
          if (v178 && (*(_WORD *)(v178 + 18) == 24 || !*(_DWORD *)(v178 + 52)))
            *(_QWORD *)(v177 + 8 * v175) = 0;
          --v175;
        }
        while (v176);
      }
      v179 = v74 + 88;
      v74 = v73;
      if (v179 != v73)
      {
        v74 = v179;
        while ((unint64_t)(*(_QWORD *)v74 + 1) <= 1)
        {
          v74 += 88;
          if (v74 == v73)
          {
            v74 = v73;
            break;
          }
        }
      }
    }
    while (v74 != v71);
    v70 = v193;
  }
  v76 = *((_DWORD *)v70 + 15);
  if (v76)
  {
LABEL_89:
    if (*((_DWORD *)v193 + 15) <= --v76)
    {
      __break(0xC471u);
      JUMPOUT(0x1983B4470);
    }
    v77 = *(_QWORD *)(*((_QWORD *)v193 + 6) + 8 * v76);
    if (!v77)
      goto LABEL_103;
    v78 = *(unsigned int *)(v77 + 220);
    if (!(_DWORD)v78)
    {
      LODWORD(v80) = 0;
      goto LABEL_102;
    }
    v79 = 0;
    v80 = 0;
    while (1)
    {
      v81 = *(_QWORD *)(v77 + 208);
      v82 = *(_QWORD *)(v81 + 8 * v79);
      v83 = *(unsigned __int16 *)(v82 + 18);
      if ((v83 - 23) < 2)
      {
        v84 = *(_QWORD *)(v82 + 24);
      }
      else
      {
        if (v83 != 25)
          goto LABEL_96;
        v84 = *(_QWORD *)(v82 + 24);
        if ((*(_BYTE *)(v82 + 56) & 0x10) != 0)
        {
          v120 = *(_DWORD *)(v82 + 32);
          v121 = (v120 + v84);
          if (v121 <= v84)
            goto LABEL_93;
          v122 = *((_DWORD *)v193 + 41);
          v123 = v122 >= v84;
          v124 = v122 - v84;
          if (!v123)
            v124 = 0;
          if (v124 <= v120 - 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1983B4480);
          }
          v125 = v121 - v84;
          v126 = (uint64_t *)(*((_QWORD *)v193 + 19) + 8 * v84);
          v127 = 1;
          do
          {
            v128 = *v126++;
            if ((v128 & 0xFF00FFFFFFFFFFFFLL) != 0)
              v127 = 0;
            --v125;
          }
          while (v125);
          if (v127)
            goto LABEL_93;
LABEL_96:
          if (v78 <= v80)
          {
            __break(0xC471u);
            JUMPOUT(0x1983B442CLL);
          }
          *(_QWORD *)(v81 + 8 * v80++) = v82;
          goto LABEL_93;
        }
      }
      if ((v84 & 0xFF00FFFFFFFFFFFFLL) != 0)
        goto LABEL_96;
LABEL_93:
      if (++v79 == v78)
      {
        if (v78 < v80)
        {
          v85 = *(unsigned int *)(v77 + 216);
          if (v85 < v80)
          {
            v86 = v10;
            v87 = v85 + (v85 >> 2);
            if (v87 >= 0x10)
              v88 = v87 + 1;
            else
              v88 = 16;
            if (v88 <= v80)
              v89 = v80;
            else
              v89 = v88;
            v90 = *(const void **)(v77 + 208);
            if (v89 < 9)
            {
              v91 = (void *)(v77 + 224);
              *(_QWORD *)(v77 + 208) = v77 + 224;
              *(_DWORD *)(v77 + 216) = 8;
            }
            else
            {
              if (v89 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1983B4490);
              }
              v91 = (void *)WTF::fastMalloc((WTF *)(8 * v89));
              *(_DWORD *)(v77 + 216) = v89;
              *(_QWORD *)(v77 + 208) = v91;
            }
            memcpy(v91, v90, 8 * v78);
            v10 = v86;
            if ((const void *)(v77 + 224) != v90 && v90)
            {
              if (*(const void **)(v77 + 208) == v90)
              {
                *(_QWORD *)(v77 + 208) = 0;
                *(_DWORD *)(v77 + 216) = 0;
              }
              WTF::fastFree((unint64_t)v90, v92, v93, v94, v95, v96, v97, v98);
            }
          }
        }
LABEL_102:
        *(_DWORD *)(v77 + 220) = v80;
LABEL_103:
        if (!v76)
        {
          v70 = v193;
          break;
        }
        goto LABEL_89;
      }
    }
  }
  *((_DWORD *)v70 + 239) = 1;
  if (v10[810] | v10[803]
    || (v10[811] ? (v99 = (*(_DWORD *)(*((_QWORD *)v70 + 3) + 16) & 0xFFFFFFFE) == 4) : (v99 = 0),
        !v99 ? (v100 = v10[812] == 0) : (v100 = 0),
        !v100))
  {
    v208 = v194;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v70 + 1088, "Phase ", (uint64_t)&v208, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v201);
  v108 = v198;
  if (v200 != (_BYTE *)v198 && v198)
  {
    v198 = 0;
    LODWORD(v199) = 0;
    WTF::fastFree((unint64_t)v108, v101, v102, v103, v104, v105, v106, v107);
  }
  if (v10[817] && !v195)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v189, (uint64_t)v101, v102, v103, v104, v105, v106, v107);
  v109 = v196;
  v196 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 1)
      WTF::fastFree((unint64_t)v109, v101, v102, v103, v104, v105, v106, v107);
    else
      --*(_DWORD *)v109;
  }
  return 1;
}

uint64_t JSC::DFG::DesiredGlobalProperties::isStillValidOnMainThread(JSC::DFG::DesiredGlobalProperties *this, JSC::VM *a2, JSC::DFG::DesiredIdentifiers *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  char v15;
  uint64_t v17;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unsigned int *v23;
  char *v24;
  uint64_t v25;
  unsigned int *v26;
  int v27;
  unsigned int *v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v34;
  _BOOL4 v35;
  int v36;
  WTF::StringImpl *v37;
  double v38;
  _DWORD *v39;
  _DWORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  int v46;
  _BYTE *v47;
  unsigned int *v48;
  unint64_t v49;
  uint64_t v50;

  v10 = *(_DWORD **)this;
  if (!*(_QWORD *)this)
  {
    v11 = 0;
    v12 = 0;
LABEL_3:
    v13 = &v10[4 * v12];
    goto LABEL_4;
  }
  v12 = *(v10 - 1);
  v13 = &v10[4 * v12];
  if (!*(v10 - 3))
  {
    v11 = &v10[4 * v12];
    goto LABEL_3;
  }
  v11 = *(_DWORD **)this;
  if ((_DWORD)v12)
  {
    v17 = 16 * v12;
    v11 = *(_DWORD **)this;
    while (!*(_QWORD *)v11 && (v11[2] + 1) <= 1)
    {
      v11 += 4;
      v17 -= 16;
      if (!v17)
      {
        v11 = v13;
        break;
      }
    }
  }
LABEL_4:
  if (v10)
    v14 = &v10[4 * *(v10 - 1)];
  else
    v14 = 0;
  if (v14 != v11)
  {
    v15 = 1;
    while (1)
    {
      v19 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 104);
      v20 = v19 ? *v19 : 0;
      v21 = v11[2];
      v22 = *(_BYTE **)(*(_QWORD *)a3 + 120);
      if (v22 && (v22[12] & 0xFE) == 4)
      {
        v23 = *(unsigned int **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v22 + 72))(v22) + 48);
        if (v23)
          v23 = (unsigned int *)*v23;
      }
      else
      {
        v23 = 0;
      }
      v24 = (char *)v23 + v20;
      v25 = *(_QWORD *)a3;
      v26 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 104);
      if ((unint64_t)v24 > v21)
        break;
      if (v26)
        v50 = *v26;
      else
        v50 = 0;
      v47 = *(_BYTE **)(v25 + 120);
      if (v47 && (v47[12] & 0xFE) == 4)
      {
        v48 = *(unsigned int **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v47 + 72))(v47) + 48);
        if (v48)
          v48 = (unsigned int *)*v48;
      }
      else
      {
        v48 = 0;
      }
      v49 = v21 - ((_QWORD)v48 + v50);
      if (v49 >= *((unsigned int *)a3 + 5))
      {
LABEL_82:
        __break(0xC471u);
        JUMPOUT(0x1983B4880);
      }
      v29 = (WTF::StringImpl **)(*((_QWORD *)a3 + 1) + 8 * v49);
LABEL_30:
      v30 = *v29;
      v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 72) + 24);
      v32 = (unsigned __int8 *)(v31 + 20);
      if (__ldaxr((unsigned __int8 *)(v31 + 20)))
      {
        __clrex();
LABEL_32:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v31 + 20);
        goto LABEL_33;
      }
      if (__stxr(1u, v32))
        goto LABEL_32;
LABEL_33:
      v34 = *(_QWORD *)(v31 + 8);
      if (v34)
      {
        v42 = *((_DWORD *)v30 + 4);
        if ((v42 & 0x20) != 0)
          v42 = *((_DWORD *)v30 + 8);
        v43 = *(_DWORD *)(v34 - 8);
        v44 = v43 & (v42 >> 8);
        v45 = *(WTF::StringImpl **)(v34 + 16 * v44);
        if (v45 == v30)
        {
          v35 = 1;
        }
        else
        {
          v46 = 1;
          do
          {
            v35 = v45 != 0;
            if (!v45)
              break;
            v44 = (v44 + v46) & v43;
            v45 = *(WTF::StringImpl **)(v34 + 16 * v44);
            ++v46;
          }
          while (v45 != v30);
        }
      }
      else
      {
        v35 = 0;
      }
      v36 = __ldxr(v32);
      if (v36 == 1)
      {
        if (!__stlxr(0, v32))
          goto LABEL_40;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v32, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_40:
      if (v35)
      {
        v37 = JSC::JSGlobalObject::ensureReferencedPropertyWatchpointSet(*(_QWORD *)v11, v30, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*((_BYTE *)v37 + 4) == 1)
          JSC::WatchpointSet::fireAllSlow(v37, a2, "Lexical binding shadows an existing global property", a4, a5, a6, a7, a8, v38);
        v15 = 0;
      }
      v39 = v11 + 4;
      v11 = v13;
      if (v39 != v13)
      {
        v11 = v39;
        while (!*(_QWORD *)v11 && (v11[2] + 1) <= 1)
        {
          v11 += 4;
          if (v11 == v13)
          {
            v11 = v13;
            break;
          }
        }
      }
      if (v11 == v14)
        return v15 & 1;
    }
    if (v26)
    {
      v27 = *v26;
      if (*v26 > v21)
      {
        v28 = &v26[2 * v21];
LABEL_29:
        v29 = (WTF::StringImpl **)(v28 + 2);
        goto LABEL_30;
      }
    }
    else
    {
      v27 = 0;
    }
    v41 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 120) + 72))(*(_QWORD *)(v25 + 120)) + 48);
    if (*v41 <= (v21 - v27))
      goto LABEL_82;
    v28 = &v41[2 * (v21 - v27)];
    goto LABEL_29;
  }
  v15 = 1;
  return v15 & 1;
}

uint64_t JSC::DFG::DesiredIdentifiers::at(JSC::DFG::DesiredIdentifiers *this, unsigned int a2)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  _DWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  _BYTE *v18;
  unsigned int *v19;
  unint64_t v20;

  v4 = a2;
  v5 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)this + 56) + 104);
  if (v5)
    v6 = *v5;
  else
    v6 = 0;
  v7 = *(_BYTE **)(*(_QWORD *)this + 120);
  if (v7 && (v7[12] & 0xFE) == 4)
  {
    v8 = *(unsigned int **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v7 + 72))(v7) + 48);
    if (v8)
      v8 = (unsigned int *)*v8;
  }
  else
  {
    v8 = 0;
  }
  if ((unint64_t)v8 + v6 <= v4)
  {
    v16 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)this + 56) + 104);
    if (v16)
      v17 = *v16;
    else
      v17 = 0;
    v18 = *(_BYTE **)(*(_QWORD *)this + 120);
    if (v18 && (v18[12] & 0xFE) == 4)
    {
      v19 = *(unsigned int **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v18 + 72))(v18) + 48);
      if (v19)
        v19 = (unsigned int *)*v19;
    }
    else
    {
      v19 = 0;
    }
    v20 = v4 - ((_QWORD)v19 + v17);
    if (v20 < *((unsigned int *)this + 5))
    {
      v13 = *((_QWORD *)this + 1) + 8 * v20;
      return *(_QWORD *)v13;
    }
    goto LABEL_28;
  }
  v9 = *(_QWORD *)this;
  v10 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)this + 56) + 104);
  if (!v10)
  {
    v11 = 0;
LABEL_14:
    v15 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120)) + 48);
    if (*v15 > v4 - v11)
    {
      v12 = &v15[2 * (v4 - v11)];
      goto LABEL_10;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x1983B4A08);
  }
  v11 = *v10;
  if (*v10 <= a2)
    goto LABEL_14;
  v12 = &v10[2 * v4];
LABEL_10:
  v13 = (uint64_t)(v12 + 2);
  return *(_QWORD *)v13;
}

uint64_t JSC::DFG::DesiredGlobalProperties::reallyAdd(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unsigned int *v28;
  char *v29;
  uint64_t v30;
  unsigned int *v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _QWORD *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v47;
  _BYTE *v48;
  unsigned int *v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  WTF::StringImpl *v53;
  uint64_t v54;

  v11 = *a1;
  if (!*a1)
  {
    v12 = 0;
    v13 = 0;
LABEL_3:
    v14 = v11 + 16 * v13;
    goto LABEL_4;
  }
  v13 = *(unsigned int *)(v11 - 4);
  v14 = v11 + 16 * v13;
  if (!*(_DWORD *)(v11 - 12))
  {
    v12 = v11 + 16 * v13;
    goto LABEL_3;
  }
  v12 = *a1;
  if ((_DWORD)v13)
  {
    v17 = 16 * v13;
    v12 = *a1;
    while (!*(_QWORD *)v12 && (*(_DWORD *)(v12 + 8) + 1) <= 1)
    {
      v12 += 16;
      v17 -= 16;
      if (!v17)
      {
        v12 = v14;
        break;
      }
    }
  }
LABEL_4:
  if (v11)
    v15 = v11 + 16 * *(unsigned int *)(v11 - 4);
  else
    v15 = 0;
  if (v15 == v12)
    return 1;
  v19 = *(unsigned __int8 *)(a4 + 24);
  if (v19 == 1)
  {
    v20 = (unsigned __int8 *)(a2 + 16);
    while (1)
    {
      if (v19 != 1)
      {
        ++*(_DWORD *)a4;
        goto LABEL_22;
      }
      v23 = *(_DWORD *)(a4 + 12);
      *(_DWORD *)(a4 + 12) = v23 + 1;
      if (**(_DWORD **)(a4 + 32) <= v23)
        goto LABEL_85;
      v24 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 104);
      v54 = *(_QWORD *)(a4 + 32);
      if (v24)
        v25 = *v24;
      else
        v25 = 0;
      v26 = *(unsigned int *)(v12 + 8);
      v27 = *(_BYTE **)(*(_QWORD *)a3 + 120);
      if (v27 && (v27[12] & 0xFE) == 4)
      {
        v51 = v20;
        v28 = *(unsigned int **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v27 + 72))(v27) + 48);
        if (v28)
          v28 = (unsigned int *)*v28;
        v20 = v51;
      }
      else
      {
        v28 = 0;
      }
      v29 = (char *)v28 + v25;
      v30 = *(_QWORD *)a3;
      v31 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 104);
      if ((unint64_t)v29 <= v26)
      {
        if (v31)
          v47 = *v31;
        else
          v47 = 0;
        v48 = *(_BYTE **)(v30 + 120);
        if (v48 && (v48[12] & 0xFE) == 4)
        {
          v52 = v20;
          v49 = *(unsigned int **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v48 + 72))(v48) + 48);
          if (v49)
            v49 = (unsigned int *)*v49;
          v20 = v52;
        }
        else
        {
          v49 = 0;
        }
        v50 = v26 - ((_QWORD)v49 + v47);
        if (v50 >= *(unsigned int *)(a3 + 20))
        {
LABEL_85:
          __break(0xC471u);
          JUMPOUT(0x1983B4DD4);
        }
        v33 = (WTF::StringImpl **)(*(_QWORD *)(a3 + 8) + 8 * v50);
      }
      else
      {
        if (v31)
        {
          v32 = *v31;
          if (*v31 > v26)
          {
            v33 = (WTF::StringImpl **)&v31[2 * v26 + 2];
            goto LABEL_42;
          }
        }
        else
        {
          v32 = 0;
        }
        v42 = v20;
        v43 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 120) + 72))(*(_QWORD *)(v30 + 120))
                         + 48);
        if (*v43 <= (v26 - v32))
        {
          __break(0xC471u);
          JUMPOUT(0x1983B4DF4);
        }
        v33 = (WTF::StringImpl **)&v43[2 * (v26 - v32) + 2];
        v20 = v42;
      }
LABEL_42:
      v53 = *v33;
      v34 = *(_QWORD *)v12;
      if (__ldaxr(v20))
      {
        __clrex();
LABEL_44:
        v36 = v20;
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v20);
        v20 = v36;
        goto LABEL_45;
      }
      if (__stxr(1u, v20))
        goto LABEL_44;
LABEL_45:
      v37 = v54 + 8 + 24 * v23;
      *(_BYTE *)(v37 + 21) = BYTE4(a2);
      *(_DWORD *)(v37 + 17) = a2;
      LODWORD(v37) = __ldxr(v20);
      if ((_DWORD)v37 == 1)
      {
        v38 = v20;
        if (!__stlxr(0, v20))
          goto LABEL_50;
      }
      else
      {
        v38 = v20;
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v38, 0, a3, a4, a5, a6, a7, a8);
LABEL_50:
      v39 = (_QWORD *)(v54 + 8 + 24 * v23);
      v40 = JSC::JSGlobalObject::ensureReferencedPropertyWatchpointSet(v34, v53, a3, a4, a5, a6, a7, a8);
      v41 = *((_QWORD *)v40 + 1);
      v40 = (WTF::StringImpl *)((char *)v40 + 8);
      *v39 = v41;
      v39[1] = v40;
      *(_QWORD *)v40 = v39;
      *(_QWORD *)(v41 + 8) = v39;
      *((_WORD *)v40 - 2) = 257;
      v20 = v38;
LABEL_22:
      v21 = v12 + 16;
      v12 = v14;
      if (v21 != v14)
      {
        v12 = v21;
        while (!*(_QWORD *)v12 && (*(_DWORD *)(v12 + 8) + 1) <= 1)
        {
          v12 += 16;
          if (v12 == v14)
          {
            v12 = v14;
            break;
          }
        }
      }
      if (v12 == v15)
        return 1;
      v19 = *(unsigned __int8 *)(a4 + 24);
    }
  }
  v44 = *(_DWORD *)a4;
  do
  {
    *(_DWORD *)a4 = ++v44;
    v45 = v12 + 16;
    v12 = v14;
    if (v45 != v14)
    {
      v12 = v45;
      while (!*(_QWORD *)v12 && (*(_DWORD *)(v12 + 8) + 1) <= 1)
      {
        v12 += 16;
        if (v12 == v14)
        {
          v12 = v14;
          break;
        }
      }
    }
  }
  while (v12 != v15);
  return 1;
}

uint64_t JSC::DFG::DesiredIdentifiers::ensure(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int *v10;
  int v11;
  _BYTE *v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  _OWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int *v37;
  int v38;
  _BYTE *v39;
  _DWORD *v40;
  unsigned int v41;
  uint64_t *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  int v62;
  _DWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  int *v67;
  uint64_t v68;

  v68 = a2;
  v9 = *a1;
  if (*((_BYTE *)a1 + 32))
    goto LABEL_2;
  v37 = *(int **)(*(_QWORD *)(v9 + 56) + 104);
  if (v37)
    v38 = *v37;
  else
    v38 = 0;
  v39 = *(_BYTE **)(v9 + 120);
  if (v39 && (v39[12] & 0xFE) == 4)
  {
    v40 = *(_DWORD **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v39 + 72))(v39) + 48);
    if (v40)
      LODWORD(v40) = *v40;
  }
  else
  {
    LODWORD(v40) = 0;
  }
  v41 = (_DWORD)v40 + v38;
  if ((_DWORD)v40 + v38)
  {
    v42 = a1 + 3;
    do
    {
      --v41;
      v43 = *(unsigned int **)(*(_QWORD *)(*a1 + 56) + 104);
      if (v43)
      {
        v44 = *v43;
        if (*v43 > v41)
        {
          v45 = &v43[2 * v41];
          goto LABEL_39;
        }
      }
      else
      {
        v44 = 0;
      }
      v63 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 120) + 72))(*(_QWORD *)(*a1 + 120))
                       + 48);
      if (*v63 <= v41 - v44)
      {
        __break(0xC471u);
        JUMPOUT(0x1983B5260);
      }
      v45 = &v63[2 * (v41 - v44)];
LABEL_39:
      v46 = *((_QWORD *)v45 + 1);
      v47 = *v42;
      if (*v42
        || (WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(a1 + 3, 8uLL, 0, a4, a5, a6, a7, a8), (v47 = *v42) != 0))
      {
        v48 = *(_DWORD *)(v47 - 8);
      }
      else
      {
        v48 = 0;
      }
      v49 = (~(v46 << 32) + v46) ^ ((unint64_t)(~(v46 << 32) + v46) >> 22);
      v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
      v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
      v52 = v48 & ((v51 >> 31) ^ v51);
      v53 = v47 + 16 * v52;
      v54 = *(_QWORD *)v53;
      if (*(_QWORD *)v53)
      {
        v61 = 0;
        v62 = 1;
        while (v54 != v46)
        {
          if (v54 == -1)
            v61 = (_QWORD *)v53;
          v52 = (v52 + v62) & v48;
          v53 = v47 + 16 * v52;
          v54 = *(_QWORD *)v53;
          ++v62;
          if (!*(_QWORD *)v53)
          {
            if (v61)
            {
              *v61 = 0;
              v61[1] = 0;
              --*(_DWORD *)(*v42 - 16);
              v53 = (uint64_t)v61;
            }
            goto LABEL_42;
          }
        }
        continue;
      }
LABEL_42:
      *(_QWORD *)v53 = v46;
      *(_DWORD *)(v53 + 8) = v41;
      v55 = *v42;
      if (*v42)
        v56 = *(_DWORD *)(v55 - 12) + 1;
      else
        v56 = 1;
      *(_DWORD *)(v55 - 12) = v56;
      v57 = *v42;
      if (*v42)
        v58 = *(_DWORD *)(v57 - 12);
      else
        v58 = 0;
      v59 = (*(_DWORD *)(v57 - 16) + v58);
      v60 = *(unsigned int *)(v57 - 4);
      if (v60 > 0x400)
      {
        if (v60 > 2 * v59)
          continue;
LABEL_81:
        v64 = ((_DWORD)v60 << (6 * *(_DWORD *)(v57 - 12) >= (2 * v60)));
LABEL_64:
        WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(a1 + 3, v64, v53, a4, a5, a6, a7, a8);
        continue;
      }
      if (3 * v60 <= 4 * v59)
      {
        if ((_DWORD)v60)
          goto LABEL_81;
        v64 = 8;
        goto LABEL_64;
      }
    }
    while (v41);
  }
  *((_BYTE *)a1 + 32) = 1;
  v9 = *a1;
LABEL_2:
  v10 = *(int **)(*(_QWORD *)(v9 + 56) + 104);
  if (v10)
    v11 = *v10;
  else
    v11 = 0;
  v12 = *(_BYTE **)(v9 + 120);
  if (v12
    && (v12[12] & 0xFE) == 4
    && (v67 = *(int **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v12 + 72))(v12) + 48)) != 0)
  {
    v13 = *v67;
  }
  else
  {
    v13 = 0;
  }
  v14 = a1 + 3;
  v15 = *((_DWORD *)a1 + 5);
  v16 = a1[3];
  if (v16
    || (WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(a1 + 3, 8uLL, 0, a4, a5, a6, a7, a8), (v16 = *v14) != 0))
  {
    v17 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v17 = 0;
  }
  v18 = v68;
  v19 = (~(v68 << 32) + v68) ^ ((unint64_t)(~(v68 << 32) + v68) >> 22);
  v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v22 = v17 & ((v21 >> 31) ^ v21);
  v23 = (_OWORD *)(v16 + 16 * v22);
  v24 = *(_QWORD *)v23;
  if (*(_QWORD *)v23)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v24 == v68)
        return *((unsigned int *)v23 + 2);
      if (v24 == -1)
        v25 = v23;
      v22 = (v22 + v26) & v17;
      v23 = (_OWORD *)(v16 + 16 * v22);
      v24 = *(_QWORD *)v23;
      ++v26;
    }
    while (*(_QWORD *)v23);
    if (v25)
    {
      *v25 = 0;
      v25[1] = 0;
      --*(_DWORD *)(*v14 - 16);
      v23 = v25;
    }
  }
  *(_QWORD *)v23 = v18;
  *((_DWORD *)v23 + 2) = v13 + v11 + v15;
  v27 = *v14;
  if (*v14)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *v14;
  if (*v14)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31)
      goto LABEL_23;
    goto LABEL_76;
  }
  if (3 * v32 <= 4 * v31)
  {
    if (!(_DWORD)v32)
    {
      v66 = 8;
LABEL_74:
      v23 = WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(a1 + 3, v66, (uint64_t)v23, a4, a5, a6, a7, a8);
      goto LABEL_23;
    }
LABEL_76:
    v66 = ((_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32)));
    goto LABEL_74;
  }
LABEL_23:
  v33 = *((unsigned int *)v23 + 2);
  v34 = a1 + 1;
  v35 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v35 == *((_DWORD *)a1 + 4))
  {
    v65 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)&v68);
    v35 = *((unsigned int *)a1 + 5);
    *(_QWORD *)(a1[1] + 8 * v35) = *v65;
  }
  else
  {
    *(_QWORD *)(*v34 + 8 * v35) = v68;
  }
  *((_DWORD *)a1 + 5) = v35 + 1;
  return v33;
}

void JSC::DFG::DesiredIdentifiers::reallyAdd(JSC::DFG::DesiredIdentifiers *this, uint64_t **a2, JSC::DFG::CommonData *a3)
{
  uint64_t v3;
  unsigned int *v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::DFG::DesiredIdentifiers *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  unsigned int *v21;
  WTF::StringImpl *v22;
  unsigned __int8 *v23;
  unsigned int *v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  int *v33;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v5 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v3 + 8));
    *v5 = v3;
    bzero(v5 + 2, 8 * v3);
    v13 = this;
    v14 = *((unsigned int *)this + 5);
    if (!(_DWORD)v14)
      goto LABEL_19;
    v15 = 0;
    v16 = *((_QWORD *)v13 + 1);
    v17 = 8 * v14;
    while (1)
    {
      v18 = *(int **)(v16 + 8 * v15);
      v19 = v18[4];
      if ((v19 & 0x20) != 0)
      {
        v20 = *v18 + 2;
      }
      else
      {
        if ((v19 & 0x10) != 0)
        {
          *v18 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(a2[5239], *(_QWORD *)(v16 + 8 * v15), v7, v8, v9, v10, v11, v12, &v33);
          v18 = v33;
        }
        v20 = *v18;
        *v18 += 2;
        if (!v20)
        {
          WTF::StringImpl::destroy((WTF::StringImpl *)v18, v6, (uint64_t)v7, v8, v9, v10, v11, v12);
          goto LABEL_9;
        }
      }
      *v18 = v20;
LABEL_9:
      if (v15 >= *v5)
      {
        __break(0xC471u);
        JUMPOUT(0x1983B54A8);
      }
      v21 = &v5[2 * v15];
      v22 = (WTF::StringImpl *)*((_QWORD *)v21 + 1);
      *((_QWORD *)v21 + 1) = v18;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v6, (uint64_t)v7, v8, v9, v10, v11, v12);
        else
          *(_DWORD *)v22 -= 2;
      }
      ++v15;
      v17 -= 8;
      if (!v17)
      {
        if (!*v5)
        {
          WTF::fastFree((unint64_t)v5, v6, (uint64_t)v7, v8, v9, v10, v11, v12);
          return;
        }
LABEL_19:
        v23 = (unsigned __int8 *)(*(_QWORD *)v13 + 16);
        if (__ldaxr(v23))
        {
          __clrex();
          goto LABEL_21;
        }
        if (__stxr(1u, v23))
LABEL_21:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v23);
        v25 = (unsigned int *)*((_QWORD *)a3 + 6);
        *((_QWORD *)a3 + 6) = v5;
        if (v25)
        {
          v27 = (WTF::StringImpl **)(v25 + 2);
          v26 = *v25;
          if ((_DWORD)v26)
          {
            v28 = 8 * v26;
            do
            {
              v29 = *v27;
              *v27 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v6, (uint64_t)v7, v8, v9, v10, v11, v12);
                else
                  *(_DWORD *)v29 -= 2;
              }
              ++v27;
              v28 -= 8;
            }
            while (v28);
          }
          WTF::fastFree((unint64_t)v25, v6, (uint64_t)v7, v8, v9, v10, v11, v12);
        }
        v30 = __ldxr(v23);
        if (v30 == 1)
        {
          if (!__stlxr(0, v23))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v23, 0, (uint64_t)v7, v8, v9, v10, v11, v12);
        return;
      }
    }
  }
}

void JSC::DFG::DesiredTransitions::reallyAdd(JSC::DFG::DesiredTransitions *this, JSC::VM *a2, JSC::DFG::CommonData *a3)
{
  uint64_t v3;
  unsigned int *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::DFG::DesiredTransitions *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned __int8 *v26;
  unint64_t v28;
  int v29;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v5 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v3 + 8));
    *v5 = v3;
    bzero(v5 + 2, 24 * ((24 * v3 - 24) / 0x18uLL) + 24);
    v13 = this;
    if (*((_DWORD *)this + 5))
    {
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)v13;
        v17 = (uint64_t *)(*((_QWORD *)v13 + 1) + v14 * 4);
        v18 = *v17;
        v19 = v17[1];
        v20 = v17[2];
        if (*(_QWORD *)v13)
          v21 = v19 == 0;
        else
          v21 = 1;
        if (!v21 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v16 + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, *(_QWORD *)v13);
        if (v16)
          v22 = v20 == 0;
        else
          v22 = 1;
        if (!v22 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v16 + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v16);
        if (v16)
          v23 = v18 == 0;
        else
          v23 = 1;
        if (!v23 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v16 + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v16);
        v24 = *v5;
        if (v15 >= v24)
        {
          __break(0xC471u);
          JUMPOUT(0x1983B5658);
        }
        v25 = &v5[v14];
        *((_QWORD *)v25 + 1) = v18;
        *((_QWORD *)v25 + 2) = v19;
        *((_QWORD *)v25 + 3) = v20;
        ++v15;
        v14 += 6;
      }
      while (v15 < *((unsigned int *)v13 + 5));
      if (!(_DWORD)v24)
      {
        WTF::fastFree((unint64_t)v5, v6, v7, v8, v9, v10, v11, v12);
        return;
      }
    }
    v26 = (unsigned __int8 *)(*(_QWORD *)v13 + 16);
    if (__ldaxr(v26))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
LABEL_25:
      v28 = *((_QWORD *)a3 + 7);
      *((_QWORD *)a3 + 7) = v5;
      if (v28)
        WTF::fastFree(v28, v6, v7, v8, v9, v10, v11, v12);
      v29 = __ldxr(v26);
      if (v29 == 1)
      {
        if (!__stlxr(0, v26))
          return;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v26, 0, v7, v8, v9, v10, v11, v12);
      return;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v26);
    goto LABEL_25;
  }
}

void JSC::DFG::DesiredWatchpoints::~DesiredWatchpoints(JSC::DFG::DesiredWatchpoints *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *((_QWORD *)this + 12);
  if (v9)
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 10);
  if (v10)
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_QWORD *)this + 8);
  if (v11)
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 6);
  if (v12)
    WTF::fastFree(v12 - 16, a2, a3, a4, a5, a6, a7, a8);
  v13 = *((_QWORD *)this + 4);
  if (v13)
    WTF::fastFree(v13 - 16, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 2);
  if (v14)
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)this)
    WTF::fastFree(*(_QWORD *)this - 16, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *JSC::DFG::DesiredWatchpoints::addLazily(_QWORD *this, JSC::InlineWatchpointSet *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  JSC::InlineWatchpointSet **v16;
  JSC::InlineWatchpointSet *v17;
  JSC::InlineWatchpointSet **v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v10 = this + 2;
  v9 = this[2];
  if (v9
    || (this = WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(this + 2, 8uLL, 0, a4, a5, a6, a7, a8), (v9 = *v10) != 0))
  {
    v11 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = (JSC::InlineWatchpointSet **)(v9 + 8 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_11:
    *v16 = a2;
    v20 = *v10;
    if (*v10)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v10;
    if (*v10)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        return this;
    }
    else
    {
      if (3 * v25 > 4 * v24)
        return this;
      if (!(_DWORD)v25)
      {
        v26 = 8;
        return WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v10, v26, (uint64_t)v16, a4, a5, a6, a7, a8);
      }
    }
    v26 = ((_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25)));
    return WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v10, v26, (uint64_t)v16, a4, a5, a6, a7, a8);
  }
  v18 = 0;
  v19 = 1;
  while (v17 != a2)
  {
    if (v17 == (JSC::InlineWatchpointSet *)-1)
      v18 = v16;
    v15 = (v15 + v19) & v11;
    v16 = (JSC::InlineWatchpointSet **)(v9 + 8 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        --*(_DWORD *)(*v10 - 16);
        v16 = v18;
      }
      goto LABEL_11;
    }
  }
  return this;
}

uint64_t *JSC::DFG::DesiredWatchpoints::addLazily(JSC::DFG::DesiredWatchpoints *this, JSC::DFG::Graph *a2, JSC::FunctionExecutable *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::FunctionExecutable *v16;
  _BYTE v17[24];

  v16 = a3;
  JSC::DFG::Graph::freezeStrong((uint64_t)a2, (unint64_t)a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  return WTF::HashTable<JSC::FunctionExecutable *,JSC::FunctionExecutable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::FunctionExecutable *>,WTF::HashTraits<JSC::FunctionExecutable *>,WTF::HashTraits<JSC::FunctionExecutable *>>::add((uint64_t *)this + 6, (uint64_t *)&v16, v9, v10, v11, v12, v13, v14, (uint64_t)v17);
}

uint64_t JSC::DFG::DesiredWatchpoints::consider(JSC::DFG::DesiredWatchpoints *this, JSC::Structure *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  char **v17;
  char *v18;
  char **v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v28;

  if ((*((_BYTE *)a2 + 19) & 0xC) == 0)
  {
    v9 = (char *)a2 + 96;
    v8 = *((_QWORD *)a2 + 12);
    if ((v8 & 1) != 0)
    {
      if (((v8 >> 1) & 3) != 2)
        goto LABEL_4;
    }
    else if (*(_BYTE *)(v8 + 4) != 2)
    {
LABEL_4:
      v11 = (uint64_t *)((char *)this + 16);
      v10 = *((_QWORD *)this + 2);
      if (v10
        || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v11, 8uLL, 0, a4, a5, a6, a7, a8), (v10 = *v11) != 0))
      {
        v12 = *(_DWORD *)(v10 - 8);
      }
      else
      {
        v12 = 0;
      }
      v13 = (unint64_t)&v9[~((_QWORD)v9 << 32)] ^ ((unint64_t)&v9[~((_QWORD)v9 << 32)] >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = (char **)(v10 + 8 * v16);
      v18 = *v17;
      if (*v17)
      {
        v19 = 0;
        v20 = 1;
        while (v18 != v9)
        {
          if (v18 == (char *)-1)
            v19 = v17;
          v16 = (v16 + v20) & v12;
          v17 = (char **)(v10 + 8 * v16);
          v18 = *v17;
          ++v20;
          if (!*v17)
          {
            if (v19)
            {
              *v19 = 0;
              --*(_DWORD *)(*v11 - 16);
              v17 = v19;
            }
            goto LABEL_14;
          }
        }
        return 1;
      }
LABEL_14:
      *v17 = v9;
      v21 = *v11;
      if (*v11)
        v22 = *(_DWORD *)(v21 - 12) + 1;
      else
        v22 = 1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v11;
      if (*v11)
        v24 = *(_DWORD *)(v23 - 12);
      else
        v24 = 0;
      v25 = (*(_DWORD *)(v23 - 16) + v24);
      v26 = *(unsigned int *)(v23 - 4);
      if (v26 > 0x400)
      {
        if (v26 > 2 * v25)
          return 1;
      }
      else
      {
        if (3 * v26 > 4 * v25)
          return 1;
        if (!(_DWORD)v26)
        {
          v28 = 8;
LABEL_27:
          WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v11, v28, (uint64_t)v17, a4, a5, a6, a7, a8);
          return 1;
        }
      }
      v28 = ((_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26)));
      goto LABEL_27;
    }
  }
  return 0;
}

void JSC::DFG::DesiredWatchpoints::countWatchpoints(JSC::DFG::DesiredWatchpoints *this, JSC::CodeBlock *a2, JSC::DFG::DesiredIdentifiers *a3, JSC::DFG::CommonData *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  _DWORD *v51;
  unsigned int *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  unint64_t v73;
  _DWORD *v74;
  WTF *v75;
  _DWORD *v76;
  uint64_t v77;
  _DWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  uint64_t v84;

  v79 = 0;
  v80 = 0;
  v82 = 0;
  v81 = 0;
  v12 = *(_OWORD *)((char *)a4 + 88);
  *((_QWORD *)a4 + 11) = 0;
  *((_QWORD *)a4 + 12) = 0;
  v83 = v12;
  v13 = *((_QWORD *)a4 + 13);
  *((_QWORD *)a4 + 13) = 0;
  v84 = v13;
  JSC::DFG::GenericDesiredWatchpoints<JSC::WatchpointSet *,JSC::DFG::SetPointerAdaptor<JSC::WatchpointSet *>>::reallyAdd((uint64_t)this, (unint64_t)a2, (uint64_t)&v79, (uint64_t)a4, a5, a6, a7, a8);
  JSC::DFG::GenericDesiredWatchpoints<JSC::InlineWatchpointSet *,JSC::DFG::SetPointerAdaptor<JSC::InlineWatchpointSet *>>::reallyAdd((uint64_t)this + 16, (unint64_t)a2, (uint64_t)&v79, v14, v15, v16, v17, v18);
  JSC::DFG::GenericDesiredWatchpoints<JSC::SymbolTable *,JSC::DFG::SymbolTableAdaptor>::reallyAdd((uint64_t)this + 32, (unint64_t)a2, (int *)&v79);
  JSC::DFG::GenericDesiredWatchpoints<JSC::FunctionExecutable *,JSC::DFG::FunctionExecutableAdaptor>::reallyAdd((uint64_t)this + 48, (unint64_t)a2, (int *)&v79);
  JSC::DFG::GenericDesiredWatchpoints<JSC::JSArrayBufferView *,JSC::DFG::ArrayBufferViewWatchpointAdaptor>::reallyAdd((uint64_t)this + 64, (unint64_t)a2, (uint64_t)&v79, v19, v20, v21, v22, v23, v24);
  JSC::DFG::GenericDesiredWatchpoints<JSC::ObjectPropertyCondition,JSC::DFG::AdaptiveStructureWatchpointAdaptor>::reallyAdd((uint64_t *)this + 10, (uint64_t)a2, (uint64_t)&v79, v25, v26, v27, v28, v29);
  JSC::DFG::DesiredGlobalProperties::reallyAdd((uint64_t *)this + 12, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v79, v30, v31, v32, v33);
  v41 = 0;
  v42 = v79;
  v43 = v80;
  if ((_DWORD)v79)
  {
    v75 = (WTF *)(24 * v79 + 8);
    v76 = (_DWORD *)WTF::fastMalloc(v75);
    v41 = v76;
    *v76 = v42;
    v77 = 2;
    do
    {
      v78 = &v76[v77];
      *(_QWORD *)v78 = 0;
      *((_QWORD *)v78 + 1) = 0;
      *((_BYTE *)v78 + 16) = 2;
      *((_BYTE *)v78 + 21) = 0;
      *(_DWORD *)((char *)v78 + 17) = 0;
      v77 += 6;
    }
    while (v78 + 6 != (_DWORD *)((char *)v76 + (_QWORD)v75));
  }
  v44 = (unsigned int *)*((_QWORD *)a4 + 11);
  *((_QWORD *)a4 + 11) = v41;
  if (v44)
  {
    v45 = (uint64_t *)(v44 + 2);
    v46 = *v44;
    if ((_DWORD)v46)
    {
      v47 = 24 * v46;
      do
      {
        v48 = (uint64_t *)v45[1];
        if (v48)
        {
          v49 = *v45;
          *v48 = *v45;
          *(_QWORD *)(v49 + 8) = v48;
          *v45 = 0;
          v45[1] = 0;
        }
        v45 += 3;
        v47 -= 24;
      }
      while (v47);
    }
    WTF::fastFree((unint64_t)v44, v34, v35, v36, v37, v38, v39, v40);
  }
  v50 = HIDWORD(v42);
  if (HIDWORD(v42))
  {
    v67 = 3 * HIDWORD(v42);
    v68 = 48 * HIDWORD(v42);
    v69 = v50;
    v51 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * (v67 & 0x3FFFFFFFFLL)) | 8));
    v70 = 0;
    *v51 = v69;
    do
    {
      JSC::DFG::AdaptiveStructureWatchpoint::AdaptiveStructureWatchpoint((uint64_t)&v51[v70 / 4 + 2]);
      v70 += 48;
    }
    while (v68 != v70);
  }
  else
  {
    v51 = 0;
  }
  v52 = (unsigned int *)*((_QWORD *)a4 + 12);
  *((_QWORD *)a4 + 12) = v51;
  if (v52)
  {
    v53 = (uint64_t *)(v52 + 2);
    v54 = *v52;
    if ((_DWORD)v54)
    {
      v55 = 48 * v54;
      do
      {
        v56 = (uint64_t *)v53[1];
        if (v56)
        {
          v57 = *v53;
          *v56 = *v53;
          *(_QWORD *)(v57 + 8) = v56;
          *v53 = 0;
          v53[1] = 0;
        }
        v53 += 6;
        v55 -= 48;
      }
      while (v55);
    }
    WTF::fastFree((unint64_t)v52, v34, v35, v36, v37, v38, v39, v40);
  }
  if (v43)
  {
    v71 = 88 * v43;
    v72 = (_DWORD *)WTF::fastMalloc((WTF *)(v71 + 8));
    v58 = v72;
    v73 = 0;
    *v72 = v43;
    do
    {
      v74 = &v72[v73 / 4];
      *((_QWORD *)v74 + 10) = 0;
      *((_QWORD *)v74 + 11) = 0;
      *((_OWORD *)v74 + 3) = 0uLL;
      *((_OWORD *)v74 + 4) = 0uLL;
      *((_OWORD *)v74 + 1) = 0uLL;
      *((_OWORD *)v74 + 2) = 0uLL;
      *((_BYTE *)v74 + 80) = 1;
      v73 += 88;
      *((_QWORD *)v74 + 1) = off_1E358C1D8;
    }
    while (v71 != v73);
  }
  else
  {
    v58 = 0;
  }
  v59 = (_DWORD *)*((_QWORD *)a4 + 13);
  *((_QWORD *)a4 + 13) = v58;
  if (v59)
  {
    if (*v59)
    {
      v60 = (uint64_t)&v59[22 * *v59 + 2];
      v61 = (uint64_t *)(v59 + 10);
      do
      {
        *(v61 - 4) = (uint64_t)off_1E3580B60;
        v62 = v61 - 4;
        v63 = (_QWORD *)v61[4];
        if (v63)
        {
          v64 = v61[3];
          *v63 = v64;
          *(_QWORD *)(v64 + 8) = v63;
          v61[3] = 0;
          v61[4] = 0;
        }
        v65 = (uint64_t *)v61[1];
        if (v65)
        {
          v66 = *v61;
          *v65 = *v61;
          *(_QWORD *)(v66 + 8) = v65;
          *v61 = 0;
          v61[1] = 0;
        }
        v61 += 11;
      }
      while (v62 + 11 != (uint64_t *)v60);
    }
    WTF::fastFree((unint64_t)v59, v34, v35, v36, v37, v38, v39, v40);
  }
  JSC::DFG::WatchpointCollector::~WatchpointCollector((JSC::DFG::WatchpointCollector *)&v79, v34, v35, v36, v37, v38, v39, v40);
}

uint64_t JSC::DFG::GenericDesiredWatchpoints<JSC::WatchpointSet *,JSC::DFG::SetPointerAdaptor<JSC::WatchpointSet *>>::reallyAdd(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  _DWORD *v23;
  _DWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  uint64_t result;
  unint64_t v32;

  v11 = *(unsigned __int8 *)(a3 + 24);
  if (v11 == 1 && *(_BYTE *)(a1 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1983B6074);
  }
  v12 = *(uint64_t **)a1;
  if (!*(_QWORD *)a1)
  {
    v15 = 0;
    v13 = 0;
LABEL_50:
    v14 = &v12[v13];
    goto LABEL_10;
  }
  v13 = *((unsigned int *)v12 - 1);
  v14 = &v12[v13];
  if (!*((_DWORD *)v12 - 3))
  {
    v15 = &v12[v13];
    goto LABEL_50;
  }
  v15 = *(uint64_t **)a1;
  if ((_DWORD)v13)
  {
    v16 = 8 * v13;
    v15 = *(uint64_t **)a1;
    while ((unint64_t)(*v15 + 1) <= 1)
    {
      ++v15;
      v16 -= 8;
      if (!v16)
      {
        v15 = v14;
        break;
      }
    }
  }
LABEL_10:
  if (v12)
    v17 = &v12[*((unsigned int *)v12 - 1)];
  else
    v17 = 0;
  if (v17 != v15)
  {
    if (v11 == 1)
    {
      v18 = (unsigned __int8 *)(a2 + 16);
      v32 = HIDWORD(a2);
      while (*(_BYTE *)(a3 + 24) != 1)
      {
        ++*(_DWORD *)a3;
LABEL_28:
        v28 = v15 + 1;
        v15 = v14;
        if (v28 != v14)
        {
          v15 = v28;
          while ((unint64_t)(*v15 + 1) <= 1)
          {
            if (++v15 == v14)
            {
              v15 = v14;
              break;
            }
          }
        }
        if (v15 == v17)
        {
          v11 = *(unsigned __int8 *)(a3 + 24);
          goto LABEL_45;
        }
      }
      v19 = *v15;
      v20 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = v20 + 1;
      v21 = *(unsigned int **)(a3 + 32);
      if (*v21 <= v20)
      {
        __break(0xC471u);
        JUMPOUT(0x1983B6054);
      }
      if (*(_BYTE *)(v19 + 4) == 2)
        return 0;
      if (__ldaxr(v18))
      {
        __clrex();
      }
      else if (!__stxr(1u, v18))
      {
LABEL_22:
        v23 = v21 + 2;
        v24 = &v23[6 * v20];
        *((_BYTE *)v24 + 21) = v32;
        *(_DWORD *)((char *)v24 + 17) = a2;
        LODWORD(v24) = __ldxr(v18);
        if ((_DWORD)v24 == 1)
        {
          if (!__stlxr(0, v18))
            goto LABEL_27;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 16), 0, a3, a4, a5, a6, a7, a8);
LABEL_27:
        v26 = *(_QWORD *)(v19 + 8);
        v25 = (_QWORD *)(v19 + 8);
        v27 = &v23[6 * v20];
        *v27 = v26;
        v27[1] = v25;
        *v25 = v27;
        *(_QWORD *)(v26 + 8) = v27;
        *((_WORD *)v25 - 2) = 257;
        goto LABEL_28;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
      goto LABEL_22;
    }
    v29 = *(_DWORD *)a3;
    do
    {
      v30 = v15 + 1;
      v15 = v14;
      if (v30 != v14)
      {
        v15 = v30;
        while ((unint64_t)(*v15 + 1) <= 1)
        {
          if (++v15 == v14)
          {
            v15 = v14;
            break;
          }
        }
      }
      ++v29;
    }
    while (v15 != v17);
    *(_DWORD *)a3 = v29;
  }
LABEL_45:
  result = 1;
  if (v11 == 1)
    *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t JSC::DFG::GenericDesiredWatchpoints<JSC::InlineWatchpointSet *,JSC::DFG::SetPointerAdaptor<JSC::InlineWatchpointSet *>>::reallyAdd(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t **v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t **v32;
  int v33;
  uint64_t **v34;
  uint64_t result;
  unsigned int v36;

  v10 = a1;
  v11 = *(unsigned __int8 *)(a3 + 24);
  if (v11 == 1 && *(_BYTE *)(a1 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1983B6368);
  }
  v12 = *(uint64_t ***)a1;
  if (!*(_QWORD *)a1)
  {
    v15 = 0;
    v13 = 0;
LABEL_54:
    v14 = &v12[v13];
    goto LABEL_10;
  }
  v13 = *((unsigned int *)v12 - 1);
  v14 = &v12[v13];
  if (!*((_DWORD *)v12 - 3))
  {
    v15 = &v12[v13];
    goto LABEL_54;
  }
  v15 = *(uint64_t ***)a1;
  if ((_DWORD)v13)
  {
    v16 = 8 * v13;
    v15 = *(uint64_t ***)a1;
    while ((unint64_t)*v15 + 1 <= 1)
    {
      ++v15;
      v16 -= 8;
      if (!v16)
      {
        v15 = v14;
        break;
      }
    }
  }
LABEL_10:
  if (v12)
    v17 = &v12[*((unsigned int *)v12 - 1)];
  else
    v17 = 0;
  if (v17 != v15)
  {
    if (v11 == 1)
    {
      v18 = (unsigned __int8 *)(a2 + 16);
      v19 = HIDWORD(a2);
      while (*(_BYTE *)(a3 + 24) != 1)
      {
        ++*(_DWORD *)a3;
LABEL_32:
        v32 = v15 + 1;
        v15 = v14;
        if (v32 != v14)
        {
          v15 = v32;
          while ((unint64_t)*v15 + 1 <= 1)
          {
            if (++v15 == v14)
            {
              v15 = v14;
              break;
            }
          }
        }
        if (v15 == v17)
        {
          v11 = *(unsigned __int8 *)(a3 + 24);
          v10 = a1;
          goto LABEL_50;
        }
      }
      v20 = *v15;
      v21 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = v21 + 1;
      v22 = *(unsigned int **)(a3 + 32);
      if (*v22 <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1983B6310);
      }
      v23 = *v20;
      if ((*v20 & 1) != 0)
        v24 = (v23 >> 1) & 3;
      else
        v24 = *(unsigned __int8 *)(v23 + 4);
      if (v24 == 2)
        return 0;
      if (__ldaxr(v18))
      {
        __clrex();
      }
      else if (!__stxr(1u, v18))
      {
LABEL_24:
        v26 = v22 + 2;
        v27 = &v26[6 * v21];
        *((_BYTE *)v27 + 21) = v19;
        *(_DWORD *)((char *)v27 + 17) = a2;
        LODWORD(v27) = __ldxr(v18);
        if ((_DWORD)v27 == 1)
        {
          if (!__stlxr(0, v18))
            goto LABEL_29;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 16), 0, a3, a4, a5, a6, a7, a8);
LABEL_29:
        v28 = *v20;
        if ((*v20 & 1) != 0)
        {
          v36 = (v28 >> 1) & 3;
          v28 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v28 = 1;
          *(_BYTE *)(v28 + 4) = v36;
          *(_BYTE *)(v28 + 5) = 0;
          *(_QWORD *)(v28 + 8) = v28 + 8;
          *(_QWORD *)(v28 + 16) = v28 + 8;
          __dmb(0xAu);
          *v20 = v28;
        }
        v30 = *(_QWORD *)(v28 + 8);
        v29 = (_QWORD *)(v28 + 8);
        v31 = &v26[6 * v21];
        *v31 = v30;
        v31[1] = v29;
        *v29 = v31;
        *(_QWORD *)(v30 + 8) = v31;
        *((_WORD *)v29 - 2) = 257;
        goto LABEL_32;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
      goto LABEL_24;
    }
    v33 = *(_DWORD *)a3;
    do
    {
      v34 = v15 + 1;
      v15 = v14;
      if (v34 != v14)
      {
        v15 = v34;
        while ((unint64_t)*v15 + 1 <= 1)
        {
          if (++v15 == v14)
          {
            v15 = v14;
            break;
          }
        }
      }
      ++v33;
    }
    while (v15 != v17);
    *(_DWORD *)a3 = v33;
  }
LABEL_50:
  result = 1;
  if (v11 == 1)
    *(_BYTE *)(v10 + 8) = 1;
  return result;
}

uint64_t JSC::DFG::GenericDesiredWatchpoints<JSC::SymbolTable *,JSC::DFG::SymbolTableAdaptor>::reallyAdd(uint64_t a1, unint64_t a2, int *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;

  v3 = *((unsigned __int8 *)a3 + 24);
  if (v3 == 1 && *(_BYTE *)(a1 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1983B6580);
  }
  v4 = *(_QWORD **)a1;
  if (!*(_QWORD *)a1)
  {
    v7 = 0;
    v5 = 0;
LABEL_17:
    v6 = &v4[v5];
    goto LABEL_10;
  }
  v5 = *((unsigned int *)v4 - 1);
  v6 = &v4[v5];
  if (!*((_DWORD *)v4 - 3))
  {
    v7 = &v4[v5];
    goto LABEL_17;
  }
  v7 = *(_QWORD **)a1;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    v7 = *(_QWORD **)a1;
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      ++v7;
      v8 -= 8;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_10:
  if (v4)
    v4 += *((unsigned int *)v4 - 1);
  if (v4 != v7)
  {
    if (v3 == 1)
    {
      v11 = HIDWORD(a2);
      while (1)
      {
        if (*((_BYTE *)a3 + 24) == 1)
        {
          v12 = *v7;
          v13 = a3[3];
          a3[3] = v13 + 1;
          v14 = (unsigned int *)*((_QWORD *)a3 + 4);
          if (*v14 <= v13)
          {
            __break(0xC471u);
            JUMPOUT(0x1983B65A0);
          }
          v15 = *(_QWORD *)(v12 + 40);
          if ((v15 & 1) != 0)
            v16 = (v15 >> 1) & 3;
          else
            v16 = *(unsigned __int8 *)(v15 + 4);
          if (v16 == 2)
            return 0;
          v17 = v14 + 2;
          v18 = &v17[6 * v13];
          *((_BYTE *)v18 + 21) = v11;
          *(_DWORD *)((char *)v18 + 17) = a2;
          v19 = *(_QWORD *)(v12 + 40);
          if ((v19 & 1) != 0)
          {
            v37 = a3;
            v38 = a1;
            v35 = v6;
            v36 = a2;
            v33 = v4;
            v34 = v7;
            v31 = v13;
            v32 = v11;
            v26 = v12;
            v30 = v17;
            v27 = WTF::fastMalloc((WTF *)0x20);
            v28 = v19;
            v19 = v27;
            v29 = v28 & 0xFFFFFFFFFFFFFFF8;
            JSC::WatchpointSet::WatchpointSet(v27, (*(_BYTE *)(v26 + 40) >> 1) & 3);
            v17 = v30;
            v13 = v31;
            v11 = v32;
            v4 = v33;
            v7 = v34;
            v6 = v35;
            a2 = v36;
            a3 = v37;
            a1 = v38;
            *(_QWORD *)(v19 + 24) = v29;
            __dmb(0xAu);
            *(_QWORD *)(v26 + 40) = v19;
          }
          v21 = *(_QWORD *)(v19 + 8);
          v20 = (_QWORD *)(v19 + 8);
          v22 = &v17[6 * v13];
          *v22 = v21;
          v22[1] = v20;
          *v20 = v22;
          *(_QWORD *)(v21 + 8) = v22;
          *((_WORD *)v20 - 2) = 257;
        }
        else
        {
          ++*a3;
        }
        v23 = v7 + 1;
        v7 = v6;
        if (v23 != v6)
        {
          v7 = v23;
          while ((unint64_t)(*v7 + 1) <= 1)
          {
            if (++v7 == v6)
            {
              v7 = v6;
              break;
            }
          }
        }
        if (v7 == v4)
        {
          v3 = *((unsigned __int8 *)a3 + 24);
          goto LABEL_13;
        }
      }
    }
    v24 = *a3;
    do
    {
      v25 = v7 + 1;
      v7 = v6;
      if (v25 != v6)
      {
        v7 = v25;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          if (++v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
      }
      ++v24;
    }
    while (v7 != v4);
    *a3 = v24;
  }
LABEL_13:
  v9 = 1;
  if (v3 == 1)
    *(_BYTE *)(a1 + 8) = 1;
  return v9;
}

uint64_t JSC::DFG::GenericDesiredWatchpoints<JSC::FunctionExecutable *,JSC::DFG::FunctionExecutableAdaptor>::reallyAdd(uint64_t a1, unint64_t a2, int *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;

  v3 = *((unsigned __int8 *)a3 + 24);
  if (v3 == 1 && *(_BYTE *)(a1 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1983B681CLL);
  }
  v4 = *(_QWORD **)a1;
  if (!*(_QWORD *)a1)
  {
    v7 = 0;
    v5 = 0;
LABEL_35:
    v6 = &v4[v5];
    goto LABEL_10;
  }
  v5 = *((unsigned int *)v4 - 1);
  v6 = &v4[v5];
  if (!*((_DWORD *)v4 - 3))
  {
    v7 = &v4[v5];
    goto LABEL_35;
  }
  v7 = *(_QWORD **)a1;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    v7 = *(_QWORD **)a1;
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      ++v7;
      v8 -= 8;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_10:
  if (v4)
    v4 += *((unsigned int *)v4 - 1);
  if (v4 != v7)
  {
    if (v3 == 1)
    {
      v11 = HIDWORD(a2);
      while (1)
      {
        if (*((_BYTE *)a3 + 24) == 1)
        {
          v12 = *v7;
          v13 = a3[3];
          a3[3] = v13 + 1;
          v14 = (unsigned int *)*((_QWORD *)a3 + 4);
          if (*v14 <= v13)
          {
            __break(0xC471u);
            JUMPOUT(0x1983B683CLL);
          }
          v15 = *(_QWORD *)(v12 + 112);
          if ((v15 & 1) != 0)
            v16 = (v15 >> 1) & 3;
          else
            v16 = *(unsigned __int8 *)(v15 + 4);
          if (v16 == 2)
            return 0;
          v17 = v14 + 2;
          v18 = &v17[6 * v13];
          *((_BYTE *)v18 + 21) = v11;
          *(_DWORD *)((char *)v18 + 17) = a2;
          v19 = *(_QWORD *)(v12 + 112);
          if ((v19 & 1) != 0)
          {
            v37 = a3;
            v38 = a1;
            v35 = v6;
            v36 = a2;
            v33 = v4;
            v34 = v7;
            v31 = v13;
            v32 = v11;
            v26 = v12;
            v30 = v17;
            v27 = WTF::fastMalloc((WTF *)0x20);
            v28 = v19;
            v19 = v27;
            v29 = v28 & 0xFFFFFFFFFFFFFFF8;
            JSC::WatchpointSet::WatchpointSet(v27, (*(_BYTE *)(v26 + 112) >> 1) & 3);
            v17 = v30;
            v13 = v31;
            v11 = v32;
            v4 = v33;
            v7 = v34;
            v6 = v35;
            a2 = v36;
            a3 = v37;
            a1 = v38;
            *(_QWORD *)(v19 + 24) = v29;
            __dmb(0xAu);
            *(_QWORD *)(v26 + 112) = v19;
          }
          v21 = *(_QWORD *)(v19 + 8);
          v20 = (_QWORD *)(v19 + 8);
          v22 = &v17[6 * v13];
          *v22 = v21;
          v22[1] = v20;
          *v20 = v22;
          *(_QWORD *)(v21 + 8) = v22;
          *((_WORD *)v20 - 2) = 257;
        }
        else
        {
          ++*a3;
        }
        v23 = v7 + 1;
        v7 = v6;
        if (v23 != v6)
        {
          v7 = v23;
          while ((unint64_t)(*v7 + 1) <= 1)
          {
            if (++v7 == v6)
            {
              v7 = v6;
              break;
            }
          }
        }
        if (v7 == v4)
        {
          v3 = *((unsigned __int8 *)a3 + 24);
          goto LABEL_13;
        }
      }
    }
    v24 = *a3;
    do
    {
      v25 = v7 + 1;
      v7 = v6;
      if (v25 != v6)
      {
        v7 = v25;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          if (++v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
      }
      ++v24;
    }
    while (v7 != v4);
    *a3 = v24;
  }
LABEL_13:
  v9 = 1;
  if (v3 == 1)
    *(_BYTE *)(a1 + 8) = 1;
  return v9;
}

uint64_t JSC::DFG::GenericDesiredWatchpoints<JSC::JSArrayBufferView *,JSC::DFG::ArrayBufferViewWatchpointAdaptor>::reallyAdd(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  void (**v21)(JSC::StringFireDetail *__hidden);
  const char *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  JSC::ArrayBuffer *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  JSC::VM *v34;
  unint64_t v35;
  void (**v36)(JSC::StringFireDetail *__hidden);
  const char *v37;
  int v38;
  uint64_t *v39;
  const char *v40;
  void (**v41)(JSC::StringFireDetail *__hidden);
  unsigned int v42;
  const char *v43;
  unint64_t v44;
  void (**v45)(JSC::StringFireDetail *__hidden);
  const char *v46;
  unsigned int v47;
  uint64_t v48;
  JSC::ArrayBuffer *v49;
  void (**v50)(JSC::StringFireDetail *__hidden);
  const char *v51;

  v12 = *(unsigned __int8 *)(a3 + 24);
  if (v12 == 1 && *(_BYTE *)(a1 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1983B6B64);
  }
  v13 = *(uint64_t **)a1;
  if (!*(_QWORD *)a1)
  {
    v14 = 0;
    v15 = 0;
LABEL_5:
    v16 = &v13[v15];
    goto LABEL_6;
  }
  v15 = *((unsigned int *)v13 - 1);
  v16 = &v13[v15];
  if (!*((_DWORD *)v13 - 3))
  {
    v14 = &v13[v15];
    goto LABEL_5;
  }
  v14 = *(uint64_t **)a1;
  if ((_DWORD)v15)
  {
    v19 = 8 * v15;
    v14 = *(uint64_t **)a1;
    while ((unint64_t)(*v14 + 1) <= 1)
    {
      ++v14;
      v19 -= 8;
      if (!v19)
      {
        v14 = v16;
        break;
      }
    }
  }
LABEL_6:
  if (v13)
    v17 = &v13[*((unsigned int *)v13 - 1)];
  else
    v17 = 0;
  if (v17 == v14)
    goto LABEL_9;
  if (v12 == 1)
  {
    v20 = HIDWORD(a2);
    v21 = &off_1E3583C90;
    v22 = "ArrayBuffer could not be allocated, probably because of OOM.";
    while (*(_BYTE *)(a3 + 24) != 1)
    {
      ++*(_DWORD *)a3;
LABEL_33:
      v33 = v14 + 1;
      v14 = v16;
      if (v33 != v16)
      {
        v14 = v33;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          if (++v14 == v16)
          {
            v14 = v16;
            break;
          }
        }
      }
      if (v14 == v17)
      {
        v12 = *(unsigned __int8 *)(a3 + 24);
        goto LABEL_9;
      }
    }
    v23 = *v14;
    v24 = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = v24 + 1;
    v25 = *(unsigned int **)(a3 + 32);
    if (*v25 <= v24)
    {
      __break(0xC471u);
      JUMPOUT(0x1983B6BB8);
    }
    if ((*(_BYTE *)(v23 + 40) & 7u) > 2)
    {
      v43 = v22;
      LOBYTE(v50) = 0;
      LOBYTE(v51) = 0;
      v48 = v23;
      v44 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v23, (uint64_t)&v50, a3, a4, a5, a6, a7, a8);
      if (!(_BYTE)a2)
        return 0;
      v26 = v44;
      v23 = v48;
      v21 = &off_1E3583C90;
      v22 = v43;
    }
    else
    {
      v26 = *(_QWORD *)(v23 + 24);
    }
    if (!v26)
      return 0;
    v27 = (uint64_t)&v25[6 * v24 + 2];
    *(_BYTE *)(v27 + 21) = v20;
    *(_DWORD *)(v27 + 17) = a2;
    v28 = *(unsigned __int8 *)(v23 + 40);
    if (v28 == 88)
      goto LABEL_27;
    v40 = v22;
    v41 = v21;
    if (v28 == 48 || v28 == 16)
    {
      v29 = JSC::JSArrayBufferView::slowDownAndWasteMemory(v23, a2, a3, a4, a5, a6, a7, a8);
LABEL_53:
      v21 = v41;
      v22 = v40;
LABEL_28:
      if (v29)
      {
        v30 = *((_QWORD *)v29 + 9);
        if ((v30 & 1) != 0)
        {
          v47 = (v30 >> 1) & 3;
          v49 = v29;
          v45 = v21;
          v46 = v22;
          v30 = WTF::fastMalloc((WTF *)0x18);
          v22 = v46;
          v21 = v45;
          *(_DWORD *)v30 = 1;
          *(_BYTE *)(v30 + 4) = v47;
          *(_BYTE *)(v30 + 5) = 0;
          *(_QWORD *)(v30 + 8) = v30 + 8;
          *(_QWORD *)(v30 + 16) = v30 + 8;
          __dmb(0xAu);
          *((_QWORD *)v49 + 9) = v30;
        }
        v32 = *(_QWORD *)(v30 + 8);
        v31 = (uint64_t *)(v30 + 8);
        *(_QWORD *)v27 = v32;
        *(_QWORD *)(v27 + 8) = v31;
        *v31 = v27;
        *(_QWORD *)(v32 + 8) = v27;
        *((_WORD *)v31 - 2) = 257;
        goto LABEL_33;
      }
      goto LABEL_40;
    }
    v42 = v28 - 90;
    if (v42 <= 0x33)
    {
      if (((1 << v42) & 0xF400000000000) != 0)
      {
        v29 = *(JSC::ArrayBuffer **)(v23 + 48);
        goto LABEL_53;
      }
      if (((1 << v42) & 0xF) != 0)
      {
LABEL_27:
        v29 = *(JSC::ArrayBuffer **)(*(_QWORD *)(v23 + 8) - 8);
        goto LABEL_28;
      }
    }
LABEL_40:
    v34 = *(JSC::VM **)(a2 + 72);
    v50 = v21;
    v51 = v22;
    v35 = v27;
    v36 = v21;
    v37 = v22;
    JSC::Watchpoint::fire(v35, v34, &v50, a4, a5, a6, a7, a8, a9);
    v22 = v37;
    v21 = v36;
    goto LABEL_33;
  }
  v38 = *(_DWORD *)a3;
  do
  {
    v39 = v14 + 1;
    v14 = v16;
    if (v39 != v16)
    {
      v14 = v39;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        if (++v14 == v16)
        {
          v14 = v16;
          break;
        }
      }
    }
    ++v38;
  }
  while (v14 != v17);
  *(_DWORD *)a3 = v38;
LABEL_9:
  result = 1;
  if (v12 == 1)
    *(_BYTE *)(a1 + 8) = 1;
  return result;
}

void JSC::DFG::GenericDesiredWatchpoints<JSC::ObjectPropertyCondition,JSC::DFG::AdaptiveStructureWatchpointAdaptor>::reallyAdd(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  _BOOL4 v17;
  __int128 *v19;
  unint64_t *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  _DWORD **v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  JSC::VM *v40;
  unsigned int v41;
  unsigned int *v42;
  uint64_t v43;
  const JSC::PropertyTable *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  __int128 *v52;
  _BOOL4 v53;
  unsigned int v55;

  v11 = *(unsigned __int8 *)(a3 + 24);
  if (v11 == 1 && *((_BYTE *)a1 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1983B70B0);
  }
  v12 = (__int128 *)*a1;
  if (!*a1)
  {
    v15 = 0;
    LODWORD(v13) = 0;
LABEL_61:
    v14 = (__int128 *)((char *)v12 + 24 * v13);
    goto LABEL_18;
  }
  v13 = *((unsigned int *)v12 - 1);
  v14 = (__int128 *)((char *)v12 + 24 * v13);
  if (!*((_DWORD *)v12 - 3))
  {
    v15 = (__int128 *)((char *)v12 + 24 * v13);
    goto LABEL_61;
  }
  v15 = (__int128 *)*a1;
  if ((_DWORD)v13)
  {
    v16 = 24 * v13;
    v15 = (__int128 *)*a1;
    while (!*(_QWORD *)v15)
    {
      v17 = (*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFLL) == 0;
      if (*((_DWORD *)v15 + 4))
        v17 = 0;
      if (*((_DWORD *)v15 + 5))
        v17 = 0;
      if ((*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFLL) != 0x2000000000000 && !v17)
        break;
      v15 = (__int128 *)((char *)v15 + 24);
      v16 -= 24;
      if (!v16)
      {
        v15 = v14;
        break;
      }
    }
  }
LABEL_18:
  if (v12)
    v19 = (__int128 *)((char *)v12 + 24 * *((unsigned int *)v12 - 1));
  else
    v19 = 0;
  if (v19 != v15)
  {
    do
    {
      v20 = (unint64_t *)v15 + 1;
      v21 = *((_QWORD *)v15 + 1);
      v22 = *(unsigned __int8 *)(a3 + 24);
      if ((v21 & 0xFF000000000000) == 0x5000000000000)
      {
        if (v22 == 1)
        {
          v40 = *(JSC::VM **)(a2 + 72);
          v41 = *(_DWORD *)(a3 + 20);
          *(_DWORD *)(a3 + 20) = v41 + 1;
          v42 = *(unsigned int **)(a3 + 48);
          if (*v42 <= v41)
          {
            __break(0xC471u);
            JUMPOUT(0x1983B7090);
          }
          if ((v21 & 0xFFFFFFFFFFFFFFLL) == 0)
            return;
          JSC::PropertyCondition::isWatchable(v20, 16 * (**(_DWORD **)v15 & 0xFFFFFFFE), *(const JSC::PropertyTable **)v15, 0, 0, a6, a7, a8);
          if (!v49)
            return;
          v50 = (uint64_t)&v42[22 * v41 + 2];
          v51 = *v15;
          *(_QWORD *)(v50 + 24) = *((_QWORD *)v15 + 2);
          *(_OWORD *)(v50 + 8) = v51;
          if ((unint64_t)*((unsigned __int8 *)v15 + 14) << 48 != 0x5000000000000)
          {
            __break(0xC471u);
            JUMPOUT(0x1983B70D0);
          }
          *(_QWORD *)&v42[22 * v41 + 22] = a2;
          JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v50, v40, v43, v44, v45, v46, v47, v48);
        }
        else
        {
          ++*(_DWORD *)(a3 + 8);
        }
      }
      else if (v22 == 1)
      {
        v23 = *(_DWORD *)(a3 + 16);
        *(_DWORD *)(a3 + 16) = v23 + 1;
        v24 = *(unsigned int **)(a3 + 40);
        if (*v24 <= v23)
        {
          __break(0xC471u);
          JUMPOUT(0x1983B6FE0);
        }
        if ((v21 & 0xFFFFFFFFFFFFFFLL) == 0)
          return;
        JSC::PropertyCondition::isWatchable(v20, 16 * (**(_DWORD **)v15 & 0xFFFFFFFE), *(const JSC::PropertyTable **)v15, 0, 0, a6, a7, a8);
        if (!v29)
          return;
        v30 = &v24[12 * v23];
        *((_BYTE *)v30 + 29) = BYTE4(a2);
        *(unsigned int *)((char *)v30 + 25) = a2;
        v31 = *v15;
        *((_QWORD *)v30 + 6) = *((_QWORD *)v15 + 2);
        *((_OWORD *)v30 + 2) = v31;
        v32 = *((_QWORD *)v15 + 1);
        if ((v32 & 0xFFFFFFFFFFFFFFLL) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1983B7020);
        }
        if ((v32 & 0xFF000000000000) == 0x5000000000000)
        {
          __break(0xC471u);
          JUMPOUT(0x1983B7040);
        }
        v33 = v30 + 2;
        if ((*((_QWORD *)v30 + 5) & 0xFFFFFFFFFFFFFFLL) == 0
          || (v34 = (_DWORD **)(v30 + 8),
              JSC::PropertyCondition::isWatchable((unint64_t *)v30 + 5, 16 * (**((_DWORD **)v30 + 4) & 0xFFFFFFFE), *((const JSC::PropertyTable **)v30 + 4), 0, v25, v26, v27, v28), (v35 & 1) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x1983B7000);
        }
        v36 = 16 * (**v34 & 0xFFFFFFFE);
        v37 = *(_QWORD *)(v36 + 0x60);
        if ((v37 & 1) != 0)
        {
          v55 = (v37 >> 1) & 3;
          v37 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v37 = 1;
          *(_BYTE *)(v37 + 4) = v55;
          *(_BYTE *)(v37 + 5) = 0;
          *(_QWORD *)(v37 + 8) = v37 + 8;
          *(_QWORD *)(v37 + 16) = v37 + 8;
          __dmb(0xAu);
          *(_QWORD *)(v36 + 96) = v37;
        }
        v39 = *(_QWORD *)(v37 + 8);
        v38 = (_QWORD *)(v37 + 8);
        *v33 = v39;
        v33[1] = v38;
        *v38 = v33;
        *(_QWORD *)(v39 + 8) = v33;
        *((_WORD *)v38 - 2) = 257;
      }
      else
      {
        ++*(_DWORD *)(a3 + 4);
      }
      v52 = (__int128 *)((char *)v15 + 24);
      v15 = v14;
      if (v52 != v14)
      {
        v15 = v52;
        while (!*(_QWORD *)v15)
        {
          v53 = (*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFLL) == 0;
          if (*((_DWORD *)v15 + 4))
            v53 = 0;
          if (*((_DWORD *)v15 + 5))
            v53 = 0;
          if ((*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFLL) != 0x2000000000000 && !v53)
            break;
          v15 = (__int128 *)((char *)v15 + 24);
          if (v15 == v14)
          {
            v15 = v14;
            break;
          }
        }
      }
    }
    while (v15 != v19);
    v11 = *(unsigned __int8 *)(a3 + 24);
  }
  if (v11 == 1)
    *((_BYTE *)a1 + 8) = 1;
}

uint64_t JSC::DFG::DesiredWatchpoints::reallyAdd(JSC::DFG::DesiredWatchpoints *this, JSC::CodeBlock *a2, JSC::DFG::DesiredIdentifiers *a3, JSC::DFG::CommonData *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[3];
  char v32;
  __int128 v33;
  uint64_t v34;

  memset(v31, 0, sizeof(v31));
  v12 = *(_OWORD *)((char *)a4 + 88);
  *((_QWORD *)a4 + 11) = 0;
  *((_QWORD *)a4 + 12) = 0;
  v33 = v12;
  v13 = *((_QWORD *)a4 + 13);
  *((_QWORD *)a4 + 13) = 0;
  v34 = v13;
  v32 = 1;
  if (JSC::DFG::GenericDesiredWatchpoints<JSC::WatchpointSet *,JSC::DFG::SetPointerAdaptor<JSC::WatchpointSet *>>::reallyAdd((uint64_t)this, (unint64_t)a2, (uint64_t)v31, (uint64_t)a4, a5, a6, a7, a8)&& JSC::DFG::GenericDesiredWatchpoints<JSC::InlineWatchpointSet *,JSC::DFG::SetPointerAdaptor<JSC::InlineWatchpointSet *>>::reallyAdd((uint64_t)this + 16, (unint64_t)a2, (uint64_t)v31, v16, v17, v18, v19, v20)&& JSC::DFG::GenericDesiredWatchpoints<JSC::SymbolTable *,JSC::DFG::SymbolTableAdaptor>::reallyAdd((uint64_t)this + 32,
                       (unint64_t)a2,
                       (int *)v31)
    && JSC::DFG::GenericDesiredWatchpoints<JSC::FunctionExecutable *,JSC::DFG::FunctionExecutableAdaptor>::reallyAdd((uint64_t)this + 48, (unint64_t)a2, (int *)v31)&& JSC::DFG::GenericDesiredWatchpoints<JSC::JSArrayBufferView *,JSC::DFG::ArrayBufferViewWatchpointAdaptor>::reallyAdd((uint64_t)this + 64, (unint64_t)a2, (uint64_t)v31, v16, v17, v18, v19, v20, v21)&& (JSC::DFG::GenericDesiredWatchpoints<JSC::ObjectPropertyCondition,JSC::DFG::AdaptiveStructureWatchpointAdaptor>::reallyAdd((uint64_t *)this + 10, (uint64_t)a2, (uint64_t)v31, v16, v17,
          v18,
          v19,
          v20),
        v22))
  {
    JSC::DFG::DesiredGlobalProperties::reallyAdd((uint64_t *)this + 12, (uint64_t)a2, (uint64_t)a3, (uint64_t)v31, v17, v18, v19, v20);
    JSC::DFG::WatchpointCollector::finalize((JSC::DFG::WatchpointCollector *)v31, a4, v23, v24, v25, v26, v27, v28);
    v29 = 1;
  }
  else
  {
    v29 = 0;
  }
  JSC::DFG::WatchpointCollector::~WatchpointCollector((JSC::DFG::WatchpointCollector *)v31, v14, v15, v16, v17, v18, v19, v20);
  return v29;
}

void JSC::DFG::WatchpointCollector::finalize(JSC::DFG::WatchpointCollector *this, JSC::DFG::CommonData *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  v11 = (unsigned int *)*((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v10;
  if (v11)
  {
    v12 = (uint64_t *)(v11 + 2);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      v14 = 24 * v13;
      do
      {
        v15 = (uint64_t *)v12[1];
        if (v15)
        {
          v16 = *v12;
          *v15 = *v12;
          *(_QWORD *)(v16 + 8) = v15;
          *v12 = 0;
          v12[1] = 0;
        }
        v12 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  v18 = (unsigned int *)*((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v17;
  if (v18)
  {
    v19 = (uint64_t *)(v18 + 2);
    v20 = *v18;
    if ((_DWORD)v20)
    {
      v21 = 48 * v20;
      do
      {
        v22 = (uint64_t *)v19[1];
        if (v22)
        {
          v23 = *v19;
          *v22 = *v19;
          *(_QWORD *)(v23 + 8) = v22;
          *v19 = 0;
          v19[1] = 0;
        }
        v19 += 6;
        v21 -= 48;
      }
      while (v21);
    }
    WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
  }
  v24 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  v25 = (_DWORD *)*((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v24;
  if (v25)
  {
    if (*v25)
    {
      v26 = (uint64_t)&v25[22 * *v25 + 2];
      v27 = (uint64_t *)(v25 + 10);
      do
      {
        *(v27 - 4) = (uint64_t)off_1E3580B60;
        v28 = v27 - 4;
        v29 = (_QWORD *)v27[4];
        if (v29)
        {
          v30 = v27[3];
          *v29 = v30;
          *(_QWORD *)(v30 + 8) = v29;
          v27[3] = 0;
          v27[4] = 0;
        }
        v31 = (uint64_t *)v27[1];
        if (v31)
        {
          v32 = *v27;
          *v31 = *v27;
          *(_QWORD *)(v32 + 8) = v31;
          *v27 = 0;
          v27[1] = 0;
        }
        v27 += 11;
      }
      while (v28 + 11 != (uint64_t *)v26);
    }
    WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::DFG::DesiredWatchpoints::dumpInContext(JSC::DFG::DesiredWatchpoints *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  uint64_t *v3;
  uint64_t v4;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  const void **v8;
  uint64_t v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  const void **v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  const void **v19;
  const void *v20;
  WTF::PrintStream *v21;
  const void **v22;
  WTF::PrintStream *v23;
  _QWORD *v24;
  const void **v25;
  const void **v26;
  const void **v27;
  const void **v28;
  const void **v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  float v34;
  const void *v35;
  WTF::PrintStream *v36;
  WTF::PrintStream *v37;
  _QWORD *v38;
  const void **v39;
  const void **v40;
  const void **v41;
  const void **v42;
  const void **v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  WTF::PrintStream *v47;
  float v48;
  const void *v49;
  WTF::PrintStream *v50;
  WTF::PrintStream *v51;
  _QWORD *v52;
  const void **v53;
  const void **v54;
  const void **v55;
  const void **v56;
  const void **v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  WTF::PrintStream *v61;
  float v62;
  const void *v63;
  WTF::PrintStream *v64;
  WTF::PrintStream *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  WTF::PrintStream *v75;
  float v76;
  unint64_t v77;
  WTF::PrintStream *v78;
  JSC::Structure *v79;
  JSC::DumpContext *v80;
  WTF::PrintStream *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  WTF::PrintStream *v91;
  float v92;
  WTF::PrintStream *v93;
  _BOOL4 v94;
  JSC::DFG::Prefix *v97;
  uint64_t v101;
  int v102;
  uint64_t v103;
  __int16 v104;
  _DWORD *v105;
  int v106;
  char v107;

  v101 = -1;
  v102 = -1;
  v103 = 0;
  v104 = 257;
  v3 = &v101;
  if (a3)
  {
    v4 = *((_QWORD *)a3 + 2);
    if (v4)
      v3 = (uint64_t *)(v4 + 1088);
  }
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::DFG::Prefix::dump((uint64_t)v3, v6);
  WTF::PrintStream::printf(v6, "%s", "Desired watchpoints:\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::DFG::Prefix::dump((uint64_t)v3, v7);
  WTF::PrintStream::printf(v7, "%s", "    Watchpoint sets: ");
  v8 = *(const void ***)this;
  v97 = (JSC::DFG::Prefix *)v3;
  if (*(_QWORD *)this)
  {
    v9 = *((unsigned int *)v8 - 1);
    v10 = &v8[v9];
    if (*((_DWORD *)v8 - 3))
    {
      v11 = *(const void ***)this;
      if ((_DWORD)v9)
      {
        v12 = 8 * v9;
        v11 = *(const void ***)this;
        while ((unint64_t)*v11 + 1 <= 1)
        {
          ++v11;
          v12 -= 8;
          if (!v12)
          {
            v11 = v10;
            break;
          }
        }
      }
      if (v8)
        goto LABEL_12;
      goto LABEL_15;
    }
    v11 = &v8[v9];
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
  v10 = &v8[v9];
  if (v8)
  {
LABEL_12:
    v13 = &v8[*((unsigned int *)v8 - 1)];
    goto LABEL_16;
  }
LABEL_15:
  v13 = 0;
LABEL_16:
  if (v13 != v11)
  {
    v14 = 0;
    do
    {
      v15 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
      if (v14)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v105, v18);
        WTF::printExpectedCStringHelper(v17, "StringView", &v105);
        if (v106 != -1)
          ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v105, v18);
        WTF::printExpectedCStringHelper(v17, "StringView", &v105);
        if (v106 != -1)
          ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
        v14 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      v20 = *v11;
      v19 = v11 + 1;
      v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v21, "%p", v20);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      v22 = v10;
      if (v19 != v10)
      {
        v22 = v19;
        while ((unint64_t)*v22 + 1 <= 1)
        {
          if (++v22 == v10)
          {
            v22 = v10;
            break;
          }
        }
      }
      v11 = v22;
    }
    while (v22 != v13);
  }
  WTF::PrintStream::printf(v7, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::DFG::Prefix::dump((uint64_t)v97, v23);
  WTF::PrintStream::printf(v23, "%s", "    Inline watchpoint sets: ");
  v24 = (_QWORD *)*((_QWORD *)this + 2);
  v25 = (const void **)WTF::HashSet<JSC::InlineWatchpointSet *,WTF::DefaultHash<JSC::InlineWatchpointSet *>,WTF::HashTraits<JSC::InlineWatchpointSet *>,WTF::HashTableTraits>::begin(v24);
  v26 = v25;
  v28 = v27;
  if (v24)
    v29 = (const void **)&v24[*((unsigned int *)v24 - 1)];
  else
    v29 = 0;
  if (v29 != v25)
  {
    v30 = 0;
    do
    {
      v31 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 32))(v23);
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
      v33 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
      if (v30)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v105, v34);
        WTF::printExpectedCStringHelper(v33, "StringView", &v105);
        if (v106 != -1)
          ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v105, v34);
        WTF::printExpectedCStringHelper(v33, "StringView", &v105);
        if (v106 != -1)
          ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
        v30 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 40))(v23);
      v35 = *v26++;
      v36 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 32))(v23);
      WTF::PrintStream::printf(v36, "%p", v35);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 40))(v23);
      while (v26 != v28)
      {
        if ((unint64_t)*v26 + 1 > 1)
          goto LABEL_45;
        ++v26;
      }
      v26 = v28;
LABEL_45:
      ;
    }
    while (v26 != v29);
  }
  WTF::PrintStream::printf(v23, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::DFG::Prefix::dump((uint64_t)v97, v37);
  WTF::PrintStream::printf(v37, "%s", "    SymbolTables: ");
  v38 = (_QWORD *)*((_QWORD *)this + 4);
  v39 = (const void **)WTF::HashSet<JSC::InlineWatchpointSet *,WTF::DefaultHash<JSC::InlineWatchpointSet *>,WTF::HashTraits<JSC::InlineWatchpointSet *>,WTF::HashTableTraits>::begin(v38);
  v40 = v39;
  v42 = v41;
  if (v38)
    v43 = (const void **)&v38[*((unsigned int *)v38 - 1)];
  else
    v43 = 0;
  if (v43 != v39)
  {
    v44 = 0;
    do
    {
      v45 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v37 + 32))(v37);
      v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 32))(v45);
      v47 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 32))(v46);
      if (v44)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v105, v48);
        WTF::printExpectedCStringHelper(v47, "StringView", &v105);
        if (v106 != -1)
          ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v105, v48);
        WTF::printExpectedCStringHelper(v47, "StringView", &v105);
        if (v106 != -1)
          ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
        v44 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v37 + 40))(v37);
      v49 = *v40++;
      v50 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v37 + 32))(v37);
      WTF::PrintStream::printf(v50, "%p", v49);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v37 + 40))(v37);
      while (v40 != v42)
      {
        if ((unint64_t)*v40 + 1 > 1)
          goto LABEL_62;
        ++v40;
      }
      v40 = v42;
LABEL_62:
      ;
    }
    while (v40 != v43);
  }
  WTF::PrintStream::printf(v37, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v51 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::DFG::Prefix::dump((uint64_t)v97, v51);
  WTF::PrintStream::printf(v51, "%s", "    FunctionExecutables: ");
  v52 = (_QWORD *)*((_QWORD *)this + 6);
  v53 = (const void **)WTF::HashSet<JSC::InlineWatchpointSet *,WTF::DefaultHash<JSC::InlineWatchpointSet *>,WTF::HashTraits<JSC::InlineWatchpointSet *>,WTF::HashTableTraits>::begin(v52);
  v54 = v53;
  v56 = v55;
  if (v52)
    v57 = (const void **)&v52[*((unsigned int *)v52 - 1)];
  else
    v57 = 0;
  if (v57 != v53)
  {
    v58 = 0;
    do
    {
      v59 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v51 + 32))(v51);
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 32))(v59);
      v61 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
      if (v58)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v105, v62);
        WTF::printExpectedCStringHelper(v61, "StringView", &v105);
        if (v106 != -1)
          ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v105, v62);
        WTF::printExpectedCStringHelper(v61, "StringView", &v105);
        if (v106 != -1)
          ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
        v58 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 40))(v59);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v51 + 40))(v51);
      v63 = *v54++;
      v64 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v51 + 32))(v51);
      WTF::PrintStream::printf(v64, "%p", v63);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v51 + 40))(v51);
      while (v54 != v56)
      {
        if ((unint64_t)*v54 + 1 > 1)
          goto LABEL_79;
        ++v54;
      }
      v54 = v56;
LABEL_79:
      ;
    }
    while (v54 != v57);
  }
  WTF::PrintStream::printf(v51, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v65 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::DFG::Prefix::dump((uint64_t)v97, v65);
  WTF::PrintStream::printf(v65, "%s", "    Buffer views: ");
  v66 = (_QWORD *)*((_QWORD *)this + 8);
  v67 = WTF::HashSet<JSC::JSArrayBufferView *,WTF::DefaultHash<JSC::JSArrayBufferView *>,WTF::HashTraits<JSC::JSArrayBufferView *>,WTF::HashTableTraits>::begin(v66);
  v68 = v67;
  v70 = v69;
  if (v66)
    v71 = &v66[*((unsigned int *)v66 - 1)];
  else
    v71 = 0;
  if (v71 != v67)
  {
    v72 = 0;
    do
    {
      v73 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v65 + 32))(v65);
      v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
      v75 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
      if (v72)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v105, v76);
        WTF::printExpectedCStringHelper(v75, "StringView", &v105);
        if (v106 != -1)
          ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v105, v76);
        WTF::printExpectedCStringHelper(v75, "StringView", &v105);
        if (v106 != -1)
          ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
        v72 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v65 + 40))(v65);
      v105 = (_DWORD *)*v68;
      v77 = (unint64_t)v105;
      v78 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v65 + 32))(v65);
      v79 = 0;
      if (v77)
      {
        v80 = a3;
        if ((v77 & 0xFFFE000000000002) == 0)
          v79 = (JSC::Structure *)(16 * (*(_DWORD *)v77 & 0xFFFFFFFE));
      }
      else
      {
        v80 = a3;
      }
      JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v105, v78, v80, v79);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v65 + 40))(v65);
      while (++v68 != v70)
      {
        if ((unint64_t)(*v68 + 1) > 1)
          goto LABEL_99;
      }
      v68 = v70;
LABEL_99:
      ;
    }
    while (v68 != v71);
  }
  WTF::PrintStream::printf(v65, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v81 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::DFG::Prefix::dump((uint64_t)v97, v81);
  WTF::PrintStream::printf(v81, "%s", "    Object property conditions: ");
  v82 = *((_QWORD *)this + 10);
  v83 = WTF::HashSet<JSC::ObjectPropertyCondition,WTF::DefaultHash<JSC::ObjectPropertyCondition>,WTF::HashTraits<JSC::ObjectPropertyCondition>,WTF::HashTableTraits>::begin(v82);
  v84 = v83;
  v86 = v85;
  if (v82)
    v87 = v82 + 24 * *(unsigned int *)(v82 - 4);
  else
    v87 = 0;
  if (v87 != v83)
  {
    v88 = 0;
    do
    {
      v89 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v81 + 32))(v81);
      v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 32))(v89);
      v91 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 32))(v90);
      if (v88)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v105, v92);
        WTF::printExpectedCStringHelper(v91, "StringView", &v105);
        if (v106 != -1)
          ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v105, v92);
        WTF::printExpectedCStringHelper(v91, "StringView", &v105);
        if (v106 != -1)
          ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v107, &v105);
        v88 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v90 + 40))(v90);
      (*(void (**)(uint64_t))(*(_QWORD *)v89 + 40))(v89);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v81 + 40))(v81);
      v93 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v81 + 32))(v81);
      JSC::ObjectPropertyCondition::dumpInContext((JSC::ObjectPropertyCondition *)v84, v93, a3);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v81 + 40))(v81);
      while (1)
      {
        v84 += 24;
        if (v84 == v86)
          break;
        if (!*(_QWORD *)v84)
        {
          v94 = (*(_QWORD *)(v84 + 8) & 0xFFFFFFFFFFFFFFLL) == 0;
          if (*(_DWORD *)(v84 + 16))
            v94 = 0;
          if (*(_DWORD *)(v84 + 20))
            v94 = 0;
          if ((*(_QWORD *)(v84 + 8) & 0xFFFFFFFFFFFFFFLL) == 0x2000000000000 || v94)
            continue;
        }
        goto LABEL_123;
      }
      v84 = v86;
LABEL_123:
      ;
    }
    while (v84 != v87);
  }
  WTF::PrintStream::printf(v81, "%s", "\n");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::DFG::DesiredWeakReferences::visitChildren<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (!v4)
  {
    v7 = 0;
    v5 = 0;
LABEL_26:
    v6 = (_QWORD *)(v4 + 8 * v5);
    goto LABEL_8;
  }
  v5 = *(unsigned int *)(v4 - 4);
  v6 = (_QWORD *)(v4 + 8 * v5);
  if (!*(_DWORD *)(v4 - 12))
  {
    v7 = (_QWORD *)(v4 + 8 * v5);
    goto LABEL_26;
  }
  v7 = *(_QWORD **)(result + 8);
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    v7 = *(_QWORD **)(result + 8);
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      ++v7;
      v8 -= 8;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_8:
  if (v4)
    v9 = (_QWORD *)(v4 + 8 * *(unsigned int *)(v4 - 4));
  else
    v9 = 0;
  while (v7 != v9)
  {
    v10 = v7 + 1;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *v7);
    v7 = v6;
    if (v10 != v6)
    {
      v7 = v10;
      while ((unint64_t)(*v7 + 1) <= 1)
      {
        if (++v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  v11 = *(_DWORD **)(v3 + 16);
  if (!v11)
  {
    v14 = 0;
    v12 = 0;
LABEL_28:
    v13 = &v11[v12];
    goto LABEL_29;
  }
  v12 = *(v11 - 1);
  v13 = &v11[v12];
  if (!*(v11 - 3))
  {
    v14 = &v11[v12];
    goto LABEL_28;
  }
  v14 = v11;
  if ((_DWORD)v12)
  {
    v15 = 4 * v12;
    v14 = v11;
    while (*v14 <= 1u)
    {
      ++v14;
      v15 -= 4;
      if (!v15)
      {
        v14 = v13;
        break;
      }
    }
  }
LABEL_29:
  if (v11)
    v16 = &v11[*(v11 - 1)];
  else
    v16 = 0;
  while (v14 != v16)
  {
    v17 = v14 + 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16 * (*v14 & 0xFFFFFFFE));
    v14 = v13;
    if (v17 != v13)
    {
      v14 = v17;
      while (*v14 <= 1u)
      {
        if (++v14 == v13)
        {
          v14 = v13;
          break;
        }
      }
    }
  }
  return result;
}

int *JSC::DFG::DesiredWeakReferences::addLazily(int *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  JSC::JSCell *v33;
  unint64_t *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;

  if (!a2)
    return this;
  v9 = *(unsigned __int8 *)(a2 + 5);
  if (v9 != 1)
  {
    if (v9 == 18)
    {
      __break(0xC471u);
      JUMPOUT(0x1983B8524);
    }
    v26 = (uint64_t *)(this + 2);
    v25 = *((_QWORD *)this + 1);
    if (v25
      || (this = (int *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v26, 8uLL, 0, a4, a5, a6, a7, a8), (v25 = *v26) != 0))
    {
      v27 = *(_DWORD *)(v25 - 8);
    }
    else
    {
      v27 = 0;
    }
    v28 = (~(a2 << 32) + a2) ^ ((~(a2 << 32) + a2) >> 22);
    v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
    v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
    v31 = v27 & ((v30 >> 31) ^ v30);
    v32 = (unint64_t *)(v25 + 8 * v31);
    v33 = (JSC::JSCell *)*v32;
    if (*v32)
    {
      v34 = 0;
      v35 = 1;
      while (v33 != (JSC::JSCell *)a2)
      {
        if (v33 == (JSC::JSCell *)-1)
          v34 = v32;
        v31 = (v31 + v35) & v27;
        v32 = (unint64_t *)(v25 + 8 * v31);
        v33 = (JSC::JSCell *)*v32;
        ++v35;
        if (!*v32)
        {
          if (v34)
          {
            *v34 = 0;
            --*(_DWORD *)(*v26 - 16);
            v32 = v34;
          }
          goto LABEL_31;
        }
      }
      return this;
    }
LABEL_31:
    *v32 = a2;
    v36 = *v26;
    if (*v26)
      v37 = *(_DWORD *)(v36 - 12) + 1;
    else
      v37 = 1;
    *(_DWORD *)(v36 - 12) = v37;
    v38 = *v26;
    if (*v26)
      v39 = *(_DWORD *)(v38 - 12);
    else
      v39 = 0;
    v40 = (*(_DWORD *)(v38 - 16) + v39);
    v41 = *(unsigned int *)(v38 - 4);
    if (v41 > 0x400)
    {
      if (v41 > 2 * v40)
        return this;
    }
    else
    {
      if (3 * v41 > 4 * v40)
        return this;
      if (!(_DWORD)v41)
      {
        v42 = 8;
        return (int *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v26, v42, (uint64_t)v32, a4, a5, a6, a7, a8);
      }
    }
    v42 = ((_DWORD)v41 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v41)));
    return (int *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v26, v42, (uint64_t)v32, a4, a5, a6, a7, a8);
  }
  v11 = (uint64_t *)(this + 4);
  v10 = *((_QWORD *)this + 2);
  v12 = a2 >> 4;
  if (v10
    || (this = WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(v11, 0, a3, a4, a5, a6, a7, a8), (v10 = *v11) != 0))
  {
    v13 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = v13 & v12;
  v15 = (_DWORD *)(v10 + 4 * (v13 & v12));
  v16 = *v15;
  if (!*v15)
  {
LABEL_13:
    *v15 = v12;
    v19 = *v11;
    if (*v11)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *v11;
    if (*v11)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23)
        return this;
    }
    else if (3 * v24 > 4 * v23)
    {
      return this;
    }
    return WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(v11, (unint64_t)v15, a3, a4, a5, a6, a7, a8);
  }
  v17 = 0;
  v18 = 1;
  while (v16 != (_DWORD)v12)
  {
    if (v16 == 1)
      v17 = v15;
    v14 = (v14 + v18) & v13;
    v15 = (_DWORD *)(v10 + 4 * v14);
    v16 = *v15;
    ++v18;
    if (!*v15)
    {
      if (v17)
      {
        *v17 = 0;
        --*(_DWORD *)(*v11 - 16);
        v15 = v17;
      }
      goto LABEL_13;
    }
  }
  return this;
}

void JSC::DFG::DesiredWeakReferences::finalize(JSC::DFG::DesiredWeakReferences *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  int *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int v36;
  int *v37;
  int v38;
  int *v39;
  size_t v40;
  int v41;
  size_t v42;
  int v43;

  v9 = *((_QWORD *)this + 1);
  if (v9 && (v10 = *(unsigned int *)(v9 - 12), (_DWORD)v10))
  {
    v42 = 8 * v10;
    v43 = v10;
    v11 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v10 + 8));
    *v11 = v43;
    bzero(v11 + 2, v42);
  }
  else
  {
    v11 = 0;
  }
  v12 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v11;
  if (v12)
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  v13 = (uint64_t *)*((_QWORD *)this + 1);
  if (!v13)
  {
    v16 = 0;
    v14 = 0;
LABEL_37:
    v15 = &v13[v14];
    goto LABEL_13;
  }
  v14 = *((unsigned int *)v13 - 1);
  v15 = &v13[v14];
  if (!*((_DWORD *)v13 - 3))
  {
    v16 = &v13[v14];
    goto LABEL_37;
  }
  v16 = (uint64_t *)*((_QWORD *)this + 1);
  if ((_DWORD)v14)
  {
    v17 = 8 * v14;
    v16 = (uint64_t *)*((_QWORD *)this + 1);
    while ((unint64_t)(*v16 + 1) <= 1)
    {
      ++v16;
      v17 -= 8;
      if (!v17)
      {
        v16 = v15;
        break;
      }
    }
  }
LABEL_13:
  if (v13)
    v13 += *((unsigned int *)v13 - 1);
  if (v13 != v16)
  {
    v18 = 0;
    do
    {
      v19 = (unsigned int *)*((_QWORD *)this + 3);
      if (*v19 <= v18)
      {
        __break(0xC471u);
        JUMPOUT(0x1983B8794);
      }
      v21 = *v16;
      v20 = v16 + 1;
      *(_QWORD *)&v19[2 * v18 + 2] = v21;
      v22 = v15;
      if (v20 != v15)
      {
        v22 = v20;
        while ((unint64_t)(*v22 + 1) <= 1)
        {
          if (++v22 == v15)
          {
            v22 = v15;
            break;
          }
        }
      }
      ++v18;
      v16 = v22;
    }
    while (v22 != v13);
  }
  v23 = *((_QWORD *)this + 2);
  if (v23 && (v24 = *(unsigned int *)(v23 - 12), (_DWORD)v24))
  {
    v40 = 4 * v24;
    v41 = v24;
    v25 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v24 + 4));
    *v25 = v41;
    bzero(v25 + 1, v40);
  }
  else
  {
    v25 = 0;
  }
  v26 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v25;
  if (v26)
    WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
  v27 = (int *)*((_QWORD *)this + 2);
  if (!v27)
  {
    v30 = 0;
    v28 = 0;
LABEL_39:
    v29 = &v27[v28];
    goto LABEL_40;
  }
  v28 = *(v27 - 1);
  v29 = &v27[v28];
  if (!*(v27 - 3))
  {
    v30 = &v27[v28];
    goto LABEL_39;
  }
  v30 = (int *)*((_QWORD *)this + 2);
  if ((_DWORD)v28)
  {
    v31 = 4 * v28;
    v30 = (int *)*((_QWORD *)this + 2);
    while (*v30 <= 1)
    {
      ++v30;
      v31 -= 4;
      if (!v31)
      {
        v30 = v29;
        break;
      }
    }
  }
LABEL_40:
  if (v27)
    v27 += *(v27 - 1);
  if (v27 != v30)
  {
    v32 = 0;
    v33 = (unsigned int *)*((_QWORD *)this + 4);
    v36 = *v33;
    v34 = v33 + 1;
    v35 = v36;
    do
    {
      if (v32 == v35)
      {
        __break(0xC471u);
        JUMPOUT(0x1983B8774);
      }
      v38 = *v30;
      v37 = v30 + 1;
      v34[v32] = v38;
      v39 = v29;
      if (v37 != v29)
      {
        v39 = v37;
        while (*v39 <= 1)
        {
          if (++v39 == v29)
          {
            v39 = v29;
            break;
          }
        }
      }
      ++v32;
      v30 = v39;
    }
    while (v39 != v27);
  }
}

uint64_t *WTF::HashTable<JSC::DFG::DesiredGlobalProperty,JSC::DFG::DesiredGlobalProperty,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::DesiredGlobalProperty>,WTF::HashTraits<JSC::DFG::DesiredGlobalProperty>,WTF::HashTraits<JSC::DFG::DesiredGlobalProperty>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  BOOL v22;
  _QWORD *v23;
  int v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v9 = result;
  v11 = *result;
  if (!*result)
  {
    result = (uint64_t *)WTF::HashTable<JSC::DFG::DesiredGlobalProperty,JSC::DFG::DesiredGlobalProperty,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::DesiredGlobalProperty>,WTF::HashTraits<JSC::DFG::DesiredGlobalProperty>,WTF::HashTraits<JSC::DFG::DesiredGlobalProperty>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7);
    v11 = *v9;
  }
  v12 = *(_DWORD *)(v11 - 8);
  v13 = ~(*a2 << 32) + *a2;
  v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
  v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
  v16 = *((_DWORD *)a2 + 2);
  v17 = ((((v15 + ~(v15 << 27)) >> 31) ^ (v15 + ~((_DWORD)v15 << 27))) - v16 + 8 * v16) & v12;
  v18 = v11 + 16 * v17;
  v19 = *(_QWORD *)v18;
  v20 = *(_QWORD *)v18 == 0;
  v21 = *(_DWORD *)(v18 + 8);
  if (*(_QWORD *)v18)
    v22 = 0;
  else
    v22 = v21 == 0;
  if (!v22)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v19 == *a2 && v21 == v16)
      {
        v25 = 0;
        v26 = v11 + 16 * *(unsigned int *)(v11 - 4);
        goto LABEL_11;
      }
      if (v20 && v21 == -1)
        v23 = (_QWORD *)v18;
      v17 = (v17 + v24) & v12;
      v18 = v11 + 16 * v17;
      v19 = *(_QWORD *)v18;
      v20 = *(_QWORD *)v18 == 0;
      v21 = *(_DWORD *)(v18 + 8);
      ++v24;
      if (*(_QWORD *)v18)
        v27 = 0;
      else
        v27 = v21 == 0;
    }
    while (!v27);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*v9 - 16);
      v18 = (uint64_t)v23;
    }
  }
  v28 = *a2;
  *(_DWORD *)(v18 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v18 = v28;
  v29 = *v9;
  if (*v9)
    v30 = *(_DWORD *)(v29 - 12) + 1;
  else
    v30 = 1;
  *(_DWORD *)(v29 - 12) = v30;
  v31 = *v9;
  if (*v9)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 > 2 * v33)
      goto LABEL_27;
    goto LABEL_31;
  }
  if (3 * v34 <= 4 * v33)
  {
    if (!(_DWORD)v34)
    {
      v35 = 8;
LABEL_34:
      result = (uint64_t *)WTF::HashTable<JSC::DFG::DesiredGlobalProperty,JSC::DFG::DesiredGlobalProperty,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::DesiredGlobalProperty>,WTF::HashTraits<JSC::DFG::DesiredGlobalProperty>,WTF::HashTraits<JSC::DFG::DesiredGlobalProperty>>::rehash(v9, v35, v18, a3, a4, a5, a6, a7);
      v18 = (uint64_t)result;
      v31 = *v9;
      if (*v9)
        v34 = *(unsigned int *)(v31 - 4);
      else
        v34 = 0;
      goto LABEL_27;
    }
LABEL_31:
    v35 = ((_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34)));
    goto LABEL_34;
  }
LABEL_27:
  v26 = v31 + 16 * v34;
  v25 = 1;
LABEL_11:
  *(_QWORD *)a8 = v18;
  *(_QWORD *)(a8 + 8) = v26;
  *(_BYTE *)(a8 + 16) = v25;
  return result;
}

_OWORD *WTF::HashTable<JSC::DFG::DesiredGlobalProperty,JSC::DFG::DesiredGlobalProperty,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::DesiredGlobalProperty>,WTF::HashTraits<JSC::DFG::DesiredGlobalProperty>,WTF::HashTraits<JSC::DFG::DesiredGlobalProperty>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  _OWORD *v40;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v24 = 0;
    v22 = 0;
    do
    {
      v25 = v11 + 16 * v24;
      v26 = *(_DWORD *)(v25 + 8);
      if (*(_QWORD *)v25)
        v27 = 1;
      else
        v27 = (v26 + 1) >= 2;
      if (v27)
      {
        v28 = *a1;
        if (*a1)
          v29 = *(_DWORD *)(v28 - 8);
        else
          v29 = 0;
        v30 = 0;
        v31 = (~(*(_QWORD *)v25 << 32) + *(_QWORD *)v25) ^ ((~(*(_QWORD *)v25 << 32) + *(_QWORD *)v25) >> 22);
        v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((unint64_t)(v31 + ~(v31 << 13)) >> 8));
        v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
        v34 = ((v33 >> 31) ^ v33) - v26 + 8 * v26;
        do
        {
          v35 = v34 & v29;
          v36 = (uint64_t *)(v28 + 16 * v35);
          v37 = *v36;
          v38 = *((_DWORD *)v36 + 2);
          v34 = ++v30 + v35;
          if (v37)
            v39 = 0;
          else
            v39 = v38 == 0;
        }
        while (!v39);
        v40 = (_OWORD *)(v28 + 16 * v35);
        *v40 = *(_OWORD *)v25;
        if (v25 == a3)
          v22 = v40;
      }
      ++v24;
    }
    while (v24 != v12);
    goto LABEL_24;
  }
  v22 = 0;
  result = 0;
  if (v11)
  {
LABEL_24:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

void JSC::DFG::WatchpointCollector::~WatchpointCollector(JSC::DFG::WatchpointCollector *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v9 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (*v9)
    {
      v10 = (uint64_t)&v9[22 * *v9 + 2];
      v11 = (uint64_t *)(v9 + 10);
      do
      {
        *(v11 - 4) = (uint64_t)off_1E3580B60;
        v12 = v11 - 4;
        v13 = (_QWORD *)v11[4];
        if (v13)
        {
          v14 = v11[3];
          *v13 = v14;
          *(_QWORD *)(v14 + 8) = v13;
          v11[3] = 0;
          v11[4] = 0;
        }
        v15 = (uint64_t *)v11[1];
        if (v15)
        {
          v16 = *v11;
          *v15 = *v11;
          *(_QWORD *)(v16 + 8) = v15;
          *v11 = 0;
          v11[1] = 0;
        }
        v11 += 11;
      }
      while (v12 + 11 != (uint64_t *)v10);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v17)
  {
    v18 = (uint64_t *)(v17 + 2);
    v19 = *v17;
    if ((_DWORD)v19)
    {
      v20 = 48 * v19;
      do
      {
        v21 = (uint64_t *)v18[1];
        if (v21)
        {
          v22 = *v18;
          *v21 = *v18;
          *(_QWORD *)(v22 + 8) = v21;
          *v18 = 0;
          v18[1] = 0;
        }
        v18 += 6;
        v20 -= 48;
      }
      while (v20);
    }
    WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v23 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v23)
  {
    v24 = (uint64_t *)(v23 + 2);
    v25 = *v23;
    if ((_DWORD)v25)
    {
      v26 = 24 * v25;
      do
      {
        v27 = (uint64_t *)v24[1];
        if (v27)
        {
          v28 = *v24;
          *v27 = *v24;
          *(_QWORD *)(v28 + 8) = v27;
          *v24 = 0;
          v24[1] = 0;
        }
        v24 += 3;
        v26 -= 24;
      }
      while (v26);
    }
    WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
  }
}

